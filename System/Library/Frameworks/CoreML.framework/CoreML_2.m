uint64_t sub_19E6AD228(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E945D128);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_19E6AD288()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_19E6AD2C8(int a1, void *a2)
{
  return sub_19E6A9E14(a1, a2);
}

uint64_t sub_19E6AD2D0(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t *sub_19E6AD318@<X0>(unint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  return sub_19E6AD468(a1, a2);
}

uint64_t sub_19E6AD330@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_19E6AB2E8(a1, v2, a2);
}

uint64_t *sub_19E6AD34C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_19E6AB340(a1, v2, a2);
}

uint64_t sub_19E6AD368(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(void *)(a3 + 16)) {
    return 0;
  }
  sub_19E662C34(a1, a2);
  if ((v3 & 1) == 0) {
    return 0;
  }
  unint64_t v4 = swift_bridgeObjectRetain();
  sub_19E6A2E34(v4);
  uint64_t v6 = v5;
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(v6 + 16);
  if (!v8)
  {
    uint64_t v9 = 0;
LABEL_10:
    swift_bridgeObjectRelease();
    return v9;
  }
  uint64_t v9 = 0;
  v10 = (uint64_t *)(v6 + 32);
  while (1)
  {
    uint64_t v11 = *v10++;
    BOOL v12 = __CFADD__(v9, v11);
    v9 += v11;
    if (v12) {
      break;
    }
    if (!--v8) {
      goto LABEL_10;
    }
  }
  __break(1u);
  return result;
}

id sub_19E6AD414@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*(id *)(v2 + 40), sel_signaledValue);
  uint64_t v6 = *a1 - (void)result;
  if (*a1 < (unint64_t)result) {
    uint64_t v6 = 0;
  }
  *a2 = v6;
  return result;
}

unint64_t *sub_19E6AD468@<X0>(unint64_t *result@<X0>, BOOL *a2@<X8>)
{
  unint64_t v4 = *result;
  if (*result)
  {
    id result = (unint64_t *)objc_msgSend(*(id *)(v2 + 40), sel_signaledValue);
    BOOL v5 = (unint64_t)result >= v4;
  }
  else
  {
    BOOL v5 = 1;
  }
  *a2 = v5;
  return result;
}

uint64_t dynamic_cast_existential_2_conditional(uint64_t a1)
{
  uint64_t result = swift_conformsToProtocol2();
  if (result)
  {
    if (swift_conformsToProtocol2()) {
      return a1;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t sub_19E6AD54C()
{
  return sub_19E6A47D4();
}

uint64_t sub_19E6AD5C8(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  if (!v1) {
    return v2;
  }
  uint64_t v3 = a1;
  uint64_t v38 = MEMORY[0x1E4FBC860];
  sub_19E66F858(0, v1, 0);
  uint64_t v2 = v38;
  uint64_t result = sub_19E5F4764(v3);
  uint64_t v6 = result;
  uint64_t v7 = 0;
  uint64_t v8 = v3 + 64;
  uint64_t v33 = v3 + 64;
  uint64_t v30 = v3 + 80;
  int64_t v31 = v1;
  int v32 = v5;
  while ((v6 & 0x8000000000000000) == 0 && v6 < 1 << *(unsigned char *)(v3 + 32))
  {
    unint64_t v11 = (unint64_t)v6 >> 6;
    if ((*(void *)(v8 + 8 * ((unint64_t)v6 >> 6)) & (1 << v6)) == 0) {
      goto LABEL_23;
    }
    if (*(_DWORD *)(v3 + 36) != v5) {
      goto LABEL_24;
    }
    BOOL v12 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v6);
    uint64_t v13 = v12[1];
    uint64_t v34 = *v12;
    v14 = *(void **)(*(void *)(v3 + 56) + 8 * v6);
    swift_bridgeObjectRetain();
    uint64_t result = sub_19E6ADE74(v14, (uint64_t)&v35);
    long long v15 = v35;
    long long v16 = v36;
    long long v17 = v37;
    uint64_t v38 = v2;
    uint64_t v18 = v3;
    unint64_t v20 = *(void *)(v2 + 16);
    unint64_t v19 = *(void *)(v2 + 24);
    if (v20 >= v19 >> 1)
    {
      long long v28 = v36;
      long long v29 = v35;
      long long v27 = v37;
      uint64_t result = sub_19E66F858(v19 > 1, v20 + 1, 1);
      long long v17 = v27;
      long long v16 = v28;
      long long v15 = v29;
      uint64_t v2 = v38;
    }
    *(void *)(v2 + 16) = v20 + 1;
    uint64_t v21 = v2 + (v20 << 6);
    *(void *)(v21 + 32) = v34;
    *(void *)(v21 + 40) = v13;
    *(_OWORD *)(v21 + 48) = v15;
    *(_OWORD *)(v21 + 64) = v16;
    *(_OWORD *)(v21 + 80) = v17;
    int64_t v9 = 1 << *(unsigned char *)(v18 + 32);
    if (v6 >= v9) {
      goto LABEL_25;
    }
    uint64_t v8 = v33;
    uint64_t v22 = *(void *)(v33 + 8 * v11);
    if ((v22 & (1 << v6)) == 0) {
      goto LABEL_26;
    }
    uint64_t v3 = v18;
    int v5 = v32;
    if (*(_DWORD *)(v18 + 36) != v32) {
      goto LABEL_27;
    }
    unint64_t v23 = v22 & (-2 << (v6 & 0x3F));
    if (v23)
    {
      int64_t v9 = __clz(__rbit64(v23)) | v6 & 0xFFFFFFFFFFFFFFC0;
      int64_t v10 = v31;
    }
    else
    {
      unint64_t v24 = v11 + 1;
      unint64_t v25 = (unint64_t)(v9 + 63) >> 6;
      int64_t v10 = v31;
      if (v11 + 1 < v25)
      {
        unint64_t v26 = *(void *)(v33 + 8 * v24);
        if (v26)
        {
LABEL_20:
          int64_t v9 = __clz(__rbit64(v26)) + (v24 << 6);
        }
        else
        {
          while (v25 - 2 != v11)
          {
            unint64_t v26 = *(void *)(v30 + 8 * v11++);
            if (v26)
            {
              unint64_t v24 = v11 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    ++v7;
    uint64_t v6 = v9;
    if (v7 == v10) {
      return v2;
    }
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_19E6AD81C(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  if (!v1) {
    return v2;
  }
  uint64_t v3 = a1;
  uint64_t v32 = MEMORY[0x1E4FBC860];
  sub_19E66FA08(0, v1, 0);
  uint64_t v2 = v32;
  uint64_t result = sub_19E5F4764(v3);
  uint64_t v6 = result;
  uint64_t v7 = 0;
  uint64_t v8 = v3 + 64;
  uint64_t v29 = v3 + 64;
  uint64_t v26 = v3 + 80;
  int64_t v27 = v1;
  int v28 = v5;
  while ((v6 & 0x8000000000000000) == 0 && v6 < 1 << *(unsigned char *)(v3 + 32))
  {
    unint64_t v11 = (unint64_t)v6 >> 6;
    if ((*(void *)(v8 + 8 * ((unint64_t)v6 >> 6)) & (1 << v6)) == 0) {
      goto LABEL_23;
    }
    if (*(_DWORD *)(v3 + 36) != v5) {
      goto LABEL_24;
    }
    BOOL v12 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v6);
    uint64_t v13 = v12[1];
    uint64_t v30 = *v12;
    v14 = *(void **)(*(void *)(v3 + 56) + 8 * v6);
    swift_bridgeObjectRetain();
    uint64_t result = sub_19E6ADB88(v14, (unint64_t)&v31);
    long long v15 = v31;
    uint64_t v32 = v2;
    uint64_t v16 = v3;
    unint64_t v18 = *(void *)(v2 + 16);
    unint64_t v17 = *(void *)(v2 + 24);
    if (v18 >= v17 >> 1)
    {
      long long v25 = v31;
      uint64_t result = sub_19E66FA08(v17 > 1, v18 + 1, 1);
      long long v15 = v25;
      uint64_t v2 = v32;
    }
    *(void *)(v2 + 16) = v18 + 1;
    uint64_t v19 = v2 + 32 * v18;
    *(void *)(v19 + 32) = v30;
    *(void *)(v19 + 40) = v13;
    *(_OWORD *)(v19 + 48) = v15;
    int64_t v9 = 1 << *(unsigned char *)(v16 + 32);
    if (v6 >= v9) {
      goto LABEL_25;
    }
    uint64_t v8 = v29;
    uint64_t v20 = *(void *)(v29 + 8 * v11);
    if ((v20 & (1 << v6)) == 0) {
      goto LABEL_26;
    }
    uint64_t v3 = v16;
    int v5 = v28;
    if (*(_DWORD *)(v16 + 36) != v28) {
      goto LABEL_27;
    }
    unint64_t v21 = v20 & (-2 << (v6 & 0x3F));
    if (v21)
    {
      int64_t v9 = __clz(__rbit64(v21)) | v6 & 0xFFFFFFFFFFFFFFC0;
      int64_t v10 = v27;
    }
    else
    {
      unint64_t v22 = v11 + 1;
      unint64_t v23 = (unint64_t)(v9 + 63) >> 6;
      int64_t v10 = v27;
      if (v11 + 1 < v23)
      {
        unint64_t v24 = *(void *)(v29 + 8 * v22);
        if (v24)
        {
LABEL_20:
          int64_t v9 = __clz(__rbit64(v24)) + (v22 << 6);
        }
        else
        {
          while (v23 - 2 != v11)
          {
            unint64_t v24 = *(void *)(v26 + 8 * v11++);
            if (v24)
            {
              unint64_t v22 = v11 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    ++v7;
    uint64_t v6 = v9;
    if (v7 == v10) {
      return v2;
    }
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

void sub_19E6ADA5C(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v4 = objc_msgSend(a1, sel_neuralNetwork);
  if (v4)
  {

    sub_19E6AEB34(a1, &v10);
    char v5 = 0;
    uint64_t v6 = v10;
    *(void *)&long long v7 = v11;
  }
  else
  {
    id v8 = objc_msgSend(a1, sel_program);
    if (v8)
    {

      sub_19E6AE920(a1, &v10);
      uint64_t v6 = v10;
      *(void *)&long long v7 = v11;
      char v5 = 1;
    }
    else
    {
      id v9 = objc_msgSend(a1, sel_pipeline);
      if (v9)
      {

        sub_19E6AEE30(a1, &v10);
        uint64_t v6 = v10;
        long long v7 = v11;
        char v5 = 2;
      }
      else
      {

        uint64_t v6 = 0;
        long long v7 = 0uLL;
        char v5 = 3;
      }
    }
  }
  *(void *)a2 = v6;
  *(_OWORD *)(a2 + 8) = v7;
  *(unsigned char *)(a2 + 24) = v5;
}

uint64_t MLModelStructure.Program.NamedValueType.name.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_19E6ADB88@<X0>(void *a1@<X0>, unint64_t a2@<X8>)
{
  unint64_t v2 = (unint64_t)a1;
  id v4 = objc_msgSend(a1, sel_bindings);
  sub_19E64A9C0(0, &qword_1E945D1E0);
  unint64_t v5 = sub_19EBF68E8();

  if (v5 >> 62) {
    goto LABEL_18;
  }
  uint64_t v6 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v6)
  {
    while (1)
    {
      uint64_t v23 = MEMORY[0x1E4FBC860];
      sub_19E66F988(0, v6 & ~(v6 >> 63), 0);
      if (v6 < 0) {
        break;
      }
      uint64_t v20 = (void *)a2;
      unint64_t v21 = v2;
      uint64_t v7 = 0;
      uint64_t v8 = v23;
      unint64_t v22 = v5 & 0xC000000000000001;
      unint64_t v2 = v5;
      while (v6 != v7)
      {
        if (v22) {
          id v9 = (id)MEMORY[0x19F3BF970](v7, v5);
        }
        else {
          id v9 = *(id *)(v5 + 8 * v7 + 32);
        }
        uint64_t v10 = v9;
        id v11 = objc_msgSend(v9, sel_value);
        if (v11)
        {

          uint64_t v12 = 0;
          uint64_t v13 = 0;
        }
        else
        {
          id v14 = objc_msgSend(v10, sel_name);
          if (!v14) {
            goto LABEL_22;
          }
          long long v15 = v14;
          uint64_t v12 = sub_19EBF6798();
          uint64_t v13 = v16;
        }
        a2 = *(void *)(v23 + 16);
        unint64_t v17 = *(void *)(v23 + 24);
        if (a2 >= v17 >> 1) {
          sub_19E66F988(v17 > 1, a2 + 1, 1);
        }
        ++v7;
        *(void *)(v23 + 16) = a2 + 1;
        uint64_t v18 = v23 + 24 * a2;
        *(void *)(v18 + 32) = v12;
        *(void *)(v18 + 40) = v13;
        *(unsigned char *)(v18 + 48) = v11 == 0;
        unint64_t v5 = v2;
        if (v6 == v7)
        {
          uint64_t result = swift_bridgeObjectRelease();
          a2 = (unint64_t)v20;
          unint64_t v2 = v21;
          goto LABEL_20;
        }
      }
      __break(1u);
LABEL_18:
      swift_bridgeObjectRetain();
      uint64_t v6 = sub_19EBF7228();
      swift_bridgeObjectRelease();
      if (!v6) {
        goto LABEL_19;
      }
    }
    __break(1u);
LABEL_22:
    uint64_t result = sub_19EBF71F8();
    __break(1u);
  }
  else
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v8 = MEMORY[0x1E4FBC860];
LABEL_20:
    *(void *)a2 = v8;
    *(void *)(a2 + 8) = v2;
  }
  return result;
}

uint64_t MLModelStructure.Program.Function.inputs.getter()
{
  return swift_bridgeObjectRetain();
}

id MLModelStructure.Program.Function.block.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[2];
  uint64_t v3 = v1[3];
  id v5 = (id)v1[4];
  *a1 = v1[1];
  a1[1] = v2;
  a1[2] = v3;
  a1[3] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();

  return v5;
}

uint64_t sub_19E6ADE74@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = a1;
  id v4 = objc_msgSend(a1, sel_inputs);
  sub_19E64A9C0(0, &qword_1E945D1C0);
  unint64_t v5 = sub_19EBF68E8();

  if (!(v5 >> 62))
  {
    uint64_t v6 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v6) {
      goto LABEL_3;
    }
LABEL_13:
    swift_bridgeObjectRelease();
    uint64_t v9 = MEMORY[0x1E4FBC860];
LABEL_14:
    uint64_t result = sub_19E6AE090(objc_msgSend(v2, sel_block), (uint64_t *)v24);
    long long v20 = v24[0];
    long long v21 = v24[1];
    *(void *)a2 = v9;
    *(_OWORD *)(a2 + 8) = v20;
    *(_OWORD *)(a2 + 24) = v21;
    *(void *)(a2 + 40) = v2;
    return result;
  }
  swift_bridgeObjectRetain();
  uint64_t v6 = sub_19EBF7228();
  swift_bridgeObjectRelease();
  if (!v6) {
    goto LABEL_13;
  }
LABEL_3:
  *(void *)&v24[0] = MEMORY[0x1E4FBC860];
  uint64_t result = sub_19E66F9C8(0, v6 & ~(v6 >> 63), 0);
  if ((v6 & 0x8000000000000000) == 0)
  {
    uint64_t v22 = a2;
    uint64_t v23 = v2;
    uint64_t v8 = 0;
    uint64_t v9 = *(void *)&v24[0];
    do
    {
      if ((v5 & 0xC000000000000001) != 0) {
        id v10 = (id)MEMORY[0x19F3BF970](v8, v5);
      }
      else {
        id v10 = *(id *)(v5 + 8 * v8 + 32);
      }
      id v11 = v10;
      id v12 = objc_msgSend(v10, sel_name, v22, v23);
      uint64_t v13 = sub_19EBF6798();
      uint64_t v15 = v14;

      id v16 = objc_msgSend(v11, sel_type);
      *(void *)&v24[0] = v9;
      unint64_t v18 = *(void *)(v9 + 16);
      unint64_t v17 = *(void *)(v9 + 24);
      if (v18 >= v17 >> 1)
      {
        sub_19E66F9C8(v17 > 1, v18 + 1, 1);
        uint64_t v9 = *(void *)&v24[0];
      }
      ++v8;
      *(void *)(v9 + 16) = v18 + 1;
      uint64_t v19 = v9 + 16 * v18;
      *(void *)(v19 + 32) = v13;
      *(void *)(v19 + 40) = v15;
    }
    while (v6 != v8);
    swift_bridgeObjectRelease();
    a2 = v22;
    uint64_t v2 = v23;
    goto LABEL_14;
  }
  __break(1u);
  return result;
}

uint64_t sub_19E6AE090@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3 = objc_msgSend(a1, sel_inputs);
  sub_19E64A9C0(0, &qword_1E945D1C0);
  unint64_t v4 = sub_19EBF68E8();

  if (v4 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = sub_19EBF7228();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v38 = a2;
  if (v5)
  {
    uint64_t v40 = MEMORY[0x1E4FBC860];
    uint64_t result = sub_19E66F9C8(0, v5 & ~(v5 >> 63), 0);
    if (v5 < 0)
    {
      __break(1u);
      goto LABEL_30;
    }
    uint64_t v7 = 0;
    uint64_t v8 = v40;
    do
    {
      if ((v4 & 0xC000000000000001) != 0) {
        id v9 = (id)MEMORY[0x19F3BF970](v7, v4);
      }
      else {
        id v9 = *(id *)(v4 + 8 * v7 + 32);
      }
      id v10 = v9;
      id v11 = objc_msgSend(v9, sel_name);
      uint64_t v12 = sub_19EBF6798();
      uint64_t v14 = v13;

      id v15 = objc_msgSend(v10, sel_type);
      uint64_t v40 = v8;
      unint64_t v17 = *(void *)(v8 + 16);
      unint64_t v16 = *(void *)(v8 + 24);
      if (v17 >= v16 >> 1)
      {
        sub_19E66F9C8(v16 > 1, v17 + 1, 1);
        uint64_t v8 = v40;
      }
      ++v7;
      *(void *)(v8 + 16) = v17 + 1;
      uint64_t v18 = v8 + 16 * v17;
      *(void *)(v18 + 32) = v12;
      *(void *)(v18 + 40) = v14;
    }
    while (v5 != v7);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v8 = MEMORY[0x1E4FBC860];
  }
  id v19 = objc_msgSend(a1, sel_outputNames);
  uint64_t v20 = sub_19EBF68E8();

  id v21 = objc_msgSend(a1, sel_operations);
  sub_19E64A9C0(0, &qword_1E945D1C8);
  unint64_t v22 = sub_19EBF68E8();

  if (!(v22 >> 62))
  {
    uint64_t v23 = *(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v23) {
      goto LABEL_16;
    }
LABEL_27:
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v25 = MEMORY[0x1E4FBC860];
LABEL_28:
    *uint64_t v38 = v8;
    v38[1] = v20;
    v38[2] = v25;
    v38[3] = (uint64_t)a1;
    return result;
  }
  swift_bridgeObjectRetain();
  uint64_t v23 = sub_19EBF7228();
  swift_bridgeObjectRelease();
  if (!v23) {
    goto LABEL_27;
  }
LABEL_16:
  unint64_t v37 = v22;
  uint64_t v44 = MEMORY[0x1E4FBC860];
  uint64_t result = sub_19E66F9A8(0, v23 & ~(v23 >> 63), 0);
  if ((v23 & 0x8000000000000000) == 0)
  {
    uint64_t v24 = 0;
    uint64_t v25 = v44;
    unint64_t v26 = v37;
    do
    {
      if ((v37 & 0xC000000000000001) != 0) {
        id v27 = (id)MEMORY[0x19F3BF970](v24, v26);
      }
      else {
        id v27 = *(id *)(v26 + 8 * v24 + 32);
      }
      sub_19E6AE454(v27, &v40);
      uint64_t v28 = v40;
      long long v29 = v41;
      long long v30 = v42;
      uint64_t v31 = v43;
      uint64_t v44 = v25;
      unint64_t v33 = *(void *)(v25 + 16);
      unint64_t v32 = *(void *)(v25 + 24);
      if (v33 >= v32 >> 1)
      {
        long long v35 = v42;
        long long v36 = v41;
        sub_19E66F9A8(v32 > 1, v33 + 1, 1);
        long long v30 = v35;
        long long v29 = v36;
        unint64_t v26 = v37;
        uint64_t v25 = v44;
      }
      *(void *)(v25 + 16) = v33 + 1;
      unint64_t v34 = v25 + 48 * v33;
      *(void *)(v34 + 32) = v28;
      ++v24;
      *(_OWORD *)(v34 + 40) = v29;
      *(_OWORD *)(v34 + 56) = v30;
      *(void *)(v34 + 72) = v31;
    }
    while (v23 != v24);
    uint64_t result = swift_bridgeObjectRelease();
    goto LABEL_28;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t MLModelStructure.Program.Block.inputs.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MLModelStructure.Program.Block.outputNames.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MLModelStructure.Program.Block.operations.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_19E6AE454@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2 = a1;
  id v4 = objc_msgSend(a1, sel_operatorName);
  uint64_t v5 = sub_19EBF6798();
  uint64_t v44 = v6;

  id v7 = objc_msgSend(v2, sel_inputs);
  sub_19E64A9C0(0, &qword_1E945D1D0);
  uint64_t v8 = sub_19EBF6638();

  uint64_t v9 = sub_19E6AD81C(v8);
  swift_bridgeObjectRelease();
  if (*(void *)(v9 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E945CDF8);
    uint64_t v10 = sub_19EBF7268();
  }
  else
  {
    uint64_t v10 = MEMORY[0x1E4FBC868];
  }
  *(void *)&long long v47 = v10;
  uint64_t v11 = swift_bridgeObjectRetain();
  sub_19E6B0B68(v11, 1, (uint64_t *)&v47);
  swift_bridgeObjectRelease();
  uint64_t v43 = v47;
  id v12 = objc_msgSend(v2, sel_outputs);
  sub_19E64A9C0(0, &qword_1E945D1C0);
  unint64_t v13 = sub_19EBF68E8();

  uint64_t v14 = MEMORY[0x1E4FBC860];
  uint64_t v45 = v5;
  v46 = a2;
  if (v13 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v15 = sub_19EBF7228();
    swift_bridgeObjectRelease();
    if (v15) {
      goto LABEL_6;
    }
LABEL_16:
    swift_bridgeObjectRelease();
    uint64_t v17 = MEMORY[0x1E4FBC860];
    goto LABEL_17;
  }
  uint64_t v15 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v15) {
    goto LABEL_16;
  }
LABEL_6:
  *(void *)&long long v47 = v14;
  sub_19E66F9C8(0, v15 & ~(v15 >> 63), 0);
  if (v15 < 0)
  {
    __break(1u);
    goto LABEL_32;
  }
  long long v41 = v2;
  uint64_t v16 = 0;
  uint64_t v17 = v47;
  do
  {
    if ((v13 & 0xC000000000000001) != 0) {
      id v18 = (id)MEMORY[0x19F3BF970](v16, v13);
    }
    else {
      id v18 = *(id *)(v13 + 8 * v16 + 32);
    }
    id v19 = v18;
    id v20 = objc_msgSend(v18, sel_name);
    uint64_t v21 = sub_19EBF6798();
    uint64_t v23 = v22;

    id v24 = objc_msgSend(v19, sel_type);
    *(void *)&long long v47 = v17;
    unint64_t v26 = *(void *)(v17 + 16);
    unint64_t v25 = *(void *)(v17 + 24);
    if (v26 >= v25 >> 1)
    {
      sub_19E66F9C8(v25 > 1, v26 + 1, 1);
      uint64_t v17 = v47;
    }
    ++v16;
    *(void *)(v17 + 16) = v26 + 1;
    unint64_t v27 = v17 + 16 * v26;
    *(void *)(v27 + 32) = v21;
    *(void *)(v27 + 40) = v23;
  }
  while (v15 != v16);
  swift_bridgeObjectRelease();
  uint64_t v2 = v41;
  uint64_t v14 = MEMORY[0x1E4FBC860];
LABEL_17:
  id v28 = objc_msgSend(v2, sel_blocks);
  sub_19E64A9C0(0, &qword_1E945D1D8);
  unint64_t v29 = sub_19EBF68E8();

  if (!(v29 >> 62))
  {
    uint64_t v30 = *(void *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v30) {
      goto LABEL_19;
    }
LABEL_29:
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v32 = MEMORY[0x1E4FBC860];
LABEL_30:
    uint64_t *v46 = v45;
    v46[1] = v44;
    v46[2] = v43;
    v46[3] = v17;
    v46[4] = v32;
    v46[5] = (uint64_t)v2;
    return result;
  }
  swift_bridgeObjectRetain();
  uint64_t v30 = sub_19EBF7228();
  swift_bridgeObjectRelease();
  if (!v30) {
    goto LABEL_29;
  }
LABEL_19:
  uint64_t v49 = v14;
  sub_19E66F9E8(0, v30 & ~(v30 >> 63), 0);
  if ((v30 & 0x8000000000000000) == 0)
  {
    uint64_t v31 = 0;
    uint64_t v32 = v49;
    do
    {
      if ((v29 & 0xC000000000000001) != 0) {
        id v33 = (id)MEMORY[0x19F3BF970](v31, v29);
      }
      else {
        id v33 = *(id *)(v29 + 8 * v31 + 32);
      }
      sub_19E6AE090(&v47, v33);
      long long v34 = v47;
      long long v35 = v48;
      uint64_t v49 = v32;
      unint64_t v37 = *(void *)(v32 + 16);
      unint64_t v36 = *(void *)(v32 + 24);
      if (v37 >= v36 >> 1)
      {
        long long v40 = v48;
        *(_OWORD *)long long v42 = v47;
        sub_19E66F9E8(v36 > 1, v37 + 1, 1);
        long long v35 = v40;
        long long v34 = *(_OWORD *)v42;
        uint64_t v32 = v49;
      }
      ++v31;
      *(void *)(v32 + 16) = v37 + 1;
      unint64_t v38 = v32 + 32 * v37;
      *(_OWORD *)(v38 + 32) = v34;
      *(_OWORD *)(v38 + 48) = v35;
    }
    while (v30 != v31);
    uint64_t result = swift_bridgeObjectRelease();
    goto LABEL_30;
  }
LABEL_32:
  __break(1u);
  uint64_t result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t MLModelStructure.Program.Operation.operatorName.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MLModelStructure.Program.Operation.inputs.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MLModelStructure.Program.Operation.outputs.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MLModelStructure.Program.Operation.blocks.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_19E6AE920@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  id v4 = objc_msgSend(a1, sel_program);
  if (v4)
  {
    uint64_t v5 = v4;
    id v6 = objc_msgSend(v4, sel_functions);
    sub_19E64A9C0(0, &qword_1E945D1B8);
    uint64_t v7 = sub_19EBF6638();

    uint64_t v8 = sub_19E6AD5C8(v7);
    swift_bridgeObjectRelease();
    if (*(void *)(v8 + 16))
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1E945CDF0);
      uint64_t v9 = sub_19EBF7268();
    }
    else
    {
      uint64_t v9 = MEMORY[0x1E4FBC868];
    }
    uint64_t v12 = v9;
    uint64_t v10 = swift_bridgeObjectRetain();
    sub_19E6B07E0(v10, 1, &v12);

    uint64_t result = swift_bridgeObjectRelease();
    *a2 = v12;
    a2[1] = (uint64_t)a1;
  }
  else
  {
    sub_19EBF71F8();
    __break(1u);
    uint64_t result = swift_unexpectedError();
    __break(1u);
  }
  return result;
}

uint64_t MLModelStructure.NeuralNetwork.Layer.name.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MLModelStructure.NeuralNetwork.Layer.type.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MLModelStructure.NeuralNetwork.Layer.inputNames.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MLModelStructure.NeuralNetwork.Layer.outputNames.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MLModelStructure.NeuralNetwork.layers.getter()
{
  return swift_bridgeObjectRetain();
}

void sub_19E6AEB34(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1;
  id v4 = objc_msgSend(a1, sel_neuralNetwork);
  if (!v4) {
    goto LABEL_17;
  }
  uint64_t v5 = v4;
  id v6 = objc_msgSend(v4, sel_layers);
  sub_19E64A9C0(0, &qword_1E945D1B0);
  unint64_t v7 = sub_19EBF68E8();

  if (v7 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = sub_19EBF7228();
    swift_bridgeObjectRelease();
    if (v8) {
      goto LABEL_4;
    }
LABEL_14:
    swift_bridgeObjectRelease();

    uint64_t v10 = MEMORY[0x1E4FBC860];
LABEL_15:
    *a2 = v10;
    a2[1] = v2;
    return;
  }
  uint64_t v8 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v8) {
    goto LABEL_14;
  }
LABEL_4:
  uint64_t v34 = MEMORY[0x1E4FBC860];
  sub_19E66F838(0, v8 & ~(v8 >> 63), 0);
  if ((v8 & 0x8000000000000000) == 0)
  {
    unint64_t v27 = v5;
    id v28 = a2;
    uint64_t v9 = 0;
    uint64_t v10 = v34;
    unint64_t v29 = v2;
    unint64_t v30 = v7 & 0xC000000000000001;
    unint64_t v31 = v7;
    do
    {
      if (v30) {
        id v11 = (id)MEMORY[0x19F3BF970](v9, v7);
      }
      else {
        id v11 = *(id *)(v7 + 8 * v9 + 32);
      }
      uint64_t v12 = v11;
      id v13 = objc_msgSend(v11, sel_name);
      uint64_t v14 = sub_19EBF6798();
      uint64_t v32 = v15;
      uint64_t v33 = v14;

      id v16 = objc_msgSend(v12, sel_type);
      uint64_t v17 = sub_19EBF6798();
      uint64_t v19 = v18;

      id v20 = objc_msgSend(v12, sel_inputNames);
      uint64_t v21 = sub_19EBF68E8();

      id v22 = objc_msgSend(v12, sel_outputNames);
      uint64_t v23 = sub_19EBF68E8();

      unint64_t v25 = *(void *)(v34 + 16);
      unint64_t v24 = *(void *)(v34 + 24);
      if (v25 >= v24 >> 1) {
        sub_19E66F838(v24 > 1, v25 + 1, 1);
      }
      ++v9;
      *(void *)(v34 + 16) = v25 + 1;
      unint64_t v26 = (void *)(v34 + 56 * v25);
      v26[4] = v33;
      v26[5] = v32;
      v26[6] = v17;
      v26[7] = v19;
      v26[8] = v21;
      v26[9] = v23;
      v26[10] = v12;
      unint64_t v7 = v31;
    }
    while (v8 != v9);
    swift_bridgeObjectRelease();

    a2 = v28;
    uint64_t v2 = v29;
    goto LABEL_15;
  }
  __break(1u);
LABEL_17:
  sub_19EBF71F8();
  __break(1u);
}

uint64_t MLModelStructure.Pipeline.subModelNames.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MLModelStructure.Pipeline.subModels.getter()
{
  return swift_bridgeObjectRetain();
}

void sub_19E6AEE30(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2 = (uint64_t)a1;
  id v4 = objc_msgSend(a1, sel_pipeline);
  if (!v4)
  {
    while (1)
    {
LABEL_30:
      sub_19EBF71F8();
      __break(1u);
      swift_unexpectedError();
      __break(1u);
    }
  }
  uint64_t v5 = v4;
  id v6 = objc_msgSend(v4, sel_subModelNames);
  uint64_t v7 = sub_19EBF68E8();

  id v8 = objc_msgSend(v5, sel_subModels);
  sub_19E64A9C0(0, &qword_1E945D1E8);
  unint64_t v9 = sub_19EBF68E8();

  if (v9 >> 62) {
    goto LABEL_26;
  }
  uint64_t v10 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v10)
  {
LABEL_27:
    swift_bridgeObjectRelease();

    uint64_t v5 = (void *)MEMORY[0x1E4FBC860];
    goto LABEL_28;
  }
  while (1)
  {
    unint64_t v37 = (void *)MEMORY[0x1E4FBC860];
    sub_19E66F878(0, v10 & ~(v10 >> 63), 0);
    if (v10 < 0)
    {
      __break(1u);
      goto LABEL_30;
    }
    uint64_t v31 = v7;
    uint64_t v32 = v5;
    uint64_t v33 = a2;
    uint64_t v34 = v2;
    uint64_t v11 = 0;
    uint64_t v2 = 0;
    uint64_t v5 = v37;
    unint64_t v12 = v9 & 0xC000000000000001;
    id v13 = &selRef_notify;
LABEL_6:
    if (v10 != v11) {
      break;
    }
    __break(1u);
LABEL_26:
    swift_bridgeObjectRetain();
    uint64_t v10 = sub_19EBF7228();
    swift_bridgeObjectRelease();
    if (!v10) {
      goto LABEL_27;
    }
  }
  if (v12) {
    id v14 = (id)MEMORY[0x19F3BF970](v11, v9);
  }
  else {
    id v14 = *(id *)(v9 + 8 * v11 + 32);
  }
  uint64_t v15 = v14;
  id v16 = objc_msgSend(v14, sel_neuralNetwork);
  if (v16)
  {

    sub_19E6AEB34(v15, &v35);
    uint64_t v7 = 0;
    a2 = v35;
    *(void *)&long long v17 = v36;
  }
  else
  {
    id v18 = [v15 v13[221]];
    if (v18)
    {

      id v19 = [v15 v13[221]];
      if (!v19) {
        goto LABEL_30;
      }
      id v20 = v19;
      id v21 = objc_msgSend(v19, sel_functions);
      sub_19E64A9C0(0, &qword_1E945D1B8);
      uint64_t v22 = sub_19EBF6638();

      uint64_t v23 = sub_19E6AD5C8(v22);
      swift_bridgeObjectRelease();
      if (*(void *)(v23 + 16))
      {
        __swift_instantiateConcreteTypeFromMangledName(&qword_1E945CDF0);
        uint64_t v24 = sub_19EBF7268();
      }
      else
      {
        uint64_t v24 = MEMORY[0x1E4FBC868];
      }
      unint64_t v12 = v9 & 0xC000000000000001;
      long long v35 = (uint64_t *)v24;
      uint64_t v26 = swift_bridgeObjectRetain();
      sub_19E6B07E0(v26, 1, &v35);

      swift_bridgeObjectRelease();
      a2 = v35;
      long long v17 = (unint64_t)v15;
      uint64_t v7 = 1;
    }
    else
    {
      id v25 = objc_msgSend(v15, sel_pipeline);
      if (v25)
      {

        sub_19E6AEE30(&v35, v15);
        a2 = v35;
        long long v17 = v36;
        uint64_t v7 = 2;
      }
      else
      {

        a2 = 0;
        long long v17 = 0uLL;
        uint64_t v7 = 3;
      }
    }
  }
  unint64_t v37 = v5;
  unint64_t v28 = v5[2];
  unint64_t v27 = v5[3];
  if (v28 >= v27 >> 1)
  {
    long long v30 = v17;
    sub_19E66F878(v27 > 1, v28 + 1, 1);
    long long v17 = v30;
    unint64_t v12 = v9 & 0xC000000000000001;
    uint64_t v5 = v37;
  }
  v5[2] = v28 + 1;
  unint64_t v29 = &v5[4 * v28];
  v29[4] = a2;
  ++v11;
  *(_OWORD *)(v29 + 5) = v17;
  *((unsigned char *)v29 + 56) = v7;
  id v13 = &selRef_notify;
  if (v10 != v11) {
    goto LABEL_6;
  }
  swift_bridgeObjectRelease();

  a2 = v33;
  uint64_t v2 = v34;
  uint64_t v7 = v31;
LABEL_28:
  *a2 = v7;
  a2[1] = (uint64_t)v5;
  a2[2] = v2;
}

uint64_t static MLModelStructure.load(contentsOf:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 128) = a1;
  *(void *)(v2 + 136) = a2;
  return MEMORY[0x1F4188298](sub_19E6AF294, 0, 0);
}

uint64_t sub_19E6AF294()
{
  uint64_t v1 = self;
  uint64_t v2 = sub_19EBF6348();
  v0[18] = v2;
  v0[2] = v0;
  v0[7] = v0 + 15;
  v0[3] = sub_19E6AF3BC;
  uint64_t v3 = swift_continuation_init();
  v0[10] = MEMORY[0x1E4F143A8];
  v0[11] = 0x40000000;
  v0[12] = sub_19E63DE4C;
  v0[13] = &block_descriptor_0;
  v0[14] = v3;
  objc_msgSend(v1, sel_loadContentsOfURL_completionHandler_, v2, v0 + 10);
  return MEMORY[0x1F41881E8](v0 + 2);
}

uint64_t sub_19E6AF3BC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 152) = v1;
  if (v1) {
    uint64_t v2 = sub_19E63E258;
  }
  else {
    uint64_t v2 = sub_19E6AF4CC;
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

uint64_t sub_19E6AF4CC()
{
  uint64_t v1 = *(void **)(v0 + 120);
  uint64_t v2 = *(void *)(v0 + 128);

  sub_19E6ADA5C(v1, v2);
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t static MLModelStructure.load(asset:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 128) = a1;
  *(void *)(v2 + 136) = a2;
  return MEMORY[0x1F4188298](sub_19E6AF560, 0, 0);
}

uint64_t sub_19E6AF560()
{
  uint64_t v1 = v0[17];
  uint64_t v2 = self;
  v0[2] = v0;
  v0[7] = v0 + 15;
  v0[3] = sub_19E6AF678;
  uint64_t v3 = swift_continuation_init();
  v0[10] = MEMORY[0x1E4F143A8];
  v0[11] = 0x40000000;
  v0[12] = sub_19E63DE4C;
  v0[13] = &block_descriptor_2_0;
  v0[14] = v3;
  objc_msgSend(v2, sel_loadModelAsset_completionHandler_, v1, v0 + 10);
  return MEMORY[0x1F41881E8](v0 + 2);
}

uint64_t sub_19E6AF678()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 144) = v1;
  if (v1) {
    uint64_t v2 = sub_19E63DDE0;
  }
  else {
    uint64_t v2 = sub_19E6AF788;
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

uint64_t sub_19E6AF788()
{
  sub_19E6ADA5C(*(void **)(v0 + 120), *(void *)(v0 + 128));
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void destroy for MLModelStructure(uint64_t a1)
{
}

uint64_t initializeWithCopy for MLModelStructure(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  uint64_t v5 = *(void **)(a2 + 16);
  unsigned __int8 v6 = *(unsigned char *)(a2 + 24);
  sub_19E63DA5C(*(void *)a2, v4, v5, v6);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = v6;
  return a1;
}

uint64_t assignWithCopy for MLModelStructure(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  uint64_t v5 = *(void **)(a2 + 16);
  unsigned __int8 v6 = *(unsigned char *)(a2 + 24);
  sub_19E63DA5C(*(void *)a2, v4, v5, v6);
  uint64_t v7 = *(void *)a1;
  id v8 = *(void **)(a1 + 8);
  unint64_t v9 = *(void **)(a1 + 16);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  unsigned __int8 v10 = *(unsigned char *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v6;
  sub_19E63E464(v7, v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for MLModelStructure(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  char v4 = *(unsigned char *)(a2 + 24);
  uint64_t v5 = *(void *)a1;
  uint64_t v7 = *(void **)(a1 + 8);
  unsigned __int8 v6 = *(void **)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v3;
  unsigned __int8 v8 = *(unsigned char *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v4;
  sub_19E63E464(v5, v7, v6, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for MLModelStructure(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && *(unsigned char *)(a1 + 25)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
  if (v3 <= 3) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for MLModelStructure(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)uint64_t result = a2 - 253;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 25) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 24) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_19E6AF9B0(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 24) <= 2u) {
    return *(unsigned __int8 *)(a1 + 24);
  }
  else {
    return (*(_DWORD *)a1 + 3);
  }
}

uint64_t sub_19E6AF9C8(uint64_t result, unsigned int a2)
{
  uint64_t v2 = a2 - 3;
  if (a2 >= 3)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    LOBYTE(a2) = 3;
    *(void *)uint64_t result = v2;
  }
  *(unsigned char *)(result + 24) = a2;
  return result;
}

ValueMetadata *type metadata accessor for MLModelStructure()
{
  return &type metadata for MLModelStructure;
}

ValueMetadata *type metadata accessor for MLModelStructure.Program()
{
  return &type metadata for MLModelStructure.Program;
}

ValueMetadata *type metadata accessor for MLModelStructure.Program.ValueType()
{
  return &type metadata for MLModelStructure.Program.ValueType;
}

ValueMetadata *type metadata accessor for MLModelStructure.Program.Value()
{
  return &type metadata for MLModelStructure.Program.Value;
}

void *initializeBufferWithCopyOfBuffer for MLModelStructure.Program.NamedValueType(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for MLModelStructure.Program.NamedValueType(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for MLModelStructure.Program.NamedValueType(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MLModelStructure.Program.NamedValueType(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MLModelStructure.Program.NamedValueType(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MLModelStructure.Program.NamedValueType()
{
  return &type metadata for MLModelStructure.Program.NamedValueType;
}

uint64_t sub_19E6AFB70(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for MLModelStructure.Program.Binding(uint64_t a1)
{
  return sub_19E6AFB90(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t sub_19E6AFB90(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t _s6CoreML16MLModelStructureO7ProgramV7BindingOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_19E6AFB70(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for MLModelStructure.Program.Binding(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_19E6AFB70(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  char v8 = *(unsigned char *)(a1 + 16);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  sub_19E6AFB90(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for MLModelStructure.Program.Binding(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  char v6 = *(unsigned char *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v3;
  sub_19E6AFB90(v4, v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for MLModelStructure.Program.Binding()
{
  return &type metadata for MLModelStructure.Program.Binding;
}

ValueMetadata *type metadata accessor for MLModelStructure.Program.Argument()
{
  return &type metadata for MLModelStructure.Program.Argument;
}

void destroy for MLModelStructure.Program.Function(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  unint64_t v2 = *(void **)(a1 + 40);
}

void *initializeWithCopy for MLModelStructure.Program.Function(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = (void *)a2[4];
  char v6 = (void *)a2[5];
  a1[4] = v5;
  a1[5] = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v7 = v5;
  id v8 = v6;
  return a1;
}

void *assignWithCopy for MLModelStructure.Program.Function(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (void *)a2[4];
  uint64_t v5 = (void *)a1[4];
  a1[4] = v4;
  id v6 = v4;

  id v7 = (void *)a2[5];
  id v8 = (void *)a1[5];
  a1[5] = v7;
  id v9 = v7;

  return a1;
}

uint64_t assignWithTake for MLModelStructure.Program.Function(uint64_t a1, _OWORD *a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *a2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = a2[1];
  swift_bridgeObjectRelease();

  uint64_t v4 = *(void **)(a1 + 40);
  *(_OWORD *)(a1 + 32) = a2[2];

  return a1;
}

ValueMetadata *type metadata accessor for MLModelStructure.Program.Function()
{
  return &type metadata for MLModelStructure.Program.Function;
}

void destroy for MLModelStructure.Program.Block(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v2 = *(void **)(a1 + 24);
}

void *initializeWithCopy for MLModelStructure.Program.Block(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = (void *)a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v5 = v4;
  return a1;
}

void *assignWithCopy for MLModelStructure.Program.Block(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (void *)a2[3];
  id v5 = (void *)a1[3];
  a1[3] = v4;
  id v6 = v4;

  return a1;
}

uint64_t assignWithTake for MLModelStructure.Program.Block(uint64_t a1, _OWORD *a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *a2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = a2[1];

  return a1;
}

ValueMetadata *type metadata accessor for MLModelStructure.Program.Block()
{
  return &type metadata for MLModelStructure.Program.Block;
}

void destroy for MLModelStructure.Program.Operation(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v2 = *(void **)(a1 + 40);
}

void *initializeWithCopy for MLModelStructure.Program.Operation(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  id v5 = (void *)a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v6 = v5;
  return a1;
}

void *assignWithCopy for MLModelStructure.Program.Operation(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (void *)a2[5];
  id v5 = (void *)a1[5];
  a1[5] = v4;
  id v6 = v4;

  return a1;
}

uint64_t assignWithTake for MLModelStructure.Program.Operation(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);

  return a1;
}

ValueMetadata *type metadata accessor for MLModelStructure.Program.Operation()
{
  return &type metadata for MLModelStructure.Program.Operation;
}

void *initializeBufferWithCopyOfBuffer for MLModelStructure.NeuralNetwork(void *a1, void *a2)
{
  uint64_t v3 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  id v4 = v3;
  return a1;
}

void destroy for MLModelStructure.NeuralNetwork(uint64_t a1)
{
  swift_bridgeObjectRelease();
  unint64_t v2 = *(void **)(a1 + 8);
}

void *_s6CoreML16MLModelStructureO13NeuralNetworkVwca_0(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  id v4 = (void *)a2[1];
  id v5 = (void *)a1[1];
  a1[1] = v4;
  id v6 = v4;

  return a1;
}

uint64_t assignWithTake for MLModelStructure.NeuralNetwork(uint64_t a1, _OWORD *a2)
{
  swift_bridgeObjectRelease();
  id v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *a2;

  return a1;
}

ValueMetadata *type metadata accessor for MLModelStructure.NeuralNetwork()
{
  return &type metadata for MLModelStructure.NeuralNetwork;
}

void destroy for MLModelStructure.NeuralNetwork.Layer(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v2 = *(void **)(a1 + 48);
}

void *initializeWithCopy for MLModelStructure.NeuralNetwork.Layer(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  id v6 = (void *)a2[6];
  a1[6] = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v7 = v6;
  return a1;
}

void *assignWithCopy for MLModelStructure.NeuralNetwork.Layer(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (void *)a2[6];
  uint64_t v5 = (void *)a1[6];
  a1[6] = v4;
  id v6 = v4;

  return a1;
}

uint64_t assignWithTake for MLModelStructure.NeuralNetwork.Layer(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void **)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);

  return a1;
}

uint64_t getEnumTagSinglePayload for MLModelStructure.NeuralNetwork.Layer(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MLModelStructure.NeuralNetwork.Layer(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MLModelStructure.NeuralNetwork.Layer()
{
  return &type metadata for MLModelStructure.NeuralNetwork.Layer;
}

void destroy for MLModelStructure.Pipeline(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v2 = *(void **)(a1 + 16);
}

void *_s6CoreML16MLModelStructureO8PipelineVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = (void *)a2[2];
  a1[2] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v5 = v4;
  return a1;
}

void *assignWithCopy for MLModelStructure.Pipeline(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (void *)a2[2];
  id v5 = (void *)a1[2];
  a1[2] = v4;
  id v6 = v4;

  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for MLModelStructure.Pipeline(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);

  return a1;
}

uint64_t getEnumTagSinglePayload for MLModelStructure.Pipeline(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MLModelStructure.Pipeline(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MLModelStructure.Pipeline()
{
  return &type metadata for MLModelStructure.Pipeline;
}

void sub_19E6B07E0(uint64_t a1, char a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (!v4)
  {
LABEL_18:
    swift_bridgeObjectRelease_n();
    return;
  }
  unint64_t v5 = 0;
  uint64_t v6 = a1 + 40;
  while (1)
  {
    if (v5 >= *(void *)(a1 + 16))
    {
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      sub_19EBF7408();
      __break(1u);
      goto LABEL_24;
    }
    long long v32 = *(_OWORD *)(v6 + 24);
    long long v33 = *(_OWORD *)(v6 + 40);
    long long v31 = *(_OWORD *)(v6 + 8);
    uint64_t v7 = *(void *)(v6 - 8);
    uint64_t v8 = *(void *)v6;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v28 = (id)v33;
    id v9 = *((id *)&v33 + 1);
    if (!v8) {
      goto LABEL_18;
    }
    unint64_t v27 = v9;
    unsigned __int8 v10 = (void *)*a3;
    unint64_t v12 = sub_19E662844(v7, v8);
    uint64_t v13 = v10[2];
    BOOL v14 = (v11 & 1) == 0;
    uint64_t v15 = v13 + v14;
    if (__OFADD__(v13, v14)) {
      goto LABEL_21;
    }
    char v16 = v11;
    if (v10[3] < v15) {
      break;
    }
    if (a2)
    {
      if (v11) {
        goto LABEL_16;
      }
    }
    else
    {
      sub_19E666AE0();
      if (v16) {
        goto LABEL_16;
      }
    }
LABEL_12:
    id v19 = (void *)*a3;
    *(void *)(*a3 + 8 * (v12 >> 6) + 64) |= 1 << v12;
    id v20 = (uint64_t *)(v19[6] + 16 * v12);
    *id v20 = v7;
    v20[1] = v8;
    id v21 = (_OWORD *)(v19[7] + 48 * v12);
    *id v21 = v31;
    v21[1] = v32;
    v21[2] = v33;
    uint64_t v22 = v19[2];
    BOOL v23 = __OFADD__(v22, 1);
    uint64_t v24 = v22 + 1;
    if (v23) {
      goto LABEL_22;
    }
    ++v5;
    v19[2] = v24;
    v6 += 64;
    a2 = 1;
    if (v4 == v5) {
      goto LABEL_18;
    }
  }
  sub_19E6643F8(v15, a2 & 1);
  unint64_t v17 = sub_19E662844(v7, v8);
  if ((v16 & 1) != (v18 & 1)) {
    goto LABEL_23;
  }
  unint64_t v12 = v17;
  if ((v16 & 1) == 0) {
    goto LABEL_12;
  }
LABEL_16:
  id v25 = (void *)swift_allocError();
  swift_willThrow();
  id v26 = v25;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E945C970);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();

    return;
  }
LABEL_24:
  sub_19EBF6FE8();
  sub_19EBF67D8();
  sub_19EBF7188();
  sub_19EBF67D8();
  sub_19EBF71F8();
  __break(1u);
}

void sub_19E6B0B68(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v6 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (!v6) {
    goto LABEL_24;
  }
  long long v46 = *(_OWORD *)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v9 = *((id *)&v46 + 1);
  if (!v8) {
    goto LABEL_24;
  }
  unsigned __int8 v10 = v9;
  uint64_t v45 = a3;
  uint64_t v11 = *a3;
  unint64_t v13 = sub_19E662844(v7, v8);
  uint64_t v14 = *(void *)(v11 + 16);
  BOOL v15 = (v12 & 1) == 0;
  uint64_t v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  char v17 = v12;
  if (*(void *)(v11 + 24) >= v16)
  {
    if (a2)
    {
      if ((v12 & 1) == 0) {
        goto LABEL_13;
      }
    }
    else
    {
      sub_19E667914();
      if ((v17 & 1) == 0) {
        goto LABEL_13;
      }
    }
LABEL_10:
    id v20 = (void *)swift_allocError();
    swift_willThrow();
    id v21 = v20;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E945C970);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();

      return;
    }
    goto LABEL_30;
  }
  sub_19E665C48(v16, a2 & 1);
  unint64_t v18 = sub_19E662844(v7, v8);
  if ((v17 & 1) != (v19 & 1))
  {
LABEL_29:
    sub_19EBF7408();
    __break(1u);
LABEL_30:
    sub_19EBF6FE8();
    sub_19EBF67D8();
    sub_19EBF7188();
    sub_19EBF67D8();
    sub_19EBF71F8();
    __break(1u);
    return;
  }
  unint64_t v13 = v18;
  if (v17) {
    goto LABEL_10;
  }
LABEL_13:
  uint64_t v22 = v45;
  BOOL v23 = (void *)*v45;
  *(void *)(*v45 + 8 * (v13 >> 6) + 64) |= 1 << v13;
  uint64_t v24 = (uint64_t *)(v23[6] + 16 * v13);
  *uint64_t v24 = v7;
  v24[1] = v8;
  *(_OWORD *)(v23[7] + 16 * v13) = v46;
  uint64_t v25 = v23[2];
  BOOL v26 = __OFADD__(v25, 1);
  uint64_t v27 = v25 + 1;
  if (v26)
  {
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v23[2] = v27;
  if (v6 != 1)
  {
    id v28 = (_OWORD *)(a1 + 80);
    unint64_t v29 = 1;
    while (v29 < *(void *)(a1 + 16))
    {
      long long v47 = *v28;
      uint64_t v31 = *((void *)v28 - 2);
      uint64_t v30 = *((void *)v28 - 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v32 = *((id *)&v47 + 1);
      if (!v30) {
        goto LABEL_24;
      }
      unsigned __int8 v10 = v32;
      uint64_t v33 = *v22;
      unint64_t v34 = sub_19E662844(v31, v30);
      uint64_t v36 = *(void *)(v33 + 16);
      BOOL v37 = (v35 & 1) == 0;
      BOOL v26 = __OFADD__(v36, v37);
      uint64_t v38 = v36 + v37;
      if (v26) {
        goto LABEL_26;
      }
      char v39 = v35;
      if (*(void *)(v33 + 24) < v38)
      {
        sub_19E665C48(v38, 1);
        unint64_t v34 = sub_19E662844(v31, v30);
        if ((v39 & 1) != (v40 & 1)) {
          goto LABEL_29;
        }
      }
      if (v39) {
        goto LABEL_10;
      }
      uint64_t v22 = v45;
      long long v41 = (void *)*v45;
      *(void *)(*v45 + 8 * (v34 >> 6) + 64) |= 1 << v34;
      long long v42 = (uint64_t *)(v41[6] + 16 * v34);
      *long long v42 = v31;
      v42[1] = v30;
      *(_OWORD *)(v41[7] + 16 * v34) = v47;
      uint64_t v43 = v41[2];
      BOOL v26 = __OFADD__(v43, 1);
      uint64_t v44 = v43 + 1;
      if (v26) {
        goto LABEL_27;
      }
      ++v29;
      v41[2] = v44;
      v28 += 2;
      if (v6 == v29) {
        goto LABEL_24;
      }
    }
    goto LABEL_28;
  }
LABEL_24:
  swift_bridgeObjectRelease_n();
}

id static MLComputePolicy.cpuAndGPU.getter@<X0>(uint64_t *a1@<X8>)
{
  if (qword_1E945BB68 != -1) {
    swift_once();
  }
  uint64_t v2 = (void *)qword_1E946A538;
  if ((unint64_t)qword_1E946A538 <= 1) {
    uint64_t v3 = 1;
  }
  else {
    uint64_t v3 = qword_1E946A538;
  }
  *a1 = v3;

  return v2;
}

BOOL static MLComputePolicy.== infix(_:_:)(void **a1, void **a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  if (*a1)
  {
    if (v2 == (void *)1)
    {
      if (v3 != (void *)1) {
        return 0;
      }
    }
    else
    {
      if ((unint64_t)v3 < 2) {
        return 0;
      }
      sub_19E6345EC();
      sub_19E634BB0(v2);
      sub_19E634BB0(v3);
      char v4 = sub_19EBF6DE8();
      sub_19E601010(v3);
      sub_19E601010(v2);
      if ((v4 & 1) == 0) {
        return 0;
      }
    }
    return 1;
  }
  return !v3;
}

void static MLComputePolicy.cpuOnly.getter(void *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_19E6B10A0()
{
  uint64_t v1 = *v0;
  sub_19EBF7478();
  sub_19EBF7488();
  if ((unint64_t)v1 > 1)
  {
    id v2 = v1;
    sub_19EBF6DF8();
    sub_19E601010(v1);
  }
  return sub_19EBF74B8();
}

void sub_19E6B1120()
{
  uint64_t v1 = *v0;
  if (*v0 && v1 != (void *)1)
  {
    sub_19EBF7488();
    id v2 = v1;
    sub_19EBF6DF8();
    sub_19E601010(v1);
  }
  else
  {
    sub_19EBF7488();
  }
}

uint64_t sub_19E6B11AC()
{
  uint64_t v1 = *v0;
  sub_19EBF7478();
  sub_19EBF7488();
  if ((unint64_t)v1 > 1)
  {
    id v2 = v1;
    sub_19EBF6DF8();
    sub_19E601010(v1);
  }
  return sub_19EBF74B8();
}

BOOL sub_19E6B1228(void **a1, void **a2)
{
  id v2 = *a1;
  uint64_t v3 = *a2;
  if (!*a1) {
    return !v3;
  }
  if (v2 == (void *)1) {
    return v3 == (void *)1;
  }
  if ((unint64_t)v3 < 2) {
    return 0;
  }
  sub_19E6345EC();
  sub_19E634BB0(v2);
  sub_19E634BB0(v3);
  char v5 = sub_19EBF6DE8();
  sub_19E601010(v3);
  sub_19E601010(v2);
  return v5 & 1;
}

void MLComputePolicy.hash(into:)()
{
  uint64_t v1 = *v0;
  if (*v0 && v1 != (void *)1)
  {
    sub_19EBF7488();
    id v2 = v1;
    sub_19EBF6DF8();
    sub_19E601010(v1);
  }
  else
  {
    sub_19EBF7488();
  }
}

uint64_t MLComputePolicy.hashValue.getter()
{
  uint64_t v1 = *v0;
  sub_19EBF7478();
  sub_19EBF7488();
  if ((unint64_t)v1 > 1)
  {
    id v2 = v1;
    sub_19EBF6DF8();
    sub_19E601010(v1);
  }
  return sub_19EBF74B8();
}

uint64_t MLComputePolicy.description.getter()
{
  uint64_t v1 = *v0;
  if (!*v0) {
    return 0x6976656420796E41;
  }
  if (v1 == (void *)1) {
    return 5591107;
  }
  uint64_t result = (uint64_t)objc_msgSend(v1, sel_metalDevice);
  if (result)
  {
    id v4 = objc_msgSend((id)result, sel_name);
    swift_unknownObjectRelease();
    uint64_t v2 = sub_19EBF6798();

    sub_19E601010(v1);
    return v2;
  }
  __break(1u);
  return result;
}

BOOL sub_19E6B14A0(void **a1, void **a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  if (*a1)
  {
    if (v2 == (void *)1)
    {
      if (v3 != (void *)1) {
        return 0;
      }
    }
    else
    {
      if ((unint64_t)v3 < 2) {
        return 0;
      }
      sub_19E6345EC();
      sub_19E634BB0(v2);
      sub_19E634BB0(v3);
      char v4 = sub_19EBF6DE8();
      sub_19E601010(v3);
      sub_19E601010(v2);
      if ((v4 & 1) == 0) {
        return 0;
      }
    }
    return 1;
  }
  return !v3;
}

uint64_t MLComputePolicy.customMirror.getter()
{
  uint64_t v1 = sub_19EBF74D8();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  char v4 = (char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E945D1F0);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v0;
  v11[1] = v8;
  v11[0] = MEMORY[0x1E4FBC860];
  uint64_t v9 = sub_19EBF74C8();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v7, 1, 1, v9);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E4FBC430], v1);
  sub_19E634BB0(v8);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945D1F8);
  sub_19E6B16F4();
  return sub_19EBF74E8();
}

unint64_t sub_19E6B16F4()
{
  unint64_t result = qword_1E945D200;
  if (!qword_1E945D200)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1E945D1F8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945D200);
  }
  return result;
}

uint64_t sub_19E6B1750()
{
  uint64_t v1 = sub_19EBF74D8();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  char v4 = (char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E945D1F0);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v0;
  v11[1] = v8;
  v11[0] = MEMORY[0x1E4FBC860];
  uint64_t v9 = sub_19EBF74C8();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v7, 1, 1, v9);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E4FBC430], v1);
  sub_19E634BB0(v8);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945D1F8);
  sub_19E6B16F4();
  return sub_19EBF74E8();
}

uint64_t static MLComputePolicy.current.getter@<X0>(void *a1@<X8>)
{
  if (qword_1E945BB70 != -1) {
    swift_once();
  }
  uint64_t result = sub_19EBF75A8();
  *a1 = v3;
  return result;
}

id MLComputePolicy.init(_:)@<X0>(id result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = 1;
  switch((unint64_t)result)
  {
    case 0uLL:
    case 3uLL:
      break;
    case 1uLL:
    case 2uLL:
      if (qword_1E945BB68 != -1) {
        swift_once();
      }
      if ((unint64_t)qword_1E946A538 <= 1) {
        uint64_t v3 = 1;
      }
      else {
        uint64_t v3 = qword_1E946A538;
      }
      uint64_t result = (id)qword_1E946A538;
      break;
    default:
      sub_19EBF6FE8();
      sub_19EBF67D8();
      type metadata accessor for MLComputeUnits(0);
      sub_19EBF7188();
      sub_19EBF71F8();
      __break(1u);
      JUMPOUT(0x19E6B1AC0);
  }
  *a2 = v3;
  return result;
}

void static MLComputePolicy.specific(_:)(void *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3 = a1;

  MLComputePolicy.init(_:)(v3, a2);
}

void MLComputePolicy.init(_:)(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2 = (uint64_t)a1;
  id v4 = objc_msgSend(a1, sel_metalDevice);
  if (v4)
  {
    uint64_t v5 = v4;
    if (qword_1E945BB30 != -1) {
      swift_once();
    }
    if (byte_1E946A4F2 == 1)
    {
      BOOL v6 = MPSSupportsMTLDevice(v5);
      swift_unknownObjectRelease();
      if (v6)
      {
LABEL_9:
        *a2 = v2;
        return;
      }
    }
    else
    {

      swift_unknownObjectRelease();
    }
    uint64_t v2 = 2;
    goto LABEL_9;
  }
  __break(1u);
}

void static MLComputePolicy.specific(_:)(void *a1@<X8>)
{
  *a1 = 1;
}

void MLComputePolicy.init(_:)(void *a1@<X0>, void *a2@<X8>)
{
  *a2 = 1;
}

unint64_t sub_19E6B1C04()
{
  unint64_t result = qword_1E945D208;
  if (!qword_1E945D208)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945D208);
  }
  return result;
}

ValueMetadata *type metadata accessor for MLComputePolicy()
{
  return &type metadata for MLComputePolicy;
}

void *initializeBufferWithCopyOfBuffer for MLComputePolicy.Kind(void *a1, void **a2)
{
  id v3 = *a2;
  if ((unint64_t)*a2 >= 0xFFFFFFFF) {
    id v4 = v3;
  }
  *a1 = v3;
  return a1;
}

void destroy for MLComputePolicy.Kind(void **a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)v1 >= 0xFFFFFFFF) {
}
  }

void **assignWithCopy for MLComputePolicy.Kind(void **a1, void **a2)
{
  id v3 = *a1;
  id v4 = *a2;
  if ((unint64_t)*a1 < 0xFFFFFFFF)
  {
    if ((unint64_t)v4 >= 0xFFFFFFFF)
    {
      *a1 = v4;
      id v6 = v4;
      return a1;
    }
LABEL_7:
    *a1 = v4;
    return a1;
  }
  if ((unint64_t)v4 < 0xFFFFFFFF)
  {

    id v4 = *a2;
    goto LABEL_7;
  }
  *a1 = v4;
  id v5 = v4;

  return a1;
}

void **assignWithTake for MLComputePolicy.Kind(void **a1, unint64_t *a2)
{
  id v3 = *a1;
  unint64_t v4 = *a2;
  if ((unint64_t)*a1 < 0xFFFFFFFF) {
    goto LABEL_6;
  }
  if (v4 < 0xFFFFFFFF)
  {

LABEL_6:
    *a1 = (void *)v4;
    return a1;
  }
  *a1 = (void *)v4;

  return a1;
}

ValueMetadata *type metadata accessor for MLComputePolicy.Kind()
{
  return &type metadata for MLComputePolicy.Kind;
}

unint64_t sub_19E6B1DB8()
{
  unint64_t result = qword_1E945D210[0];
  if (!qword_1E945D210[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1E945D210);
  }
  return result;
}

uint64_t sub_19E6B1E10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 56);
}

uint64_t sub_19E6B1E18(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_release();
  uint64_t result = swift_release();
  if (*(void *)(a1 + 40))
  {
    return swift_release();
  }
  return result;
}

void *sub_19E6B1E80(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  a1[4] = a2[4];
  uint64_t v7 = a2 + 5;
  uint64_t v6 = a2[5];
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  if (v6)
  {
    uint64_t v8 = a2[6];
    a1[5] = v6;
    a1[6] = v8;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 5) = *v7;
  }
  a1[7] = a2[7];
  return a1;
}

void *sub_19E6B1F24(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  a1[3] = a2[3];
  swift_retain();
  swift_release();
  uint64_t v4 = a1[5];
  a1[4] = a2[4];
  uint64_t v5 = a2[5];
  if (!v4)
  {
    if (v5)
    {
      uint64_t v7 = a2[6];
      a1[5] = v5;
      a1[6] = v7;
      swift_retain();
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)(a1 + 5) = *(_OWORD *)(a2 + 5);
    goto LABEL_8;
  }
  if (!v5)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v6 = a2[6];
  a1[5] = v5;
  a1[6] = v6;
  swift_retain();
  swift_release();
LABEL_8:
  a1[7] = a2[7];
  return a1;
}

uint64_t sub_19E6B201C(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release();
  uint64_t v4 = *(void *)(a2 + 40);
  uint64_t v5 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  if (!v5)
  {
    if (v4)
    {
      uint64_t v7 = *(void *)(a2 + 48);
      *(void *)(a1 + 40) = v4;
      *(void *)(a1 + 48) = v7;
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    goto LABEL_8;
  }
  if (!v4)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = v4;
  *(void *)(a1 + 48) = v6;
  swift_release();
LABEL_8:
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  return a1;
}

uint64_t type metadata accessor for LRUCache()
{
  return swift_getGenericMetadata();
}

uint64_t sub_19E6B20F0()
{
  return swift_getWitnessTable();
}

uint64_t sub_19E6B210C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v3 = v2;
  uint64_t v6 = a1[3];
  uint64_t v7 = sub_19EBF6E68();
  uint64_t v59 = *(void *)(v7 - 8);
  uint64_t v60 = v7;
  uint64_t v8 = MEMORY[0x1F4188790](v7);
  unsigned __int8 v10 = (char *)&v55 - v9;
  uint64_t v11 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v8);
  v58 = (char *)&v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = a1[4];
  uint64_t v15 = a1[5];
  uint64_t v68 = a1[2];
  uint64_t v13 = v68;
  uint64_t v69 = v6;
  uint64_t v61 = v14;
  uint64_t v70 = v14;
  uint64_t v71 = v15;
  uint64_t v16 = type metadata accessor for LRUCache.Index();
  uint64_t v17 = MEMORY[0x1F4188790](v16);
  v62 = (char *)&v55 - v18;
  uint64_t v67 = *(void *)(v13 - 8);
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  id v21 = (char *)&v55 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = MEMORY[0x1F4188790](v19);
  uint64_t v24 = (char *)&v55 - v23;
  uint64_t v26 = v3[6];
  uint64_t v25 = v3[7];
  uint64_t v65 = result;
  uint64_t v66 = a2;
  uint64_t v63 = v27;
  v64 = v10;
  if (v26 >= v25)
  {
    uint64_t v28 = v3[5];
    uint64_t v29 = v28 + 1;
    if (__OFADD__(v28, 1))
    {
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
    uint64_t v56 = v11;
    uint64_t v57 = v15;
    v3[5] = v29;
    if (v29 < sub_19EBF7128())
    {
      uint64_t v30 = (uint64_t (**)(char *, uint64_t))(v67 + 8);
      do
      {
        uint64_t v31 = (uint64_t (*)(char *))v3[8];
        sub_19EBF7178();
        char v32 = v31(v24);
        uint64_t result = (*v30)(v24, v13);
        if (v32) {
          break;
        }
        uint64_t v33 = v3[5];
        uint64_t v34 = v33 + 1;
        if (__OFADD__(v33, 1))
        {
          __break(1u);
          goto LABEL_23;
        }
        v3[5] = v34;
      }
      while (v34 < sub_19EBF7128());
    }
    uint64_t v35 = v3[5];
    uint64_t v36 = sub_19EBF7128();
    uint64_t v37 = v66;
    if (v35 >= v36
      || (uint64_t v55 = v3[2],
          sub_19EBF7178(),
          sub_19EBF64E8(),
          uint64_t v15 = v57,
          sub_19EBF64B8(),
          (*(void (**)(char *, uint64_t))(v67 + 8))(v21, v13),
          (uint64_t v38 = v68) == 0))
    {
      TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 56))(v37, 1, 1, TupleTypeMetadata2);
    }
    v3[6] = 0;
    sub_19E6B2B10((uint64_t)sub_19E66894C, 0, v38, MEMORY[0x1E4F59DC0], v6, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBB550], MEMORY[0x1E4FBC278], v54);
    swift_release();
    uint64_t v26 = 0;
    v3[7] = v68;
    uint64_t v11 = v56;
  }
  sub_19EBF7178();
  char v39 = v62;
  (*(void (**)(void))(v67 + 32))();
  uint64_t v68 = v13;
  uint64_t v69 = v6;
  uint64_t v70 = v61;
  uint64_t v71 = v15;
  *(void *)&v39[*(int *)(type metadata accessor for LRUCache.Index() + 52)] = v26;
  sub_19EBF64E8();
  sub_19EBF64B8();
  if (!v68)
  {
    uint64_t v44 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
    v11 += 56;
    char v40 = v64;
    v44(v64, 1, 1, v6);
    uint64_t v41 = v65;
    uint64_t v42 = v66;
LABEL_17:
    (*(void (**)(char *, uint64_t))(v63 + 8))(v39, v41);
    (*(void (**)(char *, uint64_t))(v59 + 8))(v40, v60);
    uint64_t v45 = swift_getTupleTypeMetadata2();
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 56))(v42, 1, 1, v45);
    uint64_t v46 = v3[6];
    BOOL v47 = __OFADD__(v46, 1);
    uint64_t v48 = v46 + 1;
    if (!v47) {
      goto LABEL_21;
    }
    __break(1u);
    goto LABEL_20;
  }
  sub_19E6B2B10((uint64_t)sub_19E66894C, 0, v68, MEMORY[0x1E4F59DC0], v6, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBB550], MEMORY[0x1E4FBC278], v54);
  char v40 = v64;
  uint64_t v41 = v65;
  uint64_t v42 = v66;
  if (*(void *)&v39[*(int *)(v65 + 52)] < v68)
  {
    sub_19EBF64F8();
    swift_release();
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v40, 0, 1, v6);
    goto LABEL_20;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v64, 1, 1, v6);
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v40, 1, v6) == 1) {
    goto LABEL_17;
  }
LABEL_20:
  uint64_t v49 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
  v50 = v58;
  v49(v58, v40, v6);
  uint64_t v51 = swift_getTupleTypeMetadata2();
  v52 = (char *)(v42 + *(int *)(v51 + 48));
  (*(void (**)(uint64_t, char *, uint64_t))(v63 + 32))(v42, v39, v41);
  v49(v52, v50, v6);
  uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v51 - 8) + 56))(v42, 0, 1, v51);
  uint64_t v53 = v3[6];
  BOOL v47 = __OFADD__(v53, 1);
  uint64_t v48 = v53 + 1;
  if (!v47)
  {
LABEL_21:
    v3[6] = v48;
    return result;
  }
LABEL_24:
  __break(1u);
  return result;
}

uint64_t sub_19E6B28A8@<X0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_19E6B2944(*v2, v2[1], v2[2], 0, 0, a1[2], a1[3], a1[4], v7, a1[5]);
  long long v4 = v7[3];
  a2[2] = v7[2];
  a2[3] = v4;
  a2[4] = v7[4];
  long long v5 = v7[1];
  *a2 = v7[0];
  a2[1] = v5;
  swift_retain();
  swift_retain();

  return swift_retain();
}

uint64_t sub_19E6B2944@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10)
{
  if (a4)
  {
    uint64_t v18 = (void *)swift_allocObject();
    v18[2] = a6;
    v18[3] = a7;
    v18[4] = a8;
    v18[5] = a10;
    v18[6] = a4;
    v18[7] = a5;
    uint64_t v19 = sub_19E6B2D08;
  }
  else
  {
    uint64_t v18 = (void *)swift_allocObject();
    v18[2] = a6;
    v18[3] = a7;
    v18[4] = a8;
    v18[5] = a10;
    uint64_t v19 = sub_19E6B2C8C;
  }
  uint64_t v20 = v19;
  id v21 = (void *)swift_allocObject();
  v21[2] = a6;
  v21[3] = a7;
  v21[4] = a8;
  v21[5] = a10;
  v21[6] = v20;
  v21[7] = v18;
  *a9 = a1;
  a9[1] = a2;
  a9[2] = a3;
  a9[3] = a1;
  a9[4] = a2;
  a9[5] = -1;
  a9[6] = 0;
  a9[7] = 0;
  a9[8] = sub_19E6B2CD0;
  a9[9] = v21;
  swift_retain();

  return swift_retain();
}

__n128 sub_19E6B2A88@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  long long v4 = v2[1];
  v9[0] = *v2;
  v9[1] = v4;
  long long v5 = v2[3];
  v9[2] = v2[2];
  v9[3] = v5;
  sub_19E6B28A8(a1, v8);
  sub_19E6B2C14((uint64_t)v9);
  long long v6 = v8[3];
  *(_OWORD *)(a2 + 32) = v8[2];
  *(_OWORD *)(a2 + 48) = v6;
  *(_OWORD *)(a2 + 64) = v8[4];
  __n128 result = (__n128)v8[1];
  *(_OWORD *)a2 = v8[0];
  *(__n128 *)(a2 + 16) = result;
  return result;
}

uint64_t sub_19E6B2AE8()
{
  return 0;
}

uint64_t type metadata accessor for LRUCache.Index()
{
  return swift_getGenericMetadata();
}

uint64_t sub_19E6B2B10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11 = *(void *)(a6 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = v16(v15+ ((*(unsigned __int8 *)(*(void *)(v14 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v14 - 8) + 80)), v13);
  if (v9) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a9, v13, a6);
  }
  return result;
}

uint64_t sub_19E6B2C14(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_19E645640(v2);
  return a1;
}

uint64_t sub_19E6B2C7C()
{
  return MEMORY[0x1F4186498](v0, 48, 7);
}

void sub_19E6B2C8C(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_19E6B2C98()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 64, 7);
}

uint64_t sub_19E6B2CD0()
{
  (*(void (**)(uint64_t *__return_ptr))(v0 + 48))(&v2);
  return v2;
}

uint64_t sub_19E6B2D08@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 48))();
  *a1 = result & 1;
  return result;
}

uint64_t sub_19E6B2D3C()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t sub_19E6B2D98(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  uint64_t v5 = *(void *)(a2 + 64);
  uint64_t v6 = *(void *)(a2 + 72);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v5;
  *(void *)(a1 + 72) = v6;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

void *sub_19E6B2E28(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  a1[3] = a2[3];
  swift_retain();
  swift_release();
  a1[4] = a2[4];
  swift_retain();
  swift_release();
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  uint64_t v4 = a2[9];
  a1[8] = a2[8];
  a1[9] = v4;
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy80_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t sub_19E6B2F1C(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_release();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_release();
  return a1;
}

uint64_t sub_19E6B2FA4(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 80)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_19E6B2FEC(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 80) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 80) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for LRUCache.Iterator()
{
  return swift_getGenericMetadata();
}

uint64_t sub_19E6B3058()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_19E6B30F4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  long long v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    uint64_t v9 = *a2;
    *long long v4 = *a2;
    long long v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    *(void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  return v4;
}

uint64_t sub_19E6B31EC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();
}

uint64_t sub_19E6B3218(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  *(void *)((*(void *)(v5 + 48) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v5 + 48) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_19E6B3294(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  *(void *)((*(void *)(v5 + 40) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v5 + 40) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_19E6B3310(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  *(void *)((*(void *)(v5 + 32) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v5 + 32) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_19E6B338C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  *(void *)((*(void *)(v5 + 24) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v5 + 24) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_19E6B3408(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (!a2) {
    return 0;
  }
  if (v5 < a2)
  {
    unint64_t v6 = ((*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    unsigned int v7 = a2 - v5;
    uint64_t v8 = v6 & 0xFFFFFFF8;
    if ((v6 & 0xFFFFFFF8) != 0) {
      unsigned int v9 = 2;
    }
    else {
      unsigned int v9 = v7 + 1;
    }
    if (v9 >= 0x10000) {
      unsigned int v10 = 4;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v9 < 0x100) {
      unsigned int v10 = 1;
    }
    if (v9 >= 2) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    switch(v11)
    {
      case 1:
        int v12 = *((unsigned __int8 *)a1 + v6);
        if (!v12) {
          break;
        }
        goto LABEL_18;
      case 2:
        int v12 = *(unsigned __int16 *)((char *)a1 + v6);
        if (v12) {
          goto LABEL_18;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x19E6B351CLL);
      case 4:
        int v12 = *(_DWORD *)((char *)a1 + v6);
        if (!v12) {
          break;
        }
LABEL_18:
        int v13 = v12 - 1;
        if (v8)
        {
          int v13 = 0;
          LODWORD(v8) = *a1;
        }
        return v5 + (v8 | v13) + 1;
      default:
        break;
    }
  }
  if (v5) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  else {
    return 0;
  }
}

void sub_19E6B3530(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = ((*(void *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v7 >= a3)
  {
    int v12 = 0;
    int v13 = a2 - v7;
    if (a2 <= v7)
    {
LABEL_14:
      switch(v12)
      {
        case 1:
          a1[v8] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_27;
        case 2:
          *(_WORD *)&a1[v8] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_27;
        case 3:
          goto LABEL_34;
        case 4:
          *(_DWORD *)&a1[v8] = 0;
          goto LABEL_26;
        default:
LABEL_26:
          if (a2)
          {
LABEL_27:
            uint64_t v16 = *(void (**)(void))(v6 + 56);
            v16();
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v9 = a3 - v7;
    if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v10 = v9 + 1;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v10 >= 0x10000) {
      int v11 = 4;
    }
    else {
      int v11 = 2;
    }
    if (v10 < 0x100) {
      int v11 = 1;
    }
    if (v10 >= 2) {
      int v12 = v11;
    }
    else {
      int v12 = 0;
    }
    int v13 = a2 - v7;
    if (a2 <= v7) {
      goto LABEL_14;
    }
  }
  if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
    int v14 = v13;
  }
  else {
    int v14 = 1;
  }
  if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    unsigned int v15 = ~v7 + a2;
    bzero(a1, v8);
    *(_DWORD *)a1 = v15;
  }
  switch(v12)
  {
    case 1:
      a1[v8] = v14;
      break;
    case 2:
      *(_WORD *)&a1[v8] = v14;
      break;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x19E6B36DCLL);
    case 4:
      *(_DWORD *)&a1[v8] = v14;
      break;
    default:
      return;
  }
}

uint64_t sub_19E6B3708(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 16);
  unint64_t v5 = *(void *)(a2 + 16);
  if (v5 >= v4) {
    int64_t v6 = *(void *)(a1 + 16);
  }
  else {
    int64_t v6 = *(void *)(a2 + 16);
  }
  uint64_t v40 = MEMORY[0x1E4FBC860];
  sub_19E66F5D8(0, v6, 0);
  int64_t v7 = v6;
  unint64_t v37 = v4;
  uint64_t v39 = a1;
  int64_t v35 = v5;
  if (v6)
  {
    size_t v8 = (void *)(a1 + 32);
    unsigned int v9 = (void *)(a2 + 32);
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRetain();
    int64_t v11 = v7;
    uint64_t v12 = a2;
    while (v4)
    {
      if (!v5) {
        goto LABEL_30;
      }
      uint64_t v13 = *v8;
      uint64_t v14 = *v8 + *v9;
      if (__OFADD__(*v8, *v9)) {
        goto LABEL_31;
      }
      if (v14 < v13) {
        goto LABEL_32;
      }
      unint64_t v16 = *(void *)(v40 + 16);
      unint64_t v15 = *(void *)(v40 + 24);
      unint64_t v17 = v16 + 1;
      if (v16 >= v15 >> 1)
      {
        uint64_t v33 = v12;
        uint64_t result = sub_19E66F5D8(v15 > 1, v16 + 1, 1);
        uint64_t v12 = v33;
        unint64_t v17 = v16 + 1;
      }
      *(void *)(v40 + 16) = v17;
      uint64_t v18 = v40 + 16 * v16;
      --v5;
      *(void *)(v18 + 32) = v13;
      *(void *)(v18 + 40) = v14;
      --v4;
      ++v9;
      ++v8;
      if (!--v11) {
        goto LABEL_15;
      }
    }
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v12 = a2;
LABEL_15:
    if (v37 <= v35)
    {
LABEL_28:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v40;
    }
    uint64_t v19 = 0;
    if (v7 <= v35) {
      int64_t v20 = v35;
    }
    else {
      int64_t v20 = v7;
    }
    int64_t v21 = v20 - v7;
    unint64_t v22 = v37 - v7;
    int64_t v23 = v35 - v7;
    uint64_t v24 = 8 * v7 + 32;
    uint64_t v25 = v39 + v24;
    uint64_t v26 = v12 + v24;
    while (v22 != v19)
    {
      if (v23 == v19) {
        goto LABEL_28;
      }
      if (v21 == v19) {
        goto LABEL_34;
      }
      uint64_t v27 = *(void *)(v25 + 8 * v19);
      uint64_t v28 = *(void *)(v26 + 8 * v19);
      uint64_t v29 = v27 + v28;
      if (__OFADD__(v27, v28)) {
        goto LABEL_35;
      }
      if (v29 < v27) {
        goto LABEL_36;
      }
      unint64_t v31 = *(void *)(v40 + 16);
      unint64_t v30 = *(void *)(v40 + 24);
      if (v31 >= v30 >> 1)
      {
        uint64_t v34 = v12;
        uint64_t v36 = v25;
        uint64_t v38 = v21;
        uint64_t result = sub_19E66F5D8(v30 > 1, v31 + 1, 1);
        uint64_t v25 = v36;
        int64_t v21 = v38;
        uint64_t v12 = v34;
      }
      *(void *)(v40 + 16) = v31 + 1;
      uint64_t v32 = v40 + 16 * v31;
      *(void *)(v32 + 32) = v27;
      *(void *)(v32 + 40) = v29;
      if (v22 == ++v19) {
        goto LABEL_28;
      }
    }
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

void sub_19E6B395C(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (!sub_19E5DDC7C(a2, a5)) {
    goto LABEL_43;
  }
  uint64_t v43 = a1;
  uint64_t v18 = a2[2];
  if (v18)
  {
    if (sub_19E5DDC7C(a3, a6)
      && (sub_19E632D1C((int64_t)a2, (uint64_t)a3) & 1) != 0
      && (sub_19E632D1C((int64_t)a5, (uint64_t)a6) & 1) != 0)
    {
      if (!*(void *)(v43 + 16))
      {
LABEL_45:
        __break(1u);
        goto LABEL_46;
      }
      if (!a3[2])
      {
LABEL_46:
        __break(1u);
        goto LABEL_47;
      }
      uint64_t v19 = *(void *)(v43 + 32);
      uint64_t v20 = a3[4];
      if ((unsigned __int128)(v19 * (__int128)v20) >> 64 != (v19 * v20) >> 63)
      {
LABEL_47:
        __break(1u);
        goto LABEL_48;
      }
      if (!*(void *)(a4 + 16))
      {
LABEL_48:
        __break(1u);
        goto LABEL_49;
      }
      if (!a6[2])
      {
LABEL_49:
        __break(1u);
        goto LABEL_50;
      }
      uint64_t v21 = *(void *)(a4 + 32);
      uint64_t v22 = a6[4];
      if ((unsigned __int128)(v21 * (__int128)v22) >> 64 != (v21 * v22) >> 63)
      {
LABEL_50:
        __break(1u);
        goto LABEL_51;
      }
      uint64_t v23 = a7 + *(void *)(*(void *)(a9 - 8) + 72) * v19 * v20;
      uint64_t v24 = a8 + *(void *)(*(void *)(a10 - 8) + 72) * v21 * v22;
      uint64_t v25 = a2 + 4;
      int64_t v26 = 1;
      while (1)
      {
        uint64_t v27 = *v25++;
        int64_t v28 = v26 * v27;
        if ((unsigned __int128)(v26 * (__int128)v27) >> 64 != (v26 * v27) >> 63) {
          goto LABEL_42;
        }
        int64_t v26 = v28;
        if (!--v18) {
          goto LABEL_20;
        }
      }
    }
    if ((sub_19E63AB54(v43, (uint64_t)a2, a3, a4, (uint64_t)a5, a6, a7, a8, a9, a10) & 1) == 0
      && (sub_19E5E7448(v43, (uint64_t)a2, a3, a4, (uint64_t)a5, a6, a7, a8, a9, a10) & 1) == 0)
    {
      uint64_t v44 = a7;
      uint64_t v48 = sub_19E631A24(v43, (uint64_t)a2, (uint64_t)a3);
      uint64_t v46 = v29;
      uint64_t v31 = v30;
      uint64_t v49 = sub_19E631A24(a4, (uint64_t)a5, (uint64_t)a6);
      uint64_t v47 = v32;
      uint64_t v45 = v33;
      uint64_t v34 = a2[4];
      if (v34 < 0)
      {
LABEL_44:
        __break(1u);
        goto LABEL_45;
      }
      if (v34)
      {
        if (!*(void *)(v43 + 16))
        {
LABEL_51:
          __break(1u);
          goto LABEL_52;
        }
        if (!a3[2])
        {
LABEL_52:
          __break(1u);
          goto LABEL_53;
        }
        if (!*(void *)(a4 + 16))
        {
LABEL_53:
          __break(1u);
          goto LABEL_54;
        }
        if (!a6[2])
        {
LABEL_54:
          __break(1u);
          return;
        }
        int64_t v35 = a6;
        uint64_t v36 = 0;
        uint64_t v37 = *(void *)(v43 + 32);
        uint64_t v38 = a3[4];
        uint64_t v39 = *(void *)(a4 + 32);
        uint64_t v40 = v35[4];
        while (1)
        {
          uint64_t v41 = v37 + v36;
          if (__OFADD__(v37, v36)) {
            break;
          }
          if ((unsigned __int128)(v41 * (__int128)v38) >> 64 != (v41 * v38) >> 63) {
            goto LABEL_39;
          }
          uint64_t v42 = v39 + v36;
          if (__OFADD__(v39, v36)) {
            goto LABEL_40;
          }
          if ((unsigned __int128)(v42 * (__int128)v40) >> 64 != (v42 * v40) >> 63) {
            goto LABEL_41;
          }
          ++v36;
          sub_19E6B395C(v48, v46, v31, v49, v47, v45, v44 + *(void *)(*(void *)(a9 - 8) + 72) * v41 * v38, a8 + *(void *)(*(void *)(a10 - 8) + 72) * v42 * v40, a9, a10);
          if (v34 == v36) {
            goto LABEL_35;
          }
        }
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
        goto LABEL_44;
      }
LABEL_35:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v23 = a7;
    uint64_t v24 = a8;
    int64_t v26 = 1;
LABEL_20:
    sub_19E6B49D0(v23, v24, v26, a9, a10);
  }
}

uint64_t sub_19E6B3D30(uint64_t result, uint64_t a2, void *a3, uint64_t a4, void *a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t v14 = result;
  uint64_t v15 = a9;
  uint64_t v16 = *(void *)(a2 + 16);
  if (v16)
  {
    unint64_t v17 = (uint64_t *)(a2 + 32);
    uint64_t v18 = 1;
    uint64_t v19 = *(void *)(a2 + 16);
    do
    {
      uint64_t v20 = *v17++;
      uint64_t v21 = v18 * v20;
      if ((unsigned __int128)(v18 * (__int128)v20) >> 64 != (v18 * v20) >> 63)
      {
        __break(1u);
        goto LABEL_141;
      }
      uint64_t v18 = v21;
      --v19;
    }
    while (v19);
    uint64_t v22 = a5[2];
    if (!v22) {
      goto LABEL_27;
    }
    goto LABEL_6;
  }
  uint64_t v21 = 1;
  uint64_t v22 = a5[2];
  if (v22)
  {
LABEL_6:
    uint64_t v23 = a5 + 4;
    uint64_t v24 = 1;
    uint64_t v25 = v22;
    while (1)
    {
      uint64_t v26 = *v23++;
      uint64_t v27 = v24 * v26;
      if ((unsigned __int128)(v24 * (__int128)v26) >> 64 != (v24 * v26) >> 63) {
        break;
      }
      uint64_t v24 = v27;
      if (!--v25)
      {
        if (v21 != v27) {
          goto LABEL_28;
        }
        goto LABEL_10;
      }
    }
LABEL_141:
    __break(1u);
LABEL_142:
    __break(1u);
LABEL_143:
    __break(1u);
LABEL_144:
    __break(1u);
LABEL_145:
    __break(1u);
LABEL_146:
    __break(1u);
LABEL_147:
    __break(1u);
LABEL_148:
    __break(1u);
LABEL_149:
    __break(1u);
LABEL_150:
    __break(1u);
LABEL_151:
    __break(1u);
LABEL_152:
    __break(1u);
LABEL_153:
    __break(1u);
LABEL_154:
    __break(1u);
LABEL_155:
    __break(1u);
LABEL_156:
    __break(1u);
LABEL_157:
    __break(1u);
LABEL_158:
    __break(1u);
LABEL_159:
    __break(1u);
LABEL_160:
    __break(1u);
LABEL_161:
    __break(1u);
LABEL_162:
    __break(1u);
LABEL_163:
    __break(1u);
LABEL_164:
    __break(1u);
LABEL_165:
    __break(1u);
LABEL_166:
    __break(1u);
LABEL_167:
    __break(1u);
LABEL_168:
    __break(1u);
LABEL_169:
    __break(1u);
LABEL_170:
    __break(1u);
LABEL_171:
    __break(1u);
LABEL_172:
    __break(1u);
LABEL_173:
    __break(1u);
LABEL_174:
    __break(1u);
LABEL_175:
    __break(1u);
LABEL_176:
    __break(1u);
LABEL_177:
    __break(1u);
LABEL_178:
    __break(1u);
LABEL_179:
    __break(1u);
LABEL_180:
    __break(1u);
LABEL_181:
    __break(1u);
LABEL_182:
    __break(1u);
LABEL_183:
    __break(1u);
    goto LABEL_184;
  }
LABEL_27:
  if (v21 != 1)
  {
LABEL_28:
    __break(1u);
LABEL_29:
    uint64_t result = sub_19E6315C8((unint64_t)a5, v14, a2, a3);
    if (result)
    {
      sub_19E6B395C(result, v34, v35, a4, a5, a6, a7, a8, a9, a9);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    v112 = a3;
    uint64_t v110 = a8;
    uint64_t v36 = 0;
    uint64_t v37 = 1;
    while (1)
    {
      uint64_t v38 = *(void *)(a2 + 8 * v36 + 32);
      uint64_t v39 = (unsigned __int128)(v37 * (__int128)v38) >> 64;
      v37 *= v38;
      if (v39 != v37 >> 63) {
        goto LABEL_150;
      }
      if (v16 == ++v36)
      {
        swift_bridgeObjectRetain();
        uint64_t v40 = swift_bridgeObjectRetain();
        uint64_t v41 = (void *)sub_19E6B3708(v40, a2);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v111 = sub_19E6D41D8(v41);
        uint64_t v43 = v42;
        swift_bridgeObjectRetain();
        uint64_t v44 = swift_bridgeObjectRetain();
        uint64_t v45 = (void *)sub_19E6B3708(v44, (uint64_t)a5);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t result = (uint64_t)sub_19E6D41D8(v45);
        uint64_t v117 = result;
        if (v37 < 0) {
          goto LABEL_181;
        }
        uint64_t v47 = v46;
        if (!v37)
        {
LABEL_139:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return swift_bridgeObjectRelease();
        }
        uint64_t v48 = 0;
        uint64_t v109 = result + 32;
        uint64_t v107 = result + 8;
        while (v48 != v37)
        {
          v50 = v43;
          uint64_t v113 = v48;
          if (!v43) {
            goto LABEL_192;
          }
          uint64_t v51 = v47;
          uint64_t v53 = v43 + 2;
          unint64_t v52 = v43[2];
          unint64_t v116 = v52;
          if (v52)
          {
            uint64_t v54 = v52 - 1;
            uint64_t v55 = v43[v52 + 3];
            BOOL v56 = __OFADD__(v55, 1);
            uint64_t v57 = v55 + 1;
            if (v56) {
              goto LABEL_155;
            }
            if (v52 > v111[2]) {
              goto LABEL_156;
            }
            if (v57 >= v111[2 * v54 + 5])
            {
              uint64_t result = swift_bridgeObjectRetain();
              if (v54)
              {
                unint64_t v60 = v116;
                uint64_t v61 = &v111[2 * v116 + 1];
                while (v43)
                {
                  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
                  if ((result & 1) == 0)
                  {
                    uint64_t result = (uint64_t)sub_19E612754(v43);
                    uint64_t v43 = (void *)result;
                  }
                  unint64_t v62 = v60 - 1;
                  if ((int64_t)(v60 - 1) >= v43[2]) {
                    goto LABEL_142;
                  }
                  v43[v60 + 3] = 0;
                  uint64_t v54 = v60 - 2;
                  if ((uint64_t)(v60 - 2) >= (uint64_t)*v53) {
                    goto LABEL_143;
                  }
                  unint64_t v63 = v53[v60];
                  BOOL v56 = __OFADD__(v63, 1);
                  int64_t v64 = v63 + 1;
                  if (v56) {
                    goto LABEL_144;
                  }
                  if (v54 >= v111[2]) {
                    goto LABEL_145;
                  }
                  if (v64 < *v61) {
                    goto LABEL_48;
                  }
                  v61 -= 2;
                  --v60;
                  if (v62 == 1) {
                    goto LABEL_67;
                  }
                }
                goto LABEL_190;
              }
LABEL_67:
              uint64_t result = swift_bridgeObjectRelease();
              uint64_t v43 = 0;
              if (!v47) {
                goto LABEL_193;
              }
            }
            else
            {
              swift_bridgeObjectRetain();
LABEL_48:
              uint64_t result = swift_isUniquelyReferenced_nonNull_native();
              if ((result & 1) == 0)
              {
                uint64_t result = (uint64_t)sub_19E612754(v43);
                uint64_t v43 = (void *)result;
              }
              if (v54 >= v43[2]) {
                goto LABEL_171;
              }
              uint64_t v58 = v43[v54 + 4];
              BOOL v56 = __OFADD__(v58, 1);
              uint64_t v59 = v58 + 1;
              if (v56) {
                goto LABEL_172;
              }
              v43[v54 + 4] = v59;
              if (!v47) {
                goto LABEL_193;
              }
            }
          }
          else
          {
            uint64_t result = swift_bridgeObjectRetain();
            if (!v47) {
              goto LABEL_193;
            }
          }
          uint64_t v66 = v47 + 2;
          unint64_t v65 = v47[2];
          if (v65)
          {
            uint64_t v67 = v65 - 1;
            uint64_t v68 = v47[v65 + 3];
            BOOL v56 = __OFADD__(v68, 1);
            uint64_t v69 = v68 + 1;
            if (v56) {
              goto LABEL_157;
            }
            if (v65 > *(void *)(v117 + 16)) {
              goto LABEL_158;
            }
            if (v69 >= *(void *)(v109 + 16 * v67 + 8))
            {
              uint64_t result = swift_bridgeObjectRetain();
              unint64_t v108 = v65;
              if (v65 != 1)
              {
                uint64_t v71 = (int64_t *)(v107 + 16 * v65);
                while (v47)
                {
                  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
                  if ((result & 1) == 0)
                  {
                    uint64_t result = (uint64_t)sub_19E612754(v47);
                    uint64_t v47 = (void *)result;
                  }
                  unint64_t v72 = v65 - 1;
                  if ((int64_t)(v65 - 1) >= v47[2]) {
                    goto LABEL_146;
                  }
                  v47[v65 + 3] = 0;
                  uint64_t v67 = v65 - 2;
                  if ((uint64_t)(v65 - 2) >= (uint64_t)*v66) {
                    goto LABEL_147;
                  }
                  unint64_t v73 = v66[v65];
                  BOOL v56 = __OFADD__(v73, 1);
                  int64_t v74 = v73 + 1;
                  if (v56) {
                    goto LABEL_148;
                  }
                  if (v67 >= *(void *)(v117 + 16)) {
                    goto LABEL_149;
                  }
                  if (v74 < *v71)
                  {
                    uint64_t v15 = a9;
                    unint64_t v65 = v108;
                    goto LABEL_87;
                  }
                  v71 -= 2;
                  --v65;
                  if (v72 == 1) {
                    goto LABEL_85;
                  }
                }
                goto LABEL_191;
              }
LABEL_85:
              uint64_t result = swift_bridgeObjectRelease();
              uint64_t v47 = 0;
              uint64_t v15 = a9;
              unint64_t v65 = v108;
              unint64_t v70 = v116;
            }
            else
            {
              swift_bridgeObjectRetain();
LABEL_87:
              uint64_t result = swift_isUniquelyReferenced_nonNull_native();
              if ((result & 1) == 0)
              {
                uint64_t result = (uint64_t)sub_19E612754(v47);
                uint64_t v47 = (void *)result;
              }
              unint64_t v70 = v116;
              if (v67 >= v47[2]) {
                goto LABEL_173;
              }
              uint64_t v75 = v47[v67 + 4];
              BOOL v56 = __OFADD__(v75, 1);
              uint64_t v76 = v75 + 1;
              if (v56) {
                goto LABEL_174;
              }
              v47[v67 + 4] = v76;
            }
          }
          else
          {
            uint64_t result = swift_bridgeObjectRetain();
            unint64_t v70 = v116;
          }
          unint64_t v77 = *v53;
          unint64_t v78 = v112[2];
          if (v78 < *v53) {
            goto LABEL_153;
          }
          if (v70)
          {
            if (!v77) {
              goto LABEL_159;
            }
            uint64_t v79 = v50[4];
            uint64_t v80 = v112[4];
            uint64_t v81 = v79 * v80;
            if ((unsigned __int128)(v79 * (__int128)v80) >> 64 != (v79 * v80) >> 63) {
              goto LABEL_160;
            }
            if (v70 != 1)
            {
              if (v77 < 2) {
                goto LABEL_175;
              }
              if (v78 != 1)
              {
                uint64_t v82 = v50[5];
                uint64_t v83 = v112[5];
                uint64_t v84 = v82 * v83;
                if ((unsigned __int128)(v82 * (__int128)v83) >> 64 != (v82 * v83) >> 63) {
                  goto LABEL_177;
                }
                BOOL v56 = __OFADD__(v81, v84);
                v81 += v84;
                if (v56) {
                  goto LABEL_178;
                }
                if (v70 != 2)
                {
                  BOOL v85 = v77 >= 3;
                  unint64_t v86 = v77 - 3;
                  if (!v85) {
                    goto LABEL_182;
                  }
                  unint64_t v87 = v78 - 2;
                  if (v78 != 2)
                  {
                    v88 = v50 + 6;
                    if (v78 <= 2) {
                      unint64_t v78 = 2;
                    }
                    unint64_t v89 = v78 - 2;
                    unint64_t v90 = v70 - 3;
                    v91 = v112 + 6;
                    while (v89)
                    {
                      uint64_t v92 = *v88 * *v91;
                      if ((unsigned __int128)(*v88 * (__int128)*v91) >> 64 != v92 >> 63) {
                        goto LABEL_164;
                      }
                      BOOL v56 = __OFADD__(v81, v92);
                      v81 += v92;
                      if (v56) {
                        goto LABEL_165;
                      }
                      if (!v90) {
                        goto LABEL_116;
                      }
                      if (!v86) {
                        goto LABEL_169;
                      }
                      ++v91;
                      ++v88;
                      --v86;
                      --v89;
                      --v90;
                      if (!--v87) {
                        goto LABEL_116;
                      }
                    }
                    goto LABEL_163;
                  }
                }
              }
            }
          }
          else
          {
            uint64_t v81 = 0;
          }
LABEL_116:
          uint64_t result = swift_bridgeObjectRelease();
          unint64_t v93 = *v66;
          unint64_t v94 = a6[2];
          if (v94 < *v66) {
            goto LABEL_154;
          }
          if (v65)
          {
            if (!v93) {
              goto LABEL_161;
            }
            uint64_t v95 = v51[4];
            uint64_t v96 = a6[4];
            uint64_t v49 = v95 * v96;
            if ((unsigned __int128)(v95 * (__int128)v96) >> 64 != (v95 * v96) >> 63) {
              goto LABEL_162;
            }
            if (v65 != 1)
            {
              if (v93 < 2) {
                goto LABEL_176;
              }
              if (v94 != 1)
              {
                uint64_t v97 = v51[5];
                uint64_t v98 = a6[5];
                uint64_t v99 = v97 * v98;
                if ((unsigned __int128)(v97 * (__int128)v98) >> 64 != (v97 * v98) >> 63) {
                  goto LABEL_179;
                }
                BOOL v56 = __OFADD__(v49, v99);
                v49 += v99;
                if (v56) {
                  goto LABEL_180;
                }
                if (v65 != 2)
                {
                  BOOL v85 = v93 >= 3;
                  unint64_t v100 = v93 - 3;
                  if (!v85) {
                    goto LABEL_183;
                  }
                  unint64_t v101 = v94 - 2;
                  if (v94 != 2)
                  {
                    v102 = v51 + 6;
                    if (v94 <= 2) {
                      unint64_t v94 = 2;
                    }
                    unint64_t v103 = v94 - 2;
                    unint64_t v104 = v65 - 3;
                    v105 = a6 + 6;
                    while (v103)
                    {
                      uint64_t v106 = *v102 * *v105;
                      if ((unsigned __int128)(*v102 * (__int128)*v105) >> 64 != v106 >> 63) {
                        goto LABEL_167;
                      }
                      BOOL v56 = __OFADD__(v49, v106);
                      v49 += v106;
                      if (v56) {
                        goto LABEL_168;
                      }
                      if (!v104) {
                        goto LABEL_40;
                      }
                      if (!v100) {
                        goto LABEL_170;
                      }
                      ++v105;
                      ++v102;
                      --v100;
                      --v103;
                      --v104;
                      if (!--v101) {
                        goto LABEL_40;
                      }
                    }
                    goto LABEL_166;
                  }
                }
              }
            }
          }
          else
          {
            uint64_t v49 = 0;
          }
LABEL_40:
          uint64_t v48 = v113 + 1;
          swift_bridgeObjectRelease();
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 24))(v110 + *(void *)(*(void *)(v15 - 8) + 72) * v49, a7 + *(void *)(*(void *)(v15 - 8) + 72) * v81, v15);
          if (v113 + 1 == v37) {
            goto LABEL_139;
          }
        }
        goto LABEL_152;
      }
    }
  }
LABEL_10:
  if (!v16 || !v22)
  {
LABEL_23:
    return sub_19EBF6E48();
  }
  if ((sub_19E632E08(a2, (uint64_t)a3) & 1) == 0) {
    goto LABEL_29;
  }
  uint64_t result = sub_19E632E08((int64_t)a5, (uint64_t)a6);
  if ((result & 1) == 0) {
    goto LABEL_29;
  }
  if (!*(void *)(v14 + 16))
  {
LABEL_184:
    __break(1u);
    goto LABEL_185;
  }
  if (!a3[2])
  {
LABEL_185:
    __break(1u);
    goto LABEL_186;
  }
  uint64_t v28 = *(void *)(v14 + 32);
  uint64_t v29 = a3[4];
  if ((unsigned __int128)(v28 * (__int128)v29) >> 64 != (v28 * v29) >> 63)
  {
LABEL_186:
    __break(1u);
    goto LABEL_187;
  }
  if (!*(void *)(a4 + 16))
  {
LABEL_187:
    __break(1u);
    goto LABEL_188;
  }
  if (a6[2])
  {
    if ((unsigned __int128)(*(uint64_t *)(a4 + 32) * (__int128)(uint64_t)a6[4]) >> 64 != (uint64_t)(*(void *)(a4 + 32)
                                                                                                * a6[4]) >> 63)
      goto LABEL_189;
    uint64_t result = a7 + *(void *)(*(void *)(a9 - 8) + 72) * v28 * v29;
    uint64_t v30 = (uint64_t *)(a2 + 32);
    uint64_t v31 = 1;
    while (1)
    {
      uint64_t v32 = *v30++;
      uint64_t v33 = v31 * v32;
      if ((unsigned __int128)(v31 * (__int128)v32) >> 64 != (v31 * v32) >> 63) {
        goto LABEL_151;
      }
      uint64_t v31 = v33;
      if (!--v16) {
        goto LABEL_23;
      }
    }
  }
LABEL_188:
  __break(1u);
LABEL_189:
  __break(1u);
LABEL_190:
  __break(1u);
LABEL_191:
  __break(1u);
LABEL_192:
  __break(1u);
LABEL_193:
  __break(1u);
  return result;
}

uint64_t sub_19E6B46C8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  long long v3 = *(void **)a3;
  int64_t v4 = *(void *)(a3 + 8);
  if (a2)
  {
    uint64_t v5 = a2;
    uint64_t v19 = MEMORY[0x1E4FBC860];
    sub_19E66F668(0, a2 & ~(a2 >> 63), 0);
    if (v5 < 0) {
      goto LABEL_20;
    }
    uint64_t v7 = v19;
    unint64_t v8 = *(void *)(v19 + 16);
    do
    {
      _D8 = *a1;
      unint64_t v10 = *(void *)(v19 + 24);
      int64_t v11 = v8 + 1;
      if (v8 >= v10 >> 1) {
        sub_19E66F668(v10 > 1, v8 + 1, 1);
      }
      __asm { FCVT            H0, D8 }
      *(void *)(v19 + 16) = v11;
      *(_WORD *)(v19 + 2 * v8 + 32) = _H0;
      ++a1;
      ++v8;
      --v5;
    }
    while (v5);
LABEL_9:
    if (!v3)
    {
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }
    if (v4 >= v11)
    {
      if (v7 + 32 >= (unint64_t)v3 + 2 * v11 || v7 + 32 + 2 * v11 <= (unint64_t)v3)
      {
        memcpy(v3, (const void *)(v7 + 32), 2 * v11);
        goto LABEL_16;
      }
LABEL_22:
      uint64_t result = sub_19EBF7278();
      __break(1u);
      return result;
    }
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v7 = MEMORY[0x1E4FBC860];
  int64_t v11 = *(void *)(MEMORY[0x1E4FBC860] + 16);
  if (v11) {
    goto LABEL_9;
  }
LABEL_16:

  return swift_bridgeObjectRelease();
}

uint64_t sub_19E6B484C(__int16 *a1, uint64_t a2, uint64_t a3)
{
  long long v3 = *(void **)a3;
  int64_t v4 = *(void *)(a3 + 8);
  if (a2)
  {
    uint64_t v5 = a2;
    uint64_t v19 = MEMORY[0x1E4FBC860];
    sub_19E66F648(0, a2 & ~(a2 >> 63), 0);
    if (v5 < 0) {
      goto LABEL_20;
    }
    uint64_t v7 = v19;
    unint64_t v8 = *(void *)(v19 + 16);
    do
    {
      _H8 = *a1;
      unint64_t v10 = *(void *)(v19 + 24);
      int64_t v11 = v8 + 1;
      if (v8 >= v10 >> 1) {
        sub_19E66F648(v10 > 1, v8 + 1, 1);
      }
      __asm { FCVT            D0, H8 }
      *(void *)(v19 + 16) = v11;
      *(void *)(v19 + 8 * v8 + 32) = _D0;
      ++a1;
      ++v8;
      --v5;
    }
    while (v5);
LABEL_9:
    if (!v3)
    {
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }
    if (v4 >= v11)
    {
      if (v7 + 32 >= (unint64_t)v3 + 8 * v11 || v7 + 32 + 8 * v11 <= (unint64_t)v3)
      {
        memcpy(v3, (const void *)(v7 + 32), 8 * v11);
        goto LABEL_16;
      }
LABEL_22:
      uint64_t result = sub_19EBF7278();
      __break(1u);
      return result;
    }
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v7 = MEMORY[0x1E4FBC860];
  int64_t v11 = *(void *)(MEMORY[0x1E4FBC860] + 16);
  if (v11) {
    goto LABEL_9;
  }
LABEL_16:

  return swift_bridgeObjectRelease();
}

void sub_19E6B49D0(uint64_t a1, uint64_t a2, vDSP_Length a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = sub_19EBF6188();
  MEMORY[0x1F4188790](v9 - 8);
  int64_t v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_19EBF61E8();
  *(void *)&long long v33 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  unint64_t v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&long long v37 = a2;
  sub_19EBF6E58();
  sub_19EBF6E58();
  if (swift_dynamicCast())
  {
    sub_19EBF6E48();
    return;
  }
  uint64_t v32 = a5;
  *(void *)&long long v37 = a1;
  uint64_t v15 = sub_19EBF6738();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945D398);
  if (swift_dynamicCast())
  {
    uint64_t v31 = v11;
    uint64_t v16 = *(double **)&v36[0];
    *(void *)&long long v37 = a2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C8B0);
    if (swift_dynamicCast())
    {
      vDSP_vdpsp(v16, 1, *(float **)&v36[0], 1, a3);
      return;
    }
    *(void *)&long long v37 = a2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E945D3A8);
    if (swift_dynamicCast())
    {
      *(void *)&long long v37 = *(void *)&v36[0];
      *((void *)&v37 + 1) = a3;
      *(void *)&v36[0] = v16;
      *((void *)&v36[0] + 1) = a3;
      uint64_t v18 = v33;
      (*(void (**)(char *, void, uint64_t))(v33 + 104))(v14, *MEMORY[0x1E4FBAB60], v12);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C188);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1E945D3B0);
      sub_19E5DFDB8(qword_1E945D3C8, &qword_1E945C188);
      sub_19E5DFDB8(&qword_1E945D3C0, &qword_1E945D3B0);
      sub_19EBF6218();
LABEL_16:
      (*(void (**)(char *, uint64_t))(v18 + 8))(v14, v12);
      return;
    }
    *(void *)&long long v37 = a2;
    __swift_instantiateConcreteTypeFromMangledName(qword_1E945C8B8);
    if (swift_dynamicCast())
    {
      *(void *)&long long v37 = *(void *)&v36[0];
      *((void *)&v37 + 1) = a3;
      sub_19E6B46C8((uint64_t *)v16, a3, (uint64_t)&v37);
      return;
    }
    goto LABEL_30;
  }
  *(void *)&long long v37 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C0E8);
  if (swift_dynamicCast())
  {
    uint64_t v31 = (char *)v15;
    unint64_t v17 = *(const float **)&v36[0];
    *(void *)&long long v37 = a2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E945D3A0);
    if (swift_dynamicCast())
    {
      vDSP_vspdp(v17, 1, *(double **)&v36[0], 1, a3);
      return;
    }
    uint64_t v30 = v17;
    *(void *)&long long v37 = a2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E945D3A8);
    if (swift_dynamicCast())
    {
      *(void *)&long long v37 = *(void *)&v36[0];
      *((void *)&v37 + 1) = a3;
      *(void *)&v36[0] = v30;
      *((void *)&v36[0] + 1) = a3;
      uint64_t v18 = v33;
      (*(void (**)(char *, void, uint64_t))(v33 + 104))(v14, *MEMORY[0x1E4FBAB60], v12);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C170);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1E945D3B0);
      sub_19E5DFDB8(&qword_1E945D3B8, &qword_1E945C170);
      sub_19E5DFDB8(&qword_1E945D3C0, &qword_1E945D3B0);
      sub_19EBF6278();
      goto LABEL_16;
    }
    *(void *)&long long v37 = a2;
    __swift_instantiateConcreteTypeFromMangledName(qword_1E945C8B8);
    if (!swift_dynamicCast()) {
      goto LABEL_30;
    }
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E945BB18);
    uint64_t v20 = swift_allocObject();
    long long v33 = xmmword_19EC36240;
    *(_OWORD *)(v20 + 16) = xmmword_19EC36240;
    *(void *)(v20 + 32) = a3;
    sub_19EBF6148();
    sub_19EBF6D98();
    sub_19E68DD18((uint64_t)v34, (uint64_t)&v37);
    if (sub_19E5E7BF8((uint64_t)&v37) == 1)
    {
LABEL_45:
      __break(1u);
      goto LABEL_46;
    }
    long long v56 = v45;
    long long v57 = v46;
    long long v58 = v47;
    long long v52 = v41;
    long long v53 = v42;
    long long v55 = v44;
    long long v54 = v43;
    long long v48 = v37;
    long long v49 = v38;
    long long v50 = v39;
    long long v51 = v40;
    uint64_t v21 = swift_allocObject();
    *(_OWORD *)(v21 + 16) = v33;
    *(void *)(v21 + 32) = a3;
    sub_19EBF6148();
    sub_19EBF6D98();
    sub_19E68DD18((uint64_t)v35, (uint64_t)v36);
    if (sub_19E5E7BF8((uint64_t)v36) == 1)
    {
LABEL_46:
      __break(1u);
      goto LABEL_47;
    }
LABEL_24:
    *(_OWORD *)((char *)&v36[19] + 8) = v36[8];
    *(_OWORD *)((char *)&v36[20] + 8) = v36[9];
    *(_OWORD *)((char *)&v36[21] + 8) = v36[10];
    *(_OWORD *)((char *)&v36[15] + 8) = v36[4];
    *(_OWORD *)((char *)&v36[16] + 8) = v36[5];
    *(_OWORD *)((char *)&v36[17] + 8) = v36[6];
    *(_OWORD *)((char *)&v36[18] + 8) = v36[7];
    *(_OWORD *)((char *)&v36[11] + 8) = v36[0];
    *(_OWORD *)((char *)&v36[12] + 8) = v36[1];
    *(_OWORD *)((char *)&v36[13] + 8) = v36[2];
    *(_OWORD *)((char *)&v36[14] + 8) = v36[3];
    sub_19EBF6108();
    return;
  }
  *(void *)&long long v37 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C0E0);
  if (swift_dynamicCast())
  {
    uint64_t v19 = *(const int **)&v36[0];
    *(void *)&long long v37 = a2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E945D3A0);
    if (swift_dynamicCast())
    {
      vDSP_vflt32D(v19, 1, *(double **)&v36[0], 1, a3);
      return;
    }
    *(void *)&long long v37 = a2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C8B0);
    if (swift_dynamicCast())
    {
      vDSP_vflt32(v19, 1, *(float **)&v36[0], 1, a3);
      return;
    }
    *(void *)&long long v37 = a2;
    __swift_instantiateConcreteTypeFromMangledName(qword_1E945C8B8);
    if (swift_dynamicCast())
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1E945BB18);
      uint64_t v22 = swift_allocObject();
      long long v33 = xmmword_19EC36240;
      *(_OWORD *)(v22 + 16) = xmmword_19EC36240;
      *(void *)(v22 + 32) = a3;
      sub_19EBF6148();
      sub_19EBF6D98();
      sub_19E68DD18((uint64_t)v34, (uint64_t)&v37);
      if (sub_19E5E7BF8((uint64_t)&v37) == 1)
      {
LABEL_47:
        __break(1u);
        goto LABEL_48;
      }
      long long v56 = v45;
      long long v57 = v46;
      long long v58 = v47;
      long long v52 = v41;
      long long v53 = v42;
      long long v55 = v44;
      long long v54 = v43;
      long long v48 = v37;
      long long v49 = v38;
      long long v50 = v39;
      long long v51 = v40;
      uint64_t v23 = swift_allocObject();
      *(_OWORD *)(v23 + 16) = v33;
      *(void *)(v23 + 32) = a3;
      sub_19EBF6148();
      sub_19EBF6D98();
      sub_19E68DD18((uint64_t)v35, (uint64_t)v36);
      if (sub_19E5E7BF8((uint64_t)v36) == 1)
      {
LABEL_48:
        __break(1u);
        goto LABEL_49;
      }
      goto LABEL_24;
    }
  }
LABEL_30:
  *(void *)&long long v37 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C0F0);
  if (swift_dynamicCast())
  {
    uint64_t v24 = *(__int16 **)&v36[0];
    *(void *)&long long v37 = a2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E945D3A0);
    if (swift_dynamicCast())
    {
      *(void *)&long long v37 = *(void *)&v36[0];
      *((void *)&v37 + 1) = a3;
      sub_19E6B484C(v24, a3, (uint64_t)&v37);
      return;
    }
    *(void *)&long long v37 = a2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C8B0);
    if (swift_dynamicCast())
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1E945BB18);
      uint64_t v25 = swift_allocObject();
      long long v33 = xmmword_19EC36240;
      *(_OWORD *)(v25 + 16) = xmmword_19EC36240;
      *(void *)(v25 + 32) = a3;
      sub_19EBF6148();
      sub_19EBF6D98();
      sub_19E68DD18((uint64_t)v34, (uint64_t)&v37);
      if (sub_19E5E7BF8((uint64_t)&v37) == 1)
      {
        __break(1u);
      }
      else
      {
        long long v56 = v45;
        long long v57 = v46;
        long long v58 = v47;
        long long v52 = v41;
        long long v53 = v42;
        long long v55 = v44;
        long long v54 = v43;
        long long v48 = v37;
        long long v49 = v38;
        long long v50 = v39;
        long long v51 = v40;
        uint64_t v26 = swift_allocObject();
        *(_OWORD *)(v26 + 16) = v33;
        *(void *)(v26 + 32) = a3;
        sub_19EBF6148();
        sub_19EBF6D98();
        sub_19E68DD18((uint64_t)v35, (uint64_t)v36);
        if (sub_19E5E7BF8((uint64_t)v36) != 1) {
          goto LABEL_24;
        }
      }
      __break(1u);
      goto LABEL_43;
    }
    *(void *)&long long v37 = a2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E945D3A8);
    if (swift_dynamicCast())
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1E945BB18);
      uint64_t v27 = swift_allocObject();
      long long v33 = xmmword_19EC36240;
      *(_OWORD *)(v27 + 16) = xmmword_19EC36240;
      *(void *)(v27 + 32) = a3;
      sub_19EBF6148();
      sub_19EBF6D98();
      sub_19E68DD18((uint64_t)v34, (uint64_t)&v37);
      if (sub_19E5E7BF8((uint64_t)&v37) != 1)
      {
        long long v56 = v45;
        long long v57 = v46;
        long long v58 = v47;
        long long v52 = v41;
        long long v53 = v42;
        long long v55 = v44;
        long long v54 = v43;
        long long v48 = v37;
        long long v49 = v38;
        long long v50 = v39;
        long long v51 = v40;
        uint64_t v28 = swift_allocObject();
        *(_OWORD *)(v28 + 16) = v33;
        *(void *)(v28 + 32) = a3;
        sub_19EBF6148();
        sub_19EBF6D98();
        sub_19E68DD18((uint64_t)v35, (uint64_t)v36);
        if (sub_19E5E7BF8((uint64_t)v36) != 1) {
          goto LABEL_24;
        }
        goto LABEL_44;
      }
LABEL_43:
      __break(1u);
LABEL_44:
      __break(1u);
      goto LABEL_45;
    }
  }
LABEL_49:
  *(void *)&long long v37 = 0;
  *((void *)&v37 + 1) = 0xE000000000000000;
  sub_19EBF6FE8();
  sub_19EBF67D8();
  sub_19EBF75D8();
  sub_19EBF67D8();
  swift_bridgeObjectRelease();
  sub_19EBF67D8();
  sub_19EBF75D8();
  sub_19EBF67D8();
  swift_bridgeObjectRelease();
  sub_19EBF67D8();
  sub_19EBF71F8();
  __break(1u);
}

void *sub_19E6B5844(void *result, void *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 16);
  if (v3)
  {
    uint64_t v4 = *result - 8;
    uint64_t v5 = 1;
    uint64_t v6 = *(void *)(a3 + 16);
    while (1)
    {
      *(void *)(v4 + 8 * v6) = v5;
      uint64_t v7 = *(void *)(a3 + 24 + 8 * v6);
      if ((unsigned __int128)(v5 * (__int128)v7) >> 64 != (v5 * v7) >> 63) {
        break;
      }
      v5 *= v7;
      if (!--v6) {
        goto LABEL_5;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_5:
    *a2 = v3;
  }
  return result;
}

uint64_t sub_19E6B5894()
{
  return swift_initClassMetadata2();
}

uint64_t sub_19E6B58E8(uint64_t result, uint64_t a2)
{
  uint64_t v4 = result;
  uint64_t v5 = *(void *)(result + 16);
  if (v5)
  {
    uint64_t v6 = (uint64_t *)(result + 32);
    uint64_t v7 = 1;
    unint64_t v8 = (uint64_t *)(result + 32);
    uint64_t v9 = *(void *)(result + 16);
    do
    {
      uint64_t v10 = *v8++;
      uint64_t v11 = v7 * v10;
      if ((unsigned __int128)(v7 * (__int128)v10) >> 64 != (v7 * v10) >> 63)
      {
        __break(1u);
        goto LABEL_19;
      }
      uint64_t v7 = v11;
      --v9;
    }
    while (v9);
    if (!v11) {
      return 0;
    }
    uint64_t v12 = 1;
    while (1)
    {
      uint64_t v13 = *v6++;
      uint64_t v14 = v12 * v13;
      if ((unsigned __int128)(v12 * (__int128)v13) >> 64 != (v12 * v13) >> 63) {
        break;
      }
      uint64_t v12 = v14;
      if (!--v5)
      {
        if (v14) {
          goto LABEL_10;
        }
        uint64_t v19 = 0;
        goto LABEL_13;
      }
    }
LABEL_19:
    __break(1u);
  }
  else
  {
LABEL_10:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v15 = sub_19E5EBFD0(v4, a2);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    int64_t v16 = sub_19E5F321C(v15);
    char v18 = v17;
    swift_bridgeObjectRelease();
    if (v18) {
      uint64_t v19 = 1;
    }
    else {
      uint64_t v19 = v16;
    }
LABEL_13:
    uint64_t v20 = *(void *)(*(void *)(*(void *)(v2 + 80) - 8) + 72);
    uint64_t result = v19 * v20;
    if ((unsigned __int128)(v19 * (__int128)v20) >> 64 != (v19 * v20) >> 63)
    {
      __break(1u);
      return 0;
    }
  }
  return result;
}

uint64_t sub_19E6B5A18(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = swift_allocObject();
  sub_19E6B5A80(a1, a2, a3, a4);
  return v8;
}

void *sub_19E6B5A80(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(void *)(a3 + 16) != *(void *)(a4 + 16))
  {
    __break(1u);
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    JUMPOUT(0x19E6B5B78);
  }
  uint64_t v9 = sub_19E6B58E8(a3, a4);
  uint64_t v10 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v10) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1)) {
        goto LABEL_11;
      }
      uint64_t v10 = (int)v10;
LABEL_7:
      if (v9 != v10) {
        goto LABEL_10;
      }
      v4[4] = a3;
      v4[5] = a4;
      v4[2] = a1;
      v4[3] = a2;
      return v4;
    case 2uLL:
      uint64_t v12 = *(void *)(a1 + 16);
      uint64_t v11 = *(void *)(a1 + 24);
      BOOL v13 = __OFSUB__(v11, v12);
      uint64_t v10 = v11 - v12;
      if (!v13) {
        goto LABEL_7;
      }
      goto LABEL_12;
    case 3uLL:
      goto LABEL_7;
    default:
      uint64_t v10 = BYTE6(a2);
      goto LABEL_7;
  }
}

uint64_t sub_19E6B5B88()
{
  swift_beginAccess();
  uint64_t v2 = *(void *)(v0 + 16);
  unint64_t v1 = *(void *)(v0 + 24);
  sub_19E5DE7A4(v2, v1);
  sub_19EBF63A8();
  return sub_19E5DE7FC(v2, v1);
}

uint64_t sub_19E6B5C30()
{
  return swift_endAccess();
}

uint64_t sub_19E6B5CB8()
{
  sub_19E5DE7FC(*(void *)(v0 + 16), *(void *)(v0 + 24));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_19E6B5CE8()
{
  sub_19E6B5CB8();

  return MEMORY[0x1F4186488](v0, 48, 7);
}

uint64_t type metadata accessor for DataStorage()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_19E6B5D34()
{
  return sub_19E6B5B88();
}

uint64_t sub_19E6B5D4C()
{
  return sub_19E6B5C30();
}

uint64_t sub_19E6B5D64()
{
  swift_getTupleTypeMetadata2();
  uint64_t result = sub_19EBF6E68();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_19E6B5E10()
{
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 96);
  swift_getTupleTypeMetadata2();
  uint64_t v2 = sub_19EBF6E68();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t sub_19E6B5EC4()
{
  sub_19E6B5E10();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x1F4186488](v0, v1, v2);
}

uint64_t type metadata accessor for LifetimeDependent()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t Range<>.relative(toShapedArrayAxis:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 >= result && a2 >= a4) {
    return a3;
  }
  __break(1u);
  return result;
}

uint64_t sub_19E6B5F54(uint64_t a1, uint64_t a2)
{
  uint64_t result = *v2;
  uint64_t v6 = v2[1];
  if (*v2 >= a1)
  {
    BOOL v9 = __OFSUB__(v6, a2);
    BOOL v7 = v6 == a2;
    BOOL v8 = v6 - a2 < 0;
  }
  else
  {
    BOOL v9 = 0;
    BOOL v7 = 0;
    BOOL v8 = 0;
  }
  if (!(v8 ^ v9 | v7)) {
    __break(1u);
  }
  return result;
}

uint64_t PartialRangeFrom<>.relative(toShapedArrayAxis:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3 < result)
  {
    __break(1u);
  }
  else if (a2 >= a3)
  {
    return a3;
  }
  __break(1u);
  return result;
}

uint64_t sub_19E6B5F94(uint64_t a1, uint64_t a2)
{
  uint64_t result = *v2;
  if (*v2 < a1)
  {
    __break(1u);
    goto LABEL_5;
  }
  if (result > a2) {
LABEL_5:
  }
    __break(1u);
  return result;
}

uint64_t PartialRangeUpTo<>.relative(toShapedArrayAxis:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a2 < a3)
  {
    __break(1u);
    goto LABEL_5;
  }
  if (a3 < result) {
LABEL_5:
  }
    __break(1u);
  return result;
}

uint64_t sub_19E6B5FD8(uint64_t result, uint64_t a2)
{
  if (*v2 > a2)
  {
    __break(1u);
    goto LABEL_5;
  }
  if (*v2 < result) {
LABEL_5:
  }
    __break(1u);
  return result;
}

uint64_t ClosedRange<>.relative(toShapedArrayAxis:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 < result || a3 >= a2 || a4 >= a2)
  {
    __break(1u);
  }
  else if (a4 >= result)
  {
    return a3;
  }
  __break(1u);
  return result;
}

uint64_t sub_19E6B6030(uint64_t a1, uint64_t a2)
{
  uint64_t result = *v2;
  uint64_t v5 = v2[1];
  if (*v2 >= a1)
  {
    BOOL v7 = __OFSUB__(result, a2);
    BOOL v6 = result - a2 < 0;
  }
  else
  {
    BOOL v7 = 0;
    BOOL v6 = 0;
  }
  if (v6 != v7)
  {
    BOOL v9 = __OFSUB__(v5, a2);
    BOOL v8 = v5 - a2 < 0;
  }
  else
  {
    BOOL v9 = 0;
    BOOL v8 = 0;
  }
  if (v8 != v9)
  {
    if (v5 >= a1) {
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t PartialRangeThrough<>.relative(toShapedArrayAxis:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3 >= a2)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (a2 < result)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (a3 < result) {
LABEL_7:
  }
    __break(1u);
  return result;
}

uint64_t sub_19E6B608C(uint64_t result, uint64_t a2)
{
  if (*v2 >= a2)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (a2 < result)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (*v2 < result) {
LABEL_7:
  }
    __break(1u);
  return result;
}

uint64_t dispatch thunk of MLShapedArrayRangeExpression.relative(toShapedArrayAxis:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t sub_19E6B60D0(uint64_t a1, uint64_t a2, __int16 a3, uint64_t a4, uint64_t a5, __int16 a6, unint64_t a7, uint64_t a8)
{
  unsigned __int8 v10 = a6;
  uint64_t v11 = (unsigned __int8 *)a4;
  unsigned __int8 v12 = a3;
  uint64_t v14 = (unsigned __int8 *)a1;
  uint64_t result = sub_19E6BF630(a1, a2, a3 & 0x1FF, a4, a5, a6 & 0x1FF, a8);
  if (result) {
    return result;
  }
  int v19 = v12;
  if (!v12)
  {
    int v19 = v10;
    switch(v10)
    {
      case 1u:
      case 5u:
        *(void *)&v1598[0] = v14;
        *(void *)&v1598[1] = a2;
        sub_19E690A14();
        return sub_19EBF62B8();
      case 2u:
        if (v11)
        {
          if ((a7 & 0x8000000000000000) != 0) {
            goto LABEL_435;
          }
          for (; a7; --a7)
          {
            __int16 v45 = *v14++;
            *(_WORD *)uint64_t v11 = v45;
            v11 += 2;
          }
        }
        return result;
      case 3u:
        if (v11)
        {
          if ((a7 & 0x8000000000000000) != 0) {
            goto LABEL_432;
          }
          for (; a7; --a7)
          {
            int v42 = *v14++;
            *(_DWORD *)uint64_t v11 = v42;
            v11 += 4;
          }
        }
        return result;
      case 4u:
        if (v11)
        {
          if ((a7 & 0x8000000000000000) != 0) {
            goto LABEL_433;
          }
          for (; a7; --a7)
          {
            unsigned int v43 = *v14++;
            *(void *)uint64_t v11 = v43;
            v11 += 8;
          }
        }
        return result;
      case 6u:
        if (v11)
        {
          if ((a7 & 0x8000000000000000) != 0) {
            goto LABEL_436;
          }
          for (; a7; --a7)
          {
            __int16 v46 = *v14++;
            *(_WORD *)uint64_t v11 = v46;
            v11 += 2;
          }
        }
        return result;
      case 7u:
        if (v11)
        {
          if ((a7 & 0x8000000000000000) != 0) {
            goto LABEL_437;
          }
          for (; a7; --a7)
          {
            int v47 = *v14++;
            *(_DWORD *)uint64_t v11 = v47;
            v11 += 4;
          }
        }
        return result;
      case 8u:
        if (v11)
        {
          if ((a7 & 0x8000000000000000) != 0) {
            goto LABEL_434;
          }
          for (; a7; --a7)
          {
            unsigned int v44 = *v14++;
            *(void *)uint64_t v11 = v44;
            v11 += 8;
          }
        }
        return result;
      case 9u:
        if (!v11) {
          return result;
        }
        if ((a7 & 0x8000000000000000) != 0) {
          goto LABEL_439;
        }
        if (!a7) {
          return result;
        }
        if (a7 >= 6 && (&v14[a7] <= v11 || &v11[2 * a7] <= v14))
        {
          unint64_t v53 = a7 & 0xFFFFFFFFFFFFFFFCLL;
          v131 = v14 + 3;
          v132 = v11 + 4;
          unint64_t v133 = a7 & 0xFFFFFFFFFFFFFFFCLL;
          do
          {
            unsigned int v134 = *(v131 - 3);
            unsigned int v135 = *(v131 - 2);
            unsigned int v136 = *(v131 - 1);
            unsigned int v137 = *v131;
            v131 += 4;
            *(short float *)v17.i16 = (short float)v134;
            *(short float *)&v17.i16[1] = (short float)v135;
            *(short float *)v18.i16 = (short float)v136;
            *(short float *)&v18.i16[1] = (short float)v137;
            *(int32x2_t *)(v132 - 4) = vzip1_s32(v17, *(int32x2_t *)v18.i8);
            v132 += 8;
            v133 -= 4;
          }
          while (v133);
          if (v53 == a7) {
            return result;
          }
        }
        else
        {
          unint64_t v53 = 0;
        }
        unint64_t v54 = a7 - v53;
        long long v55 = &v14[v53];
        long long v56 = (short float *)&v11[2 * v53];
        do
        {
          unsigned int v57 = *v55++;
          *v56++ = (short float)v57;
          --v54;
        }
        while (v54);
        return result;
      case 0xAu:
        if (!v11) {
          return result;
        }
        if ((a7 & 0x8000000000000000) != 0) {
          goto LABEL_431;
        }
        if (!a7) {
          return result;
        }
        if (a7 >= 6 && (&v14[a7] <= v11 || &v11[4 * a7] <= v14))
        {
          unint64_t v37 = a7 & 0xFFFFFFFFFFFFFFFCLL;
          v115 = v14 + 3;
          unint64_t v116 = (float32x2_t *)(v11 + 8);
          unint64_t v117 = a7 & 0xFFFFFFFFFFFFFFFCLL;
          do
          {
            v118.i32[0] = *(v115 - 3);
            v118.i32[1] = *(v115 - 2);
            unsigned int v119 = *(v115 - 1);
            unsigned int v120 = *v115;
            v115 += 4;
            v116[-1] = vcvt_f32_u32((uint32x2_t)vand_s8(v118, (int8x8_t)0x100000001));
            *unint64_t v116 = vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)__PAIR64__(v120, v119), (int8x8_t)0x100000001));
            v116 += 2;
            v117 -= 4;
          }
          while (v117);
          if (v37 == a7) {
            return result;
          }
        }
        else
        {
          unint64_t v37 = 0;
        }
        unint64_t v38 = a7 - v37;
        long long v39 = &v14[v37];
        long long v40 = (float *)&v11[4 * v37];
        do
        {
          unsigned int v41 = *v39++;
          *v40++ = (float)v41;
          --v38;
        }
        while (v38);
        return result;
      case 0xBu:
        if (!v11) {
          return result;
        }
        if ((a7 & 0x8000000000000000) != 0) {
          goto LABEL_438;
        }
        if (!a7) {
          return result;
        }
        if (a7 >= 6 && (&v14[a7] <= v11 || &v11[8 * a7] <= v14))
        {
          unint64_t v48 = a7 & 0xFFFFFFFFFFFFFFFCLL;
          v121 = v14 + 3;
          v122 = (float64x2_t *)(v11 + 16);
          unint64_t v123 = a7 & 0xFFFFFFFFFFFFFFFCLL;
          do
          {
            v124.i32[0] = *(v121 - 3);
            v124.i32[1] = *(v121 - 2);
            int8x8_t v125 = vand_s8(v124, (int8x8_t)0x100000001);
            unsigned int v126 = *(v121 - 1);
            unsigned int v127 = *v121;
            v121 += 4;
            int8x8_t v128 = vand_s8((int8x8_t)__PAIR64__(v127, v126), (int8x8_t)0x100000001);
            v129.i64[0] = v125.u32[0];
            v129.i64[1] = v125.u32[1];
            float64x2_t v130 = vcvtq_f64_u64(v129);
            v129.i64[0] = v128.u32[0];
            v129.i64[1] = v128.u32[1];
            v122[-1] = v130;
            float64x2_t *v122 = vcvtq_f64_u64(v129);
            v122 += 2;
            v123 -= 4;
          }
          while (v123);
          if (v48 == a7) {
            return result;
          }
        }
        else
        {
          unint64_t v48 = 0;
        }
        unint64_t v49 = a7 - v48;
        long long v50 = &v14[v48];
        long long v51 = (double *)&v11[8 * v48];
        do
        {
          unsigned int v52 = *v50++;
          *v51++ = (double)v52;
          --v49;
        }
        while (v49);
        return result;
      default:
        return result;
    }
  }
  int v16 = v10;
  if (v12 != 5 || v10)
  {
    if (v12 == 6 && !v10)
    {
      if (!v11) {
        return result;
      }
      if ((a7 & 0x8000000000000000) == 0)
      {
        if (!a7) {
          return result;
        }
        if (a7 < 8 || &v14[2 * a7] > v11 && &v11[a7] > v14)
        {
          unint64_t v21 = 0;
          goto LABEL_24;
        }
        if (a7 >= 0x20)
        {
          unint64_t v21 = a7 & 0xFFFFFFFFFFFFFFE0;
          uint64_t v82 = (int8x16_t *)(v11 + 16);
          uint64_t v83 = (int16x8_t *)(v14 + 32);
          v84.i64[0] = 0x101010101010101;
          v84.i64[1] = 0x101010101010101;
          unint64_t v85 = a7 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            int16x8_t v86 = v83[-2];
            int16x8_t v87 = v83[-1];
            int16x8_t v88 = *v83;
            int16x8_t v89 = v83[1];
            v83 += 4;
            v82[-1] = vbicq_s8(v84, vuzp1q_s8((int8x16_t)vceqzq_s16(v86), (int8x16_t)vceqzq_s16(v87)));
            *uint64_t v82 = vbicq_s8(v84, vuzp1q_s8((int8x16_t)vceqzq_s16(v88), (int8x16_t)vceqzq_s16(v89)));
            v82 += 2;
            v85 -= 32;
          }
          while (v85);
          if (v21 == a7) {
            return result;
          }
          if ((a7 & 0x18) == 0)
          {
LABEL_24:
            unint64_t v22 = a7 - v21;
            uint64_t v23 = &v14[2 * v21];
            uint64_t v24 = (BOOL *)&v11[v21];
            do
            {
              int v25 = *(unsigned __int16 *)v23;
              v23 += 2;
              *v24++ = v25 != 0;
              --v22;
            }
            while (v22);
            return result;
          }
        }
        else
        {
          unint64_t v21 = 0;
        }
        unint64_t v90 = v21;
        unint64_t v21 = a7 & 0xFFFFFFFFFFFFFFF8;
        v91 = (int8x8_t *)&v11[v90];
        uint64_t v92 = (int16x8_t *)&v14[2 * v90];
        unint64_t v93 = v90 - (a7 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          int16x8_t v94 = *v92++;
          *v91++ = vand_s8(vmovn_s16(vtstq_s16(v94, v94)), (int8x8_t)0x101010101010101);
          v93 += 8;
        }
        while (v93);
        if (v21 == a7) {
          return result;
        }
        goto LABEL_24;
      }
      __break(1u);
      goto LABEL_342;
    }
    if (v12 == 7 && !v10)
    {
      if (!v11) {
        return result;
      }
      if ((a7 & 0x8000000000000000) == 0)
      {
        if (!a7) {
          return result;
        }
        if (a7 < 8 || &v14[4 * a7] > v11 && &v11[a7] > v14)
        {
          unint64_t v26 = 0;
          goto LABEL_36;
        }
        if (a7 >= 0x20)
        {
          unint64_t v26 = a7 & 0xFFFFFFFFFFFFFFE0;
          unint64_t v104 = (int8x16_t *)(v11 + 16);
          v105 = (int32x4_t *)(v14 + 64);
          v106.i64[0] = 0x101010101010101;
          v106.i64[1] = 0x101010101010101;
          unint64_t v107 = a7 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            int8x16_t v108 = vbicq_s8(v106, vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32(*v105), (int16x8_t)vceqzq_s32(v105[1])), (int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32(v105[2]), (int16x8_t)vceqzq_s32(v105[3]))));
            v104[-1] = vbicq_s8(v106, vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32(v105[-4]), (int16x8_t)vceqzq_s32(v105[-3])), (int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32(v105[-2]), (int16x8_t)vceqzq_s32(v105[-1]))));
            *unint64_t v104 = v108;
            v104 += 2;
            v105 += 8;
            v107 -= 32;
          }
          while (v107);
          if (v26 == a7) {
            return result;
          }
          if ((a7 & 0x18) == 0)
          {
LABEL_36:
            unint64_t v27 = a7 - v26;
            uint64_t v28 = &v14[4 * v26];
            uint64_t v29 = (BOOL *)&v11[v26];
            do
            {
              int v30 = *(_DWORD *)v28;
              v28 += 4;
              *v29++ = v30 != 0;
              --v27;
            }
            while (v27);
            return result;
          }
        }
        else
        {
          unint64_t v26 = 0;
        }
        unint64_t v109 = v26;
        unint64_t v26 = a7 & 0xFFFFFFFFFFFFFFF8;
        uint64_t v110 = (int8x8_t *)&v11[v109];
        v111 = (int32x4_t *)&v14[4 * v109];
        unint64_t v112 = v109 - (a7 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          int32x4_t v113 = *v111;
          int32x4_t v114 = v111[1];
          v111 += 2;
          *v110++ = vand_s8(vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32(v113), (int16x8_t)vceqzq_s32(v114)))), (int8x8_t)0x101010101010101);
          v112 += 8;
        }
        while (v112);
        if (v26 == a7) {
          return result;
        }
        goto LABEL_36;
      }
      __break(1u);
      goto LABEL_391;
    }
    if (v12 == 8 && !v10)
    {
      if (!v11) {
        return result;
      }
      if ((a7 & 0x8000000000000000) != 0)
      {
        __break(1u);
LABEL_431:
        __break(1u);
LABEL_432:
        __break(1u);
LABEL_433:
        __break(1u);
LABEL_434:
        __break(1u);
LABEL_435:
        __break(1u);
LABEL_436:
        __break(1u);
LABEL_437:
        __break(1u);
LABEL_438:
        __break(1u);
LABEL_439:
        __break(1u);
        goto LABEL_440;
      }
      if (!a7) {
        return result;
      }
      if (a7 < 8 || &v14[8 * a7] > v11 && &v11[a7] > v14)
      {
        unint64_t v31 = 0;
        goto LABEL_48;
      }
      if (a7 >= 0x10)
      {
        unint64_t v31 = a7 & 0xFFFFFFFFFFFFFFF0;
        v143.i64[0] = 0x101010101010101;
        v143.i64[1] = 0x101010101010101;
        unint64_t v144 = a7 & 0xFFFFFFFFFFFFFFF0;
        v145 = (int64x2_t *)v14;
        v146 = (int8x16_t *)v11;
        do
        {
          *v146++ = vandq_s8(vuzp1q_s8(vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_s64(*v145), (int32x4_t)vceqzq_s64(v145[1])), (int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_s64(v145[2]), (int32x4_t)vceqzq_s64(v145[3])))), vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_s64(v145[4]), (int32x4_t)vceqzq_s64(v145[5])), (int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_s64(v145[6]), (int32x4_t)vceqzq_s64(v145[7]))))), v143);
          v145 += 8;
          v144 -= 16;
        }
        while (v144);
        if (v31 == a7) {
          return result;
        }
        if ((a7 & 8) == 0)
        {
LABEL_48:
          unint64_t v32 = a7 - v31;
          long long v33 = &v14[8 * v31];
          uint64_t v34 = (BOOL *)&v11[v31];
          do
          {
            uint64_t v35 = *(void *)v33;
            v33 += 8;
            *v34++ = v35 != 0;
            --v32;
          }
          while (v32);
          return result;
        }
      }
      else
      {
        unint64_t v31 = 0;
      }
      unint64_t v100 = v31;
      unint64_t v31 = a7 & 0xFFFFFFFFFFFFFFF8;
      unint64_t v101 = (int8x8_t *)&v11[v100];
      v102 = (int64x2_t *)&v14[8 * v100];
      unint64_t v103 = v100 - (a7 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        *v101++ = vand_s8(vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_s64(*v102), (int32x4_t)vceqzq_s64(v102[1])), (int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_s64(v102[2]), (int32x4_t)vceqzq_s64(v102[3]))))), (int8x8_t)0x101010101010101);
        v102 += 4;
        v103 += 8;
      }
      while (v103);
      if (v31 == a7) {
        return result;
      }
      goto LABEL_48;
    }
    if (v12 == 1 && !v10)
    {
      if (!v11) {
        return result;
      }
      if ((a7 & 0x8000000000000000) != 0)
      {
        __break(1u);
        goto LABEL_475;
      }
      if (!a7) {
        return result;
      }
      unint64_t v36 = 0;
      if (a7 >= 8 && (unint64_t)(v11 - v14) >= 0x20)
      {
        if (a7 < 0x20)
        {
          unint64_t v36 = 0;
LABEL_225:
          unint64_t v152 = v36;
          unint64_t v36 = a7 & 0xFFFFFFFFFFFFFFF8;
          v153 = (int8x8_t *)&v11[v152];
          v154 = (int8x8_t *)&v14[v152];
          unint64_t v155 = v152 - (a7 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            int8x8_t v156 = *v154++;
            *v153++ = vbic_s8((int8x8_t)0x101010101010101, vceqz_s8(v156));
            v155 += 8;
          }
          while (v155);
          if (v36 == a7) {
            return result;
          }
          goto LABEL_228;
        }
        unint64_t v36 = a7 & 0xFFFFFFFFFFFFFFE0;
        v147 = (int8x16_t *)(v11 + 16);
        v148 = (int8x16_t *)(v14 + 16);
        v149.i64[0] = 0x101010101010101;
        v149.i64[1] = 0x101010101010101;
        unint64_t v150 = a7 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          int8x16_t v151 = vbicq_s8(v149, vceqzq_s8(*v148));
          v147[-1] = vbicq_s8(v149, vceqzq_s8(v148[-1]));
          int8x16_t *v147 = v151;
          v147 += 2;
          v148 += 2;
          v150 -= 32;
        }
        while (v150);
        if (v36 == a7) {
          return result;
        }
        if ((a7 & 0x18) != 0) {
          goto LABEL_225;
        }
      }
LABEL_228:
      unint64_t v157 = a7 - v36;
      v158 = &v14[v36];
      v159 = (BOOL *)&v11[v36];
      do
      {
        int v160 = *v158++;
        *v159++ = v160 != 0;
        --v157;
      }
      while (v157);
      return result;
    }
    if (v12 == 2 && !v10)
    {
      if (!v11) {
        return result;
      }
      if ((a7 & 0x8000000000000000) != 0)
      {
        __break(1u);
        goto LABEL_520;
      }
      if (!a7) {
        return result;
      }
      if (a7 < 8 || &v14[2 * a7] > v11 && &v11[a7] > v14)
      {
        unint64_t v72 = 0;
        goto LABEL_139;
      }
      if (a7 >= 0x20)
      {
        unint64_t v72 = a7 & 0xFFFFFFFFFFFFFFE0;
        v171 = (int8x16_t *)(v11 + 16);
        v172 = (int16x8_t *)(v14 + 32);
        v173.i64[0] = 0x101010101010101;
        v173.i64[1] = 0x101010101010101;
        unint64_t v174 = a7 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          int16x8_t v175 = v172[-2];
          int16x8_t v176 = v172[-1];
          int16x8_t v177 = *v172;
          int16x8_t v178 = v172[1];
          v172 += 4;
          v171[-1] = vbicq_s8(v173, vuzp1q_s8((int8x16_t)vceqzq_s16(v175), (int8x16_t)vceqzq_s16(v176)));
          int8x16_t *v171 = vbicq_s8(v173, vuzp1q_s8((int8x16_t)vceqzq_s16(v177), (int8x16_t)vceqzq_s16(v178)));
          v171 += 2;
          v174 -= 32;
        }
        while (v174);
        if (v72 == a7) {
          return result;
        }
        if ((a7 & 0x18) == 0)
        {
LABEL_139:
          unint64_t v73 = a7 - v72;
          int64_t v74 = &v14[2 * v72];
          uint64_t v75 = (BOOL *)&v11[v72];
          do
          {
            int v76 = *(unsigned __int16 *)v74;
            v74 += 2;
            *v75++ = v76 != 0;
            --v73;
          }
          while (v73);
          return result;
        }
      }
      else
      {
        unint64_t v72 = 0;
      }
      unint64_t v179 = v72;
      unint64_t v72 = a7 & 0xFFFFFFFFFFFFFFF8;
      v180 = (int8x8_t *)&v11[v179];
      v181 = (int16x8_t *)&v14[2 * v179];
      unint64_t v182 = v179 - (a7 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        int16x8_t v183 = *v181++;
        *v180++ = vand_s8(vmovn_s16(vtstq_s16(v183, v183)), (int8x8_t)0x101010101010101);
        v182 += 8;
      }
      while (v182);
      if (v72 == a7) {
        return result;
      }
      goto LABEL_139;
    }
    if (v12 == 3 && !v10)
    {
      if (!v11) {
        return result;
      }
      if ((a7 & 0x8000000000000000) != 0)
      {
        __break(1u);
        goto LABEL_677;
      }
      if (!a7) {
        return result;
      }
      if (a7 < 8 || &v14[4 * a7] > v11 && &v11[a7] > v14)
      {
        unint64_t v77 = 0;
        goto LABEL_153;
      }
      if (a7 >= 0x20)
      {
        unint64_t v77 = a7 & 0xFFFFFFFFFFFFFFE0;
        v193 = (int8x16_t *)(v11 + 16);
        v194 = (int32x4_t *)(v14 + 64);
        v195.i64[0] = 0x101010101010101;
        v195.i64[1] = 0x101010101010101;
        unint64_t v196 = a7 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          int8x16_t v197 = vbicq_s8(v195, vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32(*v194), (int16x8_t)vceqzq_s32(v194[1])), (int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32(v194[2]), (int16x8_t)vceqzq_s32(v194[3]))));
          v193[-1] = vbicq_s8(v195, vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32(v194[-4]), (int16x8_t)vceqzq_s32(v194[-3])), (int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32(v194[-2]), (int16x8_t)vceqzq_s32(v194[-1]))));
          int8x16_t *v193 = v197;
          v193 += 2;
          v194 += 8;
          v196 -= 32;
        }
        while (v196);
        if (v77 == a7) {
          return result;
        }
        if ((a7 & 0x18) == 0)
        {
LABEL_153:
          unint64_t v78 = a7 - v77;
          uint64_t v79 = &v14[4 * v77];
          uint64_t v80 = (BOOL *)&v11[v77];
          do
          {
            int v81 = *(_DWORD *)v79;
            v79 += 4;
            *v80++ = v81 != 0;
            --v78;
          }
          while (v78);
          return result;
        }
      }
      else
      {
        unint64_t v77 = 0;
      }
      unint64_t v198 = v77;
      unint64_t v77 = a7 & 0xFFFFFFFFFFFFFFF8;
      v199 = (int8x8_t *)&v11[v198];
      v200 = (int32x4_t *)&v14[4 * v198];
      unint64_t v201 = v198 - (a7 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        int32x4_t v202 = *v200;
        int32x4_t v203 = v200[1];
        v200 += 2;
        *v199++ = vand_s8(vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32(v202), (int16x8_t)vceqzq_s32(v203)))), (int8x8_t)0x101010101010101);
        v201 += 8;
      }
      while (v201);
      if (v77 == a7) {
        return result;
      }
      goto LABEL_153;
    }
    if (v12 == 4 && !v10)
    {
      if (!v11) {
        return result;
      }
      if ((a7 & 0x8000000000000000) != 0)
      {
        __break(1u);
        goto LABEL_772;
      }
      if (!a7) {
        return result;
      }
      if (a7 < 8 || &v14[8 * a7] > v11 && &v11[a7] > v14)
      {
        unint64_t v95 = 0;
        goto LABEL_175;
      }
      if (a7 >= 0x10)
      {
        unint64_t v95 = a7 & 0xFFFFFFFFFFFFFFF0;
        v209.i64[0] = 0x101010101010101;
        v209.i64[1] = 0x101010101010101;
        unint64_t v210 = a7 & 0xFFFFFFFFFFFFFFF0;
        v211 = (int64x2_t *)v14;
        v212 = (int8x16_t *)v11;
        do
        {
          *v212++ = vandq_s8(vuzp1q_s8(vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_s64(*v211), (int32x4_t)vceqzq_s64(v211[1])), (int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_s64(v211[2]), (int32x4_t)vceqzq_s64(v211[3])))), vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_s64(v211[4]), (int32x4_t)vceqzq_s64(v211[5])), (int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_s64(v211[6]), (int32x4_t)vceqzq_s64(v211[7]))))), v209);
          v211 += 8;
          v210 -= 16;
        }
        while (v210);
        if (v95 == a7) {
          return result;
        }
        if ((a7 & 8) == 0)
        {
LABEL_175:
          unint64_t v96 = a7 - v95;
          uint64_t v97 = &v14[8 * v95];
          uint64_t v98 = (BOOL *)&v11[v95];
          do
          {
            uint64_t v99 = *(void *)v97;
            v97 += 8;
            *v98++ = v99 != 0;
            --v96;
          }
          while (v96);
          return result;
        }
      }
      else
      {
        unint64_t v95 = 0;
      }
      unint64_t v189 = v95;
      unint64_t v95 = a7 & 0xFFFFFFFFFFFFFFF8;
      v190 = (int8x8_t *)&v11[v189];
      v191 = (int64x2_t *)&v14[8 * v189];
      unint64_t v192 = v189 - (a7 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        *v190++ = vand_s8(vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_s64(*v191), (int32x4_t)vceqzq_s64(v191[1])), (int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_s64(v191[2]), (int32x4_t)vceqzq_s64(v191[3]))))), (int8x8_t)0x101010101010101);
        v191 += 4;
        v192 += 8;
      }
      while (v192);
      if (v95 == a7) {
        return result;
      }
      goto LABEL_175;
    }
    if (v12 == 9 && !v10)
    {
      if (!v11) {
        return result;
      }
      if ((a7 & 0x8000000000000000) != 0)
      {
        __break(1u);
        goto LABEL_837;
      }
      if (!a7) {
        return result;
      }
      if (a7 < 8 || &v14[2 * a7] > v11 && &v11[a7] > v14)
      {
        unint64_t v138 = 0;
        goto LABEL_213;
      }
      if (a7 >= 0x20)
      {
        unint64_t v138 = a7 & 0xFFFFFFFFFFFFFFE0;
        v218 = (int8x16_t *)(v11 + 16);
        v219 = (long long *)(v14 + 32);
        v220.i64[0] = 0x101010101010101;
        v220.i64[1] = 0x101010101010101;
        unint64_t v221 = a7 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v223 = *(v219 - 2);
          long long v222 = *(v219 - 1);
          long long v225 = *v219;
          long long v224 = v219[1];
          v219 += 4;
          v218[-1] = vbicq_s8(v220, vuzp1q_s8((int8x16_t)vceqzq_s16((int16x8_t)(v223 & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL))), (int8x16_t)vceqzq_s16((int16x8_t)(v222 & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)))));
          int8x16_t *v218 = vbicq_s8(v220, vuzp1q_s8((int8x16_t)vceqzq_s16((int16x8_t)(v225 & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL))), (int8x16_t)vceqzq_s16((int16x8_t)(v224 & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)))));
          v218 += 2;
          v221 -= 32;
        }
        while (v221);
        if (v138 == a7) {
          return result;
        }
        if ((a7 & 0x18) == 0)
        {
LABEL_213:
          unint64_t v139 = a7 - v138;
          v140 = &v14[2 * v138];
          v141 = (BOOL *)&v11[v138];
          do
          {
            __int16 v142 = *(_WORD *)v140;
            v140 += 2;
            *v141++ = (v142 & 0x7FFF) != 0;
            --v139;
          }
          while (v139);
          return result;
        }
      }
      else
      {
        unint64_t v138 = 0;
      }
      unint64_t v226 = v138;
      unint64_t v138 = a7 & 0xFFFFFFFFFFFFFFF8;
      v227 = (int8x8_t *)&v11[v226];
      v228 = &v14[2 * v226];
      unint64_t v229 = v226 - (a7 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        long long v230 = *(_OWORD *)v228;
        v228 += 16;
        *v227++ = vand_s8(vmovn_s16(vtstq_s16((int16x8_t)(v230 & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), (int16x8_t)(v230 & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)))), (int8x8_t)0x101010101010101);
        v229 += 8;
      }
      while (v229);
      if (v138 == a7) {
        return result;
      }
      goto LABEL_213;
    }
    if (v12 == 10 && !v10)
    {
      if (!v11) {
        return result;
      }
      if ((a7 & 0x8000000000000000) != 0)
      {
        __break(1u);
        goto LABEL_900;
      }
      if (!a7) {
        return result;
      }
      if (a7 < 8 || &v14[4 * a7] > v11 && &v11[a7] > v14)
      {
        unint64_t v161 = 0;
        goto LABEL_240;
      }
      if (a7 >= 0x20)
      {
        unint64_t v161 = a7 & 0xFFFFFFFFFFFFFFE0;
        v255 = (int8x16_t *)(v11 + 16);
        v256 = (long long *)(v14 + 64);
        v257.i64[0] = 0x101010101010101;
        v257.i64[1] = 0x101010101010101;
        unint64_t v258 = a7 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v260 = *(v256 - 2);
          long long v259 = *(v256 - 1);
          long long v262 = *(v256 - 4);
          long long v261 = *(v256 - 3);
          long long v264 = v256[2];
          long long v263 = v256[3];
          long long v266 = *v256;
          long long v265 = v256[1];
          v256 += 8;
          v255[-1] = vbicq_s8(v257, vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32((int32x4_t)(v262 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL))), (int16x8_t)vceqzq_s32((int32x4_t)(v261 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)))), (int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32((int32x4_t)(v260 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL))), (int16x8_t)vceqzq_s32((int32x4_t)(v259 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL))))));
          int8x16_t *v255 = vbicq_s8(v257, vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32((int32x4_t)(v266 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL))), (int16x8_t)vceqzq_s32((int32x4_t)(v265 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)))), (int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32((int32x4_t)(v264 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL))), (int16x8_t)vceqzq_s32((int32x4_t)(v263 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL))))));
          v255 += 2;
          v258 -= 32;
        }
        while (v258);
        if (v161 == a7) {
          return result;
        }
        if ((a7 & 0x18) == 0)
        {
LABEL_240:
          unint64_t v162 = a7 - v161;
          v163 = &v14[4 * v161];
          v164 = (BOOL *)&v11[v161];
          do
          {
            int v165 = *(_DWORD *)v163;
            v163 += 4;
            *v164++ = (v165 & 0x7FFFFFFF) != 0;
            --v162;
          }
          while (v162);
          return result;
        }
      }
      else
      {
        unint64_t v161 = 0;
      }
      unint64_t v267 = v161;
      unint64_t v161 = a7 & 0xFFFFFFFFFFFFFFF8;
      v268 = (int8x8_t *)&v11[v267];
      v269 = &v14[4 * v267];
      unint64_t v270 = v267 - (a7 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        long long v272 = *(_OWORD *)v269;
        long long v271 = *((_OWORD *)v269 + 1);
        v269 += 32;
        *v268++ = vand_s8(vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32((int32x4_t)(v272 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL))), (int16x8_t)vceqzq_s32((int32x4_t)(v271 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)))))), (int8x8_t)0x101010101010101);
        v270 += 8;
      }
      while (v270);
      if (v161 == a7) {
        return result;
      }
      goto LABEL_240;
    }
    if (v12 == 11 && !v10)
    {
      if (!v11) {
        return result;
      }
      if ((a7 & 0x8000000000000000) != 0)
      {
        __break(1u);
        goto LABEL_956;
      }
      if (!a7) {
        return result;
      }
      if (a7 < 8 || &v14[8 * a7] > v11 && &v11[a7] > v14)
      {
        unint64_t v166 = 0;
        goto LABEL_254;
      }
      if (a7 >= 0x10)
      {
        unint64_t v166 = a7 & 0xFFFFFFFFFFFFFFF0;
        int8x16_t v288 = (int8x16_t)vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
        v289.i64[0] = 0x101010101010101;
        v289.i64[1] = 0x101010101010101;
        unint64_t v290 = a7 & 0xFFFFFFFFFFFFFFF0;
        v291 = (int8x16_t *)v14;
        v292 = (int8x16_t *)v11;
        do
        {
          int8x16_t v294 = v291[6];
          int8x16_t v293 = v291[7];
          int8x16_t v296 = v291[4];
          int8x16_t v295 = v291[5];
          int8x16_t v298 = v291[2];
          int8x16_t v297 = v291[3];
          int8x16_t v300 = *v291;
          int8x16_t v299 = v291[1];
          v291 += 8;
          *v292++ = vandq_s8(vuzp1q_s8(vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_s64((int64x2_t)vandq_s8(v300, v288)), (int32x4_t)vceqzq_s64((int64x2_t)vandq_s8(v299, v288))), (int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_s64((int64x2_t)vandq_s8(v298, v288)), (int32x4_t)vceqzq_s64((int64x2_t)vandq_s8(v297, v288))))), vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_s64((int64x2_t)vandq_s8(v296, v288)), (int32x4_t)vceqzq_s64((int64x2_t)vandq_s8(v295, v288))), (int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_s64((int64x2_t)vandq_s8(v294, v288)), (int32x4_t)vceqzq_s64((int64x2_t)vandq_s8(v293, v288)))))), v289);
          v290 -= 16;
        }
        while (v290);
        if (v166 == a7) {
          return result;
        }
        if ((a7 & 8) == 0)
        {
LABEL_254:
          unint64_t v167 = a7 - v166;
          v168 = &v14[8 * v166];
          v169 = (BOOL *)&v11[v166];
          do
          {
            uint64_t v170 = *(void *)v168;
            v168 += 8;
            *v169++ = (v170 & 0x7FFFFFFFFFFFFFFFLL) != 0;
            --v167;
          }
          while (v167);
          return result;
        }
      }
      else
      {
        unint64_t v166 = 0;
      }
      unint64_t v246 = v166;
      unint64_t v166 = a7 & 0xFFFFFFFFFFFFFFF8;
      v247 = (int8x8_t *)&v11[v246];
      v248 = (int8x16_t *)&v14[8 * v246];
      unint64_t v249 = v246 - (a7 & 0xFFFFFFFFFFFFFFF8);
      int8x16_t v250 = (int8x16_t)vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
      do
      {
        int8x16_t v252 = v248[2];
        int8x16_t v251 = v248[3];
        int8x16_t v254 = *v248;
        int8x16_t v253 = v248[1];
        v248 += 4;
        *v247++ = vand_s8(vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_s64((int64x2_t)vandq_s8(v254, v250)), (int32x4_t)vceqzq_s64((int64x2_t)vandq_s8(v253, v250))), (int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_s64((int64x2_t)vandq_s8(v252, v250)), (int32x4_t)vceqzq_s64((int64x2_t)vandq_s8(v251, v250)))))), (int8x8_t)0x101010101010101);
        v249 += 8;
      }
      while (v249);
      if (v166 == a7) {
        return result;
      }
      goto LABEL_254;
    }
    if (v12 == 5)
    {
      if (v10 != 8)
      {
        if (v10 == 7)
        {
LABEL_342:
          if (!v11) {
            return result;
          }
          if ((a7 & 0x8000000000000000) == 0)
          {
            if (!a7) {
              return result;
            }
            if (a7 < 8 || &v14[a7] > v11 && &v11[4 * a7] > v14)
            {
              unint64_t v231 = 0;
              goto LABEL_349;
            }
            if (a7 >= 0x20)
            {
              unint64_t v231 = a7 & 0xFFFFFFFFFFFFFFE0;
              v407 = (int32x4_t *)(v11 + 64);
              v408 = (int8x8_t *)(v14 + 16);
              unint64_t v409 = a7 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                int8x16_t v410 = *(int8x16_t *)v408[-2].i8;
                int8x16_t v411 = *(int8x16_t *)v408->i8;
                int16x8_t v412 = vmovl_s8(*(int8x8_t *)v410.i8);
                int16x8_t v413 = vmovl_high_s8(v410);
                int16x8_t v414 = vmovl_s8(*v408);
                v407[-2] = vmovl_s16(*(int16x4_t *)v413.i8);
                v407[-1] = vmovl_high_s16(v413);
                int16x8_t v415 = vmovl_high_s8(v411);
                v407[-4] = vmovl_s16(*(int16x4_t *)v412.i8);
                v407[-3] = vmovl_high_s16(v412);
                v407[2] = vmovl_s16(*(int16x4_t *)v415.i8);
                v407[3] = vmovl_high_s16(v415);
                int32x4_t *v407 = vmovl_s16(*(int16x4_t *)v414.i8);
                v407[1] = vmovl_high_s16(v414);
                v407 += 8;
                v408 += 4;
                v409 -= 32;
              }
              while (v409);
              if (v231 == a7) {
                return result;
              }
              if ((a7 & 0x18) == 0)
              {
LABEL_349:
                unint64_t v232 = a7 - v231;
                v233 = &v14[v231];
                v234 = &v11[4 * v231];
                do
                {
                  int v235 = (char)*v233++;
                  *(_DWORD *)v234 = v235;
                  v234 += 4;
                  --v232;
                }
                while (v232);
                return result;
              }
            }
            else
            {
              unint64_t v231 = 0;
            }
            unint64_t v416 = v231;
            unint64_t v231 = a7 & 0xFFFFFFFFFFFFFFF8;
            v417 = (int32x4_t *)&v11[4 * v416];
            v418 = (int8x8_t *)&v14[v416];
            unint64_t v419 = v416 - (a7 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              int8x8_t v420 = *v418++;
              int16x8_t v421 = vmovl_s8(v420);
              int32x4_t *v417 = vmovl_s16(*(int16x4_t *)v421.i8);
              v417[1] = vmovl_high_s16(v421);
              v417 += 2;
              v419 += 8;
            }
            while (v419);
            if (v231 == a7) {
              return result;
            }
            goto LABEL_349;
          }
          __break(1u);
          goto LABEL_1084;
        }
        if (v10 != 6) {
          goto LABEL_554;
        }
        if (!v11) {
          return result;
        }
        if ((a7 & 0x8000000000000000) != 0)
        {
LABEL_1085:
          __break(1u);
LABEL_1086:
          __break(1u);
          goto LABEL_1087;
        }
        if (!a7) {
          return result;
        }
        if (a7 < 8 || &v14[a7] > v11 && &v11[2 * a7] > v14)
        {
          unint64_t v184 = 0;
          goto LABEL_278;
        }
        if (a7 >= 0x20)
        {
          unint64_t v184 = a7 & 0xFFFFFFFFFFFFFFE0;
          v455 = (int16x8_t *)(v11 + 32);
          v456 = (int8x8_t *)(v14 + 16);
          unint64_t v457 = a7 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            int8x16_t v458 = *(int8x16_t *)v456[-2].i8;
            int16x8_t v459 = vmovl_s8(*v456);
            int16x8_t v460 = vmovl_high_s8(*(int8x16_t *)v456->i8);
            v455[-2] = vmovl_s8(*(int8x8_t *)v458.i8);
            v455[-1] = vmovl_high_s8(v458);
            int16x8_t *v455 = v459;
            v455[1] = v460;
            v455 += 4;
            v456 += 4;
            v457 -= 32;
          }
          while (v457);
          if (v184 == a7) {
            return result;
          }
          if ((a7 & 0x18) == 0)
          {
LABEL_278:
            unint64_t v185 = a7 - v184;
            v186 = &v14[v184];
            v187 = &v11[2 * v184];
            do
            {
              __int16 v188 = (char)*v186++;
              *(_WORD *)v187 = v188;
              v187 += 2;
              --v185;
            }
            while (v185);
            return result;
          }
        }
        else
        {
          unint64_t v184 = 0;
        }
        unint64_t v461 = v184;
        unint64_t v184 = a7 & 0xFFFFFFFFFFFFFFF8;
        v462 = (int16x8_t *)&v11[2 * v461];
        v463 = (int8x8_t *)&v14[v461];
        unint64_t v464 = v461 - (a7 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          int8x8_t v465 = *v463++;
          *v462++ = vmovl_s8(v465);
          v464 += 8;
        }
        while (v464);
        if (v184 == a7) {
          return result;
        }
        goto LABEL_278;
      }
      if (!v11) {
        return result;
      }
      if ((a7 & 0x8000000000000000) != 0)
      {
LABEL_1084:
        __break(1u);
        goto LABEL_1085;
      }
      if (!a7) {
        return result;
      }
      if (a7 < 8 || &v14[a7] > v11 && &v11[8 * a7] > v14)
      {
        unint64_t v236 = 0;
        goto LABEL_359;
      }
      if (a7 >= 0x10)
      {
        unint64_t v236 = a7 & 0xFFFFFFFFFFFFFFF0;
        unint64_t v439 = a7 & 0xFFFFFFFFFFFFFFF0;
        v440 = (int8x16_t *)v14;
        v441 = v11;
        do
        {
          int8x16_t v442 = *v440++;
          int16x8_t v443 = vmovl_s8(*(int8x8_t *)v442.i8);
          int32x4_t v444 = vmovl_s16(*(int16x4_t *)v443.i8);
          *(void *)&long long v445 = v444.i32[0];
          *((void *)&v445 + 1) = v444.i32[1];
          long long v446 = v445;
          int32x4_t v447 = vmovl_high_s16(v443);
          *(void *)&long long v445 = v447.i32[0];
          *((void *)&v445 + 1) = v447.i32[1];
          long long v448 = v445;
          int16x8_t v449 = vmovl_high_s8(v442);
          int32x4_t v450 = vmovl_high_s16(v449);
          *(void *)&long long v445 = v450.i32[0];
          *((void *)&v445 + 1) = v450.i32[1];
          long long v451 = v445;
          *(void *)&long long v445 = v450.i32[2];
          *((void *)&v445 + 1) = v450.i32[3];
          *((_OWORD *)v441 + 6) = v451;
          *((_OWORD *)v441 + 7) = v445;
          int32x4_t v452 = vmovl_s16(*(int16x4_t *)v449.i8);
          *(void *)&long long v445 = v452.i32[0];
          *((void *)&v445 + 1) = v452.i32[1];
          long long v453 = v445;
          *(void *)&long long v445 = v447.i32[2];
          *((void *)&v445 + 1) = v447.i32[3];
          long long v454 = v445;
          *(void *)&long long v445 = v452.i32[2];
          *((void *)&v445 + 1) = v452.i32[3];
          *((_OWORD *)v441 + 4) = v453;
          *((_OWORD *)v441 + 5) = v445;
          *((_OWORD *)v441 + 2) = v448;
          *((_OWORD *)v441 + 3) = v454;
          *(void *)&long long v445 = v444.i32[2];
          *((void *)&v445 + 1) = v444.i32[3];
          *(_OWORD *)v441 = v446;
          *((_OWORD *)v441 + 1) = v445;
          v441 += 128;
          v439 -= 16;
        }
        while (v439);
        if (v236 == a7) {
          return result;
        }
        if ((a7 & 8) == 0)
        {
LABEL_359:
          unint64_t v237 = a7 - v236;
          v238 = &v14[v236];
          v239 = &v11[8 * v236];
          do
          {
            uint64_t v240 = (char)*v238++;
            *(void *)v239 = v240;
            v239 += 8;
            --v237;
          }
          while (v237);
          return result;
        }
      }
      else
      {
        unint64_t v236 = 0;
      }
      unint64_t v331 = v236;
      unint64_t v236 = a7 & 0xFFFFFFFFFFFFFFF8;
      v332 = &v11[8 * v331];
      v333 = (int8x8_t *)&v14[v331];
      unint64_t v334 = v331 - (a7 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        int8x8_t v335 = *v333++;
        int16x8_t v336 = vmovl_s8(v335);
        int32x4_t v337 = vmovl_s16(*(int16x4_t *)v336.i8);
        *(void *)&long long v338 = v337.i32[0];
        *((void *)&v338 + 1) = v337.i32[1];
        long long v339 = v338;
        int32x4_t v340 = vmovl_high_s16(v336);
        *(void *)&long long v338 = v340.i32[0];
        *((void *)&v338 + 1) = v340.i32[1];
        long long v341 = v338;
        *(void *)&long long v338 = v340.i32[2];
        *((void *)&v338 + 1) = v340.i32[3];
        *((_OWORD *)v332 + 2) = v341;
        *((_OWORD *)v332 + 3) = v338;
        *(void *)&long long v338 = v337.i32[2];
        *((void *)&v338 + 1) = v337.i32[3];
        *(_OWORD *)v332 = v339;
        *((_OWORD *)v332 + 1) = v338;
        v332 += 64;
        v334 += 8;
      }
      while (v334);
      if (v236 == a7) {
        return result;
      }
      goto LABEL_359;
    }
    if (v12 != 6) {
      goto LABEL_317;
    }
    if (v10 == 8)
    {
      if (!v11) {
        return result;
      }
      if ((a7 & 0x8000000000000000) == 0)
      {
        if (!a7) {
          return result;
        }
        if (a7 >= 0x10 && (&v14[2 * a7] <= v11 || &v11[8 * a7] <= v14))
        {
          unint64_t v278 = a7 & 0xFFFFFFFFFFFFFFF0;
          v422 = v11 + 64;
          v423 = (int16x4_t *)(v14 + 16);
          unint64_t v424 = a7 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            int16x8_t v425 = *(int16x8_t *)v423[-2].i8;
            int16x8_t v426 = *(int16x8_t *)v423->i8;
            int32x4_t v427 = vmovl_s16(*(int16x4_t *)v425.i8);
            *(void *)&long long v428 = v427.i32[0];
            *((void *)&v428 + 1) = v427.i32[1];
            long long v429 = v428;
            *(void *)&long long v428 = v427.i32[2];
            *((void *)&v428 + 1) = v427.i32[3];
            long long v430 = v428;
            int32x4_t v431 = vmovl_high_s16(v425);
            *(void *)&long long v428 = v431.i32[0];
            *((void *)&v428 + 1) = v431.i32[1];
            long long v432 = v428;
            *(void *)&long long v428 = v431.i32[2];
            *((void *)&v428 + 1) = v431.i32[3];
            long long v433 = v428;
            int32x4_t v434 = vmovl_s16(*v423);
            *(void *)&long long v428 = v434.i32[0];
            *((void *)&v428 + 1) = v434.i32[1];
            long long v435 = v428;
            *(void *)&long long v428 = v434.i32[2];
            *((void *)&v428 + 1) = v434.i32[3];
            long long v436 = v428;
            *(v422 - 2) = v432;
            *(v422 - 1) = v433;
            int32x4_t v437 = vmovl_high_s16(v426);
            *(void *)&long long v428 = v437.i32[0];
            *((void *)&v428 + 1) = v437.i32[1];
            long long v438 = v428;
            *(v422 - 4) = v429;
            *(v422 - 3) = v430;
            *(void *)&long long v428 = v437.i32[2];
            *((void *)&v428 + 1) = v437.i32[3];
            v422[2] = v438;
            v422[3] = v428;
            _OWORD *v422 = v435;
            v422[1] = v436;
            v422 += 8;
            v423 += 4;
            v424 -= 16;
          }
          while (v424);
          if (v278 == a7) {
            return result;
          }
        }
        else
        {
          unint64_t v278 = 0;
        }
        unint64_t v279 = a7 - v278;
        v280 = &v14[2 * v278];
        v281 = &v11[8 * v278];
        do
        {
          uint64_t v282 = *(__int16 *)v280;
          v280 += 2;
          *(void *)v281 = v282;
          v281 += 8;
          --v279;
        }
        while (v279);
        return result;
      }
      goto LABEL_1112;
    }
    if (v10 == 7)
    {
LABEL_391:
      if (!v11) {
        return result;
      }
      if ((a7 & 0x8000000000000000) == 0)
      {
        if (!a7) {
          return result;
        }
        if (a7 >= 0x10 && (&v14[2 * a7] <= v11 || &v11[4 * a7] <= v14))
        {
          unint64_t v273 = a7 & 0xFFFFFFFFFFFFFFF0;
          v401 = (int32x4_t *)(v11 + 32);
          v402 = (int16x4_t *)(v14 + 16);
          unint64_t v403 = a7 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            int16x8_t v404 = *(int16x8_t *)v402[-2].i8;
            int32x4_t v405 = vmovl_s16(*v402);
            int32x4_t v406 = vmovl_high_s16(*(int16x8_t *)v402->i8);
            v401[-2] = vmovl_s16(*(int16x4_t *)v404.i8);
            v401[-1] = vmovl_high_s16(v404);
            int32x4_t *v401 = v405;
            v401[1] = v406;
            v401 += 4;
            v402 += 4;
            v403 -= 16;
          }
          while (v403);
          if (v273 == a7) {
            return result;
          }
        }
        else
        {
          unint64_t v273 = 0;
        }
        unint64_t v274 = a7 - v273;
        v275 = &v14[2 * v273];
        v276 = &v11[4 * v273];
        do
        {
          int v277 = *(__int16 *)v275;
          v275 += 2;
          *(_DWORD *)v276 = v277;
          v276 += 4;
          --v274;
        }
        while (v274);
        return result;
      }
      __break(1u);
LABEL_1112:
      __break(1u);
      goto LABEL_1113;
    }
    if (v10 != 5) {
      goto LABEL_554;
    }
    if (!v11) {
      return result;
    }
    if ((a7 & 0x8000000000000000) != 0)
    {
LABEL_1113:
      __break(1u);
LABEL_1114:
      __break(1u);
      goto LABEL_1115;
    }
    if (!a7) {
      return result;
    }
    if (a7 < 8 || &v14[2 * a7] > v11 && &v11[a7] > v14)
    {
      unint64_t v204 = 0;
      goto LABEL_306;
    }
    if (a7 >= 0x20)
    {
      unint64_t v204 = a7 & 0xFFFFFFFFFFFFFFE0;
      v514 = (int8x16_t *)(v11 + 16);
      v515 = (int8x16_t *)(v14 + 32);
      unint64_t v516 = a7 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        int8x16_t v518 = v515[-2];
        int8x16_t v517 = v515[-1];
        int8x16_t v520 = *v515;
        int8x16_t v519 = v515[1];
        v515 += 4;
        v514[-1] = vuzp1q_s8(v518, v517);
        int8x16_t *v514 = vuzp1q_s8(v520, v519);
        v514 += 2;
        v516 -= 32;
      }
      while (v516);
      if (v204 == a7) {
        return result;
      }
      if ((a7 & 0x18) == 0)
      {
LABEL_306:
        unint64_t v205 = a7 - v204;
        v206 = &v14[2 * v204];
        v207 = &v11[v204];
        do
        {
          unsigned __int8 v208 = *v206;
          v206 += 2;
          *v207++ = v208;
          --v205;
        }
        while (v205);
        return result;
      }
    }
    else
    {
      unint64_t v204 = 0;
    }
    unint64_t v521 = v204;
    unint64_t v204 = a7 & 0xFFFFFFFFFFFFFFF8;
    v522 = (int8x8_t *)&v11[v521];
    v523 = (int16x8_t *)&v14[2 * v521];
    unint64_t v524 = v521 - (a7 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      int16x8_t v525 = *v523++;
      *v522++ = vmovn_s16(v525);
      v524 += 8;
    }
    while (v524);
    if (v204 == a7) {
      return result;
    }
    goto LABEL_306;
  }
  if (!v11) {
    return result;
  }
  if ((a7 & 0x8000000000000000) == 0)
  {
    if (!a7) {
      return result;
    }
    unint64_t v20 = 0;
    if (a7 < 8 || (unint64_t)(v11 - v14) < 0x20) {
      goto LABEL_127;
    }
    if (a7 >= 0x20)
    {
      unint64_t v20 = a7 & 0xFFFFFFFFFFFFFFE0;
      long long v58 = (int8x16_t *)(v11 + 16);
      uint64_t v59 = (int8x16_t *)(v14 + 16);
      v60.i64[0] = 0x101010101010101;
      v60.i64[1] = 0x101010101010101;
      unint64_t v61 = a7 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        int8x16_t v62 = vbicq_s8(v60, vceqzq_s8(*v59));
        v58[-1] = vbicq_s8(v60, vceqzq_s8(v59[-1]));
        int8x16_t *v58 = v62;
        v58 += 2;
        v59 += 2;
        v61 -= 32;
      }
      while (v61);
      if (v20 == a7) {
        return result;
      }
      if ((a7 & 0x18) == 0)
      {
LABEL_127:
        unint64_t v68 = a7 - v20;
        uint64_t v69 = &v14[v20];
        unint64_t v70 = (BOOL *)&v11[v20];
        do
        {
          int v71 = *v69++;
          *v70++ = v71 != 0;
          --v68;
        }
        while (v68);
        return result;
      }
    }
    else
    {
      unint64_t v20 = 0;
    }
    unint64_t v63 = v20;
    unint64_t v20 = a7 & 0xFFFFFFFFFFFFFFF8;
    int64_t v64 = (int8x8_t *)&v11[v63];
    unint64_t v65 = (int8x8_t *)&v14[v63];
    unint64_t v66 = v63 - (a7 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      int8x8_t v67 = *v65++;
      *v64++ = vbic_s8((int8x8_t)0x101010101010101, vceqz_s8(v67));
      v66 += 8;
    }
    while (v66);
    if (v20 == a7) {
      return result;
    }
    goto LABEL_127;
  }
  __break(1u);
LABEL_317:
  if (v12 == 7)
  {
    if (v10 == 8)
    {
      if (!v11) {
        return result;
      }
      if ((a7 & 0x8000000000000000) == 0)
      {
        if (!a7) {
          return result;
        }
        if (a7 >= 0xC && (&v14[4 * a7] <= v11 || &v11[8 * a7] <= v14))
        {
          unint64_t v306 = a7 & 0xFFFFFFFFFFFFFFF8;
          v506 = v11 + 32;
          v507 = v14 + 16;
          unint64_t v508 = a7 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            long long v509 = *((_OWORD *)v507 - 1);
            *(void *)&long long v510 = (int)v509;
            *((void *)&v510 + 1) = SDWORD1(v509);
            long long v511 = v510;
            *(void *)&long long v510 = SDWORD2(v509);
            *((void *)&v510 + 1) = SHIDWORD(v509);
            long long v512 = v510;
            *(void *)&long long v510 = (int)*(_OWORD *)v507;
            *((void *)&v510 + 1) = (int)HIDWORD(*(void *)v507);
            long long v513 = v510;
            *(void *)&long long v510 = (int)*((void *)v507 + 1);
            *((void *)&v510 + 1) = (int)HIDWORD(*(_OWORD *)v507);
            *(v506 - 2) = v511;
            *(v506 - 1) = v512;
            _OWORD *v506 = v513;
            v506[1] = v510;
            v506 += 4;
            v507 += 32;
            v508 -= 8;
          }
          while (v508);
          if (v306 == a7) {
            return result;
          }
        }
        else
        {
          unint64_t v306 = 0;
        }
        unint64_t v307 = a7 - v306;
        v308 = &v14[4 * v306];
        v309 = &v11[8 * v306];
        do
        {
          uint64_t v310 = *(int *)v308;
          v308 += 4;
          *(void *)v309 = v310;
          v309 += 8;
          --v307;
        }
        while (v307);
        return result;
      }
      goto LABEL_1128;
    }
    if (v10 != 6)
    {
      if (v10 == 5)
      {
        if (!v11) {
          return result;
        }
        if ((a7 & 0x8000000000000000) == 0)
        {
          if (!a7) {
            return result;
          }
          if (a7 < 8 || &v14[4 * a7] > v11 && &v11[a7] > v14)
          {
            unint64_t v213 = 0;
            goto LABEL_328;
          }
          if (a7 >= 0x20)
          {
            unint64_t v213 = a7 & 0xFFFFFFFFFFFFFFE0;
            v561 = (int8x16_t *)(v11 + 16);
            v562 = (int8x16x4_t *)(v14 + 64);
            unint64_t v563 = a7 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              int8x16x4_t v1604 = *v562;
              v561[-1] = vqtbl4q_s8(v562[-1], (int8x16_t)xmmword_19EC3AB20);
              int8x16_t *v561 = vqtbl4q_s8(v1604, (int8x16_t)xmmword_19EC3AB20);
              v561 += 2;
              v562 += 2;
              v563 -= 32;
            }
            while (v563);
            if (v213 == a7) {
              return result;
            }
            if ((a7 & 0x18) == 0)
            {
LABEL_328:
              unint64_t v214 = a7 - v213;
              v215 = &v14[4 * v213];
              v216 = &v11[v213];
              do
              {
                int v217 = *(_DWORD *)v215;
                v215 += 4;
                *v216++ = v217;
                --v214;
              }
              while (v214);
              return result;
            }
          }
          else
          {
            unint64_t v213 = 0;
          }
          unint64_t v564 = v213;
          unint64_t v213 = a7 & 0xFFFFFFFFFFFFFFF8;
          v565 = &v11[v564];
          v566 = (int8x16x2_t *)&v14[4 * v564];
          unint64_t v567 = v564 - (a7 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            int8x16x2_t v1600 = *v566++;
            *(void *)v565 = vqtbl2q_s8(v1600, (int8x16_t)xmmword_19EC3AB30).u64[0];
            v565 += 8;
            v567 += 8;
          }
          while (v567);
          if (v213 == a7) {
            return result;
          }
          goto LABEL_328;
        }
        goto LABEL_1129;
      }
      goto LABEL_554;
    }
LABEL_440:
    if (!v11) {
      return result;
    }
    if ((a7 & 0x8000000000000000) == 0)
    {
      if (!a7) {
        return result;
      }
      if (a7 >= 0x10 && (&v14[4 * a7] <= v11 || &v11[2 * a7] <= v14))
      {
        unint64_t v301 = a7 & 0xFFFFFFFFFFFFFFF0;
        v499 = (int16x8_t *)(v11 + 16);
        v500 = (int16x8_t *)(v14 + 32);
        unint64_t v501 = a7 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          int16x8_t v503 = v500[-2];
          int16x8_t v502 = v500[-1];
          int16x8_t v505 = *v500;
          int16x8_t v504 = v500[1];
          v500 += 4;
          v499[-1] = vuzp1q_s16(v503, v502);
          int16x8_t *v499 = vuzp1q_s16(v505, v504);
          v499 += 2;
          v501 -= 16;
        }
        while (v501);
        if (v301 == a7) {
          return result;
        }
      }
      else
      {
        unint64_t v301 = 0;
      }
      unint64_t v302 = a7 - v301;
      v303 = &v14[4 * v301];
      v304 = &v11[2 * v301];
      do
      {
        int v305 = *(_DWORD *)v303;
        v303 += 4;
        *(_WORD *)v304 = v305;
        v304 += 2;
        --v302;
      }
      while (v302);
      return result;
    }
    __break(1u);
LABEL_1128:
    __break(1u);
LABEL_1129:
    __break(1u);
LABEL_1130:
    __break(1u);
    goto LABEL_1131;
  }
  if (v12 == 8)
  {
    if (v10 == 7)
    {
      if (!v11) {
        return result;
      }
      if ((a7 & 0x8000000000000000) == 0)
      {
        if (!a7) {
          return result;
        }
        if (a7 >= 0xC && (&v14[8 * a7] <= v11 || &v11[4 * a7] <= v14))
        {
          unint64_t v321 = a7 & 0xFFFFFFFFFFFFFFF8;
          v554 = (int32x4_t *)(v11 + 16);
          v555 = (int32x4_t *)(v14 + 32);
          unint64_t v556 = a7 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            int32x4_t v558 = v555[-2];
            int32x4_t v557 = v555[-1];
            int32x4_t v560 = *v555;
            int32x4_t v559 = v555[1];
            v555 += 4;
            v554[-1] = vuzp1q_s32(v558, v557);
            int32x4_t *v554 = vuzp1q_s32(v560, v559);
            v554 += 2;
            v556 -= 8;
          }
          while (v556);
          if (v321 == a7) {
            return result;
          }
        }
        else
        {
          unint64_t v321 = 0;
        }
        unint64_t v322 = a7 - v321;
        v323 = &v14[8 * v321];
        v324 = &v11[4 * v321];
        do
        {
          uint64_t v325 = *(void *)v323;
          v323 += 8;
          *(_DWORD *)v324 = v325;
          v324 += 4;
          --v322;
        }
        while (v322);
        return result;
      }
      goto LABEL_1154;
    }
    if (v10 != 6)
    {
      if (v10 == 5)
      {
        if (!v11) {
          return result;
        }
        if ((a7 & 0x8000000000000000) == 0)
        {
          if (!a7) {
            return result;
          }
          if (a7 < 8 || &v14[8 * a7] > v11 && &v11[a7] > v14)
          {
            unint64_t v241 = 0;
            goto LABEL_373;
          }
          if (a7 >= 0x20)
          {
            unint64_t v241 = a7 & 0xFFFFFFFFFFFFFFE0;
            v599 = v11 + 16;
            v600 = (int8x16x4_t *)(v14 + 128);
            unint64_t v601 = a7 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              *(void *)&long long v602 = vqtbl4q_s8(v600[-2], (int8x16_t)xmmword_19EC3AB00).u64[0];
              *(void *)&long long v603 = vqtbl4q_s8(*v600, (int8x16_t)xmmword_19EC3AB00).u64[0];
              *((void *)&v602 + 1) = vqtbl4q_s8(v600[-1], (int8x16_t)xmmword_19EC3AB00).u64[0];
              *((void *)&v603 + 1) = vqtbl4q_s8(v600[1], (int8x16_t)xmmword_19EC3AB00).u64[0];
              *(v599 - 1) = v602;
              _OWORD *v599 = v603;
              v599 += 2;
              v600 += 4;
              v601 -= 32;
            }
            while (v601);
            if (v241 == a7) {
              return result;
            }
            if ((a7 & 0x18) == 0)
            {
LABEL_373:
              unint64_t v242 = a7 - v241;
              v243 = &v14[8 * v241];
              v244 = &v11[v241];
              do
              {
                uint64_t v245 = *(void *)v243;
                v243 += 8;
                *v244++ = v245;
                --v242;
              }
              while (v242);
              return result;
            }
          }
          else
          {
            unint64_t v241 = 0;
          }
          unint64_t v604 = v241;
          unint64_t v241 = a7 & 0xFFFFFFFFFFFFFFF8;
          v605 = &v11[v604];
          v606 = (int8x16x4_t *)&v14[8 * v604];
          unint64_t v607 = v604 - (a7 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            *(void *)v605 = vqtbl4q_s8(*v606, (int8x16_t)xmmword_19EC3AB10).u64[0];
            v605 += 8;
            ++v606;
            v607 += 8;
          }
          while (v607);
          if (v241 == a7) {
            return result;
          }
          goto LABEL_373;
        }
LABEL_1155:
        __break(1u);
        goto LABEL_1156;
      }
LABEL_554:
      BOOL v357 = v10 == 6;
      goto LABEL_555;
    }
LABEL_475:
    if (!v11) {
      return result;
    }
    if ((a7 & 0x8000000000000000) == 0)
    {
      if (!a7) {
        return result;
      }
      if (a7 >= 0x10 && (&v14[8 * a7] <= v11 || &v11[2 * a7] <= v14))
      {
        unint64_t v316 = a7 & 0xFFFFFFFFFFFFFFF0;
        v550 = (int16x8_t *)(v11 + 16);
        v551 = (int32x4_t *)(v14 + 64);
        unint64_t v552 = a7 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          int16x8_t v553 = vuzp1q_s16((int16x8_t)vuzp1q_s32(*v551, v551[1]), (int16x8_t)vuzp1q_s32(v551[2], v551[3]));
          v550[-1] = vuzp1q_s16((int16x8_t)vuzp1q_s32(v551[-4], v551[-3]), (int16x8_t)vuzp1q_s32(v551[-2], v551[-1]));
          int16x8_t *v550 = v553;
          v550 += 2;
          v551 += 8;
          v552 -= 16;
        }
        while (v552);
        if (v316 == a7) {
          return result;
        }
      }
      else
      {
        unint64_t v316 = 0;
      }
      unint64_t v317 = a7 - v316;
      v318 = &v14[8 * v316];
      v319 = &v11[2 * v316];
      do
      {
        uint64_t v320 = *(void *)v318;
        v318 += 8;
        *(_WORD *)v319 = v320;
        v319 += 2;
        --v317;
      }
      while (v317);
      return result;
    }
    __break(1u);
LABEL_1154:
    __break(1u);
    goto LABEL_1155;
  }
  if (v12 != 1)
  {
    if (v12 == 2)
    {
      if (v10 == 4)
      {
        if (!v11) {
          return result;
        }
        if ((a7 & 0x8000000000000000) == 0)
        {
          if (!a7) {
            return result;
          }
          if (a7 >= 0x10 && (&v14[2 * a7] <= v11 || &v11[8 * a7] <= v14))
          {
            unint64_t v478 = a7 & 0xFFFFFFFFFFFFFFF0;
            v651 = v11 + 64;
            v652 = (uint16x4_t *)(v14 + 16);
            unint64_t v653 = a7 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              uint16x8_t v654 = *(uint16x8_t *)v652[-2].i8;
              uint16x8_t v655 = *(uint16x8_t *)v652->i8;
              uint32x4_t v656 = vmovl_u16(*(uint16x4_t *)v654.i8);
              *(void *)&long long v657 = v656.u32[0];
              *((void *)&v657 + 1) = v656.u32[1];
              long long v658 = v657;
              *(void *)&long long v657 = v656.u32[2];
              *((void *)&v657 + 1) = v656.u32[3];
              long long v659 = v657;
              uint32x4_t v660 = vmovl_high_u16(v654);
              *(void *)&long long v657 = v660.u32[0];
              *((void *)&v657 + 1) = v660.u32[1];
              long long v661 = v657;
              *(void *)&long long v657 = v660.u32[2];
              *((void *)&v657 + 1) = v660.u32[3];
              long long v662 = v657;
              uint32x4_t v663 = vmovl_u16(*v652);
              *(void *)&long long v657 = v663.u32[0];
              *((void *)&v657 + 1) = v663.u32[1];
              long long v664 = v657;
              *(void *)&long long v657 = v663.u32[2];
              *((void *)&v657 + 1) = v663.u32[3];
              long long v665 = v657;
              *(v651 - 2) = v661;
              *(v651 - 1) = v662;
              uint32x4_t v666 = vmovl_high_u16(v655);
              *(void *)&long long v657 = v666.u32[0];
              *((void *)&v657 + 1) = v666.u32[1];
              long long v667 = v657;
              *(v651 - 4) = v658;
              *(v651 - 3) = v659;
              *(void *)&long long v657 = v666.u32[2];
              *((void *)&v657 + 1) = v666.u32[3];
              v651[2] = v667;
              v651[3] = v657;
              _OWORD *v651 = v664;
              v651[1] = v665;
              v651 += 8;
              v652 += 4;
              v653 -= 16;
            }
            while (v653);
            if (v478 == a7) {
              return result;
            }
          }
          else
          {
            unint64_t v478 = 0;
          }
          unint64_t v479 = a7 - v478;
          v480 = &v14[2 * v478];
          v481 = &v11[8 * v478];
          do
          {
            unsigned int v482 = *(unsigned __int16 *)v480;
            v480 += 2;
            *(void *)v481 = v482;
            v481 += 8;
            --v479;
          }
          while (v479);
          return result;
        }
        goto LABEL_1200;
      }
      if (v10 != 3)
      {
        if (v10 == 1)
        {
          if (!v11) {
            return result;
          }
          if ((a7 & 0x8000000000000000) == 0)
          {
            if (!a7) {
              return result;
            }
            if (a7 < 8 || &v14[2 * a7] > v11 && &v11[a7] > v14)
            {
              unint64_t v311 = 0;
              goto LABEL_471;
            }
            if (a7 >= 0x20)
            {
              unint64_t v311 = a7 & 0xFFFFFFFFFFFFFFE0;
              v745 = (int8x16_t *)(v11 + 16);
              v746 = (int8x16_t *)(v14 + 32);
              unint64_t v747 = a7 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                int8x16_t v749 = v746[-2];
                int8x16_t v748 = v746[-1];
                int8x16_t v751 = *v746;
                int8x16_t v750 = v746[1];
                v746 += 4;
                v745[-1] = vuzp1q_s8(v749, v748);
                int8x16_t *v745 = vuzp1q_s8(v751, v750);
                v745 += 2;
                v747 -= 32;
              }
              while (v747);
              if (v311 == a7) {
                return result;
              }
              if ((a7 & 0x18) == 0)
              {
LABEL_471:
                unint64_t v312 = a7 - v311;
                v313 = &v14[2 * v311];
                v314 = &v11[v311];
                do
                {
                  unsigned __int8 v315 = *v313;
                  v313 += 2;
                  *v314++ = v315;
                  --v312;
                }
                while (v312);
                return result;
              }
            }
            else
            {
              unint64_t v311 = 0;
            }
            unint64_t v752 = v311;
            unint64_t v311 = a7 & 0xFFFFFFFFFFFFFFF8;
            v753 = (int8x8_t *)&v11[v752];
            v754 = (int16x8_t *)&v14[2 * v752];
            unint64_t v755 = v752 - (a7 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              int16x8_t v756 = *v754++;
              *v753++ = vmovn_s16(v756);
              v755 += 8;
            }
            while (v755);
            if (v311 == a7) {
              return result;
            }
            goto LABEL_471;
          }
LABEL_1201:
          __break(1u);
          goto LABEL_1202;
        }
LABEL_640:
        BOOL v400 = v10 == 5;
        goto LABEL_698;
      }
LABEL_677:
      if (!v11) {
        return result;
      }
      if ((a7 & 0x8000000000000000) == 0)
      {
        if (!a7) {
          return result;
        }
        if (a7 >= 0x10 && (&v14[2 * a7] <= v11 || &v11[4 * a7] <= v14))
        {
          unint64_t v473 = a7 & 0xFFFFFFFFFFFFFFF0;
          v645 = (uint32x4_t *)(v11 + 32);
          v646 = (uint16x4_t *)(v14 + 16);
          unint64_t v647 = a7 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            uint16x8_t v648 = *(uint16x8_t *)v646[-2].i8;
            uint32x4_t v649 = vmovl_u16(*v646);
            uint32x4_t v650 = vmovl_high_u16(*(uint16x8_t *)v646->i8);
            v645[-2] = vmovl_u16(*(uint16x4_t *)v648.i8);
            v645[-1] = vmovl_high_u16(v648);
            uint32x4_t *v645 = v649;
            v645[1] = v650;
            v645 += 4;
            v646 += 4;
            v647 -= 16;
          }
          while (v647);
          if (v473 == a7) {
            return result;
          }
        }
        else
        {
          unint64_t v473 = 0;
        }
        unint64_t v474 = a7 - v473;
        v475 = &v14[2 * v473];
        v476 = &v11[4 * v473];
        do
        {
          int v477 = *(unsigned __int16 *)v475;
          v475 += 2;
          *(_DWORD *)v476 = v477;
          v476 += 4;
          --v474;
        }
        while (v474);
        return result;
      }
      __break(1u);
LABEL_1200:
      __break(1u);
      goto LABEL_1201;
    }
    if (v12 == 3)
    {
      if (v10 == 4)
      {
        if (!v11) {
          return result;
        }
        if ((a7 & 0x8000000000000000) == 0)
        {
          if (!a7) {
            return result;
          }
          if (a7 >= 0xC && (&v14[4 * a7] <= v11 || &v11[8 * a7] <= v14))
          {
            unint64_t v540 = a7 & 0xFFFFFFFFFFFFFFF8;
            v737 = v11 + 32;
            v738 = v14 + 16;
            unint64_t v739 = a7 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              long long v740 = *((_OWORD *)v738 - 1);
              *(void *)&long long v741 = v740;
              *((void *)&v741 + 1) = DWORD1(v740);
              long long v742 = v741;
              *(void *)&long long v741 = DWORD2(v740);
              *((void *)&v741 + 1) = HIDWORD(v740);
              long long v743 = v741;
              *(void *)&long long v741 = *(_OWORD *)v738;
              *((void *)&v741 + 1) = HIDWORD(*(void *)v738);
              long long v744 = v741;
              *(void *)&long long v741 = *((void *)v738 + 1);
              *((void *)&v741 + 1) = HIDWORD(*(_OWORD *)v738);
              *(v737 - 2) = v742;
              *(v737 - 1) = v743;
              _OWORD *v737 = v744;
              v737[1] = v741;
              v737 += 4;
              v738 += 32;
              v739 -= 8;
            }
            while (v739);
            if (v540 == a7) {
              return result;
            }
          }
          else
          {
            unint64_t v540 = 0;
          }
          unint64_t v541 = a7 - v540;
          v542 = &v14[4 * v540];
          v543 = &v11[8 * v540];
          do
          {
            unsigned int v544 = *(_DWORD *)v542;
            v542 += 4;
            *(void *)v543 = v544;
            v543 += 8;
            --v541;
          }
          while (v541);
          return result;
        }
        goto LABEL_1228;
      }
      if (v10 != 2)
      {
        if (v10 != 1) {
          goto LABEL_640;
        }
        if (!v11) {
          return result;
        }
        if ((a7 & 0x8000000000000000) == 0)
        {
          if (!a7) {
            return result;
          }
          if (a7 < 8 || &v14[4 * a7] > v11 && &v11[a7] > v14)
          {
            unint64_t v326 = 0;
            goto LABEL_506;
          }
          if (a7 >= 0x20)
          {
            unint64_t v326 = a7 & 0xFFFFFFFFFFFFFFE0;
            v783 = (int8x16_t *)(v11 + 16);
            v784 = (int8x16x4_t *)(v14 + 64);
            unint64_t v785 = a7 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              int8x16x4_t v1606 = *v784;
              v783[-1] = vqtbl4q_s8(v784[-1], (int8x16_t)xmmword_19EC3AB20);
              int8x16_t *v783 = vqtbl4q_s8(v1606, (int8x16_t)xmmword_19EC3AB20);
              v783 += 2;
              v784 += 2;
              v785 -= 32;
            }
            while (v785);
            if (v326 == a7) {
              return result;
            }
            if ((a7 & 0x18) == 0)
            {
LABEL_506:
              unint64_t v327 = a7 - v326;
              v328 = &v14[4 * v326];
              v329 = &v11[v326];
              do
              {
                int v330 = *(_DWORD *)v328;
                v328 += 4;
                *v329++ = v330;
                --v327;
              }
              while (v327);
              return result;
            }
          }
          else
          {
            unint64_t v326 = 0;
          }
          unint64_t v786 = v326;
          unint64_t v326 = a7 & 0xFFFFFFFFFFFFFFF8;
          v787 = &v11[v786];
          v788 = (int8x16x2_t *)&v14[4 * v786];
          unint64_t v789 = v786 - (a7 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            int8x16x2_t v1602 = *v788++;
            *(void *)v787 = vqtbl2q_s8(v1602, (int8x16_t)xmmword_19EC3AB30).u64[0];
            v787 += 8;
            v789 += 8;
          }
          while (v789);
          if (v326 == a7) {
            return result;
          }
          goto LABEL_506;
        }
LABEL_1229:
        __break(1u);
LABEL_1230:
        __break(1u);
        goto LABEL_1231;
      }
LABEL_772:
      if (!v11) {
        return result;
      }
      if ((a7 & 0x8000000000000000) == 0)
      {
        if (!a7) {
          return result;
        }
        if (a7 >= 0x10 && (&v14[4 * a7] <= v11 || &v11[2 * a7] <= v14))
        {
          unint64_t v535 = a7 & 0xFFFFFFFFFFFFFFF0;
          v730 = (int16x8_t *)(v11 + 16);
          v731 = (int16x8_t *)(v14 + 32);
          unint64_t v732 = a7 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            int16x8_t v734 = v731[-2];
            int16x8_t v733 = v731[-1];
            int16x8_t v736 = *v731;
            int16x8_t v735 = v731[1];
            v731 += 4;
            v730[-1] = vuzp1q_s16(v734, v733);
            int16x8_t *v730 = vuzp1q_s16(v736, v735);
            v730 += 2;
            v732 -= 16;
          }
          while (v732);
          if (v535 == a7) {
            return result;
          }
        }
        else
        {
          unint64_t v535 = 0;
        }
        unint64_t v536 = a7 - v535;
        v537 = &v14[4 * v535];
        v538 = &v11[2 * v535];
        do
        {
          int v539 = *(_DWORD *)v537;
          v537 += 4;
          *(_WORD *)v538 = v539;
          v538 += 2;
          --v536;
        }
        while (v536);
        return result;
      }
      __break(1u);
LABEL_1228:
      __break(1u);
      goto LABEL_1229;
    }
    if (v12 != 4) {
      goto LABEL_554;
    }
    if (v10 == 3)
    {
      if (!v11) {
        return result;
      }
      if ((a7 & 0x8000000000000000) == 0)
      {
        if (!a7) {
          return result;
        }
        if (a7 >= 0xC && (&v14[8 * a7] <= v11 || &v11[4 * a7] <= v14))
        {
          unint64_t v578 = a7 & 0xFFFFFFFFFFFFFFF8;
          v776 = (int32x4_t *)(v11 + 16);
          v777 = (int32x4_t *)(v14 + 32);
          unint64_t v778 = a7 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            int32x4_t v780 = v777[-2];
            int32x4_t v779 = v777[-1];
            int32x4_t v782 = *v777;
            int32x4_t v781 = v777[1];
            v777 += 4;
            v776[-1] = vuzp1q_s32(v780, v779);
            int32x4_t *v776 = vuzp1q_s32(v782, v781);
            v776 += 2;
            v778 -= 8;
          }
          while (v778);
          if (v578 == a7) {
            return result;
          }
        }
        else
        {
          unint64_t v578 = 0;
        }
        unint64_t v579 = a7 - v578;
        v580 = &v14[8 * v578];
        v581 = &v11[4 * v578];
        do
        {
          uint64_t v582 = *(void *)v580;
          v580 += 8;
          *(_DWORD *)v581 = v582;
          v581 += 4;
          --v579;
        }
        while (v579);
        return result;
      }
      goto LABEL_1256;
    }
    if (v10 != 2)
    {
      if (v10 != 1) {
        goto LABEL_640;
      }
      if (!v11) {
        return result;
      }
      if ((a7 & 0x8000000000000000) == 0)
      {
        if (!a7) {
          return result;
        }
        if (a7 < 8 || &v14[8 * a7] > v11 && &v11[a7] > v14)
        {
          unint64_t v352 = 0;
          goto LABEL_551;
        }
        if (a7 >= 0x20)
        {
          unint64_t v352 = a7 & 0xFFFFFFFFFFFFFFE0;
          v815 = v11 + 16;
          v816 = (int8x16x4_t *)(v14 + 128);
          unint64_t v817 = a7 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            *(void *)&long long v818 = vqtbl4q_s8(v816[-2], (int8x16_t)xmmword_19EC3AB00).u64[0];
            *(void *)&long long v819 = vqtbl4q_s8(*v816, (int8x16_t)xmmword_19EC3AB00).u64[0];
            *((void *)&v818 + 1) = vqtbl4q_s8(v816[-1], (int8x16_t)xmmword_19EC3AB00).u64[0];
            *((void *)&v819 + 1) = vqtbl4q_s8(v816[1], (int8x16_t)xmmword_19EC3AB00).u64[0];
            *(v815 - 1) = v818;
            _OWORD *v815 = v819;
            v815 += 2;
            v816 += 4;
            v817 -= 32;
          }
          while (v817);
          if (v352 == a7) {
            return result;
          }
          if ((a7 & 0x18) == 0)
          {
LABEL_551:
            unint64_t v353 = a7 - v352;
            v354 = &v14[8 * v352];
            v355 = &v11[v352];
            do
            {
              uint64_t v356 = *(void *)v354;
              v354 += 8;
              *v355++ = v356;
              --v353;
            }
            while (v353);
            return result;
          }
        }
        else
        {
          unint64_t v352 = 0;
        }
        unint64_t v820 = v352;
        unint64_t v352 = a7 & 0xFFFFFFFFFFFFFFF8;
        v821 = &v11[v820];
        v822 = (int8x16x4_t *)&v14[8 * v820];
        unint64_t v823 = v820 - (a7 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          *(void *)v821 = vqtbl4q_s8(*v822, (int8x16_t)xmmword_19EC3AB10).u64[0];
          v821 += 8;
          ++v822;
          v823 += 8;
        }
        while (v823);
        if (v352 == a7) {
          return result;
        }
        goto LABEL_551;
      }
      __break(1u);
      goto LABEL_1255;
    }
LABEL_837:
    if (!v11) {
      return result;
    }
    if ((a7 & 0x8000000000000000) == 0)
    {
      if (!a7) {
        return result;
      }
      if (a7 >= 0x10 && (&v14[8 * a7] <= v11 || &v11[2 * a7] <= v14))
      {
        unint64_t v573 = a7 & 0xFFFFFFFFFFFFFFF0;
        v772 = (int16x8_t *)(v11 + 16);
        v773 = (int32x4_t *)(v14 + 64);
        unint64_t v774 = a7 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          int16x8_t v775 = vuzp1q_s16((int16x8_t)vuzp1q_s32(*v773, v773[1]), (int16x8_t)vuzp1q_s32(v773[2], v773[3]));
          v772[-1] = vuzp1q_s16((int16x8_t)vuzp1q_s32(v773[-4], v773[-3]), (int16x8_t)vuzp1q_s32(v773[-2], v773[-1]));
          int16x8_t *v772 = v775;
          v772 += 2;
          v773 += 8;
          v774 -= 16;
        }
        while (v774);
        if (v573 == a7) {
          return result;
        }
      }
      else
      {
        unint64_t v573 = 0;
      }
      unint64_t v574 = a7 - v573;
      v575 = &v14[8 * v573];
      v576 = &v11[2 * v573];
      do
      {
        uint64_t v577 = *(void *)v575;
        v575 += 8;
        *(_WORD *)v576 = v577;
        v576 += 2;
        --v574;
      }
      while (v574);
      return result;
    }
LABEL_1255:
    __break(1u);
LABEL_1256:
    __break(1u);
    goto LABEL_1257;
  }
  switch(v10)
  {
    case 4u:
      if (!v11) {
        return result;
      }
      if ((a7 & 0x8000000000000000) != 0) {
        goto LABEL_1173;
      }
      if (!a7) {
        return result;
      }
      if (a7 < 8 || &v14[a7] > v11 && &v11[8 * a7] > v14)
      {
        unint64_t v347 = 0;
        goto LABEL_537;
      }
      if (a7 >= 0x10)
      {
        unint64_t v347 = a7 & 0xFFFFFFFFFFFFFFF0;
        unint64_t v668 = a7 & 0xFFFFFFFFFFFFFFF0;
        v669 = (uint8x16_t *)v14;
        v670 = v11;
        do
        {
          uint8x16_t v671 = *v669++;
          uint16x8_t v672 = vmovl_u8(*(uint8x8_t *)v671.i8);
          uint32x4_t v673 = vmovl_u16(*(uint16x4_t *)v672.i8);
          *(void *)&long long v674 = v673.u32[0];
          *((void *)&v674 + 1) = v673.u32[1];
          long long v675 = v674;
          uint32x4_t v676 = vmovl_high_u16(v672);
          *(void *)&long long v674 = v676.u32[0];
          *((void *)&v674 + 1) = v676.u32[1];
          long long v677 = v674;
          uint16x8_t v678 = vmovl_high_u8(v671);
          uint32x4_t v679 = vmovl_high_u16(v678);
          *(void *)&long long v674 = v679.u32[0];
          *((void *)&v674 + 1) = v679.u32[1];
          long long v680 = v674;
          *(void *)&long long v674 = v679.u32[2];
          *((void *)&v674 + 1) = v679.u32[3];
          *((_OWORD *)v670 + 6) = v680;
          *((_OWORD *)v670 + 7) = v674;
          uint32x4_t v681 = vmovl_u16(*(uint16x4_t *)v678.i8);
          *(void *)&long long v674 = v681.u32[0];
          *((void *)&v674 + 1) = v681.u32[1];
          long long v682 = v674;
          *(void *)&long long v674 = v676.u32[2];
          *((void *)&v674 + 1) = v676.u32[3];
          long long v683 = v674;
          *(void *)&long long v674 = v681.u32[2];
          *((void *)&v674 + 1) = v681.u32[3];
          *((_OWORD *)v670 + 4) = v682;
          *((_OWORD *)v670 + 5) = v674;
          *((_OWORD *)v670 + 2) = v677;
          *((_OWORD *)v670 + 3) = v683;
          *(void *)&long long v674 = v673.u32[2];
          *((void *)&v674 + 1) = v673.u32[3];
          *(_OWORD *)v670 = v675;
          *((_OWORD *)v670 + 1) = v674;
          v670 += 128;
          v668 -= 16;
        }
        while (v668);
        if (v347 == a7) {
          return result;
        }
        if ((a7 & 8) == 0)
        {
LABEL_537:
          unint64_t v348 = a7 - v347;
          v349 = &v14[v347];
          v350 = &v11[8 * v347];
          do
          {
            unsigned int v351 = *v349++;
            *(void *)v350 = v351;
            v350 += 8;
            --v348;
          }
          while (v348);
          return result;
        }
      }
      else
      {
        unint64_t v347 = 0;
      }
      unint64_t v588 = v347;
      unint64_t v347 = a7 & 0xFFFFFFFFFFFFFFF8;
      v589 = &v11[8 * v588];
      v590 = (uint8x8_t *)&v14[v588];
      unint64_t v591 = v588 - (a7 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        uint8x8_t v592 = *v590++;
        uint16x8_t v593 = vmovl_u8(v592);
        uint32x4_t v594 = vmovl_u16(*(uint16x4_t *)v593.i8);
        *(void *)&long long v595 = v594.u32[0];
        *((void *)&v595 + 1) = v594.u32[1];
        long long v596 = v595;
        uint32x4_t v597 = vmovl_high_u16(v593);
        *(void *)&long long v595 = v597.u32[0];
        *((void *)&v595 + 1) = v597.u32[1];
        long long v598 = v595;
        *(void *)&long long v595 = v597.u32[2];
        *((void *)&v595 + 1) = v597.u32[3];
        *((_OWORD *)v589 + 2) = v598;
        *((_OWORD *)v589 + 3) = v595;
        *(void *)&long long v595 = v594.u32[2];
        *((void *)&v595 + 1) = v594.u32[3];
        *(_OWORD *)v589 = v596;
        *((_OWORD *)v589 + 1) = v595;
        v589 += 64;
        v591 += 8;
      }
      while (v591);
      if (v347 == a7) {
        return result;
      }
      goto LABEL_537;
    case 3u:
LABEL_520:
      if (!v11) {
        return result;
      }
      if ((a7 & 0x8000000000000000) == 0)
      {
        if (!a7) {
          return result;
        }
        if (a7 < 8 || &v14[a7] > v11 && &v11[4 * a7] > v14)
        {
          unint64_t v342 = 0;
          goto LABEL_527;
        }
        if (a7 >= 0x20)
        {
          unint64_t v342 = a7 & 0xFFFFFFFFFFFFFFE0;
          v632 = (int8x16_t *)(v11 + 64);
          v633 = (int8x16_t *)(v14 + 16);
          v18.i64[1] = 0xFFFFFF0BFFFFFF0ALL;
          unint64_t v634 = a7 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            int8x16_t v635 = v633[-1];
            int8x16_t v636 = *v633;
            int8x16_t v637 = vqtbl1q_s8(*v633, (int8x16_t)xmmword_19EC3AB40);
            int8x16_t v638 = vqtbl1q_s8(*v633, (int8x16_t)xmmword_19EC3AB50);
            v632[-2] = vqtbl1q_s8(v635, (int8x16_t)xmmword_19EC3AB60);
            v632[-1] = vqtbl1q_s8(v635, (int8x16_t)xmmword_19EC3AB70);
            v632[-4] = vqtbl1q_s8(v635, (int8x16_t)xmmword_19EC3AB40);
            v632[-3] = vqtbl1q_s8(v635, (int8x16_t)xmmword_19EC3AB50);
            v632[2] = vqtbl1q_s8(v636, (int8x16_t)xmmword_19EC3AB60);
            v632[3] = vqtbl1q_s8(v636, (int8x16_t)xmmword_19EC3AB70);
            int8x16_t *v632 = v637;
            v632[1] = v638;
            v632 += 8;
            v633 += 2;
            v634 -= 32;
          }
          while (v634);
          if (v342 == a7) {
            return result;
          }
          if ((a7 & 0x18) == 0)
          {
LABEL_527:
            unint64_t v343 = a7 - v342;
            v344 = &v14[v342];
            v345 = &v11[4 * v342];
            do
            {
              int v346 = *v344++;
              *(_DWORD *)v345 = v346;
              v345 += 4;
              --v343;
            }
            while (v343);
            return result;
          }
        }
        else
        {
          unint64_t v342 = 0;
        }
        unint64_t v639 = v342;
        unint64_t v342 = a7 & 0xFFFFFFFFFFFFFFF8;
        v640 = (int8x16_t *)&v11[4 * v639];
        v641 = &v14[v639];
        unint64_t v642 = v639 - (a7 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          uint64_t v643 = *(void *)v641;
          v641 += 8;
          v18.i64[0] = v643;
          int8x16_t v644 = vqtbl1q_s8(v18, (int8x16_t)xmmword_19EC3AB40);
          int8x16_t v18 = vqtbl1q_s8(v18, (int8x16_t)xmmword_19EC3AB50);
          int8x16_t *v640 = v644;
          v640[1] = v18;
          v640 += 2;
          v642 += 8;
        }
        while (v642);
        if (v342 == a7) {
          return result;
        }
        goto LABEL_527;
      }
      __break(1u);
LABEL_1173:
      __break(1u);
      goto LABEL_1174;
    case 2u:
      if (!v11) {
        return result;
      }
      if ((a7 & 0x8000000000000000) == 0)
      {
        if (!a7) {
          return result;
        }
        if (a7 < 8 || &v14[a7] > v11 && &v11[2 * a7] > v14)
        {
          unint64_t v283 = 0;
          goto LABEL_422;
        }
        if (a7 >= 0x20)
        {
          unint64_t v283 = a7 & 0xFFFFFFFFFFFFFFE0;
          v684 = (uint16x8_t *)(v11 + 32);
          v685 = (uint8x8_t *)(v14 + 16);
          unint64_t v686 = a7 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            uint8x16_t v687 = *(uint8x16_t *)v685[-2].i8;
            uint16x8_t v688 = vmovl_u8(*v685);
            uint16x8_t v689 = vmovl_high_u8(*(uint8x16_t *)v685->i8);
            v684[-2] = vmovl_u8(*(uint8x8_t *)v687.i8);
            v684[-1] = vmovl_high_u8(v687);
            uint16x8_t *v684 = v688;
            v684[1] = v689;
            v684 += 4;
            v685 += 4;
            v686 -= 32;
          }
          while (v686);
          if (v283 == a7) {
            return result;
          }
          if ((a7 & 0x18) == 0)
          {
LABEL_422:
            unint64_t v284 = a7 - v283;
            v285 = &v14[v283];
            v286 = &v11[2 * v283];
            do
            {
              __int16 v287 = *v285++;
              *(_WORD *)v286 = v287;
              v286 += 2;
              --v284;
            }
            while (v284);
            return result;
          }
        }
        else
        {
          unint64_t v283 = 0;
        }
        unint64_t v690 = v283;
        unint64_t v283 = a7 & 0xFFFFFFFFFFFFFFF8;
        v691 = (uint16x8_t *)&v11[2 * v690];
        v692 = (uint8x8_t *)&v14[v690];
        unint64_t v693 = v690 - (a7 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          uint8x8_t v694 = *v692++;
          *v691++ = vmovl_u8(v694);
          v693 += 8;
        }
        while (v693);
        if (v283 == a7) {
          return result;
        }
        goto LABEL_422;
      }
LABEL_1174:
      __break(1u);
LABEL_1175:
      __break(1u);
      goto LABEL_1176;
    case 5u:
      if (!v11) {
        return result;
      }
      if ((a7 & 0x8000000000000000) == 0)
      {
        if (!a7) {
          return result;
        }
        unint64_t v389 = 0;
        if (a7 < 8 || (unint64_t)(v11 - v14) < 0x20) {
          goto LABEL_952;
        }
        if (a7 >= 0x20)
        {
          unint64_t v389 = a7 & 0xFFFFFFFFFFFFFFE0;
          v695 = v11 + 16;
          v696 = (long long *)(v14 + 16);
          unint64_t v697 = a7 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v698 = *v696;
            *(v695 - 1) = *(v696 - 1);
            _OWORD *v695 = v698;
            v695 += 2;
            v696 += 2;
            v697 -= 32;
          }
          while (v697);
          if (v389 == a7) {
            return result;
          }
          if ((a7 & 0x18) == 0)
          {
LABEL_952:
            unint64_t v704 = a7 - v389;
            v705 = &v14[v389];
            v706 = &v11[v389];
            do
            {
              unsigned __int8 v707 = *v705++;
              *v706++ = v707;
              --v704;
            }
            while (v704);
            return result;
          }
        }
        else
        {
          unint64_t v389 = 0;
        }
        unint64_t v699 = v389;
        unint64_t v389 = a7 & 0xFFFFFFFFFFFFFFF8;
        v700 = &v11[v699];
        v701 = &v14[v699];
        unint64_t v702 = v699 - (a7 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          uint64_t v703 = *(void *)v701;
          v701 += 8;
          *(void *)v700 = v703;
          v700 += 8;
          v702 += 8;
        }
        while (v702);
        if (v389 == a7) {
          return result;
        }
        goto LABEL_952;
      }
LABEL_1202:
      __break(1u);
LABEL_1203:
      __break(1u);
      goto LABEL_1204;
  }
  BOOL v400 = 0;
LABEL_698:
  if (v12 == 2 && v400)
  {
    if (!v11) {
      return result;
    }
    if ((a7 & 0x8000000000000000) != 0)
    {
      __break(1u);
      goto LABEL_1189;
    }
    if (!a7) {
      return result;
    }
    if (a7 < 8 || &v14[2 * a7] > v11 && &v11[a7] > v14)
    {
      unint64_t v483 = 0;
      goto LABEL_707;
    }
LABEL_900:
    if (a7 >= 0x20)
    {
      unint64_t v483 = a7 & 0xFFFFFFFFFFFFFFE0;
      v708 = (int8x16_t *)(v11 + 16);
      v709 = (int8x16_t *)(v14 + 32);
      unint64_t v710 = a7 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        int8x16_t v712 = v709[-2];
        int8x16_t v711 = v709[-1];
        int8x16_t v714 = *v709;
        int8x16_t v713 = v709[1];
        v709 += 4;
        v708[-1] = vuzp1q_s8(v712, v711);
        int8x16_t *v708 = vuzp1q_s8(v714, v713);
        v708 += 2;
        v710 -= 32;
      }
      while (v710);
      if (v483 == a7) {
        return result;
      }
      if ((a7 & 0x18) == 0)
      {
LABEL_707:
        unint64_t v484 = a7 - v483;
        v485 = &v14[2 * v483];
        v486 = &v11[v483];
        do
        {
          unsigned __int8 v487 = *v485;
          v485 += 2;
          *v486++ = v487;
          --v484;
        }
        while (v484);
        return result;
      }
    }
    else
    {
      unint64_t v483 = 0;
    }
    unint64_t v715 = v483;
    unint64_t v483 = a7 & 0xFFFFFFFFFFFFFFF8;
    v716 = (int8x8_t *)&v11[v715];
    v717 = (int16x8_t *)&v14[2 * v715];
    unint64_t v718 = v715 - (a7 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      int16x8_t v719 = *v717++;
      *v716++ = vmovn_s16(v719);
      v718 += 8;
    }
    while (v718);
    if (v483 == a7) {
      return result;
    }
    goto LABEL_707;
  }
  if (v12 == 3 && v400)
  {
    if (!v11) {
      return result;
    }
    if ((a7 & 0x8000000000000000) != 0)
    {
      __break(1u);
      goto LABEL_1217;
    }
    if (!a7) {
      return result;
    }
    if (a7 < 8 || &v14[4 * a7] > v11 && &v11[a7] > v14)
    {
      unint64_t v489 = 0;
      goto LABEL_721;
    }
LABEL_956:
    if (a7 >= 0x20)
    {
      unint64_t v489 = a7 & 0xFFFFFFFFFFFFFFE0;
      v764 = (int8x16_t *)(v11 + 16);
      v765 = (int8x16x4_t *)(v14 + 64);
      unint64_t v766 = a7 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        int8x16x4_t v1605 = *v765;
        v764[-1] = vqtbl4q_s8(v765[-1], (int8x16_t)xmmword_19EC3AB20);
        int8x16_t *v764 = vqtbl4q_s8(v1605, (int8x16_t)xmmword_19EC3AB20);
        v764 += 2;
        v765 += 2;
        v766 -= 32;
      }
      while (v766);
      if (v489 == a7) {
        return result;
      }
      if ((a7 & 0x18) == 0)
      {
LABEL_721:
        unint64_t v490 = a7 - v489;
        v491 = &v14[4 * v489];
        v492 = &v11[v489];
        do
        {
          int v493 = *(_DWORD *)v491;
          v491 += 4;
          *v492++ = v493;
          --v490;
        }
        while (v490);
        return result;
      }
    }
    else
    {
      unint64_t v489 = 0;
    }
    unint64_t v767 = v489;
    unint64_t v489 = a7 & 0xFFFFFFFFFFFFFFF8;
    v768 = &v11[v767];
    v769 = (int8x16x2_t *)&v14[4 * v767];
    unint64_t v770 = v767 - (a7 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      int8x16x2_t v1601 = *v769++;
      *(void *)v768 = vqtbl2q_s8(v1601, (int8x16_t)xmmword_19EC3AB30).u64[0];
      v768 += 8;
      v770 += 8;
    }
    while (v770);
    if (v489 == a7) {
      return result;
    }
    goto LABEL_721;
  }
  if (v12 != 4) {
    BOOL v400 = 0;
  }
  if (v400)
  {
    if (!v11) {
      return result;
    }
    if ((a7 & 0x8000000000000000) != 0)
    {
      __break(1u);
      goto LABEL_1244;
    }
    if (!a7) {
      return result;
    }
    if (a7 < 8 || &v14[8 * a7] > v11 && &v11[a7] > v14)
    {
      unint64_t v530 = 0;
      goto LABEL_768;
    }
    if (a7 >= 0x20)
    {
      unint64_t v530 = a7 & 0xFFFFFFFFFFFFFFE0;
      v801 = v11 + 16;
      v802 = (int8x16x4_t *)(v14 + 128);
      unint64_t v803 = a7 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        *(void *)&long long v804 = vqtbl4q_s8(v802[-2], (int8x16_t)xmmword_19EC3AB00).u64[0];
        *(void *)&long long v805 = vqtbl4q_s8(*v802, (int8x16_t)xmmword_19EC3AB00).u64[0];
        *((void *)&v804 + 1) = vqtbl4q_s8(v802[-1], (int8x16_t)xmmword_19EC3AB00).u64[0];
        *((void *)&v805 + 1) = vqtbl4q_s8(v802[1], (int8x16_t)xmmword_19EC3AB00).u64[0];
        *(v801 - 1) = v804;
        _OWORD *v801 = v805;
        v801 += 2;
        v802 += 4;
        v803 -= 32;
      }
      while (v803);
      if (v530 == a7) {
        return result;
      }
      if ((a7 & 0x18) == 0)
      {
LABEL_768:
        unint64_t v531 = a7 - v530;
        v532 = &v14[8 * v530];
        v533 = &v11[v530];
        do
        {
          uint64_t v534 = *(void *)v532;
          v532 += 8;
          *v533++ = v534;
          --v531;
        }
        while (v531);
        return result;
      }
    }
    else
    {
      unint64_t v530 = 0;
    }
    unint64_t v806 = v530;
    unint64_t v530 = a7 & 0xFFFFFFFFFFFFFFF8;
    v807 = &v11[v806];
    v808 = (int8x16x4_t *)&v14[8 * v806];
    unint64_t v809 = v806 - (a7 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      *(void *)v807 = vqtbl4q_s8(*v808, (int8x16_t)xmmword_19EC3AB10).u64[0];
      v807 += 8;
      ++v808;
      v809 += 8;
    }
    while (v809);
    if (v530 == a7) {
      return result;
    }
    goto LABEL_768;
  }
  BOOL v357 = v10 == 6;
  if (v12 == 1 && v10 == 6)
  {
    if (!v11) {
      return result;
    }
    if ((a7 & 0x8000000000000000) != 0)
    {
      __break(1u);
      goto LABEL_1271;
    }
    if (!a7) {
      return result;
    }
    if (a7 < 8 || &v14[a7] > v11 && &v11[2 * a7] > v14)
    {
      unint64_t v568 = 0;
      goto LABEL_833;
    }
    if (a7 < 0x20)
    {
      unint64_t v568 = 0;
      goto LABEL_1091;
    }
LABEL_1087:
    unint64_t v568 = a7 & 0xFFFFFFFFFFFFFFE0;
    v857 = (uint16x8_t *)(v11 + 32);
    v858 = (uint8x8_t *)(v14 + 16);
    unint64_t v859 = a7 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      uint8x16_t v860 = *(uint8x16_t *)v858[-2].i8;
      uint16x8_t v861 = vmovl_u8(*v858);
      uint16x8_t v862 = vmovl_high_u8(*(uint8x16_t *)v858->i8);
      v857[-2] = vmovl_u8(*(uint8x8_t *)v860.i8);
      v857[-1] = vmovl_high_u8(v860);
      uint16x8_t *v857 = v861;
      v857[1] = v862;
      v857 += 4;
      v858 += 4;
      v859 -= 32;
    }
    while (v859);
    if (v568 == a7) {
      return result;
    }
    if ((a7 & 0x18) == 0)
    {
LABEL_833:
      unint64_t v569 = a7 - v568;
      v570 = &v14[v568];
      v571 = &v11[2 * v568];
      do
      {
        __int16 v572 = *v570++;
        *(_WORD *)v571 = v572;
        v571 += 2;
        --v569;
      }
      while (v569);
      return result;
    }
LABEL_1091:
    unint64_t v863 = v568;
    unint64_t v568 = a7 & 0xFFFFFFFFFFFFFFF8;
    v864 = (uint16x8_t *)&v11[2 * v863];
    v865 = (uint8x8_t *)&v14[v863];
    unint64_t v866 = v863 - (a7 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      uint8x8_t v867 = *v865++;
      *v864++ = vmovl_u8(v867);
      v866 += 8;
    }
    while (v866);
    if (v568 == a7) {
      return result;
    }
    goto LABEL_833;
  }
LABEL_555:
  if (v12 == 2 && v357)
  {
    if (!v11) {
      return result;
    }
    if ((a7 & 0x8000000000000000) == 0)
    {
      if (a7)
      {
        unint64_t v358 = 0;
        if (a7 < 0x10) {
          goto LABEL_565;
        }
        if ((unint64_t)(v11 - v14) < 0x20) {
          goto LABEL_565;
        }
        unint64_t v358 = a7 & 0xFFFFFFFFFFFFFFF0;
        v359 = v11 + 16;
        v360 = (long long *)(v14 + 16);
        unint64_t v361 = a7 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          long long v362 = *v360;
          *(v359 - 1) = *(v360 - 1);
          _OWORD *v359 = v362;
          v359 += 2;
          v360 += 2;
          v361 -= 16;
        }
        while (v361);
        if (v358 != a7)
        {
LABEL_565:
          unint64_t v363 = a7 - v358;
          uint64_t v364 = 2 * v358;
          v365 = &v14[2 * v358];
          v366 = &v11[v364];
          do
          {
            __int16 v367 = *(_WORD *)v365;
            v365 += 2;
            *(_WORD *)v366 = v367;
            v366 += 2;
            --v363;
          }
          while (v363);
        }
      }
      return result;
    }
    goto LABEL_1086;
  }
  if (v12 == 3 && v357)
  {
    if (!v11) {
      return result;
    }
    if ((a7 & 0x8000000000000000) == 0)
    {
      if (!a7) {
        return result;
      }
      if (a7 >= 0x10 && (&v14[4 * a7] <= v11 || &v11[2 * a7] <= v14))
      {
        unint64_t v369 = a7 & 0xFFFFFFFFFFFFFFF0;
        v466 = (int16x8_t *)(v11 + 16);
        v467 = (int16x8_t *)(v14 + 32);
        unint64_t v468 = a7 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          int16x8_t v470 = v467[-2];
          int16x8_t v469 = v467[-1];
          int16x8_t v472 = *v467;
          int16x8_t v471 = v467[1];
          v467 += 4;
          v466[-1] = vuzp1q_s16(v470, v469);
          int16x8_t *v466 = vuzp1q_s16(v472, v471);
          v466 += 2;
          v468 -= 16;
        }
        while (v468);
        if (v369 == a7) {
          return result;
        }
      }
      else
      {
        unint64_t v369 = 0;
      }
      unint64_t v370 = a7 - v369;
      v371 = &v14[4 * v369];
      v372 = &v11[2 * v369];
      do
      {
        int v373 = *(_DWORD *)v371;
        v371 += 4;
        *(_WORD *)v372 = v373;
        v372 += 2;
        --v370;
      }
      while (v370);
      return result;
    }
    goto LABEL_1114;
  }
  if (v12 != 4) {
    BOOL v357 = 0;
  }
  if (v357)
  {
    if (!v11) {
      return result;
    }
    if ((a7 & 0x8000000000000000) == 0)
    {
      if (!a7) {
        return result;
      }
      if (a7 >= 0x10 && (&v14[8 * a7] <= v11 || &v11[2 * a7] <= v14))
      {
        unint64_t v374 = a7 & 0xFFFFFFFFFFFFFFF0;
        v526 = (int16x8_t *)(v11 + 16);
        v527 = (int32x4_t *)(v14 + 64);
        unint64_t v528 = a7 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          int16x8_t v529 = vuzp1q_s16((int16x8_t)vuzp1q_s32(*v527, v527[1]), (int16x8_t)vuzp1q_s32(v527[2], v527[3]));
          v526[-1] = vuzp1q_s16((int16x8_t)vuzp1q_s32(v527[-4], v527[-3]), (int16x8_t)vuzp1q_s32(v527[-2], v527[-1]));
          int16x8_t *v526 = v529;
          v526 += 2;
          v527 += 8;
          v528 -= 16;
        }
        while (v528);
        if (v374 == a7) {
          return result;
        }
      }
      else
      {
        unint64_t v374 = 0;
      }
      unint64_t v375 = a7 - v374;
      v376 = &v14[8 * v374];
      v377 = &v11[2 * v374];
      do
      {
        uint64_t v378 = *(void *)v376;
        v376 += 8;
        *(_WORD *)v377 = v378;
        v377 += 2;
        --v375;
      }
      while (v375);
      return result;
    }
    goto LABEL_1130;
  }
  if (v12 != 1 || v10 != 7)
  {
    if (v12 == 2 && v10 == 7)
    {
      if (!v11) {
        return result;
      }
      if ((a7 & 0x8000000000000000) == 0)
      {
        if (!a7) {
          return result;
        }
        if (a7 >= 0x10 && (&v14[2 * a7] <= v11 || &v11[4 * a7] <= v14))
        {
          unint64_t v384 = a7 & 0xFFFFFFFFFFFFFFF0;
          v608 = (uint32x4_t *)(v11 + 32);
          v609 = (uint16x4_t *)(v14 + 16);
          unint64_t v610 = a7 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            uint16x8_t v611 = *(uint16x8_t *)v609[-2].i8;
            uint32x4_t v612 = vmovl_u16(*v609);
            uint32x4_t v613 = vmovl_high_u16(*(uint16x8_t *)v609->i8);
            v608[-2] = vmovl_u16(*(uint16x4_t *)v611.i8);
            v608[-1] = vmovl_high_u16(v611);
            uint32x4_t *v608 = v612;
            v608[1] = v613;
            v608 += 4;
            v609 += 4;
            v610 -= 16;
          }
          while (v610);
          if (v384 == a7) {
            return result;
          }
        }
        else
        {
          unint64_t v384 = 0;
        }
        unint64_t v385 = a7 - v384;
        v386 = &v14[2 * v384];
        v387 = &v11[4 * v384];
        do
        {
          int v388 = *(unsigned __int16 *)v386;
          v386 += 2;
          *(_DWORD *)v387 = v388;
          v387 += 4;
          --v385;
        }
        while (v385);
        return result;
      }
      goto LABEL_1175;
    }
    if (v12 == 3 && v10 == 7)
    {
      if (!v11) {
        return result;
      }
      if ((a7 & 0x8000000000000000) == 0)
      {
        if (a7)
        {
          unint64_t v390 = 0;
          if (a7 < 8) {
            goto LABEL_637;
          }
          if ((unint64_t)(v11 - v14) < 0x20) {
            goto LABEL_637;
          }
          unint64_t v390 = a7 & 0xFFFFFFFFFFFFFFF8;
          v391 = v11 + 16;
          v392 = (long long *)(v14 + 16);
          unint64_t v393 = a7 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            long long v394 = *v392;
            *(v391 - 1) = *(v392 - 1);
            _OWORD *v391 = v394;
            v391 += 2;
            v392 += 2;
            v393 -= 8;
          }
          while (v393);
          if (v390 != a7)
          {
LABEL_637:
            unint64_t v395 = a7 - v390;
            uint64_t v396 = 4 * v390;
            v397 = &v14[4 * v390];
            v398 = &v11[v396];
            do
            {
              int v399 = *(_DWORD *)v397;
              v397 += 4;
              *(_DWORD *)v398 = v399;
              v398 += 4;
              --v395;
            }
            while (v395);
          }
        }
        return result;
      }
      goto LABEL_1203;
    }
    if (v12 == 4 && v10 == 7)
    {
      if (!v11) {
        return result;
      }
      if ((a7 & 0x8000000000000000) == 0)
      {
        if (!a7) {
          return result;
        }
        if (a7 >= 0xC && (&v14[8 * a7] <= v11 || &v11[4 * a7] <= v14))
        {
          unint64_t v494 = a7 & 0xFFFFFFFFFFFFFFF8;
          v757 = (int32x4_t *)(v11 + 16);
          v758 = (int32x4_t *)(v14 + 32);
          unint64_t v759 = a7 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            int32x4_t v761 = v758[-2];
            int32x4_t v760 = v758[-1];
            int32x4_t v763 = *v758;
            int32x4_t v762 = v758[1];
            v758 += 4;
            v757[-1] = vuzp1q_s32(v761, v760);
            int32x4_t *v757 = vuzp1q_s32(v763, v762);
            v757 += 2;
            v759 -= 8;
          }
          while (v759);
          if (v494 == a7) {
            return result;
          }
        }
        else
        {
          unint64_t v494 = 0;
        }
        unint64_t v495 = a7 - v494;
        v496 = &v14[8 * v494];
        v497 = &v11[4 * v494];
        do
        {
          uint64_t v498 = *(void *)v496;
          v496 += 8;
          *(_DWORD *)v497 = v498;
          v497 += 4;
          --v495;
        }
        while (v495);
        return result;
      }
      goto LABEL_1230;
    }
    if (v12 == 1 && v10 == 8)
    {
      if (!v11) {
        return result;
      }
      if ((a7 & 0x8000000000000000) == 0)
      {
        if (!a7) {
          return result;
        }
        if (a7 < 8 || &v14[a7] > v11 && &v11[8 * a7] > v14)
        {
          unint64_t v545 = 0;
          goto LABEL_801;
        }
        if (a7 >= 0x10)
        {
          unint64_t v545 = a7 & 0xFFFFFFFFFFFFFFF0;
          unint64_t v841 = a7 & 0xFFFFFFFFFFFFFFF0;
          v842 = (uint8x16_t *)v14;
          v843 = v11;
          do
          {
            uint8x16_t v844 = *v842++;
            uint16x8_t v845 = vmovl_u8(*(uint8x8_t *)v844.i8);
            uint32x4_t v846 = vmovl_u16(*(uint16x4_t *)v845.i8);
            *(void *)&long long v847 = v846.u32[0];
            *((void *)&v847 + 1) = v846.u32[1];
            long long v848 = v847;
            uint32x4_t v849 = vmovl_high_u16(v845);
            *(void *)&long long v847 = v849.u32[0];
            *((void *)&v847 + 1) = v849.u32[1];
            long long v850 = v847;
            uint16x8_t v851 = vmovl_high_u8(v844);
            uint32x4_t v852 = vmovl_high_u16(v851);
            *(void *)&long long v847 = v852.u32[0];
            *((void *)&v847 + 1) = v852.u32[1];
            long long v853 = v847;
            *(void *)&long long v847 = v852.u32[2];
            *((void *)&v847 + 1) = v852.u32[3];
            *((_OWORD *)v843 + 6) = v853;
            *((_OWORD *)v843 + 7) = v847;
            uint32x4_t v854 = vmovl_u16(*(uint16x4_t *)v851.i8);
            *(void *)&long long v847 = v854.u32[0];
            *((void *)&v847 + 1) = v854.u32[1];
            long long v855 = v847;
            *(void *)&long long v847 = v849.u32[2];
            *((void *)&v847 + 1) = v849.u32[3];
            long long v856 = v847;
            *(void *)&long long v847 = v854.u32[2];
            *((void *)&v847 + 1) = v854.u32[3];
            *((_OWORD *)v843 + 4) = v855;
            *((_OWORD *)v843 + 5) = v847;
            *((_OWORD *)v843 + 2) = v850;
            *((_OWORD *)v843 + 3) = v856;
            *(void *)&long long v847 = v846.u32[2];
            *((void *)&v847 + 1) = v846.u32[3];
            *(_OWORD *)v843 = v848;
            *((_OWORD *)v843 + 1) = v847;
            v843 += 128;
            v841 -= 16;
          }
          while (v841);
          if (v545 == a7) {
            return result;
          }
          if ((a7 & 8) == 0)
          {
LABEL_801:
            unint64_t v546 = a7 - v545;
            v547 = &v14[v545];
            v548 = &v11[8 * v545];
            do
            {
              unsigned int v549 = *v547++;
              *(void *)v548 = v549;
              v548 += 8;
              --v546;
            }
            while (v546);
            return result;
          }
        }
        else
        {
          unint64_t v545 = 0;
        }
        unint64_t v790 = v545;
        unint64_t v545 = a7 & 0xFFFFFFFFFFFFFFF8;
        v791 = &v11[8 * v790];
        v792 = (uint8x8_t *)&v14[v790];
        unint64_t v793 = v790 - (a7 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          uint8x8_t v794 = *v792++;
          uint16x8_t v795 = vmovl_u8(v794);
          uint32x4_t v796 = vmovl_u16(*(uint16x4_t *)v795.i8);
          *(void *)&long long v797 = v796.u32[0];
          *((void *)&v797 + 1) = v796.u32[1];
          long long v798 = v797;
          uint32x4_t v799 = vmovl_high_u16(v795);
          *(void *)&long long v797 = v799.u32[0];
          *((void *)&v797 + 1) = v799.u32[1];
          long long v800 = v797;
          *(void *)&long long v797 = v799.u32[2];
          *((void *)&v797 + 1) = v799.u32[3];
          *((_OWORD *)v791 + 2) = v800;
          *((_OWORD *)v791 + 3) = v797;
          *(void *)&long long v797 = v796.u32[2];
          *((void *)&v797 + 1) = v796.u32[3];
          *(_OWORD *)v791 = v798;
          *((_OWORD *)v791 + 1) = v797;
          v791 += 64;
          v793 += 8;
        }
        while (v793);
        if (v545 == a7) {
          return result;
        }
        goto LABEL_801;
      }
LABEL_1257:
      __break(1u);
LABEL_1258:
      if (v19 == 6 && v16 == 3)
      {
        if (!v11) {
          return result;
        }
        if ((a7 & 0x8000000000000000) == 0)
        {
          if (!a7) {
            return result;
          }
          if (a7 >= 0x10 && (&v14[2 * a7] <= v11 || &v11[4 * a7] <= v14))
          {
            unint64_t v957 = a7 & 0xFFFFFFFFFFFFFFF0;
            v1009 = (int32x4_t *)(v11 + 32);
            v1010 = (int16x4_t *)(v14 + 16);
            unint64_t v1011 = a7 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              int16x8_t v1012 = *(int16x8_t *)v1010[-2].i8;
              int32x4_t v1013 = vmovl_s16(*v1010);
              int32x4_t v1014 = vmovl_high_s16(*(int16x8_t *)v1010->i8);
              v1009[-2] = vmovl_s16(*(int16x4_t *)v1012.i8);
              v1009[-1] = vmovl_high_s16(v1012);
              int32x4_t *v1009 = v1013;
              v1009[1] = v1014;
              v1009 += 4;
              v1010 += 4;
              v1011 -= 16;
            }
            while (v1011);
            if (v957 == a7) {
              return result;
            }
          }
          else
          {
            unint64_t v957 = 0;
          }
          unint64_t v958 = a7 - v957;
          v959 = &v14[2 * v957];
          v960 = &v11[4 * v957];
          do
          {
            int v961 = *(__int16 *)v959;
            v959 += 2;
            *(_DWORD *)v960 = v961;
            v960 += 4;
            --v958;
          }
          while (v958);
          return result;
        }
        __break(1u);
LABEL_1495:
        if (v19 == 3 && v16 == 9)
        {
          if (!v11) {
            return result;
          }
          if ((a7 & 0x8000000000000000) == 0)
          {
            if (!a7) {
              return result;
            }
            if (a7 >= 0x10 && (&v14[4 * a7] <= v11 || &v11[2 * a7] <= v14))
            {
              unint64_t v1155 = a7 & 0xFFFFFFFFFFFFFFF0;
              v1207 = (float16x8_t *)(v11 + 16);
              v1208 = (uint32x4_t *)(v14 + 32);
              unint64_t v1209 = a7 & 0xFFFFFFFFFFFFFFF0;
              do
              {
                uint32x4_t v1211 = v1208[-2];
                uint32x4_t v1210 = v1208[-1];
                uint32x4_t v1213 = *v1208;
                uint32x4_t v1212 = v1208[1];
                v1208 += 4;
                v1207[-1] = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vcvtq_f32_u32(v1211)), vcvtq_f32_u32(v1210));
                float16x8_t *v1207 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vcvtq_f32_u32(v1213)), vcvtq_f32_u32(v1212));
                v1207 += 2;
                v1209 -= 16;
              }
              while (v1209);
              if (v1155 == a7) {
                return result;
              }
            }
            else
            {
              unint64_t v1155 = 0;
            }
            unint64_t v1156 = a7 - v1155;
            v1157 = (unsigned int *)&v14[4 * v1155];
            v1158 = (short float *)&v11[2 * v1155];
            do
            {
              unsigned int v1159 = *v1157++;
              *v1158++ = (short float)v1159;
              --v1156;
            }
            while (v1156);
            return result;
          }
          __break(1u);
          goto LABEL_1718;
        }
        goto LABEL_1512;
      }
      goto LABEL_1280;
    }
    if (v12 == 2 && v10 == 8)
    {
      if (!v11) {
        return result;
      }
      if ((a7 & 0x8000000000000000) == 0)
      {
        if (!a7) {
          return result;
        }
        if (a7 >= 0x10 && (&v14[2 * a7] <= v11 || &v11[8 * a7] <= v14))
        {
          unint64_t v583 = a7 & 0xFFFFFFFFFFFFFFF0;
          v824 = v11 + 64;
          v825 = (uint16x4_t *)(v14 + 16);
          unint64_t v826 = a7 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            uint16x8_t v827 = *(uint16x8_t *)v825[-2].i8;
            uint16x8_t v828 = *(uint16x8_t *)v825->i8;
            uint32x4_t v829 = vmovl_u16(*(uint16x4_t *)v827.i8);
            *(void *)&long long v830 = v829.u32[0];
            *((void *)&v830 + 1) = v829.u32[1];
            long long v831 = v830;
            *(void *)&long long v830 = v829.u32[2];
            *((void *)&v830 + 1) = v829.u32[3];
            long long v832 = v830;
            uint32x4_t v833 = vmovl_high_u16(v827);
            *(void *)&long long v830 = v833.u32[0];
            *((void *)&v830 + 1) = v833.u32[1];
            long long v834 = v830;
            *(void *)&long long v830 = v833.u32[2];
            *((void *)&v830 + 1) = v833.u32[3];
            long long v835 = v830;
            uint32x4_t v836 = vmovl_u16(*v825);
            *(void *)&long long v830 = v836.u32[0];
            *((void *)&v830 + 1) = v836.u32[1];
            long long v837 = v830;
            *(void *)&long long v830 = v836.u32[2];
            *((void *)&v830 + 1) = v836.u32[3];
            long long v838 = v830;
            *(v824 - 2) = v834;
            *(v824 - 1) = v835;
            uint32x4_t v839 = vmovl_high_u16(v828);
            *(void *)&long long v830 = v839.u32[0];
            *((void *)&v830 + 1) = v839.u32[1];
            long long v840 = v830;
            *(v824 - 4) = v831;
            *(v824 - 3) = v832;
            *(void *)&long long v830 = v839.u32[2];
            *((void *)&v830 + 1) = v839.u32[3];
            v824[2] = v840;
            v824[3] = v830;
            _OWORD *v824 = v837;
            v824[1] = v838;
            v824 += 8;
            v825 += 4;
            v826 -= 16;
          }
          while (v826);
          if (v583 == a7) {
            return result;
          }
        }
        else
        {
          unint64_t v583 = 0;
        }
        unint64_t v584 = a7 - v583;
        v585 = &v14[2 * v583];
        v586 = &v11[8 * v583];
        do
        {
          unsigned int v587 = *(unsigned __int16 *)v585;
          v585 += 2;
          *(void *)v586 = v587;
          v586 += 8;
          --v584;
        }
        while (v584);
        return result;
      }
      __break(1u);
LABEL_1280:
      if (v19 == 7 && v16 == 3)
      {
        if (!v11) {
          return result;
        }
        if ((a7 & 0x8000000000000000) == 0)
        {
          if (a7)
          {
            unint64_t v973 = 0;
            if (a7 < 8) {
              goto LABEL_1290;
            }
            if ((unint64_t)(v11 - v14) < 0x20) {
              goto LABEL_1290;
            }
            unint64_t v973 = a7 & 0xFFFFFFFFFFFFFFF8;
            v974 = v11 + 16;
            v975 = (long long *)(v14 + 16);
            unint64_t v976 = a7 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              long long v977 = *v975;
              *(v974 - 1) = *(v975 - 1);
              _OWORD *v974 = v977;
              v974 += 2;
              v975 += 2;
              v976 -= 8;
            }
            while (v976);
            if (v973 != a7)
            {
LABEL_1290:
              unint64_t v978 = a7 - v973;
              uint64_t v979 = 4 * v973;
              v980 = &v14[4 * v973];
              v981 = &v11[v979];
              do
              {
                int v982 = *(_DWORD *)v980;
                v980 += 4;
                *(_DWORD *)v981 = v982;
                v981 += 4;
                --v978;
              }
              while (v978);
            }
          }
          return result;
        }
        __break(1u);
LABEL_1512:
        if (v19 == 4 && v16 == 9)
        {
          if (!v11) {
            return result;
          }
          if ((a7 & 0x8000000000000000) == 0)
          {
            if (!a7) {
              return result;
            }
            if (a7 >= 0x10 && (&v14[8 * a7] <= v11 || &v11[2 * a7] <= v14))
            {
              unint64_t v1167 = a7 & 0xFFFFFFFFFFFFFFF0;
              v1219 = (float16x8_t *)(v11 + 16);
              v1220 = (uint64x2_t *)(v14 + 64);
              unint64_t v1221 = a7 & 0xFFFFFFFFFFFFFFF0;
              do
              {
                float16x8_t v1222 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vcvtq_f64_u64(*v1220)), vcvtq_f64_u64(v1220[1]))), vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vcvtq_f64_u64(v1220[2])), vcvtq_f64_u64(v1220[3])));
                v1219[-1] = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vcvtq_f64_u64(v1220[-4])), vcvtq_f64_u64(v1220[-3]))), vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vcvtq_f64_u64(v1220[-2])), vcvtq_f64_u64(v1220[-1])));
                float16x8_t *v1219 = v1222;
                v1219 += 2;
                v1220 += 8;
                v1221 -= 16;
              }
              while (v1221);
              if (v1167 == a7) {
                return result;
              }
            }
            else
            {
              unint64_t v1167 = 0;
            }
            unint64_t v1168 = a7 - v1167;
            v1169 = (unint64_t *)&v14[8 * v1167];
            v1170 = (short float *)&v11[2 * v1167];
            do
            {
              unint64_t v1171 = *v1169++;
              *v1170++ = (short float)v1171;
              --v1168;
            }
            while (v1168);
            return result;
          }
          __break(1u);
          goto LABEL_1732;
        }
LABEL_1529:
        if (v19 == 5 && v16 == 10)
        {
          if (!v11) {
            return result;
          }
          if ((a7 & 0x8000000000000000) == 0)
          {
            if (!a7) {
              return result;
            }
            if (a7 < 8 || &v14[a7] > v11 && &v11[4 * a7] > v14)
            {
              unint64_t v1176 = 0;
              goto LABEL_1538;
            }
            if (a7 >= 0x10)
            {
              unint64_t v1176 = a7 & 0xFFFFFFFFFFFFFFF0;
              unint64_t v1244 = a7 & 0xFFFFFFFFFFFFFFF0;
              v1245 = (int8x16_t *)v14;
              v1246 = (float32x4_t *)v11;
              do
              {
                int8x16_t v1247 = *v1245++;
                int8x8_t v1248 = (int8x8_t)vextq_s8(v1247, v1247, 8uLL).u64[0];
                float32x4_t *v1246 = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(*(int8x8_t *)v1247.i8, *(int8x8_t *)v1247.i8), 8uLL), 8uLL)));
                v1246[1] = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(*(int8x8_t *)v1247.i8, *(int8x8_t *)v1247.i8), 8uLL), 8uLL)));
                v1246[2] = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(v1248, *(int8x8_t *)v1247.i8), 8uLL), 8uLL)));
                v1246[3] = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(v1248, *(int8x8_t *)v1247.i8), 8uLL), 8uLL)));
                v1246 += 4;
                v1244 -= 16;
              }
              while (v1244);
              if (v1176 == a7) {
                return result;
              }
              if ((a7 & 8) == 0)
              {
LABEL_1538:
                unint64_t v1177 = a7 - v1176;
                v1178 = &v14[v1176];
                v1179 = (float *)&v11[4 * v1176];
                do
                {
                  int v1180 = (char)*v1178++;
                  *v1179++ = (float)v1180;
                  --v1177;
                }
                while (v1177);
                return result;
              }
            }
            else
            {
              unint64_t v1176 = 0;
            }
            unint64_t v1228 = v1176;
            unint64_t v1176 = a7 & 0xFFFFFFFFFFFFFFF8;
            v1229 = (float32x4_t *)&v11[4 * v1228];
            v1230 = (int8x8_t *)&v14[v1228];
            unint64_t v1231 = v1228 - (a7 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              int8x8_t v1232 = *v1230++;
              float32x4_t *v1229 = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(v1232, v1232), 8uLL), 8uLL)));
              v1229[1] = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(v1232, v1232), 8uLL), 8uLL)));
              v1229 += 2;
              v1231 += 8;
            }
            while (v1231);
            if (v1176 == a7) {
              return result;
            }
            goto LABEL_1538;
          }
          __break(1u);
LABEL_1750:
          __break(1u);
LABEL_1751:
          if (v19 == 2 && v16 == 11)
          {
            if (!v11) {
              return result;
            }
            if ((a7 & 0x8000000000000000) != 0)
            {
              __break(1u);
            }
            else
            {
              if (!a7) {
                return result;
              }
              if (a7 < 8 || &v14[2 * a7] > v11 && &v11[8 * a7] > v14)
              {
                unint64_t v1312 = 0;
                goto LABEL_1806;
              }
            }
            unint64_t v1312 = a7 & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1384 = a7 & 0xFFFFFFFFFFFFFFF8;
            v1385 = (uint16x8_t *)v14;
            v1386 = (float64x2_t *)v11;
            do
            {
              uint16x8_t v1387 = *v1385++;
              uint32x4_t v1388 = vmovl_u16(*(uint16x4_t *)v1387.i8);
              v1389.i64[0] = v1388.u32[0];
              v1389.i64[1] = v1388.u32[1];
              float64x2_t v1390 = vcvtq_f64_u64(v1389);
              v1389.i64[0] = v1388.u32[2];
              v1389.i64[1] = v1388.u32[3];
              uint64x2_t v1391 = v1389;
              uint32x4_t v1392 = vmovl_high_u16(v1387);
              v1389.i64[0] = v1392.u32[0];
              v1389.i64[1] = v1392.u32[1];
              float64x2_t v1393 = vcvtq_f64_u64(v1389);
              v1389.i64[0] = v1392.u32[2];
              v1389.i64[1] = v1392.u32[3];
              v1386[2] = v1393;
              v1386[3] = vcvtq_f64_u64(v1389);
              float64x2_t *v1386 = v1390;
              v1386[1] = vcvtq_f64_u64(v1391);
              v1386 += 4;
              v1384 -= 8;
            }
            while (v1384);
            if (v1312 == a7) {
              return result;
            }
LABEL_1806:
            unint64_t v1394 = a7 - v1312;
            v1395 = &v14[2 * v1312];
            v1396 = (double *)&v11[8 * v1312];
            do
            {
              unsigned int v1397 = *(unsigned __int16 *)v1395;
              v1395 += 2;
              *v1396++ = (double)v1397;
              --v1394;
            }
            while (v1394);
            return result;
          }
          if (v19 == 3 && v16 == 11)
          {
            if (!v11) {
              return result;
            }
            if ((a7 & 0x8000000000000000) != 0)
            {
              __break(1u);
            }
            else
            {
              if (!a7) {
                return result;
              }
              if (a7 < 8 || &v14[4 * a7] > v11 && &v11[8 * a7] > v14)
              {
                unint64_t v1383 = 0;
                goto LABEL_1836;
              }
            }
            unint64_t v1383 = a7 & 0xFFFFFFFFFFFFFFF8;
            v1456 = (float64x2_t *)(v11 + 32);
            v1457 = v14 + 16;
            unint64_t v1458 = a7 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              long long v1459 = *((_OWORD *)v1457 - 1);
              v1460.i64[0] = v1459;
              v1460.i64[1] = DWORD1(v1459);
              float64x2_t v1461 = vcvtq_f64_u64(v1460);
              v1460.i64[0] = DWORD2(v1459);
              v1460.i64[1] = HIDWORD(v1459);
              float64x2_t v1462 = vcvtq_f64_u64(v1460);
              v1460.i64[0] = *(_OWORD *)v1457;
              v1460.i64[1] = HIDWORD(*(void *)v1457);
              float64x2_t v1463 = vcvtq_f64_u64(v1460);
              v1460.i64[0] = *((void *)v1457 + 1);
              v1460.i64[1] = HIDWORD(*(_OWORD *)v1457);
              v1456[-2] = v1461;
              v1456[-1] = v1462;
              float64x2_t *v1456 = v1463;
              v1456[1] = vcvtq_f64_u64(v1460);
              v1456 += 4;
              v1457 += 32;
              v1458 -= 8;
            }
            while (v1458);
            if (v1383 == a7) {
              return result;
            }
LABEL_1836:
            unint64_t v1464 = a7 - v1383;
            v1465 = (unsigned int *)&v14[4 * v1383];
            v1466 = (double *)&v11[8 * v1383];
            do
            {
              unsigned int v1467 = *v1465++;
              *v1466++ = (double)v1467;
              --v1464;
            }
            while (v1464);
            return result;
          }
          if (v19 == 4 && v16 == 11)
          {
            if (!v11) {
              return result;
            }
            if ((a7 & 0x8000000000000000) == 0)
            {
              if (a7)
              {
                unint64_t v1446 = 0;
                if (a7 < 4) {
                  goto LABEL_1829;
                }
                if ((unint64_t)(v11 - v14) < 0x20) {
                  goto LABEL_1829;
                }
                unint64_t v1446 = a7 & 0xFFFFFFFFFFFFFFFCLL;
                v1447 = (float64x2_t *)(v11 + 16);
                v1448 = (uint64x2_t *)(v14 + 16);
                unint64_t v1449 = a7 & 0xFFFFFFFFFFFFFFFCLL;
                do
                {
                  float64x2_t v1450 = vcvtq_f64_u64(*v1448);
                  v1447[-1] = vcvtq_f64_u64(v1448[-1]);
                  float64x2_t *v1447 = v1450;
                  v1447 += 2;
                  v1448 += 2;
                  v1449 -= 4;
                }
                while (v1449);
                if (v1446 != a7)
                {
LABEL_1829:
                  unint64_t v1451 = a7 - v1446;
                  uint64_t v1452 = 8 * v1446;
                  v1453 = (unint64_t *)&v14[8 * v1446];
                  v1454 = (double *)&v11[v1452];
                  do
                  {
                    unint64_t v1455 = *v1453++;
                    *v1454++ = (double)v1455;
                    --v1451;
                  }
                  while (v1451);
                }
              }
              return result;
            }
            __break(1u);
            goto LABEL_1847;
          }
          if (v19 != 9)
          {
LABEL_1847:
            if (v19 == 10)
            {
              switch(v10)
              {
                case 1u:
                  if (v11)
                  {
                    if ((a7 & 0x8000000000000000) != 0)
                    {
                      __break(1u);
                      goto LABEL_1961;
                    }
                    for (; a7; --a7)
                    {
                      int v1469 = *(_DWORD *)v14;
                      v14 += 4;
                      LODWORD(v1598[0]) = v1469;
                      uint64_t result = sub_19E6BDC1C((float *)v1598, a8, &v1599);
                      *v11++ = LOBYTE(v1599);
                    }
                  }
                  return result;
                case 2u:
                  if (v11)
                  {
                    if ((a7 & 0x8000000000000000) != 0) {
                      goto LABEL_2032;
                    }
                    for (; a7; --a7)
                    {
                      int v1480 = *(_DWORD *)v14;
                      v14 += 4;
                      LODWORD(v1598[0]) = v1480;
                      uint64_t result = sub_19E6BDE40((float *)v1598, a8, &v1599);
                      *(_WORD *)uint64_t v11 = LOWORD(v1599);
                      v11 += 2;
                    }
                  }
                  return result;
                case 3u:
                  if (v11)
                  {
                    if ((a7 & 0x8000000000000000) != 0) {
                      goto LABEL_2033;
                    }
                    for (; a7; --a7)
                    {
                      int v1481 = *(_DWORD *)v14;
                      v14 += 4;
                      LODWORD(v1599) = v1481;
                      uint64_t result = sub_19E6BE064((float *)&v1599, a8, v1598);
                      *(_DWORD *)uint64_t v11 = LODWORD(v1598[0]);
                      v11 += 4;
                    }
                  }
                  return result;
                case 4u:
                  if (v11)
                  {
                    if ((a7 & 0x8000000000000000) != 0) {
                      goto LABEL_2034;
                    }
                    for (; a7; --a7)
                    {
                      int v1482 = *(_DWORD *)v14;
                      v14 += 4;
                      LODWORD(v1599) = v1482;
                      uint64_t result = sub_19E6BE288((float *)&v1599, a8, v1598);
                      *(double *)uint64_t v11 = v1598[0];
                      v11 += 8;
                    }
                  }
                  return result;
                case 5u:
                  if (v11)
                  {
                    if ((a7 & 0x8000000000000000) != 0) {
                      goto LABEL_2035;
                    }
                    for (; a7; --a7)
                    {
                      int v1483 = *(_DWORD *)v14;
                      v14 += 4;
                      LODWORD(v1598[0]) = v1483;
                      uint64_t result = sub_19E6BD380((float *)v1598, a8, &v1599);
                      *v11++ = LOBYTE(v1599);
                    }
                  }
                  return result;
                case 6u:
                  if (v11)
                  {
                    if ((a7 & 0x8000000000000000) != 0) {
                      goto LABEL_2036;
                    }
                    for (; a7; --a7)
                    {
                      int v1484 = *(_DWORD *)v14;
                      v14 += 4;
                      LODWORD(v1598[0]) = v1484;
                      uint64_t result = sub_19E6BD5A4((float *)v1598, a8, &v1599);
                      *(_WORD *)uint64_t v11 = LOWORD(v1599);
                      v11 += 2;
                    }
                  }
                  return result;
                case 7u:
                  if (v11)
                  {
                    if ((a7 & 0x8000000000000000) != 0) {
                      goto LABEL_2037;
                    }
                    for (; a7; --a7)
                    {
                      int v1485 = *(_DWORD *)v14;
                      v14 += 4;
                      LODWORD(v1599) = v1485;
                      uint64_t result = sub_19E6BD7CC((float *)&v1599, a8, v1598);
                      *(_DWORD *)uint64_t v11 = LODWORD(v1598[0]);
                      v11 += 4;
                    }
                  }
                  return result;
                case 8u:
                  if (v11)
                  {
                    if ((a7 & 0x8000000000000000) != 0) {
                      goto LABEL_2038;
                    }
                    for (; a7; --a7)
                    {
                      int v1486 = *(_DWORD *)v14;
                      v14 += 4;
                      LODWORD(v1599) = v1486;
                      uint64_t result = sub_19E6BD9F4((float *)&v1599, a8, v1598);
                      *(double *)uint64_t v11 = v1598[0];
                      v11 += 8;
                    }
                  }
                  return result;
                case 9u:
                  if (v11)
                  {
                    if ((a7 & 0x8000000000000000) != 0) {
                      goto LABEL_2039;
                    }
                    if (a7)
                    {
                      if (a7 < 0x10 || &v14[4 * a7] > v11 && &v11[2 * a7] > v14)
                      {
                        unint64_t v1487 = 0;
                        goto LABEL_2043;
                      }
                      goto LABEL_2040;
                    }
                  }
                  return result;
                case 0xBu:
                  if (!v11) {
                    return result;
                  }
                  if ((a7 & 0x8000000000000000) != 0)
                  {
                    __break(1u);
                  }
                  else
                  {
                    if (!a7) {
                      return result;
                    }
                    if (a7 < 8 || &v14[4 * a7] > v11 && &v11[8 * a7] > v14)
                    {
                      unint64_t v1488 = 0;
                      goto LABEL_2050;
                    }
                  }
                  unint64_t v1488 = a7 & 0xFFFFFFFFFFFFFFF8;
                  v1557 = (float64x2_t *)(v11 + 32);
                  v1558 = (float32x2_t *)(v14 + 16);
                  unint64_t v1559 = a7 & 0xFFFFFFFFFFFFFFF8;
                  do
                  {
                    float32x4_t v1560 = *(float32x4_t *)v1558[-2].f32;
                    float64x2_t v1561 = vcvtq_f64_f32(*v1558);
                    float64x2_t v1562 = vcvt_hight_f64_f32(*(float32x4_t *)v1558->f32);
                    v1557[-2] = vcvtq_f64_f32(*(float32x2_t *)v1560.f32);
                    v1557[-1] = vcvt_hight_f64_f32(v1560);
                    float64x2_t *v1557 = v1561;
                    v1557[1] = v1562;
                    v1557 += 4;
                    v1558 += 4;
                    v1559 -= 8;
                  }
                  while (v1559);
                  if (v1488 == a7) {
                    return result;
                  }
LABEL_2050:
                  unint64_t v1563 = a7 - v1488;
                  v1564 = (float *)&v14[4 * v1488];
                  v1565 = (double *)&v11[8 * v1488];
                  do
                  {
                    float v1566 = *v1564++;
                    *v1565++ = v1566;
                    --v1563;
                  }
                  while (v1563);
                  return result;
                default:
                  return result;
              }
            }
LABEL_1904:
            if (v19 != 11) {
              return result;
            }
            switch(v10)
            {
              case 1u:
                if (v11)
                {
                  if ((a7 & 0x8000000000000000) != 0)
                  {
                    __break(1u);
LABEL_2032:
                    __break(1u);
LABEL_2033:
                    __break(1u);
LABEL_2034:
                    __break(1u);
LABEL_2035:
                    __break(1u);
LABEL_2036:
                    __break(1u);
LABEL_2037:
                    __break(1u);
LABEL_2038:
                    __break(1u);
LABEL_2039:
                    __break(1u);
LABEL_2040:
                    unint64_t v1487 = a7 & 0xFFFFFFFFFFFFFFF0;
                    v1545 = (float16x8_t *)(v11 + 16);
                    v1546 = (float32x4_t *)(v14 + 32);
                    unint64_t v1547 = a7 & 0xFFFFFFFFFFFFFFF0;
                    do
                    {
                      float32x4_t v1549 = v1546[-2];
                      float32x4_t v1548 = v1546[-1];
                      float32x4_t v1551 = *v1546;
                      float32x4_t v1550 = v1546[1];
                      v1546 += 4;
                      v1545[-1] = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v1549), v1548);
                      float16x8_t *v1545 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v1551), v1550);
                      v1545 += 2;
                      v1547 -= 16;
                    }
                    while (v1547);
                    if (v1487 != a7)
                    {
LABEL_2043:
                      unint64_t v1552 = a7 - v1487;
                      v1553 = &v14[4 * v1487];
                      v1554 = &v11[2 * v1487];
                      do
                      {
                        int v1555 = *(_DWORD *)v1553;
                        v1553 += 4;
                        _S0 = v1555;
                        __asm { FCVT            H0, S0 }
                        *(_WORD *)v1554 = _S0;
                        v1554 += 2;
                        --v1552;
                      }
                      while (v1552);
                    }
                  }
                  else
                  {
                    for (; a7; --a7)
                    {
                      double v1479 = *(double *)v14;
                      v14 += 8;
                      v1598[0] = v1479;
                      uint64_t result = sub_19E6BED5C(v1598, a8, &v1599);
                      *v11++ = LOBYTE(v1599);
                    }
                  }
                }
                return result;
              case 2u:
                if (v11)
                {
                  if ((a7 & 0x8000000000000000) != 0)
                  {
                    __break(1u);
                    goto LABEL_2054;
                  }
                  for (; a7; --a7)
                  {
                    double v1536 = *(double *)v14;
                    v14 += 8;
                    v1598[0] = v1536;
                    uint64_t result = sub_19E6BEF80(v1598, a8, &v1599);
                    *(_WORD *)uint64_t v11 = LOWORD(v1599);
                    v11 += 2;
                  }
                }
                return result;
              case 3u:
                if (v11)
                {
                  if ((a7 & 0x8000000000000000) != 0)
                  {
LABEL_2054:
                    __break(1u);
                    goto LABEL_2055;
                  }
                  for (; a7; --a7)
                  {
                    double v1537 = *(double *)v14;
                    v14 += 8;
                    v1598[0] = v1537;
                    uint64_t result = sub_19E6BF1A4(v1598, a8, &v1599);
                    *(_DWORD *)uint64_t v11 = LODWORD(v1599);
                    v11 += 4;
                  }
                }
                return result;
              case 4u:
                if (v11)
                {
                  if ((a7 & 0x8000000000000000) != 0)
                  {
LABEL_2055:
                    __break(1u);
                    goto LABEL_2056;
                  }
                  for (; a7; --a7)
                  {
                    double v1538 = *(double *)v14;
                    v14 += 8;
                    double v1599 = v1538;
                    uint64_t result = sub_19E6BF3C8(&v1599, a8, v1598);
                    *(double *)uint64_t v11 = v1598[0];
                    v11 += 8;
                  }
                }
                return result;
              case 5u:
                if (v11)
                {
                  if ((a7 & 0x8000000000000000) != 0)
                  {
LABEL_2056:
                    __break(1u);
                    goto LABEL_2057;
                  }
                  for (; a7; --a7)
                  {
                    double v1539 = *(double *)v14;
                    v14 += 8;
                    v1598[0] = v1539;
                    uint64_t result = sub_19E6BE4AC(v1598, a8, &v1599);
                    *v11++ = LOBYTE(v1599);
                  }
                }
                return result;
              case 6u:
                if (v11)
                {
                  if ((a7 & 0x8000000000000000) != 0)
                  {
LABEL_2057:
                    __break(1u);
                    goto LABEL_2058;
                  }
                  for (; a7; --a7)
                  {
                    double v1540 = *(double *)v14;
                    v14 += 8;
                    v1598[0] = v1540;
                    uint64_t result = sub_19E6BE6D8(v1598, a8, &v1599);
                    *(_WORD *)uint64_t v11 = LOWORD(v1599);
                    v11 += 2;
                  }
                }
                return result;
              case 7u:
                if (v11)
                {
                  if ((a7 & 0x8000000000000000) != 0)
                  {
LABEL_2058:
                    __break(1u);
                    goto LABEL_2059;
                  }
                  for (; a7; --a7)
                  {
                    double v1541 = *(double *)v14;
                    v14 += 8;
                    v1598[0] = v1541;
                    uint64_t result = sub_19E6BE904(v1598, a8, &v1599);
                    *(_DWORD *)uint64_t v11 = LODWORD(v1599);
                    v11 += 4;
                  }
                }
                return result;
              case 8u:
                if (v11)
                {
                  if ((a7 & 0x8000000000000000) != 0)
                  {
LABEL_2059:
                    __break(1u);
                    goto LABEL_2060;
                  }
                  for (; a7; --a7)
                  {
                    double v1542 = *(double *)v14;
                    v14 += 8;
                    double v1599 = v1542;
                    uint64_t result = sub_19E6BEB30(&v1599, a8, v1598);
                    *(double *)uint64_t v11 = v1598[0];
                    v11 += 8;
                  }
                }
                return result;
              case 9u:
                if (!v11) {
                  return result;
                }
                if ((a7 & 0x8000000000000000) != 0)
                {
LABEL_2060:
                  __break(1u);
                }
                else
                {
                  if (!a7) {
                    return result;
                  }
                  if (a7 < 0x10 || &v14[8 * a7] > v11 && &v11[2 * a7] > v14)
                  {
                    unint64_t v1543 = 0;
                    goto LABEL_2064;
                  }
                }
                unint64_t v1543 = a7 & 0xFFFFFFFFFFFFFFF0;
                v1567 = v11 + 16;
                v1568 = (long long *)(v14 + 64);
                unint64_t v1569 = a7 & 0xFFFFFFFFFFFFFFF0;
                do
                {
                  _Q3 = *(v1568 - 2);
                  _Q2 = *(v1568 - 1);
                  _Q1 = *(v1568 - 4);
                  _Q4 = *(v1568 - 3);
                  _Q5 = v1568[2];
                  _Q0 = v1568[3];
                  _Q7 = *v1568;
                  _Q6 = v1568[1];
                  v1568 += 8;
                  _D16 = *((void *)&_Q1 + 1);
                  __asm
                  {
                    FCVT            H1, D1
                    FCVT            H17, D4
                    FCVT            H16, D16
                  }
                  *(void *)&_Q4 = *((void *)&_Q4 + 1);
                  __asm { FCVT            H4, D4 }
                  _D18 = *((void *)&_Q7 + 1);
                  __asm { FCVT            H18, D18 }
                  WORD1(_Q1) = _D16;
                  __asm { FCVT            H7, D7 }
                  WORD1(_Q7) = _D18;
                  __asm { FCVT            H16, D6 }
                  WORD2(_Q1) = _H17;
                  WORD2(_Q7) = _D16;
                  __asm { FCVT            H16, D3 }
                  *(void *)&_Q3 = *((void *)&_Q3 + 1);
                  WORD3(_Q1) = _Q4;
                  __asm
                  {
                    FCVT            H3, D3
                    FCVT            H4, D2
                  }
                  *(void *)&_Q2 = *((void *)&_Q2 + 1);
                  __asm { FCVT            H2, D2 }
                  WORD4(_Q1) = _D16;
                  *(void *)&_Q6 = *((void *)&_Q6 + 1);
                  __asm { FCVT            H6, D6 }
                  WORD3(_Q7) = _Q6;
                  WORD5(_Q1) = _Q3;
                  __asm { FCVT            H3, D5 }
                  WORD4(_Q7) = _Q3;
                  *(void *)&_Q3 = *((void *)&_Q5 + 1);
                  WORD6(_Q1) = _Q4;
                  __asm { FCVT            H3, D3 }
                  WORD5(_Q7) = _Q3;
                  __asm { FCVT            H3, D0 }
                  HIWORD(_Q1) = _Q2;
                  WORD6(_Q7) = _Q3;
                  *(void *)&_Q0 = *((void *)&_Q0 + 1);
                  __asm { FCVT            H0, D0 }
                  HIWORD(_Q7) = _Q0;
                  *(v1567 - 1) = _Q1;
                  _OWORD *v1567 = _Q7;
                  v1567 += 2;
                  v1569 -= 16;
                }
                while (v1569);
                if (v1543 == a7) {
                  return result;
                }
LABEL_2064:
                unint64_t v1581 = a7 - v1543;
                v1582 = &v14[8 * v1543];
                v1583 = &v11[2 * v1543];
                do
                {
                  uint64_t v1584 = *(void *)v1582;
                  v1582 += 8;
                  _D0 = v1584;
                  __asm { FCVT            H0, D0 }
                  *(_WORD *)v1583 = _D0;
                  v1583 += 2;
                  --v1581;
                }
                while (v1581);
                return result;
              case 0xAu:
                if (!v11) {
                  return result;
                }
                if ((a7 & 0x8000000000000000) != 0)
                {
                  __break(1u);
                }
                else
                {
                  if (!a7) {
                    return result;
                  }
                  if (a7 < 8 || &v14[8 * a7] > v11 && &v11[4 * a7] > v14)
                  {
                    unint64_t v1544 = 0;
                    goto LABEL_2071;
                  }
                }
                unint64_t v1544 = a7 & 0xFFFFFFFFFFFFFFF8;
                v1586 = (float32x4_t *)(v11 + 16);
                v1587 = (float64x2_t *)(v14 + 32);
                unint64_t v1588 = a7 & 0xFFFFFFFFFFFFFFF8;
                do
                {
                  float64x2_t v1590 = v1587[-2];
                  float64x2_t v1589 = v1587[-1];
                  float64x2_t v1592 = *v1587;
                  float64x2_t v1591 = v1587[1];
                  v1587 += 4;
                  v1586[-1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v1590), v1589);
                  float32x4_t *v1586 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v1592), v1591);
                  v1586 += 2;
                  v1588 -= 8;
                }
                while (v1588);
                if (v1544 == a7) {
                  return result;
                }
LABEL_2071:
                unint64_t v1593 = a7 - v1544;
                v1594 = (double *)&v14[8 * v1544];
                v1595 = (float *)&v11[4 * v1544];
                do
                {
                  double v1596 = *v1594++;
                  float v1597 = v1596;
                  *v1595++ = v1597;
                  --v1593;
                }
                while (v1593);
                return result;
              default:
                return result;
            }
          }
          int v19 = v10;
          switch(v10)
          {
            case 1u:
              if (v11)
              {
                if ((a7 & 0x8000000000000000) != 0)
                {
                  __break(1u);
                  goto LABEL_1904;
                }
                for (; a7; --a7)
                {
                  __int16 v1468 = *(_WORD *)v14;
                  v14 += 2;
                  LOWORD(v1598[0]) = v1468;
                  uint64_t result = sub_19E6BCB5C((short float *)v1598, a8, &v1599);
                  *v11++ = LOBYTE(v1599);
                }
              }
              return result;
            case 2u:
              if (v11)
              {
                if ((a7 & 0x8000000000000000) != 0)
                {
LABEL_1961:
                  __break(1u);
                  goto LABEL_1962;
                }
                for (; a7; --a7)
                {
                  __int16 v1470 = *(_WORD *)v14;
                  v14 += 2;
                  LOWORD(v1599) = v1470;
                  uint64_t result = sub_19E6BCD74((short float *)&v1599, a8, v1598);
                  *(_WORD *)uint64_t v11 = LOWORD(v1598[0]);
                  v11 += 2;
                }
              }
              return result;
            case 3u:
              if (v11)
              {
                if ((a7 & 0x8000000000000000) != 0)
                {
LABEL_1962:
                  __break(1u);
                  goto LABEL_1963;
                }
                for (; a7; --a7)
                {
                  __int16 v1471 = *(_WORD *)v14;
                  v14 += 2;
                  LOWORD(v1599) = v1471;
                  uint64_t result = sub_19E6BCF78((short float *)&v1599, a8, v1598);
                  *(_DWORD *)uint64_t v11 = LODWORD(v1598[0]);
                  v11 += 4;
                }
              }
              return result;
            case 4u:
              if (v11)
              {
                if ((a7 & 0x8000000000000000) != 0)
                {
LABEL_1963:
                  __break(1u);
                  goto LABEL_1964;
                }
                for (; a7; --a7)
                {
                  __int16 v1472 = *(_WORD *)v14;
                  v14 += 2;
                  LOWORD(v1599) = v1472;
                  uint64_t result = sub_19E6BD17C((short float *)&v1599, a8, v1598);
                  *(double *)uint64_t v11 = v1598[0];
                  v11 += 8;
                }
              }
              return result;
            case 5u:
              if (v11)
              {
                if ((a7 & 0x8000000000000000) != 0)
                {
LABEL_1964:
                  __break(1u);
                  goto LABEL_1965;
                }
                for (; a7; --a7)
                {
                  __int16 v1473 = *(_WORD *)v14;
                  v14 += 2;
                  LOWORD(v1598[0]) = v1473;
                  uint64_t result = sub_19E6BC33C((short float *)v1598, a8, &v1599);
                  *v11++ = LOBYTE(v1599);
                }
              }
              return result;
            case 6u:
              if (v11)
              {
                if ((a7 & 0x8000000000000000) != 0)
                {
LABEL_1965:
                  __break(1u);
                  goto LABEL_1966;
                }
                for (; a7; --a7)
                {
                  __int16 v1474 = *(_WORD *)v14;
                  v14 += 2;
                  LOWORD(v1599) = v1474;
                  uint64_t result = sub_19E6BC558((short float *)&v1599, a8, v1598);
                  *(_WORD *)uint64_t v11 = LOWORD(v1598[0]);
                  v11 += 2;
                }
              }
              return result;
            case 7u:
              if (v11)
              {
                if ((a7 & 0x8000000000000000) != 0)
                {
LABEL_1966:
                  __break(1u);
                  goto LABEL_1967;
                }
                for (; a7; --a7)
                {
                  __int16 v1475 = *(_WORD *)v14;
                  v14 += 2;
                  LOWORD(v1599) = v1475;
                  uint64_t result = sub_19E6BC774((short float *)&v1599, a8, v1598);
                  *(_DWORD *)uint64_t v11 = LODWORD(v1598[0]);
                  v11 += 4;
                }
              }
              return result;
            case 8u:
              if (v11)
              {
                if ((a7 & 0x8000000000000000) != 0)
                {
LABEL_1967:
                  __break(1u);
                  goto LABEL_1968;
                }
                for (; a7; --a7)
                {
                  __int16 v1476 = *(_WORD *)v14;
                  v14 += 2;
                  LOWORD(v1599) = v1476;
                  uint64_t result = sub_19E6BC968((short float *)&v1599, a8, v1598);
                  *(double *)uint64_t v11 = v1598[0];
                  v11 += 8;
                }
              }
              return result;
            case 0xAu:
              if (!v11) {
                return result;
              }
              if ((a7 & 0x8000000000000000) != 0)
              {
LABEL_1968:
                __break(1u);
              }
              else
              {
                if (!a7) {
                  return result;
                }
                if (a7 < 0x10 || &v14[2 * a7] > v11 && &v11[4 * a7] > v14)
                {
                  unint64_t v1477 = 0;
                  goto LABEL_1972;
                }
              }
              unint64_t v1477 = a7 & 0xFFFFFFFFFFFFFFF0;
              v1489 = (float32x4_t *)(v11 + 32);
              v1490 = (float16x4_t *)(v14 + 16);
              unint64_t v1491 = a7 & 0xFFFFFFFFFFFFFFF0;
              do
              {
                float16x8_t v1492 = *(float16x8_t *)v1490[-2].i8;
                float32x4_t v1493 = vcvtq_f32_f16(*v1490);
                float32x4_t v1494 = vcvt_hight_f32_f16(*(float16x8_t *)v1490->i8);
                v1489[-2] = vcvtq_f32_f16(*(float16x4_t *)v1492.i8);
                v1489[-1] = vcvt_hight_f32_f16(v1492);
                float32x4_t *v1489 = v1493;
                v1489[1] = v1494;
                v1489 += 4;
                v1490 += 4;
                v1491 -= 16;
              }
              while (v1491);
              if (v1477 == a7) {
                return result;
              }
LABEL_1972:
              unint64_t v1495 = a7 - v1477;
              v1496 = &v14[2 * v1477];
              v1497 = &v11[4 * v1477];
              do
              {
                __int16 v1498 = *(_WORD *)v1496;
                v1496 += 2;
                _H0 = v1498;
                __asm { FCVT            S0, H0 }
                *(_DWORD *)v1497 = _S0;
                v1497 += 4;
                --v1495;
              }
              while (v1495);
              return result;
            case 0xBu:
              if (!v11) {
                return result;
              }
              if ((a7 & 0x8000000000000000) != 0)
              {
                __break(1u);
              }
              else
              {
                if (!a7) {
                  return result;
                }
                if (a7 < 0x10 || &v14[2 * a7] > v11 && &v11[8 * a7] > v14)
                {
                  unint64_t v1478 = 0;
                  goto LABEL_1979;
                }
              }
              unint64_t v1478 = a7 & 0xFFFFFFFFFFFFFFF0;
              v1505 = v11 + 64;
              v1506 = (int8x16_t *)(v14 + 16);
              unint64_t v1507 = a7 & 0xFFFFFFFFFFFFFFF0;
              do
              {
                _Q1 = v1506[-1];
                _D2 = vextq_s8(_Q1, _Q1, 8uLL).u64[0];
                _H0 = WORD1(_D2);
                __asm
                {
                  FCVT            D3, H0
                  FCVT            D0, H2
                }
                *((void *)&_Q0 + 1) = _D3;
                LOWORD(_D3) = HIWORD(_D2);
                __asm { FCVT            D3, H3 }
                LOWORD(_D2) = WORD2(_D2);
                __asm { FCVT            D2, H2 }
                *((void *)&_Q2 + 1) = _D3;
                int8x16_t v1515 = *v1506;
                v1506 += 2;
                _Q3 = v1515;
                _H4 = _Q1.i16[1];
                __asm
                {
                  FCVT            D4, H4
                  FCVT            D5, H1
                }
                *((void *)&_Q5 + 1) = _D4;
                LOWORD(_D4) = _Q1.i16[3];
                __asm { FCVT            D4, H4 }
                _Q1.i16[0] = _Q1.i16[2];
                __asm { FCVT            D1, H1 }
                _Q1.i64[1] = _D4;
                _D4 = vextq_s8(_Q3, _Q3, 8uLL).u64[0];
                _H6 = WORD1(_D4);
                __asm
                {
                  FCVT            D6, H6
                  FCVT            D7, H4
                }
                *((void *)&_Q7 + 1) = _D6;
                LOWORD(_D6) = HIWORD(_D4);
                __asm { FCVT            D6, H6 }
                LOWORD(_D4) = WORD2(_D4);
                __asm { FCVT            D4, H4 }
                *((void *)&_Q4 + 1) = _D6;
                LOWORD(_D6) = v1515.i16[1];
                __asm
                {
                  FCVT            D6, H6
                  FCVT            D16, H3
                }
                *((void *)&_Q16 + 1) = _D6;
                LOWORD(_D6) = v1515.i16[3];
                __asm { FCVT            D6, H6 }
                _Q3.i16[0] = v1515.i16[2];
                __asm { FCVT            D3, H3 }
                _Q3.i64[1] = _D6;
                *(v1505 - 4) = _Q5;
                *(v1505 - 3) = _Q1;
                *(v1505 - 2) = _Q0;
                *(v1505 - 1) = _Q2;
                _OWORD *v1505 = _Q16;
                v1505[1] = _Q3;
                v1505[2] = _Q7;
                v1505[3] = _Q4;
                v1505 += 8;
                v1507 -= 16;
              }
              while (v1507);
              if (v1478 == a7) {
                return result;
              }
LABEL_1979:
              unint64_t v1530 = a7 - v1478;
              v1531 = &v14[2 * v1478];
              v1532 = &v11[8 * v1478];
              do
              {
                __int16 v1533 = *(_WORD *)v1531;
                v1531 += 2;
                _H0 = v1533;
                __asm { FCVT            D0, H0 }
                *(void *)v1532 = _D0;
                v1532 += 8;
                --v1530;
              }
              while (v1530);
              return result;
            default:
              return result;
          }
        }
        goto LABEL_1544;
      }
      goto LABEL_1298;
    }
    if (v12 == 3 && v10 == 8)
    {
      if (!v11) {
        return result;
      }
      if ((a7 & 0x8000000000000000) == 0)
      {
        if (!a7) {
          return result;
        }
        if (a7 >= 0xC && (&v14[4 * a7] <= v11 || &v11[8 * a7] <= v14))
        {
          unint64_t v627 = a7 & 0xFFFFFFFFFFFFFFF8;
          v873 = v11 + 32;
          v874 = v14 + 16;
          unint64_t v875 = a7 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            long long v876 = *((_OWORD *)v874 - 1);
            *(void *)&long long v877 = v876;
            *((void *)&v877 + 1) = DWORD1(v876);
            long long v878 = v877;
            *(void *)&long long v877 = DWORD2(v876);
            *((void *)&v877 + 1) = HIDWORD(v876);
            long long v879 = v877;
            *(void *)&long long v877 = *(_OWORD *)v874;
            *((void *)&v877 + 1) = HIDWORD(*(void *)v874);
            long long v880 = v877;
            *(void *)&long long v877 = *((void *)v874 + 1);
            *((void *)&v877 + 1) = HIDWORD(*(_OWORD *)v874);
            *(v873 - 2) = v878;
            *(v873 - 1) = v879;
            _OWORD *v873 = v880;
            v873[1] = v877;
            v873 += 4;
            v874 += 32;
            v875 -= 8;
          }
          while (v875);
          if (v627 == a7) {
            return result;
          }
        }
        else
        {
          unint64_t v627 = 0;
        }
        unint64_t v628 = a7 - v627;
        v629 = &v14[4 * v627];
        v630 = &v11[8 * v627];
        do
        {
          unsigned int v631 = *(_DWORD *)v629;
          v629 += 4;
          *(void *)v630 = v631;
          v630 += 8;
          --v628;
        }
        while (v628);
        return result;
      }
      __break(1u);
LABEL_1298:
      if (v19 == 8 && v16 == 3)
      {
        if (!v11) {
          return result;
        }
        if ((a7 & 0x8000000000000000) == 0)
        {
          if (!a7) {
            return result;
          }
          if (a7 >= 0xC && (&v14[8 * a7] <= v11 || &v11[4 * a7] <= v14))
          {
            unint64_t v990 = a7 & 0xFFFFFFFFFFFFFFF8;
            v1045 = (int32x4_t *)(v11 + 16);
            v1046 = (int32x4_t *)(v14 + 32);
            unint64_t v1047 = a7 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              int32x4_t v1049 = v1046[-2];
              int32x4_t v1048 = v1046[-1];
              int32x4_t v1051 = *v1046;
              int32x4_t v1050 = v1046[1];
              v1046 += 4;
              v1045[-1] = vuzp1q_s32(v1049, v1048);
              int32x4_t *v1045 = vuzp1q_s32(v1051, v1050);
              v1045 += 2;
              v1047 -= 8;
            }
            while (v1047);
            if (v990 == a7) {
              return result;
            }
          }
          else
          {
            unint64_t v990 = 0;
          }
          unint64_t v991 = a7 - v990;
          v992 = &v14[8 * v990];
          v993 = &v11[4 * v990];
          do
          {
            uint64_t v994 = *(void *)v992;
            v992 += 8;
            *(_DWORD *)v993 = v994;
            v993 += 4;
            --v991;
          }
          while (v991);
          return result;
        }
        __break(1u);
        goto LABEL_1529;
      }
LABEL_1315:
      if (v19 == 5 && v16 == 4)
      {
        if (!v11) {
          return result;
        }
        if ((a7 & 0x8000000000000000) != 0)
        {
          __break(1u);
LABEL_1544:
          if (v19 == 6 && v16 == 10)
          {
            if (!v11) {
              return result;
            }
            if ((a7 & 0x8000000000000000) == 0)
            {
              if (!a7) {
                return result;
              }
              if (a7 >= 0x10 && (&v14[2 * a7] <= v11 || &v11[4 * a7] <= v14))
              {
                unint64_t v1181 = a7 & 0xFFFFFFFFFFFFFFF0;
                v1238 = (float32x4_t *)(v11 + 32);
                v1239 = (int16x4_t *)(v14 + 16);
                unint64_t v1240 = a7 & 0xFFFFFFFFFFFFFFF0;
                do
                {
                  int16x8_t v1241 = *(int16x8_t *)v1239[-2].i8;
                  float32x4_t v1242 = vcvtq_f32_s32(vmovl_s16(*v1239));
                  int32x4_t v1243 = vmovl_high_s16(*(int16x8_t *)v1239->i8);
                  v1238[-2] = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v1241.i8));
                  v1238[-1] = vcvtq_f32_s32(vmovl_high_s16(v1241));
                  float32x4_t *v1238 = v1242;
                  v1238[1] = vcvtq_f32_s32(v1243);
                  v1238 += 4;
                  v1239 += 4;
                  v1240 -= 16;
                }
                while (v1240);
                if (v1181 == a7) {
                  return result;
                }
              }
              else
              {
                unint64_t v1181 = 0;
              }
              unint64_t v1182 = a7 - v1181;
              v1183 = &v14[2 * v1181];
              v1184 = (float *)&v11[4 * v1181];
              do
              {
                int v1185 = *(__int16 *)v1183;
                v1183 += 2;
                *v1184++ = (float)v1185;
                --v1182;
              }
              while (v1182);
              return result;
            }
            goto LABEL_1750;
          }
LABEL_1565:
          if (v19 == 7 && v16 == 10)
          {
            if (!v11) {
              return result;
            }
            if ((a7 & 0x8000000000000000) == 0)
            {
              if (a7)
              {
                unint64_t v1197 = 0;
                if (a7 < 8) {
                  goto LABEL_1575;
                }
                if ((unint64_t)(v11 - v14) < 0x20) {
                  goto LABEL_1575;
                }
                unint64_t v1197 = a7 & 0xFFFFFFFFFFFFFFF8;
                v1198 = (float32x4_t *)(v11 + 16);
                v1199 = (int32x4_t *)(v14 + 16);
                unint64_t v1200 = a7 & 0xFFFFFFFFFFFFFFF8;
                do
                {
                  float32x4_t v1201 = vcvtq_f32_s32(*v1199);
                  v1198[-1] = vcvtq_f32_s32(v1199[-1]);
                  float32x4_t *v1198 = v1201;
                  v1198 += 2;
                  v1199 += 2;
                  v1200 -= 8;
                }
                while (v1200);
                if (v1197 != a7)
                {
LABEL_1575:
                  unint64_t v1202 = a7 - v1197;
                  uint64_t v1203 = 4 * v1197;
                  v1204 = (int *)&v14[4 * v1197];
                  v1205 = (float *)&v11[v1203];
                  do
                  {
                    int v1206 = *v1204++;
                    *v1205++ = (float)v1206;
                    --v1202;
                  }
                  while (v1202);
                }
              }
              return result;
            }
            __break(1u);
            goto LABEL_1761;
          }
          goto LABEL_1583;
        }
        if (!a7) {
          return result;
        }
        if (a7 < 8 || &v14[a7] > v11 && &v11[8 * a7] > v14)
        {
          unint64_t v999 = 0;
          goto LABEL_1324;
        }
        if (a7 >= 0x10)
        {
          unint64_t v999 = a7 & 0xFFFFFFFFFFFFFFF0;
          unint64_t v1095 = a7 & 0xFFFFFFFFFFFFFFF0;
          v1096 = (int8x16_t *)v14;
          v1097 = v11;
          do
          {
            int8x16_t v1098 = *v1096++;
            int16x8_t v1099 = vmovl_s8(*(int8x8_t *)v1098.i8);
            int32x4_t v1100 = vmovl_s16(*(int16x4_t *)v1099.i8);
            *(void *)&long long v1101 = v1100.i32[0];
            *((void *)&v1101 + 1) = v1100.i32[1];
            long long v1102 = v1101;
            int32x4_t v1103 = vmovl_high_s16(v1099);
            *(void *)&long long v1101 = v1103.i32[0];
            *((void *)&v1101 + 1) = v1103.i32[1];
            long long v1104 = v1101;
            int16x8_t v1105 = vmovl_high_s8(v1098);
            int32x4_t v1106 = vmovl_high_s16(v1105);
            *(void *)&long long v1101 = v1106.i32[0];
            *((void *)&v1101 + 1) = v1106.i32[1];
            long long v1107 = v1101;
            *(void *)&long long v1101 = v1106.i32[2];
            *((void *)&v1101 + 1) = v1106.i32[3];
            *((_OWORD *)v1097 + 6) = v1107;
            *((_OWORD *)v1097 + 7) = v1101;
            int32x4_t v1108 = vmovl_s16(*(int16x4_t *)v1105.i8);
            *(void *)&long long v1101 = v1108.i32[0];
            *((void *)&v1101 + 1) = v1108.i32[1];
            long long v1109 = v1101;
            *(void *)&long long v1101 = v1103.i32[2];
            *((void *)&v1101 + 1) = v1103.i32[3];
            long long v1110 = v1101;
            *(void *)&long long v1101 = v1108.i32[2];
            *((void *)&v1101 + 1) = v1108.i32[3];
            *((_OWORD *)v1097 + 4) = v1109;
            *((_OWORD *)v1097 + 5) = v1101;
            *((_OWORD *)v1097 + 2) = v1104;
            *((_OWORD *)v1097 + 3) = v1110;
            *(void *)&long long v1101 = v1100.i32[2];
            *((void *)&v1101 + 1) = v1100.i32[3];
            *(_OWORD *)v1097 = v1102;
            *((_OWORD *)v1097 + 1) = v1101;
            v1097 += 128;
            v1095 -= 16;
          }
          while (v1095);
          if (v999 == a7) {
            return result;
          }
          if ((a7 & 8) == 0)
          {
LABEL_1324:
            unint64_t v1000 = a7 - v999;
            v1001 = &v14[v999];
            v1002 = &v11[8 * v999];
            do
            {
              uint64_t v1003 = (char)*v1001++;
              *(void *)v1002 = v1003;
              v1002 += 8;
              --v1000;
            }
            while (v1000);
            return result;
          }
        }
        else
        {
          unint64_t v999 = 0;
        }
        unint64_t v1057 = v999;
        unint64_t v999 = a7 & 0xFFFFFFFFFFFFFFF8;
        v1058 = &v11[8 * v1057];
        v1059 = (int8x8_t *)&v14[v1057];
        unint64_t v1060 = v1057 - (a7 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          int8x8_t v1061 = *v1059++;
          int16x8_t v1062 = vmovl_s8(v1061);
          int32x4_t v1063 = vmovl_s16(*(int16x4_t *)v1062.i8);
          *(void *)&long long v1064 = v1063.i32[0];
          *((void *)&v1064 + 1) = v1063.i32[1];
          long long v1065 = v1064;
          int32x4_t v1066 = vmovl_high_s16(v1062);
          *(void *)&long long v1064 = v1066.i32[0];
          *((void *)&v1064 + 1) = v1066.i32[1];
          long long v1067 = v1064;
          *(void *)&long long v1064 = v1066.i32[2];
          *((void *)&v1064 + 1) = v1066.i32[3];
          *((_OWORD *)v1058 + 2) = v1067;
          *((_OWORD *)v1058 + 3) = v1064;
          *(void *)&long long v1064 = v1063.i32[2];
          *((void *)&v1064 + 1) = v1063.i32[3];
          *(_OWORD *)v1058 = v1065;
          *((_OWORD *)v1058 + 1) = v1064;
          v1058 += 64;
          v1060 += 8;
        }
        while (v1060);
        if (v999 == a7) {
          return result;
        }
        goto LABEL_1324;
      }
      goto LABEL_1330;
    }
    if (v12 == 4 && v10 == 8)
    {
      if (!v11) {
        return result;
      }
      if ((a7 & 0x8000000000000000) == 0)
      {
        if (a7)
        {
          unint64_t v720 = 0;
          if (a7 < 4) {
            goto LABEL_976;
          }
          if ((unint64_t)(v11 - v14) < 0x20) {
            goto LABEL_976;
          }
          unint64_t v720 = a7 & 0xFFFFFFFFFFFFFFFCLL;
          v721 = v11 + 16;
          v722 = (long long *)(v14 + 16);
          unint64_t v723 = a7 & 0xFFFFFFFFFFFFFFFCLL;
          do
          {
            long long v724 = *v722;
            *(v721 - 1) = *(v722 - 1);
            _OWORD *v721 = v724;
            v721 += 2;
            v722 += 2;
            v723 -= 4;
          }
          while (v723);
          if (v720 != a7)
          {
LABEL_976:
            unint64_t v725 = a7 - v720;
            uint64_t v726 = 8 * v720;
            v727 = &v14[8 * v720];
            v728 = &v11[v726];
            do
            {
              uint64_t v729 = *(void *)v727;
              v727 += 8;
              *(void *)v728 = v729;
              v728 += 8;
              --v725;
            }
            while (v725);
          }
        }
        return result;
      }
      __break(1u);
      goto LABEL_1315;
    }
    if (v12 == 5 && v10 == 1)
    {
      if (!v11) {
        return result;
      }
      if ((a7 & 0x8000000000000000) != 0)
      {
        __break(1u);
LABEL_1330:
        if (v19 == 6 && v16 == 4)
        {
          if (!v11) {
            return result;
          }
          if ((a7 & 0x8000000000000000) == 0)
          {
            if (!a7) {
              return result;
            }
            if (a7 >= 0x10 && (&v14[2 * a7] <= v11 || &v11[8 * a7] <= v14))
            {
              unint64_t v1004 = a7 & 0xFFFFFFFFFFFFFFF0;
              v1078 = v11 + 64;
              v1079 = (int16x4_t *)(v14 + 16);
              unint64_t v1080 = a7 & 0xFFFFFFFFFFFFFFF0;
              do
              {
                int16x8_t v1081 = *(int16x8_t *)v1079[-2].i8;
                int16x8_t v1082 = *(int16x8_t *)v1079->i8;
                int32x4_t v1083 = vmovl_s16(*(int16x4_t *)v1081.i8);
                *(void *)&long long v1084 = v1083.i32[0];
                *((void *)&v1084 + 1) = v1083.i32[1];
                long long v1085 = v1084;
                *(void *)&long long v1084 = v1083.i32[2];
                *((void *)&v1084 + 1) = v1083.i32[3];
                long long v1086 = v1084;
                int32x4_t v1087 = vmovl_high_s16(v1081);
                *(void *)&long long v1084 = v1087.i32[0];
                *((void *)&v1084 + 1) = v1087.i32[1];
                long long v1088 = v1084;
                *(void *)&long long v1084 = v1087.i32[2];
                *((void *)&v1084 + 1) = v1087.i32[3];
                long long v1089 = v1084;
                int32x4_t v1090 = vmovl_s16(*v1079);
                *(void *)&long long v1084 = v1090.i32[0];
                *((void *)&v1084 + 1) = v1090.i32[1];
                long long v1091 = v1084;
                *(void *)&long long v1084 = v1090.i32[2];
                *((void *)&v1084 + 1) = v1090.i32[3];
                long long v1092 = v1084;
                *(v1078 - 2) = v1088;
                *(v1078 - 1) = v1089;
                int32x4_t v1093 = vmovl_high_s16(v1082);
                *(void *)&long long v1084 = v1093.i32[0];
                *((void *)&v1084 + 1) = v1093.i32[1];
                long long v1094 = v1084;
                *(v1078 - 4) = v1085;
                *(v1078 - 3) = v1086;
                *(void *)&long long v1084 = v1093.i32[2];
                *((void *)&v1084 + 1) = v1093.i32[3];
                v1078[2] = v1094;
                v1078[3] = v1084;
                _OWORD *v1078 = v1091;
                v1078[1] = v1092;
                v1078 += 8;
                v1079 += 4;
                v1080 -= 16;
              }
              while (v1080);
              if (v1004 == a7) {
                return result;
              }
            }
            else
            {
              unint64_t v1004 = 0;
            }
            unint64_t v1005 = a7 - v1004;
            v1006 = &v14[2 * v1004];
            v1007 = &v11[8 * v1004];
            do
            {
              uint64_t v1008 = *(__int16 *)v1006;
              v1006 += 2;
              *(void *)v1007 = v1008;
              v1007 += 8;
              --v1005;
            }
            while (v1005);
            return result;
          }
          __break(1u);
          goto LABEL_1565;
        }
        goto LABEL_1355;
      }
      if (!a7) {
        return result;
      }
      unint64_t v771 = 0;
      if (a7 >= 8 && (unint64_t)(v11 - v14) >= 0x20)
      {
        if (a7 < 0x20)
        {
          unint64_t v771 = 0;
LABEL_1147:
          unint64_t v895 = v771;
          unint64_t v771 = a7 & 0xFFFFFFFFFFFFFFF8;
          v896 = &v11[v895];
          v897 = &v14[v895];
          unint64_t v898 = v895 - (a7 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            uint64_t v899 = *(void *)v897;
            v897 += 8;
            *(void *)v896 = v899;
            v896 += 8;
            v898 += 8;
          }
          while (v898);
          if (v771 == a7) {
            return result;
          }
          goto LABEL_1150;
        }
        unint64_t v771 = a7 & 0xFFFFFFFFFFFFFFE0;
        v891 = v11 + 16;
        v892 = (long long *)(v14 + 16);
        unint64_t v893 = a7 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v894 = *v892;
          *(v891 - 1) = *(v892 - 1);
          _OWORD *v891 = v894;
          v891 += 2;
          v892 += 2;
          v893 -= 32;
        }
        while (v893);
        if (v771 == a7) {
          return result;
        }
        if ((a7 & 0x18) != 0) {
          goto LABEL_1147;
        }
      }
LABEL_1150:
      unint64_t v900 = a7 - v771;
      v901 = &v14[v771];
      v902 = &v11[v771];
      do
      {
        unsigned __int8 v903 = *v901++;
        *v902++ = v903;
        --v900;
      }
      while (v900);
      return result;
    }
    if (v12 == 6 && v10 == 1)
    {
      if (!v11) {
        return result;
      }
      if ((a7 & 0x8000000000000000) != 0)
      {
        __break(1u);
LABEL_1355:
        if (v19 == 7 && v16 == 4)
        {
          if (!v11) {
            return result;
          }
          if ((a7 & 0x8000000000000000) == 0)
          {
            if (!a7) {
              return result;
            }
            if (a7 >= 0xC && (&v14[4 * a7] <= v11 || &v11[8 * a7] <= v14))
            {
              unint64_t v1030 = a7 & 0xFFFFFFFFFFFFFFF8;
              v1116 = v11 + 32;
              v1117 = v14 + 16;
              unint64_t v1118 = a7 & 0xFFFFFFFFFFFFFFF8;
              do
              {
                long long v1119 = *((_OWORD *)v1117 - 1);
                *(void *)&long long v1120 = (int)v1119;
                *((void *)&v1120 + 1) = SDWORD1(v1119);
                long long v1121 = v1120;
                *(void *)&long long v1120 = SDWORD2(v1119);
                *((void *)&v1120 + 1) = SHIDWORD(v1119);
                long long v1122 = v1120;
                *(void *)&long long v1120 = (int)*(_OWORD *)v1117;
                *((void *)&v1120 + 1) = (int)HIDWORD(*(void *)v1117);
                long long v1123 = v1120;
                *(void *)&long long v1120 = (int)*((void *)v1117 + 1);
                *((void *)&v1120 + 1) = (int)HIDWORD(*(_OWORD *)v1117);
                *(v1116 - 2) = v1121;
                *(v1116 - 1) = v1122;
                _OWORD *v1116 = v1123;
                v1116[1] = v1120;
                v1116 += 4;
                v1117 += 32;
                v1118 -= 8;
              }
              while (v1118);
              if (v1030 == a7) {
                return result;
              }
            }
            else
            {
              unint64_t v1030 = 0;
            }
            unint64_t v1031 = a7 - v1030;
            v1032 = &v14[4 * v1030];
            v1033 = &v11[8 * v1030];
            do
            {
              uint64_t v1034 = *(int *)v1032;
              v1032 += 4;
              *(void *)v1033 = v1034;
              v1033 += 8;
              --v1031;
            }
            while (v1031);
            return result;
          }
          __break(1u);
LABEL_1583:
          if (v19 == 8 && v16 == 10)
          {
            if (!v11) {
              return result;
            }
            if ((a7 & 0x8000000000000000) == 0)
            {
              if (!a7) {
                return result;
              }
              if (a7 >= 8 && (&v14[8 * a7] <= v11 || &v11[4 * a7] <= v14))
              {
                unint64_t v1214 = a7 & 0xFFFFFFFFFFFFFFF8;
                v1264 = (float32x4_t *)(v11 + 16);
                v1265 = (int64x2_t *)(v14 + 32);
                unint64_t v1266 = a7 & 0xFFFFFFFFFFFFFFF8;
                do
                {
                  int64x2_t v1268 = v1265[-2];
                  int64x2_t v1267 = v1265[-1];
                  int64x2_t v1270 = *v1265;
                  int64x2_t v1269 = v1265[1];
                  v1265 += 4;
                  v1264[-1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vcvtq_f64_s64(v1268)), vcvtq_f64_s64(v1267));
                  float32x4_t *v1264 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vcvtq_f64_s64(v1270)), vcvtq_f64_s64(v1269));
                  v1264 += 2;
                  v1266 -= 8;
                }
                while (v1266);
                if (v1214 == a7) {
                  return result;
                }
              }
              else
              {
                unint64_t v1214 = 0;
              }
              unint64_t v1215 = a7 - v1214;
              v1216 = (uint64_t *)&v14[8 * v1214];
              v1217 = (float *)&v11[4 * v1214];
              do
              {
                uint64_t v1218 = *v1216++;
                *v1217++ = (float)v1218;
                --v1215;
              }
              while (v1215);
              return result;
            }
LABEL_1761:
            __break(1u);
LABEL_1762:
            __break(1u);
            goto LABEL_1763;
          }
LABEL_1600:
          if (v19 == 1 && v16 == 10)
          {
            if (!v11) {
              return result;
            }
            if ((a7 & 0x8000000000000000) != 0) {
              goto LABEL_1762;
            }
            if (!a7) {
              return result;
            }
            if (a7 < 8 || &v14[a7] > v11 && &v11[4 * a7] > v14)
            {
              unint64_t v1223 = 0;
              goto LABEL_1609;
            }
            if (a7 >= 0x10)
            {
              unint64_t v1223 = a7 & 0xFFFFFFFFFFFFFFF0;
              v18.i64[1] = 0xFFFFFF07FFFFFF06;
              unint64_t v1289 = a7 & 0xFFFFFFFFFFFFFFF0;
              v1290 = (int8x16_t *)v14;
              v1291 = (float32x4_t *)v11;
              do
              {
                int8x16_t v1292 = *v1290++;
                v1291[2] = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v1292, (int8x16_t)xmmword_19EC3AB60));
                v1291[3] = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v1292, (int8x16_t)xmmword_19EC3AB70));
                float32x4_t *v1291 = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v1292, (int8x16_t)xmmword_19EC3AB40));
                v1291[1] = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v1292, (int8x16_t)xmmword_19EC3AB50));
                v1291 += 4;
                v1289 -= 16;
              }
              while (v1289);
              if (v1223 == a7) {
                return result;
              }
              if ((a7 & 8) == 0)
              {
LABEL_1609:
                unint64_t v1224 = a7 - v1223;
                v1225 = &v14[v1223];
                v1226 = (float *)&v11[4 * v1223];
                do
                {
                  unsigned int v1227 = *v1225++;
                  *v1226++ = (float)v1227;
                  --v1224;
                }
                while (v1224);
                return result;
              }
            }
            else
            {
              unint64_t v1223 = 0;
            }
            unint64_t v1276 = v1223;
            unint64_t v1223 = a7 & 0xFFFFFFFFFFFFFFF8;
            v1277 = (float32x4_t *)&v11[4 * v1276];
            v1278 = &v14[v1276];
            unint64_t v1279 = v1276 - (a7 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              uint64_t v1280 = *(void *)v1278;
              v1278 += 8;
              v18.i64[0] = v1280;
              uint32x4_t v1281 = (uint32x4_t)vqtbl1q_s8(v18, (int8x16_t)xmmword_19EC3AB50);
              int8x16_t v18 = (int8x16_t)vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v18, (int8x16_t)xmmword_19EC3AB40));
              float32x4_t *v1277 = (float32x4_t)v18;
              v1277[1] = vcvtq_f32_u32(v1281);
              v1277 += 2;
              v1279 += 8;
            }
            while (v1279);
            if (v1223 == a7) {
              return result;
            }
            goto LABEL_1609;
          }
LABEL_1619:
          if (v19 != 2 || v16 != 10) {
            goto LABEL_1641;
          }
          if (!v11) {
            return result;
          }
          if ((a7 & 0x8000000000000000) == 0)
          {
            if (!a7) {
              return result;
            }
            if (a7 >= 0x10 && (&v14[2 * a7] <= v11 || &v11[4 * a7] <= v14))
            {
              unint64_t v1233 = a7 & 0xFFFFFFFFFFFFFFF0;
              v1283 = (float32x4_t *)(v11 + 32);
              v1284 = (uint16x4_t *)(v14 + 16);
              unint64_t v1285 = a7 & 0xFFFFFFFFFFFFFFF0;
              do
              {
                uint16x8_t v1286 = *(uint16x8_t *)v1284[-2].i8;
                float32x4_t v1287 = vcvtq_f32_u32(vmovl_u16(*v1284));
                uint32x4_t v1288 = vmovl_high_u16(*(uint16x8_t *)v1284->i8);
                v1283[-2] = vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v1286.i8));
                v1283[-1] = vcvtq_f32_u32(vmovl_high_u16(v1286));
                float32x4_t *v1283 = v1287;
                v1283[1] = vcvtq_f32_u32(v1288);
                v1283 += 4;
                v1284 += 4;
                v1285 -= 16;
              }
              while (v1285);
              if (v1233 == a7) {
                return result;
              }
            }
            else
            {
              unint64_t v1233 = 0;
            }
            unint64_t v1234 = a7 - v1233;
            v1235 = &v14[2 * v1233];
            v1236 = (float *)&v11[4 * v1233];
            do
            {
              unsigned int v1237 = *(unsigned __int16 *)v1235;
              v1235 += 2;
              *v1236++ = (float)v1237;
              --v1234;
            }
            while (v1234);
            return result;
          }
LABEL_1763:
          __break(1u);
LABEL_1764:
          __break(1u);
LABEL_1765:
          __break(1u);
LABEL_1766:
          __break(1u);
          goto LABEL_1767;
        }
        goto LABEL_1368;
      }
      if (!a7) {
        return result;
      }
      if (a7 < 8 || &v14[2 * a7] > v11 && &v11[a7] > v14)
      {
        unint64_t v810 = 0;
        goto LABEL_1063;
      }
      if (a7 >= 0x20)
      {
        unint64_t v810 = a7 & 0xFFFFFFFFFFFFFFE0;
        v919 = (int8x16_t *)(v11 + 16);
        v920 = (int8x16_t *)(v14 + 32);
        unint64_t v921 = a7 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          int8x16_t v923 = v920[-2];
          int8x16_t v922 = v920[-1];
          int8x16_t v925 = *v920;
          int8x16_t v924 = v920[1];
          v920 += 4;
          v919[-1] = vuzp1q_s8(v923, v922);
          int8x16_t *v919 = vuzp1q_s8(v925, v924);
          v919 += 2;
          v921 -= 32;
        }
        while (v921);
        if (v810 == a7) {
          return result;
        }
        if ((a7 & 0x18) == 0)
        {
LABEL_1063:
          unint64_t v811 = a7 - v810;
          v812 = &v14[2 * v810];
          v813 = &v11[v810];
          do
          {
            unsigned __int8 v814 = *v812;
            v812 += 2;
            *v813++ = v814;
            --v811;
          }
          while (v811);
          return result;
        }
      }
      else
      {
        unint64_t v810 = 0;
      }
      unint64_t v926 = v810;
      unint64_t v810 = a7 & 0xFFFFFFFFFFFFFFF8;
      v927 = (int8x8_t *)&v11[v926];
      v928 = (int16x8_t *)&v14[2 * v926];
      unint64_t v929 = v926 - (a7 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        int16x8_t v930 = *v928++;
        *v927++ = vmovn_s16(v930);
        v929 += 8;
      }
      while (v929);
      if (v810 == a7) {
        return result;
      }
      goto LABEL_1063;
    }
    if (v12 != 7 || v10 != 1)
    {
LABEL_1115:
      if (v12 != 8 || v10 != 1)
      {
LABEL_1131:
        if (v19 == 5 && v16 == 2)
        {
          if (!v11) {
            return result;
          }
          if ((a7 & 0x8000000000000000) == 0)
          {
            if (!a7) {
              return result;
            }
            if (a7 < 8 || &v14[a7] > v11 && &v11[2 * a7] > v14)
            {
              unint64_t v886 = 0;
              goto LABEL_1140;
            }
LABEL_1244:
            if (a7 < 0x20)
            {
              unint64_t v886 = 0;
              goto LABEL_1275;
            }
LABEL_1271:
            unint64_t v886 = a7 & 0xFFFFFFFFFFFFFFE0;
            v962 = (int16x8_t *)(v11 + 32);
            v963 = (int8x8_t *)(v14 + 16);
            unint64_t v964 = a7 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              int8x16_t v965 = *(int8x16_t *)v963[-2].i8;
              int16x8_t v966 = vmovl_s8(*v963);
              int16x8_t v967 = vmovl_high_s8(*(int8x16_t *)v963->i8);
              v962[-2] = vmovl_s8(*(int8x8_t *)v965.i8);
              v962[-1] = vmovl_high_s8(v965);
              int16x8_t *v962 = v966;
              v962[1] = v967;
              v962 += 4;
              v963 += 4;
              v964 -= 32;
            }
            while (v964);
            if (v886 == a7) {
              return result;
            }
            if ((a7 & 0x18) == 0)
            {
LABEL_1140:
              unint64_t v887 = a7 - v886;
              v888 = &v14[v886];
              v889 = &v11[2 * v886];
              do
              {
                __int16 v890 = (char)*v888++;
                *(_WORD *)v889 = v890;
                v889 += 2;
                --v887;
              }
              while (v887);
              return result;
            }
LABEL_1275:
            unint64_t v968 = v886;
            unint64_t v886 = a7 & 0xFFFFFFFFFFFFFFF8;
            v969 = (int16x8_t *)&v11[2 * v968];
            v970 = (int8x8_t *)&v14[v968];
            unint64_t v971 = v968 - (a7 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              int8x8_t v972 = *v970++;
              *v969++ = vmovl_s8(v972);
              v971 += 8;
            }
            while (v971);
            if (v886 == a7) {
              return result;
            }
            goto LABEL_1140;
          }
          __break(1u);
LABEL_1405:
          if (v19 == 6 && v16 == 9)
          {
            if (!v11) {
              return result;
            }
            if ((a7 & 0x8000000000000000) == 0)
            {
              if (a7)
              {
                unint64_t v1068 = 0;
                if (a7 < 0x10) {
                  goto LABEL_1415;
                }
                if ((unint64_t)(v11 - v14) < 0x20) {
                  goto LABEL_1415;
                }
                unint64_t v1068 = a7 & 0xFFFFFFFFFFFFFFF0;
                v1069 = (float16x8_t *)(v11 + 16);
                v1070 = (int16x8_t *)(v14 + 16);
                unint64_t v1071 = a7 & 0xFFFFFFFFFFFFFFF0;
                do
                {
                  float16x8_t v1072 = vcvtq_f16_s16(*v1070);
                  v1069[-1] = vcvtq_f16_s16(v1070[-1]);
                  float16x8_t *v1069 = v1072;
                  v1069 += 2;
                  v1070 += 2;
                  v1071 -= 16;
                }
                while (v1071);
                if (v1068 != a7)
                {
LABEL_1415:
                  unint64_t v1073 = a7 - v1068;
                  uint64_t v1074 = 2 * v1068;
                  v1075 = (__int16 *)&v14[2 * v1068];
                  v1076 = (short float *)&v11[v1074];
                  do
                  {
                    __int16 v1077 = *v1075++;
                    *v1076++ = (short float)v1077;
                    --v1073;
                  }
                  while (v1073);
                }
              }
              return result;
            }
            __break(1u);
LABEL_1641:
            if (v19 == 3 && v16 == 10)
            {
              if (!v11) {
                return result;
              }
              if ((a7 & 0x8000000000000000) == 0)
              {
                if (a7)
                {
                  unint64_t v1249 = 0;
                  if (a7 < 8) {
                    goto LABEL_1651;
                  }
                  if ((unint64_t)(v11 - v14) < 0x20) {
                    goto LABEL_1651;
                  }
                  unint64_t v1249 = a7 & 0xFFFFFFFFFFFFFFF8;
                  v1250 = (float32x4_t *)(v11 + 16);
                  v1251 = (uint32x4_t *)(v14 + 16);
                  unint64_t v1252 = a7 & 0xFFFFFFFFFFFFFFF8;
                  do
                  {
                    float32x4_t v1253 = vcvtq_f32_u32(*v1251);
                    v1250[-1] = vcvtq_f32_u32(v1251[-1]);
                    float32x4_t *v1250 = v1253;
                    v1250 += 2;
                    v1251 += 2;
                    v1252 -= 8;
                  }
                  while (v1252);
                  if (v1249 != a7)
                  {
LABEL_1651:
                    unint64_t v1254 = a7 - v1249;
                    uint64_t v1255 = 4 * v1249;
                    v1256 = (unsigned int *)&v14[4 * v1249];
                    v1257 = (float *)&v11[v1255];
                    do
                    {
                      unsigned int v1258 = *v1256++;
                      *v1257++ = (float)v1258;
                      --v1254;
                    }
                    while (v1254);
                  }
                }
                return result;
              }
              goto LABEL_1764;
            }
LABEL_1655:
            if (v19 == 4 && v16 == 10)
            {
              if (!v11) {
                return result;
              }
              if ((a7 & 0x8000000000000000) != 0) {
                goto LABEL_1765;
              }
              if (!a7) {
                return result;
              }
              if (a7 < 8 || &v14[8 * a7] > v11 && &v11[4 * a7] > v14)
              {
                unint64_t v1259 = 0;
                goto LABEL_1664;
              }
LABEL_1732:
              unint64_t v1259 = a7 & 0xFFFFFFFFFFFFFFF8;
              v1304 = (float32x4_t *)(v11 + 16);
              v1305 = (uint64x2_t *)(v14 + 32);
              unint64_t v1306 = a7 & 0xFFFFFFFFFFFFFFF8;
              do
              {
                uint64x2_t v1308 = v1305[-2];
                uint64x2_t v1307 = v1305[-1];
                uint64x2_t v1310 = *v1305;
                uint64x2_t v1309 = v1305[1];
                v1305 += 4;
                v1304[-1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vcvtq_f64_u64(v1308)), vcvtq_f64_u64(v1307));
                float32x4_t *v1304 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vcvtq_f64_u64(v1310)), vcvtq_f64_u64(v1309));
                v1304 += 2;
                v1306 -= 8;
              }
              while (v1306);
              if (v1259 == a7) {
                return result;
              }
LABEL_1664:
              unint64_t v1260 = a7 - v1259;
              v1261 = (unint64_t *)&v14[8 * v1259];
              v1262 = (float *)&v11[4 * v1259];
              do
              {
                unint64_t v1263 = *v1261++;
                *v1262++ = (float)v1263;
                --v1260;
              }
              while (v1260);
              return result;
            }
LABEL_1672:
            if (v19 == 5 && v16 == 11)
            {
              if (!v11) {
                return result;
              }
              if ((a7 & 0x8000000000000000) != 0) {
                goto LABEL_1766;
              }
              if (!a7) {
                return result;
              }
              if (a7 < 8 || &v14[a7] > v11 && &v11[8 * a7] > v14)
              {
                unint64_t v1271 = 0;
                goto LABEL_1679;
              }
              if (a7 < 0x10)
              {
                unint64_t v1271 = 0;
                goto LABEL_1786;
              }
LABEL_1782:
              unint64_t v1271 = a7 & 0xFFFFFFFFFFFFFFF0;
              unint64_t v1339 = a7 & 0xFFFFFFFFFFFFFFF0;
              v1340 = (int8x16_t *)v14;
              v1341 = (float64x2_t *)v11;
              do
              {
                int8x16_t v1342 = *v1340++;
                unint64_t v1343 = vextq_s8(v1342, v1342, 8uLL).u64[0];
                v1344.i32[0] = v1343;
                v1344.i32[1] = BYTE1(v1343);
                int32x2_t v1345 = vshr_n_s32(vshl_n_s32(v1344, 0x18uLL), 0x18uLL);
                v1346.i64[0] = v1345.i32[0];
                v1346.i64[1] = v1345.i32[1];
                float64x2_t v1347 = vcvtq_f64_s64(v1346);
                v1348.i32[0] = BYTE2(v1343);
                v1348.i32[1] = BYTE3(v1343);
                int32x2_t v1349 = vshr_n_s32(vshl_n_s32(v1348, 0x18uLL), 0x18uLL);
                v1346.i64[0] = v1349.i32[0];
                v1346.i64[1] = v1349.i32[1];
                int64x2_t v1350 = v1346;
                v1351.i32[0] = BYTE4(v1343);
                v1351.i32[1] = BYTE5(v1343);
                int32x2_t v1352 = vshr_n_s32(vshl_n_s32(v1351, 0x18uLL), 0x18uLL);
                v1346.i64[0] = v1352.i32[0];
                v1346.i64[1] = v1352.i32[1];
                v1353.i32[0] = BYTE6(v1343);
                v1353.i32[1] = HIBYTE(v1343);
                float64x2_t v1354 = vcvtq_f64_s64(v1346);
                int32x2_t v1355 = vshr_n_s32(vshl_n_s32(v1353, 0x18uLL), 0x18uLL);
                v1346.i64[0] = v1355.i32[0];
                v1346.i64[1] = v1355.i32[1];
                float64x2_t v1356 = vcvtq_f64_s64(v1346);
                v1353.i32[0] = v1342.u8[0];
                v1353.i32[1] = v1342.u8[1];
                int32x2_t v1357 = vshr_n_s32(vshl_n_s32(v1353, 0x18uLL), 0x18uLL);
                v1346.i64[0] = v1357.i32[0];
                v1346.i64[1] = v1357.i32[1];
                float64x2_t v1358 = vcvtq_f64_s64(v1346);
                v1359.i32[0] = v1342.u8[2];
                v1359.i32[1] = v1342.u8[3];
                int32x2_t v1360 = vshr_n_s32(vshl_n_s32(v1359, 0x18uLL), 0x18uLL);
                v1361.i32[0] = v1342.u8[4];
                v1361.i32[1] = v1342.u8[5];
                int32x2_t v1362 = vshr_n_s32(vshl_n_s32(v1361, 0x18uLL), 0x18uLL);
                v1346.i64[0] = v1362.i32[0];
                v1346.i64[1] = v1362.i32[1];
                v1363.i32[0] = v1342.u8[6];
                v1363.i32[1] = v1342.u8[7];
                float64x2_t v1364 = vcvtq_f64_s64(v1346);
                int32x2_t v1365 = vshr_n_s32(vshl_n_s32(v1363, 0x18uLL), 0x18uLL);
                v1346.i64[0] = v1365.i32[0];
                v1346.i64[1] = v1365.i32[1];
                v1341[2] = v1364;
                v1341[3] = vcvtq_f64_s64(v1346);
                v1346.i64[0] = v1360.i32[0];
                v1346.i64[1] = v1360.i32[1];
                float64x2_t *v1341 = v1358;
                v1341[1] = vcvtq_f64_s64(v1346);
                v1341[6] = v1354;
                v1341[7] = v1356;
                v1341[4] = v1347;
                v1341[5] = vcvtq_f64_s64(v1350);
                v1341 += 8;
                v1339 -= 16;
              }
              while (v1339);
              if (v1271 == a7) {
                return result;
              }
              if ((a7 & 8) == 0)
              {
LABEL_1679:
                unint64_t v1272 = a7 - v1271;
                v1273 = &v14[v1271];
                v1274 = (double *)&v11[8 * v1271];
                do
                {
                  int v1275 = (char)*v1273++;
                  *v1274++ = (double)v1275;
                  --v1272;
                }
                while (v1272);
                return result;
              }
LABEL_1786:
              unint64_t v1366 = v1271;
              unint64_t v1271 = a7 & 0xFFFFFFFFFFFFFFF8;
              v1367 = (float64x2_t *)&v11[8 * v1366];
              v1368 = &v14[v1366];
              unint64_t v1369 = v1366 - (a7 & 0xFFFFFFFFFFFFFFF8);
              do
              {
                uint64_t v1370 = *(void *)v1368;
                v1368 += 8;
                v1371.i32[0] = v1370;
                v1371.i32[1] = BYTE1(v1370);
                int32x2_t v1372 = vshr_n_s32(vshl_n_s32(v1371, 0x18uLL), 0x18uLL);
                v1373.i64[0] = v1372.i32[0];
                v1373.i64[1] = v1372.i32[1];
                float64x2_t v1374 = vcvtq_f64_s64(v1373);
                v1375.i32[0] = BYTE2(v1370);
                v1375.i32[1] = BYTE3(v1370);
                int32x2_t v1376 = vshr_n_s32(vshl_n_s32(v1375, 0x18uLL), 0x18uLL);
                v1373.i64[0] = v1376.i32[0];
                v1373.i64[1] = v1376.i32[1];
                int64x2_t v1377 = v1373;
                v1378.i32[0] = BYTE4(v1370);
                v1378.i32[1] = BYTE5(v1370);
                int32x2_t v1379 = vshr_n_s32(vshl_n_s32(v1378, 0x18uLL), 0x18uLL);
                v1373.i64[0] = v1379.i32[0];
                v1373.i64[1] = v1379.i32[1];
                v1380.i32[0] = BYTE6(v1370);
                v1380.i32[1] = HIBYTE(v1370);
                float64x2_t v1381 = vcvtq_f64_s64(v1373);
                int32x2_t v1382 = vshr_n_s32(vshl_n_s32(v1380, 0x18uLL), 0x18uLL);
                v1373.i64[0] = v1382.i32[0];
                v1373.i64[1] = v1382.i32[1];
                v1367[2] = v1381;
                v1367[3] = vcvtq_f64_s64(v1373);
                float64x2_t *v1367 = v1374;
                v1367[1] = vcvtq_f64_s64(v1377);
                v1367 += 4;
                v1369 += 8;
              }
              while (v1369);
              if (v1271 == a7) {
                return result;
              }
              goto LABEL_1679;
            }
            goto LABEL_1689;
          }
          goto LABEL_1428;
        }
        goto LABEL_1157;
      }
      if (!v11) {
        return result;
      }
      if ((a7 & 0x8000000000000000) != 0)
      {
        __break(1u);
        goto LABEL_1386;
      }
      if (!a7) {
        return result;
      }
      if (a7 < 8 || &v14[8 * a7] > v11 && &v11[a7] > v14)
      {
        unint64_t v881 = 0;
        goto LABEL_1124;
      }
LABEL_1217:
      if (a7 >= 0x20)
      {
        unint64_t v881 = a7 & 0xFFFFFFFFFFFFFFE0;
        v948 = v11 + 16;
        v949 = (int8x16x4_t *)(v14 + 128);
        unint64_t v950 = a7 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          *(void *)&long long v951 = vqtbl4q_s8(v949[-2], (int8x16_t)xmmword_19EC3AB00).u64[0];
          *(void *)&long long v952 = vqtbl4q_s8(*v949, (int8x16_t)xmmword_19EC3AB00).u64[0];
          *((void *)&v951 + 1) = vqtbl4q_s8(v949[-1], (int8x16_t)xmmword_19EC3AB00).u64[0];
          *((void *)&v952 + 1) = vqtbl4q_s8(v949[1], (int8x16_t)xmmword_19EC3AB00).u64[0];
          *(v948 - 1) = v951;
          _OWORD *v948 = v952;
          v948 += 2;
          v949 += 4;
          v950 -= 32;
        }
        while (v950);
        if (v881 == a7) {
          return result;
        }
        if ((a7 & 0x18) == 0)
        {
LABEL_1124:
          unint64_t v882 = a7 - v881;
          v883 = &v14[8 * v881];
          v884 = &v11[v881];
          do
          {
            uint64_t v885 = *(void *)v883;
            v883 += 8;
            *v884++ = v885;
            --v882;
          }
          while (v882);
          return result;
        }
      }
      else
      {
        unint64_t v881 = 0;
      }
      unint64_t v953 = v881;
      unint64_t v881 = a7 & 0xFFFFFFFFFFFFFFF8;
      v954 = &v11[v953];
      v955 = (int8x16x4_t *)&v14[8 * v953];
      unint64_t v956 = v953 - (a7 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        *(void *)v954 = vqtbl4q_s8(*v955, (int8x16_t)xmmword_19EC3AB10).u64[0];
        v954 += 8;
        ++v955;
        v956 += 8;
      }
      while (v956);
      if (v881 == a7) {
        return result;
      }
      goto LABEL_1124;
    }
    if (!v11) {
      return result;
    }
    if ((a7 & 0x8000000000000000) != 0)
    {
      __break(1u);
LABEL_1368:
      if (v19 == 8 && v16 == 4)
      {
        if (!v11) {
          return result;
        }
        if ((a7 & 0x8000000000000000) == 0)
        {
          if (a7)
          {
            unint64_t v1035 = 0;
            if (a7 < 4) {
              goto LABEL_1378;
            }
            if ((unint64_t)(v11 - v14) < 0x20) {
              goto LABEL_1378;
            }
            unint64_t v1035 = a7 & 0xFFFFFFFFFFFFFFFCLL;
            v1036 = v11 + 16;
            v1037 = (long long *)(v14 + 16);
            unint64_t v1038 = a7 & 0xFFFFFFFFFFFFFFFCLL;
            do
            {
              long long v1039 = *v1037;
              *(v1036 - 1) = *(v1037 - 1);
              _OWORD *v1036 = v1039;
              v1036 += 2;
              v1037 += 2;
              v1038 -= 4;
            }
            while (v1038);
            if (v1035 != a7)
            {
LABEL_1378:
              unint64_t v1040 = a7 - v1035;
              uint64_t v1041 = 8 * v1035;
              v1042 = &v14[8 * v1035];
              v1043 = &v11[v1041];
              do
              {
                uint64_t v1044 = *(void *)v1042;
                v1042 += 8;
                *(void *)v1043 = v1044;
                v1043 += 8;
                --v1040;
              }
              while (v1040);
            }
          }
          return result;
        }
        __break(1u);
        goto LABEL_1600;
      }
LABEL_1386:
      if (v19 != 5 || v16 != 9) {
        goto LABEL_1405;
      }
      if (!v11) {
        return result;
      }
      if ((a7 & 0x8000000000000000) != 0)
      {
        __break(1u);
        goto LABEL_1619;
      }
      if (!a7) {
        return result;
      }
      if (a7 < 8 || &v14[a7] > v11 && &v11[2 * a7] > v14)
      {
        unint64_t v1052 = 0;
        goto LABEL_1395;
      }
      if (a7 >= 0x20)
      {
        unint64_t v1052 = a7 & 0xFFFFFFFFFFFFFFE0;
        v1144 = (float16x8_t *)(v11 + 32);
        v1145 = (int8x8_t *)(v14 + 16);
        unint64_t v1146 = a7 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          int8x16_t v1147 = *(int8x16_t *)v1145[-2].i8;
          float16x8_t v1148 = vcvtq_f16_s16(vmovl_s8(*v1145));
          int16x8_t v1149 = vmovl_high_s8(*(int8x16_t *)v1145->i8);
          v1144[-2] = vcvtq_f16_s16(vmovl_s8(*(int8x8_t *)v1147.i8));
          v1144[-1] = vcvtq_f16_s16(vmovl_high_s8(v1147));
          float16x8_t *v1144 = v1148;
          v1144[1] = vcvtq_f16_s16(v1149);
          v1144 += 4;
          v1145 += 4;
          v1146 -= 32;
        }
        while (v1146);
        if (v1052 == a7) {
          return result;
        }
        if ((a7 & 0x18) == 0)
        {
LABEL_1395:
          unint64_t v1053 = a7 - v1052;
          v1054 = &v14[v1052];
          v1055 = (short float *)&v11[2 * v1052];
          do
          {
            int v1056 = (char)*v1054++;
            *v1055++ = (short float)v1056;
            --v1053;
          }
          while (v1053);
          return result;
        }
      }
      else
      {
        unint64_t v1052 = 0;
      }
      unint64_t v1150 = v1052;
      unint64_t v1052 = a7 & 0xFFFFFFFFFFFFFFF8;
      v1151 = (float16x8_t *)&v11[2 * v1150];
      v1152 = (int8x8_t *)&v14[v1150];
      unint64_t v1153 = v1150 - (a7 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        int8x8_t v1154 = *v1152++;
        *v1151++ = vcvtq_f16_s16(vmovl_s8(v1154));
        v1153 += 8;
      }
      while (v1153);
      if (v1052 == a7) {
        return result;
      }
      goto LABEL_1395;
    }
    if (!a7) {
      return result;
    }
    if (a7 < 8 || &v14[4 * a7] > v11 && &v11[a7] > v14)
    {
      unint64_t v868 = 0;
      goto LABEL_1104;
    }
LABEL_1189:
    if (a7 >= 0x20)
    {
      unint64_t v868 = a7 & 0xFFFFFFFFFFFFFFE0;
      v936 = (int8x16_t *)(v11 + 16);
      v937 = (int8x16x4_t *)(v14 + 64);
      unint64_t v938 = a7 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        int8x16x4_t v1607 = *v937;
        v936[-1] = vqtbl4q_s8(v937[-1], (int8x16_t)xmmword_19EC3AB20);
        int8x16_t *v936 = vqtbl4q_s8(v1607, (int8x16_t)xmmword_19EC3AB20);
        v936 += 2;
        v937 += 2;
        v938 -= 32;
      }
      while (v938);
      if (v868 == a7) {
        return result;
      }
      if ((a7 & 0x18) == 0)
      {
LABEL_1104:
        unint64_t v869 = a7 - v868;
        v870 = &v14[4 * v868];
        v871 = &v11[v868];
        do
        {
          int v872 = *(_DWORD *)v870;
          v870 += 4;
          *v871++ = v872;
          --v869;
        }
        while (v869);
        return result;
      }
    }
    else
    {
      unint64_t v868 = 0;
    }
    unint64_t v939 = v868;
    unint64_t v868 = a7 & 0xFFFFFFFFFFFFFFF8;
    v940 = &v11[v939];
    v941 = (int8x16x2_t *)&v14[4 * v939];
    unint64_t v942 = v939 - (a7 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      int8x16x2_t v1603 = *v941++;
      *(void *)v940 = vqtbl2q_s8(v1603, (int8x16_t)xmmword_19EC3AB30).u64[0];
      v940 += 8;
      v942 += 8;
    }
    while (v942);
    if (v868 == a7) {
      return result;
    }
    goto LABEL_1104;
  }
  if (!v11) {
    return result;
  }
  if ((a7 & 0x8000000000000000) == 0)
  {
    if (!a7) {
      return result;
    }
    if (a7 < 8 || &v14[a7] > v11 && &v11[4 * a7] > v14)
    {
      unint64_t v379 = 0;
      goto LABEL_604;
    }
    if (a7 >= 0x20)
    {
      unint64_t v379 = a7 & 0xFFFFFFFFFFFFFFE0;
      v614 = (int8x16_t *)(v11 + 64);
      v615 = (int8x16_t *)(v14 + 16);
      v18.i64[1] = 0xFFFFFF0BFFFFFF0ALL;
      unint64_t v616 = a7 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        int8x16_t v617 = v615[-1];
        int8x16_t v618 = *v615;
        int8x16_t v619 = vqtbl1q_s8(*v615, (int8x16_t)xmmword_19EC3AB40);
        int8x16_t v620 = vqtbl1q_s8(*v615, (int8x16_t)xmmword_19EC3AB50);
        v614[-2] = vqtbl1q_s8(v617, (int8x16_t)xmmword_19EC3AB60);
        v614[-1] = vqtbl1q_s8(v617, (int8x16_t)xmmword_19EC3AB70);
        v614[-4] = vqtbl1q_s8(v617, (int8x16_t)xmmword_19EC3AB40);
        v614[-3] = vqtbl1q_s8(v617, (int8x16_t)xmmword_19EC3AB50);
        v614[2] = vqtbl1q_s8(v618, (int8x16_t)xmmword_19EC3AB60);
        v614[3] = vqtbl1q_s8(v618, (int8x16_t)xmmword_19EC3AB70);
        int8x16_t *v614 = v619;
        v614[1] = v620;
        v614 += 8;
        v615 += 2;
        v616 -= 32;
      }
      while (v616);
      if (v379 == a7) {
        return result;
      }
      if ((a7 & 0x18) == 0)
      {
LABEL_604:
        unint64_t v380 = a7 - v379;
        v381 = &v14[v379];
        v382 = &v11[4 * v379];
        do
        {
          int v383 = *v381++;
          *(_DWORD *)v382 = v383;
          v382 += 4;
          --v380;
        }
        while (v380);
        return result;
      }
    }
    else
    {
      unint64_t v379 = 0;
    }
    unint64_t v621 = v379;
    unint64_t v379 = a7 & 0xFFFFFFFFFFFFFFF8;
    v622 = (int8x16_t *)&v11[4 * v621];
    v623 = &v14[v621];
    unint64_t v624 = v621 - (a7 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      uint64_t v625 = *(void *)v623;
      v623 += 8;
      v18.i64[0] = v625;
      int8x16_t v626 = vqtbl1q_s8(v18, (int8x16_t)xmmword_19EC3AB40);
      int8x16_t v18 = vqtbl1q_s8(v18, (int8x16_t)xmmword_19EC3AB50);
      int8x16_t *v622 = v626;
      v622[1] = v18;
      v622 += 2;
      v624 += 8;
    }
    while (v624);
    if (v379 == a7) {
      return result;
    }
    goto LABEL_604;
  }
LABEL_1156:
  __break(1u);
LABEL_1157:
  if (v19 == 6 && v16 == 2)
  {
    if (!v11) {
      return result;
    }
    if ((a7 & 0x8000000000000000) == 0)
    {
      if (a7)
      {
        unint64_t v904 = 0;
        if (a7 < 0x10) {
          goto LABEL_1167;
        }
        if ((unint64_t)(v11 - v14) < 0x20) {
          goto LABEL_1167;
        }
        unint64_t v904 = a7 & 0xFFFFFFFFFFFFFFF0;
        v905 = v11 + 16;
        v906 = (long long *)(v14 + 16);
        unint64_t v907 = a7 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          long long v908 = *v906;
          *(v905 - 1) = *(v906 - 1);
          _OWORD *v905 = v908;
          v905 += 2;
          v906 += 2;
          v907 -= 16;
        }
        while (v907);
        if (v904 != a7)
        {
LABEL_1167:
          unint64_t v909 = a7 - v904;
          uint64_t v910 = 2 * v904;
          v911 = &v14[2 * v904];
          v912 = &v11[v910];
          do
          {
            __int16 v913 = *(_WORD *)v911;
            v911 += 2;
            *(_WORD *)v912 = v913;
            v912 += 2;
            --v909;
          }
          while (v909);
        }
      }
      return result;
    }
    __break(1u);
LABEL_1428:
    if (v19 == 7 && v16 == 9)
    {
      if (!v11) {
        return result;
      }
      if ((a7 & 0x8000000000000000) == 0)
      {
        if (!a7) {
          return result;
        }
        if (a7 >= 0x10 && (&v14[4 * a7] <= v11 || &v11[2 * a7] <= v14))
        {
          unint64_t v1111 = a7 & 0xFFFFFFFFFFFFFFF0;
          v1160 = (float16x8_t *)(v11 + 16);
          v1161 = (int32x4_t *)(v14 + 32);
          unint64_t v1162 = a7 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            int32x4_t v1164 = v1161[-2];
            int32x4_t v1163 = v1161[-1];
            int32x4_t v1166 = *v1161;
            int32x4_t v1165 = v1161[1];
            v1161 += 4;
            v1160[-1] = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vcvtq_f32_s32(v1164)), vcvtq_f32_s32(v1163));
            float16x8_t *v1160 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vcvtq_f32_s32(v1166)), vcvtq_f32_s32(v1165));
            v1160 += 2;
            v1162 -= 16;
          }
          while (v1162);
          if (v1111 == a7) {
            return result;
          }
        }
        else
        {
          unint64_t v1111 = 0;
        }
        unint64_t v1112 = a7 - v1111;
        v1113 = (int *)&v14[4 * v1111];
        v1114 = (short float *)&v11[2 * v1111];
        do
        {
          int v1115 = *v1113++;
          *v1114++ = (short float)v1115;
          --v1112;
        }
        while (v1112);
        return result;
      }
      __break(1u);
      goto LABEL_1655;
    }
    goto LABEL_1445;
  }
LABEL_1176:
  if (v19 != 7 || v16 != 2)
  {
LABEL_1204:
    if (v19 == 8 && v16 == 2)
    {
      if (!v11) {
        return result;
      }
      if ((a7 & 0x8000000000000000) == 0)
      {
        if (!a7) {
          return result;
        }
        if (a7 >= 0x10 && (&v14[8 * a7] <= v11 || &v11[2 * a7] <= v14))
        {
          unint64_t v931 = a7 & 0xFFFFFFFFFFFFFFF0;
          v995 = (int16x8_t *)(v11 + 16);
          v996 = (int32x4_t *)(v14 + 64);
          unint64_t v997 = a7 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            int16x8_t v998 = vuzp1q_s16((int16x8_t)vuzp1q_s32(*v996, v996[1]), (int16x8_t)vuzp1q_s32(v996[2], v996[3]));
            v995[-1] = vuzp1q_s16((int16x8_t)vuzp1q_s32(v996[-4], v996[-3]), (int16x8_t)vuzp1q_s32(v996[-2], v996[-1]));
            int16x8_t *v995 = v998;
            v995 += 2;
            v996 += 8;
            v997 -= 16;
          }
          while (v997);
          if (v931 == a7) {
            return result;
          }
        }
        else
        {
          unint64_t v931 = 0;
        }
        unint64_t v932 = a7 - v931;
        v933 = &v14[8 * v931];
        v934 = &v11[2 * v931];
        do
        {
          uint64_t v935 = *(void *)v933;
          v933 += 8;
          *(_WORD *)v934 = v935;
          v934 += 2;
          --v932;
        }
        while (v932);
        return result;
      }
      __break(1u);
      goto LABEL_1458;
    }
LABEL_1231:
    if (v19 == 5 && v16 == 3)
    {
      if (!v11) {
        return result;
      }
      if ((a7 & 0x8000000000000000) != 0)
      {
        __break(1u);
        goto LABEL_1473;
      }
      if (!a7) {
        return result;
      }
      if (a7 < 8 || &v14[a7] > v11 && &v11[4 * a7] > v14)
      {
        unint64_t v943 = 0;
        goto LABEL_1240;
      }
      if (a7 >= 0x20)
      {
        unint64_t v943 = a7 & 0xFFFFFFFFFFFFFFE0;
        v1015 = (int32x4_t *)(v11 + 64);
        v1016 = (int8x8_t *)(v14 + 16);
        unint64_t v1017 = a7 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          int8x16_t v1018 = *(int8x16_t *)v1016[-2].i8;
          int8x16_t v1019 = *(int8x16_t *)v1016->i8;
          int16x8_t v1020 = vmovl_s8(*(int8x8_t *)v1018.i8);
          int16x8_t v1021 = vmovl_high_s8(v1018);
          int16x8_t v1022 = vmovl_s8(*v1016);
          v1015[-2] = vmovl_s16(*(int16x4_t *)v1021.i8);
          v1015[-1] = vmovl_high_s16(v1021);
          int16x8_t v1023 = vmovl_high_s8(v1019);
          v1015[-4] = vmovl_s16(*(int16x4_t *)v1020.i8);
          v1015[-3] = vmovl_high_s16(v1020);
          v1015[2] = vmovl_s16(*(int16x4_t *)v1023.i8);
          v1015[3] = vmovl_high_s16(v1023);
          int32x4_t *v1015 = vmovl_s16(*(int16x4_t *)v1022.i8);
          v1015[1] = vmovl_high_s16(v1022);
          v1015 += 8;
          v1016 += 4;
          v1017 -= 32;
        }
        while (v1017);
        if (v943 == a7) {
          return result;
        }
        if ((a7 & 0x18) == 0)
        {
LABEL_1240:
          unint64_t v944 = a7 - v943;
          v945 = &v14[v943];
          v946 = &v11[4 * v943];
          do
          {
            int v947 = (char)*v945++;
            *(_DWORD *)v946 = v947;
            v946 += 4;
            --v944;
          }
          while (v944);
          return result;
        }
      }
      else
      {
        unint64_t v943 = 0;
      }
      unint64_t v1024 = v943;
      unint64_t v943 = a7 & 0xFFFFFFFFFFFFFFF8;
      v1025 = (int32x4_t *)&v11[4 * v1024];
      v1026 = (int8x8_t *)&v14[v1024];
      unint64_t v1027 = v1024 - (a7 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        int8x8_t v1028 = *v1026++;
        int16x8_t v1029 = vmovl_s8(v1028);
        int32x4_t *v1025 = vmovl_s16(*(int16x4_t *)v1029.i8);
        v1025[1] = vmovl_high_s16(v1029);
        v1025 += 2;
        v1027 += 8;
      }
      while (v1027);
      if (v943 == a7) {
        return result;
      }
      goto LABEL_1240;
    }
    goto LABEL_1258;
  }
  if (!v11) {
    return result;
  }
  if ((a7 & 0x8000000000000000) == 0)
  {
    if (!a7) {
      return result;
    }
    if (a7 >= 0x10 && (&v14[4 * a7] <= v11 || &v11[2 * a7] <= v14))
    {
      unint64_t v914 = a7 & 0xFFFFFFFFFFFFFFF0;
      v983 = (int16x8_t *)(v11 + 16);
      v984 = (int16x8_t *)(v14 + 32);
      unint64_t v985 = a7 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        int16x8_t v987 = v984[-2];
        int16x8_t v986 = v984[-1];
        int16x8_t v989 = *v984;
        int16x8_t v988 = v984[1];
        v984 += 4;
        v983[-1] = vuzp1q_s16(v987, v986);
        int16x8_t *v983 = vuzp1q_s16(v989, v988);
        v983 += 2;
        v985 -= 16;
      }
      while (v985);
      if (v914 == a7) {
        return result;
      }
    }
    else
    {
      unint64_t v914 = 0;
    }
    unint64_t v915 = a7 - v914;
    v916 = &v14[4 * v914];
    v917 = &v11[2 * v914];
    do
    {
      int v918 = *(_DWORD *)v916;
      v916 += 4;
      *(_WORD *)v917 = v918;
      v917 += 2;
      --v915;
    }
    while (v915);
    return result;
  }
  __break(1u);
LABEL_1445:
  if (v19 == 8 && v16 == 9)
  {
    if (!v11) {
      return result;
    }
    if ((a7 & 0x8000000000000000) == 0)
    {
      if (!a7) {
        return result;
      }
      if (a7 >= 0x10 && (&v14[8 * a7] <= v11 || &v11[2 * a7] <= v14))
      {
        unint64_t v1124 = a7 & 0xFFFFFFFFFFFFFFF0;
        v1172 = (float16x8_t *)(v11 + 16);
        v1173 = (int64x2_t *)(v14 + 64);
        unint64_t v1174 = a7 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          float16x8_t v1175 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vcvtq_f64_s64(*v1173)), vcvtq_f64_s64(v1173[1]))), vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vcvtq_f64_s64(v1173[2])), vcvtq_f64_s64(v1173[3])));
          v1172[-1] = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vcvtq_f64_s64(v1173[-4])), vcvtq_f64_s64(v1173[-3]))), vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vcvtq_f64_s64(v1173[-2])), vcvtq_f64_s64(v1173[-1])));
          float16x8_t *v1172 = v1175;
          v1172 += 2;
          v1173 += 8;
          v1174 -= 16;
        }
        while (v1174);
        if (v1124 == a7) {
          return result;
        }
      }
      else
      {
        unint64_t v1124 = 0;
      }
      unint64_t v1125 = a7 - v1124;
      v1126 = (uint64_t *)&v14[8 * v1124];
      v1127 = (short float *)&v11[2 * v1124];
      do
      {
        uint64_t v1128 = *v1126++;
        *v1127++ = (short float)v1128;
        --v1125;
      }
      while (v1125);
      return result;
    }
    __break(1u);
    goto LABEL_1672;
  }
LABEL_1458:
  if (v19 != 1 || v16 != 9)
  {
LABEL_1473:
    if (v19 == 2 && v16 == 9)
    {
      if (!v11) {
        return result;
      }
      if ((a7 & 0x8000000000000000) == 0)
      {
        if (a7)
        {
          unint64_t v1134 = 0;
          if (a7 < 0x10) {
            goto LABEL_1483;
          }
          if ((unint64_t)(v11 - v14) < 0x20) {
            goto LABEL_1483;
          }
          unint64_t v1134 = a7 & 0xFFFFFFFFFFFFFFF0;
          v1135 = (float16x8_t *)(v11 + 16);
          v1136 = (uint16x8_t *)(v14 + 16);
          unint64_t v1137 = a7 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            float16x8_t v1138 = vcvtq_f16_u16(*v1136);
            v1135[-1] = vcvtq_f16_u16(v1136[-1]);
            float16x8_t *v1135 = v1138;
            v1135 += 2;
            v1136 += 2;
            v1137 -= 16;
          }
          while (v1137);
          if (v1134 != a7)
          {
LABEL_1483:
            unint64_t v1139 = a7 - v1134;
            uint64_t v1140 = 2 * v1134;
            v1141 = (unsigned __int16 *)&v14[2 * v1134];
            v1142 = (short float *)&v11[v1140];
            do
            {
              unsigned __int16 v1143 = *v1141++;
              *v1142++ = (short float)v1143;
              --v1139;
            }
            while (v1139);
          }
        }
        return result;
      }
      __break(1u);
      goto LABEL_1708;
    }
    goto LABEL_1495;
  }
  if (!v11) {
    return result;
  }
  if ((a7 & 0x8000000000000000) == 0)
  {
    if (!a7) {
      return result;
    }
    if (a7 < 8 || &v14[a7] > v11 && &v11[2 * a7] > v14)
    {
      unint64_t v1129 = 0;
      goto LABEL_1467;
    }
    if (a7 >= 0x20)
    {
      unint64_t v1129 = a7 & 0xFFFFFFFFFFFFFFE0;
      v1186 = (float16x8_t *)(v11 + 32);
      v1187 = (uint8x8_t *)(v14 + 16);
      unint64_t v1188 = a7 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        uint8x16_t v1189 = *(uint8x16_t *)v1187[-2].i8;
        float16x8_t v1190 = vcvtq_f16_u16(vmovl_u8(*v1187));
        uint16x8_t v1191 = vmovl_high_u8(*(uint8x16_t *)v1187->i8);
        v1186[-2] = vcvtq_f16_u16(vmovl_u8(*(uint8x8_t *)v1189.i8));
        v1186[-1] = vcvtq_f16_u16(vmovl_high_u8(v1189));
        float16x8_t *v1186 = v1190;
        v1186[1] = vcvtq_f16_u16(v1191);
        v1186 += 4;
        v1187 += 4;
        v1188 -= 32;
      }
      while (v1188);
      if (v1129 == a7) {
        return result;
      }
      if ((a7 & 0x18) == 0)
      {
LABEL_1467:
        unint64_t v1130 = a7 - v1129;
        v1131 = &v14[v1129];
        v1132 = (short float *)&v11[2 * v1129];
        do
        {
          unsigned int v1133 = *v1131++;
          *v1132++ = (short float)v1133;
          --v1130;
        }
        while (v1130);
        return result;
      }
    }
    else
    {
      unint64_t v1129 = 0;
    }
    unint64_t v1192 = v1129;
    unint64_t v1129 = a7 & 0xFFFFFFFFFFFFFFF8;
    v1193 = (float16x8_t *)&v11[2 * v1192];
    v1194 = (uint8x8_t *)&v14[v1192];
    unint64_t v1195 = v1192 - (a7 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      uint8x8_t v1196 = *v1194++;
      *v1193++ = vcvtq_f16_u16(vmovl_u8(v1196));
      v1195 += 8;
    }
    while (v1195);
    if (v1129 == a7) {
      return result;
    }
    goto LABEL_1467;
  }
  __break(1u);
LABEL_1689:
  if (v19 == 6 && v16 == 11)
  {
    if (!v11) {
      return result;
    }
    if ((a7 & 0x8000000000000000) == 0)
    {
      if (!a7) {
        return result;
      }
      if (a7 < 8 || &v14[2 * a7] > v11 && &v11[8 * a7] > v14)
      {
        unint64_t v1282 = 0;
        goto LABEL_1771;
      }
LABEL_1768:
      unint64_t v1282 = a7 & 0xFFFFFFFFFFFFFFF8;
      unint64_t v1313 = a7 & 0xFFFFFFFFFFFFFFF8;
      v1314 = (int16x8_t *)v14;
      v1315 = (float64x2_t *)v11;
      do
      {
        int16x8_t v1316 = *v1314++;
        int32x4_t v1317 = vmovl_s16(*(int16x4_t *)v1316.i8);
        v1318.i64[0] = v1317.i32[0];
        v1318.i64[1] = v1317.i32[1];
        float64x2_t v1319 = vcvtq_f64_s64(v1318);
        v1318.i64[0] = v1317.i32[2];
        v1318.i64[1] = v1317.i32[3];
        int64x2_t v1320 = v1318;
        int32x4_t v1321 = vmovl_high_s16(v1316);
        v1318.i64[0] = v1321.i32[0];
        v1318.i64[1] = v1321.i32[1];
        float64x2_t v1322 = vcvtq_f64_s64(v1318);
        v1318.i64[0] = v1321.i32[2];
        v1318.i64[1] = v1321.i32[3];
        v1315[2] = v1322;
        v1315[3] = vcvtq_f64_s64(v1318);
        float64x2_t *v1315 = v1319;
        v1315[1] = vcvtq_f64_s64(v1320);
        v1315 += 4;
        v1313 -= 8;
      }
      while (v1313);
      if (v1282 == a7) {
        return result;
      }
LABEL_1771:
      unint64_t v1323 = a7 - v1282;
      v1324 = &v14[2 * v1282];
      v1325 = (double *)&v11[8 * v1282];
      do
      {
        int v1326 = *(__int16 *)v1324;
        v1324 += 2;
        *v1325++ = (double)v1326;
        --v1323;
      }
      while (v1323);
      return result;
    }
LABEL_1767:
    __break(1u);
    goto LABEL_1768;
  }
LABEL_1708:
  if (v19 == 7 && v16 == 11)
  {
    if (!v11) {
      return result;
    }
    if ((a7 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      if (!a7) {
        return result;
      }
      if (a7 < 8 || &v14[4 * a7] > v11 && &v11[8 * a7] > v14)
      {
        unint64_t v1293 = 0;
        goto LABEL_1778;
      }
    }
    unint64_t v1293 = a7 & 0xFFFFFFFFFFFFFFF8;
    v1327 = (float64x2_t *)(v11 + 32);
    v1328 = v14 + 16;
    unint64_t v1329 = a7 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      long long v1330 = *((_OWORD *)v1328 - 1);
      v1331.i64[0] = (int)v1330;
      v1331.i64[1] = SDWORD1(v1330);
      float64x2_t v1332 = vcvtq_f64_s64(v1331);
      v1331.i64[0] = SDWORD2(v1330);
      v1331.i64[1] = SHIDWORD(v1330);
      float64x2_t v1333 = vcvtq_f64_s64(v1331);
      v1331.i64[0] = (int)*(_OWORD *)v1328;
      v1331.i64[1] = (int)HIDWORD(*(void *)v1328);
      float64x2_t v1334 = vcvtq_f64_s64(v1331);
      v1331.i64[0] = (int)*((void *)v1328 + 1);
      v1331.i64[1] = (int)HIDWORD(*(_OWORD *)v1328);
      v1327[-2] = v1332;
      v1327[-1] = v1333;
      float64x2_t *v1327 = v1334;
      v1327[1] = vcvtq_f64_s64(v1331);
      v1327 += 4;
      v1328 += 32;
      v1329 -= 8;
    }
    while (v1329);
    if (v1293 == a7) {
      return result;
    }
LABEL_1778:
    unint64_t v1335 = a7 - v1293;
    v1336 = (int *)&v14[4 * v1293];
    v1337 = (double *)&v11[8 * v1293];
    do
    {
      int v1338 = *v1336++;
      *v1337++ = (double)v1338;
      --v1335;
    }
    while (v1335);
    return result;
  }
LABEL_1718:
  if (v19 != 8 || v16 != 11)
  {
    if (v19 == 1 && v16 == 11)
    {
      if (!v11) {
        return result;
      }
      if ((a7 & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else
      {
        if (!a7) {
          return result;
        }
        if (a7 < 8 || &v14[a7] > v11 && &v11[8 * a7] > v14)
        {
          unint64_t v1311 = 0;
          goto LABEL_1816;
        }
      }
      if (a7 >= 0x10)
      {
        unint64_t v1311 = a7 & 0xFFFFFFFFFFFFFFF0;
        unint64_t v1398 = a7 & 0xFFFFFFFFFFFFFFF0;
        v1399 = (int8x16_t *)v14;
        v1400 = (float64x2_t *)v11;
        do
        {
          int8x16_t v1401 = *v1399++;
          unint64_t v1402 = vextq_s8(v1401, v1401, 8uLL).u64[0];
          v1403.i32[0] = v1402;
          v1403.i32[1] = BYTE1(v1402);
          int8x8_t v1404 = vand_s8(v1403, (int8x8_t)0xFF000000FFLL);
          v1405.i64[0] = v1404.u32[0];
          v1405.i64[1] = v1404.u32[1];
          float64x2_t v1406 = vcvtq_f64_u64(v1405);
          v1407.i32[0] = BYTE2(v1402);
          v1407.i32[1] = BYTE3(v1402);
          int8x8_t v1408 = vand_s8(v1407, (int8x8_t)0xFF000000FFLL);
          v1405.i64[0] = v1408.u32[0];
          v1405.i64[1] = v1408.u32[1];
          v1409.i32[0] = BYTE4(v1402);
          float64x2_t v1410 = vcvtq_f64_u64(v1405);
          v1409.i32[1] = BYTE5(v1402);
          int8x8_t v1411 = vand_s8(v1409, (int8x8_t)0xFF000000FFLL);
          v1405.i64[0] = v1411.u32[0];
          v1405.i64[1] = v1411.u32[1];
          v1412.i32[0] = BYTE6(v1402);
          v1412.i32[1] = HIBYTE(v1402);
          float64x2_t v1413 = vcvtq_f64_u64(v1405);
          int8x8_t v1414 = vand_s8(v1412, (int8x8_t)0xFF000000FFLL);
          v1405.i64[0] = v1414.u32[0];
          v1405.i64[1] = v1414.u32[1];
          uint64x2_t v1415 = v1405;
          v1412.i32[0] = v1401.u8[0];
          v1412.i32[1] = v1401.u8[1];
          int8x8_t v1416 = vand_s8(v1412, (int8x8_t)0xFF000000FFLL);
          v1405.i64[0] = v1416.u32[0];
          v1405.i64[1] = v1416.u32[1];
          float64x2_t v1417 = vcvtq_f64_u64(v1405);
          v1418.i32[0] = v1401.u8[2];
          v1418.i32[1] = v1401.u8[3];
          int8x8_t v1419 = vand_s8(v1418, (int8x8_t)0xFF000000FFLL);
          v1420.i32[0] = v1401.u8[4];
          v1420.i32[1] = v1401.u8[5];
          int8x8_t v1421 = vand_s8(v1420, (int8x8_t)0xFF000000FFLL);
          v1405.i64[0] = v1421.u32[0];
          v1405.i64[1] = v1421.u32[1];
          float64x2_t v1422 = vcvtq_f64_u64(v1405);
          v1423.i32[0] = v1401.u8[6];
          v1423.i32[1] = v1401.u8[7];
          int8x8_t v1424 = vand_s8(v1423, (int8x8_t)0xFF000000FFLL);
          v1405.i64[0] = v1424.u32[0];
          v1405.i64[1] = v1424.u32[1];
          v1400[2] = v1422;
          v1400[3] = vcvtq_f64_u64(v1405);
          v1405.i64[0] = v1419.u32[0];
          v1405.i64[1] = v1419.u32[1];
          float64x2_t *v1400 = v1417;
          v1400[1] = vcvtq_f64_u64(v1405);
          v1400[6] = v1413;
          v1400[7] = vcvtq_f64_u64(v1415);
          v1400[4] = v1406;
          v1400[5] = v1410;
          v1400 += 8;
          v1398 -= 16;
        }
        while (v1398);
        if (v1311 == a7) {
          return result;
        }
        if ((a7 & 8) == 0)
        {
LABEL_1816:
          unint64_t v1442 = a7 - v1311;
          v1443 = &v14[v1311];
          v1444 = (double *)&v11[8 * v1311];
          do
          {
            unsigned int v1445 = *v1443++;
            *v1444++ = (double)v1445;
            --v1442;
          }
          while (v1442);
          return result;
        }
      }
      else
      {
        unint64_t v1311 = 0;
      }
      unint64_t v1425 = v1311;
      unint64_t v1311 = a7 & 0xFFFFFFFFFFFFFFF8;
      v1426 = (float64x2_t *)&v11[8 * v1425];
      v1427 = &v14[v1425];
      unint64_t v1428 = v1425 - (a7 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        uint64_t v1429 = *(void *)v1427;
        v1427 += 8;
        v1430.i32[0] = v1429;
        v1430.i32[1] = BYTE1(v1429);
        int8x8_t v1431 = vand_s8(v1430, (int8x8_t)0xFF000000FFLL);
        v1432.i64[0] = v1431.u32[0];
        v1432.i64[1] = v1431.u32[1];
        v1433.i32[0] = BYTE2(v1429);
        v1433.i32[1] = BYTE3(v1429);
        float64x2_t v1434 = vcvtq_f64_u64(v1432);
        int8x8_t v1435 = vand_s8(v1433, (int8x8_t)0xFF000000FFLL);
        v1432.i64[0] = v1435.u32[0];
        v1432.i64[1] = v1435.u32[1];
        float64x2_t v1436 = vcvtq_f64_u64(v1432);
        v1437.i32[0] = BYTE4(v1429);
        v1437.i32[1] = BYTE5(v1429);
        int8x8_t v1438 = vand_s8(v1437, (int8x8_t)0xFF000000FFLL);
        v1432.i64[0] = v1438.u32[0];
        v1432.i64[1] = v1438.u32[1];
        v1439.i32[0] = BYTE6(v1429);
        float64x2_t v1440 = vcvtq_f64_u64(v1432);
        v1439.i32[1] = HIBYTE(v1429);
        int8x8_t v1441 = vand_s8(v1439, (int8x8_t)0xFF000000FFLL);
        v1432.i64[0] = v1441.u32[0];
        v1432.i64[1] = v1441.u32[1];
        v1426[2] = v1440;
        v1426[3] = vcvtq_f64_u64(v1432);
        float64x2_t *v1426 = v1434;
        v1426[1] = v1436;
        v1426 += 4;
        v1428 += 8;
      }
      while (v1428);
      if (v1311 == a7) {
        return result;
      }
      goto LABEL_1816;
    }
    goto LABEL_1751;
  }
  if (!v11) {
    return result;
  }
  if ((a7 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_1782;
  }
  if (a7)
  {
    unint64_t v1294 = 0;
    if (a7 < 4) {
      goto LABEL_1728;
    }
    if ((unint64_t)(v11 - v14) < 0x20) {
      goto LABEL_1728;
    }
    unint64_t v1294 = a7 & 0xFFFFFFFFFFFFFFFCLL;
    v1295 = (float64x2_t *)(v11 + 16);
    v1296 = (int64x2_t *)(v14 + 16);
    unint64_t v1297 = a7 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      float64x2_t v1298 = vcvtq_f64_s64(*v1296);
      v1295[-1] = vcvtq_f64_s64(v1296[-1]);
      float64x2_t *v1295 = v1298;
      v1295 += 2;
      v1296 += 2;
      v1297 -= 4;
    }
    while (v1297);
    if (v1294 != a7)
    {
LABEL_1728:
      unint64_t v1299 = a7 - v1294;
      uint64_t v1300 = 8 * v1294;
      v1301 = (uint64_t *)&v14[8 * v1294];
      v1302 = (double *)&v11[v1300];
      do
      {
        uint64_t v1303 = *v1301++;
        *v1302++ = (double)v1303;
        --v1299;
      }
      while (v1299);
    }
  }
  return result;
}

uint64_t sub_19E6BC300(uint64_t result, uint64_t a2, void *a3, uint64_t (*a4)(void))
{
  if (a3[1] >= a2) {
    uint64_t v4 = a2;
  }
  else {
    uint64_t v4 = a3[1];
  }
  if (v4 < 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (!result)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (*a3) {
    return a4();
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_19E6BC33C@<X0>(short float *a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v6 = sub_19EBF7348();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  BOOL v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  short float v10 = *a1;
  short float v14 = *a1;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 88))(v9, v6);
  if (result == *MEMORY[0x1E4FBBEA0])
  {
    *(short float *)&int v12 = roundl(v10);
    goto LABEL_15;
  }
  if (result == *MEMORY[0x1E4FBBE98])
  {
    *(short float *)&int v12 = rintl(v10);
    goto LABEL_15;
  }
  if (result == *MEMORY[0x1E4FBBEA8]) {
    goto LABEL_6;
  }
  if (result == *MEMORY[0x1E4FBBEB0]) {
    goto LABEL_8;
  }
  if (result == *MEMORY[0x1E4FBBE88])
  {
    *(short float *)&int v12 = truncl(v10);
  }
  else
  {
    if (result == *MEMORY[0x1E4FBBE90])
    {
      if ((LOWORD(v10) & 0x8000) == 0)
      {
LABEL_6:
        *(short float *)&int v12 = ceill(v10);
        goto LABEL_15;
      }
LABEL_8:
      *(short float *)&int v12 = floorl(v10);
      goto LABEL_15;
    }
    sub_19EBF7548();
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    *(short float *)&int v12 = v14;
  }
LABEL_15:
  if ((~v12 & 0x7C00) == 0)
  {
    __break(1u);
    goto LABEL_20;
  }
  if (*(short float *)&v12 <= COERCE_SHORT_FLOAT(-10232))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (*(short float *)&v12 < COERCE_SHORT_FLOAT(22528))
  {
    *a3 = (int)*(short float *)&v12;
    return result;
  }
LABEL_21:
  __break(1u);
  return result;
}

uint64_t sub_19E6BC558@<X0>(short float *a1@<X0>, uint64_t a2@<X1>, _WORD *a3@<X8>)
{
  uint64_t v6 = sub_19EBF7348();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  BOOL v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  short float v10 = *a1;
  short float v14 = *a1;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 88))(v9, v6);
  if (result == *MEMORY[0x1E4FBBEA0])
  {
    *(short float *)&int v12 = roundl(v10);
    goto LABEL_15;
  }
  if (result == *MEMORY[0x1E4FBBE98])
  {
    *(short float *)&int v12 = rintl(v10);
    goto LABEL_15;
  }
  if (result == *MEMORY[0x1E4FBBEA8]) {
    goto LABEL_6;
  }
  if (result == *MEMORY[0x1E4FBBEB0]) {
    goto LABEL_8;
  }
  if (result == *MEMORY[0x1E4FBBE88])
  {
    *(short float *)&int v12 = truncl(v10);
  }
  else
  {
    if (result == *MEMORY[0x1E4FBBE90])
    {
      if ((LOWORD(v10) & 0x8000) == 0)
      {
LABEL_6:
        *(short float *)&int v12 = ceill(v10);
        goto LABEL_15;
      }
LABEL_8:
      *(short float *)&int v12 = floorl(v10);
      goto LABEL_15;
    }
    sub_19EBF7548();
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    *(short float *)&int v12 = v14;
  }
LABEL_15:
  if ((~v12 & 0x7C00) == 0)
  {
    __break(1u);
    goto LABEL_20;
  }
  if (*(short float *)&v12 <= COERCE_SHORT_FLOAT(-2047))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (*(short float *)&v12 < COERCE_SHORT_FLOAT(30720))
  {
    *a3 = (int)*(short float *)&v12;
    return result;
  }
LABEL_21:
  __break(1u);
  return result;
}

uint64_t sub_19E6BC774@<X0>(short float *a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  uint64_t v6 = sub_19EBF7348();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  BOOL v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  short float v10 = *a1;
  short float v14 = *a1;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 88))(v9, v6);
  if (result == *MEMORY[0x1E4FBBEA0])
  {
    *(short float *)&int v12 = roundl(v10);
    goto LABEL_15;
  }
  if (result == *MEMORY[0x1E4FBBE98])
  {
    *(short float *)&int v12 = rintl(v10);
    goto LABEL_15;
  }
  if (result == *MEMORY[0x1E4FBBEA8]) {
    goto LABEL_6;
  }
  if (result == *MEMORY[0x1E4FBBEB0]) {
    goto LABEL_8;
  }
  if (result == *MEMORY[0x1E4FBBE88])
  {
    *(short float *)&int v12 = truncl(v10);
  }
  else
  {
    if (result == *MEMORY[0x1E4FBBE90])
    {
      if ((LOWORD(v10) & 0x8000) == 0)
      {
LABEL_6:
        *(short float *)&int v12 = ceill(v10);
        goto LABEL_15;
      }
LABEL_8:
      *(short float *)&int v12 = floorl(v10);
      goto LABEL_15;
    }
    sub_19EBF7548();
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    *(short float *)&int v12 = v14;
  }
LABEL_15:
  if ((~v12 & 0x7C00) != 0) {
    *a3 = (int)*(short float *)&v12;
  }
  else {
    __break(1u);
  }
  return result;
}

uint64_t sub_19E6BC968@<X0>(short float *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = sub_19EBF7348();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  BOOL v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  short float v10 = *a1;
  short float v14 = *a1;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 88))(v9, v6);
  if (result == *MEMORY[0x1E4FBBEA0])
  {
    *(short float *)&int v12 = roundl(v10);
    goto LABEL_15;
  }
  if (result == *MEMORY[0x1E4FBBE98])
  {
    *(short float *)&int v12 = rintl(v10);
    goto LABEL_15;
  }
  if (result == *MEMORY[0x1E4FBBEA8]) {
    goto LABEL_6;
  }
  if (result == *MEMORY[0x1E4FBBEB0]) {
    goto LABEL_8;
  }
  if (result == *MEMORY[0x1E4FBBE88])
  {
    *(short float *)&int v12 = truncl(v10);
  }
  else
  {
    if (result == *MEMORY[0x1E4FBBE90])
    {
      if ((LOWORD(v10) & 0x8000) == 0)
      {
LABEL_6:
        *(short float *)&int v12 = ceill(v10);
        goto LABEL_15;
      }
LABEL_8:
      *(short float *)&int v12 = floorl(v10);
      goto LABEL_15;
    }
    sub_19EBF7548();
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    *(short float *)&int v12 = v14;
  }
LABEL_15:
  if ((~v12 & 0x7C00) != 0) {
    *a3 = (uint64_t)*(short float *)&v12;
  }
  else {
    __break(1u);
  }
  return result;
}

uint64_t sub_19E6BCB5C@<X0>(short float *a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v6 = sub_19EBF7348();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  BOOL v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  short float v10 = *a1;
  short float v14 = *a1;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 88))(v9, v6);
  if (result == *MEMORY[0x1E4FBBEA0])
  {
    *(short float *)&int v12 = roundl(v10);
    goto LABEL_15;
  }
  if (result == *MEMORY[0x1E4FBBE98])
  {
    *(short float *)&int v12 = rintl(v10);
    goto LABEL_15;
  }
  if (result == *MEMORY[0x1E4FBBEA8]) {
    goto LABEL_6;
  }
  if (result == *MEMORY[0x1E4FBBEB0]) {
    goto LABEL_8;
  }
  if (result == *MEMORY[0x1E4FBBE88])
  {
    *(short float *)&int v12 = truncl(v10);
  }
  else
  {
    if (result == *MEMORY[0x1E4FBBE90])
    {
      if ((LOWORD(v10) & 0x8000) == 0)
      {
LABEL_6:
        *(short float *)&int v12 = ceill(v10);
        goto LABEL_15;
      }
LABEL_8:
      *(short float *)&int v12 = floorl(v10);
      goto LABEL_15;
    }
    sub_19EBF7548();
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    *(short float *)&int v12 = v14;
  }
LABEL_15:
  if ((~v12 & 0x7C00) == 0)
  {
    __break(1u);
    goto LABEL_20;
  }
  if (*(short float *)&v12 <= COERCE_SHORT_FLOAT(COERCE_UNSIGNED_INT(-1.0)))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (*(short float *)&v12 < COERCE_SHORT_FLOAT(23552))
  {
    *a3 = (int)*(short float *)&v12;
    return result;
  }
LABEL_21:
  __break(1u);
  return result;
}

uint64_t sub_19E6BCD74@<X0>(short float *a1@<X0>, uint64_t a2@<X1>, _WORD *a3@<X8>)
{
  uint64_t v6 = sub_19EBF7348();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  BOOL v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  short float v10 = *a1;
  short float v14 = *a1;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 88))(v9, v6);
  if (result == *MEMORY[0x1E4FBBEA0])
  {
    *(short float *)&int v12 = roundl(v10);
    goto LABEL_15;
  }
  if (result == *MEMORY[0x1E4FBBE98])
  {
    *(short float *)&int v12 = rintl(v10);
    goto LABEL_15;
  }
  if (result == *MEMORY[0x1E4FBBEA8]) {
    goto LABEL_6;
  }
  if (result == *MEMORY[0x1E4FBBEB0]) {
    goto LABEL_8;
  }
  if (result == *MEMORY[0x1E4FBBE88])
  {
    *(short float *)&int v12 = truncl(v10);
  }
  else
  {
    if (result == *MEMORY[0x1E4FBBE90])
    {
      if ((LOWORD(v10) & 0x8000) == 0)
      {
LABEL_6:
        *(short float *)&int v12 = ceill(v10);
        goto LABEL_15;
      }
LABEL_8:
      *(short float *)&int v12 = floorl(v10);
      goto LABEL_15;
    }
    sub_19EBF7548();
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    *(short float *)&int v12 = v14;
  }
LABEL_15:
  if ((~v12 & 0x7C00) != 0)
  {
    if (*(short float *)&v12 > COERCE_SHORT_FLOAT(COERCE_UNSIGNED_INT(-1.0)))
    {
      *a3 = (int)*(short float *)&v12;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_19E6BCF78@<X0>(short float *a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  uint64_t v6 = sub_19EBF7348();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  BOOL v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  short float v10 = *a1;
  short float v14 = *a1;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 88))(v9, v6);
  if (result == *MEMORY[0x1E4FBBEA0])
  {
    *(short float *)&int v12 = roundl(v10);
    goto LABEL_15;
  }
  if (result == *MEMORY[0x1E4FBBE98])
  {
    *(short float *)&int v12 = rintl(v10);
    goto LABEL_15;
  }
  if (result == *MEMORY[0x1E4FBBEA8]) {
    goto LABEL_6;
  }
  if (result == *MEMORY[0x1E4FBBEB0]) {
    goto LABEL_8;
  }
  if (result == *MEMORY[0x1E4FBBE88])
  {
    *(short float *)&int v12 = truncl(v10);
  }
  else
  {
    if (result == *MEMORY[0x1E4FBBE90])
    {
      if ((LOWORD(v10) & 0x8000) == 0)
      {
LABEL_6:
        *(short float *)&int v12 = ceill(v10);
        goto LABEL_15;
      }
LABEL_8:
      *(short float *)&int v12 = floorl(v10);
      goto LABEL_15;
    }
    sub_19EBF7548();
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    *(short float *)&int v12 = v14;
  }
LABEL_15:
  if ((~v12 & 0x7C00) != 0)
  {
    if (*(short float *)&v12 > COERCE_SHORT_FLOAT(COERCE_UNSIGNED_INT(-1.0)))
    {
      *a3 = *(short float *)&v12;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_19E6BD17C@<X0>(short float *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = sub_19EBF7348();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  BOOL v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  short float v10 = *a1;
  short float v14 = *a1;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 88))(v9, v6);
  if (result == *MEMORY[0x1E4FBBEA0])
  {
    *(short float *)&int v12 = roundl(v10);
    goto LABEL_15;
  }
  if (result == *MEMORY[0x1E4FBBE98])
  {
    *(short float *)&int v12 = rintl(v10);
    goto LABEL_15;
  }
  if (result == *MEMORY[0x1E4FBBEA8]) {
    goto LABEL_6;
  }
  if (result == *MEMORY[0x1E4FBBEB0]) {
    goto LABEL_8;
  }
  if (result == *MEMORY[0x1E4FBBE88])
  {
    *(short float *)&int v12 = truncl(v10);
  }
  else
  {
    if (result == *MEMORY[0x1E4FBBE90])
    {
      if ((LOWORD(v10) & 0x8000) == 0)
      {
LABEL_6:
        *(short float *)&int v12 = ceill(v10);
        goto LABEL_15;
      }
LABEL_8:
      *(short float *)&int v12 = floorl(v10);
      goto LABEL_15;
    }
    sub_19EBF7548();
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    *(short float *)&int v12 = v14;
  }
LABEL_15:
  if ((~v12 & 0x7C00) != 0)
  {
    if (*(short float *)&v12 > COERCE_SHORT_FLOAT(COERCE_UNSIGNED_INT(-1.0)))
    {
      *a3 = (unint64_t)*(short float *)&v12;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_19E6BD380@<X0>(float *a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v6 = sub_19EBF7348();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  BOOL v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  float v10 = *a1;
  float v15 = *a1;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 88))(v9, v6);
  if (result == *MEMORY[0x1E4FBBEA0])
  {
    float v12 = roundf(v10);
  }
  else if (result == *MEMORY[0x1E4FBBE98])
  {
    float v12 = rintf(v10);
  }
  else if (result == *MEMORY[0x1E4FBBEA8])
  {
    float v12 = ceilf(v10);
  }
  else if (result == *MEMORY[0x1E4FBBEB0])
  {
    float v12 = floorf(v10);
  }
  else if (result == *MEMORY[0x1E4FBBE88])
  {
    float v12 = truncf(v10);
  }
  else if (result == *MEMORY[0x1E4FBBE90])
  {
    float v12 = ceilf(v10);
    float v13 = floorf(v10);
    if (v10 < 0.0) {
      float v12 = v13;
    }
  }
  else
  {
    sub_19EBF6AF8();
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    float v12 = v15;
  }
  if ((~LODWORD(v12) & 0x7F800000) == 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  if (v12 <= -129.0)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (v12 < 128.0)
  {
    *a3 = (int)v12;
    return result;
  }
LABEL_22:
  __break(1u);
  return result;
}

uint64_t sub_19E6BD5A4@<X0>(float *a1@<X0>, uint64_t a2@<X1>, _WORD *a3@<X8>)
{
  uint64_t v6 = sub_19EBF7348();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  BOOL v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  float v10 = *a1;
  float v15 = *a1;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 88))(v9, v6);
  if (result == *MEMORY[0x1E4FBBEA0])
  {
    float v12 = roundf(v10);
  }
  else if (result == *MEMORY[0x1E4FBBE98])
  {
    float v12 = rintf(v10);
  }
  else if (result == *MEMORY[0x1E4FBBEA8])
  {
    float v12 = ceilf(v10);
  }
  else if (result == *MEMORY[0x1E4FBBEB0])
  {
    float v12 = floorf(v10);
  }
  else if (result == *MEMORY[0x1E4FBBE88])
  {
    float v12 = truncf(v10);
  }
  else if (result == *MEMORY[0x1E4FBBE90])
  {
    float v12 = ceilf(v10);
    float v13 = floorf(v10);
    if (v10 < 0.0) {
      float v12 = v13;
    }
  }
  else
  {
    sub_19EBF6AF8();
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    float v12 = v15;
  }
  if ((~LODWORD(v12) & 0x7F800000) == 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  if (v12 <= -32769.0)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (v12 < 32768.0)
  {
    *a3 = (int)v12;
    return result;
  }
LABEL_22:
  __break(1u);
  return result;
}

uint64_t sub_19E6BD7CC@<X0>(float *a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  uint64_t v6 = sub_19EBF7348();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  BOOL v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  float v10 = *a1;
  float v15 = *a1;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 88))(v9, v6);
  if (result == *MEMORY[0x1E4FBBEA0])
  {
    float v12 = roundf(v10);
  }
  else if (result == *MEMORY[0x1E4FBBE98])
  {
    float v12 = rintf(v10);
  }
  else if (result == *MEMORY[0x1E4FBBEA8])
  {
    float v12 = ceilf(v10);
  }
  else if (result == *MEMORY[0x1E4FBBEB0])
  {
    float v12 = floorf(v10);
  }
  else if (result == *MEMORY[0x1E4FBBE88])
  {
    float v12 = truncf(v10);
  }
  else if (result == *MEMORY[0x1E4FBBE90])
  {
    float v12 = ceilf(v10);
    float v13 = floorf(v10);
    if (v10 < 0.0) {
      float v12 = v13;
    }
  }
  else
  {
    sub_19EBF6AF8();
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    float v12 = v15;
  }
  if ((~LODWORD(v12) & 0x7F800000) == 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  if (v12 <= -2147500000.0)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (v12 < 2147500000.0)
  {
    *a3 = (int)v12;
    return result;
  }
LABEL_22:
  __break(1u);
  return result;
}

uint64_t sub_19E6BD9F4@<X0>(float *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = sub_19EBF7348();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  BOOL v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  float v10 = *a1;
  float v15 = *a1;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 88))(v9, v6);
  if (result == *MEMORY[0x1E4FBBEA0])
  {
    float v12 = roundf(v10);
  }
  else if (result == *MEMORY[0x1E4FBBE98])
  {
    float v12 = rintf(v10);
  }
  else if (result == *MEMORY[0x1E4FBBEA8])
  {
    float v12 = ceilf(v10);
  }
  else if (result == *MEMORY[0x1E4FBBEB0])
  {
    float v12 = floorf(v10);
  }
  else if (result == *MEMORY[0x1E4FBBE88])
  {
    float v12 = truncf(v10);
  }
  else if (result == *MEMORY[0x1E4FBBE90])
  {
    float v12 = ceilf(v10);
    float v13 = floorf(v10);
    if (v10 < 0.0) {
      float v12 = v13;
    }
  }
  else
  {
    sub_19EBF6AF8();
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    float v12 = v15;
  }
  if ((~LODWORD(v12) & 0x7F800000) == 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  if (v12 <= -9.2234e18)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (v12 < 9.2234e18)
  {
    *a3 = (uint64_t)v12;
    return result;
  }
LABEL_22:
  __break(1u);
  return result;
}

uint64_t sub_19E6BDC1C@<X0>(float *a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v6 = sub_19EBF7348();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  BOOL v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  float v10 = *a1;
  float v15 = *a1;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 88))(v9, v6);
  if (result == *MEMORY[0x1E4FBBEA0])
  {
    float v12 = roundf(v10);
  }
  else if (result == *MEMORY[0x1E4FBBE98])
  {
    float v12 = rintf(v10);
  }
  else if (result == *MEMORY[0x1E4FBBEA8])
  {
    float v12 = ceilf(v10);
  }
  else if (result == *MEMORY[0x1E4FBBEB0])
  {
    float v12 = floorf(v10);
  }
  else if (result == *MEMORY[0x1E4FBBE88])
  {
    float v12 = truncf(v10);
  }
  else if (result == *MEMORY[0x1E4FBBE90])
  {
    float v12 = ceilf(v10);
    float v13 = floorf(v10);
    if (v10 < 0.0) {
      float v12 = v13;
    }
  }
  else
  {
    sub_19EBF6AF8();
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    float v12 = v15;
  }
  if ((~LODWORD(v12) & 0x7F800000) == 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  if (v12 <= -1.0)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (v12 < 256.0)
  {
    *a3 = (int)v12;
    return result;
  }
LABEL_22:
  __break(1u);
  return result;
}

uint64_t sub_19E6BDE40@<X0>(float *a1@<X0>, uint64_t a2@<X1>, _WORD *a3@<X8>)
{
  uint64_t v6 = sub_19EBF7348();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  BOOL v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  float v10 = *a1;
  float v15 = *a1;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 88))(v9, v6);
  if (result == *MEMORY[0x1E4FBBEA0])
  {
    float v12 = roundf(v10);
  }
  else if (result == *MEMORY[0x1E4FBBE98])
  {
    float v12 = rintf(v10);
  }
  else if (result == *MEMORY[0x1E4FBBEA8])
  {
    float v12 = ceilf(v10);
  }
  else if (result == *MEMORY[0x1E4FBBEB0])
  {
    float v12 = floorf(v10);
  }
  else if (result == *MEMORY[0x1E4FBBE88])
  {
    float v12 = truncf(v10);
  }
  else if (result == *MEMORY[0x1E4FBBE90])
  {
    float v12 = ceilf(v10);
    float v13 = floorf(v10);
    if (v10 < 0.0) {
      float v12 = v13;
    }
  }
  else
  {
    sub_19EBF6AF8();
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    float v12 = v15;
  }
  if ((~LODWORD(v12) & 0x7F800000) == 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  if (v12 <= -1.0)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (v12 < 65536.0)
  {
    *a3 = (int)v12;
    return result;
  }
LABEL_22:
  __break(1u);
  return result;
}

uint64_t sub_19E6BE064@<X0>(float *a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  uint64_t v6 = sub_19EBF7348();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  BOOL v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  float v10 = *a1;
  float v15 = *a1;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 88))(v9, v6);
  if (result == *MEMORY[0x1E4FBBEA0])
  {
    float v12 = roundf(v10);
  }
  else if (result == *MEMORY[0x1E4FBBE98])
  {
    float v12 = rintf(v10);
  }
  else if (result == *MEMORY[0x1E4FBBEA8])
  {
    float v12 = ceilf(v10);
  }
  else if (result == *MEMORY[0x1E4FBBEB0])
  {
    float v12 = floorf(v10);
  }
  else if (result == *MEMORY[0x1E4FBBE88])
  {
    float v12 = truncf(v10);
  }
  else if (result == *MEMORY[0x1E4FBBE90])
  {
    float v12 = ceilf(v10);
    float v13 = floorf(v10);
    if (v10 < 0.0) {
      float v12 = v13;
    }
  }
  else
  {
    sub_19EBF6AF8();
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    float v12 = v15;
  }
  if ((~LODWORD(v12) & 0x7F800000) == 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  if (v12 <= -1.0)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (v12 < 4295000000.0)
  {
    *a3 = v12;
    return result;
  }
LABEL_22:
  __break(1u);
  return result;
}

uint64_t sub_19E6BE288@<X0>(float *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = sub_19EBF7348();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  BOOL v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  float v10 = *a1;
  float v15 = *a1;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 88))(v9, v6);
  if (result == *MEMORY[0x1E4FBBEA0])
  {
    float v12 = roundf(v10);
  }
  else if (result == *MEMORY[0x1E4FBBE98])
  {
    float v12 = rintf(v10);
  }
  else if (result == *MEMORY[0x1E4FBBEA8])
  {
    float v12 = ceilf(v10);
  }
  else if (result == *MEMORY[0x1E4FBBEB0])
  {
    float v12 = floorf(v10);
  }
  else if (result == *MEMORY[0x1E4FBBE88])
  {
    float v12 = truncf(v10);
  }
  else if (result == *MEMORY[0x1E4FBBE90])
  {
    float v12 = ceilf(v10);
    float v13 = floorf(v10);
    if (v10 < 0.0) {
      float v12 = v13;
    }
  }
  else
  {
    sub_19EBF6AF8();
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    float v12 = v15;
  }
  if ((~LODWORD(v12) & 0x7F800000) == 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  if (v12 <= -1.0)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (v12 < 1.8447e19)
  {
    *a3 = (unint64_t)v12;
    return result;
  }
LABEL_22:
  __break(1u);
  return result;
}

uint64_t sub_19E6BE4AC@<X0>(double *a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v6 = sub_19EBF7348();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  BOOL v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v10 = *a1;
  double v15 = *a1;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 88))(v9, v6);
  if (result == *MEMORY[0x1E4FBBEA0])
  {
    double v12 = round(v10);
  }
  else if (result == *MEMORY[0x1E4FBBE98])
  {
    double v12 = rint(v10);
  }
  else if (result == *MEMORY[0x1E4FBBEA8])
  {
    double v12 = ceil(v10);
  }
  else if (result == *MEMORY[0x1E4FBBEB0])
  {
    double v12 = floor(v10);
  }
  else if (result == *MEMORY[0x1E4FBBE88])
  {
    double v12 = trunc(v10);
  }
  else if (result == *MEMORY[0x1E4FBBE90])
  {
    double v12 = ceil(v10);
    double v13 = floor(v10);
    if (v10 < 0.0) {
      double v12 = v13;
    }
  }
  else
  {
    sub_19EBF6AD8();
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    double v12 = v15;
  }
  if ((~*(void *)&v12 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  if (v12 <= -129.0)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (v12 < 128.0)
  {
    *a3 = (int)v12;
    return result;
  }
LABEL_22:
  __break(1u);
  return result;
}

uint64_t sub_19E6BE6D8@<X0>(double *a1@<X0>, uint64_t a2@<X1>, _WORD *a3@<X8>)
{
  uint64_t v6 = sub_19EBF7348();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  BOOL v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v10 = *a1;
  double v15 = *a1;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 88))(v9, v6);
  if (result == *MEMORY[0x1E4FBBEA0])
  {
    double v12 = round(v10);
  }
  else if (result == *MEMORY[0x1E4FBBE98])
  {
    double v12 = rint(v10);
  }
  else if (result == *MEMORY[0x1E4FBBEA8])
  {
    double v12 = ceil(v10);
  }
  else if (result == *MEMORY[0x1E4FBBEB0])
  {
    double v12 = floor(v10);
  }
  else if (result == *MEMORY[0x1E4FBBE88])
  {
    double v12 = trunc(v10);
  }
  else if (result == *MEMORY[0x1E4FBBE90])
  {
    double v12 = ceil(v10);
    double v13 = floor(v10);
    if (v10 < 0.0) {
      double v12 = v13;
    }
  }
  else
  {
    sub_19EBF6AD8();
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    double v12 = v15;
  }
  if ((~*(void *)&v12 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  if (v12 <= -32769.0)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (v12 < 32768.0)
  {
    *a3 = (int)v12;
    return result;
  }
LABEL_22:
  __break(1u);
  return result;
}

uint64_t sub_19E6BE904@<X0>(double *a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  uint64_t v6 = sub_19EBF7348();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  BOOL v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v10 = *a1;
  double v15 = *a1;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 88))(v9, v6);
  if (result == *MEMORY[0x1E4FBBEA0])
  {
    double v12 = round(v10);
  }
  else if (result == *MEMORY[0x1E4FBBE98])
  {
    double v12 = rint(v10);
  }
  else if (result == *MEMORY[0x1E4FBBEA8])
  {
    double v12 = ceil(v10);
  }
  else if (result == *MEMORY[0x1E4FBBEB0])
  {
    double v12 = floor(v10);
  }
  else if (result == *MEMORY[0x1E4FBBE88])
  {
    double v12 = trunc(v10);
  }
  else if (result == *MEMORY[0x1E4FBBE90])
  {
    double v12 = ceil(v10);
    double v13 = floor(v10);
    if (v10 < 0.0) {
      double v12 = v13;
    }
  }
  else
  {
    sub_19EBF6AD8();
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    double v12 = v15;
  }
  if ((~*(void *)&v12 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  if (v12 <= -2147483650.0)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (v12 < 2147483650.0)
  {
    *a3 = (int)v12;
    return result;
  }
LABEL_22:
  __break(1u);
  return result;
}

uint64_t sub_19E6BEB30@<X0>(double *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = sub_19EBF7348();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  BOOL v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v10 = *a1;
  double v15 = *a1;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 88))(v9, v6);
  if (result == *MEMORY[0x1E4FBBEA0])
  {
    double v12 = round(v10);
  }
  else if (result == *MEMORY[0x1E4FBBE98])
  {
    double v12 = rint(v10);
  }
  else if (result == *MEMORY[0x1E4FBBEA8])
  {
    double v12 = ceil(v10);
  }
  else if (result == *MEMORY[0x1E4FBBEB0])
  {
    double v12 = floor(v10);
  }
  else if (result == *MEMORY[0x1E4FBBE88])
  {
    double v12 = trunc(v10);
  }
  else if (result == *MEMORY[0x1E4FBBE90])
  {
    double v12 = ceil(v10);
    double v13 = floor(v10);
    if (v10 < 0.0) {
      double v12 = v13;
    }
  }
  else
  {
    sub_19EBF6AD8();
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    double v12 = v15;
  }
  if ((~*(void *)&v12 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  if (v12 <= -9.22337204e18)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (v12 < 9.22337204e18)
  {
    *a3 = (uint64_t)v12;
    return result;
  }
LABEL_22:
  __break(1u);
  return result;
}

uint64_t sub_19E6BED5C@<X0>(double *a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v6 = sub_19EBF7348();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  BOOL v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v10 = *a1;
  double v15 = *a1;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 88))(v9, v6);
  if (result == *MEMORY[0x1E4FBBEA0])
  {
    double v12 = round(v10);
  }
  else if (result == *MEMORY[0x1E4FBBE98])
  {
    double v12 = rint(v10);
  }
  else if (result == *MEMORY[0x1E4FBBEA8])
  {
    double v12 = ceil(v10);
  }
  else if (result == *MEMORY[0x1E4FBBEB0])
  {
    double v12 = floor(v10);
  }
  else if (result == *MEMORY[0x1E4FBBE88])
  {
    double v12 = trunc(v10);
  }
  else if (result == *MEMORY[0x1E4FBBE90])
  {
    double v12 = ceil(v10);
    double v13 = floor(v10);
    if (v10 < 0.0) {
      double v12 = v13;
    }
  }
  else
  {
    sub_19EBF6AD8();
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    double v12 = v15;
  }
  if ((~*(void *)&v12 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  if (v12 <= -1.0)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (v12 < 256.0)
  {
    *a3 = (int)v12;
    return result;
  }
LABEL_22:
  __break(1u);
  return result;
}

uint64_t sub_19E6BEF80@<X0>(double *a1@<X0>, uint64_t a2@<X1>, _WORD *a3@<X8>)
{
  uint64_t v6 = sub_19EBF7348();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  BOOL v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v10 = *a1;
  double v15 = *a1;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 88))(v9, v6);
  if (result == *MEMORY[0x1E4FBBEA0])
  {
    double v12 = round(v10);
  }
  else if (result == *MEMORY[0x1E4FBBE98])
  {
    double v12 = rint(v10);
  }
  else if (result == *MEMORY[0x1E4FBBEA8])
  {
    double v12 = ceil(v10);
  }
  else if (result == *MEMORY[0x1E4FBBEB0])
  {
    double v12 = floor(v10);
  }
  else if (result == *MEMORY[0x1E4FBBE88])
  {
    double v12 = trunc(v10);
  }
  else if (result == *MEMORY[0x1E4FBBE90])
  {
    double v12 = ceil(v10);
    double v13 = floor(v10);
    if (v10 < 0.0) {
      double v12 = v13;
    }
  }
  else
  {
    sub_19EBF6AD8();
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    double v12 = v15;
  }
  if ((~*(void *)&v12 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  if (v12 <= -1.0)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (v12 < 65536.0)
  {
    *a3 = (int)v12;
    return result;
  }
LABEL_22:
  __break(1u);
  return result;
}

uint64_t sub_19E6BF1A4@<X0>(double *a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  uint64_t v6 = sub_19EBF7348();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  BOOL v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v10 = *a1;
  double v15 = *a1;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 88))(v9, v6);
  if (result == *MEMORY[0x1E4FBBEA0])
  {
    double v12 = round(v10);
  }
  else if (result == *MEMORY[0x1E4FBBE98])
  {
    double v12 = rint(v10);
  }
  else if (result == *MEMORY[0x1E4FBBEA8])
  {
    double v12 = ceil(v10);
  }
  else if (result == *MEMORY[0x1E4FBBEB0])
  {
    double v12 = floor(v10);
  }
  else if (result == *MEMORY[0x1E4FBBE88])
  {
    double v12 = trunc(v10);
  }
  else if (result == *MEMORY[0x1E4FBBE90])
  {
    double v12 = ceil(v10);
    double v13 = floor(v10);
    if (v10 < 0.0) {
      double v12 = v13;
    }
  }
  else
  {
    sub_19EBF6AD8();
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    double v12 = v15;
  }
  if ((~*(void *)&v12 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  if (v12 <= -1.0)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (v12 < 4294967300.0)
  {
    *a3 = v12;
    return result;
  }
LABEL_22:
  __break(1u);
  return result;
}

uint64_t sub_19E6BF3C8@<X0>(double *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = sub_19EBF7348();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  BOOL v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v10 = *a1;
  double v15 = *a1;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 88))(v9, v6);
  if (result == *MEMORY[0x1E4FBBEA0])
  {
    double v12 = round(v10);
  }
  else if (result == *MEMORY[0x1E4FBBE98])
  {
    double v12 = rint(v10);
  }
  else if (result == *MEMORY[0x1E4FBBEA8])
  {
    double v12 = ceil(v10);
  }
  else if (result == *MEMORY[0x1E4FBBEB0])
  {
    double v12 = floor(v10);
  }
  else if (result == *MEMORY[0x1E4FBBE88])
  {
    double v12 = trunc(v10);
  }
  else if (result == *MEMORY[0x1E4FBBE90])
  {
    double v12 = ceil(v10);
    double v13 = floor(v10);
    if (v10 < 0.0) {
      double v12 = v13;
    }
  }
  else
  {
    sub_19EBF6AD8();
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    double v12 = v15;
  }
  if ((~*(void *)&v12 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  if (v12 <= -1.0)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (v12 < 1.84467441e19)
  {
    *a3 = (unint64_t)v12;
    return result;
  }
LABEL_22:
  __break(1u);
  return result;
}

uint64_t sub_19E6BF5EC(uint64_t result, uint64_t a2, void *a3, uint64_t (*a4)(void))
{
  if (a3[1] != a2)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (a2 < 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (!result)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (*a3) {
    return a4();
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_19E6BF630(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7)
{
  uint64_t v128 = a7;
  int v126 = a3;
  int v127 = a6;
  uint64_t v11 = sub_19EBF61E8();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v129 = v11;
  uint64_t v130 = v12;
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  v122 = (char *)&v109 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  v121 = (char *)&v109 - v16;
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  unsigned int v120 = (char *)&v109 - v18;
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  unsigned int v119 = (char *)&v109 - v20;
  uint64_t v21 = MEMORY[0x1F4188790](v19);
  int8x8_t v118 = (char *)&v109 - v22;
  uint64_t v23 = MEMORY[0x1F4188790](v21);
  unint64_t v116 = (char *)&v109 - v24;
  uint64_t v25 = MEMORY[0x1F4188790](v23);
  unint64_t v117 = (char *)&v109 - v26;
  uint64_t v27 = MEMORY[0x1F4188790](v25);
  v115 = (char *)&v109 - v28;
  uint64_t v29 = MEMORY[0x1F4188790](v27);
  int32x4_t v114 = (char *)&v109 - v30;
  uint64_t v31 = MEMORY[0x1F4188790](v29);
  int32x4_t v113 = (char *)&v109 - v32;
  uint64_t v33 = MEMORY[0x1F4188790](v31);
  unint64_t v112 = (char *)&v109 - v34;
  MEMORY[0x1F4188790](v33);
  v111 = (char *)&v109 - v35;
  uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E945D450);
  MEMORY[0x1F4188790](v36);
  unint64_t v38 = (char *)&v109 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = sub_19EBF7348();
  uint64_t v40 = *(void *)(v39 - 8);
  MEMORY[0x1F4188790](v39);
  int v42 = (char *)&v109 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E945D458);
  uint64_t v44 = MEMORY[0x1F4188790](v43 - 8);
  MEMORY[0x1F4188790](v44);
  int v47 = (char *)&v109 - v46;
  uint64_t v48 = a5 - a4;
  uint64_t v125 = a4;
  if (a4) {
    uint64_t v49 = v48;
  }
  else {
    uint64_t v49 = 0;
  }
  if (a1)
  {
    if (v49 < a2 - a1) {
      return 0;
    }
  }
  else if (v49 < 0)
  {
    return 0;
  }
  uint64_t v109 = v49;
  uint64_t v110 = v45;
  uint64_t v123 = a2;
  uint64_t v124 = a1;
  __int16 v50 = v127;
  __int16 v51 = v126;
  int v126 = v126;
  int v52 = v127;
  (*(void (**)(char *, uint64_t, uint64_t))(v40 + 16))(v42, v128, v39);
  int v53 = (*(uint64_t (**)(char *, uint64_t))(v40 + 88))(v42, v39);
  if (v53 == *MEMORY[0x1E4FBBE98])
  {
    unint64_t v54 = (unsigned int *)MEMORY[0x1E4FBAB68];
  }
  else
  {
    if (v53 != *MEMORY[0x1E4FBBE88])
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v130 + 56))(v47, 1, 1, v129);
      (*(void (**)(char *, uint64_t))(v40 + 8))(v42, v39);
      goto LABEL_14;
    }
    unint64_t v54 = (unsigned int *)MEMORY[0x1E4FBAB60];
  }
  uint64_t v56 = v129;
  uint64_t v55 = v130;
  (*(void (**)(char *, void, uint64_t))(v130 + 104))(v47, *v54, v129);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v55 + 56))(v47, 0, 1, v56);
LABEL_14:
  uint64_t v57 = (uint64_t)&v38[*(int *)(v36 + 64)];
  *unint64_t v38 = v126;
  v38[1] = HIBYTE(v51) & 1;
  v38[2] = v52;
  v38[3] = HIBYTE(v50) & 1;
  sub_19E6C0EBC((uint64_t)v47, v57);
  if (v51 == 5 && v50 == 10 || !(_BYTE)v51 && v50 == 10)
  {
    sub_19E68D51C(v57, &qword_1E945D458);
    uint64_t v58 = v48 / 4;
    uint64_t v59 = v124;
    if (!v125) {
      uint64_t v58 = 0;
    }
    uint64_t v133 = v125;
    uint64_t v134 = v58;
    if (v124) {
      uint64_t v60 = v123 - v124;
    }
    else {
      uint64_t v60 = 0;
    }
    unint64_t v61 = (uint64_t (*)(void))MEMORY[0x1E4F16C38];
LABEL_24:
    sub_19E6BF5EC(v59, v60, &v133, v61);
    return 1;
  }
  uint64_t v63 = v123;
  if (v51 == 6 && v50 == 10)
  {
    uint64_t v64 = v48 / 4;
    uint64_t v65 = v124;
    if (!v125) {
      uint64_t v64 = 0;
    }
    uint64_t v133 = v125;
    uint64_t v134 = v64;
    if (v124) {
      uint64_t v66 = (v123 - v124) / 2;
    }
    else {
      uint64_t v66 = 0;
    }
    unint64_t v68 = (uint64_t (*)(void))MEMORY[0x1E4F16C18];
LABEL_48:
    unint64_t v70 = v68;
LABEL_49:
    sub_19E6BF5EC(v65, v66, &v133, v70);
LABEL_50:
    sub_19E68D51C(v57, &qword_1E945D458);
    return 1;
  }
  if (v51 == 7 && v50 == 10)
  {
    uint64_t v67 = v48 / 4;
    uint64_t v65 = v124;
    if (!v125) {
      uint64_t v67 = 0;
    }
    uint64_t v133 = v125;
    uint64_t v134 = v67;
    if (v124) {
      uint64_t v66 = (v123 - v124) / 4;
    }
    else {
      uint64_t v66 = 0;
    }
    unint64_t v68 = (uint64_t (*)(void))MEMORY[0x1E4F16C28];
    goto LABEL_48;
  }
  if (v51 == 1 && v50 == 10)
  {
    sub_19E68D51C(v57, &qword_1E945D458);
    uint64_t v69 = v48 / 4;
    uint64_t v59 = v124;
    if (!v125) {
      uint64_t v69 = 0;
    }
    uint64_t v133 = v125;
    uint64_t v134 = v69;
    if (v124) {
      uint64_t v60 = v63 - v124;
    }
    else {
      uint64_t v60 = 0;
    }
    unint64_t v61 = (uint64_t (*)(void))MEMORY[0x1E4F16C68];
    goto LABEL_24;
  }
  if (v51 == 2 && v50 == 10)
  {
    uint64_t v71 = v48 / 4;
    uint64_t v65 = v124;
    if (!v125) {
      uint64_t v71 = 0;
    }
    uint64_t v133 = v125;
    uint64_t v134 = v71;
    if (v124) {
      uint64_t v66 = (v123 - v124) / 2;
    }
    else {
      uint64_t v66 = 0;
    }
    unint64_t v68 = (uint64_t (*)(void))MEMORY[0x1E4F16C48];
    goto LABEL_48;
  }
  if (v51 == 3 && v50 == 10)
  {
    uint64_t v72 = v48 / 4;
    uint64_t v65 = v124;
    if (!v125) {
      uint64_t v72 = 0;
    }
    uint64_t v133 = v125;
    uint64_t v134 = v72;
    if (v124) {
      uint64_t v66 = (v123 - v124) / 4;
    }
    else {
      uint64_t v66 = 0;
    }
    unint64_t v68 = (uint64_t (*)(void))MEMORY[0x1E4F16C58];
    goto LABEL_48;
  }
  if ((_BYTE)v51) {
    BOOL v73 = v51 == 5;
  }
  else {
    BOOL v73 = 1;
  }
  if (v73 && v50 == 11)
  {
    sub_19E68D51C(v57, &qword_1E945D458);
    uint64_t v74 = v48 / 8;
    uint64_t v59 = v124;
    if (!v125) {
      uint64_t v74 = 0;
    }
    uint64_t v133 = v125;
    uint64_t v134 = v74;
    if (v124) {
      uint64_t v60 = v63 - v124;
    }
    else {
      uint64_t v60 = 0;
    }
    unint64_t v61 = (uint64_t (*)(void))MEMORY[0x1E4F16C40];
    goto LABEL_24;
  }
  if (v51 == 6 && v50 == 11)
  {
    uint64_t v75 = v48 / 8;
    uint64_t v65 = v124;
    if (!v125) {
      uint64_t v75 = 0;
    }
    uint64_t v133 = v125;
    uint64_t v134 = v75;
    if (v124) {
      uint64_t v66 = (v123 - v124) / 2;
    }
    else {
      uint64_t v66 = 0;
    }
    unint64_t v68 = (uint64_t (*)(void))MEMORY[0x1E4F16C20];
    goto LABEL_48;
  }
  if (v51 == 7 && v50 == 11)
  {
    uint64_t v76 = v48 / 8;
    uint64_t v65 = v124;
    if (!v125) {
      uint64_t v76 = 0;
    }
    uint64_t v133 = v125;
    uint64_t v134 = v76;
    if (v124) {
      uint64_t v66 = (v123 - v124) / 4;
    }
    else {
      uint64_t v66 = 0;
    }
    unint64_t v68 = (uint64_t (*)(void))MEMORY[0x1E4F16C30];
    goto LABEL_48;
  }
  if (v51 == 1 && v50 == 11)
  {
    sub_19E68D51C(v57, &qword_1E945D458);
    uint64_t v77 = v48 / 8;
    uint64_t v59 = v124;
    if (!v125) {
      uint64_t v77 = 0;
    }
    uint64_t v133 = v125;
    uint64_t v134 = v77;
    if (v124) {
      uint64_t v60 = v63 - v124;
    }
    else {
      uint64_t v60 = 0;
    }
    unint64_t v61 = (uint64_t (*)(void))MEMORY[0x1E4F16C70];
    goto LABEL_24;
  }
  if (v51 == 2 && v50 == 11)
  {
    uint64_t v78 = v48 / 8;
    uint64_t v65 = v124;
    if (!v125) {
      uint64_t v78 = 0;
    }
    uint64_t v133 = v125;
    uint64_t v134 = v78;
    if (v124) {
      uint64_t v66 = (v123 - v124) / 2;
    }
    else {
      uint64_t v66 = 0;
    }
    unint64_t v68 = (uint64_t (*)(void))MEMORY[0x1E4F16C50];
    goto LABEL_48;
  }
  if (v51 == 3 && v50 == 11)
  {
    uint64_t v79 = v48 / 8;
    if (!v125) {
      uint64_t v79 = 0;
    }
    uint64_t v133 = v125;
    uint64_t v134 = v79;
    if (v124) {
      uint64_t v66 = (v123 - v124) / 4;
    }
    else {
      uint64_t v66 = 0;
    }
    unint64_t v70 = (uint64_t (*)(void))MEMORY[0x1E4F16C60];
    uint64_t v65 = v124;
    goto LABEL_49;
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v130 + 48))(v57, 1, v129) != 1)
  {
    sub_19E6C0F24(v57, v110);
    if (v126 == 11)
    {
      switch(v52)
      {
        case 1:
          (*(void (**)(char *, uint64_t, uint64_t))(v130 + 32))(v120, v110, v129);
          uint64_t v133 = v125;
          uint64_t v134 = v109;
          uint64_t v84 = v124;
          if (v124) {
            uint64_t v84 = (v123 - v124) / 8;
          }
          uint64_t v131 = v124;
          uint64_t v132 = v84;
          __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C188);
          __swift_instantiateConcreteTypeFromMangledName(&qword_1E945D480);
          sub_19E5DFDB8(qword_1E945D3C8, &qword_1E945C188);
          sub_19E5DFDB8(&qword_1E945D488, &qword_1E945D480);
          int v81 = v120;
          sub_19EBF6228();
          break;
        case 2:
          (*(void (**)(char *, uint64_t, uint64_t))(v130 + 32))(v121, v110, v129);
          if (v48 >= 0) {
            uint64_t v97 = v48;
          }
          else {
            uint64_t v97 = v48 + 1;
          }
          uint64_t v98 = v97 >> 1;
          if (!v125) {
            uint64_t v98 = 0;
          }
          uint64_t v133 = v125;
          uint64_t v134 = v98;
          uint64_t v99 = v124;
          if (v124) {
            uint64_t v99 = (v123 - v124) / 8;
          }
          uint64_t v131 = v124;
          uint64_t v132 = v99;
          __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C188);
          __swift_instantiateConcreteTypeFromMangledName(&qword_1E945D470);
          sub_19E5DFDB8(qword_1E945D3C8, &qword_1E945C188);
          sub_19E5DFDB8(&qword_1E945D478, &qword_1E945D470);
          int v81 = v121;
          sub_19EBF6238();
          break;
        case 3:
          (*(void (**)(char *, uint64_t, uint64_t))(v130 + 32))(v122, v110, v129);
          uint64_t v100 = v48 / 4;
          if (!v125) {
            uint64_t v100 = 0;
          }
          uint64_t v133 = v125;
          uint64_t v134 = v100;
          uint64_t v101 = v124;
          if (v124) {
            uint64_t v101 = (v123 - v124) / 8;
          }
          uint64_t v131 = v124;
          uint64_t v132 = v101;
          __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C188);
          __swift_instantiateConcreteTypeFromMangledName(&qword_1E945D460);
          sub_19E5DFDB8(qword_1E945D3C8, &qword_1E945C188);
          sub_19E5DFDB8(&qword_1E945D468, &qword_1E945D460);
          int v81 = v122;
          sub_19EBF6248();
          break;
        case 5:
          (*(void (**)(char *, uint64_t, uint64_t))(v130 + 32))(v116, v110, v129);
          uint64_t v133 = v125;
          uint64_t v134 = v109;
          uint64_t v103 = v124;
          if (v124) {
            uint64_t v103 = (v123 - v124) / 8;
          }
          uint64_t v131 = v124;
          uint64_t v132 = v103;
          __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C188);
          __swift_instantiateConcreteTypeFromMangledName(&qword_1E945D4A0);
          sub_19E5DFDB8(qword_1E945D3C8, &qword_1E945C188);
          sub_19E5DFDB8(&qword_1E945D4A8, &qword_1E945D4A0);
          int v81 = v116;
          sub_19EBF61F8();
          break;
        case 6:
          (*(void (**)(char *, uint64_t, uint64_t))(v130 + 32))(v118, v110, v129);
          if (v48 >= 0) {
            uint64_t v104 = v48;
          }
          else {
            uint64_t v104 = v48 + 1;
          }
          uint64_t v105 = v104 >> 1;
          if (!v125) {
            uint64_t v105 = 0;
          }
          uint64_t v133 = v125;
          uint64_t v134 = v105;
          uint64_t v106 = v124;
          if (v124) {
            uint64_t v106 = (v123 - v124) / 8;
          }
          uint64_t v131 = v124;
          uint64_t v132 = v106;
          __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C188);
          __swift_instantiateConcreteTypeFromMangledName(&qword_1E945D490);
          sub_19E5DFDB8(qword_1E945D3C8, &qword_1E945C188);
          sub_19E5DFDB8(&qword_1E945D498, &qword_1E945D490);
          int v81 = v118;
          sub_19EBF6208();
          break;
        case 7:
          (*(void (**)(char *, uint64_t, uint64_t))(v130 + 32))(v119, v110, v129);
          uint64_t v107 = v48 / 4;
          if (!v125) {
            uint64_t v107 = 0;
          }
          uint64_t v133 = v125;
          uint64_t v134 = v107;
          uint64_t v108 = v124;
          if (v124) {
            uint64_t v108 = (v123 - v124) / 8;
          }
          uint64_t v131 = v124;
          uint64_t v132 = v108;
          __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C188);
          __swift_instantiateConcreteTypeFromMangledName(&qword_1E945D3B0);
          sub_19E5DFDB8(qword_1E945D3C8, &qword_1E945C188);
          sub_19E5DFDB8(&qword_1E945D3C0, &qword_1E945D3B0);
          int v81 = v119;
          sub_19EBF6218();
          break;
        default:
          (*(void (**)(uint64_t, uint64_t))(v130 + 8))(v110, v129);
          goto LABEL_184;
      }
LABEL_210:
      (*(void (**)(char *, uint64_t))(v130 + 8))(v81, v129);
      goto LABEL_50;
    }
    if (v126 == 10)
    {
      switch(v52)
      {
        case 1:
          (*(void (**)(char *, uint64_t, uint64_t))(v130 + 32))(v114, v110, v129);
          uint64_t v133 = v125;
          uint64_t v134 = v109;
          uint64_t v80 = v124;
          if (v124) {
            uint64_t v80 = (v123 - v124) / 4;
          }
          uint64_t v131 = v124;
          uint64_t v132 = v80;
          __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C170);
          __swift_instantiateConcreteTypeFromMangledName(&qword_1E945D480);
          sub_19E5DFDB8(&qword_1E945D3B8, &qword_1E945C170);
          sub_19E5DFDB8(&qword_1E945D488, &qword_1E945D480);
          int v81 = v114;
          sub_19EBF6288();
          goto LABEL_210;
        case 2:
          (*(void (**)(char *, uint64_t, uint64_t))(v130 + 32))(v115, v110, v129);
          if (v48 >= 0) {
            uint64_t v86 = v48;
          }
          else {
            uint64_t v86 = v48 + 1;
          }
          uint64_t v87 = v86 >> 1;
          if (!v125) {
            uint64_t v87 = 0;
          }
          uint64_t v133 = v125;
          uint64_t v134 = v87;
          uint64_t v88 = v124;
          if (v124) {
            uint64_t v88 = (v123 - v124) / 4;
          }
          uint64_t v131 = v124;
          uint64_t v132 = v88;
          __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C170);
          __swift_instantiateConcreteTypeFromMangledName(&qword_1E945D470);
          sub_19E5DFDB8(&qword_1E945D3B8, &qword_1E945C170);
          sub_19E5DFDB8(&qword_1E945D478, &qword_1E945D470);
          int v81 = v115;
          sub_19EBF6298();
          goto LABEL_210;
        case 3:
          (*(void (**)(char *, uint64_t, uint64_t))(v130 + 32))(v117, v110, v129);
          uint64_t v89 = v48 / 4;
          if (!v125) {
            uint64_t v89 = 0;
          }
          uint64_t v133 = v125;
          uint64_t v134 = v89;
          uint64_t v90 = v124;
          if (v124) {
            uint64_t v90 = (v123 - v124) / 4;
          }
          uint64_t v131 = v124;
          uint64_t v132 = v90;
          __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C170);
          __swift_instantiateConcreteTypeFromMangledName(&qword_1E945D460);
          sub_19E5DFDB8(&qword_1E945D3B8, &qword_1E945C170);
          sub_19E5DFDB8(&qword_1E945D468, &qword_1E945D460);
          int v81 = v117;
          sub_19EBF62A8();
          goto LABEL_210;
        case 5:
          (*(void (**)(char *, uint64_t, uint64_t))(v130 + 32))(v111, v110, v129);
          uint64_t v133 = v125;
          uint64_t v134 = v109;
          uint64_t v91 = v124;
          if (v124) {
            uint64_t v91 = (v123 - v124) / 4;
          }
          uint64_t v131 = v124;
          uint64_t v132 = v91;
          __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C170);
          __swift_instantiateConcreteTypeFromMangledName(&qword_1E945D4A0);
          sub_19E5DFDB8(&qword_1E945D3B8, &qword_1E945C170);
          sub_19E5DFDB8(&qword_1E945D4A8, &qword_1E945D4A0);
          int v81 = v111;
          sub_19EBF6258();
          goto LABEL_210;
        case 6:
          (*(void (**)(char *, uint64_t, uint64_t))(v130 + 32))(v112, v110, v129);
          if (v48 >= 0) {
            uint64_t v92 = v48;
          }
          else {
            uint64_t v92 = v48 + 1;
          }
          uint64_t v93 = v92 >> 1;
          if (!v125) {
            uint64_t v93 = 0;
          }
          uint64_t v133 = v125;
          uint64_t v134 = v93;
          uint64_t v94 = v124;
          if (v124) {
            uint64_t v94 = (v123 - v124) / 4;
          }
          uint64_t v131 = v124;
          uint64_t v132 = v94;
          __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C170);
          __swift_instantiateConcreteTypeFromMangledName(&qword_1E945D490);
          sub_19E5DFDB8(&qword_1E945D3B8, &qword_1E945C170);
          sub_19E5DFDB8(&qword_1E945D498, &qword_1E945D490);
          int v81 = v112;
          sub_19EBF6268();
          goto LABEL_210;
        case 7:
          (*(void (**)(char *, uint64_t, uint64_t))(v130 + 32))(v113, v110, v129);
          uint64_t v95 = v48 / 4;
          if (!v125) {
            uint64_t v95 = 0;
          }
          uint64_t v133 = v125;
          uint64_t v134 = v95;
          uint64_t v96 = v124;
          if (v124) {
            uint64_t v96 = (v123 - v124) / 4;
          }
          uint64_t v131 = v124;
          uint64_t v132 = v96;
          __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C170);
          __swift_instantiateConcreteTypeFromMangledName(&qword_1E945D3B0);
          sub_19E5DFDB8(&qword_1E945D3B8, &qword_1E945C170);
          sub_19E5DFDB8(&qword_1E945D3C0, &qword_1E945D3B0);
          int v81 = v113;
          sub_19EBF6278();
          goto LABEL_210;
        default:
          break;
      }
    }
    (*(void (**)(uint64_t, uint64_t))(v130 + 8))(v110, v129);
  }
  if (v126 == 11)
  {
LABEL_184:
    if (v50 == 10)
    {
      uint64_t v102 = v48 / 4;
      if (!v125) {
        uint64_t v102 = 0;
      }
      uint64_t v133 = v125;
      uint64_t v134 = v102;
      if (v124) {
        uint64_t v83 = (v123 - v124) / 8;
      }
      else {
        uint64_t v83 = 0;
      }
      unint64_t v85 = (uint64_t (*)(void))MEMORY[0x1E4F16B50];
      goto LABEL_193;
    }
  }
  else if (v126 == 10 && v50 == 11)
  {
    uint64_t v82 = v48 / 8;
    if (!v125) {
      uint64_t v82 = 0;
    }
    uint64_t v133 = v125;
    uint64_t v134 = v82;
    if (v124) {
      uint64_t v83 = (v123 - v124) / 4;
    }
    else {
      uint64_t v83 = 0;
    }
    unint64_t v85 = (uint64_t (*)(void))MEMORY[0x1E4F16E30];
LABEL_193:
    sub_19E6BC300(v124, v83, &v133, v85);
    goto LABEL_50;
  }
  sub_19E68D51C((uint64_t)v38, &qword_1E945D450);
  return 0;
}

uint64_t sub_19E6C0EBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E945D458);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_19E6C0F24(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E945D458);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t initializeBufferWithCopyOfBuffer for MLTensorProperties(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for MLTensorProperties()
{
  return swift_bridgeObjectRelease();
}

uint64_t assignWithCopy for MLTensorProperties(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(a1 + 9) = *(unsigned char *)(a2 + 9);
  return a1;
}

uint64_t __swift_memcpy10_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_WORD *)(result + 8) = *((_WORD *)a2 + 4);
  *(void *)uint64_t result = v2;
  return result;
}

uint64_t assignWithTake for MLTensorProperties(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(a1 + 9) = *(unsigned char *)(a2 + 9);
  return a1;
}

uint64_t getEnumTagSinglePayload for MLTensorProperties(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 10)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MLTensorProperties(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_WORD *)(result + 8) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 10) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 10) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MLTensorProperties()
{
  return &type metadata for MLTensorProperties;
}

uint64_t sub_19E6C1118(uint64_t a1, char a2)
{
  sub_19EBF6FE8();
  swift_bridgeObjectRelease();
  uint64_t v3 = swift_bridgeObjectRetain();
  MEMORY[0x19F3BF220](v3, MEMORY[0x1E4FBB550]);
  sub_19EBF67D8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_19EBF67D8();
  sub_19E6C1A2C(a2);
  sub_19EBF67D8();
  swift_bridgeObjectRelease();
  sub_19EBF67D8();
  return v5[0];
}

uint64_t sub_19E6C120C(uint64_t a1)
{
  sub_19EBF7478();
  uint64_t v2 = *(void *)(a1 + 16);
  sub_19EBF7488();
  if (v2)
  {
    uint64_t v3 = a1 + 32;
    do
    {
      v3 += 8;
      sub_19EBF7488();
      --v2;
    }
    while (v2);
  }
  sub_19EBF7488();
  return sub_19EBF74B8();
}

uint64_t sub_19E6C128C()
{
  return sub_19E6C120C(*v0);
}

uint64_t sub_19E6C12AC()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 16);
  sub_19EBF7488();
  if (v2)
  {
    uint64_t v3 = v1 + 32;
    do
    {
      v3 += 8;
      sub_19EBF7488();
      --v2;
    }
    while (v2);
  }
  return sub_19EBF7488();
}

uint64_t sub_19E6C130C()
{
  uint64_t v1 = *v0;
  sub_19EBF7478();
  uint64_t v2 = *(void *)(v1 + 16);
  sub_19EBF7488();
  if (v2)
  {
    uint64_t v3 = v1 + 32;
    do
    {
      v3 += 8;
      sub_19EBF7488();
      --v2;
    }
    while (v2);
  }
  sub_19EBF7488();
  return sub_19EBF74B8();
}

uint64_t sub_19E6C1388()
{
  return sub_19E6C1118(*(void *)v0, *(unsigned char *)(v0 + 8));
}

uint64_t sub_19E6C13A8(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 8);
  int v3 = *(unsigned __int8 *)(a2 + 8);
  return sub_19E5DDC7C(*(void **)a1, *(void **)a2) & (v2 == v3);
}

unint64_t sub_19E6C13F0()
{
  unint64_t result = qword_1E945D4B0;
  if (!qword_1E945D4B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945D4B0);
  }
  return result;
}

uint64_t sub_19E6C1448(uint64_t a1, char a2)
{
  if (swift_dynamicCastMetatype())
  {
    int v3 = 9;
  }
  else if (swift_dynamicCastMetatype())
  {
    int v3 = 10;
  }
  else if (swift_dynamicCastMetatype())
  {
    int v3 = 5;
  }
  else if (swift_dynamicCastMetatype())
  {
    int v3 = 6;
  }
  else if (swift_dynamicCastMetatype())
  {
    int v3 = 7;
  }
  else if (swift_dynamicCastMetatype() || swift_dynamicCastMetatype())
  {
    int v3 = 8;
  }
  else if (swift_dynamicCastMetatype())
  {
    int v3 = 1;
  }
  else if (swift_dynamicCastMetatype())
  {
    int v3 = 2;
  }
  else if (swift_dynamicCastMetatype())
  {
    int v3 = 3;
  }
  else if (swift_dynamicCastMetatype() || swift_dynamicCastMetatype())
  {
    int v3 = 4;
  }
  else
  {
    if (!swift_dynamicCastMetatype())
    {
      sub_19EBF6FE8();
      swift_bridgeObjectRelease();
      sub_19EBF75D8();
      sub_19EBF67D8();
      swift_bridgeObjectRelease();
      sub_19EBF67D8();
      uint64_t result = sub_19EBF71F8();
      __break(1u);
      return result;
    }
    int v3 = 0;
  }
  if (a2) {
    int v4 = 256;
  }
  else {
    int v4 = 0;
  }
  return v4 | v3;
}

unint64_t sub_19E6C1680@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_19E6C20D0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_19E6C16AC()
{
  return sub_19EBF68B8();
}

uint64_t sub_19E6C170C()
{
  return sub_19EBF68A8();
}

uint64_t sub_19E6C175C(void *a1, char a2)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E945D4E8);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_19E6C2410();
  sub_19EBF7538();
  v10[15] = a2;
  v10[14] = 0;
  sub_19E6C24B8();
  sub_19EBF72F8();
  if (!v2)
  {
    v10[13] = 1;
    sub_19EBF72D8();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_19E6C18D4()
{
  if (*v0) {
    return 0x796C6B6165577369;
  }
  else {
    return 0x6570795461746164;
  }
}

uint64_t sub_19E6C191C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_19E6C2134(a1, a2);
  *a3 = result;
  return result;
}

void sub_19E6C1944(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_19E6C1950(uint64_t a1)
{
  unint64_t v2 = sub_19E6C2410();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_19E6C198C(uint64_t a1)
{
  unint64_t v2 = sub_19E6C2410();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_19E6C19C8@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_19E6C224C(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = BYTE1(result) & 1;
  }
  return result;
}

uint64_t sub_19E6C19FC(void *a1)
{
  return sub_19E6C175C(a1, *v1);
}

uint64_t sub_19E6C1A2C(char a1)
{
  uint64_t result = 1819242338;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x38746E6975;
      break;
    case 2:
      uint64_t result = 0x3631746E6975;
      break;
    case 3:
      uint64_t result = 0x3233746E6975;
      break;
    case 4:
      uint64_t result = 0x3436746E6975;
      break;
    case 5:
      uint64_t result = 947154537;
      break;
    case 6:
      uint64_t result = 0x3631746E69;
      break;
    case 7:
      uint64_t result = 0x3233746E69;
      break;
    case 8:
      uint64_t result = 0x3436746E69;
      break;
    case 9:
      uint64_t result = 0x363174616F6C66;
      break;
    case 10:
      uint64_t result = 0x323374616F6C66;
      break;
    case 11:
      uint64_t result = 0x343674616F6C66;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_19E6C1B70(char a1)
{
  uint64_t result = 1819242338;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x38746E6975;
      break;
    case 2:
      uint64_t result = 0x3631746E6975;
      break;
    case 3:
      uint64_t result = 0x3233746E6975;
      break;
    case 4:
      uint64_t result = 0x3436746E6975;
      break;
    case 5:
      uint64_t result = 947154537;
      break;
    case 6:
      uint64_t result = 0x3631746E69;
      break;
    case 7:
      uint64_t result = 0x3233746E69;
      break;
    case 8:
      uint64_t result = 0x3436746E69;
      break;
    case 9:
      uint64_t result = 0x363174616F6C66;
      break;
    case 10:
      uint64_t result = 0x323374616F6C66;
      break;
    case 11:
      uint64_t result = 0x343674616F6C66;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_19E6C1CB4()
{
  return sub_19E6C1A2C(*v0);
}

uint64_t sub_19E6C1CD0()
{
  return sub_19E6C1B70(*v0);
}

uint64_t getEnumTagSinglePayload for MLTensorScalarKind.DataType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF5) {
    goto LABEL_17;
  }
  if (a2 + 11 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 11) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 11;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 11;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 11;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xC;
  int v8 = v6 - 12;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for MLTensorScalarKind.DataType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 11 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 11) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF5) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF4)
  {
    unsigned int v6 = ((a2 - 245) >> 8) + 1;
    *uint64_t result = a2 + 11;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x19E6C1E34);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 11;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MLTensorScalarKind.DataType()
{
  return &type metadata for MLTensorScalarKind.DataType;
}

_WORD *__swift_memcpy2_1(_WORD *result, _WORD *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for MLTensorScalarKind(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 65281 <= 0xFFFEFFFF) {
    int v2 = 2;
  }
  else {
    int v2 = 4;
  }
  if (a2 + 65281 < 0xFF0000) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 16)) - 65281;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 16)) - 65281;
    }
    int v4 = *((unsigned __int8 *)a1 + 2);
    if (*((unsigned char *)a1 + 2)) {
      return (*a1 | (v4 << 16)) - 65281;
    }
  }
LABEL_17:
  unsigned int v6 = *((unsigned __int8 *)a1 + 1);
  BOOL v7 = v6 >= 2;
  int v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for MLTensorScalarKind(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a3 + 65281 <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if (a3 + 65281 < 0xFF0000) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 16) + 1;
    *(_WORD *)uint64_t result = a2 - 255;
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = v6;
        break;
      case 2:
        *(_WORD *)(result + 2) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x19E6C1FE8);
      case 4:
        *(_DWORD *)(result + 2) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 2) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *(unsigned char *)(result + 1) = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MLTensorScalarKind()
{
  return &type metadata for MLTensorScalarKind;
}

unint64_t sub_19E6C2024()
{
  unint64_t result = qword_1E945D4B8;
  if (!qword_1E945D4B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945D4B8);
  }
  return result;
}

unint64_t sub_19E6C207C()
{
  unint64_t result = qword_1E945D4C0;
  if (!qword_1E945D4C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945D4C0);
  }
  return result;
}

unint64_t sub_19E6C20D0(unint64_t result)
{
  if (result >= 0xC) {
    return 12;
  }
  return result;
}

unint64_t sub_19E6C20E0()
{
  unint64_t result = qword_1E945D4C8;
  if (!qword_1E945D4C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945D4C8);
  }
  return result;
}

uint64_t sub_19E6C2134(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6570795461746164 && a2 == 0xE800000000000000;
  if (v2 || (sub_19EBF7388() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x796C6B6165577369 && a2 == 0xED00006465707954)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = sub_19EBF7388();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_19E6C224C(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E945D4D0);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  char v6 = &v11[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_19E6C2410();
  sub_19EBF7528();
  if (v1) {
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  }
  v11[14] = 0;
  sub_19E6C2464();
  sub_19EBF72C8();
  unsigned int v7 = v11[15];
  v11[13] = 1;
  char v8 = sub_19EBF72A8();
  (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  if (v8) {
    int v10 = 256;
  }
  else {
    int v10 = 0;
  }
  return v10 | v7;
}

unint64_t sub_19E6C2410()
{
  unint64_t result = qword_1E945D4D8;
  if (!qword_1E945D4D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945D4D8);
  }
  return result;
}

unint64_t sub_19E6C2464()
{
  unint64_t result = qword_1E945D4E0;
  if (!qword_1E945D4E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945D4E0);
  }
  return result;
}

unint64_t sub_19E6C24B8()
{
  unint64_t result = qword_1E945D4F0;
  if (!qword_1E945D4F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945D4F0);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for MLTensorScalarKind.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x19E6C25D8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MLTensorScalarKind.CodingKeys()
{
  return &type metadata for MLTensorScalarKind.CodingKeys;
}

unint64_t sub_19E6C2614()
{
  unint64_t result = qword_1E945D4F8;
  if (!qword_1E945D4F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945D4F8);
  }
  return result;
}

unint64_t sub_19E6C266C()
{
  unint64_t result = qword_1E945D500;
  if (!qword_1E945D500)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945D500);
  }
  return result;
}

unint64_t sub_19E6C26C4()
{
  unint64_t result = qword_1E945D508[0];
  if (!qword_1E945D508[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1E945D508);
  }
  return result;
}

uint64_t sub_19E6C2718(uint64_t a1, uint64_t a2)
{
  int v3 = v2;
  uint64_t v12 = 0;
  char v13 = 1;
  id v14 = 0;
  unsigned int v6 = (void *)swift_allocObject();
  v6[2] = &v12;
  v6[3] = a1;
  v6[4] = a2;
  v6[5] = &v14;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = sub_19E6C93C8;
  *(void *)(v7 + 24) = v6;
  v11[4] = sub_19E6C93E4;
  v11[5] = v7;
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 1107296256;
  void v11[2] = sub_19E6391DC;
  v11[3] = &block_descriptor_62;
  char v8 = _Block_copy(v11);
  swift_retain();
  swift_release();
  objc_msgSend(v3, sel_getMutableBytesWithHandler_, v8);
  _Block_release(v8);
  LOBYTE(v3) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v3)
  {
    __break(1u);
  }
  else
  {
    if (v14)
    {
      id v10 = v14;
      swift_willThrow();

      swift_release();
      return v7;
    }
    if ((v13 & 1) == 0)
    {
      uint64_t v7 = v12;
      swift_release();
      return v7;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_19E6C28D8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t), uint64_t a6, uint64_t a7)
{
  void (*v26)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v14 = sub_19EBF7228();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v14 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v15 = MEMORY[0x1E4FBC860];
  if (!v14)
  {
LABEL_13:
    a5(&v30, a1, a1 + a2, v15);
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)a4 = v30;
    *(unsigned char *)(a4 + 8) = 0;
    return result;
  }
  uint64_t v29 = MEMORY[0x1E4FBC860];
  uint64_t result = sub_19E66F600(0, v14 & ~(v14 >> 63), 0);
  if ((v14 & 0x8000000000000000) == 0)
  {
    uint64_t v23 = a2;
    uint64_t v24 = a1;
    uint64_t v25 = a6;
    uint64_t v26 = a5;
    uint64_t v27 = a4;
    uint64_t v28 = a7;
    uint64_t v17 = 0;
    uint64_t v15 = v29;
    do
    {
      if ((a3 & 0xC000000000000001) != 0) {
        id v18 = (id)MEMORY[0x19F3BF970](v17, a3);
      }
      else {
        id v18 = *(id *)(a3 + 8 * v17 + 32);
      }
      uint64_t v19 = v18;
      id v20 = objc_msgSend(v18, sel_integerValue, v23, v24, v25, v26, v27, v28);

      unint64_t v22 = *(void *)(v29 + 16);
      unint64_t v21 = *(void *)(v29 + 24);
      if (v22 >= v21 >> 1) {
        sub_19E66F600(v21 > 1, v22 + 1, 1);
      }
      ++v17;
      *(void *)(v29 + 16) = v22 + 1;
      *(void *)(v29 + 8 * v22 + 32) = v20;
    }
    while (v14 != v17);
    a4 = v27;
    a5 = v26;
    a2 = v23;
    a1 = v24;
    goto LABEL_13;
  }
  __break(1u);
  return result;
}

id sub_19E6C2ABC(uint64_t a1, uint64_t a2, unint64_t a3)
{
  switch(a3 >> 62)
  {
    case 1uLL:
      uint64_t v16 = a3 & 0x3FFFFFFFFFFFFFFFLL;
      uint64_t v17 = *(void **)(a1 + 48);
      id v18 = *(void **)((a3 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
      if (a2)
      {
        uint64_t v19 = a2;
      }
      else
      {
        uint64_t v19 = *(void *)((a3 & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
        swift_bridgeObjectRetain();
      }
      uint64_t v23 = 2147483656;
      swift_retain();
      swift_bridgeObjectRetain();
      id v24 = v17;
      id v25 = v18;
      sub_19E636F58(v19);
      swift_bridgeObjectRelease();
      switch(*(unsigned char *)(v16 + 32))
      {
        case 1:
          uint64_t v23 = 8;
          goto LABEL_47;
        case 2:
          uint64_t v23 = 16;
          goto LABEL_47;
        case 3:
          uint64_t v23 = 32;
          goto LABEL_47;
        case 4:
          uint64_t v23 = 64;
          goto LABEL_47;
        case 5:
          uint64_t v23 = 536870920;
          goto LABEL_47;
        case 6:
          uint64_t v23 = 536870928;
          goto LABEL_47;
        case 7:
          uint64_t v23 = 536870944;
          goto LABEL_47;
        case 8:
          uint64_t v23 = 536870976;
          goto LABEL_47;
        case 9:
          uint64_t v23 = 268435472;
          goto LABEL_47;
        case 0xA:
          uint64_t v23 = 268435488;
          goto LABEL_47;
        case 0xB:
          goto LABEL_49;
        default:
LABEL_47:
          id v33 = objc_allocWithZone(MEMORY[0x1E4F35A90]);
          sub_19E5F47F0();
          uint64_t v34 = (void *)sub_19EBF68D8();
          swift_bridgeObjectRelease();
          id v35 = objc_msgSend(v33, sel_initWithDevice_IOSurface_rowBytesAlignment_shape_dataType_, v24, v25, 1, v34, v23);
          swift_release();

          id result = v35;
          break;
      }
      break;
    case 2uLL:
      uint64_t v7 = a3 & 0x3FFFFFFFFFFFFFFFLL;
      char v8 = *(void **)(a1 + 48);
      uint64_t v9 = *(void *)((a3 & 0x3FFFFFFFFFFFFFFFLL) + 0x20);
      unint64_t v10 = *(void *)((a3 & 0x3FFFFFFFFFFFFFFFLL) + 0x28);
      if (a2)
      {
        uint64_t v11 = a2;
      }
      else
      {
        uint64_t v11 = *(void *)((a3 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
        swift_bridgeObjectRetain();
      }
      uint64_t v20 = 2147483656;
      swift_retain();
      swift_bridgeObjectRetain();
      id v21 = v8;
      sub_19E5DE7A4(v9, v10);
      sub_19E636F58(v11);
      swift_bridgeObjectRelease();
      switch(*(unsigned char *)(v7 + 24))
      {
        case 1:
          uint64_t v20 = 8;
          goto LABEL_37;
        case 2:
          uint64_t v20 = 16;
          goto LABEL_37;
        case 3:
          uint64_t v20 = 32;
          goto LABEL_37;
        case 4:
          uint64_t v20 = 64;
          goto LABEL_37;
        case 5:
          uint64_t v20 = 536870920;
          goto LABEL_37;
        case 6:
          uint64_t v20 = 536870928;
          goto LABEL_37;
        case 7:
          uint64_t v20 = 536870944;
          goto LABEL_37;
        case 8:
          uint64_t v20 = 536870976;
          goto LABEL_37;
        case 9:
          uint64_t v20 = 268435472;
          goto LABEL_37;
        case 0xA:
          uint64_t v20 = 268435488;
          goto LABEL_37;
        case 0xB:
          goto LABEL_49;
        default:
LABEL_37:
          id v26 = objc_allocWithZone(MEMORY[0x1E4F35A90]);
          uint64_t v27 = (void *)sub_19EBF63B8();
          sub_19E5F47F0();
          uint64_t v28 = (void *)sub_19EBF68D8();
          swift_bridgeObjectRelease();
          id v29 = objc_msgSend(v26, sel_initWithDevice_data_shape_dataType_, v21, v27, v28, v20);
          sub_19E5DE7FC(v9, v10);
          swift_release();

          id result = v29;
          break;
      }
      break;
    case 3uLL:
      uint64_t v12 = *(void *)((a3 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
      uint64_t v13 = *(void *)((a3 & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain();
      uint64_t v14 = sub_19E6C2ABC(a1, v13, v12);
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      id result = (id)v14;
      break;
    default:
      uint64_t v5 = *(void *)(a3 + 16);
      if (a2)
      {
        uint64_t v6 = a2;
      }
      else
      {
        uint64_t v6 = *(void *)(a3 + 40);
        swift_bridgeObjectRetain();
      }
      uint64_t v22 = 2147483656;
      swift_retain();
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      sub_19E636F58(v6);
      swift_bridgeObjectRelease();
      switch(*(unsigned char *)(a3 + 48))
      {
        case 1:
          uint64_t v22 = 8;
          break;
        case 2:
          uint64_t v22 = 16;
          break;
        case 3:
          uint64_t v22 = 32;
          break;
        case 4:
          uint64_t v22 = 64;
          break;
        case 5:
          uint64_t v22 = 536870920;
          break;
        case 6:
          uint64_t v22 = 536870928;
          break;
        case 7:
          uint64_t v22 = 536870944;
          break;
        case 8:
          uint64_t v22 = 536870976;
          break;
        case 9:
          uint64_t v22 = 268435472;
          break;
        case 0xA:
          uint64_t v22 = 268435488;
          break;
        case 0xB:
LABEL_49:
          sub_19EBF6FE8();
          sub_19EBF67D8();
          sub_19E6C1A2C(11);
          sub_19EBF67D8();
          swift_bridgeObjectRelease();
          sub_19EBF67D8();
          sub_19EBF7188();
          sub_19EBF67D8();
          sub_19EBF71F8();
          __break(1u);
          JUMPOUT(0x19E6C30E0);
        default:
          break;
      }
      id v30 = objc_allocWithZone(MEMORY[0x1E4F35A90]);
      sub_19E5F47F0();
      uint64_t v31 = (void *)sub_19EBF68D8();
      swift_bridgeObjectRelease();
      id v32 = objc_msgSend(v30, sel_initWithMTLBuffer_shape_dataType_, v5, v31, v22);
      swift_release();

      swift_unknownObjectRelease();
      id result = v32;
      break;
  }
  return result;
}

uint64_t sub_19E6C3180(unint64_t a1)
{
  swift_allocObject();
  int v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *int v3 = v1;
  v3[1] = sub_19E6C3228;
  return sub_19E6C7A9C(a1);
}

uint64_t sub_19E6C3228(uint64_t a1)
{
  uint64_t v5 = *v1;
  swift_task_dealloc();
  int v3 = *(uint64_t (**)(uint64_t))(v5 + 8);
  return v3(a1);
}

uint64_t sub_19E6C3324(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E945D088);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = &v27[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E945D5A0);
  uint64_t v8 = MEMORY[0x1F4188790](v7 - 8);
  unint64_t v10 = &v27[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  MEMORY[0x1F4188790](v8);
  uint64_t v12 = &v27[-v11 - 8];
  uint64_t v13 = sub_19EBF6188();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = &v27[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_19E6C85CC(a1, (uint64_t)v12);
  unint64_t v17 = a2 >> 62;
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    switch(v17)
    {
      case 1uLL:
        uint64_t v18 = (a2 & 0x3FFFFFFFFFFFFFFFLL) + 24;
        goto LABEL_8;
      case 2uLL:
        uint64_t v18 = (a2 & 0x3FFFFFFFFFFFFFFFLL) + 16;
        goto LABEL_8;
      case 3uLL:
        uint64_t v22 = *(void *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
        if (!*(void *)(v22 + 16)) {
          goto LABEL_13;
        }
        goto LABEL_17;
      default:
        uint64_t v18 = a2 + 40;
LABEL_8:
        if (!*(void *)(*(void *)v18 + 16))
        {
LABEL_13:
          if (qword_1EF0C6C20) {
            goto LABEL_19;
          }
          goto LABEL_18;
        }
        if (v17)
        {
          if (v17 == 1) {
            uint64_t v22 = *(void *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
          }
          else {
            uint64_t v22 = *(void *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
          }
        }
        else
        {
          uint64_t v22 = *(void *)(a2 + 40);
        }
LABEL_17:
        swift_bridgeObjectRetain();
        if (!*(void *)(v22 + 16)) {
LABEL_18:
        }
          swift_bridgeObjectRelease();
LABEL_19:
        uint64_t v23 = sub_19EBF5EC8();
        (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v6, 1, 1, v23);
        sub_19EBF6198();
        sub_19E6C8634((uint64_t)v12);
        if (a2 >> 62 == 3) {
          goto LABEL_20;
        }
        goto LABEL_5;
    }
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v14 + 32))(v16, v12, v13);
  if (a2 >> 62 == 3)
  {
LABEL_20:
    uint64_t v24 = *(void *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v14 + 16))(v10, v16, v13);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v14 + 56))(v10, 0, 1, v13);
    swift_retain();
    uint64_t v19 = sub_19E6C3324(v10, v24);
    sub_19E6C8634((uint64_t)v10);
    swift_release();
  }
  else
  {
LABEL_5:
    swift_retain();
    sub_19E6C6CB8(a2, (uint64_t)v16, (uint64_t)v28);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E945D5A8);
    uint64_t v19 = swift_allocObject();
    sub_19E68C4B8((uint64_t)v27);
    sub_19E5E7C14((uint64_t)v27, v19 + 16, (uint64_t *)&unk_1E945D5B0);
    v29[8] = v28[8];
    v29[9] = v28[9];
    v29[10] = v28[10];
    v29[4] = v28[4];
    v29[5] = v28[5];
    v29[6] = v28[6];
    v29[7] = v28[7];
    v29[0] = v28[0];
    v29[1] = v28[1];
    v29[2] = v28[2];
    v29[3] = v28[3];
    unint64_t v30 = a2;
    nullsub_1(v29, v20, v21);
    sub_19E5E7C14(v19 + 16, (uint64_t)v31, (uint64_t *)&unk_1E945D5B0);
    sub_19E5E7C14((uint64_t)v29, v19 + 16, (uint64_t *)&unk_1E945D5B0);
    sub_19E68C4E0(v31);
  }
  (*(void (**)(unsigned char *, uint64_t))(v14 + 8))(v16, v13);
  return v19;
}

id sub_19E6C3778(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = a2 >> 62;
  uint64_t v4 = v2;
  switch(a2 >> 62)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v6 = (unsigned char *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      break;
    case 2uLL:
      uint64_t v6 = (unsigned char *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      break;
    default:
      uint64_t v6 = (unsigned char *)(a2 + 48);
      break;
  }
  uint64_t v7 = 131104;
  uint64_t v8 = 0;
  switch(*v6)
  {
    case 7:
      goto LABEL_9;
    case 9:
      uint64_t v7 = 65552;
      uint64_t v8 = v3;
      if (!a1) {
        goto LABEL_12;
      }
      goto LABEL_10;
    case 0xA:
      uint64_t v7 = 65568;
LABEL_9:
      uint64_t v8 = v3;
      if (a1) {
        goto LABEL_10;
      }
      goto LABEL_12;
    case 0xB:
      uint64_t v7 = 65600;
      uint64_t v8 = v3;
      if (a1)
      {
LABEL_10:
        uint64_t v9 = a1;
      }
      else
      {
LABEL_12:
        switch(v8)
        {
          case 1:
          case 3:
            uint64_t v9 = *(void *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
            break;
          case 2:
            uint64_t v9 = *(void *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
            break;
          default:
            uint64_t v9 = *(void *)(a2 + 40);
            break;
        }
        swift_bridgeObjectRetain();
      }
      unint64_t v10 = *(void *)(v9 + 16);
      swift_bridgeObjectRetain();
      if (v10)
      {
        uint64_t v33 = v8;
        uint64_t v34 = v7;
        uint64_t v11 = (void *)sub_19E60F71C(1uLL, v10);
        char v12 = 0;
        unint64_t v13 = v10 - 2;
        uint64_t v14 = v10 - 3;
        if ((uint64_t)(v10 - 2) >= 1) {
          goto LABEL_21;
        }
LABEL_19:
        if (!((v13 != 0) | v12 & 1))
        {
          uint64_t v14 = 0;
          char v12 = 1;
LABEL_21:
          while (1)
          {
            uint64_t v15 = v13 + 1;
            if ((int64_t)(v13 + 1) >= v11[2]) {
              break;
            }
            if (v15 >= *(void *)(v9 + 16)) {
              goto LABEL_47;
            }
            uint64_t v16 = v15;
            uint64_t v17 = v11[v16 + 4];
            uint64_t v18 = *(void *)(v9 + 32 + v16 * 8);
            uint64_t v19 = v17 * v18;
            if ((unsigned __int128)(v17 * (__int128)v18) >> 64 != (v17 * v18) >> 63) {
              goto LABEL_48;
            }
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v11 = sub_19E612754(v11);
            }
            if (v13 >= v11[2]) {
              goto LABEL_49;
            }
            v11[v13 + 4] = v19;
            unint64_t v13 = v14;
            BOOL v20 = __OFSUB__(v14--, 1);
            if (v14 < 0 != v20) {
              goto LABEL_19;
            }
          }
          __break(1u);
LABEL_47:
          __break(1u);
LABEL_48:
          __break(1u);
LABEL_49:
          __break(1u);
          JUMPOUT(0x19E6C3B74);
        }
        uint64_t v7 = v34;
        uint64_t v8 = v33;
      }
      else
      {
        uint64_t v11 = (void *)MEMORY[0x1E4FBC860];
      }
      switch(v8)
      {
        case 1:
          swift_bridgeObjectRelease();
          uint64_t v27 = swift_retain();
          id v28 = sub_19E6C86B0(v27, v9, a2);
          if (v2) {
            goto LABEL_41;
          }
          goto LABEL_38;
        case 2:
          swift_bridgeObjectRelease();
          uint64_t v29 = swift_retain();
          id v28 = sub_19E6C895C(v29, v9, a2);
          if (v2) {
            goto LABEL_41;
          }
LABEL_38:
          uint64_t v8 = (uint64_t)v28;
          swift_bridgeObjectRelease();
          goto LABEL_44;
        case 3:
          swift_bridgeObjectRelease();
          uint64_t v30 = *(void *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
          swift_retain();
          swift_retain();
          uint64_t v31 = sub_19E6C3778(v9, v30);
          if (v4)
          {
            swift_release();
LABEL_41:
            swift_release();
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v8 = v31;
            swift_release();
            swift_bridgeObjectRelease();
LABEL_44:
            swift_release();
          }
          break;
        default:
          uint64_t v21 = *(void **)(a2 + 16);
          swift_retain();
          id v22 = objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
          id v23 = v21;
          uint64_t v8 = sub_19E636F58(v9);
          swift_bridgeObjectRelease();
          uint64_t v24 = sub_19E636F58((uint64_t)v11);
          swift_bridgeObjectRelease();
          id v25 = objc_allocWithZone((Class)MLMultiArray);
          id v26 = sub_19E6C8ACC((uint64_t)v22, v8, v7, v24, nullsub_1, (void *)a2);
          if (!v2) {
            return v26;
          }
          return (id)v8;
      }
      return (id)v8;
    default:
      return (id)v8;
  }
}

uint64_t sub_19E6C3BD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[5] = a4;
  v5[6] = a5;
  v5[3] = a2;
  v5[4] = a3;
  void v5[2] = a1;
  return MEMORY[0x1F4188298](sub_19E6C3BFC, 0, 0);
}

uint64_t sub_19E6C3BFC()
{
  unint64_t v1 = v0[5];
  switch(v1 >> 62)
  {
    case 1uLL:
      swift_retain();
      uint64_t v7 = (void *)swift_task_alloc();
      v0[9] = v7;
      *uint64_t v7 = v0;
      v7[1] = sub_19E6C3FD0;
      uint64_t v8 = v0[3];
      uint64_t v9 = v0[4];
      uint64_t v10 = v0[2];
      uint64_t result = sub_19E6C5DBC(v10, v8, v9);
      break;
    case 2uLL:
      swift_retain();
      sub_19EBF63A8();
      swift_release();
      uint64_t v11 = (uint64_t (*)(void))v0[1];
      uint64_t result = v11();
      break;
    case 3uLL:
      swift_retain();
      uint64_t v12 = swift_task_alloc();
      v0[11] = v12;
      *(void *)uint64_t v12 = v0;
      *(void *)(v12 + 8) = sub_19E6C40E4;
      uint64_t v13 = v0[4];
      long long v14 = *((_OWORD *)v0 + 1);
      *(void *)(v12 + 40) = v0[6];
      *(void *)(v12 + 48) = v1 & 0x3FFFFFFFFFFFFFFFLL;
      *(void *)(v12 + 32) = v13;
      *(_OWORD *)(v12 + 16) = v14;
      uint64_t result = MEMORY[0x1F4188298](sub_19E6C6204, 0, 0);
      break;
    default:
      swift_retain();
      uint64_t v2 = (void *)swift_task_alloc();
      v0[7] = v2;
      *uint64_t v2 = v0;
      v2[1] = sub_19E6C3EBC;
      uint64_t v3 = v0[3];
      uint64_t v4 = v0[4];
      uint64_t v5 = v0[2];
      uint64_t result = sub_19E6C5B64(v5, v3, v4);
      break;
  }
  return result;
}

uint64_t sub_19E6C3EBC()
{
  *(void *)(*(void *)v1 + 64) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_19E6C4260;
  }
  else {
    uint64_t v2 = sub_19E6C41F8;
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

uint64_t sub_19E6C3FD0()
{
  *(void *)(*(void *)v1 + 80) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_19E6C42C8;
  }
  else {
    uint64_t v2 = sub_19E6C93F0;
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

uint64_t sub_19E6C40E4()
{
  *(void *)(*(void *)v1 + 96) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_19E6C4330;
  }
  else {
    uint64_t v2 = sub_19E6C93F0;
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

uint64_t sub_19E6C41F8()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_19E6C4260()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_19E6C42C8()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_19E6C4330()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_19E6C4398()
{
  unint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = 0;
  switch(v1 >> 62)
  {
    case 1uLL:
      uint64_t v2 = *(void *)((v1 & 0x3FFFFFFFFFFFFFFFLL) + 0x28);
      goto LABEL_4;
    case 2uLL:
      return v2;
    case 3uLL:
      uint64_t v3 = swift_retain();
      uint64_t v2 = sub_19E6C4398(v3);
      swift_release();
      break;
    default:
      uint64_t v2 = *(void *)(v1 + 24);
LABEL_4:
      swift_unknownObjectRetain();
      break;
  }
  return v2;
}

uint64_t sub_19E6C4444()
{
  v1[2] = v0;
  uint64_t v2 = sub_19EBF6558();
  v1[3] = v2;
  v1[4] = *(void *)(v2 - 8);
  v1[5] = swift_task_alloc();
  uint64_t v3 = sub_19EBF6528();
  v1[6] = v3;
  v1[7] = *(void *)(v3 - 8);
  v1[8] = swift_task_alloc();
  v1[9] = swift_task_alloc();
  v1[10] = swift_task_alloc();
  return MEMORY[0x1F4188298](sub_19E6C457C, 0, 0);
}

uint64_t sub_19E6C457C()
{
  if (qword_1E945BB50 != -1) {
    swift_once();
  }
  uint64_t v1 = sub_19EBF6548();
  v0[11] = __swift_project_value_buffer(v1, (uint64_t)qword_1E946A518);
  sub_19EBF6518();
  uint64_t v2 = sub_19EBF6538();
  os_signpost_type_t v3 = sub_19EBF6D78();
  if (sub_19EBF6E18())
  {
    uint64_t v4 = v0[9];
    uint64_t v5 = v0[6];
    uint64_t v6 = v0[7];
    uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
    unint64_t v8 = (v6 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v7(v4, v0[10], v5);
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    os_signpost_id_t v10 = sub_19EBF6508();
    _os_signpost_emit_with_name_impl(&dword_19E58B000, v2, v3, v10, "GPU :: Data synchronization", "", v9, 2u);
    MEMORY[0x19F3C3580](v9, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  else
  {
    uint64_t v11 = v0[7];

    uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
    unint64_t v8 = (v11 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  }
  uint64_t v13 = v0[9];
  uint64_t v12 = v0[10];
  long long v14 = v0 + 9;
  uint64_t v15 = v0[6];
  uint64_t v16 = v0[7];
  uint64_t v17 = v0[2];
  v0[12] = v7;
  v0[13] = v8;
  v7(v13, v12, v15);
  sub_19EBF6588();
  swift_allocObject();
  v0[14] = sub_19EBF6578();
  uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
  v0[15] = v18;
  v0[16] = (v16 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v18(v12, v15);
  if (*(void *)(v17 + 24))
  {
    uint64_t v19 = *(void *)(v0[2] + 32);
    uint64_t ObjectType = swift_getObjectType();
    id v35 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v19 + 56) + **(int **)(v19 + 56));
    uint64_t v21 = (void *)swift_task_alloc();
    v0[17] = v21;
    *uint64_t v21 = v0;
    v21[1] = sub_19E6C4A0C;
    return v35(ObjectType, v19);
  }
  else
  {
    id v23 = sub_19EBF6538();
    sub_19EBF6568();
    os_signpost_type_t v24 = sub_19EBF6D68();
    if (sub_19EBF6E18())
    {
      uint64_t v26 = v0[4];
      uint64_t v25 = v0[5];
      uint64_t v27 = v0[3];
      swift_retain();
      sub_19EBF6598();
      swift_release();
      if ((*(unsigned int (**)(uint64_t, uint64_t))(v26 + 88))(v25, v27) == *MEMORY[0x1E4FBD340])
      {
        id v28 = "[Error] Interval already ended";
      }
      else
      {
        (*(void (**)(void, void))(v0[4] + 8))(v0[5], v0[3]);
        id v28 = "";
      }
      uint64_t v29 = (void (*)(uint64_t, uint64_t))v0[15];
      uint64_t v30 = v0[8];
      uint64_t v31 = v0[6];
      ((void (*)(void, uint64_t, uint64_t))v0[12])(v0[9], v30, v31);
      id v32 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v32 = 0;
      os_signpost_id_t v33 = sub_19EBF6508();
      _os_signpost_emit_with_name_impl(&dword_19E58B000, v23, v24, v33, "GPU :: Data synchronization", v28, v32, 2u);
      MEMORY[0x19F3C3580](v32, -1, -1);

      v29(v30, v31);
    }
    else
    {

      long long v14 = v0 + 8;
    }
    ((void (*)(void, void))v0[15])(*v14, v0[6]);
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v34 = (uint64_t (*)(void))v0[1];
    return v34();
  }
}

uint64_t sub_19E6C4A0C()
{
  swift_task_dealloc();
  return MEMORY[0x1F4188298](sub_19E6C4B08, 0, 0);
}

uint64_t sub_19E6C4B08()
{
  uint64_t v1 = (void *)(v0 + 64);
  uint64_t v2 = sub_19EBF6538();
  sub_19EBF6568();
  os_signpost_type_t v3 = sub_19EBF6D68();
  if (sub_19EBF6E18())
  {
    uint64_t v5 = *(void *)(v0 + 32);
    uint64_t v4 = *(void *)(v0 + 40);
    uint64_t v6 = *(void *)(v0 + 24);
    swift_retain();
    sub_19EBF6598();
    swift_release();
    if ((*(unsigned int (**)(uint64_t, uint64_t))(v5 + 88))(v4, v6) == *MEMORY[0x1E4FBD340])
    {
      uint64_t v7 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(void, void))(*(void *)(v0 + 32) + 8))(*(void *)(v0 + 40), *(void *)(v0 + 24));
      uint64_t v7 = "";
    }
    uint64_t v1 = (void *)(v0 + 72);
    unint64_t v8 = *(void (**)(uint64_t, uint64_t))(v0 + 120);
    uint64_t v9 = *(void *)(v0 + 64);
    uint64_t v10 = *(void *)(v0 + 48);
    (*(void (**)(void, uint64_t, uint64_t))(v0 + 96))(*(void *)(v0 + 72), v9, v10);
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    os_signpost_id_t v12 = sub_19EBF6508();
    _os_signpost_emit_with_name_impl(&dword_19E58B000, v2, v3, v12, "GPU :: Data synchronization", v7, v11, 2u);
    MEMORY[0x19F3C3580](v11, -1, -1);

    v8(v9, v10);
  }
  else
  {
  }
  (*(void (**)(void, void))(v0 + 120))(*v1, *(void *)(v0 + 48));
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v13 = *(uint64_t (**)(void))(v0 + 8);
  return v13();
}

uint64_t sub_19E6C4D14()
{
  v1[2] = v0;
  uint64_t v2 = sub_19EBF6558();
  v1[3] = v2;
  v1[4] = *(void *)(v2 - 8);
  v1[5] = swift_task_alloc();
  uint64_t v3 = sub_19EBF6528();
  v1[6] = v3;
  v1[7] = *(void *)(v3 - 8);
  v1[8] = swift_task_alloc();
  v1[9] = swift_task_alloc();
  v1[10] = swift_task_alloc();
  return MEMORY[0x1F4188298](sub_19E6C4E4C, 0, 0);
}

uint64_t sub_19E6C4E4C()
{
  if (qword_1E945BB50 != -1) {
    swift_once();
  }
  uint64_t v1 = sub_19EBF6548();
  v0[11] = __swift_project_value_buffer(v1, (uint64_t)qword_1E946A518);
  sub_19EBF6518();
  uint64_t v2 = sub_19EBF6538();
  os_signpost_type_t v3 = sub_19EBF6D78();
  if (sub_19EBF6E18())
  {
    uint64_t v4 = v0[9];
    uint64_t v5 = v0[6];
    uint64_t v6 = v0[7];
    uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
    unint64_t v8 = (v6 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v7(v4, v0[10], v5);
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    os_signpost_id_t v10 = sub_19EBF6508();
    _os_signpost_emit_with_name_impl(&dword_19E58B000, v2, v3, v10, "CPU :: Data synchronization", "", v9, 2u);
    MEMORY[0x19F3C3580](v9, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  else
  {
    uint64_t v11 = v0[7];

    uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
    unint64_t v8 = (v11 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  }
  uint64_t v13 = v0[9];
  uint64_t v12 = v0[10];
  long long v14 = v0 + 9;
  uint64_t v15 = v0[6];
  uint64_t v16 = v0[7];
  uint64_t v17 = v0[2];
  v0[12] = v7;
  v0[13] = v8;
  v7(v13, v12, v15);
  sub_19EBF6588();
  swift_allocObject();
  v0[14] = sub_19EBF6578();
  uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
  v0[15] = v18;
  v0[16] = (v16 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v18(v12, v15);
  if (*(void *)(v17 + 40))
  {
    uint64_t v19 = *(void *)(v0[2] + 48);
    uint64_t ObjectType = swift_getObjectType();
    id v35 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v19 + 56) + **(int **)(v19 + 56));
    uint64_t v21 = (void *)swift_task_alloc();
    v0[17] = v21;
    *uint64_t v21 = v0;
    v21[1] = sub_19E6C52DC;
    return v35(ObjectType, v19);
  }
  else
  {
    id v23 = sub_19EBF6538();
    sub_19EBF6568();
    os_signpost_type_t v24 = sub_19EBF6D68();
    if (sub_19EBF6E18())
    {
      uint64_t v26 = v0[4];
      uint64_t v25 = v0[5];
      uint64_t v27 = v0[3];
      swift_retain();
      sub_19EBF6598();
      swift_release();
      if ((*(unsigned int (**)(uint64_t, uint64_t))(v26 + 88))(v25, v27) == *MEMORY[0x1E4FBD340])
      {
        id v28 = "[Error] Interval already ended";
      }
      else
      {
        (*(void (**)(void, void))(v0[4] + 8))(v0[5], v0[3]);
        id v28 = "";
      }
      uint64_t v29 = (void (*)(uint64_t, uint64_t))v0[15];
      uint64_t v30 = v0[8];
      uint64_t v31 = v0[6];
      ((void (*)(void, uint64_t, uint64_t))v0[12])(v0[9], v30, v31);
      id v32 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v32 = 0;
      os_signpost_id_t v33 = sub_19EBF6508();
      _os_signpost_emit_with_name_impl(&dword_19E58B000, v23, v24, v33, "CPU :: Data synchronization", v28, v32, 2u);
      MEMORY[0x19F3C3580](v32, -1, -1);

      v29(v30, v31);
    }
    else
    {

      long long v14 = v0 + 8;
    }
    ((void (*)(void, void))v0[15])(*v14, v0[6]);
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v34 = (uint64_t (*)(void))v0[1];
    return v34();
  }
}

uint64_t sub_19E6C52DC()
{
  swift_task_dealloc();
  return MEMORY[0x1F4188298](sub_19E6C53D8, 0, 0);
}

uint64_t sub_19E6C53D8()
{
  uint64_t v1 = (void *)(v0 + 64);
  uint64_t v2 = sub_19EBF6538();
  sub_19EBF6568();
  os_signpost_type_t v3 = sub_19EBF6D68();
  if (sub_19EBF6E18())
  {
    uint64_t v5 = *(void *)(v0 + 32);
    uint64_t v4 = *(void *)(v0 + 40);
    uint64_t v6 = *(void *)(v0 + 24);
    swift_retain();
    sub_19EBF6598();
    swift_release();
    if ((*(unsigned int (**)(uint64_t, uint64_t))(v5 + 88))(v4, v6) == *MEMORY[0x1E4FBD340])
    {
      uint64_t v7 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(void, void))(*(void *)(v0 + 32) + 8))(*(void *)(v0 + 40), *(void *)(v0 + 24));
      uint64_t v7 = "";
    }
    uint64_t v1 = (void *)(v0 + 72);
    unint64_t v8 = *(void (**)(uint64_t, uint64_t))(v0 + 120);
    uint64_t v9 = *(void *)(v0 + 64);
    uint64_t v10 = *(void *)(v0 + 48);
    (*(void (**)(void, uint64_t, uint64_t))(v0 + 96))(*(void *)(v0 + 72), v9, v10);
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    os_signpost_id_t v12 = sub_19EBF6508();
    _os_signpost_emit_with_name_impl(&dword_19E58B000, v2, v3, v12, "CPU :: Data synchronization", v7, v11, 2u);
    MEMORY[0x19F3C3580](v11, -1, -1);

    v8(v9, v10);
  }
  else
  {
  }
  (*(void (**)(void, void))(v0 + 120))(*v1, *(void *)(v0 + 48));
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v13 = *(uint64_t (**)(void))(v0 + 8);
  return v13();
}

uint64_t sub_19E6C55E4()
{
  *(void *)(v1 + 16) = v0;
  return MEMORY[0x1F4188298](sub_19E6C5604, 0, 0);
}

uint64_t sub_19E6C5604()
{
  unint64_t v1 = *(void *)(v0[2] + 16);
  v0[3] = v1;
  switch(v1 >> 62)
  {
    case 1uLL:
      swift_retain();
      uint64_t v6 = (void *)swift_task_alloc();
      v0[5] = v6;
      *uint64_t v6 = v0;
      v6[1] = sub_19E6C596C;
      uint64_t result = sub_19E6C4D14();
      break;
    case 2uLL:
      uint64_t v4 = (uint64_t (*)(void))v0[1];
      uint64_t result = v4();
      break;
    case 3uLL:
      swift_retain();
      uint64_t v5 = (void *)swift_task_alloc();
      v0[6] = v5;
      *uint64_t v5 = v0;
      v5[1] = sub_19E6C5A68;
      void v5[2] = v1 & 0x3FFFFFFFFFFFFFFFLL;
      uint64_t result = MEMORY[0x1F4188298](sub_19E6C5604, 0, 0);
      break;
    default:
      swift_retain();
      uint64_t v2 = (void *)swift_task_alloc();
      v0[4] = v2;
      *uint64_t v2 = v0;
      v2[1] = sub_19E6C580C;
      uint64_t result = sub_19E6C4444();
      break;
  }
  return result;
}

uint64_t sub_19E6C580C()
{
  swift_task_dealloc();
  return MEMORY[0x1F4188298](sub_19E6C5908, 0, 0);
}

uint64_t sub_19E6C5908()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_19E6C596C()
{
  swift_task_dealloc();
  return MEMORY[0x1F4188298](sub_19E6C93F8, 0, 0);
}

uint64_t sub_19E6C5A68()
{
  swift_task_dealloc();
  return MEMORY[0x1F4188298](sub_19E6C93F8, 0, 0);
}

uint64_t sub_19E6C5B64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  uint64_t v5 = (void *)swift_task_alloc();
  v4[6] = v5;
  *uint64_t v5 = v4;
  v5[1] = sub_19E6C5BF8;
  return sub_19E6C4444();
}

uint64_t sub_19E6C5BF8()
{
  swift_task_dealloc();
  return MEMORY[0x1F4188298](sub_19E6C5CF4, 0, 0);
}

uint64_t sub_19E6C5CF4()
{
  uint64_t v1 = (void (*)(id, char *))v0[3];
  uint64_t v2 = *(void **)(v0[5] + 16);
  id v3 = objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
  v1(v3, (char *)objc_msgSend(v2, sel_length) + (void)v3);
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_19E6C5DBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  uint64_t v5 = (void *)swift_task_alloc();
  v4[6] = v5;
  *uint64_t v5 = v4;
  v5[1] = sub_19E6C5E50;
  return sub_19E6C4D14();
}

uint64_t sub_19E6C5E50()
{
  swift_task_dealloc();
  return MEMORY[0x1F4188298](sub_19E6C5F4C, 0, 0);
}

uint64_t sub_19E6C5F4C()
{
  uint64_t v1 = (void (*)(char *, char *))v0[3];
  BaseAddress = (char *)IOSurfaceGetBaseAddress(*(IOSurfaceRef *)(v0[5] + 16));
  uint64_t v3 = sub_19E6C6434();
  v1(BaseAddress, &BaseAddress[v3]);
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_19E6C5FF8(uint64_t (*a1)(uint64_t, uint64_t))
{
  v9[2] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(v1 + 32);
  unint64_t v3 = *(void *)(v1 + 40);
  switch(v3 >> 62)
  {
    case 1uLL:
      if (v2 >> 32 < (int)v2) {
        __break(1u);
      }
      swift_retain();
      sub_19E6C8DB8((int)v2, v2 >> 32, a1);
      uint64_t result = sub_19E5DE7FC(v2, v3);
      break;
    case 2uLL:
      uint64_t v7 = *(void *)(v2 + 16);
      uint64_t v8 = *(void *)(v2 + 24);
      swift_retain();
      swift_retain();
      sub_19E6C8DB8(v7, v8, a1);
      swift_release();
      uint64_t result = swift_release();
      break;
    case 3uLL:
      memset(v9, 0, 14);
      uint64_t v5 = (char *)v9;
      goto LABEL_7;
    default:
      v9[0] = *(void *)(v1 + 32);
      LOWORD(v9[1]) = v3;
      BYTE2(v9[1]) = BYTE2(v3);
      BYTE3(v9[1]) = BYTE3(v3);
      BYTE4(v9[1]) = BYTE4(v3);
      BYTE5(v9[1]) = BYTE5(v3);
      uint64_t v5 = (char *)v9 + BYTE6(v3);
LABEL_7:
      uint64_t result = a1((uint64_t)v9, (uint64_t)v5);
      break;
  }
  return result;
}

uint64_t sub_19E6C61DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  void v5[2] = a1;
  return MEMORY[0x1F4188298](sub_19E6C6204, 0, 0);
}

uint64_t sub_19E6C6204()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 48) + 16);
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 56) = v2;
  *(void *)uint64_t v2 = v0;
  *(void *)(v2 + 8) = sub_19E6C62C4;
  uint64_t v4 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 40);
  long long v5 = *(_OWORD *)(v0 + 16);
  *(void *)(v2 + 40) = v1;
  *(void *)(v2 + 48) = v3;
  *(void *)(v2 + 32) = v4;
  *(_OWORD *)(v2 + 16) = v5;
  return MEMORY[0x1F4188298](sub_19E6C3BFC, 0, 0);
}

uint64_t sub_19E6C62C4()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_19E6C63B8()
{
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = *(char *)(v0 + 48);
  uint64_t v3 = *(void *)(v1 + 16);
  if (v3)
  {
    uint64_t v4 = (uint64_t *)(v1 + 32);
    uint64_t v5 = 1;
    do
    {
      uint64_t v6 = *v4++;
      uint64_t v7 = v5 * v6;
      if ((unsigned __int128)(v5 * (__int128)v6) >> 64 != (v5 * v6) >> 63)
      {
        __break(1u);
        goto LABEL_12;
      }
      uint64_t v5 = v7;
      --v3;
    }
    while (v3);
    if (v2 > 0xA) {
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  uint64_t v7 = 1;
  if (v2 <= 0xA)
  {
LABEL_6:
    uint64_t v8 = qword_19EC3B1C8[v2];
    goto LABEL_9;
  }
LABEL_8:
  uint64_t v8 = 8;
LABEL_9:
  uint64_t result = v7 * v8;
  if ((unsigned __int128)(v7 * (__int128)v8) >> 64 != (v7 * v8) >> 63) {
LABEL_12:
  }
    __break(1u);
  return result;
}

uint64_t sub_19E6C6434()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(char *)(v0 + 32);
  uint64_t v3 = *(void *)(v1 + 16);
  if (v3)
  {
    uint64_t v4 = (uint64_t *)(v1 + 32);
    uint64_t v5 = 1;
    do
    {
      uint64_t v6 = *v4++;
      uint64_t v7 = v5 * v6;
      if ((unsigned __int128)(v5 * (__int128)v6) >> 64 != (v5 * v6) >> 63)
      {
        __break(1u);
        goto LABEL_12;
      }
      uint64_t v5 = v7;
      --v3;
    }
    while (v3);
    if (v2 > 0xA) {
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  uint64_t v7 = 1;
  if (v2 <= 0xA)
  {
LABEL_6:
    uint64_t v8 = qword_19EC3B1C8[v2];
    goto LABEL_9;
  }
LABEL_8:
  uint64_t v8 = 8;
LABEL_9:
  uint64_t result = v7 * v8;
  if ((unsigned __int128)(v7 * (__int128)v8) >> 64 != (v7 * v8) >> 63) {
LABEL_12:
  }
    __break(1u);
  return result;
}

uint64_t sub_19E6C64B0(unint64_t a1)
{
  switch(a1 >> 62)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v1 = (uint64_t *)((a1 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      uint64_t v2 = (char *)((a1 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      break;
    case 2uLL:
      uint64_t v1 = (uint64_t *)((a1 & 0x3FFFFFFFFFFFFFFFLL) + 16);
      uint64_t v2 = (char *)((a1 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      break;
    default:
      uint64_t v1 = (uint64_t *)(a1 + 40);
      uint64_t v2 = (char *)(a1 + 48);
      break;
  }
  uint64_t v3 = *v2;
  uint64_t v4 = *v1;
  uint64_t v5 = *(void *)(v4 + 16);
  if (v5)
  {
    uint64_t v6 = (uint64_t *)(v4 + 32);
    uint64_t v7 = 1;
    while (1)
    {
      uint64_t v8 = *v6++;
      uint64_t v9 = v7 * v8;
      if ((unsigned __int128)(v7 * (__int128)v8) >> 64 != (v7 * v8) >> 63) {
        break;
      }
      uint64_t v7 = v9;
      if (!--v5)
      {
        if (v3 <= 0xA) {
          goto LABEL_10;
        }
LABEL_12:
        uint64_t v10 = 8;
        goto LABEL_13;
      }
    }
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v9 = 1;
  if (v3 > 0xA) {
    goto LABEL_12;
  }
LABEL_10:
  uint64_t v10 = qword_19EC3B1C8[v3];
LABEL_13:
  uint64_t result = v9 * v10;
  if ((unsigned __int128)(v9 * (__int128)v10) >> 64 != (v9 * v10) >> 63)
  {
LABEL_16:
    __break(1u);
    JUMPOUT(0x19E6C6578);
  }
  return result;
}

uint64_t sub_19E6C6588()
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(v0 + 32);
  unint64_t v2 = *(void *)(v0 + 40);
  switch(v2 >> 62)
  {
    case 1uLL:
      if (v1 >> 32 < (int)v1)
      {
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
        goto LABEL_29;
      }
      sub_19E5DE7A4(v1, v2);
      uint64_t v3 = sub_19EBF62E8();
      if (v3)
      {
        uint64_t v4 = sub_19EBF6308();
        if (!__OFSUB__((int)v1, v4))
        {
          v3 += (int)v1 - v4;
          goto LABEL_7;
        }
LABEL_29:
        __break(1u);
      }
LABEL_7:
      uint64_t v5 = sub_19EBF62F8();
      if (v5 >= (v1 >> 32) - (int)v1) {
        uint64_t v6 = (v1 >> 32) - (int)v1;
      }
      else {
        uint64_t v6 = v5;
      }
      uint64_t v7 = (char *)(v3 + v6);
      if (!v3) {
        uint64_t v7 = 0;
      }
      BOOL v20 = (void *)v3;
      uint64_t v21 = v7;
      sub_19E690A14();
      uint64_t v8 = sub_19EBF62C8();
      sub_19E5DE7FC(v1, v2);
      return v8;
    case 2uLL:
      uint64_t v9 = *(void *)(v1 + 16);
      uint64_t v10 = *(void *)(v1 + 24);
      swift_retain();
      swift_retain();
      uint64_t v11 = sub_19EBF62E8();
      if (!v11) {
        goto LABEL_16;
      }
      uint64_t v12 = sub_19EBF6308();
      if (__OFSUB__(v9, v12)) {
        goto LABEL_28;
      }
      v11 += v9 - v12;
LABEL_16:
      BOOL v13 = __OFSUB__(v10, v9);
      uint64_t v14 = v10 - v9;
      if (v13) {
        goto LABEL_27;
      }
      uint64_t v15 = sub_19EBF62F8();
      if (v15 >= v14) {
        uint64_t v16 = v14;
      }
      else {
        uint64_t v16 = v15;
      }
      uint64_t v17 = (char *)(v11 + v16);
      if (!v11) {
        uint64_t v17 = 0;
      }
      BOOL v20 = (void *)v11;
      uint64_t v21 = v17;
      sub_19E690A14();
      uint64_t v8 = sub_19EBF62C8();
      swift_release();
      swift_release();
      return v8;
    case 3uLL:
      memset(v19, 0, 14);
      BOOL v20 = v19;
      uint64_t v21 = (char *)v19;
      goto LABEL_24;
    default:
      v19[0] = *(void *)(v0 + 32);
      LOWORD(v19[1]) = v2;
      BYTE2(v19[1]) = BYTE2(v2);
      BYTE3(v19[1]) = BYTE3(v2);
      BYTE4(v19[1]) = BYTE4(v2);
      BYTE5(v19[1]) = BYTE5(v2);
      BOOL v20 = v19;
      uint64_t v21 = (char *)v19 + BYTE6(v2);
LABEL_24:
      sub_19E690A14();
      return sub_19EBF62C8();
  }
}

uint64_t sub_19E6C681C()
{
  swift_bridgeObjectRelease();
  sub_19E5DE7FC(*(void *)(v0 + 32), *(void *)(v0 + 40));

  return MEMORY[0x1F4186488](v0, 48, 7);
}

uint64_t type metadata accessor for MLTensorData()
{
  return self;
}

uint64_t sub_19E6C6880()
{
  uint64_t v1 = *(void (**)(void))(v0 + 56);
  if (v1) {
    v1(*(void *)(v0 + 16));
  }
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  sub_19E645640(*(void *)(v0 + 56));

  return MEMORY[0x1F4186488](v0, 72, 7);
}

uint64_t type metadata accessor for MetalBufferStorage()
{
  return self;
}

uint64_t sub_19E6C6918()
{
  uint64_t v1 = *(void (**)(void))(v0 + 56);
  if (v1) {
    v1(*(void *)(v0 + 16));
  }

  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  sub_19E645640(*(void *)(v0 + 56));

  return MEMORY[0x1F4186488](v0, 72, 7);
}

uint64_t type metadata accessor for IOSurfaceStorage()
{
  return self;
}

uint64_t sub_19E6C69B0(char a1)
{
  uint64_t v3 = *(__IOSurface **)(v1 + 16);
  IOSurfaceIncrementUseCount(v3);
  uint64_t result = IOSurfaceLock(v3, a1 & 1, 0);
  if (result)
  {
    sub_19EBF7008();
    if (qword_1E945BB28 != -1) {
      swift_once();
    }
    if (byte_1E946A4F1)
    {
      sub_19EBF6FE8();
      sub_19EBF67D8();
      sub_19EBF67D8();
      sub_19EBF67D8();
      sub_19EBF67D8();
    }
    uint64_t result = sub_19EBF71F8();
    __break(1u);
  }
  return result;
}

void sub_19E6C6B30(char a1)
{
  unint64_t v2 = *(__IOSurface **)(v1 + 16);
  if (IOSurfaceUnlock(v2, a1 & 1, 0))
  {
    sub_19EBF7008();
    if (qword_1E945BB28 != -1) {
      swift_once();
    }
    if (byte_1E946A4F1)
    {
      sub_19EBF6FE8();
      sub_19EBF67D8();
      sub_19EBF67D8();
      sub_19EBF67D8();
      sub_19EBF67D8();
    }
    sub_19EBF71F8();
    __break(1u);
  }
  else
  {
    IOSurfaceDecrementUseCount(v2);
  }
}

unint64_t sub_19E6C6CB8@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_19EBF6188();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  switch(a1 >> 62)
  {
    case 1uLL:
      int v57 = 1048584;
      BOOL v13 = *(__IOSurface **)((a1 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
      swift_retain();
      id BaseAddress = IOSurfaceGetBaseAddress(v13);
      sub_19E6C64B0(a1);
      uint64_t v44 = a1 & 0x3FFFFFFFFFFFFFFFLL;
      switch(*(unsigned char *)((a1 & 0x3FFFFFFFFFFFFFFFLL) + 0x20))
      {
        case 1:
          goto LABEL_4;
        case 2:
          goto LABEL_9;
        case 3:
          goto LABEL_10;
        case 4:
          goto LABEL_7;
        case 5:
          goto LABEL_12;
        case 6:
          goto LABEL_13;
        case 7:
          goto LABEL_11;
        case 8:
          goto LABEL_14;
        case 9:
          goto LABEL_8;
        case 0xA:
          goto LABEL_15;
        case 0xB:
          goto LABEL_27;
        default:
          goto LABEL_17;
      }
    case 2uLL:
      MEMORY[0x1F4188790](v8);
      swift_retain();
      sub_19E6C5FF8((uint64_t (*)(uint64_t, uint64_t))sub_19E6C8694);
      swift_release();
      sub_19E5E7C14((uint64_t)&v58, (uint64_t)v59, &qword_1E945C0D0);
      sub_19E5E7C14((uint64_t)v59, (uint64_t)&v60, &qword_1E945C0D0);
      if (sub_19E5E7BF8((uint64_t)&v60) == 1) {
        goto LABEL_19;
      }
      int v15 = v60;
      int v16 = HIDWORD(v60);
      unint64_t v17 = v61;
      unint64_t v18 = v62;
      unint64_t v19 = v63;
      unint64_t v20 = v64;
      unint64_t result = v65;
      uint64_t v22 = v66;
      uint64_t v23 = v67;
      uint64_t v24 = v68;
      unint64_t v25 = v69;
      unint64_t v26 = v70;
      unint64_t v27 = v71;
      unint64_t v28 = v72;
      unint64_t v29 = v73;
      uint64_t v30 = v74;
      uint64_t v31 = v75;
      uint64_t v32 = v76;
      id v33 = v77;
      uint64_t v34 = v78;
      uint64_t v35 = v79;
      int v36 = v80;
      uint64_t v37 = v81;
      LODWORD(v38) = v82;
      break;
    case 3uLL:
LABEL_19:
      unint64_t v60 = 0;
      unint64_t v61 = 0xE000000000000000;
      sub_19EBF6FE8();
      sub_19EBF67D8();
      if (a1 >> 62 == 3) {
        uint64_t v41 = 32;
      }
      else {
        uint64_t v41 = 24;
      }
      uint64_t v42 = swift_bridgeObjectRetain();
      MEMORY[0x19F3BF220](v42, MEMORY[0x1E4FBB550]);
      sub_19EBF67D8();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_19EBF67D8();
      sub_19E6C1A2C(*(unsigned char *)((a1 & 0x3FFFFFFFFFFFFFFFLL) + v41));
      sub_19EBF67D8();
      swift_bridgeObjectRelease();
      sub_19EBF67D8();
      sub_19EBF7008();
      if (qword_1E945BB28 != -1) {
        swift_once();
      }
      if (byte_1E946A4F1)
      {
        unint64_t v60 = 0;
        unint64_t v61 = 0xE000000000000000;
        sub_19EBF6FE8();
        sub_19EBF67D8();
        sub_19EBF67D8();
        sub_19EBF67D8();
LABEL_28:
        sub_19EBF67D8();
      }
      sub_19EBF71F8();
      __break(1u);
      JUMPOUT(0x19E6C73F4);
    default:
      int v57 = 1048584;
      uint64_t v11 = *(void **)(a1 + 16);
      uint64_t v44 = a1 & 0x3FFFFFFFFFFFFFFFLL;
      swift_retain();
      id BaseAddress = objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
      id v12 = v11;
      sub_19E6C63B8();
      switch(*(unsigned char *)(a1 + 48))
      {
        case 1:
LABEL_4:
          int v14 = sub_19EBF6CC8();
          goto LABEL_16;
        case 2:
LABEL_9:
          int v14 = sub_19EBF6CD8();
          goto LABEL_16;
        case 3:
LABEL_10:
          int v14 = sub_19EBF6CE8();
          goto LABEL_16;
        case 4:
LABEL_7:
          int v57 = 262208;
          goto LABEL_17;
        case 5:
LABEL_12:
          int v14 = sub_19EBF6C88();
          goto LABEL_16;
        case 6:
LABEL_13:
          int v14 = sub_19EBF6CA8();
          goto LABEL_16;
        case 7:
LABEL_11:
          int v14 = sub_19EBF6CB8();
          goto LABEL_16;
        case 8:
LABEL_14:
          int v57 = 131136;
          goto LABEL_17;
        case 9:
LABEL_8:
          int v14 = sub_19EBF6CF8();
          goto LABEL_16;
        case 0xA:
LABEL_15:
          int v14 = sub_19EBF6C98();
LABEL_16:
          int v57 = v14;
          goto LABEL_17;
        case 0xB:
LABEL_27:
          unint64_t v60 = 0;
          unint64_t v61 = 0xE000000000000000;
          sub_19EBF6FE8();
          sub_19EBF67D8();
          sub_19E6C1A2C(11);
          sub_19EBF67D8();
          swift_bridgeObjectRelease();
          sub_19EBF67D8();
          v59[0] = 0;
          sub_19EBF7188();
          goto LABEL_28;
        default:
LABEL_17:
          uint64_t v39 = v6;
          (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, a2, v6);
          int v55 = sub_19EBF6168();
          sub_19EBF6158();
          unint64_t v53 = v61;
          unint64_t v54 = v60;
          unint64_t v51 = v63;
          unint64_t v52 = v62;
          uint64_t v49 = v65;
          unint64_t v50 = v64;
          uint64_t v47 = v67;
          uint64_t v48 = v66;
          sub_19EBF6178();
          unint64_t v27 = v62;
          unint64_t v45 = v61;
          unint64_t v46 = v60;
          unint64_t v28 = v63;
          uint64_t v40 = v39;
          unint64_t v29 = v64;
          uint64_t v30 = v65;
          uint64_t v31 = v66;
          uint64_t v32 = v67;
          (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v40);
          swift_release();
          unint64_t v26 = v45;
          unint64_t v25 = v46;
          uint64_t v24 = v47;
          uint64_t v23 = v48;
          uint64_t v22 = v49;
          unint64_t result = v50;
          unint64_t v20 = v51;
          unint64_t v19 = v52;
          unint64_t v18 = v53;
          unint64_t v17 = v54;
          int v16 = v55;
          int v15 = 0;
          uint64_t v35 = 0;
          int v36 = v57;
          LODWORD(v34) = v57;
          unint64_t v38 = &unk_19EC36000;
          uint64_t v37 = 1065353216;
          id v33 = BaseAddress;
          break;
      }
      break;
  }
  *(_DWORD *)a3 = v15;
  *(_DWORD *)(a3 + 4) = v16;
  *(void *)(a3 + 8) = v17;
  *(void *)(a3 + 16) = v18;
  *(void *)(a3 + 24) = v19;
  *(void *)(a3 + 32) = v20;
  *(void *)(a3 + 40) = result;
  *(void *)(a3 + 48) = v22;
  *(void *)(a3 + 56) = v23;
  *(void *)(a3 + 64) = v24;
  *(void *)(a3 + 72) = v25;
  *(void *)(a3 + 80) = v26;
  *(void *)(a3 + 88) = v27;
  *(void *)(a3 + 96) = v28;
  *(void *)(a3 + 104) = v29;
  *(void *)(a3 + 112) = v30;
  *(void *)(a3 + 120) = v31;
  *(void *)(a3 + 128) = v32;
  *(void *)(a3 + 136) = v33;
  *(void *)(a3 + 144) = v34;
  *(void *)(a3 + 152) = v35;
  *(_DWORD *)(a3 + 160) = v36;
  *(void *)(a3 + 164) = v37;
  *(_DWORD *)(a3 + 172) = v38;
  return result;
}

uint64_t sub_19E6C7464@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v24 = a1;
  uint64_t v25 = a4;
  uint64_t v6 = sub_19EBF6188();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v10 = 1048584;
  switch(*(unsigned char *)(a2 + 24))
  {
    case 1:
      int v11 = sub_19EBF6CC8();
      goto LABEL_12;
    case 2:
      int v11 = sub_19EBF6CD8();
      goto LABEL_12;
    case 3:
      int v11 = sub_19EBF6CE8();
      goto LABEL_12;
    case 4:
      int v10 = 262208;
      break;
    case 5:
      int v11 = sub_19EBF6C88();
      goto LABEL_12;
    case 6:
      int v11 = sub_19EBF6CA8();
      goto LABEL_12;
    case 7:
      int v11 = sub_19EBF6CB8();
      goto LABEL_12;
    case 8:
      int v10 = 131136;
      break;
    case 9:
      int v11 = sub_19EBF6CF8();
      goto LABEL_12;
    case 0xA:
      int v11 = sub_19EBF6C98();
LABEL_12:
      int v10 = v11;
      break;
    case 0xB:
      *(void *)unint64_t v26 = 0;
      *(void *)&v26[8] = 0xE000000000000000;
      sub_19EBF6FE8();
      sub_19EBF67D8();
      sub_19E6C1A2C(11);
      sub_19EBF67D8();
      swift_bridgeObjectRelease();
      sub_19EBF67D8();
      char v39 = 0;
      sub_19EBF7188();
      sub_19EBF67D8();
      sub_19EBF71F8();
      __break(1u);
      JUMPOUT(0x19E6C7844);
    default:
      break;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a3, v6);
  int v12 = sub_19EBF6168();
  sub_19EBF6158();
  long long v23 = *(_OWORD *)v26;
  long long v22 = *(_OWORD *)&v26[16];
  long long v21 = *(_OWORD *)&v26[32];
  uint64_t v14 = *(void *)&v26[48];
  uint64_t v13 = v27;
  sub_19EBF6178();
  long long v20 = *(_OWORD *)v26;
  long long v19 = *(_OWORD *)&v26[16];
  long long v18 = *(_OWORD *)&v26[32];
  uint64_t v15 = *(void *)&v26[48];
  uint64_t v16 = v27;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  *(_DWORD *)unint64_t v26 = 0;
  *(_DWORD *)&v26[4] = v12;
  *(_OWORD *)&v26[8] = v23;
  *(_OWORD *)&v26[24] = v22;
  *(_OWORD *)&v26[40] = v21;
  uint64_t v27 = v14;
  uint64_t v28 = v13;
  long long v29 = v20;
  long long v30 = v19;
  long long v31 = v18;
  uint64_t v32 = v15;
  uint64_t v33 = v16;
  uint64_t v34 = v24;
  int v35 = v10;
  uint64_t v36 = 0;
  int v37 = v10;
  uint64_t v38 = 1065353216;
  sub_19E5E7CA0((uint64_t)v26);
  return sub_19E5E7C14((uint64_t)v26, v25, &qword_1E945C0D0);
}

uint64_t sub_19E6C7874()
{
  swift_release();
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186488](v0, 34, 7);
}

uint64_t type metadata accessor for MLTensorStorageView()
{
  return self;
}

uint64_t sub_19E6C78DC()
{
  return swift_initClassMetadata2();
}

void *sub_19E6C7920()
{
  unint64_t v1 = *(void *)(v0 + 16);
  switch(v1 >> 62)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v2 = (v1 & 0x3FFFFFFFFFFFFFFFLL) + 24;
      break;
    case 2uLL:
      uint64_t v2 = (v1 & 0x3FFFFFFFFFFFFFFFLL) + 16;
      break;
    default:
      uint64_t v2 = v1 + 40;
      break;
  }
  uint64_t v3 = *(void *)v2;
  unint64_t v4 = *(void *)(*(void *)v2 + 16);
  if (!v4) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  swift_bridgeObjectRetain();
  uint64_t v5 = (void *)sub_19E60F71C(1uLL, v4);
  char v6 = 0;
  unint64_t v7 = v4 - 2;
  uint64_t v8 = v4 - 3;
  if ((uint64_t)(v4 - 2) >= 1) {
    goto LABEL_9;
  }
LABEL_7:
  if (!((v7 != 0) | v6 & 1))
  {
    uint64_t v8 = 0;
    char v6 = 1;
LABEL_9:
    while (1)
    {
      uint64_t v9 = v7 + 1;
      if ((int64_t)(v7 + 1) >= v5[2]) {
        break;
      }
      if (v9 >= *(void *)(v3 + 16)) {
        goto LABEL_22;
      }
      uint64_t v10 = v9;
      uint64_t v11 = v5[v10 + 4];
      uint64_t v12 = *(void *)(v3 + 32 + v10 * 8);
      uint64_t v13 = v11 * v12;
      if ((unsigned __int128)(v11 * (__int128)v12) >> 64 != (v11 * v12) >> 63) {
        goto LABEL_23;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v5 = sub_19E612754(v5);
      }
      if (v7 >= v5[2]) {
        goto LABEL_24;
      }
      v5[v7 + 4] = v13;
      unint64_t v7 = v8;
      BOOL v14 = __OFSUB__(v8--, 1);
      if (v8 < 0 != v14) {
        goto LABEL_7;
      }
    }
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    JUMPOUT(0x19E6C7A8CLL);
  }
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_19E6C7A9C(unint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  switch(a1 >> 62)
  {
    case 1uLL:
      swift_retain();
      uint64_t v8 = (void *)swift_task_alloc();
      v2[5] = v8;
      *uint64_t v8 = v2;
      v8[1] = sub_19E6C7DEC;
      uint64_t result = sub_19E6C4D14();
      break;
    case 2uLL:
      uint64_t v5 = sub_19E6C7FE4;
      goto LABEL_7;
    case 3uLL:
      uint64_t v6 = a1 & 0x3FFFFFFFFFFFFFFFLL;
      swift_retain();
      unint64_t v7 = (void *)swift_task_alloc();
      v2[6] = v7;
      *unint64_t v7 = v2;
      v7[1] = sub_19E6C7EE8;
      v7[2] = v6;
      uint64_t v5 = sub_19E6C5604;
LABEL_7:
      uint64_t result = MEMORY[0x1F4188298](v5, 0, 0);
      break;
    default:
      swift_retain();
      uint64_t v3 = (void *)swift_task_alloc();
      v2[4] = v3;
      *uint64_t v3 = v2;
      v3[1] = sub_19E6C7C84;
      uint64_t result = sub_19E6C4444();
      break;
  }
  return result;
}

uint64_t sub_19E6C7C84()
{
  swift_task_dealloc();
  return MEMORY[0x1F4188298](sub_19E6C7D80, 0, 0);
}

uint64_t sub_19E6C7D80()
{
  swift_release();
  return MEMORY[0x1F4188298](sub_19E6C7FE4, 0, 0);
}

uint64_t sub_19E6C7DEC()
{
  swift_task_dealloc();
  return MEMORY[0x1F4188298](sub_19E6C93EC, 0, 0);
}

uint64_t sub_19E6C7EE8()
{
  swift_task_dealloc();
  return MEMORY[0x1F4188298](sub_19E6C93EC, 0, 0);
}

uint64_t sub_19E6C7FE4()
{
  *(void *)(*(void *)(v0 + 24) + 16) = *(void *)(v0 + 16);
  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 24));
}

uint64_t sub_19E6C8004(void (*a1)(char *, char *), uint64_t a2, uint64_t a3)
{
  return sub_19E6C8058(v3[2], a1, a2, *(void *)(*v3 + 80), a3, *(void *)(*v3 + 88));
}

uint64_t sub_19E6C8058(unint64_t a1, void (*a2)(char *, char *), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  switch(a1 >> 62)
  {
    case 1uLL:
      uint64_t v16 = a1 & 0x3FFFFFFFFFFFFFFFLL;
      swift_retain();
      sub_19E6C69B0(1);
      id BaseAddress = (char *)IOSurfaceGetBaseAddress(*(IOSurfaceRef *)(v16 + 16));
      uint64_t v18 = sub_19E6C6434();
      a2(BaseAddress, &BaseAddress[v18]);
      sub_19E6C6B30(1);
      break;
    case 2uLL:
      swift_retain();
      sub_19EBF63A8();
      break;
    case 3uLL:
      uint64_t v15 = *(void *)((a1 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
      swift_retain();
      swift_retain();
      sub_19E6C8058(v15, a2, a3, a4, a5, a6);
      swift_release();
      break;
    default:
      uint64_t v9 = *(void **)(a1 + 16);
      swift_retain();
      uint64_t v10 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
      id v11 = v9;
      uint64_t v12 = sub_19E6C63B8();
      a2(v10, &v10[v12]);
      break;
  }
  return swift_release();
}

uint64_t sub_19E6C8234()
{
  sub_19EBF7008();
  if (qword_1E945BB28 != -1) {
    swift_once();
  }
  if (byte_1E946A4F1)
  {
    sub_19EBF6FE8();
    sub_19EBF67D8();
    sub_19EBF67D8();
    sub_19EBF67D8();
    sub_19EBF67D8();
  }
  uint64_t result = sub_19EBF71F8();
  __break(1u);
  return result;
}

uint64_t sub_19E6C837C()
{
  swift_release();

  return MEMORY[0x1F4186488](v0, 24, 7);
}

uint64_t type metadata accessor for MLShapedArrayTensorStorageView()
{
  return __swift_instantiateGenericMetadata();
}

void *initializeBufferWithCopyOfBuffer for MLTensorStorage(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  return a1;
}

uint64_t destroy for MLTensorStorage()
{
  return swift_release();
}

void *assignWithCopy for MLTensorStorage(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  return a1;
}

void *assignWithTake for MLTensorStorage(void *a1, void *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for MLTensorStorage(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7D && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 125);
  }
  unsigned int v3 = (((*(void *)a1 >> 57) >> 5) | (4 * ((*(void *)a1 >> 57) & 0x18 | *(void *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7C) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for MLTensorStorage(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7C)
  {
    *(void *)uint64_t result = a2 - 125;
    if (a3 >= 0x7D) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7D) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 2) & 0x1F | (32 * (-a2 & 0x7F));
      *(void *)uint64_t result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t sub_19E6C8538(void *a1)
{
  return *a1 >> 62;
}

void *sub_19E6C8544(void *result)
{
  *result &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

uint64_t *sub_19E6C8554(uint64_t *result, uint64_t a2)
{
  *uint64_t result = *result & 0xFFFFFFFFFFFFFF8 | (a2 << 62);
  return result;
}

ValueMetadata *type metadata accessor for MLTensorStorage()
{
  return &type metadata for MLTensorStorage;
}

uint64_t sub_19E6C8578()
{
  sub_19E6C8E60();

  return swift_bridgeObjectRetain();
}

uint64_t sub_19E6C85A4(void (*a1)(char *, char *), uint64_t a2, uint64_t a3)
{
  return sub_19E6C8004(a1, a2, a3);
}

uint64_t sub_19E6C85BC()
{
  uint64_t v0 = sub_19E6C8234();
  return sub_19E6C85CC(v0, v1);
}

uint64_t sub_19E6C85CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E945D5A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_19E6C8634(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E945D5A0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_19E6C8694@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_19E6C7464(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

id sub_19E6C86B0(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6 = (IOSurfaceRef *)a1;
  id result = sub_19E6C90A0(a1, a2);
  if (!v3 && !result)
  {
    switch(a3 >> 62)
    {
      case 1uLL:
      case 3uLL:
        uint64_t v8 = (unsigned char *)((a3 & 0x3FFFFFFFFFFFFFFFLL) + 32);
        break;
      case 2uLL:
        uint64_t v8 = (unsigned char *)((a3 & 0x3FFFFFFFFFFFFFFFLL) + 24);
        break;
      default:
        uint64_t v8 = (unsigned char *)(a3 + 48);
        break;
    }
    uint64_t v9 = 131104;
    id result = 0;
    switch(*v8)
    {
      case 7:
        goto LABEL_12;
      case 9:
        uint64_t v9 = 65552;
        goto LABEL_12;
      case 0xA:
        uint64_t v9 = 65568;
        goto LABEL_12;
      case 0xB:
        uint64_t v9 = 65600;
LABEL_12:
        int64_t v10 = *(void *)(a2 + 16);
        if (v10)
        {
          uint64_t v24 = v9;
          uint64_t v25 = v6;
          id v11 = (void *)sub_19E60F71C(1uLL, v10);
          char v12 = 0;
          unint64_t v13 = v10 - 2;
          uint64_t v14 = v10 - 3;
          if (v10 - 2 >= 1) {
            goto LABEL_16;
          }
LABEL_14:
          if (!((v13 != 0) | v12 & 1))
          {
            uint64_t v14 = 0;
            char v12 = 1;
LABEL_16:
            while (1)
            {
              int64_t v15 = v13 + 1;
              if ((int64_t)(v13 + 1) >= v11[2]) {
                break;
              }
              if (v15 >= v10) {
                goto LABEL_29;
              }
              uint64_t v16 = v15;
              uint64_t v17 = v11[v16 + 4];
              uint64_t v18 = *(void *)(a2 + 32 + v16 * 8);
              uint64_t v19 = v17 * v18;
              if ((unsigned __int128)(v17 * (__int128)v18) >> 64 != (v17 * v18) >> 63) {
                goto LABEL_30;
              }
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                id v11 = sub_19E612754(v11);
              }
              if (v13 >= v11[2]) {
                goto LABEL_31;
              }
              v11[v13 + 4] = v19;
              unint64_t v13 = v14;
              BOOL v20 = __OFSUB__(v14--, 1);
              if (v14 < 0 != v20) {
                goto LABEL_14;
              }
            }
            __break(1u);
LABEL_29:
            __break(1u);
LABEL_30:
            __break(1u);
LABEL_31:
            __break(1u);
            JUMPOUT(0x19E6C891CLL);
          }
          uint64_t v6 = v25;
          uint64_t v9 = v24;
        }
        else
        {
          id v11 = (void *)MEMORY[0x1E4FBC860];
        }
        id BaseAddress = IOSurfaceGetBaseAddress(v6[2]);
        uint64_t v22 = sub_19E636F58(a2);
        uint64_t v23 = sub_19E636F58((uint64_t)v11);
        swift_bridgeObjectRelease();
        objc_allocWithZone((Class)MLMultiArray);
        swift_retain();
        id result = sub_19E6C8ACC((uint64_t)BaseAddress, v22, v9, v23, nullsub_1, v6);
        break;
      default:
        return result;
    }
  }
  return result;
}

id sub_19E6C895C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  switch(a3 >> 62)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v5 = (unsigned char *)((a3 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      break;
    case 2uLL:
      uint64_t v5 = (unsigned char *)((a3 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      break;
    default:
      uint64_t v5 = (unsigned char *)(a3 + 48);
      break;
  }
  uint64_t v6 = 131104;
  id v7 = 0;
  switch(*v5)
  {
    case 7:
      goto LABEL_9;
    case 9:
      uint64_t v6 = 65552;
      goto LABEL_9;
    case 0xA:
      uint64_t v6 = 65568;
      goto LABEL_9;
    case 0xB:
      uint64_t v6 = 65600;
LABEL_9:
      uint64_t v8 = sub_19E636F58(a2);
      id v9 = objc_allocWithZone((Class)MLMultiArray);
      uint64_t v10 = v8;
      id v7 = v9;
      id v11 = sub_19E6C8CCC(v10, v6);
      if (!v3)
      {
        id v7 = v11;
        sub_19E6C2718((uint64_t)sub_19E6C9388, a1);
      }
      break;
    default:
      return v7;
  }
  return v7;
}

id sub_19E6C8ACC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  aBlock[6] = *(id *)MEMORY[0x1E4F143B8];
  sub_19E5F47F0();
  id v11 = (void *)sub_19EBF68D8();
  swift_bridgeObjectRelease();
  char v12 = (void *)sub_19EBF68D8();
  swift_bridgeObjectRelease();
  if (a5)
  {
    aBlock[4] = a5;
    aBlock[5] = a6;
    aBlock[0] = (id)MEMORY[0x1E4F143A8];
    aBlock[1] = (id)1107296256;
    aBlock[2] = sub_19E6C8C78;
    aBlock[3] = &block_descriptor_8;
    unint64_t v13 = _Block_copy(aBlock);
    swift_release();
  }
  else
  {
    unint64_t v13 = 0;
  }
  aBlock[0] = 0;
  id v14 = objc_msgSend(v6, sel_initWithDataPointer_shape_dataType_strides_deallocator_error_, a1, v11, a3, v12, v13, aBlock);
  _Block_release(v13);

  if (v14)
  {
    id v15 = aBlock[0];
  }
  else
  {
    id v16 = aBlock[0];
    sub_19EBF6328();

    swift_willThrow();
  }
  return v14;
}

uint64_t sub_19E6C8C78(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);

  return swift_release();
}

id sub_19E6C8CCC(uint64_t a1, uint64_t a2)
{
  v9[1] = *(id *)MEMORY[0x1E4F143B8];
  sub_19E5F47F0();
  uint64_t v4 = (void *)sub_19EBF68D8();
  swift_bridgeObjectRelease();
  v9[0] = 0;
  id v5 = objc_msgSend(v2, sel_initWithShape_dataType_error_, v4, a2, v9);

  if (v5)
  {
    id v6 = v9[0];
  }
  else
  {
    id v7 = v9[0];
    sub_19EBF6328();

    swift_willThrow();
  }
  return v5;
}

uint64_t sub_19E6C8DB8(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t result = sub_19EBF62E8();
  uint64_t v7 = result;
  if (result)
  {
    uint64_t result = sub_19EBF6308();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v7 += a1 - result;
  }
  BOOL v8 = __OFSUB__(a2, a1);
  uint64_t v9 = a2 - a1;
  if (v8)
  {
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v10 = sub_19EBF62F8();
  if (v10 >= v9) {
    uint64_t v11 = v9;
  }
  else {
    uint64_t v11 = v10;
  }
  uint64_t v12 = v7 + v11;
  if (v7) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  return a3(v7, v13);
}

uint64_t sub_19E6C8E60()
{
  unint64_t v1 = *(void *)(v0 + 16);
  switch(v1 >> 62)
  {
    case 1uLL:
    case 3uLL:
      uint64_t result = *(void *)((v1 & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
      break;
    case 2uLL:
      uint64_t result = *(void *)((v1 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
      break;
    default:
      uint64_t result = *(void *)(v1 + 40);
      break;
  }
  return result;
}

void sub_19E6C8EB8(void *a1, __int16 a2, void (*a3)(char *, char *))
{
  uint64_t v9 = a1[2];
  if (v9)
  {
    uint64_t v10 = a1 + 4;
    uint64_t v11 = 1;
    while (1)
    {
      uint64_t v12 = *v10++;
      uint64_t v13 = v11 * v12;
      if ((unsigned __int128)(v11 * (__int128)v12) >> 64 != (v11 * v12) >> 63) {
        break;
      }
      uint64_t v11 = v13;
      if (!--v9) {
        goto LABEL_7;
      }
    }
    __break(1u);
  }
  else
  {
    uint64_t v13 = 1;
LABEL_7:
    if (a2 > 0xAu) {
      uint64_t v14 = 8;
    }
    else {
      uint64_t v14 = qword_19EC3B1C8[(char)a2];
    }
    uint64_t v5 = v13 * v14;
    if ((unsigned __int128)(v13 * (__int128)v14) >> 64 == (v13 * v14) >> 63)
    {
      uint64_t v4 = (void *)MEMORY[0x19F3C1A40]();
      if (qword_1E945BB88 == -1) {
        goto LABEL_12;
      }
      goto LABEL_19;
    }
  }
  __break(1u);
LABEL_19:
  swift_once();
LABEL_12:
  id v15 = (void *)(qword_1E945D0B0 + 16);
  id v16 = (os_unfair_lock_s *)(qword_1E945D0B0 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(qword_1E945D0B0 + 24));
  sub_19E694038(v15, a1, a2 & 0x1FF, 0, 1, &v21);
  if (v3)
  {
    os_unfair_lock_unlock(v16);
    __break(1u);
  }
  else
  {
    os_unfair_lock_unlock(v16);
    uint64_t v17 = v21;
    id BaseAddress = (char *)IOSurfaceGetBaseAddress(v17);
    if (BaseAddress) {
      uint64_t v19 = &BaseAddress[v5];
    }
    else {
      uint64_t v19 = 0;
    }
    a3(BaseAddress, v19);
    type metadata accessor for IOSurfaceStorage();
    uint64_t v20 = swift_allocObject();
    *(unsigned char *)(v20 + 32) = a2;
    *(unsigned char *)(v20 + 33) = HIBYTE(a2) & 1;
    *(void *)(v20 + 16) = v17;
    *(void *)(v20 + 24) = a1;
    *(void *)(v20 + 40) = 0;
    *(void *)(v20 + 48) = 0;
    *(void *)(v20 + 56) = sub_19E683344;
    *(void *)(v20 + 64) = 0;
  }
}

uint64_t block_copy_helper_6(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_6()
{
  return swift_release();
}

id sub_19E6C90A0(uint64_t a1, uint64_t a2)
{
  pixelBufferOut[1] = *(CVPixelBufferRef *)MEMORY[0x1E4F143B8];
  pixelBufferOut[0] = 0;
  id v3 = 0;
  if (CVPixelBufferCreateWithIOSurface(0, *(IOSurfaceRef *)(a1 + 16), 0, pixelBufferOut)) {
    return v3;
  }
  CVPixelBufferRef v4 = pixelBufferOut[0];
  if (!pixelBufferOut[0]) {
    return 0;
  }
  if (CVPixelBufferGetPixelFormatType(pixelBufferOut[0]) != 1278226536) {
    goto LABEL_28;
  }
  int64_t v5 = *(void *)(a2 + 16);
  if (v5)
  {
    sub_19E608E38(v5 - 1, a2);
    unint64_t v9 = (v8 >> 1) - v7;
    if (v8 >> 1 != v7)
    {
      if ((uint64_t)(v8 >> 1) <= v7) {
        goto LABEL_39;
      }
      uint64_t v12 = (uint64_t *)(v6 + 8 * v7);
      uint64_t v13 = 1;
      while (1)
      {
        uint64_t v14 = *v12++;
        uint64_t v10 = v13 * v14;
        if ((unsigned __int128)(v13 * (__int128)v14) >> 64 != (v13 * v14) >> 63) {
          break;
        }
        uint64_t v13 = v10;
        if (!--v9) {
          goto LABEL_12;
        }
      }
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
    }
    uint64_t v10 = 1;
LABEL_12:
    swift_bridgeObjectRetain();
    swift_unknownObjectRelease();
    uint64_t v11 = *(void *)(a2 + 8 * (v5 - 1) + 32);
  }
  else
  {
    uint64_t v11 = 1;
    uint64_t v10 = 1;
  }
  if (CVPixelBufferGetHeight(v4) != v10 || CVPixelBufferGetWidth(v4) != v11)
  {
LABEL_28:

    return 0;
  }
  if (v5)
  {
    long long v29 = v4;
    id v15 = (void *)sub_19E60F71C(1uLL, v5);
    char v16 = 0;
    unint64_t v17 = v5 - 2;
    uint64_t v18 = v5 - 3;
    if (v5 - 2 >= 1) {
      goto LABEL_19;
    }
LABEL_17:
    if (!((v17 != 0) | v16 & 1))
    {
      uint64_t v18 = 0;
      char v16 = 1;
LABEL_19:
      while (1)
      {
        int64_t v19 = v17 + 1;
        if ((int64_t)(v17 + 1) >= v15[2]) {
          break;
        }
        if (v19 >= v5) {
          goto LABEL_35;
        }
        uint64_t v20 = v19;
        uint64_t v21 = v15[v20 + 4];
        uint64_t v22 = *(void *)(a2 + 32 + v20 * 8);
        uint64_t v23 = v21 * v22;
        if ((unsigned __int128)(v21 * (__int128)v22) >> 64 != (v21 * v22) >> 63) {
          goto LABEL_36;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          id v15 = sub_19E612754(v15);
        }
        if (v17 >= v15[2]) {
          goto LABEL_37;
        }
        v15[v17 + 4] = v23;
        unint64_t v17 = v18;
        BOOL v24 = __OFSUB__(v18--, 1);
        if (v18 < 0 != v24) {
          goto LABEL_17;
        }
      }
      __break(1u);
LABEL_35:
      __break(1u);
LABEL_36:
      __break(1u);
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
    CVPixelBufferRef v4 = v29;
  }
  else
  {
    id v15 = (void *)MEMORY[0x1E4FBC860];
  }
  sub_19E636F58(a2);
  sub_19E636F58((uint64_t)v15);
  swift_bridgeObjectRelease();
  id v26 = objc_allocWithZone((Class)MLMultiArray);
  sub_19E5F47F0();
  uint64_t v27 = (void *)sub_19EBF68D8();
  swift_bridgeObjectRelease();
  uint64_t v28 = (void *)sub_19EBF68D8();
  swift_bridgeObjectRelease();
  id v3 = objc_msgSend(v26, sel_initWithPixelBuffer_shape_strides_, v4, v27, v28);

  return v3;
}

uint64_t sub_19E6C9388@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_19E6C6588();
  *a1 = result;
  return result;
}

uint64_t sub_19E6C93B8()
{
  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t sub_19E6C93C8(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_19E6C28D8(a1, a2, a3, *(void *)(v3 + 16), *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(v3 + 24), *(void *)(v3 + 32), *(void *)(v3 + 40));
}

uint64_t sub_19E6C93D4()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_19E6C93E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19E6391B4(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

uint64_t MLTensor.init<A>(_:scalarType:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, void *a3@<X8>)
{
  sub_19E66F568(a2, a2);
  uint64_t v6 = *(void *)(a2 - 8);
  swift_allocObject();
  uint64_t v7 = sub_19EBF6918();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v8, a1, a2);
  uint64_t v11 = sub_19E669D78(v7);
  uint64_t v9 = sub_19EBF69C8();
  swift_getWitnessTable();
  MLTensor.init<A, B>(shape:scalars:scalarType:)(MEMORY[0x1E4FBC860], &v11, a2, v9, &v12);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
  *a3 = v12;
  return result;
}

uint64_t sub_19E6C9564@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  sub_19E66F568(a4, a4);
  uint64_t v10 = *(void *)(a4 - 8);
  swift_allocObject();
  uint64_t v11 = sub_19EBF6918();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v12, a1, a4);
  uint64_t v13 = sub_19E669D78(v11);
  sub_19E6CB63C(MEMORY[0x1E4FBC860], v13, a2, a3, a4);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(a1, a4);
  *a5 = v15;
  return result;
}

uint64_t MLTensor.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (uint64_t *)((char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945BB18);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_19EC36240;
  *(void *)(v9 + 32) = sub_19EBF6BA8();
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v6 + 16))(v8, a1, a2);
  MLTensor.init<A, B>(shape:scalars:scalarType:)(v9, v8, MEMORY[0x1E4FBC150], a2, &v12);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
  *a3 = v12;
  return result;
}

{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;

  uint64_t v6 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945BB18);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_19EC36240;
  *(void *)(v9 + 32) = sub_19EBF6BA8();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, a2);
  MLTensor.init<A>(shape:scalars:)(v9, (uint64_t)v8, a2, &v12);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
  *a3 = v12;
  return result;
}

void *MLTensor.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 64))(a2, a3);
  int64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 72))(a2, a3);
  if (*(void *)(v8 + 16) != *(void *)(v9 + 16))
  {
    swift_bridgeObjectRelease();
LABEL_13:
    uint64_t v18 = swift_bridgeObjectRelease();
    MEMORY[0x1F4188790](v18);
    (*(void (**)(uint64_t *__return_ptr, uint64_t (*)@<X0>(uint64_t *@<X8>)))(a3 + 152))(&v19, sub_19E6CD064);
    goto LABEL_14;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t result = (void *)sub_19E602B54(v9, v8);
  uint64_t v11 = result[2];
  if (!v11)
  {
LABEL_5:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v13 = swift_bridgeObjectRelease();
    MEMORY[0x1F4188790](v13);
    (*(void (**)(uint64_t *__return_ptr, uint64_t (*)@<X0>(uint64_t *@<X8>)))(a3 + 152))(&v19, sub_19E6CD084);
LABEL_14:
    uint64_t result = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8))(a1, a2);
    *a4 = v19;
    return result;
  }
  if (result[4] != 1) {
    goto LABEL_12;
  }
  uint64_t v12 = v11 - 1;
  if (!v12) {
    goto LABEL_5;
  }
  uint64_t v14 = result[5];
  if (result[6] != v14)
  {
LABEL_12:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  uint64_t v15 = result + 7;
  while (1)
  {
    uint64_t v16 = v14 * *v15;
    if ((unsigned __int128)(v14 * (__int128)*v15) >> 64 != v16 >> 63) {
      break;
    }
    if (!--v12) {
      goto LABEL_5;
    }
    uint64_t v17 = v15[1];
    v15 += 2;
    uint64_t v14 = v16;
    if (v17 != v16) {
      goto LABEL_12;
    }
  }
  __break(1u);
  return result;
}

uint64_t MLTensor.init(unsafeUninitializedShape:scalarType:initializingWith:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  if (qword_1E945BB70 != -1) {
    swift_once();
  }
  sub_19EBF75A8();
  uint64_t v6 = (void *)v13[6];
  sub_19E634690(MEMORY[0x1E4FBC860], (uint64_t)v13);
  sub_19E601010(v6);
  uint64_t v7 = v13[4];
  __swift_project_boxed_opaque_existential_1(v13, v13[3]);
  uint64_t v8 = sub_19E6C1448(a2, 0);
  __int16 v9 = MEMORY[0x1F4188790](v8);
  uint64_t v10 = (*(uint64_t (**)(uint64_t, void, uint64_t (*)()))(v7 + 8))(a1, v9 & 0x1FF, sub_19E6CD0A4);
  swift_bridgeObjectRelease();
  uint64_t result = __swift_destroy_boxed_opaque_existential_0((uint64_t)v13);
  if (!v3) {
    *a3 = v10;
  }
  return result;
}

uint64_t sub_19E6C9BCC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

uint64_t MLTensor.init<A>(shape:scalars:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v8 = *(void *)(a3 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](a1);
  uint64_t v11 = (uint64_t *)((char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = *(void *)(v9 + 16);
  if (v12)
  {
    uint64_t v13 = (uint64_t *)(a1 + 32);
    uint64_t v14 = 1;
    uint64_t v15 = *(void *)(v9 + 16);
    while (1)
    {
      uint64_t v16 = *v13++;
      uint64_t v17 = v14 * v16;
      if ((unsigned __int128)(v14 * (__int128)v16) >> 64 != (v14 * v16) >> 63) {
        break;
      }
      uint64_t v14 = v17;
      if (!--v15) {
        goto LABEL_7;
      }
    }
    __break(1u);
  }
  else
  {
    uint64_t v17 = 1;
LABEL_7:
    if (v17 == sub_19EBF6BA8())
    {
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(v8 + 16))(v11, a2, a3);
      MLTensor.init<A, B>(shape:scalars:scalarType:)(a1, v11, MEMORY[0x1E4FBB470], a3, v25);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(a2, a3);
      *a4 = v25[0];
      return result;
    }
  }
  v25[0] = 0;
  v25[1] = 0xE000000000000000;
  sub_19EBF6FE8();
  sub_19EBF67D8();
  if (v12)
  {
    uint64_t v19 = (uint64_t *)(a1 + 32);
    uint64_t v20 = 1;
    while (1)
    {
      uint64_t v21 = *v19++;
      uint64_t v22 = v20 * v21;
      if ((unsigned __int128)(v20 * (__int128)v21) >> 64 != (v20 * v21) >> 63) {
        break;
      }
      uint64_t v20 = v22;
      if (!--v12) {
        goto LABEL_17;
      }
    }
    __break(1u);
  }
  uint64_t v22 = 1;
LABEL_17:
  uint64_t v24 = v22;
  sub_19EBF7318();
  sub_19EBF67D8();
  swift_bridgeObjectRelease();
  sub_19EBF67D8();
  uint64_t v24 = sub_19EBF6BA8();
  sub_19EBF7318();
  sub_19EBF67D8();
  swift_bridgeObjectRelease();
  sub_19EBF67D8();
  uint64_t result = sub_19EBF71F8();
  __break(1u);
  return result;
}

uint64_t MLTensor.init<A, B>(shape:scalars:scalarType:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t *a5@<X8>)
{
  uint64_t v10 = *(void *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = (uint64_t *)(a1 + 32);
    uint64_t v12 = 1;
    uint64_t v13 = *(void *)(a1 + 16);
    while (1)
    {
      uint64_t v14 = *v11++;
      uint64_t v15 = v12 * v14;
      if ((unsigned __int128)(v12 * (__int128)v14) >> 64 != (v12 * v14) >> 63) {
        break;
      }
      uint64_t v12 = v15;
      if (!--v13) {
        goto LABEL_7;
      }
    }
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v15 = 1;
LABEL_7:
  uint64_t v16 = sub_19EBF6BA8();
  if (v15 == v16)
  {
    uint64_t v27 = (uint64_t)&v27;
    uint64_t v28 = a5;
    MEMORY[0x1F4188790](v16);
    a5 = a2;
    if (qword_1E945BB70 == -1)
    {
LABEL_9:
      sub_19EBF75A8();
      uint64_t v17 = (void *)v29[5];
      sub_19E634690(MEMORY[0x1E4FBC860], (uint64_t)v29);
      sub_19E601010(v17);
      uint64_t v18 = v29[4];
      __swift_project_boxed_opaque_existential_1(v29, v29[3]);
      uint64_t v19 = sub_19E6C1448(a3, 0);
      __int16 v20 = MEMORY[0x1F4188790](v19);
      uint64_t v21 = (*(uint64_t (**)(uint64_t, void, uint64_t (*)()))(v18 + 8))(a1, v20 & 0x1FF, sub_19E6D0360);
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v29);
      uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(*(void *)(a4 - 8) + 8))(a5, a4);
      *uint64_t v28 = v21;
      return result;
    }
LABEL_11:
    swift_once();
    goto LABEL_9;
  }
  v29[0] = 0;
  v29[1] = 0xE000000000000000;
  sub_19EBF6FE8();
  sub_19EBF67D8();
  if (v10)
  {
    uint64_t v23 = (uint64_t *)(a1 + 32);
    uint64_t v24 = 1;
    while (1)
    {
      uint64_t v25 = *v23++;
      uint64_t v26 = v24 * v25;
      if ((unsigned __int128)(v24 * (__int128)v25) >> 64 != (v24 * v25) >> 63) {
        break;
      }
      uint64_t v24 = v26;
      if (!--v10) {
        goto LABEL_18;
      }
    }
    __break(1u);
  }
LABEL_18:
  sub_19EBF7318();
  sub_19EBF67D8();
  swift_bridgeObjectRelease();
  sub_19EBF67D8();
  sub_19EBF6BA8();
  sub_19EBF7318();
  sub_19EBF67D8();
  swift_bridgeObjectRelease();
  sub_19EBF67D8();
  uint64_t result = sub_19EBF71F8();
  __break(1u);
  return result;
}

uint64_t sub_19E6CA28C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (!result)
  {
    uint64_t v8 = 0;
    return sub_19E6CA314(a3, result, v8, a4, a5, a7);
  }
  uint64_t v7 = *(void *)(*(void *)(a4 - 8) + 72);
  if (v7)
  {
    if (a2 - result != 0x8000000000000000 || v7 != -1)
    {
      uint64_t v8 = (a2 - result) / v7;
      return sub_19E6CA314(a3, result, v8, a4, a5, a7);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_19E6CA314(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = sub_19EBF6E68();
  uint64_t v30 = *(void *)(v12 - 8);
  uint64_t v31 = v12;
  uint64_t v13 = MEMORY[0x1F4188790](v12);
  long long v29 = (char *)&v24 - v14;
  uint64_t v25 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v26 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v19 = (char *)&v24 - v18;
  uint64_t v27 = a2;
  uint64_t v28 = a4;
  uint64_t v32 = a4;
  uint64_t v33 = a5;
  uint64_t v34 = a6;
  uint64_t v35 = a2;
  uint64_t v36 = a3;
  sub_19EBF6828();
  if (v38 != 1) {
    return v37;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v16, a1, a5);
  uint64_t v20 = sub_19EBF6808();
  swift_getAssociatedConformanceWitness();
  uint64_t v21 = v29;
  sub_19EBF6EB8();
  (*(void (**)(char *, uint64_t))(v26 + 8))(v19, AssociatedTypeWitness);
  int v22 = (*(uint64_t (**)(char *, uint64_t))(*(void *)(v28 - 8) + 48))(v21, 1);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v21, v31);
  if (v22 != 1)
  {
    __break(1u);
    return v37;
  }
  return v20;
}

uint64_t MLTensor.init<A, B>(_:scalarType:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v10 = (uint64_t *)((char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945BB18);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_19EC36240;
  *(void *)(v11 + 32) = sub_19EBF6BA8();
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v8 + 16))(v10, a1, a3);
  MLTensor.init<A, B>(shape:scalars:scalarType:)(v11, v10, a2, a3, &v14);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(a1, a3);
  *a4 = v14;
  return result;
}

uint64_t MLTensor.init(repeating:shape:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>, float a3@<S0>)
{
  float v11 = a3;
  if (qword_1E945BB70 != -1) {
    swift_once();
  }
  sub_19EBF75A8();
  sub_19E634690(MEMORY[0x1E4FBC860], (uint64_t)v10);
  sub_19E601010(v9);
  uint64_t v5 = v10[4];
  uint64_t v6 = __swift_project_boxed_opaque_existential_1(v10, v10[3]);
  MEMORY[0x1F4188790](v6);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)()))(v5 + 8))(a1, 10, sub_19E6D0360);
  swift_bridgeObjectRelease();
  uint64_t result = __swift_destroy_boxed_opaque_existential_0((uint64_t)v10);
  *a2 = v7;
  return result;
}

uint64_t MLTensor.init<A>(repeating:shape:scalarType:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  if (qword_1E945BB70 != -1) {
    swift_once();
  }
  sub_19EBF75A8();
  sub_19E634690(MEMORY[0x1E4FBC860], (uint64_t)v16);
  sub_19E601010(v15);
  uint64_t v10 = v16[4];
  __swift_project_boxed_opaque_existential_1(v16, v16[3]);
  uint64_t v11 = sub_19E6C1448(a3, 0);
  __int16 v12 = MEMORY[0x1F4188790](v11);
  uint64_t v13 = (*(uint64_t (**)(uint64_t, void, uint64_t (*)()))(v10 + 8))(a2, v12 & 0x1FF, sub_19E6D0360);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v16);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a4 - 8) + 8))(a1, a4);
  *a5 = v13;
  return result;
}

int32x4_t *sub_19E6CABE0(int32x4_t *result, uint64_t a2, int32x2_t a3)
{
  if (result)
  {
    if (a2 - (uint64_t)result >= 0) {
      uint64_t v3 = a2 - (void)result;
    }
    else {
      uint64_t v3 = a2 - (void)result + 3;
    }
    if (a2 - (uint64_t)result < -3)
    {
      __break(1u);
      return result;
    }
    if ((unint64_t)(a2 - (void)result + 3) >= 7)
    {
      uint64_t v4 = v3 >> 2;
      if ((unint64_t)(v3 >> 2) < 8)
      {
        unint64_t v5 = 0;
        uint64_t v6 = result;
LABEL_12:
        unint64_t v10 = v4 - v5;
        do
        {
          v6->i32[0] = a3.i32[0];
          uint64_t v6 = (int32x4_t *)((char *)v6 + 4);
          --v10;
        }
        while (v10);
        return result;
      }
      unint64_t v5 = v4 & 0xFFFFFFFFFFFFFFF8;
      uint64_t v6 = (int32x4_t *)((char *)result + 4 * (v4 & 0xFFFFFFFFFFFFFFF8));
      int32x4_t v7 = vdupq_lane_s32(a3, 0);
      uint64_t v8 = result + 1;
      unint64_t v9 = v4 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        v8[-1] = v7;
        *uint64_t v8 = v7;
        v8 += 2;
        v9 -= 8;
      }
      while (v9);
      if (v4 != v5) {
        goto LABEL_12;
      }
    }
  }
  return result;
}

uint64_t MLTensor.init<A>(zeros:scalarType:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  return sub_19E6CAC78(a1, a2, a3, a4);
}

{
  return sub_19E6CAD60(a1, a2, a3, a4);
}

uint64_t MLTensor.init<A>(ones:scalarType:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  return sub_19E6CAC78(a1, a2, a3, a4);
}

{
  return sub_19E6CAD60(a1, a2, a3, a4);
}

uint64_t sub_19E6CAC78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  MEMORY[0x1F4188790](a1);
  unint64_t v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = v10;
  sub_19E5FEFB8();
  sub_19EBF6F58();
  uint64_t result = MLTensor.init<A>(repeating:shape:scalarType:)((uint64_t)v9, a1, a2, a3, &v13);
  *a4 = v13;
  return result;
}

uint64_t sub_19E6CAD60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  MEMORY[0x1F4188790](a1);
  unint64_t v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_19EBF6688();
  uint64_t result = MLTensor.init<A>(repeating:shape:scalarType:)((uint64_t)v9, a1, a2, a3, &v12);
  *a4 = v12;
  return result;
}

void MLTensor.init(rangeFrom:to:by:)(void *a1@<X8>, float a2@<S0>, float a3@<S1>, float a4@<S2>)
{
  if (a4 == 0.0)
  {
    __break(1u);
  }
  else
  {
    v10[3] = v4;
    v10[4] = v5;
    sub_19E6CDC20(a2, a3, a4);
    uint64_t v8 = v7;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E945BB18);
    uint64_t v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_19EC36240;
    *(void *)(v9 + 32) = *(void *)(v8 + 16);
    sub_19E60B13C(v9, v8, v10);
    *a1 = v10[0];
  }
}

uint64_t MLTensor.init<A>(rangeFrom:to:by:scalarType:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, void *a5@<X8>)
{
  uint64_t v10 = sub_19EBF7568();
  MEMORY[0x1F4188790](v10);
  sub_19EBF7508();
  swift_getWitnessTable();
  uint64_t v15 = sub_19EBF69D8();
  uint64_t v11 = sub_19EBF69C8();
  swift_getWitnessTable();
  MLTensor.init<A, B>(_:scalarType:)((uint64_t)&v15, a4, v11, a5);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8))(a3, AssociatedTypeWitness);
  uint64_t v13 = *(void (**)(uint64_t, uint64_t))(*(void *)(a4 - 8) + 8);
  v13(a2, a4);
  return ((uint64_t (*)(uint64_t, uint64_t))v13)(a1, a4);
}

uint64_t MLTensor.init(linearSpaceFrom:through:count:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>, float a3@<S0>, float a4@<S1>)
{
  uint64_t result = sub_19E6CB0B0(a1, &v6, a3, a4);
  *a2 = v6;
  return result;
}

uint64_t sub_19E6CB0B0@<X0>(uint64_t a1@<X0>, void *a2@<X8>, float a3@<S0>, float a4@<S1>)
{
  float v12 = a3;
  if (a1 < 2)
  {
    uint64_t result = sub_19EBF71F8();
    __break(1u);
  }
  else
  {
    float v11 = (float)(a4 - a3) / (float)(a1 - 1);
    MEMORY[0x1F4188790](a1);
    id v9[2] = &v12;
    void v9[3] = &v11;
    uint64_t v6 = sub_19E67779C(sub_19E6CDFC0, (uint64_t)v9, 0, v5);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E945BB18);
    uint64_t v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = xmmword_19EC36240;
    *(void *)(v7 + 32) = v6[2];
    uint64_t result = sub_19E60B13C(v7, (uint64_t)v6, &v10);
    *a2 = v10;
  }
  return result;
}

uint64_t MLTensor.init<A>(linearSpaceFrom:through:count:scalarType:)@<X0>(char *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, void *a6@<X8>)
{
  uint64_t v32 = a4;
  uint64_t v33 = a6;
  uint64_t v10 = *(void *)(a3 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](a1);
  uint64_t v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x1F4188790](v11);
  uint64_t v16 = (char *)&v30 - v15;
  MEMORY[0x1F4188790](v14);
  uint64_t v19 = (char *)&v30 - v18;
  if (v20 < 2)
  {
    uint64_t result = sub_19EBF71F8();
    __break(1u);
  }
  else
  {
    uint64_t v31 = v17;
    sub_19EBF7218();
    sub_19EBF6688();
    sub_19EBF6668();
    uint64_t v21 = *(void (**)(char *, uint64_t))(v10 + 8);
    v21(v13, a3);
    uint64_t v22 = ((uint64_t (*)(char *, uint64_t))v21)(v16, a3);
    v35[0] = 0;
    v35[1] = a2;
    MEMORY[0x1F4188790](v22);
    uint64_t v23 = v32;
    *(&v30 - 6) = a3;
    *(&v30 - 5) = v23;
    *(&v30 - 4) = a5;
    *(&v30 - 3) = (uint64_t)a1;
    long long v29 = v19;
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E945CE60);
    unint64_t v25 = sub_19E5FE964();
    uint64_t v34 = sub_19E5F7AC4((void (*)(char *, char *))sub_19E6CDF20, (uint64_t)(&v30 - 8), v24, a3, MEMORY[0x1E4FBC248], v25, MEMORY[0x1E4FBC278], v26);
    uint64_t v27 = sub_19EBF69C8();
    swift_getWitnessTable();
    MLTensor.init<A, B>(_:scalarType:)((uint64_t)&v34, a3, v27, v35);
    v21(v31, a3);
    v21(a1, a3);
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v21)(v19, a3);
    *uint64_t v33 = v35[0];
  }
  return result;
}

uint64_t sub_19E6CB4DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)v13 - v9;
  sub_19EBF6688();
  sub_19EBF6B48();
  uint64_t v11 = *(void (**)(char *, uint64_t))(v5 + 8);
  v11(v8, a4);
  sub_19EBF7208();
  return ((uint64_t (*)(char *, uint64_t))v11)(v10, a4);
}

uint64_t sub_19E6CB63C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *(void **)(a5 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](a1);
  uint64_t v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *(void *)(v10 + 16);
  if (v16)
  {
    uint64_t v17 = (uint64_t *)(a1 + 32);
    uint64_t v18 = 1;
    while (1)
    {
      uint64_t v19 = *v17++;
      uint64_t v20 = v18 * v19;
      if ((unsigned __int128)(v18 * (__int128)v19) >> 64 != (v18 * v19) >> 63) {
        break;
      }
      uint64_t v18 = v20;
      if (!--v16) {
        goto LABEL_7;
      }
    }
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v20 = 1;
LABEL_7:
  uint64_t v21 = v12;
  uint64_t v35 = v11;
  uint64_t v36 = v13;
  uint64_t v22 = MEMORY[0x19F3BF2D0](a2, a5);
  if (v20 == v22)
  {
    v37[0] = a2;
    uint64_t v23 = sub_19EBF69C8();
    swift_getWitnessTable();
    if ((sub_19EBF6C48() & 1) == 0)
    {
      sub_19EBF69E8();
      uint64_t DynamicType = swift_getDynamicType();
      uint64_t v25 = ((uint64_t (*)(char *, uint64_t))v9[1])(v15, a5);
      if (DynamicType == a3)
      {
        char v38 = (void *)a2;
        uint64_t result = MLTensor.init<A, B>(shape:scalars:scalarType:)(a1, (uint64_t *)&v38, a5, v23, v37);
        uint64_t v30 = v37[0];
        goto LABEL_13;
      }
      MEMORY[0x1F4188790](v25);
      uint64_t v9 = &v35 - 8;
      *(&v35 - 6) = (void *)a5;
      *(&v35 - 5) = v21;
      *(&v35 - 4) = (void *)a2;
      *(&v35 - 3) = (void *)DynamicType;
      uint64_t v33 = a3;
      uint64_t v34 = v35;
      if (qword_1E945BB70 == -1)
      {
LABEL_11:
        sub_19EBF75A8();
        uint64_t v26 = v38;
        sub_19E634690(MEMORY[0x1E4FBC860], (uint64_t)v37);
        sub_19E601010(v26);
        uint64_t v27 = v37[4];
        __swift_project_boxed_opaque_existential_1(v37, v37[3]);
        uint64_t v28 = sub_19E6C1448(a3, 0);
        __int16 v29 = MEMORY[0x1F4188790](v28);
        uint64_t v33 = (uint64_t)sub_19E6CE0A8;
        uint64_t v34 = v9;
        uint64_t v30 = (*(uint64_t (**)(uint64_t, void, uint64_t (*)()))(v27 + 8))(a1, v29 & 0x1FF, sub_19E6D0360);
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v37);
        uint64_t result = swift_bridgeObjectRelease();
LABEL_13:
        *uint64_t v36 = v30;
        return result;
      }
LABEL_15:
      swift_once();
      goto LABEL_11;
    }
    LODWORD(v34) = 0;
    uint64_t v33 = 266;
  }
  else
  {
    v37[0] = 0;
    v37[1] = 0xE000000000000000;
    uint64_t v32 = v22;
    sub_19EBF6FE8();
    sub_19EBF67D8();
    char v38 = (void *)v20;
    sub_19EBF7318();
    sub_19EBF67D8();
    swift_bridgeObjectRelease();
    sub_19EBF67D8();
    char v38 = (void *)v32;
    sub_19EBF7318();
    sub_19EBF67D8();
    swift_bridgeObjectRelease();
    sub_19EBF67D8();
    LODWORD(v34) = 0;
    uint64_t v33 = 263;
  }
  uint64_t result = sub_19EBF71F8();
  __break(1u);
  return result;
}

uint64_t sub_19E6CBABC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v21 = a4;
  uint64_t v22 = a5;
  uint64_t v19 = a1;
  uint64_t v20 = a2;
  uint64_t v12 = sub_19EBF7348();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  LOWORD(a3) = sub_19E6C1448(a3, 0);
  __int16 v16 = sub_19E6C1448(a6, 0);
  unint64_t v17 = MEMORY[0x19F3BF2D0](a8, a9);
  (*(void (**)(char *, void, uint64_t))(v13 + 104))(v15, *MEMORY[0x1E4FBBE88], v12);
  sub_19E6B60D0(v19, v20, a3 & 0x1FF, v21, v22, v16 & 0x1FF, v17, (uint64_t)v15);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
}

uint64_t MLTensor.init(floatLiteral:)@<X0>(uint64_t *a1@<X8>)
{
  if (qword_1E945BB70 != -1) {
    swift_once();
  }
  sub_19EBF75A8();
  uint64_t v2 = MEMORY[0x1E4FBC860];
  sub_19E634690(MEMORY[0x1E4FBC860], (uint64_t)v8);
  sub_19E601010(v7);
  uint64_t v3 = v8[4];
  uint64_t v4 = __swift_project_boxed_opaque_existential_1(v8, v8[3]);
  MEMORY[0x1F4188790](v4);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(float *, uint64_t)))(v3 + 8))(v2, 266, sub_19E6CDF48);
  uint64_t result = __swift_destroy_boxed_opaque_existential_0((uint64_t)v8);
  *a1 = v5;
  return result;
}

uint64_t sub_19E6CBD74(float *a1, uint64_t a2, float a3)
{
  if (a1) {
    uint64_t v5 = (a2 - (uint64_t)a1) / 4;
  }
  else {
    uint64_t v5 = 0;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945CF00);
  uint64_t inited = swift_initStackObject();
  *(float *)(inited + 32) = a3;
  if (!a1) {
LABEL_12:
  }
    __break(1u);
  if (v5 < 1)
  {
    __break(1u);
    goto LABEL_12;
  }
  if (inited + 32 < (unint64_t)(a1 + 1) && inited + 36 > (unint64_t)a1)
  {
    uint64_t result = sub_19EBF7278();
    __break(1u);
  }
  else
  {
    *a1 = a3;
    return swift_setDeallocating();
  }
  return result;
}

uint64_t sub_19E6CBE94@<X0>(uint64_t *a1@<X8>)
{
  return MLTensor.init(floatLiteral:)(a1);
}

uint64_t MLTensor.init(integerLiteral:)@<X0>(uint64_t *a1@<X8>)
{
  if (qword_1E945BB70 != -1) {
    swift_once();
  }
  sub_19EBF75A8();
  uint64_t v2 = MEMORY[0x1E4FBC860];
  sub_19E634690(MEMORY[0x1E4FBC860], (uint64_t)v8);
  sub_19E601010(v7);
  uint64_t v3 = v8[4];
  uint64_t v4 = __swift_project_boxed_opaque_existential_1(v8, v8[3]);
  MEMORY[0x1F4188790](v4);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(_DWORD *, uint64_t)))(v3 + 8))(v2, 263, sub_19E6CDF64);
  uint64_t result = __swift_destroy_boxed_opaque_existential_0((uint64_t)v8);
  *a1 = v5;
  return result;
}

uint64_t sub_19E6CBFD0(_DWORD *a1, uint64_t a2, int a3)
{
  if (a1) {
    uint64_t v5 = (a2 - (uint64_t)a1) / 4;
  }
  else {
    uint64_t v5 = 0;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945CEB8);
  uint64_t inited = swift_initStackObject();
  *(_DWORD *)(inited + 32) = a3;
  if (!a1) {
LABEL_12:
  }
    __break(1u);
  if (v5 < 1)
  {
    __break(1u);
    goto LABEL_12;
  }
  if (inited + 32 < (unint64_t)(a1 + 1) && inited + 36 > (unint64_t)a1)
  {
    uint64_t result = sub_19EBF7278();
    __break(1u);
  }
  else
  {
    *a1 = a3;
    return swift_setDeallocating();
  }
  return result;
}

uint64_t sub_19E6CC0E8@<X0>(uint64_t *a1@<X8>)
{
  return MLTensor.init(integerLiteral:)(a1);
}

uint64_t MLTensor.init(BOOLeanLiteral:)@<X0>(char a1@<W0>, void *a2@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945D610);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19EC36240;
  *(unsigned char *)(inited + 32) = a1;
  uint64_t result = sub_19E60B7AC(MEMORY[0x1E4FBC860], inited, &v6);
  *a2 = v6;
  return result;
}

uint64_t sub_19E6CC15C@<X0>(char *a1@<X0>, void *a2@<X8>)
{
  char v3 = *a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945D610);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19EC36240;
  *(unsigned char *)(inited + 32) = v3;
  uint64_t result = sub_19E60B7AC(MEMORY[0x1E4FBC860], inited, &v6);
  *a2 = v6;
  return result;
}

uint64_t sub_19E6CC1C8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = swift_bridgeObjectRetain();
  return MLTensor.init(unsafeUninitializedShape:scalarType:initializingWith:)(v3, AssociatedTypeWitness, a1);
}

uint64_t sub_19E6CC288(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    goto LABEL_5;
  }
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = AssociatedTypeWitness - 8;
  uint64_t v7 = *(void *)(v6 + 72);
  if (v7)
  {
    if (a2 - a1 != 0x8000000000000000 || v7 != -1)
    {
LABEL_5:
      swift_getAssociatedTypeWitness();
      sub_19EBF6778();
      swift_getWitnessTable();
      sub_19EBF6C28();
      sub_19EBF7458();
      swift_getWitnessTable();
      return sub_19EBF6E78();
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_19E6CC414@<X0>(uint64_t *a1@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = swift_bridgeObjectRetain();
  return MLTensor.init(unsafeUninitializedShape:scalarType:initializingWith:)(v3, AssociatedTypeWitness, a1);
}

uint64_t sub_19E6CC4E4(uint64_t result, uint64_t a2, void *a3, void *a4)
{
  int64_t v4 = a3[2];
  if (v4 != a4[2])
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  uint64_t v8 = result;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v24 = sub_19E60F71C(0, v4);
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v25 = v8;
  if (v4)
  {
    uint64_t v23 = a2;
    uint64_t result = sub_19E60F71C(1uLL, v4);
    uint64_t v9 = (void *)result;
    char v10 = 0;
    unint64_t v11 = v4 - 2;
    uint64_t v12 = v4 - 3;
    if (v4 - 2 >= 1) {
      goto LABEL_6;
    }
LABEL_4:
    if (!((v11 != 0) | v10 & 1))
    {
      uint64_t v12 = 0;
      char v10 = 1;
LABEL_6:
      while (1)
      {
        int64_t v13 = v11 + 1;
        if ((int64_t)(v11 + 1) >= v9[2]) {
          break;
        }
        if (v13 >= v4) {
          goto LABEL_28;
        }
        uint64_t v14 = v13;
        uint64_t v15 = v9[v14 + 4];
        uint64_t v16 = a3[v14 + 4];
        uint64_t v17 = v15 * v16;
        if ((unsigned __int128)(v15 * (__int128)v16) >> 64 != (v15 * v16) >> 63) {
          goto LABEL_29;
        }
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)sub_19E612754(v9);
          uint64_t v9 = (void *)result;
        }
        if (v11 >= v9[2]) {
          goto LABEL_30;
        }
        v9[v11 + 4] = v17;
        unint64_t v11 = v12;
        BOOL v18 = __OFSUB__(v12--, 1);
        if (v12 < 0 != v18) {
          goto LABEL_4;
        }
      }
      __break(1u);
LABEL_28:
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      __break(1u);
      goto LABEL_31;
    }
    uint64_t v8 = v25;
    a2 = v23;
  }
  else
  {
    uint64_t v9 = (void *)MEMORY[0x1E4FBC860];
  }
  if (v4 != v9[2])
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  uint64_t v19 = sub_19E60F71C(0, v4);
  if (v8)
  {
    uint64_t result = swift_getAssociatedTypeWitness();
    uint64_t v20 = *(void *)(*(void *)(result - 8) + 72);
    if (!v20)
    {
LABEL_33:
      __break(1u);
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
    uint64_t AssociatedTypeWitness = result;
    if (a2 - v8 == 0x8000000000000000 && v20 == -1) {
      goto LABEL_34;
    }
  }
  else
  {
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  }
  uint64_t result = sub_19EBF6758();
  if (!result)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  uint64_t v22 = result;
  uint64_t result = sub_19EBF6758();
  if (result)
  {
    sub_19E6B3D30(v24, (uint64_t)a3, a4, v19, a3, v9, v22, result, AssociatedTypeWitness);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    return swift_bridgeObjectRelease();
  }
LABEL_36:
  __break(1u);
  return result;
}

uint64_t MLTensor.init(shape:data:scalarType:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  switch(a3 >> 62)
  {
    case 1uLL:
      if (!((a2 ^ (unint64_t)(a2 << 32)) >> 32)) {
        goto LABEL_30;
      }
      goto LABEL_11;
    case 2uLL:
      uint64_t v11 = *(void *)(a2 + 16);
      uint64_t v12 = *(void *)(a2 + 24);
      if (v11 == v12) {
        goto LABEL_30;
      }
      if (a3 >> 62 != 2) {
        goto LABEL_11;
      }
      uint64_t v10 = v12 - v11;
      if (!__OFSUB__(v12, v11)) {
        goto LABEL_13;
      }
      __break(1u);
LABEL_11:
      if (__OFSUB__(HIDWORD(a2), a2))
      {
        __break(1u);
        goto LABEL_30;
      }
      uint64_t v10 = HIDWORD(a2) - (int)a2;
LABEL_13:
      uint64_t v13 = sub_19E6C1448(a4, 0);
      uint64_t v14 = *(void *)(a1 + 16);
      if (v14)
      {
        uint64_t v15 = (uint64_t *)(a1 + 32);
        uint64_t v16 = 1;
        while (1)
        {
          uint64_t v17 = *v15++;
          uint64_t v18 = v16 * v17;
          if ((unsigned __int128)(v16 * (__int128)v17) >> 64 != (v16 * v17) >> 63) {
            break;
          }
          uint64_t v16 = v18;
          if (!--v14) {
            goto LABEL_19;
          }
        }
        __break(1u);
LABEL_27:
        __break(1u);
        goto LABEL_28;
      }
      uint64_t v18 = 1;
LABEL_19:
      if (v13 > 0xAu) {
        uint64_t v19 = 8;
      }
      else {
        uint64_t v19 = qword_19EC3B2C8[(char)v13];
      }
      if ((unsigned __int128)(v18 * (__int128)v19) >> 64 != (v18 * v19) >> 63) {
        goto LABEL_27;
      }
      if (v10 < v18 * v19)
      {
LABEL_30:
        sub_19EBF71F8();
        __break(1u);
        JUMPOUT(0x19E6CCAF0);
      }
      MEMORY[0x1F4188790](v13);
      if (qword_1E945BB70 != -1) {
LABEL_28:
      }
        swift_once();
      sub_19EBF75A8();
      sub_19E634690(MEMORY[0x1E4FBC860], (uint64_t)v26);
      sub_19E601010(v25);
      uint64_t v20 = v26[4];
      __swift_project_boxed_opaque_existential_1(v26, v26[3]);
      uint64_t v21 = sub_19E6C1448(a4, 0);
      __int16 v22 = MEMORY[0x1F4188790](v21);
      uint64_t v23 = (*(uint64_t (**)(uint64_t, void, uint64_t (*)()))(v20 + 8))(a1, v22 & 0x1FF, sub_19E6D0360);
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v26);
      uint64_t result = sub_19E5DE7FC(a2, a3);
      *a5 = v23;
      return result;
    case 3uLL:
      goto LABEL_30;
    default:
      if ((a3 & 0xFF000000000000) == 0) {
        goto LABEL_30;
      }
      uint64_t v10 = BYTE6(a3);
      goto LABEL_13;
  }
}

void *sub_19E6CCB00(void *__dst, uint64_t a2, uint64_t a3, unint64_t a4)
{
  switch(a4 >> 62)
  {
    case 1uLL:
      if (a3 >> 32 < (int)a3)
      {
        __break(1u);
LABEL_16:
        __break(1u);
LABEL_17:
        __break(1u);
      }
      else
      {
        sub_19E5DE7A4(a3, a4);
        if (!sub_19EBF62E8() || !__OFSUB__((int)a3, sub_19EBF6308()))
        {
          sub_19EBF62F8();
          sub_19EBF6EC8();
          return (void *)sub_19E5DE7FC(a3, a4);
        }
      }
      __break(1u);
      goto LABEL_19;
    case 2uLL:
      uint64_t v6 = *(void *)(a3 + 16);
      uint64_t v7 = *(void *)(a3 + 24);
      swift_retain();
      swift_retain();
      if (sub_19EBF62E8() && __OFSUB__(v6, sub_19EBF6308())) {
        goto LABEL_17;
      }
      if (__OFSUB__(v7, v6)) {
        goto LABEL_16;
      }
      sub_19EBF62F8();
      sub_19EBF6EC8();
      swift_release();
      return (void *)swift_release();
    case 3uLL:
      return __dst;
    default:
      uint64_t __src = a3;
      __int16 v9 = a4;
      char v10 = BYTE2(a4);
      char v11 = BYTE3(a4);
      char v12 = BYTE4(a4);
      char v13 = BYTE5(a4);
      if (__dst)
      {
        if (a2 - (uint64_t)__dst >= BYTE6(a4)) {
          return memcpy(__dst, &__src, BYTE6(a4));
        }
LABEL_19:
        sub_19EBF7278();
        __break(1u);
        JUMPOUT(0x19E6CCD54);
      }
      if (BYTE6(a4)) {
        goto LABEL_19;
      }
      return __dst;
  }
}

uint64_t MLTensor.init(bytesNoCopy:shape:scalarType:deallocator:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X5>, unint64_t *a6@<X8>)
{
  uint64_t v12 = sub_19EBF6388();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __int16 v16 = sub_19E6C1448(a4, 0);
  __int16 v17 = v16;
  uint64_t v18 = *(void *)(a3 + 16);
  if (v18)
  {
    uint64_t v19 = (uint64_t *)(a3 + 32);
    uint64_t v20 = 1;
    while (1)
    {
      uint64_t v21 = *v19++;
      uint64_t v22 = v20 * v21;
      if ((unsigned __int128)(v20 * (__int128)v21) >> 64 != (v20 * v21) >> 63) {
        break;
      }
      uint64_t v20 = v22;
      if (!--v18) {
        goto LABEL_7;
      }
    }
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    if (a4 < 1) {
      __break(1u);
    }
    goto LABEL_21;
  }
  uint64_t v22 = 1;
LABEL_7:
  if (v16 > 0xAu) {
    uint64_t v23 = 8;
  }
  else {
    uint64_t v23 = qword_19EC3B2C8[(char)v16];
  }
  a4 = v22 * v23;
  if ((unsigned __int128)(v22 * (__int128)v23) >> 64 != (v22 * v23) >> 63) {
    goto LABEL_18;
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v32 = a3;
  uint64_t v33 = a6;
  if (a2 - a1 < a4)
  {
LABEL_21:
    uint64_t result = sub_19EBF71F8();
    __break(1u);
    return result;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v15, a5, v12);
  sub_19EBF6378();
  if (a4)
  {
    sub_19EBF6318();
    swift_allocObject();
    swift_retain();
    uint64_t v24 = sub_19EBF62D8();
    uint64_t v25 = sub_19E672650(v24, a4);
    unint64_t v27 = v26;
    swift_release();
  }
  else
  {
    uint64_t v28 = (void (*)(uint64_t, void))sub_19EBF6378();
    v28(a1, 0);
    swift_release();
    swift_release();
    uint64_t v25 = 0;
    unint64_t v27 = 0xC000000000000000;
  }
  __int16 v29 = *(void (**)(char *, uint64_t))(v13 + 8);
  v29(v15, v12);
  v29(a5, v12);
  type metadata accessor for MLTensorData();
  uint64_t result = swift_allocObject();
  uint64_t v31 = v33;
  *(void *)(result + 16) = v32;
  *(unsigned char *)(result + 24) = v17;
  *(unsigned char *)(result + 25) = HIBYTE(v17) & 1;
  *(void *)(result + 32) = v25;
  *(void *)(result + 40) = v27;
  *uint64_t v31 = result | 0x8000000000000000;
  return result;
}

uint64_t sub_19E6CD064@<X0>(uint64_t *a1@<X8>)
{
  return sub_19E6CC414(a1);
}

uint64_t sub_19E6CD084@<X0>(uint64_t *a1@<X8>)
{
  return sub_19E6CC1C8(a1);
}

uint64_t sub_19E6CD0A4()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_19E6CD0CC(uint64_t a1, uint64_t a2)
{
  return sub_19E6CA28C(a1, a2, v2[6], v2[2], v2[3], v2[4], v2[5]);
}

uint64_t sub_19E6CD0F0(uint64_t a1, void *a2)
{
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v5 = (void *)MEMORY[0x1E4FBC860];
  uint64_t v6 = 0;
  if (a2)
  {
    uint64_t v7 = (void *)(MEMORY[0x1E4FBC860] + 32);
    uint64_t v35 = a1 + 8;
    uint64_t v36 = a1 + 32;
    uint64_t v37 = a1;
    while (1)
    {
      uint64_t v8 = a2 + 2;
      unint64_t v9 = a2[2];
      if (!v9) {
        break;
      }
      uint64_t v10 = v9 - 1;
      uint64_t v11 = a2[v9 + 3];
      BOOL v12 = __OFADD__(v11, 1);
      uint64_t v13 = v11 + 1;
      if (v12) {
        goto LABEL_52;
      }
      unint64_t v14 = *(void *)(a1 + 16);
      if (v9 > v14) {
        goto LABEL_53;
      }
      if (v13 >= *(void *)(v36 + 16 * v10 + 8))
      {
        uint64_t result = swift_bridgeObjectRetain();
        if (v9 != 1)
        {
          __int16 v16 = (void *)(v35 + 16 * v9);
          uint64_t v15 = a2;
          while (v15)
          {
            uint64_t result = swift_isUniquelyReferenced_nonNull_native();
            if ((result & 1) == 0)
            {
              uint64_t result = (uint64_t)sub_19E612754(v15);
              uint64_t v15 = (void *)result;
            }
            unint64_t v17 = v9 - 1;
            if ((int64_t)(v9 - 1) >= v15[2])
            {
              __break(1u);
LABEL_48:
              __break(1u);
LABEL_49:
              __break(1u);
LABEL_50:
              __break(1u);
              goto LABEL_51;
            }
            v15[v9 + 3] = 0;
            uint64_t v10 = v9 - 2;
            if ((int64_t)(v9 - 2) >= *v8) {
              goto LABEL_48;
            }
            uint64_t v18 = v8[v9];
            BOOL v12 = __OFADD__(v18, 1);
            uint64_t v19 = v18 + 1;
            if (v12) {
              goto LABEL_49;
            }
            if (v10 >= (uint64_t)v14) {
              goto LABEL_50;
            }
            if (v19 < *v16)
            {
              a1 = v37;
              goto LABEL_24;
            }
            v16 -= 2;
            --v9;
            if (v17 == 1) {
              goto LABEL_21;
            }
          }
LABEL_58:
          __break(1u);
          return result;
        }
LABEL_21:
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v15 = 0;
        a1 = v37;
        if (!v6) {
          goto LABEL_29;
        }
      }
      else
      {
        swift_bridgeObjectRetain();
        uint64_t v15 = a2;
LABEL_24:
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)sub_19E612754(v15);
          uint64_t v15 = (void *)result;
        }
        if (v10 >= v15[2]) {
          goto LABEL_54;
        }
        uint64_t v20 = v15[v10 + 4];
        BOOL v12 = __OFADD__(v20, 1);
        uint64_t v21 = v20 + 1;
        if (v12) {
          goto LABEL_55;
        }
        v15[v10 + 4] = v21;
        if (!v6) {
          goto LABEL_29;
        }
      }
LABEL_41:
      BOOL v12 = __OFSUB__(v6--, 1);
      if (v12)
      {
LABEL_51:
        __break(1u);
LABEL_52:
        __break(1u);
LABEL_53:
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
        goto LABEL_57;
      }
      *v7++ = a2;
      a2 = v15;
      if (!v15) {
        goto LABEL_43;
      }
    }
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v15 = a2;
    if (v6)
    {
      uint64_t v15 = a2;
      goto LABEL_41;
    }
LABEL_29:
    unint64_t v22 = v5[3];
    if ((uint64_t)((v22 >> 1) + 0x4000000000000000) < 0) {
      goto LABEL_56;
    }
    int64_t v23 = v22 & 0xFFFFFFFFFFFFFFFELL;
    if (v23 <= 1) {
      uint64_t v24 = 1;
    }
    else {
      uint64_t v24 = v23;
    }
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E945CF88);
    uint64_t v25 = (void *)swift_allocObject();
    int64_t v26 = _swift_stdlib_malloc_size(v25);
    uint64_t v27 = v26 - 32;
    if (v26 < 32) {
      uint64_t v27 = v26 - 25;
    }
    uint64_t v28 = v27 >> 3;
    uint64_t v25[2] = v24;
    v25[3] = 2 * (v27 >> 3);
    unint64_t v29 = (unint64_t)(v25 + 4);
    uint64_t v30 = v5[3] >> 1;
    if (v5[2])
    {
      uint64_t v31 = v5 + 4;
      if (v25 != v5 || v29 >= (unint64_t)v31 + 8 * v30) {
        memmove(v25 + 4, v31, 8 * v30);
      }
      void v5[2] = 0;
    }
    uint64_t v7 = (void *)(v29 + 8 * v30);
    uint64_t v6 = (v28 & 0x7FFFFFFFFFFFFFFFLL) - v30;
    uint64_t result = swift_release();
    uint64_t v5 = v25;
    a1 = v37;
    goto LABEL_41;
  }
LABEL_43:
  uint64_t result = swift_bridgeObjectRelease();
  unint64_t v32 = v5[3];
  if (v32 >= 2)
  {
    unint64_t v33 = v32 >> 1;
    BOOL v12 = __OFSUB__(v33, v6);
    uint64_t v34 = v33 - v6;
    if (v12)
    {
LABEL_57:
      __break(1u);
      goto LABEL_58;
    }
    void v5[2] = v34;
  }
  return (uint64_t)v5;
}

int64_t sub_19E6CD3E0(int64_t result, uint64_t a2)
{
  unint64_t v2 = *(void *)(result + 16);
  unint64_t v3 = *(void *)(a2 + 16);
  if (v3 >= v2) {
    uint64_t v4 = *(void *)(result + 16);
  }
  else {
    uint64_t v4 = *(void *)(a2 + 16);
  }
  if (v4)
  {
    int64_t v6 = result;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C2C8);
    uint64_t v7 = (void *)swift_allocObject();
    uint64_t result = _swift_stdlib_malloc_size(v7);
    uint64_t v8 = result - 32;
    if (result < 32) {
      uint64_t v8 = result - 17;
    }
    uint64_t v9 = v8 >> 4;
    v7[2] = v4;
    v7[3] = 2 * (v8 >> 4);
    uint64_t v10 = v7 + 4;
    uint64_t v11 = v9 & 0x7FFFFFFFFFFFFFFFLL;
    unint64_t v12 = v4 - 1;
    if (v4 - 1 >= v3) {
      unint64_t v12 = v3;
    }
    if (v12 >= v2) {
      unint64_t v12 = v2;
    }
    if (v12 >= 4)
    {
      unint64_t v15 = v12 + 1;
      uint64_t v16 = v15 & 3;
      if ((v15 & 3) == 0) {
        uint64_t v16 = 4;
      }
      unint64_t v13 = v15 - v16;
      v10 += 2 * v13;
      unint64_t v17 = (float64x2_t *)(v6 + 48);
      uint64_t v18 = (double *)(v7 + 8);
      uint64_t v19 = (float64x2_t *)(a2 + 48);
      int64x2_t v20 = 0uLL;
      v21.i64[0] = 0;
      v21.i64[1] = v11;
      v22.i64[0] = -1;
      v22.i64[1] = -1;
      unint64_t v23 = v13;
      do
      {
        uint64_t v24 = v18 - 4;
        v39.val[0] = v17[-1];
        v39.val[1] = v19[-1];
        vst2q_f64(v24, v39);
        float64x2_t v25 = *v17;
        v17 += 2;
        v39.val[0] = v25;
        float64x2_t v26 = *v19;
        v19 += 2;
        v39.val[1] = v26;
        vst2q_f64(v18, v39);
        int64x2_t v21 = vaddq_s64(v21, v22);
        int64x2_t v20 = vaddq_s64(v20, v22);
        v18 += 8;
        v23 -= 4;
      }
      while (v23);
      uint64_t v11 = vaddvq_s64(vaddq_s64(vzip1q_s64(v21, v20), vzip2q_s64(v21, v20)));
    }
    else
    {
      unint64_t v13 = 0;
    }
    uint64_t v27 = 0;
    uint64_t v28 = v4 - v13;
    uint64_t v29 = 8 * v13 + 32;
    uint64_t v30 = a2 + v29;
    int64_t v31 = v6 + v29;
    unint64_t v32 = v3 - v13;
    unint64_t v33 = v2 - v13;
    do
    {
      if (v33 == v27)
      {
        __break(1u);
LABEL_31:
        __break(1u);
        goto LABEL_32;
      }
      if (v32 == v27) {
        goto LABEL_31;
      }
      uint64_t v34 = *(void *)(v30 + 8 * v27);
      void *v10 = *(void *)(v31 + 8 * v27);
      v10[1] = v34;
      v10 += 2;
      ++v27;
    }
    while (v28 != v27);
    uint64_t v14 = v11 - v27;
    if (v2 <= v3) {
      goto LABEL_26;
    }
  }
  else
  {
    uint64_t v7 = (void *)MEMORY[0x1E4FBC860];
    uint64_t v14 = *(void *)(MEMORY[0x1E4FBC860] + 24) >> 1;
    if (!v2) {
      goto LABEL_26;
    }
  }
  if (v2 <= v3)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
LABEL_26:
  unint64_t v35 = v7[3];
  if (v35 < 2) {
    return (int64_t)v7;
  }
  unint64_t v36 = v35 >> 1;
  BOOL v37 = __OFSUB__(v36, v14);
  uint64_t v38 = v36 - v14;
  if (!v37)
  {
    v7[2] = v38;
    return (int64_t)v7;
  }
LABEL_33:
  __break(1u);
  return result;
}

uint64_t sub_19E6CD5B4(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = result;
    uint64_t v3 = *(void *)(result + 16);
    uint64_t v4 = (void *)MEMORY[0x1E4FBC860];
    if (v3)
    {
      uint64_t result = swift_retain();
      uint64_t v6 = 0;
      uint64_t v7 = 0;
      uint64_t v8 = a2 - 1;
      uint64_t v9 = v4 + 4;
      uint64_t v10 = v3 - 1;
      while (1)
      {
        uint64_t v11 = *(void *)(v2 + 8 * v6 + 32);
        if (!v7)
        {
          unint64_t v12 = v4[3];
          if ((uint64_t)((v12 >> 1) + 0x4000000000000000) < 0) {
            goto LABEL_32;
          }
          int64_t v13 = v12 & 0xFFFFFFFFFFFFFFFELL;
          if (v13 <= 1) {
            uint64_t v14 = 1;
          }
          else {
            uint64_t v14 = v13;
          }
          __swift_instantiateConcreteTypeFromMangledName(&qword_1E945CF10);
          unint64_t v15 = (void *)swift_allocObject();
          int64_t v16 = _swift_stdlib_malloc_size(v15);
          uint64_t v17 = v16 - 32;
          if (v16 < 32) {
            uint64_t v17 = v16 - 25;
          }
          uint64_t v18 = v17 >> 3;
          v15[2] = v14;
          v15[3] = 2 * (v17 >> 3);
          unint64_t v19 = (unint64_t)(v15 + 4);
          uint64_t v20 = v4[3] >> 1;
          if (v4[2])
          {
            if (v15 != v4 || v19 >= (unint64_t)&v4[v20 + 4]) {
              memmove(v15 + 4, v4 + 4, 8 * v20);
            }
            v4[2] = 0;
          }
          uint64_t v9 = (void *)(v19 + 8 * v20);
          uint64_t v7 = (v18 & 0x7FFFFFFFFFFFFFFFLL) - v20;
          uint64_t result = swift_release();
          uint64_t v4 = v15;
        }
        BOOL v22 = __OFSUB__(v7--, 1);
        if (v22) {
          break;
        }
        *v9++ = v11;
        if (v8 != v6 && v10 != v6++) {
          continue;
        }
        uint64_t result = swift_release();
        goto LABEL_27;
      }
      __break(1u);
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v4 = (void *)MEMORY[0x1E4FBC860];
  }
LABEL_27:
  unint64_t v24 = v4[3];
  if (v24 < 2) {
    return (uint64_t)v4;
  }
  unint64_t v25 = v24 >> 1;
  BOOL v22 = __OFSUB__(v25, v7);
  uint64_t v26 = v25 - v7;
  if (!v22)
  {
    v4[2] = v26;
    return (uint64_t)v4;
  }
LABEL_33:
  __break(1u);
  return result;
}

uint64_t sub_19E6CD750(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = result;
    uint64_t v3 = *(void *)(result + 16);
    uint64_t v4 = (void *)MEMORY[0x1E4FBC860];
    if (v3)
    {
      uint64_t result = swift_retain();
      uint64_t v6 = 0;
      uint64_t v7 = 0;
      uint64_t v8 = a2 - 1;
      uint64_t v9 = v4 + 4;
      uint64_t v10 = v3 - 1;
      while (1)
      {
        int v11 = *(_DWORD *)(v2 + 4 * v6 + 32);
        if (!v7)
        {
          unint64_t v12 = v4[3];
          if ((uint64_t)((v12 >> 1) + 0x4000000000000000) < 0) {
            goto LABEL_32;
          }
          int64_t v13 = v12 & 0xFFFFFFFFFFFFFFFELL;
          if (v13 <= 1) {
            uint64_t v14 = 1;
          }
          else {
            uint64_t v14 = v13;
          }
          __swift_instantiateConcreteTypeFromMangledName(&qword_1E945CF00);
          unint64_t v15 = (void *)swift_allocObject();
          int64_t v16 = _swift_stdlib_malloc_size(v15);
          uint64_t v17 = v16 - 32;
          if (v16 < 32) {
            uint64_t v17 = v16 - 29;
          }
          uint64_t v18 = v17 >> 2;
          v15[2] = v14;
          v15[3] = 2 * (v17 >> 2);
          unint64_t v19 = (unint64_t)(v15 + 4);
          uint64_t v20 = v4[3] >> 1;
          if (v4[2])
          {
            if (v15 != v4 || v19 >= (unint64_t)v4 + 4 * v20 + 32) {
              memmove(v15 + 4, v4 + 4, 4 * v20);
            }
            v4[2] = 0;
          }
          uint64_t v9 = (_DWORD *)(v19 + 4 * v20);
          uint64_t v7 = (v18 & 0x7FFFFFFFFFFFFFFFLL) - v20;
          uint64_t result = swift_release();
          uint64_t v4 = v15;
        }
        BOOL v22 = __OFSUB__(v7--, 1);
        if (v22) {
          break;
        }
        *v9++ = v11;
        if (v8 != v6 && v10 != v6++) {
          continue;
        }
        uint64_t result = swift_release();
        goto LABEL_27;
      }
      __break(1u);
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v4 = (void *)MEMORY[0x1E4FBC860];
  }
LABEL_27:
  unint64_t v24 = v4[3];
  if (v24 < 2) {
    return (uint64_t)v4;
  }
  unint64_t v25 = v24 >> 1;
  BOOL v22 = __OFSUB__(v25, v7);
  uint64_t v26 = v25 - v7;
  if (!v22)
  {
    v4[2] = v26;
    return (uint64_t)v4;
  }
LABEL_33:
  __break(1u);
  return result;
}

uint64_t sub_19E6CD8EC(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = result;
    uint64_t v3 = *(void *)(result + 16);
    uint64_t v4 = (void *)MEMORY[0x1E4FBC860];
    if (v3)
    {
      uint64_t result = swift_retain();
      uint64_t v6 = 0;
      unint64_t v7 = 0;
      uint64_t v8 = v4 + 4;
      uint64_t v9 = v3 - 1;
      while (1)
      {
        __int16 v10 = *(_WORD *)(v2 + 2 * v6 + 32);
        if (!v7)
        {
          unint64_t v11 = v4[3];
          if ((uint64_t)((v11 >> 1) + 0x4000000000000000) < 0) {
            goto LABEL_33;
          }
          int64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
          if (v12 <= 1) {
            uint64_t v13 = 1;
          }
          else {
            uint64_t v13 = v12;
          }
          __swift_instantiateConcreteTypeFromMangledName(&qword_1E945CF08);
          uint64_t v14 = (void *)swift_allocObject();
          int64_t v15 = _swift_stdlib_malloc_size(v14);
          if (v15 >= 32) {
            unint64_t v16 = v15 - 32;
          }
          else {
            unint64_t v16 = v15 - 31;
          }
          v14[2] = v13;
          v14[3] = v16 & 0xFFFFFFFFFFFFFFFELL;
          unint64_t v17 = (unint64_t)(v14 + 4);
          unint64_t v18 = v4[3];
          unint64_t v19 = v18 >> 1;
          if (v4[2])
          {
            if (v14 != v4 || v17 >= (unint64_t)v4 + 2 * v19 + 32) {
              memmove(v14 + 4, v4 + 4, v18 & 0xFFFFFFFFFFFFFFFELL);
            }
            v4[2] = 0;
          }
          unint64_t v21 = v16 >> 1;
          uint64_t v8 = (_WORD *)(v17 + 2 * v19);
          unint64_t v7 = v21 - v19;
          uint64_t result = swift_release();
          uint64_t v4 = v14;
        }
        BOOL v22 = __OFSUB__(v7--, 1);
        if (v22) {
          break;
        }
        *v8++ = v10;
        if (a2 - 1 != v6 && v9 != v6++) {
          continue;
        }
        uint64_t result = swift_release();
        goto LABEL_28;
      }
      __break(1u);
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
    unint64_t v7 = 0;
  }
  else
  {
    unint64_t v7 = 0;
    uint64_t v4 = (void *)MEMORY[0x1E4FBC860];
  }
LABEL_28:
  unint64_t v24 = v4[3];
  if (v24 < 2) {
    return (uint64_t)v4;
  }
  unint64_t v25 = v24 >> 1;
  BOOL v22 = __OFSUB__(v25, v7);
  unint64_t v26 = v25 - v7;
  if (!v22)
  {
    v4[2] = v26;
    return (uint64_t)v4;
  }
LABEL_34:
  __break(1u);
  return result;
}

uint64_t sub_19E6CDA88(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = *(void *)(result + 16);
    uint64_t v3 = (void *)MEMORY[0x1E4FBC860];
    if (v2)
    {
      uint64_t result = swift_retain();
      uint64_t v5 = 0;
      uint64_t v6 = 0;
      uint64_t v7 = a2 - 1;
      uint64_t v8 = v3 + 4;
      uint64_t v9 = v2 - 1;
      uint64_t v26 = result;
      while (1)
      {
        int v10 = *(_DWORD *)(result + 4 * v5 + 32);
        if (!v6)
        {
          unint64_t v11 = v3[3];
          if ((uint64_t)((v11 >> 1) + 0x4000000000000000) < 0) {
            goto LABEL_32;
          }
          int64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
          if (v12 <= 1) {
            uint64_t v13 = 1;
          }
          else {
            uint64_t v13 = v12;
          }
          __swift_instantiateConcreteTypeFromMangledName(&qword_1E945CEB8);
          uint64_t v14 = (void *)swift_allocObject();
          int64_t v15 = _swift_stdlib_malloc_size(v14);
          uint64_t v16 = v15 - 32;
          if (v15 < 32) {
            uint64_t v16 = v15 - 29;
          }
          uint64_t v17 = v16 >> 2;
          v14[2] = v13;
          v14[3] = 2 * (v16 >> 2);
          unint64_t v18 = (unint64_t)(v14 + 4);
          uint64_t v19 = v3[3] >> 1;
          if (v3[2])
          {
            if (v14 != v3 || v18 >= (unint64_t)v3 + 4 * v19 + 32) {
              memmove(v14 + 4, v3 + 4, 4 * v19);
            }
            v3[2] = 0;
          }
          uint64_t v8 = (_DWORD *)(v18 + 4 * v19);
          uint64_t v6 = (v17 & 0x7FFFFFFFFFFFFFFFLL) - v19;
          swift_release();
          uint64_t v3 = v14;
          uint64_t result = v26;
        }
        BOOL v21 = __OFSUB__(v6--, 1);
        if (v21) {
          break;
        }
        *v8++ = v10;
        if (v7 != v5 && v9 != v5++) {
          continue;
        }
        uint64_t result = swift_release();
        goto LABEL_27;
      }
      __break(1u);
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v3 = (void *)MEMORY[0x1E4FBC860];
  }
LABEL_27:
  unint64_t v23 = v3[3];
  if (v23 < 2) {
    return (uint64_t)v3;
  }
  unint64_t v24 = v23 >> 1;
  BOOL v21 = __OFSUB__(v24, v6);
  uint64_t v25 = v24 - v6;
  if (!v21)
  {
    v3[2] = v25;
    return (uint64_t)v3;
  }
LABEL_33:
  __break(1u);
  return result;
}

void sub_19E6CDC20(float a1, float a2, float a3)
{
  BOOL v6 = a1 <= a2;
  if (a3 > 0.0) {
    BOOL v6 = a1 >= a2;
  }
  if (!v6)
  {
    uint64_t v12 = -1;
    do
    {
      uint64_t v7 = ++v12 + 1;
      if (__OFADD__(v12, 1))
      {
        __break(1u);
        goto LABEL_47;
      }
      float v13 = a1 + (float)((float)v7 * a3);
      BOOL v14 = v13 <= a2;
      if (a3 > 0.0) {
        BOOL v14 = v13 >= a2;
      }
    }
    while (!v14);
    if (v7 <= 0)
    {
      uint64_t v8 = (float *)MEMORY[0x1E4FBC860];
      uint64_t v9 = (float *)(MEMORY[0x1E4FBC860] + 32);
      uint64_t v10 = *(void *)(MEMORY[0x1E4FBC860] + 24) >> 1;
      if (v12 == -1) {
        goto LABEL_5;
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1E945CF00);
      uint64_t v8 = (float *)swift_allocObject();
      int64_t v15 = _swift_stdlib_malloc_size(v8);
      uint64_t v16 = v15 - 32;
      if (v15 < 32) {
        uint64_t v16 = v15 - 29;
      }
      uint64_t v17 = v16 >> 2;
      *((void *)v8 + 2) = v7;
      *((void *)v8 + 3) = 2 * v17;
      uint64_t v9 = v8 + 8;
      uint64_t v10 = v17 & 0x7FFFFFFFFFFFFFFFLL;
    }
    v10 -= v7;
    uint64_t v18 = -1;
    float v19 = a1;
    while (1)
    {
      BOOL v20 = v19 <= a2;
      if (a3 > 0.0) {
        BOOL v20 = v19 >= a2;
      }
      if (v20) {
        goto LABEL_49;
      }
      float v11 = a1 + (float)((float)(v18 + 2) * a3);
      *v9++ = v19;
      ++v18;
      float v19 = v11;
      if (v12 == v18) {
        goto LABEL_21;
      }
    }
  }
  uint64_t v7 = 0;
  uint64_t v8 = (float *)MEMORY[0x1E4FBC860];
  uint64_t v9 = (float *)(MEMORY[0x1E4FBC860] + 32);
  uint64_t v10 = *(void *)(MEMORY[0x1E4FBC860] + 24) >> 1;
LABEL_5:
  float v11 = a1;
LABEL_21:
  BOOL v21 = v11 <= a2;
  if (a3 > 0.0) {
    BOOL v21 = v11 >= a2;
  }
  if (!v21)
  {
    while (!__OFADD__(v7, 1))
    {
      if (!v10)
      {
        unint64_t v22 = *((void *)v8 + 3);
        if ((uint64_t)((v22 >> 1) + 0x4000000000000000) < 0) {
          goto LABEL_50;
        }
        int64_t v23 = v22 & 0xFFFFFFFFFFFFFFFELL;
        if (v23 <= 1) {
          uint64_t v24 = 1;
        }
        else {
          uint64_t v24 = v23;
        }
        __swift_instantiateConcreteTypeFromMangledName(&qword_1E945CF00);
        uint64_t v25 = (float *)swift_allocObject();
        int64_t v26 = _swift_stdlib_malloc_size(v25);
        uint64_t v27 = v26 - 32;
        if (v26 < 32) {
          uint64_t v27 = v26 - 29;
        }
        uint64_t v28 = v27 >> 2;
        *((void *)v25 + 2) = v24;
        *((void *)v25 + 3) = 2 * (v27 >> 2);
        unint64_t v29 = (unint64_t)(v25 + 8);
        uint64_t v30 = *((void *)v8 + 3) >> 1;
        if (*((void *)v8 + 2))
        {
          int64_t v31 = v8 + 8;
          if (v25 != v8 || v29 >= (unint64_t)v31 + 4 * v30) {
            memmove(v25 + 8, v31, 4 * v30);
          }
          *((void *)v8 + 2) = 0;
        }
        uint64_t v9 = (float *)(v29 + 4 * v30);
        uint64_t v10 = (v28 & 0x7FFFFFFFFFFFFFFFLL) - v30;
        swift_release();
        uint64_t v8 = v25;
      }
      BOOL v32 = __OFSUB__(v10--, 1);
      if (v32) {
        goto LABEL_48;
      }
      *v9++ = v11;
      float v11 = a1 + (float)((float)(v7 + 1) * a3);
      BOOL v33 = v11 <= a2;
      if (a3 > 0.0) {
        BOOL v33 = v11 >= a2;
      }
      ++v7;
      if (v33) {
        goto LABEL_42;
      }
    }
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
LABEL_42:
  unint64_t v34 = *((void *)v8 + 3);
  if (v34 >= 2)
  {
    unint64_t v35 = v34 >> 1;
    BOOL v32 = __OFSUB__(v35, v10);
    uint64_t v36 = v35 - v10;
    if (v32)
    {
LABEL_51:
      __break(1u);
      return;
    }
    *((void *)v8 + 2) = v36;
  }
}

int32x4_t *sub_19E6CDEC4(int32x4_t *a1, uint64_t a2, int32x2_t a3)
{
  a3.i32[0] = **(_DWORD **)(v3 + 16);
  return sub_19E6CABE0(a1, a2, a3);
}

uint64_t sub_19E6CDEE4()
{
  return sub_19EBF6ED8();
}

uint64_t sub_19E6CDF20(uint64_t a1)
{
  return sub_19E6CB4DC(a1, v1[5], v1[6], v1[2]);
}

uint64_t sub_19E6CDF48(float *a1, uint64_t a2)
{
  return sub_19E6CBD74(a1, a2, *(float *)(v2 + 16));
}

uint64_t sub_19E6CDF64(_DWORD *a1, uint64_t a2)
{
  return sub_19E6CBFD0(a1, a2, *(_DWORD *)(v2 + 16));
}

void *sub_19E6CDF80(void *a1, uint64_t a2)
{
  return sub_19E6CCB00(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_19E6CDF9C()
{
  return MEMORY[0x1E4FBB4C8];
}

uint64_t sub_19E6CDFA8()
{
  return MEMORY[0x1E4FBC1B8];
}

uint64_t sub_19E6CDFB4()
{
  return MEMORY[0x1E4FBB3C0];
}

float sub_19E6CDFC0@<S0>(uint64_t *a1@<X0>, float *a2@<X8>)
{
  float result = **(float **)(v2 + 16) + (float)(**(float **)(v2 + 24) * (float)*a1);
  *a2 = result;
  return result;
}

uint64_t sub_19E6CDFE4@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (!result)
  {
    uint64_t v5 = 0;
    goto LABEL_7;
  }
  uint64_t v5 = a2;
  if (!a2)
  {
LABEL_7:
    *a3 = v5;
    return result;
  }
  if (*(void *)(v3 + 48) >= a2)
  {
    if (*(void *)(v3 + 40)) {
      float result = sub_19EBF6E38();
    }
    goto LABEL_7;
  }
  __break(1u);
  return result;
}

uint64_t sub_19E6CE050(uint64_t a1, uint64_t a2)
{
  return sub_19E6CC288(a1, a2);
}

uint64_t sub_19E6CE074(uint64_t a1, uint64_t a2)
{
  return sub_19E6CC4E4(a1, a2, *(void **)(v2 + 40), *(void **)(v2 + 48));
}

uint64_t sub_19E6CE0A8()
{
  return sub_19EBF6938();
}

uint64_t sub_19E6CE110(uint64_t a1, uint64_t a2)
{
  return sub_19E6CBABC(a1, a2, v2[4], v2[5], v2[6], v2[7], v2[8], v2[9], v2[2]);
}

uint64_t sub_19E6CE144(uint64_t result, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  BOOL v6 = a3;
  uint64_t v110 = (void *)result;
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v108 = v7;
  if (v7)
  {
    uint64_t v8 = (uint64_t *)(a2 + 32);
    uint64_t v9 = 1;
    uint64_t v10 = *(void *)(a2 + 16);
    do
    {
      uint64_t v11 = *v8++;
      uint64_t v12 = (unsigned __int128)(v9 * (__int128)v11) >> 64;
      v9 *= v11;
      if (v12 != v9 >> 63) {
        goto LABEL_149;
      }
      --v10;
    }
    while (v10);
    if (v9 <= 0)
    {
      if (v9 < 0)
      {
LABEL_181:
        __break(1u);
LABEL_182:
        __break(1u);
LABEL_183:
        __break(1u);
        goto LABEL_184;
      }
      float v13 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v109 = *(void *)(MEMORY[0x1E4FBC860] + 24) >> 1;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      float result = swift_bridgeObjectRetain();
      BOOL v14 = v13 + 4;
      if (a5) {
        goto LABEL_68;
      }
LABEL_137:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      float result = swift_bridgeObjectRelease();
      unint64_t v99 = v13[3];
      if (v99 < 2) {
        return (uint64_t)v13;
      }
      unint64_t v100 = v99 >> 1;
      BOOL v26 = __OFSUB__(v100, v109);
      unint64_t v101 = v100 - v109;
      if (!v26)
      {
        void v13[2] = v101;
        return (uint64_t)v13;
      }
LABEL_184:
      __break(1u);
LABEL_185:
      __break(1u);
      goto LABEL_186;
    }
  }
  else
  {
    uint64_t v9 = 1;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945CF10);
  int64_t v15 = (void *)swift_allocObject();
  int64_t v16 = _swift_stdlib_malloc_size(v15);
  uint64_t v17 = v16 - 32;
  if (v16 < 32) {
    uint64_t v17 = v16 - 25;
  }
  uint64_t v18 = v17 >> 3;
  v15[2] = v9;
  v15[3] = 2 * v18;
  uint64_t v103 = v15;
  BOOL v14 = v15 + 4;
  uint64_t v109 = (v18 & 0x7FFFFFFFFFFFFFFFLL) - v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  float result = swift_bridgeObjectRetain();
  uint64_t v19 = 0;
  uint64_t v102 = v6 + 6;
  uint64_t v7 = v108;
  do
  {
    if (v19 == v9) {
      goto LABEL_150;
    }
    if (!a5) {
      goto LABEL_187;
    }
    int64_t v23 = a5 + 2;
    unint64_t v22 = a5[2];
    if (!v22)
    {
      float result = swift_bridgeObjectRetain();
      unint64_t v29 = a5;
      if (v7) {
        goto LABEL_44;
      }
LABEL_37:
      float result = swift_bridgeObjectRelease();
      BOOL v21 = v110;
      goto LABEL_15;
    }
    uint64_t v24 = v22 - 1;
    uint64_t v25 = a5[v22 + 3];
    BOOL v26 = __OFADD__(v25, 1);
    uint64_t v27 = v25 + 1;
    if (v26) {
      goto LABEL_152;
    }
    unint64_t v28 = *(void *)(a4 + 16);
    if (v22 > v28) {
      goto LABEL_153;
    }
    if (v27 < *(void *)(a4 + 32 + 16 * v24 + 8))
    {
      swift_bridgeObjectRetain();
      unint64_t v29 = a5;
      goto LABEL_39;
    }
    uint64_t v105 = v14;
    float result = swift_bridgeObjectRetain();
    if (v22 == 1)
    {
LABEL_36:
      float result = swift_bridgeObjectRelease();
      unint64_t v29 = 0;
      BOOL v6 = a3;
      uint64_t v7 = v108;
      BOOL v14 = v105;
      if (v108) {
        goto LABEL_44;
      }
      goto LABEL_37;
    }
    uint64_t v30 = (int64_t *)(a4 + 8 + 16 * v22);
    unint64_t v31 = v22;
    unint64_t v29 = a5;
    while (1)
    {
      if (!v29) {
        goto LABEL_185;
      }
      float result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        float result = (uint64_t)sub_19E612754(v29);
        unint64_t v29 = (void *)result;
      }
      unint64_t v32 = v31 - 1;
      if ((int64_t)(v31 - 1) >= v29[2])
      {
        __break(1u);
LABEL_142:
        __break(1u);
LABEL_143:
        __break(1u);
LABEL_144:
        __break(1u);
LABEL_145:
        __break(1u);
LABEL_146:
        __break(1u);
LABEL_147:
        __break(1u);
LABEL_148:
        __break(1u);
LABEL_149:
        __break(1u);
LABEL_150:
        __break(1u);
LABEL_151:
        __break(1u);
LABEL_152:
        __break(1u);
LABEL_153:
        __break(1u);
LABEL_154:
        __break(1u);
LABEL_155:
        __break(1u);
LABEL_156:
        __break(1u);
LABEL_157:
        __break(1u);
LABEL_158:
        __break(1u);
LABEL_159:
        __break(1u);
LABEL_160:
        __break(1u);
LABEL_161:
        __break(1u);
        goto LABEL_162;
      }
      v29[v31 + 3] = 0;
      uint64_t v24 = v31 - 2;
      if ((uint64_t)(v31 - 2) >= (uint64_t)*v23) {
        goto LABEL_142;
      }
      unint64_t v33 = v23[v31];
      BOOL v26 = __OFADD__(v33, 1);
      int64_t v34 = v33 + 1;
      if (v26) {
        goto LABEL_143;
      }
      if (v24 >= (uint64_t)v28) {
        goto LABEL_144;
      }
      if (v34 < *v30) {
        break;
      }
      v30 -= 2;
      --v31;
      if (v32 == 1) {
        goto LABEL_36;
      }
    }
    BOOL v6 = a3;
    BOOL v14 = v105;
LABEL_39:
    float result = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v7 = v108;
    if ((result & 1) == 0)
    {
      float result = (uint64_t)sub_19E612754(v29);
      unint64_t v29 = (void *)result;
    }
    if (v24 >= v29[2]) {
      goto LABEL_158;
    }
    uint64_t v35 = v29[v24 + 4];
    BOOL v26 = __OFADD__(v35, 1);
    uint64_t v36 = v35 + 1;
    if (v26) {
      goto LABEL_159;
    }
    v29[v24 + 4] = v36;
    if (!v108) {
      goto LABEL_37;
    }
LABEL_44:
    unint64_t v37 = *v23;
    unint64_t v38 = v6[2];
    if (v38 < *v23) {
      goto LABEL_154;
    }
    if (!v22)
    {
      uint64_t v20 = 0;
      goto LABEL_14;
    }
    if (!v37) {
      goto LABEL_160;
    }
    uint64_t v39 = a5[4];
    uint64_t v40 = v6[4];
    uint64_t v20 = v39 * v40;
    if ((unsigned __int128)(v39 * (__int128)v40) >> 64 != (v39 * v40) >> 63) {
      goto LABEL_161;
    }
    if (v22 == 1) {
      goto LABEL_14;
    }
    if (v37 < 2) {
      goto LABEL_175;
    }
    if (v38 == 1) {
      goto LABEL_14;
    }
    uint64_t v41 = a5[5];
    uint64_t v42 = v6[5];
    uint64_t v43 = v41 * v42;
    if ((unsigned __int128)(v41 * (__int128)v42) >> 64 != (v41 * v42) >> 63) {
      goto LABEL_177;
    }
    BOOL v26 = __OFADD__(v20, v43);
    v20 += v43;
    if (v26)
    {
LABEL_178:
      __break(1u);
LABEL_179:
      __break(1u);
LABEL_180:
      __break(1u);
      goto LABEL_181;
    }
    if (v22 != 2)
    {
      BOOL v44 = v37 >= 3;
      unint64_t v45 = v37 - 3;
      if (!v44) {
        goto LABEL_182;
      }
      unint64_t v46 = v38 - 2;
      if (v38 != 2)
      {
        uint64_t v47 = a5 + 6;
        if (v38 <= 2) {
          unint64_t v38 = 2;
        }
        unint64_t v48 = v38 - 2;
        unint64_t v49 = v22 - 3;
        unint64_t v50 = v102;
        while (v48)
        {
          uint64_t v51 = *v47 * *v50;
          if ((unsigned __int128)(*v47 * (__int128)*v50) >> 64 != v51 >> 63) {
            goto LABEL_163;
          }
          BOOL v26 = __OFADD__(v20, v51);
          v20 += v51;
          if (v26) {
            goto LABEL_164;
          }
          if (!v49) {
            goto LABEL_14;
          }
          if (!v45) {
            goto LABEL_165;
          }
          ++v50;
          ++v47;
          --v45;
          --v48;
          --v49;
          if (!--v46) {
            goto LABEL_14;
          }
        }
LABEL_162:
        __break(1u);
LABEL_163:
        __break(1u);
LABEL_164:
        __break(1u);
LABEL_165:
        __break(1u);
LABEL_166:
        __break(1u);
LABEL_167:
        __break(1u);
LABEL_168:
        __break(1u);
LABEL_169:
        __break(1u);
LABEL_170:
        __break(1u);
LABEL_171:
        __break(1u);
LABEL_172:
        __break(1u);
LABEL_173:
        __break(1u);
LABEL_174:
        __break(1u);
LABEL_175:
        __break(1u);
LABEL_176:
        __break(1u);
LABEL_177:
        __break(1u);
        goto LABEL_178;
      }
    }
LABEL_14:
    float result = swift_bridgeObjectRelease();
    BOOL v21 = &v110[v20];
LABEL_15:
    ++v19;
    *v14++ = *v21;
    a5 = v29;
  }
  while (v19 != v9);
  a5 = v29;
  float v13 = v103;
  if (!v29) {
    goto LABEL_137;
  }
LABEL_68:
  uint64_t v52 = a4 + 32;
  uint64_t v104 = v6 + 6;
  while (2)
  {
    unint64_t v53 = v14;
    unint64_t v54 = v13;
    uint64_t v56 = a5 + 2;
    unint64_t v55 = a5[2];
    if (!v55)
    {
      float result = swift_bridgeObjectRetain();
      unint64_t v61 = a5;
      if (v7) {
        goto LABEL_95;
      }
      goto LABEL_88;
    }
    uint64_t v57 = v55 - 1;
    uint64_t v58 = a5[v55 + 3];
    BOOL v26 = __OFADD__(v58, 1);
    uint64_t v59 = v58 + 1;
    if (v26) {
      goto LABEL_155;
    }
    unint64_t v60 = *(void *)(a4 + 16);
    if (v55 > v60) {
      goto LABEL_156;
    }
    if (v59 < *(void *)(v52 + 16 * v57 + 8))
    {
      swift_bridgeObjectRetain();
      unint64_t v61 = a5;
LABEL_90:
      float result = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v7 = v108;
      if ((result & 1) == 0)
      {
        float result = (uint64_t)sub_19E612754(v61);
        unint64_t v61 = (void *)result;
      }
      if (v57 >= v61[2]) {
        goto LABEL_166;
      }
      uint64_t v68 = v61[v57 + 4];
      BOOL v26 = __OFADD__(v68, 1);
      uint64_t v69 = v68 + 1;
      if (v26) {
        goto LABEL_167;
      }
      v61[v57 + 4] = v69;
      if (v108)
      {
LABEL_95:
        unint64_t v70 = *v56;
        unint64_t v71 = v6[2];
        if (v71 < *v56) {
          goto LABEL_157;
        }
        if (v55)
        {
          if (!v70) {
            goto LABEL_168;
          }
          uint64_t v72 = a5[4];
          uint64_t v73 = v6[4];
          uint64_t v74 = v72 * v73;
          if ((unsigned __int128)(v72 * (__int128)v73) >> 64 != (v72 * v73) >> 63) {
            goto LABEL_169;
          }
          if (v55 != 1)
          {
            if (v70 < 2) {
              goto LABEL_176;
            }
            if (v71 != 1)
            {
              uint64_t v75 = a5[5];
              uint64_t v76 = v6[5];
              uint64_t v77 = v75 * v76;
              if ((unsigned __int128)(v75 * (__int128)v76) >> 64 != (v75 * v76) >> 63) {
                goto LABEL_179;
              }
              BOOL v26 = __OFADD__(v74, v77);
              v74 += v77;
              if (v26) {
                goto LABEL_180;
              }
              if (v55 != 2)
              {
                BOOL v44 = v70 >= 3;
                unint64_t v78 = v70 - 3;
                if (!v44) {
                  goto LABEL_183;
                }
                unint64_t v79 = v71 - 2;
                if (v71 != 2)
                {
                  int v80 = a5 + 6;
                  if (v71 <= 2) {
                    unint64_t v71 = 2;
                  }
                  unint64_t v81 = v71 - 2;
                  unint64_t v82 = v55 - 3;
                  uint64_t v83 = v104;
                  while (v81)
                  {
                    uint64_t v84 = *v80 * *v83;
                    if ((unsigned __int128)(*v80 * (__int128)*v83) >> 64 != v84 >> 63) {
                      goto LABEL_171;
                    }
                    BOOL v26 = __OFADD__(v74, v84);
                    v74 += v84;
                    if (v26) {
                      goto LABEL_172;
                    }
                    if (!v82) {
                      goto LABEL_119;
                    }
                    if (!v78) {
                      goto LABEL_174;
                    }
                    ++v83;
                    ++v80;
                    --v78;
                    --v81;
                    --v82;
                    if (!--v79) {
                      goto LABEL_119;
                    }
                  }
                  goto LABEL_170;
                }
              }
            }
          }
        }
        else
        {
          uint64_t v74 = 0;
        }
LABEL_119:
        float result = swift_bridgeObjectRelease();
        uint64_t v67 = &v110[v74];
        goto LABEL_120;
      }
LABEL_88:
      float result = swift_bridgeObjectRelease();
      uint64_t v67 = v110;
LABEL_120:
      uint64_t v85 = *v67;
      float v13 = v54;
      if (v109)
      {
        uint64_t v86 = v53;
        uint64_t v87 = v109 - 1;
        if (__OFSUB__(v109, 1)) {
          goto LABEL_151;
        }
      }
      else
      {
        unint64_t v88 = v54[3];
        if ((uint64_t)((v88 >> 1) + 0x4000000000000000) < 0) {
          goto LABEL_173;
        }
        int64_t v89 = v88 & 0xFFFFFFFFFFFFFFFELL;
        if (v89 <= 1) {
          uint64_t v90 = 1;
        }
        else {
          uint64_t v90 = v89;
        }
        __swift_instantiateConcreteTypeFromMangledName(&qword_1E945CF10);
        uint64_t v91 = (void *)swift_allocObject();
        int64_t v92 = _swift_stdlib_malloc_size(v91);
        uint64_t v93 = v92 - 32;
        if (v92 < 32) {
          uint64_t v93 = v92 - 25;
        }
        uint64_t v94 = v93 >> 3;
        v91[2] = v90;
        v91[3] = 2 * (v93 >> 3);
        unint64_t v95 = (unint64_t)(v91 + 4);
        uint64_t v96 = v13[3] >> 1;
        if (v13[2])
        {
          uint64_t v97 = v13 + 4;
          if (v91 != v13 || v95 >= (unint64_t)v97 + 8 * v96) {
            memmove(v91 + 4, v97, 8 * v96);
          }
          void v13[2] = 0;
        }
        uint64_t v86 = (void *)(v95 + 8 * v96);
        uint64_t v98 = (v94 & 0x7FFFFFFFFFFFFFFFLL) - v96;
        float result = swift_release();
        float v13 = v91;
        BOOL v6 = a3;
        uint64_t v7 = v108;
        BOOL v26 = __OFSUB__(v98, 1);
        uint64_t v87 = v98 - 1;
        if (v26) {
          goto LABEL_151;
        }
      }
      uint64_t v109 = v87;
      *uint64_t v86 = v85;
      BOOL v14 = v86 + 1;
      a5 = v61;
      if (!v61) {
        goto LABEL_137;
      }
      continue;
    }
    break;
  }
  float result = swift_bridgeObjectRetain();
  if (v55 == 1)
  {
LABEL_87:
    float result = swift_bridgeObjectRelease();
    unint64_t v61 = 0;
    uint64_t v52 = a4 + 32;
    BOOL v6 = a3;
    uint64_t v7 = v108;
    if (v108) {
      goto LABEL_95;
    }
    goto LABEL_88;
  }
  unint64_t v62 = (int64_t *)(a4 + 8 + 16 * v55);
  unint64_t v63 = v55;
  unint64_t v61 = a5;
  while (v61)
  {
    float result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      float result = (uint64_t)sub_19E612754(v61);
      unint64_t v61 = (void *)result;
    }
    unint64_t v64 = v63 - 1;
    if ((int64_t)(v63 - 1) >= v61[2]) {
      goto LABEL_145;
    }
    v61[v63 + 3] = 0;
    uint64_t v57 = v63 - 2;
    if ((uint64_t)(v63 - 2) >= (uint64_t)*v56) {
      goto LABEL_146;
    }
    unint64_t v65 = v56[v63];
    BOOL v26 = __OFADD__(v65, 1);
    int64_t v66 = v65 + 1;
    if (v26) {
      goto LABEL_147;
    }
    if (v57 >= (uint64_t)v60) {
      goto LABEL_148;
    }
    if (v66 < *v62)
    {
      uint64_t v52 = a4 + 32;
      BOOL v6 = a3;
      goto LABEL_90;
    }
    v62 -= 2;
    --v63;
    if (v64 == 1) {
      goto LABEL_87;
    }
  }
LABEL_186:
  __break(1u);
LABEL_187:
  __break(1u);
  return result;
}

uint64_t sub_19E6CE9D4(uint64_t result, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  BOOL v6 = a3;
  uint64_t v110 = (_DWORD *)result;
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v108 = v7;
  if (v7)
  {
    uint64_t v8 = (uint64_t *)(a2 + 32);
    uint64_t v9 = 1;
    uint64_t v10 = *(void *)(a2 + 16);
    do
    {
      uint64_t v11 = *v8++;
      uint64_t v12 = (unsigned __int128)(v9 * (__int128)v11) >> 64;
      v9 *= v11;
      if (v12 != v9 >> 63) {
        goto LABEL_149;
      }
      --v10;
    }
    while (v10);
    if (v9 <= 0)
    {
      if (v9 < 0)
      {
LABEL_181:
        __break(1u);
LABEL_182:
        __break(1u);
LABEL_183:
        __break(1u);
        goto LABEL_184;
      }
      float v13 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v109 = *(void *)(MEMORY[0x1E4FBC860] + 24) >> 1;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      float result = swift_bridgeObjectRetain();
      BOOL v14 = v13 + 4;
      if (a5) {
        goto LABEL_68;
      }
LABEL_137:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      float result = swift_bridgeObjectRelease();
      unint64_t v99 = v13[3];
      if (v99 < 2) {
        return (uint64_t)v13;
      }
      unint64_t v100 = v99 >> 1;
      BOOL v26 = __OFSUB__(v100, v109);
      unint64_t v101 = v100 - v109;
      if (!v26)
      {
        void v13[2] = v101;
        return (uint64_t)v13;
      }
LABEL_184:
      __break(1u);
LABEL_185:
      __break(1u);
      goto LABEL_186;
    }
  }
  else
  {
    uint64_t v9 = 1;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945CF00);
  int64_t v15 = (void *)swift_allocObject();
  int64_t v16 = _swift_stdlib_malloc_size(v15);
  uint64_t v17 = v16 - 32;
  if (v16 < 32) {
    uint64_t v17 = v16 - 29;
  }
  uint64_t v18 = v17 >> 2;
  v15[2] = v9;
  v15[3] = 2 * v18;
  uint64_t v103 = v15;
  BOOL v14 = v15 + 4;
  uint64_t v109 = (v18 & 0x7FFFFFFFFFFFFFFFLL) - v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  float result = swift_bridgeObjectRetain();
  uint64_t v19 = 0;
  uint64_t v102 = v6 + 6;
  uint64_t v7 = v108;
  do
  {
    if (v19 == v9) {
      goto LABEL_150;
    }
    if (!a5) {
      goto LABEL_187;
    }
    int64_t v23 = a5 + 2;
    unint64_t v22 = a5[2];
    if (!v22)
    {
      float result = swift_bridgeObjectRetain();
      unint64_t v29 = a5;
      if (v7) {
        goto LABEL_44;
      }
LABEL_37:
      float result = swift_bridgeObjectRelease();
      BOOL v21 = v110;
      goto LABEL_15;
    }
    uint64_t v24 = v22 - 1;
    uint64_t v25 = a5[v22 + 3];
    BOOL v26 = __OFADD__(v25, 1);
    uint64_t v27 = v25 + 1;
    if (v26) {
      goto LABEL_152;
    }
    unint64_t v28 = *(void *)(a4 + 16);
    if (v22 > v28) {
      goto LABEL_153;
    }
    if (v27 < *(void *)(a4 + 32 + 16 * v24 + 8))
    {
      swift_bridgeObjectRetain();
      unint64_t v29 = a5;
      goto LABEL_39;
    }
    uint64_t v105 = v14;
    float result = swift_bridgeObjectRetain();
    if (v22 == 1)
    {
LABEL_36:
      float result = swift_bridgeObjectRelease();
      unint64_t v29 = 0;
      BOOL v6 = a3;
      uint64_t v7 = v108;
      BOOL v14 = v105;
      if (v108) {
        goto LABEL_44;
      }
      goto LABEL_37;
    }
    uint64_t v30 = (int64_t *)(a4 + 8 + 16 * v22);
    unint64_t v31 = v22;
    unint64_t v29 = a5;
    while (1)
    {
      if (!v29) {
        goto LABEL_185;
      }
      float result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        float result = (uint64_t)sub_19E612754(v29);
        unint64_t v29 = (void *)result;
      }
      unint64_t v32 = v31 - 1;
      if ((int64_t)(v31 - 1) >= v29[2])
      {
        __break(1u);
LABEL_142:
        __break(1u);
LABEL_143:
        __break(1u);
LABEL_144:
        __break(1u);
LABEL_145:
        __break(1u);
LABEL_146:
        __break(1u);
LABEL_147:
        __break(1u);
LABEL_148:
        __break(1u);
LABEL_149:
        __break(1u);
LABEL_150:
        __break(1u);
LABEL_151:
        __break(1u);
LABEL_152:
        __break(1u);
LABEL_153:
        __break(1u);
LABEL_154:
        __break(1u);
LABEL_155:
        __break(1u);
LABEL_156:
        __break(1u);
LABEL_157:
        __break(1u);
LABEL_158:
        __break(1u);
LABEL_159:
        __break(1u);
LABEL_160:
        __break(1u);
LABEL_161:
        __break(1u);
        goto LABEL_162;
      }
      v29[v31 + 3] = 0;
      uint64_t v24 = v31 - 2;
      if ((uint64_t)(v31 - 2) >= (uint64_t)*v23) {
        goto LABEL_142;
      }
      unint64_t v33 = v23[v31];
      BOOL v26 = __OFADD__(v33, 1);
      int64_t v34 = v33 + 1;
      if (v26) {
        goto LABEL_143;
      }
      if (v24 >= (uint64_t)v28) {
        goto LABEL_144;
      }
      if (v34 < *v30) {
        break;
      }
      v30 -= 2;
      --v31;
      if (v32 == 1) {
        goto LABEL_36;
      }
    }
    BOOL v6 = a3;
    BOOL v14 = v105;
LABEL_39:
    float result = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v7 = v108;
    if ((result & 1) == 0)
    {
      float result = (uint64_t)sub_19E612754(v29);
      unint64_t v29 = (void *)result;
    }
    if (v24 >= v29[2]) {
      goto LABEL_158;
    }
    uint64_t v35 = v29[v24 + 4];
    BOOL v26 = __OFADD__(v35, 1);
    uint64_t v36 = v35 + 1;
    if (v26) {
      goto LABEL_159;
    }
    v29[v24 + 4] = v36;
    if (!v108) {
      goto LABEL_37;
    }
LABEL_44:
    unint64_t v37 = *v23;
    unint64_t v38 = v6[2];
    if (v38 < *v23) {
      goto LABEL_154;
    }
    if (!v22)
    {
      uint64_t v20 = 0;
      goto LABEL_14;
    }
    if (!v37) {
      goto LABEL_160;
    }
    uint64_t v39 = a5[4];
    uint64_t v40 = v6[4];
    uint64_t v20 = v39 * v40;
    if ((unsigned __int128)(v39 * (__int128)v40) >> 64 != (v39 * v40) >> 63) {
      goto LABEL_161;
    }
    if (v22 == 1) {
      goto LABEL_14;
    }
    if (v37 < 2) {
      goto LABEL_175;
    }
    if (v38 == 1) {
      goto LABEL_14;
    }
    uint64_t v41 = a5[5];
    uint64_t v42 = v6[5];
    uint64_t v43 = v41 * v42;
    if ((unsigned __int128)(v41 * (__int128)v42) >> 64 != (v41 * v42) >> 63) {
      goto LABEL_177;
    }
    BOOL v26 = __OFADD__(v20, v43);
    v20 += v43;
    if (v26)
    {
LABEL_178:
      __break(1u);
LABEL_179:
      __break(1u);
LABEL_180:
      __break(1u);
      goto LABEL_181;
    }
    if (v22 != 2)
    {
      BOOL v44 = v37 >= 3;
      unint64_t v45 = v37 - 3;
      if (!v44) {
        goto LABEL_182;
      }
      unint64_t v46 = v38 - 2;
      if (v38 != 2)
      {
        uint64_t v47 = a5 + 6;
        if (v38 <= 2) {
          unint64_t v38 = 2;
        }
        unint64_t v48 = v38 - 2;
        unint64_t v49 = v22 - 3;
        unint64_t v50 = v102;
        while (v48)
        {
          uint64_t v51 = *v47 * *v50;
          if ((unsigned __int128)(*v47 * (__int128)*v50) >> 64 != v51 >> 63) {
            goto LABEL_163;
          }
          BOOL v26 = __OFADD__(v20, v51);
          v20 += v51;
          if (v26) {
            goto LABEL_164;
          }
          if (!v49) {
            goto LABEL_14;
          }
          if (!v45) {
            goto LABEL_165;
          }
          ++v50;
          ++v47;
          --v45;
          --v48;
          --v49;
          if (!--v46) {
            goto LABEL_14;
          }
        }
LABEL_162:
        __break(1u);
LABEL_163:
        __break(1u);
LABEL_164:
        __break(1u);
LABEL_165:
        __break(1u);
LABEL_166:
        __break(1u);
LABEL_167:
        __break(1u);
LABEL_168:
        __break(1u);
LABEL_169:
        __break(1u);
LABEL_170:
        __break(1u);
LABEL_171:
        __break(1u);
LABEL_172:
        __break(1u);
LABEL_173:
        __break(1u);
LABEL_174:
        __break(1u);
LABEL_175:
        __break(1u);
LABEL_176:
        __break(1u);
LABEL_177:
        __break(1u);
        goto LABEL_178;
      }
    }
LABEL_14:
    float result = swift_bridgeObjectRelease();
    BOOL v21 = &v110[v20];
LABEL_15:
    ++v19;
    *v14++ = *v21;
    a5 = v29;
  }
  while (v19 != v9);
  a5 = v29;
  float v13 = v103;
  if (!v29) {
    goto LABEL_137;
  }
LABEL_68:
  uint64_t v52 = a4 + 32;
  uint64_t v104 = v6 + 6;
  while (2)
  {
    unint64_t v53 = v14;
    unint64_t v54 = v13;
    uint64_t v56 = a5 + 2;
    unint64_t v55 = a5[2];
    if (!v55)
    {
      float result = swift_bridgeObjectRetain();
      unint64_t v61 = a5;
      if (v7) {
        goto LABEL_95;
      }
      goto LABEL_88;
    }
    uint64_t v57 = v55 - 1;
    uint64_t v58 = a5[v55 + 3];
    BOOL v26 = __OFADD__(v58, 1);
    uint64_t v59 = v58 + 1;
    if (v26) {
      goto LABEL_155;
    }
    unint64_t v60 = *(void *)(a4 + 16);
    if (v55 > v60) {
      goto LABEL_156;
    }
    if (v59 < *(void *)(v52 + 16 * v57 + 8))
    {
      swift_bridgeObjectRetain();
      unint64_t v61 = a5;
LABEL_90:
      float result = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v7 = v108;
      if ((result & 1) == 0)
      {
        float result = (uint64_t)sub_19E612754(v61);
        unint64_t v61 = (void *)result;
      }
      if (v57 >= v61[2]) {
        goto LABEL_166;
      }
      uint64_t v68 = v61[v57 + 4];
      BOOL v26 = __OFADD__(v68, 1);
      uint64_t v69 = v68 + 1;
      if (v26) {
        goto LABEL_167;
      }
      v61[v57 + 4] = v69;
      if (v108)
      {
LABEL_95:
        unint64_t v70 = *v56;
        unint64_t v71 = v6[2];
        if (v71 < *v56) {
          goto LABEL_157;
        }
        if (v55)
        {
          if (!v70) {
            goto LABEL_168;
          }
          uint64_t v72 = a5[4];
          uint64_t v73 = v6[4];
          uint64_t v74 = v72 * v73;
          if ((unsigned __int128)(v72 * (__int128)v73) >> 64 != (v72 * v73) >> 63) {
            goto LABEL_169;
          }
          if (v55 != 1)
          {
            if (v70 < 2) {
              goto LABEL_176;
            }
            if (v71 != 1)
            {
              uint64_t v75 = a5[5];
              uint64_t v76 = v6[5];
              uint64_t v77 = v75 * v76;
              if ((unsigned __int128)(v75 * (__int128)v76) >> 64 != (v75 * v76) >> 63) {
                goto LABEL_179;
              }
              BOOL v26 = __OFADD__(v74, v77);
              v74 += v77;
              if (v26) {
                goto LABEL_180;
              }
              if (v55 != 2)
              {
                BOOL v44 = v70 >= 3;
                unint64_t v78 = v70 - 3;
                if (!v44) {
                  goto LABEL_183;
                }
                unint64_t v79 = v71 - 2;
                if (v71 != 2)
                {
                  int v80 = a5 + 6;
                  if (v71 <= 2) {
                    unint64_t v71 = 2;
                  }
                  unint64_t v81 = v71 - 2;
                  unint64_t v82 = v55 - 3;
                  uint64_t v83 = v104;
                  while (v81)
                  {
                    uint64_t v84 = *v80 * *v83;
                    if ((unsigned __int128)(*v80 * (__int128)*v83) >> 64 != v84 >> 63) {
                      goto LABEL_171;
                    }
                    BOOL v26 = __OFADD__(v74, v84);
                    v74 += v84;
                    if (v26) {
                      goto LABEL_172;
                    }
                    if (!v82) {
                      goto LABEL_119;
                    }
                    if (!v78) {
                      goto LABEL_174;
                    }
                    ++v83;
                    ++v80;
                    --v78;
                    --v81;
                    --v82;
                    if (!--v79) {
                      goto LABEL_119;
                    }
                  }
                  goto LABEL_170;
                }
              }
            }
          }
        }
        else
        {
          uint64_t v74 = 0;
        }
LABEL_119:
        float result = swift_bridgeObjectRelease();
        uint64_t v67 = &v110[v74];
        goto LABEL_120;
      }
LABEL_88:
      float result = swift_bridgeObjectRelease();
      uint64_t v67 = v110;
LABEL_120:
      int v85 = *v67;
      float v13 = v54;
      if (v109)
      {
        uint64_t v86 = v53;
        uint64_t v87 = v109 - 1;
        if (__OFSUB__(v109, 1)) {
          goto LABEL_151;
        }
      }
      else
      {
        unint64_t v88 = v54[3];
        if ((uint64_t)((v88 >> 1) + 0x4000000000000000) < 0) {
          goto LABEL_173;
        }
        int64_t v89 = v88 & 0xFFFFFFFFFFFFFFFELL;
        if (v89 <= 1) {
          uint64_t v90 = 1;
        }
        else {
          uint64_t v90 = v89;
        }
        __swift_instantiateConcreteTypeFromMangledName(&qword_1E945CF00);
        uint64_t v91 = (void *)swift_allocObject();
        int64_t v92 = _swift_stdlib_malloc_size(v91);
        uint64_t v93 = v92 - 32;
        if (v92 < 32) {
          uint64_t v93 = v92 - 29;
        }
        uint64_t v94 = v93 >> 2;
        v91[2] = v90;
        v91[3] = 2 * (v93 >> 2);
        unint64_t v95 = (unint64_t)(v91 + 4);
        uint64_t v96 = v13[3] >> 1;
        if (v13[2])
        {
          uint64_t v97 = v13 + 4;
          if (v91 != v13 || v95 >= (unint64_t)v97 + 4 * v96) {
            memmove(v91 + 4, v97, 4 * v96);
          }
          void v13[2] = 0;
        }
        uint64_t v86 = (_DWORD *)(v95 + 4 * v96);
        uint64_t v98 = (v94 & 0x7FFFFFFFFFFFFFFFLL) - v96;
        float result = swift_release();
        float v13 = v91;
        BOOL v6 = a3;
        uint64_t v7 = v108;
        BOOL v26 = __OFSUB__(v98, 1);
        uint64_t v87 = v98 - 1;
        if (v26) {
          goto LABEL_151;
        }
      }
      uint64_t v109 = v87;
      *uint64_t v86 = v85;
      BOOL v14 = v86 + 1;
      a5 = v61;
      if (!v61) {
        goto LABEL_137;
      }
      continue;
    }
    break;
  }
  float result = swift_bridgeObjectRetain();
  if (v55 == 1)
  {
LABEL_87:
    float result = swift_bridgeObjectRelease();
    unint64_t v61 = 0;
    uint64_t v52 = a4 + 32;
    BOOL v6 = a3;
    uint64_t v7 = v108;
    if (v108) {
      goto LABEL_95;
    }
    goto LABEL_88;
  }
  unint64_t v62 = (int64_t *)(a4 + 8 + 16 * v55);
  unint64_t v63 = v55;
  unint64_t v61 = a5;
  while (v61)
  {
    float result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      float result = (uint64_t)sub_19E612754(v61);
      unint64_t v61 = (void *)result;
    }
    unint64_t v64 = v63 - 1;
    if ((int64_t)(v63 - 1) >= v61[2]) {
      goto LABEL_145;
    }
    v61[v63 + 3] = 0;
    uint64_t v57 = v63 - 2;
    if ((uint64_t)(v63 - 2) >= (uint64_t)*v56) {
      goto LABEL_146;
    }
    unint64_t v65 = v56[v63];
    BOOL v26 = __OFADD__(v65, 1);
    int64_t v66 = v65 + 1;
    if (v26) {
      goto LABEL_147;
    }
    if (v57 >= (uint64_t)v60) {
      goto LABEL_148;
    }
    if (v66 < *v62)
    {
      uint64_t v52 = a4 + 32;
      BOOL v6 = a3;
      goto LABEL_90;
    }
    v62 -= 2;
    --v63;
    if (v64 == 1) {
      goto LABEL_87;
    }
  }
LABEL_186:
  __break(1u);
LABEL_187:
  __break(1u);
  return result;
}

uint64_t sub_19E6CF264(uint64_t result, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  BOOL v6 = a3;
  uint64_t v109 = (_WORD *)result;
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v107 = v7;
  if (v7)
  {
    uint64_t v8 = (uint64_t *)(a2 + 32);
    uint64_t v9 = 1;
    uint64_t v10 = *(void *)(a2 + 16);
    do
    {
      uint64_t v11 = *v8++;
      uint64_t v12 = (unsigned __int128)(v9 * (__int128)v11) >> 64;
      v9 *= v11;
      if (v12 != v9 >> 63) {
        goto LABEL_150;
      }
      --v10;
    }
    while (v10);
    if (v9 <= 0)
    {
      if (v9 < 0)
      {
LABEL_182:
        __break(1u);
LABEL_183:
        __break(1u);
LABEL_184:
        __break(1u);
        goto LABEL_185;
      }
      float v13 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v108 = *(void *)(MEMORY[0x1E4FBC860] + 24) >> 1;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      float result = swift_bridgeObjectRetain();
      BOOL v14 = v13 + 4;
      if (a5) {
        goto LABEL_68;
      }
LABEL_138:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      float result = swift_bridgeObjectRelease();
      unint64_t v98 = v13[3];
      if (v98 < 2) {
        return (uint64_t)v13;
      }
      unint64_t v99 = v98 >> 1;
      BOOL v25 = __OFSUB__(v99, v108);
      unint64_t v100 = v99 - v108;
      if (!v25)
      {
        void v13[2] = v100;
        return (uint64_t)v13;
      }
LABEL_185:
      __break(1u);
LABEL_186:
      __break(1u);
      goto LABEL_187;
    }
  }
  else
  {
    uint64_t v9 = 1;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945CF08);
  int64_t v15 = (void *)swift_allocObject();
  int64_t v16 = _swift_stdlib_malloc_size(v15);
  unint64_t v17 = v16 - 32;
  if (v16 < 32) {
    unint64_t v17 = v16 - 31;
  }
  v15[2] = v9;
  v15[3] = v17 & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v102 = v15;
  BOOL v14 = v15 + 4;
  uint64_t v108 = (v17 >> 1) - v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  float result = swift_bridgeObjectRetain();
  uint64_t v18 = 0;
  unint64_t v101 = v6 + 6;
  uint64_t v7 = v107;
  do
  {
    if (v18 == v9) {
      goto LABEL_151;
    }
    if (!a5) {
      goto LABEL_188;
    }
    unint64_t v22 = a5 + 2;
    unint64_t v21 = a5[2];
    if (!v21)
    {
      float result = swift_bridgeObjectRetain();
      unint64_t v28 = a5;
      if (v7) {
        goto LABEL_44;
      }
LABEL_37:
      float result = swift_bridgeObjectRelease();
      uint64_t v20 = v109;
      goto LABEL_15;
    }
    uint64_t v23 = v21 - 1;
    uint64_t v24 = a5[v21 + 3];
    BOOL v25 = __OFADD__(v24, 1);
    uint64_t v26 = v24 + 1;
    if (v25) {
      goto LABEL_153;
    }
    unint64_t v27 = *(void *)(a4 + 16);
    if (v21 > v27) {
      goto LABEL_154;
    }
    if (v26 < *(void *)(a4 + 32 + 16 * v23 + 8))
    {
      swift_bridgeObjectRetain();
      unint64_t v28 = a5;
      goto LABEL_39;
    }
    uint64_t v104 = v14;
    float result = swift_bridgeObjectRetain();
    if (v21 == 1)
    {
LABEL_36:
      float result = swift_bridgeObjectRelease();
      unint64_t v28 = 0;
      BOOL v6 = a3;
      uint64_t v7 = v107;
      BOOL v14 = v104;
      if (v107) {
        goto LABEL_44;
      }
      goto LABEL_37;
    }
    unint64_t v29 = (int64_t *)(a4 + 8 + 16 * v21);
    unint64_t v30 = v21;
    unint64_t v28 = a5;
    while (1)
    {
      if (!v28) {
        goto LABEL_186;
      }
      float result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        float result = (uint64_t)sub_19E612754(v28);
        unint64_t v28 = (void *)result;
      }
      unint64_t v31 = v30 - 1;
      if ((int64_t)(v30 - 1) >= v28[2])
      {
        __break(1u);
LABEL_143:
        __break(1u);
LABEL_144:
        __break(1u);
LABEL_145:
        __break(1u);
LABEL_146:
        __break(1u);
LABEL_147:
        __break(1u);
LABEL_148:
        __break(1u);
LABEL_149:
        __break(1u);
LABEL_150:
        __break(1u);
LABEL_151:
        __break(1u);
LABEL_152:
        __break(1u);
LABEL_153:
        __break(1u);
LABEL_154:
        __break(1u);
LABEL_155:
        __break(1u);
LABEL_156:
        __break(1u);
LABEL_157:
        __break(1u);
LABEL_158:
        __break(1u);
LABEL_159:
        __break(1u);
LABEL_160:
        __break(1u);
LABEL_161:
        __break(1u);
LABEL_162:
        __break(1u);
        goto LABEL_163;
      }
      v28[v30 + 3] = 0;
      uint64_t v23 = v30 - 2;
      if ((uint64_t)(v30 - 2) >= (uint64_t)*v22) {
        goto LABEL_143;
      }
      unint64_t v32 = v22[v30];
      BOOL v25 = __OFADD__(v32, 1);
      int64_t v33 = v32 + 1;
      if (v25) {
        goto LABEL_144;
      }
      if (v23 >= (uint64_t)v27) {
        goto LABEL_145;
      }
      if (v33 < *v29) {
        break;
      }
      v29 -= 2;
      --v30;
      if (v31 == 1) {
        goto LABEL_36;
      }
    }
    BOOL v6 = a3;
    BOOL v14 = v104;
LABEL_39:
    float result = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v7 = v107;
    if ((result & 1) == 0)
    {
      float result = (uint64_t)sub_19E612754(v28);
      unint64_t v28 = (void *)result;
    }
    if (v23 >= v28[2]) {
      goto LABEL_159;
    }
    uint64_t v34 = v28[v23 + 4];
    BOOL v25 = __OFADD__(v34, 1);
    uint64_t v35 = v34 + 1;
    if (v25) {
      goto LABEL_160;
    }
    v28[v23 + 4] = v35;
    if (!v107) {
      goto LABEL_37;
    }
LABEL_44:
    unint64_t v36 = *v22;
    unint64_t v37 = v6[2];
    if (v37 < *v22) {
      goto LABEL_155;
    }
    if (!v21)
    {
      uint64_t v19 = 0;
      goto LABEL_14;
    }
    if (!v36) {
      goto LABEL_161;
    }
    uint64_t v38 = a5[4];
    uint64_t v39 = v6[4];
    uint64_t v19 = v38 * v39;
    if ((unsigned __int128)(v38 * (__int128)v39) >> 64 != (v38 * v39) >> 63) {
      goto LABEL_162;
    }
    if (v21 == 1) {
      goto LABEL_14;
    }
    if (v36 < 2) {
      goto LABEL_176;
    }
    if (v37 == 1) {
      goto LABEL_14;
    }
    uint64_t v40 = a5[5];
    uint64_t v41 = v6[5];
    uint64_t v42 = v40 * v41;
    if ((unsigned __int128)(v40 * (__int128)v41) >> 64 != (v40 * v41) >> 63) {
      goto LABEL_178;
    }
    BOOL v25 = __OFADD__(v19, v42);
    v19 += v42;
    if (v25)
    {
LABEL_179:
      __break(1u);
LABEL_180:
      __break(1u);
LABEL_181:
      __break(1u);
      goto LABEL_182;
    }
    if (v21 != 2)
    {
      BOOL v43 = v36 >= 3;
      unint64_t v44 = v36 - 3;
      if (!v43) {
        goto LABEL_183;
      }
      unint64_t v45 = v37 - 2;
      if (v37 != 2)
      {
        unint64_t v46 = a5 + 6;
        if (v37 <= 2) {
          unint64_t v37 = 2;
        }
        unint64_t v47 = v37 - 2;
        unint64_t v48 = v21 - 3;
        unint64_t v49 = v101;
        while (v47)
        {
          uint64_t v50 = *v46 * *v49;
          if ((unsigned __int128)(*v46 * (__int128)*v49) >> 64 != v50 >> 63) {
            goto LABEL_164;
          }
          BOOL v25 = __OFADD__(v19, v50);
          v19 += v50;
          if (v25) {
            goto LABEL_165;
          }
          if (!v48) {
            goto LABEL_14;
          }
          if (!v44) {
            goto LABEL_166;
          }
          ++v49;
          ++v46;
          --v44;
          --v47;
          --v48;
          if (!--v45) {
            goto LABEL_14;
          }
        }
LABEL_163:
        __break(1u);
LABEL_164:
        __break(1u);
LABEL_165:
        __break(1u);
LABEL_166:
        __break(1u);
LABEL_167:
        __break(1u);
LABEL_168:
        __break(1u);
LABEL_169:
        __break(1u);
LABEL_170:
        __break(1u);
LABEL_171:
        __break(1u);
LABEL_172:
        __break(1u);
LABEL_173:
        __break(1u);
LABEL_174:
        __break(1u);
LABEL_175:
        __break(1u);
LABEL_176:
        __break(1u);
LABEL_177:
        __break(1u);
LABEL_178:
        __break(1u);
        goto LABEL_179;
      }
    }
LABEL_14:
    float result = swift_bridgeObjectRelease();
    uint64_t v20 = &v109[v19];
LABEL_15:
    ++v18;
    *v14++ = *v20;
    a5 = v28;
  }
  while (v18 != v9);
  a5 = v28;
  float v13 = v102;
  if (!v28) {
    goto LABEL_138;
  }
LABEL_68:
  uint64_t v51 = a4 + 32;
  uint64_t v103 = v6 + 6;
  while (2)
  {
    uint64_t v52 = v14;
    unint64_t v53 = v13;
    unint64_t v55 = a5 + 2;
    unint64_t v54 = a5[2];
    if (!v54)
    {
      float result = swift_bridgeObjectRetain();
      unint64_t v60 = a5;
      if (v7) {
        goto LABEL_95;
      }
      goto LABEL_88;
    }
    uint64_t v56 = v54 - 1;
    uint64_t v57 = a5[v54 + 3];
    BOOL v25 = __OFADD__(v57, 1);
    uint64_t v58 = v57 + 1;
    if (v25) {
      goto LABEL_156;
    }
    unint64_t v59 = *(void *)(a4 + 16);
    if (v54 > v59) {
      goto LABEL_157;
    }
    if (v58 < *(void *)(v51 + 16 * v56 + 8))
    {
      swift_bridgeObjectRetain();
      unint64_t v60 = a5;
LABEL_90:
      float result = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v7 = v107;
      if ((result & 1) == 0)
      {
        float result = (uint64_t)sub_19E612754(v60);
        unint64_t v60 = (void *)result;
      }
      if (v56 >= v60[2]) {
        goto LABEL_167;
      }
      uint64_t v67 = v60[v56 + 4];
      BOOL v25 = __OFADD__(v67, 1);
      uint64_t v68 = v67 + 1;
      if (v25) {
        goto LABEL_168;
      }
      v60[v56 + 4] = v68;
      if (v107)
      {
LABEL_95:
        unint64_t v69 = *v55;
        unint64_t v70 = v6[2];
        if (v70 < *v55) {
          goto LABEL_158;
        }
        if (v54)
        {
          if (!v69) {
            goto LABEL_169;
          }
          uint64_t v71 = a5[4];
          uint64_t v72 = v6[4];
          uint64_t v73 = v71 * v72;
          if ((unsigned __int128)(v71 * (__int128)v72) >> 64 != (v71 * v72) >> 63) {
            goto LABEL_170;
          }
          if (v54 != 1)
          {
            if (v69 < 2) {
              goto LABEL_177;
            }
            if (v70 != 1)
            {
              uint64_t v74 = a5[5];
              uint64_t v75 = v6[5];
              uint64_t v76 = v74 * v75;
              if ((unsigned __int128)(v74 * (__int128)v75) >> 64 != (v74 * v75) >> 63) {
                goto LABEL_180;
              }
              BOOL v25 = __OFADD__(v73, v76);
              v73 += v76;
              if (v25) {
                goto LABEL_181;
              }
              if (v54 != 2)
              {
                BOOL v43 = v69 >= 3;
                unint64_t v77 = v69 - 3;
                if (!v43) {
                  goto LABEL_184;
                }
                unint64_t v78 = v70 - 2;
                if (v70 != 2)
                {
                  unint64_t v79 = a5 + 6;
                  if (v70 <= 2) {
                    unint64_t v70 = 2;
                  }
                  unint64_t v80 = v70 - 2;
                  unint64_t v81 = v54 - 3;
                  unint64_t v82 = v103;
                  while (v80)
                  {
                    uint64_t v83 = *v79 * *v82;
                    if ((unsigned __int128)(*v79 * (__int128)*v82) >> 64 != v83 >> 63) {
                      goto LABEL_172;
                    }
                    BOOL v25 = __OFADD__(v73, v83);
                    v73 += v83;
                    if (v25) {
                      goto LABEL_173;
                    }
                    if (!v81) {
                      goto LABEL_119;
                    }
                    if (!v77) {
                      goto LABEL_175;
                    }
                    ++v82;
                    ++v79;
                    --v77;
                    --v80;
                    --v81;
                    if (!--v78) {
                      goto LABEL_119;
                    }
                  }
                  goto LABEL_171;
                }
              }
            }
          }
        }
        else
        {
          uint64_t v73 = 0;
        }
LABEL_119:
        float result = swift_bridgeObjectRelease();
        int64_t v66 = &v109[v73];
        goto LABEL_120;
      }
LABEL_88:
      float result = swift_bridgeObjectRelease();
      int64_t v66 = v109;
LABEL_120:
      __int16 v84 = *v66;
      float v13 = v53;
      if (v108)
      {
        int v85 = v52;
        uint64_t v86 = v108 - 1;
        if (__OFSUB__(v108, 1)) {
          goto LABEL_152;
        }
      }
      else
      {
        unint64_t v87 = v53[3];
        if ((uint64_t)((v87 >> 1) + 0x4000000000000000) < 0) {
          goto LABEL_174;
        }
        int64_t v88 = v87 & 0xFFFFFFFFFFFFFFFELL;
        if (v88 <= 1) {
          uint64_t v89 = 1;
        }
        else {
          uint64_t v89 = v88;
        }
        __swift_instantiateConcreteTypeFromMangledName(&qword_1E945CF08);
        uint64_t v90 = (void *)swift_allocObject();
        int64_t v91 = _swift_stdlib_malloc_size(v90);
        if (v91 >= 32) {
          unint64_t v92 = v91 - 32;
        }
        else {
          unint64_t v92 = v91 - 31;
        }
        v90[2] = v89;
        v90[3] = v92 & 0xFFFFFFFFFFFFFFFELL;
        unint64_t v93 = (unint64_t)(v90 + 4);
        unint64_t v94 = v13[3];
        unint64_t v95 = v94 >> 1;
        if (v13[2])
        {
          uint64_t v96 = v13 + 4;
          if (v90 != v13 || v93 >= (unint64_t)v96 + 2 * v95) {
            memmove(v90 + 4, v96, v94 & 0xFFFFFFFFFFFFFFFELL);
          }
          void v13[2] = 0;
        }
        int v85 = (_WORD *)(v93 + 2 * v95);
        unint64_t v97 = (v92 >> 1) - v95;
        float result = swift_release();
        float v13 = v90;
        BOOL v6 = a3;
        uint64_t v7 = v107;
        BOOL v25 = __OFSUB__(v97, 1);
        uint64_t v86 = v97 - 1;
        if (v25) {
          goto LABEL_152;
        }
      }
      uint64_t v108 = v86;
      *int v85 = v84;
      BOOL v14 = v85 + 1;
      a5 = v60;
      if (!v60) {
        goto LABEL_138;
      }
      continue;
    }
    break;
  }
  float result = swift_bridgeObjectRetain();
  if (v54 == 1)
  {
LABEL_87:
    float result = swift_bridgeObjectRelease();
    unint64_t v60 = 0;
    uint64_t v51 = a4 + 32;
    BOOL v6 = a3;
    uint64_t v7 = v107;
    if (v107) {
      goto LABEL_95;
    }
    goto LABEL_88;
  }
  unint64_t v61 = (int64_t *)(a4 + 8 + 16 * v54);
  unint64_t v62 = v54;
  unint64_t v60 = a5;
  while (v60)
  {
    float result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      float result = (uint64_t)sub_19E612754(v60);
      unint64_t v60 = (void *)result;
    }
    unint64_t v63 = v62 - 1;
    if ((int64_t)(v62 - 1) >= v60[2]) {
      goto LABEL_146;
    }
    v60[v62 + 3] = 0;
    uint64_t v56 = v62 - 2;
    if ((uint64_t)(v62 - 2) >= (uint64_t)*v55) {
      goto LABEL_147;
    }
    unint64_t v64 = v55[v62];
    BOOL v25 = __OFADD__(v64, 1);
    int64_t v65 = v64 + 1;
    if (v25) {
      goto LABEL_148;
    }
    if (v56 >= (uint64_t)v59) {
      goto LABEL_149;
    }
    if (v65 < *v61)
    {
      uint64_t v51 = a4 + 32;
      BOOL v6 = a3;
      goto LABEL_90;
    }
    v61 -= 2;
    --v62;
    if (v63 == 1) {
      goto LABEL_87;
    }
  }
LABEL_187:
  __break(1u);
LABEL_188:
  __break(1u);
  return result;
}

uint64_t sub_19E6CFAEC(uint64_t result, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  BOOL v6 = a3;
  uint64_t v108 = (_DWORD *)result;
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v106 = v7;
  if (v7)
  {
    uint64_t v8 = (uint64_t *)(a2 + 32);
    uint64_t v9 = 1;
    uint64_t v10 = *(void *)(a2 + 16);
    do
    {
      uint64_t v11 = *v8++;
      uint64_t v12 = (unsigned __int128)(v9 * (__int128)v11) >> 64;
      v9 *= v11;
      if (v12 != v9 >> 63) {
        goto LABEL_148;
      }
      --v10;
    }
    while (v10);
    if (v9 <= 0)
    {
      if (v9 < 0)
      {
LABEL_180:
        __break(1u);
LABEL_181:
        __break(1u);
LABEL_182:
        __break(1u);
LABEL_183:
        __break(1u);
LABEL_184:
        __break(1u);
        goto LABEL_185;
      }
      uint64_t v13 = MEMORY[0x1E4FBC860];
      uint64_t v101 = *(void *)(MEMORY[0x1E4FBC860] + 24) >> 1;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      float result = swift_bridgeObjectRetain();
      uint64_t v107 = (void *)v13;
      BOOL v14 = (_DWORD *)(v13 + 32);
      if (a5) {
        goto LABEL_72;
      }
LABEL_8:
      uint64_t v15 = v101;
LABEL_9:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      float result = (uint64_t)v107;
      unint64_t v16 = v107[3];
      if (v16 < 2) {
        return result;
      }
      unint64_t v17 = v16 >> 1;
      BOOL v18 = __OFSUB__(v17, v15);
      unint64_t v19 = v17 - v15;
      if (!v18)
      {
        v107[2] = v19;
        return result;
      }
      goto LABEL_183;
    }
  }
  else
  {
    uint64_t v9 = 1;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945CEB8);
  uint64_t v20 = (void *)swift_allocObject();
  int64_t v21 = _swift_stdlib_malloc_size(v20);
  uint64_t v22 = v21 - 32;
  if (v21 < 32) {
    uint64_t v22 = v21 - 29;
  }
  uint64_t v23 = v22 >> 2;
  v20[2] = v9;
  v20[3] = 2 * v23;
  uint64_t v107 = v20;
  BOOL v14 = v20 + 4;
  uint64_t v101 = (v23 & 0x7FFFFFFFFFFFFFFFLL) - v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  float result = swift_bridgeObjectRetain();
  uint64_t v24 = 0;
  unint64_t v100 = v6 + 6;
  uint64_t v7 = v106;
  do
  {
    if (v24 == v9) {
      goto LABEL_149;
    }
    if (!a5) {
      goto LABEL_186;
    }
    unint64_t v28 = a5 + 2;
    unint64_t v27 = a5[2];
    if (!v27)
    {
      float result = swift_bridgeObjectRetain();
      int64_t v33 = a5;
      if (v7) {
        goto LABEL_48;
      }
LABEL_41:
      float result = swift_bridgeObjectRelease();
      uint64_t v26 = v108;
      goto LABEL_19;
    }
    uint64_t v29 = v27 - 1;
    uint64_t v30 = a5[v27 + 3];
    BOOL v18 = __OFADD__(v30, 1);
    uint64_t v31 = v30 + 1;
    if (v18) {
      goto LABEL_151;
    }
    unint64_t v32 = *(void *)(a4 + 16);
    if (v27 > v32) {
      goto LABEL_152;
    }
    if (v31 < *(void *)(a4 + 32 + 16 * v29 + 8))
    {
      swift_bridgeObjectRetain();
      int64_t v33 = a5;
      goto LABEL_43;
    }
    uint64_t v103 = v14;
    float result = swift_bridgeObjectRetain();
    if (v27 == 1)
    {
LABEL_40:
      float result = swift_bridgeObjectRelease();
      int64_t v33 = 0;
      BOOL v6 = a3;
      uint64_t v7 = v106;
      BOOL v14 = v103;
      if (v106) {
        goto LABEL_48;
      }
      goto LABEL_41;
    }
    uint64_t v34 = (int64_t *)(a4 + 8 + 16 * v27);
    unint64_t v35 = v27;
    int64_t v33 = a5;
    while (1)
    {
      if (!v33) {
        goto LABEL_184;
      }
      float result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        float result = (uint64_t)sub_19E612754(v33);
        int64_t v33 = (void *)result;
      }
      unint64_t v36 = v35 - 1;
      if ((int64_t)(v35 - 1) >= v33[2])
      {
        __break(1u);
LABEL_141:
        __break(1u);
LABEL_142:
        __break(1u);
LABEL_143:
        __break(1u);
LABEL_144:
        __break(1u);
LABEL_145:
        __break(1u);
LABEL_146:
        __break(1u);
LABEL_147:
        __break(1u);
LABEL_148:
        __break(1u);
LABEL_149:
        __break(1u);
LABEL_150:
        __break(1u);
LABEL_151:
        __break(1u);
LABEL_152:
        __break(1u);
LABEL_153:
        __break(1u);
LABEL_154:
        __break(1u);
LABEL_155:
        __break(1u);
LABEL_156:
        __break(1u);
LABEL_157:
        __break(1u);
LABEL_158:
        __break(1u);
LABEL_159:
        __break(1u);
LABEL_160:
        __break(1u);
        goto LABEL_161;
      }
      v33[v35 + 3] = 0;
      uint64_t v29 = v35 - 2;
      if ((uint64_t)(v35 - 2) >= (uint64_t)*v28) {
        goto LABEL_141;
      }
      unint64_t v37 = v28[v35];
      BOOL v18 = __OFADD__(v37, 1);
      int64_t v38 = v37 + 1;
      if (v18) {
        goto LABEL_142;
      }
      if (v29 >= (uint64_t)v32) {
        goto LABEL_143;
      }
      if (v38 < *v34) {
        break;
      }
      v34 -= 2;
      --v35;
      if (v36 == 1) {
        goto LABEL_40;
      }
    }
    BOOL v6 = a3;
    BOOL v14 = v103;
LABEL_43:
    float result = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v7 = v106;
    if ((result & 1) == 0)
    {
      float result = (uint64_t)sub_19E612754(v33);
      int64_t v33 = (void *)result;
    }
    if (v29 >= v33[2]) {
      goto LABEL_157;
    }
    uint64_t v39 = v33[v29 + 4];
    BOOL v18 = __OFADD__(v39, 1);
    uint64_t v40 = v39 + 1;
    if (v18) {
      goto LABEL_158;
    }
    v33[v29 + 4] = v40;
    if (!v106) {
      goto LABEL_41;
    }
LABEL_48:
    unint64_t v41 = *v28;
    unint64_t v42 = v6[2];
    if (v42 < *v28) {
      goto LABEL_153;
    }
    if (!v27)
    {
      uint64_t v25 = 0;
      goto LABEL_18;
    }
    if (!v41) {
      goto LABEL_159;
    }
    uint64_t v43 = a5[4];
    uint64_t v44 = v6[4];
    uint64_t v25 = v43 * v44;
    if ((unsigned __int128)(v43 * (__int128)v44) >> 64 != (v43 * v44) >> 63) {
      goto LABEL_160;
    }
    if (v27 == 1) {
      goto LABEL_18;
    }
    if (v41 < 2) {
      goto LABEL_174;
    }
    if (v42 == 1) {
      goto LABEL_18;
    }
    uint64_t v45 = a5[5];
    uint64_t v46 = v6[5];
    uint64_t v47 = v45 * v46;
    if ((unsigned __int128)(v45 * (__int128)v46) >> 64 != (v45 * v46) >> 63) {
      goto LABEL_176;
    }
    BOOL v18 = __OFADD__(v25, v47);
    v25 += v47;
    if (v18)
    {
LABEL_177:
      __break(1u);
LABEL_178:
      __break(1u);
LABEL_179:
      __break(1u);
      goto LABEL_180;
    }
    if (v27 != 2)
    {
      BOOL v48 = v41 >= 3;
      unint64_t v49 = v41 - 3;
      if (!v48) {
        goto LABEL_181;
      }
      unint64_t v50 = v42 - 2;
      if (v42 != 2)
      {
        uint64_t v51 = a5 + 6;
        if (v42 <= 2) {
          unint64_t v42 = 2;
        }
        unint64_t v52 = v42 - 2;
        unint64_t v53 = v27 - 3;
        unint64_t v54 = v100;
        while (v52)
        {
          uint64_t v55 = *v51 * *v54;
          if ((unsigned __int128)(*v51 * (__int128)*v54) >> 64 != v55 >> 63) {
            goto LABEL_162;
          }
          BOOL v18 = __OFADD__(v25, v55);
          v25 += v55;
          if (v18) {
            goto LABEL_163;
          }
          if (!v53) {
            goto LABEL_18;
          }
          if (!v49) {
            goto LABEL_164;
          }
          ++v54;
          ++v51;
          --v49;
          --v52;
          --v53;
          if (!--v50) {
            goto LABEL_18;
          }
        }
LABEL_161:
        __break(1u);
LABEL_162:
        __break(1u);
LABEL_163:
        __break(1u);
LABEL_164:
        __break(1u);
LABEL_165:
        __break(1u);
LABEL_166:
        __break(1u);
LABEL_167:
        __break(1u);
LABEL_168:
        __break(1u);
LABEL_169:
        __break(1u);
LABEL_170:
        __break(1u);
LABEL_171:
        __break(1u);
LABEL_172:
        __break(1u);
LABEL_173:
        __break(1u);
LABEL_174:
        __break(1u);
LABEL_175:
        __break(1u);
LABEL_176:
        __break(1u);
        goto LABEL_177;
      }
    }
LABEL_18:
    float result = swift_bridgeObjectRelease();
    uint64_t v26 = &v108[v25];
LABEL_19:
    ++v24;
    *v14++ = *v26;
    a5 = v33;
  }
  while (v24 != v9);
  a5 = v33;
  if (!v33) {
    goto LABEL_8;
  }
LABEL_72:
  uint64_t v56 = a4 + 32;
  uint64_t v102 = v6 + 6;
  uint64_t v15 = v101;
  while (2)
  {
    uint64_t v57 = v14;
    unint64_t v59 = a5 + 2;
    unint64_t v58 = a5[2];
    if (!v58)
    {
      float result = swift_bridgeObjectRetain();
      unint64_t v64 = a5;
      if (v7) {
        goto LABEL_99;
      }
      goto LABEL_92;
    }
    uint64_t v60 = v58 - 1;
    uint64_t v61 = a5[v58 + 3];
    BOOL v18 = __OFADD__(v61, 1);
    uint64_t v62 = v61 + 1;
    if (v18) {
      goto LABEL_154;
    }
    unint64_t v63 = *(void *)(a4 + 16);
    if (v58 > v63) {
      goto LABEL_155;
    }
    if (v62 < *(void *)(v56 + 16 * v60 + 8))
    {
      swift_bridgeObjectRetain();
      unint64_t v64 = a5;
LABEL_94:
      float result = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v7 = v106;
      if ((result & 1) == 0)
      {
        float result = (uint64_t)sub_19E612754(v64);
        unint64_t v64 = (void *)result;
      }
      if (v60 >= v64[2]) {
        goto LABEL_165;
      }
      uint64_t v71 = v64[v60 + 4];
      BOOL v18 = __OFADD__(v71, 1);
      uint64_t v72 = v71 + 1;
      if (v18) {
        goto LABEL_166;
      }
      v64[v60 + 4] = v72;
      if (v106)
      {
LABEL_99:
        unint64_t v73 = *v59;
        unint64_t v74 = v6[2];
        if (v74 < *v59) {
          goto LABEL_156;
        }
        if (v58)
        {
          if (!v73) {
            goto LABEL_167;
          }
          uint64_t v75 = a5[4];
          uint64_t v76 = v6[4];
          uint64_t v77 = v75 * v76;
          if ((unsigned __int128)(v75 * (__int128)v76) >> 64 != (v75 * v76) >> 63) {
            goto LABEL_168;
          }
          if (v58 != 1)
          {
            if (v73 < 2) {
              goto LABEL_175;
            }
            if (v74 != 1)
            {
              uint64_t v78 = a5[5];
              uint64_t v79 = v6[5];
              uint64_t v80 = v78 * v79;
              if ((unsigned __int128)(v78 * (__int128)v79) >> 64 != (v78 * v79) >> 63) {
                goto LABEL_178;
              }
              BOOL v18 = __OFADD__(v77, v80);
              v77 += v80;
              if (v18) {
                goto LABEL_179;
              }
              if (v58 != 2)
              {
                BOOL v48 = v73 >= 3;
                unint64_t v81 = v73 - 3;
                if (!v48) {
                  goto LABEL_182;
                }
                unint64_t v82 = v74 - 2;
                if (v74 != 2)
                {
                  uint64_t v83 = a5 + 6;
                  if (v74 <= 2) {
                    unint64_t v74 = 2;
                  }
                  unint64_t v84 = v74 - 2;
                  unint64_t v85 = v58 - 3;
                  uint64_t v86 = v102;
                  while (v84)
                  {
                    uint64_t v87 = *v83 * *v86;
                    if ((unsigned __int128)(*v83 * (__int128)*v86) >> 64 != v87 >> 63) {
                      goto LABEL_170;
                    }
                    BOOL v18 = __OFADD__(v77, v87);
                    v77 += v87;
                    if (v18) {
                      goto LABEL_171;
                    }
                    if (!v85) {
                      goto LABEL_123;
                    }
                    if (!v81) {
                      goto LABEL_173;
                    }
                    ++v86;
                    ++v83;
                    --v81;
                    --v84;
                    --v85;
                    if (!--v82) {
                      goto LABEL_123;
                    }
                  }
                  goto LABEL_169;
                }
              }
            }
          }
        }
        else
        {
          uint64_t v77 = 0;
        }
LABEL_123:
        float result = swift_bridgeObjectRelease();
        unint64_t v70 = &v108[v77];
        goto LABEL_124;
      }
LABEL_92:
      float result = swift_bridgeObjectRelease();
      unint64_t v70 = v108;
LABEL_124:
      int v88 = *v70;
      uint64_t v89 = v107;
      if (!v15)
      {
        unint64_t v90 = v107[3];
        if ((uint64_t)((v90 >> 1) + 0x4000000000000000) < 0) {
          goto LABEL_172;
        }
        int64_t v91 = v90 & 0xFFFFFFFFFFFFFFFELL;
        if (v91 <= 1) {
          uint64_t v92 = 1;
        }
        else {
          uint64_t v92 = v91;
        }
        __swift_instantiateConcreteTypeFromMangledName(&qword_1E945CEB8);
        unint64_t v93 = (void *)swift_allocObject();
        int64_t v94 = _swift_stdlib_malloc_size(v93);
        uint64_t v95 = v94 - 32;
        if (v94 < 32) {
          uint64_t v95 = v94 - 29;
        }
        uint64_t v96 = v95 >> 2;
        v93[2] = v92;
        v93[3] = 2 * (v95 >> 2);
        unint64_t v97 = (unint64_t)(v93 + 4);
        uint64_t v98 = v107[3] >> 1;
        if (v107[2])
        {
          unint64_t v99 = v107 + 4;
          if (v93 != v107 || v97 >= (unint64_t)v99 + 4 * v98) {
            memmove(v93 + 4, v99, 4 * v98);
          }
          v107[2] = 0;
        }
        uint64_t v57 = (_DWORD *)(v97 + 4 * v98);
        uint64_t v15 = (v96 & 0x7FFFFFFFFFFFFFFFLL) - v98;
        float result = swift_release();
        uint64_t v89 = v93;
        BOOL v6 = a3;
        uint64_t v7 = v106;
      }
      BOOL v18 = __OFSUB__(v15--, 1);
      if (v18) {
        goto LABEL_150;
      }
      uint64_t v107 = v89;
      *uint64_t v57 = v88;
      BOOL v14 = v57 + 1;
      a5 = v64;
      if (!v64) {
        goto LABEL_9;
      }
      continue;
    }
    break;
  }
  float result = swift_bridgeObjectRetain();
  if (v58 == 1)
  {
LABEL_91:
    float result = swift_bridgeObjectRelease();
    unint64_t v64 = 0;
    uint64_t v56 = a4 + 32;
    BOOL v6 = a3;
    uint64_t v7 = v106;
    if (v106) {
      goto LABEL_99;
    }
    goto LABEL_92;
  }
  int64_t v65 = (int64_t *)(a4 + 8 + 16 * v58);
  unint64_t v66 = v58;
  unint64_t v64 = a5;
  while (v64)
  {
    float result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      float result = (uint64_t)sub_19E612754(v64);
      unint64_t v64 = (void *)result;
    }
    unint64_t v67 = v66 - 1;
    if ((int64_t)(v66 - 1) >= v64[2]) {
      goto LABEL_144;
    }
    v64[v66 + 3] = 0;
    uint64_t v60 = v66 - 2;
    if ((uint64_t)(v66 - 2) >= (uint64_t)*v59) {
      goto LABEL_145;
    }
    unint64_t v68 = v59[v66];
    BOOL v18 = __OFADD__(v68, 1);
    int64_t v69 = v68 + 1;
    if (v18) {
      goto LABEL_146;
    }
    if (v60 >= (uint64_t)v63) {
      goto LABEL_147;
    }
    if (v69 < *v65)
    {
      uint64_t v56 = a4 + 32;
      BOOL v6 = a3;
      goto LABEL_94;
    }
    v65 -= 2;
    --v66;
    if (v67 == 1) {
      goto LABEL_91;
    }
  }
LABEL_185:
  __break(1u);
LABEL_186:
  __break(1u);
  return result;
}

uint64_t sub_19E6D0360()
{
  return sub_19E6CD0A4();
}

uint64_t MLTensor.rank.getter()
{
  uint64_t v1 = *v0;
  switch((unint64_t)*v0 >> 62)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v2 = (v1 & 0x3FFFFFFFFFFFFFFFLL) + 24;
      break;
    case 2uLL:
      uint64_t v2 = (v1 & 0x3FFFFFFFFFFFFFFFLL) + 16;
      break;
    default:
      uint64_t v2 = v1 + 40;
      break;
  }
  return *(void *)(*(void *)v2 + 16);
}

uint64_t MLTensor.shape.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MLTensor.scalarCount.getter()
{
  uint64_t v1 = *v0;
  switch((unint64_t)*v0 >> 62)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v2 = (v1 & 0x3FFFFFFFFFFFFFFFLL) + 24;
      break;
    case 2uLL:
      uint64_t v2 = (v1 & 0x3FFFFFFFFFFFFFFFLL) + 16;
      break;
    default:
      uint64_t v2 = v1 + 40;
      break;
  }
  uint64_t v3 = *(void *)v2;
  uint64_t v4 = *(void *)(*(void *)v2 + 16);
  if (!v4) {
    return 1;
  }
  uint64_t v5 = (uint64_t *)(v3 + 32);
  uint64_t v6 = 1;
  do
  {
    uint64_t v7 = *v5++;
    uint64_t result = v6 * v7;
    if ((unsigned __int128)(v6 * (__int128)v7) >> 64 != (v6 * v7) >> 63)
    {
      __break(1u);
      JUMPOUT(0x19E6D04B8);
    }
    uint64_t v6 = result;
    --v4;
  }
  while (v4);
  return result;
}

BOOL MLTensor.isScalar.getter()
{
  uint64_t v1 = *v0;
  switch((unint64_t)*v0 >> 62)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v2 = (v1 & 0x3FFFFFFFFFFFFFFFLL) + 24;
      break;
    case 2uLL:
      uint64_t v2 = (v1 & 0x3FFFFFFFFFFFFFFFLL) + 16;
      break;
    default:
      uint64_t v2 = v1 + 40;
      break;
  }
  uint64_t v3 = *(void *)v2;
  uint64_t v4 = *(void *)(*(void *)v2 + 16);
  if (!v4) {
    return 1;
  }
  uint64_t v5 = (uint64_t *)(v3 + 32);
  uint64_t v6 = 1;
  do
  {
    uint64_t v7 = *v5++;
    uint64_t v8 = v6 * v7;
    if ((unsigned __int128)(v6 * (__int128)v7) >> 64 != (v6 * v7) >> 63)
    {
      __break(1u);
      JUMPOUT(0x19E6D0558);
    }
    uint64_t v6 = v8;
    --v4;
  }
  while (v4);
  return v8 == 1;
}

uint64_t MLTensor.synchronize()()
{
  unint64_t v2 = *v0;
  v1[2] = v2;
  switch(v2 >> 62)
  {
    case 1uLL:
      swift_retain();
      uint64_t v7 = (void *)swift_task_alloc();
      v1[4] = v7;
      *uint64_t v7 = v1;
      v7[1] = sub_19E6D08B4;
      uint64_t result = sub_19E6C4D14();
      break;
    case 2uLL:
      uint64_t v5 = (uint64_t (*)(void))v1[1];
      uint64_t result = v5();
      break;
    case 3uLL:
      swift_retain();
      uint64_t v6 = (void *)swift_task_alloc();
      v1[5] = v6;
      *uint64_t v6 = v1;
      v6[1] = sub_19E6D09B0;
      uint64_t result = sub_19E6C55E4();
      break;
    default:
      swift_retain();
      uint64_t v3 = (void *)swift_task_alloc();
      v1[3] = v3;
      *uint64_t v3 = v1;
      v3[1] = sub_19E6D0754;
      uint64_t result = sub_19E6C4444();
      break;
  }
  return result;
}

uint64_t sub_19E6D0754()
{
  swift_task_dealloc();
  return MEMORY[0x1F4188298](sub_19E6D0850, 0, 0);
}

uint64_t sub_19E6D0850()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_19E6D08B4()
{
  swift_task_dealloc();
  return MEMORY[0x1F4188298](sub_19E6D1A8C, 0, 0);
}

uint64_t sub_19E6D09B0()
{
  swift_task_dealloc();
  return MEMORY[0x1F4188298](sub_19E6D1A8C, 0, 0);
}

uint64_t MLTensor.scalarType.getter()
{
  uint64_t v1 = *v0;
  switch((unint64_t)*v0 >> 62)
  {
    case 1uLL:
    case 3uLL:
      unint64_t v2 = (char *)((v1 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      break;
    case 2uLL:
      unint64_t v2 = (char *)((v1 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      break;
    default:
      unint64_t v2 = (char *)(v1 + 48);
      break;
  }
  return qword_1E59A36E8[*v2];
}

unint64_t MLTensor.description.getter()
{
  unint64_t v1 = *v0;
  sub_19EBF6FE8();
  swift_bridgeObjectRelease();
  uint64_t v2 = swift_bridgeObjectRetain();
  MEMORY[0x19F3BF220](v2, MEMORY[0x1E4FBB550]);
  sub_19EBF67D8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_19EBF67D8();
  switch(v1 >> 62)
  {
    case 0uLL:
      uint64_t v3 = (char *)(v1 + 48);
      break;
    case 1uLL:
    case 3uLL:
      uint64_t v3 = (char *)((v1 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      break;
    case 2uLL:
      uint64_t v3 = (char *)((v1 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      break;
    default:
      JUMPOUT(0);
  }
  sub_19E6C1A2C(*v3);
  sub_19EBF67D8();
  swift_bridgeObjectRelease();
  sub_19EBF67D8();
  return 0xD000000000000010;
}

uint64_t MLTensor.customMirror.getter()
{
  uint64_t v1 = sub_19EBF74D8();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E945D1F0);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v20 = *v0;
  unint64_t v8 = v20;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945D620);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_19EC365B0;
  *(void *)(v9 + 32) = 0x6570616873;
  *(void *)(v9 + 40) = 0xE500000000000000;
  uint64_t v10 = (void *)v9;
  switch(v8 >> 62)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v11 = (uint64_t *)((v8 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      break;
    case 2uLL:
      uint64_t v11 = (uint64_t *)((v8 & 0x3FFFFFFFFFFFFFFFLL) + 16);
      break;
    default:
      uint64_t v11 = (uint64_t *)(v8 + 40);
      break;
  }
  uint64_t v12 = *v11;
  swift_bridgeObjectRetain();
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E945CE70);
  v10[6] = v12;
  v10[9] = v13;
  v10[10] = 0x795472616C616373;
  v10[11] = 0xEA00000000006570;
  unint64_t v19 = v8;
  uint64_t v14 = MLTensor.scalarType.getter();
  v10[15] = swift_getMetatypeMetadata();
  v10[12] = v14;
  uint64_t v15 = *MEMORY[0x1E4FBC410];
  uint64_t v16 = sub_19EBF74C8();
  uint64_t v17 = *(void *)(v16 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 104))(v7, v15, v16);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v7, 0, 1, v16);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E4FBC430], v1);
  swift_retain();
  return sub_19EBF74F8();
}

uint64_t MLTensor.shapedArray<A>(of:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[23] = a3;
  v6[24] = a4;
  v6[21] = a1;
  v6[22] = a2;
  uint64_t v7 = *v5;
  v6[25] = a5;
  v6[26] = v7;
  return MEMORY[0x1F4188298](sub_19E6D0FE0, 0, 0);
}

uint64_t sub_19E6D0FE0()
{
  unint64_t v1 = *(void *)(v0 + 208);
  __int16 v2 = sub_19E6C1448(*(void *)(v0 + 176), 0);
  switch(v1 >> 62)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v3 = *(void *)(v0 + 208);
      uint64_t v4 = (unsigned __int8 *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      uint64_t v5 = (char *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 33);
      break;
    case 2uLL:
      uint64_t v3 = *(void *)(v0 + 208);
      uint64_t v4 = (unsigned __int8 *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      uint64_t v5 = (char *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 25);
      break;
    default:
      uint64_t v3 = *(void *)(v0 + 208);
      uint64_t v4 = (unsigned __int8 *)(v3 + 48);
      uint64_t v5 = (char *)(v3 + 49);
      break;
  }
  char v6 = *v5;
  int v7 = *v4;
  *(unsigned char *)(v0 + 16) = v2;
  *(unsigned char *)(v0 + 17) = HIBYTE(v2) & 1;
  *(unsigned char *)(v0 + 18) = v7;
  *(unsigned char *)(v0 + 19) = v6;
  *(unsigned char *)(v0 + 80) = 8;
  if (v7 == v2)
  {
    sub_19E607D84(v0 + 16);
    *(void *)(v0 + 160) = v3;
    swift_retain();
    unint64_t v8 = (void *)swift_task_alloc();
    *(void *)(v0 + 216) = v8;
    *unint64_t v8 = v0;
    v8[1] = sub_19E6D11AC;
    uint64_t v9 = *(void *)(v0 + 168);
    return sub_19E66C190(v9, (unint64_t *)(v0 + 160));
  }
  else
  {
    sub_19E5E2970(v0 + 16, v0 + 88);
    sub_19E5E1864();
    return sub_19EBF71F8();
  }
}

uint64_t sub_19E6D11AC()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  unint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t MLTensor.withUnsafeBytes<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[4] = a3;
  v5[5] = a4;
  void v5[2] = a1;
  v5[3] = a2;
  v5[6] = *v4;
  return MEMORY[0x1F4188298](sub_19E6D12CC, 0, 0);
}

uint64_t sub_19E6D12CC()
{
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v3 = swift_task_alloc();
  *(void *)(v0 + 56) = v3;
  long long v4 = *(_OWORD *)(v0 + 24);
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  *(_OWORD *)(v3 + 32) = v4;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_19E6D13A4;
  uint64_t v7 = *(void *)(v0 + 40);
  uint64_t v6 = *(void *)(v0 + 48);
  uint64_t v8 = *(void *)(v0 + 16);
  return sub_19E6C3BD4(v8, (uint64_t)sub_19E6D1634, v3, v6, v7);
}

uint64_t sub_19E6D13A4()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x1F4188298](sub_19E6D14E0, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_19E6D14E0()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_19E6D1544(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!a1)
  {
LABEL_12:
    __break(1u);
    JUMPOUT(0x19E6D1624);
  }
  uint64_t v7 = sub_19E606E50(a3);
  switch(a3 >> 62)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v8 = (char *)((a3 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      break;
    case 2uLL:
      uint64_t v8 = (char *)((a3 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      break;
    default:
      uint64_t v8 = (char *)(a3 + 48);
      break;
  }
  unint64_t v9 = *v8;
  if (v9 > 0xA) {
    uint64_t v10 = 8;
  }
  else {
    uint64_t v10 = qword_19EC3B388[v9];
  }
  if ((unsigned __int128)(v7 * (__int128)v10) >> 64 != (v7 * v10) >> 63)
  {
    __break(1u);
    goto LABEL_12;
  }
  return a4(a1, a1 + v7 * v10);
}

uint64_t sub_19E6D1634(uint64_t a1, uint64_t a2)
{
  return sub_19E6D1544(a1, a2, *(void *)(v2 + 24), *(uint64_t (**)(uint64_t, uint64_t))(v2 + 32));
}

uint64_t MLTensor.scalars<A>(of:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[21] = a1;
  v4[22] = a2;
  uint64_t v5 = *v3;
  v4[23] = a3;
  v4[24] = v5;
  return MEMORY[0x1F4188298](sub_19E6D167C, 0, 0);
}

uint64_t sub_19E6D167C()
{
  unint64_t v1 = *(void *)(v0 + 192);
  __int16 v2 = sub_19E6C1448(*(void *)(v0 + 168), 0);
  switch(v1 >> 62)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v3 = *(void *)(v0 + 192);
      long long v4 = (unsigned __int8 *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      uint64_t v5 = (char *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 33);
      break;
    case 2uLL:
      uint64_t v3 = *(void *)(v0 + 192);
      long long v4 = (unsigned __int8 *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      uint64_t v5 = (char *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 25);
      break;
    default:
      uint64_t v3 = *(void *)(v0 + 192);
      long long v4 = (unsigned __int8 *)(v3 + 48);
      uint64_t v5 = (char *)(v3 + 49);
      break;
  }
  char v6 = *v5;
  int v7 = *v4;
  *(unsigned char *)(v0 + 16) = v2;
  *(unsigned char *)(v0 + 17) = HIBYTE(v2) & 1;
  *(unsigned char *)(v0 + 18) = v7;
  *(unsigned char *)(v0 + 19) = v6;
  *(unsigned char *)(v0 + 80) = 8;
  if (v7 == v2)
  {
    long long v13 = *(_OWORD *)(v0 + 176);
    sub_19E607D84(v0 + 16);
    uint64_t v8 = swift_task_alloc();
    *(void *)(v0 + 200) = v8;
    *(_OWORD *)(v8 + 16) = v13;
    *(void *)(v8 + 32) = v3;
    unint64_t v9 = (void *)swift_task_alloc();
    *(void *)(v0 + 208) = v9;
    uint64_t v10 = sub_19EBF69C8();
    *unint64_t v9 = v0;
    v9[1] = sub_19E6D1884;
    uint64_t v11 = *(void *)(v0 + 192);
    return sub_19E6C3BD4(v0 + 160, (uint64_t)sub_19E6D1A5C, v8, v11, v10);
  }
  else
  {
    sub_19E5E2970(v0 + 16, v0 + 88);
    sub_19E5E1864();
    return sub_19EBF71F8();
  }
}

uint64_t sub_19E6D1884()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return MEMORY[0x1F4188298](sub_19E6D199C, 0, 0);
}

uint64_t sub_19E6D199C()
{
  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 160));
}

uint64_t sub_19E6D19B4@<X0>(uint64_t result@<X0>, unint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  if (result)
  {
    sub_19E606E50(a2);
    sub_19EBF6768();
    sub_19EBF6778();
    swift_getWitnessTable();
    uint64_t result = sub_19EBF69D8();
    *a3 = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_19E6D1A5C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_19E6D19B4(a1, *(void *)(v2 + 32), a2);
}

ValueMetadata *type metadata accessor for MLTensor()
{
  return &type metadata for MLTensor;
}

uint64_t sub_19E6D1A90(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  swift_retain();
  swift_unknownObjectRetain();
  id v6 = a3;
  v5(a2, a3);
  swift_release();

  return swift_unknownObjectRelease();
}

uint64_t MLModel.prediction(from:options:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return MEMORY[0x1F4188298](sub_19E6D1B34, 0, 0);
}

uint64_t sub_19E6D1B34()
{
  id v1 = objc_msgSend(self, sel_emptyState);
  *(void *)(v0 + 40) = v1;
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 48) = v2;
  *(void *)uint64_t v2 = v0;
  *(void *)(v2 + 8) = sub_19E6D1C10;
  uint64_t v3 = *(void *)(v0 + 16);
  *(_OWORD *)(v2 + 48) = *(_OWORD *)(v0 + 24);
  *(void *)(v2 + 32) = v3;
  *(void *)(v2 + 40) = v1;
  return MEMORY[0x1F4188298](sub_19E6D302C, 0, 0);
}

uint64_t sub_19E6D1C10(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  *(void *)(*v2 + 56) = v1;
  swift_task_dealloc();
  if (v1)
  {
    return MEMORY[0x1F4188298](sub_19E6D1D68, 0, 0);
  }
  else
  {

    id v6 = *(uint64_t (**)(uint64_t))(v5 + 8);
    return v6(a1);
  }
}

uint64_t sub_19E6D1D68()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t MLModel.prediction(from:using:options:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  *uint64_t v8 = v4;
  v8[1] = sub_19E6D1E8C;
  v8[6] = a3;
  v8[7] = v3;
  v8[4] = a1;
  void v8[5] = a2;
  return MEMORY[0x1F4188298](sub_19E6D302C, 0, 0);
}

uint64_t sub_19E6D1E8C(uint64_t a1)
{
  uint64_t v7 = *v2;
  uint64_t v4 = swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v7 + 8);
  if (!v1) {
    uint64_t v4 = a1;
  }
  return v5(v4);
}

void static MLModel.load(contentsOf:configuration:completionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  uint64_t v8 = (void *)sub_19EBF6348();
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a3;
  *(void *)(v9 + 24) = a4;
  v11[4] = sub_19E6D34FC;
  v11[5] = v9;
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 1107296256;
  void v11[2] = sub_19E67406C;
  v11[3] = &block_descriptor_9;
  uint64_t v10 = _Block_copy(v11);
  swift_retain();
  swift_release();
  objc_msgSend(ObjCClassFromMetadata, sel_loadContentsOfURL_configuration_completionHandler_, v8, a2, v10);
  _Block_release(v10);
}

void sub_19E6D20A0(void *a1, id a2, void (*a3)(id, uint64_t))
{
  if (a2)
  {
    id v5 = a2;
    a3(a2, 1);
    id v6 = a2;
LABEL_4:

    return;
  }
  if (a1)
  {
    id v8 = a1;
    a3(a1, 0);
    id v6 = v8;
    goto LABEL_4;
  }
  sub_19EBF71F8();
  __break(1u);
}

uint64_t static MLModel.load(contentsOf:configuration:)(uint64_t a1, uint64_t a2)
{
  v3[18] = a2;
  v3[19] = v2;
  v3[17] = a1;
  return MEMORY[0x1F4188298](sub_19E6D21C0, 0, 0);
}

uint64_t sub_19E6D21C0()
{
  uint64_t v1 = v0[18];
  v0[2] = v0;
  v0[7] = v0 + 16;
  v0[3] = sub_19E6D237C;
  uint64_t v2 = swift_continuation_init();
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = v2;
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  id v5 = (void *)sub_19EBF6348();
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = sub_19E6D352C;
  *(void *)(v6 + 24) = v3;
  v0[14] = sub_19E6D3F98;
  v0[15] = v6;
  v0[10] = MEMORY[0x1E4F143A8];
  v0[11] = 1107296256;
  v0[12] = sub_19E67406C;
  v0[13] = &block_descriptor_14_0;
  uint64_t v7 = _Block_copy(v0 + 10);
  swift_retain();
  swift_release();
  objc_msgSend(ObjCClassFromMetadata, sel_loadContentsOfURL_configuration_completionHandler_, v5, v1, v7);
  _Block_release(v7);

  swift_release();
  return MEMORY[0x1F41881E8](v0 + 2);
}

uint64_t sub_19E6D237C()
{
  uint64_t v1 = *v0;
  if (*(void *)(*v0 + 48))
  {
    swift_willThrow();
    uint64_t v2 = *(uint64_t (**)(void))(v1 + 8);
    return v2();
  }
  else
  {
    uint64_t v4 = *(void *)(*v0 + 128);
    id v5 = *(uint64_t (**)(uint64_t))(v1 + 8);
    return v5(v4);
  }
}

uint64_t sub_19E6D24BC(void *a1, char a2, uint64_t a3)
{
  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E945C970);
    swift_allocError();
    *uint64_t v6 = a1;
    id v7 = a1;
    return swift_continuation_throwingResumeWithError();
  }
  else
  {
    **(void **)(*(void *)(a3 + 64) + 40) = a1;
    id v4 = a1;
    return swift_continuation_throwingResume();
  }
}

void static MLModel.compileModel(at:completionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  uint64_t v6 = (void *)sub_19EBF6348();
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a2;
  *(void *)(v7 + 24) = a3;
  void v9[4] = sub_19E6D3538;
  v9[5] = v7;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 1107296256;
  id v9[2] = sub_19E6D2948;
  void v9[3] = &block_descriptor_21;
  id v8 = _Block_copy(v9);
  swift_retain();
  swift_release();
  objc_msgSend(ObjCClassFromMetadata, sel_compileModelAtURL_completionHandler_, v6, v8);
  _Block_release(v8);
}

uint64_t sub_19E6D2684(uint64_t a1, void *a2, void (*a3)(void *))
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E945D670);
  MEMORY[0x1F4188790](v6);
  id v8 = (uint64_t *)((char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E945D680);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_19EBF6368();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    *id v8 = a2;
    swift_storeEnumTagMultiPayload();
    id v16 = a2;
    a3(v8);
    return sub_19E68D51C((uint64_t)v8, (uint64_t *)&unk_1E945D670);
  }
  else
  {
    sub_19E669588(a1, (uint64_t)v11, &qword_1E945D680);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
    {
      sub_19E68D51C((uint64_t)v11, &qword_1E945D680);
      uint64_t result = sub_19EBF71F8();
      __break(1u);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v11, v12);
      (*(void (**)(void *, char *, uint64_t))(v13 + 16))(v8, v15, v12);
      swift_storeEnumTagMultiPayload();
      a3(v8);
      sub_19E68D51C((uint64_t)v8, (uint64_t *)&unk_1E945D670);
      return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    }
  }
  return result;
}

uint64_t sub_19E6D2948(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E945D680);
  MEMORY[0x1F4188790](v6 - 8);
  id v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void (**)(char *, void *))(a1 + 32);
  if (a2)
  {
    sub_19EBF6358();
    uint64_t v10 = sub_19EBF6368();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v8, 0, 1, v10);
  }
  else
  {
    uint64_t v11 = sub_19EBF6368();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v8, 1, 1, v11);
  }
  swift_retain();
  id v12 = a3;
  v9(v8, a3);
  swift_release();

  return sub_19E68D51C((uint64_t)v8, &qword_1E945D680);
}

uint64_t static MLModel.compileModel(at:)(uint64_t a1, uint64_t a2)
{
  v3[17] = a2;
  v3[18] = v2;
  v3[16] = a1;
  return MEMORY[0x1F4188298](sub_19E6D2AB4, 0, 0);
}

uint64_t sub_19E6D2AB4()
{
  uint64_t v1 = v0[16];
  v0[2] = v0;
  v0[7] = v1;
  v0[3] = sub_19E6D2C60;
  uint64_t v2 = swift_continuation_init();
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = v2;
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  id v5 = (void *)sub_19EBF6348();
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = sub_19E6D3550;
  *(void *)(v6 + 24) = v3;
  v0[14] = sub_19E6D3F9C;
  v0[15] = v6;
  v0[10] = MEMORY[0x1E4F143A8];
  v0[11] = 1107296256;
  v0[12] = sub_19E6D2948;
  v0[13] = &block_descriptor_31_0;
  uint64_t v7 = _Block_copy(v0 + 10);
  swift_retain();
  swift_release();
  objc_msgSend(ObjCClassFromMetadata, sel_compileModelAtURL_completionHandler_, v5, v7);
  _Block_release(v7);

  swift_release();
  return MEMORY[0x1F41881E8](v0 + 2);
}

uint64_t sub_19E6D2C60()
{
  uint64_t v1 = *v0;
  if (*(void *)(*v0 + 48)) {
    swift_willThrow();
  }
  uint64_t v2 = *(uint64_t (**)(void))(v1 + 8);
  return v2();
}

uint64_t sub_19E6D2D68(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_19EBF6368();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  id v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v18 - v9;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E945D670);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (uint64_t *)((char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_19E669588(a1, (uint64_t)v13, (uint64_t *)&unk_1E945D670);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v14 = *v13;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E945C970);
    swift_allocError();
    *uint64_t v15 = v14;
    return swift_continuation_throwingResumeWithError();
  }
  else
  {
    uint64_t v17 = *(void (**)(char *, char *, uint64_t))(v5 + 32);
    v17(v10, (char *)v13, v4);
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v8, v10, v4);
    v17(*(char **)(*(void *)(a2 + 64) + 40), v8, v4);
    swift_continuation_throwingResume();
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v10, v4);
  }
}

void __swiftcall MLModel.newState()(MLState *__return_ptr retstr)
{
  objc_msgSend(v1, sel_newState);
}

uint64_t sub_19E6D2F98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[6] = a3;
  v4[7] = v3;
  v4[4] = a1;
  v4[5] = a2;
  return MEMORY[0x1F4188298](sub_19E6D302C, 0, 0);
}

uint64_t sub_19E6D302C()
{
  sub_19EBF6AC8();
  *(void *)(v0 + 16) = 0;
  id v3 = objc_msgSend(*(id *)(v0 + 56), sel_newRequestWithInputFeatures_usingState_options_error_, *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), v0 + 16);
  *(void *)(v0 + 64) = v3;
  uint64_t v4 = *(void **)(v0 + 16);
  if (v3)
  {
    id v5 = v3;
    uint64_t v6 = swift_task_alloc();
    *(void *)(v0 + 72) = v6;
    *(void *)(v6 + 16) = v5;
    uint64_t v7 = swift_task_alloc();
    *(void *)(v0 + 80) = v7;
    *(void *)(v7 + 16) = v5;
    id v8 = v4;
    uint64_t v9 = (void *)swift_task_alloc();
    *(void *)(v0 + 88) = v9;
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(qword_1E945B8C8);
    *uint64_t v9 = v0;
    v9[1] = sub_19E6D322C;
    return MEMORY[0x1F4188148](v0 + 24, &unk_1E945D690, v6, sub_19E6D3EC0, v7, 0, 0, v10);
  }
  else
  {
    id v11 = v4;
    sub_19EBF6328();

    swift_willThrow();
    uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
    return v1();
  }
}

uint64_t sub_19E6D322C()
{
  *(void *)(*(void *)v1 + 96) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_19E6D3418;
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v2 = sub_19E6D3384;
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

uint64_t sub_19E6D3384()
{
  swift_unknownObjectRelease();
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

uint64_t sub_19E6D3418()
{
  swift_unknownObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_19E6D34C4()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

void sub_19E6D34FC(void *a1, void *a2)
{
  sub_19E6D20A0(a1, a2, *(void (**)(id, uint64_t))(v2 + 16));
}

uint64_t block_copy_helper_7(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_7()
{
  return swift_release();
}

uint64_t sub_19E6D351C()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_19E6D352C(void *a1, char a2)
{
  return sub_19E6D24BC(a1, a2 & 1, *(void *)(v2 + 16));
}

uint64_t sub_19E6D3538(uint64_t a1, void *a2)
{
  return sub_19E6D2684(a1, a2, *(void (**)(void *))(v2 + 16));
}

uint64_t sub_19E6D3540()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_19E6D3550(uint64_t a1)
{
  return sub_19E6D2D68(a1, *(void *)(v1 + 16));
}

id MLModel.prediction(fromFeatures:options:)(uint64_t a1, uint64_t a2)
{
  return sub_19E6D3600(a1, a2, (SEL *)&selRef_predictionFromFeatures_options_error_);
}

id MLModel.predictions(fromBatch:options:)(uint64_t a1, uint64_t a2)
{
  return sub_19E6D3600(a1, a2, (SEL *)&selRef_predictionsFromBatch_options_error_);
}

id sub_19E6D3600(uint64_t a1, uint64_t a2, SEL *a3)
{
  v8[1] = *(id *)MEMORY[0x1E4F143B8];
  v8[0] = 0;
  id v4 = objc_msgSend(v3, *a3, a1, a2, v8);
  if (v4)
  {
    id v5 = v8[0];
  }
  else
  {
    id v6 = v8[0];
    sub_19EBF6328();

    swift_willThrow();
  }
  return v4;
}

uint64_t sub_19E6D36C0(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 136) = a1;
  *(void *)(v2 + 144) = a2;
  return MEMORY[0x1F4188298](sub_19E6D36E0, 0, 0);
}

uint64_t sub_19E6D36E0()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0;
  uint64_t v3 = v0 + 2;
  id v4 = v0 + 10;
  id v5 = v0 + 16;
  id v6 = (void *)v0[18];
  v1[2] = v2;
  v1[7] = v5;
  v1[3] = sub_19E6D3834;
  uint64_t v7 = swift_continuation_init();
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = v6;
  *(void *)(v8 + 24) = v7;
  v1[14] = sub_19E6D3F08;
  v1[15] = v8;
  v1[10] = MEMORY[0x1E4F143A8];
  v1[11] = 1107296256;
  v1[12] = sub_19E6D1A90;
  v1[13] = &block_descriptor_41;
  uint64_t v9 = _Block_copy(v4);
  swift_unknownObjectRetain();
  swift_release();
  objc_msgSend(v6, sel_submitWithCompletionHandler_, v9);
  _Block_release(v9);
  return MEMORY[0x1F41881E8](v3);
}

uint64_t sub_19E6D3834()
{
  uint64_t v1 = *v0;
  if (*(void *)(*v0 + 48)) {
    swift_willThrow();
  }
  else {
    **(void **)(*v0 + 136) = *(void *)(*v0 + 128);
  }
  uint64_t v2 = *(uint64_t (**)(void))(v1 + 8);
  return v2();
}

uint64_t sub_19E6D3954(uint64_t a1, void *a2, id a3, uint64_t a4)
{
  if (objc_msgSend(a3, sel_isCancelled))
  {
    sub_19EBF6A18();
    sub_19E6D3F10();
    uint64_t v7 = swift_allocError();
    sub_19EBF65E8();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E945C970);
    swift_allocError();
    *uint64_t v8 = v7;
    goto LABEL_3;
  }
  if (!a1)
  {
    if (a2)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E945C970);
      swift_allocError();
      void *v10 = a2;
      id v11 = a2;
    }
    else
    {
      sub_19EBF6798();
      id v12 = objc_allocWithZone(MEMORY[0x1E4F28C58]);
      uint64_t v13 = (void *)sub_19EBF6788();
      swift_bridgeObjectRelease();
      id v14 = objc_msgSend(v12, sel_initWithDomain_code_userInfo_, v13, 0, 0);

      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E945C970);
      swift_allocError();
      *uint64_t v15 = v14;
    }
LABEL_3:
    return swift_continuation_throwingResumeWithError();
  }
  **(void **)(*(void *)(a4 + 64) + 40) = a1;
  swift_unknownObjectRetain();

  return swift_continuation_throwingResume();
}

uint64_t static MLModel.availableComputeDevices.getter()
{
  id v0 = objc_msgSend(self, sel_availableComputeDevices);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C890);
  unint64_t v1 = sub_19EBF68E8();

  if (v1 >> 62)
  {
LABEL_22:
    swift_bridgeObjectRetain_n();
    uint64_t v2 = sub_19EBF7228();
    swift_bridgeObjectRelease();
    if (v2) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v2)
    {
LABEL_3:
      unint64_t v17 = v1 & 0xC000000000000001;
      uint64_t v3 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v4 = 4;
      unint64_t v5 = v1;
      while (1)
      {
        uint64_t v6 = v4 - 4;
        if (v17)
        {
          unint64_t v1 = MEMORY[0x19F3BF970](v4 - 4, v1);
          uint64_t v7 = v4 - 3;
          if (__OFADD__(v6, 1)) {
            goto LABEL_21;
          }
        }
        else
        {
          unint64_t v1 = *(void *)(v1 + 8 * v4);
          swift_unknownObjectRetain();
          uint64_t v7 = v4 - 3;
          if (__OFADD__(v6, 1))
          {
LABEL_21:
            __break(1u);
            goto LABEL_22;
          }
        }
        self;
        uint64_t v8 = swift_dynamicCastObjCClass();
        if (v8)
        {
          uint64_t v9 = v8;
          char v10 = 0;
        }
        else
        {
          self;
          uint64_t v11 = swift_dynamicCastObjCClass();
          if (v11)
          {
            uint64_t v9 = v11;
            char v10 = 1;
          }
          else
          {
            self;
            uint64_t v12 = swift_dynamicCastObjCClass();
            if (!v12)
            {
              swift_unknownObjectRetain();
              sub_19EBF6FE8();
              sub_19EBF67A8();
              swift_bridgeObjectRelease();
              sub_19EBF67D8();
              uint64_t result = sub_19EBF71F8();
              __break(1u);
              return result;
            }
            uint64_t v9 = v12;
            char v10 = 2;
          }
        }
        swift_unknownObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v3 = sub_19E606EF0(0, v3[2] + 1, 1, v3);
        }
        unint64_t v14 = v3[2];
        unint64_t v13 = v3[3];
        if (v14 >= v13 >> 1) {
          uint64_t v3 = sub_19E606EF0((void *)(v13 > 1), v14 + 1, 1, v3);
        }
        v3[2] = v14 + 1;
        uint64_t v15 = &v3[2 * v14];
        v15[4] = v9;
        *((unsigned char *)v15 + 40) = v10;
        swift_unknownObjectRelease();
        ++v4;
        unint64_t v1 = v5;
        if (v7 == v2) {
          goto LABEL_24;
        }
      }
    }
  }
  uint64_t v3 = (void *)MEMORY[0x1E4FBC860];
LABEL_24:
  swift_bridgeObjectRelease_n();
  return (uint64_t)v3;
}

uint64_t sub_19E6D3E10(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  unint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *unint64_t v5 = v2;
  v5[1] = sub_19E635084;
  v5[17] = a1;
  v5[18] = v4;
  return MEMORY[0x1F4188298](sub_19E6D36E0, 0, 0);
}

id sub_19E6D3EC0()
{
  return objc_msgSend(*(id *)(v0 + 16), sel_cancel);
}

uint64_t sub_19E6D3ED0()
{
  swift_unknownObjectRelease();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_19E6D3F08(uint64_t a1, void *a2)
{
  return sub_19E6D3954(a1, a2, *(id *)(v2 + 16), *(void *)(v2 + 24));
}

unint64_t sub_19E6D3F10()
{
  unint64_t result = qword_1E945D700;
  if (!qword_1E945D700)
  {
    sub_19EBF6A18();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945D700);
  }
  return result;
}

uint64_t sub_19E6D3FA0()
{
  uint64_t v2 = (void *)v0[1];
  if (!v2) {
    return (uint64_t)v2;
  }
  uint64_t v3 = v2 + 2;
  unint64_t v4 = v2[2];
  if (!v4)
  {
    swift_bridgeObjectRetain();
    return (uint64_t)v2;
  }
  uint64_t v5 = v4 - 1;
  uint64_t v6 = v2[v4 + 3];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  uint64_t v9 = *v0;
  if (v4 > *(void *)(*v0 + 16))
  {
LABEL_30:
    __break(1u);
LABEL_31:
    uint64_t result = (uint64_t)sub_19E612754(v1);
    uint64_t v1 = (void *)result;
    goto LABEL_8;
  }
  if (v8 >= *(void *)(v9 + 16 * v5 + 40))
  {
    uint64_t result = swift_bridgeObjectRetain();
    if (v4 == 1)
    {
LABEL_23:
      swift_bridgeObjectRelease();
      v0[1] = 0;
      return (uint64_t)v2;
    }
    unint64_t v13 = (void *)(v9 + 16 * v4 + 8);
    uint64_t v14 = 1;
    uint64_t v1 = v2;
    while (v14)
    {
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_19E612754(v1);
        uint64_t v1 = (void *)result;
      }
      unint64_t v15 = v4 - 1;
      if ((int64_t)(v4 - 1) >= v1[2])
      {
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
        goto LABEL_29;
      }
      v1[v4 + 3] = 0;
      v0[1] = v1;
      uint64_t v5 = v4 - 2;
      if ((int64_t)(v4 - 2) >= *v3) {
        goto LABEL_26;
      }
      uint64_t v16 = v3[v4];
      BOOL v7 = __OFADD__(v16, 1);
      uint64_t v17 = v16 + 1;
      if (v7) {
        goto LABEL_27;
      }
      if (v5 >= *(void *)(v9 + 16)) {
        goto LABEL_28;
      }
      if (v17 < *v13) {
        goto LABEL_7;
      }
      v13 -= 2;
      --v4;
      uint64_t v14 = (uint64_t)v1;
      if (v15 == 1) {
        goto LABEL_23;
      }
    }
    goto LABEL_34;
  }
  swift_bridgeObjectRetain();
  uint64_t v1 = v2;
LABEL_7:
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0) {
    goto LABEL_31;
  }
LABEL_8:
  if (v5 >= v1[2])
  {
    __break(1u);
  }
  else
  {
    uint64_t v11 = v1[v5 + 4];
    BOOL v7 = __OFADD__(v11, 1);
    uint64_t v12 = v11 + 1;
    if (!v7)
    {
      v1[v5 + 4] = v12;
      v0[1] = v1;
      return (uint64_t)v2;
    }
  }
  __break(1u);
LABEL_34:
  __break(1u);
  return result;
}

void sub_19E6D4150(void *a1@<X8>)
{
  uint64_t v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
}

uint64_t sub_19E6D415C()
{
  uint64_t v1 = sub_19E6CD0F0(*(void *)v0, *(void **)(v0 + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_19E6D41A8(uint64_t a1, void *a2, uint64_t a3)
{
  return sub_19E5DE238(a1, a2, a3, *(void *)v3, *(void **)(v3 + 8));
}

uint64_t sub_19E6D41B0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_19E6D3FA0();
  *a1 = result;
  return result;
}

void *sub_19E6D41D8(void *result)
{
  uint64_t v1 = result;
  uint64_t v2 = result[2];
  if (!v2 || result[4] == result[5]) {
    return v1;
  }
  if (v2 == 1)
  {
LABEL_9:
    sub_19E5D8B5C((uint64_t)result);
    return v1;
  }
  uint64_t v3 = result + 7;
  uint64_t v4 = 1;
  while (1)
  {
    uint64_t v5 = v4 + 1;
    if (__OFADD__(v4, 1)) {
      break;
    }
    if (*(v3 - 1) == *v3) {
      return v1;
    }
    v3 += 2;
    ++v4;
    if (v5 == v2) {
      goto LABEL_9;
    }
  }
  __break(1u);
  return result;
}

uint64_t destroy for RangedIndices()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *_s6CoreML13RangedIndicesVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for RangedIndices(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for RangedIndices(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for RangedIndices()
{
  return &type metadata for RangedIndices;
}

unint64_t sub_19E6D43A0()
{
  unint64_t result = qword_1E945D710;
  if (!qword_1E945D710)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945D710);
  }
  return result;
}

uint64_t MLState.withMultiArray<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v21 = a4;
  uint64_t v7 = sub_19EBF6E68();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  unint64_t v13 = (char *)&v20 - v12;
  uint64_t v14 = *(void *)(a3 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))((char *)&v20 - v12, 1, 1, a3);
  id v24 = 0;
  unint64_t v15 = (void *)swift_allocObject();
  v15[2] = a3;
  v15[3] = v13;
  v15[4] = a1;
  v15[5] = a2;
  v15[6] = &v24;
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = sub_19E6D48C4;
  *(void *)(v16 + 24) = v15;
  aBlock[4] = sub_19E6D48E4;
  aBlock[5] = v16;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_19E6D490C;
  aBlock[3] = &block_descriptor_10;
  uint64_t v17 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(v22, sel_getMultiArrayWithHandler_, v17);
  _Block_release(v17);
  LOBYTE(v17) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v17)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  if (v24)
  {
    id v19 = v24;
    swift_willThrow();

    (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
    return swift_release();
  }
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, v13, v7);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v11, 1, a3);
  if (result == 1) {
    goto LABEL_8;
  }
  (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(v21, v11, a3);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
  return swift_release();
}

void sub_19E6D472C(void *a1, void *a2, uint64_t a3, void (*a4)(void), uint64_t a5, void **a6, uint64_t a7)
{
  uint64_t v13 = sub_19EBF6E68();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v20 - v15;
  if (a1)
  {
    id v17 = a1;
    a4();

    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(a7 - 8) + 56))(v16, 0, 1, a7);
    (*(void (**)(uint64_t, char *, uint64_t))(v14 + 40))(a3, v16, v13);
  }
  else
  {
    uint64_t v18 = *a6;
    *a6 = a2;
    id v19 = a2;
  }
}

uint64_t sub_19E6D48B4()
{
  return MEMORY[0x1F4186498](v0, 56, 7);
}

void sub_19E6D48C4(void *a1, void *a2)
{
  sub_19E6D472C(a1, a2, *(void *)(v2 + 24), *(void (**)(void))(v2 + 32), *(void *)(v2 + 40), *(void ***)(v2 + 48), *(void *)(v2 + 16));
}

uint64_t sub_19E6D48D4()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_19E6D48E4()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

void sub_19E6D490C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(void (**)(void *, id))(a1 + 32);
  id v7 = a2;
  id v6 = a3;
  v5(a2, v6);
}

uint64_t block_copy_helper_8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_8()
{
  return swift_release();
}

uint64_t MLState.withMultiArray<A>(for:_:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v21 = a4;
  uint64_t v22 = sub_19EBF6E68();
  uint64_t v7 = *(void *)(v22 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v22);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v21 - v11;
  uint64_t v13 = *(void *)(a3 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))((char *)&v21 - v11, 1, 1, a3);
  id v25 = 0;
  uint64_t v14 = (void *)sub_19EBF6788();
  uint64_t v15 = (void *)swift_allocObject();
  v15[2] = a3;
  v15[3] = v12;
  v15[4] = a1;
  v15[5] = a2;
  v15[6] = &v25;
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = sub_19E6D4E50;
  *(void *)(v16 + 24) = v15;
  aBlock[4] = sub_19E6D4E70;
  aBlock[5] = v16;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_19E6D4E98;
  aBlock[3] = &block_descriptor_12_0;
  id v17 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(v23, sel_getMultiArrayForStateNamed_handler_, v14, v17);

  _Block_release(v17);
  LOBYTE(v17) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v17)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  if (v25)
  {
    id v19 = v25;
    swift_willThrow();

    (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v22);
    return swift_release();
  }
  uint64_t v20 = v22;
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v12, v22);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v10, 1, a3);
  if (result == 1) {
    goto LABEL_8;
  }
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v21, v10, a3);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v20);
  return swift_release();
}

uint64_t sub_19E6D4CF0(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = sub_19EBF6E68();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v15 - v12;
  a3(a1);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(a6 - 8) + 56))(v13, 0, 1, a6);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 40))(a2, v13, v10);
}

uint64_t sub_19E6D4E40()
{
  return MEMORY[0x1F4186498](v0, 56, 7);
}

uint64_t sub_19E6D4E50(uint64_t a1)
{
  return sub_19E6D4CF0(a1, *(void *)(v1 + 24), *(void (**)(uint64_t))(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 16));
}

uint64_t sub_19E6D4E60()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_19E6D4E70()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

void sub_19E6D4E98(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void (**)(void))(a1 + 32);
  id v3 = a2;
  v2();
}

void *sub_19E6D4EEC(void *result)
{
  *uint64_t result = ++qword_1E946A230;
  return result;
}

uint64_t sub_19E6D4F08(mach_port_t a1, int a2, int *a3, uint64_t a4, int a5, _OWORD *a6, void *a7, _DWORD *a8, _DWORD *a9, _DWORD *a10, _DWORD *a11, _DWORD *a12)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  int v30 = 1;
  uint64_t v31 = a4;
  int v32 = 16777472;
  int v33 = a5;
  uint64_t v34 = *MEMORY[0x1E4F14068];
  int v17 = *a3;
  int v35 = a2;
  int v36 = v17;
  int v37 = a5;
  mach_port_t reply_port = mig_get_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = reply_port;
  msg.msgh_bits = -2147478253;
  *(void *)&msg.msgh_voucher_port = 0x4B000000000;
  if (MEMORY[0x1E4F14B18])
  {
    voucher_mach_msg_set(&msg);
    mach_port_t reply_port = msg.msgh_local_port;
  }
  uint64_t v19 = mach_msg(&msg, 3, 0x40u, 0xDCu, reply_port, 0, 0);
  uint64_t v20 = v19;
  if ((v19 - 268435458) <= 0xE && ((1 << (v19 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(msg.msgh_local_port);
  }
  else
  {
    if (!v19)
    {
      if (msg.msgh_id == 71)
      {
        uint64_t v20 = 4294966988;
      }
      else if (msg.msgh_id == 1300)
      {
        if ((msg.msgh_bits & 0x80000000) != 0)
        {
          uint64_t v20 = 4294966996;
          if (v30 == 2
            && msg.msgh_size == 212
            && !msg.msgh_remote_port
            && HIBYTE(v32) == 1
            && HIWORD(v35) << 16 == 1114112)
          {
            int v21 = v33;
            if (v33 == v47)
            {
              uint64_t v20 = 0;
              int v22 = v34;
              *a3 = v38;
              long long v23 = v46;
              a6[6] = v45;
              a6[7] = v23;
              long long v24 = v44;
              a6[4] = v43;
              a6[5] = v24;
              long long v25 = v40;
              *a6 = v39;
              a6[1] = v25;
              long long v26 = v42;
              a6[2] = v41;
              a6[3] = v26;
              *a7 = v31;
              *a8 = v21;
              int v27 = v49;
              *a9 = v48;
              *a10 = v27;
              *a11 = v50;
              *a12 = v22;
              return v20;
            }
          }
        }
        else if (msg.msgh_size == 36)
        {
          uint64_t v20 = 4294966996;
          if (HIDWORD(v31))
          {
            if (msg.msgh_remote_port) {
              uint64_t v20 = 4294966996;
            }
            else {
              uint64_t v20 = HIDWORD(v31);
            }
          }
        }
        else
        {
          uint64_t v20 = 4294966996;
        }
      }
      else
      {
        uint64_t v20 = 4294966995;
      }
      mach_msg_destroy(&msg);
      return v20;
    }
    mig_dealloc_reply_port(msg.msgh_local_port);
  }
  return v20;
}

uint64_t sub_19E6D5164(mach_port_t a1, unsigned int a2, long long *a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  long long v4 = a3[5];
  long long v19 = a3[4];
  long long v20 = v4;
  long long v5 = a3[7];
  long long v21 = a3[6];
  long long v22 = v5;
  long long v6 = a3[1];
  long long v15 = *a3;
  long long v16 = v6;
  long long v7 = a3[3];
  long long v17 = a3[2];
  uint64_t v13 = *MEMORY[0x1E4F14068];
  unsigned int v14 = a2;
  long long v18 = v7;
  mach_port_t reply_port = mig_get_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = reply_port;
  msg.msgh_bits = 5395;
  *(void *)&msg.msgh_voucher_port = 0x4B100000000;
  if (MEMORY[0x1E4F14B18])
  {
    voucher_mach_msg_set(&msg);
    mach_port_t reply_port = msg.msgh_local_port;
  }
  uint64_t v9 = mach_msg(&msg, 3, 0xA4u, 0x2Cu, reply_port, 0, 0);
  uint64_t v10 = v9;
  if ((v9 - 268435458) <= 0xE && ((1 << (v9 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(msg.msgh_local_port);
    return v10;
  }
  if (v9)
  {
    mig_dealloc_reply_port(msg.msgh_local_port);
    return v10;
  }
  if (msg.msgh_id == 71)
  {
    uint64_t v10 = 4294966988;
LABEL_17:
    mach_msg_destroy(&msg);
    return v10;
  }
  if (msg.msgh_id != 1301)
  {
    uint64_t v10 = 4294966995;
    goto LABEL_17;
  }
  uint64_t v10 = 4294966996;
  if ((msg.msgh_bits & 0x80000000) != 0) {
    goto LABEL_17;
  }
  if (msg.msgh_size != 36) {
    goto LABEL_17;
  }
  if (msg.msgh_remote_port) {
    goto LABEL_17;
  }
  uint64_t v10 = v14;
  if (v14) {
    goto LABEL_17;
  }
  return v10;
}

uint64_t sub_19E6D52F4(mach_port_t a1, int a2, int a3, int a4, _OWORD *a5, uint64_t a6, int a7, _OWORD *a8, void *a9, _DWORD *a10)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  int v18 = 1;
  uint64_t v19 = a6;
  int v20 = 16777472;
  int v21 = a7;
  uint64_t v22 = *MEMORY[0x1E4F14068];
  *(_DWORD *)uint64_t v23 = a2;
  *(_DWORD *)&v23[4] = a3;
  *(_DWORD *)&v23[8] = a4;
  *(_OWORD *)&v23[12] = *a5;
  int v24 = a7;
  mach_port_t reply_port = mig_get_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = reply_port;
  msg.msgh_bits = -2147478253;
  *(void *)&msg.msgh_voucher_port = 0x4B200000000;
  if (MEMORY[0x1E4F14B18])
  {
    voucher_mach_msg_set(&msg);
    mach_port_t reply_port = msg.msgh_local_port;
  }
  uint64_t v13 = mach_msg(&msg, 3, 0x54u, 0x50u, reply_port, 0, 0);
  uint64_t v14 = v13;
  if ((v13 - 268435458) <= 0xE && ((1 << (v13 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(msg.msgh_local_port);
  }
  else
  {
    if (!v13)
    {
      if (msg.msgh_id == 71)
      {
        uint64_t v14 = 4294966988;
      }
      else if (msg.msgh_id == 1302)
      {
        if ((msg.msgh_bits & 0x80000000) != 0)
        {
          uint64_t v14 = 4294966996;
          if (v18 == 1 && msg.msgh_size == 72 && !msg.msgh_remote_port && HIBYTE(v20) == 1)
          {
            int v15 = v21;
            if (v21 == *(_DWORD *)&v23[16])
            {
              uint64_t v14 = 0;
              *a8 = *(_OWORD *)v23;
              *a9 = v19;
              *a10 = v15;
              return v14;
            }
          }
        }
        else if (msg.msgh_size == 36)
        {
          uint64_t v14 = 4294966996;
          if (HIDWORD(v19))
          {
            if (msg.msgh_remote_port) {
              uint64_t v14 = 4294966996;
            }
            else {
              uint64_t v14 = HIDWORD(v19);
            }
          }
        }
        else
        {
          uint64_t v14 = 4294966996;
        }
      }
      else
      {
        uint64_t v14 = 4294966995;
      }
      mach_msg_destroy(&msg);
      return v14;
    }
    mig_dealloc_reply_port(msg.msgh_local_port);
  }
  return v14;
}

uint64_t sub_19E6D54E4(mach_port_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5)
{
  mach_port_t reply_port = mig_get_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = reply_port;
  msg.msgh_bits = 5395;
  *(void *)&msg.msgh_voucher_port = 0x4B300000000;
  if (MEMORY[0x1E4F14B18])
  {
    voucher_mach_msg_set(&msg);
    mach_port_t reply_port = msg.msgh_local_port;
  }
  uint64_t v11 = mach_msg(&msg, 3, 0x18u, 0x3Cu, reply_port, 0, 0);
  uint64_t v12 = v11;
  if ((v11 - 268435458) > 0xE || ((1 << (v11 - 2)) & 0x4003) == 0)
  {
    if (v11)
    {
      mig_dealloc_reply_port(msg.msgh_local_port);
      return v12;
    }
    if (msg.msgh_id == 71)
    {
      uint64_t v12 = 4294966988;
    }
    else if (msg.msgh_id == 1303)
    {
      if ((msg.msgh_bits & 0x80000000) == 0)
      {
        if (msg.msgh_size == 52)
        {
          if (!msg.msgh_remote_port)
          {
            uint64_t v12 = v18;
            if (!v18)
            {
              int v15 = v20;
              *a2 = v19;
              *a3 = v15;
              int v16 = v22;
              *a4 = v21;
              *a5 = v16;
              return v12;
            }
            goto LABEL_23;
          }
        }
        else if (msg.msgh_size == 36)
        {
          if (msg.msgh_remote_port) {
            BOOL v13 = 1;
          }
          else {
            BOOL v13 = v18 == 0;
          }
          if (v13) {
            uint64_t v12 = 4294966996;
          }
          else {
            uint64_t v12 = v18;
          }
          goto LABEL_23;
        }
      }
      uint64_t v12 = 4294966996;
    }
    else
    {
      uint64_t v12 = 4294966995;
    }
LABEL_23:
    mach_msg_destroy(&msg);
    return v12;
  }
  mig_put_reply_port(msg.msgh_local_port);
  return v12;
}

uint64_t sub_19E6D5660(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(&off_1EF0E5660
       + ((79 * (dword_1E945E380 ^ 0x71 ^ qword_1E945E360)) ^ byte_19EC7A500[byte_19EC72CD0[(79 * (dword_1E945E380 ^ 0x71 ^ qword_1E945E360))] ^ 0x99])
       + 230);
  unsigned __int8 v2 = 79 * ((qword_1E945E360 - *v1) ^ 0x71);
  id v3 = *(&off_1EF0E5660
       + (*((unsigned char *)off_1EF0E5A68 + (*((unsigned __int8 *)off_1EF0E5AF0 + v2 - 12) ^ 0xDEu) - 12) ^ v2)
       - 75);
  unint64_t v4 = (unint64_t)&v6[*v3 ^ *v1];
  *uint64_t v1 = 1616673103 * v4 - 0x5807F13683BD618FLL;
  *id v3 = 1616673103 * (v4 ^ 0xA7F80EC97C429E71);
  uint64_t v7 = a1;
  unsigned int v8 = 1980347521 * ((((&v7 | 0xF939F4D6) ^ 0xFFFFFFFE) - (~&v7 | 0x6C60B29)) ^ 0xBF224BD4)
     + 228;
  LOBYTE(v3) = 79 * ((*(_DWORD *)v3 - *(_DWORD *)v1) ^ 0x71);
  return (*((uint64_t (**)(uint64_t *))*(&off_1EF0E5660
                                                + ((79
                                                                                 * ((qword_1E945E360 - dword_1E945E380) ^ 0x71)) ^ byte_19EC7A500[byte_19EC72CD0[(79 * ((qword_1E945E360 - dword_1E945E380) ^ 0x71))] ^ 0x99])
                                                + 60)
          + (*((unsigned char *)off_1EF0E5D58
                                            + (*((unsigned __int8 *)off_1EF0E5E08 + v3) ^ 0x94u)
                                            - 4) ^ v3)
          + 2312))(&v7);
}

uint64_t sub_19E6D584C(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(&off_1EF0E5660
       + ((79 * (dword_1E945E340 ^ 0x71 ^ qword_1E945E360)) ^ byte_19EC54C60[byte_19EC7A300[(79 * (dword_1E945E340 ^ 0x71 ^ qword_1E945E360))] ^ 0x76])
       + 58);
  unsigned __int8 v2 = *(&off_1EF0E5660
       + ((79 * (*v1 ^ qword_1E945E360 ^ 0x71)) ^ byte_19EC5F110[byte_19EC54B60[(79 * (*v1 ^ qword_1E945E360 ^ 0x71))] ^ 0xDD])
       - 28);
  unint64_t v3 = *v1 ^ (unint64_t)&v5 ^ *v2;
  *uint64_t v1 = 1616673103 * (v3 + 0x5807F13683BD618FLL);
  *unsigned __int8 v2 = 1616673103 * (v3 ^ 0xA7F80EC97C429E71);
  uint64_t v6 = a1;
  unsigned int v7 = (402930427 * ((642374427 - (&v6 | 0x2649DB1B) + (&v6 | 0xD9B624E4)) ^ 0xC30FD859)) ^ 0x10E;
  LOBYTE(v2) = 79 * ((*(_DWORD *)v2 - *(_DWORD *)v1) ^ 0x71);
  return (*((uint64_t (**)(uint64_t *))*(&off_1EF0E5660
                                                + ((79 * ((qword_1E945E360 - dword_1E945E340) ^ 0x71)) ^ byte_19EC54D60[byte_19EC7A400[(79 * ((qword_1E945E360 - dword_1E945E340) ^ 0x71))] ^ 0xCE])
                                                - 156)
          + (*((unsigned char *)off_1EF0E5D58
                                            + (*((unsigned __int8 *)off_1EF0E5E08 + v2) ^ 0x58u)
                                            - 4) ^ v2)
          + 2277))(&v6);
}

uint64_t sub_19E6D5A60(char a1, unsigned int a2)
{
  return *((unsigned __int8 *)off_1EF0E5D58 + (*((unsigned char *)off_1EF0E5E08 + a2) ^ a1)
                                            - 4) ^ a2;
}

uint64_t sub_19E6D5A8C(char a1, unsigned int a2)
{
  return *((unsigned __int8 *)off_1EF0E5BB8 + (*((unsigned char *)off_1EF0E5688 + a2) ^ a1)
                                            - 8) ^ a2;
}

uint64_t sub_19E6D5AB8(unsigned int a1)
{
  return *((unsigned __int8 *)off_1EF0E5DA8 + (*((unsigned __int8 *)off_1EF0E5E28 + a1 - 4) ^ 0x76u)
                                            - 8) ^ a1;
}

uint64_t sub_19E6D5AE8(unsigned int a1)
{
  return *((unsigned __int8 *)off_1EF0E57E0 + ((*off_1EF0E5CA8)[a1] ^ 0x49u) - 4) ^ a1;
}

uint64_t sub_19E6D5B18(unsigned int a1)
{
  return *((unsigned __int8 *)off_1EF0E5DA8 + (*((unsigned __int8 *)off_1EF0E5E28 + a1 - 4) ^ 0x56u)
                                            - 8) ^ a1;
}

uint64_t sub_19E6D5B48(unsigned int a1)
{
  return *((unsigned __int8 *)off_1EF0E5D58 + (*((unsigned __int8 *)off_1EF0E5E08 + a1) ^ 0x99u) - 4) ^ a1;
}

uint64_t sub_19E6D5B78(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (unint64_t *)*(&off_1EF0E5660
                           + ((79 * (dword_1E945E378 ^ 0x71 ^ qword_1E945E360)) ^ byte_19EC54C60[byte_19EC7A300[(79 * (dword_1E945E378 ^ 0x71 ^ qword_1E945E360))] ^ 0x76])
                           - 70);
  unsigned __int8 v2 = (char *)off_1EF0E5AF0 - 12;
  unint64_t v3 = (char *)off_1EF0E5A68 - 12;
  unint64_t v4 = *(&off_1EF0E5660
       + (*((unsigned char *)off_1EF0E5A68
                           + (*((unsigned __int8 *)off_1EF0E5AF0
                              + (79 * ((qword_1E945E360 - *v1) ^ 0x71))
                              - 12) ^ 0xB8u)
                           - 12) ^ (79 * ((qword_1E945E360 - *v1) ^ 0x71)))
       - 108);
  unint64_t v5 = (*v4 ^ *v1) - (void)&v7;
  *uint64_t v1 = (1616673103 * v5) ^ 0xA7F80EC97C429E71;
  *unint64_t v4 = 1616673103 * (v5 ^ 0xA7F80EC97C429E71);
  uint64_t v8 = a1;
  unsigned int v9 = (1980347521
      * (((&v8 | 0x9BDEA8A4) - &v8 + (&v8 & 0x64215758)) ^ 0x223AE859)) ^ 0x604;
  LOBYTE(v4) = 79 * ((*(_DWORD *)v4 + *(_DWORD *)v1) ^ 0x71);
  (*((void (**)(uint64_t *))*(&off_1EF0E5660
                                      + ((79 * (dword_1E945E378 ^ 0x71 ^ qword_1E945E360)) ^ byte_19EC54D60[byte_19EC7A400[(79 * (dword_1E945E378 ^ 0x71 ^ qword_1E945E360))] ^ 0x44])
                                      - 95)
   + (v4 ^ v3[v2[v4] ^ 0xB6])
   + 2342))(&v8);
  return v10;
}

uint64_t T8HkBFEVEnY(int a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  unint64_t v5 = (unint64_t *)*(&off_1EF0E5660
                           + ((79 * ((qword_1E945E360 - dword_1E945E370) ^ 0x71)) ^ byte_19EC54C60[byte_19EC7A300[(79 * ((qword_1E945E360 - dword_1E945E370) ^ 0x71))] ^ 0x42])
                           - 7);
  unsigned __int8 v6 = 79 * (*v5 ^ qword_1E945E360 ^ 0x71);
  uint64_t v7 = (unint64_t *)*(&off_1EF0E5660
                           + (*((unsigned char *)off_1EF0E5A68
                                               + (*((unsigned __int8 *)off_1EF0E5AF0 + v6 - 12) ^ 0xB6u)
                                               - 12) ^ v6)
                           - 14);
  unint64_t v8 = 1616673103 * ((*v7 - *v5 - (void)&v11) ^ 0xA7F80EC97C429E71);
  *unint64_t v5 = v8;
  *uint64_t v7 = v8;
  unsigned int v9 = 291962093 * ((((2 * v12) | 0x8156C28A) - v12 - 1084973381) ^ 0x51596C0F);
  unsigned int v14 = (a1 ^ 0x7F36D737) + ((2 * a1) & 0xFE6DAE6E) - v9 - 438468658;
  unsigned int v15 = v9 ^ ((a3 ^ 0xFFFCCEF5) + 2021391868 + ((2 * a3) & 0xFFF99DEA));
  int v16 = v9 ^ 0x5F5;
  uint64_t v17 = a2;
  v12[0] = a4;
  v12[1] = a5;
  LOBYTE(v5) = 79 * ((*(_DWORD *)v7 + *(_DWORD *)v5) ^ 0x71);
  (*((void (**)(void *))*(&off_1EF0E5660
                                     + ((79 * ((qword_1E945E360 - dword_1E945E370) ^ 0x71)) ^ byte_19EC7A500[byte_19EC72CD0[(79 * ((qword_1E945E360 - dword_1E945E370) ^ 0x71))] ^ 0x58])
                                     - 1)
   + (*((unsigned char *)off_1EF0E5DA8
                                     + (*((unsigned __int8 *)off_1EF0E5E28 + v5 - 4) ^ 0x76u)
                                     - 8) ^ v5)
   + 2260))(v12);
  return v13 ^ 0x296A12DBu;
}

uint64_t sub_19E6D5FE4(unsigned int a1)
{
  return *((unsigned __int8 *)off_1EF0E5A68
         + (*((unsigned __int8 *)off_1EF0E5AF0 + a1 - 12) ^ 0xCEu)
         - 12) ^ a1;
}

uint64_t sub_19E6D6014(unsigned int a1)
{
  return *((unsigned __int8 *)off_1EF0E5A68
         + (*((unsigned __int8 *)off_1EF0E5AF0 + a1 - 12) ^ 0xB6u)
         - 12) ^ a1;
}

uint64_t sub_19E6D6044(unsigned int a1)
{
  return *((unsigned __int8 *)off_1EF0E5D58 + (*((unsigned __int8 *)off_1EF0E5E08 + a1) ^ 0x94u) - 4) ^ a1;
}

uint64_t sub_19E6D6074(unsigned int a1)
{
  return *((unsigned __int8 *)off_1EF0E5A68
         + (*((unsigned __int8 *)off_1EF0E5AF0 + a1 - 12) ^ 0xB8u)
         - 12) ^ a1;
}

uint64_t sub_19E6D60A4(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (uint64_t)*(&off_1EF0E5660
                + ((79 * (dword_1E945E330 ^ 0x71 ^ qword_1E945E360)) ^ byte_19EC54C60[byte_19EC7A300[(79 * (dword_1E945E330 ^ 0x71 ^ qword_1E945E360))] ^ 0x56])
                - 180);
  uint64_t v2 = *(void *)(v1 - 4);
  unint64_t v3 = *(&off_1EF0E5660
       + (*((unsigned char *)off_1EF0E5D58
                           + (*((unsigned __int8 *)off_1EF0E5E08
                              + (79 * ((qword_1E945E360 - v2) ^ 0x71))) ^ 0x1Fu)
                           - 4) ^ (79 * ((qword_1E945E360 - v2) ^ 0x71)))
       - 176);
  unint64_t v4 = (unint64_t)&v6[*v3 ^ v2];
  *(void *)(v1 - 4) = 1616673103 * (v4 + 0x5807F13683BD618FLL);
  *unint64_t v3 = 1616673103 * (v4 ^ 0xA7F80EC97C429E71);
  uint64_t v8 = a1;
  v7[1] = 1001500783 * (((v7 | 0x7BB5465) - (v7 & 0x7BB5465)) ^ 0x4D0FABD1) + 2310;
  LOBYTE(v3) = 79 * (*(_DWORD *)(v1 - 4) ^ 0x71 ^ *(_DWORD *)v3);
  (*((void (**)(_DWORD *))*(&off_1EF0E5660
                                     + ((79 * (dword_1E945E330 ^ 0x71 ^ qword_1E945E360)) ^ byte_19EC54C60[byte_19EC7A300[(79 * (dword_1E945E330 ^ 0x71 ^ qword_1E945E360))] ^ 0x56])
                                     - 149)
   + (*((unsigned char *)off_1EF0E5DA8
                                     + (*((unsigned __int8 *)off_1EF0E5E28 + v3 - 4) ^ 0x42u)
                                     - 8) ^ v3)
   + 2103))(v7);
  return v7[0];
}

uint64_t sub_19E6D6290(char a1, unsigned int a2)
{
  return *((unsigned __int8 *)off_1EF0E57E0 + ((*off_1EF0E5CA8)[a2] ^ a1) - 4) ^ a2;
}

uint64_t sub_19E6D62BC(unsigned int a1)
{
  return *((unsigned __int8 *)off_1EF0E57E0 + ((*off_1EF0E5CA8)[a1] ^ 0xDDu) - 4) ^ a1;
}

uint64_t sub_19E6D62EC(char a1, unsigned int a2)
{
  return *((unsigned __int8 *)off_1EF0E5848 + (*((unsigned char *)off_1EF0E5DD0 + a2 - 8) ^ a1)) ^ a2;
}

uint64_t sub_19E6D6318(unsigned int a1)
{
  return *((unsigned __int8 *)off_1EF0E5848 + (*((unsigned __int8 *)off_1EF0E5DD0 + a1 - 8) ^ 0xA3u)) ^ a1;
}

uint64_t sub_19E6D6344(char a1, unsigned int a2)
{
  return *((unsigned __int8 *)off_1EF0E5DA8
         + (*((unsigned char *)off_1EF0E5E28 + a2 - 4) ^ a1)
         - 8) ^ a2;
}

uint64_t sub_19E6D6370(unsigned int a1)
{
  return *((unsigned __int8 *)off_1EF0E5DA8 + (*((unsigned __int8 *)off_1EF0E5E28 + a1 - 4) ^ 0x42u)
                                            - 8) ^ a1;
}

uint64_t sub_19E6D63A0(char a1, unsigned int a2)
{
  return *((unsigned __int8 *)off_1EF0E5A68
         + (*((unsigned char *)off_1EF0E5AF0 + a2 - 12) ^ a1)
         - 12) ^ a2;
}

uint64_t sub_19E6D63CC(unsigned int a1)
{
  return *((unsigned __int8 *)off_1EF0E5A68
         + (*((unsigned __int8 *)off_1EF0E5AF0 + a1 - 12) ^ 0xDEu)
         - 12) ^ a1;
}

uint64_t sub_19E6D63FC(unsigned int a1)
{
  return *((unsigned __int8 *)off_1EF0E5D58 + (*((unsigned __int8 *)off_1EF0E5E08 + a1) ^ 0x1Fu) - 4) ^ a1;
}

uint64_t sub_19E6D6428(unsigned int a1)
{
  return *((unsigned __int8 *)off_1EF0E5BB8 + (*((unsigned __int8 *)off_1EF0E5688 + a1) ^ 0x5Fu) - 8) ^ a1;
}

uint64_t sub_19E6D6458(unsigned int a1)
{
  return *((unsigned __int8 *)off_1EF0E5D58 + (*((unsigned __int8 *)off_1EF0E5E08 + a1) ^ 0x58u) - 4) ^ a1;
}

uint64_t sub_19E6D6488(unsigned int a1)
{
  return *((unsigned __int8 *)off_1EF0E5DA8 + (*((unsigned __int8 *)off_1EF0E5E28 + a1 - 4) ^ 0x8Eu)
                                            - 8) ^ a1;
}

uint64_t sub_19E6D64B8(unsigned int a1)
{
  return *((unsigned __int8 *)off_1EF0E5A68
         + (*((unsigned __int8 *)off_1EF0E5AF0 + a1 - 12) ^ 0x44u)
         - 12) ^ a1;
}

void sub_19E6D64E8(uint64_t a1)
{
  int v1 = 1575213817 * ((((2 * a1) | 0x9688197E) - a1 - 1262750911) ^ 0xC621BC73);
  if (*(void *)(a1 + 24)) {
    BOOL v2 = *(_DWORD *)(a1 + 8) - v1 == 1477205976;
  }
  else {
    BOOL v2 = 1;
  }
  int v3 = !v2;
  __asm { BRAA            X8, X17 }
}

uint64_t sub_19E6D65CC@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  unsigned int v10 = v2 - 1477205977;
  int v11 = v2 - 1;
  int v12 = *(unsigned __int8 *)(v6 + v10);
  if (v12 == 193) {
    __asm { BRAA            X11, X17 }
  }
  if (v12 == 65)
  {
    int v13 = 694817499;
    uint64_t v14 = *v3;
    int v15 = (*((unsigned char *)v3 + 12) - v4);
    *(void *)uint64_t result = v6;
    *(_DWORD *)(result + 8) = v7;
    *(_DWORD *)(result + 12) = v11;
    if (v15 == 6) {
      int v16 = 909740565;
    }
    else {
      int v16 = 909740564;
    }
    *(_DWORD *)(result + 16) = 1725680076;
    *(_DWORD *)(result + 20) = v16;
    *(_DWORD *)(result + 24) = 694817499;
    *(void *)(v14 - 0x1D36EF3669885055) = a2;
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(void))(v9 + 8 * (v8 + 96)))();
    int v13 = -694859518;
  }
  *((_DWORD *)v3 + 4) = v13;
  return result;
}

void sub_19E6D66B0(uint64_t a1)
{
  if (*(void *)(a1 + 16)) {
    BOOL v2 = *(void *)(a1 + 8) == 0;
  }
  else {
    BOOL v2 = 1;
  }
  int v3 = !v2;
  int v1 = *(_DWORD *)(a1 + 48) + 1980347521 * ((2 * (a1 & 0x727F35F7) - a1 - 1920939512) ^ 0x34648AF5);
  __asm { BRAA            X9, X17 }
}

uint64_t sub_19E6D6788(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(unsigned char *)(v10 + (v8 - 582084591)) = -63;
  return (*(uint64_t (**)(void))(a8
                              + 8 * ((962 * (v8 + 1 + ((3 * ((v9 - 834) ^ 0x47C)) ^ 0xDD4E1836) < 0x40)) ^ (v9 - 834))))();
}

uint64_t sub_19E6D67E0@<X0>(int a1@<W2>, uint64_t a2@<X4>, int a3@<W5>, char a4@<W7>, int a5@<W8>)
{
  *(unsigned char *)(a2 + (v5 + a1)) = a4;
  return (*(uint64_t (**)(void))(v7 + 8 * ((((v6 + a3 + v5 + 1) < 0x40) * v8) | a5)))();
}

uint64_t sub_19E6D6810()
{
  return (*(uint64_t (**)(void))(v1
                              + 8
                              * ((((19 * (v0 ^ 0x79F)) ^ 0xCA6) * (*(_DWORD *)(v2 + 48 * (v3 - 1130954008) + 36) == v3)) ^ v0)))();
}

uint64_t sub_19E6D6864(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  LODWORD(STACK[0x600]) = -694859468;
  return (*(uint64_t (**)(void))(a8
                              + 8
                              * (((v9 == 0) * ((((v8 - 53) | 0x204) ^ 0x333) - 280)) | (((v8 - 53) | 0x204) + 1604))))();
}

uint64_t sub_19E6D6884@<X0>(uint64_t a1@<X0>, int a2@<W2>, uint64_t a3@<X3>, unsigned int a4@<W8>)
{
  unsigned int v5 = (139 * (a4 ^ 0x449)) ^ 0xED3E3376 ^ ((*v4 & 0x7FFFFFFE ^ 0x6569E9BA)
                                          - ((2 * (*v4 & 0x7FFFFFFE ^ 0x6569E9BA)) & 0xCA6CA0A4)
                                          - 449425325);
  unsigned int v6 = ((v5 << (a4 - 76)) & 0xD8A27C44) - v5 + 330219997;
  v4[623] = v4[396] ^ *(_DWORD *)(a1 + 4 * ((*v4 & 1) == 0)) ^ (((v6 ^ 0x2BFC16C | ~v4[623] & 0x80000000)
                                                                 + 204218536
                                                                 - 2 * ((v6 ^ 0x2BFC16C) & 0xC2C20B9 ^ v6 & 0x11)) >> 1) ^ 0x68B9134F;
  return (*(uint64_t (**)(void))(a3 + 8 * (((LODWORD(STACK[0x59C]) > 0x26F) * a2) ^ a4)))();
}

uint64_t sub_19E6D6B8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 8 * ((761 * (v9 == (((v8 + 472) | 0x128) ^ 0x296A17F7))) ^ (v8 + 768))))();
}

uint64_t sub_19E6D6BD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int8x16_t *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, int a9@<W8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  int8x16_t v42 = *(int8x16_t *)(v41 + (a9 + v39));
  v43.i64[0] = 0x8282828282828282;
  v43.i64[1] = 0x8282828282828282;
  int8x16_t v44 = vmvnq_s8(vandq_s8(vaddq_s8(v42, v42), v43));
  v43.i64[0] = 0xC2C2C2C2C2C2C2C2;
  v43.i64[1] = 0xC2C2C2C2C2C2C2C2;
  *a5 = vaddq_s8(vaddq_s8(v42, v43), v44);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, int8x16_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v40 + 8 * (v38 + 335)))(a1, a2, a3, a4, a5, a6, a7, a8, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38);
}

uint64_t sub_19E6D6C2C()
{
  *(_DWORD *)(v2 - 248) = v1
                        - 326
                        - 402930427 * ((((2 * (v2 - 248)) | 0x41BF8C7E) - (v2 - 248) - 551536191) ^ 0x3A663A82)
                        + 921;
  *(unsigned char *)(v2 - 232) = (-5 * ((((2 * (v2 + 8)) | 0x7E) - (v2 + 8) - 63) ^ 0x82)) ^ 0x49;
  STACK[0x250] = (unint64_t)&STACK[0x4987798DA1795349];
  *(void *)(v2 - 240) = &STACK[0x4987798DA1795349];
  STACK[0x258] = (unint64_t)&STACK[0x388BF9DCA2D079A6];
  *(void *)(v2 - 224) = &STACK[0x388BF9DCA2D079A6];
  int v3 = *(uint64_t (**)(uint64_t))(v0 + 8 * (v1 + 1847));
  STACK[0x460] = v0;
  uint64_t v4 = v3(v2 - 248);
  unint64_t v5 = STACK[0x460];
  int v6 = *(_DWORD *)(v2 - 228);
  LODWORD(STACK[0x600]) = v6;
  return (*(uint64_t (**)(uint64_t))(v5
                                            + 8
                                            * ((505 * (v6 != 16 * ((v1 - 1797107312) & 0x6B1DAE6F ^ 0x266) + 694816315)) ^ (v1 - 326))))(v4);
}

uint64_t sub_19E6D6F4C()
{
  return (*(uint64_t (**)(void))(v2 + 8 * (((v0 == 0x754E85368FB50F55) * ((v1 ^ 0xE1) - 1132)) ^ v1)))();
}

uint64_t sub_19E6D6F84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,int a25,unsigned __int8 a26,unsigned int a27)
{
  unsigned int v30 = v28 + 1050895959 + (a25 & 0xFB5EEB3F);
  BOOL v31 = v30 < 0x6FEF8C6F;
  BOOL v32 = v30 > a27;
  if (a27 < 0x6FEF8C6F != v31) {
    unsigned __int8 v33 = v31;
  }
  else {
    unsigned __int8 v33 = v32;
  }
  return (*(uint64_t (**)(void))(v27 + 8 * ((497 * ((a26 ^ v33) & 1)) ^ (a8 + v29 + 210))))();
}

uint64_t sub_19E6D7010@<X0>(int a1@<W0>, int32x4_t *a2@<X8>)
{
  int8x16x4_t v71 = vld4q_s8(v3);
  v5.i64[0] = 0xC1C1C1C1C1C1C1C1;
  v5.i64[1] = 0xC1C1C1C1C1C1C1C1;
  uint8x16_t v6 = (uint8x16_t)veorq_s8(v71.val[0], v5);
  uint16x8_t v7 = vmovl_u8(*(uint8x8_t *)v6.i8);
  uint16x8_t v8 = vmovl_high_u8(v6);
  int32x4_t v9 = (int32x4_t)vmovl_high_u16(v8);
  uint32x4_t v10 = vshll_high_n_u16(v8, 1uLL);
  int32x4_t v11 = vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v8.i8), (int32x4_t)(*(_OWORD *)&vshll_n_u16(*(uint16x4_t *)v8.i8, 1uLL) & __PAIR128__(0xFFFFFF6FFFFFFF6FLL, 0xFFFFFF6FFFFFFF6FLL)));
  int32x4_t v12 = vdupq_n_s32(0x4D7295B7u);
  int8x16_t v13 = (int8x16_t)vaddq_s32(v11, v12);
  int8x16_t v14 = (int8x16_t)vaddq_s32(vsubq_s32(v9, (int32x4_t)(*(_OWORD *)&v10 & __PAIR128__(0xFFFFFF6FFFFFFF6FLL, 0xFFFFFF6FFFFFFF6FLL))), v12);
  uint8x16_t v15 = (uint8x16_t)veorq_s8(v71.val[1], v5);
  uint16x8_t v16 = vmovl_u8(*(uint8x8_t *)v15.i8);
  uint16x8_t v17 = vmovl_high_u8(v15);
  v18.i64[0] = 0x9200000092;
  v18.i64[1] = 0x9200000092;
  int32x4_t v19 = vsubq_s32((int32x4_t)vmovl_high_u16(v17), (int32x4_t)vandq_s8((int8x16_t)vshll_high_n_u16(v17, 1uLL), v18));
  int32x4_t v20 = vshlq_n_s32(vsubq_s32((int32x4_t)vmovl_high_u16(v16), (int32x4_t)vandq_s8((int8x16_t)vshll_high_n_u16(v16, 1uLL), v18)), 8uLL);
  int32x4_t v21 = vdupq_n_s32(0x26CA4900u);
  int32x4_t v22 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v16.i8), (int32x4_t)vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v16.i8, 1uLL), v18)), 8uLL), v21), (int8x16_t)v21);
  int32x4_t v23 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(v20, v21), (int8x16_t)v21);
  int32x4_t v24 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v17.i8), (int32x4_t)vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v17.i8, 1uLL), v18)), 8uLL), v21), (int8x16_t)v21);
  int32x4_t v25 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(v19, 8uLL), v21), (int8x16_t)v21);
  int8x16_t v26 = (int8x16_t)vdupq_n_s32(0x1DC79600u);
  int32x4_t v27 = vdupq_n_s32(0x4EE3CBFBu);
  int8x16_t v28 = veorq_s8(v14, (int8x16_t)v12);
  int8x16_t v29 = veorq_s8(v13, (int8x16_t)v12);
  int8x16_t v30 = veorq_s8((int8x16_t)vaddq_s32(vsubq_s32((int32x4_t)vmovl_high_u16(v7), (int32x4_t)(*(_OWORD *)&vshll_high_n_u16(v7, 1uLL) & __PAIR128__(0xFFFFFF6FFFFFFF6FLL, 0xFFFFFF6FFFFFFF6FLL))), v12), (int8x16_t)v12);
  int32x4_t v31 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v22, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v22, v22), v26)), v27), (int8x16_t)v27), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v7.i8), (int32x4_t)(*(_OWORD *)&vshll_n_u16(*(uint16x4_t *)v7.i8, 1uLL) & __PAIR128__(0xFFFFFF6FFFFFFF6FLL, 0xFFFFFF6FFFFFFF6FLL))), v12), (int8x16_t)v12));
  int32x4_t v32 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v23, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v23, v23), v26)), v27), (int8x16_t)v27), v30);
  int32x4_t v33 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v24, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v24, v24), v26)), v27), (int8x16_t)v27), v29);
  int32x4_t v34 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v25, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v25, v25), v26)), v27), (int8x16_t)v27), v28);
  int8x16_t v35 = (int8x16_t)vdupq_n_s32(0x23A6FB0Eu);
  int32x4_t v36 = vsubq_s32(v31, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v31, v31), v35));
  int32x4_t v37 = vdupq_n_s32(0x11D37D87u);
  int8x16_t v38 = (int8x16_t)vaddq_s32(vsubq_s32(v32, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v32, v32), v35)), v37);
  int8x16_t v39 = (int8x16_t)vaddq_s32(vsubq_s32(v33, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v33, v33), v35)), v37);
  int8x16_t v40 = (int8x16_t)vaddq_s32(vsubq_s32(v34, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v34, v34), v35)), v37);
  uint8x16_t v41 = (uint8x16_t)veorq_s8(v71.val[2], v5);
  uint16x8_t v42 = vmovl_u8(*(uint8x8_t *)v41.i8);
  uint16x8_t v43 = vmovl_high_u8(v41);
  int32x4_t v44 = vsubq_s32((int32x4_t)vmovl_high_u16(v43), (int32x4_t)(*(_OWORD *)&vshll_high_n_u16(v43, 1uLL) & __PAIR128__(0xFFFFFFA5FFFFFFA5, 0xFFFFFFA5FFFFFFA5)));
  int32x4_t v45 = vsubq_s32((int32x4_t)vmovl_high_u16(v42), (int32x4_t)(*(_OWORD *)&vshll_high_n_u16(v42, 1uLL) & __PAIR128__(0xFFFFFFA5FFFFFFA5, 0xFFFFFFA5FFFFFFA5)));
  int32x4_t v46 = vdupq_n_s32(0x3ED20000u);
  int32x4_t v47 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v42.i8), (int32x4_t)(*(_OWORD *)&vshll_n_u16(*(uint16x4_t *)v42.i8, 1uLL) & __PAIR128__(0xFFFFFFA5FFFFFFA5, 0xFFFFFFA5FFFFFFA5))), 0x10uLL), v46), (int8x16_t)v46);
  int32x4_t v48 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(v45, 0x10uLL), v46), (int8x16_t)v46);
  int32x4_t v49 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v43.i8), (int32x4_t)(*(_OWORD *)&vshll_n_u16(*(uint16x4_t *)v43.i8, 1uLL) & __PAIR128__(0xFFFFFFA5FFFFFFA5, 0xFFFFFFA5FFFFFFA5))), 0x10uLL), v46), (int8x16_t)v46);
  int32x4_t v50 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(v44, 0x10uLL), v46), (int8x16_t)v46);
  int8x16_t v51 = (int8x16_t)vdupq_n_s32(0x56540000u);
  int32x4_t v52 = vdupq_n_s32(0xAB2A298B);
  int8x16_t v53 = veorq_s8(v40, (int8x16_t)v37);
  int8x16_t v54 = veorq_s8(v39, (int8x16_t)v37);
  int8x16_t v55 = veorq_s8(v38, (int8x16_t)v37);
  int32x4_t v56 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(v36, v37), (int8x16_t)v37), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v47, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v47, v47), v51)), v52), (int8x16_t)v52));
  int32x4_t v57 = (int32x4_t)vorrq_s8(v55, veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v48, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v48, v48), v51)), v52), (int8x16_t)v52));
  int32x4_t v58 = (int32x4_t)vorrq_s8(v54, veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v49, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v49, v49), v51)), v52), (int8x16_t)v52));
  int32x4_t v59 = (int32x4_t)vorrq_s8(v53, veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v50, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v50, v50), v51)), v52), (int8x16_t)v52));
  int8x16_t v60 = (int8x16_t)vdupq_n_s32(0x1AE1B776u);
  int32x4_t v61 = vdupq_n_s32(0xCD70DBBB);
  int8x16_t v62 = (int8x16_t)vaddq_s32(vsubq_s32(v56, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v56, v56), v60)), v61);
  int8x16_t v63 = (int8x16_t)vaddq_s32(vsubq_s32(v57, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v57, v57), v60)), v61);
  int8x16_t v64 = (int8x16_t)vaddq_s32(vsubq_s32(v58, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v58, v58), v60)), v61);
  int8x16_t v65 = (int8x16_t)vaddq_s32(vsubq_s32(v59, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v59, v59), v60)), v61);
  v71.val[0] = veorq_s8(v71.val[3], v5);
  v71.val[1] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v71.val[0].i8);
  v71.val[0] = (int8x16_t)vmovl_high_u8((uint8x16_t)v71.val[0]);
  v60.i64[0] = 0xC8000000C8;
  v60.i64[1] = 0xC8000000C8;
  int32x4_t v66 = vsubq_s32((int32x4_t)vmovl_high_u16((uint16x8_t)v71.val[0]), (int32x4_t)vandq_s8((int8x16_t)vshll_high_n_u16((uint16x8_t)v71.val[0], 1uLL), v60));
  v71.val[2] = (int8x16_t)vshlq_n_s32(vsubq_s32((int32x4_t)vmovl_high_u16((uint16x8_t)v71.val[1]), (int32x4_t)vandq_s8((int8x16_t)vshll_high_n_u16((uint16x8_t)v71.val[1], 1uLL), v60)), 0x18uLL);
  v49.i64[0] = 0xE4000000E4000000;
  v49.i64[1] = 0xE4000000E4000000;
  v71.val[1] = veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v71.val[1].i8), (int32x4_t)vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v71.val[1].i8, 1uLL), v60)), 0x18uLL), v49), (int8x16_t)v49);
  v71.val[2] = veorq_s8((int8x16_t)vaddq_s32((int32x4_t)v71.val[2], v49), (int8x16_t)v49);
  v71.val[0] = veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v71.val[0].i8), (int32x4_t)vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v71.val[0].i8, 1uLL), v60)), 0x18uLL), v49), (int8x16_t)v49);
  v71.val[3] = veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(v66, 0x18uLL), v49), (int8x16_t)v49);
  int32x4_t v67 = vdupq_n_s32(0xF1B72361);
  v71.val[1] = vorrq_s8(veorq_s8(v62, (int8x16_t)v61), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32((int32x4_t)v71.val[1], (int32x4_t)(*(_OWORD *)&vaddq_s32((int32x4_t)v71.val[1], (int32x4_t)v71.val[1]) & __PAIR128__(0xE3FFFFFFE3FFFFFFLL, 0xE3FFFFFFE3FFFFFFLL))), v67), (int8x16_t)v67));
  v71.val[2] = vorrq_s8(veorq_s8(v63, (int8x16_t)v61), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32((int32x4_t)v71.val[2], (int32x4_t)(*(_OWORD *)&vaddq_s32((int32x4_t)v71.val[2], (int32x4_t)v71.val[2]) & __PAIR128__(0xE3FFFFFFE3FFFFFFLL, 0xE3FFFFFFE3FFFFFFLL))), v67), (int8x16_t)v67));
  v71.val[0] = vorrq_s8(veorq_s8(v64, (int8x16_t)v61), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32((int32x4_t)v71.val[0], (int32x4_t)(*(_OWORD *)&vaddq_s32((int32x4_t)v71.val[0], (int32x4_t)v71.val[0]) & __PAIR128__(0xE3FFFFFFE3FFFFFFLL, 0xE3FFFFFFE3FFFFFFLL))), v67), (int8x16_t)v67));
  v71.val[3] = vorrq_s8(veorq_s8(v65, (int8x16_t)v61), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32((int32x4_t)v71.val[3], (int32x4_t)(*(_OWORD *)&vaddq_s32((int32x4_t)v71.val[3], (int32x4_t)v71.val[3]) & __PAIR128__(0xE3FFFFFFE3FFFFFFLL, 0xE3FFFFFFE3FFFFFFLL))), v67), (int8x16_t)v67));
  int8x16_t v68 = (int8x16_t)vdupq_n_s32(0x52D425B6u);
  int32x4_t v69 = vdupq_n_s32(0x296A12DBu);
  a2[2] = vaddq_s32(vsubq_s32((int32x4_t)v71.val[0], (int32x4_t)vandq_s8((int8x16_t)vaddq_s32((int32x4_t)v71.val[0], (int32x4_t)v71.val[0]), v68)), v69);
  a2[3] = vaddq_s32(vsubq_s32((int32x4_t)v71.val[3], (int32x4_t)vandq_s8((int8x16_t)vaddq_s32((int32x4_t)v71.val[3], (int32x4_t)v71.val[3]), v68)), v69);
  *a2 = vaddq_s32(vsubq_s32((int32x4_t)v71.val[1], (int32x4_t)vandq_s8((int8x16_t)vaddq_s32((int32x4_t)v71.val[1], (int32x4_t)v71.val[1]), v68)), v69);
  a2[1] = vaddq_s32(vsubq_s32((int32x4_t)v71.val[2], (int32x4_t)vandq_s8((int8x16_t)vaddq_s32((int32x4_t)v71.val[2], (int32x4_t)v71.val[2]), v68)), v69);
  return (*(uint64_t (**)(void))(v4 + 8 * ((2836 * ((v2 + 923003690) < 0x10)) ^ (2 * (a1 ^ 0x3BC) + 432))))();
}

uint64_t sub_19E6D74C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11
                                                                       + 8
                                                                       * ((106 * ((v10 + 1 + v8) < 0x30)) ^ v9)))(a1, a8, a8, v12 + 48);
}

uint64_t sub_19E6DF774(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 8 * v8))();
}

uint64_t sub_19E6DF910@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, int a8@<W8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45)
{
  unsigned int v48 = v46 + ((3 * ((HIDWORD(a16) + 1768) ^ 0x857)) ^ 0x1C41A73B);
  if (v48 <= 0x40) {
    unsigned int v48 = 64;
  }
  BOOL v49 = !__CFADD__(v46 + 474064457, a8 - 474065441 + v45 + ((HIDWORD(a16) + 1768) ^ 0x857) + 860 + v48);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v47 + 8 * (v49 | (HIDWORD(a16) + 1768))))(a1, a2, 474064457, a3, a4, a5, a6, a7, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45);
}

uint64_t sub_19E6DF990(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10 = (v8 - 358) | 0x18;
  *(_DWORD *)(v9 - 248) = -1675821692
                        - 545147329
                        * ((((v9 - 248) | 0x51455B44) - (v9 - 248) + ((v9 - 248) & 0xAEBAA4B8)) ^ 0xF1B19B28)
                        + v8
                        + 129;
  (*(void (**)(uint64_t))(a8 + 8 * (v8 ^ 0x885)))(v9 - 248);
  LODWORD(STACK[0x2A4]) = LODWORD(STACK[0x2A4]) + v10 - 92;
  *(unsigned char *)(v9 - 232) = (-5 * ((~((v9 + 8) | 0x73) + ((v9 + 8) & 0x73)) ^ 0x31)) ^ 0x4A;
  *(void *)(v9 - 224) = STACK[0x258];
  *(void *)(v9 - 240) = STACK[0x250];
  *(_DWORD *)(v9 - 248) = v8 - 402930427 * ((~((v9 - 248) | 0x5CD77073) + ((v9 - 248) & 0x5CD77073)) ^ 0xB9917331) + 724;
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(STACK[0x460] + 8 * (v8 + 1976)))(v9 - 248);
  unint64_t v12 = STACK[0x460];
  int v13 = *(_DWORD *)(v9 - 228);
  LODWORD(STACK[0x600]) = v13;
  LODWORD(STACK[0x2B4]) = 1589161203;
  return (*(uint64_t (**)(uint64_t))(v12
                                            + 8 * (((v13 == v10 + 694817406) * (((v10 + 431) | 0x20) ^ 0x7B1)) ^ v10)))(v11);
}

uint64_t sub_19E6DFAE4(int a1, uint64_t a2, int a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8 * (((v5 == 2072727178) * (((v4 ^ a1) - 1612) ^ a3)) ^ v4)))();
}

uint64_t sub_19E6DFB18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  STACK[0x578] += (v4 + 1538635464) & 0xA44A46AE ^ 0xFFFFFFFFFFFFFDDCLL;
  return (*(uint64_t (**)(void))(a4 + 8 * (v4 ^ 0x1F8)))();
}

uint64_t sub_19E6DFB64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 8 * (v4 ^ 0xBA9u)))(a1, 4182676990);
  return (*(uint64_t (**)(void))(STACK[0x460] + 8
                                             * (((v5 == 0) * (11 * (v4 ^ 0x373) + 139 * (v4 ^ 0x310) - 1605)) ^ v4)))();
}

uint64_t sub_19E6DFC98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  STACK[0x430] = STACK[0x560];
  LODWORD(STACK[0x5BC]) = 807847714;
  return (*(uint64_t (**)(void))(a8
                              + 8
                              * (((v9 + ((2 * (v8 ^ 0x81B) + 2122252664) & 0x8180FF6D) == 694818055)
                                * ((2 * (v8 ^ 0x81B)) ^ 0x6A6)) ^ (2 * (v8 ^ 0x81B)))))();
}

uint64_t sub_19E6DFD14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  return (*(uint64_t (**)(void))(v7 + 8 * (((v8 < ((79 * (a7 ^ 0x5E7)) ^ 0x51Fu)) * (a7 - 535)) ^ a7)))();
}

uint64_t sub_19E6DFD6C(uint64_t a1)
{
  int v1 = 1001500783 * ((664209447 - (a1 | 0x27970827) + (a1 | 0xD868F7D8)) ^ 0x92DC086C);
  int v2 = *(_DWORD *)(a1 + 24) ^ v1;
  uint64_t v3 = (*(_DWORD *)(a1 + 8) + v1);
  int v4 = *(_DWORD *)(*(void *)a1 - 0x7CF6A079DDC72530);
  unsigned int v6 = v4 - 263820150;
  BOOL v5 = v4 - 263820150 < 0;
  unsigned int v7 = 263820150 - v4;
  if (v5) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = v6;
  }
  uint64_t v9 = 4 * (v8 - ((2 * v8) & 0x6C31D6DE)) - 0x40DB84DB279C5244;
  unint64_t v10 = (v9 ^ 0x4397B0DA6358C858) + 0x34C340215D3D67FLL + ((2 * v9) & 0x784097FD7676CBC8 ^ 0x7840964930464B48);
  unint64_t v11 = (v3 | ((unint64_t)(v3 < 0x252DEBD9) << 32)) + 2883670154u;
  int v12 = (v11 < 0xD10F3C63) ^ (v10 < 0xD10F3C63);
  BOOL v13 = v10 > v11;
  if (v12) {
    BOOL v13 = v10 < 0xD10F3C63;
  }
  return (*((uint64_t (**)(void))*(&off_1EF0E5660 + (v2 ^ 0x605)) + ((!v13 | (32 * !v13)) ^ v2) - 1))();
}

uint64_t sub_19E6E0A3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,int a30,uint64_t a31,uint64_t a32,uint64_t a33,unsigned int a34)
{
  if (v34 < a34 != a30 - 1232884526 < ((v36 + a8 + 1212) | 0x280u) - 44966620) {
    BOOL v37 = a30 - 1232884526 < ((v36 + a8 + 1212) | 0x280u) - 44966620;
  }
  else {
    BOOL v37 = a30 - 1232884526 > v34;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v35 + 8 * ((v37 * (v36 + a8 + 832)) ^ (v36 + a8 + 1343))))(a1, 1555);
}

uint64_t sub_19E6E0A48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  unint64_t v23 = STACK[0x270] + 2048;
  LODWORD(STACK[0x518]) = 2;
  STACK[0x5A8] = 0;
  LODWORD(STACK[0x584]) = 0;
  LODWORD(STACK[0x544]) = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a8 + 8 * ((224 * ((v22 & 2) == ((v21 - 772291710) & 0x2E083B3E ^ 0x22C))) ^ v21)))(a1, a2, a3, a4, a5, v23, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21);
}

uint64_t sub_19E6E0ABC@<X0>(uint64_t a1@<X1>, uint64_t a2@<X3>, int a3@<W8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned char *a10)
{
  unint64_t v11 = (unsigned char *)STACK[0x5D8];
  a10[12] = (a3 + 79) & 0xDC ^ 0x99;
  a10[13] = -63;
  a10[14] = v10 ^ 0xEB;
  a10[15] = -64;
  v11[16] ^= *a10 ^ 0xC1;
  v11[17] ^= a10[1] ^ 0xC1;
  v11[18] ^= a10[2] ^ 0xC1;
  v11[19] ^= a10[3] ^ 0xC1;
  v11[20] ^= a10[4] ^ 0xC1;
  v11[21] ^= a10[5] ^ 0xC1;
  v11[22] ^= a10[6] ^ 0xC1;
  v11[23] ^= a10[7] ^ 0xC1;
  v11[24] ^= a10[8] ^ 0xC1;
  v11[25] ^= a10[9] ^ 0xC1;
  v11[26] ^= a10[10] ^ 0xC1;
  v11[27] ^= a10[11] ^ 0xC1;
  v11[28] ^= a10[12] ^ 0xC1;
  v11[29] ^= a10[13] ^ 0xC1;
  v11[30] ^= a10[14] ^ 0xC1;
  v11[31] ^= a10[15] ^ 0xC1;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a2 + 8 * ((a3 + 1714) ^ 0x39)))(2325, a1, 732);
}

void sub_19E6E0CE0(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  int v1 = *(_DWORD *)(a1 + 12) - 511487701 * ((-2 - ((~a1 | 0xD52738A8) + (a1 | 0x2AD8C757))) ^ 0xCD4E4C60);
  unsigned int v2 = 1001500783 * (((&v5 | 0x9D73CBAD) - (&v5 & 0x9D73CBAD)) ^ 0xD7C73419);
  unsigned int v6 = &STACK[0x542A6DEB665DBAEE];
  unsigned int v7 = v2 ^ 0xAFF7E931;
  int v5 = v1 + v2 - 167302515;
  uint64_t v3 = (char *)*(&off_1EF0E5660 + (v1 ^ 0x5D)) - 8;
  (*(void (**)(int *))&v3[8 * (v1 ^ 0x929)])(&v5);
  __asm { BRAA            X13, X17 }
}

uint64_t sub_19E6E1028@<X0>(uint64_t a1@<X7>, unint64_t a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  STACK[0x570] = a2;
  *a9 = 0x3E3E3E3E3E3E3E3ELL;
  a9[1] = 0xC1C1C1C1C7C1C1D3;
  int v12 = 291962093 * (v10 ^ 0x11F20D4A);
  *(_DWORD *)(v11 - 244) = v9 - v12 + 665983264;
  *(_DWORD *)(v11 - 240) = v12 ^ 0x53AD5724;
  (*(void (**)(uint64_t))(a1 + 8 * (v9 ^ 0xCB1)))(v11 - 248);
  LODWORD(STACK[0x48C]) = 2072727514;
  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(STACK[0x460] + 8 * (v9 + 741)))(336, 1925803308);
  unint64_t v14 = STACK[0x460];
  STACK[0x5D8] = v13;
  return (*(uint64_t (**)(void))(v14
                              + 8
                              * (((v13 == 0) * ((((v9 - 277411545) & 0x1088F32C) - 218) ^ (v9 - 1208670809) & 0x480AD5E0)) ^ v9)))();
}

uint64_t sub_19E6E1120(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11 = (v8 - 872) | 0x102;
  uint64_t v12 = 4 * (((v11 - 306) | 0x401) ^ 0x49Eu) - 556;
  int v13 = *(unsigned __int8 *)(STACK[0x560] + v12);
  unsigned int v14 = v13 ^ 0xDF73CABA;
  int v15 = (2 * v13) & 0x174;
  unsigned int v16 = *(unsigned __int8 *)(*(void *)(v9 + v10 * (uint64_t)a3 + 24) - 0x26B69BB7D50E1DF3 + v12);
  if (v16 >= 7) {
    int v17 = 0;
  }
  else {
    int v17 = -256;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(a8 + 8 * ((208 * (v14 - v16 + v15 + v17 == -546059597)) ^ v11)))(1570216885, 2724750410);
}

uint64_t sub_19E6E1204@<X0>(char a1@<W1>, int a2@<W2>, int a3@<W3>, int a4@<W4>, uint64_t a5@<X7>, uint64_t a6@<X8>)
{
  int v8 = v7 ^ 0x6C6;
  uint64_t v9 = (unsigned char *)STACK[0x538];
  unsigned int v10 = *(_DWORD *)(a6 - 0x542A6DEB665DB91ELL);
  *uint64_t v9 = v10 ^ 0xF1;
  v9[1] = (v10 >> ((v8 ^ a1) - 36)) ^ 0x8D;
  id v9[2] = BYTE2(v10) ^ 0xB7;
  void v9[3] = HIBYTE(v10) ^ 0x2C;
  unsigned int v11 = *v6 + a3;
  BOOL v12 = v11 < 0xBE7ADCCF;
  BOOL v13 = a2 + 1866839755 < v11;
  if ((a2 + 1866839755) < 0xBE7ADCCF != v12) {
    BOOL v13 = v12;
  }
  return (*(uint64_t (**)(void))(a5 + 8 * ((v13 * a4) ^ v8)))();
}

uint64_t sub_19E6E12D0@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X3>, int a4@<W4>, int a5@<W5>, int a6@<W6>, int a7@<W7>, int a8@<W8>)
{
  int v17 = (unsigned int *)(v15 + 4 * (v9 + v10));
  unsigned int v18 = v17[1];
  int v19 = ((v12 | (2 * (v18 & 0x7FFFFFFE ^ 0x5A2872D0))) - (v18 & 0x7FFFFFFE ^ 0x5A2872D0) + v13) ^ v14;
  unsigned int v20 = (((a4 & (2 * v19)) - v19 + a5) | (v8 & 0x80000000 | 0x18B2941A) ^ a6) ^ a7;
  *int v17 = v17[397] ^ *(_DWORD *)(a1 + 4 * ((v18 & 1) == 0)) ^ ((v20 + v16 + (~(2 * v20) | 0x97A76CDF)) >> 1) ^ a2;
  BOOL v21 = ((489 * (a8 ^ 0x78Au)) ^ 0x3D3) + v9 == v11 + 3;
  return (*(uint64_t (**)(void))(a3 + 8 * (((8 * v21) | (32 * v21)) ^ a8)))();
}

uint64_t sub_19E6E1398(int8x16_t a1, int8x16_t a2, double a3, double a4, double a5, double a6, int8x16_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12, unsigned int a13, unsigned int a14, unsigned int a15)
{
  a2.i64[0] = *(void *)(v17 + 4);
  a2.i32[2] = *(_DWORD *)(v17 + 12);
  int8x16_t v22 = vextq_s8(a1, a2, 0xCuLL);
  int8x16_t v23 = a2;
  v23.i32[3] = *(_DWORD *)(v17 + 16);
  int8x16_t v24 = (int8x16_t)vaddq_s32((int32x4_t)veorq_s8(vandq_s8(v22, a7), (int8x16_t)vdupq_n_s32(0xD6136882)), vdupq_n_s32(0x7E8F6480u));
  int8x16_t v25 = (int8x16_t)vdupq_n_s32(0x40D669AAu);
  int32x4_t v26 = (int32x4_t)veorq_s8(vandq_s8(v23, v21), (int8x16_t)vdupq_n_s32(0x7675CA50u));
  int8x16_t v27 = (int8x16_t)vsubq_s32(vaddq_s32(v26, (int32x4_t)veorq_s8(vandq_s8(v23, v25), (int8x16_t)vdupq_n_s32(0x808221AA))), (int32x4_t)vandq_s8((int8x16_t)v26, v25));
  int8x16_t v28 = (int8x16_t)vdupq_n_s32(a14);
  int32x4_t v29 = (int32x4_t)veorq_s8(v27, (int8x16_t)vdupq_n_s32(0x4AD76BFAu));
  int32x4_t v30 = (int32x4_t)veorq_s8(vorrq_s8((int8x16_t)vsubq_s32(vaddq_s32((int32x4_t)veorq_s8(vandq_s8(v27, v28), (int8x16_t)vdupq_n_s32(a15)), v29), (int32x4_t)vandq_s8((int8x16_t)v29, v28)), veorq_s8(v24, (int8x16_t)vdupq_n_s32(v18))), (int8x16_t)vdupq_n_s32(v19));
  v29.i32[0] = *((_DWORD *)&STACK[0x6A8] + (*(unsigned int *)(v17 + 4) & ((v15 - 601711601) & 0x23DD647D ^ a12) ^ 1));
  v29.i32[1] = *((_DWORD *)&STACK[0x6A8] + ((*(_DWORD *)(v17 + 8) & 1) == 0));
  v29.i32[2] = *((_DWORD *)&STACK[0x6A8] + (~*(_DWORD *)(v17 + 12) & 1));
  v29.i32[3] = *((_DWORD *)&STACK[0x6A8] + ((v23.i8[12] & 1) == 0));
  *(int8x16_t *)uint64_t v17 = veorq_s8(veorq_s8(veorq_s8(*(int8x16_t *)(v17 - 908), (int8x16_t)v29), (int8x16_t)vdupq_n_s32(a13)), (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vsubq_s32(v30, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v30, v30), (int8x16_t)vdupq_n_s32(v20))), vdupq_n_s32(0xCEA23D4E)), 1uLL));
  return (*(uint64_t (**)(void))(a11 + 8 * ((2 * (v16 != 4)) | (16 * (v16 != 4)) | v15)))();
}

uint64_t sub_19E6E13A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(_DWORD *)(v10 - 244) = (v8 - 2021031471) ^ (961177747
                                              * ((1620536227 - (v9 | 0x60976BA3) + (v9 | 0x9F68945C)) ^ 0xB83A6540));
  (*(void (**)(uint64_t))(a8 + 8 * (v8 + 868)))(v10 - 248);
  uint64_t v11 = *(uint64_t (**)(_UNKNOWN **))(STACK[0x460]
                                              + 8
                                              * ((((*(uint64_t (**)(uint64_t, uint64_t))(STACK[0x460]
                                                                                               + 8 * (v8 + 740)))(336, 1777295586) == 0)* (19 * (((v8 - 1145) | 0x214) ^ 0x33D) + 2124)) ^ v8));
  return v11(&off_1EF0E5660);
}

uint64_t sub_19E6E14C8@<X0>(int a1@<W4>, uint64_t a2@<X5>, int a3@<W8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,int a39,char a40)
{
  int v43 = (v40 - 503013474) & 0x1DFB5FBF;
  *(&a40 + a3 + v41 + (v43 ^ 0x3ECu) + 418) = *(unsigned char *)(a2 + a27 - 1187920008)
                                            - ((2 * *(unsigned char *)(a2 + a27 - 1187920008)) & 0x83)
                                            - 63;
  return (*(uint64_t (**)(void))(v42 + 8 * ((2018 * ((a1 + v41 + 1) < 0x40)) ^ v43)))();
}

uint64_t sub_19E6E31B0@<X0>(uint64_t a1@<X7>, int a2@<W8>)
{
  LODWORD(STACK[0x600]) = a2;
  return (*(uint64_t (**)(void))(a1 + 8 * (((STACK[0x3A8] == 0) * ((v2 ^ 0x333) - 280)) | (v2 + 1604))))();
}

uint64_t sub_19E6E31BC()
{
  int v4 = (*(uint64_t (**)(uint64_t))(v3 + 8 * (v2 ^ 0xC5B)))(v1);
  int v5 = (v4 ^ 0x3B47D3FF) - 4637122 + ((v4 << (v2 ^ 0x11)) & 0x768FA7FE);
  if (v5 == 989925965) {
    int v6 = -42029;
  }
  else {
    int v6 = -42030;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(v3 + 8 * (v2 ^ 0xDF9)))(v1);
  if (v5 == 989925949) {
    int v8 = 0;
  }
  else {
    int v8 = v6;
  }
  *(_DWORD *)(v0 + 12) = v8;
  return result;
}

uint64_t sub_19E6E3258@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(void))(v2 + 8 * ((171 * (a2 + 1 == v3 + 64)) ^ a1)))();
}

uint64_t sub_19E6E33A8(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,int a44,char a45)
{
  BOOL v49 = (unint64_t)(&a45 + ~a29 + v47 + v46 + ((43 * (a1 ^ 0x1F9)) ^ v45)) < 0x10;
  return (*(uint64_t (**)(void))(v48 + 8 * ((v49 | (16 * v49)) ^ a1)))();
}

uint64_t sub_19E6E33F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,int a63)
{
  BOOL v67 = v65 != v63 + 1130953835
     || ((a63 == ((v63 + 1199) ^ 0x129C3DD3)) | (2 * (a63 == ((v63 + 1199) ^ 0x129C3DD3)))) == 0;
  return (*(uint64_t (**)(void))(v64 + 8 * ((84 * v67) ^ v63)))();
}

uint64_t sub_19E6E3454(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  (*(void (**)(void))(a8 + 8 * (v8 + 1725)))();
  return (*(uint64_t (**)(void))(STACK[0x460] + 8 * ((30 * (STACK[0x590] != 0)) ^ (v8 - 254))))();
}

uint64_t sub_19E6E3494@<X0>(uint64_t result@<X0>, int a2@<W8>)
{
  if (((((v4 - 323) | 0x227) ^ 0xC039u) + v2) >> 1 < 0xF9F) {
    int v3 = a2;
  }
  *(_DWORD *)(*(void *)(result + 8) - 0x56A724B613D7010DLL) = v3;
  return result;
}

uint64_t sub_19E6E34BC(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 8 * ((961 * ((a2 + 1 + v9) > 0x3B)) ^ v8)))();
}

uint64_t sub_19E6E3684(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v13 = v8 - 826553515;
  unsigned int v14 = 1305237457 * ((-2097054 - (v11 | 0xFFE00062) + (v11 | 0x1FFF9D)) ^ 0xB9A65953);
  *(_DWORD *)(v12 - 248) = v13 ^ v14;
  *(void *)(v12 - 240) = v10;
  *(_DWORD *)(v12 - 232) = v14 + (v9 ^ 0x270) + 57;
  uint64_t v15 = (*(uint64_t (**)(uint64_t))(a8 + 8 * ((v9 ^ 0x270) + 1829)))(v12 - 248);
  return ((uint64_t (*)(uint64_t))STACK[0x4C0])(v15);
}

uint64_t sub_19E6E3690@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(void))(v3
                              + 8
                              * (int)(((v4 + ((v2 - 201722535) & 0xDC5673B4) + 55)
                                     * ((-337318690 - a1 - v1 + 862) < 7)) ^ v2)))();
}

uint64_t sub_19E6E36E4(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  STACK[0x690] = v13;
  STACK[0x698] = v9;
  unint64_t v14 = STACK[0x578];
  uint64_t v15 = (char *)&a9 + STACK[0x578] - 0x5C811742B282DAA0;
  STACK[0x6A0] = (unint64_t)v15;
  STACK[0x578] = v14 + 320;
  int v16 = *(_DWORD *)(v13 - 0x542A6DEB665DB91ELL);
  LODWORD(STACK[0x5B8]) = v16;
  int v17 = *(_DWORD *)(v13 - 0x542A6DEB665DB91ALL);
  LODWORD(STACK[0x55C]) = v17;
  int v18 = *(_DWORD *)(v13 - 0x542A6DEB665DB916);
  LODWORD(STACK[0x504]) = v18;
  int v19 = *(_DWORD *)(v13 - 0x542A6DEB665DB912);
  LODWORD(STACK[0x614]) = v19;
  int v20 = *(unsigned __int8 *)(v13 - 0x542A6DEB665DB906) ^ v10;
  if (v20 == 113)
  {
    LODWORD(STACK[0x474]) = *(_DWORD *)(v13 - 0x542A6DEB665DB90ELL);
    LODWORD(STACK[0x4F0]) = 923003689;
    return (*(uint64_t (**)(uint64_t))(a8
                                              + 8
                                              * (((137 * (((a4 + 471) | 0xD0) ^ 0x4DAu) - 1233 < 0x40)
                                                * ((((a4 + 471) | 0xD0) - 1132) ^ 0xCD6)) ^ ((a4 + 471) | 0xD0))))(1208044505);
  }
  else if (v20 == 114)
  {
    LODWORD(STACK[0x4F0]) = v12;
    BOOL v22 = v9 < STACK[0x200] + v14 && (unint64_t)v15 < v9 + 64;
    return (*(uint64_t (**)(void))(a8
                                + 8
                                * ((((((a4 + 126) ^ v22) & 1) == 0) * (LODWORD(STACK[0x3B4]) - 676)) ^ (a4 + 1551))))();
  }
  else
  {
    int v24 = (*(_DWORD *)(v13 - 0x542A6DEB665DB91ELL) ^ v11) + (v16 ^ v11);
    *(_DWORD *)(v13 - 0x542A6DEB665DB91ELL) = v24 + v11 - (a6 & (2 * v24));
    int v25 = (*(_DWORD *)(v13 - 0x542A6DEB665DB91ALL) ^ v11) + (v17 ^ v11);
    *(_DWORD *)(v13 - 0x542A6DEB665DB91ALL) = v25 + v11 - (a6 & (2 * v25));
    int v26 = (*(_DWORD *)(v13 - 0x542A6DEB665DB916) ^ v11) + (v18 ^ v11);
    *(_DWORD *)(v13 - 0x542A6DEB665DB916) = v26 + v11 - (a6 & (2 * v26));
    int v27 = (*(_DWORD *)(v13 - 0x542A6DEB665DB912) ^ v11) + (v19 ^ v11);
    *(_DWORD *)(v13 - 0x542A6DEB665DB912) = v27 + v11 - (a6 & (2 * v27));
    STACK[0x578] = v14;
    return ((uint64_t (*)(void))STACK[0x478])();
  }
}

uint64_t sub_19E6E3A10()
{
  return (*(uint64_t (**)(void))(v0
                              + 8
                              * (int)((((STACK[0x458] ^ 0x52C) - 1763) * (v1 < 0xD186013D)) ^ (STACK[0x458] + 1236))))();
}

uint64_t sub_19E6E3A50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 8 * ((248 * (STACK[0x548] != 0)) ^ (v8 - 433))))();
}

uint64_t sub_19E716988(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8
                              + 8 * ((((454 * (v8 ^ 0x22E)) ^ 0x388) * (LODWORD(STACK[0x51C]) == v9)) ^ v8 ^ 0x2DE)))();
}

uint64_t sub_19E7169CC(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8
                              + 8
                              * (int)(((((v9 - 2029747728) ^ 0x87048143) + ((v9 - 2029747728) & 0x78FB7EBC) - 922)
                                     * (v8 != a1)) ^ v9)))();
}

uint64_t sub_19E716A14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = v3 + 552;
  *(_DWORD *)uint64_t v4 = 2087749635;
  (*(void (**)(unint64_t))(a3 + 8 * (v3 + 2277)))(STACK[0x428]);
  unint64_t v6 = STACK[0x460];
  int v7 = (v5 + 1546) | 9;
  int8x16_t v8 = (int8x16_t)vld1q_dup_f32((const float *)v4);
  v9.i64[0] = 0x8000000080000000;
  v9.i64[1] = 0x8000000080000000;
  v10.i64[0] = *(void *)(v4 + 4);
  v10.i32[2] = *(_DWORD *)(v4 + 12);
  int8x16_t v11 = vextq_s8(v8, v10, 0xCuLL);
  int8x16_t v12 = v10;
  v12.i32[3] = *(_DWORD *)(v4 + 16);
  int8x16_t v13 = vorrq_s8(vandq_s8(v11, v9), *(int8x16_t *)&STACK[0x2F0]);
  int32x4_t v14 = (int32x4_t)veorq_s8(vandq_s8(v12, *(int8x16_t *)&STACK[0x2E0]), *(int8x16_t *)&STACK[0x2D0]);
  int32x4_t v15 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vsubq_s32((int32x4_t)vorrq_s8((int8x16_t)vaddq_s32(v14, v14), *(int8x16_t *)&STACK[0x380]), v14), *(int32x4_t *)&STACK[0x370]), *(int8x16_t *)&STACK[0x360]);
  int32x4_t v16 = (int32x4_t)veorq_s8(vorrq_s8((int8x16_t)vaddq_s32(vsubq_s32((int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v15, v15), *(int8x16_t *)&STACK[0x350]), v15), *(int32x4_t *)&STACK[0x340]), veorq_s8(v13, *(int8x16_t *)&STACK[0x330])), *(int8x16_t *)&STACK[0x320]);
  v17.i32[0] = *((_DWORD *)&STACK[0x6A8] + (~*(_DWORD *)(v4 + 4) & 1));
  v17.i32[1] = *((_DWORD *)&STACK[0x6A8] + ((*(_DWORD *)(v4 + 8) & 1) == 0));
  v17.i32[2] = *((_DWORD *)&STACK[0x6A8] + ((*(_DWORD *)(v4 + 12) & 1) == 0));
  v17.i32[3] = *((_DWORD *)&STACK[0x6A8] + (~v12.i32[3] & 1));
  *(int8x16_t *)uint64_t v4 = veorq_s8(veorq_s8(veorq_s8(*(int8x16_t *)(v4 + 4 * (v7 ^ 0xFB7u) - 6124), v17), (int8x16_t)vdupq_n_s32(0x34B927D3u)), (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vaddq_s32(v16, vdupq_n_s32(0xB42C4991)), (int32x4_t)vmvnq_s8(vandq_s8((int8x16_t)vaddq_s32(v16, v16), *(int8x16_t *)&STACK[0x390]))), 1uLL));
  return (*(uint64_t (**)(void))(v6 + 8 * (v7 ^ 0x43)))();
}

uint64_t sub_19E716C00(int a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  BOOL v12 = v9 < a5;
  if (v12 == v10 + v11 < a5) {
    BOOL v12 = v10 + v11 < v9;
  }
  return (*(uint64_t (**)(void))(a8 + 8 * ((!v12 * a1) ^ v8)))();
}

uint64_t sub_19E71DE04@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(_DWORD *)(*(void *)(a2 + 96) + 24) = v3;
  unsigned int v4 = *(_DWORD *)(a1 + 4)
     + 1043006904
     + ((2 * ((*(_DWORD *)(a1 + 4) + 74756470) & 0x39B65443 ^ *(_DWORD *)(a1 + 4) & 2)) ^ 0xFFFFFFFB);
  return (*(uint64_t (**)(void))(v2
                                           + 8
                                           * ((947
                                             * (((2 * v4) & 0xD7FFBDFA ^ 0x536CA882) + (v4 ^ 0x52498ABC) + 1463774559 == 1128221788)) ^ 0x5FCu)))(0);
}

uint64_t sub_19E71DEAC@<X0>(int a1@<W1>, int a2@<W8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,int a38,char a39)
{
  *(&a39 + (a2 + a1)) = -63;
  return (*(uint64_t (**)(void))(v40 + 8 * ((1768 * ((a1 + a2 + 1) < 0x38)) ^ (v39 + v41))))();
}

uint64_t sub_19E71DEEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, int a6@<W8>, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,unsigned int a40)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))(v41
                                                                                                 + 8
                                                                                                 * (((v40 + a6 - 530 == 694818316) * ((a6 - 1175) ^ 0x4E2)) | (a6 - 530))))(a1, a2, a3, a39, a4, a5, a40);
}

uint64_t sub_19E71DF10(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(uint64_t, void))(a8 + 8 * ((15 * ((a3 + 1 + v10) > 0x27)) ^ v9)))(v8, (v11 + 40));
}

uint64_t sub_19E71E060(uint64_t a1, unsigned int a2, int a3, unsigned int a4)
{
  BOOL v13 = a2 < v9;
  unint64_t v14 = (a4 | ((unint64_t)(a4 < v10) << 32)) + 0x41330E85869CD510 + ((2 * (v5 ^ 0x59C)) ^ 0xBECCF17A43F2C4CDLL);
  *(unsigned char *)(*(void *)(v12 - 120) + v14) = *(unsigned char *)(v7 + (v14 & 0xF)) ^ *(unsigned char *)(v4 + v14) ^ *(unsigned char *)(v6 + (v14 & 0xF)) ^ *(unsigned char *)(v8 + (v14 & 0xF)) ^ (97 * (v14 & 0xF));
  if (v13 == a4 + 260609564 < v9) {
    BOOL v13 = a4 + 260609564 < a2;
  }
  return (*(uint64_t (**)(void))(v11 + 8 * ((!v13 * a3) ^ v5)))();
}

uint64_t sub_19E71E224@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 8 * (v2 ^ 0x5E8)))(a1, 2667958270);
}

uint64_t sub_19E71E2A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,int64x2_t a55,int64x2_t a56,int64x2_t a57,int64x2_t a58,int64x2_t a59,int64x2_t a60,int64x2_t a61,int64x2_t a62)
{
  *(void *)(a46 + 1560) = *(void *)STACK[0x550];
  *(_DWORD *)(a46 + 1552) = *(_DWORD *)STACK[0x568];
  unint64_t v63 = STACK[0x428];
  *(void *)(*(void *)(STACK[0x428] + 96) + 488) = *(void *)(STACK[0x428] + 8);
  *(_DWORD *)(*(void *)(v63 + 96) + 480) = *(_DWORD *)v63;
  int64x2_t v64 = vdupq_n_s64(0xA9F88B1C70493DAFLL);
  int8x16_t v65 = (int8x16_t)vdupq_n_s64(0xBAuLL);
  int64x2_t v66 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(a59, v64), v65);
  int64x2_t v67 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(a60, v64), v65);
  int64x2_t v68 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(a61, v64), v65);
  int64x2_t v69 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(a62, v64), v65);
  int64x2_t v70 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(a56, v64), v65);
  int64x2_t v71 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(a55, v64), v65);
  int64x2_t v72 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(a57, v64), v65);
  int64x2_t v73 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(a58, v64), v65);
  int8x16_t v74 = (int8x16_t)vdupq_n_s64(0x391932801C96C1E4uLL);
  int64x2_t v75 = vsubq_s64(v72, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v72, v72), v74));
  int64x2_t v76 = vdupq_n_s64(0x1C8C99400E4B60F2uLL);
  int8x16_t v77 = (int8x16_t)vaddq_s64(vsubq_s64(v67, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v67, v67), v74)), v76);
  int8x16_t v78 = (int8x16_t)vaddq_s64(vsubq_s64(v69, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v69, v69), v74)), v76);
  int64x2_t v79 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(vsubq_s64(v73, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v73, v73), v74)), v76), (int8x16_t)v76);
  int64x2_t v80 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(v75, v76), (int8x16_t)v76);
  int64x2_t v81 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(vsubq_s64(v71, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v71, v71), v74)), v76), (int8x16_t)v76);
  int64x2_t v82 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(vsubq_s64(v70, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v70, v70), v74)), v76), (int8x16_t)v76);
  int8x16_t v83 = veorq_s8(v78, (int8x16_t)v76);
  int8x16_t v84 = veorq_s8((int8x16_t)vaddq_s64(vsubq_s64(v68, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v68, v68), v74)), v76), (int8x16_t)v76);
  int64x2_t v85 = (int64x2_t)veorq_s8(v77, (int8x16_t)v76);
  int64x2_t v86 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(vsubq_s64(v66, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v66, v66), v74)), v76), (int8x16_t)v76);
  int64x2_t v87 = vdupq_n_s64(0xA9F88B1C70493DC0);
  int64x2_t v88 = vaddq_s64(a59, v87);
  v86.i64[0] *= v88.i64[0];
  v86.i64[1] *= v88.i64[1];
  int64x2_t v89 = vaddq_s64(a60, v87);
  v85.i64[0] *= v89.i64[0];
  v85.i64[1] *= v89.i64[1];
  int64x2_t v90 = vaddq_s64(a61, v87);
  v90.i64[0] *= v84.i64[0];
  v90.i64[1] *= v84.i64[1];
  int64x2_t v91 = vaddq_s64(a62, v87);
  v91.i64[0] *= v83.i64[0];
  v91.i64[1] *= v83.i64[1];
  int64x2_t v92 = vaddq_s64(a56, v87);
  v82.i64[0] *= v92.i64[0];
  v82.i64[1] *= v92.i64[1];
  int64x2_t v93 = vaddq_s64(a55, v87);
  v81.i64[0] *= v93.i64[0];
  v81.i64[1] *= v93.i64[1];
  int64x2_t v94 = vaddq_s64(a57, v87);
  v80.i64[0] *= v94.i64[0];
  v80.i64[1] *= v94.i64[1];
  int64x2_t v95 = vaddq_s64(a58, v87);
  v79.i64[0] *= v95.i64[0];
  v79.i64[1] *= v95.i64[1];
  int8x16_t v96 = (int8x16_t)vdupq_n_s64(0x24uLL);
  int64x2_t v97 = vdupq_n_s64(0xCEuLL);
  v100.val[0] = (int8x16_t)vaddq_s64(vsubq_s64(v86, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v86, v86), v96)), v97);
  v100.val[1] = (int8x16_t)vaddq_s64(vsubq_s64(v85, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v85, v85), v96)), v97);
  v100.val[2] = (int8x16_t)vaddq_s64(vsubq_s64(v90, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v90, v90), v96)), v97);
  v100.val[3] = (int8x16_t)vaddq_s64(vsubq_s64(v91, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v91, v91), v96)), v97);
  v99.val[1] = (int8x16_t)vaddq_s64(vsubq_s64(v82, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v82, v82), v96)), v97);
  v99.val[0] = (int8x16_t)vaddq_s64(vsubq_s64(v81, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v81, v81), v96)), v97);
  v99.val[2] = (int8x16_t)vaddq_s64(vsubq_s64(v80, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v80, v80), v96)), v97);
  v99.val[3] = (int8x16_t)vaddq_s64(vsubq_s64(v79, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v79, v79), v96)), v97);
  v99.val[0].i64[0] = vqtbl4q_s8(v99, (int8x16_t)xmmword_19EC3AB00).u64[0];
  v99.val[0].i64[1] = vqtbl4q_s8(v100, (int8x16_t)xmmword_19EC3AB00).u64[0];
  v99.val[1].i64[0] = 0xC4C4C4C4C4C4C4C4;
  v99.val[1].i64[1] = 0xC4C4C4C4C4C4C4C4;
  v99.val[0] = vaddq_s8(v99.val[0], v99.val[1]);
  v99.val[1].i64[0] = 0x9292929292929292;
  v99.val[1].i64[1] = 0x9292929292929292;
  v99.val[0] = vrev64q_s8(veorq_s8(v99.val[0], v99.val[1]));
  *(int8x16_t *)(STACK[0x428] + 88) = vextq_s8(v99.val[0], v99.val[0], 8uLL);
  return (*(uint64_t (**)(uint64_t))(a8 + 472 * (v62 ^ 0x221)))(186);
}

uint64_t sub_19E71E65C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8
                              + 8
                              * (int)((((LODWORD(STACK[0x4CC]) | ((unint64_t)(LODWORD(STACK[0x4CC]) < 0x7B8B4E8A) << 32)) != 2072727178)
                                     * (((v8 + 1417358232) & 0xAB84D3FE) - 938)) | v8)))();
}

uint64_t sub_19E71E6CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,int a30,int a31,uint64_t a32)
{
  *(_DWORD *)(STACK[0x2A8] + 360) = 559203755;
  uint64_t v39 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, unint64_t, void, uint64_t, unint64_t *, unint64_t *))(a8 + 8 * (v32 ^ 0xB0Eu)))(v36, 2, &STACK[0x518], STACK[0x628], (v35 - 2072727178), a6, &STACK[0x5A8], &STACK[0x584]);
  int v43 = ((2 * v39) & 0x7FFEFD5E) + (v39 ^ 0x3FFF7EAF);
  unint64_t v44 = STACK[0x458];
  if (v43 == 1342144178)
  {
    LODWORD(STACK[0x51C]) = -694859293;
    int v52 = v44;
    unint64_t v53 = STACK[0x460];
  }
  else
  {
    if (v43 == 1073708719)
    {
      STACK[0x3C8] = STACK[0x5A8];
      LODWORD(STACK[0x3B8]) = STACK[0x584];
      unint64_t v45 = STACK[0x460];
      STACK[0x280] = v34 + 2304;
      uint64_t v46 = (v44 + 143);
      LODWORD(STACK[0x4E0]) = 707431407;
      int v47 = (char *)&STACK[0x6D0] + v37 - 0x5C811742B282D7F0;
      STACK[0x3C0] = v37 + 4144;
      STACK[0x578] = v37 + 4144;
      *(void *)int v47 = 0x6370646600;
      v47[8] = 1;
      STACK[0x400] = (unint64_t)&STACK[0x6D0] + v37 - 0x5C811742B282D7E7;
      STACK[0x208] = (unint64_t)v47;
      unint64_t v48 = (unint64_t)&STACK[0x6D0] + v37 - 0x5C811742B282D140;
      uint64_t v49 = (v46 - 667) & (32 * v48 + 16 * ~v48);
      STACK[0x428] = STACK[0x588];
      STACK[0x3F0] = (v49 ^ 0xCD0F3D9E4ECF5DFFLL) + 2 * v49 + v48 + 0x32F0C261B130A211;
      LODWORD(STACK[0x410]) = 257969323;
      int32x4_t v50 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, unint64_t *, unint64_t *, unint64_t *, unint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v45 + 8 * (int)((119 * (((v44 - 957538928) & 0x3912E26F) + ((v44 + 1217) ^ 0x32A6C619) == 849789728)) ^ v46));
      STACK[0x438] = (unint64_t)*(&off_1EF0E5660 + (int)(v46 ^ 0x2D0)) - 4;
      STACK[0x430] = (unint64_t)*(&off_1EF0E5660 + (int)(v46 ^ 0x2B0));
      return v50(v39, v40, v41, 2222238069, 80, 97, 179, v45, &STACK[0x604], &STACK[0x558], &STACK[0x4F8], &STACK[0x544], a13, a14, a15, a16, a17, a18, a19,
               a20,
               a21,
               a22,
               a23,
               a24,
               a25,
               a26,
               a27,
               v34 + 2176,
               a29);
    }
    unsigned int v54 = 511487701 * (((v33 | 0x860E17FB) + (~v33 | 0x79F1E804)) ^ 0x9E676332);
    *(_DWORD *)(v38 - 248) = v44 - v54 + 331;
    *(_DWORD *)(v38 - 232) = v54 + v43 - ((2 * v43 + 66210) & 0x52D425B6) - 378891220;
    *(void *)(v38 - 240) = a32;
    unint64_t v55 = STACK[0x460];
    uint64_t v39 = (*(uint64_t (**)(uint64_t))(STACK[0x460] + 8 * a31))(v38 - 248);
    unint64_t v53 = v55;
    int v52 = v44;
  }
  return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v53
                                                                                + 8
                                                                                * (((((v52 ^ (STACK[0x5A8] == 0)) & 1) == 0)
                                                                                  * (23 * (v52 ^ 0x233) - 651)) ^ (v52 + 1002))))(v39, STACK[0x5A8], v41, v42);
}

uint64_t sub_19E71EB20@<X0>(uint64_t a1@<X7>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  uint64_t v6 = (v4 - 17);
  *(__n128 *)(v5 + (((v6 ^ 0x961) + 4294965179) & (a2 + 3712882705))) = a3;
  return (*(uint64_t (**)(void))(a1 + 8 * (int)((19 * (((v6 ^ 0x1FFFFFED5) & v3) != 16)) ^ v6)))();
}

uint64_t sub_19E71EB88@<X0>(uint64_t a1@<X0>, unsigned int a2@<W8>)
{
  int v8 = v7 + v6;
  *(unsigned char *)(*(void *)(a1 + 96)
           + 1168
           + ((v8 + v5) | ((unint64_t)(v8 + v5 < 89 * (a2 ^ 0x53B) + v4) << 32))
           - 1654301606) = *(unsigned char *)(v3
                                    + 1
                                    + ((v8 + v5) | ((unint64_t)(v8 + v5 < 89 * (a2 ^ 0x53B) + v4) << 32))
                                    - 1654301606);
  return (*(uint64_t (**)(void))(v2 + 8 * ((633 * (v8 == 1671095296)) ^ a2)))();
}

uint64_t sub_19E71EC00@<X0>(int a1@<W1>, uint64_t a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,int a38,char a39)
{
  *(void *)&long long v43 = 0xC1C1C1C1C1C1C1C1;
  *((void *)&v43 + 1) = 0xC1C1C1C1C1C1C1C1;
  *(_OWORD *)(&a39 + (v39 + a1)) = v43;
  return (*(uint64_t (**)(void))(v41
                              + 8
                              * ((483 * (((v42 + v40 - 158) | 0x482u) - 1166 == (a2 & 0x1FFFFFFF0))) ^ (v42 + v40 + 569))))();
}

uint64_t sub_19E71EC58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  STACK[0x5E8] = v9;
  return (*(uint64_t (**)(void))(a8 + 8 * ((115 * (STACK[0x5A0] == 0)) ^ ((v8 ^ 0x211) + 1664))))();
}

void sub_19E723278()
{
  LODWORD(STACK[0x670]) = v0;
  JUMPOUT(0x19E6DF78CLL);
}

void sub_19E723298()
{
}

uint64_t sub_19E7232A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t *a12, uint64_t a13, unsigned int a14, int a15, int a16, unsigned int a17)
{
  unsigned int v20 = 1575213817
      * (((&a12 | 0xE9598F4E) - &a12 + (&a12 & 0x16A670B0)) ^ 0x643C3F82);
  a17 = 754756827 - v20;
  a16 = (v19 - 871892415) ^ v20;
  a14 = -1853230653 - v20;
  a12 = &STACK[0x698EDBACE60CACB4];
  a13 = a10;
  uint64_t v21 = (*(uint64_t (**)(unint64_t **))(v18 + 8 * (v19 ^ 0xA5C)))(&a12);
  return (*(uint64_t (**)(uint64_t))(v18
                                            + 8
                                            * ((1910 * (a15 == v17 + ((v19 + 986455970) & 0xC533DF76) - 598)) ^ v19)))(v21);
}

uint64_t sub_19E72338C()
{
  return (*(uint64_t (**)(void))(v4
                                           + 8
                                           * ((((((v3 - 1450) ^ 0x356) & v0) == 0) * ((v3 - 691) ^ 0xD94)) ^ (v3 - 1450))))((v1 - v2));
}

uint64_t sub_19E7233CC(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8 = STACK[0x5C8];
  unint64_t v9 = (LODWORD(STACK[0x634]) | ((unint64_t)(LODWORD(STACK[0x634]) < 0x7B8B4E8A) << 32))
     + ((61 * (a4 ^ 0x23Du)) ^ 0xFFFFFFFF8474B57BLL);
  STACK[0x4A8] = v9;
  return (*(uint64_t (**)(unint64_t, unint64_t, unint64_t))(a8
                                                                                         + 8
                                                                                         * (((v9 == 0) | (2 * (v9 == 0))) ^ (a4 + 481))))(v8, 0xFFE573DC280C6D70, 0x9ABCDC44E60E5E81);
}

uint64_t sub_19E7233E0@<X0>(int a1@<W7>, unsigned int a2@<W8>)
{
  return (*(uint64_t (**)(void))(v3
                              + 8
                              * ((46
                                * (a2 < ((((409 * (v2 ^ 0x771) + 310) | 0xD2) - v4 - 1561) ^ (a1 + 15)))) ^ (409 * (v2 ^ 0x771)))))();
}

uint64_t sub_19E723438@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  int v20 = (v13 + 54) | 0x104;
  unint64_t v21 = a1
      + (*(_DWORD *)(a2 + 4 * a3) ^ v8 ^ v11)
      + (((unint64_t)(*(_DWORD *)(a2 + 4 * a3) ^ v8) << (v20 ^ 0x1Fu ^ v12)) & v14);
  *(_DWORD *)(a2 + 4 * a3) = v21 + v15 - ((v16 + 2 * (v21 + v15)) & (((v20 + v9) & v10) + v7)) + v17;
  return (*(uint64_t (**)(void))(v5
                              + 8
                              * ((((v19 ^ ((v21 + v18) >> 32)) + (a4 & ((v21 + v18) >> 31)) + v6 != 0x22DE212C2ABB87EFLL)
                                * v4) ^ v20)))();
}

uint64_t sub_19E72344C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  STACK[0x478] = *(void *)(a8 + 8 * v9);
  return sub_19E6E36E4(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t sub_19E723458(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a8 + 8 * (v8 ^ (55 * LODWORD(STACK[0x408])))))(3862537937, 3821823432);
}

uint64_t sub_19E723520(int a1, uint64_t a2, int a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4
                              + 8
                              * (((LODWORD(STACK[0x48C]) == 2072727178) * (((v4 ^ 0x35 ^ a1) - 1612) ^ a3)) ^ v4 ^ 0x35)))();
}

uint64_t sub_19E723560(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5
                                                     + 8
                                                     * ((224
                                                       * (v2 + v1 + ((75 * (v4 ^ 0x67B) - 698) | 0x540u) + 1078197883 > 7)) ^ v4)))(a1, v3);
}

uint64_t sub_19E7235C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a5
                                                                                         + 8
                                                                                         * (((((3 * (v8 ^ 0x6CB)) ^ 0x531)
                                                                                            - 1033)
                                                                                           * (v9 == v7)) ^ v8)))(a1, a2, a7, a3, a4, 4031147146);
}

uint64_t sub_19E723600(uint64_t a1, int a2, unsigned int a3, int a4, int a5, uint64_t a6, uint64_t a7, void *a8)
{
  BOOL v15 = a3 > 0x2E3D8E83;
  uint64_t v16 = *(_DWORD *)(*a8 + 4 * a2) ^ v10;
  unint64_t v17 = ((v16 ^ 0xF9EFEFEDE6C7BFFFLL) + 0x610101219384001 + ((2 * v16) & 0x1CD8F7FFELL)) * v11;
  unint64_t v18 = a1
      + (*(_DWORD *)(v13 + 4 * v14) ^ v10 ^ 0xBDF7A35FFBB56C75)
      + ((((v12 + 20) ^ 0x14u) - 111 + 0x1F76AD6AELL) & (2 * (*(_DWORD *)(v13 + 4 * v14) ^ v10)))
      + (v17 ^ 0xD3D27679FBFADF9CLL)
      + ((2 * v17) & 0xA7A4ECF3F7F5BF38);
  *(_DWORD *)(v13 + 4 * v14) = v18 + 391484764 - ((2 * (v18 + 391484764) + 209530184) & (v9 + 612)) - 780120751;
  unint64_t v19 = (((v18 + 0x4B57C4F9DD942C00) >> 32) ^ 0xE3FF77ECEFFBB7EFLL)
      + (((v18 + 0x4B57C4F9DD942C00) >> 31) & 0x1DFF76FDELL)
      + 0x3EDEA93F3ABFD000;
  LODWORD(v18) = a2 + 1 + a4;
  int v20 = v15 ^ ((int)v18 < -775786116);
  BOOL v21 = (int)v18 < a5;
  if (!v20) {
    BOOL v15 = v21;
  }
  return (*(uint64_t (**)(unint64_t))(v8 + 8 * ((v12 + 20) ^ (98 * v15))))(v19);
}

uint64_t sub_19E72379C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 8 * ((4 * v4) ^ 0x1880)))(a1, a2, a3, a4, 0xFFFFFFFFFFFFFFDLL);
}

uint64_t sub_19E72386C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8
                              + 8
                              * ((((((v8 & 0xDF) + 104) ^ ((*(unsigned char *)(v11 + v9)
                                                                                            - *(unsigned char *)(*(void *)(v10 + 8 * (((v8 & 0x37D70ADF) - 175) ^ 0x29F)) - 12)) == 39)) & 1)
                                * ((((v8 & 0x37D70ADF) - 175) ^ 0x78) - 544)) ^ ((v8 & 0x37D70ADF) - 517))))();
}

uint64_t sub_19E7238DC(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  return (*(uint64_t (**)(void))(v8
                              + 8
                              * (((16 * ((a7 + 1 + v7) < 0x20)) | (((a7 + 1 + v7) < 0x20) << 7)) ^ a3)))();
}

uint64_t sub_19E723B14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11 = v9 + (v8 ^ 0x1CD) + 1641677202;
  BOOL v13 = v11 > 1064410578 || v11 < v10;
  return (*(uint64_t (**)(void))(a8 + 8 * ((v13 * (4 * (v8 ^ 0x1CD) + 85)) | v8)))();
}

uint64_t sub_19E723B6C@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(void))(v3
                              + 8
                              * (int)(((v4 + ((v2 + 1346378594) ^ 0x504024E5) + ((v2 + 1346378594) | 0x80105080) - 1400)
                                     * (a1 == v1)) ^ v2)))();
}

uint64_t sub_19E723BB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  BOOL v10 = v8 + 435328455 < (a7 - 829551009);
  if ((v8 + 435328455) < 0x4A195CE9 != (a7 - 829551009) < 0x4A195CE9) {
    BOOL v10 = (a7 - 829551009) < 0x4A195CE9;
  }
  return (*(uint64_t (**)(void))(v9 + 8 * ((v10 * (((v7 + 57) | 0x590) - 973)) ^ v7)))();
}

uint64_t sub_19E723E28@<X0>(uint64_t (*a1)(void)@<X8>)
{
  STACK[0x3C8] = v1;
  STACK[0x3C0] = v1 - 112;
  STACK[0x578] = v1 - 112;
  return a1();
}

uint64_t sub_19E723E4C@<X0>(uint64_t a1@<X0>, int a2@<W1>, char a3@<W2>, int a4@<W3>, int a5@<W5>, int a6@<W8>)
{
  *(unsigned char *)(*(void *)(a1 + 16) + (a5 - 623766490)) = (((a4 ^ v7) >> (a3 + 127))
                                                                     - (((a2 ^ 0xE7) + 127) & (2
                                                                                             * ((a4 ^ v7) >> (a3 + 127))))
                                                                     + 97) ^ v8;
  return (*(uint64_t (**)(void))(v6 + 8 * ((127 * (((a2 + 522160185) & 0xE0E077E7 ^ 0xFFFFFE3A) + a5 == a6)) ^ a2)))();
}

uint64_t sub_19E723EDC@<X0>(uint64_t a1@<X7>, int a2@<W8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  uint64_t v29 = (*(uint64_t (**)(void, void, uint64_t))(a1 + 8 * ((v25 - 1643) ^ 0xB7A)))(LODWORD(STACK[0x544]), (a2 + v26), a22);
  unint64_t v35 = STACK[0x2A8];
  unint64_t v36 = STACK[0x460];
  int v37 = ((2 * v29) & 0x7AEEFF5E) + (v29 ^ 0x3D777FAF);
  unint64_t v38 = STACK[0x458];
  if (v37 != 1031241647)
  {
    if (v37 == 1299677106)
    {
      LODWORD(STACK[0x51C]) = -694859293;
    }
    else
    {
      unsigned int v43 = 511487701 * (((v27 | 0x40848B9) - v27 + (v27 & 0xFBF7B740)) ^ 0x1C613C71);
      *(_DWORD *)(v28 - 232) = v43 + v37 - ((2 * v37 + 85000354) & 0x52D425B6) - 336424148;
      *(_DWORD *)(v28 - 248) = v38 - v43 + 331;
      *(void *)(v28 - 240) = a25;
      (*(void (**)(uint64_t))(v36 + 8 * ((int)v38 + 1828)))(v28 - 248);
    }
    JUMPOUT(0x19E7A9F14);
  }
  int v39 = STACK[0x458] + 1070;
  unint64_t v40 = STACK[0x3C8];
  uint64_t v41 = (char *)&STACK[0x6D0] + STACK[0x3C8] - 0x5C811742B282E170;
  STACK[0x618] = (unint64_t)(v41 - 1824);
  STACK[0x428] = (unint64_t)(v41 - 1596);
  LODWORD(STACK[0x4FC]) = 1058315934;
  STACK[0x578] = v40 - 192;
  STACK[0x5C8] = 0;
  LODWORD(STACK[0x634]) = 2072727178;
  STACK[0x430] = (unint64_t)(v41 - 1824);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, unint64_t))(v36 + 8 * (v39 ^ (251 * (v41 == (char *)1576)))))(v29, v30, v31, v32, v35, v33, v34, v36);
}

uint64_t sub_19E7240B8@<X0>(int a1@<W4>, int a2@<W8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  int v34 = (a2 - 968481787) & 0x39B9DD8F;
  unint64_t v35 = (unsigned __int8 *)&STACK[0x19A0] + v30;
  *unint64_t v35 = *v33;
  *(void *)(v35 + 1) = *(void *)(v33 + 1);
  *(_DWORD *)(v35 + 9) = *(_DWORD *)(v33 + 9);
  *(_WORD *)(v35 + 13) = *(_WORD *)(v33 + 13);
  v35[15] = v33[15];
  uint64_t v36 = *((void *)v33 + 1);
  *((void *)v35 + 2) = *(void *)v33;
  *((void *)v35 + 3) = v36;
  unint64_t v37 = *(void *)(v31 + 8 * (v34 - 1181));
  uint64_t v38 = (v34 + 729317995) & 0x54877D7D;
  HIDWORD(v40) = *(unsigned __int8 *)(v37 + (v35[6] ^ 0xCALL));
  LODWORD(v40) = (HIDWORD(v40) ^ 0xBBBBBBBB) << 24;
  int v39 = v40 >> 26;
  HIDWORD(v40) = *(unsigned __int8 *)(v37 + (v35[14] ^ 0xDDLL));
  LODWORD(v40) = (HIDWORD(v40) ^ 0xBBBBBBBB) << 24;
  int v41 = v39 - ((v38 + 109) & (2 * v39)) - 17;
  int v42 = v41 ^ (v41 >> 6) ^ (v41 >> 3) ^ 0xAF;
  int v43 = (((v42 - ((2 * v42) & 0x170)) << 8) + 112441344) ^ 0x6B3B800;
  int v44 = (v40 >> 26) - ((2 * (v40 >> 26)) & 0x58) - 84;
  unsigned int v45 = v44 ^ (((v40 >> 26) - ((2 * (v40 >> 26)) & 0x58) - 84) >> 3) ^ ((v44 >> 6) | 0x54) ^ 0xFFFFFF88;
  uint64_t v46 = *(void *)(v31 + 8 * (v34 - 1325));
  int v47 = *(unsigned __int8 *)(v46 + (v35[7] ^ 0xAELL)) ^ 0x89;
  int v48 = (v43 - ((2 * v43) & 0x3DB01200) + 517474617) ^ 0x1ED80939 | (v47 - ((2 * v47) & 0x46) + 1802904099) ^ 0x6B762223;
  HIDWORD(v40) = *(unsigned __int8 *)(v37 + (v35[10] ^ 0x89));
  LODWORD(v40) = (HIDWORD(v40) ^ 0xBBBBBBBB) << 24;
  unsigned int v49 = ((v40 >> 26) - ((2 * (v40 >> 26)) & 0x40) + 32);
  int v50 = ((v40 >> 26) - ((2 * (v40 >> 26)) & 0x40) + 32) ^ (v49 >> 6) ^ (v49 >> 3);
  uint64_t v51 = *(void *)(v31 + 8 * (v34 - 1410));
  unsigned int v52 = *(unsigned __int8 *)(v51 + (v35[5] ^ 0x8ELL));
  unsigned int v53 = ((((v50 ^ 2) - ((2 * v50) & 0x17A)) << 8) - 849167104) ^ 0xCD62BD00;
  int v54 = v52 ^ (((v52 >> 1) & 0x14 ^ 0xFE) + 2 * ((v52 >> 1) & 0x14) + 98);
  uint64_t v55 = v35[8];
  uint64_t v56 = *(void *)(v31 + 8 * (v34 ^ 0x5E0u)) - 8;
  int v57 = ((((v54 ^ 5) - ((2 * v54) & 0x80)) << 16) + 692060160) ^ 0x29400000;
  LODWORD(v55) = *(unsigned __int8 *)(v56 + (v55 ^ 0x50)) ^ ((v55 ^ 0x23)
                                                                            + (v55 ^ 0x22)
                                                                            - ((2 * ((v55 ^ 0x23) + (v55 ^ 0x22))) & 0xF3)
                                                                            + 121) ^ 0x1A;
  unsigned int v58 = (((v55 + (~(2 * v55) | 0xAD)) << 24) - 1442840576) ^ 0xA9000000;
  unsigned int v59 = v53 - ((2 * v53) & 0x54DEA400);
  uint64_t v60 = v35[4];
  int v61 = *(unsigned __int8 *)(v46 + (v35[3] ^ 0xB6));
  LODWORD(v55) = ((v60 ^ 0x5B) + (v60 ^ 0x5A) - ((2 * ((v60 ^ 0x5B) + (v60 ^ 0x5A))) & 0xA8) - 44);
  unsigned int v62 = (v57 - ((2 * v57) & 0x16960000) - 884225982) ^ 0xCB4BC842 | (v48 - ((2 * v48) & 0xD76265C) - 2034560210) ^ 0x86BB132E;
  unsigned int v63 = (v59 + 1785680586) ^ 0x6A6F52CA | (v58 - ((2 * v58) & 0xBC000000) - 557098206) ^ 0xDECB5B22;
  unsigned int v64 = ((((*(unsigned __int8 *)(v56 + (v60 ^ 0x28)) ^ v55 ^ 0x6F)
         - 2 * ((*(unsigned __int8 *)(v56 + (v60 ^ 0x28)) ^ v55 ^ 0x6F) & 0x3F)) << 24)
       - 1090519040) ^ 0xBF000000;
  uint64_t v65 = v35[2] ^ 0x12;
  unsigned int v66 = (v62 - ((2 * v62) & 0x4F9C2748) - 1479666780) ^ 0xA7CE13A4 | (v64 - ((2 * v64) & 0x8FFFFFFF) + 1198855048) ^ 0x47751388;
  STACK[0x208] = v37;
  HIDWORD(v40) = *(unsigned __int8 *)(v37 + v65);
  LODWORD(v40) = (HIDWORD(v40) ^ 0xBBBBBBBB) << 24;
  int v67 = (v40 >> 26) - ((2 * (v40 >> 26)) & 0xFFFFFFB0) - 40;
  LODWORD(v60) = *(unsigned __int8 *)(v51 + (v35[13] ^ 0x68));
  int v68 = v67 ^ (((v40 >> 26) - ((2 * (v40 >> 26)) & 0xB0) - 40) >> 3) ^ ((v67 >> 6) | 0xDC) ^ 0xAE;
  unsigned int v69 = (((v68 - ((2 * v68) & 0xFA)) << 8) - 1887863552) ^ 0x8F797D00;
  unsigned int v70 = (v69 - ((2 * v69) & 0x28C25600) - 731829455) ^ 0xD4612B31 | ((v61 ^ 0x89)
                                                                   - ((2 * (v61 ^ 0x89)) & 0x10C)
                                                                   + 802972294) ^ 0x2FDC6286;
  LODWORD(v65) = ((((v60 ^ 0x31 ^ (-2
                                                                   - ((~((((v60 >> 1) & 0x14 ^ 0xE) + 30) & 0x55555555) | 0x4D)
                                                                    + ((((v60 >> 1) & 0x14 ^ 0xE) + 30) & 0x45 | 0xB2))))
                  - ((2
                    * (v60 ^ 0x31 ^ (-2
                                                 - ((~((((v60 >> 1) & 0x14 ^ 0xE) + 30) & 0x55555555) | 0x4D)
                                                  + ((((v60 >> 1) & 0x14 ^ 0xE) + 30) & 0x45 | 0xFFFFFFB2))))) & 0x1BA)) << 8)
                - 544809728) ^ 0xDF86DD00;
  int v71 = (v35[1] ^ 0xE7) - ((2 * (v35[1] ^ 0xE7)) & 0x1B4) + 562233818;
  LODWORD(v60) = (v71 ^ 0xDE7CFE9C) + 1;
  int v72 = (v65 - 1680584209 - ((2 * v65) & 0x37A8A200)) ^ 0x9BD451EF | (v45
                                                                    - 1964208434
                                                                    - ((2 * v45) & 0x19C)) ^ 0x8AEC8ECE;
  v71 ^= 0x218301DAu;
  LODWORD(v65) = v71 + (v60 ^ 0xFF96F0ED) + ((2 * v60) & 0xFF2DE1DA) + 6885139;
  unsigned int v73 = *(unsigned __int8 *)(v51 + ((v65 - ((2 * v65) & 0x8801198A) + 1140886725) ^ 0xBBFF733B) + v71);
  LODWORD(v60) = ((~(v73 >> 1) & 0x14) - ((2 * ~(v73 >> 1)) & 0x20) + 59) ^ 0x38;
  int v74 = v73 ^ 0x6E ^ ((v60 | 0x6D) - (v60 | 0x92) - 110);
  int v75 = (((v74 - ((2 * v74) & 0x8A)) << 16) + 222625792) ^ 0xD450000;
  int v76 = (v70 - ((2 * v70) & 0x371BB556) + 1536023211) ^ 0x5B8DDAAB | (v75 - ((2 * v75) & 0x76F40000) + 2071615323) ^ 0x7B7A575B;
  int v77 = *(unsigned __int8 *)(v56 + (*v35 ^ 0x97)) ^ ((*v35 ^ 0xE4)
                                                                      + (*v35 ^ 0xE5)
                                                                      - ((2 * ((*v35 ^ 0xE4) + (*v35 ^ 0xE5))) & 0xFB)
                                                                      + 125) ^ 0xA9;
  unsigned int v78 = (((v77 - ((2 * v77) & 0xBBBBBBBB)) << 24) + 1560281088) ^ 0x5D000000;
  uint64_t v376 = v51;
  unsigned int v79 = (v76 - ((2 * v76) & 0x11D23F04) - 1997987966) ^ 0x88E91F82 | (v78 - ((2 * v78) & 0x34000000) - 1706163729) ^ 0x9A4E01EF;
  uint64_t v80 = v35[12];
  LODWORD(v65) = *(unsigned __int8 *)(v51 + (v35[9] ^ 0x77)) ^ 0xC7 ^ (((*(unsigned __int8 *)(v51 + (v35[9] ^ 0x77)) >> 1) & 0x14 ^ 0x57 | (2 * ((*(unsigned __int8 *)(v51 + (v35[9] ^ 0x77)) >> 1) & 0x14)))
                                                                       + 115);
  LODWORD(v65) = (((v65 - ((2 * v65) & 0x138)) << 16) + 798752768) ^ 0x2F9C0000;
  int v81 = (v65 - ((2 * v65) & 0x4DA20000) + 651232934) ^ 0x26D106A6 | (v63 - ((2 * v63) & 0x4DDE8814) - 1494268918) ^ 0xA6EF440A;
  uint64_t v375 = v56;
  LODWORD(v80) = *(unsigned __int8 *)(v56 + (v80 ^ 0xC3)) ^ ((v80 ^ 0xFFFFFFB1)
                                                           + (v80 ^ 0xFFFFFFB0)
                                                           - ((2 * ((v80 ^ 0xFFFFFFB1) + (v80 ^ 0xFFFFFFB0))) & 0xFFFFFFDF)
                                                           - 17) ^ 0x43;
  LODWORD(v80) = (((v80 - ((2 * v80) & 0x4C)) << 16) + 119930880) ^ 0x7260000;
  LODWORD(v65) = *(unsigned __int8 *)(v46 + (v35[15] ^ 0x38));
  int v82 = (v72 - 505300540 - ((2 * v72) & 0xC3C37388)) ^ 0xE1E1B9C4 | (v80 - 1562118322 - ((2 * v80) & 0x45C60000)) ^ 0xA2E3F74E;
  uint64_t v377 = v46;
  LODWORD(v35) = (v81 - ((2 * v81) & 0x56EFD7AA) + 729279445) ^ 0x2B77EBD5 | ((*(unsigned __int8 *)(v46
                                                                                                  + (v35[11] ^ 0xDBLL)) ^ 0x89)
                                                                            - (a1 & (2
                                                                                   * (*(unsigned __int8 *)(v46 + (v35[11] ^ 0xDBLL)) ^ 0x89)))
                                                                            + 249020613) ^ 0xED7C0C5;
  unsigned int v83 = ((((v65 ^ 0x89) - ((2 * (v65 ^ 0x89)) & 0xFFFFFFFB)) << 24) - 50331648) ^ 0xFD000000;
  unsigned int v84 = (v82 + 452923219 - ((2 * v82) & 0x35FE1EA6)) ^ 0x1AFF0F53 | (v83 + 1964497708 - ((2 * v83) & 0xEA000000)) ^ 0x7517DB2C;
  unsigned int v85 = v84 - ((2 * v84) & 0xF23C2582) - 115469631;
  HIDWORD(v40) = v85 ^ 0xB19A6C;
  LODWORD(v40) = v85 ^ 0xAB000000;
  LODWORD(STACK[0x408]) = ((v40 >> 24) - ((2 * (v40 >> 24)) & 0xFC6D433E) - 29974113) ^ 0x3A39327D;
  LODWORD(STACK[0x3F0]) = (v79 - ((2 * v79) & 0x4999DC06) - 1530073597) ^ 0x22E8EB1D;
  unint64_t v374 = (unsigned __int8 *)STACK[0x660];
  LODWORD(STACK[0x3F8]) = (v66 - ((2 * v66) & 0x384A57AC) - 1675285546) ^ 0x299B2912;
  LODWORD(STACK[0x400]) = (v35 - ((2 * v35) & 0x9CA27B8A) - 833536571) ^ 0xEBB3DFEB;
  unint64_t v373 = STACK[0x668];
  STACK[0x438] = 7;
  int v86 = (v38 + 1936644713) & 0x8C9126BF;
  unsigned int v87 = *(unsigned __int8 *)(v51 + (v374[13] ^ 0x98));
  LODWORD(STACK[0x410]) = v86;
  int v88 = ((v87 >> 1) & 0x14 ^ (v86 - 172)) - 8;
  unint64_t v89 = ((((v87 ^ 0x15u ^ v88) - ((2 * (v87 ^ 0x15 ^ v88)) & 0x1B4)) << 16)
       - 0xF84FC2024260000) ^ 0xF07B03DFDBDA0000;
  unsigned int v90 = *(unsigned __int8 *)(v51 + (v374[1] ^ 0xF4));
  uint64_t v91 = *v374;
  int v92 = v90 ^ (((v90 >> 1) & 0x14 ^ 0x15 | 0x6D) - ((v90 >> 1) & 0x14 ^ 0x15 | 0x92) - 110) ^ 0xC;
  unsigned int v93 = (((v92 - ((2 * v92) & 0x132)) << 16) - 1902575616) ^ 0x8E990000;
  LODWORD(v60) = *(unsigned __int8 *)(v56 + (v91 ^ 0x9D));
  LODWORD(v91) = 2 * (((v91 ^ 0x6F) & (v91 ^ 0x6E)) - ((2 * ((v91 ^ 0x6F) & (v91 ^ 0x6E))) & 0x40)) - 64;
  uint64_t v94 = *(unsigned __int8 *)(v46 + (v374[15] ^ 0x98)) ^ 0x89;
  unint64_t v95 = (v89 + 0x40CC9DF69CD46128 - ((2 * v89) & 0x1993BED39A80000)) ^ 0x40CC9DF69CD46128 | (v94
                                                                                                 - 0x780B01593523230FLL
                                                                                                 - ((2 * (int)v94) & 0x1E2)) ^ 0x87F4FEA6CADCDCF1;
  LOBYTE(v51) = v95 - 55;
  unint64_t v96 = v95 + 0x3D511F6463B32FC9 - ((2 * v95) & 0x7AA23EC8C7665F42) - 40;
  LODWORD(v46) = ((((v91 ^ 0xFFFFFFC0) - 103 - ((2 * v91) & 0x30)) ^ 0xFFFFFF98)
                - 2
                * ((((v91 ^ 0xFFFFFFC0) - 103 - ((2 * v91) & 0x30)) ^ 0xFFFFFF98) & 0x4F ^ ((v91 ^ 0xFFFFFFC0) - 103) & 5)
                + 74) ^ v60;
  LODWORD(v95) = (((v46 ^ 0x5C) - ((2 * (v46 ^ 0x5C)) & 8)) << 24) + 0x4000000;
  LODWORD(v95) = ((v95 ^ 0x4000000) + 326976557 - ((2 * v95) & 0x26000000)) ^ 0x137D442D | (v93
                                                                                          + 1264170831
                                                                                          - ((2 * v93) & 0x16B20000)) ^ 0x4B59B74F;
  int v97 = v95 + 2049758946 - ((2 * v95) & 0xF459ADC4);
  unint64_t v98 = *(unsigned __int8 *)(v377 + (v374[7] ^ 0xB3));
  STACK[0x2C8] = v98;
  unint64_t v99 = STACK[0x208];
  uint64_t v100 = *(unsigned __int8 *)(v377 + (v374[11] ^ 0x95));
  HIDWORD(v40) = *(unsigned __int8 *)(STACK[0x208] + (v374[6] ^ 0x2DLL));
  LODWORD(v40) = (HIDWORD(v40) ^ 0xBBBBBBBB) << 24;
  LODWORD(v94) = ((v40 >> 26) - ((2 * (v40 >> 26)) & 0x68) - 76);
  int v101 = ((v40 >> 26) - ((2 * (v40 >> 26)) & 0x68) - 76) ^ (v94 >> 6) ^ (v94 >> 3);
  LODWORD(STACK[0x3C8]) = v101;
  unsigned int v102 = ((((v101 ^ 3) - ((2 * (v101 ^ 3)) & 0x162)) << 8) - 1882476288) ^ 0x8FCBB100;
  int v103 = (v102 + 1765488031 + (~(2 * v102) | 0xAD8995FF) + 1) ^ 0x693B359F | ((v98 ^ 0x89)
                                                                            + 1303554013
                                                                            - ((2 * (v98 ^ 0x89)) & 0xBBBBBBBB)) ^ 0x4DB2A7DD;
  LODWORD(v91) = v103 + 1578528945 - ((2 * v103) & 0x3C2CE162);
  uint64_t v104 = v374[4];
  unint64_t v105 = *(unsigned __int8 *)(v377 + (v374[3] ^ 0xA9));
  STACK[0x3C0] = v105;
  int v106 = ((v104 ^ 0x57) + (v104 ^ 0x56) - (v32 & (2 * ((v104 ^ 0x57) + (v104 ^ 0x56)))) + 21) ^ *(unsigned __int8 *)(v375 + (v104 ^ 0x24));
  LODWORD(STACK[0x3B8]) = v106;
  uint64_t v107 = v374[8];
  unsigned int v108 = ((((v106 ^ 0xF2) - ((2 * (v106 ^ 0xF2)) & 0x14)) << 24) - 1979711488) ^ 0x8A000000;
  uint64_t v109 = v38;
  LODWORD(v107) = *(unsigned __int8 *)(v375 + (v107 ^ 0x86)) ^ 0xA5 ^ ((v107 ^ 0xF5)
                                                                                      + (v107 ^ 0xF4)
                                                                                      - ((2
                                                                                        * ((v107 ^ 0xF5) + (v107 ^ 0xF4))) & 0xC)
                                                                                      + 6);
  LODWORD(v107) = (((v107 - ((2 * v107) & 0x4A)) << 24) + 620756992) ^ 0x25000000;
  LODWORD(v107) = (v107 + 1769649105 - ((2 * v107) & 0xD2000000)) ^ 0x697AB3D1 | ((v100 ^ 0x89)
                                                                                - 1095275483
                                                                                - ((2 * (v100 ^ 0x89)) & 0x4A)) ^ 0xBEB76C25;
  LODWORD(v104) = *(unsigned __int8 *)(v376 + (v374[5] ^ 0xFBLL));
  LODWORD(v104) = v104 ^ 0xAD ^ (~(v104 >> 1) & 0x14 | 0xAA);
  LODWORD(v104) = ((v104 - ((2 * v104) & 0x162)) << 16) - 508493824;
  LODWORD(v104) = ((v104 ^ 0xE1B10000) + 437137185 - ((2 * v104) & 0x341C0000)) ^ 0x1A0E2F21 | (v108
                                                                                              + 2098619422
                                                                                              - ((2 * v108) & 0xFA000000)) ^ 0x7D16641E;
  LODWORD(v91) = (v104 - 1593450160 - ((2 * v104) & 0x420BC2A0)) ^ 0xA105E150 | v91 ^ 0x5E1670B1;
  LODWORD(v35) = v91 - ((2 * v91) & 0xC2D5EAFE) + 1634399615;
  HIDWORD(v40) = *(unsigned __int8 *)(v99 + (v374[2] ^ 0x63));
  LODWORD(v40) = (HIDWORD(v40) ^ 0xBBBBBBBB) << 24;
  unsigned int v110 = ((v40 >> 26) - ((2 * (v40 >> 26)) & 0x68) - 76);
  LODWORD(v38) = ((v40 >> 26) - ((2 * (v40 >> 26)) & 0x68) - 76) ^ (v110 >> 6) ^ (v110 >> 3);
  LODWORD(v104) = ((((~(2 * (v38 ^ 0x81)) | 0xFFFFED) + (v38 ^ 0x81)) << 8) + 1230047744) ^ 0x49510900;
  LODWORD(v98) = (v104 - 1683121709 - ((2 * v104) & 0x1B3200)) ^ 0x9BAD99D3 | v97 ^ 0x7A2CD6E2;
  LODWORD(v98) = (v98 + 865458818 - ((2 * v98) & 0x672BB504)) ^ 0x3395DA82 | ((v105 ^ 0x89)
                                                                            + 1902675707
                                                                            - ((2 * (v105 ^ 0x89)) & 0xFFFFFFF7)) ^ 0x716886FB;
  LODWORD(v104) = v98 - ((2 * v98) & 0x86EE61FE) - 1015598849;
  LODWORD(v98) = *(unsigned __int8 *)(v376 + (v374[9] ^ 0xDDLL));
  int v111 = v374[10];
  LODWORD(v98) = v98 ^ 0x6C ^ ((v98 >> 1) & 0x14 | 1);
  LODWORD(v98) = (((v98 - ((2 * v98) & 0x6E)) << 16) - 1690894336) ^ 0x9B370000;
  LODWORD(v94) = ((2 * (v111 ^ 0x4E)) & 0xDDDDDDDD) + (v111 ^ 0x7F8ADEA0);
  int v112 = (v111 ^ 0xA28581F4) - ((2 * (v111 ^ 0xF0)) & 0xFFFFFFF7) + v94 + 1;
  HIDWORD(v40) = *(unsigned __int8 *)(v99
                                    + v94
                                    - 2139807470
                                    + ((v112 - ((2 * v112 - 1142996966) & 0x85C5B824) - 1596818401) ^ 0x3D1D23EE));
  LODWORD(v40) = (HIDWORD(v40) ^ 0xBBBBBBBB) << 24;
  unsigned int v113 = ((v40 >> 26) + (~(2 * (v40 >> 26)) | 0xAF) - 87);
  LODWORD(v94) = (((((((v40 >> 26) + (~(2 * (v40 >> 26)) | 0xAF) - 87) ^ (v113 >> 6) ^ (v113 >> 3)) ^ 0xEB)
                  - ((2
                    * (((v40 >> 26) + (~(2 * (v40 >> 26)) | 0xFFFFFFAF) - 87) ^ (v113 >> 6) ^ (v113 >> 3) ^ 0xEB)) & 0x8A)) << 8)
                + 2021016832) ^ 0x78764500;
  LODWORD(v98) = (v94 - 1833221703 - ((2 * v94) & 0x25768200)) ^ 0x92BB41B9 | (v98
                                                                             + 2067593535
                                                                             - ((2 * v98) & 0x76780000)) ^ 0x7B3CF93F;
  LODWORD(v98) = (v98 - 1513728983 - ((2 * v98) & 0x4B8CA852)) ^ 0xA5C65429 | (v107
                                                                             - 1252122012
                                                                             - ((2 * v107) & 0x6ABC44C8)) ^ 0xB55E2264;
  uint64_t v114 = v374[12];
  LODWORD(v94) = *(unsigned __int8 *)(v375 + (v114 ^ 0xB3));
  unsigned int v115 = v98 - ((2 * v98) & 0xF06BADF8) - 130689284;
  LODWORD(v98) = (v114 ^ 0xFFFFFFC1)
               + (v114 ^ 0xFFFFFFC0)
               - ((2 * ((v114 ^ 0xFFFFFFC1) + (v114 ^ 0xFFFFFFC0))) & 0x28)
               + 20;
  LODWORD(v114) = (v94 ^ v98 ^ 7) + 1;
  LODWORD(v94) = v94 ^ 0xFFFFFFEC;
  LODWORD(v114) = v94 + (v114 ^ 0xFFFFFFB7) + ((2 * v114) & 0x6E) + 73;
  LODWORD(v98) = (v98 ^ ((v98 ^ 0xFFFFFFEB) - ((2 * (v98 ^ 0xFFFFFFEB) + 2) & 0xFFFFFF96) - 52) ^ 0x24 ^ (v114 - ((2 * v114) & 0xFFFFFFF7) - 5))
               + v94;
  LODWORD(v98) = (v98 ^ 0xFFFFFFDD) + ((2 * v98) & 0xFFFFFFBA) + 35;
  uint64_t v116 = (((v98 - ((2 * (int)v98) & 0x1FALL)) << 20) + 0x6298563C2FD00000) ^ 0x6298563C2FD00000;
  uint64_t v117 = (((v96 << 28) ^ 0xE0000000) - ((v51 & 1) << 29) - 1834642794) & 0xF0000000 ^ 0xB0000000;
  uint64_t v118 = (((2 * v117) & 0x100000000) - v117 + 0x2D7EA10B7B75FAAFLL) ^ 0x6D3B880A5B16D88ALL;
  unint64_t v119 = (((2 * v118) & 0x82420DC0C00400) - v118 - 0x25F96796E264C391) ^ 0x9A43B1681DF81E4ALL | (v96 >> 4) ^ 0x3D511F6463B32F9;
  unint64_t v120 = (v116 - ((2 * v116) & 0xF947FF89B600000) - 0x3835C003B24F2143) ^ (v119
                                                                             - ((2 * v119) & 0x1A45688073B99AC0)
                                                                             + 0x4D22B44039DCCD60);
  LODWORD(v120) = ((32 * v120) & 0xF9ED3CE0 ^ 0x386C00A0)
                + ((16 * v120) ^ 0x63C09FAE)
                + ((v120 >> 28) ^ 0x633BF130)
                + ((2 * (v120 >> 28)) ^ 0x19E);
  LOBYTE(v94) = v120 - 63;
  LODWORD(v119) = v120 - 1976255295 - ((2 * v120 + 1067114246) & 0xD4CE9A7C);
  HIDWORD(v40) = *(unsigned __int8 *)(v99 + (v374[14] ^ 0x18));
  LODWORD(v40) = (HIDWORD(v40) ^ 0xBBBBBBBB) << 24;
  int v121 = (v40 >> 26) + (~(2 * (v40 >> 26)) | 0xD) - 6;
  int v122 = v121 ^ (((v40 >> 26) + (~(2 * (v40 >> 26)) | 0xD) - 6) >> 6) ^ ((v121 >> 3) | 0x80);
  unsigned int v123 = ((((v122 ^ 0x10) - ((2 * v122) & 0x1C8)) << 8) - 1905335296) ^ 0x8E6EE400;
  int v124 = v119 ^ (v123 - ((2 * v123) & 0x1D1AB000) + 244144172);
  uint64_t v125 = (char *)*(&off_1EF0E5660 + (int)(v109 ^ 0x55A)) - 12;
  LODWORD(v99) = ((2 * (BYTE2(v124) ^ 0x142DA569)) & 0x19489C) - (BYTE2(v124) ^ 0x142DA569) - 1246539343;
  LODWORD(v120) = *(_DWORD *)&v125[4 * (v46 ^ 0xD6)];
  uint64_t v126 = v109;
  int v127 = (char *)*(&off_1EF0E5660 + (int)(v109 ^ 0x590)) - 4;
  uint64_t v128 = (char *)*(&off_1EF0E5660 + (int)(v109 ^ 0x511)) - 4;
  uint64_t v129 = (char *)*(&off_1EF0E5660 + (int)(v109 ^ 0x5DE)) - 8;
  LODWORD(v120) = *(_DWORD *)&v127[4 * (v99 ^ 0xA19EF4D6)] ^ v120 ^ *(_DWORD *)&v129[4
                                                                                                 * (STACK[0x2C8] ^ 0x49)] ^ *(_DWORD *)&v128[4 * (BYTE1(v115) ^ 0x56)] ^ (127 - v91) ^ v99;
  unsigned int v130 = ((2 * (BYTE2(v104) ^ 0x9A)) | 0xCA71AB1C) - (BYTE2(v104) ^ 0x9A) + 449260146;
  LODWORD(v105) = ((WORD1(v104) & 0xE3) + (BYTE2(v104) ^ 0xE7) - ((BYTE2(v104) ^ 0xE7) & 0xFFFFFFE3) + 1703077632) ^ 0x25A0A771;
  LODWORD(v105) = *(_DWORD *)&v127[4 * ((((2 * v105) | 0x5462C17C) - v105 - 707879102) ^ 0x6A13203A)];
  LODWORD(STACK[0x2C8]) = v35;
  LOWORD(v96) = v120 ^ 0xB023;
  LODWORD(v37) = *(_DWORD *)&v125[4 * (LODWORD(STACK[0x3B8]) ^ 0xA1)] ^ v105 ^ *(_DWORD *)&v129[4 * (v100 ^ 0x49)] ^ (((2 * (v115 ^ 0x2090C1)) | 0xFD960950) - (v115 ^ 0x2090C1) - 2127234216) ^ ((v130 & 0xEDF45DC7 ^ 0x8C41C40) + (v130 ^ 0xE532C187) - ((v130 ^ 0xE532C187) & 0xEDF45DC7)) ^ *(_DWORD *)&v128[4 * (BYTE1(v124) ^ 0x8B)];
  LODWORD(STACK[0x240]) = v124;
  LODWORD(v105) = ((2 * (v124 ^ 0x4A)) & 0xFFFFFF07) - (v124 ^ 0x4A) - 378765956;
  LODWORD(v94) = ((v94 & 3 ^ 0x43F07003) - (v94 & 3) + (v119 ^ 0xC0)) ^ 0xC3F1723D;
  unsigned int v131 = *(_DWORD *)&v127[4 * (((BYTE2(v35) ^ 0xD) - 1009284978 - ((2 * (BYTE2(v35) ^ 0xD)) & 0x11C)) ^ 0xC3D788C6)] ^ *(_DWORD *)&v128[4 * (v38 ^ 0x4C)] ^ *(_DWORD *)&v125[4 * (HIBYTE(v115) ^ 0xB4)] ^ (((2 * (BYTE2(v35) ^ 0xA3)) | 0x20DE49A) - (BYTE2(v35) ^ 0xA3) + 2063142323) & 0x7FFFFFF ^ ((v105 & 0x20402DAB ^ 0x800180) + (v105 ^ 0xA163FC6B) - ((v105 ^ 0xA163FC6B) & 0xF05AB)) ^ *(_DWORD *)&v129[4 * ((1973496979 - (v94 | 0x75A12C93) + (v94 | 0x8A5ED36C)) ^ 0xA5FD18A)];
  unsigned int v132 = ((HIWORD(v115) & 0x48 ^ 0xA1657B09) + (HIWORD(v115) & 0xB7) - 1) ^ 0xA9357BB3;
  LODWORD(STACK[0x2C0]) = v115;
  LODWORD(v105) = *(_DWORD *)&v125[4 * (BYTE3(v119) ^ 0xF7)];
  unsigned int v133 = (((2 * v132) | 0xD75935AE) - v132 - 1806473943) ^ 0xC3624573;
  LODWORD(v109) = *(_DWORD *)&v127[4 * (BYTE2(v115) ^ 0x7C)] ^ 0x941E74A9;
  LODWORD(v119) = 2 * ((v133 & v109) - ((2 * (v133 & v109)) & 0x5A320E5C)) + 1513229916;
  LODWORD(STACK[0x3B8]) = v104;
  int v134 = (v104 & 0xB9 | ~(_BYTE)v104) - (~v104 & 0xB9) - 1825202944;
  int v135 = ((v133 + v109) ^ 0xFFFEF65D)
       + ((2 * (v133 + v109)) & 0xFFFDECBA)
       + (v119 ^ 0x6A328E1D)
       + ((2 * v119) & 0x9FFEFF7C ^ 0x6B9BE3C7);
  LODWORD(v105) = v105 ^ *(_DWORD *)&v128[4 * (LODWORD(STACK[0x3C8]) ^ 0xC)] ^ *(_DWORD *)&v129[4 * (STACK[0x3C0] ^ 0xF3)] ^ ((v134 & 0x80008232 ^ 0x2CC26200) + (v134 ^ 0x810D85BA) - ((v134 ^ 0x810D85BA) & 0x2300A32)) ^ 0x52D0A0D8 ^ (v135 + 1 - 2 * ((v135 + 268470627) & 0x3D5B300B ^ (v135 + 1) & 1) - 1923368596);
  LODWORD(v105) = (((2 * (v105 & 0xBD79040F ^ 0x3479000F)) | 0xC0FA2624) - (v105 & 0xBD79040F ^ 0x3479000F) - 1618809618) ^ 0xCC3C1313 | ((v105 & 0x80DB40 ^ 0xD001841 | v105 & 0x420620B0) - 1) ^ 0x4F82F9E0;
  LODWORD(v119) = v105 - ((2 * v105) & 0xB1C1F812) - 656344055;
  int v136 = (v37 & 0xF ^ 6) - ((2 * (v37 & 0xF ^ 6)) & 0x18) + 1401582188;
  LODWORD(v105) = ((BYTE2(v119) ^ 0x95) - ((2 * (BYTE2(v119) ^ 0x95)) & 0x6A) + 804972853) ^ 0x2AFBB3DF;
  unsigned int v137 = ((v37 ^ 0x2B) - ((2 * (v37 ^ 0x2B)) & 0xC) + 1658902278) ^ 0xE8CF42AE;
  unsigned int v138 = ((v136 & 0x42800212 ^ 0x20300092) + (v136 ^ 0x5389F264) - ((v136 ^ 0x5389F264) & 0x18012)) & 0x546F6B0F ^ 0xEBB296F6;
  int v139 = (BYTE1(v131) ^ 0xDC) + ((v131 >> 8) & 0x12 ^ 0x361B6202) - ((BYTE1(v131) ^ 0xDC) & 0x12);
  unsigned int v140 = *(_DWORD *)&v127[4
                        * ((-1825228901 - (v105 | 0x9335379B) + (v105 | 0x6CCAC864)) ^ 0x69CB92A4)] ^ *(_DWORD *)&v125[4 * (BYTE3(v120) ^ 0x70)] ^ *(_DWORD *)&v129[4 * ((v137 - ((2 * v137) & 0x145E172C) - 298898538) ^ 0x6400BE96)] ^ *(_DWORD *)&v128[4 * (((v139 ^ 0x53D0DDBF) - 315752713 + ((2 * v139) & 0x24200212)) ^ 0x7719BE77)] ^ (((((2 * v37) & 0x60) + (v37 & 0xF0 ^ 0xFFFFFF3F) + 319937991) & 0x12008BF0 ^ 0x8040231) - 2129570817) ^ (v138 - 1892503843 + ((2 * (v138 & 0x4222A0D ^ (v37 | 0x7FFFFFFE))) ^ 0x162109A3)) ^ (((2 * (BYTE2(v119) ^ 0x12A8DB)) & 0x40BE) - (BYTE2(v119) ^ 0x12A8DB) - 220558176);
  int v141 = ((v120 ^ 0x34ECB023) >> 16);
  LODWORD(v120) = ((v141 ^ 0x52) - ((2 * (v141 ^ 0x52)) & 0xEA) - 683725963) & 0x80020FFF;
  int v142 = ((v141 ^ 0x39) - ((2 * (v141 ^ 0x39)) & 0x148) - 1432957020) ^ 0x2A9ACBB4;
  LODWORD(v105) = *(_DWORD *)&v127[4 * ((((2 * v142) | 0x2788B49A) - v142 - 331635277) ^ 0x93C85E49)] ^ *(_DWORD *)&v125[4 * (BYTE3(v37) ^ 0x9D)];
  unsigned int v143 = (v131 ^ 0x17 | 0x6184298A) - (v131 ^ 0x17 | 0x9E7BD675) - 1636051339;
  unsigned int v144 = ((BYTE2(v37) ^ 0xE2) + (WORD1(v37) & 0xC4 ^ 0xD24DC504) - ((BYTE2(v37) ^ 0xE2) & 0xC4)) ^ 0x526DD514;
  int v145 = ((2 * v144) & 0x2384) - v144 - 148773315;
  LODWORD(v99) = ((2 * (BYTE1(v96) ^ 0x4C)) & 0x19C) - (BYTE1(v96) ^ 0x4C) + 553862705;
  LODWORD(v120) = v105 ^ *(_DWORD *)&v129[4
                                        * ((((v143 & 0x20840B94 ^ 0x1C005311) - 1) | v143 & 0x4100206B ^ 0xC1000002) ^ 0xBC847A1B)] ^ ((v131 ^ 0x26) + (v131 & 0x4D ^ 0x2149) - ((v131 ^ 0x26) & 0x4D)) ^ v120 ^ *(_DWORD *)&v128[4 * (BYTE1(v119) ^ 0x2D)];
  LODWORD(v105) = *(_DWORD *)&v128[4
                                 * (((v99 & 0x200AE ^ 0x9A9C008A)
                                   + (v99 ^ 0x61437E35)
                                   - ((v99 ^ 0x61437E35) & 0x400000AE)) ^ 0x9ADE38C8)];
  LOBYTE(v94) = v119;
  unsigned int v146 = ((2 * (v119 ^ 0x42)) | 0xFC7E1F22) - (v119 ^ 0x42) - 2118061969;
  LODWORD(v99) = *(_DWORD *)&v129[4 * (((v146 & 0x5E02102D ^ 0x25) + (v146 & 0x203D0FD2 ^ 0x202D0DD1) - 1) ^ 0x5E120295)];
  int v147 = *(_DWORD *)&v125[4 * (BYTE3(v119) ^ 0x26)];
  LODWORD(v119) = *(_DWORD *)&v127[4 * (v145 ^ 0x7701F6DF)] ^ *(_DWORD *)&v125[4 * (HIBYTE(v131) ^ 0x44)] ^ v105 ^ v145 ^ v99;
  LOBYTE(v94) = v119 ^ v94;
  int v148 = ((BYTE2(v131) ^ 0xD1) + (HIWORD(v131) & 0x8A ^ 0x9235E0A) - ((BYTE2(v131) ^ 0xD1) & 0x8A)) ^ 0x2B235EDA;
  unsigned int v149 = (v96 ^ 0xD2 | 0x3A36922E) - (v96 ^ 0xD2 | 0xC5C96DD1) - 976654895;
  unsigned int v150 = *(_DWORD *)&v127[4
                        * (((BYTE2(v131) ^ 0x40081292)
                          + (HIWORD(v131) & 0xE2 ^ 0x9531C060)
                          - ((BYTE2(v131) ^ 0x40081292) & 0x400810E2)) ^ 0x9531C234)] ^ *(_DWORD *)&v128[4 * ((((v37 >> 8) & 0xB0 ^ 0x281) + ((v37 >> 8) & 0x4F) - 1) ^ 0x22E)] ^ *(_DWORD *)&v129[4 * ((((2 * (v96 ^ 0x500439)) & 0xA0088A) - (v96 ^ 0x500439) - 1182058054) ^ 0xB9DB3DD3)] ^ ((v149 & 0x2224924F ^ 0x450CC449) + (v149 ^ 0xB2B21A06) - ((v149 ^ 0xB2B21A06) & 0x672CD64F)) ^ (v148 - ((2 * v148) & 0x40000646) + 1767587619) ^ v147;
  LODWORD(v37) = WORD1(v119);
  unsigned int v151 = *(_DWORD *)&v127[4
                        * ((-896581577 - (BYTE2(v150) ^ 0xBE | 0xCA8F4037) + (BYTE2(v150) ^ 0xBE | 0x3570BFC8)) ^ 0x3570BF57)] ^ *(_DWORD *)&v125[4 * (HIBYTE(v140) ^ 0xF4)] ^ *(_DWORD *)&v128[4 * (BYTE1(v119) ^ 0xA9)] ^ *(_DWORD *)&v129[4 * ((1181483157 - (v120 & 0xE7) + (v120 & 0x18 ^ 0x11) + 81) ^ 0x466C0095)] ^ ((v120 ^ 0x20802B08) + (v120 & 0x5A ^ 0x9F451452) - ((v120 ^ 0x20802B08) & 0xB5A)) ^ ((BYTE2(v150) ^ 0x30AE44E5) - ((2 * (BYTE2(v150) ^ 0x30AE44E5)) & 0x148810) + 52055560);
  LODWORD(v109) = (2023602545 - (BYTE2(v140) ^ 0x69 | 0x789DB971) + (BYTE2(v140) ^ 0x69 | 0x8762468E)) ^ 0x86634E9D;
  int v152 = (((2 * (BYTE2(v140) ^ 0xBB)) & 0x18C) - (BYTE2(v140) ^ 0xBB) + 125648697) ^ 0x375F978;
  int v153 = (((2 * (BYTE1(v150) ^ 0x7E)) | 0x123FC226) - (BYTE1(v150) ^ 0x7E) - 153084179) ^ 0xB1FE155;
  unsigned int v154 = *(_DWORD *)&v127[4 * ((736879307 - (v152 | 0x2BEBE2CB) + (v152 | 0xD4141D34)) ^ 0xD01CDBF0)] ^ *(_DWORD *)&v125[4 * (BYTE3(v120) ^ 0x2D)] ^ *(_DWORD *)&v128[4 * ((1082950689 - (v153 | 0x408C8421) + (v153 | 0xBF737BDE)) ^ 0xBD737B52)] ^ *(_DWORD *)&v129[4 * ((-89088980 - (v94 ^ 0xE1) + ((2 * (v94 ^ 0xE1)) & 0x1A6)) ^ 0xFAB09CD1)] ^ ((v94 & 0xB8 ^ 0x4C41A829) + (v94 & 0x47) - 1) ^ (((2 * v109) & 0x636E03AE) - v109 + 1313406504);
  unsigned int v155 = ((2 * (v150 ^ 0xEC)) | 0xC1153354) - (v150 ^ 0xEC) + 527787606;
  unsigned int v156 = *(_DWORD *)&v125[4 * (BYTE3(v119) ^ 0x22)] ^ *(_DWORD *)&v127[4
                                                                     * (((BYTE2(v120) ^ 0xE0044C20)
                                                                       + (WORD1(v120) & 0xF1 ^ 0xA8301D1)
                                                                       - ((BYTE2(v120) ^ 0xE0044C20) & 0xE0040CF1)) ^ 0xA83413D)] ^ *(_DWORD *)&v128[4 * (BYTE1(v140) ^ 0x85)] ^ *(_DWORD *)&v129[4 * (((v150 & 0x48 ^ 0x5F09) + (v150 & 0xB7) - 1) ^ 0x5F4F)] ^ ((BYTE2(v120) ^ 0x31) + (WORD1(v120) & 0x5D ^ 0x8274A84C) - ((BYTE2(v120) ^ 0x31) & 0x5D)) ^ ((v155 & 0xE897014 ^ 0xE814014) + (v155 ^ 0xF03AB9A8) - ((v155 ^ 0xF03AB9A8) & 0xE897014));
  LODWORD(v105) = ((BYTE2(v119) & 0xD3 ^ 0x7A135613) + (BYTE2(v119) & 0x2C ^ 0x25) - 1) ^ 0x1A5376C1;
  LODWORD(v94) = (799128137 - (v140 ^ 0x6A | 0x2FA1BA49) + (v140 ^ 0x6A | 0xD05E45B6)) ^ 0xC04E65B4;
  LOWORD(v119) = (v140 ^ 0x3F) + (v140 & 0xB1 ^ 0xDC80) - ((v140 ^ 0x3F) & 0xB1);
  unsigned int v157 = *(_DWORD *)&v127[4 * (((v37 & 0x40 ^ 0x240) - (v37 & 0x40) + (BYTE2(v119) ^ 0x82u)) ^ 0x2F0)] ^ *(_DWORD *)&v125[4 * (HIBYTE(v150) ^ 0xBC)] ^ *(_DWORD *)&v128[4 * (BYTE1(v120) ^ 0x4E)] ^ (((2 * v105) & 0x80804790) - v105 + 1024294967) ^ (-1607635322 - (v94 | 0xA02D6E86) + (v94 | 0x5FD29179)) ^ *(_DWORD *)&v129[4 * (((v119 & 0x56A ^ 0x5621A101) + (v119 & 0x295) - 1) ^ 0x5621A582)];
  if ((v156 ^ 0x4B20594D) >= 0xA13C3705) {
    char v158 = -109;
  }
  else {
    char v158 = -106;
  }
  int v159 = (v156 ^ 0x4B20594D) - ((2 * (v156 ^ 0x4B20594D) - 1115188746) & 0xFB357F2C) - 597784431;
  if ((v156 ^ 0x4B20594D) < 0xA13C3705) {
    int v159 = v156 ^ 0x36BAE6DB;
  }
  if (v159 == 2107293590) {
    unsigned __int8 v160 = v158;
  }
  else {
    unsigned __int8 v160 = v156 ^ 0xDB;
  }
  unsigned int v161 = (HIWORD(v157) & 0x8A ^ 0x95102D89) + (HIWORD(v157) & 0x75) - 1;
  unsigned int v162 = (((2 * (v154 ^ 0x8E)) | 0x62DA7BA6) - (v154 ^ 0x8E) + 1318240813) ^ 0xB1284CF7;
  unsigned int v163 = *(_DWORD *)&v127[4 * (((HIWORD(v157) & 0xA6 ^ 0x221) + (HIWORD(v157) & 0x59) - 1) ^ 0x23A)] ^ *(_DWORD *)&v125[4 * (HIBYTE(v151) ^ 0x4D)] ^ *(_DWORD *)&v128[4 * (((BYTE1(v156) ^ 0xCF) + 1942826930 - ((2 * (BYTE1(v156) ^ 0xCF)) & 0xFFFFFF87) + 17) ^ 0x73CD2FB2)] ^ ((v161 & 0x801008D1 ^ 0x402E1091) + (v161 ^ 0xBB508F42) - ((v161 ^ 0xBB508F42) & 0x240A0D1)) ^ *(_DWORD *)&v129[4 * ((v162 - ((2 * v162) & 0x1DB5ABD6) + 249222635) ^ 0xE9FA42D)];
  int v164 = v154 ^ v163 ^ 2;
  unsigned int v165 = (((v157 >> 8) & 0xCA ^ 0xFE61E783) - ((v157 >> 8) | 0xFFFFFFCA) - 2) ^ 0xD829E34F;
  int v166 = *(_DWORD *)&v128[4 * ((-813934702 - (v165 | 0xCF7C5792) + (v165 | 0x3083A86D)) ^ 0x16CBAC73)];
  unsigned int v167 = ((2 * v166) ^ 0xF48DB27A) - ((2 * ((2 * v166) ^ 0xF48DB27A)) & 0xE101B764) - 259990605;
  unsigned int v168 = (((v166 ^ 0x7A46D93D) + 1480419415) ^ 0x10122040)
       - ((2 * ((v166 ^ 0x7A46D93D) + 1480419415)) & 0xDFDBBF7E)
       + (v167 & 0xB07AD0AE ^ 0xC2DE297B)
       + ((2 * v167) & 0x60B5A110 ^ 0x6001A100)
       + 1;
  unsigned int v169 = v166 ^ ((v166 ^ 0x85B926C2) - ((2 * (v166 ^ 0x85B926C2) + 2) & 0x3DFD315C) + 520001711) ^ 0x358011E2 ^ (v168 - ((2 * v168 - 1432839046) & 0xA270A0E2) + 646225582);
  unsigned int v170 = 56953623 - (v160 ^ 0x8B | 0x3650B17) + (v160 ^ 0x8B | 0xFC9AF4E8);
  int v171 = ((v160 ^ 0xAF) - ((2 * (v160 ^ 0xAF)) & 0x94) - 1644405686) ^ 0x6D5F5E5B;
  __int16 v172 = (BYTE2(v154) ^ 0x21) - ((2 * (BYTE2(v154) ^ 0x21)) & 0xF8) + 22652;
  unsigned int v173 = (v172 & 0xCCE ^ 0x8B000487) + (v172 & 0x331) - 1;
  unsigned int v174 = *(_DWORD *)&v127[4 * (BYTE2(v151) ^ 0x70)] ^ *(_DWORD *)&v125[4 * (HIBYTE(v154) ^ 0x65)] ^ (((2 * (BYTE2(v151) ^ 0xC0E0A01B)) & 0x81C10098) - (BYTE2(v151) ^ 0xC0E0A01B) + 1650867) ^ *(_DWORD *)&v129[4 * ((v171 - ((2 * v171) & 0xE0440E64) - 244705486) ^ 0x1C91573)] ^ v170 ^ (v169 - ((2 * v169 - 1334128466) & 0xF8BF38D6) + 1419576514);
  int v175 = ((2 * (v157 ^ 0x83015A)) | 0x38484356) - (v157 ^ 0x83015A) - 472129963;
  unsigned int v176 = ((v157 & 0xDE ^ 0xAE5E609) + (v157 & 0x21) - 1) ^ 0x9B258FD6;
  unsigned int v177 = (v175 & 0x20 ^ 0xBDB17D6F) + 2 * (v175 & 0x20);
  int v178 = *(_DWORD *)&v129[4 * ((((2 * v176) & 0x2380C260) - v176 - 905867569) ^ 0x5BC1E735)];
  unsigned int v179 = v177 + 1660934903;
  BOOL v180 = ((v177 + 1112441489) & (v178 ^ 0x7BB13B80))
       - 1954072629
       - ((2 * ((v177 + 1112441489) & (v178 ^ 0x7BB13B80))) & 0x170E6F40) == -1954072629;
  unsigned int v181 = -563948075 - v177;
  if (v180) {
    unsigned int v181 = v179;
  }
  int v182 = (v178 ^ 0x7BB13B93) - 548493414 + v181 - ((2 * ((v178 ^ 0x7BB13B93) - 548493414 + v181)) & 0x5C0EC6C);
  unsigned int v183 = ((2 * (v175 | 0xFFFFFFDF)) & 0x7ECFFF6C)
       + ((v175 | 0xFFFFFFDF) ^ 0x3F67FFB6)
       + (((v175 ^ 0xB737B46C) + 1) ^ 0xF9FFFBFD)
       + ((2 * ((v175 ^ 0xB737B46C) + 1)) & 0xF3FFF7FA);
  unsigned int v184 = HIBYTE(v157) ^ 0x2D;
  unsigned int v185 = *(_DWORD *)&v127[4 * (v173 ^ 0x8B000C08)] ^ *(_DWORD *)&v125[4 * (HIBYTE(v156) ^ 0x16)] ^ *(_DWORD *)&v128[4 * (((BYTE1(v151) ^ 0x6A7A2F42) + ((v151 >> 8) & 0xCA ^ 0x1085D088) - ((BYTE1(v151) ^ 0x6A7A2F42) & 0x6A0024CA)) ^ 0x10FFDBF4)] ^ v173 ^ (v183 - ((2 * v183 - 1926231910) & 0x9A52838E) + 331433492) ^ (v182 + 48264758);
  unsigned int v186 = v185 ^ 0x40000010;
  unsigned int v187 = (BYTE2(v156) ^ 0x70) + (HIWORD(v156) & 0x3F ^ 0xCEF5DE0F) - ((BYTE2(v156) ^ 0x70) & 0x3F);
  int v188 = *(_DWORD *)&v127[4 * (((v187 & 0x2D) - 636581889 + (v187 & 0x3D2 ^ 0x12243)) ^ 0xDA0FA8E9)] ^ *(_DWORD *)&v125[4 * v184];
  unsigned int v189 = (v188 ^ BYTE2(v156) ^ 0xB0DEC986) + 1;
  unsigned int v190 = ((2 * v188) & 0xD5FEF5EE ^ 0xD57ED1EC) + (v188 ^ 0x85409309);
  unsigned int v191 = (v189 ^ 0x70EB7F3F) + v190 + ((2 * v189) & 0xE1D6FE7E);
  unsigned int v192 = v190
       - 1795128055
       + (BYTE2(v156) ^ ((BYTE2(v156) ^ 0x5F612078) + 935840254 + ((2 * (BYTE2(v156) ^ 0x2078) + 2) & 0x3F8 ^ 0xD17DFFFF)) ^ 0xD4BD4086 ^ (v191 - ((2 * v191 + 1210715028) & 0x87C8ADFA) + 1744395463));
  unsigned int v193 = (((v154 >> 8) & 0x3A ^ 0xEC6CC813) + ((v154 >> 8) & 0xC5) - 1) ^ 0x7C44CA9D;
  int v194 = (v151 ^ 0xB0) - 2 * ((v151 ^ 0xB0) & 0x1F) + 1300095007;
  unsigned int v195 = *(_DWORD *)&v129[4
                        * ((((2 * (v151 ^ 0xF)) & 0x72) - (v151 ^ 0xF) + 8646) ^ 0x2134)] ^ ((v194 & 0x100B500 ^ 0x90801100) + (v194 ^ 0x6937EE1F) - ((v194 ^ 0x6937EE1F) & 0x4423500)) ^ *(_DWORD *)&v128[4 * ((v193 - ((2 * v193) & 0x205004F4) + 434871930) ^ 0x89C39CF6)] ^ (v192 - ((2 * v192) & 0x89CEF3EC) - 991462922);
  unsigned int v196 = HIBYTE(v195) ^ 0xFD;
  int v197 = (((2 * (BYTE2(v195) ^ 0x1E)) | 0x45CC545A) - (BYTE2(v195) ^ 0x1E) - 585509421) ^ 0x2AA24A71;
  int v198 = (((v186 >> 8) & 0x14 ^ 0x3CC10811) + ((v186 >> 8) & 0xEB) - 1) ^ 0x783B821E;
  unsigned int v199 = *(_DWORD *)&v127[4 * (BYTE2(v195) ^ 6)] ^ *(_DWORD *)&v125[4 * (HIBYTE(v163) ^ 0x6D)] ^ (-1720333186
                                                                                                - (v197 | 0x9975CC7E)
                                                                                                + (v197 | 0x668A3381));
  unsigned int v200 = (v199 & 0x40000 | ((((v199 & 0x40000) >> 18) & 1) << 19) | 0xD3E33BFF) ^ 0x80000;
  unsigned int v201 = v200 + 1073673694;
  int v202 = *(_DWORD *)&v128[4 * ((((2 * v198) & 0x9E00456) - v198 + 1644943828) ^ 0x26F15328)] ^ 0x227BB16A;
  unsigned int v203 = ((v200 + 739820545) & v202) - 546129837 - ((2 * ((v200 + 739820545) & v202)) & 0xBEE10000);
  unsigned int v204 = -405967396 - v200;
  if (v203 == -546129837) {
    unsigned int v204 = v201;
  }
  unsigned int v205 = (v199 & 0xFFFBFFFF ^ 0x2573215E)
       + (v199 & 0x68B12E4D ^ 0x48840E01)
       - ((v199 & 0xFFFBFFFF ^ 0x2573215E) & 0x68B12E4D);
  unsigned int v206 = ((v174 ^ 0x988C7C54) - ((2 * (v174 ^ 0x988C7C54)) & 0x3008C828) - 1639488492) ^ 0x16E34A23;
  int v207 = ((v174 ^ 0xA3) - ((2 * (v174 ^ 0xA3)) & 0x1F0) + 760) ^ ((v205 & 0x14D6F84F ^ 0x10C29000)
                                                                                                  + (v205 ^ 0x6C356A4F)
                                                                                                  - ((v205 ^ 0x6C356A4F) & 0x14D6F84F)) ^ *(_DWORD *)&v129[4 * ((((2 * v206) | 0x8E035E9A) - v206 - 1191292749) ^ 0x5729FDA0)];
  int v208 = (BYTE2(v163) ^ 0x79) - ((2 * (BYTE2(v163) ^ 0x79)) & 0x8E) + 405950279;
  unsigned int v209 = v207 ^ (v202 - 333853149 + v204 - ((2 * (v202 - 333853149 + v204)) & 0xDA928768) - 313965644);
  int v210 = (v185 & 0xAA ^ 0x17482AA3) + (v186 & 0x55) - 1;
  unsigned int v211 = ((v185 ^ 0xB8) - ((2 * (v185 ^ 0xB8)) & 0x6E) - 746557897) ^ 0xD308CF37;
  unsigned int v212 = *(_DWORD *)&v127[4
                        * (((v208 & 0x18304E5F ^ 0x8244421E) + (v208 ^ 0x5D3B8D41) - ((v208 ^ 0x5D3B8D41) & 0x40014E5F)) ^ 0x9F7C8CBB)] ^ *(_DWORD *)&v128[4 * (BYTE1(v195) ^ 0x38)] ^ *(_DWORD *)&v125[4 * (HIBYTE(v174) ^ 0x37)] ^ *(_DWORD *)&v129[4 * ((((2 * v211) & 0x1000618) - v211 + 1376314611) ^ 0x5280456B)] ^ v210;
  int v213 = BYTE2(v163) ^ 0x8220045 ^ v212;
  int v214 = *(_DWORD *)&v125[4 * (HIBYTE(v185) ^ 0x8A)];
  unsigned int v215 = (-178658166 - (BYTE2(v174) ^ 0xD8 | 0xF559E48A) + (BYTE2(v174) ^ 0xD8 | 0xAA61B75)) ^ 0x5BB51B80;
  unsigned int v195 = v195;
  int v216 = v195 ^ 0x8D | 0x752AEFF7;
  int v217 = 181735432 - (v195 ^ 0x8D | 0xAD51008);
  unsigned int v218 = (1591975323 - (v195 ^ 0x3D | 0x5EE39D9B) + (v195 ^ 0x3D | 0xA11C6264)) ^ 0xBD19A664;
  int v219 = BYTE2(v185);
  int v220 = ((2 * (v219 ^ 0x42229068)) & 0x44421D8) - (v219 ^ 0x42229068) + 1704845843;
  unsigned int v221 = (((2 * (v219 ^ 0x5F)) | 0x4A473BE8) - (v219 ^ 0x5F) + 1524392460) ^ 0xC4D61F7D;
  unsigned int v222 = *(_DWORD *)&v127[4
                        * ((276778009 - (BYTE2(v174) ^ 0xEF | 0x107F4C19) + (BYTE2(v174) ^ 0xEF | 0x2F80B3E6)) ^ 0x2F80B3E0)] ^ v214 ^ *(_DWORD *)&v128[4 * (BYTE1(v163) ^ 0xBA)] ^ *(_DWORD *)&v129[4 * ((((2 * v218) | 0xB0F2D9A6) - v218 + 663130925) ^ 0xC47CA8E5)] ^ (((2 * v215) & 0xB749FF24) - v215 - 1537539987) ^ (v217 + v216);
  unsigned int v223 = *(_DWORD *)&v127[4 * ((((2 * v221) | 0xCD5B2DF2) - v221 + 424831239) ^ 0x875814C1)] ^ *(_DWORD *)&v125[4 * v196] ^ *(_DWORD *)&v129[4 * (((v164 ^ 0xC7) - ((2 * (v164 ^ 0xC7)) & 0x64) + 4914) ^ 0x13AB)] ^ (((2 * v164) & 0x124) + (v164 ^ 0xFFFFFFB6) - 1940823442) ^ v220 ^ *(_DWORD *)&v128[4 * ((((v174 >> 8) & 0x37) + ((v174 >> 8) & 0xC8 ^ 0x2081) - 1) ^ 0x20AB)];
  unsigned int v224 = HIBYTE(v223) ^ 0x80;
  int v225 = (BYTE2(v223) ^ 0xCB) + (HIWORD(v223) & 0x4E ^ 0x45CC304) - ((BYTE2(v223) ^ 0xCB) & 0x4E);
  unsigned int v226 = (2114105981 - (BYTE2(v223) ^ 0xA1 | 0x7E02B27D) + (BYTE2(v223) ^ 0xA1 | 0x81FD4D82)) ^ 0xC5B54F92;
  int v227 = *(_DWORD *)&v128[4 * (BYTE1(v222) ^ 0x96)];
  int v228 = (v227 ^ 0x7A46D93D) + 1480419415;
  unsigned int v229 = ((2 * v227) ^ 0xF48DB27A) - ((2 * ((2 * v227) ^ 0xF48DB27A)) & 0x1E4E8E1C) + 254232335;
  unsigned int v230 = (v228 ^ 0x317F4ABA)
       + ((2 * v228) & 0x62FE9574)
       + (v229 & 0xB07AD0AE ^ 0x80224207)
       + ((2 * v229) & 0x60F5A14C ^ 0xFFBB7FF3)
       + 1317057342;
  unsigned int v231 = *(_DWORD *)&v125[4 * (HIBYTE(v209) ^ 1)] ^ ((v225 & 0x99C ^ 0x7BA28811) + (v225 & 0x7663 ^ 0x80087243) - 1) ^ *(_DWORD *)&v127[4 * ((((2 * v226) & 0x54A31C9A) - v226 - 709987918) ^ 0x91E673D7)] ^ 0xB48B8F9F;
  int v232 = 2 * ((v231 & v230) - ((2 * (v231 & v230)) & 0x7923E42A)) + 2032395306;
  unsigned int v233 = ((2 * (v231 + v230)) & 0xFFBBCF5C)
       + ((v231 + v230) ^ 0x7FDDE7AE)
       + (v232 ^ 0xF16F403B)
       + ((2 * v232) & 0xEF66B7DC ^ 0x1DB97FAB);
  unsigned int v234 = ((v213 & 0xC6 ^ 0x2660CC5) + (v213 & 0x39) - 1) ^ *(_DWORD *)&v129[4
                                                                          * (BYTE2(v163) ^ 0x45 ^ v212 ^ 0x48)] ^ (v233 - ((2 * v233 - 274012028) & 0x9FB1097C) + 1202583808);
  unsigned int v235 = v234 ^ 0x49805021;
  int v236 = *(_DWORD *)&v127[4
                        * ((((2 * (BYTE2(v209) ^ 0x700104A0)) & 0x60020982) - (BYTE2(v209) ^ 0x700104A0) + 1209713470) ^ 0x381BC7B2)];
  unsigned int v237 = ((HIWORD(v209) << 21) ^ 0x9D000000) - ((2 * ((HIWORD(v209) << 21) ^ 0x9D000000)) & 0x13C00000) + 703151193;
  HIDWORD(v238) = v236 ^ 0x4A9;
  LODWORD(v238) = v236 ^ 0x941E7000;
  unsigned int v239 = ((((v237 & 0x1FE00000 ^ 0x6A00000)
          + (v237 & 0x5600000 ^ 0x214D35A5)
          - ((v237 & 0x1FE00000 ^ 0x6A00000) & 0x5600000)) ^ 0xFA402B94)
        - 1) ^ ((v238 >> 11) - ((2 * (v238 >> 11)) & 0x88E11634) - 999257318);
  unsigned int v240 = (((v239 << 15) ^ 0xE8460000) + 778730428 - ((2 * ((v239 << 15) ^ 0xE8460000)) & 0x5CD40000)) ^ 0x2E6A7BBC | (v239 >> 17) & 0xF ^ 0xC;
  int v241 = v240 - ((2 * v240) & 0x3F3E5058) + 530524204;
  HIDWORD(v238) = v241 ^ 3;
  LODWORD(v238) = v241 ^ 0x71149C70;
  LOWORD(v228) = (v222 ^ 0x1C) + (v222 & 0xB8 ^ 0x29A0) - ((v222 ^ 0x1C) & 0xB8);
  unsigned int v242 = (v222 ^ 0x73 | 0xFC13EDD2) - (v222 ^ 0x73 | 0x3EC122D) + 65802797;
  unsigned int v243 = *(_DWORD *)&v128[4 * (BYTE1(v223) ^ 0xC7)] ^ *(_DWORD *)&v125[4 * (HIBYTE(v212) ^ 0x31)] ^ ((v228 & 0x766 ^ 0xAA524607) + (v228 & 0x899) - 1) ^ *(_DWORD *)&v129[4 * (((v242 & 0xD802852D ^ 0x2089125) + (v242 & 0x24116AD2 ^ 0x21356811) - 1) ^ 0xDF2E14AA)] ^ (v239 >> 21) ^ ((v238 >> 4) - ((2 * (v238 >> 4)) & 0xF986EB94) - 54299190);
  int v244 = v243 ^ 0x82898;
  unsigned int v245 = ((2 * (BYTE2(v213) ^ 0x82)) & 0xFFFFFFFB) - (BYTE2(v213) ^ 0x82) + 514;
  int v246 = *(_DWORD *)&v127[4
                        * ((((2 * (BYTE2(v213) ^ 0x40411891)) | 0x8FEBB8D0) - (BYTE2(v213) ^ 0x40411891) + 940188568) ^ 0x87B4C4EC)];
  unsigned int v247 = (((2 * (v223 ^ 0xB910FCB2)) | 0xE0CECFF8) - (v223 ^ 0xB910FCB2) + 261658628) ^ 0x437F1950;
  int v248 = ((2 * v247) & 0x4D50E690) - v247 - 1722317641;
  int v249 = ((v223 ^ 0x76) + (v223 & 0x77 ^ 0x5550801) - ((v223 ^ 0x76) & 0x77777777)) ^ 0x25710857;
  unsigned int v250 = v246 ^ *(_DWORD *)&v125[4 * (HIBYTE(v222) ^ 0xB9)] ^ *(_DWORD *)&v128[4 * (BYTE1(v209) ^ 0xA3)] ^ *(_DWORD *)&v129[4 * ((((2 * v249) | 0x74466AFE) - v249 - 975385983) ^ 0x1A0735C6)] ^ v245;
  int v251 = v250 ^ v248 ^ 0x373AEDA6;
  unsigned int v252 = HIBYTE(v234) ^ 0x34;
  unsigned int v253 = HIBYTE(v243) ^ 0xD7;
  unsigned int v254 = *(_DWORD *)&v125[4 * v224] ^ *(_DWORD *)&v128[4 * (BYTE1(v212) ^ 0x95)] ^ *(_DWORD *)&v127[4 * (((BYTE2(v222) ^ 0xA84A247A) + (HIWORD(v222) & 0xEF ^ 0x47000885) - ((BYTE2(v222) ^ 0xA84A247A) & 0x880024EF)) ^ 0x674A082B)] ^ (1113358077 - (BYTE2(v222) ^ 0x1040997B | 0x425C7EFD) + (BYTE2(v222) ^ 0x1040997B | 0xBDA38102)) ^ *(_DWORD *)&v129[4 * (((v209 ^ 0xF5) + 178372491 - ((2 * (v209 ^ 0xF5)) & 0x116)) ^ 0xAA1BFD3)];
  LOBYTE(v224) = v209 ^ v254;
  unsigned int v255 = (v243 ^ 0x82898) >> 16;
  int v256 = *(_DWORD *)&v125[4 * v252];
  LOWORD(v246) = ((2 * (BYTE2(v254) ^ 0x89)) & 0x156) - (BYTE2(v254) ^ 0x89) - 31916;
  unsigned int v257 = (((v243 ^ 0x82898) & 0x4A ^ 0x901170B) + ((v243 ^ 0x82898) & 0xB5) - 1) ^ 0x98001FAF;
  unsigned int v258 = ((v243 ^ 0xB5) + (v243 & 0x47 ^ 0x1F0DE042) - ((v243 ^ 0xB5) & 0x47)) ^ 0x9763E84E;
  unsigned int v259 = *(_DWORD *)&v127[4 * (((v246 & 0xAD87 ^ 0xD00F2C83) + (v246 & 0x5278 ^ 0x1104259) - 1) ^ 0xD11FED77)] ^ *(_DWORD *)&v128[4 * ((-1822493693 - (BYTE1(v250) ^ 0x12143 | 0x935EF403) + (BYTE1(v250) ^ 0x12143 | 0x6CA10BFC)) ^ 0x6CA02A06)] ^ v256 ^ (((2 * (BYTE2(v254) ^ 0x213000B5)) | 0x2BFAAB10) - (BYTE2(v254) ^ 0x213000B5) + 1778559608) ^ (((2 * v257) & 0x210F6) - v257 - 1782144124) ^ *(_DWORD *)&v129[4 * ((((2 * v258) & 0x843978) - v258 + 171729731) ^ 0x82526BAB)];
  int v260 = *(_DWORD *)&v125[4 * v253];
  int v261 = *(_DWORD *)&v127[4
                        * (((HIWORD(v235) & 0x81)
                          + (BYTE2(v235) ^ 0x805280B9)
                          - ((BYTE2(v235) ^ 0x805280B9) & 0x28081)
                          + 797253888) ^ 0xAFD52141)];
  int v262 = ((2 * (BYTE2(v235) ^ 0x78A5BD67)) & 0x10A1340) - (BYTE2(v235) ^ 0x78A5BD67) - 63916449;
  unsigned int v263 = (v261 & 0x7F3187DA ^ 0x4A524238)
       + (v261 & 0x3E1182CA ^ 0xB40DA8C6)
       - ((v261 & 0x7F3187DA ^ 0x4A524238) & 0x3E5182EA);
  HIDWORD(v238) = v260 ^ 0x1D57;
  LODWORD(v238) = v260 ^ 0x7BA18000;
  int v264 = (v238 >> 13) - ((2 * (v238 >> 13)) & 0x4936A264) - 1533325006;
  unsigned int v265 = (v261 & 0x80CE7825 ^ 0xC22825) + (v261 & 0x4C3004 ^ 0x221C9698) - ((v261 & 0x80CE7825 ^ 0xC22825) & 0x4C3004);
  unsigned int v266 = ((v265 & 0x201385C ^ 0x2010E43) + (v265 & 0x81FEC0A1) - 1) ^ ((v262 & 0x808E5825 ^ 0x97820)
                                                                     + (v262 & 0x65005 ^ 0x2D460247)
                                                                     - ((v262 & 0x808E5825 ^ 0x97820) & 0x67005)) ^ 0xADD4BC9D | v263 ^ v262 & 0x1007DA ^ 0xC01F685C;
  int v267 = v266 + 327213056 - ((2 * v266) & 0x2701D30E) + 2439;
  HIDWORD(v238) = v267 ^ 0x987;
  LODWORD(v238) = v267 ^ 0x1380E000;
  int v268 = ((v238 >> 13) - ((2 * (v238 >> 13)) & 0x625F9AFC) - 1322267266) ^ v264;
  HIDWORD(v238) = v268 ^ 0x28974;
  LODWORD(v238) = v268 ^ 0x1F680000;
  unsigned int v269 = (((v250 ^ v248 ^ 0xA6) ^ 0x36)
        + (v251 & 0xCC ^ 0xE2424CC8)
        - (((v250 ^ v248 ^ 0xA6) ^ 0x36) & 0xCCCCCCCC)) ^ 0x72C359EE;
  int v270 = ((v255 & 0x4D ^ 0x2A84E01) + (v255 & 0xB2 ^ 3) - 1) ^ 0xAA9CD7F;
  unsigned int v271 = *(_DWORD *)&v129[4 * ((1832507032 - (v269 | 0x6D39D698) + (v269 | 0x92C62967)) ^ 0x2473C1A)] ^ *(_DWORD *)&v128[4 * (BYTE1(v254) ^ 0xCB)] ^ (((v250 ^ v248 ^ 0xA6) ^ 0x448A0819) + (v251 & 0x4F ^ 0x8341C046) - (((v250 ^ v248 ^ 0xA6) ^ 0x448A0819) & 0x400084F)) ^ ((v238 >> 19) - ((2 * (v238 >> 19)) & 0x40A9EB76) - 1605044805);
  unsigned int v272 = (258450838 - (v224 ^ 0x95 | 0xF67A596) + (v224 ^ 0x95 | 0xF0985A69)) ^ 0xB0BB7FE9;
  unsigned int v273 = (-1238434640 - (v224 ^ 0x7E | 0xB62EFCB0) + (v224 ^ 0x7E | 0x49D1034F)) ^ 0x6951012B;
  unsigned int v274 = HIBYTE(v254) ^ 0xCD;
  unsigned int v275 = *(_DWORD *)&v125[4 * (HIBYTE(v250) ^ 0x6D)] ^ *(_DWORD *)&v128[4 * (BYTE1(v235) ^ 0xC5)] ^ *(_DWORD *)&v129[4 * ((-1305971023 - (v273 | 0xB22876B1) + (v273 | 0x4DD7894E)) ^ 0x6D578B26)] ^ (v272 - ((2 * v272) & 0x481F44F6) + 605004411) ^ (((2 * v270) & 0x1000029A) - v270 - 1044531534) ^ *(_DWORD *)&v127[4 * (((BYTE2(v244) ^ 0xC013014C) - ((2 * (BYTE2(v244) ^ 0xC013014C)) & 0x80200280) + 1769258304) ^ 0xA967BCB4)];
  LOWORD(v267) = ((2 * (BYTE2(v251) ^ 0xE4)) & 0x4A) - (BYTE2(v251) ^ 0xE4) - 23078;
  int v276 = ((v235 ^ 0x26) - ((2 * (v235 ^ 0x26)) & 0x58) + 561760556) ^ 0x7F3AC12F;
  unsigned int v277 = *(_DWORD *)&v127[4 * ((((2 * (BYTE2(v251) ^ 0x69)) & 0xFFFFFFE7) - (BYTE2(v251) ^ 0x69) + 524) ^ 0x2D7)] ^ *(_DWORD *)&v125[4 * v274] ^ *(_DWORD *)&v129[4 * ((((2 * (v235 ^ 0xD)) | 0xC3ABC748) - (v235 ^ 0xD) - 1641407396) ^ 0x61D5E3A9)] ^ ((v267 & 0x3D3 ^ 0x723DA13) + (v267 & 0x42C ^ 0x20002009) - 1) ^ (((2 * v276) | 0x472525DE) - v276 + 1550675217) ^ *(_DWORD *)&v128[4 * ((454883710 - (BYTE1(v244) ^ 0xEC | 0x1B1CF97E) + (BYTE1(v244) ^ 0xEC | 0xE4E30681)) ^ 0xE4E306DF)];
  unsigned int v278 = ((v271 ^ 0x7F) - ((2 * (v271 ^ 0x7F)) & 0xDC) - 1229360530) ^ 0x96AB622E;
  unsigned int v279 = ((v271 & 0x61 ^ 0x89C1E861) - (v271 & 0x61) + (v271 ^ 0x88)) ^ 0x4591A860;
  unsigned int v280 = *(_DWORD *)&v127[4
                        * (((((HIWORD(v277) & 0xCA ^ 0xC2FC1343) - 1) & 0x42180288 ^ 0x4000088)
                          + ((((HIWORD(v277) & 0xCA ^ 0xC2FC1343) - 1) | HIWORD(v277) & 0x35) ^ 0x5A9F4E46)
                          - (((((HIWORD(v277) & 0xCA ^ 0xC2FC1343) - 1) | HIWORD(v277) & 0x35) ^ 0x5A9F4E46) & 0x90425188)) ^ 0x4E390E4D)] ^ *(_DWORD *)&v125[4 * (HIBYTE(v259) ^ 0xAA)] ^ *(_DWORD *)&v128[4 * (BYTE1(v275) ^ 0x2B)] ^ BYTE2(v277) ^ (-1650916708 - (v278 | 0x9D99029C) + (v278 | 0x6266FD63)) ^ *(_DWORD *)&v129[4 * ((v279 - ((2 * v279) & 0x802005D4) - 533581078) ^ 0x2C6272B1)];
  int v281 = (BYTE2(v259) ^ 0x44) - ((v259 >> 15) & 0x142) + 601932961;
  unsigned int v282 = (v281 & 0x40C76B ^ 0x812156B) + (v281 ^ 0xB3E9CA00) - ((v281 ^ 0xB3E9CA00) & 0x8076B);
  int v283 = ((BYTE1(v277) ^ 0xE2) - ((2 * (BYTE1(v277) ^ 0xE2)) & 0x160) + 1420676784) ^ 0x568DEA91;
  int v284 = *(_DWORD *)&v127[4 * (v282 ^ 0x9853D9E3)] ^ *(_DWORD *)&v128[4
                                                                    * ((-1863835288
                                                                      - (v283 | 0x90E82168)
                                                                      + (v283 | 0x6F17DE97)) ^ 0x6D37FA24)];
  unsigned int v285 = ((v275 & 3) + (v275 ^ 0xFFFFFF1B) + (v275 | 0xD93C41FC) + 1) ^ 0xD92C032F;
  unsigned int v286 = (BYTE2(v271) ^ 0x86 | 0x2B574655) - (BYTE2(v271) ^ 0x86 | 0xD4A8B9AA) - 727139926;
  unsigned int v287 = (-1128068258 - (BYTE2(v271) ^ 0xB2 | 0xBCC30B5E) + (BYTE2(v271) ^ 0xB2 | 0x433CF4A1)) ^ 0xBB63429;
  unsigned int v288 = v284 ^ *(_DWORD *)&v129[4 * ((v285 - ((2 * v285) & 0x4C3012AA) + 1712851285) ^ 0x66084B60)] ^ (((2 * (v275 ^ 0x23)) | 0xC9A625E2) - (v275 ^ 0x23) + 455929103) ^ v282 ^ *(_DWORD *)&v125[4 * (HIBYTE(v271) ^ 0x49)];
  int v289 = *(_DWORD *)&v127[4 * ((((2 * v287) & 0x8507024) - v287 - 69744659) ^ 0xB35D075D)];
  int v290 = *(_DWORD *)&v125[4 * (HIBYTE(v275) ^ 0x73)];
  unsigned int v291 = (((2 * (v277 ^ 0x48)) & 0x19A) - (v277 ^ 0x48) + 2142503474) ^ 0xEFB43236;
  LOWORD(v279) = (v277 ^ 0x11) + (v277 & 0xED ^ 0x8EC) - ((v277 ^ 0x11) & 0xED);
  int v292 = BYTE2(v275);
  unsigned int v293 = -285819586 - (v292 ^ 0x7D | 0xEEF6BD3E) + (v292 ^ 0x7D | 0x110942C1);
  int v294 = ((v292 ^ 9) - ((2 * (v292 ^ 9)) & 0xCA) + 129817701) ^ 0xF8FFA61;
  int v295 = *(_DWORD *)&v125[4 * (HIBYTE(v277) ^ 0xA5)];
  unsigned int v296 = v290 ^ *(_DWORD *)&v128[4 * (BYTE1(v259) ^ 0xA9)] ^ *(_DWORD *)&v129[4
                                                                            * (((v279 & 0x5F3 ^ 0x1498C422)
                                                                              + (v279 & 0xA0C ^ 0x1611801)
                                                                              - 1) ^ 0x15F9D479)] ^ (((2 * v291) & 0x200026B0) - v291 + 733899943) ^ ((v286 & 0x574217 ^ 0x12B002) + (v286 & 0x2B0005E8 ^ 0x3A000001) - 1) ^ v289;
  unsigned int v297 = (BYTE1(v271) ^ 0xF | 0x7D504A21) - (BYTE1(v271) ^ 0xF | 0x82AFB5DE) - 2102413858;
  int v298 = ((v259 ^ 0x5F) - ((2 * (v259 ^ 0x5F)) & 0xB4) + 201616474) ^ 0x4E9445DE;
  unsigned int v299 = *(_DWORD *)&v127[4 * ((-314247119 - (v294 | 0xED44F831) + (v294 | 0x12BB07CE)) ^ 0x1A88210A)] ^ v295 ^ *(_DWORD *)&v129[4 * ((((2 * v298) & 0x500034E) - v298 + 2098363992) ^ 0x3F82571E)] ^ v293 ^ *(_DWORD *)&v128[4 * (((v297 & 0x14004815 ^ 0x10011004) + (v297 & 0x695003EA ^ 0xAB6202E9) - 1) ^ 0xC6335878)];
  unsigned int v300 = v299 ^ ((v259 & 8)
               + 1808830976
               + (v259 ^ 0x111C107C)
               - ((v259 ^ 0x111C107C) & 0x11141008)
               + 3305472);
  unsigned int v301 = v288 ^ ((v288 ^ 0x113B41F7) - ((2 * (v288 ^ 0x113B41F7) + 1585363854) & 0xE5717ECC) - 1577575123) ^ ((v288 ^ 0x3E041C31) - ((2 * (v288 ^ 0x3E041C31) + 2) & 0xEB9D0852) - 171015126) ^ 0x468DD881;
  unsigned int v302 = v301 - 2 * ((v301 + 792681926) & 0x6D597E5F ^ v301 & 1) - 1667703772;
  int v303 = ((2 * (BYTE2(v300) ^ 0xB5)) | 0x15DDE496) - (BYTE2(v300) ^ 0xB5) - 183431755;
  int v304 = ((v302 & 0x79 ^ 0x17E06B40) + (v302 & 0x86 ^ 5) - 1) ^ 0x17B24D18;
  unsigned int v305 = *(_DWORD *)&v127[4 * (((v303 & 0x80AA9FF ^ 0x400099A) + (v303 & 0x2E45600 ^ 0x42E05001) - 1) ^ 0x4C0EAB7A)] ^ *(_DWORD *)&v125[4 * (HIBYTE(v280) ^ 2)] ^ *(_DWORD *)&v128[4 * (BYTE1(v296) ^ 0xF6)] ^ *(_DWORD *)&v129[4 * ((493475973 - (v304 | 0x1D69D885) + (v304 | 0xE296277A)) ^ 0xE2C40111)] ^ (787588376 - (v302 ^ 0xB1 | 0x2EF1A518) + (v302 ^ 0xB1 | 0xD10E5AE7));
  unsigned int v306 = (HIWORD(v280) & 0xA0) + (BYTE2(v280) ^ 0xFFFFFFEA) + (BYTE2(v280) | 0x937B175F) + 1;
  unsigned int v307 = (((v299 >> 8) & 0x34 ^ 0x64890425) + ((v299 >> 8) & 0xCB) - 1) ^ 0x64890497;
  int v308 = ((v296 & 0x9D ^ 0x5EC4766) - (v296 & 0x62)) ^ 0xFE65E66;
  int v309 = (HIWORD(v302) & 0x49 ^ 0x3D17AD01) + (HIWORD(v302) & 0xB6 ^ 0xA3) - 1;
  unsigned int v310 = HIWORD(v296);
  unsigned int v311 = *(_DWORD *)&v125[4 * (HIBYTE(v302) ^ 0x30)] ^ *(_DWORD *)&v128[4 * v307] ^ *(_DWORD *)&v129[4 * (((v296 & 0x43 ^ 0x201) + (v296 & 0xBC ^ 0xB5) - 1) ^ 0x2A4)] ^ *(_DWORD *)&v127[4 * (((v306 & 0xD2D83615 ^ 0x40C02211) + (v306 & 0x2D27C9EA ^ 0x202341CB) - 1) ^ 0xF39874D5)] ^ (((2 * (BYTE2(v280) ^ 0xFA)) | 0x4432ADA) - (BYTE2(v280) ^ 0xFA) + 1574857363) & 0x3FFFFFFF ^ (((2 * v308) & 0x101023CC) - v308 - 1010685415);
  int v312 = *(_DWORD *)&v125[4 * (HIBYTE(v296) ^ 0xA1)];
  unsigned int v313 = (v300 ^ 0xBE | 0x7262AEA5) - (v300 ^ 0xBE | 0x8D9D515A) - 1919069862;
  int v314 = *(_DWORD *)&v125[4 * (HIBYTE(v300) ^ 0xAE)];
  char v315 = (BYTE2(v296) & 0x58 ^ 0x1F) + 121;
  unsigned int v316 = ((BYTE2(v296) ^ 0x76) + (HIWORD(v296) & 0x3D ^ 0xD700DA09) - ((BYTE2(v296) ^ 0x76) & 0x3D)) ^ 0xD309DCCA;
  unsigned int v317 = (v316 - ((2 * v316) & 0x8000AD6) - 1103692437) ^ 0xBA3FFBAF;
  unsigned int v318 = (v310 & 0xA7 ^ 0x25 | 0xE799723E) - (v310 & 0xA7 ^ 0x25 | 0x18668DC1) + 409374145;
  unsigned int v319 = *(_DWORD *)&v127[4 * (BYTE2(v302) ^ 0x9D)] ^ v312 ^ *(_DWORD *)&v128[4
                                                                            * ((((v280 >> 8) & 0x5B ^ 0x8909843)
                                                                              + ((v280 >> 8) & 0xA4 ^ 0x12202005)
                                                                              - 1) ^ 0x1AB0B8EF)] ^ *(_DWORD *)&v129[4 * (((v300 ^ 0x41) + (v300 & 0x15 ^ 0x814) - ((v300 ^ 0x41) & 0x15)) ^ 0x8A4)] ^ ((v313 & 0x12400A32 ^ 0x86050231) + (v313 & 0x6022A5CD) - 1) ^ ((v309 & 0x3BA ^ 0x5403823) + (v309 & 0x45) - 1);
  int v320 = *(_DWORD *)&v127[4 * v317];
  unsigned int v321 = (((2 * (BYTE1(v302) ^ 0xBFB42D79)) | 0x46CBD7CC) - (BYTE1(v302) ^ 0xBFB42D79) - 593882086) ^ 0x1E11CFA0;
  int v322 = *(_DWORD *)&v129[4
                        * ((-1907126699
                          - (v280 ^ 0xA5)
                          + ((2 * (v280 ^ 0xA5)) & 0x142)
                          + 9) ^ 0x8E538E55)] ^ v280 ^ 0x1E5EB611;
  unsigned int v323 = (v322 & 0x9AAB99F2 ^ 0xA028000)
       + (v322 & 0x922A18B2 ^ 0x956C1ABB)
       - ((v322 & 0x9AAB99F2 ^ 0xA028000) & 0x922A18B2);
  int v324 = ((v322 & 0x6554660D ^ 0x1402409) - ((2 * (v322 & 0x6554660D ^ 0x1402409)) & 0x48280002) - 1531574045) ^ 0x61B40C8F;
  unsigned int v325 = v320 ^ v314 ^ v323 ^ ((v315 & 0x78 ^ 0xA09EDFBF) - ((2 * (v315 & 0x78 ^ 0xA09EDFBF)) & 0x400DA63E) + 2135347999) ^ ((v318 & 0xA48970EA ^ 0x286414C1) + (v318 & 0x43100215) - 1) ^ *(_DWORD *)&v128[4 * ((v321 - ((2 * v321) & 0xE32D265C) - 241790162) ^ 0x73569A88)] ^ (v324 - ((2 * v324) & 0x70DCCCD4) + 946792170);
  unsigned int v326 = ((v305 >> 23) & 0x11E ^ 6) + (HIBYTE(v305) ^ 0xFEAEFFAC);
  unsigned int v327 = ((2 * ((HIBYTE(v305) ^ 0xFFFFFF3F) + 1)) & 0xBDB5BFFE)
       + (((HIBYTE(v305) ^ 0xFFFFFF3F) + 1) ^ 0x5EDADFFF)
       + v326;
  unsigned int v328 = v326 + 22085745 + ((v327 - ((2 * v327 + 1156333796) & 0xA04604C2) + 1922638547) ^ 0x2FDCFD9F);
  v329 = (char *)*(&off_1EF0E5660 + (int)v126 - 1198) - 12;
  uint64_t v330 = (uint64_t)*(&off_1EF0E5660 + (int)(v126 ^ 0x55D));
  int v331 = *(_DWORD *)(v330 + 4 * (((v325 ^ 0x43100A14) >> 16) ^ 5u));
  int v332 = v331 - ((2 * v331 + 421960910) & 0x44CECEAA) - 1359301188;
  unsigned int v333 = (((2 * (BYTE2(v305) ^ 0x7E)) & 0xFFFFFF83) - (BYTE2(v305) ^ 0x7E) - 1526045634) ^ 0xFD2204DC;
  int v334 = *(_DWORD *)(v330 + 4 * ((((2 * v333) & 0x90108FB4) - v333 - 1314901979) ^ 0xE9885094));
  unsigned int v335 = v334 - ((2 * v334 + 421960910) & 0xC15D53DA) + 1833039956;
  unsigned int v336 = (((v325 ^ 0x43100A14) >> 8) & 0xA5 ^ 0x3334C605) + (((v325 ^ 0x43100A14) >> 8) & 0x5A ^ 3) - 1;
  unsigned int v337 = (v319 & 0x38 ^ 0x19) + ((v319 ^ 0x2020A4C1) & 0xC7 ^ 0xD1636D85) - 1;
  int v338 = *(_DWORD *)(v330 + 4 * (BYTE2(v311) ^ 0xD5u));
  long long v339 = (char *)*(&off_1EF0E5660 + (int)(v126 ^ 0x500)) - 4;
  int32x4_t v340 = (char *)*(&off_1EF0E5660 + (int)v126 - 1173) - 4;
  int v341 = v338 - ((2 * v338 + 421960910) & 0x2FE6DDC2) + 612810056;
  int v342 = *(_DWORD *)&v340[4 * (((v336 & 0x34F ^ 0x40B2C048) + (v336 & 0x4B0 ^ 0x8001CA1) - 1) ^ 0x48B2DA7D)] ^ *(_DWORD *)&v329[4 * (HIBYTE(v311) ^ 0x54)] ^ *(_DWORD *)&v339[4 * (((v337 & 0x406969 ^ 0x24981208) + (v337 ^ 0x9B416DE3) - ((v337 ^ 0x9B416DE3) & 0xA220069)) ^ 0x64D87B67)] ^ v335 ^ (((32 * v335) ^ 0x15D53DA0) - ((2 * ((32 * v335) ^ 0x15D53DA0)) & 0x4412C280) - 1576443576);
  LOBYTE(v337) = v305 ^ BYTE2(v300) ^ 0xC4;
  unsigned int v343 = (((v305 >> 8) & 0x46 ^ 0xCAAA8F46) - ((v305 >> 8) & 0x46) + (BYTE1(v305) ^ 0x29)) ^ 0x1BAB9AE4;
  int v344 = *(_DWORD *)(v330 + 4 * (BYTE2(v319) ^ 0x95u));
  int v345 = *(_DWORD *)&v340[4 * ((((2 * v343) & 0x364C) - v343 + 1402594521) ^ 0x8298F176)];
  unsigned int v346 = v344 - ((2 * v344 + 421960910) & 0xEA1D8DB8) + 27399491;
  int v347 = *(_DWORD *)&v339[4
                        * ((121354578 - (v337 ^ 0x51) + ((2 * (v337 ^ 0x51)) & 0x15A)) ^ 0x73BB9E4)];
  unsigned int v348 = *(_DWORD *)&v329[4 * v328] ^ LODWORD(STACK[0x3F0]) ^ *(_DWORD *)&v340[4
                                                                             * ((1730847219
                                                                               - (((unsigned __int16)(v319 ^ 0xA4C1) >> 8) ^ 0x150024F5 | 0x672AA1F3)
                                                                               + (((unsigned __int16)(v319 ^ 0xA4C1) >> 8) ^ 0x150024F5 | 0x98D55E0C)) ^ 0x8DD57AB3)] ^ *(_DWORD *)&v339[4 * (v311 ^ 0x4A)] ^ v332 ^ (((32 * v332) ^ 0x4CECEAA0) - ((2 * ((32 * v332) ^ 0x4CECEAA0)) & 0x3829E840) + 471135271);
  int v349 = *(_DWORD *)&v329[4 * (HIBYTE(v319) ^ 5)] ^ LODWORD(STACK[0x400]) ^ *(_DWORD *)&v339[4
                                                                                           * (v325 ^ 0xE5)] ^ v341;
  uint64_t v350 = v349 ^ (((32 * v341) ^ 0xFE6DDC20) - ((2 * ((32 * v341) ^ 0xFE6DDC20)) & 0x80509A80) + 1076383060) ^ v345;
  uint64_t v351 = *(_DWORD *)&v329[4 * (HIBYTE(v325) ^ 0x87)] ^ LODWORD(STACK[0x408]) ^ *(_DWORD *)&v340[4 * (BYTE1(v311) ^ 0xC4)] ^ v347 ^ v346 ^ (((32 * v346) ^ 0xA1D8DB80) - ((2 * ((32 * v346) ^ 0xA1D8DB80)) & 0xAA422FC0) - 719251458);
  uint64_t v352 = (((LODWORD(STACK[0x3F8]) ^ 0x8186395E ^ v342) & (LODWORD(STACK[0x3F8]) ^ 0xB5BE02EC))
        - ((2 * ((LODWORD(STACK[0x3F8]) ^ 0x8186395E ^ v342) & (LODWORD(STACK[0x3F8]) ^ 0xB5BE02EC))) & 0x6142C8EA)
        + 815883381) ^ ((v342 ^ 0xCBC7C44D | LODWORD(STACK[0x3F8]) ^ 0xB5BE02EC)
                      - ((2 * (v342 ^ 0xCBC7C44D | LODWORD(STACK[0x3F8]) ^ 0xB5BE02EC)) & 0x11ABA7E6)
                      - 1999252493);
  unint64_t v353 = (char *)*(&off_1EF0E5660 + (int)(v126 ^ 0x549)) - 12;
  LOBYTE(v342) = v353[BYTE3(v350) ^ 0x32];
  v354 = (unsigned char *)(v373 + STACK[0x438]);
  v354[1] = (v342 - ((2 * v342 - 98) & 0xC4) + 49) ^ 0x22;
  LOBYTE(v342) = v353[BYTE3(v351) ^ 0xFBLL];
  v354[5] = (v342 - ((2 * v342 + 30) & 0x16) - 38) ^ 0x29;
  int v355 = (v349 ^ (((32 * v341) ^ 0x20) - ((2 * ((32 * v341) ^ 0x20)) & 0x80) + 84) ^ v345) ^ 0x6DA67473;
  unsigned int v356 = (((2 * v355) & 0x8040C022) - v355 - 1379494162) ^ 0x164C6348;
  uint64_t v357 = (uint64_t)*(&off_1EF0E5660 + (int)(v126 ^ 0x5E1));
  LOBYTE(v356) = *(unsigned char *)(v357 + ((1559850933 - (v356 | 0x5CF96FB5) + (v356 | 0xA306904A)) ^ 0x752A11EBLL));
  v354[4] = (v356 - ((2 * v356 + 126) & 0x6C) + 53) ^ 0x94;
  *(v354 - 4) = (*(unsigned char *)(v357 + (v348 ^ 0xA6))
               - ((2 * *(unsigned char *)(v357 + (v348 ^ 0xA6)) + 126) & 0x68)
               + 51) ^ 0xDF;
  unint64_t v358 = (char *)*(&off_1EF0E5660 + (int)v126 - 1278) - 8;
  LOBYTE(v356) = v358[(808273730 - (BYTE1(v350) ^ 0x53) + ((2 * (BYTE1(v350) ^ 0x53)) & 0x4C) + 151) ^ 0x302D4742];
  v354[3] = (-((32 * v356 + 96) & 0x40) - 48 * v356 + 81) ^ (-51 * v356 - ((26 * v356 + 52) & 0x33) - 45) ^ 0x26;
  LOBYTE(v356) = v353[HIBYTE(v348) ^ 0x62];
  *(v354 - 7) = (v356 - ((2 * v356 - 98) & 0xCC) + 53) ^ 0x41;
  unsigned int v359 = ((BYTE1(v348) ^ 0x4B) + ((v348 >> 8) & 0x55 ^ 0xC599F814) - ((BYTE1(v348) ^ 0x4B) & 0x55555555)) ^ 0xD59958CC;
  LOBYTE(v359) = v358[(v359 - (a26 & (2 * v359)) + 1247594009) ^ 0x5A5C669ALL];
  unsigned int v360 = ((WORD1(v352) & 0x27 ^ 0x5155D21) + (WORD1(v352) & 0xD8 ^ 0xD1) - 1) ^ 0x8D663DA5;
  int v361 = ((2 * v360) | 0x1B7CA43A) - v360 + 1916906979;
  int v362 = ((709 - (~v361 & 0x40)) & 0x340 ^ 0x251) + 45;
  *(v354 - 5) = (-51 * v359 - ((26 * v359 + 20) & 0x14) - 60) ^ (-48 * v359 - ((96 - 96 * v359) & 0xBF) - 117) ^ 0x54;
  unsigned int v363 = (v362 & 0xFFFFFFC1) - ((2 * v362) & 0x400) + 595096099;
  unsigned int v364 = (-665388211 - (v361 & 0xBF ^ 0x2E | 0xD856FB4D) + (v361 & 0xBF ^ 0x2E | 0x27A904B2)) ^ 0xA72B0539;
  v365 = (char *)*(&off_1EF0E5660 + (int)(v126 ^ 0x50B)) - 4;
  int v366 = v365[(((2 * v364) | 0x234C10B6) - v364 + 1851389861) ^ 0x325C7BC8 ^ v363];
  HIDWORD(v238) = v366 ^ 0xD;
  LODWORD(v238) = (v366 ^ 0xFFFFFFDF) << 24;
  *(v354 - 2) = ((v238 >> 28) - ((2 * (v238 >> 28)) & 0x6E) - 73) ^ 0x50;
  v354[8] = (*(unsigned char *)(v357 + (v351 ^ 0xFALL))
           + (~(2 * *(unsigned char *)(v357 + (v351 ^ 0xFALL)) + 126) | 0x87)
           + 60) ^ 0x44;
  int v367 = v365[((BYTE2(v351) ^ 0xE) - ((2 * (BYTE2(v351) ^ 0xE)) & 0xCEu) + 9063) ^ 0x23C4];
  HIDWORD(v238) = v367 ^ 0xD;
  LODWORD(v238) = (v367 ^ 0xFFFFFFDF) << 24;
  v354[6] = ((v238 >> 28) - ((2 * (v238 >> 28)) & 0x56) - 85) ^ 0x88;
  LOBYTE(v367) = v353[BYTE3(v352) ^ 0xA2];
  *(v354 - 3) = (v367 - ((2 * v367 + 30) & 0x3A) + 108) ^ 0xF4;
  LOBYTE(v367) = v358[((BYTE1(v351) ^ 0xC2)
                     + ((v351 >> 8) & 0x1E ^ 0x805AEA1C)
                     - ((BYTE1(v351) ^ 0xC2) & 0x1E)) ^ 0x805AEA01];
  v354[7] = (48 * v367 - 50) ^ (-51 * v367 - ((116 - 102 * v367) & 0xD6) - 91) ^ 0x30;
  unsigned int v368 = (640200488 - (v352 ^ 0xDA | 0x2628AF28) + (v352 ^ 0xDA | 0xD9D750D7)) ^ 0xF9DFD0DF;
  LOBYTE(v368) = *(unsigned char *)(v357 + ((((2 * v368) & 0x4119613E) - v368 + 527650656) ^ 0x3F7BCFF7));
  unsigned char *v354 = (((v368 - ((2 * v368 + 6) & 4) + 9) ^ 2) - 8) ^ 0xB;
  LOWORD(v368) = ((2 * (BYTE2(v350) ^ 0xFD)) & 0x2A) - (BYTE2(v350) ^ 0xFD) + 31978;
  int v369 = v365[((v368 & 0x110 ^ 0x4085101) + (v368 & 0x6EF) - 1) ^ 0x4085548];
  HIDWORD(v238) = v369 ^ 0xD;
  LODWORD(v238) = (v369 ^ 0xFFFFFFDF) << 24;
  v354[2] = ((v238 >> 28) - ((2 * (v238 >> 28)) & 0xFB) + 125) ^ 0x70;
  int v370 = v365[BYTE2(v348) ^ 0x70];
  HIDWORD(v238) = v370 ^ 0xD;
  LODWORD(v238) = (v370 ^ 0xFFFFFFDF) << 24;
  *(v354 - 6) = ((v238 >> 28) - ((2 * (v238 >> 28)) & 0x56) + 43) ^ 0x85;
  LOBYTE(v370) = v358[(((2 * (BYTE1(v352) ^ 0x20102B7)) & 0x2015A) - (BYTE1(v352) ^ 0x20102B7u) + 377362002) ^ 0x147F14F5];
  unint64_t v371 = STACK[0x438];
  *(v354 - 1) = (48 * v370 - 53) ^ 0x62 ^ (-51 * v370 + ~(2 * ((-51 * v370 + 58) & 0x55 ^ (-51 * v370) & 1)) - 113);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int8 *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(STACK[0x460] + 8 * (int)((208 * ((v371 + 9) > 0x14F)) ^ v126)))(v351, 4294967245, 85, v352, v350, v357, 84, v126, a3, a4, a5, a6, a7, a8, a9, a10, v373, a12, a13,
           a14,
           a15,
           a16,
           a17,
           a18,
           a19,
           a20,
           a21,
           v374,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           v375,
           v376);
}

uint64_t sub_19E72A09C(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 8);
  __int16 v2 = *(_DWORD *)(result + 20) ^ (-20369 * ((-2 - ((result | 0xF254) + (~(_WORD)result | 0xDAB))) ^ 0xF21F));
  *(_DWORD *)(v1 - 0x542A6DEB665DB906) = ((v2 & 0x1FF ^ 0xB8 | 0x6D02BEDD)
                                          - (v2 & 0x1FF ^ 0xB8 | 0x92FD4122)
                                          - 1828896478) ^ 0xA115F082;
  *(void *)(v1 - 0x542A6DEB665DB926) = 0x441025E4395D8874;
  *(_DWORD *)(v1 - 0x542A6DEB665DB90ALL) = 166534360;
  int v3 = v2 ^ 0x2E;
  if (v3 == 28)
  {
    int v4 = 166534376;
    goto LABEL_5;
  }
  if (v3 == 31)
  {
    *(_DWORD *)(v1 - 0x542A6DEB665DB90ELL) = 782544320;
    int v4 = 166534380;
LABEL_5:
    *(void *)(v1 - 0x542A6DEB665DB91ELL) = 0x2BBE7B98A336F31;
    *(void *)(v1 - 0x542A6DEB665DB916) = 0xFD44184675CC90CELL;
    *(_DWORD *)(v1 - 0x542A6DEB665DB90ALL) = v4;
  }
  *(_DWORD *)(result + 16) = 12714193;
  return result;
}

uint64_t sub_19E72A218(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14)
{
  unsigned int v17 = ((2 * (a14 ^ v15)) & 0xFBDEEDF4)
      + (a14 ^ v15 ^ 0x7DEF76FA)
      - 2
      * ((((2 * (a14 ^ v15)) & 0xFBDEEDF4) + (a14 ^ v15 ^ 0x7DEF76FA) + 34638086) & ((3 * (v16 ^ 0x67C) - 1224) ^ 0xFECE212) ^ (a14 ^ v15) & 1)
      + 301821112;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 8 * ((41 * (((2 * v17) & 0x7F77F372 ^ 0x1F51C360) + (v17 ^ 0x30571A0B) + 1618745056 == 540545177)) ^ v16)))(a1, a2, a3, a4, a5, a6, a7, a10);
}

uint64_t sub_19E72A2E0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, unint64_t a11, unint64_t a12, unint64_t a13, unint64_t a14)
{
  int v18 = v14 - 1155;
  int v19 = (v14 - 1155) ^ (a8 + 817);
  int v20 = 1305237457 * ((v17 - 774094913 - 2 * ((v17 - 224) & 0xD1DC409F)) ^ 0x6865E651);
  STACK[0x390] = a13;
  *(_DWORD *)(v17 - 200) = a7 + v20 + ((v14 - 1155) ^ 0xE7C5CB48);
  *(_DWORD *)(v17 - 196) = v20 + v14 - 1155 - 566;
  STACK[0x3B0] = a12;
  STACK[0x380] = a14;
  STACK[0x388] = a11;
  STACK[0x3A0] = a4;
  (*(void (**)(uint64_t))(v16 + 8 * ((v14 - 1155) ^ 0xA14)))(v17 - 224);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16
                                                              + 8
                                                              * (((*(_DWORD *)(v17 - 184) == v15) * (v19 + 800036570)) ^ v18)))(2072727178, 3494932608, 1074794624);
}

uint64_t sub_19E72A3EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 8 * ((43 * (v8 == (((v9 ^ 0xF0) - 59029626) ^ (v9 - 176)) + v10)) ^ v9)))();
}

void sub_19E72A428(_DWORD *a1)
{
  unsigned int v1 = *a1 ^ (545147329 * ((a1 - 2 * (a1 & 0x9AFB64B5) - 1694800715) ^ 0x3A0FA4D9));
  __asm { BRAA            X12, X17 }
}

uint64_t sub_19E72A514(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11)
{
  return (*(uint64_t (**)(void))(v12
                              + 8
                              * ((247 * (v11 + 1416 >= (((a11 - 1394) | 0x12) ^ (4 * a11) ^ 0x1060 ^ 0x593u))) ^ a11)))();
}

uint64_t sub_19E72A55C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v13 = 511487701 * ((v12 - 2127837099 - 2 * ((v12 - 248) & 0x812BC94D)) ^ 0x9942BD85);
  int v14 = *(_DWORD *)(v11 + 52) - v13 + 757738577;
  *(void *)(v12 - 248) = v11 + 0x6C4003946134F52ALL;
  *(_DWORD *)(v12 - 228) = v13 + v10 + 777674947;
  *(_DWORD *)(v12 - 224) = v14;
  *(void *)(v12 - 216) = v9;
  *(void *)(v12 - 208) = &STACK[0x6C0];
  *(_DWORD *)(v12 - 240) = LODWORD(STACK[0x278]) - v13 + LODWORD(STACK[0x27C]);
  *(_DWORD *)(v12 - 236) = v13 + v8 - 66;
  uint64_t v15 = (*(uint64_t (**)(uint64_t))(a8 + 8 * (v8 ^ 0x91B)))(v12 - 248);
  unint64_t v16 = STACK[0x460];
  int v17 = *(_DWORD *)(v12 - 232);
  LODWORD(STACK[0x600]) = v17;
  return (*(uint64_t (**)(uint64_t))(v16 + 8 * (((v17 == 694817499) * ((v8 ^ 0x271) + 1173)) ^ v8)))(v15);
}

void sub_19E72A64C()
{
  LODWORD(STACK[0x600]) = -694859643;
  JUMPOUT(0x19E798F00);
}

uint64_t sub_19E72A76C@<X0>(int a1@<W3>, int a2@<W5>, uint64_t a3@<X7>, int a4@<W8>, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  uint64_t v46 = (a4 + 1632) | 2u;
  *(void *)(v45 + 1516) = v42;
  *(void *)(v45 + 1524) = v42;
  *(_DWORD *)(v45 + 1532) = v43;
  unint64_t v47 = STACK[0x428];
  *(void *)(v47 + 96) = v45;
  a42 = v45;
  *(_DWORD *)(v45 + 476) = 1546350112;
  STACK[0x430] = STACK[0x4B0];
  unint64_t v48 = STACK[0x578];
  unsigned int v49 = (_DWORD *)((char *)&a5 + STACK[0x578] - 0x5C811742B282DAA0);
  STACK[0x3C8] = STACK[0x578];
  STACK[0x3B8] = v46 + v48 - 1270;
  STACK[0x240] = (unint64_t)(v49 + 98);
  STACK[0x3C0] = v47;
  LODWORD(v46) = v46 - 926;
  STACK[0x408] = *(void *)(a3 + 8 * a4);
  STACK[0x578] = STACK[0x3B8];
  LODWORD(STACK[0x490]) = -1558073804;
  LODWORD(STACK[0x410]) = a1 + v44 + v46 + 1273;
  LODWORD(STACK[0x4CC]) = 2072727178;
  STACK[0x560] = 0;
  LODWORD(STACK[0x5BC]) = 807847714;
  LODWORD(STACK[0x400]) = -1125309566;
  LODWORD(STACK[0x438]) = 99103586;
  LODWORD(STACK[0x3F0]) = 74699725;
  LODWORD(STACK[0x3F8]) = 1058215211;
  *unsigned int v49 = 1242597624;
  return (*(uint64_t (**)(uint64_t))(a3 + 8 * (int)(a2 ^ v46)))(1570216885);
}

uint64_t sub_19E72A938@<X0>(uint64_t a1@<X3>, int a2@<W8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,unint64_t a35,int a36,int a37)
{
  LODWORD(STACK[0x338]) = a2;
  LODWORD(STACK[0x33C]) = a36;
  STACK[0x340] = a35;
  LODWORD(STACK[0x348]) = ((v37 - 11404402) & 0xD0FE71C0 ^ 0xB1E91004) - v38 + a37;
  STACK[0x350] = a1 + (v38 - 807847714);
  uint64_t v43 = (*(uint64_t (**)(uint64_t, uint64_t))(v42 + 48 * v41 + 8))(a11, a31);
  int v44 = v43 + v39 - ((2 * v43) & 0x52D425B6) == ((v37 - 11404402) ^ 0xFF51FA1D ^ (v39 + 926));
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v40 + 8 * (((4 * v44) | (v44 << 6)) ^ v37)))(v43, v45, v46, v47, 0xFFFFFFFFFFFFFFDLL, 3600107781, v48, 3494932608, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13,
           a14,
           a15,
           a16,
           a17,
           a18,
           a19,
           a20,
           a21);
}

uint64_t sub_19E72AA24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, unsigned int a6, int a7, uint64_t a8)
{
  if (a6 <= 0x40) {
    int v9 = 64;
  }
  else {
    int v9 = a6;
  }
  return (*(uint64_t (**)(void))(a8
                              + 8
                              * ((v8 - 324) | (32
                                             * (a7 + v9 > ((v8 - 561) ^ 0xFFFFFB5A ^ (a5 + ((v8 - 837) ^ 0x82839B9B))))))))();
}

uint64_t sub_19E72AA84(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  int v2 = *(_DWORD *)(a1 + 16)
     - 511487701 * ((2 * ((a1 ^ 0xB8D50854) & 0x515B4D0F) - (a1 ^ 0xB8D50854) + 782545648) ^ 0x8E18CE6C);
  uint64_t v4 = *(void *)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 24);
  unsigned int v6 = 402930427 * (((v8 | 0xCDB9E118) - v8 + (v8 & 0x32461EE0)) ^ 0xD7001DA5);
  int v9 = v2 + 705636871 - v6 + 1380;
  int v11 = v6 ^ 0x19A0F49A;
  v8[0] = v5;
  v8[1] = v3;
  id v8[2] = v4;
  uint64_t result = (*((uint64_t (**)(void *))*(&off_1EF0E5660 + v2 + 705636871) + (int)(v2 ^ 0xD5F0DF7C) - 1))(v8);
  *(_DWORD *)(a1 + 32) = v10;
  return result;
}

void sub_19E72ABC8(uint64_t a1, uint64_t a2)
{
  __asm { BRAA            X9, X17 }
}

uint64_t sub_19E72AC2C(uint64_t a1, unsigned int a2)
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * ((4087 * (v3 - a1 - (unint64_t)((a2 + 185298948) & 0x8DFF) + 1522 > 0x1F)) ^ a2)))();
}

uint64_t sub_19E72AC74(uint64_t a1)
{
  int v1 = *(_DWORD *)a1 - 1305237457 * (((a1 | 0x3E5D75CB) - (a1 & 0x3E5D75CB)) ^ 0x87E4D305);
  return (*((uint64_t (**)(void))*(&off_1EF0E5660 + (v1 ^ 0x576))
          + (((*(void *)(a1 + 16) == *(void *)(a1 + 8)) * ((v1 + 119) ^ 0x5D2)) ^ v1)
          - 1))();
}

uint64_t sub_19E72ACF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(unsigned char *)(v8 + (v9 - 582084591)) = -63;
  return (*(uint64_t (**)(void))(a8 + 8 * ((176 * (v9 - 582084590 < (((v10 - 1504) | 0x28) ^ v11))) ^ (v10 - 144))))();
}

uint64_t sub_19E72AD40@<X0>(uint64_t a1@<X4>, int a2@<W8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,unint64_t a33,uint64_t a34,uint64_t a35,uint64_t (*a36)(uint64_t))
{
  uint64_t v42 = 3 * (v37 ^ 0x585u);
  *(unsigned char *)(a1 + (a2 + 2)) = *(unsigned char *)(v41 + ((v38 + v42 + 210) & (v36 + 2889130941)));
  int v43 = 1305237457 * ((((2 * (v40 - 216)) | 0xF73A9A34) - (v40 - 216) + 73577190) ^ 0x4224EBD4);
  STACK[0x3F0] = a33;
  *(_DWORD *)(v40 - 200) = v43 + v42 + 586;
  *(_DWORD *)(v40 - 216) = v43 ^ 0x4A893A29;
  uint64_t v44 = (*(uint64_t (**)(uint64_t))(v39 + 8 * (int)(v42 ^ 0x94A)))(v40 - 216);
  return a36(v44);
}

uint64_t sub_19E72ADF8()
{
  return (*(uint64_t (**)(void))(v1 + 8 * ((3954 * (v0 + 1 == v2 + 32)) ^ v3)))();
}

void xTQjDN5HCIo()
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = (uint64_t)*(&off_1EF0E5660
                + ((79 * ((qword_1E945E360 + dword_1E945E338) ^ 0x71)) ^ byte_19EC54C60[byte_19EC7A300[(79 * ((qword_1E945E360 + dword_1E945E338) ^ 0x71))] ^ 0x8E])
                - 41);
  uint64_t v1 = *(void *)(v0 - 4);
  uint64_t v2 = (char *)off_1EF0E5AF0 - 12;
  unsigned int v3 = (char *)off_1EF0E5A68 - 12;
  uint64_t v4 = *(&off_1EF0E5660
       + (*((unsigned char *)off_1EF0E5A68
                           + (*((unsigned __int8 *)off_1EF0E5AF0
                              + (79 * ((qword_1E945E360 - v1) ^ 0x71))
                              - 12) ^ 0x44u)
                           - 12) ^ (79 * ((qword_1E945E360 - v1) ^ 0x71)))
       - 162);
  unint64_t v5 = (unint64_t)&v7[v1 + *v4];
  *(void *)(v0 - 4) = 1616673103 * (v5 + 0x5807F13683BD618FLL);
  *uint64_t v4 = 1616673103 * (v5 ^ 0xA7F80EC97C429E71);
  v8[1] = (583844137 * ((v8 - 1405249991 - 2 * ((unint64_t)v8 & 0xAC3D9639)) ^ 0xBCE32BB4)) ^ 0xD9A13099;
  LOBYTE(v4) = 79 * ((*(_DWORD *)v4 - *(_DWORD *)(v0 - 4)) ^ 0x71);
  unsigned int v6 = (char *)*(&off_1EF0E5660
               + ((79 * ((qword_1E945E360 - dword_1E945E338) ^ 0x71)) ^ byte_19EC54C60[byte_19EC7A300[(79 * ((qword_1E945E360 - dword_1E945E338) ^ 0x71))] ^ 0x76])
               - 55)
     - 8;
  (*(void (**)(_DWORD *))&v6[8
                                      * (v4 ^ v3[v2[v4] ^ 0xDE])
                                      + 18184])(v8);
  __asm { BRAA            X9, X17 }
}

uint64_t sub_19E72B210@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, int a3@<W8>)
{
  unint64_t v7 = v4 - 1;
  STACK[0x5C0] = v7;
  char v8 = ((v5 + ((v3 + 1) ^ v6) - 2 * (((v3 + 1) ^ v6) & (v5 + 110) ^ (v3 + 1) & 4) + 106) ^ (a3 - 126 + v5)) * (v3 + 18);
  *(unsigned char *)(a1 + v7) = (v8 - ((2 * v8) & 0xBF) + 95) ^ 0x5F;
  return (*(uint64_t (**)(void))(a2 + 8 * ((21 * (STACK[0x5C0] == 0)) ^ a3)))();
}

uint64_t sub_19E72B480(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  int v1 = *(_DWORD *)(a1 + 16) - 1001500783 * ((a1 & 0x2E5937E8 | ~(a1 | 0x2E5937E8)) ^ 0x9B1237A3);
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = v2;
  v1 -= 459630961;
  unsigned int v4 = v1 - 1980347521 * (&v4 ^ 0xB9E440FD) + 625;
  return (*((uint64_t (**)(unsigned int *))*(&off_1EF0E5660 + v1) + v1 + 2372))(&v4);
}

uint64_t sub_19E72B55C()
{
  return ((uint64_t (*)(void))STACK[0x508])();
}

uint64_t sub_19E72B5A0@<X0>(char a1@<W0>, uint64_t a2@<X4>, int a3@<W8>)
{
  *(unsigned char *)(a2 + (v4 + v5)) = a1;
  return (*(uint64_t (**)(void))(v8 + 8 * ((((v7 + v4 + v3 + 1) < 0x38) * v6) ^ a3)))();
}

uint64_t sub_19E72B5D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  return (*(uint64_t (**)(void))(v11 + 8 * ((((a8 + v10 - 280) ^ (a8 + 1498)) * (v8 == v9)) ^ v10)))();
}

uint64_t sub_19E72B600(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned int a11, int a12, unsigned int a13, unsigned int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,int a47,int a48)
{
  if (a14 < a13 != a48 + 763623873 < a11) {
    BOOL v49 = a48 + 763623873 < a11;
  }
  else {
    BOOL v49 = a48 + 763623873 > a14;
  }
  return (*(uint64_t (**)(void))(v48 + 8 * (((((a12 ^ v49) & 1) == 0) | ((((a12 ^ v49) & 1) == 0) << 6)) ^ (a2 + 1690))))();
}

void sub_19E72B678(_DWORD *a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  unsigned int v1 = *a1 ^ (1980347521 * (a1 ^ 0xB9E440FD));
  unsigned int v2 = (~(v4 | 0x5AC43FE1) + (v4 & 0x5AC43FE1)) ^ 0x8EAB6AC9;
  v4[0] = v1 + 1431787901 * v2 - 663;
  v4[1] = -1431787901 * v2 + 2022567504;
  int v3 = (char *)*(&off_1EF0E5660 + (int)(v1 ^ 0x60B)) - 8;
  (*(void (**)(_DWORD *))&v3[8 * (v1 + 722)])(v4);
  __asm { BRAA            X8, X17 }
}

uint64_t sub_19E72B778(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5, int a6, int a7, int a8)
{
  *(unsigned char *)(a1 + (v9 + a8)) = *(unsigned char *)(v10 + (v9 + a8));
  return (*(uint64_t (**)(void))(a4 + 8 * (((v9 + (v8 ^ a3) * a6 - 1206 == a7) * a5) ^ (v8 + 929))))();
}

uint64_t sub_19E72B7B4(unsigned __int8 a1, unsigned __int8 a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8
                              + 8
                              * (((v8 == ((((v9 | 8) + a7) & a1 ^ a2) & 0xFE))
                                * (((v9 | 8) + 1445) ^ a3)) ^ (v9 | 8))))();
}

uint64_t sub_19E72B7EC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(qword_1EF0E5890 - 8 + 8 * ((16 * (*(_DWORD *)(a2 + 4) == 2072727178)) | 0x22Eu)))();
}

void sub_19E72B824(uint64_t a1, uint64_t a2)
{
  BOOL v2 = (*(_DWORD *)(a2 + 4) - 2072727178) > 0x14;
  __asm { BRAA            X10, X17 }
}

uint64_t sub_19E72B874(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24)
{
  return (*(uint64_t (**)(void))(a8 + 8 * ((1898 * ((v24 ^ v25) < (a24 ^ 0x45u) - 43)) ^ a24)))();
}

uint64_t sub_19E72B8B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X7>, int a6@<W8>)
{
  STACK[0x3A8] = v6;
  LODWORD(STACK[0x51C]) = v8;
  uint64_t v9 = (uint64_t)*(&off_1EF0E5660 + a6 - 246);
  STACK[0x628] = (unint64_t)&STACK[0x6D0] + v7 + (((a6 - 114) | 0x308u) ^ 0xA37EE8BD4D7D1D1CLL);
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a5
                                                                              + 8
                                                                              * ((1589
                                                                                * (*(_DWORD *)(v9 - 8) == 1731497921)) ^ a6));
  STACK[0x2B8] = (unint64_t)*(&off_1EF0E5660 + a6 - 167);
  return v10(a1, a2, a3, a4, v9 - 8);
}

uint64_t sub_19E72B8BC@<X0>(int a1@<W1>, int a2@<W7>, int a3@<W8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,char a28)
{
  *(&a28 + (a3 + a1)) = -63;
  return (*(uint64_t (**)(void))(v29 + 8 * ((2024 * ((a1 + a3 + 1) < 0x38)) ^ (a2 + v28 + 633))))();
}

uint64_t sub_19E72B900(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10 = STACK[0x5E0];
  int v11 = 1001500783 * ((((2 * (v9 - 248)) | 0xA54462CA) - (v9 - 248) - 1386361189) ^ 0x1816CED1);
  *(_DWORD *)(v9 - 228) = v11 ^ 0xAFF7E931;
  *(void *)(v9 - 240) = v10;
  *(_DWORD *)(v9 - 248) = v11 + v8 - 167302572;
  (*(void (**)(uint64_t))(a8 + 8 * ((int)v8 + 2270)))(v9 - 248);
  unint64_t v12 = STACK[0x460];
  STACK[0x4C0] = *(void *)(STACK[0x460] + 8 * v8);
  unint64_t v15 = STACK[0x438];
  STACK[0x680] = v10;
  LODWORD(STACK[0x68C]) = 2077060833;
  int v13 = *(_DWORD *)(v10 - 0x542A6DEB665DB922);
  STACK[0x530] = v15;
  return (*(uint64_t (**)(void))(v12
                              + 8
                              * ((682
                                * (((v8 + 24) & (2 * v13) ^ 0x48)
                                 + (v13 & (v8 - 21) ^ 0x7D7C67D2u)
                                 - 1768170528
                                 - 337134597 < 0xFFFFFFC0)) ^ ((int)v8 + 87))))();
}

uint64_t sub_19E72B988()
{
  BOOL v4 = (*(uint64_t (**)(void, uint64_t))(v1 + 8 * (v3 ^ 0xC02)))((v2 + (v3 ^ 0x5A9) - 278) ^ v0, 4183984400) == 0;
  return (*(uint64_t (**)(void))(v1 + 8 * ((74 * ((v4 ^ (117 * (v3 ^ 0xBC))) & 1)) ^ v3)))();
}

uint64_t sub_19E72B9FC()
{
  STACK[0x578] = STACK[0x3C8];
  return ((uint64_t (*)(void))STACK[0x408])();
}

void sub_19E72BA14()
{
}

uint64_t sub_19E72BA1C(uint64_t a1)
{
  int v2 = *(_DWORD *)(*(void *)(a1 + 8) - 0x7CF6A079DDC72530);
  int v4 = v2 - 263820150;
  BOOL v3 = v2 - 263820150 < 0;
  int v5 = 263820150 - v2;
  if (!v3) {
    int v5 = v4;
  }
  int v1 = (1575213817 * (((a1 | 0xAAFCE2F0) - (a1 & 0xAAFCE2F0)) ^ 0x2799523C)) ^ *(_DWORD *)a1;
  return (*((uint64_t (**)(void))*(&off_1EF0E5660 + (v1 ^ 0x49C))
          + ((62
            * ((v5 ^ 0xAFF683EB)
             + (v1 ^ 0x787F795A)
             + ((2 * v5) & 0x5FED07D6)
             - 678823494
             + (((v1 ^ 0x54B) - 1228356278) & 0x49373DFE) < 0x7FFFFFFF)) ^ v1 ^ 0x54B)
          - 1))();
}

uint64_t sub_19E72BB54()
{
  BOOL v2 = (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8 * (v1 + 1169)))(32, 0x101004023FF3BD5) == 0;
  return (*(uint64_t (**)(void))(v0 + 8 * (((((v1 - 45) ^ v2) & 1) * (v1 - 1037)) ^ v1)))();
}

void sub_19E72BBB0(_DWORD *a1@<X4>, int a2@<W8>)
{
  *a1 = ((a2 - 335) ^ 0xE77DEDFF ^ LODWORD(STACK[0x544])) + 2142674926 + ((2 * LODWORD(STACK[0x544])) & 0xCEFBDFA6);
  a1[85] = STACK[0x4E0];
  a1[86] = STACK[0x604];
  a1[87] = STACK[0x558];
  a1[88] = STACK[0x4F8];
  JUMPOUT(0x19E7A9F14);
}

uint64_t sub_19E72BC0C@<X0>(uint64_t a1@<X7>, uint64_t a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  LODWORD(STACK[0x438]) = v13;
  if (v15 == 2098131156)
  {
    int v18 = STACK[0x458] ^ 0x294;
    int v19 = 738887528;
    uint64_t v20 = 8;
  }
  else
  {
    if (v15 != 2098131152)
    {
      LODWORD(STACK[0x428]) = 738887513;
      STACK[0x410] = 0;
      LODWORD(STACK[0x408]) = 0;
      goto LABEL_7;
    }
    int v18 = STACK[0x458] ^ 0x208;
    int v19 = 738887531;
    uint64_t v20 = 4;
  }
  LODWORD(STACK[0x428]) = v19;
  STACK[0x410] = (unint64_t)*(&off_1EF0E5660 + v18) - v20;
  LODWORD(STACK[0x408]) = 1;
LABEL_7:
  unint64_t v21 = STACK[0x458];
  int v22 = STACK[0x458] + 560;
  LODWORD(STACK[0x430]) = STACK[0x458] + 299;
  int v23 = 545147329 * (((((v17 - 248) | 0x9E4A96A0) ^ 0xFFFFFFFE) - (~(v17 - 248) | 0x61B5695F)) ^ 0xC141A933);
  *(void *)(v17 - 240) = a2 + 0x7CF6A079DDC72854;
  *(void *)(v17 - 232) = v16;
  *(void *)(v17 - 248) = 0;
  *(void *)(v17 - 192) = 0;
  *(void *)(v17 - 184) = a12;
  *(_DWORD *)(v17 - 200) = v21 - v23 + 1410;
  *(_DWORD *)(v17 - 224) = v12 - v23 + v22 - 1261770193;
  *(void *)(v17 - 216) = v14 + 1168;
  *(void *)(v17 - 208) = a2 + 0x7CF6A079DDC72744;
  uint64_t v24 = (*(uint64_t (**)(uint64_t))(a1 + 8 * ((int)v21 + 1861)))(v17 - 248);
  return (*(uint64_t (**)(uint64_t))(STACK[0x460]
                                            + 8
                                            * ((222 * (*(_DWORD *)(v17 - 176) == 694817499)) ^ LODWORD(STACK[0x430]))))(v24);
}

uint64_t sub_19E72BDA0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(qword_1EF0E5890 + 8 * ((1253 * (*(_DWORD *)(a2 + 4) == 2072727179)) ^ 0xB7u) - 8))();
}

uint64_t sub_19E72BDDC@<X0>(uint64_t a1@<X2>, int a2@<W3>, int a3@<W8>)
{
  int v6 = (a3 - 1079392592) & 0x40563677;
  uint64_t v7 = 4 * (v4 - 1345595332);
  uint64_t v8 = (int *)(STACK[0x428] + v7);
  int v9 = *v8;
  LODWORD(v8) = 1631306195
              * ((*(_DWORD *)(*(void *)STACK[0x438] + (*(_DWORD *)STACK[0x430] & (v6 + 999811786))) ^ v8) & 0x7FFFFFFF);
  LODWORD(v8) = v8 ^ (v8 >> 16);
  unsigned int v10 = 1631306195 * v8;
  *(_DWORD *)(v3 + v7) ^= v9 ^ *((_DWORD *)*(&off_1EF0E5660 + a3 - 1235) + HIBYTE(v10) - 2) ^ *((_DWORD *)*(&off_1EF0E5660 + a3 - 1208)
                                                                                              + HIBYTE(v10)
                                                                                              - 1) ^ *((_DWORD *)*(&off_1EF0E5660 + a3 - 1231) + HIBYTE(v10) + 1) ^ (-1043136512 * v8) ^ v10 ^ (-845987831 * ((1631306195 * v8) >> 24));
  return (*(uint64_t (**)(void))(a1
                              + 8 * (((((v6 + 1451610459) & 0xA97A2EBE ^ a2) + v5 == 809665449) * (v6 ^ 0x6BD)) ^ v6)))();
}

uint64_t sub_19E72BED8(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  unint64_t v41 = STACK[0x468];
  int v42 = *(unsigned __int8 *)(STACK[0x468] - 0x542A6DEB665DB906) ^ 0xC0;
  if (v42 == 22) {
    return (*(uint64_t (**)(void))(a8
  }
                                + 8
                                * (((*(_DWORD *)(v41 - 0x542A6DEB665DB90ALL) != 166534360)
                                  * (((a4 + 1002) | 0x141) ^ 0x74B)) ^ (a4 + 573))))();
  if (v42 == 21) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a8
  }
                                                                                  + 8
                                                                                  * (int)(((*(_DWORD *)(v41 - 0x542A6DEB665DB90ALL) != 166534360)
                                                                                         * ((STACK[0x458] + 131) ^ 0x28C)) ^ (STACK[0x458] + 1436))))(a1, 1605, 1328883208, 3029188599, 748);
  int v44 = a4 + 753;
  unint64_t v45 = STACK[0x458];
  STACK[0x650] = 91;
  char v46 = (((a40 ^ 0xBA) + ((2 * v44) ^ 0x16 ^ (v40 - 44)) - ((2 * (a40 ^ 0xBA)) & 0xDC)) ^ v40) * (a40 + 17);
  *(unsigned char *)(v41 - 0x542A6DEB665DB90BLL) = (v46 - ((2 * v46) & 0xBF) + 95) ^ 0x5F;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t, uint64_t))(a8
                                                                                         + 8
                                                                                         * (((16 * (STACK[0x650] == 0)) | (32 * (STACK[0x650] == 0))) ^ v44)))(95, 1605, 1328883208, v45, 748);
}

uint64_t sub_19E72C084(uint64_t a1)
{
  uint64_t v5 = v1 - 32 + ((v2 - 1978913379) & 0x75F3D7B6u);
  long long v6 = *(_OWORD *)(v4 + v5 - 15);
  long long v7 = *(_OWORD *)(v4 + v5 - 31);
  uint64_t v8 = a1 + v5;
  *(_OWORD *)(v8 - 15) = v6;
  *(_OWORD *)(v8 - 31) = v7;
  return (*(uint64_t (**)(void))(STACK[0x460] + 8 * ((v3 == 32) | (4 * (v3 == 32)) | (v2 + 102))))();
}

uint64_t sub_19E72C29C(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4)
{
  uint64_t v6 = *a3;
  long long v7 = (void *)(a4 - 0x19C7A72C32A62CC3);
  int v8 = *(unsigned __int8 *)(*(void *)(a4 - 0x19C7A72C32A62CC3)
                          + (((v5 ^ 0x9A) + 1414) ^ 0x746DA32)
                          + v6
                          - 1847765348) ^ 0xC1;
  unsigned int v9 = (((v8 - ((2 * v8) & 0xFFFFFFF3)) << 24) - 117440512) ^ 0xF9000000;
  int v10 = *(unsigned __int8 *)(*v7 + (((v5 ^ 0x9A) + 1414) ^ 0x746DA32) + v6 - 1847765347) ^ 0xC1;
  int v11 = (((v10 - ((2 * v10) & 0x1AC)) << 16) + 768999424) ^ 0x2DD60000;
  unsigned int v12 = (v11 + 165382965 - ((2 * v11) & 0x13B60000)) ^ 0x9DB8B35 | (v9 - 244107518 - ((2 * v9) & 0xE3FFFFFF)) ^ 0xF1733702;
  int v13 = *(unsigned __int8 *)(*v7 + (((v5 ^ 0x9A) + 1414) ^ 0x746DA32) + v6 - 1847765346) ^ 0xC1;
  int v14 = (((v13 - ((2 * v13) & 0x7A)) << 8) + 613956864) ^ 0x24983D00;
  unsigned int v15 = (v12 - 247959735 - ((2 * v12) & 0xE270DE92)) ^ 0xF1386F49 | (v14 + 1499223852 - ((2 * v14) & 0x32B8AE00)) ^ 0x595C572C;
  int v16 = *(unsigned __int8 *)(*v7 + (((v5 ^ 0x9A) + 1414) ^ 0x746DA32) + v6 - 1847765345) ^ 0xC1;
  unsigned int v17 = (v15 + 1127416329 - ((2 * v15) & 0x86660412)) ^ 0x43330209 | (v16 - 1004130832 - ((2 * v16) & 0x1E0)) ^ 0xC4262DF0;
  return (*(uint64_t (**)(void, uint64_t, uint64_t, void, void, uint64_t))(v4 + 8 * (v5 ^ 0x9A)))((2 * v17) & 0x52D425B6, 122, v6, v17 + 694817499 - ((2 * v17) & 0x52D425B6), *v7, 4050859778);
}

uint64_t sub_19E72C45C(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  return (*(uint64_t (**)(void))(v7
                              + 8
                              * (((((a3 + 8 == v8 + 32) ^ (a7 + 24)) & 1)
                                * (((a7 - 289) | 0x100) ^ 0x1BE)) | a7)))();
}

uint64_t sub_19E72C4BC(uint64_t result)
{
  unint64_t v1 = 653146051
     * (((result | 0x39F1D44DD111CA95) - (result | 0xC60E2BB22EEE356ALL) - 0x39F1D44DD111CA96) ^ 0x96063FD27B057F77);
  unint64_t v2 = *(void *)(result + 24) ^ v1;
  unint64_t v3 = *(void *)(result + 40) + v1;
  BOOL v4 = v3 > v2;
  BOOL v5 = v3 == v2;
  int v6 = v4;
  if (((*(_DWORD *)(result + 16)
       - 653146051
       * (((result | 0xD111CA95) - (result | 0x2EEE356A) + 787363178) ^ 0x7B057F77)) & 1) != 0)
    int v7 = v6;
  else {
    int v7 = v5;
  }
  BOOL v8 = v7 == 0;
  uint64_t v9 = 12;
  if (!v8) {
    uint64_t v9 = 4;
  }
  *(_DWORD *)uint64_t result = *(_DWORD *)(result + v9) ^ (653146051
                                                * (((result | 0xD111CA95) - (result | 0x2EEE356A) + 787363178) ^ 0x7B057F77)) ^ (*(_DWORD *)(result + 32) + 653146051 * (((result | 0xD111CA95) - (result | 0x2EEE356A) + 787363178) ^ 0x7B057F77));
  return result;
}

uint64_t sub_19E72C564@<X0>(int a1@<W1>, unsigned int a2@<W3>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(void))(a3
                              + 8
                              * (((*(_DWORD *)(*v4 + 4 * a2) != v3) * ((((a1 - 1059) | 0x440) - 472) ^ 0x381)) ^ a1)))();
}

uint64_t sub_19E72C5A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, int a20,uint64_t a21,uint64_t a22,int a23)
{
  int v28 = *(_DWORD *)(v23 + 24);
  uint64_t v29 = *(void *)(v23 + 40);
  unsigned int v30 = 1001500783
      * (((&a19 | 0x7FBA2358) - &a19 + (&a19 & 0x8045DCA0)) ^ 0x350EDCEC);
  a21 = a16;
  a22 = v29;
  a19 = (v27 + 1911) ^ v30;
  a20 = v30 - v26 + v28 + 1642327164;
  uint64_t v31 = (*(uint64_t (**)(int *))(v24 + 8 * (v27 ^ 0x84B)))(&a19);
  BOOL v32 = a23 != ((3 * (v27 ^ 0xC6)) ^ (v25 + 1225));
  return (*(uint64_t (**)(uint64_t))(v24 + 8 * ((v32 | (4 * v32)) ^ v27)))(v31);
}

uint64_t sub_19E72C660(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, unsigned int a11)
{
  BOOL v14 = a11 > ((v11 - 321) ^ 0x2754A743u);
  if (v14 == v12 + 1223804770 < -659858728) {
    BOOL v14 = v12 + 1223804770 < (int)(a11 + 1487624920);
  }
  return (*(uint64_t (**)(void))(v13 + 8 * ((v14 * (((v11 - 321) ^ 0x1FA) - 900)) | (v11 - 321))))();
}

uint64_t sub_19E72CAFC(uint64_t a1, uint64_t a2, int a3)
{
  return (*(uint64_t (**)(void))(v5
                              + 8
                              * (int)((((a3 + 1570361179) & 0xA2662EFE ^ 0x5AC) * ((unint64_t)(v4 - v3) < 0x20)) ^ a3)))();
}

void sub_19E72CB40(uint64_t a1, uint64_t a2)
{
  __asm { BRAA            X8, X17 }
}

uint64_t sub_19E72CBD8@<X0>(int a1@<W1>, int a2@<W5>, int a3@<W8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  *(&a53 + (a1 ^ 0x592 ^ (a2 + 3721)) + v54) = v53;
  *(&a53 + (a3 - 200572349)) = *(unsigned char *)(v56 + ((3 * (a1 ^ 0x12) + 1253) | 0x8Cu) - 1419);
  return (*(uint64_t (**)(void))(v55 + 8 * (a1 ^ 0x592)))();
}

uint64_t sub_19E72CC18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5 = STACK[0x5F8];
  unint64_t v6 = (LODWORD(STACK[0x488]) ^ 0xC3FA76B9F6FBDFC9)
     + 0x3C05894609042037
     + ((2 * LODWORD(STACK[0x488])) & 0x1EDF7BF92);
  STACK[0x498] = v6;
  BOOL v7 = v6 == ((v4 + 501) ^ 0x816);
  return (*(uint64_t (**)(uint64_t, unint64_t))(a4 + 8 * ((v7 | (2 * v7)) ^ v4)))(a1, v5);
}

uint64_t sub_19E72CC90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,unint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,int a51,unsigned int a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  int v71 = 1305237457
      * ((((v70 - 216) ^ 0xCDE3E24F | 0xE2FAD15E)
        - ((v70 - 216) ^ 0xCDE3E24F)
        + (((v70 - 216) ^ 0xCDE3E24F) & 0x1D052EA1)) ^ 0x96A095DF);
  STACK[0x3F0] = a39;
  *(_DWORD *)(v70 - 216) = v71 ^ a9;
  *(_DWORD *)(v70 - 200) = v71 + v69 + 585;
  uint64_t v72 = (*(uint64_t (**)(uint64_t))(v68 + 8 * (v69 ^ 0x94D)))(v70 - 216);
  unsigned int v73 = ((2 * (a68 & 0x3F)) ^ 0x48) + (((v69 - 26) | 0x19) ^ 0xFFFFFD00 ^ a68 & 0x3F);
  *(&a59 + v73 + 705) = 65;
  return (*(uint64_t (**)(uint64_t, void))(v68 + 8 * ((1406 * (v73 + 649 < 0xFFFFFFC8)) ^ v69)))(v72, a52);
}

uint64_t sub_19E72CDDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, int a7, uint64_t a8)
{
  uint64_t v18 = (v13 | ((unint64_t)(v13 < v11) << 32)) + a4;
  *(unsigned char *)(v17 + v18) = *(unsigned char *)((v18 & 0xF) + v8 + 3) ^ *(unsigned char *)(v10 + (v18 & 0xF)) ^ *(unsigned char *)(v9 + (v18 & 0xF)) ^ ((v18 & 0xF) * a6) ^ ((*(unsigned char *)(v16 + v18) ^ 0xBE) + ((*(unsigned char *)(v16 + v18) << (((v12 - 93) | v15) + 14)) & 0x7C) - 58);
  return (*(uint64_t (**)(void))(a8 + 8 * (((v13 + a7 < 0x150) * v14) ^ v12)))();
}

uint64_t sub_19E72CE6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8
                              + 8
                              * (((3 * (v8 ^ 0x4C2) - 1908) * ((-5342213 - v9 - v10 + 34) < 7)) ^ v8)))();
}

uint64_t sub_19E738484(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  *(void *)(v31 - 128) = v30;
  *(void *)(v31 - 120) = v29;
  *(void *)(v31 - 144) = v30;
  *(void *)(v31 - 136) = v26;
  *(_DWORD *)(v31 - 112) = v25
                         + 402930427 * ((~((v31 - 144) | 0x7D5CE6DD) + ((v31 - 144) & 0x7D5CE6DD)) ^ 0x981AE59F)
                         + 90;
  (*(void (**)(uint64_t))(v28 + 8 * (v25 ^ 0xC28)))(v31 - 144);
  int v32 = 961177747 * ((v31 - 144) ^ 0x2752F11C);
  *(_DWORD *)(v31 - 140) = v27 - 181036344 + v32 + 2;
  *(_DWORD *)(v31 - 128) = v32 + v25 - 305;
  *(void *)(v31 - 136) = a25;
  uint64_t v33 = (*(uint64_t (**)(uint64_t))(v28 + 8 * (v25 ^ 0xC34)))(v31 - 144);
  return (*(uint64_t (**)(uint64_t))(v28
                                            + 8
                                            * (((*(_DWORD *)(v31 - 144) == -1914018290) * ((v25 - 287) ^ 0x3EE)) | v25)))(v33);
}

uint64_t sub_19E738580(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(_DWORD *)(a5 + 52) += (v8 - 815) ^ 0x5C;
  STACK[0x578] = (((v8 - 476) | 3u) ^ 0xFFFFFFFFFFFFF733) + v9;
  LODWORD(STACK[0x600]) = v10;
  return (*(uint64_t (**)(void))(a8 + 8 * ((44 * (STACK[0x608] == 0)) ^ v8)))();
}

uint64_t sub_19E7385E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X7>, int a6@<W8>)
{
  BOOL v8 = a6 + 1950307980 < (v6 + 306512373);
  if ((v6 + 306512373) < 0x8E1270C5 != (a6 + 1950307980) < 0x8E1270C5) {
    BOOL v8 = (v6 + 306512373) < 0x8E1270C5;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a5
                                                                                         + 8
                                                                                         * ((239
                                                                                           * (((-113 * ((v7 - 79) ^ 0x5E) + v7 - 79 + 1) ^ v8) & 1)) ^ (v7 - 79))))(a1, a2, a3, a4, 1950307980, 2383573189);
}

uint64_t sub_19E738678@<X0>(int a1@<W2>, int a2@<W8>)
{
  *(_DWORD *)(v6 + 392) = a2;
  *(_DWORD *)(v6 + 396) = STACK[0x4CC];
  *(void *)(v6 + 400) = STACK[0x560];
  *(_DWORD *)(v6 + 408) = 1639538820 - v5 + LODWORD(STACK[0x5BC]);
  *(void *)(v6 + 416) = STACK[0x430] + v5 + 2 * (v2 ^ 0x21Eu) - 807848270;
  int v7 = (*(uint64_t (**)(unint64_t, unint64_t))(v3 + v4 * (uint64_t)a1 + 8))(STACK[0x3C0], STACK[0x240]);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(STACK[0x460]
                                                                                                  + 8 * ((1662 * (v7 + 694817499 - ((v2 ^ 0x52D426BE) & (2 * v7)) == 694817499)) ^ v2)))(1570216885, 2724750410, 48, 2222238069, 80, 97, 179);
}

uint64_t sub_19E738754@<X0>(uint64_t a1@<X1>, unsigned int a2@<W2>, int a3@<W8>)
{
  return (*(uint64_t (**)(void))(v5
                              + 8
                              * ((1145
                                * ((*(unsigned __int8 *)(a1 + 6) ^ v4)
                                 + v3
                                 + ((*(unsigned __int8 *)(a1 + 6) << (a2 - 52)) & 0x176) == a3)) ^ a2)))();
}

uint64_t sub_19E738794@<X0>(uint64_t a1@<X7>, int a2@<W8>)
{
  int v8 = STACK[0x5BC];
  uint64_t v9 = &v7[6 * v4];
  id v9[2] = v5;
  void v9[3] = v6;
  *((void *)v9 + 2) = STACK[0x430];
  void v9[6] = v8;
  *int v7 = v2 + 1;
  BOOL v11 = v3 - 1495517187 > (int)((a2 - 169616073) & 0xA1C23AE ^ 0x8473D19E) && v3 - 1495517187 < SLODWORD(STACK[0x3F0]);
  return (*(uint64_t (**)(void))(a1 + 8 * ((v11 * (((a2 - 278) | 0x888) - 878)) ^ a2)))();
}

uint64_t sub_19E738820(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,int a33,uint64_t a34,int a35,int a36)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a8
                                                     + 8
                                                     * (((v36 == (a33 ^ v36)) * (a36 & 0x2B6B8FD7 ^ 0x9B)) ^ (a4 + 311))))(a1, 3566497294);
}

uint64_t sub_19E73887C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = (*(uint64_t (**)(void))(a8 + 8 * (v8 ^ 0xAC5)))();
  unint64_t v12 = STACK[0x460];
  LODWORD(STACK[0x51C]) = v9;
  return (*(uint64_t (**)(uint64_t))(v12 + 8 * ((37 * ((v10 ^ (v8 + 63)) & 1)) ^ (v8 + 497))))(v11);
}

uint64_t sub_19E7388C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8
                              + 8
                              * (((((v9 - 2141165423) & 0x7F9F976E) + 3523)
                                * ((v8 - 559203755) < 0xFFFFFFFE)) ^ (v9 + 1462))))();
}

void sub_19E738914()
{
}

uint64_t sub_19E738988(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 8 * (((v8 + 198) * (v9 == v10)) ^ (v8 - 461))))();
}

uint64_t sub_19E7389AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X7>, int a6@<W8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))(a5
                                                                                         + 8
                                                                                         * (((((v6 + 1210) ^ ((a6 - 582084591) < 0x38)) & 1) == 0) ^ (v6 + 84))))(a1, a2, a3, a4, STACK[0x2A8]);
}

void sub_19E7389EC()
{
  uint64_t v0 = (unint64_t *)STACK[0x4A0];
  STACK[0x3C0] = STACK[0x2C8];
  STACK[0x430] = *v0;
  JUMPOUT(0x19E72A810);
}

uint64_t sub_19E738A04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(uint64_t))(a8 + 8 * ((((a5 + 1 + v9) < 0x50) * v10) ^ v8)))(a3);
}

uint64_t sub_19E738B48@<X0>(uint64_t a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X6>, int a5@<W8>, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,int32x4_t a40,uint64_t a41,uint64_t a42,int32x4_t a43,int8x16_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,int a61,unsigned int a62,unsigned int a63)
{
  unint64_t v89 = (const char *)(v75 + ((3 * (a5 ^ 0x19)) ^ (a4 + 1391)) + v65);
  unsigned int v90 = *(uint64_t (**)(void, uint64_t, void, uint64_t, uint64_t, void, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v68 + 8 * a5);
  int v91 = a65 ^ 0x6F;
  HIDWORD(a46) = a65;
  if (v91 == 185)
  {
    int8x16x4_t v210 = vld4q_s8(v89);
    uint8x16_t v169 = (uint8x16_t)veorq_s8(v210.val[0], v83);
    uint16x8_t v170 = vmovl_u8(*(uint8x8_t *)v169.i8);
    uint16x8_t v171 = vmovl_high_u8(v169);
    int32x4_t v172 = vsubq_s32((int32x4_t)vmovl_high_u16(v171), (int32x4_t)vandq_s8((int8x16_t)vshll_high_n_u16(v171, 1uLL), v84));
    int32x4_t v173 = vshlq_n_s32(vsubq_s32((int32x4_t)vmovl_high_u16(v170), (int32x4_t)vandq_s8((int8x16_t)vshll_high_n_u16(v170, 1uLL), v84)), 0x18uLL);
    v174.i64[0] = 0xF9000000F9000000;
    v174.i64[1] = 0xF9000000F9000000;
    int32x4_t v175 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v170.i8), (int32x4_t)vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v170.i8, 1uLL), v84)), 0x18uLL), v174), (int8x16_t)v174);
    int32x4_t v176 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(v173, v174), (int8x16_t)v174);
    int32x4_t v177 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v171.i8), (int32x4_t)vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v171.i8, 1uLL), v84)), 0x18uLL), v174), (int8x16_t)v174);
    int32x4_t v178 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(v172, 0x18uLL), v174), (int8x16_t)v174);
    uint8x16_t v179 = (uint8x16_t)veorq_s8(v210.val[1], v83);
    uint16x8_t v180 = vmovl_u8(*(uint8x8_t *)v179.i8);
    uint16x8_t v181 = vmovl_high_u8(v179);
    int32x4_t v182 = vsubq_s32((int32x4_t)vmovl_high_u16(v181), (int32x4_t)(*(_OWORD *)&vshll_high_n_u16(v181, 1uLL) & __PAIR128__(0xFFFFFFADFFFFFFADLL, 0xFFFFFFADFFFFFFADLL)));
    int32x4_t v183 = vsubq_s32((int32x4_t)vmovl_high_u16(v180), (int32x4_t)(*(_OWORD *)&vshll_high_n_u16(v180, 1uLL) & __PAIR128__(0xFFFFFFADFFFFFFADLL, 0xFFFFFFADFFFFFFADLL)));
    int32x4_t v184 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v180.i8), (int32x4_t)(*(_OWORD *)&vshll_n_u16(*(uint16x4_t *)v180.i8, 1uLL) & __PAIR128__(0xFFFFFFADFFFFFFADLL, 0xFFFFFFADFFFFFFADLL))), 0x10uLL), v86), (int8x16_t)v86);
    int32x4_t v185 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(v183, 0x10uLL), v86), (int8x16_t)v86);
    int32x4_t v186 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v181.i8), (int32x4_t)(*(_OWORD *)&vshll_n_u16(*(uint16x4_t *)v181.i8, 1uLL) & __PAIR128__(0xFFFFFFADFFFFFFADLL, 0xFFFFFFADFFFFFFADLL))), 0x10uLL), v86), (int8x16_t)v86);
    int32x4_t v187 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(v182, 0x10uLL), v86), (int8x16_t)v86);
    int32x4_t v188 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v184, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v184, v184), v87)), v88), (int8x16_t)v88), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v175, (int32x4_t)(*(_OWORD *)&vaddq_s32(v175, v175) & __PAIR128__(0xE3FFFFFFE3FFFFFFLL, 0xE3FFFFFFE3FFFFFFLL))), v85), (int8x16_t)v85));
    int32x4_t v189 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v185, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v185, v185), v87)), v88), (int8x16_t)v88), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v176, (int32x4_t)(*(_OWORD *)&vaddq_s32(v176, v176) & __PAIR128__(0xE3FFFFFFE3FFFFFFLL, 0xE3FFFFFFE3FFFFFFLL))), v85), (int8x16_t)v85));
    int32x4_t v190 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v186, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v186, v186), v87)), v88), (int8x16_t)v88), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v177, (int32x4_t)(*(_OWORD *)&vaddq_s32(v177, v177) & __PAIR128__(0xE3FFFFFFE3FFFFFFLL, 0xE3FFFFFFE3FFFFFFLL))), v85), (int8x16_t)v85));
    int32x4_t v191 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v187, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v187, v187), v87)), v88), (int8x16_t)v88), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v178, (int32x4_t)(*(_OWORD *)&vaddq_s32(v178, v178) & __PAIR128__(0xE3FFFFFFE3FFFFFFLL, 0xE3FFFFFFE3FFFFFFLL))), v85), (int8x16_t)v85));
    int32x4_t v192 = vsubq_s32(v188, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v188, v188), v76));
    uint8x16_t v193 = (uint8x16_t)veorq_s8(v210.val[2], v83);
    uint16x8_t v194 = vmovl_u8(*(uint8x8_t *)v193.i8);
    uint16x8_t v195 = vmovl_high_u8(v193);
    v196.i64[0] = 0x7A0000007ALL;
    v196.i64[1] = 0x7A0000007ALL;
    int32x4_t v197 = vsubq_s32((int32x4_t)vmovl_high_u16(v195), (int32x4_t)vandq_s8((int8x16_t)vshll_high_n_u16(v195, 1uLL), v196));
    int32x4_t v198 = vsubq_s32((int32x4_t)vmovl_high_u16(v194), (int32x4_t)vandq_s8((int8x16_t)vshll_high_n_u16(v194, 1uLL), v196));
    int32x4_t v199 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v194.i8), (int32x4_t)vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v194.i8, 1uLL), v196)), 8uLL), v78), (int8x16_t)v78);
    int32x4_t v200 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(v198, 8uLL), v78), (int8x16_t)v78);
    int32x4_t v201 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v195.i8), (int32x4_t)vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v195.i8, 1uLL), v196)), 8uLL), v78), (int8x16_t)v78);
    int32x4_t v202 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(v197, 8uLL), v78), (int8x16_t)v78);
    int32x4_t v203 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(v192, v77), (int8x16_t)v77), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v199, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v199, v199), v79)), v80), (int8x16_t)v80));
    int32x4_t v204 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v189, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v189, v189), v76)), v77), (int8x16_t)v77), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v200, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v200, v200), v79)), v80), (int8x16_t)v80));
    int32x4_t v205 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v190, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v190, v190), v76)), v77), (int8x16_t)v77), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v201, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v201, v201), v79)), v80), (int8x16_t)v80));
    int32x4_t v206 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v191, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v191, v191), v76)), v77), (int8x16_t)v77), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v202, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v202, v202), v79)), v80), (int8x16_t)v80));
    v210.val[0] = veorq_s8(v210.val[3], v83);
    v210.val[1] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v210.val[0].i8);
    v210.val[0] = (int8x16_t)vmovl_high_u8((uint8x16_t)v210.val[0]);
    v210.val[3] = (int8x16_t)vsubq_s32((int32x4_t)vmovl_high_u16((uint16x8_t)v210.val[0]), (int32x4_t)(*(_OWORD *)&vshll_high_n_u16((uint16x8_t)v210.val[0], 1uLL) & __PAIR128__(0xFFFFFFE1FFFFFFE1, 0xFFFFFFE1FFFFFFE1)));
    v210.val[2] = (int8x16_t)vsubq_s32((int32x4_t)vmovl_high_u16((uint16x8_t)v210.val[1]), (int32x4_t)(*(_OWORD *)&vshll_high_n_u16((uint16x8_t)v210.val[1], 1uLL) & __PAIR128__(0xFFFFFFE1FFFFFFE1, 0xFFFFFFE1FFFFFFE1)));
    v210.val[1] = vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v203, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v203, v203), v81)), v82), (int8x16_t)v82), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v210.val[1].i8), (int32x4_t)(*(_OWORD *)&vshll_n_u16(*(uint16x4_t *)v210.val[1].i8, 1uLL) & __PAIR128__(0xFFFFFFE1FFFFFFE1, 0xFFFFFFE1FFFFFFE1))), a40), (int8x16_t)a40));
    v210.val[2] = vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v204, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v204, v204), v81)), v82), (int8x16_t)v82), veorq_s8((int8x16_t)vaddq_s32((int32x4_t)v210.val[2], a40), (int8x16_t)a40));
    v210.val[0] = vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v205, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v205, v205), v81)), v82), (int8x16_t)v82), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v210.val[0].i8), (int32x4_t)(*(_OWORD *)&vshll_n_u16(*(uint16x4_t *)v210.val[0].i8, 1uLL) & __PAIR128__(0xFFFFFFE1FFFFFFE1, 0xFFFFFFE1FFFFFFE1))), a40), (int8x16_t)a40));
    v210.val[3] = vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v206, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v206, v206), v81)), v82), (int8x16_t)v82), veorq_s8((int8x16_t)vaddq_s32((int32x4_t)v210.val[3], a40), (int8x16_t)a40));
    *(int32x4_t *)&STACK[0x250] = vaddq_s32(vsubq_s32((int32x4_t)v210.val[0], (int32x4_t)vandq_s8((int8x16_t)vaddq_s32((int32x4_t)v210.val[0], (int32x4_t)v210.val[0]), a44)), a43);
    *(int32x4_t *)&STACK[0x260] = vaddq_s32(vsubq_s32((int32x4_t)v210.val[3], (int32x4_t)vandq_s8((int8x16_t)vaddq_s32((int32x4_t)v210.val[3], (int32x4_t)v210.val[3]), a44)), a43);
    *(int32x4_t *)&STACK[0x230] = vaddq_s32(vsubq_s32((int32x4_t)v210.val[1], (int32x4_t)vandq_s8((int8x16_t)vaddq_s32((int32x4_t)v210.val[1], (int32x4_t)v210.val[1]), a44)), a43);
    *(int32x4_t *)&STACK[0x240] = vaddq_s32(vsubq_s32((int32x4_t)v210.val[2], (int32x4_t)vandq_s8((int8x16_t)vaddq_s32((int32x4_t)v210.val[2], (int32x4_t)v210.val[2]), a44)), a43);
    int v207 = (_DWORD *)(v69 + 4 * (v70 + 1413020416));
    HIDWORD(v208) = *(v207 - 8) ^ *(v207 - 3) ^ *(v207 - 14) ^ *(v207 - 16);
    LODWORD(v208) = HIDWORD(v208);
    _DWORD *v207 = v74 + 551 * ((a1 + 1775) ^ 0x708) + (v208 >> 31) - ((2 * (v208 >> 31)) & 0x52D425B6) - 1102;
    return (*(uint64_t (**)(void))(v68
                                             + 8
                                             * (((2 * (v66 != 1413020353)) | (32 * (v66 != 1413020353))) ^ ((int)a1 + 1775))))(a63);
  }
  else if (v91 == 186)
  {
    int8x16x4_t v209 = vld4q_s8(v89);
    uint64_t v92 = (a1 + 755);
    uint8x16_t v93 = (uint8x16_t)veorq_s8(v209.val[0], v83);
    uint16x8_t v94 = vmovl_u8(*(uint8x8_t *)v93.i8);
    uint16x8_t v95 = vmovl_high_u8(v93);
    int32x4_t v96 = (int32x4_t)vmovl_high_u16(v95);
    uint32x4_t v97 = vshll_high_n_u16(v95, 1uLL);
    int32x4_t v98 = vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v95.i8), (int32x4_t)(*(_OWORD *)&vshll_n_u16(*(uint16x4_t *)v95.i8, 1uLL) & __PAIR128__(0xFFFFFF6FFFFFFF6FLL, 0xFFFFFF6FFFFFFF6FLL)));
    int32x4_t v99 = vdupq_n_s32(0x4D7295B7u);
    int8x16_t v100 = (int8x16_t)vaddq_s32(v98, v99);
    int8x16_t v101 = (int8x16_t)vaddq_s32(vsubq_s32(v96, (int32x4_t)(*(_OWORD *)&v97 & __PAIR128__(0xFFFFFF6FFFFFFF6FLL, 0xFFFFFF6FFFFFFF6FLL))), v99);
    uint8x16_t v102 = (uint8x16_t)veorq_s8(v209.val[1], v83);
    uint16x8_t v103 = vmovl_u8(*(uint8x8_t *)v102.i8);
    uint16x8_t v104 = vmovl_high_u8(v102);
    v105.i64[0] = 0x9200000092;
    v105.i64[1] = 0x9200000092;
    int32x4_t v106 = vsubq_s32((int32x4_t)vmovl_high_u16(v104), (int32x4_t)vandq_s8((int8x16_t)vshll_high_n_u16(v104, 1uLL), v105));
    int32x4_t v107 = vshlq_n_s32(vsubq_s32((int32x4_t)vmovl_high_u16(v103), (int32x4_t)vandq_s8((int8x16_t)vshll_high_n_u16(v103, 1uLL), v105)), 8uLL);
    int32x4_t v108 = vdupq_n_s32(0x26CA4900u);
    int32x4_t v109 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v103.i8), (int32x4_t)vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v103.i8, 1uLL), v105)), 8uLL), v108), (int8x16_t)v108);
    int32x4_t v110 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(v107, v108), (int8x16_t)v108);
    int32x4_t v111 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v104.i8), (int32x4_t)vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v104.i8, 1uLL), v105)), 8uLL), v108), (int8x16_t)v108);
    int32x4_t v112 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(v106, 8uLL), v108), (int8x16_t)v108);
    int8x16_t v113 = (int8x16_t)vdupq_n_s32(0x1DC79600u);
    int32x4_t v114 = vdupq_n_s32(0x4EE3CBFBu);
    int8x16_t v115 = veorq_s8(v101, (int8x16_t)v99);
    int8x16_t v116 = veorq_s8(v100, (int8x16_t)v99);
    int8x16_t v117 = veorq_s8((int8x16_t)vaddq_s32(vsubq_s32((int32x4_t)vmovl_high_u16(v94), (int32x4_t)(*(_OWORD *)&vshll_high_n_u16(v94, 1uLL) & __PAIR128__(0xFFFFFF6FFFFFFF6FLL, 0xFFFFFF6FFFFFFF6FLL))), v99), (int8x16_t)v99);
    int32x4_t v118 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v109, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v109, v109), v113)), v114), (int8x16_t)v114), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v94.i8), (int32x4_t)(*(_OWORD *)&vshll_n_u16(*(uint16x4_t *)v94.i8, 1uLL) & __PAIR128__(0xFFFFFF6FFFFFFF6FLL, 0xFFFFFF6FFFFFFF6FLL))), v99), (int8x16_t)v99));
    int32x4_t v119 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v110, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v110, v110), v113)), v114), (int8x16_t)v114), v117);
    int32x4_t v120 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v111, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v111, v111), v113)), v114), (int8x16_t)v114), v116);
    int32x4_t v121 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v112, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v112, v112), v113)), v114), (int8x16_t)v114), v115);
    int8x16_t v122 = (int8x16_t)vdupq_n_s32(0x23A6FB0Eu);
    int32x4_t v123 = vsubq_s32(v118, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v118, v118), v122));
    int32x4_t v124 = vdupq_n_s32(0x11D37D87u);
    int8x16_t v125 = (int8x16_t)vaddq_s32(vsubq_s32(v119, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v119, v119), v122)), v124);
    int8x16_t v126 = (int8x16_t)vaddq_s32(vsubq_s32(v120, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v120, v120), v122)), v124);
    int8x16_t v127 = (int8x16_t)vaddq_s32(vsubq_s32(v121, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v121, v121), v122)), v124);
    uint8x16_t v128 = (uint8x16_t)veorq_s8(v209.val[2], v83);
    uint16x8_t v129 = vmovl_u8(*(uint8x8_t *)v128.i8);
    uint16x8_t v130 = vmovl_high_u8(v128);
    int32x4_t v131 = vsubq_s32((int32x4_t)vmovl_high_u16(v130), (int32x4_t)(*(_OWORD *)&vshll_high_n_u16(v130, 1uLL) & __PAIR128__(0xFFFFFFA5FFFFFFA5, 0xFFFFFFA5FFFFFFA5)));
    int32x4_t v132 = vsubq_s32((int32x4_t)vmovl_high_u16(v129), (int32x4_t)(*(_OWORD *)&vshll_high_n_u16(v129, 1uLL) & __PAIR128__(0xFFFFFFA5FFFFFFA5, 0xFFFFFFA5FFFFFFA5)));
    int32x4_t v133 = vdupq_n_s32(0x3ED20000u);
    int32x4_t v134 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v129.i8), (int32x4_t)(*(_OWORD *)&vshll_n_u16(*(uint16x4_t *)v129.i8, 1uLL) & __PAIR128__(0xFFFFFFA5FFFFFFA5, 0xFFFFFFA5FFFFFFA5))), 0x10uLL), v133), (int8x16_t)v133);
    int32x4_t v135 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(v132, 0x10uLL), v133), (int8x16_t)v133);
    int32x4_t v136 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v130.i8), (int32x4_t)(*(_OWORD *)&vshll_n_u16(*(uint16x4_t *)v130.i8, 1uLL) & __PAIR128__(0xFFFFFFA5FFFFFFA5, 0xFFFFFFA5FFFFFFA5))), 0x10uLL), v133), (int8x16_t)v133);
    int32x4_t v137 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(v131, 0x10uLL), v133), (int8x16_t)v133);
    int8x16_t v138 = (int8x16_t)vdupq_n_s32(0x56540000u);
    int32x4_t v139 = vdupq_n_s32(0xAB2A298B);
    int8x16_t v140 = veorq_s8(v127, (int8x16_t)v124);
    int8x16_t v141 = veorq_s8(v126, (int8x16_t)v124);
    int8x16_t v142 = veorq_s8(v125, (int8x16_t)v124);
    int32x4_t v143 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(v123, v124), (int8x16_t)v124), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v134, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v134, v134), v138)), v139), (int8x16_t)v139));
    int32x4_t v144 = (int32x4_t)vorrq_s8(v142, veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v135, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v135, v135), v138)), v139), (int8x16_t)v139));
    int32x4_t v145 = (int32x4_t)vorrq_s8(v141, veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v136, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v136, v136), v138)), v139), (int8x16_t)v139));
    int32x4_t v146 = (int32x4_t)vorrq_s8(v140, veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v137, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v137, v137), v138)), v139), (int8x16_t)v139));
    int8x16_t v147 = (int8x16_t)vdupq_n_s32(0x1AE1B776u);
    int32x4_t v148 = vdupq_n_s32(0xCD70DBBB);
    int8x16_t v149 = (int8x16_t)vaddq_s32(vsubq_s32(v143, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v143, v143), v147)), v148);
    int8x16_t v150 = (int8x16_t)vaddq_s32(vsubq_s32(v144, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v144, v144), v147)), v148);
    int8x16_t v151 = (int8x16_t)vaddq_s32(vsubq_s32(v145, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v145, v145), v147)), v148);
    int8x16_t v152 = (int8x16_t)vaddq_s32(vsubq_s32(v146, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v146, v146), v147)), v148);
    v209.val[0] = veorq_s8(v209.val[3], v83);
    v209.val[1] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v209.val[0].i8);
    v209.val[0] = (int8x16_t)vmovl_high_u8((uint8x16_t)v209.val[0]);
    v147.i64[0] = 0xC8000000C8;
    v147.i64[1] = 0xC8000000C8;
    int32x4_t v153 = vsubq_s32((int32x4_t)vmovl_high_u16((uint16x8_t)v209.val[0]), (int32x4_t)vandq_s8((int8x16_t)vshll_high_n_u16((uint16x8_t)v209.val[0], 1uLL), v147));
    v209.val[2] = (int8x16_t)vshlq_n_s32(vsubq_s32((int32x4_t)vmovl_high_u16((uint16x8_t)v209.val[1]), (int32x4_t)vandq_s8((int8x16_t)vshll_high_n_u16((uint16x8_t)v209.val[1], 1uLL), v147)), 0x18uLL);
    v136.i64[0] = 0xE4000000E4000000;
    v136.i64[1] = 0xE4000000E4000000;
    v209.val[1] = veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v209.val[1].i8), (int32x4_t)vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v209.val[1].i8, 1uLL), v147)), 0x18uLL), v136), (int8x16_t)v136);
    v209.val[2] = veorq_s8((int8x16_t)vaddq_s32((int32x4_t)v209.val[2], v136), (int8x16_t)v136);
    v209.val[0] = veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v209.val[0].i8), (int32x4_t)vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v209.val[0].i8, 1uLL), v147)), 0x18uLL), v136), (int8x16_t)v136);
    v209.val[3] = veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(v153, 0x18uLL), v136), (int8x16_t)v136);
    int32x4_t v154 = vdupq_n_s32(0xF1B72361);
    v209.val[1] = vorrq_s8(veorq_s8(v149, (int8x16_t)v148), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32((int32x4_t)v209.val[1], (int32x4_t)(*(_OWORD *)&vaddq_s32((int32x4_t)v209.val[1], (int32x4_t)v209.val[1]) & __PAIR128__(0xE3FFFFFFE3FFFFFFLL, 0xE3FFFFFFE3FFFFFFLL))), v154), (int8x16_t)v154));
    v209.val[2] = vorrq_s8(veorq_s8(v150, (int8x16_t)v148), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32((int32x4_t)v209.val[2], (int32x4_t)(*(_OWORD *)&vaddq_s32((int32x4_t)v209.val[2], (int32x4_t)v209.val[2]) & __PAIR128__(0xE3FFFFFFE3FFFFFFLL, 0xE3FFFFFFE3FFFFFFLL))), v154), (int8x16_t)v154));
    v209.val[0] = vorrq_s8(veorq_s8(v151, (int8x16_t)v148), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32((int32x4_t)v209.val[0], (int32x4_t)(*(_OWORD *)&vaddq_s32((int32x4_t)v209.val[0], (int32x4_t)v209.val[0]) & __PAIR128__(0xE3FFFFFFE3FFFFFFLL, 0xE3FFFFFFE3FFFFFFLL))), v154), (int8x16_t)v154));
    v209.val[3] = vorrq_s8(veorq_s8(v152, (int8x16_t)v148), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32((int32x4_t)v209.val[3], (int32x4_t)(*(_OWORD *)&vaddq_s32((int32x4_t)v209.val[3], (int32x4_t)v209.val[3]) & __PAIR128__(0xE3FFFFFFE3FFFFFFLL, 0xE3FFFFFFE3FFFFFFLL))), v154), (int8x16_t)v154));
    *(int32x4_t *)&STACK[0x250] = vaddq_s32(vsubq_s32((int32x4_t)v209.val[0], (int32x4_t)vandq_s8((int8x16_t)vaddq_s32((int32x4_t)v209.val[0], (int32x4_t)v209.val[0]), a44)), a43);
    *(int32x4_t *)&STACK[0x260] = vaddq_s32(vsubq_s32((int32x4_t)v209.val[3], (int32x4_t)vandq_s8((int8x16_t)vaddq_s32((int32x4_t)v209.val[3], (int32x4_t)v209.val[3]), a44)), a43);
    *(int32x4_t *)&STACK[0x230] = vaddq_s32(vsubq_s32((int32x4_t)v209.val[1], (int32x4_t)vandq_s8((int8x16_t)vaddq_s32((int32x4_t)v209.val[1], (int32x4_t)v209.val[1]), a44)), a43);
    *(int32x4_t *)&STACK[0x240] = vaddq_s32(vsubq_s32((int32x4_t)v209.val[2], (int32x4_t)vandq_s8((int8x16_t)vaddq_s32((int32x4_t)v209.val[2], (int32x4_t)v209.val[2]), a44)), a43);
    uint64_t v155 = v66 - 16;
    uint64_t v156 = (v92 + 319713361) & 0xECF18FF3;
    int v157 = (((a62 ^ v72) & (a63 ^ v72)) - 1609294449 - ((v156 ^ 0x4028384D) & (2 * ((a62 ^ v72) & (a63 ^ v72))))) ^ 0xA0141D8F | (((a62 ^ 0x1289B3CF) & (a64 ^ v72)) + v73 - ((2 * ((a62 ^ 0x1289B3CF) & (a64 ^ v72))) & 0xCE7293BC)) ^ v73;
    unsigned int v158 = (a61 ^ v72) + (v157 ^ 0x5FCFCEEB) + ((2 * v157) & 0xBF9F9DD6) - 1607454443;
    int v159 = (char *)*(&off_1EF0E5660 + (int)(v92 ^ 0x387)) - 4;
    unsigned int v160 = (*(_DWORD *)(v69 + 4 * (v159[v66 - 16 + v70] - 22)) ^ v74)
         + (v158 ^ 0xFBF9AD53)
         + ((2 * v158) & 0xF7F35AA6)
         + 67523245;
    unsigned int v161 = (char *)*(&off_1EF0E5660 + (int)(v92 ^ 0x3EE)) - 4;
    unsigned int v162 = (v160 ^ 0xFA5BFF47) + *(_DWORD *)&v161[4 * v66 - 64 + 4 * v70] + ((2 * v160) & 0xF4B7FE8E);
    unsigned int v163 = (char *)*(&off_1EF0E5660 + (int)v92 - 624) - 12;
    unsigned int v164 = (v162 - ((2 * v162 - 1177287170) & v67) - 899657937) ^ v72;
    int v165 = ((v164 << (v163[v155 + v70] - 65)) + 816891620 - ((2 * (v164 << (v163[v155 + v70] - 65))) & 0x61618DC8)) ^ 0x30B0C6E4 | ((v164 >> (v71 - v163[v155 + v70])) + 1016147138 - ((2 * (v164 >> (v71 - v163[v155 + v70]))) & 0x79225984)) ^ 0x3C912CC2;
    uint64_t v166 = v165 ^ 0xC3D5A7F7;
    int v167 = (a62 ^ v72) + v166 + ((2 * v165) & 0x87AB4FEE) + 1009408009;
    return (*(uint64_t (**)(uint64_t, uint64_t, char *, char *, char *, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v68 + 8 * (int)v92))(v166, v92, v159, v161, v163, v156, v66 - 15, v167 + v72 - (v67 & (2 * v167)), a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16,
             a17,
             a18,
             a19,
             a20,
             a21,
             a22,
             a23,
             a24,
             a25,
             a26,
             a27,
             a28,
             a29,
             a30,
             a31,
             a32,
             a33,
             a34,
             a35,
             a36,
             a37,
             a38,
             a39,
             a40.i64[0],
             a40.i64[1],
             a41,
             a42,
             a43.i64[0]);
  }
  else
  {
    return v90(a63, a1, v90, a2, a3, a65, a4, a62, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16,
             a17,
             a18,
             a19,
             a20,
             a21,
             a22,
             a23,
             a24,
             a25,
             a26,
             a27,
             a28,
             a29,
             a30,
             a31,
             a32,
             a33,
             a34,
             a35,
             a36,
             a37,
             a38,
             a39,
             a40.i64[0],
             a40.i64[1],
             a41,
             a42,
             a43.i64[0],
             a43.i64[1],
             a44.i64[0],
             a44.i64[1],
             a45,
             a46,
             a47,
             a48,
             a49,
             a50,
             a51,
             a52,
             a53,
             a54);
  }
}

uint64_t sub_19E738B78(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  return (*(uint64_t (**)(void))(v5
                              + 8
                              * (((v4 - a1 < ((a4 - 1525456761) & 0x5AEC9F7B ^ 0x569uLL)) * ((a4 ^ 0x28A) - 1975)) ^ a4)))();
}

uint64_t sub_19E738BC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53)
{
  *(unsigned char *)(a5 + (a1 + v53 + 343)) = *(unsigned char *)(a53 + v57 - 466158710)
                                                  - ((2 * *(unsigned char *)(a53 + v57 - 466158710)) & 0x83)
                                                  - 63;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v56 + 8 * ((2046 * ((v55 + v53 + 1) > 0x3F)) ^ (v54 + 15))))(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45);
}

uint64_t sub_19E738C44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8
                              + 8
                              * ((50
                                * (((4 * v10 - ((v9 - 1277048967) & (8 * v10 - 2110561200)) - 1693804655) ^ (v9 - 638524910)) == v8 - 1647527591)) ^ v9)))();
}

uint64_t sub_19E738CB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4
                              + 8
                              * (((((v4 + v5 - 1383 - 421) ^ LODWORD(STACK[0x4F4])) != LODWORD(STACK[0x23C])
                                                                                     - 1033616367)
                                * (v5 ^ 0x711)) ^ v5)))();
}

void sub_19E738D0C()
{
}

uint64_t sub_19E738D1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, int a3@<W8>)
{
  return (*(uint64_t (**)(void))(a2
                              + 8
                              * ((1131
                                * (*(unsigned __int8 *)(v3 + a1) == (((a3 + 87) & 0x7C) + (a3 ^ 0x6D)))) ^ a3)))();
}

uint64_t sub_19E738D6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11)
{
  BOOL v15 = v12 - 1004211065 > 1596303065 || v12 - 1004211065 < (int)(((v11 + 314) ^ 0xDF25A0E5) + a11);
  return (*(uint64_t (**)(void))(v13 + 8 * ((v15 * (v11 ^ 0x506)) ^ v11)))();
}

uint64_t sub_19E738DD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, unsigned int a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, unsigned int a20)
{
  return (*(uint64_t (**)(void))(v21
                              + 8
                              * ((75
                                * ((a20 | ((unint64_t)(a20 < ((((v20 + 640) ^ 0xC7) - 932) ^ a11)) << 32))
                                 - 1274626124 == a6)) ^ (v20 + 640))))();
}

uint64_t sub_19E739088@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(void))(v4
                              + 8
                              * (((*(unsigned char *)(v2 + a1 + ((v3 - 405916883) & 0x1831C6FB) - 37009027) == 94)
                                * ((v3 ^ v1) + 182)) ^ v3)))();
}

uint64_t sub_19E7390D8@<X0>(char a1@<W8>)
{
  return (*(uint64_t (**)(void))(v2 + 8 * ((v1 + 839) | (8 * ((a1 & 8) == ((v1 - 453616289) & 0x1B09A4F3 ^ 0x453))))))();
}

uint64_t sub_19E739330@<X0>(int a1@<W0>, uint64_t a2@<X7>, uint64_t a3@<X8>)
{
  *(unsigned char *)(v5 + (v3 - 337134550)) = *(unsigned char *)((a1 ^ 0x3C7u) + v4 + a3 - 433265295);
  return (*(uint64_t (**)(void))(a2 + 8 * ((473 * ((v3 - 337134549) > 0x3F)) ^ a1 ^ 0x746)))();
}

uint64_t sub_19E739390@<X0>(int a1@<W2>, uint64_t a2@<X3>, int a3@<W4>, int a4@<W5>, int a5@<W6>, uint64_t a6@<X7>, int a7@<W8>)
{
  int v9 = a7 - 1;
  *(unsigned char *)(v7 + (v9 + 335)) = *(unsigned char *)(a6 + (v9 + 335)) ^ (35 * ((v9 + 79) & 0xF)) ^ *((unsigned char *)*(&off_1EF0E5660 + v8 - 1481) + ((v9 + 79) & 0xF) - 12) ^ *((unsigned char *)*(&off_1EF0E5660 + v8 - 1623) + ((v9 + 79) & 0xF) - 12) ^ *((unsigned char *)*(&off_1EF0E5660 + (v8 ^ a5)) + (((_BYTE)v9 + 79) & 0xF)) ^ 0xC1;
  return (*(uint64_t (**)(void))(a2 + 8 * (((v9 + a3 == ((5 * (v8 ^ a4)) ^ (a3 + 548))) * a1) ^ v8)))();
}

uint64_t sub_19E7393BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8
                              + 8 * ((45 * (v9 + v8 + 335552771 >= 191 * (((v10 - 667) | 4) ^ 0x229u) - 947)) ^ v10)))();
}

uint64_t sub_19E739420@<X0>(uint64_t a1@<X0>, int a2@<W8>)
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * ((95 * (a1 == ((a2 + 201) | 0xA0u) + 0x22DE212C2ABB87EFLL + ((a2 - 443) | 0x400u) - 2086)) ^ a2)))();
}

void sub_19E739474()
{
}

uint64_t sub_19E73947C@<X0>(int a1@<W8>)
{
  unsigned int v7 = 1980347521
     * (((&v10 | 0x86EC0B66) - &v10 + (&v10 & 0x7913F498)) ^ 0x3F084B9B);
  int v16 = a1 - v7 + 1364;
  uint64_t v11 = v9;
  uint64_t v12 = v2;
  uint64_t v14 = v3;
  uint64_t v15 = v4;
  unsigned int v13 = (v5 ^ 0x9BFDBFAF) + (v1 & 0x37FB7F5E) + (a1 ^ 0x9E31735E) - 646027686 + v7;
  (*(void (**)(int *))(v6 + 8 * (a1 + 1646)))(&v10);
  return v10 ^ 0x296A12DBu;
}

uint64_t sub_19E739570@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  return (*(uint64_t (**)(void))(v7 + 8 * ((((((a1 - 368) | 0x102) + 900) ^ a1 ^ 0x53B) * (a7 == v8)) ^ a1)))();
}

uint64_t sub_19E7395B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v10 = v3 ^ 0x3E;
  uint64_t v11 = 4 * (v7 - 705470139);
  unsigned int v12 = *(_DWORD *)(v6 + 4 * (v7 - 705470140)) ^ 0xFC708800 ^ (*(_DWORD *)(v6
                                                                                         + 4
                                                                                         * (v7 - 705470140)) >> 30);
  unsigned int v13 = (*(_DWORD *)(v6 + v11) ^ 0xBBF14E5B ^ (1664525 * v12 - ((3329050 * v12) & 0x8F038CB0) + 1199687256))
      + (*(_DWORD *)(v4 + 4 * (v5 - 1345595333)) ^ 0xFC708803);
  unsigned int v14 = (v13 ^ 0xDD6FEF9B) + v5 + ((2 * v13) & 0xBADFDF36);
  *(_DWORD *)(v6 + v11) = v14 - ((2 * v14 - 1531457216) & 0xF8E11006) - 825462621;
  unint64_t v15 = 1431787901 * ((0xDEDE86E63AE00C0ALL - (v8 | 0xDEDE86E63AE00C0ALL) + STACK[0x450]) ^ 0x67CEA1FFEE8F5922);
  *(void *)(v9 - 240) = (v7 - 1485217149) - v15;
  *(void *)(v9 - 232) = v15 ^ 0xD186013D;
  *(_DWORD *)(v9 - 224) = ((v10 + 1055389672) ^ 0xF8) - v15;
  *(_DWORD *)(v9 - 220) = v15 + 1;
  int v16 = v10 + 1055389672 - v15;
  *(_DWORD *)(v9 - 248) = v16;
  *(_DWORD *)(v9 - 216) = v16 + 132;
  *(_DWORD *)(v9 - 212) = -1295425711 - v15 + v10;
  uint64_t v17 = (*(uint64_t (**)(uint64_t))(a3 + 8 * (v10 + 1838)))(v9 - 248);
  return (*(uint64_t (**)(uint64_t))(STACK[0x460] + 8 * *(int *)(v9 - 244)))(v17);
}

uint64_t sub_19E7395C0(int a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8
                              + 8
                              * (((*(_DWORD *)(v10 + v11 * (uint64_t)a3 + 36) == a1)
                                * (v8 - 342 + (v8 ^ 0x29E) * v9 - 478)) ^ v8)))();
}

uint64_t sub_19E7395F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3
                              + 8
                              * (int)(((((STACK[0x458] ^ 0x679) + 85) ^ 0x656) * (v3 < v4)) ^ (STACK[0x458] + 553))))();
}

uint64_t sub_19E739634(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45)
{
  int v48 = -v45;
  int v49 = -v46;
  int v50 = v46 + v45;
  if ((v50 + 474064458) > 0x40) {
    int v51 = v50 + 474064458;
  }
  else {
    int v51 = 64;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v47 + 8 * ((19 * (v48 - 474065441 + v49 + v51 + 983 < ((HIDWORD(a16) - 2081504581) & 0x7C113FD7u) - 968)) | HIDWORD(a16))))(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45);
}

void sub_19E7396C8()
{
}

uint64_t sub_19E7396D0@<X0>(uint64_t a1@<X2>, int a2@<W8>)
{
  *unsigned int v3 = v3[623];
  return (*(uint64_t (**)(void))(a1
                              + 8
                              * ((102 * (((((a2 - 589) | 0x24) - 552) ^ 0xFFFFFFFB) + v2 != 2086163068)) ^ (a2 + 85))))();
}

uint64_t sub_19E739724(uint64_t a1, int a2)
{
  unsigned int v6 = v4 + v5 + ((a2 - 66019504) & 0x3EF59F7) + 2077163984;
  BOOL v7 = v6 < 0xC9ED9A6E;
  BOOL v8 = v6 > v2 + 1721533291;
  if ((v2 + 1721533291) < 0xC9ED9A6E != v7) {
    BOOL v8 = v7;
  }
  return (*(uint64_t (**)(void))(v3 + 8 * ((203 * !v8) ^ a2)))();
}

uint64_t sub_19E7397AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = (v6 + 219839649 + v5 - v7 + 1920);
  *(void *)(a1 - 7 + v10) = *(void *)(v9 - 7 + v10);
  return (*(uint64_t (**)(void))(a4 + 8 * (((v7 - (v4 & 0xFFFFFFF8) == -8) * ((v8 - 1663) ^ 0x17C)) ^ v8)))();
}

uint64_t sub_19E73980C(uint64_t a1, uint64_t a2)
{
  if (**(unsigned char **)(a2 + 8)) {
    char v2 = 125;
  }
  else {
    char v2 = 124;
  }
  *(unsigned char *)(a1 + 88) = v2;
  return 0;
}

uint64_t sub_19E739830@<X0>(uint64_t a1@<X1>, uint64_t a2@<X7>, int a3@<W8>)
{
  int v3 = 2 * (a3 ^ 0x2B0);
  uint64_t v4 = (*(uint64_t (**)(void, uint64_t, void))(a2 + 8 * (a3 + 1657)))(*(unsigned int *)STACK[0x2B8], a1, LODWORD(STACK[0x584]));
  return (*(uint64_t (**)(uint64_t))(STACK[0x460]
                                            + 8
                                            * ((((454 * (v3 ^ 0xF0)) ^ 0x388) * (LODWORD(STACK[0x51C]) == 694817499)) ^ v3)))(v4);
}

uint64_t sub_19E7398A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = (unsigned int *)STACK[0x2B8];
  (*(void (**)(void, unint64_t *, uint64_t))(a8 + 8 * (v8 + 1876)))(*(unsigned int *)STACK[0x2B8], &STACK[0x628], 2048);
  int v11 = (*(uint64_t (**)(void, unint64_t *, void, uint64_t))(STACK[0x460] + 8 * (v8 + 1933)))(*v10, &STACK[0x4D0], v9 + LODWORD(STACK[0x4E4]) + ((9 * (v8 ^ 0x1F1) - 271) | 0x224u) + 1493, 1);
  return (*(uint64_t (**)(void))(STACK[0x460]
                              + 8 * ((2385 * (((2 * v11) & 0x2FF7FE6E) + (v11 ^ 0x17FBFF37) == 402390839)) ^ v8)))();
}

uint64_t sub_19E739974(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4
                              + 8
                              * ((191 * (v4 < (((139 * ((v5 + 581) ^ 0x837) + 1236) | 0xC7) ^ 0x7E7u))) ^ (v5 + 581))))();
}

void sub_19E7399C0()
{
}

uint64_t sub_19E7399CC@<X0>(uint64_t a1@<X7>, int a2@<W8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24)
{
  uint64_t v31 = (*(uint64_t (**)(void, void, void, void, unint64_t *, uint64_t, void, unint64_t *))(a1 + 8 * (a2 + 400)))((*v29 - 1731497921), (v25 + v24), LODWORD(STACK[0x220]), (v29[13] - 1236003428), &STACK[0x6C0], v27, (v28 - 1290636800 + a2), &STACK[0x6B0]);
  int v33 = (v31 ^ 0x6FF8ECFE) - 557858830 + ((2 * v31) & 0xDFF1D9FC);
  unint64_t v34 = STACK[0x458];
  if (v33 == 1589161203) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(STACK[0x460]
  }
                                                       + 8
                                                       * (int)(((((3 * (v34 ^ 0x233)) ^ 0x93AEDC72)
                                                               + LODWORD(STACK[0x2A4]) < 3)
                                                              * ((1129 * (v34 ^ 0x22E)) ^ 0x863)) ^ (v34 + 1554))))(v31, v32);
  unint64_t v35 = STACK[0x460];
  if (v33 != 1320725744)
  {
    int v36 = 511487701 * ((2 * ((v30 - 248) & 0x76EF27C0) - (v30 - 248) + 152098872) ^ 0x1179ACF0);
    *(void *)(v30 - 240) = STACK[0x218];
    LODWORD(STACK[0x2B4]) = v33;
    *(_DWORD *)(v30 - 232) = v36 + v33 - (((v33 + 826757904) & 0x296A12DF ^ v33 & 4) << (v34 - 43)) - 625908245;
    *(_DWORD *)(v30 - 248) = v34 - v36 + 331;
    (*(void (**)(uint64_t))(v35 + 8 * ((int)v34 + 1828)))(v30 - 248);
    JUMPOUT(0x19E6DFAACLL);
  }
  (*(void (**)(void, uint64_t, void))(v35 + 8 * (int)(v34 ^ 0xB6E)))(*(unsigned int *)STACK[0x2B8], v27, (v28 - 1290634782));
  unsigned int v38 = (a24 & 0x7FFFFFFF ^ 0xB7437CED) - (((a24 & 0x7FFFFFFF ^ 0xB7437CED) << (v34 - 43)) & 0x85BC90E8) + 1121863796;
  unint64_t v39 = STACK[0x5F8];
  int v40 = v29[13] - 574390335;
  unsigned int v41 = LODWORD(STACK[0x488]) ^ 0xFEEDDDA5;
  unsigned int v42 = (2 * LODWORD(STACK[0x488])) & 0xFDDBBB4A;
  int v43 = 291962093 * ((-1204925886 - ((v30 - 248) | 0xB82E4A42) + ((v30 - 248) | 0x47D1B5BD)) ^ 0x5623B8F7);
  *(_DWORD *)(v30 - 232) = (v38 ^ 0x7521B609) - v43 + ((2 * v38) & 0x6FFFFCFA ^ 0x5BC90E8) - 277910616;
  *(_DWORD *)(v30 - 228) = v40 ^ v43;
  *(void *)(v30 - 240) = &STACK[0x6B0];
  *(_DWORD *)(v30 - 224) = v43 + v34 - 479;
  *(_DWORD *)(v30 - 248) = v41 - v43 + v42 + 1979659104;
  *(void *)(v30 - 216) = v39;
  *(void *)(v30 - 208) = v26;
  uint64_t v44 = (*(uint64_t (**)(uint64_t))(STACK[0x460] + 8 * ((int)v34 + 1857)))(v30 - 248);
  unint64_t v45 = STACK[0x460];
  int v46 = *(_DWORD *)(v30 - 200);
  LODWORD(STACK[0x600]) = v46;
  return (*(uint64_t (**)(uint64_t))(v45 + 8 * ((84 * (v46 == 694817499)) ^ ((int)v34 + 1248))))(v44);
}

void sub_19E739D88()
{
  unint64_t v0 = STACK[0x430];
  unint64_t v1 = STACK[0x270];
  STACK[0x410] = STACK[0x270] + 2353;
  STACK[0x408] = v0 + 49;
  STACK[0x400] = v1 + 2333;
  STACK[0x3F8] = v0 + 29;
  STACK[0x3F0] = v1 + 2313;
  STACK[0x3C8] = v0 + 9;
  JUMPOUT(0x19E6DF78CLL);
}

uint64_t sub_19E739DC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 8 * ((2287 * (v9 == ((v10 - 82) ^ (v8 - 3)))) ^ v10)))();
}

uint64_t sub_19E739E10@<X0>(int a1@<W4>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(void))(a2 + 8 * ((3399 * (v2 - 1 + ((2 * a1) ^ 0x862) > (a1 ^ 0x6F) - 1450)) ^ a1)))();
}

uint64_t sub_19E739E54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v7 = v5 - ((2 * v4 + 149512940) & 0xE13A3DD8) - 183381919;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a4
                                                              + 8
                                                              * (v6 ^ (19
                                                                     * (((((v6 - 100) | 0x36)
                                                                        + ((v6 - 1288002934) & 0x4CC55DBD)
                                                                        - 519426908) ^ (2 * v7) & 0xE5CAF7BC)
                                                                      + (v7 ^ 0x82786532)
                                                                      + 1069543412 != 849701842)))))(a1, a2, 553);
}

uint64_t sub_19E739F1C@<X0>(uint64_t a1@<X8>)
{
  int v4 = *(_DWORD *)(v2 - 0x7CF6A079DDC72530);
  int v5 = v4 - 263820150;
  if (v4 - 263820150 < 0) {
    int v5 = 263820150 - v4;
  }
  *(_DWORD *)(v1 - 0x7CF6A079DDC72530) = v4;
  return (*(uint64_t (**)(void))(a1
                              + 8
                              * ((15
                                * ((v5 ^ 0xAC3BBFFB)
                                 + 1607460272
                                 + ((v5 << ((8 * v3) ^ 0x39)) & (664 * (v3 ^ 0x5A5) + 1484225222)) == 202089899)) ^ v3)))();
}

uint64_t sub_19E739FC0()
{
  return (*(uint64_t (**)(void))(v0 + 8 * ((190 * ((v2 + v1 + 335552771) > 7)) ^ 0x737)))();
}

uint64_t sub_19E73A024@<X0>(int a1@<W8>, uint64_t a2, int a3)
{
  return (*(uint64_t (**)(uint64_t))(v3
                                            + 8
                                            * (((a1 - 466158710 + ((a3 - 1855167979) & 0x6E9397FFu) - 400 >= a1 - 466158710)
                                              * (3 * (a3 ^ 0x7B3) + 78)) ^ a3)))(462);
}

uint64_t sub_19E73A09C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11 = 961177747 * ((((2 * (v10 - 248)) | 0x75BFBA9E) - (v10 - 248) + 1159733937) ^ 0x9D8D2C53);
  *(_DWORD *)(v10 - 236) = LODWORD(STACK[0x23C]) - v11 + LODWORD(STACK[0x224]);
  *(_DWORD *)(v10 - 232) = v8 - v11 + ((4 * v9) ^ 0x2F8) + ((v9 - 393872558) & 0x177A067C) - 223220954;
  unint64_t v12 = STACK[0x298];
  *(void *)(v10 - 224) = STACK[0x228];
  *(void *)(v10 - 216) = v12;
  *(void *)(v10 - 248) = STACK[0x230];
  *(_DWORD *)(v10 - 228) = v9 - v11 + 1514;
  uint64_t v13 = (*(uint64_t (**)(uint64_t))(a8 + 8 * (v9 + 2231)))(v10 - 248);
  unint64_t v14 = STACK[0x460];
  int v15 = *(_DWORD *)(v10 - 240);
  LODWORD(STACK[0x600]) = v15;
  return (*(uint64_t (**)(uint64_t))(v14 + 8 * ((1970 * (v15 == 694817499)) ^ v9)))(v13);
}

uint64_t sub_19E73A190@<X0>(uint64_t a1@<X8>)
{
  int v5 = (v4 + v3 + 172513813) & 0x135C8F80;
  unsigned int v6 = 583844137
     * ((((2 * (&v8 ^ 0x8C1D0216)) | 0xB15C086) - (&v8 ^ 0x8C1D0216) - 92987459) ^ 0x99495FD8);
  int v8 = v1 + v6 - v5 + 1322415592;
  int v10 = v3 - v6 + 1336;
  uint64_t v9 = a1;
  return (*(uint64_t (**)(int *))(v2 + 8 * (v3 ^ 0xB50u)))(&v8);
}

uint64_t sub_19E73A234@<X0>(int a1@<W3>, int a2@<W4>, unsigned int a3@<W5>, int a4@<W6>, uint64_t a5@<X7>, int a6@<W8>)
{
  int v12 = v11 + a6 - 178;
  BOOL v13 = v8 < a3;
  *(unsigned char *)(v10 + (v6 + 1)) = *(unsigned char *)(v9 + (v12 + a4));
  unsigned int v14 = a2 + v12 + 1;
  int v15 = v13 ^ (v14 < a3);
  BOOL v16 = v14 < v8;
  if (!v15) {
    BOOL v13 = v16;
  }
  return (*(uint64_t (**)(void))(a5 + 8 * ((!v13 * a1) ^ v7)))();
}

uint64_t sub_19E73A244@<X0>(int a1@<W0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X7>, int a7@<W8>)
{
  *(unsigned char *)(a5 + (v8 + a2) + 20) = *(unsigned char *)(a4 + (v8 + a2));
  return (*(uint64_t (**)(void))(a6
                              + 8
                              * (((((v7 + a1) & v10 ^ v9) + v8 == ((v7 + a1) & v10 ^ a3 ^ a7))
                                * (((v7 + a1) & v10 ^ v11) + 167)) ^ (((v7 + a1) & v10) + 81))))();
}

uint64_t sub_19E73A67C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v47 + 8 * (int)((((a7 + a46 + 1475) < 0xFFFFFFFB) * ((a2 ^ 0xB) - 6)) ^ (a2 + 344))))(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47);
}

uint64_t sub_19E73A688(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  LODWORD(STACK[0x59C]) = 0;
  int v6 = (_DWORD *)STACK[0x3F8];
  int v7 = LODWORD(STACK[0x59C])++;
  *int v6 = v7 + 458213053;
  uint64_t v8 = (*(_DWORD *)STACK[0x408] - 954248836);
  unint64_t v9 = STACK[0x318];
  int v10 = v4 - 1595400458 - STACK[0x318];
  *(_DWORD *)(v5 - 248) = v10;
  unint64_t v11 = STACK[0x308];
  *(void *)(v5 - 240) = v8 - v9;
  *(void *)(v5 - 232) = v11;
  *(_DWORD *)(v5 - 224) = v10 + 26;
  *(_DWORD *)(v5 - 220) = v9 + 1;
  *(_DWORD *)(v5 - 216) = ((v4 - 1595400458) ^ 0x8E) - v9;
  *(_DWORD *)(v5 - 212) = -1295425711 - v9 + v4;
  uint64_t v12 = (*(uint64_t (**)(uint64_t))(a4 + 8 * (v4 ^ 0xB76)))(v5 - 248);
  return (*(uint64_t (**)(uint64_t))(STACK[0x460] + 8 * *(int *)(v5 - 244)))(v12);
}

void sub_19E73A690(_DWORD *a1)
{
  unsigned int v1 = *a1 + 653146051 * (a1 ^ 0xAA14B5E2);
  uint64_t v2 = (char *)*(&off_1EF0E5660 + (int)(v1 ^ 0x7B2)) - 8;
  uint64_t v3 = *(void *)&v2[8
                    * ((((*(uint64_t (**)(uint64_t, uint64_t))&v2[8 * (v1 ^ 0xF49)])(32, 0x101004023FF3BD5) == 0)
                      * ((v1 - 714482046) & 0x2A961B8D ^ 0xDEB)) ^ v1)];
  __asm { BRAA            X8, X17 }
}

uint64_t sub_19E73A740(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  return (*(uint64_t (**)(void))(v10 + 8 * ((v8 - 1331852215 < (v9 ^ (a8 + 259) ^ 0x13Bu)) | (v9 + v11))))();
}

uint64_t sub_19E73A784@<X0>(int a1@<W2>, uint64_t a2@<X7>, int a3@<W8>)
{
  unint64_t v5 = STACK[0x458];
  if ((a3 + 1558073824) <= 0x18)
  {
    unint64_t v5 = STACK[0x458];
    if (((1 << (a3 - 32)) & 0x1000581) != 0) {
      return sub_19E73A834();
    }
  }
  int v6 = v5 + 1720;
  BOOL v7 = ((28627262 - ((((2 * v5) ^ 0x6C4) - 660) ^ *(_DWORD *)(v3 + v4 * (uint64_t)a1 + 40) & 8)) & 0x10001FA) != 16777530;
  return (*(uint64_t (**)(void))(a2 + 8 * (((4 * v7) | (16 * v7)) ^ v6)))();
}

uint64_t sub_19E73A834(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8
                              + 8
                              * ((((((*(_DWORD *)(v9 + v10 * (uint64_t)a3 + 40) & 1) == 0) ^ (v8 + 1)) & 1)
                                * ((v8 + 489) ^ 0x401)) ^ (v8 + 1568))))();
}

uint64_t sub_19E73A874()
{
  return (*(uint64_t (**)(void))(v2 + 8 * ((102 * (v1 + 1 == v3 + 48)) ^ v0)))();
}

uint64_t sub_19E73AA30()
{
  int v5 = v0 - 1236;
  *uint64_t v3 = v3[623];
  *(void *)(v4 - 224) = STACK[0x440];
  unint64_t v6 = STACK[0x448];
  int v7 = (v0 + 613266300) ^ STACK[0x448];
  *(_DWORD *)(v4 - 248) = -(int)STACK[0x448];
  *(_DWORD *)(v4 - 244) = v7;
  int v8 = (v0 + 613266289) ^ v6;
  *(_DWORD *)(v4 - 216) = v8 ^ 0x63;
  *(void *)(v4 - 208) = (v2 - 1481247204) ^ v6;
  *(_DWORD *)(v4 - 240) = v8;
  *(_DWORD *)(v4 - 236) = v5 - v6 + 2092386948;
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(v1 + 8 * (v5 ^ 0xB08)))(v4 - 248);
  return (*(uint64_t (**)(uint64_t))(STACK[0x460] + 8 * *(int *)(v4 - 232)))(v9);
}

void sub_19E73AAD8()
{
}

void sub_19E73AB18()
{
}

void sub_19E73AB38()
{
  uint64_t v1 = (const float *)(v0 + 908);
  vld1q_dup_f32(v1);
  JUMPOUT(0x19E73AB84);
}

uint64_t sub_19E73AD08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8
                              + 8
                              * (((((v8 - 30 + v9) ^ ((*(unsigned char *)(v13 + v11)
                                                                                       - *(unsigned char *)(*(void *)(v12 + 8 * (((v8 - 286) | 0x200) ^ 0x28C))
                                                                                                  - 12)) == 39)) & 1)
                                * v10) ^ (((v8 - 286) | 0x200) + 817))))();
}

uint64_t sub_19E73AD70@<X0>(uint64_t a1@<X1>, uint64_t a2@<X3>, int a3@<W8>)
{
  unint64_t v11 = v4 - 1;
  STACK[0x498] = v11;
  char v12 = ((v6 + v3 + ((v5 + 1) ^ v7) - (v8 & (2 * ((v5 + 1) ^ v7)))) ^ (v3 + 34)) * (v5 + 18);
  *(unsigned char *)(a1 + v11) = (v12 - (v9 & (2 * v12)) - 36) ^ v10;
  return (*(uint64_t (**)(void))(a2 + 8 * (a3 | (8 * (STACK[0x498] == 0)))))();
}

uint64_t sub_19E73AD78@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(void))(v5
                              + 8
                              * (((v1
                                 + (*(unsigned __int8 *)(v3 + 1) ^ v2)
                                 + ((2 * *(unsigned __int8 *)(v3 + 1)) & 0x7777)
                                 - 133 == a1)
                                * (((v4 + 587) | 0x1D5) ^ 0x772)) ^ v4)))();
}

uint64_t sub_19E73ADC4()
{
  (*(void (**)(void))(v1 + 8 * (v0 ^ 0xD1C)))();
  *(void *)(*(void *)v2 + 48) = 0;
  return (*(uint64_t (**)(void))(v1
                              + 8
                              * (((((v0 - 122) ^ (*(void *)(*(void *)v2 + 24) == 0)) & 1)
                                * (((v0 - 1378) | 0x404) - 1152)) ^ (v0 - 202))))();
}

uint64_t sub_19E73AE2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = (*(uint64_t (**)(void))(a8 + 8 * (v8 ^ 0xAC5)))();
  return sub_19E73AE58(v9);
}

uint64_t sub_19E73AE58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8
                              + 8
                              * (((STACK[0x570] == 0x2D9B7D37FE604EEFLL) * (((7 * (v8 ^ 0x266) - 518) | 0x374) ^ 0x305)) ^ (v8 + 1541))))();
}

uint64_t sub_19E73AEB0@<X0>(int a1@<W0>, int a2@<W8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int8x16_t *a26)
{
  v30.i64[0] = 0x8282828282828282;
  v30.i64[1] = 0x8282828282828282;
  v31.i64[0] = 0xC1C1C1C1C1C1C1C1;
  v31.i64[1] = 0xC1C1C1C1C1C1C1C1;
  *(int8x16_t *)(v26 + v27 + a2 + (a1 ^ 0x412u) - 1023) = vaddq_s8(vsubq_s8(*a26, vandq_s8(vaddq_s8(*a26, *a26), v30)), v31);
  return (*(uint64_t (**)(void))(v29 + 8 * ((25 * (((v28 + 1) & 0x1FFFFFFF0) != 16)) ^ ((a1 ^ 0x412) - 9))))();
}

void sub_19E73AF2C(uint64_t a1)
{
  int v1 = 1305237457 * (((a1 | 0xCBBB35AA) - a1 + (a1 & 0x3444CA55)) ^ 0x72029364);
  unsigned int v2 = *(_DWORD *)(*(void *)a1 - 0x7401ED8592CDBF0DLL) - 489048890;
  unsigned int v3 = *(_DWORD *)(a1 + 24) - v1 - 1347459868;
  BOOL v4 = v2 < 0x13007BE7;
  BOOL v5 = v2 > v3;
  if (v3 < 0x13007BE7 != v4) {
    BOOL v5 = v4;
  }
  __asm { BRAA            X9, X17 }
}

void sub_19E73B020()
{
}

uint64_t sub_19E73B028@<X0>(uint64_t a1@<X7>, uint64_t a2@<X8>)
{
  int v4 = v3 - 750;
  BOOL v5 = (unsigned char *)STACK[0x538];
  unsigned int v6 = *(_DWORD *)(a2 - 0x542A6DEB665DB91ELL);
  *BOOL v5 = (v6 >> ((v4 + 69) & 0x7D ^ 0x34)) ^ 0x2C;
  v5[1] = BYTE2(v6) ^ 0xB7;
  void v5[2] = BYTE1(v6) ^ 0x8D;
  v5[3] = v6 ^ 0xF1;
  unsigned int v7 = *v2 - 173115277;
  BOOL v8 = v7 < 0xFF9B954B;
  BOOL v9 = v7 > 0xFF9B954F;
  if (v8) {
    BOOL v9 = v8;
  }
  return (*(uint64_t (**)(void))(a1 + 8 * ((1012 * v9) ^ v4)))();
}

void sub_19E73B11C()
{
  STACK[0x4C0] = *(void *)(v0 + 8 * (int)(STACK[0x458] - 541));
  JUMPOUT(0x19E74F440);
}

uint64_t sub_19E73B140(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45)
{
  unsigned int v51 = ((((2 * v49) | 0xBDF4E90C) - v49 - 1593472134) ^ 0x756ADE51) * v47;
  *(_DWORD *)(v50 - 248) = v46 - v51 - 39;
  *(void *)(v50 - 240) = a44;
  *(void *)(v50 - 232) = v45;
  *(void *)(v50 - 216) = a45;
  *(_DWORD *)(v50 - 220) = v51 ^ 0xBCF69740;
  uint64_t v52 = (*(uint64_t (**)(uint64_t))(a8 + 8 * (v46 + 2205)))(v50 - 248);
  return (*(uint64_t (**)(uint64_t))(STACK[0x460]
                                            + 8
                                            * (((*(_DWORD *)(v50 - 224) == v48)
                                              * (((v46 - 110) | 0x1C) ^ ((v46 ^ 0xB2) - 55))) ^ v46)))(v52);
}

uint64_t sub_19E73B1FC(int a1, int a2, int a3, int a4, uint64_t a5, unsigned int a6, unsigned int a7)
{
  if (a6 <= 0x40) {
    unsigned int v9 = a7;
  }
  else {
    unsigned int v9 = a6;
  }
  return (*(uint64_t (**)(void))(v7
                              + 8
                              * ((61
                                * (((a1 + 44) ^ ((((a1 + 1410923) | 0x1262573E) ^ 0x85E30802) - a4 < v8 + a2 + a3 + v9 + 213)) & 1)) ^ a1)))();
}

uint64_t sub_19E73B4C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  return (*(uint64_t (**)(void))(v11
                              + 8 * ((((a8 + (v10 ^ 0x3D9) - 885) ^ (a8 + 1154)) * (v8 - v9 == 1788742760)) ^ v10)))();
}

void sub_19E73B518()
{
}

void sub_19E73B520(uint64_t a1)
{
  int v1 = 961177747 * ((((2 * a1) | 0x75CF8A70) - a1 + 1159215816) ^ 0x9DB53424);
  __asm { BRAA            X9, X17 }
}

void sub_19E73B5D4()
{
  STACK[0x4C0] = *(void *)(v0 + 8 * (int)(STACK[0x458] - 515));
  JUMPOUT(0x19E74F43CLL);
}

uint64_t sub_19E73B5FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, int a9@<W8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  *(unsigned char *)(v39 + a5 - 2032594340) = *(unsigned char *)(v43 + (a9 + v41))
                                    + (~(2 * *(unsigned char *)(v43 + (a9 + v41))) | 0x7D)
                                    - 62;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v42 + 8 * ((25 * (v39 + 1 != v40 + 64)) ^ v38)))(a1, a2, a3, a4, a5, a6, a7, a8, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38);
}

uint64_t sub_19E73B660()
{
  return (*(uint64_t (**)(void))(v2 + 8 * ((502 * (v3 + 1 != v1 + 48)) ^ v0)))();
}

uint64_t sub_19E73B804@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(void))(v1
                              + 8
                              * ((2011
                                * (((a1 - 2142212268) | 0x50000080)
                                 + *(_DWORD *)(v3 + 48 * v2 + 36)
                                 + ((a1 + 990970705) & 0xC4EEFF33 ^ 0x6C469159) < 0x80000003)) ^ a1)))();
}

uint64_t sub_19E73B888(int a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8
                              + 8
                              * (((*(_DWORD *)(v8 + v9 * (uint64_t)a3 + 32) == a1)
                                * ((v10 - 170) ^ 0x245 ^ (v10 - 1435584060) & 0x559143CF)) ^ v10)))();
}

uint64_t sub_19E73BAE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,int8x8_t a55,int a56)
{
  int v58 = BYTE4(a33) ^ 0x44;
  if (v58 == 146) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))(v56 + 8 * ((2018 * (((a56 == 166534360) ^ (7 * (a8 ^ (a8 - 117)))) & 1)) ^ (v57 + (int)a8 + 787))))(a15, 2072727178, 1074794624, a4, a5, 3600107781, HIDWORD(a10));
  }
  if (v58 == 145) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))(v56 + 8 * ((204 * (((a8 ^ (a8 + 1662) ^ (a56 == 166534360)) & 1) == 0)) ^ (v57 + (int)a8 + 1476))))(a15, 2072727178, 1074794624, a4, a5, 3600107781, HIDWORD(a10));
  }
  int64x2_t v60 = vdupq_n_s64(((unint64_t)&a43 ^ 0xD777E73F7FDFDC17)+ 0x6F9BBFF5DD3F73EBLL+ ((2 * (void)&a43) & 0xAEEFCE7EFFBFB820));
  int64x2_t v61 = vaddq_s64(v60, (int64x2_t)xmmword_19EC7A600);
  int64x2_t v62 = (int64x2_t)vorrq_s8((int8x16_t)v60, (int8x16_t)xmmword_19EC3A120);
  int64x2_t v63 = vaddq_s64(v60, (int64x2_t)xmmword_19EC3A130);
  int64x2_t v64 = (int64x2_t)vorrq_s8((int8x16_t)v60, (int8x16_t)xmmword_19EC35D70);
  int8x16_t v65 = (int8x16_t)vdupq_n_s64(0xBAuLL);
  int8x16_t v66 = (int8x16_t)vdupq_n_s64(0xB6DEA851CBBC1E14);
  int64x2_t v67 = vdupq_n_s64(0xB8EC58CAA2E0B00FLL);
  int8x16_t v68 = (int8x16_t)vdupq_n_s64(0x7EuLL);
  int64x2_t v69 = vdupq_n_s64(0xB8EC58CAA2E0AFFELL);
  int64x2_t v70 = vdupq_n_s64(0xDB6F5428E5DE0F0ALL);
  int64x2_t v71 = vdupq_n_s64(0x7DuLL);
  int64x2_t v72 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(v63, v69), v65);
  int64x2_t v73 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(v64, v69), v65);
  int64x2_t v74 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(v62, v69), v65);
  int64x2_t v75 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(v61, v69), v65);
  int64x2_t v76 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(vsubq_s64(v75, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v75, v75), v66)), v70), (int8x16_t)v70);
  int64x2_t v77 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(vsubq_s64(v74, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v74, v74), v66)), v70), (int8x16_t)v70);
  int64x2_t v78 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(vsubq_s64(v73, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v73, v73), v66)), v70), (int8x16_t)v70);
  int64x2_t v79 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(vsubq_s64(v72, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v72, v72), v66)), v70), (int8x16_t)v70);
  int64x2_t v80 = vaddq_s64(v63, v67);
  v79.i64[0] *= v80.i64[0];
  v79.i64[1] *= v80.i64[1];
  int64x2_t v81 = vaddq_s64(v64, v67);
  v78.i64[0] *= v81.i64[0];
  v78.i64[1] *= v81.i64[1];
  int64x2_t v82 = vaddq_s64(v62, v67);
  v77.i64[0] *= v82.i64[0];
  v77.i64[1] *= v82.i64[1];
  int64x2_t v83 = vaddq_s64(v61, v67);
  v76.i64[0] *= v83.i64[0];
  v76.i64[1] *= v83.i64[1];
  v85.val[1] = (int8x16_t)vaddq_s64(vsubq_s64(v79, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v79, v79), v68)), v71);
  v85.val[0] = (int8x16_t)vaddq_s64(vsubq_s64(v78, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v78, v78), v68)), v71);
  v85.val[2] = (int8x16_t)vaddq_s64(vsubq_s64(v77, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v77, v77), v68)), v71);
  v85.val[3] = (int8x16_t)vaddq_s64(vsubq_s64(v76, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v76, v76), v68)), v71);
  a55 = vrev64_s8(veor_s8(vadd_s8((int8x8_t)*(_OWORD *)&vqtbl4q_s8(v85, (int8x16_t)xmmword_19EC3AB10), (int8x8_t)0xC2C2C2C2C2C2C2C2), (int8x8_t)0x3F3F3F3F3F3F3F3FLL));
  int8x16_t v84 = *(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v56 + 8 * (v57 - 800034082));
  return v84(v84, 2072727178, 1074794624, a4, a5, 3600107781, HIDWORD(a10), a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47);
}

uint64_t sub_19E73BEB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  int v30 = 7 * ((2 * v24) ^ 0xC);
  *(_DWORD *)(v29 - 128) = 2 * v24 - ((v29 - 144) ^ 0x11F20D4A) * v25 + 2070;
  *(void *)(v29 - 144) = a24;
  *(void *)(v29 - 136) = a23;
  *(void *)(v29 - 120) = v26;
  *(void *)(v29 - 112) = a23;
  *(void *)(v29 - 104) = a14;
  uint64_t v31 = (*(uint64_t (**)(uint64_t))(v27 + 8 * (2 * v24 + 2144)))(v29 - 144);
  return (*(uint64_t (**)(uint64_t))(v27
                                            + 8
                                            * ((111
                                              * ((((v30 - 133) | 0x86) ^ (v28 + 1157)) + a21 > 0x7FFFFFFE)) ^ (v30 - 1226))))(v31);
}

void sub_19E73BF58(uint64_t a1)
{
  int v1 = *(_DWORD *)(*(void *)a1 - 0x7CF6A079DDC72530);
  int v4 = v1 - 263820150;
  BOOL v3 = v1 - 263820150 < 0;
  int v5 = 263820150 - v1;
  if (v3) {
    int v4 = v5;
  }
  int v2 = ((*(_DWORD *)(a1 + 8) ^ (653146051 * (a1 ^ 0xAA14B5E2))) - 1494) | 0x44;
  __asm { BRAA            X12, X17 }
}

uint64_t sub_19E73C078@<X0>(int a1@<W4>, int a2@<W5>, uint64_t a3@<X7>, int a4@<W8>)
{
  return (*(uint64_t (**)(void))(a3
                              + 8
                              * (((((a4 + 45) ^ (v4 == ((((a4 - 556) | v5) ^ v6) & a1))) & 1) * a2) ^ (a4 + 1068))))();
}

uint64_t sub_19E73C0B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 8 * ((1952 * (v9 == (v8 ^ 0x273 ^ (v10 - 87)))) ^ (v8 - 461))))();
}

uint64_t sub_19E73C0E8()
{
  BOOL v3 = (char *)&STACK[0x6D0] + v1 + (((v0 ^ 0x512u) + 334) ^ 0xA37EE8BD4D7D1DEALL);
  *(_DWORD *)BOOL v3 = 1639538820;
  *((void *)v3 + 1) = 0;
  *((_DWORD *)v3 + 4) = 753450676;
  *((_DWORD *)v3 + 6) = 2072727178;
  *((void *)v3 + 4) = 0;
  *((_DWORD *)v3 + 10) = 2072727178;
  STACK[0x5F0] = (unint64_t)(v3 + 40);
  *((void *)v3 + 6) = 0;
  *((_DWORD *)v3 + 14) = 2072727178;
  STACK[0x4A0] = (unint64_t)(v3 + 48);
  STACK[0x4B8] = (unint64_t)(v3 + 56);
  *((void *)v3 + 8) = 0;
  STACK[0x638] = (unint64_t)(v3 + 64);
  *((_DWORD *)v3 + 18) = 2072727178;
  *((void *)v3 + 10) = 0;
  STACK[0x568] = (unint64_t)(v3 + 72);
  STACK[0x550] = (unint64_t)(v3 + 80);
  STACK[0x428] = (unint64_t)v3;
  v3[88] = 124;
  *(_DWORD *)uint64_t v2 = 1639538820;
  *(_OWORD *)(v2 + 4) = 0u;
  *(_DWORD *)(v2 + 28) = 740445576;
  STACK[0x2C8] = v2 + 28;
  *(_OWORD *)(v2 + 436) = 0u;
  *(_OWORD *)(v2 + 452) = 0u;
  *(void *)(v2 + 468) = 0;
  *(_DWORD *)(v2 + 232) = 740445576;
  STACK[0x2C0] = v2 + 232;
  *(_DWORD *)(v2 + 20) = 0;
  *(_DWORD *)(v2 + 24) = 2072727178;
  *(void *)(v2 + 1128) = 0xC1C1C1C1C1C1C1C1;
  *(void *)(v2 + 1136) = 0xC1C1C1C1C1C1C1C1;
  *(void *)(v2 + 1144) = 3250700737;
  *(void *)(v2 + 1152) = 0;
  *(void *)(v2 + 1160) = 0;
  return sub_19E73C214(&off_1EF0E5660);
}

uint64_t sub_19E73C214@<X0>(uint64_t a1@<X7>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  int v6 = (__n128 *)(v5 + a2);
  v6[73] = a3;
  v6[74] = a3;
  return (*(uint64_t (**)(void))(a1 + 8 * ((60 * (a2 + 32 != (((v3 - 793) | 0x80u) ^ v4))) ^ v3)))();
}

uint64_t sub_19E73C250(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  LODWORD(STACK[0x678]) = -694859505;
  return sub_19E73AE58(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_19E73C26C(uint64_t result)
{
  unint64_t v1 = 1305237457 * ((-2 - ((~result | 0x21626499E965B1) + (result | 0xFFDE9D9B66169A4ELL))) ^ 0xD17CFB152050C37FLL);
  unint64_t v2 = *(void *)(result + 40) ^ v1;
  unint64_t v3 = *(void *)(result + 24) ^ v1;
  BOOL v4 = (uint64_t)v2 < (uint64_t)v3;
  BOOL v5 = v2 < v3;
  int v6 = v4;
  if ((*(_DWORD *)result + v1)) {
    int v7 = v6;
  }
  else {
    int v7 = v5;
  }
  BOOL v8 = v7 == 0;
  uint64_t v9 = 4;
  if (!v8) {
    uint64_t v9 = 8;
  }
  *(_DWORD *)(result + 16) = *(_DWORD *)(result + 32) ^ v1 ^ *(_DWORD *)(result + v9) ^ v1;
  return result;
}

void sub_19E73C318(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1F4188790](a1);
  if (*(void *)v1) {
    BOOL v3 = *(void *)(v1 + 16) == 0x698EDBACE60CACA4;
  }
  else {
    BOOL v3 = 1;
  }
  char v4 = v3;
  int v2 = *(_DWORD *)(v1 + 32) - 961177747 * ((-2 - ((~v1 | 0x6EE43B4D) + (v1 | 0x911BC4B2))) ^ 0x49B6CA51);
  __asm { BRAA            X8, X17 }
}

void sub_19E73C460()
{
}

uint64_t sub_19E73C598(uint64_t a1, int a2)
{
  return (*(uint64_t (**)(void))(v4 + 8 * ((117 * (((v2 == v3) ^ (a2 + 14)) & 1)) ^ a2)))();
}

uint64_t sub_19E73C5C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, int a9@<W8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v51 + 8 * ((683 * (v50 + (int)a7 + a9 - 3 < ((a9 - 1338006509) & 0x4FC0567Bu) - 23)) ^ a9)))(a1, a2, a3, a4, a5, a6, a7, a8, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48,
           a49,
           a50);
}

void sub_19E73C618()
{
}

uint64_t sub_19E73C8EC@<X0>(uint64_t a1@<X8>)
{
  *(_DWORD *)(*(void *)(v2 - 0x7CF6A079DDC7252CLL)
            + 4 * (int)((((v5 ^ 0x2960) - 252937497) & 0xF1385F0 ^ 0xF3F45F64) + v4)) = *(_DWORD *)(*(void *)(v3 - 0x7CF6A079DDC7252CLL) + 4 * (int)((((v5 ^ 0x2960) - 252937497) & 0xF1385F0 ^ 0xF3F45F64) + v4));
  return (*(uint64_t (**)(void))(a1 + 8 * ((165 * (v4 - 1 == v1)) | v5 ^ 0x2960)))();
}

uint64_t sub_19E73C96C@<X0>(int a1@<W7>, int a2@<W8>)
{
  return (*(uint64_t (**)(void))(v4 + 8 * (((v5 + ((v3 + 499) ^ (a1 + 415)) - 61) * (a2 != v2)) ^ v3)))();
}

uint64_t sub_19E73C9A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, unint64_t *a19, uint64_t a20,unsigned int a21,int a22,int a23,unsigned int a24)
{
  int v27 = v26 ^ 5;
  unsigned int v28 = 1575213817 * ((&a19 & 0xF46579E9 | ~(&a19 | 0xF46579E9)) ^ 0x86FF36DA);
  a19 = &STACK[0x698EDBACE60CACCC];
  a20 = a16;
  a21 = -1853230656 - v28;
  a23 = (v27 - 871891864) ^ v28;
  a24 = -123540179 - v28;
  uint64_t v29 = (*(uint64_t (**)(unint64_t **))(v24 + 8 * (v27 + 2123)))(&a19);
  return (*(uint64_t (**)(uint64_t))(v24
                                            + 8
                                            * ((652
                                              * (a22 == v25 + ((469 * (v27 ^ 0x115) + 1515417728) & 0xA5AC8EBF) - 1215)) ^ v27)))(v29);
}

uint64_t sub_19E73CAA4(int a1)
{
  return (*(uint64_t (**)(void))(v3
                              + 8
                              * (int)((((v2 ^ 0x4E ^ (a1 - 1897)) + v1 < v1 + a1)
                                     * (((v2 + 5249034) | 0xD0005080) ^ 0xD0507F3E)) ^ v2)))();
}

uint64_t sub_19E73CB10@<X0>(uint64_t a1@<X1>, int a2@<W2>, int a3@<W8>)
{
  return (*(uint64_t (**)(void))(v4
                              + 8
                              * ((578
                                * (((a2 + 277) ^ 0xC10068DC)
                                 + (**(unsigned __int8 **)(a1 + 8) ^ v3)
                                 + ((2 * **(unsigned __int8 **)(a1 + 8)) & 0x7777)
                                 + 1673257295 == a3)) ^ a2)))();
}

uint64_t sub_19E73CB6C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(v7
                              + 8
                              * (((4 * (((*(_DWORD *)(a7 + 72) == a6) ^ (v8 + a4 - 56)) & 1)) & 0xF7 | (8 * (((*(_DWORD *)(a7 + 72) == a6) ^ (v8 + a4 - 56)) & 1))) ^ (v8 + a4 + 605))))();
}

uint64_t sub_19E73CBCC(uint64_t a1, int a2)
{
  if (a1) {
    BOOL v3 = a2 == 0;
  }
  else {
    BOOL v3 = 0;
  }
  int v4 = !v3;
  return (*(uint64_t (**)(void))(v2 + 8 * ((2 * v4) | (8 * v4) | 0x8D1u)))();
}

uint64_t sub_19E73CBFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  *(void *)(v29 - 128) = a23;
  *(void *)(v29 - 120) = v24;
  *(_DWORD *)(v29 - 112) = v28 + 402930427 * ((v29 - 144) ^ 0x1AB9FCBD) + 1172;
  *(void *)(v29 - 144) = a23;
  *(void *)(v29 - 136) = a24;
  (*(void (**)(uint64_t))(v26 + 8 * (v28 ^ 0x9EEu)))(v29 - 144);
  *(void *)(v29 - 112) = a23;
  *(void *)(v29 - 104) = a18;
  *(void *)(v29 - 120) = v24;
  *(void *)(v29 - 144) = a24;
  *(void *)(v29 - 136) = a23;
  *(_DWORD *)(v29 - 128) = v28 - 291962093 * ((v29 - 144) ^ 0x11F20D4A) + 2070;
  uint64_t v30 = (*(uint64_t (**)(uint64_t))(v26 + 8 * (v28 ^ 0x9E0u)))(v29 - 144);
  return (*(uint64_t (**)(uint64_t))(v26
                                            + 8
                                            * ((111
                                              * ((((v28 + 1083) | 0x86) ^ (v27 + 1157))
                                               + ((v28 + 1216) ^ 0xFFFFFA78)
                                               + v25 > 0x7FFFFFFE)) ^ (v28 - 10))))(v30);
}

uint64_t sub_19E73CCE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_19E73CD0C(a1, a2, a3, v7, a5, a6, v6);
}

uint64_t sub_19E73CD0C()
{
  return (*(uint64_t (**)(void))(v1
                              + 8
                              * ((38
                                * (*(_DWORD *)(v2 + 48 * (int)(v3 - 330919320 + ((v0 - 10785234) & 0xD0F4F9FC))) == 776944992)) ^ v0)))();
}

uint64_t sub_19E73CD68@<X0>(uint64_t a1@<X1>, unsigned int a2@<W2>, int a3@<W8>)
{
  return (*(uint64_t (**)(void))(v6
                              + 8
                              * ((2030
                                * ((*(unsigned __int8 *)(a1 + 7) ^ v4)
                                 + v3
                                 + ((*(unsigned __int8 *)(a1 + 7) << ((a2 + 78) ^ 0x82)) & v5) == a3)) ^ a2)))();
}

uint64_t sub_19E73CDAC@<X0>(uint64_t a1@<X0>, unsigned int a2@<W8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,int a63)
{
  int v70 = *(_DWORD *)(&a52 + ((v68 + v64) & 0xFFFFFFFC) + 72);
  *(unsigned char *)(a1 + (v68 + v64)) = v66 ^ v65 ^ 0xEA ^ v70;
  *(unsigned char *)(a1 + (v68 + v64 + 1)) = BYTE1(v70) ^ 0x8D;
  *(unsigned char *)(a1 + (v68 + v64 + 2)) = BYTE2(v70) ^ 0xB7;
  *(unsigned char *)(a1 + (v68 + v64 + 3)) = HIBYTE(v70) ^ 0x2C;
  BOOL v71 = v68 - 1964941394 < (a64 - 484761061);
  if (v68 - 1964941394 < a2 != a64 - 484761061 < a2) {
    BOOL v71 = a64 - 484761061 < a2;
  }
  return (*(uint64_t (**)(void))(v69 + 8 * ((v71 * v67) ^ v66)))();
}

uint64_t sub_19E73CE5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20)
{
  int v27 = v20 + 1216;
  *(void *)(v26 - 120) = v24;
  *(void *)(v26 - 112) = v25;
  *(void *)(v26 - 104) = a16;
  *(void *)(v26 - 144) = v21;
  *(void *)(v26 - 136) = v25;
  *(_DWORD *)(v26 - 128) = v20
                         - 291962093
                         * ((((v26 - 144) | 0x713F86C) - (v26 - 144) + ((v26 - 144) & 0xF8EC0790)) ^ 0x16E1F526)
                         + 2070;
  uint64_t v28 = (*(uint64_t (**)(uint64_t))(v22 + 8 * (v20 ^ 0x9E0)))(v26 - 144);
  return (*(uint64_t (**)(uint64_t))(v22
                                            + 8
                                            * ((111
                                              * ((((v27 - 133) | 0x86) ^ (v23 + 1157)) + a20 > 0x7FFFFFFE)) ^ (v27 - 1226))))(v28);
}

uint64_t sub_19E73D018(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  int v30 = v28 ^ 0x56F;
  *(void *)(v29 - 128) = a23;
  *(void *)(v29 - 120) = v25;
  *(_DWORD *)(v29 - 112) = v30
                         + 824
                         + 402930427 * ((((2 * (v29 - 144)) | 0xFB8346E6) - (v29 - 144) - 2109842291) ^ 0x67785FCE);
  *(void *)(v29 - 144) = a23;
  *(void *)(v29 - 136) = a24;
  (*(void (**)(uint64_t))(v27 + 8 * (v30 + 1798)))(v29 - 144);
  *(_DWORD *)(v29 - 112) = v30
                         + 824
                         + 402930427 * ((2 * ((v29 - 144) & 0x4C2BD5C8) - (v29 - 144) - 1277941197) ^ 0xA96DD68E);
  *(void *)(v29 - 144) = a23;
  *(void *)(v29 - 136) = a24;
  *(void *)(v29 - 128) = a23;
  *(void *)(v29 - 120) = v25;
  (*(void (**)(uint64_t))(v27 + 8 * (v30 ^ 0xB0A)))(v29 - 144);
  *(void *)(v29 - 128) = a23;
  *(void *)(v29 - 120) = v25;
  *(_DWORD *)(v29 - 112) = v30
                         + 824
                         + 402930427
                         * ((-1735184610 - ((v29 - 144) | 0x98932F1E) + ((v29 - 144) | 0x676CD0E1)) ^ 0x7DD52C5C);
  *(void *)(v29 - 144) = a23;
  *(void *)(v29 - 136) = a24;
  (*(void (**)(uint64_t))(v27 + 8 * (v30 + 1798)))(v29 - 144);
  int v31 = 961177747 * ((~((v29 - 144) | 0xF78D9333) + ((v29 - 144) & 0xF78D9333)) ^ 0x2F209DD0);
  *(_DWORD *)(v29 - 128) = v30 + 429 + v31;
  *(void *)(v29 - 136) = a25;
  *(_DWORD *)(v29 - 140) = v26 + ((v30 + 1810389656) & 0x9417A3DF ^ 0xF5359A53) + v31;
  (*(void (**)(uint64_t))(v27 + 8 * (v30 ^ 0xB16)))(v29 - 144);
  int v32 = *(_DWORD *)(v29 - 144) != -1914018290;
  int v33 = 961177747 * ((v29 - 1416147619 - 2 * ((v29 - 144) & 0xAB974DED)) ^ 0x8CC5BCF1);
  *(_DWORD *)(v29 - 128) = v30 + 429 + v33;
  *(_DWORD *)(v29 - 140) = v33 + v26 - 181036344;
  *(void *)(v29 - 136) = a25;
  uint64_t v34 = (*(uint64_t (**)(uint64_t))(v27 + 8 * (v30 ^ 0xB16)))(v29 - 144);
  return (*(uint64_t (**)(uint64_t))(v27 + 8 * (v30 | (v32 << 6))))(v34);
}

uint64_t sub_19E73D270(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  int v30 = ((2 * (((v29 - 144) ^ 0xBB935990) & 0x17E62A28) - ((v29 - 144) ^ 0xBB935990) - 400960047) ^ 0x74D87D5D) * v26;
  *(void *)(v29 - 136) = a25;
  *(_DWORD *)(v29 - 128) = v30 + v25 - 439;
  *(_DWORD *)(v29 - 140) = v30;
  uint64_t v31 = (*(uint64_t (**)(uint64_t))(v27 + 8 * (v25 + 942)))(v29 - 144);
  int v32 = *(_DWORD *)(v29 - 144) == (v25 ^ 0x313 ^ (v28 - 1395));
  return (*(uint64_t (**)(uint64_t))(v27 + 8 * ((v32 | (v32 << 6)) ^ (v25 - 1111))))(v31);
}

uint64_t sub_19E73D27C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, unsigned int a8)
{
  return (*(uint64_t (**)(void))(v10
                              + 8
                              * (((*(_DWORD *)(*v11 + 4 * a8) == v8)
                                * (((a7 + v9) ^ (v9 + 2302)) + ((a7 + v9) & a6) - 1084)) ^ a7)))();
}

uint64_t sub_19E73ED60@<X0>(uint64_t a1@<X8>)
{
  uint64_t v6 = v2;
  uint64_t v7 = v2;
  uint64_t v8 = a1;
  unsigned int v5 = ((v3 ^ 0x176) + 475) ^ (1305237457
                             * ((((2 * &v5) | 0x172E7764) - &v5 + 1953023054) ^ 0x322E9D7C));
  return (*(uint64_t (**)(unsigned int *))(v1 + 8 * ((v3 ^ 0x176) + 1258)))(&v5);
}

uint64_t sub_19E73EDCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  return (*(uint64_t (**)(void))(v9
                              + 8
                              * ((a8 + v10 + 563) | (8
                                                   * (((v10 ^ (v11 + 63)) ^ ((v8 - 805997611) < 0x38)) & 1)))))();
}

uint64_t sub_19E73EF28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unint64_t a16, uint64_t a17, int a18, int a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,int a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,int a55)
{
  unsigned int v62 = 382 * (((v55 + 1065067) | 0xD0403000) ^ (a8 + 2));
  int v58 = 1305237457 * ((~((v57 - 224) | 0xE37D97D7) + ((v57 - 224) & 0xE37D97D7)) ^ 0xA53BCEE6);
  *(_DWORD *)(v57 - 224) = (a19 - 822219878) ^ v58;
  *(_DWORD *)(v57 - 208) = v58 + v55 + 592;
  STACK[0x388] = a16;
  uint64_t v59 = (*(uint64_t (**)(uint64_t))(v56 + 8 * (v55 ^ 0x944)))(v57 - 224);
  int v60 = ((2 * a55) & 0x7C ^ 0x48) + (a55 & 0x3F ^ (v62 - 337318690));
  *(&a46 + (v60 + 337317890)) = 65;
  return (*(uint64_t (**)(uint64_t))(v56 + 8 * ((573 * ((v60 + 337317834) < 0xFFFFFFC8)) ^ v55)))(v59);
}

uint64_t sub_19E73F080@<X0>(void *a1@<X0>, int a2@<W2>, uint64_t a3@<X8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,char a31,uint64_t a32,char a33,uint64_t a34,char a35,uint64_t a36,char a37)
{
  uint64_t v42 = &a23 + v38;
  int v60 = &a37 + v38;
  uint64_t v59 = &a33 + v38;
  int v58 = &a21 + v38;
  uint64_t v57 = &a29 + v38;
  uint64_t v56 = &a25 + v38;
  int v55 = &a31 + v38;
  uint64_t v43 = &a35 + v38;
  int64x2_t v61 = &a35 + v38;
  int v44 = v37 ^ 0x53A;
  uint64_t v45 = a1[4];
  uint64_t v63 = a1[5];
  uint64_t v46 = a1[1];
  uint64_t v47 = *(void *)(v46 - 0x67AD5A2084A5D3A8);
  int v54 = 2 * (v41 - 144);
  *(void *)(v41 - 144) = v46;
  *(void *)(v41 - 136) = v42;
  *(_DWORD *)(v41 - 128) = (v37 ^ 0x53A) + 2080 - (((v54 | 0x4543CAF4) - (v41 - 144) + 1566448262) ^ 0xB353E830) * a2;
  int v48 = (2 * (v37 ^ 0x53A)) ^ 0x4FF;
  *(void *)(v41 - 120) = v45;
  *(void *)(v41 - 112) = v47;
  *(void *)(v41 - 104) = a3;
  uint64_t v62 = 8 * ((v37 ^ 0x53A) + 2154);
  (*(void (**)(uint64_t))(v39 + v62))(v41 - 144);
  *(void *)(v41 - 128) = v43;
  *(void *)(v41 - 120) = v45;
  *(_DWORD *)(v41 - 112) = v44
                         + 402930427 * ((((v41 - 144) | 0x7F1D6389) - ((v41 - 144) & 0x7F1D6389)) ^ 0x65A49F34)
                         + 1182;
  *(void *)(v41 - 144) = v42;
  *(void *)(v41 - 136) = v46;
  (*(void (**)(uint64_t))(v39 + 8 * (v44 + 2156)))(v41 - 144);
  int v52 = v44 + 2080 - 291962093 * ((v41 - 144) ^ 0x11F20D4A);
  *(_DWORD *)(v41 - 128) = v52;
  *(void *)(v41 - 120) = v45;
  *(void *)(v41 - 112) = v42;
  *(void *)(v41 - 104) = v43;
  *(void *)(v41 - 144) = v46;
  *(void *)(v41 - 136) = v60;
  (*(void (**)(uint64_t))(v39 + v62))(v41 - 144);
  *(void *)(v41 - 112) = v60;
  *(void *)(v41 - 104) = v43;
  *(_DWORD *)(v41 - 128) = v44
                         + 2080
                         - 291962093
                         * ((-138129049 - ((v41 - 144) | 0xF7C45167) + ((v41 - 144) | 0x83BAE98)) ^ 0x19C9A3D2);
  *(void *)(v41 - 120) = v45;
  *(void *)(v41 - 144) = v46;
  *(void *)(v41 - 136) = v59;
  (*(void (**)(uint64_t))(v39 + v62))(v41 - 144);
  *(void *)(v41 - 112) = v59;
  *(void *)(v41 - 104) = v61;
  *(_DWORD *)(v41 - 128) = v44
                         + 2080
                         - 291962093 * (((v41 - 144) & 0x4A568F9A | ~((v41 - 144) | 0x4A568F9A)) ^ 0xA45B7D2F);
  *(void *)(v41 - 144) = v46;
  *(void *)(v41 - 136) = v58;
  *(void *)(v41 - 120) = v45;
  (*(void (**)(uint64_t))(v39 + v62))(v41 - 144);
  *(void *)(v41 - 112) = v58;
  *(void *)(v41 - 104) = v61;
  *(void *)(v41 - 144) = v46;
  *(void *)(v41 - 136) = v57;
  *(_DWORD *)(v41 - 128) = v52;
  *(void *)(v41 - 120) = v45;
  (*(void (**)(uint64_t))(v39 + v62))(v41 - 144);
  *(void *)(v41 - 112) = v57;
  *(void *)(v41 - 104) = v61;
  *(void *)(v41 - 144) = v46;
  *(void *)(v41 - 136) = v56;
  *(void *)(v41 - 120) = v45;
  *(_DWORD *)(v41 - 128) = v44
                         + 2080
                         - 291962093
                         * ((((v41 - 144) | 0xDE0C2121) - (v41 - 144) + ((v41 - 144) & 0x21F3DED8)) ^ 0xCFFE2C6B);
  uint64_t v53 = 8 * (v44 ^ 0x99A);
  (*(void (**)(uint64_t))(v39 + v53))(v41 - 144);
  *(_DWORD *)(v41 - 128) = v44 + 2080 - 291962093 * (((v54 | 0xDCC326BE) - (v41 - 144) + 295595169) ^ 0xFF939E15);
  *(void *)(v41 - 120) = v45;
  *(void *)(v41 - 112) = v56;
  *(void *)(v41 - 144) = v46;
  *(void *)(v41 - 136) = v55;
  *(void *)(v41 - 104) = v61;
  (*(void (**)(uint64_t))(v39 + v62))(v41 - 144);
  *(void *)(v41 - 112) = v55;
  *(void *)(v41 - 104) = v61;
  *(void *)(v41 - 144) = v46;
  *(void *)(v41 - 136) = v61;
  *(_DWORD *)(v41 - 128) = v44 + 2080 - 291962093 * (((v54 | 0x262F2632) - (v41 - 144) + 1827171559) ^ 0x82E59E53);
  *(void *)(v41 - 120) = v45;
  (*(void (**)(uint64_t))(v39 + v53))(v41 - 144);
  uint64_t v49 = *(void *)(v46 - 0x67AD5A2084A5D3B0);
  *(void *)(v41 - 136) = v40;
  *(void *)(v41 - 128) = v49;
  *(_DWORD *)(v41 - 144) = v44
                         + 1305237457
                         * ((((v41 - 144) ^ 0x7194A718 | 0x5932FCA7) - (((v41 - 144) ^ 0x7194A718) & 0x5932FCA7)) ^ 0x911FFD71)
                         + 1140;
  (*(void (**)(uint64_t))(v39 + 8 * (v44 ^ 0x996)))(v41 - 144);
  *(_DWORD *)(v41 - 136) = (v44 + 1714) ^ (653146051
                                         * ((2 * ((v41 - 144) & 0x4D7F56F8) - (v41 - 144) + 847292677) ^ 0x98941CE7));
  *(void *)(v41 - 144) = v63;
  uint64_t v50 = (*(uint64_t (**)(uint64_t))(v39 + 8 * (v44 + 2254)))(v41 - 144);
  return (*(uint64_t (**)(uint64_t))(v39
                                            + 8
                                            * ((111
                                              * ((v48 + *(_DWORD *)(v41 - 132) - 181036344 - 1413) > 0x7FFFFFFE)) ^ v44)))(v50);
}

uint64_t sub_19E73F59C()
{
  unsigned int v6 = (v3 + 1833288191) & 0x92BA3DFF;
  int v7 = 583844137 * (((v5 - 144) & 0x4D2E1232 | ~((v5 - 144) | 0x4D2E1232)) ^ 0xA20F5040);
  *(_DWORD *)(v5 - 144) = v7 + v3 - 526;
  *(void *)(v5 - 136) = v10;
  *(_DWORD *)(v5 - 128) = v7 + 748716562;
  (*(void (**)(uint64_t))(v1 + 8 * (v3 + 978)))(v5 - 144);
  *(void *)(v5 - 112) = v4;
  *(void *)(v5 - 104) = v10;
  *(_DWORD *)(v5 - 128) = v3
                        - 291962093 * ((((2 * (v5 - 144)) | 0x9272A5F4) - (v5 - 144) - 1228493562) ^ 0x58CB5FB0)
                        + 853;
  *(void *)(v5 - 144) = v0;
  *(void *)(v5 - 136) = v4;
  *(void *)(v5 - 120) = v2;
  (*(void (**)(uint64_t))(v1 + 8 * (v3 + 927)))(v5 - 144);
  *(_DWORD *)(v5 - 144) = v6 + 1305237457 * ((v5 + 601068984 - 2 * ((v5 - 144) & 0x23D39648)) ^ 0x9A6A3086) - 86;
  *(void *)(v5 - 136) = v9;
  *(void *)(v5 - 128) = v4;
  return (*(uint64_t (**)(uint64_t))(v1 + 8 * (int)(v6 + 932)))(v5 - 144);
}

uint64_t sub_19E73F690()
{
  return (*(uint64_t (**)(uint64_t))(v3 + 8 * (((((v0 + 640) ^ 0x3FD) + 1429) * (v1 == v2)) ^ v0)))(3194074354);
}

uint64_t sub_19E73F6D0()
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * ((460 * (v1 != ((((v3 & 0x3015BFCD) + 955) | 1) ^ (v0 - 2183)))) ^ v3 & 0x3015BFCDu)))();
}

uint64_t sub_19E73FC0C@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  return (*(uint64_t (**)(void *, uint64_t, void, uint64_t, uint64_t, uint64_t))(a5
                                                                                         + 8
                                                                                         * ((229
                                                                                           * ((((v5 + 719) ^ (v6 == ((v5 + 765) ^ 0x6CE45007))) & 1) == 0)) ^ v5)))(a1, a2, *a1, a3, a4, 4031147146);
}

uint64_t sub_19E741310(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  BOOL v10 = v7 + a2 > 1430724537 || v7 + a2 < a6;
  return (*(uint64_t (**)(void))(v6 + 8 * ((1224 * v10) ^ v8)))();
}

uint64_t sub_19E741354@<X0>(uint64_t result@<X0>, int a2@<W1>, int a3@<W3>, _DWORD *a4@<X8>)
{
  uint64_t v8 = *(void *)(result + 48);
  uint64_t v9 = *(void *)(result + 8);
  uint64_t v10 = *(void *)(result + 16);
  *a4 = v6 + (v7 ^ 0x1B8) + 1291343890;
  *(_DWORD *)(v10 - 0x78F763A55785BE6ELL) = v5;
  *(_DWORD *)(v8 - 0x5CF1A0FB9E997F7ALL) = a3;
  *(void *)(v9 - 0x7C30A4ACD66016E7) = v4 + (a2 - 1738743691);
  *(_DWORD *)(result + 40) = 694817499;
  return result;
}

uint64_t sub_19E7413DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, _DWORD *a9)
{
  int v11 = ((a7 + 1077) ^ 0xCDECAB80) + v9;
  signed int v12 = ((a7 + 1773373238) & 0x964C7CFE) + *a9 - 840131968;
  int v13 = (v11 < 1571174060) ^ (v12 < 1571174060);
  BOOL v14 = v11 > v12;
  if (v13) {
    BOOL v14 = v11 < 1571174060;
  }
  return (*(uint64_t (**)(void))(v10 + 8 * ((3131 * v14) ^ a7)))();
}

uint64_t sub_19E741464@<X0>(int a1@<W8>, int a2, unsigned int a3)
{
  BOOL v5 = a3 < 0xD137239F;
  if (v5 == (a1 - 1251074263) < 0xD137239F) {
    BOOL v5 = a1 - 1251074263 < a3;
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 8 * ((23 * !v5) ^ v3)))(3194074697);
}

uint64_t sub_19E7414E8@<X0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W8>)
{
  *(unsigned char *)(a1 + (a2 + v5)) = *(unsigned char *)(v4 + (a2 + v5)) ^ 0xC1;
  return (*(uint64_t (**)(void))(v6 + 8 * ((23 * (a3 - 854 + a2 - 1143 != a4)) ^ (a3 - 1224))))();
}

uint64_t sub_19E741528()
{
  return 4294925278;
}

uint64_t sub_19E741530()
{
  return (*(uint64_t (**)(uint64_t))(v1
                                            + 8 * ((950 * (v0 - 564264110 < ((v2 - 23) | 0x41Au) - 998)) ^ (v2 + 458))))(193);
}

uint64_t sub_19E741584@<X0>(uint64_t a1@<X2>, int a2@<W5>, uint64_t a3@<X8>)
{
  *(_DWORD *)(*(void *)(a1 - 0x7CF6A079DDC7252CLL) + 4 * (v4 + a2)) = v5;
  int v6 = v4 + v3 + 783 - 1127;
  int v7 = v3 + 1133;
  *(_DWORD *)(a1 - 0x7CF6A079DDC72530) = v6;
  int v8 = v6 + a2;
  if (v6 + a2 < 0) {
    int v8 = -v8;
  }
  return (*(uint64_t (**)(void))(a3
                              + 8
                              * ((3399
                                * ((int)((v8 ^ 0xEFB9DF7F)
                                       + ((v7 ^ 0xDF73BB38) & (2 * v8))
                                       + 273030290
                                       + ((2 * v7) ^ 0x862)) > (v7 ^ 0x6F) - 1450)) ^ v7)))();
}

void sub_19E741864()
{
}

uint64_t sub_19E741870@<X0>(int a1@<W0>, int a2@<W8>)
{
  return (*(uint64_t (**)(void))(v6
                              + 8
                              * ((2516
                                * (v5
                                 + (*(unsigned __int8 *)(v3 + 4) ^ v2)
                                 + ((2 * *(unsigned __int8 *)(v3 + 4)) & 0x7777)
                                 + ((19 * (v4 ^ 0x1F2)) ^ (a1 + 835))
                                 - 113 == a2)) ^ v4)))();
}

uint64_t sub_19E741AC8(int a1, double a2)
{
  *(double *)(v6 + (((v4 + 590) ^ v5) & (v3 + 8))) = a2;
  return (*(uint64_t (**)(void))(v7 + 8 * (((v2 == -8) * a1) ^ v4)))();
}

uint64_t sub_19E741AD4()
{
  return (*(uint64_t (**)(void))(v2 + 8 * (((v1 - 1 >= 0) * (((v0 + 112) | 0x86) + 551)) ^ v0)))();
}

uint64_t sub_19E7439B4()
{
  int v6 = 1001500783 * ((((v5 - 144) | 0x25A95480) - ((v5 - 144) & 0x25A95480)) ^ 0x6F1DAB34);
  *(void *)(v5 - 128) = v8;
  *(void *)(v5 - 144) = v3;
  *(_DWORD *)(v5 - 136) = v1 - v6 + 238006240 + v4 + 1158;
  *(_DWORD *)(v5 - 120) = (v4 + 1026) ^ v6;
  uint64_t result = (*(uint64_t (**)(uint64_t))(v2 + 8 * (v4 ^ 0xB74u)))(v5 - 144);
  _DWORD *v10 = v9;
  *(_DWORD *)(v0 + 72) = 694817499;
  return result;
}

uint64_t sub_19E743B80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, int a3@<W3>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  *(unsigned char *)(a4 + (((v6 - 440) ^ (unint64_t)(a2 + 235)) & (a6 + a1))) = *(unsigned char *)(v7 + v10 + a5);
  return (*(uint64_t (**)(void))(v8 + 8 * ((((a6 + a3) > 0x3F) * v9) ^ v6)))();
}

uint64_t sub_19E743BCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,int a41)
{
  int v46 = 1001500783 * ((((v45 - 184) | 0x20FC82D5) - ((v45 - 184) & 0x20FC82D5)) ^ 0x6A487D61);
  *(_DWORD *)(v45 - 164) = v46 ^ v41 ^ 0xACB05602;
  *(void *)(v45 - 176) = &STACK[0x542A6DEB665DBA22];
  *(_DWORD *)(v45 - 184) = v46 + v43 - 167302732;
  (*(void (**)(uint64_t))(v42 + 8 * (v43 ^ 0x9C6)))(v45 - 184);
  return (*(uint64_t (**)(uint64_t))(v42
                                            + 8
                                            * ((367
                                              * (*v44
                                               - 2017339421
                                               + ((((v43 - 148) | 0x20E) - 68) ^ (2 * a41) & 0x7A ^ 0x262)
                                               + (a41 & 0x3F ^ 0x9794D759)
                                               + 2129653724 < 0xFFFFFFC0)) ^ v43)))(3467893714);
}

uint64_t sub_19E743D48(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(*(void *)(a1 + 96) + 1424) = *(_DWORD *)(a2 + 4)
                                             - 725584871
                                             + (((v2 ^ 0x335) - 605038099) & 0x35F7A7D7);
  *(void *)(*(void *)(a1 + 96) + 520) = *(void *)(a2 + 8) + 1;
  return 0;
}

uint64_t sub_19E743DA0(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45)
{
  uint64_t v51 = v47 ^ 0x1Du;
  v52.i64[0] = 0x8282828282828282;
  v52.i64[1] = 0x8282828282828282;
  *(int8x16_t *)(a5 + (v45 + a1 + v51 - 21)) = vaddq_s8(vsubq_s8(*v49, vandq_s8(vaddq_s8(*v49, *v49), v52)), v50);
  uint64_t v53 = *(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v48 + 8 * (int)((29 * (((v51 + 0x1FFFFFE84) & (v46 + 1)) != 16)) ^ v51));
  return v53(v53, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45);
}

uint64_t sub_19E745114(uint64_t a1)
{
  char v4 = *(unsigned char *)(*(void *)(a1 + 32) + (v2 - 807847714));
  char v5 = ((3 * (v3 ^ 0x7D) - 66) ^ (v3 - 43)) + v4 - ((2 * v4) & 0x68);
  unsigned int v6 = (((2 * (v5 & 0x1F ^ 0x15)) & 0xFFFFFFF7) - (v5 & 0x1F ^ 0x15) + 1845746276) ^ 0x2E13DB44;
  return (*(uint64_t (**)(void))(v1 + 8 * ((105 * ((v6 | 0x80E4E56D) - (v6 | 0x7F1B1A92) == 1104792001)) ^ v3)))();
}

uint64_t sub_19E7451D4@<X0>(uint64_t a1@<X2>, int a2@<W3>, int a3@<W8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,_DWORD *a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57)
{
  *a51 = 458213053;
  unint64_t v59 = 1305237457 * ((v58 - 0x375682197D38E0CCLL - 2 * ((v58 - 152) & 0xC8A97DE682C71FCCLL)) ^ 0x19F4E4973B7EB902);
  STACK[0x6A0] = (*v57 - 626793632) ^ v59;
  int v60 = (a3 + 280534084) ^ v59;
  STACK[0x690] = v59 ^ 0x3E4E87B7;
  *(_DWORD *)(v58 - 144) = v60;
  *(_DWORD *)(v58 - 140) = -2103722546 - v59 + a3;
  *(_DWORD *)(v58 - 152) = -1305237457 * ((v58 - 2100879564 - 2 * ((v58 - 152) & 0x82C71FCC)) ^ 0x3B7EB902);
  *(_DWORD *)(v58 - 148) = v60 ^ 0x3A;
  *(_DWORD *)(v58 - 120) = ((a3 + 280534084) | 0x49) ^ v59;
  uint64_t v61 = (*(uint64_t (**)(uint64_t))(a1 + 8 * (a3 ^ (a2 - 1820))))(v58 - 152);
  return (*(uint64_t (**)(uint64_t))(a57 + 8 * *(int *)(v58 - 136)))(v61);
}

uint64_t sub_19E7452FC@<X0>(int a1@<W7>, int a2@<W8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,char a27)
{
  *(&a27 + (v28 + a2)) = *(unsigned char *)(v27 + v32 - 827073582)
                                     - ((2 * *(unsigned char *)(v27 + v32 - 827073582)) & 0x83)
                                     - 63;
  return (*(uint64_t (**)(void))(v30 + 8 * ((25 * ((v31 + v28 + 1) > 0x3F)) | (a1 + v29 + 1636))))();
}

uint64_t sub_19E745384(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54)
{
  uint64_t v61 = (_DWORD *)(a39 + 24 * v55);
  *uint64_t v61 = v60;
  v61[1] = a7;
  *(void *)(v56 + 24 * v55 + 16) = a4;
  v61[4] = HIDWORD(a42);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v57 + 8 * (((*(_DWORD *)(v59 + 48 * v58 + 32) + 1016529640 < (((v54 + 273681615) | 0xC0006080) ^ 0x50507083)) * (((v54 + 207) | 0x143) ^ 0xE61)) ^ v54)))(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48,
           a49,
           a50,
           a51,
           a52,
           a53,
           a54);
}

void sub_19E745420(int a1@<W8>, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, unsigned int a10)
{
  unsigned int v13 = 1001500783 * (&a4 ^ 0x4AB4FFB4);
  a10 = ((v10 & 0xFFFDEF9E) + 1709403132 + (v11 ^ a1 ^ 0xFFFEF5B7)) ^ v13;
  a4 = a1 - v13 + 151;
  a8 = a2;
  (*(void (**)(int *))(v12 + 8 * (a1 ^ 0xB53u)))(&a4);
  JUMPOUT(0x19E739528);
}

uint64_t sub_19E7454A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  return (*(uint64_t (**)(void))(v7 + 8 * ((1758 * (v8 + 1 == v6 + 16)) ^ a6)))((a6 + 570));
}

uint64_t sub_19E7456C4@<X0>(int a1@<W0>, int a2@<W1>, uint64_t a3@<X3>, int a4@<W8>)
{
  *(unsigned char *)(v5 + v8 + v6) = *(unsigned char *)(a3 + (v4 + a1))
                           - ((2 * *(unsigned char *)(a3 + (v4 + a1))) & 0x83)
                           - 63;
  return (*(uint64_t (**)(void))(v9 + 8 * (((v5 + 1 == v7 + 64) * a2) ^ (v10 + a4 + 557))))();
}

uint64_t sub_19E7457E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,int32x4_t a63)
{
  LODWORD(v215) = -44964582;
  __n128 v74 = (__n128)vdupq_n_s32(0xF1733702);
  __n128 v75 = (__n128)vdupq_n_s32(0x2DD60000u);
  int32x4_t v76 = vdupq_n_s32(0x9DB8B35u);
  int8x16_t v213 = (int8x16_t)vdupq_n_s32(0xE270DE92);
  int8x16_t v214 = (int8x16_t)vdupq_n_s32(0x13B60000u);
  int32x4_t v77 = vdupq_n_s32(0xF1386F49);
  int32x4_t v78 = vdupq_n_s32(0x24983D00u);
  int32x4_t v79 = vdupq_n_s32(0x595C572Cu);
  int8x16_t v211 = (int8x16_t)vdupq_n_s32(0x86660412);
  int8x16_t v212 = (int8x16_t)vdupq_n_s32(0x32B8AE00u);
  int32x4_t v80 = vdupq_n_s32(0x43330209u);
  int32x4_t v81 = vdupq_n_s32(0xC4262DF0);
  int8x16_t v82 = (int8x16_t)vdupq_n_s32(0x52D425B6u);
  int32x4_t v83 = vdupq_n_s32(0x296A12DBu);
  v84.i64[0] = 0xC1C1C1C1C1C1C1C1;
  v84.i64[1] = 0xC1C1C1C1C1C1C1C1;
  v85.i64[0] = 0xF9000000F9000000;
  v85.i64[1] = 0xF9000000F9000000;
  v86.i64[0] = 0xE4000000E4000000;
  v86.i64[1] = 0xE4000000E4000000;
  int8x16_t v87 = *(uint64_t (**)(uint64_t, __n128, __n128))(v69 + 8 * (v73 + v66 - 165));
  HIDWORD(a38) = HIDWORD(a54);
  LODWORD(a37) = a54;
  uint64_t v88 = a55;
  HIDWORD(a33) = HIDWORD(a56);
  int v89 = BYTE4(a56) ^ 0x83;
  if (v89 == 85)
  {
    HIDWORD(v215) = HIDWORD(a53);
    LODWORD(a35) = a55;
    int8x16x4_t v217 = vld4q_s8((const char *)&a44 + 4);
    uint8x16_t v161 = (uint8x16_t)veorq_s8(v217.val[0], v84);
    uint16x8_t v162 = vmovl_u8(*(uint8x8_t *)v161.i8);
    uint16x8_t v163 = vmovl_high_u8(v161);
    v164.i64[0] = 0xF2000000F2;
    v164.i64[1] = 0xF2000000F2;
    int32x4_t v165 = vsubq_s32((int32x4_t)vmovl_high_u16(v163), (int32x4_t)vandq_s8((int8x16_t)vshll_high_n_u16(v163, 1uLL), v164));
    int32x4_t v166 = vshlq_n_s32(vsubq_s32((int32x4_t)vmovl_high_u16(v162), (int32x4_t)vandq_s8((int8x16_t)vshll_high_n_u16(v162, 1uLL), v164)), 0x18uLL);
    int32x4_t v167 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v162.i8), (int32x4_t)vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v162.i8, 1uLL), v164)), 0x18uLL), v85), (int8x16_t)v85);
    int32x4_t v168 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(v166, v85), (int8x16_t)v85);
    int32x4_t v169 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v163.i8), (int32x4_t)vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v163.i8, 1uLL), v164)), 0x18uLL), v85), (int8x16_t)v85);
    int32x4_t v170 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(v165, 0x18uLL), v85), (int8x16_t)v85);
    uint8x16_t v171 = (uint8x16_t)veorq_s8(v217.val[1], v84);
    uint16x8_t v172 = vmovl_u8(*(uint8x8_t *)v171.i8);
    uint16x8_t v173 = vmovl_high_u8(v171);
    int32x4_t v174 = vsubq_s32((int32x4_t)vmovl_high_u16(v173), (int32x4_t)(*(_OWORD *)&vshll_high_n_u16(v173, 1uLL) & __PAIR128__(0xFFFFFFADFFFFFFADLL, 0xFFFFFFADFFFFFFADLL)));
    int32x4_t v175 = vsubq_s32((int32x4_t)vmovl_high_u16(v172), (int32x4_t)(*(_OWORD *)&vshll_high_n_u16(v172, 1uLL) & __PAIR128__(0xFFFFFFADFFFFFFADLL, 0xFFFFFFADFFFFFFADLL)));
    int32x4_t v176 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v172.i8), (int32x4_t)(*(_OWORD *)&vshll_n_u16(*(uint16x4_t *)v172.i8, 1uLL) & __PAIR128__(0xFFFFFFADFFFFFFADLL, 0xFFFFFFADFFFFFFADLL))), 0x10uLL), (int32x4_t)v75), (int8x16_t)v75);
    int32x4_t v177 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(v175, 0x10uLL), (int32x4_t)v75), (int8x16_t)v75);
    int32x4_t v178 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v173.i8), (int32x4_t)(*(_OWORD *)&vshll_n_u16(*(uint16x4_t *)v173.i8, 1uLL) & __PAIR128__(0xFFFFFFADFFFFFFADLL, 0xFFFFFFADFFFFFFADLL))), 0x10uLL), (int32x4_t)v75), (int8x16_t)v75);
    int32x4_t v179 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(v174, 0x10uLL), (int32x4_t)v75), (int8x16_t)v75);
    int32x4_t v180 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v176, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v176, v176), v214)), v76), (int8x16_t)v76), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v167, (int32x4_t)(*(_OWORD *)&vaddq_s32(v167, v167) & __PAIR128__(0xE3FFFFFFE3FFFFFFLL, 0xE3FFFFFFE3FFFFFFLL))), (int32x4_t)v74), (int8x16_t)v74));
    int32x4_t v181 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v177, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v177, v177), v214)), v76), (int8x16_t)v76), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v168, (int32x4_t)(*(_OWORD *)&vaddq_s32(v168, v168) & __PAIR128__(0xE3FFFFFFE3FFFFFFLL, 0xE3FFFFFFE3FFFFFFLL))), (int32x4_t)v74), (int8x16_t)v74));
    int32x4_t v182 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v178, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v178, v178), v214)), v76), (int8x16_t)v76), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v169, (int32x4_t)(*(_OWORD *)&vaddq_s32(v169, v169) & __PAIR128__(0xE3FFFFFFE3FFFFFFLL, 0xE3FFFFFFE3FFFFFFLL))), (int32x4_t)v74), (int8x16_t)v74));
    int32x4_t v183 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v179, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v179, v179), v214)), v76), (int8x16_t)v76), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v170, (int32x4_t)(*(_OWORD *)&vaddq_s32(v170, v170) & __PAIR128__(0xE3FFFFFFE3FFFFFFLL, 0xE3FFFFFFE3FFFFFFLL))), (int32x4_t)v74), (int8x16_t)v74));
    int32x4_t v184 = vsubq_s32(v183, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v183, v183), v213));
    int32x4_t v185 = vsubq_s32(v182, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v182, v182), v213));
    int32x4_t v186 = vsubq_s32(v181, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v181, v181), v213));
    uint8x16_t v187 = (uint8x16_t)veorq_s8(v217.val[2], v84);
    uint16x8_t v188 = vmovl_u8(*(uint8x8_t *)v187.i8);
    uint16x8_t v189 = vmovl_high_u8(v187);
    v179.i64[0] = 0x7A0000007ALL;
    v179.i64[1] = 0x7A0000007ALL;
    int32x4_t v190 = vsubq_s32((int32x4_t)vmovl_high_u16(v189), (int32x4_t)vandq_s8((int8x16_t)vshll_high_n_u16(v189, 1uLL), (int8x16_t)v179));
    int32x4_t v191 = vsubq_s32((int32x4_t)vmovl_high_u16(v188), (int32x4_t)vandq_s8((int8x16_t)vshll_high_n_u16(v188, 1uLL), (int8x16_t)v179));
    int32x4_t v192 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v188.i8), (int32x4_t)vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v188.i8, 1uLL), (int8x16_t)v179)), 8uLL), v78), (int8x16_t)v78);
    int32x4_t v193 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(v191, 8uLL), v78), (int8x16_t)v78);
    int32x4_t v194 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v189.i8), (int32x4_t)vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v189.i8, 1uLL), (int8x16_t)v179)), 8uLL), v78), (int8x16_t)v78);
    int32x4_t v195 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(v190, 8uLL), v78), (int8x16_t)v78);
    int32x4_t v196 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v180, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v180, v180), v213)), v77), (int8x16_t)v77), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v192, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v192, v192), v212)), v79), (int8x16_t)v79));
    int32x4_t v197 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(v186, v77), (int8x16_t)v77), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v193, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v193, v193), v212)), v79), (int8x16_t)v79));
    int32x4_t v198 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(v185, v77), (int8x16_t)v77), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v194, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v194, v194), v212)), v79), (int8x16_t)v79));
    int32x4_t v199 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(v184, v77), (int8x16_t)v77), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v195, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v195, v195), v212)), v79), (int8x16_t)v79));
    uint8x16_t v200 = (uint8x16_t)veorq_s8(v217.val[3], v84);
    uint16x8_t v201 = vmovl_u8(*(uint8x8_t *)v200.i8);
    uint16x8_t v202 = vmovl_high_u8(v200);
    int32x4_t v203 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v196, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v196, v196), v211)), v80), (int8x16_t)v80), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v201.i8), (int32x4_t)(*(_OWORD *)&vshll_n_u16(*(uint16x4_t *)v201.i8, 1uLL) & __PAIR128__(0xFFFFFFE1FFFFFFE1, 0xFFFFFFE1FFFFFFE1))), v81), (int8x16_t)v81));
    int32x4_t v204 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v197, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v197, v197), v211)), v80), (int8x16_t)v80), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32((int32x4_t)vmovl_high_u16(v201), (int32x4_t)(*(_OWORD *)&vshll_high_n_u16(v201, 1uLL) & __PAIR128__(0xFFFFFFE1FFFFFFE1, 0xFFFFFFE1FFFFFFE1))), v81), (int8x16_t)v81));
    int32x4_t v205 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v198, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v198, v198), v211)), v80), (int8x16_t)v80), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v202.i8), (int32x4_t)(*(_OWORD *)&vshll_n_u16(*(uint16x4_t *)v202.i8, 1uLL) & __PAIR128__(0xFFFFFFE1FFFFFFE1, 0xFFFFFFE1FFFFFFE1))), v81), (int8x16_t)v81));
    int32x4_t v206 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v199, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v199, v199), v211)), v80), (int8x16_t)v80), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32((int32x4_t)vmovl_high_u16(v202), (int32x4_t)(*(_OWORD *)&vshll_high_n_u16(v202, 1uLL) & __PAIR128__(0xFFFFFFE1FFFFFFE1, 0xFFFFFFE1FFFFFFE1))), v81), (int8x16_t)v81));
    a65 = vaddq_s32(vsubq_s32(v205, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v205, v205), v82)), v83);
    a66 = vaddq_s32(vsubq_s32(v206, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v206, v206), v82)), v83);
    a63 = vaddq_s32(vsubq_s32(v203, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v203, v203), v82)), v83);
    a64 = vaddq_s32(vsubq_s32(v204, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v204, v204), v82)), v83);
    HIDWORD(a31) = HIDWORD(a55);
    uint64_t v207 = (v73 + a8 + 70) | 0x470u;
    unint64_t v208 = (_DWORD *)&a63 + v72 + 424448010;
    HIDWORD(v209) = *(v208 - 8) ^ *(v208 - 3) ^ *(v208 - 14) ^ *(v208 - 16);
    LODWORD(v209) = HIDWORD(v209);
    *unint64_t v208 = (v209 >> 31) + v67 - ((v207 ^ 0x52D420C6) & (2 * (v209 >> 31)));
    int8x16x4_t v210 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t (*)(uint64_t, __n128, __n128), uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v69 + 8 * ((2930 * (v71 == 424447947)) ^ (v73 + (int)a8 + 678)));
    HIDWORD(a28) = HIDWORD(a18) - 2117691761;
    return v210(v207, v88, 3892314112, v210, 652, 1646, 97, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, v211.i64[0],
             v211.i64[1],
             v212.i64[0],
             v212.i64[1],
             v213.i64[0],
             v213.i64[1],
             v214.i64[0],
             v214.i64[1],
             a27,
             a28,
             a29,
             a30,
             a31,
             a32,
             a33,
             v215,
             a35,
             v87,
             a37,
             a38,
             v71 - 16,
             a40,
             a41,
             a42,
             a43,
             a44,
             a45,
             a46,
             a47,
             a48,
             a49,
             a50,
             a51,
             a52,
             a53,
             a54,
             a55,
             a56,
             a57,
             a58,
             a59,
             a60,
             a61,
             a62);
  }
  else if (v89 == 86)
  {
    int8x16x4_t v216 = vld4q_s8((const char *)&a44 + 4);
    uint8x16_t v90 = (uint8x16_t)veorq_s8(v216.val[0], v84);
    uint16x8_t v91 = vmovl_u8(*(uint8x8_t *)v90.i8);
    uint16x8_t v92 = vmovl_high_u8(v90);
    int32x4_t v93 = (int32x4_t)vmovl_high_u16(v92);
    uint32x4_t v94 = vshll_high_n_u16(v92, 1uLL);
    int32x4_t v95 = vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v92.i8), (int32x4_t)(*(_OWORD *)&vshll_n_u16(*(uint16x4_t *)v92.i8, 1uLL) & __PAIR128__(0xFFFFFF6FFFFFFF6FLL, 0xFFFFFF6FFFFFFF6FLL)));
    int32x4_t v96 = vdupq_n_s32(0x4D7295B7u);
    int8x16_t v97 = (int8x16_t)vaddq_s32(v95, v96);
    uint8x16_t v98 = (uint8x16_t)veorq_s8(v216.val[1], v84);
    uint16x8_t v99 = vmovl_u8(*(uint8x8_t *)v98.i8);
    uint16x8_t v100 = vmovl_high_u8(v98);
    v101.i64[0] = 0x9200000092;
    v101.i64[1] = 0x9200000092;
    int32x4_t v102 = vsubq_s32((int32x4_t)vmovl_high_u16(v100), (int32x4_t)vandq_s8((int8x16_t)vshll_high_n_u16(v100, 1uLL), v101));
    int32x4_t v103 = vshlq_n_s32(vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v100.i8), (int32x4_t)vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v100.i8, 1uLL), v101)), 8uLL);
    int32x4_t v104 = vdupq_n_s32(0x26CA4900u);
    int32x4_t v105 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v99.i8), (int32x4_t)vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v99.i8, 1uLL), v101)), 8uLL), v104), (int8x16_t)v104);
    int32x4_t v106 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(vsubq_s32((int32x4_t)vmovl_high_u16(v99), (int32x4_t)vandq_s8((int8x16_t)vshll_high_n_u16(v99, 1uLL), v101)), 8uLL), v104), (int8x16_t)v104);
    int32x4_t v107 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(v103, v104), (int8x16_t)v104);
    int32x4_t v108 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(v102, 8uLL), v104), (int8x16_t)v104);
    int8x16_t v109 = (int8x16_t)vdupq_n_s32(0x1DC79600u);
    int32x4_t v110 = (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v105, v105), v109);
    int32x4_t v111 = vsubq_s32(v108, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v108, v108), v109));
    int32x4_t v112 = vsubq_s32(v107, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v107, v107), v109));
    int32x4_t v113 = vsubq_s32(v106, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v106, v106), v109));
    int32x4_t v114 = vdupq_n_s32(0x4EE3CBFBu);
    int32x4_t v115 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v105, v110), v114), (int8x16_t)v114), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v91.i8), (int32x4_t)(*(_OWORD *)&vshll_n_u16(*(uint16x4_t *)v91.i8, 1uLL) & __PAIR128__(0xFFFFFF6FFFFFFF6FLL, 0xFFFFFF6FFFFFFF6FLL))), v96), (int8x16_t)v96));
    int32x4_t v116 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(v113, v114), (int8x16_t)v114), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32((int32x4_t)vmovl_high_u16(v91), (int32x4_t)(*(_OWORD *)&vshll_high_n_u16(v91, 1uLL) & __PAIR128__(0xFFFFFF6FFFFFFF6FLL, 0xFFFFFF6FFFFFFF6FLL))), v96), (int8x16_t)v96));
    int32x4_t v117 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(v112, v114), (int8x16_t)v114), veorq_s8(v97, (int8x16_t)v96));
    int32x4_t v118 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(v111, v114), (int8x16_t)v114), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v93, (int32x4_t)(*(_OWORD *)&v94 & __PAIR128__(0xFFFFFF6FFFFFFF6FLL, 0xFFFFFF6FFFFFFF6FLL))), v96), (int8x16_t)v96));
    int8x16_t v119 = (int8x16_t)vdupq_n_s32(0x23A6FB0Eu);
    int32x4_t v120 = vsubq_s32(v118, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v118, v118), v119));
    int32x4_t v121 = vsubq_s32(v117, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v117, v117), v119));
    int32x4_t v122 = vsubq_s32(v116, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v116, v116), v119));
    int32x4_t v123 = vsubq_s32(v115, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v115, v115), v119));
    int32x4_t v124 = vdupq_n_s32(0x11D37D87u);
    uint8x16_t v125 = (uint8x16_t)veorq_s8(v216.val[2], v84);
    uint16x8_t v126 = vmovl_u8(*(uint8x8_t *)v125.i8);
    uint16x8_t v127 = vmovl_high_u8(v125);
    int32x4_t v128 = vsubq_s32((int32x4_t)vmovl_high_u16(v127), (int32x4_t)(*(_OWORD *)&vshll_high_n_u16(v127, 1uLL) & __PAIR128__(0xFFFFFFA5FFFFFFA5, 0xFFFFFFA5FFFFFFA5)));
    int32x4_t v129 = vsubq_s32((int32x4_t)vmovl_high_u16(v126), (int32x4_t)(*(_OWORD *)&vshll_high_n_u16(v126, 1uLL) & __PAIR128__(0xFFFFFFA5FFFFFFA5, 0xFFFFFFA5FFFFFFA5)));
    int32x4_t v130 = vdupq_n_s32(0x3ED20000u);
    int32x4_t v131 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v126.i8), (int32x4_t)(*(_OWORD *)&vshll_n_u16(*(uint16x4_t *)v126.i8, 1uLL) & __PAIR128__(0xFFFFFFA5FFFFFFA5, 0xFFFFFFA5FFFFFFA5))), 0x10uLL), v130), (int8x16_t)v130);
    int32x4_t v132 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(v129, 0x10uLL), v130), (int8x16_t)v130);
    int32x4_t v133 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v127.i8), (int32x4_t)(*(_OWORD *)&vshll_n_u16(*(uint16x4_t *)v127.i8, 1uLL) & __PAIR128__(0xFFFFFFA5FFFFFFA5, 0xFFFFFFA5FFFFFFA5))), 0x10uLL), v130), (int8x16_t)v130);
    int32x4_t v134 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(v128, 0x10uLL), v130), (int8x16_t)v130);
    int8x16_t v135 = (int8x16_t)vdupq_n_s32(0x56540000u);
    int32x4_t v136 = vdupq_n_s32(0xAB2A298B);
    int32x4_t v137 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(v123, v124), (int8x16_t)v124), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v131, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v131, v131), v135)), v136), (int8x16_t)v136));
    int32x4_t v138 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(v122, v124), (int8x16_t)v124), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v132, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v132, v132), v135)), v136), (int8x16_t)v136));
    int32x4_t v139 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(v121, v124), (int8x16_t)v124), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v133, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v133, v133), v135)), v136), (int8x16_t)v136));
    int32x4_t v140 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(v120, v124), (int8x16_t)v124), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v134, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v134, v134), v135)), v136), (int8x16_t)v136));
    int8x16_t v141 = (int8x16_t)vdupq_n_s32(0x1AE1B776u);
    int32x4_t v142 = vdupq_n_s32(0xCD70DBBB);
    int8x16_t v143 = (int8x16_t)vaddq_s32(vsubq_s32(v137, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v137, v137), v141)), v142);
    int8x16_t v144 = (int8x16_t)vaddq_s32(vsubq_s32(v138, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v138, v138), v141)), v142);
    int8x16_t v145 = (int8x16_t)vaddq_s32(vsubq_s32(v139, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v139, v139), v141)), v142);
    int8x16_t v146 = (int8x16_t)vaddq_s32(vsubq_s32(v140, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v140, v140), v141)), v142);
    uint8x16_t v147 = (uint8x16_t)veorq_s8(v216.val[3], v84);
    uint16x8_t v148 = vmovl_u8(*(uint8x8_t *)v147.i8);
    uint16x8_t v149 = vmovl_high_u8(v147);
    v216.val[2].i64[0] = 0xC8000000C8;
    v216.val[2].i64[1] = 0xC8000000C8;
    v216.val[0] = (int8x16_t)vsubq_s32((int32x4_t)vmovl_high_u16(v149), (int32x4_t)vandq_s8((int8x16_t)vshll_high_n_u16(v149, 1uLL), v216.val[2]));
    int32x4_t v150 = vshlq_n_s32(vsubq_s32((int32x4_t)vmovl_high_u16(v148), (int32x4_t)vandq_s8((int8x16_t)vshll_high_n_u16(v148, 1uLL), v216.val[2])), 0x18uLL);
    int32x4_t v151 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v148.i8), (int32x4_t)vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v148.i8, 1uLL), v216.val[2])), 0x18uLL), v86), (int8x16_t)v86);
    int32x4_t v152 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(v150, v86), (int8x16_t)v86);
    int32x4_t v153 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v149.i8), (int32x4_t)vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v149.i8, 1uLL), v216.val[2])), 0x18uLL), v86), (int8x16_t)v86);
    int32x4_t v154 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32((int32x4_t)v216.val[0], 0x18uLL), v86), (int8x16_t)v86);
    int32x4_t v155 = vdupq_n_s32(0xF1B72361);
    int32x4_t v156 = (int32x4_t)vorrq_s8(veorq_s8(v143, (int8x16_t)v142), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v151, (int32x4_t)(*(_OWORD *)&vaddq_s32(v151, v151) & __PAIR128__(0xE3FFFFFFE3FFFFFFLL, 0xE3FFFFFFE3FFFFFFLL))), v155), (int8x16_t)v155));
    int32x4_t v157 = (int32x4_t)vorrq_s8(veorq_s8(v144, (int8x16_t)v142), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v152, (int32x4_t)(*(_OWORD *)&vaddq_s32(v152, v152) & __PAIR128__(0xE3FFFFFFE3FFFFFFLL, 0xE3FFFFFFE3FFFFFFLL))), v155), (int8x16_t)v155));
    int32x4_t v158 = (int32x4_t)vorrq_s8(veorq_s8(v145, (int8x16_t)v142), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v153, (int32x4_t)(*(_OWORD *)&vaddq_s32(v153, v153) & __PAIR128__(0xE3FFFFFFE3FFFFFFLL, 0xE3FFFFFFE3FFFFFFLL))), v155), (int8x16_t)v155));
    int32x4_t v159 = (int32x4_t)vorrq_s8(veorq_s8(v146, (int8x16_t)v142), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v154, (int32x4_t)(*(_OWORD *)&vaddq_s32(v154, v154) & __PAIR128__(0xE3FFFFFFE3FFFFFFLL, 0xE3FFFFFFE3FFFFFFLL))), v155), (int8x16_t)v155));
    a65 = vaddq_s32(vsubq_s32(v158, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v158, v158), v82)), v83);
    a66 = vaddq_s32(vsubq_s32(v159, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v159, v159), v82)), v83);
    a63 = vaddq_s32(vsubq_s32(v156, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v156, v156), v82)), v83);
    a64 = vaddq_s32(vsubq_s32(v157, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v157, v157), v82)), v83);
    return (*(uint64_t (**)(__n128, __n128))(v69 + 5216))(v74, v75);
  }
  else
  {
    HIDWORD(a53) = 2 * (HIDWORD(a53) ^ v70) + v70 - (v68 & (4 * (HIDWORD(a53) ^ v70)));
    LODWORD(a54) = 2 * (a54 ^ v70) + v70 - (v68 & (4 * (a54 ^ v70)));
    HIDWORD(a54) = 2 * (HIDWORD(a54) ^ v70) + v70 - (v68 & (4 * (HIDWORD(a54) ^ v70)));
    LODWORD(a55) = 2 * (a55 ^ v70) + v70 - (v68 & (4 * (a55 ^ v70)));
    return v87(3107047288, v74, v75);
  }
}

uint64_t sub_19E7457F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  *(void *)(v29 - 144) = a24;
  *(void *)(v29 - 136) = a23;
  *(_DWORD *)(v29 - 128) = v24
                         - 291962093 * ((2 * ((v29 - 144) & 0x3DA6CEB0) - (v29 - 144) - 1034342069) ^ 0xD3AB3C01)
                         + 2070;
  *(void *)(v29 - 112) = a23;
  *(void *)(v29 - 104) = a22;
  *(void *)(v29 - 120) = v25;
  uint64_t v30 = (*(uint64_t (**)(uint64_t))(v26 + 8 * (v24 ^ 0x9E0)))(v29 - 144);
  return (*(uint64_t (**)(uint64_t))(v26
                                            + 8
                                            * ((111
                                              * (((((v24 ^ 0x540) - 133) | 0x86) ^ (v27 + 1157)) + v28 > 0x7FFFFFFE)) ^ ((v24 ^ 0x540) - 1226))))(v30);
}

uint64_t sub_19E745C10()
{
  return (*(uint64_t (**)(void))(v1 + 8 * ((162 * ((((v2 + v0 - 14) ^ 1) & 1) == 0)) ^ (v2 + v0 + 190))))();
}

uint64_t sub_19E745C68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,int8x8_t a43,int a44)
{
  int v45 = BYTE4(a24) ^ 0xE6;
  if (v45 == 48) {
    return (*(uint64_t (**)(uint64_t))(v44 + 8 * ((158 * (a44 == 166534360)) ^ ((int)a7 - 1527007140))))(a9);
  }
  if (v45 == 51) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v44
  }
                                                                         + 8
                                                                         * (int)(((a44 != 166534360) * (a7 - 1527008698)) ^ (a7 - 1527008101))))(a9, a2, a3, 2767958146);
  int64x2_t v47 = vdupq_n_s64(((unint64_t)&a30 ^ 0x657F1BFCBFFFB2BFLL)- 0x41210008801C2001+ ((2 * (void)&a30) & 0xCAFE37F97FFF6570));
  int64x2_t v48 = vaddq_s64(v47, (int64x2_t)xmmword_19EC7A600);
  int64x2_t v49 = vaddq_s64(v47, (int64x2_t)xmmword_19EC3A120);
  int64x2_t v50 = vaddq_s64(v47, (int64x2_t)xmmword_19EC3A130);
  int64x2_t v51 = (int64x2_t)vorrq_s8((int8x16_t)v47, (int8x16_t)xmmword_19EC35D70);
  int64x2_t v52 = vdupq_n_s64(0xDBA1E40BC01C6D42);
  int8x16_t v53 = (int8x16_t)vdupq_n_s64(0xBAuLL);
  int8x16_t v54 = (int8x16_t)vdupq_n_s64(0xA7A2A767EC7CAC24);
  int64x2_t v55 = vdupq_n_s64(0xD3D153B3F63E5612);
  int64x2_t v56 = vdupq_n_s64(0xDBA1E40BC01C6D53);
  int8x16_t v57 = (int8x16_t)vdupq_n_s64(0x82uLL);
  int64x2_t v58 = vdupq_n_s64(0x7BuLL);
  int64x2_t v59 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(v50, v52), v53);
  int64x2_t v60 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(v51, v52), v53);
  int64x2_t v61 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(v49, v52), v53);
  int64x2_t v62 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(v48, v52), v53);
  int64x2_t v63 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(vsubq_s64(v62, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v62, v62), v54)), v55), (int8x16_t)v55);
  int64x2_t v64 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(vsubq_s64(v61, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v61, v61), v54)), v55), (int8x16_t)v55);
  int64x2_t v65 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(vsubq_s64(v60, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v60, v60), v54)), v55), (int8x16_t)v55);
  int64x2_t v66 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(vsubq_s64(v59, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v59, v59), v54)), v55), (int8x16_t)v55);
  int64x2_t v67 = vaddq_s64(v50, v56);
  v66.i64[0] *= v67.i64[0];
  v66.i64[1] *= v67.i64[1];
  int64x2_t v68 = vaddq_s64(v51, v56);
  v65.i64[0] *= v68.i64[0];
  v65.i64[1] *= v68.i64[1];
  int64x2_t v69 = vaddq_s64(v49, v56);
  v64.i64[0] *= v69.i64[0];
  v64.i64[1] *= v69.i64[1];
  int64x2_t v70 = vaddq_s64(v48, v56);
  uint64_t v71 = v70.i64[0];
  v63.i64[0] *= v70.i64[0];
  v63.i64[1] *= v70.i64[1];
  v73.val[1] = (int8x16_t)vaddq_s64(vsubq_s64(v66, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v66, v66), v57)), v58);
  v73.val[0] = (int8x16_t)vaddq_s64(vsubq_s64(v65, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v65, v65), v57)), v58);
  v73.val[2] = (int8x16_t)vaddq_s64(vsubq_s64(v64, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v64, v64), v57)), v58);
  v73.val[3] = (int8x16_t)vaddq_s64(vsubq_s64(v63, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v63, v63), v57)), v58);
  a43 = vrev64_s8(veor_s8(vadd_s8((int8x8_t)*(_OWORD *)&vqtbl4q_s8(v73, (int8x16_t)xmmword_19EC3AB10), (int8x8_t)0xC6C6C6C6C6C6C6C6), (int8x8_t)0x4141414141414141));
  uint64_t v72 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v44 + 8 * ((117 * ((((a7 - 1527008769) | 0x340u) ^ 0x349) == 88)) ^ ((int)a7 - 1527007950)));
  return v72(117, v72, v71, 2767958146, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35);
}

uint64_t sub_19E746724(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return (*(uint64_t (**)(uint64_t, void))(v5
                                                    + 8
                                                    * ((15 * ((((v8 ^ 0x16E) + 102) ^ 0xFAEA7BBF) + v7 != 417483464)) ^ v8)))(a1, (a5 + v6 + 1));
}

uint64_t sub_19E7467B0()
{
  return (*(uint64_t (**)(void))(v1 + 8 * (((((9 * (v0 ^ 0x5D0) - 599) | 0x13) - 449) * (v2 == 1130954007)) ^ v0)))();
}

uint64_t sub_19E7468F0@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * (int)(((((a1 + 1318046757) & 0xB1703399) - 108)
                                     * ((v1 - 2072727243) > 0xFFFFFFBE)) ^ a1)))();
}

uint64_t sub_19E746A5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 8 * ((((v8 - 485) ^ 0x56A ^ ((v8 - 312) | 0x12)) * ((v7 + 706) < 0x40)) | v8)))(4294967058, a2, 3730703186, a4, a5, 3730703159, a7, 193);
}

uint64_t sub_19E746CC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, int a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55)
{
  if (v57 >= v59) {
    int v62 = *v60 + 1;
  }
  else {
    int v62 = v58;
  }
  *int64x2_t v60 = v62;
  int v63 = v56 ^ (v56 >> 11);
  unsigned int v64 = ((a19 ^ (v63 << 7) ^ 0xE02DC5B2) - ((2 * (a19 ^ (v63 << 7) ^ 0xE02DC5B2)) & 0xF31C1E00) + 2039353105) & 0x9D2C5680 ^ 0xC241680;
  unsigned int v65 = (((2 * v64) | 0x1507A53A) - v64 + 1971072355) ^ 0x8EBBC339;
  unsigned int v66 = (((2 * v65) & 0xE16217A0) - v65 + 256832556) ^ v63;
  unsigned int v67 = ((v66 << 15) ^ 0xF98D0000) - ((2 * ((v66 << 15) ^ 0xF98D0000)) & 0xD6430000) - 350124733;
  unsigned int v68 = ((v67 & v61 ^ 0x43820000) + (v67 & 0x8B800000 ^ 0x98087BED) - ((v67 & v61 ^ 0x43820000) & 0x8B800000)) ^ 0xB3097BEC;
  unsigned int v69 = (((2 * v68) | 0xD1CB6D80) - v68 - 1759884992) ^ v66;
  *(_DWORD *)(*a54 + a55 - 1465092744) ^= v69 ^ (v69 >> 18) ^ 0xAD7476E;
  return (*(uint64_t (**)(void))(v55
                              + 8
                              * (((2 * ((unint64_t)(a55 - 1465092740) < 0x200)) | (4
                                                                                        * ((unint64_t)(a55 - 1465092740) < 0x200))) ^ 0x762)))();
}

uint64_t sub_19E748560(int a1)
{
  uint64_t v6 = v3 + 1;
  int v7 = *(unsigned __int8 *)(v1 + v6 - 0x4BA11E1A6C16FB15);
  unsigned int v8 = v7 ^ 0xDF73CABA;
  int v9 = ((((a1 - 801096497) | 0x103080) ^ (v5 - 296)) + ((a1 - 529) | 0xC2)) & (2 * v7);
  unsigned int v10 = *(unsigned __int8 *)(v2 + v6 - 0x4BA11E1A6C16FB15);
  if (v10 >= 7) {
    int v11 = 0;
  }
  else {
    int v11 = -256;
  }
  return (*(uint64_t (**)(void))(v4 + 8 * ((3056 * (v8 - v10 + v9 + v11 == -546059597)) ^ a1)))();
}

void sub_19E748568()
{
}

uint64_t sub_19E748578@<X0>(char a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,int a37,char a38)
{
  uint64_t v43 = v41 - 1;
  char v44 = ((((v39 + v38) ^ 0xBA) + a1 - ((2 * ((v39 + v38) ^ 0xBA)) & 0x14)) ^ a1) * (((v40 - 17) ^ (v38 + 19)) + v39);
  *(&a38 + v43) = (v44 - 2 * (v44 & 0x3F) + 63) ^ 0x3F;
  return (*(uint64_t (**)(void))(v42 + 8 * ((106 * (v43 != 0)) ^ v40)))();
}

void sub_19E748C7C()
{
}

uint64_t sub_19E748C94(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  return (*(uint64_t (**)(void))(v7
                                           + 8
                                           * ((((((v9 ^ 0x42D) - a2 - 303) ^ a2) + 27 * (v9 ^ 0x42D)) * (v8 == a7)) ^ v9)))(0);
}

uint64_t sub_19E748E90(uint64_t a1, int a2, int a3)
{
  return (*(uint64_t (**)(void))(v4
                              + 8
                              * ((47
                                * ((a3 & 0x7FBF694E ^ 0x6FB00944) + ((((v3 + 1746) | 4) + 134737825) ^ a2) - 2061942789 == 1157166242)) ^ v3)))();
}

uint64_t sub_19E748F08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20)
{
  *(void *)(v26 - 112) = v25;
  *(void *)(v26 - 104) = a17;
  *(_DWORD *)(v26 - 128) = v20
                         - 291962093 * ((((v26 - 144) | 0x2C83BF2C) - ((v26 - 144) & 0x2C83BF2C)) ^ 0x3D71B266)
                         + 2070;
  *(void *)(v26 - 144) = v21;
  *(void *)(v26 - 136) = v25;
  *(void *)(v26 - 120) = v24;
  uint64_t v27 = (*(uint64_t (**)(uint64_t))(v22 + 8 * (v20 + 2144)))(v26 - 144);
  return (*(uint64_t (**)(uint64_t))(v22
                                            + 8
                                            * ((111
                                              * ((((2 * (v20 ^ 0x205) - 133) | 0x86) ^ (v23 + 1157)) + a20 > 0x7FFFFFFE)) ^ (2 * (v20 ^ 0x205) - 1226))))(v27);
}

uint64_t sub_19E748FC4()
{
  int v3 = v1 - (((v1 << (v2 + 111)) + 350025898) & 0x1F9723D4) - 1707471297;
  return (*(uint64_t (**)(void))(v0
                              + 8
                              * ((115
                                * (((v3 << (((v2 + 41) & 0xEE) + 87)) & 0xF6FFF79E ^ 0x16972394)
                                 + (v3 ^ 0xF4B46A25)
                                 + 1973111996 == 1897613451)) ^ v2)))();
}

uint64_t sub_19E749070@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(void))(v3
                              + 8 * (((v2 ^ (v4 - 809) ^ ((v2 + 35765795) | 0x10561E30) ^ 0x1C) * (a1 == v1)) ^ v2)))();
}

uint64_t sub_19E7492BC@<X0>(int a1@<W8>)
{
  unsigned int v5 = 583844137
     * (((&v7 | 0xF2CA3DB5) - &v7 + (&v7 & 0xD35C248)) ^ 0xE2148038);
  uint64_t v8 = v2;
  int v9 = v3 - v5 + 1537;
  int v7 = v5 - a1 - ((((v3 + 654) | 0x180) ^ 0x135C8A00) & (93141546 - v4)) - 1401625387;
  return (*(uint64_t (**)(int *))(v1 + 8 * (v3 + 2041)))(&v7);
}

uint64_t sub_19E74935C(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int a6)
{
  *(_OWORD *)(a5 + v8 + 16 + (v7 ^ a6 ^ (a3 - 512))) = v10;
  return (*(uint64_t (**)(void))(v9 + 8 * ((783 * (v6 == 16)) ^ (v7 + 228))))();
}

uint64_t sub_19E749580@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(unsigned char *)(a1 + (v4 + v3 + 248) + 4) = (**(unsigned char **)(a2 + 8) ^ 0xBE)
                                                     + ((2 * **(unsigned char **)(a2 + 8)) & 0x7C)
                                                     + 120;
  unsigned int v5 = *(_DWORD *)(a2 + 4) + 357099117;
  BOOL v6 = v5 < 0x90D434F7;
  BOOL v7 = v5 > 0x90D434F8;
  if (v6) {
    BOOL v7 = v6;
  }
  return (*(uint64_t (**)(void))(a3 + 8 * (((4 * !v7) | (8 * !v7)) ^ 0x597u)))();
}

uint64_t sub_19E749644()
{
  BOOL v3 = v0 == ((102 * (v1 ^ 0x358) + 490) | 0xA) - 1418;
  return (*(uint64_t (**)(void))(v2 + 8 * ((v3 | (2 * v3)) ^ v1)))();
}

uint64_t sub_19E749684(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, int a10, int a11)
{
  BOOL v14 = v11 - 980579260 > 1430724537 || v11 - 980579260 < a11 - 716759110;
  return (*(uint64_t (**)(uint64_t))(v12 + 8 * ((1224 * v14) ^ (a7 - 742309330) & 0x2C3EBBFB)))(0x22DE212C2ABB87EFLL);
}

void sub_19E749788()
{
}

uint64_t sub_19E7497A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  return (*(uint64_t (**)(void))(v6
                              + 8
                              * ((217
                                * ((((((a6 - 1065) | 0x848) ^ 0x83C) + v7) & 0x7F ^ (((a6 - 1065) ^ 0xFE) + 502779630))
                                 + ((2 * ((((a6 - 1065) | 0x848) ^ 0x83C) + v7)) & 0xD2u)
                                 - 502779882 < 4)) ^ a6)))();
}

uint64_t sub_19E749814(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, int a19)
{
  unsigned int v22 = a19 + ((v20 + 1287996180) & 0xB33ABA17) + 1828340360;
  if (v22 < 0xE8859128 != (v19 - 1581819744) < 0xE8859128) {
    BOOL v23 = v22 < 0xE8859128;
  }
  else {
    BOOL v23 = v19 - 1581819744 < v22;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 8 * ((488 * v23) ^ v20)))(a1, 2937192423);
}

uint64_t sub_19E749898(uint64_t a1, uint64_t a2, int a3)
{
  return (*(uint64_t (**)(uint64_t, void))(v6
                                                    + 8
                                                    * ((((((a3 | 0x10) ^ 0x79B) - 569) ^ 0x55D) * ((v3 & 0x18) != 0)) ^ (a3 | 0x10))))(a1, (v4 - v5));
}

uint64_t sub_19E7498D0(uint64_t a1, int a2, uint64_t a3, int a4, int a5, uint64_t a6, uint64_t a7, int a8)
{
  return (*(uint64_t (**)(void))(v8 + 8 * (((((a8 - a2 - 2007) ^ (a5 + 2804)) - 1197) * (v9 == a4)) ^ a8)))(0);
}

uint64_t sub_19E749904(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  int v30 = ((-1144448962 - ((v29 - 144) | 0xBBC9183E) + ((v29 - 144) | 0x4436E7C1)) ^ 0x636416DD) * v25;
  *(_DWORD *)(v29 - 128) = v30 + v27 - 237;
  *(_DWORD *)(v29 - 140) = v30;
  *(void *)(v29 - 136) = a25;
  uint64_t v31 = (*(uint64_t (**)(uint64_t))(v26 + 8 * (v27 ^ 0xD88)))(v29 - 144);
  return (*(uint64_t (**)(uint64_t))(v26
                                            + 8
                                            * (int)(((*(_DWORD *)(v29 - 144) == v28
                                                                              + ((v27 - 1872729038) & 0x6F9F8FD7)
                                                                              - 198)
                                                   * (((v27 + 1253195315) & 0xB54DBDD6) - 80)) ^ v27)))(v31);
}

uint64_t sub_19E7499D4(uint64_t a1)
{
  return sub_19E749A14(a1, 2, 3618178130, 1698357027, 232);
}

uint64_t sub_19E749A14(uint64_t a1, int a2, int a3, int a4, int a5)
{
  int v13 = (((v12 << v5) + v6 - ((a2 << v5) & a3)) ^ v6) & v9;
  return (*(uint64_t (**)(void))(v7 + 8 * (((v11 + v8 + v13 + (a4 | ~(2 * v13)) != v8 + 475) * a5) ^ v10)))();
}

uint64_t sub_19E749A64@<X0>(uint64_t a1@<X0>, int a2@<W2>, int a3@<W8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,int a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,int a52)
{
  int v57 = (v53 - 1874830974) | a2;
  int v58 = *(_DWORD *)(&a40 + (v57 ^ 0x4EA4D6A4u) + v55 + 72);
  *(unsigned char *)(a1 + (v57 ^ 0x4EA4D6A4u) + v55) = v58 ^ 0xF1;
  *(unsigned char *)(a1 + (v55 + a3 + 1)) = BYTE2(v58) ^ 0xB7;
  *(unsigned char *)(a1 + (v55 + a3)) = BYTE1(v58) ^ 0x8D;
  *(unsigned char *)(a1 + (v55 + a3 + 2)) = HIBYTE(v58) ^ 0x2C;
  BOOL v59 = v55 + 819436659 < (a52 - 2013931149);
  if (v55 + 819436659 < v52 != a52 - 2013931149 < v52) {
    BOOL v59 = a52 - 2013931149 < v52;
  }
  return (*(uint64_t (**)(void))(v56 + 8 * ((v59 * v54) ^ v53)))();
}

uint64_t sub_19E749B20@<X0>(uint64_t a1@<X0>, int a2@<W4>, int a3@<W8>)
{
  return sub_19E723E4C(a1, (a2 - 1702002146) & 0x65727DA6, 129, *(_DWORD *)(*v4 + 4 * (v5 - 114229024)), v3, a3);
}

uint64_t sub_19E749D3C(uint64_t result)
{
  uint64_t v2 = *(void *)(v1 + 8);
  *(void *)uint64_t result = 0;
  *(void *)(result + 8) = 0x580C5FD8580C5FD8;
  *(void *)(result + 16) = 0x36398A1666DBC9CCLL;
  *(_DWORD *)(result + 24) = 694817499;
  *(void *)(v2 - 0x3268505288471747) = result + 0x19C7A72C32A62CC3;
  *(_DWORD *)(v1 + 4) = 694817499;
  return result;
}

uint64_t sub_19E749FB0()
{
  return (*(uint64_t (**)(void))(v0
                              + 8
                              * ((((((v1 ^ 0x61) + 24) ^ 1) & 1)
                                * ((((v1 ^ 0x61) - 289) | 0x100) ^ 0x1BE)) | v1 ^ 0x61)))();
}

uint64_t sub_19E74A048(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  return (*(uint64_t (**)(void))(v7 + 8 * (((((a7 + 39) ^ 0x752) - 561) * ((v8 & 0x18) == 0)) ^ a7)))();
}

uint64_t sub_19E74A328@<X0>(uint64_t a1@<X0>, const char *a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X7>, int a7@<W8>, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  unsigned int v52 = *(uint64_t (**)(uint64_t, const char *, void, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v48 + 8 * ((int)a6 + a7 + 35));
  HIDWORD(a22) = HIDWORD(a43);
  int v53 = BYTE4(a43) ^ 0x38;
  if (v53 == 238)
  {
    vld4q_s8(a2);
    LODWORD(a22) = HIDWORD(a42);
    uint64_t v55 = v47 + 4 * (v50 + 1420999729);
    uint64_t v56 = *(unsigned int *)(v55 - 56);
    HIDWORD(v57) = *(_DWORD *)(v55 - 32) ^ *(_DWORD *)(v55 - 12) ^ v56 ^ *(_DWORD *)(v55 - 64);
    LODWORD(v57) = HIDWORD(v57);
    *(_DWORD *)(v47 + 4 * (v50 + 1421000189) - 1840) = (v57 >> 31) + v49 - ((2 * (v57 >> 31)) & 0x52D425B6);
    return (*(uint64_t (**)(uint64_t, const char *, void, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, unint64_t, uint64_t (*)(uint64_t, const char *, void, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v48 + 8 * ((1684 * (v51 == 1420999666)) ^ 0xFCu)))(v56, a2, a42, a3, a4, a41, a5, a6, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18,
             a19,
             a20,
             a21,
             a22,
             a23,
             a24,
             __PAIR64__(a41, HIDWORD(a40)),
             __PAIR64__(a42, HIDWORD(a41)),
             v52,
             a28,
             a29,
             a30,
             a31,
             a32,
             a33,
             a34,
             a35,
             a36,
             a37,
             a38,
             a39,
             a40,
             a41,
             a42,
             a43,
             a44,
             a45,
             a46,
             a47);
  }
  else if (v53 == 237)
  {
    vld4q_s8(a2);
    return (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, void, char *, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, unint64_t, uint64_t (*)(uint64_t, const char *, void, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v48 + 8 * ((1283 * (a29 + 1 == v51)) ^ a4)))(1433325112, 1816587910, (a4 + 715), a3, a4, a41, (char *)*(&off_1EF0E5660 + (a4 ^ 0x380)) - 4, (char *)*(&off_1EF0E5660 + (int)a4 - 553) - 4, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18,
             a19,
             a20,
             a21,
             a22,
             a23,
             a24,
             __PAIR64__(a41, HIDWORD(a40)),
             __PAIR64__(a42, HIDWORD(a41)),
             v52,
             a28,
             a29,
             a30,
             a31,
             a32,
             a33,
             a34,
             a35,
             a36,
             a37,
             a38,
             a39,
             a40,
             a41,
             a42,
             a43,
             a44,
             a45,
             a46,
             a47);
  }
  else
  {
    return v52(a1, a2, a42, a3, a4, a41, a5, a6, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18,
             a19,
             a20,
             a21,
             a22,
             a23,
             a24,
             a25,
             a26,
             a27,
             a28,
             a29,
             a30,
             a31,
             a32,
             a33);
  }
}

uint64_t sub_19E74B1E4(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  return (*(uint64_t (**)(uint64_t, void))(v8 + 8 * ((26 * (v9 - 1 == a8)) | v10)))(a1, (a2 + 1));
}

uint64_t sub_19E74B298(uint64_t result)
{
  *int v1 = -694859282;
  *(_DWORD *)(result + 28) = -694859282;
  return result;
}

uint64_t sub_19E74B2A8@<X0>(int a1@<W0>, int a2@<W8>)
{
  v8.i64[0] = 0x8282828282828282;
  v8.i64[1] = 0x8282828282828282;
  v9.i64[0] = 0xC1C1C1C1C1C1C1C1;
  v9.i64[1] = 0xC1C1C1C1C1C1C1C1;
  *(int8x16_t *)(v3 + (v2 + a2)) = vaddq_s8(vsubq_s8(*v7, vandq_s8(vaddq_s8(*v7, *v7), v8)), v9);
  return (*(uint64_t (**)(void))(v6
                              + 8
                              * ((219
                                * (((a1 - 1163) | 0x2A4u) - 660 != (((a1 - 556) + 0x1FFFFFD91) & (v5 + (v4 ^ 0x1277DF7F))))) ^ (a1 - 556))))();
}

uint64_t sub_19E74B7C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, unsigned int a16)
{
  BOOL v27 = a16 > v20;
  uint64_t v28 = 4 * ((((v18 + 296) | 0x454) ^ (v25 - 570)) + v23);
  int v29 = *(_DWORD *)(*(void *)(a12 - 0x7CF6A079DDC7252CLL) + v28) ^ v22;
  unsigned int v30 = v16 + (v29 ^ 0xE68FBE7D) + ((2 * v29) & 0xCD1F7CFA);
  *(_DWORD *)(*(void *)(a14 - 0x7CF6A079DDC7252CLL) + v28) = v30
                                                             - 33816577
                                                             - ((2 * (v30 - 33816577) + 394159198) & v26)
                                                             - 1761548068;
  int v31 = v23 + 1 + v17;
  LODWORD(v28) = v27 ^ (v31 < v21 + 1758);
  BOOL v32 = v31 < v19;
  if (!v28) {
    BOOL v27 = v32;
  }
  return (*(uint64_t (**)(void))(v24 + 8 * ((7 * !v27) ^ v18)))();
}

uint64_t sub_19E74BB44(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(unsigned char *)(a5 + (v5 + v7)) = a1;
  return (*(uint64_t (**)(void))(v10 + 8 * (((v9 + v5 + (v6 ^ v8 ^ 0x1FEu) + 1 < 0x38) * v8) ^ v6 ^ v8)))();
}

uint64_t sub_19E74BB80(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,int a44,char a45)
{
  *(void *)(&a45 + (v48 + a2)) = 0xC1C1C1C1C1C1C1C1;
  return (*(uint64_t (**)(void))(v50 + 8 * ((((((v47 ^ (v49 + 1)) + v45) & 0x1FFFFFFF8) == 8) * (v46 - 354)) ^ v46)))();
}

void sub_19E74BBD0()
{
}

uint64_t sub_19E74BBD8(int a1)
{
  return (*(uint64_t (**)(void))(v2 + 8 * (((2 * (v1 + 1 != v3 + 4)) | (8 * (v1 + 1 != v3 + 4))) ^ a1)))();
}

uint64_t sub_19E74C128@<X0>(int a1@<W2>, uint64_t a2@<X4>, int a3@<W8>)
{
  return (*(uint64_t (**)(void))(v5
                              + 8
                              * ((2239
                                * ((*(unsigned __int8 *)(a2 + 6) ^ v4)
                                 + v3
                                 + ((*(unsigned __int8 *)(a2 + 6) << (((a1 + 81) | 0xC4) ^ 0xC5)) & 0x176) == a3)) ^ a1)))();
}

uint64_t sub_19E74C178@<X0>(int a1@<W7>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(void))(v4
                              + 8
                              * (int)((((((v2 - 210342013) & 0xDCD9F987) - 116) ^ v2 ^ (a1 + 1909)) * (a2 == v3)) ^ v2)))();
}

uint64_t sub_19E74C1BC(uint64_t result)
{
  if ((v1 + v2 - 1) >= 0x7FFFFFFF) {
    int v6 = -v3;
  }
  else {
    int v6 = v5;
  }
  *uint64_t v4 = v6;
  *(_DWORD *)(result + 16) = 1105134280;
  return result;
}

uint64_t sub_19E74C1E0(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v10 = (v5 + v4 - v7);
  int8x8_t v11 = vrev64_s8(*(int8x8_t *)(v8 - 7 + v10));
  *(int8x8_t *)(v3 - 7 + v10) = vrev64_s8(vadd_s8(vsub_s8(v11, vand_s8(vadd_s8(v11, v11), (int8x8_t)0x8282828282828282)), (int8x8_t)0xC1C1C1C1C1C1C1C1));
  return (*(uint64_t (**)(void))(v9
                              + 8 * ((280 * (v7 + ((a3 + 1285869956) & 0xB35B2E76) - 1022 == (v6 & 0xFFFFFFF8))) ^ a3)))();
}

void sub_19E74C260()
{
}

uint64_t sub_19E74C26C@<X0>(int a1@<W0>, int a2@<W2>, int a3@<W3>, uint64_t a4@<X4>, int a5@<W8>)
{
  return (*(uint64_t (**)(void))(v7
                              + 8
                              * ((70
                                * ((a3 ^ (a1 - 196))
                                 + v6
                                 + (*(unsigned __int8 *)(a4 + 1) ^ v5)
                                 + ((2 * *(unsigned __int8 *)(a4 + 1)) & 0x7777) == a5)) ^ a2)))();
}

uint64_t sub_19E74C2B0()
{
  return (*(uint64_t (**)(void))(v2 + 8 * ((37 * (v0 - 100 >= ((v1 + 228) ^ 0x3EBu))) ^ v1)))();
}

uint64_t sub_19E74C2E8(int a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  *(void *)(a6 + (v9 + v11)) = *(void *)(v10 + (v9 + v11));
  return (*(uint64_t (**)(void))(v8 + 8 * (((a4 == v11) * a8) ^ a1)))();
}

uint64_t sub_19E74C314@<X0>(int a1@<W1>, uint64_t a2@<X8>)
{
  *(unsigned char *)(a2 + (v5 + v4)) = *(unsigned char *)(v2 + (v5 + v4));
  return (*(uint64_t (**)(void))(v6 + 8 * ((a1 + 276) | (2 * (v5 - 1 == a1 + 1483 + v3)))))();
}

uint64_t sub_19E74C348(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58)
{
  unsigned int v63 = v61 + a6 + (v58 ^ 0x5CE) + 373 + 27 * (v58 ^ 0x5CE);
  if (v63 <= 0x40) {
    unsigned int v63 = 64;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *))(v62
                                                                               + 8
                                                                               * ((59 * (a4 - v59 - v60 + v63 < 0xF)) ^ v58)))(a1, a2, a3, 4094394947, &a58);
}

uint64_t sub_19E74C3BC(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, char a8)
{
  *(unsigned char *)(a5 + (v8 + a3)) = a8;
  return (*(uint64_t (**)(void))(v10 + 8 * ((((v9 - 1327 + a6 + v8 + 1) < 0x40) * v11) | (v9 - 842))))();
}

uint64_t sub_19E74C3F4@<X0>(int a1@<W0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X6>, int a5@<W7>, int a6@<W8>)
{
  *(unsigned char *)(v6 + a2 + v8) = *(unsigned char *)(v10 + (v7 + a1))
                           - ((2 * *(unsigned char *)(v10 + (v7 + a1))) & 0x83)
                           - 63;
  return (*(uint64_t (**)(void))(v9 + 8 * (((v6 + 1 == a4 + 64) * a3) ^ (a5 + a6 + 353))))();
}

void sub_19E74C448()
{
}

uint64_t sub_19E74C47C()
{
  uint64_t v3 = v7[5];
  uint64_t v4 = *v7;
  *(void *)&v8[492] = 0xC1C1C1C1C1C1C1C1;
  unint64_t v9 = 0xC1C1C1C1C1C1C1C1;
  int v5 = 583844137 * ((2 * ((v2 - 216) & 0x338344F8) - (v2 - 216) - 864240895) ^ 0xDCA2068C);
  uint64_t v13 = v2 + 0x9033E6691F09BBDLL;
  int v12 = v8;
  uint64_t v10 = v4;
  uint64_t v11 = v3;
  *(_DWORD *)(v2 - 212) = v5 + v0 + 1845;
  *(_DWORD *)(v2 - 208) = v5 ^ 0x4A87CEE4;
  uint64_t result = (*(uint64_t (**)(uint64_t))(v1 + 8 * (v0 + 2307)))(v2 - 216);
  *((_DWORD *)v7 + 4) = *(_DWORD *)(v2 - 216);
  return result;
}

uint64_t sub_19E74C57C@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(void))(v1 + 8
                                   * ((((((v2 - 205) ^ 0x193) + 1216) ^ 0x58E) * (a1 == -1914018290)) | (v2 - 205))))();
}

uint64_t sub_19E74C5C0@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * ((245 * ((((564264165 - v1) < 7) ^ (a1 - 1)) & 1)) ^ a1)))();
}

uint64_t sub_19E74EF2C@<X0>(int a1@<W4>, int a2@<W5>, uint64_t a3@<X8>)
{
  *(unsigned char *)(a3 + (a1 + v6)) = *(unsigned char *)(v5 + (a1 + v6));
  return (*(uint64_t (**)(void))(v3 + 8 * (((a1 - 1 == v4) * (a2 - 382)) ^ a2)))(0);
}

uint64_t sub_19E74EF60(int a1, int64x2_t a2, int64x2_t a3, int64x2_t a4, int64x2_t a5, int64x2_t a6, int8x16_t a7, int8x16_t a8, int64x2_t a9)
{
  int64x2_t v22 = vaddq_s64(a3, v21);
  int64x2_t v23 = vaddq_s64(a4, v21);
  int64x2_t v24 = vaddq_s64(a5, v21);
  int64x2_t v25 = vaddq_s64(a2, v21);
  int8x16_t v26 = (int8x16_t)vaddq_s64(v25, a6);
  int8x16_t v27 = (int8x16_t)vaddq_s64(v22, a6);
  int8x16_t v28 = (int8x16_t)vaddq_s64(v24, a6);
  int8x16_t v29 = (int8x16_t)vaddq_s64(v23, a6);
  int64x2_t v30 = (int64x2_t)veorq_s8(v29, a7);
  int64x2_t v31 = (int64x2_t)veorq_s8(v28, a7);
  int64x2_t v32 = (int64x2_t)veorq_s8(v27, a7);
  int64x2_t v33 = (int64x2_t)veorq_s8(v26, a7);
  int8x16_t v34 = (int8x16_t)vdupq_n_s64(v10);
  int64x2_t v35 = (int64x2_t)veorq_s8(vandq_s8((int8x16_t)v30, a8), vandq_s8(v29, v34));
  int64x2_t v36 = (int64x2_t)veorq_s8(vandq_s8((int8x16_t)v31, a8), vandq_s8(v28, v34));
  int64x2_t v37 = (int64x2_t)veorq_s8(vandq_s8((int8x16_t)v32, a8), vandq_s8(v27, v34));
  int64x2_t v38 = (int64x2_t)veorq_s8(vandq_s8((int8x16_t)v33, a8), vandq_s8(v26, v34));
  int64x2_t v39 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(vsubq_s64(v33, vaddq_s64(v38, v38)), a9), (int8x16_t)a9);
  int64x2_t v40 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(vsubq_s64(v32, vaddq_s64(v37, v37)), a9), (int8x16_t)a9);
  int64x2_t v41 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(vsubq_s64(v31, vaddq_s64(v36, v36)), a9), (int8x16_t)a9);
  int64x2_t v42 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(vsubq_s64(v30, vaddq_s64(v35, v35)), a9), (int8x16_t)a9);
  int64x2_t v43 = vaddq_s64(v23, v15);
  v42.i64[0] *= v43.i64[0];
  v42.i64[1] *= v43.i64[1];
  int64x2_t v44 = vaddq_s64(v24, v15);
  v41.i64[0] *= v44.i64[0];
  v41.i64[1] *= v44.i64[1];
  int64x2_t v45 = vaddq_s64(v22, v15);
  v40.i64[0] *= v45.i64[0];
  v40.i64[1] *= v45.i64[1];
  int64x2_t v46 = vaddq_s64(v25, v15);
  v39.i64[0] *= v46.i64[0];
  v39.i64[1] *= v46.i64[1];
  v48.val[1] = (int8x16_t)vaddq_s64(vsubq_s64(v42, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v42, v42), v16)), v17);
  v48.val[0] = (int8x16_t)vaddq_s64(vsubq_s64(v41, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v41, v41), v16)), v17);
  v48.val[2] = (int8x16_t)vaddq_s64(vsubq_s64(v40, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v40, v40), v16)), v17);
  v48.val[3] = (int8x16_t)vaddq_s64(vsubq_s64(v39, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v39, v39), v16)), v17);
  *(int8x8_t *)(v12 - v9 + 91) = vrev64_s8(veor_s8(vadd_s8((int8x8_t)*(_OWORD *)&vqtbl4q_s8(v48, v18), v19), v20));
  return (*(uint64_t (**)(void))(v14 + 8 * (((v9 + 8 == v13) * a1) ^ v11)))();
}

uint64_t sub_19E74EF74@<X0>(int a1@<W7>, char a2@<W8>)
{
  return (*(uint64_t (**)(void))(v3
                              + 8
                              * (int)((((v2 - 18977040) & 0xD171FCAA ^ (a1 + (v2 ^ 0x236) - 1091)) * ((a2 & 8) == 0)) ^ v2)))();
}

void sub_19E74EFC0()
{
}

void sub_19E74F0B4(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1F4188790](a1);
  int v2 = *(_DWORD *)v1 + 291962093 * ((-2 - ((v1 | 0x48D5F81D) + (~v1 | 0xB72A07E2))) ^ 0xA6D80AA8);
  __asm { BRAA            X14, X17 }
}

uint64_t sub_19E74F22C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 8 * ((245 * (STACK[0x648] == 0)) ^ (v8 + 1097))))();
}

uint64_t sub_19E74F254(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  *(_DWORD *)(result + 4) = a7;
  return result;
}

uint64_t sub_19E74F25C@<X0>(int a1@<W5>, int a2@<W7>, int a3@<W8>)
{
  if (a3 != (v3 ^ 0x718 ^ (a2 - 84)) + 1494852187) {
    a1 = a3;
  }
  return a1 ^ v4;
}

uint64_t sub_19E74F2D0(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 8 * (((((a1 - 805506139) & 0x300307DD) - 976) * (v8 < 0x20)) | a1)))();
}

uint64_t sub_19E74F40C@<X0>(uint64_t a1@<X4>, int a2@<W8>, int8x16_t a3@<Q0>, int8x16_t a4@<Q1>, int8x16_t a5@<Q2>, int8x16_t a6@<Q3>, int8x16_t a7@<Q4>, int32x4_t a8@<Q5>, int8x16_t a9@<Q6>, int8x16_t a10@<Q7>)
{
  v20.i64[0] = *(void *)(v13 + 4);
  v20.i32[2] = *(_DWORD *)(v13 + 12);
  int8x16_t v21 = vextq_s8(a3, v20, 0xCuLL);
  int8x16_t v22 = v20;
  v22.i32[3] = *(_DWORD *)(v13 + 16);
  int8x16_t v23 = vorrq_s8(vandq_s8(v21, a7), a4);
  int8x16_t v24 = veorq_s8((int8x16_t)vaddq_s32((int32x4_t)veorq_s8(vandq_s8(v22, a5), a6), a8), a9);
  int32x4_t v25 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vsubq_s32((int32x4_t)vorrq_s8(v24, a10), (int32x4_t)vorrq_s8(v24, (int8x16_t)v14)), v14), v16);
  v26.i32[0] = *(_DWORD *)(v10 + 4 * (*(_DWORD *)(v13 + 4) & v12 ^ 1));
  v26.i32[1] = *(_DWORD *)(v10 + 4 * ((*(_DWORD *)(v13 + 8) & 1) == 0));
  v26.i32[2] = *(_DWORD *)(v10 + 4 * (~*(_DWORD *)(v13 + 12) & 1));
  v26.i32[3] = *(_DWORD *)(v10 + 4 * ((v22.i8[12] & 1) == 0));
  *(int8x16_t *)uint64_t v13 = veorq_s8(veorq_s8(veorq_s8(*(int8x16_t *)(v13 - 908), v26), v19), (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vsubq_s32((int32x4_t)vorrq_s8((int8x16_t)v25, veorq_s8(v23, v15)), (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v25, v25), v17)), v18), 1uLL));
  return (*(uint64_t (**)(void))(a1 + 8 * (((16 * (v11 == 4)) | (32 * (v11 == 4))) ^ a2)))();
}

void sub_19E74F418()
{
  STACK[0x4C0] = *(void *)(v0 + 8 * (int)(STACK[0x458] - 474));
  JUMPOUT(0x19E74F434);
}

uint64_t sub_19E74F4C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3
                              + 8
                              * (int)((764 * (v3 > (STACK[0x424] & 0xD79DAFBA ^ (v4 + 384) ^ STACK[0x420] & 0x9BA4A475))) ^ (STACK[0x458] + 553))))();
}

uint64_t sub_19E74F51C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  return (*(uint64_t (**)(void))(v32
                              + 8
                              * (((v29 ^ (a8 + 1720) ^ (a8 + 5)) * ((unint64_t)(~a29 + v31 - v30) < 0x10)) | v29)))();
}

uint64_t sub_19E74F560@<X0>(int a1@<W0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X3>, unsigned int a5@<W8>, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,int a41,char a42)
{
  BOOL v48 = a5 < v45;
  *(&a42 + (v44 + a2)) = *(unsigned char *)(a4 + (v42 + a1))
                                     - ((2 * *(unsigned char *)(a4 + (v42 + a1))) & 0x83)
                                     - 63;
  unsigned int v49 = v42 + 1 + a3;
  int v50 = v48 ^ (v49 < v45);
  BOOL v51 = v49 < a5;
  if (!v50) {
    BOOL v48 = v51;
  }
  return (*(uint64_t (**)(void))(v47 + 8 * ((v48 * v43) ^ v46)))();
}

void sub_19E74F5DC()
{
}

uint64_t sub_19E74F5F0@<X0>(uint64_t a1@<X8>)
{
  BOOL v4 = v2 != v1 + ((v3 - 876482478) & 0x343E0EDF) - 514;
  return (*(uint64_t (**)(void))(a1 + 8 * ((2 * v4) | (8 * v4) | v3)))();
}

uint64_t sub_19E74F630()
{
  return (*(uint64_t (**)(void))(v3
                              + 8
                              * (((v0 == (v1 - v4 + 311) - 311) * (v2 + v1 - 234)) ^ (v2 + v1 + 1889))))();
}

uint64_t sub_19E74F668(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62)
{
  uint64_t v68 = 4 * (v65 - 1162177889);
  unsigned int v69 = *(_DWORD *)(v66 + 4 * (v65 - 1162177890));
  int v70 = (*(_DWORD *)(v66 + v68) ^ 0x340676F1 ^ (1566083941 * (v69 ^ 0x8074A104 ^ ((v69 >> 30) | 0x7C042904))
                                              - ((-1162799414 * (v69 ^ 0x8074A104 ^ ((v69 >> 30) | 0x7C042904))) & 0x90EDFDE4)
                                              - 931725582))
      - v65;
  *(_DWORD *)(v66 + v68) = v70 - ((2 * v70 - 1970611518) & 0xF8E11006) + 1102443876;
  unint64_t v71 = 1431787901
      * ((~((v67 - 152) | 0xD761924BFE55B7B1) + ((v67 - 152) & 0xD761924BFE55B7B1)) ^ 0x6E71B5522A3AE299);
  *(_DWORD *)(v67 - 124) = v71 + 1;
  *(_DWORD *)(v67 - 120) = v64 - v71 + 838062355;
  *(_DWORD *)(v67 - 152) = v64 - v71 + 838062230;
  *(_DWORD *)(v67 - 128) = v64 - v71 + 838062251;
  *(_DWORD *)(v67 - 116) = -1196567909 - v71 + v64;
  STACK[0x680] = (v65 + 1601527865) - v71;
  STACK[0x688] = v71 ^ 0xA4BACD99;
  uint64_t v72 = (*(uint64_t (**)(uint64_t))(v62 + 8 * (v64 ^ (v63 - 1834))))(v67 - 152);
  return (*(uint64_t (**)(uint64_t))(a62 + 8 * *(int *)(v67 - 148)))(v72);
}

uint64_t sub_19E74F7F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 8 * (((((v8 | 6) + 993) ^ ((v8 | 6) + 381) ^ 0x55D) * (v9 == 0)) ^ (v8 | 6))))();
}

uint64_t sub_19E74F834@<X0>(uint64_t a1@<X0>, int a2@<W8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3
                                                     + 8
                                                     * (((((2 * (v4 ^ 0x401) - 896) | 0xA0) ^ (((2 * (v4 ^ 0x401)) ^ 0x2C7)
                                                                                             - 1211))
                                                       * (v2 == a2)) ^ (2 * (v4 ^ 0x401)))))(a1, 2291139611);
}

void sub_19E74F958()
{
}

void sub_19E74F964()
{
}

uint64_t sub_19E74F970(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(a2 + (v9 + v8)) = *(void *)(v11 + (v9 + v8));
  return (*(uint64_t (**)(void))(a8 + 8 * (((v10 == 0) * a5) ^ v12)))();
}

uint64_t sub_19E74FA90@<X0>(uint64_t a1@<X7>, int a2@<W8>)
{
  STACK[0x270] = v2;
  int v4 = a2 + 1396;
  STACK[0x520] = 0;
  int v5 = 1431787901 * ((2 * ((v3 - 248) & 0x15254568) - (v3 - 248) - 354764138) ^ 0xC14A1041);
  *(_DWORD *)(v3 - 248) = v4 - v5 - 1538;
  *(void *)(v3 - 216) = STACK[0x268];
  *(_DWORD *)(v3 - 220) = v5 ^ 0xBCF69745;
  *(void *)(v3 - 232) = 0x168D9FD5DF1EC0F3;
  *(void *)(v3 - 240) = STACK[0x260];
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(a1 + 8 * (v4 ^ 0xF46)))(v3 - 248);
  return (*(uint64_t (**)(uint64_t))(STACK[0x460]
                                            + 8 * (((*(_DWORD *)(v3 - 224) != 694817499) * ((v4 ^ 0x446) - 321)) ^ v4)))(v6);
}

uint64_t sub_19E7500E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  if (v37) {
    BOOL v38 = a37 == 0;
  }
  else {
    BOOL v38 = 1;
  }
  int v39 = v38;
  return (*(uint64_t (**)(void))(a8 + 8 * (int)((v39 * (STACK[0x458] - 329)) ^ (STACK[0x458] + 841))))();
}

uint64_t sub_19E7500FC(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v8 + v5) = *(void *)(v7 + v5);
  return (*(uint64_t (**)(uint64_t, void))(a4 + 8 * (((a2 == 0) * v4) ^ v6)))(a1, (a2 + 8));
}

uint64_t sub_19E75012C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3
                                                     + 8
                                                     * ((462
                                                       * (((v2 - 2118109957) & 0x7E3FCF7A ^ (v2 - v4 + 1137353903))
                                                        + v1 > 0x3F)) ^ v2)))(a1, 2963115081);
}

uint64_t sub_19E750188(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10 = (((LODWORD(STACK[0x674]) ^ v9) + (v8 ^ v9)) ^ (((a4 + 71) | 0x108) - 169350268))
      + 169349377
      + ((2 * ((LODWORD(STACK[0x674]) ^ v9) + (v8 ^ v9))) & 0xEBCFDDFE);
  *(_DWORD *)(a5 + 52) = ((v10 % 0x2710) ^ 0x4FBBFEE5) - 101717121 + ((2 * (v10 % 0x2710)) & 0x7DCA);
  int v11 = STACK[0x67C];
  LODWORD(STACK[0x51C]) = STACK[0x67C];
  return (*(uint64_t (**)(void))(a8 + 8 * ((1583 * (v11 == v9)) ^ (a4 + 335))))();
}

void sub_19E750244()
{
}

void sub_19E750274()
{
}

uint64_t sub_19E75027C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,int a38,char a39)
{
  *(void *)(&a39 + ((((v41 - 1631) | 0x701u) ^ 0xFFFFF88ALL) & (v40 + v39 + a1))) = 0xC1C1C1C1C1C1C1C1;
  BOOL v43 = v40 - (a2 & 0x1FFFFFFF8) == -8;
  return (*(uint64_t (**)(void))(v42 + 8 * ((4 * v43) | (8 * v43) | v41)))();
}

uint64_t sub_19E750488(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  LODWORD(STACK[0x51C]) = v9;
  return (*(uint64_t (**)(void))(a8 + 8 * ((37 * ((v10 ^ (v8 + 63)) & 1)) ^ (v8 + 497))))();
}

void sub_19E7504BC()
{
  STACK[0x658] -= 32;
  JUMPOUT(0x19E750508);
}

uint64_t sub_19E750598(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  int v11 = v9 ^ 0xE19;
  int v12 = ((v9 ^ 0xE19) - 1030) | 0x4A;
  int v13 = ((v9 ^ 0xE19) - 2074) | 0x826;
  unsigned int v14 = v8 + v7 + 721458306;
  if (v14 <= 0x40) {
    unsigned int v14 = 64;
  }
  return (*(uint64_t (**)(void))(v10
                              + 8 * ((152 * (a7 - v7 - v8 + v13 + v14 - 2086 >= (v12 ^ 0x451u))) ^ v11)))();
}

uint64_t sub_19E750634@<X0>(uint64_t a1@<X7>, int a2@<W8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1
                                                     + 8
                                                     * (int)((((((v3 + 2039245879) & 0x867392EC) + 928) ^ (v3 + 222527735) & 0xF2BC7FB2)
                                                            * (a2 - v2 == 613440915)) ^ v3)))(1570216885, 2724750410);
}

uint64_t sub_19E7506BC(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  STACK[0x478] = *(void *)(a8 + 8 * v9);
  return sub_19E6E36E4(a1, a2, a3, a4, STACK[0x2A8], a6, a7, a8, a9);
}

uint64_t sub_19E7506F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v8 = v7 - 630761370 + ((a5 - 1571458546) & 0x5DAA8DB6);
  BOOL v10 = v8 > 1630951721 || v8 < v6;
  return (*(uint64_t (**)(void))(v5 + 8 * ((1400 * v10) ^ a5)))();
}

void sub_19E75075C()
{
}

uint64_t sub_19E751C30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45)
{
  unsigned int v49 = (((v47 | 0x470689AD) - v47 + (v47 & 0xB8F97650)) ^ 0x6C96237A) * v46;
  *(_DWORD *)(v48 - 248) = v45 - v49 - 39;
  *(_DWORD *)(v48 - 220) = v49 ^ 0xBCF69740;
  *(void *)(v48 - 216) = a45;
  *(void *)(v48 - 240) = a44;
  *(void *)(v48 - 232) = 0x168D9FD5DF1EC0F3;
  uint64_t v50 = (*(uint64_t (**)(uint64_t))(a8 + 8 * (v45 + 2205)))(v48 - 248);
  return (*(uint64_t (**)(uint64_t))(STACK[0x460]
                                            + 8
                                            * (((*(_DWORD *)(v48 - 224) == 694817499) * (((v45 - 143) | 0x3D) - 2)) ^ v45)))(v50);
}

uint64_t sub_19E751D08(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int v10 = *(unsigned __int8 *)(v9 - 0x542A6DEB665DB906) ^ 0x3B;
  if (v10 == 238)
  {
    unsigned int v16 = *(_DWORD *)(v9 - 0x542A6DEB665DB922);
    int v14 = a4 + 1093;
    *(unsigned char *)(v9 - 0x542A6DEB665DB92ELL) = ((8 * v16) ^ 0x20) + ((16 * v16) & 0x80) - 63;
    *(unsigned char *)(v9 - 0x542A6DEB665DB92DLL) = (v16 >> ((a4 + 69) ^ 0x74)) ^ 0xEE;
    *(unsigned char *)(v9 - 0x542A6DEB665DB92CLL) = (v16 >> 13) ^ 0x40;
    *(unsigned char *)(v9 - 0x542A6DEB665DB92BLL) = (v16 >> 21) ^ 0xE1;
    unsigned int v17 = *(_DWORD *)(v9 - 0x542A6DEB665DB926);
    HIDWORD(v18) = v17 ^ 0x195D8874;
    LODWORD(v18) = v16 ^ 0x40000000;
    *(unsigned char *)(v9 - 0x542A6DEB665DB92ALL) = ((v18 >> 29) - ((2 * (v18 >> 29)) & 0xE3) + 113) ^ 0xB0;
    *(unsigned char *)(v9 - 0x542A6DEB665DB929) = (v17 >> 5) ^ 0x82;
    *(unsigned char *)(v9 - 0x542A6DEB665DB928) = (v17 >> 13) ^ 0x2D;
    unsigned int v15 = (v17 >> 21) ^ 0xB;
    goto LABEL_5;
  }
  int v11 = a4;
  if (v10 == 237)
  {
    unsigned int v12 = *(_DWORD *)(v9 - 0x542A6DEB665DB926);
    *(unsigned char *)(v9 - 0x542A6DEB665DB92ELL) = (v12 >> 21) ^ 0xB;
    *(unsigned char *)(v9 - 0x542A6DEB665DB92DLL) = (v12 >> 13) ^ 0x2D;
    *(unsigned char *)(v9 - 0x542A6DEB665DB92CLL) = (v12 >> (a4 - 39)) ^ 0x82;
    unsigned int v15 = *(_DWORD *)(v9 - 0x542A6DEB665DB922);
    HIDWORD(v13) = v12 ^ 0x195D8874;
    LODWORD(v13) = v15 ^ 0x40000000;
    *(unsigned char *)(v9 - 0x542A6DEB665DB92BLL) = ((v13 >> 29) - ((2 * (v13 >> 29)) & 0x40) + 32) ^ 0xE1;
    *(unsigned char *)(v9 - 0x542A6DEB665DB92ALL) = (v15 >> 21) ^ 0xE1;
    *(unsigned char *)(v9 - 0x542A6DEB665DB929) = (v15 >> 13) ^ 0x40;
    *(unsigned char *)(v9 - 0x542A6DEB665DB928) = (v15 >> 5) ^ 0xEE;
    int v14 = a4 + 1093;
    LOBYTE(v15) = ((8 * v15) ^ 0x20) + (~(16 * v15) | 0x7F) - 62;
LABEL_5:
    int v11 = 2 * (v14 ^ 0x767);
    *(unsigned char *)(v9 - 0x542A6DEB665DB927) = v15;
  }
  STACK[0x478] = *(void *)(a8 + 8 * (v11 - 506));
  return sub_19E6E36E4(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

void sub_19E751FE4()
{
  STACK[0x4C0] = *(void *)(v0 + 8 * (int)(STACK[0x458] - 497));
  JUMPOUT(0x19E74F440);
}

uint64_t sub_19E752010(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return (*(uint64_t (**)(void))(v7 + 8 * (((((v6 - 1249) | 0x404) + ((v6 - 1103) | 0x6C8) - 2149) * (v5 == a5)) ^ v6)))();
}

uint64_t sub_19E75204C(int8x8_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  *(int8x8_t *)(a4 + (v6 - 8 + v5)) = veor_s8(*(int8x8_t *)(v7 + (v6 - 8 + v5)), a1);
  return (*(uint64_t (**)(void))(v10 + 8 * (((v8 == -8) * v9) ^ a5)))();
}

uint64_t sub_19E752058@<X0>(uint64_t a1@<X1>, int a2@<W5>, uint64_t a3@<X8>)
{
  HIDWORD(v8) = v3;
  LODWORD(v8) = v3 ^ v7;
  return (*(uint64_t (**)(void, uint64_t))(v6 + 8 * ((282 * (a3 + 1 == v4 + 64)) ^ a2)))((v8 >> 2) + v7 - (v5 & (2 * (v8 >> 2))), a1);
}

uint64_t sub_19E7523A4@<X0>(int a1@<W2>, uint64_t a2@<X4>, int a3@<W8>)
{
  return (*(uint64_t (**)(void))(v5
                              + 8
                              * (((v3
                                 + (*(unsigned __int8 *)(a2 + 3) ^ v4)
                                 + ((2 * *(unsigned __int8 *)(a2 + 3)) & 0x7777)
                                 - 133 == a3)
                                * (a1 ^ 0x388)) ^ a1)))();
}

uint64_t sub_19E7523EC(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  BOOL v13 = v8 == v11 + 2 * ((((v10 ^ 0x562) - 1060) | 0x146) ^ 0x1E5) - 326 && v9 != a1;
  return (*(uint64_t (**)(void))(a8 + 8 * ((963 * v13) ^ v10 ^ 0x562)))();
}

uint64_t sub_19E752444()
{
  return (*(uint64_t (**)(void))(v2 + 8 * (((((v0 - 921) | 0x880) + ((v0 - 799) | 0x761) - 4105) * (v1 == 0)) ^ v0)))();
}

uint64_t sub_19E75248C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(v4
                              + 8
                              * ((99
                                * (*(_DWORD *)(a4 - 0x19C7A72C32A62CABLL) == (((v5 ^ 0x433) + 1440) ^ 0x296A17CF ^ (19 * (v5 ^ 0x433))))) ^ v5)))();
}

uint64_t sub_19E7524EC@<X0>(int a1@<W3>, int a2@<W4>, int a3@<W5>, void *a4@<X6>, unint64_t a5@<X8>, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v41 = 4 * (v35 + 1 + v36);
  uint64_t v42 = (v31 & (a5 >> 31) ^ v27)
      + (HIDWORD(a5) ^ 0x6F7BB5F6CEC3975ALL)
      + (*(_DWORD *)(a24 + v41) ^ v29 ^ (((v39 - 518) | 0x406u) + v30))
      + ((2 * (*(_DWORD *)(a24 + v41) ^ v29)) & 0x1F5F5DFAELL);
  LODWORD(v41) = ((*(_DWORD *)(*a4 + v41) ^ v29 ^ 0x9EF556FB) + 1628088581 + (v28 & (2 * (*(_DWORD *)(*a4 + v41) ^ v29))))
               * v34;
  LODWORD(v42) = v42 - 2 * ((v42 + v38) & 0x828D819B ^ v42 & v26) - 1869405214;
  *(_DWORD *)(a24 + 4 * (v35 + v36)) = (v25 & ((unint64_t)(v40 - 0x7F1A9DD95DF05D10) >> 31))
                                       + (v37 ^ ((unint64_t)(v40 - 0x7F1A9DD95DF05D10) >> 32))
                                       + (v41 ^ 0xE3F7FB7F)
                                       + (a1 & (2 * v41))
                                       + (v42 ^ 0xED703E77)
                                       + ((2 * v42) & v32 ^ 0x51B0300)
                                       - ((2
                                         * ((v25 & ((unint64_t)(v40 - 0x7F1A9DD95DF05D10) >> 31))
                                          + (v37 ^ ((unint64_t)(v40 - 0x7F1A9DD95DF05D10) >> 32))
                                          + (v41 ^ 0xE3F7FB7F)
                                          + (a1 & (2 * v41))
                                          + (v42 ^ 0xED703E77)
                                          + ((2 * v42) & v32 ^ 0x51B0300))
                                         + 137218914) & 0x16836D5A)
                                       + a2;
  BOOL v43 = v24 > 0x105545E3;
  if (v43 == v35 - 121251053 < -274023908) {
    BOOL v43 = v35 - 121251053 < a3;
  }
  return (*(uint64_t (**)(void))(v33 + 8 * ((173 * !v43) ^ v39)))();
}

uint64_t sub_19E7526D8()
{
  uint64_t v13 = v2 - 1;
  BOOL v15 = (*v3 ^ v4)
      + ((2 * *v3) & 0x7777)
      + ((v1 - v8 - 61) ^ *v0 ^ v11)
      - (v6 & (2 * ((v1 - v8 - 61) ^ *v0 ^ v10)))
      + v12 != v9
     || v13 == 0;
  return (*(uint64_t (**)(void))(v7 + 8 * ((v15 * v5) ^ v1)))();
}

uint64_t sub_19E7526EC@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(void))(a1 + 8 * (((v4 != v1 + (v5 ^ v2) + 478 + 992) * v3) ^ v5)))();
}

uint64_t sub_19E752718(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  *(_DWORD *)(v16 - 132) = v14
                         + 291962093 * ((2 * ((v16 - 136) & 0x6FCF8888) - (v16 - 136) + 271611762) ^ 0x1C27A38)
                         + 831;
  *(void *)(v16 - 128) = a14;
  *(void *)(v16 - 120) = a13;
  uint64_t v17 = (*(uint64_t (**)(uint64_t))(v15 + 8 * (v14 ^ 0x836)))(v16 - 136);
  return (*(uint64_t (**)(uint64_t))(v15
                                            + 8
                                            * (int)(((*(_DWORD *)(v16 - 136) - 1002406146 < (v14 ^ 0xD2B55DF6))
                                                   * (((v14 + 822617897) & 0xCEF7D8FD) - 200)) ^ (v14 + 450))))(v17);
}

uint64_t sub_19E752720@<X0>(int a1@<W0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  HIDWORD(v10) = *(_DWORD *)(a5 + 4 * (((v5 + v8) & a1 ^ (a2 + 583)) + v7)) ^ *(_DWORD *)(a5 + 4 * (a2 + v7 - 3)) ^ *(_DWORD *)(a5 + 4 * (a2 + v7 - 14)) ^ *(_DWORD *)(a5 + 4 * (a2 + v7 - 16));
  LODWORD(v10) = HIDWORD(v10);
  *(_DWORD *)(a5 + 4 * (v6 + a2)) = (v10 >> 31) + v9 - (a3 & (2 * (v10 >> 31)));
  return (*(uint64_t (**)(void))(a4 + 8 * (v5 ^ (2 * ((v6 + 1 + a2) < 0x50)))))();
}

uint64_t sub_19E75279C()
{
  unsigned int v4 = (v3 ^ 0x372) + v0 - 2065768239;
  BOOL v5 = v2 - 1207355369 > v4;
  if ((v2 - 1207355369) < 0xE82FFF37 != v4 < 0xE82FFF37) {
    BOOL v5 = (v2 - 1207355369) < 0xE82FFF37;
  }
  return (*(uint64_t (**)(void))(v1 + 8 * ((63 * v5) ^ v3)))();
}

uint64_t sub_19E752A08@<X0>(uint64_t a1@<X0>, char a2@<W7>, int a3@<W8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,int a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,int a52)
{
  uint64_t v58 = (v55 + a3);
  unsigned int v59 = *(_DWORD *)(&a40 + v58 + 72);
  *(unsigned char *)(a1 + v58) = (v59 >> (v57 + a2 + v53 + 51 + 94)) ^ 0x2C;
  *(unsigned char *)(a1 + (v58 + 1)) = BYTE2(v59) ^ 0xB7;
  *(unsigned char *)(a1 + (v58 + 2)) = BYTE1(v59) ^ 0x8D;
  *(unsigned char *)(a1 + (v58 + 3)) = v59 ^ 0xF1;
  BOOL v60 = v55 - 231048527 < (a52 + 1060164405);
  if (v55 - 231048527 < v52 != a52 + 1060164405 < v52) {
    BOOL v60 = a52 + 1060164405 < v52;
  }
  return (*(uint64_t (**)(void))(v56 + 8 * ((v60 * v54) ^ v53)))();
}

uint64_t sub_19E752ABC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15 = (v8 - 1);
  uint64_t v16 = (v15 | ((unint64_t)(v15 < v11) << 32)) + v9;
  *(unsigned char *)(v14 + v16) = *(unsigned char *)(*(void *)(a1 + 8 * (v13 ^ v10)) + v16);
  return (*(uint64_t (**)(void))(a8 + 8 * (((((v15 == v11) ^ (v13 - 122)) & 1) * v12) ^ v13)))();
}

void sub_19E752B98(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 8) ^ (1980347521 * ((((2 * a1) | 0x3055C182) - a1 + 1742020415) ^ 0x21CEA03C));
  __asm { BRAA            X8, X17 }
}

uint64_t sub_19E752C34@<X0>(int a1@<W3>, uint64_t a2@<X8>)
{
  int v6 = (v5 - 487787342) & 0x1D130A7F;
  *(_DWORD *)(*(void *)(v4 - 0x7CF6A079DDC7252CLL) + 4 * (v3 + v2)) = a1;
  int v7 = v3 + v6 - 513;
  *(_DWORD *)(v4 - 0x7CF6A079DDC72530) = v7;
  int v8 = v7 + v2;
  if (v7 + v2 < 0) {
    int v8 = -v8;
  }
  return (*(uint64_t (**)(void))(a2
                              + 8
                              * ((((v8 ^ (((v6 - 50) | 0x20) - 1078338033)) + ((2 * v8) & 0x7F73BFFE) + 1078337536 >= 0)
                                * ((((v6 - 50) | 0x20) + 916) ^ 0x263)) ^ ((v6 - 50) | 0x20))))();
}

uint64_t sub_19E752D1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 8 * (((((((v10 - 1090) | 0x540) ^ 0x7E6) * v11) ^ 0x39E) * (v8 == v9)) ^ v10)))();
}

uint64_t sub_19E752D5C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(qword_1EF0E5890 + 8 * ((26 * (*(_DWORD *)(a2 + 4) == 2072727179)) ^ 0x706u) - 8))();
}

uint64_t sub_19E752D98(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 16) = (**(unsigned __int8 **)(a2 + 8) ^ 0xBFEABEF7)
                       + 1828585405
                       + ((2 * **(unsigned __int8 **)(a2 + 8)) & 0xFFEF);
  return 0;
}

void sub_19E752DD0(_DWORD *a1)
{
  unsigned int v1 = 402930427 * (((a1 | 0x37D5D6F5) - a1 + (a1 & 0xC82A290A)) ^ 0x2D6C2A48);
  int v2 = *a1 ^ v1;
  __asm { BRAA            X14, X17 }
}

uint64_t sub_19E752EB8@<X0>(int a1@<W6>, int a2@<W7>, int a3@<W8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,int a37,int a38)
{
  BOOL v42 = a3 == v38 || a38 - a1 != -1264879464;
  return (*(uint64_t (**)(void))(v40
                              + 8
                              * (int)(((((v39 - 13) ^ v42) & 1)
                                     * ((v39 - 539329046) & 0xF075F1E9 ^ (a2 + 125))) ^ v39)))();
}

void sub_19E752F1C()
{
}

uint64_t sub_19E752F24()
{
  return sub_19E752F44();
}

uint64_t sub_19E752F44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int *a8)
{
  int v15 = 139 * (v8 ^ 0x1A3);
  *unint64_t v18 = a1;
  *int v12 = v9;
  *a8 = v15 ^ (v13 + 242) ^ v20;
  int v16 = 67 * (v15 ^ 0x103);
  uint64_t v24 = v19;
  unsigned int v23 = v15 - (v22 ^ 0x11F20D4A) * v14 + 922;
  (*(void (**)(unsigned char *))(v11 + 8 * (v15 ^ 0x814)))(v22);
  unsigned int v23 = v16
      - (((v22 | 0x11AED1EB) - v22 + (v22 & 0xEE512E10)) ^ 0x5CDCA1) * v14
      - 207;
  uint64_t v24 = v21;
  uint64_t result = (*(uint64_t (**)(unsigned char *))(v11 + 8 * (v16 + 899)))(v22);
  _DWORD *v10 = 694817499;
  return result;
}

void sub_19E753060(uint64_t a1@<X8>)
{
  *(void *)(a1 - 0x64C485B0870068B5) = v2;
  *(_DWORD *)(v1 + 24) = 694817499;
}

uint64_t sub_19E7530BC(_DWORD *a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  unsigned int v1 = *a1 + 1305237457 * ((a1 & 0x184B74F6 | ~(a1 | 0x184B74F6)) ^ 0x5E0D2DC7);
  uint64_t v2 = (uint64_t)*(&off_1EF0E5660 + (int)(v1 ^ 0x8A51BED));
  uint64_t v3 = *(void *)(v2 + 808);
  unsigned int v6 = (1980347521 * ((-257107981 - (&v5 | 0xF0ACD7F3) + (&v5 | 0xF53280C)) ^ 0xB6B768F1)) ^ (v1 - 145036629);
  uint64_t v5 = v3;
  uint64_t result = (*((uint64_t (**)(uint64_t *))*(&off_1EF0E5660 + (int)(v1 - 145038099)) + (int)(v1 ^ 0x8A51261) - 1))(&v5);
  *(void *)(v2 + 808) = 0;
  return result;
}

#error "19E7531E8: too big function (funcsize=0)"

uint64_t sub_19E753FA0@<X0>(uint64_t a1@<X7>, uint64_t a2@<X8>)
{
  *(void *)(v2 + ((((v4 - 1634) | 0x662u) + 4294965529) & (v3 + 3712882705))) = v5;
  return (*(uint64_t (**)(void))(a1
                              + 8
                              * (((32 * (((a2 + 1) & 0x1FFFFFFF8) == 8)) | ((((a2 + 1) & 0x1FFFFFFF8) == 8) << 7)) ^ (v4 - 1639))))();
}

uint64_t sub_19E754000@<X0>(uint64_t result@<X0>, int a2@<W8>)
{
  *(_DWORD *)(result + 12) = ((v3 + 2142238047) ^ (32 * a2 - 1480758048))
                           + v2
                           + ((2 * (32 * a2 - 1480758048)) & 0xFF5FEE40)
                           - 1961202180;
  return result;
}

uint64_t sub_19E754048@<X0>(unint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  *(void *)(a3 + ((v6 ^ 0x4BEu ^ a1) & (v4 + a2 + v5))) = v8;
  return (*(uint64_t (**)(void))(v7 + 8 * ((613 * (v4 - (a4 & 0x1FFFFFFF8) == -8)) ^ v6)))();
}

void sub_19E754094(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_DWORD *)(a4 + v5) = v4;
  JUMPOUT(0x19E75409CLL);
}

uint64_t sub_19E75412C(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int a6)
{
  if ((a6 + v6 + a3 - 1007) >= 0x7FFFFFFF) {
    int v10 = -v7;
  }
  else {
    int v10 = v9;
  }
  *uint64_t v8 = v10;
  *(_DWORD *)(result + 16) = 1190262839;
  return result;
}

uint64_t sub_19E754174(uint64_t a1, uint64_t a2, int a3)
{
  *(_DWORD *)(*(void *)(v6 + 96) + 1428) = v4 + 4;
  return (*(uint64_t (**)(void))(v5
                              + 8 * (((*(_DWORD *)(a2 + 4) == v3) * (((a3 - 435) | 0xA4) + ((a3 - 6) ^ 0x14A))) ^ a3)))();
}

uint64_t sub_19E7541C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (v3 >= v4) {
    int v7 = *v6 + 1;
  }
  else {
    int v7 = v5;
  }
  *uint64_t v6 = v7;
  return sub_19E7B3DF8(a1, a2, a3, 4196110050);
}

uint64_t sub_19E7541D0()
{
  int v1 = STACK[0x458] ^ 0x20B;
  unint64_t v2 = STACK[0x5E0];
  STACK[0x508] = *(void *)(v0 + 8 * (int)(STACK[0x458] - 510));
  STACK[0x468] = v2;
  STACK[0x538] = STACK[0x428];
  unsigned int v3 = *(_DWORD *)(v2 - 0x542A6DEB665DB922) & 0x3F ^ 0xFFAE7BFB;
  int v4 = (2 * (*(_DWORD *)(v2 - 0x542A6DEB665DB922) & 0x1F)) ^ 8;
  *(unsigned char *)(v2 - 0x542A6DEB665DB966 + v4 + v3 + 5342241) = 65;
  v5.n128_u64[0] = 0xC1C1C1C1C1C1C1C1;
  v5.n128_u64[1] = 0xC1C1C1C1C1C1C1C1;
  return (*(uint64_t (**)(__n128))(v0
                                           + 8
                                           * ((2084 * (v4 + v3 + 5341629 + ((v1 + 26) | 0x424) - 569 < 0xFFFFFFC8)) ^ v1)))(v5);
}

uint64_t sub_19E7542C8@<X0>(int a1@<W1>, int a2@<W2>, uint64_t a3@<X7>, int a4@<W8>)
{
  return (*(uint64_t (**)(void))(a3 + 8
                                   * (((*(_DWORD *)(v6 + (v4 + a1) * (uint64_t)a2 + 36) != a4) * (v7 ^ 0x11C)) ^ v5)))();
}

void sub_19E754310()
{
}

void sub_19E754EE8()
{
}

uint64_t sub_19E754FC4@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(void))(v2 + 8 * ((27 * (1331852270 - v1 < (((a1 + 5) | 0x84) ^ 0x18Bu))) ^ a1)))();
}

void sub_19E755028()
{
  STACK[0x438] = v1;
  *(_DWORD *)(STACK[0x6A0] + ((LODWORD(STACK[0x4F0]) - 923003689) & 0xFFFFFFFC)) = v0;
  JUMPOUT(0x19E6E3848);
}

uint64_t sub_19E755060@<X0>(uint64_t a1@<X7>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  *(__n128 *)(v6 + v3) = a3;
  return (*(uint64_t (**)(void))(a1 + 8 * (((v3 - 1436 == a2 - 4) * v5) ^ v4)))();
}

uint64_t sub_19E75508C@<X0>(void *a1@<X2>, uint64_t a2@<X8>)
{
  *(_DWORD *)(*a1 + 4 * (v3 - 263820150)) = v5;
  return (*(uint64_t (**)(void))(a2
                              + 8
                              * (((v9 == (((v2 ^ v7) * v8 + 610 + v4) ^ ((v2 ^ v7) * v8 - 708))) * v6) ^ ((v2 ^ v7) * v8))))();
}

uint64_t sub_19E7550EC@<X0>(uint64_t a1@<X7>, int a2@<W8>)
{
  int v4 = a2 + 366;
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(a1 + 8 * (a2 ^ 0xAEF)))(v2 - 0x2D9B7D37FE604EEFLL);
  unint64_t v6 = STACK[0x460];
  STACK[0x578] += (14 * ((v4 + 190) ^ 0x464u)) ^ 0xFFFFFFFFFFFFFB44;
  return (*(uint64_t (**)(uint64_t))(v6 + 8 * ((134 * (v3 != 694817499)) ^ (v4 + 190))))(v5);
}

uint64_t sub_19E755178(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9 = *(_DWORD *)(v8 + 56);
  *(_DWORD *)(v8 + 56) = v9 + 1;
  return (*(uint64_t (**)(void))(a8
                              + 8
                              * (int)((1900 * (v9 - 1337981808 < STACK[0x458] - 562)) ^ (STACK[0x458] - 463))))();
}

void sub_19E7551C4()
{
}

void sub_19E7551D0(unint64_t a1)
{
  STACK[0x5C8] = a1;
  LODWORD(STACK[0x634]) = v1;
  JUMPOUT(0x19E755248);
}

uint64_t sub_19E7552C4@<X0>(int a1@<W0>, int a2@<W2>, int a3@<W6>, uint64_t a4@<X7>, int a5@<W8>)
{
  int v7 = *(_DWORD *)(v6 + v5 * (uint64_t)a2 + 36);
  BOOL v9 = v7 - 1471113326 > (int)((a5 - 299) ^ (a5 + 435) ^ 0x85E83625)
    && v7 - 1471113326 < SLODWORD(STACK[0x438])
    && v7 != a1;
  return (*(uint64_t (**)(void))(a4 + 8 * ((v9 * a3) ^ a5)))();
}

uint64_t sub_19E755324@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(void))(a1 + 8 * ((103 * (v1 == 2072727178)) ^ 0x7B1u)))();
}

void sub_19E75535C()
{
}

uint64_t sub_19E755364(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  LODWORD(STACK[0x51C]) = v9;
  return (*(uint64_t (**)(void))(a8
                              + 8
                              * ((13
                                * ((((v8 - 2155) | 0x200) ^ 0xDEAB3879) + *(_DWORD *)(STACK[0x2A8] + 360) > 0xFFFFFFFD)) ^ v8)))();
}

uint64_t sub_19E7553AC(uint64_t a1, int a2, int a3)
{
  return (*(uint64_t (**)(void))(v4
                              + 8
                              * ((1579
                                * ((*(unsigned __int8 *)(v7 + 1) ^ a2)
                                 + (((a3 - v6) ^ (v3 - 198)) & (2 * *(unsigned __int8 *)(v7 + 1)))
                                 - 198 == v5)) ^ a3)))();
}

uint64_t sub_19E7553F0()
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * ((112
                                * ((((v0 & 1 ^ 0x48B59879) << (((v1 + 102) | 0x59) ^ 0x78)) & 0x12)
                                 + (v0 & 1 ^ 0x48B59879 ^ ((v1 + 1131) | 0x12) ^ 0x270C6298) != 1874460647)) ^ (v1 + 1916))))();
}

uint64_t sub_19E755468@<X0>(int a1@<W0>, int a2@<W4>, uint64_t a3@<X7>, uint64_t a4@<X8>)
{
  unsigned int v7 = v6 - 32;
  uint64_t v8 = v4 + v7;
  long long v9 = *(_OWORD *)(v8 - 31);
  uint64_t v10 = a4 + v7;
  *(_OWORD *)(v10 - 15) = *(_OWORD *)(v8 - 15);
  *(_OWORD *)(v10 - 31) = v9;
  return (*(uint64_t (**)(void))(a3 + 8 * (((a1 == 32) * (v5 ^ a2)) ^ (v5 + 412))))();
}

uint64_t sub_19E755474@<X0>(uint64_t a1@<X7>, int a2@<W8>)
{
  int v4 = v3 != ((v2 + ((a2 - 410) ^ 5) - 4) ^ ((a2 - 410) | 5));
  return (*(uint64_t (**)(void))(a1 + 8 * (((32 * v4) | (v4 << 6)) ^ a2)))();
}

void sub_19E7554C0()
{
}

uint64_t sub_19E75551C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v5 = v3 - (**(unsigned char **)(a2 + 8) == 0);
  int v6 = v4 + 1969;
  *(_DWORD *)(*(void *)(a1 + 96) + 800) = 1595393043;
  *(_DWORD *)(*(void *)(a1 + 96) + 804) = 263820150;
  *(void *)(*(void *)(a1 + 96) + 808) = *(void *)(a1 + 96) + 816;
  uint64_t v7 = *(void *)(a1 + 96) + 0x7CF6A079DDC72854;
  uint64_t v8 = *(void *)(a2 + 8) + (*(_DWORD *)(a2 + 4) - v5);
  unsigned int v9 = 545147329 * ((2 * (&v11 & 0x3FC61BC8) - &v11 - 1069947856) ^ 0x60CD245C);
  int v14 = v9 ^ 0x584;
  int v11 = (v5 - 255974107) ^ v9;
  uint64_t v12 = v7;
  uint64_t v15 = v8;
  (*(void (**)(int *))(a3 + 18976))(&v11);
  return v13 + (v6 ^ 0x305C0DCu);
}

uint64_t sub_19E75565C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v12 = STACK[0x314] & 0x2476CEFD;
  if (v9 <= 0x2ACA09D2) {
    int v13 = *(_DWORD *)STACK[0x408] + 1;
  }
  else {
    int v13 = 1672127575;
  }
  *(_DWORD *)STACK[0x408] = v13;
  unsigned int v14 = ((((v8 ^ (v8 >> 11)) << 7) ^ 0x37830900)
       - (((((v8 ^ (v8 >> 11)) << 7) ^ 0x37830900) << (v12 ^ 0xEC)) & 0x6BD09200)
       - 1243068124) & 0x9D2C5680 ^ v8 ^ (v8 >> 11);
  unsigned int v15 = (((v14 << 15) ^ 0xA3090000) - ((2 * ((v14 << 15) ^ 0xA3090000)) & 0xFB140000) + 2106218121) & 0xEFC60000 ^ 0xF8ED90B8;
  unsigned int v16 = (((-1041405358 - (v15 | 0xC1ED6A52) + (v15 | 0x3E1295AC) + 1) ^ 0xDB20D9F4) - 1) ^ v14;
  unint64_t v17 = STACK[0x400] + (v11 - 257969205);
  unsigned int v18 = 1631306195
      * ((*(_DWORD *)(*(void *)STACK[0x438] + (*(int *)STACK[0x430] & 0xFFFFFFFF82A94018)) ^ v17) & 0x7FFFFFFF);
  unint64_t v19 = 1631306195 * (v18 ^ HIWORD(v18));
  char v20 = *((unsigned char *)*(&off_1EF0E5660 + v12 - 1532) + (v19 >> 24) + 4);
  char v21 = *((unsigned char *)*(&off_1EF0E5660 + (v12 & v10)) + (v19 >> 24) - 4) ^ *((unsigned char *)*(&off_1EF0E5660 + (v12 ^ 0x683))
                                                                        + (v19 >> 24)
                                                                        - 4);
  LODWORD(v19) = v19 ^ (-5 * (v19 >> 24)) ^ 0xFFFFFFE5;
  *(unsigned char *)unint64_t v17 = v21 ^ ((v16 ^ (v16 >> 18) ^ 0xB4)
                       + ((v12 - 46) & 0xFB ^ 0x4D)
                       - (((v16 ^ (v16 >> 18) ^ 0x191A9CB4) << (v12 ^ 0xEC)) & 0xCA)
                       - 17) ^ v20 ^ v19;
  return (*(uint64_t (**)(void))(a8
                              + 8
                              * ((3702
                                * (v11
                                 - (((v21 ^ ((v16 ^ (v16 >> 18) ^ 0xB4)
                                                            + ((v12 - 46) & 0xFB ^ 0x4D)
                                                            - (((v16 ^ (v16 >> 18) ^ 0x191A9CB4) << (v12 ^ 0xEC)) & 0xCA)
                                                            - 17) ^ v20) ^ v19) != 0) == 257969204)) ^ v12)))();
}

uint64_t sub_19E7558DC(int a1)
{
  return (*(uint64_t (**)(void))(v3
                              + 8
                              * (int)((((v4 + ((a1 + 451246618) & 0xE51A8379) - 1435) ^ ((a1 + 306335134) | 0x358F3C))
                                     * (v1 == v2)) ^ a1)))();
}

uint64_t sub_19E75593C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, int a16, _DWORD *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,int a26,uint64_t a27,unsigned int a28)
{
  unsigned int v30 = 1980347521 * (&a25 ^ 0xB9E440FD);
  a27 = a21;
  a25 = (v28 + 401) ^ v30;
  a26 = (a7 - a16 - 1476101379) ^ v30;
  a28 = v30 + ((v28 - 1623) & (a7 - 885139635) ^ 0xE7A47EF7) + ((2 * (a7 - 885139635)) & 0xCF48FDE0) + 1121303636;
  uint64_t v31 = (*(uint64_t (**)(int *))(v29 + 8 * (v28 + 705)))(&a25);
  return (*(uint64_t (**)(uint64_t))(v29 + 8 * ((449 * (*a17 == 694817499)) ^ v28)))(v31);
}

uint64_t sub_19E755A10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8
                              + 8
                              * ((((v8 & 2) == (((v9 ^ 0x18A) - 502) | 0x202) - 946) * ((v9 ^ 0x124) - 763)) ^ v9 ^ 0x18A)))();
}

uint64_t sub_19E755A54@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned int a12, int a13, unint64_t *a14)
{
  int v18 = a1 ^ 0x2B3;
  unint64_t v19 = *(_DWORD **)(v15 + 32);
  void *v14 = 0;
  *unint64_t v17 = 0;
  *unint64_t v19 = 0;
  a14 = &STACK[0x326850528847177F];
  a12 = (a1 ^ 0x2B3)
      - 653146051 * ((889355422 - (&a12 | 0x35027C9E) + (&a12 | 0xCAFD8361)) ^ 0x60E93683)
      + 629;
  uint64_t v20 = (*(uint64_t (**)(unsigned int *))(v16 + 8 * ((a1 ^ 0x2B3) + 908)))(&a12);
  return (*(uint64_t (**)(uint64_t))(v16
                                            + 8
                                            * (((a13 == 694817499) * ((499 * (((v18 - 1388) | 0x100) ^ 0x117)) ^ 0x597)) ^ v18)))(v20);
}

uint64_t sub_19E755B34@<X0>(int a1@<W1>, uint64_t a2@<X8>)
{
  BOOL v6 = v2 < v3;
  if (v6 == v4 - 0x4BA11E19C5325323 < (unint64_t)((a1 - 426384037) & 0x196A1BF3) + a2) {
    BOOL v6 = v4 - 0x4BA11E19C5325323 < v2;
  }
  return (*(uint64_t (**)(void))(v5 + 8 * ((23 * !v6) ^ a1)))();
}

uint64_t sub_19E755BA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, int a5@<W8>)
{
  uint64_t v8 = a5 ^ 0x7D7u;
  BOOL v9 = ((((v8 - 1022) | 8u) + 645) ^ 0xFFFFFFFFFFFFFCCELL) + ((v8 ^ (a4 - 1184)) & v7) < 2;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 8 * (int)((v9 | (16 * v9)) ^ v8)))(a1, a2, a3, v6);
}

uint64_t sub_19E755BF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(a8 + 8 * (v8 + 205)))(1576, 2940923044);
  unint64_t v10 = STACK[0x460];
  STACK[0x548] = v9;
  return (*(uint64_t (**)(void))(v10 + 8 * (((v9 == 0) * (2 * ((v8 - 864659506) & 0x3389A26D ^ 0x3E6) + 3149)) ^ v8)))();
}

uint64_t sub_19E755C78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v9
                                                     + 8
                                                     * (int)(((v7 + 673972380 < ((143 * (v8 ^ 0x51E)) ^ 0x821u))
                                                            * (a7 + ((v8 - 302253631) & 0xB6FFB1AF) + 624)) ^ v8)))(a1, 3849373910);
}

void sub_19E755CEC()
{
  STACK[0x578] -= 1616;
  LODWORD(STACK[0x51C]) = -694859284;
  JUMPOUT(0x19E755D10);
}

void sub_19E755D18()
{
}

uint64_t sub_19E755E5C()
{
  return (*(uint64_t (**)(void))(v3 + 8 * (((((v0 ^ 0x1A2) + 1472) ^ v0 ^ 0x5AC) * (v1 == v2)) ^ v0)))();
}

uint64_t sub_19E755E94(uint64_t a1, uint64_t a2, int a3, int a4, unsigned int a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 8 * (((*(_DWORD *)(*v7 + 4 * a5) == a3) * a4) ^ v6)))();
}

uint64_t sub_19E755EC0@<X0>(uint64_t a1@<X7>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(void))(a1 + 8 * ((210 * (*(_DWORD *)(a2 + 1424) == (v2 ^ 0x6233448B))) ^ (v2 + 1613))))();
}

uint64_t sub_19E755F04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10 = LODWORD(STACK[0x5BC]) - 175337597;
  int v11 = ((v9 - 1440217061) < 0x25B356A5) ^ (v10 < (((v8 ^ 0xA00) - 1906) ^ 0x25B357E3u));
  BOOL v12 = v10 < v9 - 1440217061;
  if (v11) {
    BOOL v12 = (v9 - 1440217061) < 0x25B356A5;
  }
  return (*(uint64_t (**)(void))(a8 + 8 * (v8 | (2 * !v12))))();
}

uint64_t sub_19E755F74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v11 = v7 ^ 0x36;
  *(void *)(a5 + v8 + v6 - 1054 + 62 * (v11 ^ 0x321u)) = v10;
  return (*(uint64_t (**)(void))(v9 + 8 * ((1892 * (((v5 + 1) & 0x1FFFFFFF8) == 8)) ^ v11)))();
}

uint64_t sub_19E755FCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10 = v9 - ((((v8 + 586331555) & 0xDD0D4CF3) + 149511721 + 2 * v9) & 0x736CA882) + 1043006903;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a8
                                                                       + 8
                                                                       * ((1018
                                                                         * (((2 * v10) & 0xD7FFBDFA ^ 0x536CA882)
                                                                          + (v10 ^ 0x52498ABC)
                                                                          + 1463774559 != 1128221788)) ^ (v8 - 62))))(a1, a2, a3, 1128221788);
}

void sub_19E756080()
{
  LODWORD(STACK[0x5B8]) = v0;
  LODWORD(STACK[0x504]) = v1;
  LODWORD(STACK[0x55C]) = v3;
  LODWORD(STACK[0x614]) = v2;
  LODWORD(STACK[0x4F0]) = v4 + 64;
  JUMPOUT(0x19E6E3930);
}

uint64_t sub_19E7560DC@<X0>(unsigned int a1@<W1>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(void))(a2 + 8 * (((*(_DWORD *)(*v4 + 4 * a1) == v2) * (v3 + 514)) ^ v3)))();
}

uint64_t sub_19E756104(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  return (*(uint64_t (**)(void))(v11 + 8 * ((((((v8 + 371) | 1) - a7 - 1057) ^ (v10 + 106)) * (v7 == v9)) ^ v8)))();
}

uint64_t sub_19E756138(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  return (*(uint64_t (**)(void))(v6 + 8 * ((21 * ((a4 + 1 + v4) > 0x3F)) | v5)))();
}

uint64_t sub_19E7562F4@<X0>(int a1@<W0>, int a2@<W1>, uint64_t a3@<X3>, int a4@<W8>)
{
  BOOL v6 = *(unsigned __int8 *)(v4 + (a4 ^ a1 ^ (a2 + 1699)) + v5) == 193;
  return (*(uint64_t (**)(void))(a3 + 8 * ((2 * v6) | (4 * v6) | a4)))();
}

uint64_t sub_19E75633C(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,unsigned int a42)
{
  return (*(uint64_t (**)(void))(v43
                              + 8
                              * ((111
                                * ((((v42 - 853) ^ ((a42 | ((unint64_t)(a42 < a1) << 32)) == 2072727178)) & 1) == 0)) ^ v42)))();
}

uint64_t sub_19E7563A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24)
{
  unint64_t v27 = 0xFFFFFFFF00000000;
  if (v24 >= 0x7B8B4E8A) {
    unint64_t v27 = 0;
  }
  uint64_t v26 = ((5 * v25) ^ 0x8FC3FBFE) + 2143154144 + (((a24 - 61) ^ 0x1F87F5D0) & (10 * v25));
  return (*(uint64_t (**)(void))(a8
                              + 8
                              * ((435
                                * (v27 - v24 + v26 + ((unint64_t)(v26 < 0xF81EBDE) << 32) == -1812554416)) ^ a24)))();
}

void sub_19E756438()
{
}

uint64_t sub_19E756440@<X0>(uint64_t a1@<X7>, uint64_t a2@<X8>)
{
  int v4 = 1028 * (v2 ^ 0x37E);
  return (*(uint64_t (**)(void))(a1
                              + 8
                              * (((*(unsigned __int8 *)(a2 + 236 + ((v4 - 840) | 0x218u) - 1752) == *(unsigned __int8 *)(v3 + 32 + ((v4 - 840) | 0x218u) - 1752))
                                * (v4 - 2033)) ^ v4)))();
}

void sub_19E7564DC(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8 = v11 - 516184054 + ((a4 - 556) | 0x40);
  BOOL v9 = v8 < 0xFB0EC243;
  BOOL v10 = v8 > v12 + 2134987635;
  if (v12 + 2134987635 < ((a4 - 329646977) & 0x13A601FFu) - 82919016 != v9) {
    BOOL v10 = v9;
  }
  __asm { BRAA            X10, X17 }
}

uint64_t sub_19E75695C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8
                              + 8
                              * ((((((v10 ^ 0x721) - 1281) | 0x220) ^ (((v10 ^ 0x721) - 141) | 0x25A) ^ 0x4B3)
                                * (v8 == v9)) ^ v10 ^ 0x721)))();
}

void sub_19E7569A4()
{
}

uint64_t sub_19E7569B0@<X0>(uint64_t a1@<X1>, unsigned int a2@<W2>, int a3@<W8>)
{
  return (*(uint64_t (**)(void))(v5
                              + 8
                              * ((1668
                                * (v3
                                 + ((2 * *(unsigned __int8 *)(a1 + 5)) & 0x7777)
                                 + (*(unsigned __int8 *)(a1 + 5) ^ (v4 + a2 + 590 - 1155))
                                 - 12 == a3)) ^ a2)))();
}

uint64_t sub_19E7569F8@<X0>(int a1@<W8>)
{
  int v6 = (v1 ^ 0x16C) - 56;
  *(unsigned char *)(*(void *)(v3 - 0x19C7A72C32A62CC3) + (v6 ^ 0x23395F8Bu) + v5 + a1) = *(unsigned char *)(*(void *)(v3 - 0x19C7A72C32A62CC3)
                                                                                               + (a1 - 1725680077));
  return (*(uint64_t (**)(void))(v4 + 8 * ((56 * (a1 - 1 != ((v6 + 1324012570) & 0xB1152FF9 ^ (v2 + 1096)))) ^ v6)))();
}

uint64_t sub_19E756A88(uint64_t result, int a2)
{
  *(_DWORD *)(result + 28) = a2;
  return result;
}

uint64_t sub_19E756A90(int a1, uint64_t a2)
{
  *(_DWORD *)(*(void *)(v5 + 96) + 1428) = v3;
  return (*(uint64_t (**)(void))(v4
                              + 8
                              * (((*(_DWORD *)(a2 + 4) == ((a1 - 750551054) & 0x2CBC7EFE ^ (v2 - 44))) * (a1 ^ 0x21E)) ^ a1)))();
}

uint64_t sub_19E756AF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 8 * ((55 * (STACK[0x520] == 0)) ^ (v8 + 149))))();
}

uint64_t sub_19E756B2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8 * ((31 * (v3 > ((v4 - 386) | 0x440u) - 135653127)) ^ (v4 - 298))))();
}

uint64_t sub_19E756B70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = (*(uint64_t (**)(void))(a8 + 8 * (v8 + 1725)))();
  return (*(uint64_t (**)(uint64_t))(STACK[0x460]
                                            + 8 * ((761 * (v9 == (((v8 + 472) | 0x128) ^ 0x296A17F7))) ^ (v8 + 768))))(v10);
}

uint64_t sub_19E756BC8()
{
  int v3 = v0 ^ 0x9E4;
  unsigned int v4 = (((3 * (v3 ^ 0x948) + 1592608860) & 0xA112B6F7) - (*(_DWORD *)(v1 - 0x19C7A72C32A62CAFLL) & 1) - 586790789) ^ 0x93048F0A;
  return (*(uint64_t (**)(void))(v2 + 8 * ((52 * (((2 * v4) | 0xDB5EE1A0) - v4 != -1856166496)) ^ v3)))();
}

uint64_t sub_19E756FE0@<X0>(void *a1@<X2>, int a2@<W3>, uint64_t a3@<X8>)
{
  *(_DWORD *)(*a1 + 4 * ((v9 ^ v5) + v3)) = a2;
  return (*(uint64_t (**)(void))(a3 + 8 * (((v8 != v4 + (v9 ^ v6) + 478 + 992) * v7) ^ v9)))();
}

void sub_19E757030(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10 = 1001500783 * ((v9 - 248) ^ 0x4AB4FFB4);
  *(void *)(v9 - 240) = STACK[0x5E0];
  *(_DWORD *)(v9 - 228) = v10 ^ 0xAFF7E931;
  *(_DWORD *)(v9 - 248) = v8 - 167302572 + v10 + 36;
  (*(void (**)(uint64_t))(a8 + 8 * (v8 ^ 0x902)))(v9 - 248);
  JUMPOUT(0x19E7570A0);
}

void sub_19E7570B8()
{
}

uint64_t sub_19E7570C4@<X0>(char a1@<W1>, char a2@<W2>, char a3@<W8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,char a28)
{
  uint64_t v32 = v30 - 1;
  char v33 = ((((v28 + 83 + ((v29 + a2) & a1)) ^ 0xBA)
        + a3
        - 2 * (((v28 + 83 + ((v29 + a2) & a1)) ^ 0xBA) & 0x4F ^ (v28 + 83 + ((v29 + a2) & a1)) & 4)) ^ a3)
      * (v28 - 30);
  *(&a28 + v32) = (v33 - ((2 * v33) & 0xD6) + 107) ^ 0x6B;
  return (*(uint64_t (**)(void))(v31 + 8 * ((1524 * (v32 == 0)) ^ v29)))(0);
}

uint64_t sub_19E75715C@<X0>(int a1@<W0>, int a2@<W1>, unsigned int a3@<W8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,char a28)
{
  BOOL v34 = a3 < v30;
  *(&a28 + (v28 - 377800537)) = *(unsigned char *)(v32 + (v29 + a1))
                                            - ((2 * *(unsigned char *)(v32 + (v29 + a1))) & 0x83)
                                            - 63;
  unsigned int v35 = a2 + v29 + 1;
  int v36 = v34 ^ (v35 < v30);
  BOOL v37 = v35 < a3;
  if (!v36) {
    BOOL v34 = v37;
  }
  return (*(uint64_t (**)(void))(v31 + 8 * ((25 * v34) ^ v33)))();
}

uint64_t sub_19E7571E4(int64x2_t a1, int64x2_t a2, int64x2_t a3, int64x2_t a4, int64x2_t a5, int8x16_t a6, int8x16_t a7, int64x2_t a8)
{
  int64x2_t v21 = vaddq_s64(a2, v17);
  int64x2_t v22 = vaddq_s64(a3, v17);
  int64x2_t v23 = vaddq_s64(a4, v17);
  int64x2_t v24 = vaddq_s64(a1, v17);
  int8x16_t v25 = (int8x16_t)vaddq_s64(v24, a5);
  int8x16_t v26 = (int8x16_t)vaddq_s64(v21, a5);
  int8x16_t v27 = (int8x16_t)vaddq_s64(v23, a5);
  int8x16_t v28 = (int8x16_t)vaddq_s64(v22, a5);
  int64x2_t v29 = (int64x2_t)veorq_s8(v28, a6);
  int64x2_t v30 = (int64x2_t)veorq_s8(v27, a6);
  int64x2_t v31 = (int64x2_t)veorq_s8(v26, a6);
  int64x2_t v32 = (int64x2_t)veorq_s8(v25, a6);
  int8x16_t v33 = (int8x16_t)vdupq_n_s64(v10);
  int64x2_t v34 = (int64x2_t)veorq_s8(vandq_s8((int8x16_t)v29, a7), vandq_s8(v28, v33));
  int64x2_t v35 = (int64x2_t)veorq_s8(vandq_s8((int8x16_t)v30, a7), vandq_s8(v27, v33));
  int64x2_t v36 = (int64x2_t)veorq_s8(vandq_s8((int8x16_t)v31, a7), vandq_s8(v26, v33));
  int64x2_t v37 = (int64x2_t)veorq_s8(vandq_s8((int8x16_t)v32, a7), vandq_s8(v25, v33));
  int64x2_t v38 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(vsubq_s64(v32, vaddq_s64(v37, v37)), v18), (int8x16_t)v18);
  int64x2_t v39 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(vsubq_s64(v31, vaddq_s64(v36, v36)), v18), (int8x16_t)v18);
  int64x2_t v40 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(vsubq_s64(v30, vaddq_s64(v35, v35)), v18), (int8x16_t)v18);
  int64x2_t v41 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(vsubq_s64(v29, vaddq_s64(v34, v34)), v18), (int8x16_t)v18);
  int64x2_t v42 = vaddq_s64(v22, a8);
  v41.i64[0] *= v42.i64[0];
  v41.i64[1] *= v42.i64[1];
  int64x2_t v43 = vaddq_s64(v23, a8);
  v40.i64[0] *= v43.i64[0];
  v40.i64[1] *= v43.i64[1];
  int64x2_t v44 = vaddq_s64(v21, a8);
  v39.i64[0] *= v44.i64[0];
  v39.i64[1] *= v44.i64[1];
  int64x2_t v45 = vaddq_s64(v24, a8);
  v38.i64[0] *= v45.i64[0];
  v38.i64[1] *= v45.i64[1];
  v47.val[1] = (int8x16_t)vaddq_s64(vsubq_s64(v41, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v41, v41), v14)), v15);
  v47.val[0] = (int8x16_t)vaddq_s64(vsubq_s64(v40, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v40, v40), v14)), v15);
  v47.val[2] = (int8x16_t)vaddq_s64(vsubq_s64(v39, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v39, v39), v14)), v15);
  v47.val[3] = (int8x16_t)vaddq_s64(vsubq_s64(v38, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v38, v38), v14)), v15);
  *(int8x8_t *)(v11 - v8 + 91) = vrev64_s8(veor_s8(vadd_s8((int8x8_t)*(_OWORD *)&vqtbl4q_s8(v47, v16), v19), v20));
  return (*(uint64_t (**)(void))(v13 + 8 * (((v8 == 80) * v12) ^ v9)))();
}

uint64_t sub_19E7571F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_19E757208(0, a2, a3, v6 & 0xFFFFFFE0, a5, a6, 1695);
}

uint64_t sub_19E757208@<X0>(int a1@<W0>, int a2@<W1>, int a3@<W3>, int a4@<W4>, int a5@<W5>, int a6@<W6>, uint64_t a7@<X8>)
{
  uint64_t v12 = (v10 + v9 - a1);
  long long v13 = *(_OWORD *)(v8 + v12 - 15);
  long long v14 = *(_OWORD *)(v8 + v12 - 31);
  uint64_t v15 = a7 + v12;
  *(_OWORD *)(v15 - 15) = v13;
  *(_OWORD *)(v15 - 31) = v14;
  return (*(uint64_t (**)(void))(v7 + 8 * ((((a5 ^ (a4 + 3163) ^ a6) + a1 == a3) * v11) ^ (a2 + a5 + 753))))();
}

void sub_19E75725C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(_DWORD *)(v9 - 248) = -1675821692
                        - 545147329 * ((((v9 - 248) | 0xB74FCD97) - ((v9 - 248) & 0xB74FCD97)) ^ 0x17BB0DFB)
                        + v8
                        + 463;
  (*(void (**)(uint64_t))(a8 + 8 * (v8 + 2257)))(v9 - 248);
  *(unsigned char *)(v9 - 232) = (-5 * ((v9 + 8) ^ 0xBD)) ^ 0x4A;
  *(_DWORD *)(v9 - 248) = v8 - 402930427 * ((v9 - 248) ^ 0x1AB9FCBD) + 1058;
  *(void *)(v9 - 224) = STACK[0x258];
  *(void *)(v9 - 240) = STACK[0x250];
  (*(void (**)(uint64_t))(STACK[0x460] + 8 * (v8 + 2310)))(v9 - 248);
  JUMPOUT(0x19E757338);
}

uint64_t sub_19E757484(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8 * ((629 * (v3 < 0x18CDA9CA)) ^ (v4 - 98859416))))();
}

uint64_t sub_19E7574D8()
{
  return (*(uint64_t (**)(void))(v1
                              + 8
                              * ((((*(void *)(v0 - 0x19C7A72C32A62CC3) == 0) ^ (v2 - 28)) & 1 | (8 * (((*(void *)(v0 - 0x19C7A72C32A62CC3) == 0) ^ (v2 - 28)) & 1))) ^ v2)))();
}

void sub_19E757528()
{
  *uint64_t v0 = -694859518;
}

uint64_t sub_19E757538@<X0>(unint64_t a1@<X0>, uint64_t a2@<X7>, int a3@<W8>, int64x2_t a4@<Q0>, int8x16_t a5@<Q1>, int64x2_t a6@<Q2>, int64x2_t a7@<Q3>, int64x2_t a8@<Q4>, int64x2_t a9@<Q5>, int64x2_t a10@<Q6>, int64x2_t a11@<Q7>)
{
  int64x2_t v18 = vdupq_n_s64(v15);
  int64x2_t v19 = vaddq_s64(a10, v18);
  int64x2_t v20 = vaddq_s64(a9, v18);
  int64x2_t v21 = vaddq_s64(a8, v18);
  int64x2_t v22 = vaddq_s64(a11, v18);
  int8x16_t v23 = (int8x16_t)vdupq_n_s64(a1);
  int64x2_t v24 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(v20, a4), v23);
  int64x2_t v25 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(v21, a4), v23);
  int64x2_t v26 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(v19, a4), v23);
  int64x2_t v27 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(v22, a4), v23);
  int64x2_t v28 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(vsubq_s64(v27, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v27, v27), a5)), a6), (int8x16_t)a6);
  int64x2_t v29 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(vsubq_s64(v26, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v26, v26), a5)), a6), (int8x16_t)a6);
  int64x2_t v30 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(vsubq_s64(v25, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v25, v25), a5)), a6), (int8x16_t)a6);
  int64x2_t v31 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(vsubq_s64(v24, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v24, v24), a5)), a6), (int8x16_t)a6);
  int64x2_t v32 = vaddq_s64(v20, a7);
  int64x2_t v33 = vaddq_s64(v21, a7);
  v31.i64[0] *= v32.i64[0];
  v31.i64[1] *= v32.i64[1];
  int64x2_t v34 = vaddq_s64(v19, a7);
  v30.i64[0] *= v33.i64[0];
  v30.i64[1] *= v33.i64[1];
  int64x2_t v35 = vaddq_s64(v22, a7);
  v29.i64[0] *= v34.i64[0];
  v29.i64[1] *= v34.i64[1];
  v28.i64[0] *= v35.i64[0];
  v28.i64[1] *= v35.i64[1];
  int8x16_t v36 = (int8x16_t)vdupq_n_s64(0x24uLL);
  int64x2_t v37 = vsubq_s64(v28, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v28, v28), v36));
  int64x2_t v38 = vsubq_s64(v29, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v29, v29), v36));
  int64x2_t v39 = vdupq_n_s64(v13);
  v41.val[1] = (int8x16_t)vaddq_s64(vsubq_s64(v31, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v31, v31), v36)), v39);
  v41.val[0] = (int8x16_t)vaddq_s64(vsubq_s64(v30, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v30, v30), v36)), v39);
  v41.val[2] = (int8x16_t)vaddq_s64(v38, v39);
  v41.val[3] = (int8x16_t)vaddq_s64(v37, v39);
  *(int8x8_t *)(STACK[0x428] + v11) = vrev64_s8(veor_s8(vadd_s8((int8x8_t)*(_OWORD *)&vqtbl4q_s8(v41, v12[177]), v16), v17));
  return (*(uint64_t (**)(void))(a2 + 8 * (((v11 == 0) * v14) ^ a3)))();
}

uint64_t sub_19E757550(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  unint64_t v28 = STACK[0x5F8];
  int v29 = 1575213817 * ((~(v27 - 248) & 0xCA2B7CA2 | (v27 - 248) & 0x35D4835D) ^ 0x474ECC6E);
  int v30 = ((v26 - 341710571) & 0x145E1731 ^ 0x1E2D3C78) - v29 + 1481498435 * LODWORD(STACK[0x488]);
  *(_DWORD *)(v27 - 216) = v29 + 1041279940 + v23;
  *(_DWORD *)(v27 - 200) = v30;
  *(_DWORD *)(v27 - 196) = (v26 - 941) ^ v29;
  *(void *)(v27 - 248) = v28;
  *(void *)(v27 - 240) = v25;
  *(void *)(v27 - 208) = a23;
  *(void *)(v27 - 232) = v24;
  *(void *)(v27 - 224) = a22;
  *(unsigned char *)(v27 - 192) = (-7 * ((~(v27 + 8) & 0xA2 | (v27 + 8) & 0x5D) ^ 0x6E)) ^ 0x68;
  uint64_t v31 = (*(uint64_t (**)(uint64_t))(a4 + 8 * (v26 ^ 0xCBD)))(v27 - 248);
  unint64_t v32 = STACK[0x460];
  int v33 = *(_DWORD *)(v27 - 188);
  LODWORD(STACK[0x600]) = v33;
  return (*(uint64_t (**)(uint64_t))(v32 + 8 * (((v33 == 694817499) * (((v26 - 1490) | 0x704) - 1764)) ^ v26)))(v31);
}

void sub_19E75766C()
{
}

uint64_t sub_19E7576A0@<X0>(int a1@<W3>, uint64_t a2@<X7>, int a3@<W8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, int a20)
{
  return (*(uint64_t (**)(void))(a2 + 8 * ((962 * ((a20 & a3) == 0)) ^ (a1 - 98))))();
}

uint64_t sub_19E7576C8()
{
  return 4294925278;
}

uint64_t sub_19E7576D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  int v26 = v18 + 437;
  int v27 = 961177747 * ((v25 - 144) ^ 0x2752F11C);
  *(void *)(v25 - 120) = v22;
  *(void *)(v25 - 144) = v23;
  *(_DWORD *)(v25 - 136) = v19 - v27 + ((v18 + 437) ^ 0x55E61B9F);
  *(_DWORD *)(v25 - 132) = v18 - v27 + 1280;
  (*(void (**)(uint64_t))(v20 + 8 * (v18 + 1617)))(v25 - 144);
  *(_DWORD *)(v25 - 128) = (v26 - 955) ^ (1001500783
                                        * ((((v25 - 144) | 0x3324B8EE) - ((v25 - 144) & 0x3324B8EE)) ^ 0x7990475A));
  *(void *)(v25 - 144) = a17;
  *(void *)(v25 - 136) = v21;
  (*(void (**)(uint64_t))(v20 + 8 * (v26 + 1176)))(v25 - 144);
  *(_DWORD *)(v25 - 120) = (v26 + 780) ^ (545147329
                                        * ((((v25 - 144) | 0xF044C597) - ((v25 - 144) & 0xF044C597)) ^ 0x50B005FB));
  *(void *)(v25 - 112) = a18;
  *(void *)(v25 - 104) = a17;
  *(void *)(v25 - 136) = a12;
  *(void *)(v25 - 128) = v21;
  *(void *)(v25 - 144) = a16;
  uint64_t v28 = (*(uint64_t (**)(uint64_t))(v20 + 8 * (v26 + 1209)))(v25 - 144);
  return (*(uint64_t (**)(uint64_t))(v20
                                            + 8
                                            * (((((v24 == 0) ^ v26 ^ 0xC1) & 1)
                                              * (((v26 - 1152) | 0x241) - 499)) ^ v26)))(v28);
}

uint64_t sub_19E757860(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4
                              + 8
                              * ((56 * (((((v5 + 1569255262) & 0xA2770ABE) - 532) & v4) == ((v5 - 72) ^ 0x7C7))) ^ v5)))();
}

uint64_t sub_19E7578B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  return (*(uint64_t (**)(void))(v7
                              + 8
                              * (int)(((((a6 - 1045323232) & 0x3E4E5FDB ^ 0x90D) + ((a6 + 1064007131) & 0xC094855A))
                                     * (v6 < 0x20)) ^ (a6 + 522))))();
}

uint64_t sub_19E757910@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, int a5@<W8>)
{
  *(unsigned char *)(a2 + (a5 + a1)) = *(unsigned char *)(a4 + a3 - 1677278997);
  return (*(uint64_t (**)(void))(v6
                              + 8
                              * ((((a5 - 136129908) < 0x40) * (10 * ((v5 - 111) ^ 0x37A) + 2926)) ^ (v5 - 111))))();
}

uint64_t sub_19E757970@<X0>(int a1@<W8>)
{
  int v8 = 146 * (v3 ^ 0x349);
  uint64_t v9 = (void *)(v6 - 0x7CF6A079DDC7252CLL);
  unsigned int v10 = ((2 * (*(_DWORD *)(*v9 + 4 * (v1 - 601563590)) ^ v4)) << ~(v2 ^ 0x1B)) | ((*(_DWORD *)(*v9
                                                                                               + 4 * (v1 - 601563591)) ^ v4) >> (v2 ^ 0x1B));
  *(_DWORD *)*uint64_t v9 = v10 + v4 - ((v10 << (((-110 * (v3 ^ 0x49) + 90) | 0xA0) + 81)) & v5);
  BOOL v11 = a1 - 542718615 > 1672138628;
  if (a1 - 542718615 < v8 - 475345459) {
    BOOL v11 = 1;
  }
  return (*(uint64_t (**)(void))(v7 + 8 * ((1450 * v11) ^ (v8 + 404))))();
}

uint64_t sub_19E757A78(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
  int v10 = a3 + a5;
  uint64_t v11 = (a4 + v10);
  long long v12 = *(_OWORD *)(a2 + v11 - 15);
  long long v13 = *(_OWORD *)(a2 + v11 - 31);
  uint64_t v14 = v8 + v11;
  *(_OWORD *)(v14 - 15) = v12;
  *(_OWORD *)(v14 - 31) = v13;
  return (*(uint64_t (**)(void))(v9 + 8 * (((a7 == v10) * a8) ^ a6)))();
}

uint64_t sub_19E757A80(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  LODWORD(STACK[0x220]) = a4;
  v7[159] = 0xD13AB70A483207D5;
  uint64_t v9 = *(_DWORD **)(v5 + 8 * (v4 ^ 0x326));
  STACK[0x210] = (unint64_t)v9;
  LODWORD(STACK[0x304]) = *v9 - 458213052;
  int v10 = *(unsigned int **)(v5 + 8 * (v4 ^ 0x3B4));
  STACK[0x218] = (unint64_t)v10;
  uint64_t v11 = *v10;
  unint64_t v12 = 653146051 * ((0x735E3F96D26B07D5 - ((v8 - 152) | 0x735E3F96D26B07D5) + STACK[0x200]) ^ 0x23562BF687804DC8);
  *(_DWORD *)(v8 - 120) = v4 + 875593099 - v12 - 130;
  *(_DWORD *)(v8 - 148) = (v4 + 875593099) ^ v12;
  *(_DWORD *)(v8 - 144) = v12 + v4 - 373341148;
  v7[169] = v11 - v12;
  v7[167] = v12 ^ 0x63AAA457;
  *(_DWORD *)(v8 - 140) = (v4 + 875592993) ^ v12;
  *(_DWORD *)(v8 - 136) = v12;
  uint64_t v13 = (*(uint64_t (**)(uint64_t))(v6 + 8 * (v4 + 1613)))(v8 - 152);
  return (*(uint64_t (**)(uint64_t))(v6 + 8 * *(int *)(v8 - 152)))(v13);
}

uint64_t sub_19E757BA0()
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * ((1631 * (((v3 + ((v0 - 570723878) & 0xF254FDF9) - 178) & (3 - (v1 | 4))) == 0)) ^ v0)))();
}

uint64_t sub_19E757BF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10 = STACK[0x3C0];
  unint64_t v11 = STACK[0x590];
  STACK[0x528] = *(void *)(a8 + 8 * (v8 - 467));
  STACK[0x578] = v10 + 112;
  STACK[0x4B0] = v11;
  if (v11) {
    BOOL v12 = v9 == 0;
  }
  else {
    BOOL v12 = 1;
  }
  int v13 = v12;
  return (*(uint64_t (**)(void))(a8 + 8 * ((123 * v13) ^ (v8 + 1298))))();
}

uint64_t sub_19E757C1C()
{
  return (*(uint64_t (**)(void))(v3
                              + 8
                              * ((84
                                * ((v1 ^ 0x7DA43158) - 901598366 + (v2 & 0xEDEBAF6E ^ 0x4A38D4E) != ((v0 + 2142711140) & 0x8048D73B ^ 0xC1388D2A))) ^ v0)))();
}

uint64_t sub_19E757CA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 8 * (((((v10 - 731) | 0x422) ^ ((v10 ^ 0x64B) + 1806)) * (v8 == v9)) ^ v10)))();
}

uint64_t sub_19E757CD8@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * ((3194
                                * ((((a1 - 1054) | 0x410) ^ (v3 + 941)) + v1 < ((a1 + 930495997) & 0xC889BDFE)
                                                                                           + 2147483449)) ^ a1)))();
}

uint64_t sub_19E757D38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  unsigned int v32 = 1980347521 * (((v30 | 0xF67B7534) - v30 + (v30 & 0x9848AC8)) ^ 0x4F9F35C9);
  *(_DWORD *)(v31 - 228) = v32 + 1058315934;
  *(_DWORD *)(v31 - 224) = v29 - v32 + 542;
  *(void *)(v31 - 216) = STACK[0x430];
  *(void *)(v31 - 208) = a16;
  *(void *)(v31 - 248) = 0;
  *(void *)(v31 - 240) = a29;
  *(void *)(v31 - 200) = 0;
  *(void *)(v31 - 192) = a27;
  uint64_t v33 = (*(uint64_t (**)(uint64_t))(a8 + 8 * (v29 ^ 0xD38)))(v31 - 248);
  unint64_t v34 = STACK[0x460];
  int v35 = *(_DWORD *)(v31 - 232);
  LODWORD(STACK[0x67C]) = v35;
  return (*(uint64_t (**)(uint64_t))(v34 + 8 * (((v35 == 694817499) * ((v29 - 648) ^ 0x27A)) ^ v29)))(v33);
}

uint64_t sub_19E757E0C@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, int a7)
{
  unsigned int v9 = v7 & 0x82B1D7FF;
  a4 = a3;
  a5 = a1;
  a6 = ((v7 & 0x82B1D7FF) - 463) ^ (1001500783
                                  * ((((2 * &a4) | 0x260C82D2) - &a4 - 319177065) ^ 0x59B2BEDD));
  uint64_t v10 = (*(uint64_t (**)(uint64_t *))(v8 + 8 * (int)(v7 & 0x82B1D7FF ^ 0xEF5)))(&a4);
  return (*(uint64_t (**)(uint64_t))(v8
                                            + 8
                                            * (int)((99 * (((v9 + 110) ^ (a7 == 694817499)) & 1)) ^ v9)))(v10);
}

uint64_t sub_19E757EB8(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,int a33)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a8
                                                     + 8
                                                     * ((((a4 ^ 0x32A569FE) == 849701858) * ((a33 ^ 0x278) + 167)) ^ (a4 + 81))))(3551251407, 3445265453);
}

uint64_t sub_19E757F28()
{
  if (v2 >= (v0 ^ 0x3E5u) + 2021181498) {
    unint64_t v5 = 0;
  }
  else {
    unint64_t v5 = 0xFFFFFFFF00000000;
  }
  uint64_t v6 = (*(uint64_t (**)(void, void, unint64_t, uint64_t))(v1 + 8 * (v0 + 509)))(*(void *)(*(void *)v4 + 32), *(void *)(v3 + 32), (v2 | ((unint64_t)(v2 < (v0 ^ 0x3E5u) + 2021181498) << 32)) - 2021182705, -1);
  uint64_t v7 = *(unsigned int *)(*(void *)(*(void *)v4 + 32) + 4);
  return (*(uint64_t (**)(uint64_t))(v1
                                            + 8
                                            * ((255
                                              * (v5 - v2 + (v7 ^ 0x1FFCEEF657BFB7FDLL) + ((2 * v7) & 0xAF7F6FFA) == 0x1FFCEEF5DF46E9A3)) ^ v0)))(v6);
}

uint64_t sub_19E757FF4@<X0>(int a1@<W2>, int a2@<W3>, char a3@<W4>, int a4@<W5>, int a5@<W6>, uint64_t a6@<X7>, uint64_t a7@<X8>)
{
  return (*(uint64_t (**)(void))(a6
                              + 8
                              * ((30
                                * ((*(unsigned __int8 *)(v8 + 1148) ^ a2)
                                 + (*(unsigned __int8 *)(a7 + 1128) ^ a1)
                                 + ((2 * (*(unsigned __int8 *)(a7 + 1128) ^ 1)) & 0x2E)
                                 - ((*(unsigned __int8 *)(v8 + 1148) << ((58 * (v7 ^ 0xDB) + 126) ^ a3)) & 0x1F8)
                                 + a4 != a5)) ^ (58 * (v7 ^ 0x6DB)))))();
}

uint64_t sub_19E75806C@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(void))(a1 + 8 * ((43 * (v2 == ((257 * (v1 ^ 0x391)) ^ ((v1 ^ 0x51F) + 1816750881)))) ^ v1)))();
}

uint64_t sub_19E7580CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 8 * ((771 * (*(_DWORD *)(a7 + 72) == (((((v10 ^ 0x327) - 2138570192) | 0x2E14C011) - 856783164) ^ ((v10 ^ 0x327) + 904)))) ^ v10 ^ 0x327)))(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

void sub_19E75813C()
{
}

uint64_t sub_19E758148(uint64_t a1, uint64_t a2, int a3)
{
  return (*(uint64_t (**)(void))(v6
                              + 8
                              * (int)(((((v4 - 1874839637) | (a3 + 0x2000)) ^ (v4 - 555781217) & 0xF170F48B ^ 0xA0C)
                                     * (v3 == v5 - 793722208)) ^ (v4 - 1426))))();
}

uint64_t sub_19E7581B0(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13 = v9 + 1;
  BOOL v15 = v10 == (((4 * ((v8 + 116) ^ v12)) ^ 0x3E) & 0xFE) || v13 == v11 + ((v8 - 2014) | 0x84u) + 26;
  return (*(uint64_t (**)(void))(a8 + 8 * ((v15 * a2) ^ (v8 - 1164))))();
}

void sub_19E758200()
{
}

uint64_t sub_19E758214(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,int a44,char a45)
{
  *(&a45 + (v45 + a2)) = -63;
  return (*(uint64_t (**)(void))(v47 + 8 * ((1627 * ((v45 + 1 + a2) < 0x40)) ^ (v48 + v46 + 632))))();
}

uint64_t sub_19E758258@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X4>, int a5@<W8>, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(v38
                                                                      + 8
                                                                      * ((1243
                                                                        * (((int)(*(_DWORD *)(a36
                                                                                            + 24
                                                                                            * (a5 - 312227977))
                                                                                + ((v36 - 180) ^ 0xBC970303)) & a4) == 0)) ^ v36)))(a1, a2, a3, *(void *)(v37 + 24 * (a5 - 312227977) + 16));
}

uint64_t sub_19E75830C@<X0>(uint64_t a1@<X7>, int a2@<W8>)
{
  LODWORD(STACK[0x600]) = -694859293;
  return (*(uint64_t (**)(void))(a1 + 8 * (((v3 == 0) * (((a2 + 463) ^ 0x333) - 280)) | (a2 + 2067))))();
}

uint64_t sub_19E758324@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(void))(v3
                              + 8
                              * (((((v2 - 53078255) & 0x329ED5E) - 1299) * ((-643 - a1 - v1) < 7)) ^ v2)))();
}

void sub_19E75836C()
{
}

void sub_19E7583BC()
{
  LODWORD(STACK[0x410]) = v0;
  JUMPOUT(0x19E71E8D4);
}

uint64_t sub_19E7583C8(uint64_t a1)
{
  *(void *)(*(void *)(a1 + 16) - 0x519E2D9B46F0E39CLL) = 0;
  return (*(uint64_t (**)(void))(v1 + 8 * (((*v3 == v4) * (v2 ^ 0x5E2)) ^ v2)))();
}

uint64_t sub_19E75840C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  HIDWORD(a10) = v30 - 295;
  HIDWORD(a21) = 807847714;
  uint64_t v32 = *(void *)(a2 + 8);
  unsigned int v33 = 1305237457 * (&a24 ^ 0xB9B9A6CE);
  unsigned int v34 = v33 + *(_DWORD *)(a2 + 4) - 406468487;
  a24 = a17;
  a25 = a14;
  a30 = a15;
  a28 = v32;
  a26 = a16;
  LODWORD(a27) = v34;
  HIDWORD(a27) = v33 + v30 - 316;
  HIDWORD(a18) = v30;
  (*(void (**)(uint64_t *))(v31 + 8 * (v30 ^ 0xB12)))(&a24);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v31 + 8 * ((1994 * (a29 == (HIDWORD(a10) ^ 0x296A13CB))) ^ HIDWORD(a18))))(a1, a2, 798101064, 2929509201, 2147138047, 2072727188, a7, 1983418814, a9, a10, a1, a2, a7, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30);
}

uint64_t sub_19E758518@<X0>(int a1@<W8>, uint64_t a2, ...)
{
  va_start(va, a2);
  int v5 = (*(uint64_t (**)(void, char *, void, uint64_t))(v3 + 8 * (v4 + 1599)))(**(unsigned int **)(v2 + 8 * (v4 ^ 0x373)), va, (((v4 - 87) ^ 0xB8FEA2E4) & (2 * (a1 - 712649532)))+ ((a1 - 712649532) & 0xFFFFF000 ^ 0x5C7F5FDE)+ ((v4 + 136) ^ 0xA380A3E6), 1);
  return (*(uint64_t (**)(void))(v3 + 8 * ((104 * (((2 * v5) & 0xA4E5DFFE) + (v5 ^ 0x5272EFFF) != 1383264255)) ^ v4)))();
}

uint64_t sub_19E7585C4@<X0>(int a1@<W8>)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v2 + 8 * (a1 ^ 0xACEu));
  return v3(v1);
}

uint64_t sub_19E7585F8(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, int a7, int a8)
{
  unint64_t v18 = (((unint64_t)((a8 ^ v15) - ((2 * (a8 ^ v15)) & 0x122) + 2738) << 48)
       - 0x21000000000000) ^ 0xA91000000000000;
  unint64_t v19 = (((unint64_t)((a7 ^ v15) - ((2 * (a7 ^ v15)) & 0xF8) + 126) << 56)
       - 0x200000000000000) ^ 0x7C00000000000000;
  unint64_t v20 = (v18 + 0x534AC86A45B484EBLL - ((2 * v18) & 0x2694000000000000)) ^ 0x534AC86A45B484EBLL | (v19
                                                                                                  - 0x15F2019E6C841F40
                                                                                                  - ((2 * v19) & 0xD400000000000000)) ^ 0xEA0DFE61937BE0C0;
  unint64_t v21 = (((unint64_t)((a5 ^ v15) - ((2 * (a5 ^ v15)) & 0x174) + 10261972) << 40)
       - 0x1A0000000000) ^ 0x9C95BA0000000000;
  uint64_t v22 = (v20 + 0x2C8B49C2619098CFLL - ((2 * v20) & 0x59169384C321319ELL)) ^ 0x2C8B49C2619098CFLL | (v21
                                                                                                  + 0x104B16B6958DC71
                                                                                                  - ((2 * v21) & 0x209620000000000)) ^ 0x104B16B6958DC71;
  unint64_t v23 = (((unint64_t)((a2 ^ v15) - ((2 * (a2 ^ v15)) & 0x160) + 1936108745) << 32)
       - 0x1900000000) ^ 0x7366ACB000000000;
  unint64_t v24 = (v22 - 0x34A9765D636E1596 - ((2 * v22) & 0x96AD13453923D4D4)) ^ 0xCB5689A29C91EA6ALL | (v23
                                                                                                  + 0x4D24B45A853C702CLL
                                                                                                  - ((2 * v23) & 0x1A4968B400000000)) ^ 0x4D24B45A853C702CLL;
  uint64_t v25 = ((((a1 ^ v15) - ((2 * (a1 ^ v15)) & 0x15ALL)) << 24) + 0x1FA5938DAD000000) ^ 0x1FA5938DAD000000;
  unint64_t v26 = (v24 - 0x41B00CEC9C2FB748 - ((2 * v24) & 0x7C9FE626C7A09170)) ^ 0xBE4FF31363D048B8 | (v25
                                                                                                  + 0x16FF625A51F8959ELL
                                                                                                  + (~(2 * v25) | 0xD2013B4B5DFFFFFFLL)
                                                                                                  + 1) ^ 0x16FF625A51F8959ELL;
  uint64_t v27 = ((((v13 ^ v15) - ((2 * (v13 ^ v15)) & 0xD8)) << 16) + 0xEEB00295A6C0000) ^ 0xEEB00295A6C0000;
  unint64_t v28 = (v26 + 0x41322D60DD1FDAFDLL - ((2 * v26) & 0x82645AC1BA3FB5FALL)) ^ 0x41322D60DD1FDAFDLL | (v27
                                                                                                  - 0x134563D7CFBE8E6ELL
                                                                                                  - ((2 * v27) & 0x5975385060820000)) ^ 0xECBA9C2830417192;
  uint64_t v29 = ((((v12 ^ v15) - ((2 * (v12 ^ v15)) & 0xDALL)) << 8) + 0x65326F3853E26D00) ^ 0x65326F3853E26D00;
  uint64_t v30 = (v28 + 0x20B85A1BD54AFC99 - ((2 * v28) & 0x4170B437AA95F932)) ^ 0x20B85A1BD54AFC99 | (v29
                                                                                                  + 0x36AC4D05B97C846FLL
                                                                                                  - ((2 * v29) & 0x6D589A0B72F90800)) ^ 0x36AC4D05B97C846FLL;
  unint64_t v31 = (v30 + 0x4138CA802F9C7631 - ((2 * v30) & 0x827195005F38EC62)) ^ 0x4138CA802F9C7631 | ((v9 ^ v15)
                                                                                                  + 0x3D1337DEC735BE29
                                                                                                  - ((2 * (v9 ^ v15)) & 0x52)) ^ 0x3D1337DEC735BE29;
  unint64_t v32 = (v31 ^ 0xDFE8DEFDDFFFFFB7) + 0x2017210220000049 + ((2 * v31) & 0xBFD1BDFBBFFFFF6ELL);
  uint64_t v33 = (v11 - 1);
  uint64_t v34 = (v33 | ((unint64_t)(v33 < 0xC6C418C) << 32)) + v17;
  *(unsigned char *)(*v16 + v10 + v34) = *(unsigned char *)(v32 + v34) + ((v8 - 66) ^ (2 * *(unsigned char *)(v32 + v34)) & 0x83 ^ 0x60) - 62;
  return (*(uint64_t (**)(void))(v14 + 8 * ((1781 * (v33 == 208421260)) ^ v8)))();
}

uint64_t sub_19E758A50()
{
  uint64_t result = (*(uint64_t (**)(void))(v2 + 8 * (v0 ^ 0xB6Cu)))();
  *uint64_t v1 = 281645392;
  return result;
}

uint64_t sub_19E758A98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,unint64_t a51)
{
  int v55 = (v51 - 372326477) & 0x163145F7;
  unint64_t v56 = STACK[0x5B0];
  unint64_t v57 = STACK[0x5C8];
  STACK[0xE10] = STACK[0x5B0];
  int v58 = v55 + (v56 ^ 0x26881254) - ((2 * v56) & 0xB2EFDB56) + (v57 ^ 0xBFB65F75) + ((2 * v57) & 0x7F6CBEEA) + 432113730;
  LODWORD(STACK[0xE18]) = (v58 ^ 0xDBEFDA75) + 660471264 + ((2 * v58) & 0xB7DFB4EA);
  LODWORD(STACK[0xE1C]) = 0;
  STACK[0xE20] = v57;
  STACK[0xE28] = 0x4034DD955;
  STACK[0xE30] = v57 + 256;
  unint64_t v59 = v56 + (LODWORD(STACK[0x5A8]) - 1639538820);
  LODWORD(v57) = (v57 ^ 0x278401)
               - ((2 * v57) & 0xFFB0F7FC)
               + (v59 ^ 0x3F74EDFE)
               + ((2 * v59) & 0x7EE9DBFC)
               - 1067217407;
  LODWORD(STACK[0xE38]) = (v57 ^ 0x5FF37FBE) - 1554360425 + ((2 * v57) & 0xBFE6FF7C);
  LODWORD(STACK[0xE3C]) = 3;
  unint64_t v60 = STACK[0x5D0];
  *(void *)(v54 - 208) = STACK[0x5D0];
  *(void *)(v54 - 200) = 0x900000100;
  STACK[0x398] = a51;
  LODWORD(v56) = ((2 * v56) & 0xBFAEBC9E) + (v56 ^ 0x5FD75E4F) - 1607949903;
  LODWORD(STACK[0x3A0]) = (v56 ^ 0xBED7B55F)
                        - (((2 * a51) & 0x5F9772FE)
                         + (a51 ^ 0xAFCBB97F))
                        + ((2 * v56) & 0x7DAF6ABE)
                        + 595984296;
  LODWORD(STACK[0x3A4]) = 0;
  STACK[0x3A8] = v59;
  LODWORD(v56) = (v59 ^ 0x54230200)
               + (v60 ^ 0x6F757AF7)
               + ((2 * v60) & 0xDEEAF5EE)
               - ((2 * v59) & 0x57B9FBFE)
               + 1013416713;
  LODWORD(STACK[0x3B0]) = (v56 ^ 0xF3FFFBFF) + 1049755529 + ((2 * v56) & 0xE7FFF7FE);
  LODWORD(STACK[0x3B4]) = 2;
  STACK[0x3B8] = v60 + 256;
  LODWORD(v56) = ((2 * (v60 + 256)) & 0xFEBBB776) + ((v60 + 256) ^ 0xFF5DDBBB) + 10626117;
  LODWORD(STACK[0x3C0]) = ((a51 + 1131) ^ 0xEF7F7DDB)
                        + ((2 * (a51 + 1131)) & 0xDEFEFBB6)
                        + (v56 ^ 0x80190102)
                        - ((2 * v56) & 0xFFCDFDFA)
                        - 1023837013;
  LODWORD(STACK[0x3C4]) = 3;
  STACK[0x268] = (unint64_t)&STACK[0xE10];
  LODWORD(STACK[0x270]) = 3;
  STACK[0x278] = v54 - 208;
  LODWORD(STACK[0x280]) = 1;
  STACK[0x288] = (unint64_t)&STACK[0x398];
  LODWORD(STACK[0x290]) = 3;
  uint64_t v61 = (*(uint64_t (**)(unint64_t *, void, uint64_t))(v52 + 8 * (v51 + 2284)))(&STACK[0xA10], 0, 1024);
  *(void *)(v54 - 224) = &STACK[0xA10];
  LODWORD(STACK[0x264]) = 8;
  int v62 = STACK[0x25C];
  LODWORD(STACK[0x218]) = LODWORD(STACK[0x25C]) + 1289263562;
  STACK[0x248] = (1305237457
                * ((((2 * (v54 - 192)) | 0x14E04189A3E39C90) - (v54 - 192) - 0xA7020C4D1F1CE48) ^ 0xDB2DB9B568486886)) ^ 0x55902A7A;
  int v63 = 35 * (v62 ^ 0x5E9);
  LODWORD(STACK[0x210]) = v63;
  LODWORD(STACK[0x20C]) = v63 + 475321385;
  STACK[0x240] = (1431787901 * ((v54 - 192) ^ 0x46EFD8E62B90AAD7)) ^ 0xF69F618CLL;
  LODWORD(STACK[0x208]) = v62 + 1139003914;
  LODWORD(STACK[0x200]) = v62 - 718291454;
  int v64 = (v55 - 569920119) & 0x21F845D3;
  int v65 = *(uint64_t (**)(uint64_t))(v52
                                          + 8
                                          * (int)(((((v64 + 1102) | 2) != 1442)
                                                 * ((v64 + 226961059) & 0xF278DDFF ^ 0x518)) ^ v64));
  STACK[0x238] = *(void *)(v53 + 8 * (v64 - 231)) - 4;
  STACK[0x230] = *(void *)(v53 + 8 * (v64 ^ 0x159));
  return v65(v61);
}

uint64_t sub_19E7591FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  *(void *)(v28 - 112) = a23;
  *(void *)(v28 - 104) = v27;
  *(_DWORD *)(v28 - 116) = v23
                         + ((-1338032809 - ((v28 - 120) | 0xB03F3D57) + ((v28 - 120) | 0x4FC0C2A8)) ^ 0x5E32CFE2) * v25
                         - 192;
  uint64_t v29 = (*(uint64_t (**)(uint64_t))(v24 + 8 * (v23 ^ 0xC37)))(v28 - 120);
  return (*(uint64_t (**)(uint64_t))(v24
                                            + 8
                                            * ((((*(_DWORD *)(v28 - 120) + v26) < 0xE94FA782)
                                              * ((v23 ^ 0x26B) - 1247)) ^ v23)))(v29);
}

uint64_t sub_19E7592A0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  uint64_t v43 = a1[5];
  int v44 = (v40 - 2112) | 0x601;
  *(int8x16_t *)(v42 - 112) = veorq_s8(*(int8x16_t *)(*a1 - 0x39F622CF4679F1AFLL), (int8x16_t)xmmword_19EC7A620);
  if (*(void *)(v42 - 120)) {
    BOOL v45 = v43 == 0x6C4003946134F506;
  }
  else {
    BOOL v45 = 1;
  }
  int v46 = v45;
  LODWORD(STACK[0x23C]) = v44;
  uint64_t v47 = *(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v41 + 8 * (int)((v46 * (((968 * (v40 ^ 0x8A6)) ^ 0xFFFFFD93) + v44)) ^ v40));
  LODWORD(STACK[0x238]) = -42900;
  return v47(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40);
}

uint64_t sub_19E75933C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(unsigned char *)(*(void *)(a2 + 96) + 468) = *(unsigned char *)(*(void *)(a1 + 8) + 12);
  return (*(uint64_t (**)(void))(v2 + 9288))(0);
}

uint64_t sub_19E7594CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(v5 + 8 * (v4 ^ (8 * (a4 + 1 == v6 + 64)))))();
}

uint64_t sub_19E759604@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * (((16 * (((((v1 ^ 0xF9) + 99) ^ (a1 == -1914018290)) & 1) == 0)) & 0xDF | (32 * ((((v1 ^ 0xF9) + 99) ^ ~(a1 == -1914018290)) & 1))) ^ v1)))();
}

void sub_19E7596C8()
{
}

uint64_t sub_19E7596D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  LODWORD(STACK[0x24C]) = v9;
  STACK[0x2A8] = v10;
  return (*(uint64_t (**)(void))(a8
                              + 8
                              * (int)((((LODWORD(STACK[0x4E4]) - 2072729227) < 0xFFFFF7FF)
                                     * ((((v8 + 636396499) & 0xDA115BEE) + 62) ^ 0x23C)) ^ (v8 + 1472))))();
}

uint64_t sub_19E759734()
{
  return (*(uint64_t (**)(uint64_t))(v4
                                            + 8
                                            * ((116
                                              * (v1 + v0 + 219839562 + 502 * (v3 ^ 0x416u) < 12 * (v3 ^ 0x46Fu) - 1492)) ^ v3)))(v2);
}

void sub_19E7597AC(_DWORD *a1, int a2)
{
  *((unsigned char *)a1 + v3 + 4) = -117;
  *((unsigned char *)a1 + (v2 + v4) + 4) = 127;
  *a1 = v2 + 5;
  uint64_t v5 = a1 + 1;
  *((unsigned char *)v5 + (v4 + 1 + v2)) = 122;
  *((unsigned char *)v5 + (a2 ^ 0x654297CBu) + v2) = 101;
  *((unsigned char *)v5 + (v2 - 740445572)) = 115;
  *((unsigned char *)v5 + (v2 - 740445571)) = 54;
  JUMPOUT(0x19E854C10);
}

uint64_t sub_19E7597D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,int a59,uint64_t a60,uint64_t a61,uint64_t a62)
{
  int v67 = v62 - v63 + 1869;
  uint64_t v68 = (*(uint64_t (**)(uint64_t, void))(a6 + 8 * (v62 ^ 0xAC9)))(a41, 0);
  unsigned int v69 = v64[4] + (v67 ^ 0x66B06E1) - ((2 * v64[4]) & 0xF8E11006);
  v64[1] = v64[6] - 59734013 - ((2 * v64[6]) & 0xF8E11006);
  v64[2] = v69;
  int v70 = (*(uint64_t (**)(uint64_t))(a62 + 8 * (v62 ^ 0xB3E)))(v68);
  v64[3] = v70 - 59734013 - ((2 * v70) & 0xF8E11006);
  int v71 = (*(uint64_t (**)(void))(a62 + 8 * (v62 + 1830)))();
  _DWORD *v64 = v71 - 59734013 - ((2 * v71) & 0xF8E11006);
  unsigned int v72 = *v65 ^ 0xFC708800 ^ (*v65 >> 30);
  unsigned int v73 = (v65[1] ^ 0x880D8565 ^ (1664525 * v72 - ((3329050 * v72) & 0xE8FA1ACC) + 1954352486)) + (*v64 ^ 0xFC708803);
  unsigned int v74 = (v73 ^ 0xEDF3EA7C) + 930823859 + ((2 * v73) & 0xDBE7D4F8);
  v65[1] = v74 - ((2 * v74 - 1256084062) & 0xF8E11006) - 687776044;
  unint64_t v75 = 1305237457
      * ((((v66 - 152) | 0x3359A95FF7CA6BFALL) - ((v66 - 152) & 0x3359A95FF7CA6BFALL)) ^ 0xE204302E4E73CD34);
  STACK[0x6A0] = v75 ^ 0x83594389;
  int v76 = (v67 - 1501492184) ^ v75;
  STACK[0x690] = v75 ^ 0x83594387;
  *(_DWORD *)(v66 - 152) = -1305237457 * ((((v66 - 152) | 0xF7CA6BFA) - ((v66 - 152) & 0xF7CA6BFA)) ^ 0x4E73CD34);
  *(_DWORD *)(v66 - 148) = v76 ^ 0xE1;
  *(_DWORD *)(v66 - 120) = (v67 - 1501492079) ^ v75;
  *(_DWORD *)(v66 - 144) = v76;
  *(_DWORD *)(v66 - 140) = -2103722546 - v75 + v67;
  uint64_t v77 = (*(uint64_t (**)(uint64_t))(a62 + 8 * (v67 ^ a59)))(v66 - 152);
  return (*(uint64_t (**)(uint64_t))(a62 + 8 * *(int *)(v66 - 136)))(v77);
}

uint64_t sub_19E759B14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X7>, uint64_t a6@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 8 * ((1132 * (a6 + 1 == v10 + 64)) ^ v6)))(a1, a2, v7, a3, a4, v8, a5, v7);
}

uint64_t sub_19E759C4C()
{
  return (*(uint64_t (**)(void))(v3
                              + 8
                              * (((((v0 + 1167) | 0x40) - 1598)
                                * ((v2 & 0xDF6DDDFA ^ 0x1621CBE9 ^ (v0 - 1826319118) & 0x2CDB6FB3)
                                 + (v1 ^ 0xE4E70812)
                                 - 1140901376 == 733358333)) ^ v0)))();
}

uint64_t sub_19E759CD0@<X0>(int a1@<W1>, int a2@<W2>, int a3@<W8>)
{
  if (v3) {
    int v6 = a2;
  }
  else {
    int v6 = v5;
  }
  return (*(uint64_t (**)(void))(v4
                              + 8
                              * (((2 * (v6 == (a3 ^ a1 ^ (a2 + 151)))) | (16 * (v6 == (a3 ^ a1 ^ (a2 + 151))))) ^ (a3 + 625))))();
}

uint64_t sub_19E759CE0(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,int a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,int a43)
{
  int v46 = a3 ^ (v43 + 65);
  unsigned int v51 = (a3 + 342123966) & 0xEB9B9F11;
  int v47 = 1305237457 * ((((v45 - 192) | 0x2C9DCD73) + (~(v45 - 192) | 0xD362328C)) ^ 0x95246BBC);
  *(void *)(v45 - 184) = a10;
  *(_DWORD *)(v45 - 176) = v47 + a3 + 548;
  *(_DWORD *)(v45 - 192) = (a13 - 389031519) ^ v47;
  uint64_t v48 = (*(uint64_t (**)(uint64_t))(v44 + 8 * (a3 + 2320)))(v45 - 192);
  int v49 = ((2 * a43) & 0x4A ^ 0x48) + (a43 & (v51 - 1234) ^ (v46 + 853036735));
  *(&a34 + (v49 + 673972379)) = 65;
  return (*(uint64_t (**)(uint64_t))(v44 + 8 * ((1913 * ((v49 + 673972323) < 0xFFFFFFC8)) ^ a3)))(v48);
}

void sub_19E759E1C()
{
}

void sub_19E759E24()
{
  LODWORD(STACK[0x674]) = v0;
  JUMPOUT(0x19E759E3CLL);
}

uint64_t sub_19E759E48@<X0>(uint64_t a1@<X1>, int a2@<W4>, int a3@<W8>)
{
  return (*(uint64_t (**)(void))(v5
                              + 8
                              * ((968
                                * (v3
                                 + (**(unsigned __int8 **)(a1 + 8) ^ v4)
                                 + ((**(unsigned __int8 **)(a1 + 8) << (((a2 - 70) & 0x7D ^ 0x4B) + 105 * (a2 ^ 0xF6))) & 0x176)
                                 - 41 != a3)) ^ a2)))();
}

uint64_t sub_19E759EC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  BOOL v14 = v10 == a8 && v9 == v12;
  return (*(uint64_t (**)(void))(v11 + 8 * ((486 * (((v8 ^ 0x635 ^ (v8 - 1609) ^ v14) & 1) == 0)) ^ v8)))();
}

void sub_19E759F00()
{
}

uint64_t sub_19E759F14@<X0>(int a1@<W0>, int a2@<W2>, int a3@<W3>, uint64_t a4@<X8>)
{
  *(void *)(a4 - 7 + (a2 + v8 + v7 + 2033 - a3)) = *(void *)(v5
                                                                             - 7
                                                                             + (a2 + v8 + v7 + 2033 - a3));
  return (*(uint64_t (**)(void))(v4 + 8 * ((572 * (a1 - (v6 & 0xFFFFFFF8) - 1335 == -a3)) ^ a1)))();
}

void sub_19E759F78()
{
}

uint64_t sub_19E759F80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4
                              + 8 * ((((v4 & 0xFFFFFFFE) == ((v5 + 942) ^ 0x2154C070)) * (v5 - 551)) ^ (v5 + 1287))))();
}

void sub_19E759FBC()
{
  LODWORD(STACK[0x48C]) = 2072727178;
  JUMPOUT(0x19E755208);
}

uint64_t sub_19E75A08C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,int a21)
{
  unsigned int v26 = v21 + v22 + a21 - 376889080;
  unsigned int v27 = v21 - v24 + 1608 + v25 - 1641769841;
  int v28 = (v26 < 0x19AFE961) ^ (v27 < 0x19AFE961);
  BOOL v29 = v26 < v27;
  if (v28) {
    BOOL v29 = v27 < 0x19AFE961;
  }
  return (*(uint64_t (**)(void))(v23 + 8 * (v29 | (v21 + v22 + 569))))();
}

uint64_t sub_19E75A09C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  *(void *)(v25 - 112) = a20;
  *(void *)(v25 - 104) = v22;
  *(_DWORD *)(v25 - 120) = (v23 + 875) ^ (1575213817
                                        * ((((2 * (v25 - 120)) | 0x6B305C90) - (v25 - 120) - 899165768) ^ 0xB8FD9E84));
  uint64_t v26 = (*(uint64_t (**)(uint64_t))(v21 + 8 * (v23 ^ 0xD63)))(v25 - 120);
  return (*(uint64_t (**)(uint64_t))(v21
                                            + 8 * ((14 * (v24 == (v20 ^ 0x658714AF ^ ((v23 - 944) | 0x444)))) ^ v23)))(v26);
}

uint64_t sub_19E75A150@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(void))(a1
                              + 8
                              * (int)((450
                                     * ((((v2 - 530024269) & 0x1F9784B7 ^ 0x90000736)
                                       + (((v3 - 263820150) * (v1 - 263820150)) ^ 0x6FFFFCFF)
                                       + ((((v3 - 263820150) * (v1 - 263820150)) << ((83 * (v2 ^ 0xC1)) ^ 0x36)) & 0xDFFFF9FE)) >> 31)) ^ v2)))();
}

void sub_19E75A1E4()
{
}

uint64_t sub_19E75A260(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15 = (v11 - 1);
  uint64_t v16 = (v15 | ((unint64_t)(v15 < v12 + 659 + a3) << 32)) + a2;
  *(unsigned char *)(v14 + v16) = *(unsigned char *)((v16 & 0xF) + v8 + 3) ^ *(unsigned char *)(v10 + (v16 & 0xF)) ^ *(unsigned char *)(v9 + (v16 & 0xF)) ^ ((v16 & 0xF) * a6) ^ ((*(unsigned char *)(v13 + v16) ^ 0xE3) + ((2 * *(unsigned char *)(v13 + v16)) & 0xC7) - 95);
  return (*(uint64_t (**)(void))(a8 + 8 * ((254 * (v15 == a3 + 1011)) ^ v12)))();
}

uint64_t sub_19E75A2E4()
{
  return sub_19E75A2EC();
}

uint64_t sub_19E75A2EC@<X0>(int a1@<W0>, uint64_t a2@<X3>, int a3@<W8>)
{
  int8x16_t v10 = *(int8x16_t *)(a2 + (v3 + a1 + v4));
  *(int8x16_t *)(v5 + v4) = vaddq_s8(vsubq_s8(v10, vandq_s8(vaddq_s8(v10, v10), v9)), v8);
  return (*(uint64_t (**)(void))(v6 + 8 * ((35 * (v4 != 48)) | (v7 + a3 + 418))))();
}

uint64_t sub_19E75A338(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(STACK[0x460]
                                                              + 8
                                                              * (int)(((((v4 + 141) | 2) + (v4 ^ 0xFFFFF073))
                                                                     * (v2 == v3)) | v4)))(a1, a2, 553);
}

uint64_t sub_19E75A390(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  signed int v11 = (((v8 - 514) | 0x40) ^ ((v8 - 260) | 0x28) ^ 0xE17B7A31) + *(_DWORD *)(v9 + v10 * (uint64_t)a3 + 36);
  BOOL v13 = v11 > -1089268464 && v11 < SLODWORD(STACK[0x3F8]);
  return (*(uint64_t (**)(void))(a8 + 8 * ((1836 * v13) ^ v8)))();
}

void sub_19E75A40C()
{
}

uint64_t sub_19E75A414(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  int v28 = 583844137 * (((v27 - 144) & 0x3085359C | ~((v27 - 144) | 0x3085359C)) ^ 0xDFA477EE);
  *(_DWORD *)(v27 - 144) = v28 + v25 - 1077;
  *(_DWORD *)(v27 - 128) = v28 + 748782098;
  *(void *)(v27 - 136) = &a23 + v23;
  uint64_t v29 = (*(uint64_t (**)(uint64_t))(v24 + 8 * (v25 ^ 0xEF7u)))(v27 - 144);
  return (*(uint64_t (**)(uint64_t))(v24
                                            + 8
                                            * ((((v25 - 1429510095) & 0x153492EB ^ ((v25 ^ 0x565) - 8)) * (v26 == 0)) ^ (v25 + 165))))(v29);
}

uint64_t sub_19E75A4D8@<X0>(int a1@<W3>, uint64_t a2@<X7>, uint64_t a3@<X8>)
{
  BOOL v6 = v5
     - a3
     - 0x542A6DEB665DB966
     + (unint64_t)(((a1 - 1479622926) & 0x58313FF9u) - 2105304415 + v4 + v3 - 1576) > 0xF;
  return (*(uint64_t (**)(void))(a2 + 8 * ((v6 | (2 * v6)) ^ a1)))();
}

uint64_t sub_19E75A550(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(a8 + 8 * (v8 + 1321)))(1576, 3012117910);
  unint64_t v10 = STACK[0x460];
  STACK[0x648] = v9;
  return (*(uint64_t (**)(void))(v10 + 8 * (int)(((v9 == 0) * (((v8 + 726787161) & 0xD4AE1A3E) - 469)) ^ v8)))();
}

uint64_t sub_19E75A5B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  BOOL v10 = v9 + 613 >= ((v8 - 1086) ^ (v8 + 494) ^ 0x634u);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))(a8
                                                                                         + 8
                                                                                         * (((4 * v10) | (16 * v10)) ^ v8)))(a1, a2, a3, a4, STACK[0x2A8]);
}

uint64_t sub_19E75A5F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  LODWORD(STACK[0x4E0]) = 707431127;
  LODWORD(STACK[0x624]) = 870648486;
  unsigned int v40 = 545147329 * (((v38 | 0xF4DF0753) - (v38 & 0xF4DF0753)) ^ 0x542BC73F);
  *(_DWORD *)(v39 - 200) = v37 - v40 + 642;
  *(void *)(v39 - 216) = v36;
  *(void *)(v39 - 208) = v36 + 0x7CF6A079DDC727C4;
  *(_DWORD *)(v39 - 224) = 385758642 - v40;
  *(void *)(v39 - 248) = 0;
  *(void *)(v39 - 240) = v36 + 0x7CF6A079DDC728D4;
  *(void *)(v39 - 192) = a28;
  *(void *)(v39 - 184) = a36;
  *(void *)(v39 - 232) = 0;
  uint64_t v41 = (*(uint64_t (**)(uint64_t))(a8 + 8 * (v37 + 1093)))(v39 - 248);
  return (*(uint64_t (**)(uint64_t))(STACK[0x460]
                                            + 8
                                            * ((1017 * (*(_DWORD *)(v39 - 176) == (((v37 ^ 0x700) + 438) ^ 0x296A1139))) ^ v37)))(v41);
}

uint64_t sub_19E75A6F8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(v2 + 8 * ((1876 * (**(unsigned char **)(a2 + 8) == 0)) ^ 0xACu)))();
}

uint64_t sub_19E75A728()
{
  return (*(uint64_t (**)(void))(v0 + 8 * (((((v2 + 85) ^ 0x14E) + v2 + 1184) * (v1 == -634780328)) ^ v2)))();
}

uint64_t sub_19E75A760(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned int a14, int a15, unint64_t *a16)
{
  a16 = &STACK[0x3268505288471757];
  a14 = 2036 - 653146051 * ((((2 * &a14) | 0xB9AF18DC) - &a14 - 1557630062) ^ 0xF6C3398C);
  uint64_t v18 = (*(uint64_t (**)(unsigned int *))(v16 + 18520))(&a14);
  return (*(uint64_t (**)(uint64_t))(v16 + 8 * ((1709 * (a15 == v17)) ^ 0x279u)))(v18);
}

uint64_t sub_19E75A7F4@<X0>(uint64_t a1@<X3>, int a2@<W8>)
{
  return (*(uint64_t (**)(void))(v2 + 8 * ((2031 * (a1 + 1 != v3 + 24)) ^ a2)))();
}

uint64_t sub_19E75A92C@<X0>(char a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  uint64_t v56 = v54 - 1;
  char v57 = ((((v52 + a1) ^ 0xBA) + v51 - 2 * (((v52 + a1) ^ 0xBA) & (v51 + ((v53 + 69) | 0x1A) - 23) ^ (v52 + a1) & 4)) ^ v51)
      * (v52 + a1 + 17);
  *(&a51 + v56) = (v57 - ((2 * v57) & 0x28) - 108) ^ 0x94;
  return (*(uint64_t (**)(void))(v55 + 8 * ((478 * (v56 == 0)) ^ v53)))();
}

uint64_t sub_19E75A9B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  BOOL v10 = v9 >= ((31 * (v8 ^ 0x659)) ^ 0x139u);
  return (*(uint64_t (**)(void))(a8 + 8 * ((v10 | (16 * v10)) ^ v8 ^ 0x31D)))();
}

void sub_19E75AA04(uint64_t a1@<X7>, int a2@<W8>)
{
  int v5 = a2 + 269;
  (*(void (**)(void, uint64_t, void))(a1 + 8 * (a2 ^ 0x85D)))(*(unsigned int *)STACK[0x2B8], v2, (v3 - 1290636800 + a2 + 269 + 1462));
  unint64_t v6 = STACK[0x460];
  *(_DWORD *)(v4 - 248) = -1675821692
                        - 545147329 * ((v4 - 1629167429 - 2 * ((v4 - 248) & 0x9EE4E1B3)) ^ 0x3E1021DF)
                        + v5;
  (*(void (**)(uint64_t))(v6 + 8 * (v5 ^ 0xB02)))(v4 - 248);
  JUMPOUT(0x19E75AAA4);
}

uint64_t sub_19E75AAF8@<X0>(int a1@<W0>, int a2@<W1>, unsigned int a3@<W2>, int a4@<W3>, uint64_t a5@<X4>, char a6@<W6>, char a7@<W7>, int a8@<W8>)
{
  BOOL v14 = a3 < v11;
  *(unsigned char *)(a5 + (v8 + a1)) = *(unsigned char *)(v13 + (a8 + v10))
                                           - ((*(unsigned __int8 *)(v13 + (a8 + v10)) << ((4 * v9) ^ a6)) & a7)
                                           - 63;
  unsigned int v15 = a8 + 1 + a2;
  int v16 = v14 ^ (v15 < v11);
  BOOL v17 = v15 < a3;
  if (!v16) {
    BOOL v14 = v17;
  }
  return (*(uint64_t (**)(void))(v12 + 8 * ((!v14 * a4) ^ v9)))();
}

void sub_19E75AB70()
{
  *v1 ^= v2 ^ (53 * (v0 ^ 0x4E0) - 791739960);
  JUMPOUT(0x19E75ABA4);
}

uint64_t sub_19E75ABFC(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  HIDWORD(v10) = v5;
  LODWORD(v10) = v5 ^ v9;
  return (*(uint64_t (**)(void))(v8 + 8 * ((31 * (a5 + 1 != v6 + 4)) ^ a3)))((v10 >> 2) + v9 - (v7 & (2 * (v10 >> 2))));
}

void sub_19E75AD88()
{
}

uint64_t sub_19E75AD9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8 * (((((v4 ^ 0x6C6) + 11) ^ (v4 + 702)) * (v3 < 0xF7EA1DE0)) ^ (v4 - 298))))();
}

uint64_t sub_19E75ADE0()
{
  return (*(uint64_t (**)(void))(v0
                              + 8
                              * (((v2 ^ (v2 - 1600) ^ 0x3F7 ^ (40 * (v2 ^ (v2 - 24)))) * (v1 >= v4)) ^ (v3 + v2 - 1886))))();
}

uint64_t sub_19E75B128@<X0>(uint64_t a1@<X1>, unsigned int a2@<W2>, int a3@<W8>)
{
  return (*(uint64_t (**)(void))(v5
                              + 8
                              * ((1965
                                * (v3
                                 + (*(unsigned __int8 *)(a1 + 1) ^ v4)
                                 + ((2 * *(unsigned __int8 *)(a1 + 1)) & 0x7777)
                                 - 133 == ((11 * (a2 ^ 0x25C)) ^ (a3 + 1155)))) ^ a2)))();
}

void sub_19E75B17C()
{
}

uint64_t sub_19E75B1A4@<X0>(uint64_t a1@<X7>, uint64_t a2@<X8>)
{
  uint64_t v4 = ((v3 + 1804436693) & 0x94727FDF) - a2 - 2072;
  int8x16_t v5 = vrev64q_s8(*(int8x16_t *)(v2 + v4 - 15));
  int8x16_t v6 = vextq_s8(v5, v5, 8uLL);
  int8x16_t v7 = vrev64q_s8(*(int8x16_t *)(v2 + v4 - 31));
  int8x16_t v8 = vextq_s8(v7, v7, 8uLL);
  unint64_t v9 = STACK[0x280] + v4;
  v10.i64[0] = 0x8282828282828282;
  v10.i64[1] = 0x8282828282828282;
  v11.i64[0] = 0xC1C1C1C1C1C1C1C1;
  v11.i64[1] = 0xC1C1C1C1C1C1C1C1;
  int8x16_t v12 = vrev64q_s8(vaddq_s8(vsubq_s8(v6, vandq_s8(vaddq_s8(v6, v6), v10)), v11));
  *(int8x16_t *)(v9 - 15) = vextq_s8(v12, v12, 8uLL);
  int8x16_t v13 = vrev64q_s8(vaddq_s8(vsubq_s8(v8, vandq_s8(vaddq_s8(v8, v8), v10)), v11));
  *(int8x16_t *)(v9 - 31) = vextq_s8(v13, v13, 8uLL);
  return (*(uint64_t (**)(void))(a1 + 8 * ((2018 * (a2 == 96)) ^ v3)))();
}

#error "19E763244: call analysis failed (funcsize=6928)"

uint64_t sub_19E763248@<X0>(int a1@<W6>, int a2@<W8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36,int a37,unsigned int a38,int a39,int a40,int a41,int a42,unsigned __int8 a43,int32x4_t a44,int32x4_t a45,int32x4_t a46,int32x4_t a47)
{
  __n128 v54 = (__n128)vdupq_n_s32(0xF1733702);
  __n128 v55 = (__n128)vdupq_n_s32(0x2DD60000u);
  int32x4_t v56 = vdupq_n_s32(0x9DB8B35u);
  int8x16_t v193 = (int8x16_t)vdupq_n_s32(0xE270DE92);
  int8x16_t v194 = (int8x16_t)vdupq_n_s32(0x13B60000u);
  int32x4_t v57 = vdupq_n_s32(0xF1386F49);
  int32x4_t v58 = vdupq_n_s32(0x24983D00u);
  int8x16_t v192 = (int8x16_t)vdupq_n_s32(0x32B8AE00u);
  int32x4_t v59 = vdupq_n_s32(0x595C572Cu);
  int8x16_t v60 = (int8x16_t)vdupq_n_s32(0x86660412);
  int32x4_t v61 = vdupq_n_s32(0x43330209u);
  int32x4_t v62 = vdupq_n_s32(0xC4262DF0);
  int32x4_t v63 = vdupq_n_s32(0x296A12DBu);
  v64.i64[0] = 0xC1C1C1C1C1C1C1C1;
  v64.i64[1] = 0xC1C1C1C1C1C1C1C1;
  int8x16_t v65 = (int8x16_t)vdupq_n_s32(0x52D425B6u);
  v66.i64[0] = 0xE4000000E4000000;
  v66.i64[1] = 0xE4000000E4000000;
  int v67 = *(uint64_t (**)(uint64_t, __n128, __n128))(v49 + 8 * a2);
  uint64_t v68 = a38;
  int v69 = a43 ^ 0x9E;
  if (v69 == 72)
  {
    int8x16x4_t v196 = vld4q_s8(&a27);
    uint8x16_t v143 = (uint8x16_t)veorq_s8(v196.val[0], v64);
    uint16x8_t v144 = vmovl_u8(*(uint8x8_t *)v143.i8);
    uint16x8_t v145 = vmovl_high_u8(v143);
    v146.i64[0] = 0xF2000000F2;
    v146.i64[1] = 0xF2000000F2;
    int32x4_t v147 = vsubq_s32((int32x4_t)vmovl_high_u16(v145), (int32x4_t)vandq_s8((int8x16_t)vshll_high_n_u16(v145, 1uLL), v146));
    int32x4_t v148 = vshlq_n_s32(vsubq_s32((int32x4_t)vmovl_high_u16(v144), (int32x4_t)vandq_s8((int8x16_t)vshll_high_n_u16(v144, 1uLL), v146)), 0x18uLL);
    v149.i64[0] = 0xF9000000F9000000;
    v149.i64[1] = 0xF9000000F9000000;
    int32x4_t v150 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v144.i8), (int32x4_t)vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v144.i8, 1uLL), v146)), 0x18uLL), v149), (int8x16_t)v149);
    int32x4_t v151 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(v148, v149), (int8x16_t)v149);
    int32x4_t v152 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v145.i8), (int32x4_t)vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v145.i8, 1uLL), v146)), 0x18uLL), v149), (int8x16_t)v149);
    int32x4_t v153 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(v147, 0x18uLL), v149), (int8x16_t)v149);
    uint8x16_t v154 = (uint8x16_t)veorq_s8(v196.val[1], v64);
    uint16x8_t v155 = vmovl_u8(*(uint8x8_t *)v154.i8);
    uint16x8_t v156 = vmovl_high_u8(v154);
    int32x4_t v157 = vsubq_s32((int32x4_t)vmovl_high_u16(v156), (int32x4_t)(*(_OWORD *)&vshll_high_n_u16(v156, 1uLL) & __PAIR128__(0xFFFFFFADFFFFFFADLL, 0xFFFFFFADFFFFFFADLL)));
    int32x4_t v158 = vsubq_s32((int32x4_t)vmovl_high_u16(v155), (int32x4_t)(*(_OWORD *)&vshll_high_n_u16(v155, 1uLL) & __PAIR128__(0xFFFFFFADFFFFFFADLL, 0xFFFFFFADFFFFFFADLL)));
    int32x4_t v159 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v155.i8), (int32x4_t)(*(_OWORD *)&vshll_n_u16(*(uint16x4_t *)v155.i8, 1uLL) & __PAIR128__(0xFFFFFFADFFFFFFADLL, 0xFFFFFFADFFFFFFADLL))), 0x10uLL), (int32x4_t)v55), (int8x16_t)v55);
    int32x4_t v160 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(v158, 0x10uLL), (int32x4_t)v55), (int8x16_t)v55);
    int32x4_t v161 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v156.i8), (int32x4_t)(*(_OWORD *)&vshll_n_u16(*(uint16x4_t *)v156.i8, 1uLL) & __PAIR128__(0xFFFFFFADFFFFFFADLL, 0xFFFFFFADFFFFFFADLL))), 0x10uLL), (int32x4_t)v55), (int8x16_t)v55);
    int32x4_t v162 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(v157, 0x10uLL), (int32x4_t)v55), (int8x16_t)v55);
    int32x4_t v163 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v159, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v159, v159), v194)), v56), (int8x16_t)v56), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v150, (int32x4_t)(*(_OWORD *)&vaddq_s32(v150, v150) & __PAIR128__(0xE3FFFFFFE3FFFFFFLL, 0xE3FFFFFFE3FFFFFFLL))), (int32x4_t)v54), (int8x16_t)v54));
    int32x4_t v164 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v160, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v160, v160), v194)), v56), (int8x16_t)v56), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v151, (int32x4_t)(*(_OWORD *)&vaddq_s32(v151, v151) & __PAIR128__(0xE3FFFFFFE3FFFFFFLL, 0xE3FFFFFFE3FFFFFFLL))), (int32x4_t)v54), (int8x16_t)v54));
    int32x4_t v165 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v161, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v161, v161), v194)), v56), (int8x16_t)v56), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v152, (int32x4_t)(*(_OWORD *)&vaddq_s32(v152, v152) & __PAIR128__(0xE3FFFFFFE3FFFFFFLL, 0xE3FFFFFFE3FFFFFFLL))), (int32x4_t)v54), (int8x16_t)v54));
    int32x4_t v166 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v162, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v162, v162), v194)), v56), (int8x16_t)v56), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v153, (int32x4_t)(*(_OWORD *)&vaddq_s32(v153, v153) & __PAIR128__(0xE3FFFFFFE3FFFFFFLL, 0xE3FFFFFFE3FFFFFFLL))), (int32x4_t)v54), (int8x16_t)v54));
    int32x4_t v167 = vsubq_s32(v166, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v166, v166), v193));
    int32x4_t v168 = vsubq_s32(v165, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v165, v165), v193));
    int32x4_t v169 = vsubq_s32(v164, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v164, v164), v193));
    uint8x16_t v170 = (uint8x16_t)veorq_s8(v196.val[2], v64);
    uint16x8_t v171 = vmovl_u8(*(uint8x8_t *)v170.i8);
    uint16x8_t v172 = vmovl_high_u8(v170);
    v162.i64[0] = 0x7A0000007ALL;
    v162.i64[1] = 0x7A0000007ALL;
    int32x4_t v173 = vsubq_s32((int32x4_t)vmovl_high_u16(v172), (int32x4_t)vandq_s8((int8x16_t)vshll_high_n_u16(v172, 1uLL), (int8x16_t)v162));
    int32x4_t v174 = vsubq_s32((int32x4_t)vmovl_high_u16(v171), (int32x4_t)vandq_s8((int8x16_t)vshll_high_n_u16(v171, 1uLL), (int8x16_t)v162));
    int32x4_t v175 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v171.i8), (int32x4_t)vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v171.i8, 1uLL), (int8x16_t)v162)), 8uLL), v58), (int8x16_t)v58);
    int32x4_t v176 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(v174, 8uLL), v58), (int8x16_t)v58);
    int32x4_t v177 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v172.i8), (int32x4_t)vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v172.i8, 1uLL), (int8x16_t)v162)), 8uLL), v58), (int8x16_t)v58);
    int32x4_t v178 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(v173, 8uLL), v58), (int8x16_t)v58);
    int32x4_t v179 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v163, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v163, v163), v193)), v57), (int8x16_t)v57), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v175, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v175, v175), v192)), v59), (int8x16_t)v59));
    int32x4_t v180 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(v169, v57), (int8x16_t)v57), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v176, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v176, v176), v192)), v59), (int8x16_t)v59));
    int32x4_t v181 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(v168, v57), (int8x16_t)v57), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v177, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v177, v177), v192)), v59), (int8x16_t)v59));
    int32x4_t v182 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(v167, v57), (int8x16_t)v57), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v178, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v178, v178), v192)), v59), (int8x16_t)v59));
    uint8x16_t v183 = (uint8x16_t)veorq_s8(v196.val[3], v64);
    uint16x8_t v184 = vmovl_u8(*(uint8x8_t *)v183.i8);
    uint16x8_t v185 = vmovl_high_u8(v183);
    int32x4_t v186 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v179, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v179, v179), v60)), v61), (int8x16_t)v61), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v184.i8), (int32x4_t)(*(_OWORD *)&vshll_n_u16(*(uint16x4_t *)v184.i8, 1uLL) & __PAIR128__(0xFFFFFFE1FFFFFFE1, 0xFFFFFFE1FFFFFFE1))), v62), (int8x16_t)v62));
    int32x4_t v187 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v180, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v180, v180), v60)), v61), (int8x16_t)v61), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32((int32x4_t)vmovl_high_u16(v184), (int32x4_t)(*(_OWORD *)&vshll_high_n_u16(v184, 1uLL) & __PAIR128__(0xFFFFFFE1FFFFFFE1, 0xFFFFFFE1FFFFFFE1))), v62), (int8x16_t)v62));
    int32x4_t v188 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v181, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v181, v181), v60)), v61), (int8x16_t)v61), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v185.i8), (int32x4_t)(*(_OWORD *)&vshll_n_u16(*(uint16x4_t *)v185.i8, 1uLL) & __PAIR128__(0xFFFFFFE1FFFFFFE1, 0xFFFFFFE1FFFFFFE1))), v62), (int8x16_t)v62));
    int32x4_t v189 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v182, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v182, v182), v60)), v61), (int8x16_t)v61), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32((int32x4_t)vmovl_high_u16(v185), (int32x4_t)(*(_OWORD *)&vshll_high_n_u16(v185, 1uLL) & __PAIR128__(0xFFFFFFE1FFFFFFE1, 0xFFFFFFE1FFFFFFE1))), v62), (int8x16_t)v62));
    a46 = vaddq_s32(vsubq_s32(v188, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v188, v188), v65)), v63);
    a47 = vaddq_s32(vsubq_s32(v189, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v189, v189), v65)), v63);
    a45 = vaddq_s32(vsubq_s32(v187, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v187, v187), v65)), v63);
    a44 = vaddq_s32(vsubq_s32(v186, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v186, v186), v65)), v63);
    int32x4_t v190 = (_DWORD *)&a44 + v51 + 1616611642;
    HIDWORD(v191) = *(v190 - 8) ^ *(v190 - 3) ^ *(v190 - 14) ^ *(v190 - 16);
    LODWORD(v191) = HIDWORD(v191);
    _DWORD *v190 = (v191 >> 31) + v47 - ((2 * (v191 >> 31)) & 0x52D425B6);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v49
                                                                         + 8
                                                                         * ((7 * (v53 != 1616611579)) ^ (5 * (v48 ^ (v48 - 42))))))(454207849, v68, 97, 1451);
  }
  else if (v69 == 75)
  {
    int8x16x4_t v195 = vld4q_s8(&a27);
    uint8x16_t v70 = (uint8x16_t)veorq_s8(v195.val[0], v64);
    uint16x8_t v71 = vmovl_u8(*(uint8x8_t *)v70.i8);
    uint16x8_t v72 = vmovl_high_u8(v70);
    int32x4_t v73 = (int32x4_t)vmovl_high_u16(v72);
    uint32x4_t v74 = vshll_high_n_u16(v72, 1uLL);
    int32x4_t v75 = vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v72.i8), (int32x4_t)(*(_OWORD *)&vshll_n_u16(*(uint16x4_t *)v72.i8, 1uLL) & __PAIR128__(0xFFFFFF6FFFFFFF6FLL, 0xFFFFFF6FFFFFFF6FLL)));
    int32x4_t v76 = vdupq_n_s32(0x4D7295B7u);
    int8x16_t v77 = (int8x16_t)vaddq_s32(v75, v76);
    int8x16_t v78 = (int8x16_t)vaddq_s32(vsubq_s32(v73, (int32x4_t)(*(_OWORD *)&v74 & __PAIR128__(0xFFFFFF6FFFFFFF6FLL, 0xFFFFFF6FFFFFFF6FLL))), v76);
    uint8x16_t v79 = (uint8x16_t)veorq_s8(v195.val[1], v64);
    uint16x8_t v80 = vmovl_u8(*(uint8x8_t *)v79.i8);
    uint16x8_t v81 = vmovl_high_u8(v79);
    v82.i64[0] = 0x9200000092;
    v82.i64[1] = 0x9200000092;
    int32x4_t v83 = vsubq_s32((int32x4_t)vmovl_high_u16(v81), (int32x4_t)vandq_s8((int8x16_t)vshll_high_n_u16(v81, 1uLL), v82));
    int32x4_t v84 = vshlq_n_s32(vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v81.i8), (int32x4_t)vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v81.i8, 1uLL), v82)), 8uLL);
    int32x4_t v85 = vdupq_n_s32(0x26CA4900u);
    int32x4_t v86 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v80.i8), (int32x4_t)vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v80.i8, 1uLL), v82)), 8uLL), v85), (int8x16_t)v85);
    int32x4_t v87 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(vsubq_s32((int32x4_t)vmovl_high_u16(v80), (int32x4_t)vandq_s8((int8x16_t)vshll_high_n_u16(v80, 1uLL), v82)), 8uLL), v85), (int8x16_t)v85);
    int32x4_t v88 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(v84, v85), (int8x16_t)v85);
    int32x4_t v89 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(v83, 8uLL), v85), (int8x16_t)v85);
    int8x16_t v90 = (int8x16_t)vdupq_n_s32(0x1DC79600u);
    int32x4_t v91 = (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v86, v86), v90);
    int32x4_t v92 = (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v87, v87), v90);
    int32x4_t v93 = vsubq_s32(v89, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v89, v89), v90));
    int32x4_t v94 = vsubq_s32(v88, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v88, v88), v90));
    int32x4_t v95 = vsubq_s32(v87, v92);
    int32x4_t v96 = vdupq_n_s32(0x4EE3CBFBu);
    int32x4_t v97 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v86, v91), v96), (int8x16_t)v96), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v71.i8), (int32x4_t)(*(_OWORD *)&vshll_n_u16(*(uint16x4_t *)v71.i8, 1uLL) & __PAIR128__(0xFFFFFF6FFFFFFF6FLL, 0xFFFFFF6FFFFFFF6FLL))), v76), (int8x16_t)v76));
    int32x4_t v98 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(v95, v96), (int8x16_t)v96), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32((int32x4_t)vmovl_high_u16(v71), (int32x4_t)(*(_OWORD *)&vshll_high_n_u16(v71, 1uLL) & __PAIR128__(0xFFFFFF6FFFFFFF6FLL, 0xFFFFFF6FFFFFFF6FLL))), v76), (int8x16_t)v76));
    int32x4_t v99 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(v94, v96), (int8x16_t)v96), veorq_s8(v77, (int8x16_t)v76));
    int32x4_t v100 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(v93, v96), (int8x16_t)v96), veorq_s8(v78, (int8x16_t)v76));
    int8x16_t v101 = (int8x16_t)vdupq_n_s32(0x23A6FB0Eu);
    int32x4_t v102 = vsubq_s32(v100, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v100, v100), v101));
    int32x4_t v103 = vsubq_s32(v99, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v99, v99), v101));
    int32x4_t v104 = vsubq_s32(v98, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v98, v98), v101));
    int32x4_t v105 = vsubq_s32(v97, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v97, v97), v101));
    int32x4_t v106 = vdupq_n_s32(0x11D37D87u);
    uint8x16_t v107 = (uint8x16_t)veorq_s8(v195.val[2], v64);
    uint16x8_t v108 = vmovl_u8(*(uint8x8_t *)v107.i8);
    uint16x8_t v109 = vmovl_high_u8(v107);
    int32x4_t v110 = vsubq_s32((int32x4_t)vmovl_high_u16(v109), (int32x4_t)(*(_OWORD *)&vshll_high_n_u16(v109, 1uLL) & __PAIR128__(0xFFFFFFA5FFFFFFA5, 0xFFFFFFA5FFFFFFA5)));
    int32x4_t v111 = vsubq_s32((int32x4_t)vmovl_high_u16(v108), (int32x4_t)(*(_OWORD *)&vshll_high_n_u16(v108, 1uLL) & __PAIR128__(0xFFFFFFA5FFFFFFA5, 0xFFFFFFA5FFFFFFA5)));
    int32x4_t v112 = vdupq_n_s32(0x3ED20000u);
    int32x4_t v113 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v108.i8), (int32x4_t)(*(_OWORD *)&vshll_n_u16(*(uint16x4_t *)v108.i8, 1uLL) & __PAIR128__(0xFFFFFFA5FFFFFFA5, 0xFFFFFFA5FFFFFFA5))), 0x10uLL), v112), (int8x16_t)v112);
    int32x4_t v114 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(v111, 0x10uLL), v112), (int8x16_t)v112);
    int32x4_t v115 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v109.i8), (int32x4_t)(*(_OWORD *)&vshll_n_u16(*(uint16x4_t *)v109.i8, 1uLL) & __PAIR128__(0xFFFFFFA5FFFFFFA5, 0xFFFFFFA5FFFFFFA5))), 0x10uLL), v112), (int8x16_t)v112);
    int32x4_t v116 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(v110, 0x10uLL), v112), (int8x16_t)v112);
    int8x16_t v117 = (int8x16_t)vdupq_n_s32(0x56540000u);
    int32x4_t v118 = vdupq_n_s32(0xAB2A298B);
    int32x4_t v119 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(v105, v106), (int8x16_t)v106), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v113, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v113, v113), v117)), v118), (int8x16_t)v118));
    int32x4_t v120 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(v104, v106), (int8x16_t)v106), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v114, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v114, v114), v117)), v118), (int8x16_t)v118));
    int32x4_t v121 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(v103, v106), (int8x16_t)v106), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v115, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v115, v115), v117)), v118), (int8x16_t)v118));
    int32x4_t v122 = (int32x4_t)vorrq_s8(veorq_s8((int8x16_t)vaddq_s32(v102, v106), (int8x16_t)v106), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v116, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v116, v116), v117)), v118), (int8x16_t)v118));
    int8x16_t v123 = (int8x16_t)vdupq_n_s32(0x1AE1B776u);
    int32x4_t v124 = vdupq_n_s32(0xCD70DBBB);
    int8x16_t v125 = (int8x16_t)vaddq_s32(vsubq_s32(v119, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v119, v119), v123)), v124);
    int8x16_t v126 = (int8x16_t)vaddq_s32(vsubq_s32(v120, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v120, v120), v123)), v124);
    int8x16_t v127 = (int8x16_t)vaddq_s32(vsubq_s32(v121, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v121, v121), v123)), v124);
    int8x16_t v128 = (int8x16_t)vaddq_s32(vsubq_s32(v122, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v122, v122), v123)), v124);
    uint8x16_t v129 = (uint8x16_t)veorq_s8(v195.val[3], v64);
    uint16x8_t v130 = vmovl_u8(*(uint8x8_t *)v129.i8);
    uint16x8_t v131 = vmovl_high_u8(v129);
    v195.val[2].i64[0] = 0xC8000000C8;
    v195.val[2].i64[1] = 0xC8000000C8;
    v195.val[0] = (int8x16_t)vsubq_s32((int32x4_t)vmovl_high_u16(v131), (int32x4_t)vandq_s8((int8x16_t)vshll_high_n_u16(v131, 1uLL), v195.val[2]));
    int32x4_t v132 = vshlq_n_s32(vsubq_s32((int32x4_t)vmovl_high_u16(v130), (int32x4_t)vandq_s8((int8x16_t)vshll_high_n_u16(v130, 1uLL), v195.val[2])), 0x18uLL);
    int32x4_t v133 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v130.i8), (int32x4_t)vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v130.i8, 1uLL), v195.val[2])), 0x18uLL), v66), (int8x16_t)v66);
    int32x4_t v134 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(v132, v66), (int8x16_t)v66);
    int32x4_t v135 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v131.i8), (int32x4_t)vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v131.i8, 1uLL), v195.val[2])), 0x18uLL), v66), (int8x16_t)v66);
    int32x4_t v136 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vshlq_n_s32((int32x4_t)v195.val[0], 0x18uLL), v66), (int8x16_t)v66);
    int32x4_t v137 = vdupq_n_s32(0xF1B72361);
    int32x4_t v138 = (int32x4_t)vorrq_s8(veorq_s8(v125, (int8x16_t)v124), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v133, (int32x4_t)(*(_OWORD *)&vaddq_s32(v133, v133) & __PAIR128__(0xE3FFFFFFE3FFFFFFLL, 0xE3FFFFFFE3FFFFFFLL))), v137), (int8x16_t)v137));
    int32x4_t v139 = (int32x4_t)vorrq_s8(veorq_s8(v126, (int8x16_t)v124), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v134, (int32x4_t)(*(_OWORD *)&vaddq_s32(v134, v134) & __PAIR128__(0xE3FFFFFFE3FFFFFFLL, 0xE3FFFFFFE3FFFFFFLL))), v137), (int8x16_t)v137));
    int32x4_t v140 = (int32x4_t)vorrq_s8(veorq_s8(v127, (int8x16_t)v124), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v135, (int32x4_t)(*(_OWORD *)&vaddq_s32(v135, v135) & __PAIR128__(0xE3FFFFFFE3FFFFFFLL, 0xE3FFFFFFE3FFFFFFLL))), v137), (int8x16_t)v137));
    int32x4_t v141 = (int32x4_t)vorrq_s8(veorq_s8(v128, (int8x16_t)v124), veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v136, (int32x4_t)(*(_OWORD *)&vaddq_s32(v136, v136) & __PAIR128__(0xE3FFFFFFE3FFFFFFLL, 0xE3FFFFFFE3FFFFFFLL))), v137), (int8x16_t)v137));
    a47 = vaddq_s32(vsubq_s32(v141, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v141, v141), v65)), v63);
    a45 = vaddq_s32(vsubq_s32(v139, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v139, v139), v65)), v63);
    a46 = vaddq_s32(vsubq_s32(v140, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v140, v140), v65)), v63);
    a44 = vaddq_s32(vsubq_s32(v138, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v138, v138), v65)), v63);
    return (*(uint64_t (**)(__n128, __n128))(v49 + 8 * (a1 + v48 + 1359)))(v54, v55);
  }
  else
  {
    a37 = 2 * (a37 ^ v50) + v50 - (v52 & (4 * (a37 ^ v50)));
    a38 = 2 * (a38 ^ v50) + v50 - (v52 & (4 * (a38 ^ v50)));
    a39 = 2 * (a39 ^ v50) + v50 - (v52 & (4 * (a39 ^ v50)));
    a40 = 2 * (a40 ^ v50) + v50 - (v52 & (4 * (a40 ^ v50)));
    return v67(454207849, v54, v55);
  }
}

_DWORD *sub_19E763348(_DWORD *result)
{
  *uint64_t result = (v2 ^ 0x777F012C) - v1;
  return result;
}

uint64_t sub_19E763360(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,int a53)
{
  int v56 = (v53 - 63) | 0xD;
  *v54 ^= a53 ^ (v56 + 1725377498);
  return (*(uint64_t (**)(void))(a3
                              + 8
                              * (int)(((((v56 - 94384938) & 0xFFBBBFFE) + ((v56 - 938244619) | 0x320806E0) + 197716514)
                                     * (v55 == 634238083)) ^ v56)))();
}

uint64_t sub_19E763410@<X0>(int a1@<W8>)
{
  uint64_t v6 = 4 * (v3 - 561815547);
  unsigned int v7 = *(_DWORD *)(v1 + 4 * (v3 - 561815548));
  int v8 = (*(_DWORD *)(v1 + v6) ^ 0x1429C4B8 ^ (1566083941 * (v7 ^ 0x896C9BCC ^ ((v7 >> 30) | 0x751C13CC))
                                           - ((-1162799414 * (v7 ^ 0x896C9BCC ^ ((v7 >> 30) | 0x751C13CC))) & 0xD0B29976)
                                           - 396800837))
     - v3;
  *(_DWORD *)(v1 + v6) = v8 - ((2 * v8 + 1123631094) & 0xF8E11006) + 502081534;
  *(_DWORD *)(v5 - 168) = ((a1 - 1926517248) ^ 0x22) - v4;
  *(_DWORD *)(v5 - 164) = v4 + 1;
  int v9 = a1 - 1926517248 - v4;
  *(_DWORD *)(v5 - 192) = v9;
  *(_DWORD *)(v5 - 160) = v9 - 97;
  *(_DWORD *)(v5 - 156) = a1 - v4 - 1295426680;
  unint64_t v10 = STACK[0x240];
  *(void *)(v5 - 184) = (v3 - 719142510) - v4;
  *(void *)(v5 - 176) = v10;
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(v2 + 8 * (a1 + 869)))(v5 - 192);
  return (*(uint64_t (**)(uint64_t))(v2 + 8 * *(int *)(v5 - 188)))(v11);
}

uint64_t sub_19E763540(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,char a33)
{
  *(void *)(&a33 + (v35 + a2)) = 0xC1C1C1C1C1C1C1C1;
  return (*(uint64_t (**)(void))(v36 + 8 * (((((v34 + 1) & 0x1FFFFFFF8) == 8) * (v33 ^ 0x646)) ^ v33)))();
}

uint64_t sub_19E763590@<X0>(int a1@<W3>, int a2@<W5>, uint64_t a3@<X8>)
{
  HIDWORD(v7) = a1;
  LODWORD(v7) = a1 ^ v6;
  return (*(uint64_t (**)(void))(v5 + 8 * (((2 * (a3 + 1 == v3 + 24)) | (4 * (a3 + 1 == v3 + 24))) ^ a2)))((v7 >> 2) + v6 - (v4 & (2 * (v7 >> 2))));
}

uint64_t sub_19E7636CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  BOOL v39 = ((((v35 - 1022) | 8u) + 645) ^ 0xFFFFFFFFFFFFFCCELL) + a35 < 2;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v37
                                                                                                  + 8 * ((v39 | (16 * v39)) ^ v35)))(a1, a2, a3, v38, a5, a6, v36);
}

uint64_t sub_19E76370C()
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * (int)((242 * (v1 < ((9 * ((v0 + 892950181) & 0xCAC6AEFD ^ 0x67E)) ^ 0x14))) ^ (v0 + 892950181) & 0xCAC6AEFD)))();
}

void sub_19E763770(uint64_t a1@<X1>, int a2@<W8>)
{
  LODWORD(STACK[0x59C]) = a2 + 1;
  uint64_t v4 = (*(uint64_t (**)(unint64_t, void))(a1 + 8 * (v2 ^ 0xAD6)))(STACK[0x3F0], 0);
  unsigned int v5 = v2 - 59733987 + v3[4] - ((2 * v3[4]) & 0xF8E11006) - 556;
  v3[1] = v3[6] - 59734013 - ((2 * v3[6]) & 0xF8E11006);
  v3[2] = v5;
  uint64_t v6 = 8 * (v2 + 1825);
  int v7 = (*(uint64_t (**)(uint64_t))(STACK[0x460] + v6))(v4);
  v3[3] = v7 - 59734013 - ((2 * v7) & 0xF8E11006);
  int v8 = (*(uint64_t (**)(void))(STACK[0x460] + v6))();
  *uint64_t v3 = v8 - 59734013 - ((2 * v8) & 0xF8E11006);
  JUMPOUT(0x19E763884);
}

uint64_t sub_19E763A24()
{
  return sub_19E763A2C();
}

uint64_t sub_19E763A2C@<X0>(uint64_t a1@<X7>, int a2@<W8>)
{
  *(void *)(v4 + (a2 - 582084591 + v2)) = v6;
  return (*(uint64_t (**)(void))(a1 + 8 * ((464 * ((((v3 - 1560) | 0x608u) ^ 0x664) + v2 == v5)) ^ v3)))();
}

void sub_19E763A78()
{
}

uint64_t sub_19E763AA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a4
                                                              + 8
                                                              * (((v5 + 228 + ((v5 + 712) | 0xA5) - 1728) * (v4 == v6)) | v5)))(a1, a2, 553);
}

uint64_t sub_19E763AF8@<X0>(int a1@<W8>)
{
  STACK[0x4D8] = v1 + ((a1 - 2117659719) & 0x7E38EE6D) - 1053;
  uint64_t v2 = (uint64_t (*)(void))STACK[0x528];
  unint64_t v3 = STACK[0x3C8] - 112;
  STACK[0x3C0] = v3;
  STACK[0x578] = v3;
  return v2();
}

uint64_t sub_19E763B3C()
{
  return (*(uint64_t (**)(uint64_t))(v3
                                            + 8
                                            * ((((((v2 - 1138) ^ (v0 == v1)) & 1) == 0) * (((v2 - 1000) | 0x130) - 219)) ^ v2)))(4094394946);
}

uint64_t sub_19E763B8C(uint64_t a1, uint64_t a2, int a3, int a4)
{
  unsigned int v9 = a4 + v6 + v7 + v8 + 428116098 + 1709118629;
  unsigned int v10 = v4 - 440636489;
  int v11 = (v10 < 17 * (a3 ^ 0xE8u) + 1225621879) ^ (v9 < 0x490D82BA);
  BOOL v12 = v9 > v10;
  if (v11) {
    BOOL v12 = v9 < 0x490D82BA;
  }
  return (*(uint64_t (**)(void))(v5 + 8 * ((479 * v12) ^ (a3 + 1493))))();
}

void sub_19E763C20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, int a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25)
{
  int v28 = (void *)STACK[0x430];
  unint64_t v29 = STACK[0x430] + 264;
  v28[31] = 0xFB993765F17C413;
  v28[32] = v29;
  v28[65] = 0xFB993765F17C413;
  v28[66] = v28 + 67;
  STACK[0x3F8] = (unint64_t)v28 + 0x7CF6A079DDC7273CLL;
  v28[99] = 0xFB993765F17C413;
  v28[100] = v28 + 101;
  STACK[0x408] = (unint64_t)v28 + 0x7CF6A079DDC7284CLL;
  v28[133] = 0xFB993765F17C413;
  v28[134] = v28 + 135;
  STACK[0x410] = (unint64_t)v28 + 0x7CF6A079DDC7295CLL;
  v28[167] = 0xFB993765F17C413;
  v28[168] = v28 + 169;
  STACK[0x438] = (unint64_t)v28 + 0x7CF6A079DDC72A6CLL;
  int v30 = 961177747 * (((((v27 - 248) | 0xF11667AE) ^ 0xFFFFFFFE) - (~(v27 - 248) | 0xEE99851)) ^ 0x29BB694D);
  *(_DWORD *)(v27 - 240) = (v25 ^ 0x549CE400) - v30 - 286433930 + ((2 * v25) & 0xFBEDEDB6 ^ a20);
  *(_DWORD *)(v27 - 236) = a25 + 1378 - v30;
  unint64_t v31 = STACK[0x5C8] + 4;
  *(void *)(v27 - 224) = v31;
  *(void *)(v27 - 248) = (char *)v28 + 0x7CF6A079DDC7262CLL;
  uint64_t v32 = 8 * (a25 ^ 0xB75);
  (*(void (**)(uint64_t))(a8 + v32))(v27 - 248);
  uint64_t v33 = v31 + v26;
  LODWORD(v31) = 961177747 * ((v27 - 248) ^ 0x2752F11C);
  LODWORD(STACK[0x400]) = a25 + 1378 - v31;
  *(_DWORD *)(v27 - 240) = (v25 ^ 0xC79EC602)
                         - v31
                         + 2112847736
                         + ((((4 * a25) ^ 0xB88) - 571889786) & (2 * v25) ^ 0x50C021B2);
  *(_DWORD *)(v27 - 236) = a25 + 1378 - v31;
  *(void *)(v27 - 248) = STACK[0x3F8];
  *(void *)(v27 - 224) = v33;
  (*(void (**)(uint64_t))(STACK[0x460] + v32))(v27 - 248);
  uint64_t v34 = v33 + v26;
  int v35 = 961177747 * (((v27 - 248) & 0x42858806 | ~((v27 - 248) | 0x42858806)) ^ 0x9A2886E5);
  *(void *)(v27 - 248) = STACK[0x408];
  *(void *)(v27 - 224) = v34;
  *(_DWORD *)(v27 - 240) = (v25 ^ 0xD69D4622) - v35 + 1827471192 + ((2 * v25) & 0xFFEEA9F2 ^ 0x52C421B2);
  *(_DWORD *)(v27 - 236) = a25 + 1378 - v35;
  uint64_t v36 = 8 * (a25 + 1715);
  (*(void (**)(uint64_t))(STACK[0x460] + v36))(v27 - 248);
  uint64_t v37 = v34 + v26;
  int v38 = 961177747 * (((v27 - 248) & 0x42838810 | ~((v27 - 248) | 0x42838810)) ^ 0x9A2E86F3);
  *(void *)(v27 - 224) = v37;
  *(_DWORD *)(v27 - 240) = (v25 ^ 0xC796CD20) - v38 + 2112320598 + ((2 * v25) & 0xDDF9BFF6 ^ 0x50D025B6);
  *(_DWORD *)(v27 - 236) = a25 + 1378 - v38;
  *(void *)(v27 - 248) = STACK[0x410];
  (*(void (**)(uint64_t))(STACK[0x460] + v32))(v27 - 248);
  *(void *)(v27 - 224) = v37 + v26;
  *(void *)(v27 - 248) = STACK[0x438];
  *(_DWORD *)(v27 - 240) = (v25 ^ 0x569FE6A2) - v31 - 319922216 + ((2 * v25) & 0xFFEBE8F2 ^ 0x52C020B2);
  *(_DWORD *)(v27 - 236) = STACK[0x400];
  (*(void (**)(uint64_t))(STACK[0x460] + v36))(v27 - 248);
  JUMPOUT(0x19E763FE8);
}

uint64_t sub_19E764078(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 8 * ((499 * (v9 != (LODWORD(STACK[0x214]) ^ (v10 + 173)))) ^ (v8 + 691))))();
}

void sub_19E7640AC()
{
}

uint64_t sub_19E764218(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8
                              + 8
                              * ((LODWORD(STACK[0x5BC]) - v9 == ((((v8 | 0x24) ^ 0x1BA) + 1105) ^ 0xB49B7F75)) ^ (v8 | 0x24))))();
}

uint64_t sub_19E764264(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11 = ((LODWORD(STACK[0x428]) + v9 - ((2 * (LODWORD(STACK[0x428]) + v9) - 1379070002) & 0x98130B5A) + 586157460) ^ 0x33F67A52)
      + v8;
  return (*(uint64_t (**)(uint64_t, uint64_t))(a8
                                                     + 8
                                                     * (v10 ^ ((v11 ^ 0x76FFCC25)
                                                             + ((2 * v11) & 0xEDFF984A)
                                                             - 1996475432 > 0xFFFFFFFC))))(3600603168, 1612431119);
}

void sub_19E76438C()
{
}

void sub_19E764394()
{
}

uint64_t sub_19E7643A4()
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * (((((*(_DWORD *)(v1 - 0x19C7A72C32A62CB3) == 1725680076) ^ (v0 + 1)) & 1)
                                * (v0 - 619)) | v0)))();
}

void sub_19E7643EC()
{
}

void sub_19E764FA0()
{
}

uint64_t sub_19E765088(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,int a63)
{
  return (*(uint64_t (**)(void))(v64
                              + 8
                              * ((((a63 - 312227976) < 0x10) * ((v63 - v65 - 631) ^ (a8 + 89))) ^ v63)))();
}

uint64_t sub_19E7650D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62)
{
  *int32x4_t v66 = v66[623];
  STACK[0x680] = (v65 - 980642798) - a61;
  STACK[0x688] = a61 ^ 0x99C760A;
  *(_DWORD *)(v67 - 152) = v63 - a61 - 521099084;
  *(_DWORD *)(v67 - 128) = v63 - a61 - 521099073;
  *(_DWORD *)(v67 - 124) = a61 + 1;
  *(_DWORD *)(v67 - 120) = v63 - a61 - 521099039;
  *(_DWORD *)(v67 - 116) = -1196567909 - a61 + v63;
  uint64_t v68 = (*(uint64_t (**)(uint64_t))(v62 + 8 * (v63 + v64)))(v67 - 152);
  return (*(uint64_t (**)(uint64_t))(a62 + 8 * *(int *)(v67 - 148)))(v68);
}

uint64_t sub_19E765170@<X0>(int a1@<W0>, int a2@<W2>, int a3@<W8>)
{
  BOOL v7 = a3 == v4 && (a1 | a2) != 0;
  return (*(uint64_t (**)(uint64_t))(v5 + 8 * (int)((v7 * ((v3 + 2135391611) & 0x80B87FBF ^ 2)) ^ v3)))(4294925278);
}

uint64_t sub_19E7651B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8 * ((1006 * (v5 - a1 < (unint64_t)((v4 - 1506) | 0x220u) - 524)) ^ v4)))();
}

void sub_19E7651EC()
{
}

void sub_19E7652B8()
{
}

uint64_t sub_19E7652C4(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  LODWORD(STACK[0x48C]) = v5;
  return (*(uint64_t (**)(void))(a4 + 8
                                   * ((15 * (a2 + v6 + (v4 ^ 0x699u) + 1492 >= ((v4 << 6) ^ 0x12E00u) - 828)) ^ v4)))();
}

uint64_t sub_19E765314(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(v2 + 8 * ((1508 * (**(unsigned char **)(a2 + 8) == 0)) ^ 0x23Eu)))();
}

void sub_19E765344()
{
}

uint64_t sub_19E76534C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62)
{
  uint64_t v65 = *off_1EF0E5C38;
  unint64_t v66 = 653146051
      * ((((v64 - 152) | 0x9F0F7F764513F482) - ((v64 - 152) & 0x9F0F7F764513F482)) ^ 0x30F894E9EF074160);
  *(_DWORD *)(v64 - 120) = -1609856796 - v66;
  *(_DWORD *)(v64 - 140) = v66 ^ 0xA00B8846;
  *(_DWORD *)(v64 - 136) = v66;
  STACK[0x6A0] = v65 - v66;
  STACK[0x690] = v66 ^ v63;
  *(_DWORD *)(v64 - 148) = v66 ^ 0xA00B886F;
  *(_DWORD *)(v64 - 144) = v66 - 373340365;
  uint64_t v67 = (*(uint64_t (**)(uint64_t))(v62 + 19168))(v64 - 152);
  return (*(uint64_t (**)(uint64_t))(a62 + 8 * *(int *)(v64 - 152)))(v67);
}

uint64_t sub_19E76535C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4
                              + 8 * (((v5 + v4 + 219841570 >= ((22 * (v6 ^ 0x47A)) ^ 0x5E6u)) * (v6 ^ 0x440)) ^ v6)))();
}

uint64_t sub_19E7653B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45)
{
  unsigned int v49 = 1431787901 * ((v47 & 0x6548B8E5 | ~(v47 | 0x6548B8E5)) ^ 0xB127EDCD);
  *(void *)(v48 - 216) = a45;
  *(_DWORD *)(v48 - 248) = v46 - v49 - 39;
  *(_DWORD *)(v48 - 220) = v49 ^ 0xBCF69742;
  *(void *)(v48 - 240) = a44;
  *(void *)(v48 - 232) = v45;
  uint64_t v50 = (*(uint64_t (**)(uint64_t))(a8 + 8 * (v46 + 2205)))(v48 - 248);
  return (*(uint64_t (**)(uint64_t))(STACK[0x460]
                                            + 8
                                            * ((59
                                              * (*(_DWORD *)(v48 - 224) == ((((v46 - 86) | 4) + 694817449) ^ v46 ^ 0xB2))) ^ v46)))(v50);
}

void sub_19E7654B4()
{
}

uint64_t sub_19E7654C8@<X0>(uint64_t a1@<X7>, int a2@<W8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  unsigned int v44 = (((v42 | 0x37AF967F) - v42 + (v42 & 0xC8506980)) ^ 0x1C3F3CA8) * v40;
  *(_DWORD *)(v43 - 248) = v39 - v44 + 43;
  *(void *)(v43 - 216) = a37;
  *(_DWORD *)(v43 - 220) = a2 ^ v44;
  *(void *)(v43 - 240) = a36;
  *(void *)(v43 - 232) = v37;
  uint64_t v45 = (*(uint64_t (**)(uint64_t))(a1 + 8 * (v39 ^ 0x911)))(v43 - 248);
  unint64_t v46 = STACK[0x460];
  int v47 = *(_DWORD *)(v43 - 224);
  STACK[0x5E8] = v38;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v46
                                                                                                  + 8 * (((v47 == v41 + v39 + 495 - 556) * (((v39 - 1168423248) & 0x45A4BB3E) + 1412)) ^ v39)))(v45, 2724750410, 48, 2222238069, 80, 97, 179);
}

uint64_t sub_19E7655B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  int v11 = a6 + v7 + v6;
  unsigned int v12 = v11 + ((2 * v8) ^ 0xF34) + 1863;
  if (v12 <= 0x40) {
    unsigned int v12 = 64;
  }
  BOOL v13 = !__CFADD__(v11 + 2304, v9 + v12);
  return (*(uint64_t (**)(void))(v10 + 8 * ((v13 * ((2 * v8) ^ 0xE4E)) ^ v8)))();
}

uint64_t sub_19E765610@<X0>(uint64_t a1@<X7>, int a2@<W8>)
{
  int v7 = a2 - 705;
  unint64_t v8 = STACK[0x608];
  int v9 = STACK[0x5D4];
  int v10 = 402930427 * ((2 * ((v6 - 248) & 0x403D19E0) - (v6 - 248) + 1069737501) ^ 0x257B1AA0);
  *(_DWORD *)(v6 - 224) = v10 + a2 - 705 + v2 + 963531524;
  *(void *)(v6 - 232) = v4;
  *(_DWORD *)(v6 - 200) = v10 + a2 - 114530429;
  *(void *)(v6 - 248) = v5;
  *(_DWORD *)(v6 - 240) = v10 + v9 - 932265718;
  *(void *)(v6 - 216) = v3;
  *(void *)(v6 - 208) = v8;
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(a1 + 8 * (a2 + 1570)))(v6 - 248);
  unint64_t v12 = STACK[0x460];
  int v13 = *(_DWORD *)(v6 - 236);
  LODWORD(STACK[0x600]) = v13;
  return (*(uint64_t (**)(uint64_t))(v12
                                            + 8 * ((2088 * (v13 == (((v7 - 49) | 0x200) ^ (v7 + 694816922)))) ^ v7)))(v11);
}

uint64_t sub_19E765730(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62)
{
  unsigned int v67 = (v62 - 75519196) & 0xFE9BDFF7;
  uint64_t v68 = (*(uint64_t (**)(uint64_t, void))(a2 + 8 * (v62 ^ 0xB02)))(a10, 0);
  unsigned int v69 = LODWORD(STACK[0x5F8]) - 59734013 - ((2 * LODWORD(STACK[0x5F8])) & 0xF8E11006);
  LODWORD(STACK[0x5E8]) = LODWORD(STACK[0x5F0]) + (v67 ^ 0x66B06E1) - ((2 * LODWORD(STACK[0x5F0])) & 0xF8E11006);
  LODWORD(STACK[0x5E4]) = v69;
  uint64_t v70 = 8 * (v62 ^ 0xAF5);
  int v71 = (*(uint64_t (**)(uint64_t))(a62 + v70))(v68);
  LODWORD(STACK[0x5EC]) = v71 - 59734013 - ((2 * v71) & 0xF8E11006);
  int v72 = (*(uint64_t (**)(void))(a62 + v70))();
  LODWORD(STACK[0x5E0]) = v72 - 59734013 - ((2 * v72) & 0xF8E11006);
  int v73 = *v64 ^ v65 ^ (*v64 >> 30);
  unsigned int v74 = (v64[1] ^ 0x45BB9C02 ^ (1664525 * v73 - ((3329050 * v73) & 0x73962802) - 1177873407))
      + (LODWORD(STACK[0x5E0]) ^ 0xFC708803);
  unsigned int v75 = (v74 ^ 0xF2FDFF73) + 1141891577 + ((2 * v74) & 0xE5FBFEE6);
  v64[1] = v75 - ((2 * v75 - 1847313112) & 0xF8E11006) - 983390569;
  STACK[0x680] = 3874738120 - a60;
  STACK[0x688] = a60 ^ 0xE6F3CFC6;
  *(_DWORD *)(v66 - 124) = a60 + 1;
  *(_DWORD *)(v66 - 120) = ((v67 - 1261574934) ^ 0x91) - a60;
  *(_DWORD *)(v66 - 116) = -1196567909 - a60 + v67;
  *(_DWORD *)(v66 - 152) = v67 - 1261574934 - a60;
  *(_DWORD *)(v66 - 128) = v67 - 1261574934 - a60 - 107;
  uint64_t v76 = (*(uint64_t (**)(uint64_t))(a62 + 8 * (int)(v67 + v63)))(v66 - 152);
  return (*(uint64_t (**)(uint64_t))(a62 + 8 * *(int *)(v66 - 148)))(v76);
}

uint64_t sub_19E765A2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 8 * (v8 ^ (1971 * (v9 == v10)))))();
}

uint64_t sub_19E765A54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = (*(uint64_t (**)(void))(a4 + 8 * (v4 ^ 0xC83)))();
  unint64_t v7 = STACK[0x460];
  LODWORD(STACK[0x678]) = v5;
  return (*(uint64_t (**)(uint64_t))(v7 + 8 * ((421 * (v5 == 694817499)) ^ v4)))(v6);
}

uint64_t sub_19E765A9C()
{
  return (*(uint64_t (**)(void))(v2 + 8 * ((352 * (v0 + 1 == v3 + 44)) ^ v1)))((v1 - 313) | 0x40u);
}

uint64_t sub_19E765C50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 8
                                   * ((19 * (v9 + 355753392 == ((v8 - 500953910) & 0x1DDBF35F ^ 0x92434D27))) ^ v8)))();
}

uint64_t sub_19E765CCC()
{
  return (*(uint64_t (**)(void))(v2 + 8 * (((*(void *)(v1 + 48) != 0) * (6 * (v0 ^ 0x157) - 1235)) ^ v0)))();
}

uint64_t sub_19E765D00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,unint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,arg52_19E765D00 a52)
{
  *(_OWORD *)(a2 + (((v52 + 554366582) & 0xDEF50B7A ^ a38) & (a3 + a1))) = *(_OWORD *)&a52.arr[4];
  return (*(uint64_t (**)(void))(v54 + 8 * ((1326 * (((v53 + 1) & 0x1FFFFFFF0) == 16)) ^ v52)))();
}

uint64_t sub_19E765D70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, int a8)
{
  return (*(uint64_t (**)(void))(a3 + 8 * (((v8 + 8 == (v9 ^ 0x342 ^ a5)) * (v9 ^ a8 ^ v10)) ^ v9)))();
}

uint64_t sub_19E765DA4(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,unsigned char *a22)
{
  int v25 = *(unsigned char **)(a7 + 96);
  v25[1167] = a22[19];
  v25[1166] = a22[18];
  v25[1165] = a22[17];
  v25[1164] = a22[16];
  v25[1163] = a22[15];
  v25[1162] = a22[14];
  v25[1161] = a22[13];
  v25[1160] = a22[12];
  v25[1159] = a22[11];
  v25[1158] = a22[10];
  v25[1157] = a22[9];
  v25[1156] = a22[8];
  v25[1155] = a22[7];
  v25[1154] = a22[6];
  v25[1153] = a22[5];
  v25[1152] = a22[4];
  v25[1151] = a22[3];
  v25[1150] = a22[2];
  v25[1149] = a22[1];
  v25[1148] = *a22;
  return (*(uint64_t (**)(uint64_t))(v24
                                            + 8
                                            * (((*(_DWORD *)(a7 + 72) == a6 + ((v22 + 2041186031) & 0x8655FEFF) - 1791)
                                              * ((v22 + 904) ^ (a4 + 1144) ^ (a4 + 46))) ^ (v22 + 904))))(v23);
}

uint64_t sub_19E765ECC()
{
  return (*(uint64_t (**)(void))(v2 + 8 * ((2015 * (v1 + 1 == v3 + 32)) ^ v0)))();
}

void sub_19E766240()
{
}

uint64_t sub_19E766270@<X0>(uint64_t a1@<X4>, unint64_t a2@<X5>, int a3@<W8>)
{
  *(_OWORD *)(a1 + (a3 - 200572350 + v3)) = *(_OWORD *)(v7 + v3);
  return (*(uint64_t (**)(void))(v6 + 8 * ((505 * (((v4 + 448) ^ a2) + v3 == v5)) ^ v4)))();
}

uint64_t sub_19E76627C(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  STACK[0x578] = STACK[0x3C8] - 176;
  STACK[0x4E8] = a1;
  unint64_t v10 = (v9 ^ 0x5CEF1BCEFFB5BBDFLL) - 0x5CEF1BCE034E748CLL + (((v8 + 62) ^ 0xB9DE379DFF6B7620) & (2 * v9));
  unint64_t v11 = (a1 ^ 0x6FFDFF67D4DBCCDELL) - 0x6FFDFF66D874858BLL + ((2 * a1) & 0xDFFBFECFA9B799BCLL);
  BOOL v12 = v10 < 0xFC674753;
  BOOL v13 = v10 > v11;
  if (v11 < 0xFC674753 != v12) {
    BOOL v13 = v12;
  }
  return (*(uint64_t (**)(void))(a8 + 8 * ((807 * v13) ^ v8)))();
}

void sub_19E7663CC()
{
}

uint64_t sub_19E7663D8(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t, unint64_t))(a8
                                                                                                  + 8 * (((v8 == a5) * (a4 - 502)) ^ (a4 + 1585))))(a1, 1975089307, -1975089863, STACK[0x428], STACK[0x2A8]);
}

uint64_t sub_19E766424@<X0>(int a1@<W1>, int a2@<W8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,char a27)
{
  *(void *)&long long v30 = 0xC1C1C1C1C1C1C1C1;
  *((void *)&v30 + 1) = 0xC1C1C1C1C1C1C1C1;
  *(_OWORD *)(&a27 + a2 + ((v28 - 1216726313) & 0x4885C75B ^ (a1 + 1265))) = v30;
  return (*(uint64_t (**)(void))(v29 + 8 * ((61 * ((v27 & 0x1FFFFFFF0) == 16)) ^ v28)))();
}

void sub_19E766480(int a1@<W8>)
{
  **(_DWORD **)(v1 - 0x7CF6A079DDC7252CLL) = (((v3 + 68) | 0x200) - 65627574) ^ (v2 - 145282194);
  *(_DWORD *)(v1 - 0x7CF6A079DDC72530) = a1 + 1;
}

uint64_t sub_19E7664CC()
{
  return (*(uint64_t (**)(void))(v0 + 8 * ((v1 - 1360) ^ (v1 - 445))))();
}

void sub_19E766544(uint64_t a1, uint64_t a2)
{
  __asm { BRAA            X9, X17 }
}

uint64_t sub_19E7665C8()
{
  int v4 = v3 + 582195080 + (v2 ^ 0x7FA);
  int v5 = (((v2 - 1767) | 0x400) ^ 0x22B39C9D) + v1;
  BOOL v6 = v5 < -1301468145;
  BOOL v7 = v4 < v5;
  if (v4 < -1301468145 != v6) {
    BOOL v7 = v6;
  }
  return (*(uint64_t (**)(void))(v0 + 8 * ((28 * v7) ^ v2)))();
}

void sub_19E766640()
{
  *uint64_t v0 = 0;
}

uint64_t sub_19E766654()
{
  unsigned int v11 = (v3 + 891) ^ (1001500783
                    * ((((2 * (&v9 ^ 0x56BE5806)) | 0x6D2F2364)
                      - (&v9 ^ 0x56BE5806)
                      + 1231580750) ^ 0xAA9D3600));
  uint64_t v9 = v8;
  unint64_t v10 = &STACK[0x3BF054D022E3310A];
  (*(void (**)(unint64_t **))(v0 + 8 * (v3 + 1749)))(&v9);
  unint64_t v10 = v8;
  LODWORD(v9) = v3 + (((&v9 | 0xC6262F84) - (&v9 & 0xC6262F84)) ^ 0xD7D422CE) * v1 + 955;
  (*(void (**)(unint64_t **))(v0 + 8 * (v3 ^ 0xB56u)))(&v9);
  int v5 = HIDWORD(v9);
  unint64_t v10 = v8;
  HIDWORD(v9) = v3 - (((&v9 | 0x5B4B5379) + (~&v9 | 0xA4B4AC86)) ^ 0x4AB95E32) * v1 + 571;
  (*(void (**)(unint64_t **))(v0 + 8 * (v3 ^ 0xB77u)))(&v9);
  HIDWORD(v9) = v2
              - ((1141554878 - (&v9 | 0x440ABEBE) + (&v9 | 0xBBF54141)) ^ 0xAA074C0B) * v1
              + 567;
  unint64_t v10 = v7;
  (*(void (**)(unint64_t **))(v0 + 8 * (v2 + 1673)))(&v9);
  return v5 ^ v4;
}

uint64_t sub_19E766824()
{
  return (*(uint64_t (**)(void))(v0 + 8 * ((137 * (*off_1EF0E57C8 == 0)) ^ 0x82Fu)))();
}

uint64_t sub_19E76F08C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,int a41)
{
  BOOL v45 = *(unsigned __int8 *)STACK[0x430] == 193 && LODWORD(STACK[0x670]) == a41 && v41 == v42 - 1;
  return (*(uint64_t (**)(void))(a8 + 8 * ((7 * v45) ^ (a4 + 1743))))();
}

uint64_t sub_19E76F0CC(int a1, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *unsigned int v11 = v8 - 1;
  BOOL v12 = &v11[6 * (v8 - 1242597625)];
  int v13 = v12[2];
  STACK[0x430] = *((void *)v12 + 2);
  LODWORD(STACK[0x5BC]) = v12[6];
  return (*(uint64_t (**)(void))(a8
                              + 8
                              * ((51
                                * (((-93 * ((v9 + 118) ^ 0x9E) + 1) ^ (*(_DWORD *)(v10
                                                                                                  + (v13 + a2) * (uint64_t)a3
                                                                                                  + 36) == (((v9 + 114) | 0x20) ^ (a1 - 680)))) & 1)) ^ (v9 + 374))))();
}

uint64_t sub_19E76F198@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(void))(v3 + 8 * ((69 * (a2 + 1 == v2 + 32)) ^ a1)))();
}

uint64_t sub_19E76F724@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,int a62,int a63)
{
  unsigned int v68 = *(_DWORD *)(&a51 + ((v65 + a1) & 0xFFFFFFFC) + 72);
  *(unsigned char *)(v66 + (v65 + a1)) = (v68 >> (((v64 - 83) | 0x12) - 3)) ^ 0x2C;
  *(unsigned char *)(v66 + (v65 + a1 + 1)) = BYTE2(v68) ^ 0xB7;
  *(unsigned char *)(v66 + (v65 + a1 + 2)) = BYTE1(v68) ^ 0x8D;
  *(unsigned char *)(v66 + (v65 + a1 + 3)) = v68 ^ 0xF1;
  BOOL v69 = v65 - 124834175 < (a63 + 1199024634);
  if (v65 - 124834175 < v63 != a63 + 1199024634 < v63) {
    BOOL v69 = a63 + 1199024634 < v63;
  }
  return (*(uint64_t (**)(void))(v67 + 8 * ((56 * v69) ^ v64)))();
}

uint64_t sub_19E76F7E0()
{
  int v5 = (((v0 - ((2 * v0) & 0x16)) << 24) + 184549376) ^ 0xB000000;
  int v6 = (((v4 - ((2 * v4) & 0x126)) << 16) + 798162944) ^ 0x2F930000;
  int v7 = (v5 - ((2 * v5) & 0x50000000) + 676615260) ^ 0x2854545C | (v6 - ((2 * v6) & 0x19920000) + 1288298964) ^ 0x4CC9E1D4;
  unsigned int v8 = (((v2 - ((2 * v2) & 0x1BC)) << 8) - 1562845696) ^ 0xA2D8DE00;
  unsigned int v9 = (v7 - ((2 * v7) & 0x207FFB7C) - 1874854466) ^ 0x903FFDBE | ((v8 + 196110207 + (~(2 * v8) | 0xE89F31FF)) | 1) ^ 0xBB0677F;
  unsigned int v10 = (v9 - ((2 * v9) & 0x3C3F4A98) + 505390412) ^ 0x1E1FA54C | (v3 - ((2 * v3) & 0x84) - 85392318) ^ 0xFAE90442;
  return (*(uint64_t (**)(void))(v1 + 8 * ((52 * (v10 != ((2 * v10) & 0x7AE53B44))) ^ 0x516u)))();
}

void sub_19E76F928(uint64_t a1@<X7>, unint64_t a2@<X8>)
{
  STACK[0x510] = a2;
  STACK[0x588] = STACK[0x428];
  STACK[0x528] = *(void *)(a1 + 8 * v2);
  JUMPOUT(0x19E76F9B4);
}

void sub_19E76F9E4()
{
  *(_DWORD *)(v2 + 8) = v0 + v1;
}

uint64_t sub_19E76FB20()
{
  return (*(uint64_t (**)(void))(v1
                              + 8
                              * (int)(((v0 > ((LODWORD(STACK[0x208]) - 1139004927) | 0xE0u) - 157327077)
                                     * (STACK[0x208] & 0xBC1C2E2E ^ 0x2BD)) ^ (LODWORD(STACK[0x25C]) - 789))))();
}

uint64_t sub_19E76FC98()
{
  int v3 = 328 * (v0 ^ 0x558);
  (*(void (**)(void))(v1 + 8 * (v0 ^ 0xDB7)))();
  *(void *)(*(void *)v2 + 24) = 0;
  return (*(uint64_t (**)(void))(v1
                              + 8
                              * (((*(void *)(*(void *)v2 + 32) != 0) * (((v3 - 800) | 0x140) - 1377)) ^ v3)))();
}

uint64_t sub_19E76FCFC@<X0>(int a1@<W2>, int a2@<W8>)
{
  return (*(uint64_t (**)(void))(v9
                              + 8
                              * (((*(_DWORD *)(v6 + 4 * (a2 + a1 + 2)) != v4)
                                * ((((v2 ^ v5) * v7) ^ v8) + ((v2 - 2073) | v3))) ^ (v2 - 1447))))();
}

uint64_t sub_19E772D18(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v12 = a4 - 485;
  unsigned int v13 = (a4 + 1530773119) & 0xA4C23FFF;
  unint64_t v14 = STACK[0x618] + 0x542A6DEB665DB9E6;
  STACK[0x5E0] = v14;
  int v15 = 1001500783 * (((((v11 - 248) | 0x392DCC52) ^ 0xFFFFFFFE) - (~(v11 - 248) | 0xC6D233AD)) ^ 0x8C66CC19);
  *(_DWORD *)(v11 - 248) = a4 - 167303057 + v15 + 13;
  *(_DWORD *)(v11 - 228) = v15 ^ 0xAFF7E931;
  *(void *)(v11 - 240) = v14;
  (*(void (**)(uint64_t))(a8 + 8 * (a4 + 1798)))(v11 - 248);
  unint64_t v16 = STACK[0x460];
  STACK[0x4C0] = *(void *)(STACK[0x460] + 8 * v12);
  STACK[0x438] = v10;
  STACK[0x680] = v14;
  LODWORD(STACK[0x68C]) = 2077060833;
  int v8 = *(_DWORD *)(v14 - 0x542A6DEB665DB922);
  STACK[0x530] = v10;
  return (*(uint64_t (**)(void))(v16
                              + 8
                              * (int)((682
                                     * (((v13 - 63) & (2 * v8) ^ 0x48)
                                      + (v8 & (v13 - 108) ^ 0x7D7C67D2)
                                      - 1768170528
                                      - 337134597 < 0xFFFFFFC0)) ^ v13)))();
}

uint64_t sub_19E772DF8(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8
                              + 8
                              * ((242
                                * ((((v8 - 847) ^ (((((a4 + v9 + 2052) & 0xFFFFFFFC)
                                                   + 1965963187
                                                   - ((2 * (a4 + v9 + 2052)) & 0xEA5C6F60)) ^ 0x752E37B3) == LODWORD(STACK[0x410]))) & 1) == 0)) ^ v8)))();
}

uint64_t sub_19E772E5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 8 * ((((v8 ^ 0x680) + 3519) * (v9 == v10)) ^ v8)))((v8 ^ 0x680u) + 827);
}

uint64_t sub_19E772E88()
{
  return (*(uint64_t (**)(void))(v1
                              + 8
                              * ((((((v2 & 0xFFFFFFFFFFFFFFFLL) == 0) ^ v0) & 1) * ((v0 - 840) ^ 0x3DA)) ^ v0)))();
}

uint64_t sub_19E772EC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(uint64_t))(a8
                                            + 8
                                            * (((4 * ((v10 - 923003688) < 0x14)) | (((v10 - 923003688) < 0x14) << 6)) ^ v8)))(v9);
}

uint64_t sub_19E772F0C()
{
  int v2 = v1 - ((2 * v1 + 149512938) & 0x29CD240E) + 425411452;
  return (*(uint64_t (**)(void))(v0
                              + 8
                              * ((32 * ((v2 ^ 0xF77C71F8) - 16793690 + ((2 * v2) & 0xC735C7FE ^ 0x105040E) != 1654301605)) | 0x10Bu)))();
}

uint64_t sub_19E772FB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,int a27)
{
  return (*(uint64_t (**)(void))(a8 + 8 * (int)(((a27 & 0xC376BA1E ^ 0x27D) * (v28 == v29)) ^ (v27 - 495))))();
}

uint64_t sub_19E772FEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unint64_t *a14, uint64_t a15, unsigned int a16, int a17, int a18, unsigned int a19)
{
  unsigned int v22 = 1575213817
      * (((&a14 | 0x9B34CED5) - &a14 + (&a14 & 0x64CB3128)) ^ 0x16517E19);
  a18 = (v20 - 871892215) ^ v22;
  a19 = -743139885 - v22;
  a16 = -1853230656 - v22;
  a14 = &STACK[0x698EDBACE60CACBC];
  a15 = a11;
  uint64_t v23 = (*(uint64_t (**)(unint64_t **))(v19 + 8 * (v20 + 1772)))(&a14);
  return (*(uint64_t (**)(uint64_t))(v19 + 8 * (((a17 == v21) * (v20 + 731)) ^ v20)))(v23);
}

uint64_t sub_19E7732F4@<X0>(uint64_t result@<X0>, int a2@<W8>)
{
  *(_DWORD *)(*(void *)(result + 8) - 0x56A724B613D7010DLL) = (a2 ^ 0xD695ED24)
                                                              - ((((v2 - 370) | 0x256)
                                                                + 2 * (a2 ^ 0xD695ED24)
                                                                + 2147397563) & 0x52D425B6)
                                                              + 694774900;
  return result;
}

void sub_19E773340()
{
}

void sub_19E773354()
{
  STACK[0x578] = v1;
  LODWORD(STACK[0x600]) = v0;
  JUMPOUT(0x19E6DFAACLL);
}

uint64_t sub_19E773370(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, int a19)
{
  return (*(uint64_t (**)(void))(v19 + 8 * (((((139 * (v21 ^ 0x4BD)) ^ 0x92) - 321) * (a19 == v20)) ^ v21)))();
}

uint64_t sub_19E7733AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v16 = *(void *)(v14 + 8);
  *(_DWORD *)(v12 - 0xAD0B52F2B779638) = 870648358;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 8 * ((39 * (v16 == 0x7CF6A079DDC72534)) ^ v11)))(a1, a2, a3, a4, a5, a6, a7, a8, a9, v13, a11);
}

void sub_19E7734A0()
{
}

void sub_19E7734B4()
{
}

void sub_19E774048()
{
}

uint64_t sub_19E774154(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  unsigned int v8 = (v4 + 1939122580) & 0x8C6B57F7;
  BOOL v9 = a4 < v5;
  int v10 = v6 + 1;
  if (v9 == v10 + v5 < v5) {
    BOOL v9 = a4 > v10 + v5;
  }
  return (*(uint64_t (**)(void))(v7 + 8 * (int)((((v8 ^ 0xFFFFFD25) + (v8 ^ 0x28F)) * v9) ^ v8)))();
}

uint64_t sub_19E774B50@<X0>(int a1@<W1>, char a2@<W2>, int a3@<W6>, uint64_t a4@<X8>)
{
  int v17 = ((v16 - 80) ^ (v12 - 802) ^ a1 ^ a3 ^ v6) + (v8 ^ v12);
  unsigned int v18 = (v17 ^ 0x7EFF67F8)
      + ((2 * v17) & 0xFDFECFF0)
      - 2130667512
      + (*(_DWORD *)(v7 + 4 * (*(unsigned char *)(a4 + v9 + v13) - 22)) ^ v10);
  unsigned int v19 = (v18 ^ 0xD6D5FEF9) + *(_DWORD *)(v5 + 4 * (v9 + v13)) + ((2 * v18) & 0xADABFDF2);
  unsigned int v20 = (v19 - ((2 * v19 + 14681754) & v14) - 303673475) ^ v12;
  unsigned int v21 = ((v20 << (*(unsigned char *)(v4 + v9 + v13) - 65))
       + 1058154933
       - ((2 * (v20 << (*(unsigned char *)(v4 + v9 + v13) - 65))) & 0x7E24536A)) ^ 0x3F1229B5 | ((v20 >> (a2
                                                                                                - *(unsigned char *)(v4 + v9 + v13)))
                                                                                       - 173170726
                                                                                       - ((2
                                                                                         * (v20 >> (a2
                                                                                                  - *(unsigned char *)(v4 + v9 + v13)))) & 0xEB5B3FB4)) ^ 0xF5AD9FDA;
  unsigned int v22 = (a1 ^ v12) + (v21 ^ 0x5BDEDFBB) + ((2 * v21) & 0xB7BDBF76) - 1541332923;
  return (*(uint64_t (**)(uint64_t, void))(v11 + 8 * ((46 * (v9 + 1 == v15 + 32)) ^ v16)))(2116309866, v22 + v12 - (v14 & (2 * v22)));
}

uint64_t sub_19E774DC4(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, void))(v2
                                                    + 8
                                                    * ((((*(unsigned int *)(v3 - 0x19C7A72C32A62CB7) | ((unint64_t)(*(unsigned int *)(v3 - 0x19C7A72C32A62CB7) < 0x580C5FD8uLL) << 32))
                                                       - 1477205976 == (v1 - 255) - 1200)
                                                      * (v1 - 1347)) ^ v1)))(a1, *(void *)(v3 - 0x19C7A72C32A62CC3));
}

uint64_t sub_19E774E3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  return (*(uint64_t (**)(void))(v9
                              + 8
                              * (((*(_DWORD *)(v7 + v8 * (uint64_t)v10 + 32) == a7 + 5 * (v11 ^ 0x2E3) - 2150)
                                * (((v11 - 1838455138) & 0x6D9497BD) - 224)) ^ v11)))();
}

uint64_t sub_19E774E90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13)
{
  return (*(uint64_t (**)(void))(v14
                              + 8
                              * ((982
                                * (a13 + 306315393 >= ((19 * (v13 ^ 0x191) + 1895192210) & 0x8F09A1CF) + 2147483449)) ^ v13)))();
}

void sub_19E774F04(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(v1 + 16) = 694817499;
}

uint64_t sub_19E774F14@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6, uint64_t a7, int a8)
{
  int v13 = ((&a4 - 1426514593 - 2 * ((unint64_t)&a4 & 0xAAF91D5F)) ^ 0x8169B788) * a1;
  a8 = v13 - 575543967;
  a7 = v9;
  a4 = (v12 + 346) ^ v13;
  a6 = v11 - v13 - 604184426;
  a5 = v8;
  uint64_t v14 = (*(uint64_t (**)(int *))(v10 + 8 * (v12 + 1832)))(&a4);
  return (*(uint64_t (**)(uint64_t))(v10
                                            + 8
                                            * (int)(((*(_DWORD *)(v9 - 0x19C7A72C32A62CABLL) == (v12 ^ 0xAAF)
                                                                                              + 694815313)
                                                   * (((v12 + 1771067570) & 0x966FADBA) - 1908)) ^ v12)))(v14);
}

void sub_19E774FF0(uint64_t a1@<X8>, uint64_t a2, int a3, int a4)
{
  int v8 = 1431787901 * ((&a2 - 1214946116 - 2 * ((unint64_t)&a2 & 0xB79564BC)) ^ 0x9C05CE6B);
  a3 = (v6 - 133) ^ v8;
  a4 = -479279207 - (v8 + v4) - ((((v6 + 709) | 0x82) ^ 0x5125EE00) & (1974969264 - v7));
  a2 = a1;
  (*(void (**)(uint64_t *))(v5 + 8 * (v6 ^ 0xB12u)))(&a2);
  JUMPOUT(0x19E77508CLL);
}

uint64_t sub_19E7750B4(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, _DWORD *a11)
{
  int v14 = v12 + 632;
  unsigned int v15 = (a4 ^ v13) + a10 + ((v14 + 1140854618) & 0xBBFFEDBB ^ 0x99243205);
  unsigned int v16 = ((2 * v15) & 0xDFFF9B98) + ((v14 - 964) ^ 0xEFFFCE93 ^ v15) - 876115337;
  unsigned int v17 = *a11 + 1673197675;
  int v18 = (v17 < 0xBBC75843) ^ (v16 < 0xBBC75843);
  BOOL v19 = v16 > v17;
  if (v18) {
    BOOL v19 = v16 < 0xBBC75843;
  }
  return (*(uint64_t (**)(void))(v11 + 8 * ((117 * v19) ^ v14)))();
}

uint64_t sub_19E775178@<X0>(uint64_t a1@<X1>, int a2@<W7>, int a3@<W8>)
{
  int v8 = (v5 + 321) | 0x109;
  *(unsigned char *)(a1 + (a3 - 1530971440)) = v6;
  BOOL v9 = v4 > 0x1DB9513B;
  if (v3) {
    BOOL v9 = v3;
  }
  return (*(uint64_t (**)(void))(v7 + 8 * ((v9 * a2) ^ v8)))();
}

void sub_19E7751FC()
{
  STACK[0x4C0] = *(void *)(v0 + 8 * (int)(STACK[0x458] - 480));
  JUMPOUT(0x19E74F440);
}

uint64_t sub_19E775474@<X0>(int a1@<W0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, int a7@<W6>, int a8@<W7>, uint64_t a9@<X8>)
{
  unsigned int v17 = v13 ^ a1 ^ (v11 + v9 + v10 - v12 + a8) ^ 0xFC708A12 ^ ((v11 + v9 + v10 - v12 + a8) >> 30);
  *(_DWORD *)(v16 + 4 * a9 + 4) = a9
                                - ((a7 + 2 * (a9 + ((v17 * a3) ^ a4) + ((v17 * a5) & a6))) & 0xF8E11006)
                                + ((v17 * a3) ^ a4)
                                + ((v17 * a5) & a6)
                                + v14;
  return (*(uint64_t (**)(void))(a2 + 8 * ((((a9 + 1) > 0x26E) * v15) ^ v13)))();
}

uint64_t sub_19E775490@<X0>(int8x16_t *a1@<X8>, int64x2_t a2@<Q1>, int64x2_t a3@<Q2>, int64x2_t a4@<Q3>, int64x2_t a5@<Q4>, int64x2_t a6@<Q5>, int64x2_t a7@<Q6>, int64x2_t a8@<Q7>, int8x16_t a9, int64x2_t a10)
{
  int64x2_t v24 = vdupq_n_s64(v10);
  int64x2_t v25 = vaddq_s64(a6, v24);
  int64x2_t v26 = vaddq_s64(a7, v24);
  int64x2_t v27 = vaddq_s64(a8, v24);
  int64x2_t v28 = vaddq_s64(a5, v24);
  int64x2_t v29 = vaddq_s64(a4, v24);
  int64x2_t v30 = vaddq_s64(a3, v24);
  int64x2_t v31 = vaddq_s64(a2, v24);
  int64x2_t v32 = vaddq_s64(v16, v24);
  int8x16_t v33 = (int8x16_t)vaddq_s64(v28, a10);
  int8x16_t v34 = (int8x16_t)vaddq_s64(v25, a10);
  int8x16_t v35 = (int8x16_t)vaddq_s64(v27, a10);
  int8x16_t v36 = (int8x16_t)vaddq_s64(v26, a10);
  int8x16_t v37 = (int8x16_t)vaddq_s64(v32, a10);
  int8x16_t v38 = (int8x16_t)vaddq_s64(v31, a10);
  int8x16_t v39 = (int8x16_t)vaddq_s64(v30, a10);
  int8x16_t v40 = (int8x16_t)vaddq_s64(v29, a10);
  int64x2_t v41 = (int64x2_t)veorq_s8(v40, v17);
  int64x2_t v42 = v27;
  int64x2_t v43 = v26;
  int64x2_t v44 = v25;
  int64x2_t v45 = v28;
  int64x2_t v46 = v29;
  int64x2_t v47 = v30;
  int64x2_t v48 = v31;
  int64x2_t v49 = v32;
  int64x2_t v50 = (int64x2_t)veorq_s8(v39, v17);
  int64x2_t v51 = (int64x2_t)veorq_s8(v38, v17);
  int64x2_t v52 = (int64x2_t)veorq_s8(v37, v17);
  int64x2_t v53 = (int64x2_t)veorq_s8(v36, v17);
  int64x2_t v54 = (int64x2_t)veorq_s8(v35, v17);
  int64x2_t v55 = (int64x2_t)veorq_s8(v34, v17);
  int64x2_t v56 = (int64x2_t)veorq_s8(v33, v17);
  int64x2_t v57 = (int64x2_t)veorq_s8(vandq_s8((int8x16_t)v41, v18), vandq_s8(v40, v19));
  int64x2_t v58 = (int64x2_t)veorq_s8(vandq_s8((int8x16_t)v50, v18), vandq_s8(v39, v19));
  int64x2_t v59 = (int64x2_t)veorq_s8(vandq_s8((int8x16_t)v51, v18), vandq_s8(v38, v19));
  int64x2_t v60 = (int64x2_t)veorq_s8(vandq_s8((int8x16_t)v52, v18), vandq_s8(v37, v19));
  int64x2_t v61 = (int64x2_t)veorq_s8(vandq_s8((int8x16_t)v53, v18), vandq_s8(v36, v19));
  int64x2_t v62 = (int64x2_t)veorq_s8(vandq_s8((int8x16_t)v54, v18), vandq_s8(v35, v19));
  int64x2_t v63 = (int64x2_t)veorq_s8(vandq_s8((int8x16_t)v55, v18), vandq_s8(v34, v19));
  int64x2_t v64 = (int64x2_t)veorq_s8(vandq_s8((int8x16_t)v56, v18), vandq_s8(v33, v19));
  int64x2_t v65 = vsubq_s64(v56, vaddq_s64(v64, v64));
  int64x2_t v66 = vsubq_s64(v55, vaddq_s64(v63, v63));
  int64x2_t v67 = vsubq_s64(v53, vaddq_s64(v61, v61));
  int64x2_t v68 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(v65, v20), (int8x16_t)v20);
  int8x16_t v69 = veorq_s8((int8x16_t)vaddq_s64(v66, v20), (int8x16_t)v20);
  int64x2_t v70 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(vsubq_s64(v54, vaddq_s64(v62, v62)), v20), (int8x16_t)v20);
  int64x2_t v71 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(v67, v20), (int8x16_t)v20);
  int8x16_t v72 = veorq_s8((int8x16_t)vaddq_s64(vsubq_s64(v52, vaddq_s64(v60, v60)), v20), (int8x16_t)v20);
  int8x16_t v73 = veorq_s8((int8x16_t)vaddq_s64(vsubq_s64(v51, vaddq_s64(v59, v59)), v20), (int8x16_t)v20);
  int64x2_t v74 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(vsubq_s64(v50, vaddq_s64(v58, v58)), v20), (int8x16_t)v20);
  int8x16_t v75 = veorq_s8((int8x16_t)vaddq_s64(vsubq_s64(v41, vaddq_s64(v57, v57)), v20), (int8x16_t)v20);
  int64x2_t v76 = vaddq_s64(v46, v21);
  v76.i64[0] *= v75.i64[0];
  v76.i64[1] *= v75.i64[1];
  int64x2_t v77 = vaddq_s64(v47, v21);
  v74.i64[0] *= v77.i64[0];
  v74.i64[1] *= v77.i64[1];
  int64x2_t v78 = vaddq_s64(v48, v21);
  v60.i64[0] = v73.i64[0] * v78.i64[0];
  v60.i64[1] = v73.i64[1] * v78.i64[1];
  int64x2_t v79 = vaddq_s64(v49, v21);
  v79.i64[0] *= v72.i64[0];
  v79.i64[1] *= v72.i64[1];
  int64x2_t v80 = vaddq_s64(v43, v21);
  v71.i64[0] *= v80.i64[0];
  v71.i64[1] *= v80.i64[1];
  int64x2_t v81 = vaddq_s64(v42, v21);
  v70.i64[0] *= v81.i64[0];
  v70.i64[1] *= v81.i64[1];
  int64x2_t v82 = vaddq_s64(v44, v21);
  v82.i64[0] *= v69.i64[0];
  v82.i64[1] *= v69.i64[1];
  int64x2_t v83 = vaddq_s64(v45, v21);
  v68.i64[0] *= v83.i64[0];
  v68.i64[1] *= v83.i64[1];
  v86.val[1] = (int8x16_t)vaddq_s64(vsubq_s64(v71, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v71, v71), v22)), v23);
  v86.val[0] = (int8x16_t)vaddq_s64(vsubq_s64(v70, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v70, v70), v22)), v23);
  v86.val[2] = (int8x16_t)vaddq_s64(vsubq_s64(v82, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v82, v82), v22)), v23);
  v86.val[3] = (int8x16_t)vaddq_s64(vsubq_s64(v68, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v68, v68), v22)), v23);
  v70.i64[0] = vqtbl4q_s8(v86, a9).u64[0];
  v87.val[0] = (int8x16_t)vaddq_s64(vsubq_s64(v76, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v76, v76), v22)), v23);
  v87.val[1] = (int8x16_t)vaddq_s64(vsubq_s64(v74, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v74, v74), v22)), v23);
  v87.val[2] = (int8x16_t)vaddq_s64(vsubq_s64(v60, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v60, v60), v22)), v23);
  v87.val[3] = (int8x16_t)vaddq_s64(vsubq_s64(v79, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v79, v79), v22)), v23);
  v70.i64[1] = vqtbl4q_s8(v87, a9).u64[0];
  v79.i64[0] = 0xD9D9D9D9D9D9D9D9;
  v79.i64[1] = 0xD9D9D9D9D9D9D9D9;
  v42.i64[0] = 0xE0E0E0E0E0E0E0E0;
  v42.i64[1] = 0xE0E0E0E0E0E0E0E0;
  int8x16_t v84 = vrev64q_s8(veorq_s8(vaddq_s8((int8x16_t)v70, (int8x16_t)v79), (int8x16_t)v42));
  *a1 = vextq_s8(v84, v84, 8uLL);
  return (*(uint64_t (**)(void))(v14 + 8 * (((v13 + 16 == v11) * v12) ^ v15)))();
}

uint64_t sub_19E7754BC(uint64_t a1, uint64_t a2, int a3)
{
  return (*(uint64_t (**)(void))(v5 + 8 * (((((a3 - 695435178) & 0x29737FFF ^ 0x3D0) + a3 + 73) * (v3 == v4)) ^ a3)))();
}

void sub_19E775500()
{
}

uint64_t sub_19E775528@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(v8
                              + 8
                              * ((1159
                                * (*(_DWORD *)(*(void *)(a6 - 0x7CF6A079DDC7252CLL)
                                             + 4 * (v9 + v7 + ((a1 - 87) | 0x231u) - 766)) == v6)) ^ ((a1 - 87) | 0x231))))();
}

uint64_t sub_19E775584(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  LODWORD(STACK[0x600]) = -694859468;
  return sub_19E72CC18(a1, a2, a3, a4);
}

void sub_19E7757C0()
{
}

void sub_19E7757FC()
{
}

uint64_t sub_19E77599C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 8 * (((v7 - 210 + ((v7 - 229) | 0x542) + 897) * (a6 == v6)) ^ v7)))(a1, a2, 3730703186, a3, a4, 3730703159, a5, 193);
}

void sub_19E7759E4()
{
}

uint64_t sub_19E7759F8()
{
  return (*(uint64_t (**)(void))(v0
                              + 8
                              * ((111 * (((((v1 ^ 0x667) - 133) | 0x86) ^ (v2 + 1157)) + v3 > 0x7FFFFFFE)) ^ ((v1 ^ 0x667) - 1226))))();
}

uint64_t sub_19E776110()
{
  int v6 = (v0 - 1924430744) & 0x72B47DFD;
  *int v1 = v1[623];
  *(void *)(v5 - 168) = STACK[0x248];
  *(void *)(v5 - 152) = (v4 - 604704058) ^ v2;
  int v7 = (v6 + 719269720) ^ v2;
  *(_DWORD *)(v5 - 160) = v7 ^ 0x7C;
  *(_DWORD *)(v5 - 184) = v7;
  *(_DWORD *)(v5 - 180) = 2092385979 - v2 + v6;
  *(_DWORD *)(v5 - 192) = -(int)v2;
  *(_DWORD *)(v5 - 188) = (v6 + 719269713) ^ v2;
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(v3 + 8 * (v6 ^ 0xCD1)))(v5 - 192);
  return (*(uint64_t (**)(uint64_t))(v3 + 8 * *(int *)(v5 - 176)))(v8);
}

uint64_t sub_19E7761C0@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(void))(v3
                              + 8
                              * (((v2 + a1 - 133 < ((139 * (v1 ^ 0x29B)) ^ 0x7FFFFDCAu)) * ((v1 ^ 0x29B) + 40)) ^ v1)))();
}

uint64_t sub_19E776208(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  return (*(uint64_t (**)(void))(v6 + 8 * ((((v5 ^ 0x212) + ((v5 - 1778774308) & 0x6A05F1BC) - 885) * (v4 == a4)) ^ v5)))();
}

uint64_t sub_19E77624C(int8x8_t a1, int8x8_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned int a10)
{
  uint64_t v16 = v11 + 8;
  uint64_t v17 = v10 + v16 + ((v12 - 1241) | a10);
  *(int8x8_t *)(a4 + v17) = vadd_s8(vsub_s8(*(int8x8_t *)(v14 + v17), vand_s8(vadd_s8(*(int8x8_t *)(v14 + v17), *(int8x8_t *)(v14 + v17)), a1)), a2);
  return (*(uint64_t (**)(void))(v15 + 8 * (((v13 != v16) | (4 * (v13 != v16))) ^ v12)))();
}

uint64_t sub_19E776254(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  return (*(uint64_t (**)(void))(v8
                              + 8
                              * ((1844
                                * (((((((2 * v6) ^ 0xB18) - 1897) | 0x514) - 1517) & *(_DWORD *)(v7
                                                                                               + (v10 + a6)
                                                                                               * (uint64_t)v9
                                                                                               + 40)) == 0)) ^ v6)))();
}

uint64_t sub_19E77A714(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,_DWORD *a31)
{
  *a31 = 188855981;
  BOOL v34 = v32 <= 0x7FEF268C && (int)(v32 + 1104243) < 1104244;
  return (*(uint64_t (**)(uint64_t))(v33 + 8 * ((1988 * v34) ^ v31)))(a1);
}

uint64_t sub_19E77A7E0@<X0>(unsigned int a1@<W8>)
{
  uint64_t v5 = (*(uint64_t (**)(void, uint64_t))(v2 + 8 * (v1 ^ 0xFEF)))((*(_DWORD *)(v3 + 24) ^ a1) - 2021182705, 174691538);
  *(void *)(*(void *)v4 + 32) = v5;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v2
                                                                                + 8
                                                                                * ((46
                                                                                  * (((17 * (v1 ^ 0x15)) ^ (v5 == 0)) & 1)) ^ v1)))(v5, v6, v7, v8, v9);
}

void sub_19E77A85C()
{
}

uint64_t sub_19E77A870(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unint64_t *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, unint64_t *a19, unint64_t *a20,unsigned int a21,unint64_t *a22)
{
  a21 = (v23 + 305) ^ (1001500783
                     * ((2 * (&a19 & 0x6C2CEA08) - &a19 + 332600818) ^ 0x5967EA46));
  a19 = a14;
  a20 = &STACK[0x3BF054D022E331E2];
  (*(void (**)(unint64_t **))(v22 + 8 * (v23 + 1163)))(&a19);
  a21 = v23
      + 511487701 * ((1954754918 - (&a19 | 0x74833166) + (&a19 | 0x8B7CCE99)) ^ 0x9315BA51)
      - 705638016;
  a22 = &STACK[0x5B59BD67F1E3CE53];
  a19 = &STACK[0x519E2D9B46F0E3DC];
  a20 = a14;
  (*(void (**)(unint64_t **))(v22 + 8 * (v23 + 1222)))(&a19);
  a21 = (v23 + 305) ^ (1001500783
                     * (((&a19 | 0x592A3FCA) - (&a19 & 0x592A3FCA)) ^ 0x139EC07E));
  a19 = a14;
  a20 = &STACK[0x3BF054D022E331FA];
  (*(void (**)(unint64_t **))(v22 + 8 * (v23 ^ 0xDF5)))(&a19);
  a20 = a14;
  LODWORD(a19) = v23
               + 291962093 * ((((2 * &a19) | 0xEE62F0D6) - &a19 - 1999730795) ^ 0x66C37521)
               + 369;
  uint64_t v24 = (*(uint64_t (**)(unint64_t **))(v22 + 8 * (v23 ^ 0xD9C)))(&a19);
  return (*(uint64_t (**)(uint64_t))(v22 + 8 * (((HIDWORD(a19) == 694817499) * (v23 - 644)) ^ v23)))(v24);
}

uint64_t sub_19E77AA7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 8 * ((29 * (v8 + 1 != ((v9 - 1714) ^ 0x211u) + 0x595A8284BE56D0F4)) ^ v9)))();
}

uint64_t sub_19E77AAC4(int a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(_OWORD *)(v9 + a2) = *v10;
  return (*(uint64_t (**)(void))(a8 + 8 * (((a3 == 0) * a1) ^ v8)))();
}

uint64_t sub_19E77AAF0(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  HIDWORD(v10) = a5;
  LODWORD(v10) = a5 ^ v8;
  return (*(uint64_t (**)(void))(v7 + 8 * ((1790 * (v9 + 1 == v5 + 44)) ^ a3)))((v10 >> 2)
                                                                                            + v8 - (v6 & (2 * (v10 >> 2))));
}

uint64_t sub_19E77AC88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 8 * (((*(_DWORD *)(v9 + 1424) != 1647527591) * ((v8 - 278) ^ 0x356)) ^ v8)))();
}

uint64_t sub_19E77AED0()
{
  return (*(uint64_t (**)(void))(v0 + 8 * ((13 * (v1 >= v2 - 1992444763)) ^ (v2 + 98858674))))();
}

uint64_t sub_19E77AF18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  BOOL v11 = v8 < 0xA6E4A7F1;
  unint64_t v12 = v9 - 0x4BA11E19C5325469 + (v10 ^ 0x71Du) - 450;
  int v13 = v11 ^ (v12 < 0xA6E4A7F1);
  BOOL v14 = v12 < v8;
  if (!v13) {
    BOOL v11 = v14;
  }
  return (*(uint64_t (**)(void))(a8 + 8 * (((8 * v11) | (32 * v11)) ^ v10)))();
}

void sub_19E77AF80()
{
}

uint64_t sub_19E77AF88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  LODWORD(STACK[0x580]) = v9;
  STACK[0x478] = *(void *)(a8 + 8 * v10);
  return sub_19E6E36E4(a1, a2, a3, STACK[0x458], STACK[0x2A8], -622028704, 3892314112, a8, a9);
}

uint64_t sub_19E77B010@<X0>(uint64_t a1@<X7>, int a2@<W8>)
{
  return (*(uint64_t (**)(void))(a1 + 8 * ((((*v2 - 1242597624) < 0x10) * ((a2 + 230) ^ 0x224)) ^ a2)))();
}

uint64_t sub_19E77B058@<X0>(int a1@<W8>)
{
  if ((a1 + 1558073824) <= 0x18 && ((1 << (a1 - 32)) & 0x1000581) != 0) {
    return (*(uint64_t (**)(void))(v2
  }
                                + 8
                                * ((42 * ((((v1 - 116) | 0x80) ^ 0x6F) != 244)) ^ (v1 + 877696331))))();
  else {
    return (*(uint64_t (**)(void))(v2
  }
                                + 8
                                * ((42 * ((((v1 + v3 - 27) | 0x80) ^ 0x6F) != 243)) ^ (v1 + v3 + 932))))();
}

uint64_t sub_19E77B0E0@<X0>(uint64_t a1@<X0>, char a2@<W3>, int a3@<W8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,int a40)
{
  uint64_t v44 = (v42 + a3);
  int v45 = *(_DWORD *)(&a28 + v44 + 72);
  *(unsigned char *)(a1 + v44) = (a2 + v41 + 13) ^ HIBYTE(v45);
  *(unsigned char *)(a1 + (v44 + 1)) = BYTE2(v45) ^ 0xB7;
  *(unsigned char *)(a1 + (v44 + 2)) = BYTE1(v45) ^ 0x8D;
  *(unsigned char *)(a1 + (v44 + 3)) = v45 ^ 0xF1;
  BOOL v46 = v42 - 460607402 < (a40 + 480569938);
  if (v42 - 460607402 < v40 != a40 + 480569938 < v40) {
    BOOL v46 = a40 + 480569938 < v40;
  }
  return (*(uint64_t (**)(void))(v43 + 8 * ((2655 * v46) ^ v41)))();
}

void sub_19E77B18C()
{
  *(_DWORD *)(v0 + 24) = -694859518;
}

uint64_t sub_19E77B450(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8 * (((v3 > 0x6A5ABA76) * (v4 - 98859569)) ^ (v4 - 98859241))))();
}

uint64_t sub_19E77B498(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,int a52,unsigned __int8 a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  int v72 = a53 ^ 0x3E;
  if (v72 == 232) {
    return (*(uint64_t (**)(void))(v71 + 8 * ((56 * (a71 != 166534360)) ^ (a2 + 321))))();
  }
  if (v72 != 235) {
    JUMPOUT(0x19E77B69CLL);
  }
  return (*(uint64_t (**)(uint64_t))(v71 + 8 * ((1790 * (a71 != (a2 ^ 0x147) + 166534012)) ^ (a2 + 321))))(a13);
}

uint64_t sub_19E77B95C@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14)
{
  BOOL v19 = a1 != v17 && a14 - v16 == (((v14 + 392) | 0x4A) ^ 0xB49B7CC3);
  return (*(uint64_t (**)(void))(v15 + 8 * ((v19 * (v14 ^ 0x28D)) ^ v14)))();
}

uint64_t sub_19E77B9AC@<X0>(int a1@<W8>)
{
  int v5 = a1 - 622312699;
  v7[0] = a1
        - 1305237457 * ((((2 * v7) | 0x95E2119E) - v7 - 1257310415) ^ 0xF348AE01)
        + 145037104;
  uint64_t result = (*(uint64_t (**)(_DWORD *))(v3 + 8 * (a1 ^ 0xD54)))(v7);
  **(_DWORD **)(v1 + 8 * (v5 ^ (v4 + 1242))) = v2;
  return result;
}

uint64_t sub_19E77BC6C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 8 * (((((v7 ^ 0x13A) + 427) ^ 0x4C6) * (a6 == v6)) ^ v7)))(3917121098, a1, 1986, a2, a3, a4, a5, 1013);
}

uint64_t sub_19E77BF78()
{
  return (*(uint64_t (**)(void))(v0 + 8 * ((v3 - 98858348) | (659 * (v2 > v1 + 623)))))();
}

uint64_t sub_19E77BFAC()
{
  return sub_19E77BFD4();
}

uint64_t sub_19E77BFD4@<X0>(uint64_t a1@<X7>, uint64_t a2@<X8>)
{
  unsigned int v5 = *(unsigned __int8 *)(a2 + v3 - 0x595A8284BE56D30CLL);
  if (v5 >= 0x76) {
    int v6 = 0;
  }
  else {
    int v6 = -256;
  }
  return (*(uint64_t (**)(void))(a1
                              + 8
                              * ((835
                                * (v6
                                 - v5
                                 + (*(unsigned __int8 *)(v2 + v3 - 0x595A8284BE56D30CLL) ^ 0x74D6DF5A)
                                 + ((2 * (*(unsigned __int8 *)(v2 + v3 - 0x595A8284BE56D30CLL) ^ 0xC1)) & 0x136) == ((v4 + 1714) ^ 0x4C3) + 1960238329)) ^ v4)))();
}

uint64_t sub_19E77C110(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __n128 v6 = (__n128)vld1q_dup_f32(v5);
  v7.n128_u64[0] = 0x8000000080000000;
  v7.n128_u64[1] = 0x8000000080000000;
  return sub_19E87F174(a1, a2, a3, 540407989, a5, 2124706582, v6, v7, (__n128)vdupq_n_s32(0x893B909A), (__n128)vdupq_n_s32(0x2052846Eu), (__n128)vdupq_n_s32(0x7FFFFFFEu), (__n128)vdupq_n_s32(0x1470CB03u), (__n128)vdupq_n_s32(0x7EA47316u), (__n128)vdupq_n_s32(0x6A843014u));
}

uint64_t sub_19E77C11C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, int a8)
{
  int v17 = *(unsigned __int8 *)(*v16 + (v8 + a8)) ^ v15;
  unsigned int v18 = (((v17 - ((2 * v17) & 0xFFFFFFF3)) << 24) - 117440512) ^ 0xF9000000;
  int v19 = *(unsigned __int8 *)(*v16 + (v8 + a8 + 1)) ^ v15;
  int v20 = (((v19 - ((2 * v19) & 0x1AC)) << 16) + 768999424) ^ 0x2DD60000;
  unsigned int v21 = (v20 + 165382965 - ((2 * v20) & 0x13B60000)) ^ 0x9DB8B35 | (v18 + v12 - ((2 * v18) & 0xE3FFFFFF)) ^ v12;
  int v22 = *(unsigned __int8 *)(*v16 + (v8 + a8 + 2)) ^ v15;
  int v23 = (v11 + ((v22 - ((2 * v22) & 0x7A)) << 8)) ^ v11;
  unsigned int v24 = (v21 + v10 - ((2 * v21) & 0xE270DE92)) ^ v10 | (v23 + 1499223852 - ((2 * v23) & 0x32B8AE00)) ^ 0x595C572C;
  int v25 = *(unsigned __int8 *)(*v16 + (v8 + a8 + 3)) ^ v15;
  unsigned int v26 = (v24 + 1127416329 - ((2 * v24) & 0x86660412)) ^ 0x43330209 | (v25 + a6 - ((2 * v25) & 0x1E0)) ^ a6;
  return (*(uint64_t (**)(uint64_t, void, void))(v14 + 8 * v9))(a1, (2 * v26) & 0x52D425B6, v26 + v13 - ((2 * v26) & 0x52D425B6));
}

uint64_t sub_19E77C124(double a1, int8x16_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,int8x16_t a55,int32x4_t a56,int8x16_t a57,int8x16_t a58,int8x16_t a59,int8x16_t a60,int8x16_t a61,int8x16_t a62,int32x4_t a63)
{
  int8x16_t v68 = (int8x16_t)vld1q_dup_f32((const float *)v64);
  v69.i64[0] = 0x8000000080000000;
  v69.i64[1] = 0x8000000080000000;
  uint64_t v70 = (v65 + 283667504) & 0xEF1791DC;
  a2.i64[0] = *(void *)(v64 + 4);
  a2.i32[2] = *(_DWORD *)(v64 + 4 * (v70 - 281));
  int8x16_t v71 = vextq_s8(v68, a2, 0xCuLL);
  int8x16_t v72 = a2;
  v72.i32[3] = *(_DWORD *)(v64 + 16);
  int8x16_t v73 = vandq_s8((int8x16_t)vaddq_s32((int32x4_t)vorrq_s8(v71, a64), a63), v69);
  int32x4_t v74 = (int32x4_t)veorq_s8(vandq_s8(v72, a62), a61);
  int32x4_t v75 = (int32x4_t)veorq_s8((int8x16_t)vsubq_s32(vaddq_s32(v74, (int32x4_t)veorq_s8(vandq_s8(v72, a60), a59)), (int32x4_t)vandq_s8((int8x16_t)v74, a60)), a58);
  v76.i32[0] = *(_DWORD *)(v66 + 4 * ((*(_DWORD *)(v64 + 4) & 1) == 0));
  v76.i32[1] = *(_DWORD *)(v66 + 4 * (~*(_DWORD *)(v64 + 8) & 1));
  v76.i32[2] = *(_DWORD *)(v66 + 4 * (~*(_DWORD *)(v64 + 4 * (v70 - 281)) & 1));
  v76.i32[3] = *(_DWORD *)(v66 + 4 * (~v72.i32[3] & 1));
  *(int8x16_t *)uint64_t v64 = veorq_s8(veorq_s8(veorq_s8(*(int8x16_t *)(v64 + 1588), v76), a55), (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vsubq_s32((int32x4_t)vorrq_s8((int8x16_t)v75, v73), (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v75, v75), a57)), a56), 1uLL));
  return (*(uint64_t (**)(void))(v67 + 8 * (v65 + 972)))();
}

uint64_t sub_19E77C130()
{
  return (*(uint64_t (**)(void))(v3 + 8 * ((((v2 ^ 0x149) + 1202) * (v0 == v1)) ^ v2)))();
}

void sub_19E7828D4()
{
  STACK[0x508] = *(void *)(v0 + 8 * (int)(STACK[0x458] - 538));
  JUMPOUT(0x19E7541ECLL);
}

uint64_t sub_19E782A00()
{
  return (*(uint64_t (**)(void))(v0 + 8
                                   * (int)((29 * (v1 > LODWORD(STACK[0x41C]) - 779748180)) ^ (STACK[0x458] + 1236))))();
}

void sub_19E782B60()
{
}

uint64_t sub_19E782DAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  v6.n128_u64[0] = 0xC1C1C1C1C1C1C1C1;
  v6.n128_u64[1] = 0xC1C1C1C1C1C1C1C1;
  return sub_19E782DD0(a1, a6 ^ 0x6F5u, 0, (a6 - 1134), a6 ^ 0x7ECu, 1568, v6);
}

uint64_t sub_19E782DD0(uint64_t a1, int8x16_t a2, uint64_t a3, int a4, int a5, int a6, int a7)
{
  uint64_t v12 = (v9 + v8 - a4);
  int8x16_t v13 = *(int8x16_t *)(v7 + v12 - 15);
  int8x16_t v14 = *(int8x16_t *)(v7 + v12 - 31);
  uint64_t v15 = a1 + v12;
  *(int8x16_t *)(v15 - 15) = veorq_s8(v13, a2);
  *(int8x16_t *)(v15 - 31) = veorq_s8(v14, a2);
  return (*(uint64_t (**)(void))(v11 + 8 * (((a6 + a4 == v10) * a7) ^ a5)))();
}

void sub_19E782E18()
{
}

void sub_19E782E8C()
{
}

uint64_t sub_19E782F20@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * (int)(((((a1 == v3) ^ v1) & 1)
                                     * (((v1 + 545803602) & 0xDF77B47F) - 1111)) | v1)))();
}

uint64_t sub_19E782F68@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(void))(v3 + 8 * (((((v1 == a1) ^ (v2 + 5)) & 1) * (v2 - 1830)) ^ v2)))();
}

uint64_t sub_19E782F94@<X0>(int a1@<W0>, uint64_t a2@<X1>, int a3@<W3>, int a4@<W4>, int a5@<W5>, int a6@<W6>, int a7@<W7>, uint64_t a8@<X8>)
{
  unsigned int v16 = (v10 + v8 + v9 - v11 + a7) ^ 0xFC708800 ^ ((v10 + v8 + v9 - v11 + a7) >> 30);
  *(_DWORD *)(v15 + 4 * a8 + 4) = a8
                                - ((a6 + 2 * (a8 + ((v16 * (v12 + 346 + a1)) ^ a3) + ((v16 * a4) & a5))) & 0xF8E11006)
                                + ((v16 * (v12 + 346 + a1)) ^ a3)
                                + ((v16 * a4) & a5)
                                + v13;
  return (*(uint64_t (**)(void))(a2 + 8 * ((((a8 + 1) > 0x26E) * v14) ^ v12)))();
}

uint64_t sub_19E782FB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  *(_DWORD *)(v15 - 124) = v14
                         + 873
                         + 291962093 * ((((v15 - 128) | 0xD04CD0A4) - ((v15 - 128) & 0xD04CD0A4)) ^ 0xC1BEDDEE)
                         - 311;
  *(void *)(v15 - 120) = a12;
  *(void *)(v15 - 112) = v13;
  uint64_t v16 = (*(uint64_t (**)(uint64_t))(v12 + 8 * (v14 + 1825)))(v15 - 128);
  return (*(uint64_t (**)(uint64_t))(v12 + 8
                                                  * ((177 * (*(_DWORD *)(v15 - 128) <= 0x3BBF8101u)) ^ (v14 + 873))))(v16);
}

void sub_19E782FD4()
{
}

uint64_t sub_19E78ED94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, int a9@<W8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v30 = v22;
  uint64_t v26 = (a9 - 603) | 8u;
  uint64_t v27 = -16 * ((v26 ^ 0x1A8) & (3 * ((void)&STACK[0x750] + v24)) ^ 2) + 0x6159DA88C40E8E70;
  STACK[0x268] = (unint64_t)&STACK[0x750]
               + v24
               + (v27 ^ 0x1661AC4712812D8FLL)
               + ((2 * v27) & 0xEE70ED9FAD1F47E0 ^ 0xC230A511881D04E0)
               - 0x773876CFD68FA3FFLL;
  STACK[0x208] = a3;
  int64x2_t v28 = *(uint64_t (**)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v25 + 8 * (int)((1517 * (a1 + 1778 == (v26 ^ 0x2A5 ^ a1) + v26 + 595)) ^ v26));
  STACK[0x240] = *(void *)(v23 + 8 * ((int)v26 - 319)) - 4;
  STACK[0x238] = *(void *)(v23 + 8 * (int)(v26 ^ 0x1A1));
  return v28(a1, a2, a3, a4, a5, a6, a7, a8, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, v30, a22);
}

uint64_t sub_19E78F0C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8
                              + 8
                              * (((v9 != ((((v8 - 38) | v10) ^ v12) + (v11 ^ (2 * v8)))) * v13) ^ v8)))();
}

uint64_t sub_19E78F0F8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,char a27)
{
  uint64_t v31 = (v29 - 47);
  *(void *)(&a27 + (((v31 - 318) ^ 0xFFFFFD67) & (a2 + a1 + v27))) = 0xC1C1C1C1C1C1C1C1;
  return (*(uint64_t (**)(char *))(v30 + 8
                                                 * (int)((2003 * (((v31 ^ 0x1FFFFFC2ELL) & v28) - 8 != v27)) ^ v31)))(&a27);
}

uint64_t sub_19E78F158()
{
  uint64_t v6 = *(void *)(v0 + 808);
  *(_DWORD *)(v5 - 144) = (v2 - 1616) ^ (((((2 * (v5 - 152)) | 0x12196278) - (v5 - 152) - 151826748) ^ 0x13B54D81) * v1);
  *(void *)(v4 + 1312) = v6;
  uint64_t result = (*(uint64_t (**)(uint64_t))(v3 + 8 * (v2 + 463)))(v5 - 152);
  *(_DWORD *)(v8 + 40) = -694859076;
  return result;
}

uint64_t sub_19E78F1B4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  unint64_t v12 = a4
      - 0x3F2DEE3696FC3750
      + ((v4 + 1325704528) | ((unint64_t)(v4 + 1325704528 < ((v9 - 168) ^ 0x52E36095u)) << 32))
      + 0x3F2DEE364418D246;
  uint64_t v13 = *(unsigned __int8 *)(v12 + 3);
  uint64_t v14 = *(unsigned __int8 *)(v12 + 4);
  LODWORD(v12) = ((v10 & 0x82C8B517 ^ 0x2C03117) + (v10 & 0x5D374AE8 ^ 0x5D024A49) - 1) ^ 0xE2882515;
  LODWORD(v12) = ((2 * v12) & 0x8AC15894) - v12 - 1163963467;
  unsigned int v15 = v5 + v6;
  *(unsigned char *)(a4 + v15 + 1) = BYTE2(v12) ^ 0x7E;
  *(unsigned char *)(a4 + v15 + 2) = BYTE1(v12) ^ 0xDE;
  *(unsigned char *)(a4 + v15) = BYTE3(v12) ^ 0xCF;
  *(unsigned char *)(a4 + v15 + 3) = v12 ^ 0xE5;
  uint64_t v16 = *v11;
  *(unsigned char *)(*v11 + v15 + 4) = HIBYTE(a3) ^ 0xE8;
  *(unsigned char *)(v16 + v15 + 5) = BYTE2(a3) ^ 0xAB;
  *(unsigned char *)(v16 + v15 + 6) = BYTE1(a3) ^ 0xD3;
  *(unsigned char *)(v16 + v15 + 7) = a3 ^ 0x1A;
  int v17 = ((2 * (a3 ^ v7)) & 0x7FFB5FFA)
      + (a3 ^ v7 ^ 0x3FFDAFFD)
      - ((2 * (((2 * (a3 ^ v7)) & 0x7FFB5FFA) + (a3 ^ v7 ^ 0x3FFDAFFD)) + 303110) & 0x50114A06)
      - 401935098;
  return (*(uint64_t (**)(uint64_t, uint64_t))(v8
                                                     + 8
                                                     * ((v9 - 1385) ^ (388
                                                                     * ((v17 ^ 0x87656ECD)
                                                                      + 1560180158
                                                                      + ((2 * v17) & 0x5EDB979C ^ 0x50110204) != 208421260)))))(v14, v13);
}

uint64_t sub_19E78F3E0(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  return (*(uint64_t (**)(void))(v9
                              + 8
                              * (int)((11
                                     * (*(_DWORD *)(v10 + (int)(v7 + a7 + (v8 ^ 0xB458FE56)) * (uint64_t)a3) == (((v8 ^ 0xB458FE56) - 896721154) & 0x3572DFDD) + 1807640038)) ^ v8 ^ 0xB458FE56)))();
}

void sub_19E78F44C(uint64_t a1@<X8>)
{
  (*(void (**)(void, void, void))(v3 + 8 * (v1 + 1170)))(**(unsigned int **)(a1 + 8 * (v1 - 1121)), *v2, (v1 - 1477207176 + *(_DWORD *)(v4 - 0x19C7A72C32A62CBBLL)));
  JUMPOUT(0x19E78F60CLL);
}

uint64_t sub_19E78F958()
{
  int v2 = (*(uint64_t (**)(void))(v1 + 8 * (v0 ^ 0xED3)))();
  return (*(uint64_t (**)(void))(v1
                              + 8
                              * ((4055
                                * ((((((v0 - 1874) | 0x4A) + 1133) ^ 0xAEBEFB3B) & (2 * v2)) + (v2 ^ 0x575F7FC6) == 1465876422)) ^ v0)))();
}

uint64_t sub_19E78FA28(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6, uint64_t a7)
{
  *(unsigned char *)(*(void *)(a7 + 96) + 1568) = 1;
  return (*(uint64_t (**)(void))(v8
                              + 8
                              * (int)(((*(_DWORD *)(a7 + 72) == a6)
                                     * ((a4 + v7 + 888 + 285348005) & 0xEEFDEB59 ^ (a4 - 330))) ^ (v7 + 888))))();
}

void sub_19E792D54(uint64_t a1)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  int v1 = 545147329 * (((a1 | 0x804201C7) - (a1 & 0x804201C7)) ^ 0x20B6C1AB);
  int v2 = *(_DWORD *)(a1 + 48) + v1;
  uint64_t v3 = *(void *)a1;
  uint64_t v4 = *(void *)(a1 + 32);
  int v5 = *(_DWORD *)(a1 + 24) + v1;
  int v16 = 1595393043;
  int v17 = 263820150;
  unsigned int v18 = &v20;
  int v9 = 1595392980;
  int v10 = 263820150;
  char v11 = &v8;
  uint64_t v12 = 0xFB993765F17C455;
  uint64_t v13 = &v21;
  uint64_t v14 = 0xFB993765F17C455;
  unsigned int v15 = &v19;
  if (v3 | v4) {
    BOOL v6 = v5 == 385758514;
  }
  else {
    BOOL v6 = 1;
  }
  char v7 = v6;
  __asm { BRAA            X10, X17 }
}

uint64_t sub_19E792EB4@<X0>(unsigned int a1@<W0>, int a2@<W1>, int a3@<W8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,char a28)
{
  BOOL v34 = v30 < a1;
  *(&a28 + v28 + ((v29 - 325) | 1u) - 256099620) = *(unsigned char *)(v33 + (a3 + a2))
                                                 - ((2 * *(unsigned char *)(v33 + (a3 + a2))) & 0x83)
                                                 - 63;
  unsigned int v35 = a3 + 1 + v31;
  int v36 = v34 ^ (v35 < a1);
  BOOL v37 = v35 < v30;
  if (!v36) {
    BOOL v34 = v37;
  }
  return (*(uint64_t (**)(void))(v32 + 8 * ((15 * v34) ^ v29)))();
}

uint64_t sub_19E792F34@<X0>(int a1@<W1>, int a2@<W8>)
{
  return (*(uint64_t (**)(void))(v3 + 8 * ((918 * (v2 != ((7 * ((a1 - 787) ^ 0x5DD)) ^ a2))) ^ (a1 - 787))))();
}

uint64_t sub_19E792F78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,int a42,int a43,unsigned int a44,int a45,int a46,int a47,int a48,unsigned __int8 a49,int32x4_t a50,int32x4_t a51,int32x4_t a52,int32x4_t a53)
{
  return sub_19E763248(a7, a7 + v53 + 445, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48,
           a49,
           a50,
           a51,
           a52,
           a53);
}

uint64_t sub_19E792F84()
{
  return (*(uint64_t (**)(void))(v2 + 8 * ((742 * (v1 + 1 == v3 + 4)) ^ v0)))();
}

uint64_t sub_19E797210(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,char a33)
{
  return (*(uint64_t (**)(void))(v36
                              + 8
                              * ((((unint64_t)(&a33 + a21 + v34 + v33 + (a1 ^ 0x54C ^ (v35 - 33))) < 0x10)
                                * ((a1 - 652) ^ 0x43F)) ^ a1)))();
}

uint64_t sub_19E79729C@<X0>(int a1@<W8>)
{
  int v6 = 79 * (v4 ^ 0x1AE);
  BOOL v7 = v1 + (*(unsigned __int8 *)(v3 + 8) ^ v2) + ((2 * *(unsigned __int8 *)(v3 + 8)) & 0x7777) + v6 - 1504 == ((25 * (v6 ^ 0x5DA)) ^ (a1 + 151));
  return (*(uint64_t (**)(void))(v5
                              + 8 * ((979 * ((v7 ^ 0x67) + 2 * v7 == (((v6 + 37) | 1) ^ 0x64))) ^ v6)))();
}

uint64_t sub_19E797344(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 8 * ((875 * (((((4 * v9) ^ 0x1344u) - 1652) & v8) == 0)) ^ v9)))();
}

uint64_t sub_19E79737C(_DWORD *a1)
{
  unsigned int v1 = 511487701 * ((a1 & 0x95E93A0D | ~(a1 | 0x95E93A0D)) ^ 0x727FB13A);
  return (*((uint64_t (**)(void))*(&off_1EF0E5660 + (int)((*a1 + v1) ^ 0x331))
          + (int)(((((a1[4] - v1) ^ 0x296A12DB) - 1 < 0x63) * (((*a1 + v1) ^ 0x1E4) - 445)) ^ (*a1 + v1))
          - 1))();
}

uint64_t sub_19E797410@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(void))(a1 + 8 * ((49 * (v1 == 2072727178)) ^ 0x611u)))();
}

uint64_t sub_19E797658(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,char a33)
{
  BOOL v38 = (unint64_t)(&a33 + a21 + (v35 + v34 + v33 - 1)) < 0x10;
  return (*(uint64_t (**)(void))(v36
                              + 8
                              * (((2 * ((v38 ^ ((((a5 | 0x8A) - 13) & (v37 - 127)) + 1)) & 1)) & 0xFB | (4 * ((v38 ^ ((((a5 | 0x8A) - 13) & (v37 - 127)) + 1)) & 1))) ^ (a5 | 0x8A))))();
}

uint64_t sub_19E7976B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 8 * ((908 * (v9 == v10 + LODWORD(STACK[0x210]) - 1778)) ^ (v8 - 495))))();
}

void sub_19E797930(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  STACK[0x428] = (*(uint64_t (**)(unint64_t, uint64_t))(a4 + 8 * SLODWORD(STACK[0x28C])))(STACK[0x290], 2965982036);
  int v6 = (*(uint64_t (**)(void))(STACK[0x460] + 8 * SLODWORD(STACK[0x288])))();
  *uint64_t v5 = v6 - 59734013 - (((v4 + 755) ^ 0xF8E11519) & (2 * v6));
  JUMPOUT(0x19E7979ECLL);
}

uint64_t sub_19E797A64(__n128 a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(_DWORD *)(v13 + 1424) = 1647527591;
  *(_DWORD *)(v13 + 1428) = 2098131136;
  *(void *)(v13 + 1432) = v10;
  *(void *)(v13 + 1440) = v10;
  *(_DWORD *)(v13 + 1448) = v11;
  *(__n128 *)(v13 + 1452) = a1;
  return (*(uint64_t (**)(void))(a9 + 8 * ((((v9 ^ 0xE9) == 20) * v12) ^ v9)))();
}

uint64_t sub_19E797AC0(uint64_t a1, uint64_t a2, int a3)
{
  int v7 = ((((v3 + 676) | 0x220) ^ 0x600E6C75) - (*(_DWORD *)(v6 + v5 * (uint64_t)a3 + 40) & 1)) ^ 0x284E381C;
  BOOL v8 = v7 - ((2 * v7) & 0x90000002) != -1203744248;
  return (*(uint64_t (**)(void))(v4 + 8 * (v8 | (2 * v8) | v3)))();
}

uint64_t sub_19E797B28@<X0>(int a1@<W2>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(void))(a2 + 8 * ((a1 - 520) | 0x2A)))();
}

uint64_t sub_19E797B9C@<X0>(unsigned int a1@<W0>, int a2@<W5>, uint64_t a3@<X7>, int a4@<W8>)
{
  BOOL v6 = v4 < a1;
  if (v6 == a4 + a2 < a1) {
    BOOL v6 = a4 + a2 < v4;
  }
  return (*(uint64_t (**)(void))(a3 + 8 * (!v6 | v5)))();
}

void sub_19E797C1C()
{
  STACK[0x628] = STACK[0x4D0];
  JUMPOUT(0x19E755FD8);
}

uint64_t sub_19E797C44@<X0>(int a1@<W3>, uint64_t a2@<X4>, int a3@<W8>)
{
  *(unsigned char *)(a2 + (a1 + a3 + 1)) = *(unsigned char *)(v8 + (v4 - 1405836356));
  return (*(uint64_t (**)(void))(v7 + 8 * ((949 * (v6 + v3 + 9 * (v5 ^ 0x58Fu) + 1392 < 4)) ^ v5)))();
}

void sub_19E797C9C()
{
}

uint64_t sub_19E797F74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  STACK[0x6A8] = 0xF7A7B3C46EAF031BLL;
  int v11 = *(_DWORD **)(v9 + 8 * (v8 ^ 0x205u));
  STACK[0x3F8] = (unint64_t)v11;
  LODWORD(STACK[0x59C]) = *v11 - 458213052;
  int v12 = *(unsigned int **)(v9 + 8 * (v8 - 369));
  STACK[0x408] = (unint64_t)v12;
  uint64_t v13 = *v12;
  unint64_t v14 = 653146051
      * ((~((v10 - 248) | 0x96D25526A71DA7C8) + ((v10 - 248) & 0x96D25526A71DA7C8)) ^ 0xC6DA4146F2F6EDD5);
  *(void *)(v10 - 208) = 1672127575 - v14;
  int v15 = (v8 - 1591572244) ^ v14;
  *(_DWORD *)(v10 - 244) = v15;
  *(_DWORD *)(v10 - 240) = v14 + v8 - 373340921;
  *(void *)(v10 - 224) = v13 ^ v14;
  *(_DWORD *)(v10 - 216) = ((v8 - 1591572244) ^ 0x6A) - v14;
  *(_DWORD *)(v10 - 236) = v15 ^ 0x6E;
  *(_DWORD *)(v10 - 232) = v14;
  uint64_t v16 = (*(uint64_t (**)(uint64_t))(a8 + 8 * (v8 ^ 0xB70u)))(v10 - 248);
  return (*(uint64_t (**)(uint64_t))(STACK[0x460] + 8 * *(int *)(v10 - 248)))(v16);
}

uint64_t sub_19E7982A4@<X0>(uint64_t a1@<X7>, uint64_t a2@<X8>)
{
  *(void *)(a2 - 7 + v5 + 335552387 + v4 - v6 + ((v7 - 973) | 0x177u)) = *(void *)(v2
                                                                                     - 7
                                                                                     + v5
                                                                                     + 335552387
                                                                                     + v4
                                                                                     - v6
                                                                                     + ((v7 - 973) | 0x177u));
  return (*(uint64_t (**)(void))(a1 + 8 * ((54 * (v6 - (v3 & 0xFFFFFFF8) == -8)) ^ v7)))();
}

uint64_t sub_19E798308@<X0>(uint64_t a1@<X8>)
{
  unsigned int v6 = STACK[0x3B4];
  int v7 = *(unsigned __int8 *)(v2 + (v3 + v1)) ^ 0xC1;
  int v8 = *(unsigned __int8 *)(v2 + (LODWORD(STACK[0x3B4]) ^ 0x86 ^ (v1 + 541)) + v3) ^ 0xC1;
  int v9 = (((v8 - ((2 * v8) & 0x92)) << 8) + 650791168) ^ 0x26CA4900;
  int v10 = (v9 + 1323551739 - ((2 * v9) & 0x1DC79600)) ^ 0x4EE3CBFB | (v7 + 1299355063 - ((2 * v7) & 0x16E)) ^ 0x4D7295B7;
  int v11 = *(unsigned __int8 *)(v2 + (v3 + v1 + 2)) ^ 0xC1;
  int v12 = (((v11 - ((2 * v11) & 0x1A4)) << 16) + 1053949952) ^ 0x3ED20000;
  int v13 = v12 - 1423300213 - ((2 * v12) & 0x56540000);
  int v14 = *(unsigned __int8 *)(v2 + (v3 + v1 + 3)) ^ 0xC1;
  unsigned int v15 = (((v14 - ((2 * v14) & 0xC8)) << 24) - 469762048) ^ 0xE4000000;
  unsigned int v16 = (v10 + 299072903 - ((2 * v10) & 0x23A6FB0E)) ^ 0x11D37D87 | v13 ^ 0xAB2A298B;
  unsigned int v17 = (v16 - 848241733 - ((2 * v16) & 0x1AE1B776)) ^ 0xCD70DBBB | (v15 - 239656095 - ((2 * v15) & 0xE2000000)) ^ 0xF1B72361;
  *(_DWORD *)(a1 + ((v3 + v1) & 0xFFFFFFFC)) = v17 + v5 - ((2 * v17) & 0x52D425B6);
  return (*(uint64_t (**)(void))(v4 + 8 * ((506 * ((v3 + 4 + v1) < 0x40)) ^ v6)))();
}

uint64_t sub_19E7984A8(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  *(_DWORD *)(a2 + (v6 - a4)) = *(_DWORD *)(v5 + (v6 - a4));
  return (*(uint64_t (**)(void))(v8 + 8 * (((a4 + 4 == v7) * a5) ^ a3)))();
}

uint64_t sub_19E7984D4@<X0>(uint64_t a1@<X7>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(void))(a1
                              + 8
                              * ((86
                                * (((v3 - 60) ^ (v2 - a2 < ((v3 - 1788033088) & 0x6A933CD6 ^ 0x872uLL))) & 1)) ^ v3)))();
}

void sub_19E798548()
{
}

uint64_t sub_19E7985B4()
{
  return (*(uint64_t (**)(void))(v3 + 8 * ((((3 * (v2 ^ 0x417)) ^ ((v2 - 540) | 0x104) ^ 0x64) * (v0 == v1)) ^ v2)))();
}

void sub_19E798604()
{
}

void sub_19E798610()
{
}

uint64_t sub_19E798680()
{
  return (*(uint64_t (**)(void))(v0 + 8 * (((v2 - 1 < 907 * (v1 ^ 0x3E3u) + 2147481831) * ((v1 ^ 0x3E3) + 2025)) ^ v1)))();
}

uint64_t sub_19E7987CC(int a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  return (*(uint64_t (**)(void))(v7
                              + 8
                              * ((26
                                * (((a4 - (v5 & 3) + ((v6 - 466) ^ 0x5C3)) & 0xFFFFFFFC) > a5
                                                                                         + ((v6 - 1524) ^ (a1 + 436)))) ^ (v6 - 466))))();
}

uint64_t sub_19E798948(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8
                              + 8
                              * ((63 * (((v8 ^ 0xBCC ^ ((v8 - 2252) | 0x318) ^ 0xFFFFFFFE) & v9) == 559203754)) ^ v8)))();
}

uint64_t sub_19E798990@<X0>(int a1@<W1>, int a2@<W3>, int a3@<W5>, int a4@<W6>, uint64_t a5@<X7>, uint64_t a6@<X8>)
{
  *(unsigned char *)(a6 + (a1 + a3)) = *(unsigned char *)(v6 + (a1 + a3));
  return (*(uint64_t (**)(void))(a5 + 8 * (((a1 - 1 == a2) * a4) ^ (v7 + 1230))))();
}

uint64_t sub_19E7989C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a8
                                                                                + 8
                                                                                * (int)(((((3
                                                                                          * ((v9 + 559718959) & 0xDEA35BF7 ^ 0x1AC)
                                                                                          - 16) | 0x10)
                                                                                        - 87)
                                                                                       * ((v8 & 0xFFFFFFFE) == 559203754)) ^ (v9 + 559718959) & 0xDEA35BF7)))(a1, a2, a3, a4, v10);
}

void sub_19E798A2C()
{
  *int v1 = v0;
}

uint64_t sub_19E798A50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 8 * ((30 * (STACK[0x590] != 0)) ^ (v8 - 254))))();
}

uint64_t sub_19E798A78(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 8 * ((1621 * (v8 == a1 + v9 - 247 + v9 + 418 - 2057)) ^ v9)))();
}

uint64_t sub_19E798AB4@<X0>(int a1@<W2>, uint64_t a2@<X4>, int a3@<W8>)
{
  return (*(uint64_t (**)(void))(v5
                              + 8
                              * ((781
                                * (v3
                                 + ((2 * *(unsigned __int8 *)(a2 + 5)) & 0x7777)
                                 + ((a1 + 277) ^ (v4 - 316) ^ *(unsigned __int8 *)(a2 + 5))
                                 - 12 == a3)) ^ a1)))();
}

uint64_t sub_19E798AFC(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((v9 + v8 - 2105305077) <= 0x40) {
    int v11 = 64;
  }
  else {
    int v11 = v9 + v8 - 2105305077;
  }
  return (*(uint64_t (**)(void))(a8
                                           + 8 * ((v10 + 1579) ^ (51 * ((a1 - v8 - v9 + v11) > 0xE)))))((v10 - 1036361966) & 0x3DC5A3D3);
}

uint64_t sub_19E798BA8(int a1)
{
  return (*(uint64_t (**)(void))(v2 + 8 * ((770 * (v1 + 1 == v3 + 24)) ^ a1)))();
}

void sub_19E798CF0()
{
  STACK[0x4C0] = *(void *)(v0 + 8 * (int)(STACK[0x458] - 481));
  JUMPOUT(0x19E74F440);
}

void sub_19E798D1C()
{
}

uint64_t sub_19E798EBC(uint64_t a1)
{
  return sub_19E798EC8(a1, STACK[0x5F8], LODWORD(STACK[0x488]));
}

uint64_t sub_19E798EC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v7 = (v4 + 747044250) & 0xD37902EC;
  (*(void (**)(void))(a4 + 8 * (v4 + 1949)))(*(unsigned int *)STACK[0x2B8]);
  unint64_t v8 = STACK[0x460];
  uint64_t v9 = LODWORD(STACK[0x600]);
  unint64_t v10 = 653146051 * (v5 ^ 0xAFF7EB9FAA14B5E2);
  *(_DWORD *)(v6 - 216) = ((v7 - 696015249) ^ 0x9B) - v10;
  *(_DWORD *)(v6 - 236) = (v7 - 696015311) ^ v10;
  *(_DWORD *)(v6 - 232) = v10;
  *(_DWORD *)(v6 - 244) = (v7 - 696015249) ^ v10;
  *(_DWORD *)(v6 - 240) = v10 + v7 - 373340921;
  *(void *)(v6 - 208) = v9 - v10;
  *(void *)(v6 - 224) = v10 ^ 0xD6954901;
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(v8 + 8 * (int)(v7 ^ 0xB70)))(v6 - 248);
  return (*(uint64_t (**)(uint64_t))(STACK[0x460] + 8 * *(int *)(v6 - 248)))(v11);
}

uint64_t sub_19E798FC0(uint64_t a1, uint64_t a2, int a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(v4
                                                             + 8
                                                             * ((((((((a3 - 352) | 0x510) - 1946) ^ (v3 < 0x20)) & 1) == 0)
                                                               * (((a3 - 352) | 0x510) ^ 0x7A3)) ^ ((a3 - 352) | 0x510))))(a1, a2, ((a3 - 352) | 0x510) ^ 0x397u);
}

uint64_t sub_19E79900C@<X0>(uint64_t a1@<X0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X7>, int a5@<W8>)
{
  unint64_t v10 = v6 - 1;
  STACK[0x4A8] = v10;
  char v11 = ((a2 + ((v5 + a3) ^ v8) - (v9 & (2 * ((v5 + a3) ^ v8))) + 44) ^ ((a5 ^ v7) + a2)) * (v5 + a3 + 17);
  *(unsigned char *)(a1 + v10) = (v11 - ((2 * v11) & 0x44) + 34) ^ 0x22;
  return (*(uint64_t (**)(void))(a4 + 8 * (((STACK[0x4A8] == 0) | (2 * (STACK[0x4A8] == 0))) ^ a5)))();
}

void sub_19E79907C()
{
  LODWORD(STACK[0x51C]) = v0;
  JUMPOUT(0x19E773358);
}

uint64_t sub_19E799084(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8
                              + 8
                              * (((((3 * (v8 ^ 0x1AC) - 16) | 0x10) - 87) * ((v9 & 0xFFFFFFFE) == 559203754)) ^ v8)))();
}

uint64_t sub_19E7A37F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, int a15, uint64_t a16, int a17, int a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,int a53,int a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  return (*(uint64_t (**)(uint64_t))(v70
                                            + 8
                                            * ((38
                                              * (a15
                                               + ((2 * a70) & 0x6E ^ 0x48)
                                               + (a70 & 0x3F ^ 0xE3BE5993)
                                               + 1574957056 >= a18 - 388)) ^ (a54 + 1528))))(3194074354);
}

uint64_t sub_19E7A38BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 8 * ((((v10 ^ 0xD0A) - 1343) * (v8 == v9)) ^ v10)))();
}

uint64_t sub_19E7A38E8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X7>, _OWORD *a4@<X8>)
{
  *(_OWORD *)(v7 + (v4 - 337134550)) = *a4;
  return (*(uint64_t (**)(void, uint64_t, unint64_t))(a3
                                                                      + 8
                                                                      * (((((a2 + (v6 ^ 0xFFFFFFFFFFFFF9FELL) + a1) & 0x1FFFFFFF0) == 16)
                                                                        * ((v5 + 175) ^ 0x89C)) ^ v5)))((v5 + 175) ^ 0x89Cu, v4 + 3957832762, ((a2 + (v6 ^ 0xFFFFFFFFFFFFF9FELL) + a1) & 0x1FFFFFFF0) - 32);
}

void zxcm2Qme0x(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BRAA            X8, X17 }
}

uint64_t sub_19E7A39D8()
{
  return (*(uint64_t (**)(void))(v3 + 8 * (((((v2 - 2151) | 0x260) ^ 0x303) * (v0 == v1)) ^ v2)))();
}

uint64_t sub_19E7A3B10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  return (*(uint64_t (**)(void))(v20
                              + 8
                              * ((1081
                                * (*(_DWORD *)(a18 + 4 * (v21 + v22 + 1)) == ((v19 + 2001495112) & 0x88B39BB3 ^ (v18 + v19 + 202 - 1552)))) ^ (v19 + 203))))();
}

uint64_t sub_19E7A3B6C@<X0>(int a1@<W3>, int a2@<W8>)
{
  return (*(uint64_t (**)(void))(v3 + 8 * (((a2 == a1) * ((v4 + v2 - 311) ^ (v4 + 1453))) ^ v2)))();
}

uint64_t sub_19E7A3B9C@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v387 = v18;
  int v21 = (char *)*(&off_1EF0E5660 + (a1 ^ 0x1D8)) - 8;
  uint64_t v22 = *(unsigned __int8 *)(v17 - 0x6C4003946134F4F8);
  int v23 = v21[*(unsigned __int8 *)(v17 - 0x6C4003946134F501) ^ 0xBELL];
  *(_DWORD *)(v20 - 116) = a1 + 1380;
  unsigned int v24 = (((a1 + 1380) ^ 0xFFEC0750) + (((v23 ^ 0xDB) - ((2 * (v23 ^ 0xDB)) & 0xD8)) << 16) - 58720256) ^ 0xFC6C0000;
  uint64_t v25 = (char *)*(&off_1EF0E5660 + (a1 ^ 0x1B4)) - 4;
  int v26 = v25[v22 ^ 0x3E];
  HIDWORD(v27) = ~v26;
  LODWORD(v27) = (v26 ^ 0xAC) << 24;
  int v28 = (v27 >> 25) - ((2 * (v27 >> 25)) & 0x76) + 59;
  unsigned int v29 = ((((((v27 >> 25) - ((2 * (v27 >> 25)) & 0x76) + 59) ^ 0x83) - ((2 * (v28 ^ 0x83)) & 0x110)) << 8)
       - 818968576) ^ 0xCF2F8800;
  unsigned int v30 = v29 - ((2 * v29) & 0x49C08E00);
  int v31 = v21[*(unsigned __int8 *)(v17 - 0x6C4003946134F4FDLL) ^ 0x94];
  unsigned int v32 = ((((v31 ^ 8) - ((2 * v31) & 0x44444444)) << 16) - 1088290816) ^ 0xBF220000;
  int v33 = (char *)*(&off_1EF0E5660 + (a1 ^ 0x13A)) - 4;
  unsigned int v34 = 71 * ((v33[*(unsigned __int8 *)(v17 - 0x6C4003946134F503) ^ 0x11] ^ 0x60u) / 0x47);
  char v35 = (v33[*(unsigned __int8 *)(v17 - 0x6C4003946134F503) ^ 0x11] ^ 0x60u) % 0x47;
  unsigned int v36 = ((v35 ^ 0xED) + ((2 * v35) & 0xDA) + 87);
  unsigned int v37 = ((v34 ^ 0xE3) + ((2 * v34) & 0xC7) + 63);
  int v38 = v25[*(unsigned __int8 *)(v17 - 0x6C4003946134F504) ^ 4];
  HIDWORD(v27) = ~v38;
  LODWORD(v27) = (v38 ^ 0xAC) << 24;
  unsigned int v39 = ((((((v27 >> 25) - ((2 * (v27 >> 25)) & 0x4C) - 90) ^ 0xA7)
         - ((2 * (((v27 >> 25) - ((2 * (v27 >> 25)) & 0x4C) - 90) ^ 0xA7)) & 0x1FA)) << 8)
       + 1810038016) ^ 0x6BE2FD00;
  int v40 = (v39 - ((2 * v39) & 0x47987C00) + 1674329687) ^ 0x63CC3E57 | ((v36 | ((v36 < 0x44) << 8))
                                                                    + v37
                                                                    + ((v37 < 0x22) << 8)
                                                                    - 102);
  uint64_t v41 = *v16 ^ 0x31;
  int v42 = (char *)*(&off_1EF0E5660 + (a1 ^ 0x134)) - 8;
  LODWORD(v41) = v42[v41];
  HIDWORD(v27) = ~v41;
  LODWORD(v27) = (v41 ^ 0x40) << 24;
  LODWORD(v41) = (v27 >> 27) - ((2 * (v27 >> 27)) & 0x98) - 52;
  unsigned int v43 = (((v41 ^ 4) - ((2 * v41) & 0x12)) << 24) + 234881024;
  unsigned int v44 = (v40 - ((2 * v40) & 0xC3E90118) - 504070004) ^ 0xE1F4808C | (((v43 - 83886080) ^ 0x9000000)
                                                                   - ((2 * ((v43 - 83886080) ^ 0x9000000)) & 0xAAAAAAAA)
                                                                   - 704976056) ^ 0xD5FAEB48;
  uint64_t v45 = v33[*(unsigned __int8 *)(v17 - 0x6C4003946134F4F7) ^ 0xF3];
  int v46 = ((v45 ^ 0xA2) - ((2 * (v45 ^ 0xA2)) & 0xDC) + 1813111918) ^ 0x6C11E46E | (v30 - 455063616) ^ 0xE4E047C0;
  int v47 = v46 - ((2 * v46) & 0x26D6BC46);
  int v48 = v33[*(unsigned __int8 *)(v17 - 0x6C4003946134F4FFLL) ^ 0xE6] ^ 0x44;
  unsigned int v49 = (v48 - ((2 * v48) & 0xFFFFFF87) + 1588799427) ^ 0x5EB327C3 | (v24 - ((2 * v24) & 0x10660000) - 936150951) ^ 0xC8337859;
  int v50 = v42[*(unsigned __int8 *)(v17 - 0x6C4003946134F4FELL) ^ 0x68];
  HIDWORD(v27) = ~v50;
  LODWORD(v27) = (v50 ^ 0x40) << 24;
  int v51 = ((v27 >> 27) - ((2 * (v27 >> 27)) & 0x10) + 8) ^ 0xC9;
  int v52 = ((v51 - ((2 * v51) & 0x50)) << 24) + 671088640;
  unsigned int v53 = ((v52 ^ 0x28000000) - ((2 * v52) & 0x2A000000) - 1791386418) ^ 0x95399CCE | (v32
                                                                                   - ((2 * v32) & 0x5F840000)
                                                                                   + 801292789) ^ 0x2FC2C1F5;
  int v54 = v25[*(unsigned __int8 *)(v17 - 0x6C4003946134F500) ^ 0x9CLL];
  unsigned int v55 = v53 - ((2 * v53) & 0xFD084D1E);
  HIDWORD(v27) = ~v54;
  LODWORD(v27) = (v54 ^ 0xAC) << 24;
  int v56 = ((((((v27 >> 25) - 2 * ((v27 >> 25) & 0x3F) - 65) ^ 0x57)
         - ((2 * (((v27 >> 25) - 2 * ((v27 >> 25) & 0x3F) - 65) ^ 0x57)) & 0x88)) << 8)
       - 1912585216) ^ 0x8E004400;
  LODWORD(v25) = v25[*(unsigned __int8 *)(v17 - 0x6C4003946134F4FCLL) ^ 0xD5];
  int v57 = (v56 - ((2 * v56) & 0x3328C200) + 1502896638) ^ 0x599461FE | (v49 - ((2 * v49) & 0x64B0AAEC) + 1918391670) ^ 0x72585576;
  HIDWORD(v27) = ~v25;
  LODWORD(v27) = (v25 ^ 0xAC) << 24;
  LODWORD(v25) = v57 - ((2 * v57) & 0xA31407B8);
  unsigned int v58 = ((((((v27 >> 25) - ((2 * (v27 >> 25)) & 0xBA) - 35) ^ 0x67)
         - ((2 * (((v27 >> 25) - ((2 * (v27 >> 25)) & 0xBA) - 35) ^ 0x67)) & 0x160)) << 8)
       - 146427904) ^ 0xF745B000;
  int v59 = (v58 - ((2 * v58) & 0x32EF9000) + 1501022270) ^ 0x5977C83E | (v55 + 2122589839) ^ 0x7E84268F;
  LODWORD(v33) = v33[*(unsigned __int8 *)(v17 - 0x6C4003946134F4FBLL) ^ 0xE9] ^ 0xAD;
  LODWORD(v33) = (v59 - ((2 * v59) & 0x7775755E) + 1002093231) ^ 0x3BBABAAF | (v33
                                                                             - ((2 * v33) & 0xFFFFFFF7)
                                                                             + 1111118331) ^ 0x423A51FB;
  int v60 = v42[*(unsigned __int8 *)(v17 - 0x6C4003946134F502) ^ 0x32];
  unsigned int v61 = v33 - ((2 * v33) & 0xCC9DCA78) - 431037124;
  HIDWORD(v27) = ~v60;
  LODWORD(v27) = (v60 ^ 0x40) << 24;
  LODWORD(v22) = ((v27 >> 27) - ((2 * (v27 >> 27)) & 0xCC) - 26) ^ 0xDB;
  LODWORD(v33) = (((v22 - ((2 * v22) & 0xEC)) << 24) - 167772160) ^ 0xF6000000;
  LODWORD(v25) = (v33 - ((2 * v33) & 0x1E000000) + 263254252) ^ 0xFB0F0EC | (v25 + 1367999452) ^ 0x518A03DC;
  LODWORD(v42) = v42[*(unsigned __int8 *)(v17 - 0x6C4003946134F4FALL) ^ 0xD5];
  HIDWORD(v27) = ~v42;
  LODWORD(v27) = (v42 ^ 0x40) << 24;
  LODWORD(v42) = (v27 >> 27) - ((2 * (v27 >> 27)) & 0x70) + 56;
  unsigned int v62 = ((((v42 ^ 0xDD) - ((2 * (v42 ^ 0xDD)) & 0x88888888)) << 24) - 1006632960) ^ 0xC4000000;
  uint64_t v63 = *(unsigned __int8 *)(v17 - 0x6C4003946134F505);
  int v64 = v21[*(unsigned __int8 *)(v17 - 0x6C4003946134F4F9) ^ 0x33] ^ 0xAD;
  unsigned int v65 = v64 + 1891299120 - ((2 * v64) & 0xFFFFFF8F) + 151;
  unsigned int v66 = (v62 - ((2 * v62) & 0x8A000000) - 982788991) ^ 0xC56BD481 | (((v65 << 16) ^ 0xEFC70000)
                                                                   - ((2 * ((v65 << 16) ^ 0xEFC70000)) & 0x12940000)
                                                                   - 1991573956) ^ 0x894AFE3C;
  unsigned int v67 = (v66 - ((2 * v66) & 0xE021FC4A) + 1880161829) ^ 0x7010FE25 | (v47 + 1399545379) ^ 0x536B5E23;
  int v68 = v67 - ((2 * v67) & 0x6B2B42AC) + 898998614;
  LODWORD(v21) = v21[v63 ^ 0x48] ^ 0xED;
  LODWORD(v21) = (((v21 - ((2 * v21) & 0xFFFFFFDF)) << 16) - 85000192) ^ 0xFAEF0000;
  LODWORD(v21) = (v21 - ((2 * v21) & 0x528A0000) + 692409475) ^ 0x29455483 | (v44
                                                                                            - ((2 * v44) & 0x7A2F46D2)
                                                                                            - 1122524311) ^ 0xBD17A369;
  unsigned int v69 = (v21 - ((2 * v21) & 0x81CB9A04) + 1088802050) ^ 0xF23751CF;
  LODWORD(v21) = v65 ^ 0x70BAEF30;
  uint64_t v70 = (char *)*(&off_1EF0E5660 + a1 - 484) - 8;
  LODWORD(v42) = *(_DWORD *)&v70[4 * (v42 ^ 0x53)];
  HIDWORD(v27) = v42 ^ 0xA0;
  LODWORD(v27) = v42 ^ 0xE3ED3400;
  int v71 = v68 ^ 0x2D09FA31;
  LODWORD(v42) = ((v68 ^ 0xB5 | 0xC137B0C4) - (v68 ^ 0xB5 | 0x3EC84F3B) + 1053314875) ^ 0xC33370FD;
  unsigned int v72 = (v42 | 0xFAA387EA) - (v42 | 0x55C7815) + 89946133;
  int8x16_t v73 = (char *)*(&off_1EF0E5660 + a1 - 304) - 4;
  uint64_t v74 = (uint64_t)*(&off_1EF0E5660 + (a1 ^ 0x174));
  LODWORD(v21) = *(_DWORD *)&v73[4 * v21] ^ *(_DWORD *)(v74 + 4 * (v45 ^ 0xB7));
  int32x4_t v75 = (char *)*(&off_1EF0E5660 + a1 - 314) - 8;
  unsigned int v384 = v69;
  int v76 = v21 ^ *(_DWORD *)&v75[4 * (v28 ^ 0x36)] ^ ((v27 >> 8)
                                                                                - 353024740
                                                                                + (~(2 * (v27 >> 8)) | 0x2A1575C9)) ^ v72 ^ 0x65BB685A ^ v69;
  int v385 = v25 - ((2 * v25) & 0x654AEEEA) + 849704821;
  int v381 = v76 ^ v385 ^ v61;
  unsigned int v77 = v381 ^ v71;
  LODWORD(v21) = *(_DWORD *)&v70[4 * (((v381 ^ v71) >> 24) ^ 0xD1)];
  HIDWORD(v27) = v21 ^ 0xA0;
  LODWORD(v27) = v21 ^ 0xE3ED3400;
  int v78 = ((v77 & 0x1A ^ 0x49623E09) + (v77 & 0xE5) - 1) ^ 0x5C623BFD;
  int v383 = v76;
  HIDWORD(v380) = *(_DWORD *)(v74
                            + 4
                            * ((((2 * ((v76 ^ v385 ^ v61 ^ v71) ^ 0x8F)) & 0xD8)
                              - ((v76 ^ v385 ^ v61 ^ v71) ^ 0x8F)
                              + 659) ^ 0x23Au)) ^ *(_DWORD *)&v75[4
                                                                * ((((2 * (BYTE1(v77) ^ 0xD)) | 0xA4D4F8EE)
                                                                  - (BYTE1(v77) ^ 0xD)
                                                                  - 1382710391) ^ 0x526A7CF6)] ^ *(_DWORD *)&v73[4 * (((HIWORD(v77) & 0x9B ^ 0xA034018) + (HIWORD(v77) & 0x64 ^ 0xD4C00241) - 1) ^ 0xDEC3428D)] ^ ((v27 >> 8) - ((2 * (v27 >> 8)) & 0xC9FC76C4) - 453100702) ^ v76 ^ (((2 * v78) & 0xA000134) - v78 - 800301723);
  unsigned int v386 = v61;
  int v79 = HIDWORD(v380) ^ 0x4859B57 ^ v61;
  unsigned int v80 = v79 ^ v381 ^ v71 ^ 0xB724F5F9;
  unsigned int v81 = ((v80 & 0x74 ^ 0x2BFBB061) - (v80 | 0xFFFFFF74) - 2) ^ 0x1EB33850;
  int v82 = *(_DWORD *)&v70[4 * (HIBYTE(v80) ^ 0xFD)];
  HIDWORD(v27) = v82 ^ 0xA0;
  LODWORD(v27) = v82 ^ 0xE3ED3400;
  int v382 = v76 ^ v385;
  HIDWORD(v378) = HIDWORD(v380) ^ 0x4859B57 ^ v76 ^ v385;
  LODWORD(v379) = *(_DWORD *)(v74
                            + 4
                            * ((((2 * (v80 ^ 0xD9)) | 0x839C7340)
                              - (v80 ^ 0xD9)
                              + 1043449440) ^ 0xC1CE39D3)) ^ *(_DWORD *)&v73[4
                                                                           * (((BYTE2(v80) ^ 0xDE)
                                                                             - ((2 * (BYTE2(v80) ^ 0xDE)) & 0xE4)
                                                                             + 1394) ^ 0x5DC)] ^ *(_DWORD *)&v75[4 * (((BYTE1(v80) ^ 0x710098ED | 0x19A07901) - (BYTE1(v80) ^ 0x710098ED | 0xE65F86FE) - 429947138) ^ 0x68A0E1DD)] ^ ((v27 >> 8) - ((2 * (v27 >> 8)) & 0xC912EDD4) + 1686730474) ^ HIDWORD(v380) ^ 0x4859B57 ^ (((2 * v81) & 0x2A802A5C) - v81 - 525817135);
  LODWORD(v378) = v379 ^ 0x1E002790 ^ HIDWORD(v378);
  LODWORD(v380) = v79;
  HIDWORD(v377) = v378 ^ 0xCF46E448 ^ v79;
  unsigned int v83 = HIDWORD(v377) ^ 0xD7BC69AD;
  int v84 = BYTE4(v377) ^ 0xAD ^ v80;
  int v85 = *(_DWORD *)&v70[4 * (((HIDWORD(v377) ^ 0xD7BC69AD ^ v80) >> 24) ^ 0x5B)];
  HIDWORD(v27) = v85 ^ 0xA0;
  LODWORD(v27) = v85 ^ 0xE3ED3400;
  HIDWORD(v376) = *(_DWORD *)&v75[4 * (((unsigned __int16)(v83 ^ v80) >> 8) ^ 0x1F)] ^ *(_DWORD *)(v74 + 4 * (v84 ^ 0x5Cu)) ^ *(_DWORD *)&v73[4 * (((((v83 ^ v80) >> 16) & 9) + 6553599 + (((v83 ^ v80) >> 16) & 0xF6 ^ 0x7D8321B1)) ^ 0x7DE721DC)] ^ v379 ^ 0x1E002790 ^ ((v84 ^ 0x20885857) - ((2 * (v84 ^ 0x20885857)) & 0x400081B6) - 1576942373) ^ ((v27 >> 8) - ((2 * (v27 >> 8)) & 0xFA0E5334) - 49862246);
  LODWORD(v377) = HIDWORD(v377) ^ 0xD7BC69AD ^ v80;
  LODWORD(v376) = HIDWORD(v376) ^ 0xC2CFB000 ^ v378 ^ 0xCF46E448;
  HIDWORD(v379) = v80;
  unsigned int v86 = v376 ^ 0x25E717F4 ^ v80;
  unsigned int v87 = ((v86 & 0xBF ^ 0x966D87EE) - (v86 & 0x40)) ^ 0x142CA644;
  int v88 = *(_DWORD *)&v70[4 * (HIBYTE(v86) ^ 0xF0)];
  HIDWORD(v27) = v88 ^ 0xA0;
  LODWORD(v27) = v88 ^ 0xE3ED3400;
  unsigned int v89 = *(_DWORD *)&v75[4 * ((((v86 >> 8) & 0x5B ^ 0xAF5C0113) + ((v86 >> 8) & 0xA4 ^ 0x21) - 1) ^ 0xAF5C01E4)] ^ *(_DWORD *)&v73[4 * ((((2 * (BYTE2(v86) ^ 0x67C80FD0)) | 0x9A480E6A) - (BYTE2(v86) ^ 0x67C80FD0) - 1294206773) ^ 0x2AEC08E2)] ^ *(_DWORD *)(v74 + 4 * ((((2 * v87) & 0x400030C) - v87 - 261133191) ^ 0x722E4D62)) ^ ((v27 >> 8) - ((2 * (v27 >> 8)) & 0xCE2E2964) - 417917774) ^ HIDWORD(v376) ^ 0xC2CFB000 ^ ((v86 ^ 0x41) - ((2 * (v86 ^ 0x41)) & 0xD6) - 1905899669) & 0x80227FFF ^ 0x318CBBD9;
  int v90 = v376 ^ 0x25E717F4 ^ HIDWORD(v377) ^ 0xD7BC69AD;
  LODWORD(v374) = v89 ^ v376 ^ 0x25E717F4;
  unsigned int v91 = v374 ^ 0x316862EF ^ v90 ^ v86;
  unsigned int v92 = ((BYTE1(v91) ^ 0x88) - ((v91 >> 7) & 4) - 2027993342) ^ 0x85AA4F53;
  int v93 = (BYTE2(v91) ^ 0x73) - ((2 * (BYTE2(v91) ^ 0x73)) & 0x184) + 2014727362;
  HIDWORD(v373) = v374 ^ 0x316862EF ^ v90;
  int v94 = *(_DWORD *)&v70[4 * ((HIDWORD(v373) ^ ~v86) >> 24)];
  HIDWORD(v27) = v94 ^ 0xA0;
  LODWORD(v27) = v94 ^ 0xE3ED3400;
  HIDWORD(v374) = v90;
  unint64_t v375 = __PAIR64__(v86, v89);
  int v95 = *(_DWORD *)(v74 + 4 * (((v91 & 0xBD ^ 0x103A3E3D) + (v91 & 0x42 ^ 0x40000041) - 1) ^ 0x503A3E28)) ^ *(_DWORD *)&v75[4 * ((v92 - ((2 * v92) & 0x1028204) + 1506492674) ^ 0x5B7E496C)] ^ *(_DWORD *)&v73[4 * (((v93 & 0x380201AA ^ 0x86299188) + (v93 ^ 0x39560072) - ((v93 ^ 0x39560072) & 0x4009AA)) ^ 0xFF2BD5BA)] ^ ((v27 >> 8) - ((2 * (v27 >> 8)) & 0xD08ED430) + 1749510680) ^ v89 ^ v374 ^ 0xEF ^ v90 ^ v86 ^ 0x90D08D97;
  LODWORD(v372) = v95 ^ v90;
  unsigned int v96 = v95 ^ v90 ^ 0xE4DC9BDD;
  LODWORD(v373) = v91;
  unsigned int v97 = v96 ^ v91;
  int v98 = *(_DWORD *)&v70[4 * (((v96 ^ v91) >> 24) ^ 0xFB)];
  HIDWORD(v27) = v98 ^ 0xA0;
  LODWORD(v27) = v98 ^ 0xE3ED3400;
  unsigned int v99 = (HIWORD(v97) & 0xFB ^ 0xF38B3A3D) - (HIWORD(v97) & 4);
  int v100 = (v97 & 0xE8 ^ 0x52853A29) + (v97 & 0x17) - 1;
  HIDWORD(v372) = v95;
  HIDWORD(v370) = v95 ^ v374 ^ 0x316862EF;
  LODWORD(v371) = *(_DWORD *)&v73[4 * (((v99 & 0xD6 ^ 0x41C46057) + (v99 & 0x29) - 1) ^ 0x41C46090)] ^ *(_DWORD *)&v75[4 * (((BYTE1(v97) ^ 0xB2901EA) + ((v97 >> 8) & 0x3A ^ 0xE4C01810) - ((BYTE1(v97) ^ 0xB2901EA) & 0x21013A)) ^ 0xEFC818C5)] ^ *(_DWORD *)(v74 + 4 * (((v100 & 0x10000207 ^ 0x220004) + (v100 ^ 0xB38CFAEB) - ((v100 ^ 0xB38CFAEB) & 0x1088007)) ^ 0xF023424A)) ^ ((v27 >> 8) - ((2 * (v27 >> 8)) & 0x34BAD440) + 442329632) ^ v95 ^ (((2 * ((v96 ^ v91) ^ 0x78)) & 0x1AE) - ((v96 ^ v91) ^ 0x78) + 1576);
  LODWORD(v370) = v371 ^ 0xE0F26739 ^ HIDWORD(v370);
  HIDWORD(v369) = v370 ^ 0x79709B74 ^ v96;
  int v101 = HIDWORD(v369) ^ 0x35C805A1;
  HIDWORD(v371) = v96 ^ v91;
  unsigned int v102 = HIDWORD(v369) ^ 0x35C805A1 ^ v96 ^ v91;
  int v103 = *(_DWORD *)&v70[4 * (HIBYTE(v102) ^ 0xEF)];
  HIDWORD(v27) = v103 ^ 0xA0;
  LODWORD(v27) = v103 ^ 0xE3ED3400;
  unsigned int v104 = (((2 * (BYTE2(v102) ^ 0x40)) | 0x1282E656) - (BYTE2(v102) ^ 0x40) + 1992199381) ^ 0x90437328;
  unsigned int v105 = ((v102 >> 7) & 0x64) + (BYTE1(v102) ^ 0xFFFFFF3B) - 1190478130;
  HIDWORD(v368) = *(_DWORD *)&v75[4
                                * (((v105 & 0x910292C1 ^ 0x2F00001) + (v105 & 0x8013E ^ 0x4044109) - 1) ^ 0x97FED3B0)] ^ *(_DWORD *)(v74 + 4 * (BYTE4(v369) ^ 0xA1 ^ v97 ^ 0x82u)) ^ ((v27 >> 8) - ((2 * (v27 >> 8)) & 0x3026E97C) - 1743555394) ^ v371 ^ 0xE0F26739 ^ *(_DWORD *)&v73[4 * ((((2 * v104) | 0x4E1E3214) - v104 + 1492182774) ^ 0xBE0D199A)] ^ ((v102 & 0x7E ^ 0x20401441) + (v102 & 0x81 ^ 0x94220901) - 1);
  int v106 = HIDWORD(v368) ^ 0xB55B6476 ^ v370 ^ 0x79709B74;
  int v107 = v106 ^ 0x3891B64E ^ HIDWORD(v369) ^ 0x35C805A1;
  int v108 = (2 * (v107 & 0x2000)) ^ 0x4000 | v107 & 0x2000;
  BOOL v109 = ((v108 - 0x2000) & (v102 ^ 0x6E32114F)) == ((2 * ((v108 - 0x2000) & (v102 ^ 0x6E32114F))) & 0xF0C55198);
  int v110 = v108 + 352540075;
  int v111 = 352556459 - v108;
  if (v109) {
    int v111 = v110;
  }
  LODWORD(v369) = v102;
  unsigned int v112 = ((v102 ^ 0xC8C14909)
        - 352548267
        + v111
        - ((2 * ((v102 ^ 0xC8C14909) - 352548267 + v111)) & 0xC78D5D8A)
        + 1673965253) ^ ((v107 & 0x670F1619 ^ 0x44060619) + (v107 & 0x98F0C9E6 ^ 0x90604125) - 1);
  unsigned int v113 = (BYTE1(v112) ^ 0x22 | 0xE02C23FD) - (BYTE1(v112) ^ 0x22 | 0x1FD3DC02) + 533978114;
  int v114 = (BYTE2(v112) ^ 0x17) - ((v112 >> 15) & 0x140) + 565264544;
  int v115 = (v112 ^ 0x3E) - ((2 * (v112 ^ 0x3E)) & 0x1CA) + 636446693;
  int v116 = *(_DWORD *)&v70[4 * (HIBYTE(v112) ^ 0x1A)];
  HIDWORD(v117) = v116 ^ 0xA0;
  LODWORD(v117) = v116 ^ 0xE3ED3400;
  HIDWORD(v366) = *(_DWORD *)&v73[4 * (((v114 & 0x5DDC ^ 0x18045D1D) + (v114 & 0x2223 ^ 0x81002001) - 1) ^ 0x99043D73)] ^ *(_DWORD *)(v74 + 4 * ((((2 * (v112 ^ 0x10008F2)) | 0x7AA35522) - (v112 ^ 0x10008F2) + 1118721391) ^ 0xBC51A203)) ^ *(_DWORD *)&v75[4 * (((v113 & 0x202825C9 ^ 0x1000440) + (v113 ^ 0xE6EC21BD) - ((v113 ^ 0xE6EC21BD) & 0x20005C9)) ^ 0x25E8277D)] ^ ((v117 >> 8) - ((2 * (v117 >> 8)) & 0x64DAB128) + 846026900) ^ HIDWORD(v368) ^ 0xB55B6476 ^ ((v115 & 0x4E04D3D ^ 0x18008039) + (v115 ^ 0x25F07FC4) - ((v115 ^ 0x25F07FC4) & 0x160D3D));
  unint64_t v367 = __PAIR64__(v107, v112);
  int v118 = HIDWORD(v366) ^ 0x1AE15987 ^ v101;
  int v119 = *(_DWORD *)&v70[4 * (((v118 ^ v112) >> 24) ^ 0x28)];
  HIDWORD(v117) = v119 ^ 0xA0;
  LODWORD(v117) = v119 ^ 0xE3ED3400;
  unsigned int v120 = ((((unsigned __int16)(WORD2(v366) ^ 0x5987 ^ v101 ^ v112) >> 8) ^ 0x78)
        + (((v118 ^ v112) >> 8) & 0xE0 ^ 0xB6C19B80)
        - ((((unsigned __int16)(WORD2(v366) ^ 0x5987 ^ v101 ^ v112) >> 8) ^ 0x78) & 0xE0)) ^ 0xF2E9D9E4;
  HIDWORD(a16) = v118 ^ v112 ^ 0xE5C87251;
  int v121 = *(_DWORD *)(v74
                   + 4
                   * (((BYTE4(v366) ^ 0x87 ^ v101 ^ v112 ^ 0x440630ED)
                     - ((2 * (BYTE4(v366) ^ 0x87 ^ v101 ^ v112 ^ 0x440630ED)) & 0x8044042)
                     + 376696097) ^ 0x5275DD1Au)) ^ *(_DWORD *)&v73[4 * (((v118 ^ v112) >> 16) ^ 0x26)] ^ ((v117 >> 8) - ((2 * (v117 >> 8)) & 0x263CE322) - 1826721391) ^ (((((v118 ^ v112) & 0xD7 ^ 0x598C4C15) + ((BYTE4(v366) ^ 0x87 ^ v101 ^ v112) & 0x28 ^ 9) - 1) & 0x793 ^ 0xB39B2683) + ((((v118 ^ v112) & 0xD7 ^ 0x598C4C15) + ((BYTE4(v366) ^ 0x87 ^ v101 ^ v112) & 0x28 ^ 9) - 1) & 0x86C ^ 0x4001841) - 1) ^ *(_DWORD *)&v75[4 * ((v120 - ((2 * v120) & 0x88109F64) - 854700110) ^ 0x89260DA4)] ^ 0x30FD2B25;
  int32x4_t v122 = (char *)*(&off_1EF0E5660 + a1 - 298) - 8;
  int v123 = v122[*(unsigned __int8 *)(v20 - 108) ^ 0x4BLL];
  HIDWORD(v117) = v123 ^ 9;
  LODWORD(v117) = (v123 ^ 0x60) << 24;
  int v124 = ((v117 >> 29) - ((2 * (v117 >> 29)) & 0x26) - 109) ^ 0xB2;
  unsigned int v125 = (((v124 + (~(2 * (_BYTE)v124) | 0xFFFFFF81)) << 24) + 0x40000000) ^ 0x3F000000;
  int8x16_t v126 = (char *)*(&off_1EF0E5660 + (a1 ^ 0x106)) - 12;
  int v127 = v126[*(unsigned __int8 *)(v20 - 107) ^ 0x48] ^ 0x11;
  unsigned int v128 = (((v127 - ((2 * v127) & 0x1B0)) << 16) - 724041728) ^ 0xD4D80000;
  unsigned int v129 = (v125 - ((2 * v125) & 0x70000000) - 1201380660) ^ 0xB86462CC | (v128 - ((2 * v128) & 0x16220000) + 185725726) ^ 0xB11F31E;
  uint16x8_t v130 = (char *)*(&off_1EF0E5660 + (a1 ^ 0x170)) - 4;
  int v131 = v130[*(unsigned __int8 *)(v20 - 106) ^ 0xCELL];
  int v132 = (v131 - ((2 * v131 + 20) & 0x34) + 4) ^ 0x9F;
  unsigned int v133 = (((v132 - ((2 * v132) & 0x184)) << 8) - 12336640) ^ 0xFF43C200;
  int v134 = (v133 - ((2 * v133) & 0x9CA800) + 5133425) ^ 0x4E5471 | (v129 - ((2 * v129) & 0x2105BB56) + 277011883) ^ 0x1082DDAB;
  int v135 = v122[*(unsigned __int8 *)(v20 - 100) ^ 0xE9];
  HIDWORD(v117) = v135 ^ 9;
  LODWORD(v117) = (v135 ^ 0x60) << 24;
  unsigned int v136 = v134 - ((2 * v134) & 0xC53AC22E);
  int v137 = ((v117 >> 29) + (~(2 * (v117 >> 29)) | 3) - 1) ^ 0xC7;
  uint64_t v138 = (uint64_t)*(&off_1EF0E5660 + (a1 ^ 0x13E));
  int v139 = *(unsigned __int8 *)(v138 + (*(unsigned __int8 *)(v20 - 105) ^ 0xD1));
  HIDWORD(v117) = v139 ^ 0xB;
  LODWORD(v117) = ~v139 << 24;
  int v140 = (v117 >> 31) - ((2 * (v117 >> 31)) & 0x2C) + 22;
  unsigned int v141 = (v136 - 493002473) ^ 0xE29D6117 | ((v140 ^ 0xD4) - ((2 * v140) & 0x10) + 681435144) ^ 0x289DE008;
  int v142 = v130[*(unsigned __int8 *)(v20 - 110) ^ 0x53];
  int v143 = (v142 - ((2 * v142 - 44) & 0xD8) + 86) ^ 0x72;
  int v144 = (((v143 - ((2 * v143) & 0xB4)) << 8) + 1022515712) ^ 0x3CF25A00;
  unsigned int v145 = v144 + 512571011 + (~(2 * v144) | 0xC2E593FF);
  int v146 = v130[*(unsigned __int8 *)(v20 - 98) ^ 0x9FLL];
  int v147 = (v146 - ((2 * (_BYTE)v146 + 20) & 0x10) - 14) ^ 0xA;
  unsigned int v148 = (((v147 - ((2 * v147) & 0x158)) << 8) - 354440192) ^ 0xEADFAC00;
  unsigned int v149 = (v148 - ((2 * v148) & 0x36AA6400) - 1688915406) ^ 0x9B553232 | (2137107096
                                                                       - ((((v137 - ((2 * v137) & 0xC4)) << 24)
                                                                         + 1644167168) ^ 0x62000000)) ^ 0x7F61AA98;
  unsigned int v150 = v149 - ((2 * v149) & 0xCD5F6DA6);
  int v151 = v126[*(unsigned __int8 *)(v20 - 111) ^ 0x31] ^ 0xD6;
  int v152 = (((v151 - ((2 * v151) & 0x68)) << 16) + 808714240) ^ 0x30340000;
  int v153 = (v145 | 1) ^ 0x1E8D3683 | (v152 - ((2 * v152) & 0x61FC0000) + 1895735954) ^ 0x70FEA292;
  int v154 = v122[*(unsigned __int8 *)(v20 - 112) ^ 0x3FLL];
  HIDWORD(v117) = v154 ^ 9;
  LODWORD(v117) = (v154 ^ 0x60) << 24;
  int v155 = ((v117 >> 29) + (~(2 * (v117 >> 29)) | 5) - 2) ^ 0x54;
  int v156 = (((v155 - ((2 * v155) & 0xE8)) << 24) + 1946157056) ^ 0x74000000;
  unsigned int v157 = (v156 - ((2 * v156) & 0x58000000) - 1401882929) ^ 0xAC70F6CF | (v153 - ((2 * v153) & 0xA33ED79C) - 778081330) ^ 0xD19F6BCE;
  unsigned int v158 = v157 - ((2 * v157) & 0x9968E414);
  unsigned int v363 = v130;
  int v159 = (v130[*(unsigned __int8 *)(v20 - 102) ^ 0x7DLL]
        - ((2 * v130[*(unsigned __int8 *)(v20 - 102) ^ 0x7DLL] + 84) & 0x52)
        - 109) ^ 0x93;
  unsigned int v160 = (((v159 - ((2 * v159) & 0x2A)) << 8) - 242215680) ^ 0xF1901500;
  v365 = v122;
  int v161 = v122[*(unsigned __int8 *)(v20 - 104) ^ 0x1ALL];
  HIDWORD(v117) = v161 ^ 9;
  LODWORD(v117) = (v161 ^ 0x60) << 24;
  int v162 = ((v117 >> 29) + (~(2 * (v117 >> 29)) | 0x69) + 76) ^ 0xB;
  LODWORD(v130) = (((v162 - ((2 * v162) & 0x2A)) << 24) + 352321536) ^ 0x15000000;
  unsigned int v163 = (v130 - ((2 * v130) & 0x12000000) + 165106029) ^ 0x9D7516D | (v160
                                                                                     - ((2 * v160) & 0x6561E000)
                                                                                     + 1924198571) ^ 0x72B0F0AB;
  LODWORD(v130) = v163 - ((2 * v163) & 0x9C3D6C90);
  int v164 = *(unsigned __int8 *)(v138 + (*(unsigned __int8 *)(v20 - 97) ^ 0x68));
  HIDWORD(v117) = v164 ^ 0xB;
  LODWORD(v117) = ~v164 << 24;
  int v165 = (v150 + 1722791635) ^ 0x66AFB6D3 | ((((v117 >> 31) + (~(2 * (v117 >> 31)) | 0xD1) - 104) ^ 0x97)
                                           - ((2 * (((v117 >> 31) + (~(2 * (v117 >> 31)) | 0xD1) - 104) ^ 0x97)) & 0x2A)
                                           + 1064162069) ^ 0x3F6DD315;
  LODWORD(v122) = *(unsigned __int8 *)(v138 + (*(unsigned __int8 *)(v20 - 101) ^ 0xD7));
  HIDWORD(v117) = v122 ^ 0xB;
  LODWORD(v117) = ~v122 << 24;
  LODWORD(v122) = (v130 - 836848056) ^ 0xCE1EB648 | ((((v117 >> 31)
                                                                              - ((2 * (v117 >> 31)) & 0xCA)
                                                                              + 101) ^ 0x65)
                                                           - ((2
                                                             * (((v117 >> 31) - ((2 * (v117 >> 31)) & 0xCA) + 101) ^ 0x65)) & 0x12A)
                                                           - 1989563499) ^ 0x8969AB95;
  LODWORD(v130) = v126[*(unsigned __int8 *)(v20 - 103) ^ 0xD6] ^ 0xF7;
  LODWORD(v130) = (((v130 - ((2 * v130) & 0x168)) << 16) - 827064320) ^ 0xCEB40000;
  LODWORD(v122) = (v122 - ((2 * v122) & 0xFCEF8076) - 25706437) ^ 0xFE77C03B | (v130
                                                                                              - ((2 * v130) & 0x135C0000)
                                                                                              + 1236203415) ^ 0x49AEF797;
  LODWORD(v130) = *(unsigned __int8 *)(v138 + (*(unsigned __int8 *)(v20 - 109) ^ 0x60));
  HIDWORD(v117) = v130 ^ 0xB;
  LODWORD(v117) = ~v130 << 24;
  LODWORD(v130) = ((((v117 >> 31) - ((2 * (v117 >> 31)) & 0x4E) + 39) ^ 0xCD)
                 - ((2 * (((v117 >> 31) - ((2 * (v117 >> 31)) & 0x4E) + 39) ^ 0xCD)) & 0x3C)
                 + 737143070) ^ 0x2BEFE91E | (v158 - 860589558) ^ 0xCCB4720A;
  unsigned int v364 = v126;
  int v166 = ((((v126[*(unsigned __int8 *)(v20 - 99) ^ 0x86] ^ 0xF1)
          - ((2 * (v126[*(unsigned __int8 *)(v20 - 99) ^ 0x86] ^ 0xF1)) & 0x8E)) << 16)
        + 1262944256) ^ 0x4B470000;
  unsigned int v167 = (v166 - ((2 * v166) & 0x66220000) + 856786246) ^ 0x33118546 | (v165 - ((2 * v165) & 0xD8F13072) + 1819842617) ^ 0x6C789839;
  int v391 = (v130 - ((2 * v130) & 0x71772C08) - 1195665916) ^ 0x72EA2838;
  unsigned int v390 = (v141 - ((2 * v141) & 0x627D23D6) - 1321299477) ^ 0xA7A80A91;
  unsigned int v389 = (v167 - ((2 * v167) & 0x4704500E) + 595732487) ^ 0x934069C6;
  unsigned int v388 = (v122 - ((2 * v122) & 0xE778744C) - 205768154) ^ 0x39EF159E;
  LODWORD(v368) = HIDWORD(v368) ^ 0xB55B6476 ^ v370 ^ 0x79709B74;
  LODWORD(v362) = HIDWORD(v366) ^ 0x1AE15987 ^ v106 ^ 0x3891B64E;
  HIDWORD(v362) = v106 ^ 0x49446822 ^ v121;
  HIDWORD(v361) = v121 ^ HIDWORD(v366) ^ 0x1AE15987;
  LODWORD(v366) = v118;
  LODWORD(v361) = v118 ^ 0x21D65ACB ^ HIDWORD(v362);
  HIDWORD(v360) = a5 - 1250414292;
  int v168 = *(_DWORD *)(v20 - 116);
  LODWORD(v360) = v168 ^ 0x791;
  HIDWORD(v359) = v168 ^ 0x789;
  LODWORD(v359) = v168 ^ 0x7B3;
  LODWORD(v358) = v168 ^ 0x731;
  HIDWORD(v358) = 67111053;
  HIDWORD(a6) = v168 ^ 0x79F;
  *(void *)(v20 - 128) = 1;
  *(_DWORD *)(v20 - 148) = 166222029;
  int32x4_t v169 = v19;
  uint64_t v170 = v19[1] ^ 3;
  uint64_t v171 = (1282335806 - ((((v168 - 1588) | 0x400) - 1730297010) & 0x12)) ^ 0x4C6EE435u;
  *(void *)(v20 - 136) = v171;
  unsigned int v172 = ((((v364[v170] ^ 0xBF) - ((2 * (v364[v170] ^ 0xBF)) & 0xFFFFFFE3)) << 16)
        - 1494155264) ^ 0xA6F10000;
  int v173 = v172 - 1533167483 - ((2 * v172) & 0x493A0000);
  int v174 = v126[v19[v171] ^ 0xD2];
  *(void *)(v20 - 144) = 14;
  unsigned int v175 = ((((v174 ^ 0xD1) - ((2 * (v174 ^ 0xD1)) & 0xFFFFFF8F)) << 16) + 1288110080) ^ 0x4CC70000;
  int v176 = v175 - 1045138689 - ((2 * v175) & 0x3680000);
  uint64_t v177 = v19[14] ^ 0x75;
  int32x4_t v178 = v363;
  LOBYTE(v177) = v363[v177];
  *(void *)(v20 - 160) = 5;
  int v179 = v126[v169[5] ^ 0x20];
  LOBYTE(v177) = (v177 - ((2 * v177 - 44) & 0xB4) + 68) ^ 9;
  LODWORD(v177) = (((v177 - 2 * (v177 & 0x3F)) << 8) + 1368145664) ^ 0x518C3F00;
  int v180 = v177 - 1610921186 - ((2 * v177) & 0x3FF69600);
  LODWORD(v177) = ((((v179 ^ 0xC1) - ((2 * (v179 ^ 0xC1)) & 0x2E)) << 16) + 1326907392) ^ 0x4F170000;
  *(void *)(v20 - 216) = 12;
  int v181 = v365[v169[12] ^ 0xA5];
  HIDWORD(v117) = v181 ^ 9;
  LODWORD(v117) = (v181 ^ 0x60) << 24;
  int v182 = ((v117 >> 29) - ((2 * (v117 >> 29)) & 0x4E) - 89) ^ 0x59;
  unsigned int v183 = (((v182 - ((2 * v182) & 0xFFFFFFCF)) << 24) + 1728053248) ^ 0x67000000;
  unsigned int v184 = (v183 + 1639067376 - ((2 * v183) & 0xC2000000)) ^ 0x61B22EF0 | v180 ^ 0x9FFB4B1E;
  unsigned int v185 = v184 - 405603629 - ((2 * v184) & 0xCFA5F5A6);
  *(void *)(v20 - 192) = 3;
  int v186 = *(unsigned __int8 *)(v138 + (v169[3] ^ 0x6DLL));
  HIDWORD(v117) = v186 ^ 0xB;
  LODWORD(v117) = ~v186 << 24;
  *(void *)(v20 - 224) = 11;
  int v187 = ((v117 >> 31) - ((2 * (v117 >> 31)) & 0x82) - 63) ^ 0xC1;
  unsigned int v188 = (v187 - 171250889 - ((2 * v187) & 0x6E)) ^ 0xF5CAEB37 | v173 ^ 0xA49DB885;
  int v189 = *(unsigned __int8 *)(v138 + (v169[11] ^ 0xCCLL));
  HIDWORD(v117) = v189 ^ 0xB;
  LODWORD(v117) = ~v189 << 24;
  int v190 = ((v117 >> 31) + (~(2 * (v117 >> 31)) | 0x7F) - 63) ^ 0x49;
  unsigned int v191 = (v190 + 1196041992 - ((2 * v190) & 0x10)) ^ 0x474A2708 | v176 ^ 0xC1B472FF;
  unsigned int v192 = v191 - 199711280 - ((2 * v191) & 0xE8314BA0);
  *(void *)(v20 - 168) = 13;
  int v193 = v126[v169[13] ^ 0xEBLL];
  *(void *)(v20 - 200) = 7;
  int v194 = ((((v193 ^ 0x92) - ((2 * (v193 ^ 0x92)) & 0x86)) << 16) + 2000879616) ^ 0x77430000;
  int v195 = *(unsigned __int8 *)(v138 + (v169[7] ^ 5));
  unsigned int v196 = v185 ^ 0xE7D2FAD3 | (v194 - 2128683369 - ((2 * v194) & 0x23C0000)) ^ 0x811EDE97;
  HIDWORD(v117) = v195 ^ 0xB;
  LODWORD(v117) = ~v195 << 24;
  *(void *)(v20 - 208) = 15;
  int v197 = ((v117 >> 31) - 2 * ((v117 >> 31) & 0x3F) - 65) ^ 0xDD;
  LODWORD(v170) = (v197 - 337481730 - ((2 * v197) & 0x1FC)) ^ 0xEBE26FFE | (v177
                                                                                           - 41323656
                                                                                           - ((2 * v177) & 0x7B120000)) ^ 0xFD897378;
  int v198 = *(unsigned __int8 *)(v138 + ~v169[15]);
  HIDWORD(v117) = v198 ^ 0xB;
  LODWORD(v117) = ~v198 << 24;
  int v199 = ((v117 >> 31) + (~(2 * (v117 >> 31)) | 0x73) - 57) ^ 0xCD;
  unsigned int v200 = (v196 + 1103261904 - ((2 * v196) & 0x8384E1A0)) ^ 0x41C270D0 | (v199
                                                                       - 645418979
                                                                       - ((2 * v199) & 0x3A)) ^ 0xD987B01D;
  unsigned int v201 = v200 - ((2 * v200) & 0xC9952018) - 456486900;
  *(void *)(v20 - 232) = 4;
  int v202 = v365[v169[4] ^ 0x1DLL];
  HIDWORD(v117) = v202 ^ 9;
  LODWORD(v117) = (v202 ^ 0x60) << 24;
  int v203 = (v117 >> 29) - ((2 * (v117 >> 29)) & 0xBA) + 93;
  unsigned int v204 = ((((v203 ^ 0xAB) - ((2 * v203) & 0xA0)) << 24) - 805306368) ^ 0xD0000000;
  LODWORD(v170) = (v204 + 1639853306 - ((2 * v204) & 0xC2000000)) ^ 0x61BE2CFA | (v170
                                                                                + 510441087
                                                                                - ((2 * v170) & 0x3CD96CFE)) ^ 0x1E6CB67F;
  *(void *)(v20 - 176) = 10;
  uint64_t v205 = v169[10] ^ 0x81;
  *(void *)(v20 - 248) = 2;
  LODWORD(v205) = (v178[v205] - 2 * ((v178[v205] + 10) & 0xF ^ v178[v205] & 1) + 120) ^ 0xCE;
  LODWORD(v205) = (((v205 - ((2 * v205) & 0xA)) << 8) + 2030896384) ^ 0x790D0500;
  uint64_t v206 = v169[2];
  int v207 = (v205 + 1226224691 - ((2 * v205) & 0x122D6800)) ^ 0x4916B433 | v192 ^ 0xF418A5D0;
  LODWORD(v205) = (((((v178[v206 ^ 0xBD] - ((2 * v178[v206 ^ 0xBD] + 84) & 0x56) - 107) ^ 0xC5)
                   - ((2
                     * ((v178[v206 ^ 0xBD]
                       - ((2 * v178[v206 ^ 0xBD] + 84) & 0x56)
                       - 107) ^ 0xC5)) & 0x170)) << 8)
                 - 1035028480) ^ 0xC24EB800;
  int v208 = (v205 + 1783532977 - ((2 * v205) & 0x549D1A00)) ^ 0x6A4E8DB1 | (v188 - 907037709 - ((2 * v188) & 0x13DF67E6)) ^ 0xC9EFB3F3;
  *(void *)(v20 - 184) = 8;
  LODWORD(v177) = v365[v169[8] ^ 0x73];
  *(void *)(v20 - 240) = 0;
  HIDWORD(v117) = v177 ^ 9;
  LODWORD(v117) = (v177 ^ 0x60) << 24;
  LODWORD(v177) = (v117 >> 29) - ((2 * (v117 >> 29)) & 0xC8) + 100;
  LODWORD(v177) = ((((v177 ^ 0xA) - ((2 * v177) & 0x60)) << 24) + 805306368) ^ 0x30000000;
  LODWORD(v177) = (v207 + 429843333 - ((2 * v207) & 0x333DC70A)) ^ 0x199EE385 | (v177
                                                                               - 1329367720
                                                                               - ((2 * v177) & 0x60000000)) ^ 0xB0C37558;
  int v209 = v177 - ((2 * v177) & 0x9F0B1798) + 1334152140;
  LODWORD(v177) = v365[*v169 ^ 0x19];
  HIDWORD(v117) = v177 ^ 9;
  LODWORD(v117) = (v177 ^ 0x60) << 24;
  LODWORD(v177) = ((v117 >> 29) - 2 * ((v117 >> 29) & 0xF) - 113) ^ 0x3A;
  LODWORD(v177) = (((v177 - ((2 * v177) & 0x24)) << 24) - 1845493760) ^ 0x92000000;
  LODWORD(v177) = (v208 - 592962064 - ((2 * v208) & 0xB9503BE0)) ^ 0xDCA81DF0 | (v177
                                                                               + 1457410187
                                                                               - ((2 * v177) & 0xAC000000)) ^ 0x56DE508B;
  *(void *)(v20 - 256) = 6;
  LODWORD(v171) = v363[v169[6] ^ 0xF2];
  LODWORD(v171) = (v171 - ((2 * v171 + 84) & 0x46) - 115) ^ 8;
  LODWORD(v171) = (((v171 - ((2 * v171) & 0x1D8)) << 8) + 560983040) ^ 0x216FEC00;
  LODWORD(v171) = (v171 - 1772489510 - ((2 * v171) & 0x2CB3E800)) ^ 0x9659F4DA | (v170
                                                                                - 580014012
                                                                                - ((2 * v170) & 0xBADB6088)) ^ 0xDD6DB044;
  int v210 = v171 - ((2 * v171) & 0x6C0C3D64) - 1241112910;
  LODWORD(v171) = v391 ^ v384 ^ (v177 - ((2 * v177) & 0x865C8CB2) + 1127106137);
  unsigned int v211 = v390 ^ v385 ^ v210;
  unsigned int v212 = v389 ^ v71 ^ v201;
  unsigned int v213 = v388 ^ v386 ^ v209;
  unsigned int v214 = ((v212 >> 8) & 0x7B ^ 0xA9A288A6) - ((v212 >> 8) & 0x84);
  uint64_t v215 = (char *)*(&off_1EF0E5660 + SHIDWORD(v359)) - 4;
  int v216 = *(_DWORD *)&v215[4
                        * (((v214 & 0x8A2088A ^ 0x4408570A) + (v214 ^ 0x2AE32880) - ((v214 ^ 0x2AE32880) & 0x8101808A)) ^ 0x4EEA7F04)];
  int8x16x4_t v217 = (char *)*(&off_1EF0E5660 + (int)v359) - 4;
  int v218 = *(_DWORD *)&v217[4 * (BYTE3(v171) ^ 0x87)];
  HIDWORD(v117) = v218 ^ 0x4D;
  LODWORD(v117) = v218 ^ 0xED45B180;
  LODWORD(v130) = -1283600143 - (BYTE2(v212) ^ 0x99286686 | 0xB37DD0F1) + (BYTE2(v212) ^ 0x99286686 | 0x4C822F0E);
  LODWORD(v205) = (v117 >> 7) - ((2 * (v117 >> 7)) & 0xA3575736);
  int v219 = *(_DWORD *)&v215[4 * (BYTE1(v213) ^ 3)];
  LODWORD(v206) = v219 - ((2 * v219 + 77891542) & 0x5EB3A102);
  unsigned int v220 = (((2 * (v213 ^ 0x81)) | 0xCFC59E5C) - (v213 ^ 0x81) - 1742917422) ^ 0x73FCEC2D;
  LOWORD(v115) = (v212 & 0xF ^ 0x2006) + (v212 & 0xF0 ^ 0x11) - 1;
  int v221 = *(_DWORD *)&v217[4 * (HIBYTE(v211) ^ 0x50)];
  HIDWORD(v117) = v221 ^ 0x4D;
  LODWORD(v117) = v221 ^ 0xED45B180;
  int v222 = (v117 >> 7) - ((2 * (v117 >> 7)) & 0xF88A3A94);
  int v223 = *(_DWORD *)&v217[4 * (HIBYTE(v212) ^ 0xB2)];
  HIDWORD(v117) = v223 ^ 0x4D;
  LODWORD(v117) = v223 ^ 0xED45B180;
  int v224 = (v117 >> 7) - ((2 * (v117 >> 7)) & 0x310A3CE0);
  int v225 = *(_DWORD *)&v215[4
                        * (((BYTE1(v171) ^ 0x9C020C87)
                          + ((v171 >> 8) & 0x8D ^ 0x63D99308)
                          - ((BYTE1(v171) ^ 0x9C020C87) & 0x400088D)) ^ 0xFBDB97AD)];
  LODWORD(v178) = v225 - ((2 * v225 - 2069592106) & 0x9B52BA50);
  unsigned int v226 = v130 ^ 0xD5AA49E1;
  int v227 = (char *)*(&off_1EF0E5660 + *(_DWORD *)(v20 - 116) - 1742) - 4;
  int v228 = (char *)*(&off_1EF0E5660 + (int)v360) - 4;
  LODWORD(v170) = *(_DWORD *)&v228[4 * (v211 ^ 0xC0)] ^ (v178 + 268149011) ^ *(_DWORD *)&v227[4 * v226];
  int v229 = *(_DWORD *)&v217[4 * (HIBYTE(v213) ^ 0x1F)];
  HIDWORD(v117) = v229 ^ 0x4D;
  LODWORD(v117) = v229 ^ 0xED45B180;
  LODWORD(v178) = *(_DWORD *)&v215[4 * (BYTE1(v211) ^ 0x51)];
  unsigned int v230 = *(_DWORD *)&v228[4 * ((v391 ^ v384 ^ (v177 - ((2 * v177) & 0xB2) + 89)) ^ 6)] ^ v382 ^ *(_DWORD *)&v227[4 * (BYTE2(v213) ^ 0x36)] ^ (v222 - 62579382) ^ (v216 - ((2 * v216 + 10782678) & 0x30DA216) + 1138300150);
  int v231 = (v205 + 1370205083) ^ v383 ^ (v206 + 1907102828) ^ *(_DWORD *)&v227[4 * (BYTE2(v211) ^ 0xF1)];
  int v232 = *(_DWORD *)&v228[4 * ((((2 * v220) & 0x748CAC00) - v220 + 1169795583) ^ 0x51A78A9A)];
  int v233 = *(_DWORD *)&v227[4 * (BYTE2(v171) ^ 0x57)];
  LODWORD(v171) = v231 ^ *(_DWORD *)&v228[4 * (((v115 & 0x1240 ^ 0x50258041) + (v115 & 0x2DBF) - 1) ^ 0x5025A0D0)];
  unsigned int v234 = v232 ^ v381 ^ v71 ^ 0xB724F5F9 ^ v233;
  unsigned int v235 = v170 ^ v381 ^ ((v117 >> 7) - ((2 * (v117 >> 7)) & 0x2E77E970) + 389805240);
  LODWORD(v206) = v234 ^ (v178 - ((2 * v178 + 77891542) & 0x60CCD188) - 222778193) ^ (v224 + 411377264);
  unsigned int v236 = ((((v230 ^ 0x62A35BE7) >> (v170 & 0x10))
         + 537672871
         - ((2 * ((v230 ^ 0x62A35BE7) >> (v170 & 0x10))) & 0x4018794E)) ^ 0x200C3CA7) >> (v170 & 0x10 ^ 0x10);
  LOBYTE(v222) = v236 - ((2 * v236) & 0xBF);
  int v237 = *(_DWORD *)&v217[4 * (BYTE3(v171) ^ 0x38)];
  HIDWORD(v117) = v237 ^ 0x4D;
  LODWORD(v117) = v237 ^ 0xED45B180;
  int v238 = v117 >> 7;
  LODWORD(v170) = ((v171 ^ 0x9E) + (v171 & 0xBD ^ 0xEB82C821) - ((v171 ^ 0x9E) & 0xBD)) ^ 0xAA88C9BC;
  int v239 = *(_DWORD *)&v217[4 * (BYTE3(v206) ^ 0x17)];
  LODWORD(v205) = v170 - ((2 * v170) & 0x1414F4);
  HIDWORD(v117) = v239 ^ 0x4D;
  LODWORD(v117) = v239 ^ 0xED45B180;
  int v240 = v238 - ((2 * v238) & 0xE1674CB8);
  int v241 = (v117 >> 7) - ((2 * (v117 >> 7)) & 0x9423552);
  LODWORD(v170) = ((BYTE1(v235) ^ 0x1C) - ((2 * (BYTE1(v235) ^ 0x1C)) & 0xB6) + 1283640411) ^ 0x4C82EC4F;
  LODWORD(v170) = *(_DWORD *)&v215[4
                                 * ((701315024 - (v170 | 0x29CD37D0) + (v170 | 0xD632C82F)) ^ 0xD632E806)];
  int v242 = v170 - ((2 * v170 - 2069592106) & 0xFB3471CA);
  LODWORD(v170) = *(_DWORD *)&v215[4
                                 * (((BYTE1(v206) ^ 0xC926393)
                                   + ((v206 >> 8) & 0x2D ^ 0x710D082C)
                                   - ((BYTE1(v206) ^ 0xC926393) & 0xC00222D)) ^ 0x719F49DF)];
  LODWORD(v178) = v170 - ((2 * v170 + 77891542) & 0x5DD27182);
  LODWORD(v170) = *(_DWORD *)&v217[4 * (HIBYTE(v235) ^ 0x71)];
  HIDWORD(v117) = v170 ^ 0x4D;
  LODWORD(v117) = v170 ^ 0xED45B180;
  int v243 = (v117 >> 7) - ((2 * (v117 >> 7)) & 0x2320DED2);
  LODWORD(v170) = ((BYTE1(v230) ^ 0xC3) + ((v230 >> 8) & 0x99 ^ 0x274FE418) - ((BYTE1(v230) ^ 0xC3) & 0x99999999)) ^ 0x664FEC11;
  unsigned int v244 = ((v230 ^ 0x5E) + (v230 & 0x27 ^ 0x98BABA21) - ((v230 ^ 0x5E) & 0x27)) ^ 0xAC9A3A29;
  LODWORD(v170) = *(_DWORD *)&v215[4 * ((((2 * v170) | 0x50C1CE88) - v170 + 1470044348) ^ 0xE960EF8B)];
  int v245 = *(_DWORD *)&v215[4
                        * (((BYTE1(v171) ^ 0x4CF2DB24)
                          + ((v171 >> 8) & 0x3E ^ 0x8200241A)
                          - ((BYTE1(v171) ^ 0x4CF2DB24) & 0x48B0023E)) ^ 0x8642FDC1)];
  int v246 = *(_DWORD *)&v217[4 * (HIBYTE(v230) ^ 0x36)];
  HIDWORD(v117) = v246 ^ 0x4D;
  LODWORD(v117) = v246 ^ 0xED45B180;
  unsigned int v247 = (v240 - 256661924) ^ HIDWORD(v380) ^ *(_DWORD *)&v228[4 * (v206 ^ 0xB)] ^ (v242 + 1072463056) ^ *(_DWORD *)&v227[4 * ((v222 + 95) ^ 0x5F)];
  unsigned int v248 = *(_DWORD *)&v228[4 * ((v205 - 1662309766) ^ 0xDDE12B99)] ^ HIDWORD(v378) ^ (v178 + 1899723948) ^ *(_DWORD *)&v227[4 * (BYTE2(v235) ^ 0xEA)] ^ ((v117 >> 7) - ((2 * (v117 >> 7)) & 0x199C9358) - 1932637780);
  LODWORD(v171) = *(_DWORD *)&v227[4 * (BYTE2(v171) ^ 0x32)] ^ HIDWORD(v379) ^ *(_DWORD *)&v228[4
                                                                                              * (v235 ^ 0xDC)] ^ (v241 - 2069816663) ^ (v170 - ((2 * v170 - 2069592106) & 0xF4804A4E) - 1131255534);
  LODWORD(v170) = *(_DWORD *)&v217[4 * (BYTE3(v171) ^ 0xDA)];
  unsigned int v249 = *(_DWORD *)&v227[4 * (BYTE2(v206) ^ 0xB7)] ^ v380 ^ (v243 - 1852805271) ^ (v245
                                                                                  - ((2 * v245 - 2069592106) & 0x8FC5BE32)
                                                                                  - 1976229116) ^ *(_DWORD *)&v228[4 * ((((2 * v244) | 0x20F68B0) - v244 - 17282136) ^ 0x35273441)];
  int v250 = (v249 & 0x52 ^ 0x5C4351) + (v249 & 0xAD) - 1;
  HIDWORD(v117) = v170 ^ 0x4D;
  LODWORD(v117) = v170 ^ 0xED45B180;
  LODWORD(v170) = v117 >> 7;
  int v251 = *(_DWORD *)&v217[4 * (HIBYTE(v249) ^ 0xA1)];
  unsigned int v252 = (v250 & 0x104115 ^ 0x11810004) + (v250 ^ 0xA47C41F3) - ((v250 ^ 0xA47C41F3) & 0xA0000215);
  HIDWORD(v117) = v251 ^ 0x4D;
  LODWORD(v117) = v251 ^ 0xED45B180;
  LODWORD(v206) = v170 - ((2 * v170) & 0x1A13D216);
  LODWORD(v205) = (v117 >> 7) - ((2 * (v117 >> 7)) & 0xE5ABB2DA);
  LODWORD(v170) = (((v247 >> 8) & 0xCD ^ 0x4AFFCE3F) - ((v247 >> 8) & 0x32)) ^ 0x48BDCE10;
  int v253 = *(_DWORD *)&v217[4 * (HIBYTE(v248) ^ 0x92)];
  HIDWORD(v117) = v253 ^ 0x4D;
  LODWORD(v117) = v253 ^ 0xED45B180;
  LODWORD(v170) = *(_DWORD *)&v215[4 * ((((2 * v170) | 0x1222580A) - v170 - 152120325) ^ 0xB532C4D)];
  int v254 = v170 - ((2 * v170 + 77891542) & 0x297D7378);
  int v255 = (v117 >> 7) - ((2 * (v117 >> 7)) & 0xD6195DAC);
  LODWORD(v178) = (BYTE2(v249) ^ 0x430C88) - ((2 * (BYTE2(v249) ^ 0x430C88)) & 0x609CE);
  LODWORD(v170) = *(_DWORD *)&v217[4 * (HIBYTE(v247) ^ 0x1E)];
  HIDWORD(v117) = v170 ^ 0x4D;
  LODWORD(v117) = v170 ^ 0xED45B180;
  LODWORD(v170) = ((v247 ^ 0xDFCB6F96) + 540315649 + ((2 * v247) ^ 0xD2)) % 0x62;
  int v256 = (v247 ^ 0x1EF3B869) + (v170 ^ 0x5300AC41) - ((2 * v170) & 0x7C) - 1392553025;
  int v257 = (v256 ^ 0xEB) + ((2 * v256) & 0xD6) + 21;
  LODWORD(v170) = ((2 * v170) & 0xBE)
                + (v170 ^ 0xAD7BEBDF)
                + ((2 * v257) & 0x1DA)
                + (v257 ^ 0x31FF36ED);
  int v258 = *(_DWORD *)&v215[4 * (BYTE1(v248) ^ 0xB1)];
  int v259 = *(_DWORD *)&v215[4 * (BYTE1(v249) ^ 0x12)];
  int v260 = v259 - ((2 * v259 + 77891542) & 0x57E456A0);
  int v261 = *(_DWORD *)&v215[4 * (BYTE1(v171) ^ 0x60)];
  unsigned int v262 = *(_DWORD *)&v227[4 * (BYTE2(v171) ^ 0x34)] ^ HIDWORD(v377) ^ (v205 - 220866195) ^ *(_DWORD *)&v228[4 * (v248 ^ 0x54)] ^ (v254 - 686752345);
  LODWORD(v205) = *(_DWORD *)&v227[4 * ((v178 + 1209472231) ^ 0x4854185A)] ^ v378 ^ (v255 - 351490346) ^ (v261 - ((2 * v261 + 77891542) & 0x12FF4876) - 875435994) ^ *(_DWORD *)&v228[4 * ((v170 - ((2 * v170 + 1091156584) & 0xA0DEE6C0) - 252424044) ^ 0xD06F73CE)];
  unsigned int v263 = *(_DWORD *)&v227[4 * (BYTE2(v248) ^ 0xDE)] ^ v379 ^ *(_DWORD *)&v228[4 * (v171 ^ 0x44)] ^ (v260 + 1849978683) ^ ((v117 >> 7) - ((2 * (v117 >> 7)) & 0x77E8C620) + 1005871888);
  LODWORD(v171) = *(_DWORD *)&v228[4 * (v252 ^ 0x15B141AB)] ^ v377 ^ *(_DWORD *)&v227[4 * (BYTE2(v247) ^ 0xF3)] ^ (v258 - ((2 * v258 + 77891542) & 0x5F954A6A) - 232986336) ^ (v206 - 1928730357);
  int v264 = *(_DWORD *)&v215[4
                        * (((unsigned __int16)(*(_WORD *)&v228[4 * (v252 ^ 0x15B141AB)] ^ v377 ^ *(_WORD *)&v227[4 * (BYTE2(v247) ^ 0xF3)] ^ (v258 - ((2 * v258 - 30762) & 0x4A6A) - 5856) ^ (v206 - 5877)) >> 8) ^ 0x3D)];
  LODWORD(v170) = *(_DWORD *)&v217[4 * (BYTE3(v205) ^ 0xAB)];
  int v265 = v264 - ((2 * v264 + 77891542) & 0x7AD36C62);
  HIDWORD(v117) = v170 ^ 0x4D;
  LODWORD(v117) = v170 ^ 0xED45B180;
  LODWORD(v206) = (v117 >> 7) - ((2 * (v117 >> 7)) & 0x5813C376);
  LODWORD(v170) = *(_DWORD *)&v215[4 * (BYTE1(v205) ^ 0xB)];
  int v266 = *(_DWORD *)&v217[4 * (HIBYTE(v263) ^ 0x1B)];
  HIDWORD(v117) = v266 ^ 0x4D;
  LODWORD(v117) = v266 ^ 0xED45B180;
  int v267 = (v117 >> 7) - ((2 * (v117 >> 7)) & 0x18F653EA);
  int v268 = *(_DWORD *)&v217[4 * (HIBYTE(v262) ^ 0xFB)];
  HIDWORD(v117) = v268 ^ 0x4D;
  LODWORD(v117) = v268 ^ 0xED45B180;
  int v269 = (v117 >> 7) - ((2 * (v117 >> 7)) & 0x20D571C0);
  int v270 = *(_DWORD *)&v217[4 * (BYTE3(v171) ^ 0xA0)];
  HIDWORD(v117) = v270 ^ 0x4D;
  LODWORD(v117) = v270 ^ 0xED45B180;
  int v271 = *(_DWORD *)&v215[4 * (BYTE1(v262) ^ 0xCD)];
  int v272 = *(_DWORD *)&v215[4 * (BYTE1(v263) ^ 0x44)];
  unsigned int v273 = *(_DWORD *)&v228[4 * (v262 ^ 0x92)] ^ HIDWORD(v375) ^ *(_DWORD *)&v227[4
                                                                                               * (BYTE2(v263) ^ 0x98)] ^ ((v117 >> 7) - ((2 * (v117 >> 7)) & 0x8072E73A) + 1077506973) ^ (v170 - ((2 * v170 - 2069592106) & 0xC7815D66) + 638775966);
  LODWORD(v170) = *(_DWORD *)&v227[4 * (BYTE2(v171) ^ 0xA)] ^ HIDWORD(v374) ^ (v269 + 275429600) ^ *(_DWORD *)&v228[4 * (v205 ^ 0x93)];
  LODWORD(v171) = *(_DWORD *)&v228[4 * (v171 ^ 2)] ^ HIDWORD(v376) ^ (v267 - 1938085387) ^ (v271 - ((2 * v271 + 77891542) & 0x68711A94) - 158674635) ^ *(_DWORD *)&v227[4 * (BYTE2(v205) ^ 0xD2)];
  int v274 = v272 - ((2 * v272 + 77891542) & 0x5020D994) - 362630987;
  int v275 = *(_DWORD *)&v228[4 * (v263 ^ 0x8F)] ^ v376 ^ (v265 - 4457956) ^ *(_DWORD *)&v227[4 * (BYTE2(v262) ^ 0xD)];
  int v276 = v170 ^ v274;
  unsigned int v277 = v275 ^ (v206 + 738845115);
  LODWORD(v170) = v170 ^ ~v274;
  int v278 = *(_DWORD *)&v217[4 * (HIBYTE(v277) ^ 0x55)];
  HIDWORD(v117) = v278 ^ 0x4D;
  LODWORD(v117) = v278 ^ 0xED45B180;
  unsigned int v279 = (((v275 ^ (v206 - 69)) ^ 0xF4)
        - ((2 * ((v275 ^ (v206 - 69)) ^ 0xF4)) & 0x92)
        + 1274512457) ^ 0xCB562469;
  unsigned int v280 = ((2 * v279) & 0x1434130) - v279;
  LODWORD(v205) = (v117 >> 7) - ((2 * (v117 >> 7)) & 0x946D1628);
  LODWORD(v170) = *(_DWORD *)&v217[4 * BYTE3(v170)];
  HIDWORD(v117) = v170 ^ 0x4D;
  LODWORD(v117) = v170 ^ 0xED45B180;
  LODWORD(v206) = (v117 >> 7) - ((2 * (v117 >> 7)) & 0xBF4CBADC);
  LODWORD(v170) = *(_DWORD *)&v215[4 * (BYTE1(v276) ^ 0xF6)];
  int v281 = *(_DWORD *)&v217[4 * (HIBYTE(v273) ^ 0x8A)];
  HIDWORD(v117) = v281 ^ 0x4D;
  LODWORD(v117) = v281 ^ 0xED45B180;
  int v282 = (v117 >> 7) - ((2 * (v117 >> 7)) & 0xBB07CF36);
  int v283 = *(_DWORD *)&v215[4 * (BYTE1(v277) ^ 0x4C)];
  int v284 = *(_DWORD *)&v215[4
                        * ((1932231446
                          - (BYTE1(v273) ^ 0x209472DF | 0x732B8316)
                          + (BYTE1(v273) ^ 0x209472DF | 0x8CD47CE9)) ^ 0xAC400E52)];
  int v285 = *(_DWORD *)&v217[4 * (BYTE3(v171) ^ 0xD4)];
  HIDWORD(v117) = v285 ^ 0x4D;
  LODWORD(v117) = v285 ^ 0xED45B180;
  unsigned int v286 = *(_DWORD *)&v228[4 * ~(_BYTE)v273] ^ v375 ^ (v170
                                                                     - ((2 * v170 + 77891542) & 0x5EED5716)
                                                                     + 1908993910) ^ *(_DWORD *)&v227[4 * (BYTE2(v277) ^ 0x36)] ^ ((v117 >> 7) - ((2 * (v117 >> 7)) & 0xDBC890E4) + 1843677298);
  unsigned int v287 = *(_DWORD *)&v228[4 * ((v280 + 169232231) ^ 0x8AB7E7CE)] ^ HIDWORD(v373) ^ *(_DWORD *)&v227[4 * (BYTE2(v273) ^ 0x5B)] ^ (v206 - 542745234) ^ (*(_DWORD *)&v215[4 * BYTE1(v171)] - ((2 * *(_DWORD *)&v215[4 * BYTE1(v171)] - 2069592106) & 0x9C69FD72) - 1870183772);
  LODWORD(v206) = *(_DWORD *)&v227[4 * (BYTE2(v171) ^ 0xFB)] ^ v91 ^ (v282 + 1568925595) ^ (v283
                                                                                          - ((2 * v283 - 2069592106) & 0xA757A200)
                                                                                          + 368973035) ^ *(_DWORD *)&v228[4 * (v276 ^ 0xDF)];
  unsigned int v288 = *(_DWORD *)&v228[4 * (v171 ^ 0x66)] ^ v374 ^ (v205 - 902395116) ^ (v284
                                                                                           - ((2 * v284 - 2069592106) & 0xCFF3D930)
                                                                                           + 709636227) ^ *(_DWORD *)&v227[4 * (BYTE2(v276) ^ 0xD7)];
  LODWORD(v171) = (v286 ^ 0x52) + (v286 & 0x67 ^ 0x87E0225) - ((v286 ^ 0x52) & 0x67);
  LODWORD(v170) = *(_DWORD *)&v217[4 * (HIBYTE(v288) ^ 0x54)];
  int v289 = (v171 & 0x40182 ^ 0x814D00) + (v171 ^ 0x990E20EE) - ((v171 ^ 0x990E20EE) & 0x10200182);
  HIDWORD(v117) = v170 ^ 0x4D;
  LODWORD(v117) = v170 ^ 0xED45B180;
  LODWORD(v171) = (v117 >> 7) - ((2 * (v117 >> 7)) & 0xD2F7364C);
  LODWORD(v170) = *(_DWORD *)&v217[4 * (BYTE3(v206) ^ 0xA8)];
  HIDWORD(v117) = v170 ^ 0x4D;
  LODWORD(v117) = v170 ^ 0xED45B180;
  int v290 = *(_DWORD *)&v217[4 * (HIBYTE(v287) ^ 0x72)];
  int v291 = (v117 >> 7) - ((2 * (v117 >> 7)) & 0x48BF9FFA);
  HIDWORD(v117) = v290 ^ 0x4D;
  LODWORD(v117) = v290 ^ 0xED45B180;
  LODWORD(v205) = (v117 >> 7) - ((2 * (v117 >> 7)) & 0x37C0D2AA);
  LODWORD(v170) = *(_DWORD *)&v215[4 * (BYTE1(v288) ^ 0x47)];
  int v292 = v170 - ((2 * v170 + 77891542) & 0x19742760);
  LODWORD(v170) = *(_DWORD *)&v215[4 * (BYTE1(v206) ^ 0xEF)];
  unsigned int v293 = ((BYTE2(v286) ^ 0x43) + 294763 - ((2 * (BYTE2(v286) ^ 0x43)) & 0xD6)) ^ 0x47FDC;
  int v294 = *(_DWORD *)&v215[4 * (BYTE1(v287) ^ 0x29)];
  int v295 = *(_DWORD *)&v215[4
                        * ((((2 * (BYTE1(v286) ^ 0xE4)) | 0x3B4E9CE6) - (BYTE1(v286) ^ 0xE4) + 1113108877) & 0x3FFFFFFF ^ 0x3DA74EB2)];
  int v296 = *(_DWORD *)&v217[4 * (HIBYTE(v286) ^ 0x36)];
  HIDWORD(v117) = v296 ^ 0x4D;
  LODWORD(v117) = v296 ^ 0xED45B180;
  LODWORD(v171) = *(_DWORD *)&v228[4 * (v289 ^ 0x81D56F45)] ^ HIDWORD(v370) ^ *(_DWORD *)&v227[4 * (BYTE2(v287) ^ 0x80)] ^ (v170 - ((2 * v170 + 77891542) & 0x215DFF46) - 754891890) ^ (v171 + 1769708326);
  unsigned int v297 = *(_DWORD *)&v228[4 * (v206 ^ 0xAE)] ^ HIDWORD(v372) ^ *(_DWORD *)&v227[4
                                                                                               * (BYTE2(v288) ^ 0xDE)] ^ ((v117 >> 7) - ((2 * (v117 >> 7)) & 0x4B42BE50) + 631332648) ^ (v294 - ((2 * v294 - 2069592106) & 0xD6854F28) - 1382749313);
  unsigned int v298 = *(_DWORD *)&v227[4 * v293] ^ HIDWORD(v371) ^ (v291 - 1537224707) ^ (v292 + 1326208923) ^ *(_DWORD *)&v228[4 * (v287 ^ 0x2B)];
  int v299 = *(_DWORD *)&v227[4 * (BYTE2(v206) ^ 0x5E)] ^ v372 ^ *(_DWORD *)&v228[4 * (v288 ^ 0x72)] ^ (v295 - ((2 * v295 - 2069592106) & 0xFB841B66) + 1075073438) ^ (v205 - 1679791787);
  LODWORD(v170) = ((2 * v299) ^ 0x9023D606) - ((2 * ((2 * v299) ^ 0x9023D606)) & 0x2811EBAC) - 1811352106;
  int v300 = (((v299 ^ 0xC811EB03) - 167673003) ^ 0xF7FE7F3B)
       + ((2 * ((v299 ^ 0xC811EB03) - 167673003)) & 0xEFFCFE76)
       + (v170 & 0xEC0306AA ^ 0x8405DEA3)
       + ((2 * v170) & 0xD8040914 ^ 0xF7FFF6FB);
  unsigned int v301 = v300 + 1 - 2 * ((v300 + 133932709) & 0xCD3352F ^ (v300 + 1) & 2) + 349101009;
  int v302 = *(_DWORD *)&v215[4 * (BYTE1(v297) ^ 0xE3)];
  LODWORD(v206) = v302 - ((2 * v302 + 77891542) & 0x1ACE5678);
  LODWORD(v170) = *(_DWORD *)&v215[4 * (BYTE1(v171) ^ 0xD7)];
  int v303 = v170 - ((2 * v170 + 77891542) & 0x16E5381A);
  int v304 = (v301 & 0x41 ^ 0x201) + (v301 & 0xBE ^ 0x1B);
  LODWORD(v170) = *(_DWORD *)&v215[4
                                 * ((908037111 - (BYTE1(v298) ^ 0xC8 | 0x361F8BF7) + (BYTE1(v298) ^ 0xC8 | 0x49E07408)) ^ 0x49E07467)];
  int v305 = *(_DWORD *)&v217[4 * (HIBYTE(v301) ^ 0x58)];
  HIDWORD(v117) = v305 ^ 0x4D;
  LODWORD(v117) = v305 ^ 0xED45B180;
  int v306 = *(_DWORD *)&v217[4 * (BYTE3(v171) ^ 0xFA)];
  int v307 = (v117 >> 7) - ((2 * (v117 >> 7)) & 0x8CAA3228);
  HIDWORD(v117) = v306 ^ 0x4D;
  LODWORD(v117) = v306 ^ 0xED45B180;
  int v308 = (v117 >> 7) - ((2 * (v117 >> 7)) & 0xA2D54008);
  LODWORD(v205) = *(_DWORD *)&v217[4 * (HIBYTE(v298) ^ 0x8A)];
  HIDWORD(v117) = v205 ^ 0x4D;
  LODWORD(v117) = v205 ^ 0xED45B180;
  int v309 = (v117 >> 7) - ((2 * (v117 >> 7)) & 0xB2B6C8FA);
  LODWORD(v205) = *(_DWORD *)&v215[4 * ((((v301 >> 8) & 0x9D ^ 0x381) + ((v301 >> 8) & 0x62 ^ 0x23) - 1) ^ 0x349)];
  int v310 = v205 - ((2 * v205 + 77891542) & 0x272C4B86);
  LODWORD(v205) = *(_DWORD *)&v217[4 * (HIBYTE(v297) ^ 0xE9)];
  HIDWORD(v117) = v205 ^ 0x4D;
  LODWORD(v117) = v205 ^ 0xED45B180;
  LODWORD(v205) = *(_DWORD *)&v228[4 * (v297 ^ 0x4F)] ^ v370 ^ (v170
                                                                               - ((2 * v170 - 2069592106) & 0xD9F94386)
                                                                               + 793699758) ^ (v308 + 1365942276) ^ *(_DWORD *)&v227[4 * (BYTE2(v301) ^ 0xD3)];
  unsigned int v311 = *(_DWORD *)&v227[4 * (BYTE2(v171) ^ 0x33)] ^ v371 ^ *(_DWORD *)&v228[4 * (v298 ^ 0xA3)] ^ ((v117 >> 7) - ((2 * (v117 >> 7)) & 0x2BA9DE78) + 366276412) ^ (v310 - 706188882);
  unsigned int v312 = *(_DWORD *)&v228[4 * ((v304 - 1) ^ 0x298)] ^ v369 ^ (v303 - 842735624) ^ *(_DWORD *)&v227[4
                                                                                                 * (BYTE2(v297) ^ 0xBA)] ^ (v309 + 1499161725);
  LODWORD(v170) = *(_DWORD *)&v227[4 * (BYTE2(v298) ^ 0xBB)] ^ HIDWORD(v369) ^ *(_DWORD *)&v228[4
                                                                                              * (v171 ^ 0x7F)] ^ (v206 + 1337552679);
  LODWORD(v171) = *(_DWORD *)&v217[4 * (HIBYTE(v311) ^ 0x39)];
  unsigned int v313 = v170 ^ (v307 + 1179982100);
  LODWORD(v170) = *(_DWORD *)&v215[4 * (BYTE1(v311) ^ 0x87)];
  HIDWORD(v117) = v171 ^ 0x4D;
  LODWORD(v117) = v171 ^ 0xED45B180;
  LODWORD(v206) = (v117 >> 7) - ((2 * (v117 >> 7)) & 0xF4441ECC);
  LODWORD(v171) = v170 - ((2 * v170 + 77891542) & 0x5DF346DC);
  LODWORD(v170) = *(_DWORD *)&v217[4 * (HIBYTE(v312) ^ 0xE4)];
  HIDWORD(v117) = v170 ^ 0x4D;
  LODWORD(v117) = v170 ^ 0xED45B180;
  int v314 = (v117 >> 7) - ((2 * (v117 >> 7)) & 0x17406B92);
  LODWORD(v170) = *(_DWORD *)&v217[4 * (HIBYTE(v313) ^ 0x86)];
  HIDWORD(v117) = v170 ^ 0x4D;
  LODWORD(v117) = v170 ^ 0xED45B180;
  LODWORD(v170) = *(_DWORD *)&v215[4 * (BYTE1(v312) ^ 0x26)];
  int v315 = *(_DWORD *)&v215[4 * (BYTE1(v205) ^ 0x72)];
  int v316 = v315 - ((2 * v315 + 77891542) & 0x4E34FC2A);
  unsigned int v317 = *(_DWORD *)&v217[4 * (BYTE3(v205) ^ 0xD)];
  unsigned int v318 = -131551103
       - (v311 ^ 0x262410EE | 0xF828B081)
       + (v311 ^ 0x262410EE | 0x7D74F7E);
  int v319 = *(_DWORD *)&v215[4 * (BYTE1(v313) ^ 0x78)];
  unsigned int v320 = (v314 - 1952434743) ^ v367 ^ *(_DWORD *)&v227[4 * (BYTE2(v311) ^ 0xEE)] ^ (v316 - 378748416) ^ *(_DWORD *)&v228[4 * (v313 ^ 0x9D)];
  LODWORD(v171) = *(_DWORD *)&v227[4 * (BYTE2(v312) ^ 0x5F)] ^ HIDWORD(v367) ^ (v171 + 1900799833) ^ ((v117 >> 7) - ((2 * (v117 >> 7)) & 0xD5761DC0) - 356839712) ^ *(_DWORD *)&v228[4 * (v205 ^ 0xDD)];
  unsigned int v321 = (v206 + 2049052518) ^ HIDWORD(v368) ^ *(_DWORD *)&v228[4 * (v312 ^ 0x92)] ^ *(_DWORD *)&v227[4 * (BYTE2(v205) ^ 0xE8)] ^ (v319 - ((2 * v319 + 77891542) & 0x14CC1AFA) - 860335768);
  unsigned int v322 = *(_DWORD *)&v227[4 * (BYTE2(v313) ^ 0x14)] ^ v368 ^ (v170 - ((2 * v170 - 2069592106) & 0xAE58A95C) + 427727001) ^ *(_DWORD *)&v228[4 * (v318 ^ 0x21F35FAE)] ^ (v317 >> 7) ^ (((v317 << 25) ^ 0x9A000000) - ((2 * ((v317 << 25) ^ 0x9A000000)) & 0x28000000) - 1783060146);
  LODWORD(v170) = *(_DWORD *)&v217[4 * (HIBYTE(v321) ^ 0x2A)];
  HIDWORD(v117) = v170 ^ 0x4D;
  LODWORD(v117) = v170 ^ 0xED45B180;
  int v323 = (v117 >> 7) - ((2 * (v117 >> 7)) & 0x4266F596);
  LODWORD(v205) = ((2 * (v321 ^ 0x64F748EA)) & 0x90C1184) - (v321 ^ 0x64F748EA);
  LODWORD(v170) = *(_DWORD *)&v217[4 * (BYTE3(v171) ^ 0xA2)];
  HIDWORD(v117) = v170 ^ 0x4D;
  LODWORD(v117) = v170 ^ 0xED45B180;
  int v324 = (v117 >> 7) - ((2 * (v117 >> 7)) & 0xFF9AB06A);
  LODWORD(v170) = *(_DWORD *)&v217[4 * (HIBYTE(v320) ^ 0xEF)];
  HIDWORD(v117) = v170 ^ 0x4D;
  LODWORD(v117) = v170 ^ 0xED45B180;
  int v325 = *(_DWORD *)&v215[4 * (BYTE1(v321) ^ 0x7B)];
  LODWORD(v206) = v325 - ((2 * v325 - 2069592106) & 0xB0521DC6);
  int v326 = (v117 >> 7) - ((2 * (v117 >> 7)) & 0x106C0178);
  LODWORD(v170) = *(_DWORD *)&v217[4 * (HIBYTE(v322) ^ 9)];
  HIDWORD(v117) = v170 ^ 0x4D;
  LODWORD(v117) = v170 ^ 0xED45B180;
  LODWORD(v217) = *(_DWORD *)&v227[4 * (BYTE2(v171) ^ 0xEF)];
  int v327 = *(_DWORD *)&v227[4 * (BYTE2(v320) ^ 0xC6)];
  int v328 = *(_DWORD *)&v227[4 * (BYTE2(v321) ^ 0xC3)];
  int v329 = *(_DWORD *)&v227[4
                        * (((BYTE2(v322) ^ 0xC4080C0)
                          + (HIWORD(v322) & 0xB ^ 0x1AD410B)
                          - ((BYTE2(v322) ^ 0xC4080C0) & 0x840800B)) ^ 0x5AD4191)];
  LODWORD(v227) = (1382575175 - (v322 ^ 0x6B | 0x52686C47) + (v322 ^ 0x6B | 0xAD9793B8)) ^ 0x1D9FB39C;
  int v330 = ((2 * v227) & 0x15473346) - v227;
  LODWORD(v227) = *(_DWORD *)&v215[4 * (BYTE1(v320) ^ 0xF3)];
  int v331 = *(_DWORD *)&v215[4 * ((((v322 >> 8) & 0x9E ^ 0x40F) + ((v322 >> 8) & 0x61) - 1) ^ 0x467)];
  LODWORD(v227) = v362 ^ v217 ^ *(_DWORD *)&v228[4 * ((v205 + 1803112509) ^ 0xF8E1885)] ^ (v227 - ((2 * v227 + 77891542) & 0x6601256E) - 179120478) ^ ((v117 >> 7) - ((2 * (v117 >> 7)) & 0x1F35C76A) - 1885674571);
  LODWORD(v170) = *(_DWORD *)&v215[4 * (BYTE1(v171) ^ 0xA1)];
  int v332 = *(_DWORD *)&v228[4 * (v320 ^ 0xDC)];
  LODWORD(v171) = v328 ^ HIDWORD(a16) ^ *(_DWORD *)&v228[4 * (v171 ^ 0x85)] ^ (v326 - 2009726788);
  int v333 = v323 + 557021899;
  unsigned int v334 = v171 ^ (v331 - ((2 * v331 - 2069592106) & 0xB4C00BDE) - 1666037286);
  LODWORD(v228) = v327 ^ v366 ^ (v206 + 444289742) ^ (v324 - 3319755) ^ *(_DWORD *)&v228[4
                                                                                       * ((v330 + 1968989788) ^ 0xC55446D9)];
  LODWORD(v217) = v332 ^ HIDWORD(v366) ^ v329 ^ (v170 - ((2 * v170 - 2069592106) & 0x89456510) - 2030766477) ^ v333;
  int v335 = *(_DWORD *)(v20 - 116);
  uint64_t v336 = (uint64_t)*(&off_1EF0E5660 + v335 - 1859);
  int v337 = *(_DWORD *)(v336 + 4 * (v217 ^ 0x5Au));
  LODWORD(v171) = (((2 * (v227 ^ 0xA6)) | 0xFC721054) - (v227 ^ 0xA6) - 2117666858) ^ 0x4A1A019A;
  LODWORD(v171) = *(_DWORD *)(v336 + 4 * ((((2 * v171) & 0x3BB904BA) - v171 - 500990558) ^ 0xD6007437));
  int v338 = *(_DWORD *)(v336 + 4 * (v334 ^ 0x88u));
  int v339 = *(_DWORD *)(v336 + 4 * (v228 ^ 0x44u));
  int32x4_t v340 = (char *)*(&off_1EF0E5660 + v335 - 1823) - 12;
  int v341 = *(_DWORD *)&v340[4
                        * ((((2 * (BYTE1(v217) ^ 0x46810E0)) | 0x2E7EEB94) - (BYTE1(v217) ^ 0x46810E0) + 1757448758) ^ 0x93576546)];
  uint64_t v342 = *(unsigned int *)&v340[4 * (((unsigned __int16)((unsigned __int16)v228 ^ 0xE1FA) >> 8) ^ 0xEF)];
  int v343 = *(_DWORD *)&v340[4
                        * ((1948629622 - (BYTE1(v227) ^ 0xB8C9E41 | 0x7425BA76) + (BYTE1(v227) ^ 0xB8C9E41 | 0x8BDA4589)) ^ 0x8056DB07)];
  LODWORD(v170) = *(_DWORD *)&v340[4 * (BYTE1(v334) ^ 0x7D)];
  int v344 = (char *)*(&off_1EF0E5660 + (v335 ^ 0x7FC)) - 12;
  int v345 = *(_DWORD *)&v344[4 * (((v228 ^ 0x6E16E1FA) >> 16) ^ 0xA4)];
  LODWORD(v178) = *(_DWORD *)&v344[4 * (BYTE2(v217) ^ 0xE)];
  LODWORD(v206) = *(_DWORD *)&v344[4 * (BYTE2(v334) ^ 0x72)];
  int v346 = *(_DWORD *)&v344[4
                        * (((BYTE2(v227) ^ 0x920041E5) - ((2 * (BYTE2(v227) ^ 0x920041E5)) & 0x4008222) + 1328086289) ^ 0xDD28BC53)];
  uint64_t v347 = (uint64_t)*(&off_1EF0E5660 + (int)v358);
  LODWORD(v344) = *(_DWORD *)(v347 + 4 * (HIBYTE(v334) ^ 0x54));
  LODWORD(v228) = *(_DWORD *)(v347 + 4 * ((v228 >> 24) ^ 0x6B));
  int v348 = *(_DWORD *)(v347 + 4 * ((v217 >> 24) ^ 0x27));
  LODWORD(v347) = *(_DWORD *)(v347 + 4 * ((v227 >> 24) ^ 0xFA));
  HIDWORD(v117) = v347 ^ 0x510;
  LODWORD(v117) = v347 ^ 0xC9D62000;
  LODWORD(v227) = v337 ^ HIDWORD(v362) ^ v170 ^ v345 ^ ((v117 >> 11) - ((2 * (v117 >> 11)) & 0x250F6494) + 310882890);
  LODWORD(v170) = ((v227 >> 7) & 0x22)
                + (((unsigned __int16)(v337 ^ WORD2(v362) ^ v170 ^ v345 ^ ((v117 >> 11)
                                                                                          - ((2 * (v117 >> 11)) & 0x6494)
                                                                                          - 19894)) >> 8) ^ 0xFFFFFF75)
                + 958936047;
  int v349 = (char *)*(&off_1EF0E5660 + SHIDWORD(a6)) - 4;
  v169[*(void *)(v20 - 256)] = v349[((v170 & 0x1003AD0 ^ 0x40868090)
                                     + (v170 ^ 0xA7183B6A)
                                     - ((v170 ^ 0xA7183B6A) & 0x9A301AD0)) ^ 0x4586B204] ^ 0xBC;
  HIDWORD(v117) = v344 ^ 0x510;
  LODWORD(v117) = v344 ^ 0xC9D62000;
  LODWORD(v177) = v361 ^ HIDWORD(a16) ^ v178 ^ v343 ^ v339 ^ ((v117 >> 11)
                                                                          - ((2 * (v117 >> 11)) & 0xA533BAF2)
                                                                          - 761668231);
  uint64_t v350 = (char *)*(&off_1EF0E5660 + (v335 ^ 0x780)) - 4;
  LODWORD(v170) = v350[BYTE3(v177) ^ 0xAFLL];
  HIDWORD(v117) = v170 ^ 0x10;
  LODWORD(v117) = (v170 ^ 0x40) << 24;
  LODWORD(v170) = (v117 >> 30) - ((2 * (v117 >> 30)) & 0xFFFFFF84) + 66;
  HIDWORD(v117) = v170 ^ 2;
  LODWORD(v117) = (v170 ^ 0x40) << 24;
  LODWORD(v170) = v117 >> 30;
  HIDWORD(v117) = v170 ^ 2;
  LODWORD(v117) = ((((2 * v170) & 0x50) - v170) << 24) - 687865856;
  v169[*(void *)(v20 - 216)] = ((v117 >> 26) - ((2 * (v117 >> 26)) & 0x30) - 104) ^ 7;
  HIDWORD(v117) = v228 ^ 0x510;
  LODWORD(v117) = v228 ^ 0xC9D62000;
  LODWORD(v170) = (v117 >> 11) - ((2 * (v117 >> 11)) & 0x185C42FC);
  HIDWORD(v117) = v348 ^ 0x510;
  LODWORD(v117) = v348 ^ 0xC9D62000;
  LODWORD(v228) = HIDWORD(v361) ^ v338 ^ v342 ^ v346 ^ ((v117 >> 11) - ((2 * (v117 >> 11)) & 0xEB1BA066) - 175255501);
  LODWORD(v347) = v350[(v227 >> 24) ^ 2];
  HIDWORD(v117) = v347 ^ 0x10;
  LODWORD(v117) = (v347 ^ 0x40) << 24;
  v169[*(void *)(v20 - 232)] = ((v117 >> 30) - ((2 * (v117 >> 30)) & 0x36) - 101) ^ 0xAA;
  LODWORD(v344) = v341 ^ v361 ^ v206 ^ (v170 + 204349822) ^ v171;
  unsigned int v351 = ((v344 & 0x98 ^ 0x4E0CD219) + (v344 & 0x67) - 1) ^ 0xCE1CDA9B;
  uint64_t v352 = (v351 - ((2 * v351) & 0x20003A) + 261100061) ^ 0x8F801A3BLL;
  unint64_t v353 = (char *)*(&off_1EF0E5660 + v335 - 1838) - 8;
  LODWORD(v352) = v353[v352];
  HIDWORD(v117) = v352 ^ 1;
  LODWORD(v117) = (v352 ^ 0xD8) << 24;
  v169[*(void *)(v20 - 224)] = ((v117 >> 26) - ((2 * (v117 >> 26)) & 0x64) - 78) ^ 0xE6;
  v169[*(void *)(v20 - 248)] = v349[(((2 * (BYTE1(v228) ^ 0x74)) & 0x2E) - (BYTE1(v228) ^ 0x74u) + 3048) ^ 0xB61] ^ 0x50;
  LODWORD(v352) = ((2 * (v228 ^ 0x72)) | 0xE767CC38) - (v228 ^ 0x72) + 206313956;
  LODWORD(v352) = v353[((v352 & 0x13FFE8A6 ^ 0x15C20A6)
                                       + (v352 ^ 0xF2A3DA10)
                                       - ((v352 ^ 0xF2A3DA10) & 0x13FFE8A6)) ^ 0x12EFD41F];
  HIDWORD(v117) = v352 ^ 1;
  LODWORD(v117) = (v352 ^ 0xD8) << 24;
  v169[*(void *)(v20 - 192)] = ((v117 >> 26) - ((2 * (v117 >> 26)) & 0xC8) + 100) ^ 0x4E;
  LODWORD(v352) = v350[(v228 >> 24) ^ 0xDLL];
  HIDWORD(v117) = v352 ^ 0x10;
  LODWORD(v117) = (v352 ^ 0x40) << 24;
  uint64_t v354 = *(void *)(v20 - 240);
  v169[v354] = (((v117 >> 30) - ((2 * (v117 >> 30)) & 0xE4) - 6) ^ 5) - 8;
  LODWORD(v352) = v353[(((2 * (v227 ^ 0x440190F6)) | 0x3E218DC2)
                                       - (v227 ^ 0x440190F6u)
                                       + 1626290463) ^ 0xDB1156DCLL];
  HIDWORD(v117) = v352 ^ 1;
  LODWORD(v117) = (v352 ^ 0xD8) << 24;
  v169[*(void *)(v20 - 200)] = ((v117 >> 26) - ((2 * (v117 >> 26)) & 0xA0) - 48) ^ 0x8A;
  LODWORD(v353) = v353[((v177 ^ 0x84C010DA)
                                       + (v177 & 0xF7 ^ 0x5312C025)
                                       - ((v177 ^ 0x84C010DA) & 0x44010F7)) ^ 0xD392C05ELL];
  HIDWORD(v117) = v353 ^ 1;
  LODWORD(v117) = (v353 ^ 0xD8) << 24;
  v169[*(void *)(v20 - 208)] = ((v117 >> 26) - ((2 * (v117 >> 26)) & 0x12) - 119) ^ 5;
  uint64_t v355 = (uint64_t)*(&off_1EF0E5660 + v335 - 1774);
  LOBYTE(v171) = ((*(unsigned char *)(v355
                            + (((BYTE2(v227) ^ 0x82250685) - ((2 * (BYTE2(v227) ^ 0x82250685)) & 0x40A09CC) - 954368794) ^ 0x45387AC4)) ^ BYTE2(v227)) & 0x69 ^ 0xF7)
               + ((2
                 * ((*(unsigned char *)(v355
                              + (((BYTE2(v227) ^ 0x82250685) - ((2 * (BYTE2(v227) ^ 0x82250685)) & 0x40A09CC) - 954368794) ^ 0x45387AC4)) ^ BYTE2(v227)) & 0x69)) ^ 0x3D)
               - 22;
  v169[*(void *)(v20 - 160)] = v171 & 0x2C ^ 0x28 ^ (((*(unsigned char *)(v355
                                                                  + (((BYTE2(v227) ^ 0x82250685)
                                                                    - ((2 * (BYTE2(v227) ^ 0x82250685)) & 0x40A09CC)
                                                                    - 954368794) ^ 0x45387AC4)) ^ BYTE2(v227) | 0x69)
                                                      - ((2
                                                        * (*(unsigned char *)(v355
                                                                    + (((BYTE2(v227) ^ 0x82250685)
                                                                      - ((2 * (BYTE2(v227) ^ 0x82250685)) & 0x40A09CC)
                                                                      - 954368794) ^ 0x45387AC4)) ^ BYTE2(v227) | 0x69)) & 0x9F)
                                                      + 79) ^ 0x63) & (v171 ^ 0xE9);
  LODWORD(v352) = ((BYTE2(v177) ^ 0x31) + (WORD1(v177) & 0x6D ^ 0x93239C4C) - ((BYTE2(v177) ^ 0x31) & 0x6D)) ^ 0x83BB5D4D;
  v169[*(void *)(v20 - 168)] = BYTE2(v177) ^ 0xC6 ^ *(unsigned char *)(v355
                                                               + ((((2 * v352) | 0x922E88D2)
                                                                 - v352
                                                                 + 921222039) ^ 0xD98F85B8));
  LODWORD(v352) = ((2 * (BYTE1(v177) ^ 0xF2)) | 0x8E9D6EC6) - (BYTE1(v177) ^ 0xF2) + 951142557;
  v169[*(void *)(v20 - 144)] = v349[((v352 & 0xF5621685 ^ 0x70400281)
                                     + (v352 ^ 0x872AB566)
                                     - ((v352 ^ 0x872AB566) & 0xF5621685)) ^ 0xB50614CDLL] ^ 0x40;
  v169[*(void *)(v20 - 136)] = BYTE2(v344) ^ 0x7B ^ *(unsigned char *)(v355
                                                               + (((BYTE2(v344) ^ 0x43)
                                                                 + ((v344 >> 16) & 0x8E ^ 0x17F8C)
                                                                 - ((BYTE2(v344) ^ 0x43) & 0x8E)) ^ 0x17F2E));
  LODWORD(v352) = (BYTE1(v344) ^ 0x5E)
                + ((v344 >> 8) & 0xF3 ^ 0x3E841DA1)
                - ((BYTE1(v344) ^ 0x5E) & 0xFFFFFFF3);
  v169[*(void *)(v20 - 176)] = v349[((v352 & 0x5B8 ^ 0x2723809) + (v352 & 0x247 ^ 0x84010043) - 1) ^ 0x86733DB7] ^ 8;
  LODWORD(v352) = ((v228 >> 16) & 0x65 ^ 0xFB313C45) + ((v228 >> 16) & 0x9A ^ 0x19) - 1;
  v169[*(void *)(v20 - 128)] = BYTE2(v228) ^ 0xF6 ^ *(unsigned char *)(v355
                                                               + (((v352 & 0x24FF ^ 0xC23840CB)
                                                                 + (v352 & 0x1B00 ^ 0x809801)
                                                                 - 1) ^ 0xC2B8E494));
  LODWORD(v355) = v350[(v344 >> 24) ^ 0xCFLL];
  HIDWORD(v117) = v355 ^ 0x10;
  LODWORD(v117) = (v355 ^ 0x40) << 24;
  v169[*(void *)(v20 - 184)] = ((v117 >> 30) - ((2 * (v117 >> 30)) & 0x99) - 52) ^ 0xB0;
  uint64_t v356 = v354 + 166222036 - 2 * ((v354 + 16) & *(_DWORD *)(v20 - 148));
  return (*(uint64_t (**)(uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *, char *, char *, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v387 + 8 * ((986 * ((v356 ^ 0x9E858C4) >= (int)a5 - 1250414292)) ^ (v335 - 1367))))(v354, 67, v350, 80, 3386253312, v342, v356, 1296, a2, a3, a4, a5, a6, v358, v359, v360, v361, v362, v138,
           v363,
           v364,
           v365,
           a16,
           v366,
           v367,
           v368,
           v369,
           v370,
           v371,
           v372,
           v373,
           v374,
           v375,
           v376,
           v377,
           v378,
           v379,
           v380);
}

void sub_19E7A8F24()
{
}

uint64_t sub_19E7A8F38(_DWORD *a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  unsigned int v1 = *a1 + 545147329 * ((a1 & 0x360E977D | ~(a1 | 0x360E977D)) ^ 0x6905A8EE);
  uint64_t v3 = *(void *)*(&off_1EF0E5660 + (int)(v1 + 1675821165));
  unsigned int v4 = (402930427 * (((&v3 | 0xE99A655B) - (&v3 & 0xE99A655B)) ^ 0xF32399E6)) ^ (v1 + 1675821406);
  return (*((uint64_t (**)(uint64_t *))*(&off_1EF0E5660 + (int)(v1 ^ 0x9C1CFFF6)) + (int)(v1 ^ 0x9C1CF69D) - 1))(&v3);
}

void sub_19E7A9048(_DWORD *a1)
{
  unsigned int v1 = 1431787901 * (a1 ^ 0x2B90AAD7);
  unsigned int v2 = *a1 + v1;
  int v3 = a1[7] ^ v1;
  if ((v3 & 0x30000000) == 0x10000000)
  {
    BOOL v5 = 1;
  }
  else
  {
    int v4 = ((2 * (v3 & 0x3F000000 ^ 0x3B000000)) & 0x44444444) - (v3 & 0x3F000000 ^ 0x3B000000) + 490572404;
    BOOL v5 = (v4 & 0x20000000 | v4 & 0xDF000000 ^ 0xC0220549) == -635304631;
  }
  int v6 = !v5;
  __asm { BRAA            X11, X17 }
}

uint64_t sub_19E7A9154@<X0>(int a1@<W7>, int a2@<W8>)
{
  return (*(uint64_t (**)(void))(v4
                              + 8
                              * (int)(((a1 + v5 + ((v3 + 1108685481) & 0xBDEACEED) - 1729 - 18)
                                     * ((-748294502 - a2 - v2 + 98) < 7)) | v3)))();
}

uint64_t sub_19E7A91B0@<X0>(int a1@<W8>)
{
  if (*(void *)v2) {
    BOOL v4 = (*(_DWORD *)(v2 + 12) ^ v1) == ((a1 - 753029266) & 0x2CE24BDF ^ 0x61E06C27) + ((a1 - 1395) | 0xC1);
  }
  else {
    BOOL v4 = 1;
  }
  int v5 = !v4;
  return (*(uint64_t (**)(void))(v3 + 8 * (((8 * v5) | (16 * v5)) ^ a1)))();
}

uint64_t sub_19E7A9218(uint64_t a1)
{
  return (*(uint64_t (**)(void))(v3
                              + 8
                              * ((83 * (v1 - a1 >= (unint64_t)(162 * (((v2 - 1835) | 0x2A0) ^ 0x2BDu)) - 1912)) ^ v2)))();
}

uint64_t sub_19E7A9260()
{
  int v4 = ((v2 + 953073334) & 0x4731457F ^ v0) + v1;
  if (v4 >= 0) {
    unsigned int v5 = ((v2 + 953073334) & 0x4731457F ^ v0) + v1;
  }
  else {
    unsigned int v5 = -v4;
  }
  return (*(uint64_t (**)(void))(v3 + 8 * ((111 * (v5 < 0x83)) ^ v2)))();
}

uint64_t sub_19E7A92A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  LODWORD(STACK[0xEB0]) = v8 - 1;
  unsigned int v12 = v8 - 357041634;
  int v13 = (int *)(STACK[0x210] + 24 * v12);
  int v14 = *v13;
  STACK[0x238] = *(void *)(STACK[0x218] + 24 * v12 + 16);
  LODWORD(STACK[0x260]) = v13[4];
  return (*(uint64_t (**)(void))(v10 + 8 * ((7 * (*(_DWORD *)(v9 + (v14 + a6) * (uint64_t)v11 + 36) != a7)) ^ v7)))();
}

uint64_t sub_19E7A9344()
{
  BOOL v4 = v1[8] == 0xAD0B52F2B779638 || (v1[7] | v1[2]) == 0;
  return (*(uint64_t (**)(void))(v2 + 8 * ((v4 * ((((v0 - 240) ^ 0x4A1) + 1423) ^ 0x7D7)) ^ (v0 - 240))))();
}

uint64_t sub_19E7A95AC(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v13 = v8 + v9 + v7 - v11 + ((a4 + 15) ^ (v5 + 223));
  *(void *)(v4 - 7 + v13) = *(void *)(a2 - 7 + v13);
  return (*(uint64_t (**)(void))(v12 + 8 * ((2342 * (v11 - (v6 & 0xFFFFFFF8) == -8)) ^ a4)))(v10 - (v6 & 0xFFFFFFF8));
}

uint64_t sub_19E7A9A50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  unsigned int v69 = ((((v66 + 1511687935) | 0xA00104A0) ^ 0x5AEDFC46)
       - (*v67 & 0x7FFFFFFE ^ 0x12F08500)
       + ((2 * (*v67 & 0x7FFFFFFE ^ 0x12F08500)) & 0xBE131AB4)) ^ 0xCE767FA6;
  v67[623] = v67[396] ^ *(_DWORD *)(v68 + 4 * ((*v67 & 1) == 0)) ^ (((v69 | (((((v66 - 67130464) & 0xFE1BDFFE)
                                                                               - 556521252) ^ v67[623] & 0x80000000)
                                                                             - 1342836998) & 0x80000000)
                                                                     - ((2 * v69) & 0x2582E6E0)
                                                                     + 314667889) >> 1) ^ 0x39551B77;
  return (*(uint64_t (**)(void))(a3 + 8 * ((37 * (a66 > 0x26F)) ^ v66)))();
}

void sub_19E7A9B54(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  int v1 = *(_DWORD *)a1 ^ (1305237457 * (((a1 | 0x2B4CB8D7) - a1 + (a1 & 0xD4B34728)) ^ 0x92F51E19));
  uint64_t v2 = *(void *)(a1 + 8);
  if (*(_DWORD *)(v2 - 0x7CF6A079DDC72530) - 263820150 >= 0) {
    unsigned int v4 = *(_DWORD *)(v2 - 0x7CF6A079DDC72530) - 263820150;
  }
  else {
    unsigned int v4 = 263820150 - *(_DWORD *)(v2 - 0x7CF6A079DDC72530);
  }
  uint64_t v3 = *(void *)(a1 + 24);
  if (*(_DWORD *)(v3 - 0x7CF6A079DDC72530) - 263820150 >= 0) {
    unsigned int v5 = *(_DWORD *)(v3 - 0x7CF6A079DDC72530) - 263820150;
  }
  else {
    unsigned int v5 = 263820150 - *(_DWORD *)(v3 - 0x7CF6A079DDC72530);
  }
  unsigned int v9 = v1 + 1431787901 * (&v8 ^ 0x2B90AAD7) - 725;
  uint64_t v8 = v2;
  int v6 = (char *)*(&off_1EF0E5660 + v1 - 1529) - 8;
  (*(void (**)(uint64_t *))&v6[8 * (v1 ^ 0xF77)])(&v8);
  if (v4 >= v5) {
    unsigned int v7 = (v5 ^ 0xBBDEDBFD) + 1844804816 + ((2 * v5) & 0x77BDB7FA);
  }
  else {
    unsigned int v7 = (v4 ^ 0xEFF57DEF) + 970906334 + ((2 * v4) & 0xDFEAFBDE);
  }
  __asm { BRAA            X9, X17 }
}

uint64_t sub_19E7A9E1C@<X0>(uint64_t a1@<X8>)
{
  *(unsigned char *)(v1 + (v5 + v3)) = *(unsigned char *)(a1 + (v5 + v3));
  return (*(uint64_t (**)(void))(v7 + 8 * (((v5 - 1 != v2) * v6) ^ v4)))();
}

uint64_t sub_19E7A9E48@<X0>(int a1@<W2>, uint64_t a2@<X4>, int a3@<W8>)
{
  return (*(uint64_t (**)(void))(v5
                              + 8
                              * ((680
                                * ((*(unsigned __int8 *)(a2 + 7) ^ v4)
                                 + v3
                                 + (((a1 + 277) ^ 0xB2) & (2 * *(unsigned __int8 *)(a2 + 7))) == a3)) ^ a1)))();
}

uint64_t sub_19E7A9E88@<X0>(int a1@<W2>, int a2@<W8>)
{
  BOOL v6 = (((v2 ^ v4) + 272) ^ (a2 + 620) ^ (((v2 ^ v4) + 610) | 3u)) + a1 < v3;
  return (*(uint64_t (**)(void))(v5 + 8 * (((8 * v6) | (32 * v6)) ^ v2 ^ v4)))();
}

void sub_19E7A9ED0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  (*(void (**)(uint64_t))(a8 + 8 * (v8 ^ 0xAC5)))(v9);
  LODWORD(STACK[0x51C]) = -694859505;
  JUMPOUT(0x19E7A9F0CLL);
}

void sub_19E7A9F58(uint64_t a1)
{
  int v1 = 653146051 * (((a1 | 0x7AF7B959) - a1 + (a1 & 0x850846A6)) ^ 0xD0E30CBB);
  __asm { BRAA            X14, X17 }
}

uint64_t sub_19E7AA024(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,int a24)
{
  return (*(uint64_t (**)(void))(v25 + 8 * ((102 * (a24 == (v24 ^ 0xA321AC07))) ^ v24)))();
}

uint64_t sub_19E7AA070()
{
  int v3 = (v2 - 273) | 0x404;
  int v4 = 527640300 - v1;
  if (v1 + 1883663498 <= (int)(v3 ^ 0xFFFFFBFB)) {
    int v4 = v1;
  }
  return (*(uint64_t (**)(void))(v0 + 8 * (((v4 - 263820151 >= 0) * ((5 * (v3 ^ 0x58A)) ^ 0x4E8)) ^ v3)))();
}

void sub_19E7AA110()
{
  *(_DWORD *)(v3 - 0x7CF6A079DDC72530) = (((v0 + v1) * (v2 - 486464888)) ^ 0x5FFBDBFE)
                                         - 1346521224
                                         + ((2 * (v0 + v1) * (v2 - 486464888)) & 0xBFF7B7FC);
}

uint64_t sub_19E7AA11C@<X0>(int a1@<W1>, unsigned int a2@<W2>, unsigned int a3@<W3>, int a4@<W7>, int a5@<W8>)
{
  if (a2 <= 0x40) {
    a2 = a3;
  }
  return (*(uint64_t (**)(void))(v6 + 8 * ((114 * (a4 - a1 >= a4 + a5 + v5 + a2)) ^ 0x4BDu)))();
}

void sub_19E7AA188(_DWORD *a1@<X8>)
{
  unsigned int v4 = (v3 ^ 0x8F9B2D8E)
     - 759844243 * (*(_DWORD *)(v1 + 20) - v2)
     - ((90924250 * (*(_DWORD *)(v1 + 20) - v2) + 45329412) & 0x1C82AC58);
  *int v5 = HIBYTE(v4) ^ 0xCF;
  v5[1] = BYTE2(v4) ^ 0x80;
  void v5[2] = BYTE1(v4) ^ 0x97;
  v5[3] = v4 ^ 0xED;
  *(_DWORD *)(v1 + 16) = *a1;
}

uint64_t sub_19E7AA23C@<X0>(uint64_t a1@<X0>, int a2@<W2>, int a3@<W8>)
{
  *(unsigned char *)(a1 + (v4 - 1201262005)) = *(unsigned char *)(v3 + (v4 - 1201262005)) - 124;
  return (*(uint64_t (**)(void))(v5
                              + 8
                              * (int)((19
                                     * (((((a2 + 366205962) & 0xEA2C23E6) - 260459174) & 0xF86493F ^ 0xFFFFFEC3) + v4 != a3)) ^ (a2 + 366205962) & 0xEA2C23E6)))();
}

uint64_t sub_19E7AA2B0(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  int v2 = 1575213817 * (((a1 | 0x702D6850) - a1 + (a1 & 0x8FD297AF)) ^ 0xFD48D89C);
  int v3 = *(_DWORD *)(a1 + 24) ^ v2;
  int v4 = *(_DWORD *)(a1 + 28) + v2;
  uint64_t v6 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  unsigned int v7 = 961177747 * ((&v10 + 1722009944 - 2 * (&v10 & 0x66A3C958)) ^ 0x41F13844);
  unsigned int v8 = (((*(_DWORD *)(a1 + 16) + v2) ^ 0xAC724A2D)
      + ((2 * (*(_DWORD *)(a1 + 16) + v2)) & 0x7BF777DE ^ 0x23136384)
      - 6291456) ^ v7;
  unsigned int v15 = v3 + v7 + 871892142;
  unsigned int v13 = v8;
  int v14 = -2109173797 * v4 - ((76619702 * v4 + 1997236390) & 0x6E86F9DA) + v7 - 221695680;
  uint64_t v10 = v5;
  uint64_t v12 = v6;
  uint64_t result = (*((uint64_t (**)(uint64_t *))*(&off_1EF0E5660 + (int)(v3 ^ 0xCC07FD38)) + (v3 & 0x11D80BBA) - 1))(&v10);
  *(_DWORD *)(a1 + 20) = v11;
  return result;
}

uint64_t sub_19E7AA45C(__n128 a1)
{
  STACK[0x958] = 0x7D0EF0C0623346A7;
  STACK[0x960] = v3;
  STACK[0x968] = v3;
  LODWORD(STACK[0x970]) = v4;
  *(__n128 *)(v2 + 1452) = a1;
  return (*(uint64_t (**)(unint64_t *, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, unint64_t *))(v5 + 8 * ((44 * (((v1 - 274793513) & 0x1061003D) == 85)) ^ v1)))(&STACK[0x29C], 0x5CF1A0FB9E997F7ALL, &STACK[0x298], 0x7C30A4ACD66016E7, &STACK[0x388], 0x21EFD7A02F1E92CALL, &STACK[0x2A0]);
}

uint64_t sub_19E7AA55C(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 8);
  unsigned int v2 = (*(_DWORD *)(result + 4) ^ (961177747 * ((result & 0xB495536F | ~(result | 0xB495536F)) ^ 0x6C385D8C)))
     - 448976308;
  unsigned int v3 = (((*(unsigned __int8 *)(v1 + v2) - ((2 * *(unsigned __int8 *)(v1 + v2)) & 0x2C)) << 24) - 1778384896) ^ 0x96000000;
  int v4 = *(unsigned __int8 *)(v1
                          + (*(_DWORD *)(result + 4) ^ (961177747
                                                      * ((result & 0xB495536F | ~(result | 0xB495536F)) ^ 0x6C385D8C)))
                          - 448976307);
  unsigned int v5 = (((v4 - ((2 * v4) & 0xFA)) << 16) - 2055405568) ^ 0x857D0000;
  unsigned int v6 = (v5 - ((2 * v5) & 0x45DE0000) - 1561343563) ^ 0xA2EFC9B5 | (v3 - ((2 * v3) & 0x68000000) - 1270509469) ^ 0xB4459063;
  int v7 = *(unsigned __int8 *)(v1
                          + (*(_DWORD *)(result + 4) ^ (961177747
                                                      * ((result & 0xB495536F | ~(result | 0xB495536F)) ^ 0x6C385D8C)))
                          - 448976306);
  unsigned int v8 = (((v7 - ((2 * v7) & 0x22222222)) << 8) - 231468800) ^ 0xF2341100;
  unsigned int v9 = (v6 - ((2 * v6) & 0xF59658D6) - 87348117) ^ 0xFACB2C6B | (v8 - ((2 * v8) & 0x2BE97400) - 705381654) ^ 0xD5F4BAEA;
  LODWORD(v1) = *(unsigned __int8 *)(v1
                                   + (*(_DWORD *)(result + 4) ^ (961177747
                                                               * ((result & 0xB495536F | ~(result | 0xB495536F)) ^ 0x6C385D8C)))
                                   - 448976305);
  *(_DWORD *)(result + 16) = (v9 - ((2 * v9) & 0xD9A3C010) + 1825693704) ^ 0x6CD1E008 | (v1
                                                                                       - ((2 * v1) & 0x18C)
                                                                                       - 1434853690) ^ 0xAA79DEC6;
  return result;
}

void sub_19E7AA6D8(uint64_t a1)
{
  int v1 = 545147329 * (((a1 | 0x895EFC0B) - a1 + (a1 & 0x76A103F4)) ^ 0x29AA3C67);
  __asm { BRAA            X9, X17 }
}

uint64_t sub_19E7AA824@<X0>(uint64_t a1@<X8>)
{
  v6[1] = v2
        - 291962093
        * (((v6 | 0x46FD7A87) - v6 + (v6 & 0xB9028578)) ^ 0x570F77CD)
        + 643;
  uint64_t v7 = a1;
  uint64_t result = (*(uint64_t (**)(_DWORD *))(v3 + 8 * (v2 + 1749)))(v6);
  *(_DWORD *)(v1 + 60) = v4;
  return result;
}

uint64_t sub_19E7AA884@<X0>(uint64_t a1@<X2>, int a2@<W8>, int8x16_t a3@<Q1>, int8x16_t a4@<Q4>, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int8x16_t a11, uint64_t a12, uint64_t a13, int32x4_t a14, int8x16_t a15, int8x16_t a16, int32x4_t a17, int8x16_t a18, int8x16_t a19, int32x4_t a20)
{
  int v23 = (const float *)(v20 + 908);
  int8x16_t v24 = (int8x16_t)vld1q_dup_f32(v23);
  a3.i64[0] = *(void *)(v20 + 912);
  a3.i32[2] = *(_DWORD *)(v20 + 920);
  int8x16_t v25 = vextq_s8(v24, a3, 0xCuLL);
  int8x16_t v26 = a3;
  v26.i32[3] = *(_DWORD *)(v20 + 4 * ((a2 - 192) ^ 0x3A4));
  int8x16_t v27 = (int8x16_t)vaddq_s32((int32x4_t)vandq_s8(v25, v22), a20);
  int32x4_t v28 = (int32x4_t)veorq_s8(vandq_s8(v26, a4), a19);
  int32x4_t v29 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v28, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v28, v28), a18)), a17), a16);
  v30.i32[0] = *(_DWORD *)(v21 + 4 * ((*(_DWORD *)(v20 + 912) & 1) == 0));
  v30.i32[1] = *(_DWORD *)(v21 + 4 * (~*(_DWORD *)(v20 + 916) & 1));
  v30.i32[2] = *(_DWORD *)(v21 + 4 * (~*(_DWORD *)(v20 + 920) & 1));
  v30.i32[3] = *(_DWORD *)(v21 + 4 * (~v26.i32[3] & 1));
  *(int8x16_t *)(v20 + 908) = veorq_s8(veorq_s8(veorq_s8(*(int8x16_t *)v20, v30), a11), (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vaddq_s32((int32x4_t)vorrq_s8((int8x16_t)v29, vandq_s8(v27, v22)), a14), (int32x4_t)vmvnq_s8(vandq_s8((int8x16_t)vaddq_s32(v29, v29), a15))), 1uLL));
  return (*(uint64_t (**)(void))(a1 + 8 * a2))();
}

uint64_t sub_19E7AA9A8(uint64_t a1, uint64_t a2, int a3, uint64_t a4, __int16 a5, int a6)
{
  return (*(uint64_t (**)(void))(v7
                              + 8
                              * ((273
                                * ((*(unsigned __int8 *)(v8 + 6) ^ a6)
                                 + (unsigned __int16)(a5 & (2 * *(unsigned __int8 *)(v8 + 6)))
                                 - 96 == (a3 ^ (v6 - 178)) - 1587553848)) ^ a3)))();
}

uint64_t sub_19E7AA9F4(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  return (*(uint64_t (**)(void))(v17
                                           + 8
                                           * ((227
                                             * (*(_DWORD *)(*a14 + 4 * (v16 + 1 + v15 + 334 * (a6 ^ 0x368))) != (((a6 - 620) | 0xA0) ^ (v14 + 98)))) ^ a6)))((a1 + 1));
}

uint64_t sub_19E7AAA04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  int v18 = v16 ^ 0x918;
  *(void *)(v17 - 128) = a14;
  *(void *)(v17 - 120) = v14;
  *(_DWORD *)(v17 - 132) = v18
                         + 291962093 * ((~((v17 - 136) | 0x29F56B36) + ((v17 - 136) & 0x29F56B36)) ^ 0xC7F89983)
                         - 1109;
  uint64_t v19 = (*(uint64_t (**)(uint64_t))(v15 + 8 * (v18 + 154)))(v17 - 136);
  BOOL v20 = *(_DWORD *)(v17 - 136) > ((5 * (v18 ^ 0x839) + 1096) | 5u) + 1002404564;
  return (*(uint64_t (**)(uint64_t))(v15 + 8 * (((2 * v20) | (4 * v20)) ^ v18)))(v19);
}

uint64_t sub_19E7AAA10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,int a47,uint64_t a48,int a49)
{
  BOOL v50 = ((a49 - ((a47 - 452494586) & 0xDEDF5FFE) + 1462550588) ^ 0xD8956440)
      + 2130690048
      + ((2 * (a49 - ((a47 - 452494586) & 0xDEDF5FFE) + 1462550588)) & 0x6FF5977E ^ 0x4ED5177E) == 922389439;
  return (*(uint64_t (**)(void))(v49 + 8 * (LODWORD(STACK[0x23C]) | (2 * v50) | (8 * v50))))();
}

uint64_t sub_19E7AAAD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, int a17)
{
  return (*(uint64_t (**)(void))(v19
                              + 8
                              * (((((((v20 - 2072727824 + ((v17 - 1318416290) & 0x4E956B9D)) & 0xFFFFFFFC)
                                   + 760719850
                                   - (((v17 - 1318416290) ^ 0xEBC5C53B) & (2
                                                                         * (v20
                                                                          - 2072727824
                                                                          + ((v17 - 1318416290) & 0x4E956B9D))))) ^ 0x2D57A9EA) == a17)
                                * v18) ^ v17)))();
}

void sub_19E7AAB48(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 8) ^ (402930427 * ((a1 + 1635560039 - 2 * (a1 & 0x617CAA67)) ^ 0x7BC556DA));
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = (char *)*(&off_1EF0E5660 + (v1 ^ 0x148)) - 8;
  (*(void (**)(char *, uint64_t (*)()))&v3[8 * (v1 ^ 0x9F8)])((char *)*(&off_1EF0E5660 + v1 - 129) - 4, sub_19E87FF5C);
  __asm { BRAA            X9, X17 }
}

uint64_t sub_19E7AAC10@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(void))(v4
                              + 8 * ((1159 * (*(_DWORD *)(v1 + 4 * (v5 + a1 + v3 - 766)) == v2)) ^ a1)))();
}

uint64_t sub_19E7AAC54()
{
  int v6 = (v0 - 562) | 0x308;
  *int v2 = v2[623];
  unint64_t v7 = STACK[0x250];
  int v8 = (v6 + 688889554) ^ STACK[0x250];
  *(_DWORD *)(v5 - 120) = v8 ^ 0x87;
  STACK[0x840] = (v3 - 1737288054) ^ v7;
  STACK[0x830] = STACK[0x248];
  *(_DWORD *)(v5 - 144) = v8;
  *(_DWORD *)(v5 - 140) = 2092386721 - v7 + v6;
  *(_DWORD *)(v5 - 152) = -(int)v7;
  *(_DWORD *)(v5 - 148) = v8 ^ 0xB9;
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(v4 + 8 * (v6 ^ v1)))(v5 - 152);
  return (*(uint64_t (**)(uint64_t))(v4 + 8 * *(int *)(v5 - 136)))(v9);
}

uint64_t sub_19E7AACFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t (*a14)(void))
{
  return a14();
}

uint64_t sub_19E7AAD08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  BOOL v20 = v19 + 1077437472 < (int)(a6 + 1496275939 + (v18 ^ 0x305) + 665);
  if (a6 > 0x26D09FD2 != v19 + 1077437472 < -651206611) {
    BOOL v20 = a6 > 0x26D09FD2;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 8 * ((401 * !v20) ^ v18)))(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
}

uint64_t sub_19E7AAD88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, int a15)
{
  a15 = v15 ^ (((&a14 + 82000299 - 2 * ((unint64_t)&a14 & 0x4E339AB)) ^ 0x143D8426) * v17);
  uint64_t v20 = (*(uint64_t (**)(int *))(v16 + 18808))(&a14);
  return (*(uint64_t (**)(uint64_t))(v16 + 8 * ((2687 * (a14 == v19)) ^ v18)))(v20);
}

uint64_t sub_19E7AADF4()
{
  *(_DWORD *)(*(void *)(v5 - 0x7CF6A079DDC7252CLL) + 4 * (v1 + v0 + 452)) = 188855981;
  return (*(uint64_t (**)(void))(v4 + 8 * ((377 * ((v1 + v0 + v2) > 0x7FFFFFFE)) ^ (v3 - 1666))))();
}

uint64_t sub_19E7AB060(__n128 a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(__n128 *)(v12 + ((v9 + a4) & (v11 + v14))) = a1;
  return (*(uint64_t (**)(void))(a9 + 8 * (((v13 != v14) * a3) ^ v10)))();
}

uint64_t sub_19E7AB090@<X0>(uint64_t a1@<X0>, unsigned int a2@<W5>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8 * ((427 * (a3 + 1 == v5 + 16)) ^ a2)))(a1, v3);
}

void sub_19E7AB28C(uint64_t a1)
{
  unint64_t v2 = (*(void *)(a1 + 24) ^ 0x7EFA7F3FD3F1E73FLL)
     - 0x7EFA7F3F5CB2DABBLL
     + ((2 * *(void *)(a1 + 24)) & 0xFDF4FE7FA7E3CE7ELL);
  unint64_t v3 = (*(void *)(a1 + 16) ^ 0xFBA76EF4FBF9CCDFLL)
     + 0x458910B7B453FA5
     + ((2 * *(void *)(a1 + 16)) & 0xF74EDDE9F7F399BELL);
  BOOL v4 = v2 < 0x773F0C84;
  BOOL v5 = v2 > v3;
  if (v4 != v3 < 0x773F0C84) {
    char v6 = v4;
  }
  else {
    char v6 = v5;
  }
  int v1 = *(_DWORD *)(a1 + 48) + 961177747 * (a1 ^ 0x2752F11C);
  __asm { BRAA            X3, X17 }
}

uint64_t sub_19E7AB470(uint64_t a1, uint64_t a2, int a3)
{
  *(unsigned char *)(a2 + (v4 + v6)) = *(unsigned char *)(v7 + (v4 + v6))
                                           - (v8 & (2 * *(unsigned char *)(v7 + (v4 + v6))))
                                           - 78;
  return (*(uint64_t (**)(void))(v9 + 8 * ((((v4 + v5) < 0x40) * a3) ^ (v3 - 248))))();
}

void sub_19E7AB4B8()
{
}

uint64_t sub_19E7AD2C8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(qword_1EF0E5890
                                            - 8
                                            + 8 * ((27 * (*(_DWORD *)(a2 + 4) == 2072727191)) | 0x2C4u)))(4294925278);
}

uint64_t sub_19E7AD30C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, int a8)
{
  int v16 = *(unsigned __int8 *)(*v15 + (a1 + a8)) ^ v14;
  unsigned int v17 = (((v16 - ((2 * v16) & 0xFFFFFFF3)) << 24) - 117440512) ^ 0xF9000000;
  int v18 = *(unsigned __int8 *)(*v15 + (a1 + a8 + 1)) ^ v14;
  int v19 = (((v18 - ((2 * v18) & 0x1AC)) << 16) + 768999424) ^ 0x2DD60000;
  unsigned int v20 = (v19 + 165382965 - ((2 * v19) & 0x13B60000)) ^ 0x9DB8B35 | (v17 + v10 - ((2 * v17) & 0xE3FFFFFF)) ^ v10;
  int v21 = *(unsigned __int8 *)(*v15 + (a1 + a8 + 2)) ^ v14;
  int v22 = (v9 + ((v21 - ((2 * v21) & 0x7A)) << 8)) ^ v9;
  unsigned int v23 = (v20 + v8 - ((2 * v20) & 0xE270DE92)) ^ v8 | (v22 + 1499223852 - ((2 * v22) & 0x32B8AE00)) ^ 0x595C572C;
  int v24 = *(unsigned __int8 *)(*v15 + (a1 + a8 + 3)) ^ v14;
  unsigned int v25 = (v23 + 1127416329 - ((2 * v23) & 0x86660412)) ^ 0x43330209 | (v24 + a6 - ((2 * v24) & 0x1E0)) ^ a6;
  return (*(uint64_t (**)(uint64_t, void, void))(v12 + 8 * (v13 - 1599)))(a1, (2 * v25) & 0x52D425B6, v25 + v11 - ((2 * v25) & 0x52D425B6));
}

uint64_t sub_19E7AD450@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(void))(a1 + 8 * (((v4 == ((v1 + 610 + v2) ^ (v1 - 708))) * v3) ^ v1)))();
}

uint64_t sub_19E7AD68C@<X0>(uint64_t a1@<X2>, int a2@<W8>)
{
  uint64_t v6 = 4 * (v4 - 705470139);
  unsigned int v7 = *(_DWORD *)(v3 + 4 * (v4 - 705470140));
  int v8 = (*(_DWORD *)(v3 + v6) ^ 0xC1C8CE44 ^ (1566083941 * (v7 ^ v2 ^ (v7 >> 30))
                                           - ((984684234 * (v7 ^ v2 ^ (v7 >> 30))) & 0x7B708C8E)
                                           + 1035486791))
     - v4;
  *(_DWORD *)(v3 + v6) = v8 - ((2 * v8 + 1410940278) & 0xF8E11006) + 645736126;
  unint64_t v9 = 1431787901 * ((((v5 - 248) | 0xFEAFA42A421CDC42) - ((v5 - 248) & 0xFEAFA42A421CDC42)) ^ 0xB8407CCC698C7695);
  int v10 = a2 + 2005517245 - v9;
  *(_DWORD *)(v5 - 248) = v10;
  *(void *)(v5 - 240) = (v4 - 1299678770) - v9;
  *(void *)(v5 - 232) = v9 ^ 0xDC951888;
  *(_DWORD *)(v5 - 224) = ((a2 + 2005517245) ^ 0xF8) - v9;
  *(_DWORD *)(v5 - 220) = v9 + 1;
  *(_DWORD *)(v5 - 216) = v10 - 136;
  *(_DWORD *)(v5 - 212) = -1295425711 - v9 + a2;
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(a1 + 8 * (a2 ^ 0xB76)))(v5 - 248);
  return (*(uint64_t (**)(uint64_t))(STACK[0x460] + 8 * *(int *)(v5 - 244)))(v11);
}

void sub_19E7AD7F4()
{
}

uint64_t sub_19E7AD858(double a1)
{
  *(double *)(v2 + v4) = a1;
  return (*(uint64_t (**)(void))(v6 + 8 * (((v5 == 0) * v3) ^ v1)))();
}

uint64_t sub_19E7ADA88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8
                              + 8
                              * ((((((v8 + 1111) ^ 0x4A7 ^ (v9 == 803204450)) & 1) == 0) * ((v8 - 413) ^ 0x84)) ^ (v8 + 1111))))();
}

void sub_19E7ADE04(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  int v1 = 1575213817 * (a1 ^ 0x8D65B0CC);
  int v2 = *(_DWORD *)(a1 + 52) ^ v1;
  int v3 = *(_DWORD *)(a1 + 32) - v1;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  unsigned int v6 = 402930427 * ((2 * (&v9 & 0x2BDEBB88) - &v9 + 1411466359) ^ 0x4E98B8CA);
  int v7 = 1353000299 * (*(_DWORD *)(a1 + 48) + v1) + 1850523597;
  uint64_t v9 = *(void *)a1;
  uint64_t v14 = v4;
  uint64_t v15 = v9;
  uint64_t v12 = v5;
  unsigned int v16 = v2 - 114530188 + v6;
  unsigned int v10 = v6 + (v7 ^ 0xBFDFE728) + ((2 * v7) & 0x7FBFCE50) + 1434214400;
  unsigned int v13 = v3 - 77748323 + v6;
  int v8 = (char *)*(&off_1EF0E5660 + v2 - 487) - 8;
  (*(void (**)(uint64_t *))&v8[8 * (v2 ^ 0xB6D)])(&v9);
  __asm { BRAA            X9, X17 }
}

uint64_t sub_19E7ADF88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11)
{
  BOOL v15 = v12 + 676417196 > 365512727 || v12 + 676417196 < a11 - 1781970920;
  return (*(uint64_t (**)(void))(v13 + 8 * ((100 * ((((v11 ^ 0xF) + 77) ^ v15) & 1)) ^ v11)))();
}

uint64_t sub_19E7AE124()
{
  int v5 = *(_DWORD *)(v1 + v2 * (uint64_t)v4 + 36) - 1910229478;
  BOOL v7 = v5 > (int)((61 * (v0 ^ 0x1B0) + 1607158274) & 0xA034B5FD ^ 0x6BBBD43A) || v5 < SLODWORD(STACK[0x20C]);
  return (*(uint64_t (**)(void))(v3 + 8 * ((1198 * v7) ^ v0)))();
}

uint64_t sub_19E7AE1A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int8x16_t *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45)
{
  v51.i64[0] = 0x8282828282828282;
  v51.i64[1] = 0x8282828282828282;
  *(int8x16_t *)(a2 + (v46 + v48)) = vaddq_s8(vsubq_s8(*a7, vandq_s8(vaddq_s8(*a7, *a7), v51)), v50);
  int v52 = *(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int8x16_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v49 + 8 * ((((((v47 - 8) + 0x1FFFFFA01) & (v45 + 1)) != 16) * (((4 * (v47 - 8)) ^ 0x14E0) - 836)) ^ (v47 - 8)));
  return v52(v52, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45);
}

uint64_t sub_19E7AE228@<X0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 24) = 0;
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * (((*(void *)(*(void *)v3 + 32) != 0) * ((17 * (v1 ^ 0x4D0)) ^ 0x481)) ^ v1)))();
}

uint64_t sub_19E7AE264(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  *(void *)(v71 - 216) = 0x4A1E106AD316A0B5;
  LODWORD(STACK[0x394]) = **(_DWORD **)(v69 + 8 * (v67 ^ 0x5DC)) - 458213052;
  uint64_t v72 = **(unsigned int **)(v69 + 8 * (v67 ^ 0x54E));
  uint64_t v73 = 653146051 * ((v70 - ((v71 - 192) | v70) + a67) ^ 0x5FB9380C9C1E302FLL);
  *(_DWORD *)(v71 - 160) = v67 + 1306729175 - v73 - 18;
  *(void *)(v71 - 168) = v72 ^ v73;
  *(_DWORD *)(v71 - 188) = (v67 + 1306729175) ^ v73;
  *(_DWORD *)(v71 - 184) = v73 + v67 - 373341890;
  *(void *)(v71 - 152) = 1672127575 - v73;
  *(_DWORD *)(v71 - 180) = (v67 + 1306729170) ^ v73;
  *(_DWORD *)(v71 - 176) = v73;
  uint64_t v74 = (*(uint64_t (**)(uint64_t))(v68 + 8 * (v67 + 871)))(v71 - 192);
  return (*(uint64_t (**)(uint64_t))(v68 + 8 * *(int *)(v71 - 192)))(v74);
}

uint64_t sub_19E7AE370()
{
  return (*(uint64_t (**)(void))(v0
                              + 8
                              * ((243
                                * (v1 <= ((LODWORD(STACK[0x25C]) - 693) | 0x94)
                                       + 1435509461
                                       + (STACK[0x200] & 0x2AD03FDC))) ^ (LODWORD(STACK[0x25C]) - 1408))))();
}

uint64_t sub_19E7AE3C4(int8x8_t a1, uint64_t a2, int a3, uint64_t a4)
{
  *(int8x8_t *)(a4 + v6) = vadd_s8(*(int8x8_t *)(v5 + v6), a1);
  return (*(uint64_t (**)(void))(v8 + 8 * (((v7 == 0) * v4) ^ a3)))();
}

uint64_t sub_19E7AE5FC@<X0>(uint64_t a1@<X8>)
{
  int v6 = (v3 - 910827505) & 0x364A1BDF;
  int v7 = v2 - (**(unsigned __int8 **)(v5 + 8) == (((v3 + 15) & 0xDF) + 35));
  int v8 = v1 + v6;
  *(_DWORD *)(*(void *)(v4 + 96) + 528) = 1595393043;
  *(_DWORD *)(*(void *)(v4 + 96) + 532) = 263820150;
  *(void *)(*(void *)(v4 + 96) + 536) = *(void *)(v4 + 96) + 544;
  uint64_t v9 = *(void *)(v5 + 8) + (*(_DWORD *)(v5 + 4) - v7);
  unsigned int v10 = 545147329
      * (((&v13 | 0xEF32BB2D) - &v13 + (&v13 & 0x10CD44D0)) ^ 0x4FC67B41);
  uint64_t v14 = *(void *)(v4 + 96) + 0x7CF6A079DDC72744;
  uint64_t v17 = v9;
  int v13 = (v7 - 255974107) ^ v10;
  int v16 = (v6 + 423) ^ v10;
  (*(void (**)(int *))(a1 + 8 * (v6 + 1383)))(&v13);
  int v11 = v15;
  *(void *)(*(void *)(v4 + 96) + 512) = *(void *)(v5 + 8) + (*(_DWORD *)(v5 + 4) - v7);
  return (v8 + v11 + 1723268417);
}

void sub_19E7AE96C(_DWORD *a1)
{
  unsigned int v1 = *a1 ^ (1001500783 * ((((2 * a1) | 0x16D4037A) - a1 + 1955987011) ^ 0xC1DEFE09));
  __asm { BRAA            X8, X17 }
}

void sub_19E7AEA54()
{
}

uint64_t sub_19E7AEA5C()
{
  return (*(uint64_t (**)(void))(v2
                              + 8 * (((((v0 ^ 0x3DC) + 188) ^ 0x5ED) * ((v1 + v3) < 0x7FFFFFFE)) ^ v0)))();
}

uint64_t sub_19E7AEA9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,unsigned __int8 *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,int a63)
{
  a47[71] = BYTE1(a5) ^ 0xCD;
  int v69 = (((((a56 - 356) | 0x227) ^ 0x58) + (HIWORD(a5) & 0xFFD0 ^ 0xFFFFFFB9)) ^ 0xFFFFFFF8 | HIWORD(a5) & 0x2F) ^ 0x20;
  a47[23] = (v69 - 2 * (v69 & 0xF3 ^ BYTE6(a5) & 2) - 15) ^ 0xF1;
  a47[48] = BYTE3(a5) ^ 0x9D;
  a47[6] = BYTE2(v64) ^ 0xD3;
  a47[123] = BYTE5(a5);
  *(unsigned char *)(a45 + 68) = BYTE2(a5) ^ 0xDA;
  int v70 = ((HIWORD(v64) & 0x5C ^ 0x48 | 0x2C) - (HIWORD(v64) & 0x5C ^ 0x48 | 0xFFFFFFD3) - 45) ^ 0x1C;
  char v71 = (v70 | 0x46) - (v70 | 0xB9);
  a47[82] = a5 ^ 0x21;
  uint64_t v72 = v65 ^ 0x1EF4EE78FC54762ALL;
  uint64_t v73 = 2 * ((a35 - a37) ^ 0xC52E03C7);
  unint64_t v74 = ((a35 - a37) ^ 0x99C05794C7243363) - (v73 & 0x1FBEB9EB6) + 0x663FA86BFDF5CF5CLL + v72;
  unint64_t v75 = v74 ^ 0xDE2EEE9D7E4769F3;
  unint64_t v76 = (2 * v74) & 0xBC5DDD3AFC8ED3E6;
  *(unsigned char *)(a45 + 51) = BYTE4(a5) ^ 0xDD;
  int v77 = ((2 * v67) & 0x5DEFEBDC ^ 0x4C85E21C) + (v67 ^ 0xD8B504E0);
  char v79 = (v71 - 71) ^ 0x6A | ((BYTE6(v64) & 0xA3 ^ 0xFD) + ((2 * (BYTE6(v64) & 0xA3)) | 0x36) + 102) ^ 0x99;
  unsigned int v80 = v77 - ((2 * v77 - 1576004564) & 0xC810FE64) - 1257207480;
  *(unsigned char *)(a45 + 62) = HIBYTE(a5) ^ 0x7C;
  a47[90] = (v79 - ((2 * v79) & 0x2C) + 22) ^ 0x16;
  if ((v67 & 4) != 0)
  {
    unsigned int v82 = v80;
  }
  else
  {
    int v78 = ((2 * v67) & 0xFEBFFF7C ^ 0xEC85E21C) + (v67 ^ 0x91D0EB0);
    unsigned int v82 = v78 - ((2 * v78 + 20972156) & 0xC810FE64) - 458719120;
  }
  unsigned int v83 = (((v82 ^ 0x9BF780C9) + 59) ^ 0xF7) + ((2 * ((v82 ^ 0x9BF780C9) + 59)) & 0xEE) + 9;
  *(unsigned char *)(a45 + 92) = BYTE4(v64) ^ 0x95;
  char v84 = 2 * (((2 * ((v82 ^ 0x36) - 59)) & 0x7E) + (((v82 ^ 0x36) - 59) ^ 0xBF) + 65);
  int v81 = ((((HIBYTE(v64) & 2) + (~HIBYTE(v64) & 0xFFFFFF96)) | 0x61) - (~HIBYTE(v64) & 2)) ^ 0x71;
  a47[98] = ((((v81 | 0xEC) - (v81 | 0x13) + 19) ^ 0xEC | HIBYTE(v64) & 0x69 ^ 0x61)
           - ((2 * (((v81 | 0xEC) - (v81 | 0x13) + 19) ^ 0xEC | HIBYTE(v64) & 0x69 ^ 0x61)) & 0x60)
           + 48) ^ 0x30;
  a47[126] = v64 ^ 0x6A;
  *(unsigned char *)(a45 + 7) = BYTE1(v64) ^ 0x1F;
  unsigned int v85 = (((((2 * ((v82 ^ 0x64087F36) + 197)) & 0xEBB6F77E) + (((v82 ^ 0x64087F36) + 197) ^ 0x75DB7BBF) + 65) & 0x60)
       - (v84 & 0x40)
       - 989479126) ^ 0xC505BF2A | ((v83 & 0x9F) - ((2 * v83) & 0x124) - 1213697838) ^ 0xB7A870D2;
  a47[76] = BYTE3(v64) ^ 0x4D;
  a47[34] = BYTE5(v64) ^ 0xFD;
  char v86 = *(unsigned char *)(a41 + ((v85 - 1992220901 - ((2 * v85) & 0x12823F36) + 128) ^ 0x89411F1B)) ^ 0x1D;
  char v87 = (((2 * ((v82 ^ 0x36) - 59)) & 0x7E) + (((v82 ^ 0x36) - 59) ^ 0xBF) - (v84 & 0x68) + 117) ^ 5;
  int v88 = (109 * (BYTE1(v67) ^ 0xF1) - ((-38 * (BYTE1(v67) ^ 0xF1)) & 0xBF) + 95) ^ 0xE5;
  a47[3] = ((v86 & v87) - ((2 * (v86 & v87)) & 0xE0) - 16) ^ ((v86 | v87) - ((2 * (v86 | v87)) & 0xC8) + 100) ^ 0x94;
  unint64_t v89 = (v73 & 0x1FDCAFFEELL) + ((a35 - a37) ^ 0x7DFE7ECA3BCB7C30) + v75 + v76;
  uint64_t v90 = v89 - ((2 * v89 + 0x47A5252F05A62C2CLL) & 0x58462C013766CAB4) - 0x300A5767E1798490;
  unsigned int v91 = *(unsigned __int8 *)(a3 + ((((2 * v88) | 0xE34F7EA8) - v88 - 1906818900) ^ 0x71A7BF68));
  a47[62] = BYTE2(v67) ^ 0x42;
  *(unsigned char *)(a45 + 59) = HIBYTE(v68) ^ 0xE7;
  int v92 = (((v91 >> 2) & 4) - ((v91 >> 3) & 0x1B) - 103) ^ v91;
  a47[56] = BYTE3(v67) ^ 0x76;
  *(unsigned char *)(a45 + 34) = BYTE4(v67) ^ 0x33;
  a47[50] = BYTE6(v67) ^ 0xE0;
  *(unsigned char *)(a45 + 25) = BYTE5(v67) ^ 0x31;
  HIDWORD(v93) = v92 ^ 3;
  LODWORD(v93) = (v92 ^ 0x30) << 24;
  int v94 = (((v66 >> 40) & 0x1C ^ 0xC) - ((2 * ((v66 >> 40) & 0x1C ^ 0xC)) & 0x18) - 19) ^ 0xFFFFFFEB;
  int v95 = ((v94 & 0xFFFFFFB8) - (v94 | 0xFFFFFFB9)) ^ 0x45 | (((v66 >> 40) & 0xFFFFFFE3 ^ 0x39)
                                                          - ((2 * ((v66 >> 40) & 0xFFFFFFE3 ^ 0x39)) & 0x66)
                                                          + 51) ^ 0x2B;
  a47[119] = ((v93 >> 28) + ((2 * (v93 >> 28)) & 0x80) + 64) ^ 0x40;
  int v96 = *(unsigned __int8 *)(a39
                           + ((((((v66 ^ 0x88) + 20) ^ 0xBC) + ((2 * ((v66 ^ 0x88) + 20)) & 0x78) + 68)
                             - ((2
                               * ((((v66 ^ 0x5CD07688) + 20) ^ 0xBC)
                                + ((2 * ((v66 ^ 0x5CD07688) + 20)) & 0x78)
                                + 68)) & 0x44)
                             - 0x7835625D1863FEDELL) ^ 0x87CA9DA2E79C0156));
  *(unsigned char *)(a45 + 3) = BYTE4(v66) ^ 0x5A;
  a47[11] = BYTE1(v66) ^ 0x76;
  *(unsigned char *)(a45 + 108) = BYTE2(v66) ^ 0xD0;
  HIDWORD(v93) = v96 ^ 0x20;
  LODWORD(v93) = ~v96 << 24;
  *(unsigned char *)(a45 + 28) = ((v93 >> 30) - ((2 * (v93 >> 30)) & 0x44) - 94) ^ 0xA2;
  *(unsigned char *)(a45 + 83) = BYTE6(v66) ^ 0x7F;
  *(unsigned char *)(a45 + 70) = BYTE6(v90) ^ 0x23;
  a47[14] = BYTE2(v90) ^ 0xB3;
  *(unsigned char *)(a45 + 49) = HIBYTE(v90) ^ 0x2C;
  *(unsigned char *)(a45 + 100) = (v95 - ((2 * v95) & 0x16) + 11) ^ 0xB;
  *(unsigned char *)(a45 + 63) = BYTE4(v90);
  *(unsigned char *)(a45 + 103) = v90 ^ 0x5A;
  *(unsigned char *)(a45 + 88) = BYTE5(v90) ^ 0x16;
  a47[21] = BYTE3(v90) ^ 0x9B;
  a47[93] = BYTE1(v90) ^ 0x65;
  a47[80] = BYTE3(v66) ^ 0x5C;
  *(unsigned char *)(a45 + 54) = HIBYTE(v66) ^ 0x26;
  *(_DWORD *)(*(void *)a43 + 8) = ((a33 + 1) ^ 0xBFFBF75F) + 1074006177 + ((2 * (a33 + 1)) & 0x7FF7EEBE);
  LODWORD(v90) = *(_DWORD *)(a45 + 112) + 237879642 - ((2 * *(_DWORD *)(a45 + 112)) & 0x1C5B82B4);
  int v97 = (v90 ^ 0xF1D23EA5) + 1371506247 - ((2 * (v90 ^ 0xF1D23EA5) + 4) & 0xA37F0C8E) + 2;
  LODWORD(a60) = v90 ^ 0xE2DC15A;
  int v98 = 2 * (((v97 ^ 0x51BF8647) & (v90 ^ 0xE2DC15A)) - ((2 * ((v97 ^ 0x51BF8647) & (v90 ^ 0xE2DC15A))) & 0x3F168D40))
      + 1058442560;
  int v99 = (v90 ^ 0x5F92471D ^ v97) + (v98 ^ 0x19B62B6) - 1049489398 + ((2 * v98) & 0x7D1BDFEC ^ 0x7C091A80);
  uint64_t v148 = v90 ^ 0x2A552C23 ^ (v99 - ((2 * v99) & 0x48F1DAF0) + 611904888);
  unint64_t v100 = (((unint64_t)(a47[99] - ((2 * a47[99]) & 0x62u) + 104) << 56) - 0x3700000000000000) ^ 0x3100000000000000;
  unint64_t v101 = v100 - ((2 * v100) & 0xAC00000000000000) + 0x56439DFDF8A1DA73;
  unint64_t v102 = (((unint64_t)(a47[36] - ((2 * a47[36]) & 0xFF7Fu) + 55500) << 48) - 0xD000000000000) ^ 0xD8BF000000000000;
  uint64_t v103 = v102 - ((2 * v102) & 0x29B0000000000000) - 0x6B27307DBE826363;
  unint64_t v104 = (((unint64_t)(a47[26] - ((2 * a47[26]) & 0x1DAu) - 1681363162) << 32) - 0x3900000000) ^ 0x9BC86EED00000000;
  unint64_t v105 = (v104 - ((2 * v104) & 0x6C3F666000000000) - 0x49E04CCF07955986) ^ 0xB61FB330F86AA67ALL;
  uint64_t v106 = (((*a47 - ((2 * *a47) & 0x9CLL)) << 24) + 0x47ECBB864E000000) ^ 0x47ECBB864E000000;
  unint64_t v107 = (v106 - ((2 * v106) & 0x11C3DBD8E4000000) - 0x771E12138DF492BALL) ^ 0x88E1EDEC720B6D46;
  unint64_t v108 = (((a47[40] - ((2 * a47[40]) & 0xEALL)) << 8) - 0x34DA4BC9EDD48B00) ^ 0xCB25B436122B7500;
  uint64_t v109 = (v108 - ((2 * v108) & 0x9DE3D4F457B2C00) + 0x4EF1EA7A2BD962CLL) ^ 0x4EF1EA7A2BD962CLL;
  LODWORD(v108) = (*(unsigned __int8 *)(a45 + 91) >> 2) | (*(unsigned __int8 *)(a45 + 91) << 6);
  uint64_t v110 = (uint64_t)*(&off_1EF0E5660 + (int)(a56 ^ 0x194));
  uint64_t v111 = v110 + 529;
  unsigned __int8 v112 = *(unsigned char *)(v110 + 529 + ((v108 - ((2 * v108) & 0xD8) - 20) ^ 0x43));
  unint64_t v113 = v109 | (((v112 ^ 0x49) - 73) - 2 * (((v112 ^ 0x49) - 73) & 0xF) - 0x3CF59B629E40C0F1) ^ 0xC30A649D61BF3F0FLL;
  uint64_t v114 = (v113 - ((2 * v113) & 0x5DE9A3394BC6183CLL) + 0x2EF4D19CA5E30C1ELL) ^ 0x2EF4D19CA5E30C1ELL | v107;
  uint64_t v115 = (((a47[110] - ((2 * a47[110]) & 0x16)) << 16) + 0x2E4683D9870B0000) ^ 0x2E4683D9870B0000;
  unint64_t v116 = (v114 - ((2 * v114) & 0x43909F1486BCF4FELL) + 0x21C84F8A435E7A7FLL) ^ 0x21C84F8A435E7A7FLL | (v115 - ((2 * v115) & 0x4E62EFC3B1DE0000) - 0x18CE881E2710953BLL) ^ 0xE73177E1D8EF6AC5;
  unint64_t v117 = (v116 - ((2 * v116) & 0x4E103473DF867F2ELL) - 0x58F7E5C6103CC069) ^ 0xA7081A39EFC33F97 | v105;
  unint64_t v118 = (((unint64_t)(a47[53] - ((2 * a47[53]) & 0x170u) + 7726291) << 40) - 0x1B0000000000) ^ 0x75E4B80000000000;
  uint64_t v119 = v103 ^ v101 ^ (v118 - ((2 * v118) & 0x4687600000000000) + 0x6343B07C002C64F0) ^ (v117
                                                                                            - ((2 * v117) & 0x34CF56E06721BF08)
                                                                                            - 0x6598548FCC6F207CLL);
  unint64_t v120 = (((unint64_t)(a47[129] - ((2 * a47[129]) & 0x140u) + 7095211) << 40) - 0xB0000000000) ^ 0x6C43A00000000000;
  unint64_t v121 = (((unint64_t)(a47[57] - ((2 * a47[57]) & 0xA4u) + 70801) << 46) - 0xFC00000000000) ^ 0x4514800000000000;
  unint64_t v122 = (((unint64_t)(a47[61] - ((2 * a47[61]) & 0xCAu) + 9811347) << 38) - 0xB8000000000) ^ 0x256D594000000000;
  uint64_t v123 = (((*(unsigned __int8 *)(a45 + 14) - ((2 * *(unsigned __int8 *)(a45 + 14)) & 0x30)) << 30)
        + 0x18D6FD0600000000) ^ 0x18D6FD0600000000;
  unint64_t v124 = (v123 - ((2 * v123) & 0x382129E400000000) - 0x63EF6B0DD90CA5B4) ^ 0x9C1094F226F35A4CLL | (v122 - ((2 * v122) & 0x785E1F0000000000) - 0x3D0F04B34AFF47BLL) ^ 0xFC2F0FB4CB500B85;
  unint64_t v125 = (v124 - ((2 * v124) & 0x50FCA165498E14CALL) + 0x687E50B2A4C70A65) ^ 0x687E50B2A4C70A65 | (v121 - ((2 * v121) & 0x5967800000000000) - 0x534C2269EF1BADCDLL) ^ 0xACB3DD9610E45233;
  uint64_t v126 = v125 - ((2 * v125) & 0x1276D148442F096ELL) + 0x93B68A4221784B7;
  unint64_t v127 = (((unint64_t)(*(unsigned __int8 *)(a45 + 42) - ((2 * *(unsigned __int8 *)(a45 + 42)) & 0xACu) + 353) << 54)
        - 0x2C0000000000000) ^ 0x5580000000000000;
  unint64_t v128 = ((((v126 & 0x52BA52D33FFFFFFFLL ^ 0xAD7FEDACE21784B7)
          - 0x72F82AC0C9871458
          + ((2
            * ((v126 & 0x52BA52D33FFFFFFFLL ^ 0xAD7FEDACE21784B7) & 0x250133678EBAFLL ^ (v126 | 0x7FFFFFFFFFFFFFF7))) ^ 0x1A0B0A5800000011)) ^ (v127 - ((2 * v127) & 0x3580000000000000) + 0x1AE401306E510FA6) ^ ((((v126 & 0x5AD2CC0000000 ^ 0x212080000000) - ((2 * (v126 & 0x5AD2CC0000000 ^ 0x212080000000)) & 0x8480080000000) + 0x681E3450407E96B2) ^ 0x540608AC46B76D83) - 1)) >> 30) ^ 0xFE6A1C8EAFEB87DFLL;
  unint64_t v129 = (((unint64_t)(*(unsigned __int8 *)(a45 + 78)
                            - ((2 * *(unsigned __int8 *)(a45 + 78)) & 0xFF03u)
                            - 1639227464) << 32)
        - 0x3700000000) ^ 0x9E4B5F8100000000;
  unint64_t v130 = (((unint64_t)(*(unsigned __int8 *)(a45 + 37) - ((2 * *(unsigned __int8 *)(a45 + 37)) & 0xBCu) + 59239) << 48)
        - 0x9000000000000) ^ 0xE75E000000000000;
  unint64_t v131 = (v120 - ((2 * v120) & 0x6D82EA0000000000) - 0x493E8A9A4A28BA5ALL) ^ (v129
                                                                              - ((2 * v129) & 0xDF66E3A00000000)
                                                                              + 0x6FB371D49974050) ^ 0xB86E32434A48BAEFLL ^ (v128 - 0x9C1934AFCE1F455 + ((2 * v128) & 0x2063C1754 ^ 0x13ABE6F7FFFFFFFFLL)) | (v130 - ((2 * v130) & 0x2078000000000000) - 0x2FC30C907A8E5A52) ^ 0xD03CF36F8571A5AELL;
  unint64_t v132 = (((unint64_t)(a47[113] - ((2 * a47[113]) & 0xB4u) + 220) << 56) - 0x200000000000000) ^ 0xDA00000000000000;
  uint64_t v149 = v110 + 270;
  unint64_t v133 = ((unint64_t)(a47[78] - ((2 * a47[78]) & 0xAu) + 34) << 56) - 0x1D00000000000000;
  LODWORD(v90) = *(unsigned __int8 *)(v110
                                    + 529
                                    + ((((*(unsigned char *)(a45 + 109) >> 2) | (*(unsigned char *)(a45 + 109) << 6))
                                                       - ((*(unsigned char *)(a45 + 109) >> 1) & 0x30)
                                                       + 24) ^ 0xB7));
  int v134 = v90 + (((v90 ^ 0xFFFFFFB6) + 1) ^ 0xFFFFFFFB) + ((2 * ((v90 ^ 0xFFFFFFB6) + 1)) & 0xFFFFFFF7) + 5;
  int v135 = ((v134 + (~(2 * v134) | 0xFFFFFFB1) - 88) ^ 0x59) + v90;
  int v136 = (v135 ^ 0x7B) + ((2 * v135) & 0xF6) + 60;
  unint64_t v137 = (((unint64_t)(v136 - ((2 * v136) & 0x120u) + 35222) << 48) - 0x6000000000000) ^ 0x8990000000000000;
  unint64_t v138 = (((unint64_t)(a47[105] - ((2 * a47[105]) & 0x1B8u) + 1231921174) << 32) - 0x3A00000000) ^ 0x496D9FDC00000000;
  unint64_t v139 = (((*(unsigned __int8 *)(a45 + 29) - ((2 * *(unsigned __int8 *)(a45 + 29)) & 0x12CLL)) << 24)
        - 0x12F192776A000000) ^ 0xED0E6D8896000000;
  unint64_t v140 = (((a47[115] - ((2 * a47[115]) & 0x162)) << 16) - 0x21DFE1DD7D4F0000) ^ 0xDE201E2282B10000;
  LODWORD(v110) = *(unsigned __int8 *)(v110 + (a47[13] ^ 0x5BLL) + 10);
  LODWORD(v110) = (v110 ^ 0xFFFFFF80) - ((2 * v110 + 74) & 0xFFFFFFB6);
  LODWORD(v110) = ((110 * (v110 ^ 0xFFFFFFE5 ^ (v110 >> 3) & 0xE)) & 0xFFFFFFEF)
                + ((-73 * (v110 ^ 0xFFFFFFE5 ^ (v110 >> 3) & 0xE)) ^ 0x77)
                - 119;
  unint64_t v141 = (((v110 - ((2 * (int)v110) & 0x2ELL)) << 8) - 0x556953C9670CE900) ^ 0xAA96AC3698F31700;
  unint64_t v142 = (v141 - ((2 * v141) & 0x68BE6475583EC200) + 0x345F323AAC1F61AALL) ^ 0x345F323AAC1F61AALL | (a47[66] - ((2 * a47[66]) & 0x1ACLL) - 0xD30A67B8CC2B92ALL) ^ 0xF2CF5984733D46D6;
  unint64_t v143 = (v142 - ((2 * v142) & 0x57768CC07DB71F00) - 0x5444B99FC1247080) ^ 0xABBB46603EDB8F80 | (v140 - ((2 * v140) & 0xCFDC1160C000000) + 0x67EE08B060046C2) ^ 0x67EE08B060046C2;
  unint64_t v144 = (v143 - ((2 * v143) & 0xE2CD247423A6414) - 0x78E996DC5EE2CDF6) ^ 0x87166923A11D320ALL | (v139 - ((2 * v139) & 0x46C14452F8000000) + 0x6360A2297C877A42) ^ 0x6360A2297C877A42;
  uint64_t v145 = (v144 - ((2 * v144) & 0xAC6895AABB7E6DELL) + 0x56344AD55DBF36FLL) ^ 0x56344AD55DBF36FLL | (v138
                                                                                                  - ((2 * v138) & 0x710A3B0000000000)
                                                                                                  + 0x38851D809BC8CA53) ^ 0x38851D809BC8CA53;
  unint64_t v146 = (((unint64_t)(a47[124] - ((2 * a47[124]) & 0x7777u) + 6927557) << 40) - 0xA0000000000) ^ 0x69B4BB0000000000;
  return sub_19E7B08D0(v119, (v132 - ((2 * v132) & 0x2000000000000000) + 0x109B284A73EE8F53) ^ 0x5E72941E1F80F78BLL ^ (v131 - ((2 * v131) & 0x2BC82793D0C48270) + 0x55E413C9E8624138), 501, (v146 - ((2 * v146) & 0x55A6E20000000000) - 0x152C8E53A01D3C72) ^ ((v133 ^ 0x500000000000000)- ((2 * v133) & 0xD000000000000000)+ 0x68F5A242649F1D34) ^ (v137 - ((2 * v137) & 0x2420000000000000) - 0x2DEFA3215D5DCE4ELL) ^ (v145 - ((2 * v145) & 0x1D8054B540F9D578) - 0x713FD5A55F831544), (a64 - 431771880), 442, 0xF3A404EA3DE0F0BDLL, 0xE74809D47BC1E17ALL, a9, a10, a11, a12, a13, a14, a15, a16, a17,
           a18,
           a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48,
           a49,
           a50,
           a51,
           a52,
           a53,
           a54,
           a55,
           a56,
           (2 * v148) & 0x17574866,
           v148,
           v111,
           a60,
           v149);
}

uint64_t sub_19E7B08D0@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(void))(v4 + 8 * ((((v3 ^ (a1 - 6)) < 8) * v1) ^ v2)))();
}

uint64_t sub_19E7B0940(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v24 = 4 * (v20 + v22);
  unsigned int v25 = v14
      + (*(_DWORD *)(*(void *)(a11 - 0x7CF6A079DDC7252CLL) + v24) ^ v19 ^ 0xBBF7BBBF)
      + ((2 * (*(_DWORD *)(*(void *)(a11 - 0x7CF6A079DDC7252CLL) + v24) ^ v19)) & 0x77EF777E);
  *(_DWORD *)(*(void *)(a14 - 0x7CF6A079DDC7252CLL) + v24) = v25
                                                             + 1315925833
                                                             - ((((v18 - 1242) ^ 0xBC78A23) + 2 * (v25 + 1315925833)) & v23)
                                                             + 1898282064;
  int v26 = v20 + 1 + v15;
  BOOL v28 = v26 > v16 || v26 < v17;
  return (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 8 * ((207 * v28) ^ (v18 - 314))))(0x177EF777ELL, 1315925833);
}

uint64_t sub_19E7B0A5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  int v17 = STACK[0x25C];
  STACK[0x228] = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 8 * (LODWORD(STACK[0x25C]) + 712)))(a15, 2965982036);
  int v18 = (*(uint64_t (**)(void))(v16 + 8 * (v17 + 830)))();
  unsigned int v19 = v18 - 59734013 - ((v18 << ((v17 - 78) ^ 0xA6)) & 0xF8E11006);
  *int v15 = v19;
  unsigned int v20 = v19 ^ 0xFC708800 ^ (v19 >> 30);
  v15[1] = 1
         - ((2 * (((1812433253 * v20) ^ 0x677EFEF9) + ((v20 * (((v17 - 357) | 0x46) - 670102028)) & 0xCEFDFDF2) + 1)
           + 822215182) & 0xF8E11006)
         + ((1812433253 * v20) ^ 0x677EFEF9)
         + ((v20 * (((v17 - 357) | 0x46) - 670102028)) & 0xCEFDFDF2)
         - 1796110070;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 8 * (v17 - 1102)))(70, 1812433253, 1736376057, 3624865268, 3472752114, 822215182, 800844203, 2498857226);
}

uint64_t sub_19E7B0B84@<X0>(int a1@<W1>, int a2@<W2>, int a3@<W3>, uint64_t a4@<X5>, int a5@<W6>, uint64_t a6@<X8>)
{
  unsigned int v17 = v15 + a1 + a2 + v13 + v11 + ~a3;
  int v18 = v17 ^ v6 ^ ((v17 >> 30) | 0xE7D05C8);
  *(_DWORD *)(v16 + 4 * a6) = a6
                            - ((v10 + 2 * (a6 + ((v18 * (a5 + 966)) ^ v7) + ((v18 * v8) & v9))) & 0xF8E11006)
                            + ((v18 * (a5 + 966)) ^ v7)
                            + ((v18 * v8) & v9)
                            + v12;
  return (*(uint64_t (**)(void))(a4 + 8 * (v14 ^ (16 * (a6 < 0x26F)))))();
}

uint64_t sub_19E7B0BA4@<X0>(int a1@<W8>)
{
  int v4 = a1 - 1100;
  int v5 = a1 - 1340;
  unsigned int v6 = (v4 ^ 0x7E) + v3 - 643984205;
  BOOL v7 = v1 + 620895730 < v6;
  if ((v1 + 620895730) < 0x5528E514 != v6 < 0x5528E514) {
    BOOL v7 = v6 < 0x5528E514;
  }
  return (*(uint64_t (**)(void))(v2 + 8 * ((119 * !v7) ^ v5)))();
}

uint64_t sub_19E7B0C14(double a1, int8x16_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int8x16_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,int32x4_t a34,int8x16_t a35,int8x16_t a36,int32x4_t a37,int8x16_t a38,int8x16_t a39,int8x16_t a40,int8x16_t a41,int8x16_t a42,int8x16_t a43)
{
  int8x16_t v45 = (int8x16_t)vld1q_dup_f32((const float *)v43);
  v46.i64[0] = 0x8000000080000000;
  v46.i64[1] = 0x8000000080000000;
  a2.i64[0] = *(void *)(v43 + 4);
  a2.i32[2] = *(_DWORD *)(v43 + 12);
  int8x16_t v47 = vextq_s8(v45, a2, 0xCuLL);
  int8x16_t v48 = a2;
  v48.i32[3] = *(_DWORD *)(v43 + 16);
  int32x4_t v49 = (int32x4_t)veorq_s8(vandq_s8(v48, a43), a42);
  int32x4_t v50 = (int32x4_t)veorq_s8((int8x16_t)vsubq_s32(vaddq_s32(v49, (int32x4_t)veorq_s8(vandq_s8(v48, a41), a40)), (int32x4_t)vandq_s8((int8x16_t)v49, a41)), a39);
  int32x4_t v51 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v50, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v50, v50), a38)), a37), a36);
  v52.i32[0] = *(_DWORD *)(v44 + 4 * ((*(_DWORD *)(v43 + 4) & 1) == 0));
  v52.i32[1] = *(_DWORD *)(v44 + 4 * !(*(unsigned char *)(v43 + 8) & 1));
  v52.i32[2] = *(_DWORD *)(v44 + 4 * (~*(_DWORD *)(v43 + 12) & 1));
  v52.i32[3] = *(_DWORD *)(v44 + 4 * (~v48.i32[3] & 1));
  *(int8x16_t *)uint64_t v43 = veorq_s8(veorq_s8(veorq_s8(*(int8x16_t *)(v43 + 1588), v52), a15), (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vsubq_s32((int32x4_t)vorrq_s8((int8x16_t)v51, vbicq_s8(v46, v47)), (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v51, v51), a35)), a34), 1uLL));
  return (*(uint64_t (**)(void))(a5 + 9432))();
}

uint64_t sub_19E7B3814(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v6 = *(_DWORD *)(a4 - 0x19C7A72C32A62CB3) - 644363949;
  unsigned int v7 = *(_DWORD *)(a4 - 0x19C7A72C32A62CB7) - 395889857;
  int v8 = (v6 < 0x40739317) ^ (v7 < 0x40739317);
  BOOL v9 = v6 > v7;
  if (v8) {
    BOOL v9 = v6 < 0x40739317;
  }
  return (*(uint64_t (**)(void))(v4 + 8 * ((114 * (((v5 + 123) ^ v9) & 1)) ^ v5)))();
}

uint64_t sub_19E7B38AC@<X0>(int a1@<W2>, int a2@<W4>, uint64_t a3@<X8>)
{
  unsigned int v8 = v6 + v5 + a1;
  long long v9 = *(_OWORD *)(a3 + v8 - 31);
  uint64_t v10 = v3 + v8;
  *(_OWORD *)(v10 - 15) = *(_OWORD *)(a3 + v8 - 15);
  *(_OWORD *)(v10 - 31) = v9;
  return (*(uint64_t (**)(void))(v7
                                           + 8
                                           * (int)(((((((a2 + 351246910) & 0xEB10659F) - 1466) & v4) != 32)
                                                  * ((a2 + 351246910) & 0xEB10659F ^ 0x5BC)) ^ (a2 + 351246910) & 0xEB10659F)))(0);
}

uint64_t sub_19E7B3924@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(void))(v5
                              + 8
                              * ((91
                                * ((*(unsigned __int8 *)(v3 + 6) ^ v2)
                                 + v1
                                 + ((((v4 - 109) | 0x48D) - 1127) & (2 * *(unsigned __int8 *)(v3 + 6))) == a1)) ^ v4)))();
}

void sub_19E7B3968(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 4) + 291962093 * ((2 * (a1 & 0x63ADB305) - a1 - 1672327942) ^ 0x8DA041B0);
  __asm { BRAA            X10, X17 }
}

uint64_t sub_19E7B3A18@<X0>(int a1@<W8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v3 + 8 * (a1 + 751)))(*v5);
  *int v4 = 0;
  *(_DWORD *)uint64_t v1 = v2 + 1856;
  *(void *)(v1 + 344) = 0;
  *(void *)(v1 + 352) = 0;
  *(_DWORD *)(v1 + 360) = 559203753;
  *(_DWORD *)(v1 + 56) = 1337981803;
  return result;
}

uint64_t sub_19E7B3A68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13)
{
  return (*(uint64_t (**)(void))(v14
                              + 8
                              * ((982
                                * (((v13 + 1) ^ ((a13 ^ 0x66CFBD76)
                                                                - 105259270
                                                                + ((a13 << (v13 + 33)) & 0xCD9F7AEC)
                                                                - 1619631218 < 0x7FFFFFFE)) & 1)) ^ v13)))();
}

uint64_t sub_19E7B3AE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  BOOL v12 = v9 >= a8 + v11 + (v8 ^ 0x61Cu) - 221 - 19;
  return (*(uint64_t (**)(void))(v10 + 8 * ((v12 | (4 * v12)) ^ v8)))();
}

uint64_t sub_19E7B3C40(uint64_t a1, int a2, int a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8
                              + 8
                              * ((((*(_DWORD *)(v10 + (v9 + a2) * (uint64_t)a3 + 40) & 8) == 2 * (v8 ^ a5) - 556)
                                * ((v8 + 299) ^ 0x2BC)) ^ v8)))();
}

uint64_t sub_19E7B3C90(uint64_t a1, int a2, int a3, unsigned int a4, uint64_t a5, uint64_t a6, int a7)
{
  unsigned int v11 = v7 + ((a2 - 1052) | 0x54) - 635 + a3 + 448;
  if (v11 <= 0x40) {
    unsigned int v11 = a4;
  }
  return (*(uint64_t (**)(void))(v10 + 8 * ((30 * (a7 - a3 < v8 + a7 + v9 + v11)) ^ a2)))();
}

void sub_19E7B3CE4()
{
}

uint64_t sub_19E7B3DF8@<X0>(uint64_t a1@<X2>, int a2@<W5>, int a3@<W6>, int a4@<W8>, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,_DWORD *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t v67 = &a64 + (a3 - 163917396 + a4 + 318);
  unsigned int v68 = 1631306195
      * ((v67 ^ *(_DWORD *)(*v66 + (*a54 & (((a4 - 89062200) & 0x54EFFFC) - 1783677892)))) & 0x7FFFFFFF);
  unint64_t v69 = 1631306195 * (v68 ^ HIWORD(v68));
  LODWORD(v69) = *((unsigned __int8 *)*(&off_1EF0E5660 + (a4 ^ 0x1F5)) + (v69 >> 24) - 8) ^ *((unsigned __int8 *)*(&off_1EF0E5660 + (a4 ^ 0x12D))
                                                                                            + (v69 >> 24)
                                                                                            - 12) ^ *((unsigned __int8 *)*(&off_1EF0E5660 + a4 - 128) + (v69 >> 24) - 2) ^ v69 ^ (37 * (v69 >> 24)) ^ 0xFFFFFFD9;
  *uint64_t v67 = v69 ^ (((v65 ^ 0x6C74F87Bu) >> (v64 + 88)) - ((2 * ((v65 ^ 0x6C74F87Bu) >> (v64 + 88))) & 0xB2) - 39);
  return (*(uint64_t (**)(void))(a1
                              + 8
                              * ((30
                                * (a3
                                 - (v69 != (((v65 ^ 0x6C74F87Bu) >> (v64 + 88))
                                                                            - ((2 * ((v65 ^ 0x6C74F87Bu) >> (v64 + 88))) & 0xB2)
                                                                            - 39)) != a2)) ^ a4)))();
}

void sub_19E7B42D4()
{
}

void sub_19E7B436C(uint64_t a1, uint64_t a2)
{
  __asm { BRAA            X10, X17 }
}

uint64_t sub_19E7B44B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  int v24 = v20 + 1;
  int v25 = (*v15 - 1849482976) * (*(_DWORD *)(a14 + 4 * (v24 - 894939211)) ^ 0xB41B6AD);
  unsigned int v26 = 545147329 * (((v17 | 0xEFC4BE69) - v17 + (v17 & 0x103B4190)) ^ 0x4F307E05);
  *(void *)(v23 - 120) = a12;
  *(void *)(v23 - 104) = v19;
  *(_DWORD *)(v23 - 128) = (v22 + 1380) ^ v26;
  *(_DWORD *)(v23 - 124) = v24 - v26 - 631119061;
  *(_DWORD *)(v23 - 112) = (v22 + 568 + (v25 ^ 0xEEE7FFD) + ((2 * v25) & 0x1DDCFFFA) + 654120026) ^ v26;
  uint64_t v27 = (*(uint64_t (**)(uint64_t))(v16 + 8 * v14))(v23 - 128);
  BOOL v29 = v24 + 1999230065 > 746685626 || v24 + 1999230065 < v21;
  return (*(uint64_t (**)(uint64_t))(v16 + 8 * ((v29 * v18) ^ v22)))(v27);
}

uint64_t sub_19E81B4B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,unsigned int a25)
{
  unsigned int v28 = v25 + 419665821 + ((a7 + v26 + 769) ^ 3);
  BOOL v29 = v28 < 0x262CE7FB;
  BOOL v30 = v28 > a25;
  if (a25 < 0x262CE7FB != v29) {
    BOOL v31 = v29;
  }
  else {
    BOOL v31 = v30;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v27 + 8 * ((492 * v31) ^ (a7 + v26 + 2154))))(a1, 4074156264);
}

void sub_19E81B530(uint64_t a1, uint64_t a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (uint64_t)*(&off_1EF0E5660
                + ((79 * (dword_1E945D920 ^ 0x71 ^ qword_1E945E360)) ^ byte_19EC54C60[byte_19EC7A300[(79 * (dword_1E945D920 ^ 0x71 ^ qword_1E945E360))] ^ 0x8E])
                - 26);
  uint64_t v4 = *(void *)(v3 - 4);
  uint64_t v5 = (char *)off_1EF0E5AF0 - 12;
  int v6 = (char *)off_1EF0E5A68 - 12;
  int v7 = *(&off_1EF0E5660
       + (*((unsigned char *)off_1EF0E5A68
                           + (*((unsigned __int8 *)off_1EF0E5AF0
                              + (79 * (v4 ^ qword_1E945E360 ^ 0x71))
                              - 12) ^ 0xB6u)
                           - 12) ^ (79 * (v4 ^ qword_1E945E360 ^ 0x71)))
       - 14);
  unint64_t v8 = v4 ^ (unint64_t)&v10 ^ *v7;
  *(void *)(v3 - 4) = (1616673103 * v8) ^ 0xA7F80EC97C429E71;
  *int v7 = 1616673103 * (v8 ^ 0xA7F80EC97C429E71);
  **(_DWORD **)(a1 + 96) = *(_DWORD *)(a2 + 16);
  LODWORD(v8) = 1001500783 * ((((2 * &v12) | 0xAD14CBD2) - &v12 - 1451910633) ^ 0x1C3E9A5D);
  int v12 = v8 - 167302488;
  int v14 = v8 ^ 0xAFF7E931;
  int v13 = &STACK[0x542A6DEB665DBA22];
  LODWORD(v7) = 1616673103 * (*(_DWORD *)(v3 - 4) ^ 0x7C429E71 ^ *(_DWORD *)v7);
  int v9 = (char *)*(&off_1EF0E5660
               + ((79 * ((qword_1E945E360 - dword_1E945D920) ^ 0x71)) ^ byte_19EC7A500[byte_19EC72CD0[(79 * ((qword_1E945E360 - dword_1E945D920) ^ 0x71))] ^ 0x1F])
               - 109)
     - 8;
  (*(void (**)(int *))&v9[8
                                   * (v7 ^ v6[v5[v7] ^ 0xB8])
                                   + 17944])(&v12);
  __asm { BRAA            X13, X17 }
}

uint64_t sub_19E81B848()
{
  int v6 = v3;
  int v7 = v3 ^ (v4 + 2389);
  uint64_t v15 = v12;
  int v8 = v0 + v3;
  unsigned int v13 = v8 + (((&v13 | 0x864D8C37) + (~&v13 | 0x79B273C8)) ^ 0x97BF817C) * v5 + 986;
  (*(void (**)(unsigned int *))(v2 + 8 * (v6 ^ v4)))(&v13);
  unsigned int v14 = v0
      - (((&v13 | 0x7292ED1) - &v13 + (&v13 & 0xF8D6D128)) ^ 0x16DB239B) * v5
      + v6
      + 602;
  uint64_t v15 = v12;
  (*(void (**)(unsigned int *))(v2 + 8 * (v8 + 1708)))(&v13);
  uint64_t v15 = v11;
  unsigned int v14 = v7 - ((&v13 & 0xBE07E765 | ~(&v13 | 0xBE07E765)) ^ 0x500A15D0) * v5 + 602;
  (*(void (**)(unsigned int *))(v2 + 8 * (v7 ^ 0xB54)))(&v13);
  return v10 ^ v1;
}

uint64_t sub_19E81B9A0()
{
  *(void *)(v5 - 120) = v4;
  *(void *)(v5 - 112) = v2;
  *(_DWORD *)(v5 - 124) = v0 + ((2 * ((v5 - 128) & 0x457073F0) - (v5 - 128) + 982486029) ^ 0x2B7D8147) * v3 - 805;
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(v1 + 8 * (v0 ^ 0xFDA)))(v5 - 128);
  return (*(uint64_t (**)(uint64_t))(v1
                                            + 8
                                            * (((*(_DWORD *)(v5 - 128) <= 0x3BBF8101u)
                                              * ((233 * (((v0 - 1789) | 0x700) ^ 0x72E)) ^ 0x1D7)) ^ v0)))(v6);
}

uint64_t sub_19E81BC00()
{
  return (*(uint64_t (**)(void))(v2 + 8 * ((2 * (v1 + 1 != v3 + 4)) | (16 * (v1 + 1 != v3 + 4)) | v0)))();
}

uint64_t sub_19E81BD80(double a1, int8x16_t a2, double a3, double a4, double a5, double a6, int8x16_t a7, int8x16_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,int8x16_t a47,int8x16_t a48,int8x16_t a49,int8x16_t a50,int8x16_t a51,int8x16_t a52,int32x4_t a53)
{
  unsigned int v61 = (v53 + 598232331) & 0xDC57B2EE;
  unsigned int v62 = (const float *)(v54 + 908);
  int8x16_t v63 = (int8x16_t)vld1q_dup_f32(v62);
  v64.i64[0] = 0x8000000080000000;
  v64.i64[1] = 0x8000000080000000;
  a2.i64[0] = *(void *)(v54 + 912);
  a2.i32[2] = *(_DWORD *)(v54 + 920);
  int8x16_t v65 = vextq_s8(v63, a2, 0xCuLL);
  int8x16_t v66 = a2;
  v66.i32[3] = *(_DWORD *)(v54 + 924);
  int8x16_t v67 = (int8x16_t)vaddq_s32((int32x4_t)vorrq_s8(v65, v64), a53);
  int8x16_t v68 = veorq_s8(vandq_s8(v66, a8), a52);
  int8x16_t v69 = (int8x16_t)vsubq_s32((int32x4_t)vandq_s8(v68, a51), (int32x4_t)vorrq_s8(v68, a50));
  int8x16_t v70 = veorq_s8(v69, a49);
  int32x4_t v71 = (int32x4_t)veorq_s8(vorrq_s8(vandq_s8(v69, v60), a48), vandq_s8(v69, a47));
  int8x16_t v72 = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vaddq_s32((int32x4_t)vorrq_s8(vandq_s8(v67, a7), v70), v58), (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(v71, v71), v57)), 1uLL);
  v70.i32[0] = *(_DWORD *)(v55 + 4 * (*(_DWORD *)(v54 + 912) & (v61 - 745) ^ 1));
  v70.i32[1] = *(_DWORD *)(v55 + 4 * ((*(_DWORD *)(v54 + 916) & 1) == 0));
  v70.i32[2] = *(_DWORD *)(v55 + 4 * (~*(_DWORD *)(v54 + 920) & 1));
  v70.i32[3] = *(_DWORD *)(v55 + 4 * ((v66.i8[12] & 1) == 0));
  *(int8x16_t *)(v54 + 908) = veorq_s8(veorq_s8(veorq_s8(*(int8x16_t *)v54, v70), v59), v72);
  return (*(uint64_t (**)(void))(v56 + 8 * (int)(v61 ^ 0x1A)))();
}

uint64_t sub_19E81BEA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, unsigned int a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v68 + 8 * (((((a68 - 114734058) < 0xFFFFFFC0) ^ ((a20 ^ 0x39) - 39)) & 1 | (16 * ((((a68 - 114734058) < 0xFFFFFFC0) ^ ((a20 ^ 0x39) - 39)) & 1))) ^ a20)))(3917121098, a15, a3, a4, 412315918, 4061304866, 4017904944, 1013);
}

uint64_t sub_19E81BF28(uint64_t a1, uint64_t a2, int a3, int a4)
{
  return (*(uint64_t (**)(void))(v4
                              + 8
                              * ((1404
                                * ((*(unsigned __int8 *)(v7 + 8) ^ a4)
                                 + ((a3 - v6) ^ (v6 - 135))
                                 + ((2 * *(unsigned __int8 *)(v7 + 8)) & 0x15E) == v5)) ^ a3)))();
}

void sub_19E81C23C()
{
  int v5 = 402930427 * ((-1744306919 - ((v4 - 136) | 0x9807FD19) + ((v4 - 136) | 0x67F802E6)) ^ 0x7D41FE5B);
  *(void *)(v4 - 128) = v2;
  *(_DWORD *)(v4 - 120) = v0 - v5 + 621409259;
  *(_DWORD *)(v4 - 136) = (v3 + 1213) ^ v5;
  (*(void (**)(uint64_t))(v1 + 8 * (v3 + 2124)))(v4 - 136);
  JUMPOUT(0x19E81C2BCLL);
}

void sub_19E81C380(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 - 0x3BF054D022E331AELL) = v1 - 1;
  JUMPOUT(0x19E8DB720);
}

uint64_t sub_19E81C39C@<X0>(int a1@<W1>, int a2@<W2>, int a3@<W3>, unsigned int a4@<W4>, uint64_t a5@<X5>, int a6@<W6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v14 = (v11 + 538);
  uint64_t v15 = (v10 - 1);
  uint64_t v16 = v15 + a5 + ((unint64_t)(v15 < a4) << 32) + v14;
  *(unsigned char *)(v13 + v16 + 4) = *(unsigned char *)(v12 + v16) ^ *(unsigned char *)(v8 + (v16 & 0xF)) ^ *(unsigned char *)(v9 + (v16 & 0xF)) ^ *(unsigned char *)((v16 & 0xF) + a8 + 1) ^ -(v16 & 0xF | ((v16 & 0xF) << 6)) ^ 0xC1;
  return (*(uint64_t (**)(void))(a7
                              + 8
                              * (int)(((v15 == (a6 ^ (4 * v14) ^ (a4 + 16))) * ((v14 + a1) & a2 ^ a3)) ^ (v14 + 311))))();
}

uint64_t sub_19E81C42C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  (*(void (**)(void))(a8 + 8 * (v8 ^ 0xAC5)))();
  return (*(uint64_t (**)(void))(STACK[0x460] + 8 * ((245 * (STACK[0x648] == 0)) ^ (v8 + 1097))))();
}

uint64_t sub_19E81C46C(uint64_t a1)
{
  unsigned int v6 = *(unsigned __int8 *)(v1 + (v4 + v3 + 1));
  return (*(uint64_t (**)(uint64_t, void, void, void))(v2 + 8 * (int)((250 * (v6 >> 7)) ^ v5)))(a1, (v3 + 930895979), (v5 - 1714) | 0x4Au, ((v5 - 821 + ((v5 - 1714) | 0x4A) - 1035) & (2 * v6)) + (v6 ^ 0x7FBF7F8F) - 70529285);
}

uint64_t sub_19E81C4DC()
{
  BOOL v4 = v0 < 0xA6E4A7F1;
  if (v4 == v1 - 0x4BA11E19C5325323 < ((v2 - 1100) ^ 0xA6E4A7F1 ^ (unint64_t)((v2 - 1109) | 9u))) {
    BOOL v4 = v1 - 0x4BA11E19C5325323 < v0;
  }
  return (*(uint64_t (**)(void))(v3 + 8 * ((1029 * v4) ^ (v2 - 1298))))();
}

uint64_t sub_19E81C554@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  int v22 = (a1 + 1086) | 0x82;
  *(_DWORD *)(v21 - 128) = a1 - (((v21 - 144) & 0x37C21EBB | ~((v21 - 144) | 0x37C21EBB)) ^ 0xD9CFEC0E) * v17 + 2070;
  *(void *)(v21 - 144) = a17;
  *(void *)(v21 - 136) = a16;
  *(void *)(v21 - 120) = v18;
  *(void *)(v21 - 112) = a16;
  *(void *)(v21 - 104) = a6;
  uint64_t v23 = (*(uint64_t (**)(uint64_t))(v19 + 8 * (a1 + 2144)))(v21 - 144);
  return (*(uint64_t (**)(uint64_t))(v19
                                            + 8
                                            * ((111
                                              * ((((v22 - 133) | 0x86) ^ (v20 + 1157)) + a14 > 0x7FFFFFFE)) ^ (v22 - 1226))))(v23);
}

uint64_t sub_19E81C60C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, int a16, int a17)
{
  int v20 = 545147329 * ((&a14 + 405260281 - 2 * ((unint64_t)&a14 & 0x1827C7F9)) ^ 0xB8D30795);
  a15 = a11;
  a14 = v20 + 333;
  a17 = v20 + 728377189 * v17 + 1428177718;
  uint64_t v21 = (*(uint64_t (**)(int *))(v18 + 19408))(&a14);
  return (*(uint64_t (**)(uint64_t))(v18 + 8 * ((1544 * (a16 == v19)) ^ 0x275u)))(v21);
}

void sub_19E81C6D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, int a19, uint64_t a20)
{
  int v24 = 1431787901 * ((v23 - 152) ^ 0x2B90AAD7);
  *(_DWORD *)(v23 - 152) = v24 + v20 - 387;
  *(_DWORD *)(v23 - 148) = a19 - v24 + ((v20 - 546) ^ 0x2A8FF06D);
  (*(void (**)(uint64_t))(v21 + 8 * (v20 ^ 0xC26)))(v23 - 152);
  uint64_t v25 = *(void *)(a20 + 808);
  *(_DWORD *)(v23 - 144) = (v20 - 1067) ^ (402930427
                                         * ((2 * ((v23 - 152) & 0x7E54668) - (v23 - 152) - 132466283) ^ 0xE2A34528));
  *(void *)(v22 + 1312) = v25;
  JUMPOUT(0x19E8979F0);
}

uint64_t sub_19E81C748(uint64_t a1, int a2)
{
  return (*(uint64_t (**)(void))(v3 + 8 * ((3851 * ((((((a2 ^ 0x6A4) - 662) | 0x295) - 1919) & v2) == 0)) ^ a2 ^ 0x6A4)))();
}

uint64_t sub_19E81C78C()
{
  int v5 = 402930427 * ((((v4 - 136) | 0xBF63DD2) - ((v4 - 136) & 0xBF63DD2)) ^ 0x114FC16F);
  *(_DWORD *)(v4 - 120) = v1 - v5 + (((v0 + 6) | 0x226) ^ 0xE611BCA5);
  *(_DWORD *)(v4 - 136) = (v0 + 392) ^ v5;
  *(void *)(v4 - 128) = v3;
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(v2 + 8 * (v0 ^ 0xAEB)))(v4 - 136);
  return sub_19E81C814(v6);
}

uint64_t sub_19E81C814(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  *(_DWORD *)(v17 - 132) = v16 + 291962093 * ((v17 + 1234577744 - 2 * ((v17 - 136) & 0x499629D8)) ^ 0x58642492) - 546;
  *(void *)(v17 - 128) = a14;
  *(void *)(v17 - 120) = v14;
  uint64_t v18 = (*(uint64_t (**)(uint64_t))(v15 + 8 * (v16 + 717)))(v17 - 136);
  return (*(uint64_t (**)(uint64_t))(v15
                                            + 8
                                            * ((118
                                              * (((v16 - 70) ^ 7 ^ (*(_DWORD *)(v17 - 136) > 0x3BBF8101u)) & 1)) ^ v16)))(v18);
}

uint64_t sub_19E81C8B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11)
{
  int v14 = -v12;
  unsigned int v15 = v12 + v11 - 2144304354;
  if (v15 <= 0x40) {
    int v16 = 64;
  }
  else {
    int v16 = v15;
  }
  return (*(uint64_t (**)(uint64_t))(v13
                                            + 8
                                            * ((((a11 ^ 0xAAF) - 574)
                                              * ((2144304354 - v11 + v14 + v16) > 0xE)) | a11)))(584);
}

uint64_t sub_19E81C938@<X0>(int a1@<W0>, uint64_t a2@<X1>, int a3@<W3>, int a4@<W8>)
{
  *(unsigned char *)(a2 + (v5 + a1)) = v6;
  return (*(uint64_t (**)(void))(v7 + 8 * ((((v5 + 1 + v4) < 0x40) * a3) ^ a4)))();
}

uint64_t sub_19E81C964(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  *(void *)(v17 - 128) = v15;
  *(void *)(v17 - 120) = a14;
  *(_DWORD *)(v17 - 136) = v16
                         + 1305237457 * ((((v17 - 136) | 0xAF4C55BB) + (~(v17 - 136) | 0x50B3AA44)) ^ 0x16F5F374)
                         + 1131;
  (*(void (**)(uint64_t))(v14 + 8 * (v16 + 2149)))(v17 - 136);
  int v18 = 402930427 * ((v17 + 735964885 - 2 * ((v17 - 136) & 0x2BDDEF5D)) ^ 0x316413E0);
  *(_DWORD *)(v17 - 136) = (v16 + 1213) ^ v18;
  *(_DWORD *)(v17 - 120) = 987484633 - v18;
  *(void *)(v17 - 128) = a9;
  (*(void (**)(uint64_t))(v14 + 8 * (v16 ^ 0x9D4)))(v17 - 136);
  *(void *)(v17 - 128) = a14;
  *(void *)(v17 - 120) = a9;
  *(_DWORD *)(v17 - 132) = v16
                         + 291962093
                         * ((-808931759 - ((v17 - 136) | 0xCFC8AE51) + ((v17 - 136) | 0x303751AE)) ^ 0x21C55CE4)
                         + 831;
  uint64_t v19 = (*(uint64_t (**)(uint64_t))(v14 + 8 * (v16 ^ 0x836)))(v17 - 136);
  return (*(uint64_t (**)(uint64_t))(v14
                                            + 8
                                            * (((*(_DWORD *)(v17 - 136) > 0x3BBF8101u) * ((v16 ^ 0x6E8) - 1575)) | (v16 + 1940))))(v19);
}

uint64_t sub_19E81CAF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,int a22,unsigned int a23,uint64_t a24,int a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  unint64_t v31 = (unint64_t)(v29 + a5) >> (((v30 + 29) & 0xEFu) - 71);
  unint64_t v32 = (*(_DWORD *)(a3 + a15) ^ v28 ^ 0xEF3F2CEFED7EFDB7)
      + (v31 ^ 0x3CB7ACBFCF3FFC5DLL)
      + ((2 * v31) & 0x19E7FF8BALL)
      + (((unint64_t)(*(_DWORD *)(a3 + a15) ^ v28) << ((9 * (v30 ^ 0x20)) ^ 0x4Bu)) & 0x1DAFDFB6ELL);
  *(_DWORD *)(a3 + 4 * a17) = v32 - ((2 * v32 + 109186008) & 0x16836D5A) + 1317190809;
  *(_DWORD *)(a28 + a15) = (((v32 - 0x2BF6D9AFBCBEFA14) >> 32)
                          - (((v32 - 0x2BF6D9AFBCBEFA14) >> 31) & 0x5D8E9A8C)
                          - 1362670266) ^ 0xA586FBEB;
  BOOL v33 = a25 + 1077437473 < a22;
  if (a23 > 0x26D09FD2 != a25 + 1077437473 < -651206611) {
    BOOL v33 = a23 > 0x26D09FD2;
  }
  return (*(uint64_t (**)(void))(a26 + 8 * ((v30 - 565) ^ (1171 * v33))))();
}

unint64_t sub_19E81D1F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = (a5 - ((a5 << ((v6 + 21) ^ 0xE3u)) & 0x6F653D90) + 0x31C7801C37B29EC8) ^ a4;
  *((void *)&v9 + 1) = v8 ^ 0x3C;
  *(void *)&long long v9 = v8 ^ 0xEF3125760E119B40;
  uint64_t v10 = (v9 >> 6) - ((2 * (v9 >> 6)) & 0x62864CE9915FC8DALL) - 0x4EBCD98B37501B93;
  unint64_t v11 = (v10 ^ ((v10 ^ 0xF77B1CBE9433DCC5)
              - ((2 * (v10 ^ 0xF77B1CBE9433DCC5) + 0x12AD74F508964AA0) & 0x4983351F0E26D02ELL)
              - 0x11E7AAF5F4A17299) ^ ((v10 ^ 0x3E2DA6C41078F98ALL)
                                       - ((2 * (v10 ^ 0x3E2DA6C41078F98ALL) + 2) & 0x7920E5EF0420731ALL)
                                       - 0x436F8D087DEFC672) ^ 0x5983B143EA8457EFLL)
      - 0x36A945857BB4DAB1;
  unint64_t v12 = ((2 * v11) & 0xEFFFD7B58E9D7F1ELL) + (v11 ^ 0xF7FFEBDAC74EBF8FLL);
  unint64_t v13 = (((unint64_t)(v292 - v291 + 195798081) << 32) - 0xE00000000) ^ 0xBABA43300000000;
  unint64_t v14 = (((v12 + 0x800142538B14071) >> 58) - (((v12 + 0x800142538B14071) >> 57) & 0x56) - 0x7C1F1F555C5DD095) ^ 0x83E0E0AAA3A22F6BLL | (v13 + 0x4C18635C7EE7D15ALL + (~(2 * v13) | 0x67CF3947FFFFFFFFLL)) ^ 0x944AAF3CEB8E5459 ^ ((v12 << 6) - (((v12 << 7) + 0xA129C58A03880) & 0xB0A598C12AD30A00) - 0x27A82A513E465EC0);
  uint64_t v15 = v14 - ((2 * v14) & 0x7C6A705285EDA830) + 0x3E35382942F6D418;
  uint64_t v16 = v7 ^ a1;
  unint64_t v17 = v7 ^ a1 ^ 0x815C5F1693073B73 ^ (((v15 ^ v5 ^ 0x8C04516383494F20) & (v15 ^ 0xD14DCEF9DA1DA261))
                                        - ((2 * ((v15 ^ v5 ^ 0x8C04516383494F20) & (v15 ^ 0xD14DCEF9DA1DA261))) & 0x997FF2451430F71ELL)
                                        - 0x334006DD75E78471);
  *((void *)&v9 + 1) = v15 ^ v5 ^ 0x14F20;
  *(void *)&long long v9 = v15 ^ v5 ^ 0x8C04516383480000;
  uint64_t v18 = (v9 >> 17) - ((2 * (v9 >> 17)) & 0xA7EFF34719B510C0) - 0x2C08065C732577A0;
  *((void *)&v9 + 1) = v18 ^ 0x515E04F621C2;
  *(void *)&long long v9 = v18 ^ 0x9A35000000000000;
  uint64_t v19 = (((v9 >> 47) - ((2 * (v9 >> 47)) & 0x834262B71D13A106) + 0x41A1315B8E89D083) ^ 0xEFA5DEFD2232BCF9) & (a2 ^ 0xDD2468D75B578A01);
  unint64_t v20 = v17 ^ v15 ^ (v19 - ((2 * v19) & 0x1D09D25F36F03EECLL) - 0x717B16D06487E08ALL);
  unint64_t v21 = v20 ^ (v20 >> 39);
  uint64_t v22 = ((8 * v20) ^ 0x7D42F83C14CD60B0) - ((2 * ((8 * v20) ^ 0x7D42F83C14CD60B0)) & 0x1F0767E8E4D1CED0);
  unint64_t v23 = ((v22 + 0xF83B3F47268E76CLL) ^ (((v22 + 0xF83B3F47268E76CLL) ^ 0xF07C4C0B8D971893)
                                      - ((2 * ((v22 + 0xF83B3F47268E76CLL) ^ 0xF07C4C0B8D971893) + 2) & 0xB45DF0A3BF04F80CLL)
                                      + 0x5A2EF851DF827C07) ^ ((v21 ^ 0xEFA85F078346FCA8)
                                                               + (v21 ^ 0x1FD4130C0ED1E43BLL ^ (v22 + 0xF83B3F47268E76CLL))
                                                               + 1
                                                               - ((2
                                                                 * ((v21 ^ 0xEFA85F078346FCA8)
                                                                  + (v21 ^ 0x1FD4130C0ED1E43BLL ^ (v22
                                                                                                 + 0xF83B3F47268E76CLL))
                                                                  + 1)) & 0x70A58B0F805AE010)
                                                               - 0x47AD3A783FD28FF8) ^ 0xEDFF8E226DC7EB62)
      + (v21 ^ 0xEFA85F078346FCA8);
  unint64_t v24 = ((2 * v23) & 0x6771FDCFDACDEEF6) + (v23 ^ 0xB3B8FEE7ED66F77BLL);
  unint64_t v25 = v24 + 0x4C47011812990885;
  char v26 = ((v20 & 0x10 ^ 0xB0) - (v20 & 0x10) + (v20 & 0x19 ^ 8)) ^ 0x88;
  unint64_t v27 = ((((v20 ^ 0xEFA85F078299AC16) << (((v26 | 0x51) - (v26 | 0xAE) - 82) ^ 0x71u))
        - ((2 * ((v20 ^ 0xEFA85F078299AC16) << (((v26 | 0x51) - (v26 | 0xAE) - 82) ^ 0x71u))) & 0x9EA644E61609A5B4)
        + 0x4F5322730B04D2DALL) ^ 0x4F5322730B04D2DALL) << (((v26 | 0x51) - (v26 | 0xAE) - 82) ^ 0x68u);
  uint64_t v28 = v27 - ((2 * v27) & 0x63B621DAA8CE824ELL) + 0x31DB10ED54674127;
  unint64_t v29 = ((((v24 + 0x4C47011812990885) ^ v28 ^ 0x31DB10ED54674127)
        - 2
        * (((v24 + 0x4C47011812990885) ^ v28 ^ 0x31DB10ED54674127) & 0x49DBE8D4EC022AELL ^ ((v24
                                                                                               + 0x4C47011812990885) ^ v28) & 8)
        + 0x49DBE8D4EC022A6) ^ 0xFB624172B13FDD59)
      + v24;
  unint64_t v30 = (v28 ^ ((v28 ^ 0xCE24EF12AB98BED8)
              - ((2 * (v28 ^ 0xCE24EF12AB98BED8) + 2) & 0x6B4FD991BA8C414CLL)
              - 0x4A58133722B9DF59) ^ 0x5BE7306C6B03DAALL ^ (v29
                                                             - ((2 * v29 + 0x8E02302532110CLL) & 0x3851E469F22B856)
                                                             - 0x31F66FC49DD59B4FLL))
      + v25;
  uint64_t v31 = v30 - 0x5EB3A96A1CB94336 - ((2 * v30) & 0x4298AD2BC68D799ALL) + 3;
  unint64_t v32 = v31 ^ (v20 >> 61);
  unint64_t v33 = v32 ^ 0xA14C5695E346BCCALL;
  unint64_t v34 = 0xFFFFFFFC00000000;
  if ((v31 & 0x400000000) != 0) {
    unint64_t v34 = 0x400000000;
  }
  uint64_t v35 = v34 + v33 - 2 * ((v34 + v33) & 0x450892F3FD06EA37 ^ v32 & 1) - 0x3AF76D0C02F915CALL;
  unint64_t v36 = a1 ^ a2 ^ 0x86B8C842ECD4F4D7;
  unint64_t v37 = v15 ^ v5 ^ (((v36 ^ 0x3BB32D6CB24B118DLL) & (a2 ^ 0x22DB9728A4A875FELL))
                  - ((2 * ((v36 ^ 0x3BB32D6CB24B118DLL) & (a2 ^ 0x22DB9728A4A875FELL))) & 0xB1DBC82A4040B036)
                  + 0x58EDE4152020581BLL);
  unint64_t v38 = (((v16 ^ 0x88C3D966AD1462B7) & (v36 ^ 0xC44CD2934DB4EE72))
       - ((2 * ((v16 ^ 0x88C3D966AD1462B7) & (v36 ^ 0xC44CD2934DB4EE72))) & 0xB45C9523F6A9DA76)
       - 0x25D1B56E04AB12C5) ^ a2 ^ 0x86B8C842ECD4F4D7 ^ v37;
  *((void *)&v39 + 1) = v38 ^ 0x2BE301;
  *(void *)&long long v39 = v38 ^ 0xE4C4BD46C4000000;
  unint64_t v40 = ((((v38 << 32) ^ 0xC42BE30100000000)
        - ((2 * ((v38 << 32) ^ 0xC42BE30100000000)) & 0x5F64A13200000000)
        + 0x2FB25099F7242915) & 0xFFFFFC0000000000 | HIDWORD(v38)) ^ 0x2FB25000E4C4BD46;
  uint64_t v41 = (v40 - 2 * (v40 & 0x44C75800ED00127BLL ^ HIDWORD(v38) & 8) + 0x44C75BEBED001273) ^ ((v39 >> 22)
                                                                                            - ((2 * (v39 >> 22)) & 0x902B583683B119CELL)
                                                                                            + 0x4815AC1B41D88CE7);
  *((void *)&v39 + 1) = v41 ^ 0x30118721134;
  *(void *)&long long v39 = v41 ^ 0x4639800000000000;
  uint64_t v42 = (((v38 << 47) ^ 0xF180800000000000)
       - ((2 * ((v38 << 47) ^ 0xF180800000000000)) & 0x7C51000000000000)
       - 0x41D716997D7FC8EFLL) ^ (v38 >> 17) ^ (((v38 << 54) ^ 0xC040000000000000)
                                              - ((2 * ((v38 << 54) ^ 0xC040000000000000)) & 0xC80000000000000)
                                              - 0x7994CEC503EBB042) ^ ((v39 >> 42)
                                                                       - ((2 * (v39 >> 42)) & 0x219C65117D3A9854)
                                                                       - 0x6F31CD774162B3D6);
  *((void *)&v39 + 1) = v37 ^ 0x3576A369173BLL;
  *(void *)&long long v39 = v37 ^ 0xD4E9800000000000;
  uint64_t v43 = ((v39 >> 47) - ((2 * (v39 >> 47)) & 0xB8FFADB4046C452ALL) - 0x23802925FDC9DD6BLL) ^ 0x7E96C8839E600000;
  *((void *)&v39 + 1) = ((v39 >> 47) - ((2 * (v39 >> 47)) & 0x46C452A) + 37102229) ^ 0x423E;
  *(void *)&long long v39 = v43;
  uint64_t v44 = v39 >> 17;
  unint64_t v45 = v44 - ((2 * v44) & 0x6D0D2688DAA4EB64) + 0x368693446D5275B2;
  unint64_t v46 = v45 ^ (v45 >> 1) ^ (v45 >> 6) ^ 0xE3399BB58A65B7C7 ^ (((v45 << 58) ^ 0x6800000000000000)
                                                              - ((2 * ((v45 << 58) ^ 0x6800000000000000)) & 0x7800000000000000)
                                                              + 0x3F7B2B43D2A1465BLL);
  uint64_t v47 = v32 ^ (v46 + (v44 << 63) - ((2 * v46) & 0x1B325CB86C749870) - 0x7266D1A3C9C5B3C8);
  unint64_t v48 = (((v15 ^ 0x2EB2310625E25D9ELL) & (v16 ^ 0x773C269952EB9D48))
       - ((2 * ((v15 ^ 0x2EB2310625E25D9ELL) & (v16 ^ 0x773C269952EB9D48))) & 0x511C2EADE3EC8924)
       + 0x288E1756F1F64492) ^ v36;
  unint64_t v49 = v17 ^ v48;
  unint64_t v50 = v17 ^ v48 ^ 0x36D15B1C1FA9CED0;
  unint64_t v51 = ((((v49 << 45) ^ 0xC4D4400000000000)
        - ((2 * ((v49 << 45) ^ 0xC4D4400000000000)) & 0xCA65C00000000000)
        - 0x1ACD044D4D6CBE61) ^ 0xE532FBB2B293419FLL | (v50 >> 28) ^ (v50 >> 19)) ^ 0x1DF06B7A6346;
  unint64_t v52 = ((v50 << 36) ^ 0xBDFE872000000000)
      - ((2 * ((v50 << 36) ^ 0xBDFE872000000000)) & 0xF9873A6000000000)
      + 0x7CC39D3527DC65EFLL;
  unint64_t v53 = (((v48 << 57) ^ 0xDA00000000000000)
       - ((2 * ((v48 << 57) ^ 0xDA00000000000000)) & 0x3400000000000000)
       + 0x1B47C94867D4318DLL) ^ 0x1B47C94867D4318DLL | (v48 >> 41) ^ 0x52020E;
  unint64_t v54 = v48 ^ (v48 >> 7) ^ (((v48 << 23) ^ 0xE689F94AF6800000)
                          - ((2 * ((v48 << 23) ^ 0xE689F94AF6800000)) & 0xE86E8ADE98000000)
                          + 0x7437456F4C310303) ^ 0x8898EA52C858400ALL ^ (v53
                                                                          - ((2 * v53) & 0x1BBD76781F1A1534)
                                                                          + 0xDDEBB3C0F8D0A9ALL);
  unint64_t v55 = v52 ^ v49;
  *((void *)&v39 + 1) = v32 ^ 0x346BCCA;
  *(void *)&long long v39 = v31 ^ 0xA14C5695E0000000;
  uint64_t v56 = (v39 >> 27) - ((2 * (v39 >> 27)) & 0x2C47DAAE2E407D40) + 0x1623ED5717203EA0;
  *((void *)&v39 + 1) = v56 ^ 0x1F8A4BE210;
  *(void *)&long long v39 = v56 ^ 0x81031FC000000000;
  uint64_t v57 = v39 >> 37;
  unint64_t v58 = v57 - ((2 * v57) & 0xED84463C6DB11C90) + 0x76C2231E36D88E48;
  unint64_t v59 = ((2 * ((v58 ^ 0x893DDCE1C92771B7) + 1)) & 0xD5D7F7A3FF5F6916)
      + (((v58 ^ 0x893DDCE1C92771B7) + 1) ^ 0xEAEBFBD1FFAFB48BLL);
  *((void *)&v39 + 1) = v59 + 0x2E00504B75;
  *(void *)&long long v39 = v59 + 0x1514042E00504B75;
  uint64_t v60 = (v39 >> 39) - ((2 * (v39 >> 39)) & 0xD9940133828E69F8) + 0x6CCA0099C14734FCLL;
  uint64_t v61 = ((v58 ^ 0x32297DFBB26189DCLL)
       - 2 * (((v58 ^ 0x32297DFBB26189DCLL) + 0x3B14A11A7B46F86CLL) & 0x4B88AB23BD55AE9FLL ^ v57 & 3)
       + 0x69D4C3E389CA708) ^ v58;
  *((void *)&v39 + 1) = v61 ^ 0x3D8B8D20D4;
  *(void *)&long long v39 = v61 ^ 0x3D4A880000000000;
  uint64_t v62 = ((v39 >> 39) - ((2 * (v39 >> 39)) & 0x6E3DBA4218DEC5D0) + 0x371EDD210C6F62E8) ^ v60;
  *((void *)&v39 + 1) = v62 ^ 0x1DD78A2;
  *(void *)&long long v39 = v62 ^ 0x8087534BD6000000;
  uint64_t v63 = v55 ^ v54 ^ (v51 - ((2 * v51) & 0xCDD2AC0B0060C22) - 0x79916A9FA7FCF9EFLL);
  uint64_t v64 = (((v39 >> 25) - ((2 * (v39 >> 25)) & 0xF09C8EB0FE19F746) - 0x7B1B8A780F3045DLL) ^ 0x82D91C35D6CB822ELL)
      - 0x44EB5EE584B90795;
  uint64_t v65 = ((v64 ^ 0x1FFFBF9BC8F6CEF6) - 0x1FFFBF9BC8F6CEF6 + ((2 * v64) & 0x3FFF7F3791ED9DECLL)) & (v47 ^ 0x2CD578C9D57CF0F2);
  uint64_t v66 = v63 ^ 0x430CCA00315A3729 ^ (v65 - ((2 * v65) & 0x167F1CD16B7AFFFCLL) - 0x74C071974A428002);
  unint64_t v67 = v35 ^ (((v47 ^ 0xD32A87362A830F0DLL) & (v42 ^ 0x94E0B21576B8EC4DLL))
             - ((2 * ((v47 ^ 0xD32A87362A830F0DLL) & (v42 ^ 0x94E0B21576B8EC4DLL))) & 0x7CFB53C879F5EAAALL)
             - 0x4182561BC3050AABLL) ^ v66;
  unint64_t v68 = ((v67 & 0xD098030898200C68 ^ 0xA4D7A00948EB98A3) + (v67 & 0x9205C3606002200 ^ 0x800441404000001) - 2) ^ 0xB67F838D52E95DC9;
  unint64_t v69 = (v68 | 0x37661BAB3C014CALL) - (v68 | 0xFC899E454C3FEB35) - 0x37661BAB3C014CBLL;
  unint64_t v70 = ((v67 >> 38) & 0x2AFA22C ^ 0x81203E75264EDCF4)
      + ((v67 >> 39) & 0x1DFD197 ^ 0x3D6F60456C509184)
      + ((((v67 >> 39) ^ 0x2647A0C160F8B90DLL) + 1) ^ 0xBF8FD3A5EF6577A7)
      + ((2 * (((v67 >> 39) ^ 0x2647A0C160F8B90DLL) + 1)) & 0x4C0F0102C6CAEF4ELL);
  uint64_t v71 = v70 - ((2 * v70 + 0x1731D9BC3A4511B6) & 0x10ABBC96C7B88F42) - 0x1C1134D67F012F84;
  unint64_t v72 = (((8 * v67) ^ 0x9DA26880DEB42B58)
       - ((2 * ((8 * v67) ^ 0x9DA26880DEB42B58)) & 0x87ADB61C382BAF70)
       + 0x43D6DB0E1C15D7BALL) ^ (v67 >> 61) ^ ((v67 & 0x2647A0C161DFD197 ^ 0x2184D0385568513 | 0x53C874FCD46FC1A5)
                                              - (v67 & 0x2647A0C161DFD197 ^ 0x2184D0385568513 | 0xAC378B032B903E5ALL)
                                              - 0x53C874FCD46FC1A6) ^ (((v67 << 25) ^ 0x2037AD0AD6000000)
                                                                       - ((2 * ((v67 << 25) ^ 0x2037AD0AD6000000)) & 0xD4E91CD0E8000000)
                                                                       - 0x158B71978BCA0F38) ^ ((((v67 >> 39) & 0x1154096 ^ 0x3038A86071202AFBLL)
                                                                                                 - 1) & 0x2020080001354AFELL | (v67 >> 39) & 0xCA9101) ^ v69 ^ v71;
  unint64_t v73 = v42 ^ 0xBB74B46E8DDBF73ALL ^ v54;
  unint64_t v74 = ((v33 & (v63 ^ 0x884A0CC2466783F6))
       - ((2 * (v33 & (v63 ^ 0x884A0CC2466783F6))) & 0x7E9EE1D51541DC76)
       + 0x3F4F70EA8AA0EE3BLL) ^ v73;
  *((void *)&v39 + 1) = v74 ^ 0x19EF272B95CLL;
  *(void *)&long long v39 = v74 ^ 0xDEDE4A0000000000;
  unint64_t v75 = v72 ^ 0xDA6DF1E8ECF63AC3;
  uint64_t v76 = (v39 >> 41) - ((2 * (v39 >> 41)) & 0xD7A40784A56926F0) + 0x6BD203C252B49378;
  *((void *)&v39 + 1) = v74 ^ 0x5C;
  *(void *)&long long v39 = v74 ^ 0xDEDE4B9EF272B900;
  uint64_t v77 = v76 ^ v74 ^ ((v39 >> 7) - ((2 * (v39 >> 7)) & 0x1BEC45CA66186A3ALL) - 0x7209DD1ACCF3CAE3);
  unint64_t v78 = v66 ^ v74;
  unint64_t v79 = (((v78 << 45) ^ 0x13A4800000000000)
       - ((2 * ((v78 << 45) ^ 0x13A4800000000000)) & 0x7040000000000000)
       - 0x47DFF4B8A975BC1CLL) ^ 0xB8200B47568A43E4 | (v78 >> 28) ^ 0x571CCFC74;
  unint64_t v80 = (((v78 << 33) ^ 0x9F513A4800000000)
       - ((2 * ((v78 << 33) ^ 0x9F513A4800000000)) & 0xCF5DF2D400000000)
       + 0x67AEF96BD8322CEFLL) & 0xFFF0000000000000 ^ 0x1690000000000000;
  unint64_t v81 = ((v80 | 0x3840CD9045830D8) - (v80 | 0xFC7BF326FBA7CF27) - 0x3840CD9045830D9) ^ 0xB3700CB6E87C7617;
  *((void *)&v39 + 1) = v78 ^ 0xD24;
  *(void *)&long long v39 = v78 ^ 0x571CCFC74FA89000;
  uint64_t v82 = (((2 * v81) & 0x9A4593B7581F4A94) - v81 + 0x32DD362453F05AB5) ^ ((v39 >> 12)
                                                                           - ((2 * (v39 >> 12)) & 0xB69E988E5C29C020)
                                                                           - 0x24B0B3B8D1EB1FF0);
  *((void *)&v39 + 1) = v82 ^ (v78 >> 31) ^ 0xFFF52AFCBC972;
  *(void *)&long long v39 = v82 ^ 0x1DF0000000000000;
  uint64_t v83 = (((v78 << 36) ^ 0xFA89D24000000000)
       - ((2 * ((v78 << 36) ^ 0xFA89D24000000000)) & 0x45704E4000000000)
       + 0x22B82727EEEE479FLL) ^ v77 ^ (v79 - ((2 * v79) & 0x4A55A67E12883CD2) - 0x5AD52CC0F6BBE197) ^ ((v39 >> 52) - ((2 * (v39 >> 52)) & 0x962E8DB61CE48B7ELL) + 0x4B1746DB0E7245BFLL);
  uint64_t v84 = v47 ^ (((v73 ^ 0x7BA9078CF9522222) & (v42 ^ 0x6B1F4DEA894713B2))
             - ((2 * ((v73 ^ 0x7BA9078CF9522222) & (v42 ^ 0x6B1F4DEA894713B2))) & 0x55A03168D40FB80CLL)
             - 0x552FE74B95F823FALL);
  unint64_t v85 = (((v73 ^ 0x8456F87306ADDDDDLL) & (v63 ^ 0x77B5F33DB9987C09))
       - ((2 * ((v73 ^ 0x8456F87306ADDDDDLL) & (v63 ^ 0x77B5F33DB9987C09))) & 0x2AAC80F84E0ED266)
       - 0x6AA9BF83D8F896CDLL) ^ v42 ^ 0xBB74B46E8DDBF73ALL ^ v84 ^ 0x20BEDE9706D6910FLL;
  unint64_t v86 = (v85 & 0xF80CDC0F4602037BLL ^ 0x1804440B44020003)
      + (v85 & 0xA80CC8034602014BLL ^ 0xA5598BF0BA6C9D4CLL)
      - ((v85 & 0xF80CDC0F4602037BLL ^ 0x1804440B44020003) & 0xA80CC8034602014BLL);
  *((void *)&v39 + 1) = v86 ^ 0xFF1FC6E9D3ELL;
  *(void *)&long long v39 = v86 ^ 0x5551000000000000;
  uint64_t v87 = v77 ^ 0x38FA6AB993CA1F39;
  uint64_t v88 = (v39 >> 46) - ((2 * (v39 >> 46)) & 0xF86A675844CB9160) + 0x7C3533AC2265C8B0;
  unint64_t v89 = (v85 & 0x7F323F0B9FDFC84 ^ 0xFEFEDD7FFE831F7BLL)
      - 0x4980033C4F2A628DLL
      + ((2 * (v85 & 0x7F323F0B9FDFC84 ^ 0xFEFEDD7FFE831F7BLL)) & 0xCE6418161AB3800 ^ 0x9FE647F9FFFFFD1BLL);
  *((void *)&v39 + 1) = v89 ^ 0x3CC3B0D59D72;
  *(void *)&long long v39 = v89 ^ 0xB67FC00000000000;
  uint64_t v90 = ((v39 >> 46) - ((2 * (v39 >> 46)) & 0x4B4D4552CE5E7B04) - 0x5A595D5698D0C27ELL) ^ v88;
  *((void *)&v39 + 1) = ((v39 >> 46) - ((2 * (v39 >> 46)) & 0xCE5E7B04) + 1731149186) ^ v88 ^ 0x3A159;
  *(void *)&long long v39 = v90 ^ 0x41E95FBD01600000;
  unint64_t v91 = (v39 >> 18) - ((2 * (v39 >> 18)) & 0x12E6112E548D4232) + 0x97308972A46A119;
  uint64_t v92 = (v91 >> 17) ^ 0x2E34F744CCF4;
  uint64_t v93 = (v91 >> 10) ^ 0x171A7BA2667A2CLL;
  unint64_t v94 = v93 + (v91 ^ 0xA3810B0DC47135C0 ^ (v91 >> 10)) + 1;
  unint64_t v95 = (v91 ^ ((v91 ^ 0xA396117666174FECLL)
              - ((2 * (v91 ^ 0xA396117666174FECLL) + 2) & 0x6D151E415B6DD5DALL)
              + 0x368A8F20ADB6EAEELL) ^ 0x248A0EBF9B2CFDB1 ^ (v94
                                                              - ((2 * v94) & 0x9CD2DE2D5EE54E9ELL)
                                                              + 0x4E696F16AF72A74FLL))
      + v93;
  unint64_t v96 = v95 - ((2 * v95) & 0xDA2468AF1CDB7740) - 0x12EDCBA871924460;
  unint64_t v97 = v96 ^ (((v91 << 54) ^ 0x4640000000000000)
             - ((2 * ((v91 << 54) ^ 0x4640000000000000)) & 0xF500000000000000)
             + 0x7AA2D7BC444726FALL);
  unint64_t v98 = (((v91 << 47) ^ 0x5809800000000000)
       - ((2 * ((v91 << 47) ^ 0x5809800000000000)) & 0x9AAA000000000000)
       + 0x4D55567BA4A5FA44) ^ 0x4D55567BA4A5FA44;
  unint64_t v99 = 2 * (((v97 ^ 0xD530800000000000) & v98) - ((2 * ((v97 ^ 0xD530800000000000) & v98)) & 0x74FCF318848ECB0CLL))
      - 0xB030CE77B7134F4;
  unint64_t v100 = (((v97 ^ 0xD530E3EBCA2A9D5ALL) + v98) ^ 0xFECD7F697FFFDB6FLL)
       + ((2 * ((v97 ^ 0xD530E3EBCA2A9D5ALL) + v98)) & 0xFD9AFED2FFFFB6DELL)
       + (v99 ^ 0x687EF10900ACC08DLL)
       + 0x64B07E84FBDE1911
       + ((2 * v99) & 0xC6FBFBDCF7BBE8FCLL ^ 0x3F061DEFFEE67FE7);
  unint64_t v101 = ((v100 | v92) - ((2 * (v100 | v92)) & 0xC7B9C3F2FC90BFD8) + 0x63DCE1F97E485FECLL) ^ (((v96 ^ 0x34578E6DBBA0) & v92)
                                                                                              - ((2
                                                                                                * ((v96 ^ 0x34578E6DBBA0) & v92)) & 0x2080BAF9301CLL)
                                                                                              + 0x196D10405D7C980ELL);
  uint64_t v102 = v101 ^ 0x7AB1F1B92334C7E2;
  uint64_t v103 = 2
       * (((v101 ^ 0x7AB1F1B92334C7E2) & v87) - ((2 * ((v101 ^ 0x7AB1F1B92334C7E2) & v87)) & 0x24099E936297892ELL))
       - 0x5BF6616C9D6876D2;
  unint64_t v104 = ((2 * ((v101 ^ 0x7AB1F1B92334C7E2) + v87)) & 0xCA7D5EFF3E67AE5CLL)
       + (((v101 ^ 0x7AB1F1B92334C7E2) + v87) ^ 0xE53EAF7F9F33D72ELL)
       + (v103 ^ 0x24098A1AF8D0852FLL)
       + ((2 * v103) & 0xFFFFD6ECCB71E7FCLL ^ 0xB7ECEBDB3EDEFDA3);
  unint64_t v105 = v104 - ((2 * v104 + 0x358277ED8D0A39A4) & 0xA4B628DFB490EC3ALL) - 0x12E3AF995F326D11;
  unint64_t v106 = v105 ^ (((v83 ^ 0x93D5CE86AF449FD5) & (v72 ^ 0xDA6DF1E8ECF63AC3))
               - ((2 * ((v83 ^ 0x93D5CE86AF449FD5) & (v72 ^ 0xDA6DF1E8ECF63AC3))) & 0x444D5673F7DE001CLL)
               + 0x2226AB39FBEF000ELL);
  char v107 = (v104 - ((2 * v104 - 92) & 0x3A) - 17) ^ (((v83 ^ 0xD5) & (v72 ^ 0xC3))
                                                 - ((2 * ((v83 ^ 0xD5) & (v72 ^ 0xC3))) & 0x1C)
                                                 + 14) ^ 0xD1;
  if ((v106 ^ 0xF1B27767F104B8D9) == 0xA758832980BDE5DELL) {
    char v107 = 41;
  }
  char v108 = (v107 & (v106 ^ 7)) - ((2 * (v107 & (v106 ^ 7))) & 0x52) + 41;
  unint64_t v109 = ((((v106 ^ 0x56EAF44E71B95D07) >> (v108 ^ 0x29u))
         - ((2 * ((v106 ^ 0x56EAF44E71B95D07) >> (v108 ^ 0x29u))) & 0x2D65131395DA9590)
         + 0x16B28989CAED4AC8) ^ 0x16B28989CAED4AC8) >> (((v108 & 0xF9 ^ 0x2E) - (v108 & 6)) ^ 0x2Eu);
  uint64_t v110 = (v109 - ((2 * v109) & 0xC64FD57E) - 483923265) ^ 0x992A1994;
  unint64_t v111 = ((v110 | 0xE346C50DF0B03093) - (v110 | 0x1CB93AF20F4FCF6CLL) + 0x1CB93AF20F4FCF6CLL) ^ 0xA712050988B1F0B9;
  unint64_t v112 = v106 ^ 0xF1B27767F104B8D9 ^ (v106 >> 7) ^ (((v106 << 23) ^ 0x2738DCAE83800000)
                                                    - ((2 * ((v106 << 23) ^ 0x2738DCAE83800000)) & 0x52426AD360000000)
                                                    + 0x29213569B0434AD6) ^ (((v106 << 57) ^ 0xE00000000000000)
                                                                             - ((2 * ((v106 << 57) ^ 0xE00000000000000)) & 0x2C00000000000000)
                                                                             - 0x68773CACE1B4295BLL) ^ (((2 * v111) | 0xB87903D0762FDE66) - v111 + 0x23C37E17C4E810CDLL);
  unint64_t v113 = v112 ^ 0x8C364577D3FF7ED2;
  unint64_t v114 = ((v84 ^ 0x16BFE81DE9DB1331)
        - ((2 * (v84 ^ 0x16BFE81DE9DB1331) - 0x217510C0AD407F8ALL) & 0xA5651C802A4CF256)
        + 0x41F805DFBE863966) ^ v84 ^ 0x20BEDE9706D6910FLL ^ ((v84 ^ 0x79FA9F824084D30BLL)
                                                              - ((2 * (v84 ^ 0x79FA9F824084D30BLL) + 2) & 0xD305AA3F12D22A00)
                                                              + 0x6982D51F89691501);
  unint64_t v115 = (v114 ^ 0x1D8BE5B525E2D1D0)
       - ((2 * (v114 ^ 0x1D8BE5B525E2D1D0) - 0x217510C0AD407F8CLL) & 0x9686A95839DCF85CLL)
       - 0x457733B439B1C398;
  unint64_t v116 = ((v115 << 58) ^ 0xB800000000000000)
       - ((2 * ((v115 << 58) ^ 0xB800000000000000)) & 0x1800000000000000)
       - 0x736ED11740AF249BLL;
  unint64_t v117 = v114 << 63;
  unint64_t v118 = (v116 ^ (((unint64_t)v114 << 63) | 0x736ED11740AF249ALL)) + 1;
  unint64_t v119 = (v117 + v118 - ((2 * v118) & 0xA0B05D1E284C0A94) - 0x2FA7D170EBD9FAB6) ^ v116 ^ ((v116 ^ 0x736ED11740AF249ALL)
                                                                                            - ((2
                                                                                              * (v116 ^ 0x736ED11740AF249ALL)
                                                                                              + 2) & 0x3A0FA7E89C4276C6)
                                                                                            + 0x1D07D3F44E213B64);
  uint64_t v120 = v115 ^ (v115 >> 1) ^ (v115 >> 6) ^ (v117
                                           + (v119 ^ 0x41CED393E557E54CLL)
                                           - 2 * ((v119 ^ 0x41CED393E557E54CLL) & 0x2D28155C3494562FLL ^ v119 & 1)
                                           - 0x52D7EAA3CB6BA9D2) ^ v72;
  *((void *)&v121 + 1) = v101 ^ 0x71B92334C7E2;
  *(void *)&long long v121 = v100;
  uint64_t v122 = v120 ^ 0x188A171C7A889724;
  uint64_t v123 = ((v121 >> 47) - ((2 * (v121 >> 47)) & 0x5A7D2367FD506A56) + 0x2D3E91B3FEA8352BLL) ^ 0xBAD3F79B598E0000;
  *((void *)&v121 + 1) = ((v121 >> 47) - ((2 * (v121 >> 47)) & 0xFD506A56) - 22530773) ^ 0x7EB6;
  *(void *)&long long v121 = v123;
  uint64_t v124 = (v121 >> 17) - ((2 * (v121 >> 17)) & 0x22DF0C71BA12D23ELL) + 0x116F8638DD09691FLL;
  if (v22) {
    uint64_t v125 = v124 ^ 0x34A14DCE6E1D3A8CLL ^ v105;
  }
  else {
    uint64_t v125 = v105;
  }
  unint64_t v126 = ((v125 ^ 0x525B146FDA48761DLL) & (v124 ^ 0xCB5EB23191E2C573))
       - ((2 * ((v125 ^ 0x525B146FDA48761DLL) & (v124 ^ 0xCB5EB23191E2C573))) & 0x63D8485BE0EC8E88)
       + 0x31EC242DF0764744;
  unint64_t v127 = ((v126 ^ 0xCE13DBD20F89B8BBLL)
        - ((2 * (v126 ^ 0xCE13DBD20F89B8BBLL) + 2) & 0xCA564B2B5A271832)
        + 0x652B2595AD138C1ALL) ^ v126 ^ (v122
                                        + (v120 ^ 0xD699CCCE75012F9FLL ^ v126)
                                        + 1
                                        - ((2 * (v122 + (v120 ^ 0xD699CCCE75012F9FLL ^ v126) + 1)) & 0xE3905CF507E551D2)
                                        + 0x71C82E7A83F2A8E9);
  unint64_t v128 = (((2 * (v127 & 0x3807CE3A8A3D8537 ^ 0xCD2518878615802ALL)) | 0x4A258A6205A7F542)
        - (v127 & 0x3807CE3A8A3D8537 ^ 0xCD2518878615802ALL)
        + 0x5AED3ACEFD2C055FLL) ^ 0x4830D3B40ED37BBFLL;
  unint64_t v129 = ((2 * (v127 & 0xC7F831C575C27AC8 ^ 0x42600041518042C8)) | 0xD3A3831B0D4CCAEELL)
       - (v127 & 0xC7F831C575C27AC8 ^ 0x42600041518042C8)
       - 0x69D1C18D86A66577;
  unint64_t v130 = ((v129 & 0xF4C6BE1B2F7726A2 ^ 0xD4441E132D730280)
        + (v129 ^ 0x2093E00C028CE573)
        - ((v129 ^ 0x2093E00C028CE573) & 0xF4C6BE1B2F7726A4)) ^ 0xFAECBE1BAE5F86EALL | v128;
  uint64_t v131 = v122 - 0x75CF9D87EFFF5FA8 + (v130 ^ 0x75CF9D87EFFF5FA8);
  unint64_t v132 = v131
       + ((2 * v130) & 0xEB9F3B0FDFFEBF50)
       - ((2 * (v131 + ((2 * v130) & 0xEB9F3B0FDFFEBF50))) & 0xF85AE0F5303A0C08)
       - 0x3D28F8567E2F9FCLL;
  unint64_t v133 = (((v105 ^ 0xADA4EB9025B789E2) & (v83 ^ 0x6C2A317950BB602ALL))
        - ((2 * ((v105 ^ 0xADA4EB9025B789E2) & (v83 ^ 0x6C2A317950BB602ALL))) & 0x46A0154B0002B79ALL)
        - 0x5CAFF55A7FFEA433) ^ v101 ^ v132;
  unint64_t v134 = v133 ^ (v133 >> 17) ^ (v133 >> 10) ^ (((v133 << 47) ^ 0x288E800000000000)
                                             - ((v133 << 48) & 0x8420000000000000)
                                             + 0x42103E133050A9A1) ^ (((v133 << 54) ^ 0x4740000000000000)
                                                                      - ((2 * ((v133 << 54) ^ 0x4740000000000000)) & 0x2980000000000000)
                                                                      + 0x14E2B222CD18F9C4);
  unint64_t v135 = v134 ^ 0xECD23336BF5ACFA2;
  unint64_t v136 = v134 ^ 0xECD23336BF5ACFA2 ^ v113;
  unint64_t v137 = ((v83 & 0xFFFFFFFFFBFFFFFFLL ^ 0x1B8A5FCCF062DCB1)
        + (v83 & 0xD13D507C13FCD3A9 ^ 0xC0350030079C0308)
        - ((v83 & 0xFFFFFFFFFBFFFFFFLL ^ 0x1B8A5FCCF062DCB1) & 0xD13D507C13FCD3A9)) ^ 0xF0BD7EEC1365573BLL;
  unint64_t v138 = ((2 * v137) | 0xEF932CC15FD9369ALL) - v137 - 0x77C99660AFEC9B4DLL;
  unint64_t v139 = ((2 * (v122 & (v72 ^ 0x25920E171309C53CLL))) & 0xBDF9DB6FFB7FFDFCLL)
       + (v122 & (v72 ^ 0x25920E171309C53CLL) ^ 0xDEFCEDB7FDBFFEFELL);
  unint64_t v140 = (v83 & 0x4000000 ^ 0xB7F7FFCF7D3A7EDBLL) + 2 * (v83 & 0x4000000);
  BOOL v141 = ((v140 + 0x4808003082C58125) & (v139 + 0x2103124802400102)) == ((2
                                                                            * ((v140 + 0x4808003082C58125) & (v139 + 0x2103124802400102))) & 0x3B87610D38000000);
  unint64_t v142 = v140 + 0x5FEDFAB8B7EFB578;
  unint64_t v143 = 0xCFDDFA57B264B32ELL - v140;
  if (v141) {
    unint64_t v143 = v142;
  }
  uint64_t v144 = (v143 + v139 - ((2 * (v143 + v139) + 0x123A2F7F9A2B995ELL) & 0x1B976F794E717430) + 0x16E8CF7C744E86C7) ^ v138;
  unint64_t v145 = v144 ^ 0xDDD96A7B9D032F07;
  unint64_t v146 = v75 + (v72 ^ 0xD4690595229EF367 ^ v144 ^ 0xDDD96A7B9D032F07) + 1;
  unint64_t v147 = (v146 - ((2 * v146) & 0x2A152024D1674E54) - 0x6AF56FED974C58D6) ^ v144 ^ 0xDDD96A7B9D032F07;
  unint64_t v148 = v147 ^ 0x64F1800000000000;
  *((void *)&v149 + 1) = v147 ^ 0x1B9059249171;
  *(void *)&long long v149 = v147 ^ 0x64F1800000000000;
  uint64_t v150 = (v149 >> 45) - ((2 * (v149 >> 45)) & 0xA57E62F410203432) + 0x52BF317A08101A19;
  unint64_t v151 = ((2 * ((v144 ^ 0xD3DD9E06536BE6A3) + 1)) & 0x7F6FEB5FFFBFBE3ELL)
       + (((v144 ^ 0xD3DD9E06536BE6A3) + 1) ^ 0xBFB7F5AFFFDFDF1FLL);
  *((void *)&v149 + 1) = v151 + 0xA50002020E1;
  *(void *)&long long v149 = v151 + 0x40480A50002020E1;
  uint64_t v152 = v150 ^ ((v149 >> 45) - ((2 * (v149 >> 45)) & 0x212A772615D7B0E2) - 0x6F6AC46CF514278FLL);
  *((void *)&v149 + 1) = v152 ^ 0x5C199;
  *(void *)&long long v149 = v152 ^ 0x99281E9B7EE80000;
  uint64_t v153 = (((v149 >> 19) - ((2 * (v149 >> 19)) & 0x3CD67F6295CDB652) + 0x1E6B3FB14AE6DB29) ^ 0xDE1514D1086894ABLL)
       + v75;
  unint64_t v154 = (v153 - ((2 * v153) & 0xAB2CCCE7D8DEB0C0) - 0x2A69998C1390A7A0) ^ ((v102 & (v120 ^ 0xE775E8E3857768DBLL))
                                                                              - ((2
                                                                                * (v102 & (v120 ^ 0xE775E8E3857768DBLL))) & 0x531F1BB237677DB6)
                                                                              - 0x56707226E44C4125);
  uint64_t v155 = ((v154 >> 39) ^ 0x25DFABCDAF2F2CD9) - 0x25DFABCDAFB3EEFELL + ((v154 >> 38) & 0x367DDFC ^ 0x121844C);
  *((void *)&v149 + 1) = v154 ^ 0xE611392099F3407;
  *(void *)&long long v149 = v154 ^ 0x4000000000000000;
  uint64_t v156 = v154 ^ 0x39D13E667AC4F5D6 ^ ((v149 >> 61) - ((2 * (v149 >> 61)) & 0xEF605BE8E6B783A2) + 0x77B02DF4735BC1D1);
  uint64_t v157 = 2 * ((v156 & v155) - ((2 * (v156 & v155)) & 0x313CD4CACDEAEF1CLL)) - 0x4EC32B35321510E4;
  unint64_t v158 = ((2 * (v156 + v155)) & 0x9A2FFFE7F9ED3DBCLL)
       + ((v156 + v155) ^ 0x4D17FFF3FCF69EDELL)
       + (v157 ^ 0xD33590CA836AAD8DLL)
       + ((2 * v157) & 0x3BED77FF62FF7ADCLL ^ 0xDD96DE6AFD2AA5E7);
  uint64_t v159 = (v158 - ((2 * v158 + 0x21BD781769123D24) & 0x6ADEB11E325102D6) + 0x64E149ACDB19FFDLL) ^ (((v154 << 25) ^ 0x24133E680E000000) - ((2 * ((v154 << 25) ^ 0x24133E680E000000)) & 0x309535D628000000) - 0x67B56514EADAE619);
  uint64_t v160 = v159 ^ 0x2D25C2640C0D988CLL;
  unint64_t v161 = v145 ^ v106;
  uint64_t v162 = (((v145 ^ v106) << 36) ^ 0x59BC642000000000)
       - ((2 * (((v145 ^ v106) << 36) ^ 0x59BC642000000000)) & 0x60CC4A000000000)
       - 0x7CF99DA1C1540F36;
  unint64_t v163 = (((v161 << 45) ^ 0x78C8400000000000)
        - ((2 * ((v161 << 45) ^ 0x78C8400000000000)) & 0x3F25000000000000)
        - 0x606D7C645C20C9F6) ^ 0x9F92839BA3DF360ALL;
  unint64_t v164 = 2
       * ((v163 & (v145 ^ v106 ^ 0xEF82758D059BC642))
        - ((2 * (v163 & (v145 ^ v106 ^ 0xEF82758D059BC642))) & 0x58447CAB89CAD77CLL))
       + 0x58447CAB89CAD77CLL;
  unint64_t v165 = v163 + (v161 ^ (v161 >> 28) ^ (v161 >> 19) ^ 0xEF826873B30D3E21);
  unint64_t v166 = (v165 ^ 0x7FEDFEBFBBB35FAELL)
       + ((2 * v165) & 0xFFDBFD7F7766BF5CLL)
       + (v164 ^ 0x5A4CDC2B986CDDEFLL)
       + ((2 * v164) & 0xFBEEBEFFDCB3EAD8 ^ 0x4F7747A8EF6E5527)
       + 1;
  uint64_t v167 = (v166 - ((2 * v166 + 0x7C12C180654D2B7ELL) & 0x5DD0F8E7F246737CLL) - 0x530E22CBD4363083) ^ v162 ^ v113;
  unint64_t v168 = (((v159 ^ 0x2D25C2640C0D988CLL) & (v167 ^ 0x5F1345B260C59F7CLL))
        - ((2 * ((v159 ^ 0x2D25C2640C0D988CLL) & (v167 ^ 0x5F1345B260C59F7CLL))) & 0xDDB7790FC8F8C7B6)
        + 0x6EDBBC87E47C63DBLL) ^ v136;
  uint64_t v169 = -8192;
  if ((v132 & 0x2000) != 0) {
    uint64_t v169 = 0x2000;
  }
  unint64_t v170 = ((v169 + (v132 ^ 0x85789A96D555BE08)) ^ 0xECDBEBECAE6EFFFELL)
       + 0x1324141351910002
       + ((2 * (v169 + (v132 ^ 0x85789A96D555BE08))) & 0xD9B7D7D95CDDFFFCLL);
  uint64_t v171 = (v170 >> 6) - ((v170 >> 5) & 0x6E5B87039DCCAACLL) + 0x4F72DC381CEE6556;
  unint64_t v172 = (v171 | ((v131 << 63) - 0x36E8B2B23F3A4D4ELL) ^ 0xC9174D4DC0C5B2B2) ^ 0x4F72DC381CEE6556;
  uint64_t v173 = v132 ^ (v132 >> 1) ^ (((v132 << 58) ^ 0x2000000000000000)
                             - ((2 * ((v132 << 58) ^ 0x2000000000000000)) & 0x7000000000000000)
                             + 0x3ACDE55293FFD44CLL) ^ (v172
                                                      - 2 * (v172 & 0x28CE883B5DC1B9BELL ^ v171 & 8)
                                                      + 0x28CE883B5DC1B9B6) ^ v159;
  unint64_t v174 = (((v173 ^ 0xF8E278D07DCC94FALL) & (v159 ^ 0xD2DA3D9BF3F26773))
        - ((2 * ((v173 ^ 0xF8E278D07DCC94FALL) & (v159 ^ 0xD2DA3D9BF3F26773))) & 0x72B4537F1A3C9B2ELL)
        + 0x395A29BF8D1E4D97) ^ v167;
  unint64_t v175 = (((v174 ^ v168) << 45) ^ 0xA5FE000000000000)
       - ((2 * (((v174 ^ v168) << 45) ^ 0xA5FE000000000000)) & 0xCEFC000000000000)
       + 0x677E0949742B4074;
  unint64_t v176 = v174 ^ v168 ^ ((v174 ^ v168) >> 28) ^ ((v174 ^ v168) >> 19);
  unint64_t v177 = (((v176 & 0x460470002000944 ^ 0x700304D44E791BBLL) - 1) & 0x4605744464409CCLL | v176 & 0x1000801000082000) ^ 0x91B1EEFB6EB9FB3FLL ^ ((v175 & 0x1460C00000000000 ^ 0x1420400000000000 | 0x85F1BEBF28FDDBB7) - (v175 & 0x1460C00000000000 ^ 0x1420400000000000 | 0x7A0E4140D7022448) + 0x7A0E4140D7022448) | ((v176 & 0x1800016504C621 ^ 0x18000105000020) + (v176 & 0x10000140040400 ^ 0x9666C52D89C0D56) - ((v176 & 0x1800016504C621 ^ 0x18000105000020) & 0x10000140040400)) & 0x9F8201FE5FFFE21 ^ ((v175 & 0x18000000000000 ^ 0x85FF28F2DBFB0456) - 0x442083201680000) ^ 0x88DD00D23B0FC856;
  uint64_t v178 = v177 ^ 0x17E7F9DB9F2FFFFDLL;
  uint64_t v179 = (2 * v177) & 0x2FCFF3B73E5FFFFALL;
  unint64_t v180 = (((2 * (v176 & 0xEB0738EE98F3109ALL ^ 0x906300610221000)) | 0xA11FA3651B44797ALL)
        - (v176 & 0xEB0738EE98F3109ALL ^ 0x906300610221000)
        - 0x508FD1B28DA23CBDLL) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v181 = ((2 * v175) & 0xD40E400000000000 ^ 0xC40C000000000000)
       + (v175 & 0xEB87200000000000 ^ 0xD69E2D7DA2F97EBLL);
  unint64_t v182 = ((v174 ^ v168) & 0x80000000000000 ^ 0xF7BDA6FAFBFDDFDFLL) + 2 * ((v174 ^ v168) & 0x80000000000000);
  BOOL v141 = ((v175 ^ 0x6700000000000000) & (v182 + 0x842590504022021)) == ((2
                                                                           * ((v175 ^ 0x6700000000000000) & (v182 + 0x842590504022021))) & 0xE3FFFFFFFFFFFFFFLL);
  unint64_t v183 = v182 + 0x7BEFDB2FFC9FE5C0;
  unint64_t v184 = 0x6B6B2925F49BA57ELL - v182;
  if (v141) {
    unint64_t v184 = v183;
  }
  unint64_t v185 = v178
       + v179
       - 0x17E7F9DB9F2FFFFDLL
       + (v180 ^ 0xA5AE98BF1FCDA051 ^ (v181
                                       + v184
                                       - ((2 * (v181 + v184) + 0x3BC535FA5A6544ECLL) & 0xFA4EB31E249D39EALL)
                                       - 0x64F60B73C07EC095));
  *((void *)&v186 + 1) = v168 ^ 0x6AB6BDCA93;
  *(void *)&long long v186 = v168 ^ 0xFF97AC0000000000;
  uint64_t v187 = (v186 >> 41) - ((2 * (v186 >> 41)) & 0x1F181AAB79A4CB10) + 0xF8C0D55BCD26588;
  *((void *)&v186 + 1) = (((v159 ^ 0xC0D988C) & (v167 ^ 0x60C59F7C))
                          - ((2 * ((v159 ^ 0xC0D988C) & (v167 ^ 0x60C59F7C))) & 0xC8F8C7B6)
                          - 461610021) ^ v136 ^ 0x13;
  *(void *)&long long v186 = v168 ^ 0xFF97AC6AB6BDCA80;
  uint64_t v188 = v187 ^ v168 ^ ((v186 >> 7) - ((2 * (v186 >> 7)) & 0x4261EAFF23043B24) - 0x5ECF0A806E7DE26ELL);
  unint64_t v189 = v188 ^ 0x5ED6AF835275765ALL ^ ((((v174 ^ v168) << 36) ^ 0x1152FF0000000000)
                                      - ((2 * (((v174 ^ v168) << 36) ^ 0x1152FF0000000000)) & 0x9A32C7A000000000)
                                      - 0x32E69C251E856A0CLL) ^ (v185
                                                               + 0x5242EF77D440826ALL
                                                               + (~(2 * v185) | 0x5B7A2110577EFB2DLL));
  unint64_t v190 = v173 ^ (((v134 ^ 0xFFA4D097B9B20D1FLL) & (v112 ^ 0x8134E1178B4DD725))
               - ((2 * ((v134 ^ 0xFFA4D097B9B20D1FLL) & (v112 ^ 0x8134E1178B4DD725))) & 0xBE1D12FB242D273CLL)
               + 0x5F0E897D9216939ELL);
  uint64_t v191 = v190 ^ (v190 >> 6) ^ (v190 >> 1) ^ ((v190 << 63) | 0x637FE9700C8777ABLL) ^ (((v190 << 58) ^ 0x7800000000000000)
                                                                                   - ((2
                                                                                     * ((v190 << 58) ^ 0x7800000000000000)) & 0x4000000000000000)
                                                                                   - 0x5CC57BA6C907BF63);
  uint64_t v192 = v159 ^ 0x108D5920AB85BD56;
  if (!(v148 >> 45)) {
    uint64_t v192 = 0x425764BB5877DA25;
  }
  uint64_t v193 = 2 * ((v192 & v160) - ((2 * (v192 & v160)) & 0x1868AE1187548C24)) - 0x679751EE78AB73DCLL;
  unint64_t v194 = ((v160 + 0x425764BB5877DA25) ^ 0xCEFC5D7FDFEDFFE7)
       + ((2 * (v160 + 0x425764BB5877DA25)) & 0x9DF8BAFFBFDBFFCELL)
       + (v193 ^ 0x982AAD7187B48875)
       + ((2 * v193) & 0xFF7BF93FFE3FF75CLL ^ 0xCFAEA7DCF1D6EFB7)
       + 1;
  unint64_t v195 = v174 ^ (((v173 ^ 0x71D872F82336B05) & (v134 ^ 0x5B2F68464DF2E0))
               - ((2 * ((v173 ^ 0x71D872F82336B05) & (v134 ^ 0x5B2F68464DF2E0))) & 0x3F9CB9E1EF551C30)
               - 0x6031A30F085571E8) ^ (v194
                                        - ((2 * v194 + 0x21833E403E63F790) & 0x3D58E20A418E3FFELL)
                                        + 0x4F6E10253FF91BC7);
  unint64_t v196 = ((v195 << 25) ^ 0xF8A9379E6000000)
       - ((2 * ((v195 << 25) ^ 0xF8A9379E6000000)) & 0xEC73444244000000)
       + 0x7639A22122619650;
  unint64_t v197 = ((HIBYTE(v195) & 0xE0 ^ 0xFFFFFFFFFFFFFFDFLL)
        + 0x1C592C734322F6D2
        + ((2 * (HIBYTE(v195) & 0xE0)) | 0xC74DA71979BA125ELL)) ^ 0x2A4FA8B4EB3062A3;
  *((void *)&v198 + 1) = v195 ^ 0xD4BE07C549BCF3;
  *(void *)&long long v198 = v195 ^ 0x1800000000000000;
  uint64_t v199 = (((2 * v197) & 0x92D076602D081090) - v197 - 0x5D6C3B303E96885CLL) ^ ((v198 >> 59)
                                                                              - ((2 * (v198 >> 59)) & 0xA62A7E962E4B53ECLL)
                                                                              - 0x2CEAC0B4E8DA560ALL);
  *((void *)&v198 + 1) = v199 ^ 7;
  *(void *)&long long v198 = v199 ^ 0x81F4EFE4A59AA3A0;
  uint64_t v200 = ((v198 >> 5) - ((2 * (v198 >> 5)) & 0x21B161880247D3BALL) + 0x10D8B0C40123E9DDLL) ^ (((8 * v195) ^ 0xC6A5F03E2A4DE798)
                                                                                            - ((2
                                                                                              * ((8 * v195) ^ 0xC6A5F03E2A4DE798)) & 0x80043ACAB05A7BA0)
                                                                                            + 0x40021D65582D3DD4);
  unint64_t v201 = v200 ^ 0x991676DB982F0CBBLL;
  v195 >>= 39;
  unint64_t v202 = (v200 ^ 0x991676DB982F0CBBLL)
       + (((v195 ^ 0x66E9892467E15A38 ^ v200) + 1) ^ 0xFE7F354B7BFAF7F7)
       + ((2 * ((v195 ^ 0x66E9892467E15A38 ^ v200) + 1)) & 0xFCFE6A96F7F5EFEELL)
       + 0x180CAB484050809;
  unint64_t v203 = (v195 ^ ((v195 ^ 0xFFFFFFFFFFCE5683)
                - ((2 * (v195 ^ 0xFFFFFFFFFFCE5683) + 2) & 0x3FA4D9C632A2130)
                - 0x7E02D931CE6AEF67) ^ 0xC849DF383C59839CLL ^ (v202
                                                                - ((2 * v202) & 0x9369F3EC1BFA74F0)
                                                                + 0x49B4F9F60DFD3A78))
       + v201;
  uint64_t v204 = (v203 - ((2 * v203) & 0x9694F76FAD27A2ELL) - 0x7B4B58448296C2E9) ^ v196;
  unint64_t v205 = (((v204 ^ 0xD72FA65A0F754B8) & (v191 ^ 0x8FB82EC68895E3CALL))
        - ((2 * ((v204 ^ 0xD72FA65A0F754B8) & (v191 ^ 0x8FB82EC68895E3CALL))) & 0x280D379E0D2BA51CLL)
        + 0x14069BCF0695D28ELL) ^ v189;
  unint64_t v206 = ((v204 ^ 0xF28D059A5F08AB47) & (v189 ^ 0x6F598891035D2CB1))
       - ((2 * ((v204 ^ 0xF28D059A5F08AB47) & (v189 ^ 0x6F598891035D2CB1))) & 0xF8A2503D44A6E206)
       - 0x3AED7E15DAC8EFDLL;
  unint64_t v207 = (((v136 ^ 0x1E7447C15E5A6B4ALL) & (v167 ^ 0xA0ECBA4D9F3A6083))
        - ((2 * ((v136 ^ 0x1E7447C15E5A6B4ALL) & (v167 ^ 0xA0ECBA4D9F3A6083))) & 0xE3FBB97DEB2FCBC0)
        - 0xE0223410A681A20) ^ v135 ^ v190;
  unint64_t v208 = v207 ^ 0x3560AF1FE3384F5ALL;
  unint64_t v209 = (v207 ^ 0x3560AF1FE3384F5ALL) >> 10;
  unint64_t v210 = ((2 * (v209 & 0xFFFFFFFFFFFEFFFFLL ^ 0x1D3DE75D207DE4)) & 0x5EE435F8DD74DELL)
       - (v209 & 0xFFFFFFFFFFFEFFFFLL ^ 0x1D3DE75D207DE4)
       + 0x2508DE503914590;
  unint64_t v211 = ((v207 << 54) ^ 0xB680000000000000)
       - ((2 * ((v207 << 54) ^ 0xB680000000000000)) & 0xFCFFFFFFFFFFFFFFLL)
       - 0x1A374C2DFBDA917;
  uint64_t v212 = ((v207 << 47) ^ 0x3D6D000000000000)
       - ((2 * ((v207 << 47) ^ 0x3D6D000000000000)) & 0x109E000000000000)
       - 0x77B0F0DFC6A9963FLL;
  unint64_t v213 = v207 ^ 0xFE51E43C469E7ADALL;
  if (v168 == 0x8F5004B945D9F76ELL) {
    int v214 = 0;
  }
  else {
    int v214 = (v207 ^ 0x3560AF1FE3384F5ALL) >> 10;
  }
  uint64_t v215 = v214 ^ v207;
  uint64_t v216 = v209 & 0x10000 ^ 0x39B77FFFFFEF3EEFLL;
  uint64_t v217 = -(v215 & (v216 - 0x39B77FFFFFEE3EEFLL));
  uint64_t v218 = v216 - 0x31901CA6CC600001;
  uint64_t v219 = 0x41DEE359337C7DDDLL - v216;
  if (v217) {
    uint64_t v220 = v219;
  }
  else {
    uint64_t v220 = v218;
  }
  unint64_t v221 = v212 ^ (v208 >> 17) ^ v211 ^ v210 ^ (v213
                                            - 0x8276359338E3EEELL
                                            + v220
                                            - ((2 * (v213 - 0x8276359338E3EEELL + v220)) & 0xA392601469AF9A10)
                                            - 0x2E36CFF5CB2832F8);
  uint64_t v222 = v221 ^ 0x6448CF272CCE0B2;
  uint64_t v223 = v221 ^ 0x6448CF272CCE0B2 ^ v188 ^ 0x5ED6AF835275765ALL;
  unint64_t v224 = v206 ^ v223;
  unint64_t v225 = v205 ^ v206 ^ v223;
  uint64_t v226 = v204 ^ v191;
  unint64_t v227 = (((v204 ^ v191 ^ 0x82CAD4A32862B772) & (v221 ^ 0xA5A5ADDF1E0B710ALL))
        - ((2 * ((v204 ^ v191 ^ 0x82CAD4A32862B772) & (v221 ^ 0xA5A5ADDF1E0B710ALL))) & 0x7F3EAFCF4EA21880)
        - 0x4060A81858AEF3C0) ^ v204 ^ v205;
  char v228 = ((((v204 ^ v191 ^ 0x72) & (v221 ^ 0xA)) - ((2 * ((v204 ^ v191 ^ 0x72) & (v221 ^ 0xA))) & 0x80) + 64) ^ v204 ^ (((v204 ^ 0xB8) & (v191 ^ 0xCA)) - ((2 * ((v204 ^ 0xB8) & (v191 ^ 0xCA))) & 0x1C) - 114) ^ v189) & 0x2D;
  unint64_t v229 = ((((v225 ^ 0xDDD13D12E64DF1B7) << (v228 ^ 0x25u))
         - ((2 * ((v225 ^ 0xDDD13D12E64DF1B7) << (v228 ^ 0x25u))) & 0xBB893C6B47C7D4D0)
         + 0x5DC49E35A3E3EA68) ^ 0x5DC49E35A3E3EA68) << (v228 ^ 8u);
  unint64_t v230 = v229 - ((2 * v229) & 0xC738B6395A9B3DD6) - 0x1C63A4E352B26115;
  unint64_t v231 = ((((v224 << 57) ^ 0x7200000000000000)
         - ((2 * ((v224 << 57) ^ 0x7200000000000000)) & 0x9000000000000000)
         - 0x368DE80A7087A074) ^ 0xC97217F58F785F8CLL | (v224 >> 7) ^ (v224 >> 41)) ^ 0xFBF088BF3F08ECLL;
  uint64_t v232 = (v231 - 0x16274302DA3564 + (~(2 * v231) | 0x2C4E8605B46AC9)) ^ v224;
  unint64_t v233 = (v232 & 0xF7FFFFFFFFFFFFFFLL ^ 0x614B2EF23BD6CA04 | 0x2FD69C8F22252B34)
       - (v232 & 0xF7FFFFFFFFFFFFFFLL ^ 0x614B2EF23BD6CA04 | 0xD0296370DDDAD4CBLL)
       - 0x2FD69C8F22252B35;
  unint64_t v234 = (v233 & 0x8A2DF72C8A92F986 ^ 0xA29E3208892F087) + (v233 & 0x75D208D3756D0679) - 1;
  uint64_t v235 = ((v224 << 24) & 0x3EFFFFF1EC000000 ^ 0x1E80FA6128000000) + ((v224 << 23) ^ 0x30BF82CB6AD7BD7ELL);
  unint64_t v236 = (v232 & 0x800000000000000 ^ 0xDFF3ED133ED6770FLL) + 2 * (v232 & 0x800000000000000);
  BOOL v141 = ((v236 + 0x200C12ECC12988F1) & (v235 - 0x1F7FFFF8F657BD7ELL)) == ((2
                                                                            * ((v236 + 0x200C12ECC12988F1) & (v235 - 0x1F7FFFF8F657BD7ELL))) & 0x9FFFFFFFFFFFFFFFLL);
  unint64_t v237 = v236 + 0x3A7F9FFDD3F9CFF8;
  unint64_t v238 = 0xFA677A2451A6BE16 - v236;
  if (v141) {
    unint64_t v238 = v237;
  }
  uint64_t v239 = (v238 + v235 - ((2 * (v238 + v235) + 0xC18E5EBEDAFF6F6) & 0x33ACF9E8EABB5370) - 0x201D101593CA5ACDLL) ^ v234;
  uint64_t v240 = v225 ^ (v225 >> 19) ^ (v225 >> 28) ^ (((v225 << 36) ^ 0x64DF1B7000000000)
                                             - ((2 * ((v225 << 36) ^ 0x64DF1B7000000000)) & 0x6B7176A000000000)
                                             - 0x4A4744A07D50035ALL) ^ v230 ^ v239 ^ 0x2895FEC48BDBD288;
  unint64_t v241 = v226 ^ (((v221 ^ 0x5A5A5220E1F48EF5) & (v188 ^ 0x512B54409BEDB289))
               - ((2 * ((v221 ^ 0x5A5A5220E1F48EF5) & (v188 ^ 0x512B54409BEDB289))) & 0x3903C89FD2E68B9CLL)
               + 0x1C81E44FE97345CELL);
  unint64_t v242 = (((((v241 << 58) ^ 0x1C00000000000000) - ((v241 << 59) & 0x4000000000000000) + 0x2038D852AA41A6E8) ^ (((unint64_t)~(v226 ^ (((v221 ^ 0xE1F48EF5) & (v188 ^ 0x9BEDB289)) - ((2 * ((v221 ^ 0xE1F48EF5) & (v188 ^ 0x9BEDB289))) & 0xD2E68B9C) - 378321458)) << 63) | 0x2038D852AA41A6E8)) & 0xFC00000000000000 | (v241 >> 6)) ^ 0x31C0D063A847C8;
  unint64_t v243 = v227 ^ (v227 >> 61) ^ (v227 >> 39) ^ (((8 * v227) ^ 0x4DB8074A41A8B3A8)
                                             - ((2 * ((8 * v227) ^ 0x4DB8074A41A8B3A8)) & 0xFAF9D75E6A90C370)
                                             + 0x7D7CEBAF354861BCLL) ^ (((v227 << 25) ^ 0xD2906A2CEA000000)
                                                                      - ((2 * ((v227 << 25) ^ 0xD2906A2CEA000000)) & 0x5C841E36BC000000)
                                                                      + 0x2E420F1B5F59E2ABLL);
  unint64_t v244 = v241 ^ (v241 >> 1) ^ (v242 - ((2 * v242) & 0xA237F666CAE91296) + 0x511BFB336574894BLL) ^ v243 ^ 0xE8645BF11DB49016;
  uint64_t v245 = (((v244 ^ 0x49BE6A8BC4AEE93FLL) & (v243 ^ 0x5761BA2DC880499))
        - ((2 * ((v244 ^ 0x49BE6A8BC4AEE93FLL) & (v243 ^ 0x5761BA2DC880499))) & 0x74C474CC60090F6CLL)
        - 0x459DC599CFFB784ALL) ^ 0x7F48D7411CB41457 ^ v240;
  unint64_t v246 = (v223 ^ 0xAC1CDAEEA55F546BLL) + 1;
  uint64_t v247 = v223 & 0x100;
  unint64_t v248 = (v246 ^ 0x576FFFCFDFFFEECFLL) + (v247 ^ 0xBC80031481180) + ((2 * v246) & 0xAEDFFF9FBFFFDD9ELL);
  unint64_t v249 = (((v248 + 0x884382FEEB7FFB0) & 0x16E7899BBCEBB6DALL)
        - ((2 * (v248 + 0x884382FEEB7FFB0)) & 0x2187031230052494)
        + 0x10D3D5E95B16D36ALL) ^ 0x10D3D5E95B16D36ALL | v247 ^ 0xD99370AFB66B39C8 ^ (((v248 - 0x577BC7D011480050) & 0xE918766443144925)
                                                                                      - ((2
                                                                                        * (v248 - 0x577BC7D011480050)) & 0x9220E04804001000)
                                                                                      - 0x266C8F504994C738);
  unint64_t v250 = ((v249 - ((2 * v249) & 0x736D90C70525D86ELL) + 0x39B6C8638292EC37) ^ 0xC649379C7D6D13C8) & (v189 ^ 0x90A6776EFCA2D34ELL);
  unint64_t v251 = (v250 - ((2 * v250) & 0x6EA07073EF60D69ELL) - 0x48AFC7C6084F94B1) ^ v222 ^ v241;
  *((void *)&v252 + 1) = v251 ^ 0x276;
  *(void *)&long long v252 = v251 ^ 0x8671760676194800;
  uint64_t v253 = v251 ^ (v251 >> 17) ^ (((v251 << 47) ^ 0xA53B000000000000)
                              - ((2 * ((v251 << 47) ^ 0xA53B000000000000)) & 0x83BF000000000000)
                              + 0x41DFE4A45DE21C67) ^ ((v252 >> 10)
                                                       - ((2 * (v252 >> 10)) & 0x5B0A8E616690FAF4)
                                                       - 0x527AB8CF4CB78286);
  unint64_t v254 = (((v244 ^ 0xB64195743B5116C0) & (v253 ^ 0x6A2B96AA23B01067))
        - ((2 * ((v244 ^ 0xB64195743B5116C0) & (v253 ^ 0x6A2B96AA23B01067))) & 0x647F5E8D2DDD356CLL)
        + 0x323FAF4696EE9AB6) ^ v243 ^ 0xE8645BF11DB49016 ^ v245;
  *((void *)&v252 + 1) = v254 ^ 0xF25B8D4866ADD83;
  *(void *)&long long v252 = v254 ^ 0x2000000000000000;
  uint64_t v255 = v254 ^ (v254 >> 39) ^ ((v252 >> 61) - ((2 * (v252 >> 61)) & 0xB8FD19B672F2C05CLL) - 0x23817324C6869FD2);
  unint64_t v256 = v255 ^ (((v254 << 25) ^ 0xA90CD5BB06000000)
               - ((2 * ((v254 << 25) ^ 0xA90CD5BB06000000)) & 0x67DAED23E8000000)
               + 0x33ED7691F467C988);
  BYTE3(v249) = ((v254 ^ (v254 >> 39) ^ ((v252 >> 61)
                                                     - ((2 * (v252 >> 61)) & 0x72F2C05C)
                                                     + 964255790) ^ (((v254 << 25) ^ 0x6000000)
                                                                   - ((2 * ((v254 << 25) ^ 0x6000000)) & 0xE8000000)
                                                                   - 194524792)) >> 24) ^ 0x28;
  uint64_t v257 = v239 ^ 0x2895FEC48BDBD288 ^ v253 ^ 0x59C93F7DE3FF80D6;
  uint64_t v258 = v240 ^ 0x7C1389682126D939;
  unint64_t v259 = ((((2 * v240) ^ 0xF82712D0424DB272)
         - 2 * (((2 * v240) ^ 0xF82712D0424DB272) & 0x170CD993C2D42AELL ^ (2 * v240) & 0xC)
         + 0x170CD993C2D42A3) ^ 0xFE8F3266C3D2BD5CLL)
       + (v240 ^ 0x7C1389682126D939);
  unint64_t v260 = ((v259 ^ 0x3A5DBFFE7F7F7BF9) - 0x3A5DBFFE7F7F7BF9 + ((2 * v259) & 0x74BB7FFCFEFEF7F2)) & (v243 ^ 0xFA89E45D2377FB66);
  uint64_t v261 = (v260 - ((2 * v260) & 0x2523DA7FE2E0F0C0) - 0x6D6E12C00E8F87A0) ^ v257;
  unint64_t v262 = (((2 * (v261 & 0x69D34E6AA3CEF238 ^ 0x4195222221468ABALL)) | 0xBD5B3D7355ED5B6ALL)
        - (v261 & 0x69D34E6AA3CEF238 ^ 0x4195222221468ABALL)
        + 0x215261465509524BLL) ^ 0xDFA9B6F9A8B6053FLL;
  unint64_t v263 = (v262 | v261 & 0x962CB1955C310DC7 ^ 0x1604010400010DC5)
       - 2 * ((v262 | v261 & 0x962CB1955C310DC7 ^ 0x1604010400010DC5) & 0x696EAD759796176FLL ^ v262 & 8)
       - 0x1691528A6869E899;
  unint64_t v264 = (((v263 ^ 0xAE5A9C4F88BD3F30) + 0x4734313A1F2B2857) ^ 0xBDF7F5ADFFD9F5E3)
       + ((2 * v263) ^ 0xBCBFB83E017B7A6FLL)
       + ((4 * v263) & 0x3FEAFEBDDFFDF7E0 ^ 0xC6958FC3FD0B0B3FLL)
       + ((2 * ((v263 ^ 0xAE5A9C4F88BD3F30) + 0x4734313A1F2B2857)) & 0x7BEFEB5BFFB3EBC6)
       + 1;
  unint64_t v265 = v263 ^ ((v263 ^ 0x1691528A6869E898)
               - ((2 * (v263 ^ 0x1691528A6869E898) + 2) & 0xDEDBAC8B49C6C8E0)
               + 0x6F6DD645A4E36471) ^ 0xAE57B349D6AAB88DLL ^ (v264
                                                               - ((2 * v264 + 0x43FB1361E04A0C1CLL) & 0x50A990F3CBBF9734)
                                                               - 0x75ADADD529FB2E58);
  unint64_t v266 = v265 - ((2 * v265 + 0xE6862743E5650AELL) & 0x14A2DD5AAB013914) + 0x51859FE774ABC4E1;
  unint64_t v267 = ((((v266 << 57) ^ 0x1400000000000000)
         - ((2 * ((v266 << 57) ^ 0x1400000000000000)) & 0x2000000000000000)
         - 0x6E7AA8FEA126B989) ^ 0x918557015ED94677 | (v266 >> 41) ^ (v266 >> 7)) ^ 0x14A2DD5AAE298ELL;
  uint64_t v268 = (v267 - ((2 * v267) & 0x5A3D4FDB5537B584) - 0x52E158125564253ELL) ^ v266;
  unint64_t v269 = (((v266 << 23) ^ 0x56AAC04E45000000)
        - ((2 * ((v266 << 23) ^ 0x56AAC04E45000000)) & 0x6CF36F045A000000)
        - 0x4986487DD2EB19A1) ^ 0xB679B7822D14E65FLL;
  unint64_t v270 = 2
       * (((v268 ^ 0xA74FC940FF000000) & v269) - ((2 * ((v268 ^ 0xA74FC940FF000000) & v269)) & 0x1B2C16D8D4375E4ALL))
       + 0x1B2C16D8D4375E4ALL;
  unint64_t v271 = v270 ^ 0xBB1C067CF4343C49;
  unint64_t v272 = (2 * v270) & 0xBF9FDEB7BFF93BF8 ^ 0xC9E7F34E5797C76FLL;
  unint64_t v273 = ((2 * ((v268 ^ 0xA74FC940FF1B4648) + v269)) & 0xB666E76FFF6BC7FELL)
       + (((v268 ^ 0xA74FC940FF1B4648) + v269) ^ 0x5B3373B7FFB5E3FFLL);
  unint64_t v274 = v273
       + v271
       + v272
       + 1
       - ((2 * (v273 + v271 + v272 + 1) + 0x938F747C08D73FCLL) & 0x777E92E714C1FB34)
       + 0x405BC5176AA7B798;
  unint64_t v275 = (((v239 ^ 0xDF73B14A99E315ACLL) & (v253 ^ 0x95D46955DC4FEF98))
        - ((2 * ((v239 ^ 0xDF73B14A99E315ACLL) & (v253 ^ 0x95D46955DC4FEF98))) & 0x4F3CC20350B645ALL)
        - 0x7D8619EFE57A4DD3) ^ v244;
  unint64_t v276 = v275 ^ (v275 >> 6) ^ (v275 >> 1) ^ (((unint64_t)~v275 << 63) - 0x1E5AE906DD4D39B2) ^ (((v275 << 58) ^ 0x6C00000000000000) - ((2 * ((v275 << 58) ^ 0x6C00000000000000)) & 0x5800000000000000) - 0x50C4D268DDF0C7B7);
  unint64_t v277 = v275 ^ v253 ^ 0x59C93F7DE3FF80D6 ^ ((v258 & (v257 ^ 0x3BFB19A62D88A86ALL))
                                             - ((2 * (v258 & (v257 ^ 0x3BFB19A62D88A86ALL))) & 0xE6887B0885C9E708)
                                             + 0x73443D8442E4F384);
  *((void *)&v252 + 1) = v277 ^ 0x1C0;
  *(void *)&long long v252 = v277 ^ 0xA280B3C9787F7000;
  unint64_t v278 = v277 ^ (v277 >> 17) ^ (((v277 << 47) ^ 0xB8E0000000000000)
                              - ((2 * ((v277 << 47) ^ 0xB8E0000000000000)) & 0x20F7000000000000)
                              - 0x6F84417149B687F1) ^ ((v252 >> 10)
                                                       - ((2 * (v252 >> 10)) & 0x4B9370C47801FE00)
                                                       - 0x5A36479DC3FF0100);
  unint64_t v279 = v263 ^ v245;
  char v280 = -2 - ((v71 & 1 | 0xFE) + (v71 & 0x12 | 0x6D));
  unint64_t v281 = ((((v279 ^ 0x56BFE0DF1FCDD5DDLL) >> (v280 ^ 0x92u))
         - ((2 * ((v279 ^ 0x56BFE0DF1FCDD5DDLL) >> (v280 ^ 0x92u))) & 0x8586FF8086DEF464)
         + 0x42C37FC0436F7A32) ^ 0x42C37FC0436F7A32) >> (v280 ^ 0x81u);
  unint64_t v282 = v279 ^ (v279 >> 28) ^ (((v279 << 45) ^ 0xBABBA00000000000)
                              - ((2 * ((v279 << 45) ^ 0xBABBA00000000000)) & 0xF411800000000000)
                              + 0x7A08D550682C1FA6) ^ (((v279 << 36) ^ 0xFCDD5DD000000000)
                                                       - ((2 * ((v279 << 36) ^ 0xFCDD5DD000000000)) & 0x7AACDA4000000000)
                                                       + 0x3D566D25F6AA19B4) ^ (v281
                                                                                - ((2 * v281) & 0x3F0CAD3785AF2DDCLL)
                                                                                - 0x6079A9643D286912);
  unint64_t v283 = HIDWORD(v282);
  v290[9] = BYTE5(v282) ^ 0xE;
  *(unsigned char *)(v289 + 71) = BYTE1(v282) ^ 0x48;
  v290[73] = BYTE2(v282) ^ 0x62;
  *(unsigned char *)(v289 + 4) = BYTE3(v282) ^ 0x28;
  *(unsigned char *)(v289 + 73) = BYTE6(v282) ^ 0x67;
  *(unsigned char *)(v289 + 33) = HIBYTE(v282) ^ 0x8E;
  *(unsigned char *)(v289 + 12) = v282 ^ 0xD0;
  LODWORD(v282) = ((2 * v276) & 0xFFFFFF56 ^ 0x2D56DD44) + (v276 ^ 0xE9549119);
  *(unsigned char *)(v289 + 56) = v283 ^ 0x34;
  unint64_t v284 = (((v255 << 6) & 0x80) - ((v255 << 6) | 0xFFFFFFFFFFFFFFBFLL) + 0x78694E0254C13EFFLL) ^ 0x30491EC21DC22711;
  unint64_t v285 = ((v284 | 0xF5444E4F6601A588) - (v284 | 0xABBB1B099FE5A77) + 0xABBB1B099FE5A77) ^ 0xBD641E8F2F02BDD9 | (v255 >> 2) ^ 0x37;
  LOBYTE(v285) = *(unsigned char *)(v293
                          + ((v285 - 0x7941C90D29A174A9 - ((2 * v285) & 0xD7C6DE5ACBD17F0) + 161) ^ 0x86BE36F2D65E8B57));
  v290[105] = BYTE4(v256) ^ 0x9E;
  *(unsigned char *)(v289 + 29) = BYTE3(v249) ^ 0x63;
  v290[124] = BYTE5(v256) ^ 0x42;
  v290[13] = BYTE1(v255) ^ 0xF6;
  *(unsigned char *)(v289 + 109) = ((v256 ^ 0x59D9222A2896C784) >> 48) ^ 0x6F;
  v290[78] = ((v256 ^ 0x59D9222A2896C784) >> 56) ^ 0x99;
  v290[66] = (((v285 ^ 0x49) - 73) ^ 0xF9) + ((2 * ((v285 ^ 0x49) - 73)) & 0xF3) + 7;
  v290[115] = BYTE2(v255) ^ 0x4D;
  LODWORD(v249) = *(unsigned __int8 *)(v295
                                     + (((v282 - 44) - ((2 * (v282 + 212)) & 0xB6) + 7655259) ^ 0x74CFD5u));
  *(unsigned char *)(v289 + 76) = BYTE5(v276) ^ 0xEF;
  v290[61] = BYTE1(v278) ^ 0x4A;
  LOBYTE(v255) = ((v273 + 4856833) >> 16) - (((v273 + 4856833) >> 15) & 0x40) + 32;
  LODWORD(v249) = (v282 - 2 * (v282 & 1) - 43) ^ v249;
  *(unsigned char *)(v289 + 81) = BYTE2(v276) ^ 0xAB;
  v290[1] = BYTE1(v276) ^ 0x6E;
  *(unsigned char *)(v289 + 96) = BYTE3(v276) ^ 0x16;
  DWORD1(v252) = v249 ^ 2;
  LODWORD(v252) = (v249 ^ 0xFFFFFF87) << 24;
  v290[127] = BYTE4(v276) ^ 0x46;
  *(unsigned char *)(v289 + 95) = BYTE6(v276) ^ 0x93;
  *(unsigned char *)(v289 + 14) = v278 ^ 0xF0;
  *(unsigned char *)(v289 + 77) = (unint64_t)v252 >> 26;
  *(unsigned char *)(v289 + 42) = BYTE3(v278) ^ 0xAB;
  *(unsigned char *)(v289 + 17) = HIBYTE(v276) ^ 0xD8;
  unint64_t v286 = (((((v278 >> 34) & 8) + ((v278 >> 34) & 0x3F ^ 0xB60A166402A4098)) | 0x84964619A745B300)
        - (((v278 >> 34) & 0x3F ^ 0xB60A166402A4098) & 0x200A04400080088)) ^ 0x8DF6473BE767F309;
  uint64_t v287 = v286 | (0x2C8CDEA6F925EAF0 - ((v278 >> 26) & 0xC0)) ^ 0x2C8CDEA6F925EAB0;
  v290[57] = BYTE2(v278) ^ 0xD2;
  LOBYTE(v286) = *(unsigned char *)(v293
                          + ((v287 + 0x1149D46E52C6024BLL - 2 * (v287 & 0x1149D46E52C602F5 ^ v286 & 0x11) + 153) ^ 0x1149D46E52C6024BLL));
  v290[129] = BYTE5(v278) ^ 0xE4;
  v290[40] = BYTE1(v268) ^ 0x46;
  unint64_t result = HIBYTE(v274);
  v290[110] = v255 ^ 0x20;
  v290[99] = HIBYTE(v274) ^ 0x3B;
  v290[26] = BYTE4(v274) ^ 0x73;
  *(unsigned char *)(v289 + 37) = BYTE6(v278) ^ 0x32;
  v290[113] = HIBYTE(v278) ^ 0x97;
  LOBYTE(v281) = (((v268 & 0xED ^ 0x5A) - ((2 * (v268 & 0xED ^ 0x5A)) & 0x9F) - 49) ^ 0xCF) & (v268 ^ 0x48);
  *(unsigned char *)(v289 + 91) = (v281 - ((2 * v281) & 0x70) + 56) ^ 0x38;
  v290[36] = BYTE6(v274) ^ 0xBF;
  *int v290 = BYTE3(v274) ^ 0x8A;
  *(unsigned char *)(v289 + 78) = (((v286 ^ 0x49) - 73) ^ 0xFD) + ((2 * ((v286 ^ 0x49) - 73)) & 0xFB) + 3;
  v290[53] = BYTE5(v274) ^ 0x49;
  *(_DWORD *)(v289 + 112) = ((v294 + 1) ^ 0x4E5E6FE5) - 1314811877 + ((2 * (v294 + 1)) & 0x9CBCDFCA);
  return result;
}

uint64_t sub_19E822064(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  return (*(uint64_t (**)(void))(v11
                              + 8
                              * ((((((v9 + 33622977) ^ (v8 == v10)) & 1) == 0) * (a8 + (v9 ^ (v12 - 409)) + 4)) ^ v9)))();
}

uint64_t sub_19E8220B4()
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * (((*(void *)(v1 + 32) == 0x64C485B0870068B5)
                                * (((v0 - 2101162469) & 0x7D3D2AD7) + 3871)) ^ v0)))();
}

uint64_t sub_19E822108@<X0>(unsigned int a1@<W0>, uint64_t a2@<X8>, uint8x8_t a3@<D0>)
{
  a3.i32[0] = *(_DWORD *)(a2 + a1 + 1);
  *(_DWORD *)(a2 - 3 + (v5 + v3)) = vmovn_s16((int16x8_t)vmovl_u8(a3)).u32[0];
  return (*(uint64_t (**)(void))(v7 + 8 * ((1379 * ((v4 ^ 0x14D) == v6)) ^ v4)))(v4 ^ 0x41Fu);
}

uint64_t sub_19E822160@<X0>(int a1@<W3>, int a2@<W8>)
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * (((v3 + a1 + 427) * (((a2 == v4) ^ 0x5F) + 2 * (a2 == v4) != 95)) ^ (v3 + a1 - 61))))();
}

uint64_t sub_19E8221A8(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int8x16_t a7)
{
  int v10 = v8 + a4;
  uint64_t v11 = (a3 + v10);
  int8x16_t v12 = *(int8x16_t *)(v7 + v11 - 15);
  int8x16_t v13 = *(int8x16_t *)(v7 + v11 - 31);
  uint64_t v14 = a1 + v11;
  *(int8x16_t *)(v14 - 15) = vaddq_s8(v12, a7);
  *(int8x16_t *)(v14 - 31) = vaddq_s8(v13, a7);
  return (*(uint64_t (**)(void))(v9 + 8 * (((a5 != v10) * a6) ^ a2)))();
}

void sub_19E8221B0()
{
}

uint64_t sub_19E8221CC@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * ((3218
                                * ((((v1 ^ 0x731u) - 652 - 577) & a1) == (((v1 ^ 0x731) - 1838434006) & 0x6D9446FF ^ 0x4FFLL))) ^ v1 ^ 0x731)))();
}

uint64_t sub_19E822234@<X0>(uint64_t a1@<X1>, uint64_t a2@<X4>, int a3@<W8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t (*a37)(uint64_t))
{
  unsigned int v41 = (v37 + 1604275377) & 0xA060AF4F;
  *(unsigned char *)(a1 + a3 + v41 - 75) = *(unsigned char *)(a2 + (v38 - 1677278994));
  int v42 = 1305237457 * ((((2 * (v40 - 216)) | 0x638ED42) - (v40 - 216) - 52197025) ^ 0xBAA5D06F);
  *(void *)(v40 - 208) = a36;
  *(_DWORD *)(v40 - 200) = v42 + v41 + 536;
  *(_DWORD *)(v40 - 216) = v42 ^ 0x4A893A29;
  uint64_t v43 = (*(uint64_t (**)(uint64_t))(v39 + 8 * (int)(v41 + 2308)))(v40 - 216);
  return a37(v43);
}

uint64_t sub_19E8222E8@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(void))(v2 + 8 * (v1 ^ (2 * (a1 == (((v1 ^ 0x248) + 627) ^ 0x5B40C69D))))))();
}

uint64_t sub_19E822328(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  int v32 = v30 - 536;
  int v33 = v30 - 61;
  HIDWORD(a21) = 807847714;
  int v34 = *(_DWORD *)(a2 + 4);
  unsigned int v35 = 1305237457 * (((&a24 | 0x1EC82C20) - (&a24 & 0x1EC82C20)) ^ 0xA7718AEE);
  a28 = *(void *)(a2 + 8);
  a30 = a15;
  LODWORD(a27) = v35 + v34 - 406468487;
  HIDWORD(a27) = v35 + v30 - 536 + 220;
  a24 = a17;
  a25 = a14;
  a26 = a16;
  uint64_t v38 = (*(uint64_t (**)(uint64_t *))(v31 + 8 * (v30 + 1774)))(&a24);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v31 + 8 * ((159 * (((v33 ^ (a29 == 694817499)) & 1) == 0)) ^ v32)))(v38, a2, 798101064, 2929509201, 2147138047, 2072727188, a7, 1983418814, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30);
}

uint64_t sub_19E822448(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  BOOL v25 = v23 > v18;
  uint64_t v26 = 4 * (v20 + v22);
  unsigned int v27 = v13
      + 613 * (v16 ^ 0x344)
      + (*(_DWORD *)(*(void *)(a9 - 0x7CF6A079DDC7252CLL) + v26) ^ v19 ^ 0xFFBFB47D)
      + ((2 * (*(_DWORD *)(*(void *)(a9 - 0x7CF6A079DDC7252CLL) + v26) ^ v19)) & 0xFF7F68FA);
  *(_DWORD *)(*(void *)(a13 - 0x7CF6A079DDC7252CLL) + v26) = v27
                                                             - 545719592
                                                             - ((2 * (v27 - 545719592) + 57566196) & v24)
                                                             + 2096687271;
  int v28 = v20 + 1 + v15;
  LODWORD(v26) = v25 ^ (v28 < v14);
  BOOL v29 = v28 < v17;
  if (!v26) {
    BOOL v25 = v29;
  }
  return (*(uint64_t (**)(void))(v21 + 8 * ((43 * !v25) ^ v16)))();
}

uint64_t sub_19E822588@<X0>(uint64_t a1@<X8>)
{
  *(unsigned char *)(a1 + (v6 + v4)) = *(unsigned char *)(v3 + (v6 + v4));
  return (*(uint64_t (**)(void))(v1 + 8 * (((v6 - 1 == v2) * v5) ^ v7)))(0);
}

uint64_t sub_19E8227C8@<X0>(int a1@<W5>, int a2@<W8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, int a16)
{
  BOOL v19 = a16 - v16 == -1264879464 && a15 == ((a2 - 234) ^ (a1 + 250));
  return (*(uint64_t (**)(void))(v17 + 8 * ((2044 * v19) ^ a2)))();
}

void TCvO8ZqLN8g(int a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(&off_1EF0E5660
       + ((79 * ((qword_1E945E360 - dword_1E945E368) ^ 0x71)) ^ byte_19EC7A500[byte_19EC72CD0[(79 * ((qword_1E945E360 - dword_1E945E368) ^ 0x71))] ^ 0x99])
       + 160);
  unsigned __int8 v2 = 79 * ((qword_1E945E360 - *v1) ^ 0x71);
  uint64_t v3 = *(&off_1EF0E5660
       + (*((unsigned char *)off_1EF0E5DA8 + (*((unsigned __int8 *)off_1EF0E5E28 + v2 - 4) ^ 0x42u) - 8) ^ v2)
       - 230);
  unint64_t v4 = *v1 ^ (unint64_t)&v7 ^ *v3;
  *uint64_t v1 = 1616673103 * (v4 + 0x5807F13683BD618FLL);
  *uint64_t v3 = 1616673103 * (v4 ^ 0xA7F80EC97C429E71);
  unsigned int v5 = 1431787901
     * (((&v8 | 0x2665ED49) - &v8 + (&v8 & 0xD99A12B0)) ^ 0xDF5479E);
  unsigned int v8 = v5 + 950;
  unsigned int v9 = (a1 ^ 0xFCBDFF76) + ((2 * a1) & 0xF97BFEEC) - v5 + 2077224666;
  LOBYTE(v4) = 79 * ((*(_DWORD *)v3 + *(_DWORD *)v1) ^ 0x71);
  int v6 = (char *)*(&off_1EF0E5660
               + ((79 * ((qword_1E945E360 - dword_1E945E368) ^ 0x71)) ^ byte_19EC7A500[byte_19EC72CD0[(79 * ((qword_1E945E360 - dword_1E945E368) ^ 0x71))] ^ 0x58])
               - 1)
     - 8;
  (*(void (**)(unsigned int *))&v6[8
                                            * (*((unsigned char *)off_1EF0E5A68
                                                                + (*((unsigned __int8 *)off_1EF0E5AF0
                                                                   + v4
                                                                   - 12) ^ 0x44u)
                                                                - 12) ^ v4)
                                            + 17360])(&v8);
  unsigned int v9 = (583844137 * ((&v8 & 0xAE675C7A | ~(&v8 | 0xAE675C7A)) ^ 0x41461E08)) ^ 0xD9A13099;
  (*(void (**)(unsigned int *))&v6[8
                                            * (*((unsigned char *)off_1EF0E5BB8
                                                                + (*((unsigned __int8 *)off_1EF0E5688
                                                                   + (79
                                                                                     * ((*(_DWORD *)v3 - *(_DWORD *)v1) ^ 0x71))) ^ 0x5Fu)
                                                                - 8) ^ (79 * ((*(_DWORD *)v3 - *(_DWORD *)v1) ^ 0x71)))
                                            + 18616])(&v8);
  __asm { BRAA            X8, X17 }
}

uint64_t sub_19E822ADC@<X0>(int a1@<W1>, int a2@<W8>)
{
  int v8 = STACK[0x260];
  unsigned int v9 = (_DWORD *)(STACK[0x210] + 24 * v4);
  *unsigned int v9 = v7;
  v9[1] = v6;
  *(void *)(STACK[0x218] + 24 * v4 + 16) = STACK[0x238];
  void v9[4] = v8;
  LODWORD(STACK[0xEB0]) = ((a2 + 2023800878) & 0x875F3FFF ^ 0x1D6) + v3;
  BOOL v11 = v2 + 1050973581 > 473706818 || v2 + 1050973581 < SLODWORD(STACK[0x208]);
  return (*(uint64_t (**)(void))(v5 + 8 * ((((a2 ^ a1) - 163) * v11) ^ a2)))();
}

void sub_19E822B6C(uint64_t a1)
{
  int v1 = 1980347521 * ((-2 - ((a1 | 0xDCB4277B) + (~a1 | 0x234BD884))) ^ 0x9AAF9879);
  unsigned int v2 = *(_DWORD *)(*(void *)(a1 + 8) - 0x19C7A72C32A62CB7) - 171792876;
  unsigned int v3 = *(_DWORD *)(a1 + 16) - v1 + 592759473;
  int v4 = (v3 < 0x4DCF05EC) ^ (v2 < 0x4DCF05EC);
  BOOL v5 = v2 < v3;
  if (v4) {
    BOOL v5 = v3 < 0x4DCF05EC;
  }
  __asm { BRAA            X11, X17 }
}

uint64_t sub_19E822C80()
{
  *(void *)(v1 - 0x57D6105BEF2C606DLL) = (*v3 | ((unint64_t)(*v3 < 0x66DBC9CCuLL) << 32))
                                         + *(void *)(v2 - 0x19C7A72C32A62CC3)
                                         - 1725680068;
  return (*(uint64_t (**)(void))(v6 + 8 * ((1483 * (*v5 == v4)) ^ v0)))();
}

void sub_19E823290()
{
}

uint64_t sub_19E823298(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, int a8)
{
  int v8 = *(unsigned __int8 *)(*v27 + (v19 + a8)) ^ v26;
  unsigned int v9 = (((v8 - ((2 * v8) & 0xFFFFFFF3)) << 24) - 117440512) ^ 0xF9000000;
  int v10 = *(unsigned __int8 *)(*v27 + (v19 + a8 + 1)) ^ v26;
  int v11 = (((v10 - ((2 * v10) & 0x1AC)) << 16) + 768999424) ^ 0x2DD60000;
  unsigned int v12 = (v11 + 165382965 - ((2 * v11) & 0x13B60000)) ^ 0x9DB8B35 | (v9 + v22 - ((2 * v9) & 0xE3FFFFFF)) ^ v22;
  int v13 = *(unsigned __int8 *)(*v27 + (v19 + a8 + 2)) ^ v26;
  int v14 = (v21 + ((v13 - ((2 * v13) & 0x7A)) << 8)) ^ v21;
  unsigned int v15 = (v12 + v20 - ((2 * v12) & 0xE270DE92)) ^ v20 | (v14 + 1499223852 - ((2 * v14) & 0x32B8AE00)) ^ 0x595C572C;
  int v16 = *(unsigned __int8 *)(*v27 + (v19 + a8 + 3)) ^ v26;
  unsigned int v17 = (v15 + 1127416329 - ((2 * v15) & 0x86660412)) ^ 0x43330209 | (v16 + a6 - ((2 * v16) & 0x1E0)) ^ a6;
  return (*(uint64_t (**)(uint64_t, void, void))(v24 + 8 * (v25 - 1594)))(a1, (2 * v17) & 0x52D425B6, v17 + v23 - ((2 * v17) & 0x52D425B6));
}

uint64_t sub_19E8232A8()
{
  if (v1 >= 0) {
    unsigned int v4 = v1;
  }
  else {
    unsigned int v4 = -v1;
  }
  if (v0 >= 0) {
    unsigned int v5 = v0;
  }
  else {
    unsigned int v5 = -v0;
  }
  return (*(uint64_t (**)(void))(v3 + 8 * (v2 ^ (32 * (v4 <= v5)))))();
}

uint64_t sub_19E8232F4()
{
  int v3 = v0 + 926;
  (*(void (**)(void))(v1 + 8 * (v0 + 1845)))();
  *(void *)(*(void *)v2 + 48) = 0;
  return (*(uint64_t (**)(void))(v1
                              + 8
                              * (((*(void *)(*(void *)v2 + 24) == 0) * ((v3 ^ 0x2E2) + v3 + 12 - 3330)) | v3)))();
}

#error "19E8DB46C: call analysis failed (funcsize=63)"

uint64_t sub_19E82341C()
{
  return (*(uint64_t (**)(uint64_t))(v2
                                            + 8
                                            * ((2653 * (v1 == (((v0 + 123) ^ (v0 - 14) & 0xFE) ^ 0xD6))) ^ v0)))(4294925278);
}

uint64_t sub_19E823474@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(void))(v6
                              + 8
                              * ((1556
                                * (v1
                                 + (*(unsigned __int8 *)(v3 + 5) ^ v2)
                                 + ((*(unsigned __int8 *)(v3 + 5) << (v5 + 36)) & 0x176)
                                 - 12 == a1)) ^ v4)))();
}

uint64_t sub_19E823738@<X0>(uint64_t a1@<X7>, int a2@<W8>)
{
  return (*(uint64_t (**)(void))(a1
                              + 8
                              * (int)((((v2 + 1256542487) & 0xB51AAFE6 ^ 0x630) * ((582084646 - a2) > 6)) ^ v2)))();
}

uint64_t sub_19E82379C@<X0>(uint64_t a1@<X7>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(void))(a1
                              + 8
                              * (((((v2 - 1780639551) & 0x6A22677F ^ 0xF0466FDE) + *(_DWORD *)(a2 + 532) > 0x7FFFFFFE)
                                * (2 * (v2 ^ 0x200) - 491)) ^ v2)))();
}

uint64_t sub_19E82505C@<X0>(int a1@<W0>, char a2@<W1>, char a3@<W2>, int a4@<W6>, int a5@<W8>)
{
  unsigned int v12 = *(_DWORD *)(*(void *)(v11 - 0x7CF6A079DDC7252CLL) + 4 * (v8 + v7 + 1142)) ^ v5;
  unsigned int v13 = ((v12 >> (a3 - a2 + 32)) - 170157284 - ((2 * (v12 >> (a3 - a2 + 32))) & 0xEBB73638)) ^ 0xF5DB9B1C | (v5 + 43 * (a1 ^ 0x139) - 1462) ^ a4;
  *(_DWORD *)(*(void *)(v11 - 0x7CF6A079DDC7252CLL) + 4 * (a5 + v6)) = v13 + v5 - ((2 * v13) & 0x16836D5A);
  return (*(uint64_t (**)(void))(v10 + 8 * (int)((((v8 + v7 + 1141) >> 31) * v9) ^ a1)))();
}

uint64_t sub_19E82512C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,int a57)
{
  LODWORD(STACK[0x5E0]) ^= a57 ^ (v57 - 1708598316);
  return (*(uint64_t (**)(void))(v58
                              + 8 * (((v61 + ((v57 - 680) ^ (v59 - 360)) - 2300) * (v60 != 1343245486)) ^ (v57 - 680))))();
}

uint64_t sub_19E82515C@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(void))(v4
                              + 8
                              * ((2556
                                * (((v3 + 1056) ^ 0xC1006D61)
                                 + (*(unsigned __int8 *)(v2 + 3) ^ v1)
                                 + ((2 * *(unsigned __int8 *)(v2 + 3)) & 0x7777)
                                 + 1673257295 == a1)) ^ v3)))();
}

uint64_t sub_19E8251B4()
{
  return (*(uint64_t (**)(void))(v1
                              + 8
                              * (((((((v0 + 68155973) | 0x30409102u) + 0xFFFFFFFCBAF6E58) & v2) == 3)
                                * ((v0 - 983) ^ 0x348)) ^ v0)))();
}

uint64_t sub_19E825208(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,char a33)
{
  int v37 = 76 * (v34 ^ 0x1B9);
  *(&a33 + ((v37 ^ (v35 + 428) ^ 0x5B044F7DLL) & (v33 + a2))) = -63;
  return (*(uint64_t (**)(void))(v36 + 8 * ((1242 * ((v33 + 1 + a2) < 0x40)) ^ v37)))();
}

void sub_19E825D80()
{
}

uint64_t sub_19E825D88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v15 = (a7 - 1);
  unint64_t v16 = (v15 | ((unint64_t)(v15 < v12 + v8 - 170 - 742) << 32)) - 745967616;
  *(unsigned char *)(v14 + v16) = *(unsigned char *)(v7 + v16) ^ *(unsigned char *)(v10 + (v16 & 0xF)) ^ *(unsigned char *)(v11 + (v16 & 0xF)) ^ *(unsigned char *)((v16 & 0xF) + v9 + 2) ^ (-73 * (v16 & 0xF)) ^ 0xC1;
  return (*(uint64_t (**)(void))(v13 + 8 * ((15 * (v15 != v12)) | v8)))();
}

uint64_t sub_19E825E08()
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * (int)(((((v1 + 3) ^ (v0 == 0x3C515AFDAF101781)) & 1)
                                     * ((v1 + 425062229) & 0xE6AA0FAA ^ 0x140)) ^ v1)))();
}

uint64_t sub_19E825E64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned int a12, int a13, unint64_t *a14)
{
  a14 = &STACK[0x326850528847174F];
  a12 = v16 - 653146051 * (((&a12 | 0x9960DF05) - (&a12 & 0x9960DF05)) ^ 0x33746AE7) + 1438;
  uint64_t v17 = (*(uint64_t (**)(unsigned int *))(v15 + 8 * (v16 + 1717)))(&a12);
  return (*(uint64_t (**)(uint64_t))(v15
                                            + 8
                                            * (((a13 == v14) * (((v16 + 68293195) | 0x2242810) - 104217763)) ^ v16)))(v17);
}

uint64_t sub_19E8261B8@<X0>(int a1@<W1>, int a2@<W2>, int a3@<W3>, int a4@<W4>, int a5@<W5>, int a6@<W6>, int a7@<W7>, int a8@<W8>)
{
  uint64_t v17 = v10 + 4 * (v9 + v14);
  int v18 = *(_DWORD *)(v17 + 2896);
  int v19 = ((a2 | (2 * (v18 & 0x7FFFFFFE ^ a1))) - (v18 & 0x7FFFFFFE ^ a1) + a3) ^ a4;
  int v20 = (v19 - (a5 & (2 * v19)) + a6) ^ a7;
  *(_DWORD *)(v10 + 4 * (v9 + v14 + ((a8 - 608) | 0x241u))) = *(_DWORD *)(v17 + 4480) ^ *(_DWORD *)(v11
                                                                                                  + 4 * ((v18 & 1) == 0)) ^ (((v20 | ~v8 & 0x80000000) - (v12 & (2 * v20)) + v16) >> 1) ^ 0x8B380FBD;
  return (*(uint64_t (**)(void))(v13 + 8 * ((1639 * (v9 + 1 == v15 + 3)) ^ a8)))();
}

uint64_t sub_19E826268@<X0>(uint64_t a1@<X1>, int a2@<W8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,int a60,unsigned int a61)
{
  int v67 = v63 + 1;
  BOOL v68 = a61 < 0x6D6B3AA;
  *(unsigned char *)(a1 + (a2 - 1530971442)) = *(unsigned char *)(a59 + (v67 - 2091063840))
                                                   - ((*(unsigned char *)(a59 + (v67 - 2091063840)) << (((v61 + v65) & 0x9C) + 101)) & 0x64)
                                                   - 78;
  if (v68 == (v67 + 937523303) < 0xB4849286) {
    BOOL v68 = v67 + 937523303 < v62;
  }
  return (*(uint64_t (**)(void))(v66 + 8 * ((v68 * v64) ^ v61)))();
}

uint64_t sub_19E826274()
{
  int v3 = (v0 - 98) | 0x281;
  int v4 = (v3 ^ 0x2563C0F0) + v1 - ((2 * ((v3 ^ 0x2563C0F0) + v1) + 818876190) & 0x736CA882) - 1843536944;
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * ((104
                                * (((v4 << ((2 * (((v3 - 80) | 0x32) ^ 0x20)) ^ 0xB7)) & 0xD7FFBDFA ^ 0x536CA882)
                                 + (v4 ^ 0x52498ABC)
                                 + 1463774559 == 1128221788)) ^ v3)))();
}

void sub_19E826344(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(_DWORD *)(*(void *)(a7 - 0x7CF6A079DDC7252CLL) + 4 * (v8 + v9)) = v7
                                                                        - (((41 * ((a1 + 206) ^ 0x72A)) ^ (v10 - 501)) & (2 * v7 + 9822550))
                                                                        + 2072815448;
  JUMPOUT(0x19E8263A4);
}

uint64_t sub_19E826434@<X0>(uint64_t a1@<X1>, int a2@<W8>)
{
  *(unsigned char *)(a1 + (a2 - 1530971440)) = v5;
  return (*(uint64_t (**)(void))(v6 + 8 * (((((v4 - 1210) | 0x80) ^ 0x346) * (v3 + v7 - 584 == v2)) ^ v4)))();
}

uint64_t sub_19E82648C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, int a12, unsigned int a13, unsigned int a14, uint64_t a15)
{
  unsigned int v19 = ((((2 * &a10) | 0x710CF506) - &a10 + 1199146365) ^ 0xF2328537) * v16;
  a10 = 0;
  a12 = v19 ^ 0x61E071D7;
  a13 = v19 + 585;
  a14 = 1535532749 - v19;
  a15 = v18 + 816;
  uint64_t v20 = (*(uint64_t (**)(uint64_t *))(v17 + 19456))(&a10);
  return (*(uint64_t (**)(uint64_t))(v17 + 8 * ((15 * (a11 == v15 + 1065)) ^ 0x426u)))(v20);
}

uint64_t sub_19E826544(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, uint64_t a11, int a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,int a44,int a45)
{
  unsigned int v46 = a12 - ((a10 + 59614990) & 0xB4B37E0C) + (a45 ^ 0x24C) - 1882068766;
  return (*(uint64_t (**)(void))(v45
                              + 8
                              * ((69
                                * ((v46 ^ 0xD1368CF0) - 2822470 + ((2 * v46) & 0x16DE67EC ^ 0x1492660C) != 189014704)) ^ a45)))();
}

uint64_t sub_19E826608(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  unsigned int v29 = (v23 + 1347054395) & 0xAFB596AF;
  int v30 = 402930427 * ((2 * ((v28 - 120) & 0x35584BD8) - (v28 - 120) - 894979034) ^ 0xD01E489B);
  *(void *)(v28 - 112) = v26;
  *(_DWORD *)(v28 - 120) = (v23 + 190) ^ v30;
  *(_DWORD *)(v28 - 104) = v27 - v30 + v29 - 715868549;
  (*(void (**)(uint64_t))(v24 + 8 * (v23 + 1101)))(v28 - 120);
  *(_DWORD *)(v28 - 116) = v29 + ((2 * ((v28 - 120) & 0x214A50F8) - (v28 - 120) + 1588965123) ^ 0x4F47A249) * v25 - 683;
  *(void *)(v28 - 112) = a23;
  *(void *)(v28 - 104) = a20;
  uint64_t v31 = (*(uint64_t (**)(uint64_t))(v24 + 8 * (int)(v29 ^ 0xE5C)))(v28 - 120);
  return (*(uint64_t (**)(uint64_t))(v24
                                            + 8
                                            * (int)((31
                                                   * (*(_DWORD *)(v28 - 120) > ((v29 - 1223798834) & 0x48F1ADB2)
                                                                             + 1002405073)) ^ v29)))(v31);
}

uint64_t sub_19E82674C()
{
  return (*(uint64_t (**)(void))(v0 + 8 * ((13 * (v1 <= v2 - 1992444140)) ^ (v2 + 98858674))))();
}

uint64_t sub_19E8267B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, unsigned int a13, uint64_t a14, uint64_t a15, int a16)
{
  unsigned int v21 = 1001500783 * (&a12 ^ 0x4AB4FFB4);
  a12 = (v20 + 363) ^ v21;
  a13 = (v17 ^ 0x759383AB) + v21 + ((v17 << (((v20 - 14) | 0x2C) - 60)) & 0xEB270756) - 0x20000;
  a14 = a10;
  a15 = v16;
  uint64_t v22 = (*(uint64_t (**)(int *))(v19 + 8 * (v20 + 569)))(&a12);
  return (*(uint64_t (**)(uint64_t))(v19 + 8 * ((11 * (a16 != v18)) ^ (v20 - 1001))))(v22);
}

void sub_19E826860()
{
}

uint64_t sub_19E8268B0()
{
  return (*(uint64_t (**)(void))(v0 + 8 * ((1710 * (*(unsigned char *)(v1 + 1) == 4)) ^ 0xB2)))();
}

uint64_t sub_19E8269F4(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  BOOL v13 = a2 < a3;
  unint64_t v14 = (a4 | ((unint64_t)(a4 < v9) << 32)) - 674918767;
  *(unsigned char *)(v12 + v14) = *(unsigned char *)(v4 + v14) ^ *(unsigned char *)(v7 + (v14 & 0xF)) ^ *(unsigned char *)(v8 + (v14 & 0xF)) ^ *(unsigned char *)((v14 & 0xF) + v6 + 2) ^ (-73 * (v14 & 0xF)) ^ 0xC1;
  unsigned int v15 = a4 + 320689762;
  int v16 = v13 ^ (v15 < v5);
  BOOL v17 = v15 < a2;
  if (!v16) {
    BOOL v13 = v17;
  }
  return (*(uint64_t (**)(void))(v11 + 8 * ((2828 * v13) ^ v10)))();
}

uint64_t sub_19E826AA0@<X0>(int a1@<W3>, uint64_t a2@<X4>, int a3@<W8>)
{
  int v6 = v3 + (*(unsigned __int8 *)(a2 + 8) ^ v4) + a1 + ((2 * *(unsigned __int8 *)(a2 + 8)) & 0x7777) - 456;
  return (*(uint64_t (**)(void))(v5
                              + 8
                              * (((((v6 == a3) ^ 0x77) + 2 * (v6 == a3) == ((a1 + 63) ^ 0x74))
                                * ((a1 ^ 0x39) - 493)) | a1)))();
}

uint64_t sub_19E826B08()
{
  return (*(uint64_t (**)(void))(v4 + 8 * (((v1 != v0) * ((v2 - 1137) ^ (v3 - 96) ^ (v3 + 79))) ^ v2)))();
}

uint64_t sub_19E8279B0@<X0>(int a1@<W2>, uint64_t a2@<X8>)
{
  *(_DWORD *)(a2 - 3 + (v4 + v3)) = *(_DWORD *)(v2 - 3 + (v4 + v3));
  return (*(uint64_t (**)(void))(v6 + 8 * (((v5 == 4) * ((a1 ^ 0x53E) - 1307)) ^ (a1 + 1140))))();
}

uint64_t sub_19E8279FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,unsigned int a22)
{
  BOOL v25 = a22 > 0x105545E3;
  if (v25 == v23 - 121251054 < (int)((v24 - 770166072) & 0x2DE7CF37 ^ 0xEFAABF3B)) {
    BOOL v25 = v23 - 121251054 < a13;
  }
  return (*(uint64_t (**)(void))(v22 + 8 * ((173 * !v25) ^ v24)))();
}

void sub_19E827B14(uint64_t a1)
{
  int v1 = 1431787901 * ((a1 - 828830163 - 2 * (a1 & 0xCE990E2D)) ^ 0xE509A4FA);
  __asm { BRAA            X9, X17 }
}

void sub_19E827BC4(int a1@<W8>)
{
  unsigned int v7 = (a1 & 0xBFFFFFFF ^ 0xDDEE25E9)
     - 571595287
     + ((((a1 & 0xBFFFFFFF ^ 0xDDEE25E9) & 0x1DEE25FB ^ (a1 | 0x7FFFFFED)) << ((v1 ^ 0xA8) - 126)) ^ 0x80000025)
     + 1;
  uint64_t v8 = *(void *)(v2 - 0x19C7A72C32A62CC3);
  unsigned int v9 = *v3 - 1725680076;
  *(unsigned char *)(v8 + v9) = HIBYTE(v7) ^ 0x1C;
  *(unsigned char *)(v8 + v9 + 1) = BYTE2(v7) ^ 0x2F;
  *(unsigned char *)(v8 + v9 + 2) = BYTE1(v7) ^ 0xE4;
  *(unsigned char *)(v8 + v9 + 3) = v7 ^ 0x28;
  uint64_t v10 = *(void *)(v2 - 0x19C7A72C32A62CC3);
  LODWORD(v8) = v4 - ((2 * v4 + 484652926) & 0x1C82AC58) - 1129123349;
  int v11 = *v3 - 1725680076;
  *(unsigned char *)(v10 + (*v3 - 1725680072)) = BYTE3(v8) ^ 0xCF;
  *(unsigned char *)(v10 + (v11 + 5)) = BYTE2(v8) ^ 0x80;
  *(unsigned char *)(v10 + (v11 + 6)) = BYTE1(v8) ^ 0x97;
  *(unsigned char *)(v10 + (v11 + 7)) = v8 ^ 0xED;
  *int v3 = v5 + v6 - 607656158;
  JUMPOUT(0x19E827CFCLL);
}

uint64_t sub_19E827D38@<X0>(int a1@<W0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W8>)
{
  *(unsigned char *)(v4 + (a1 + v5)) = *(unsigned char *)(a2 + (a1 + v5));
  return (*(uint64_t (**)(void))(v6 + 8 * ((525 * (a1 + ((8 * a3) ^ 0x3858) - 1689 == a4)) ^ (a3 - 534))))();
}

uint64_t sub_19E827D88()
{
  return sub_19E827DB4();
}

uint64_t sub_19E827DB4(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11 = *(_DWORD *)(v10 + (a2 + v9 + ((v8 - 316654794) & 0x12DFBE3C) + 176 - 732) * (uint64_t)a3) != 42251362;
  return (*(uint64_t (**)(void))(a8 + 8 * (((32 * v11) | (v11 << 6)) ^ v8)))();
}

uint64_t sub_19E827F0C()
{
  return (*(uint64_t (**)(void))(v2 + 8 * ((77 * (v0 > ((v1 - 254) | 0x28u) - 2112026267)) ^ (v1 - 214))))();
}

uint64_t sub_19E827F50@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9, char a10)
{
  int v12 = (a1 - 378) | 0x10;
  a10 = (-109 * (((&a9 ^ 0xFB) - 2 * ((&a9 ^ 0xFB) & 0x70) + 112) ^ 0x97)) ^ 0x59;
  a9 = 961177747
     * (((&a9 ^ 0x689A8DFB) - 2 * ((&a9 ^ 0x689A8DFB) & 0xB847EB70) - 1203246224) ^ 0xF78F9797)
     + a1
     + 475;
  uint64_t v13 = (*(uint64_t (**)(unsigned int *))(v10 + 8 * (a1 + 1246)))(&a9);
  return (*(uint64_t (**)(uint64_t))(v10
                                            + 8
                                            * ((60
                                              * (**(_DWORD **)(v11 + 8 * (v12 ^ 0x3D8)) != (v12 ^ 0xEA)
                                                                                           + v12
                                                                                           + 355
                                                                                           - 2165)) ^ v12)))(v13);
}

void sub_19E82801C()
{
}

uint64_t sub_19E828028(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, char a10, __int16 a11, char a12, __int16 a13, char a14, __int16 a15, char a16)
{
  **(_DWORD **)uint64_t v19 = -1713882431;
  *(_DWORD *)(*(void *)v19 + 4) = -977157695;
  int v20 = *(unsigned char **)v19;
  v20[8] = a16;
  v20[9] = a14;
  v20[10] = a12;
  v20[11] = a10;
  unsigned int v21 = ((v17 - 527616826) & 0x1F72C87F ^ 0x835A2E54) + a7;
  BOOL v22 = v16 - 1271032016 < v21;
  if (v21 < 0xB81C56F6 != (v16 - 1271032016) < 0xB81C56F6) {
    BOOL v22 = v21 < 0xB81C56F6;
  }
  return (*(uint64_t (**)(void))(v18 + 8 * ((v22 | (2 * v22)) ^ v17)))();
}

void sub_19E82808C(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,int *a51)
{
  uint64_t v53 = 4 * (v51 - 930823858);
  unsigned int v54 = 1631306195 * ((*(_DWORD *)(*a47 + (*a51 & 0xFFFFFFFFB7478BB0)) ^ (a50 + v53)) & (a1 ^ 0x7FFFFDC0));
  int v55 = v54 ^ HIWORD(v54);
  *(_DWORD *)(v52 + v53) ^= *(_DWORD *)(a50 + v53) ^ *((_DWORD *)*(&off_1EF0E5660 + (a1 ^ 0x22Au))
                                                     + ((1631306195 * v55) >> 24)) ^ *((_DWORD *)*(&off_1EF0E5660 + a1 - 513) + ((1631306195 * v55) >> 24) - 1) ^ *((_DWORD *)*(&off_1EF0E5660 + a1 - 456) + ((1631306195 * v55) >> 24) - 3) ^ (-1043136512 * v55) ^ (1631306195 * v55) ^ (-758206879 * ((1631306195 * v55) >> 24));
  JUMPOUT(0x19E763394);
}

uint64_t sub_19E828180()
{
  return (*(uint64_t (**)(void))(v3
                              + 8
                              * (((((v2 - 1564) | 0x28) ^ 0xA3) * ((v1 + v0 - 1874259709) > 0xB)) ^ v2)))();
}

uint64_t sub_19E8281D4@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2
                                                              + 8
                                                              * (((a2 | ((unint64_t)(a2 < 0x7B8B4E8A) << 32)) == 2072727178) | 0x51Au)))(2, a1, 1);
}

#error "19E855A80: call analysis failed (funcsize=840)"

uint64_t sub_19E8283C0(uint64_t a1, int a2)
{
  return (*(uint64_t (**)(void))(v4
                              + 8
                              * (int)(((((926 * ((a2 - 91) ^ 0xE3) + 494216317) & 0xE28AD6F7) - 685)
                                     * ((v3 + v2 + 402927625) > 7)) ^ (a2 - 91))))();
}

void sub_19E828430()
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  int v0 = (uint64_t *)*(&off_1EF0E5660
                  + ((79 * ((qword_1E945E360 - dword_1E945E7B0) ^ 0x71)) ^ byte_19EC54C60[byte_19EC7A300[(79 * ((qword_1E945E360 - dword_1E945E7B0) ^ 0x71))] ^ 0x8E])
                  - 49);
  int v1 = (unsigned __int8 *)off_1EF0E5E08;
  int v2 = (char *)off_1EF0E5D58 - 4;
  int v3 = (unint64_t *)*(&off_1EF0E5660
                           + (*((unsigned char *)off_1EF0E5D58
                                               + (*((unsigned __int8 *)off_1EF0E5E08
                                                  + (79 * ((qword_1E945E360 + *v0) ^ 0x71))) ^ 0x99u)
                                               - 4) ^ (79 * ((qword_1E945E360 + *v0) ^ 0x71)))
                           - 7);
  unint64_t v4 = *v0 ^ (unint64_t)&v9 ^ *v3;
  uint64_t v5 = 1616673103 * v4 - 0x5807F13683BD618FLL;
  unint64_t v6 = 1616673103 * (v4 ^ 0xA7F80EC97C429E71);
  *int v0 = v5;
  *int v3 = v6;
  LOBYTE(v6) = 79 * ((v6 + *(_DWORD *)v0) ^ 0x71);
  *(_DWORD *)*(&off_1EF0E5660 + (v6 ^ v2[v1[v6] ^ 0x94]) + 154) = 694817499;
  LOBYTE(v6) = 79 * (*(_DWORD *)v0 ^ 0x71 ^ *(_DWORD *)v3);
  unsigned int v7 = (char *)*(&off_1EF0E5660
               + ((79 * ((qword_1E945E360 + dword_1E945E7B0) ^ 0x71)) ^ byte_19EC54D60[byte_19EC7A400[(79 * ((qword_1E945E360 + dword_1E945E7B0) ^ 0x71))] ^ 0xCE])
               - 156)
     - 8;
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))&v7[8
                                                      * (*((unsigned char *)off_1EF0E5DA8
                                                                          + (*((unsigned __int8 *)off_1EF0E5E28
                                                                             + v6
                                                                             - 4) ^ 0x8Eu)
                                                                          - 8) ^ v6)
                                                      + 16952])(512, 1509315540);
  *(void *)*(&off_1EF0E5660
             + (*((unsigned char *)off_1EF0E57E0
                                 + ((*off_1EF0E5CA8)[(79
                                                                                      * ((*(_DWORD *)v3 + *(_DWORD *)v0) ^ 0x71))] ^ 0x49u)
                                 - 4) ^ (79 * ((*(_DWORD *)v3 + *(_DWORD *)v0) ^ 0x71)))
             - 55) = v8;
  __asm { BRAA            X8, X17 }
}

uint64_t sub_19E828694(int a1, int a2, uint64_t a3, int a4)
{
  *(int8x8_t *)(v4 - 7 + (v8 + v7 + a1 - a2)) = veor_s8(*(int8x8_t *)(v5 - 7 + (v8 + v7 + a1 - a2)), (int8x8_t)0xC1C1C1C1C1C1C1C1);
  return (*(uint64_t (**)(void))(v9
                              + 8 * (((a2 - (v6 & 0xFFFFFFF8) == -8) * ((a4 - 1586237043) & 0x5E8C0F1F ^ 0x5A2)) ^ a4)))();
}

void sub_19E82870C()
{
  *(_DWORD *)(v0 + 20) = -694859293;
}

void sub_19E828830()
{
}

void sub_19E82893C(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 - 0x542A6DEB665DB926) = (*(_DWORD *)(a1 - 0x542A6DEB665DB926) ^ 0x395D8874)
                                         + 962431092
                                         - ((2 * (*(_DWORD *)(a1 - 0x542A6DEB665DB926) ^ 0x395D8874) + 2) & 0x72BB10E8)
                                         + 1;
}

void sub_19E828984()
{
}

uint64_t sub_19E8289B8(uint64_t a1, uint64_t a2, int a3)
{
  return (*(uint64_t (**)(void))(v4 + 8 * ((LODWORD(STACK[0x25C]) - 1501) ^ (728 * (v3 == a3)))))();
}

void sub_19E8289E0()
{
}

uint64_t sub_19E828B4C()
{
  return (*(uint64_t (**)(uint64_t))(v1
                                            + 8
                                            * ((230
                                              * ((((v2 + 183) ^ ((v0 - 2001265161) < 0x38)) & 1) == 0)) ^ (v2 + 37))))(1110);
}

uint64_t sub_19E828BA4@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(void))(v2 + 8 * ((1973 * (a1 + (v1 ^ 0x6FBu) - 1456 + 1082261325 < 0x7FFFFFFF)) ^ v1)))();
}

uint64_t sub_19E828BF0(uint64_t a1, uint64_t a2, int a3)
{
  return (*(uint64_t (**)(void))(v5
                              + 8
                              * (((v3 == a3 + (v4 ^ 0x4D0) - 862 - 425) * ((((v4 ^ 0x4D0) + 206) | 0x20) ^ 0x8D2)) ^ v4 ^ 0x4D0)))();
}

uint64_t sub_19E828C34@<X0>(int a1@<W8>, int64x2_t a2@<Q0>, int64x2_t a3@<Q1>, int64x2_t a4@<Q2>, int64x2_t a5@<Q3>, int64x2_t a6@<Q4>, int8x16_t a7@<Q5>, int8x16_t a8@<Q6>, int8x16_t a9@<Q7>)
{
  int64x2_t v22 = vaddq_s64(a3, v21);
  int64x2_t v23 = vaddq_s64(a4, v21);
  int64x2_t v24 = vaddq_s64(a5, v21);
  uint64_t v25 = v9 - 8;
  int64x2_t v26 = vaddq_s64(a2, v21);
  int64x2_t v27 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(v23, a6), a7);
  int64x2_t v28 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(v24, a6), a7);
  int64x2_t v29 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(v22, a6), a7);
  int64x2_t v30 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(v26, a6), a7);
  int64x2_t v31 = (int64x2_t)veorq_s8(vandq_s8((int8x16_t)v27, a8), vandq_s8((int8x16_t)v23, a9));
  int64x2_t v32 = (int64x2_t)veorq_s8(vandq_s8((int8x16_t)v28, a8), vandq_s8((int8x16_t)v24, a9));
  int64x2_t v33 = (int64x2_t)veorq_s8(vandq_s8((int8x16_t)v29, a8), vandq_s8((int8x16_t)v22, a9));
  int64x2_t v34 = (int64x2_t)veorq_s8(vandq_s8((int8x16_t)v30, a8), vandq_s8((int8x16_t)v26, a9));
  int64x2_t v35 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(vsubq_s64(v30, vaddq_s64(v34, v34)), v14), (int8x16_t)v14);
  int64x2_t v36 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(vsubq_s64(v29, vaddq_s64(v33, v33)), v14), (int8x16_t)v14);
  int64x2_t v37 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(vsubq_s64(v28, vaddq_s64(v32, v32)), v14), (int8x16_t)v14);
  int64x2_t v38 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(vsubq_s64(v27, vaddq_s64(v31, v31)), v14), (int8x16_t)v14);
  int64x2_t v39 = vaddq_s64(v23, v15);
  v38.i64[0] *= v39.i64[0];
  v38.i64[1] *= v39.i64[1];
  int64x2_t v40 = vaddq_s64(v24, v15);
  v37.i64[0] *= v40.i64[0];
  v37.i64[1] *= v40.i64[1];
  int64x2_t v41 = vaddq_s64(v22, v15);
  v36.i64[0] *= v41.i64[0];
  v36.i64[1] *= v41.i64[1];
  int64x2_t v42 = vaddq_s64(v26, v15);
  v35.i64[0] *= v42.i64[0];
  v35.i64[1] *= v42.i64[1];
  v44.val[1] = (int8x16_t)vaddq_s64(vsubq_s64(v38, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v38, v38), v16)), v17);
  v44.val[0] = (int8x16_t)vaddq_s64(vsubq_s64(v37, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v37, v37), v16)), v17);
  v44.val[2] = (int8x16_t)vaddq_s64(vsubq_s64(v36, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v36, v36), v16)), v17);
  v44.val[3] = (int8x16_t)vaddq_s64(vsubq_s64(v35, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v35, v35), v16)), v17);
  *(int8x8_t *)(v11 + ((a1 + 343) ^ v10) + v25) = vrev64_s8(veor_s8(vadd_s8((int8x8_t)*(_OWORD *)&vqtbl4q_s8(v44, v18), v19), v20));
  return (*(uint64_t (**)(void))(v13 + 8 * (((v25 == -103) * v12) ^ a1)))();
}

uint64_t sub_19E828C4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  BOOL v10 = v7 < a6;
  if (v10 == v8 - 0x16A6F5B7CD2A77E1 < a6) {
    BOOL v10 = v8 - 0x16A6F5B7CD2A77E1 < v7;
  }
  return (*(uint64_t (**)(void))(v9 + 8 * ((v6 + 741) ^ (75 * !v10))))();
}

uint64_t sub_19E828CC0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X4>, int a3@<W8>)
{
  *(unsigned char *)(a1 + (a3 - 136129907)) = *(unsigned char *)(a2 + (v5 - 1677278995));
  return (*(uint64_t (**)(void))(v6 + 8 * (((v3 - 515) * ((v4 + 72) < 4)) ^ v3)))();
}

uint64_t sub_19E8291DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  int v13 = STACK[0x25C];
  int v14 = (LODWORD(STACK[0x25C]) - 933683190) & 0x37A6DEB7;
  int v15 = LODWORD(STACK[0x25C]) + 171;
  int v16 = LODWORD(STACK[0x25C]) - 351;
  STACK[0x2A0] = (unint64_t)&STACK[0x268];
  int64x2_t v17 = *(void **)a11;
  uint64_t v18 = *(void *)(*(void *)a11 + 24);
  STACK[0x2A8] = v18 + 101;
  LODWORD(STACK[0x2B0]) = *(_DWORD *)(v18 + 12);
  STACK[0x2B8] = v18 + 16;
  LODWORD(STACK[0x2C0]) = 20;
  STACK[0x2C8] = v17[3] + 37;
  LODWORD(STACK[0x2D0]) = 64;
  STACK[0x2D8] = v17[4] + 41;
  LODWORD(STACK[0x2E0]) = 64;
  STACK[0x2E8] = 0;
  LODWORD(STACK[0x2F0]) = 32;
  STACK[0x2F8] = v17[4] + 24;
  LODWORD(STACK[0x300]) = 16;
  STACK[0x308] = v17[4] + 8;
  LODWORD(STACK[0x310]) = 16;
  STACK[0x318] = v17[4] + 105;
  LODWORD(STACK[0x320]) = 256;
  STACK[0x328] = (unint64_t)v17;
  LODWORD(STACK[0x330]) = 20;
  STACK[0x338] = v17[6];
  LODWORD(STACK[0x340]) = 32;
  STACK[0x348] = (unint64_t)&STACK[0x9F0];
  LODWORD(STACK[0x350]) = 32;
  STACK[0x358] = v12 - 224;
  STACK[0x360] = (unint64_t)&STACK[0x264];
  LODWORD(STACK[0x368]) = 1;
  *(_DWORD *)(v17[5] + 8) = 1280135238;
  LODWORD(v18) = 961177747 * (((v12 - 192) & 0x878950E5 | ~((v12 - 192) | 0x878950E5)) ^ 0x5F245E06);
  *(void *)(v12 - 184) = *(void *)(*(void *)a11 + 40) + 0x7A3849771BBF5798;
  *(_DWORD *)(v12 - 192) = v13 - v18 + 220658196;
  *(_DWORD *)(v12 - 188) = v18 ^ 0x602595A3;
  (*(void (**)(uint64_t))(v11 + 8 * (v13 + 909)))(v12 - 192);
  STACK[0x370] = *(void *)(*(void *)a11 + 40) + 16;
  LODWORD(STACK[0x378]) = 128;
  *(void *)(v12 - 184) = a10;
  *(_DWORD *)(v12 - 188) = (v13 - 1429888291) ^ (1980347521
                                               * ((((v12 - 192) | 0x8401EE50) - (v12 - 192) + ((v12 - 192) & 0x7BFE11A8)) ^ 0x3DE5AEAD));
  uint64_t v19 = (*(uint64_t (**)(uint64_t))(v11 + 8 * (v13 + 906)))(v12 - 192);
  return (*(uint64_t (**)(uint64_t))(v11
                                            + 8 * (((*(_DWORD *)(v12 - 192) == 694817499) * (v15 + v14 - 2166)) ^ v16)))(v19);
}

void sub_19E829424(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned int a13, uint64_t a14, uint64_t a15)
{
  a14 = a11;
  a15 = 0x523BC1D27526C6FLL;
  a13 = v15 - 1431787901 * (&a12 ^ 0x2B90AAD7) + v16 + 1220;
  (*(void (**)(uint64_t *))(v17 + 8 * (v15 + v16 + 1713)))(&a12);
  JUMPOUT(0x19E81B84CLL);
}

uint64_t sub_19E829484(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, int a8)
{
  int v8 = *(unsigned __int8 *)(*v27 + (v19 + a8)) ^ v26;
  unsigned int v9 = (((v8 - ((2 * v8) & 0xFFFFFFF3)) << 24) - 117440512) ^ 0xF9000000;
  int v10 = *(unsigned __int8 *)(*v27 + (v19 + a8 + 1)) ^ v26;
  int v11 = (((v10 - ((2 * v10) & 0x1AC)) << 16) + 768999424) ^ 0x2DD60000;
  unsigned int v12 = (v11 + 165382965 - ((2 * v11) & 0x13B60000)) ^ 0x9DB8B35 | (v9 + v22 - ((2 * v9) & 0xE3FFFFFF)) ^ v22;
  int v13 = *(unsigned __int8 *)(*v27 + (v19 + a8 + 2)) ^ v26;
  int v14 = (v21 + ((v13 - ((2 * v13) & 0x7A)) << 8)) ^ v21;
  unsigned int v15 = (v12 + v20 - ((2 * v12) & 0xE270DE92)) ^ v20 | (v14 + 1499223852 - ((2 * v14) & 0x32B8AE00)) ^ 0x595C572C;
  int v16 = *(unsigned __int8 *)(*v27 + (v19 + a8 + 3)) ^ v26;
  unsigned int v17 = (v15 + 1127416329 - ((2 * v15) & 0x86660412)) ^ 0x43330209 | (v16 + a6 - ((2 * v16) & 0x1E0)) ^ a6;
  return (*(uint64_t (**)(uint64_t, void, void))(v24 + 8 * (v25 - 1596)))(a1, (2 * v17) & 0x52D425B6, v17 + v23 - ((2 * v17) & 0x52D425B6));
}

void sub_19E829494()
{
}

uint64_t sub_19E8294C4()
{
  return (*(uint64_t (**)(void))(v0
                              + 8
                              * ((LODWORD(STACK[0x25C]) - 622) ^ (8 * (v1 >= (STACK[0x218] & 0xB32763CF ^ 0x2ABA205A))))))();
}

uint64_t sub_19E829504@<X0>(int a1@<W8>)
{
  if ((a1 + 1558073824) > 0x18 || ((1 << (a1 - 32)) & 0x1000581) == 0) {
    return (*(uint64_t (**)(void))(v3
  }
                                + 8
                                * ((((*(unsigned char *)(v1 + v2 * (uint64_t)v4 + 40) & 8) == 0)
                                  * ((LODWORD(STACK[0x25C]) + 625) ^ 0xFEB)) ^ (LODWORD(STACK[0x25C]) - 1100))))();
  int v6 = *(_DWORD *)(v1 + v2 * (uint64_t)v4 + 40);
  return (*(uint64_t (**)(void))(v3
                              + 8
                              * ((LODWORD(STACK[0x25C]) + 683) ^ (8
                                                                * ((((LODWORD(STACK[0x25C]) ^ 0x516)
                                                                   - 1134962247
                                                                   + (v6 | 0xFFFFFFFE)) ^ 0x3A1BCACE)
                                                                 - (((((LODWORD(STACK[0x25C]) ^ 0x516)
                                                                     - 1134962247
                                                                     + (v6 | 0xFFFFFFFE)) ^ 0x3A1BCACE) << (((LODWORD(STACK[0x25C]) + 75) | 0x8E) + 51)) & 0x20A2) != -2042499148)))))();
}

uint64_t sub_19E829648(double a1, double a2, int8x16_t a3, int8x16_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12)
{
  *(int8x16_t *)(a6 + (v13 + 16)) = vaddq_s8(vsubq_s8(*(int8x16_t *)(v15 + (v13 + 16)), vandq_s8(vaddq_s8(*(int8x16_t *)(v15 + (v13 + 16)), *(int8x16_t *)(v15 + (v13 + 16))), a3)), a4);
  return (*(uint64_t (**)(void))(v17 + 8 * (((v14 != 16) * (((v12 + a12) & v16) - 286)) ^ (v12 - 439))))();
}

void sub_19E829780()
{
  int v0 = (LODWORD(STACK[0x410]) - 274) ^ 0xF9;
  LODWORD(STACK[0x3F8]) = LODWORD(STACK[0x2C8]) ^ 0xDB35AC2A;
  LODWORD(STACK[0x408]) = LODWORD(STACK[0x240]) ^ 0xBC24E44D;
  LODWORD(STACK[0x3F0]) = LODWORD(STACK[0x3B8]) ^ v0 ^ 0x7A430D14;
  LODWORD(STACK[0x400]) = LODWORD(STACK[0x2C0]) ^ 0x3BB911F6;
  JUMPOUT(0x19E724ADCLL);
}

void sub_19E8297EC()
{
  *(_DWORD *)(v0 + 48) = 694817499;
}

uint64_t sub_19E829844@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(void))(v4
                              + 8
                              * ((19
                                * (((v3 + ((v2 + 2) ^ (2 * a1)) - (v2 & (2 * ((v2 + 2) ^ (2 * a1)))) + 197) ^ (((v5 - 193) | 0x41) + v3)) > v1)) ^ v5)))();
}

void sub_19E829890()
{
}

uint64_t sub_19E8299A0@<X0>(int a1@<W0>, int a2@<W1>, char a3@<W2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, int a7@<W6>, int a8@<W7>, uint64_t a9@<X8>)
{
  unsigned int v18 = (v11 + v9 + v10 - v12 + v14) ^ a4 ^ (((v11 + v9 + v10 - v12 + v14) >> 30) | 0x98C54534);
  *(_DWORD *)(v15 + 4 * a9 + 4) = a9
                                - ((((a9 + a1 + ((v18 * a5) ^ a6) + ((v18 * a7) & a8)) << ((a2 ^ a3) - 95)) + v13) & 0xF8E11006)
                                + ((v18 * a5) ^ a6)
                                + ((v18 * a7) & a8)
                                + v16;
  return (*(uint64_t (**)(void))(v17 + 8 * ((35 * ((a9 + 1) > 0x26E)) ^ a2)))();
}

uint64_t sub_19E8299BC@<X0>(int a1@<W4>, uint64_t a2@<X5>, uint64_t a3@<X8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unsigned int a16, int a17, int a18, int a19, uint64_t a20,uint64_t a21,int a22,int a23,uint64_t a24,unsigned int a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  unint64_t v30 = (*(unsigned int *)(a3 + a10) ^ 0xCFEDDC7B36BF0BD3)
      + (((unint64_t)(a2 + v29) >> 32) ^ 0xEF53FCF9FB93FFFDLL)
      + (((unint64_t)(a2 + v29) >> 32 << (((a1 + 52) | 6u) - 21)) & 0x1F727FFFALL)
      + ((2 * (*(_DWORD *)(a3 + a10) ^ 0xB41B6AD)) & 0x7BFD7AFC);
  *(_DWORD *)(a3 + 4 * a13) = v30 - 777062093 + ~((2 * v30 + 215647498) & 0x16836D5A);
  BOOL v31 = a25 > a16;
  *(_DWORD *)(a29 + a10) = (((v30 + 0x40BE268AC66D4285) >> 32)
                          - (((v30 + 0x40BE268AC66D4285) >> 31) & 0x282C1F4)
                          + 21061882) ^ 0xA00D657;
  if (v31 == a23 - 885078299 < -1913228115) {
    BOOL v31 = a23 - 885078299 < a19;
  }
  return (*(uint64_t (**)(void))(a12 + 8 * ((a1 - 1727) ^ (52 * v31))))();
}

uint64_t sub_19E829B2C@<X0>(uint64_t result@<X0>, int a2@<W8>)
{
  *int v2 = a2;
  *(_DWORD *)(result + 4) = -694859282;
  return result;
}

uint64_t sub_19E829B40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (v71 <= 0xFF05CD0A) {
    int v72 = *a71 + 1;
  }
  else {
    int v72 = 1672127575;
  }
  *a71 = v72;
  return sub_19E829CCC(a1, 1383707333);
}

uint64_t sub_19E829CCC@<X0>(int a1@<W1>, uint64_t a2@<X3>, int a3@<W4>, int a4@<W8>)
{
  unsigned int v8 = (v5 ^ 0x1B79CA69u) >> (((a4 + 91) & 0xF7 ^ 0x4D) + v4);
  int v9 = (unsigned char *)(a2 + (a3 - 1383707334));
  unsigned int v10 = 1631306195
      * ((*(_DWORD *)(*(void *)STACK[0x238] + (*(_DWORD *)STACK[0x230] & 0x1256D1D4)) ^ v9) & 0x7FFFFFFF);
  unint64_t v11 = 1631306195 * (v10 ^ HIWORD(v10));
  LOBYTE(v8) = *(unsigned char *)(*(void *)(v7 + 8 * (a4 ^ 0x537)) + (v11 >> 24) - 8) ^ *(unsigned char *)((v11 >> 24)
                                                                                             + *(void *)(v7 + 8 * (a4 ^ 0x5D6))
                                                                                             + 3) ^ *(unsigned char *)(*(void *)(v7 + 8 * (a4 - 1336)) + (v11 >> 24) - 7) ^ (v8 - (((_BYTE)v8 << ((a4 + 92) & 0x53 ^ 0x53)) & 0x50) - 88) ^ v11 ^ (-3 * BYTE3(v11)) ^ 0xA8;
  *int v9 = v8;
  return (*(uint64_t (**)(void))(v6 + 8 * ((724 * (a3 - (v8 != 0) == a1)) ^ a4)))();
}

uint64_t sub_19E829E10@<X0>(int a1@<W8>)
{
  int v3 = a1 - 4;
  (*(void (**)(void))(v1 + 8 * (a1 ^ 0xD2Cu)))();
  *(void *)(*(void *)v2 + 40) = 0;
  return (*(uint64_t (**)(void))(v1 + 8 * (((*(void *)v2 != 0) * ((8 * v3) ^ 0x2E2F)) ^ v3)))();
}

void sub_19E829E5C(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(_DWORD *)(a1 + a2) = 263820150;
}

uint64_t sub_19E829E6C()
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * ((2305 * ((*v0 ^ (v1 - 171971074)) + ((2 * *v0) & 0x7777) + 616319632 == 444349045)) ^ v1)))();
}

void sub_19E829F04()
{
  STACK[0x238] = STACK[0x388];
  LODWORD(STACK[0x260]) = 807847714;
  JUMPOUT(0x19E829F3CLL);
}

uint64_t sub_19E829F70()
{
  return (*(uint64_t (**)(void))(v3
                              + 8
                              * ((((*(unsigned char *)(v1 + v2 * (uint64_t)v4 + 40) & 8) == 0) * ((v0 + 625) ^ 0xFEB)) ^ (v0 - 1100))))();
}

uint64_t sub_19E829FAC()
{
  return (*(uint64_t (**)(uint64_t))(v3 + 8 * ((11 * (v0 + 1 == v4 + 44)) ^ v2)))(v1);
}

uint64_t sub_19E82A148@<X0>(int a1@<W2>, int a2@<W3>, int a3@<W8>)
{
  *(unsigned char *)(*v9 + (v7 + v5 + v4 - 745 - 721)) = *(unsigned char *)(*v9 + (v6 + a2));
  return (*(uint64_t (**)(void))(v8 + 8 * (((v3 - 1 != a3 + 591) * a1) ^ v4)))();
}

uint64_t sub_19E82A1A0()
{
  unsigned int v3 = *(_DWORD *)(v2 - 0x19C7A72C32A62CB3) + 1876288502 + ((v1 - 1946120595) & 0x73FF76F7);
  unsigned int v4 = *(_DWORD *)(v2 - 0x19C7A72C32A62CB7) + 2124764186;
  BOOL v5 = v4 < 0xD6B1B3F2;
  BOOL v6 = v3 < v4;
  if (v5 != v3 < 9 * (v1 ^ 0x7Eu) - 692998763) {
    BOOL v6 = v5;
  }
  return (*(uint64_t (**)(void))(v0 + 8 * ((455 * v6) ^ v1)))();
}

uint64_t sub_19E82A258@<X0>(uint64_t a1@<X1>, uint64_t a2@<X6>, uint64_t a3@<X7>, int a4@<W8>, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  BOOL v41 = HIDWORD(a7) < 0xB263AA01;
  if (v41 == (a4 - 2076391481) < 0xB263AA01) {
    BOOL v41 = (a4 - 2076391481) < HIDWORD(a7);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v40 + 8 * (int)((!v41 * (((v39 + 616857634) & 0xDB3B7BF3) + 9)) ^ v39)))(2992876033, a1, 2218575815, HIDWORD(a7), 1066, 58, a2, a3, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15,
           a16,
           a17,
           a18,
           a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39);
}

uint64_t sub_19E82A2D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 8 * ((58 * (a7 != v7)) ^ v8)))(a1, a2, 1986, a3, a4, a5, a6, 1013);
}

uint64_t sub_19E82D498(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  int v31 = 402930427 * ((((v30 - 120) | 0xFD20CECB) - ((v30 - 120) & 0xFD20CECB)) ^ 0xE7993276);
  *(_DWORD *)(v30 - 120) = (v29 + 5) ^ v31;
  *(void *)(v30 - 112) = v26;
  *(_DWORD *)(v30 - 104) = v29 - 1166 - v31 + v28 + 734204412;
  (*(void (**)(uint64_t))(v27 + 8 * (v29 + 916)))(v30 - 120);
  *(void *)(v30 - 112) = a26;
  *(void *)(v30 - 104) = a24;
  *(_DWORD *)(v30 - 116) = v29 - 1166 + 291962093 * ((v30 - 120) ^ 0x11F20D4A) + 789;
  uint64_t v32 = (*(uint64_t (**)(uint64_t))(v27 + 8 * ((v29 - 1166) ^ 0x81C)))(v30 - 120);
  return (*(uint64_t (**)(uint64_t))(v27
                                            + 8
                                            * ((((*(_DWORD *)(v30 - 120) - 1002406146) < 0xE0E6B0A3)
                                              * ((v29 - 529082270) & 0x1F892AFC ^ (v29 - 1893090190) & 0x70D63EB9 ^ 0x867)) ^ (v29 - 1166))))(v32);
}

uint64_t sub_19E82D5DC@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t a5, unsigned int a6, char a7, int a8, unint64_t *a9, int a10, unint64_t *a11)
{
  int v14 = v11 + 91;
  uint64_t v15 = *(void *)(v12 + 16);
  unsigned int v16 = 653146051 * ((2 * (&a4 & 0x13F852F8) - &a4 + 1812442375) ^ 0xC61318E5);
  a6 = ((2 * a1) & 0xFB65DCF6 ^ 0x7B650C86) - v16 - 562094634 + ((((v14 - 265243400) & 0xFCF4BD7) - 1069254747) ^ a1);
  a4 = &STACK[0x488DA78826B81283];
  a5 = v15;
  a8 = (v14 + 1635492436) ^ v16;
  a7 = -61 * ((2 * (&a4 & 0xF8) - &a4 + 7) ^ 0xE5) + 13;
  a9 = &STACK[0x7D54D853C674EFE0];
  a11 = &STACK[0x7FDFE0196EC10AFF];
  uint64_t v17 = (*(uint64_t (**)(unint64_t **))(v13 + 8 * (v14 + 2121)))(&a4);
  return (*(uint64_t (**)(uint64_t))(v13 + 8 * (((a10 == 694817499) * ((v14 - 91) ^ 0x73A)) ^ v14)))(v17);
}

uint64_t sub_19E82D730()
{
  BOOL v4 = ((v1 + 1569052028) & 0xA27A2BB7 ^ 0xD83F3F3B) + (v3 ^ 0x7FD5C7E7) - 1477772324 + (v0 & 0xFFAB8FCE) < ((v1 + 1507922955) & 0xA61EEBA9 ^ 0x7FFFFE77);
  return (*(uint64_t (**)(void))(v2 + 8 * (((2 * v4) | (4 * v4)) ^ v1)))();
}

uint64_t sub_19E82D7D0()
{
  unsigned int v3 = *(_DWORD *)(v0 - 0x19C7A72C32A62CB3)
     - ((2 * *(_DWORD *)(v0 - 0x19C7A72C32A62CB3) + 843607144) & 0xE13A3DD8)
     + 163665184;
  BOOL v4 = ((2 * v3) & 0xE5CAF7BC ^ 0xE10A3598)
     + 1069543412
     + ((v2 + 995) ^ 0x631 ^ v3 ^ (2 * (v2 + 995)) ^ 0x982 ^ 0x827861D9) == 849701842;
  return (*(uint64_t (**)(void))(v1 + 8 * (v4 | (2 * v4) | (v2 + 995))))();
}

uint64_t sub_19E82D880()
{
  unsigned int v3 = ((v0 & 0x1F ^ 0xA | 0xC47BB3B2) - (v0 & 0x1F ^ 0xA | 0x3B844C4D) + 998526029) ^ 0xA779E3B8;
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * ((119 * (((((2 * v3) & 0xA0E7D80A) - v3 == 486682625) ^ (v1 + 79)) & 1)) ^ v1)))();
}

uint64_t sub_19E82D918(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, uint64_t a13)
{
  return (*(uint64_t (**)(void))(v13
                              + 8
                              * ((52
                                * (((((v14 - 369) ^ 0x1B) + 140024306) ^ ((v15 & 0xFFFFFF ^ 0xA1203E)
                                                                        - ((2 * (v15 & 0xFFFFFF ^ 0xA1203E)) & 0x12759E2)
                                                                        + 143895793)) != (*(_DWORD *)(a13 + 32) ^ a12)
                                                                                       - 423703570)) ^ (v14 - 784))))();
}

void sub_19E82D99C()
{
}

uint64_t sub_19E82D9A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  *(_DWORD *)(v25 - 116) = v24 + ((v25 - 120 + v19 - 2 * ((v25 - 120) & v19)) ^ 0xF7E62807) * v22 - 44;
  *(void *)(v25 - 112) = a19;
  *(void *)(v25 - 104) = v20;
  uint64_t v26 = (*(uint64_t (**)(uint64_t))(v21 + 8 * (v24 + 1219)))(v25 - 120);
  return (*(uint64_t (**)(uint64_t))(v21
                                            + 8
                                            * ((777 * (v23 + *(_DWORD *)(v25 - 120) + 1 < (v24 ^ 0xDAA3C9BD))) | v24)))(v26);
}

void sub_19E82DA34()
{
}

uint64_t sub_19E82DBA8(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,int a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,int a43)
{
  int v45 = (a3 + 103) | 0x230;
  int v46 = a3 - a8;
  int v47 = 1305237457 * ((~((v44 - 184) | 0xAFC8A989) + ((v44 - 184) & 0xAFC8A989)) ^ 0xE98EF0B8);
  *(_DWORD *)(v44 - 184) = (a13 - 389031519) ^ v47;
  *(void *)(v44 - 176) = a10;
  *(_DWORD *)(v44 - 168) = v47 + a3 + 579;
  uint64_t v48 = (*(uint64_t (**)(uint64_t))(v43 + 8 * (a3 + 2351)))(v44 - 184);
  unsigned int v49 = (v46 ^ 0x1277DF36 ^ (2 * a43) & 0x7C) + (a43 & (v45 ^ 0x286) ^ 0xD365EE9A);
  *(&a34 + v49 + 748294466) = 65;
  return (*(uint64_t (**)(uint64_t))(v43 + 8 * ((1043 * (v49 + 748294410 < 0xFFFFFFC8)) ^ a3)))(v48);
}

uint64_t sub_19E82DCE4@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, int a4, uint64_t a5, unsigned int a6, uint64_t a7, unsigned int a8)
{
  unsigned int v12 = (((&a4 | 0x3E8BDA77) + (~&a4 | 0xC1742588)) ^ 0x151B70A1) * a1;
  a4 = (v11 + 346) ^ v12;
  a7 = v9;
  a8 = v12 - 38673055;
  a5 = v8;
  a6 = 1368286285 - v12;
  uint64_t v13 = (*(uint64_t (**)(int *))(v10 + 8 * (v11 ^ 0xB68)))(&a4);
  BOOL v14 = *(_DWORD *)(v9 - 0x19C7A72C32A62CABLL) == ((v11 + 1637) ^ 0x296A1F3F ^ (v11 - 979731495) & 0x3A65876F);
  return (*(uint64_t (**)(uint64_t))(v10 + 8 * ((8 * v14) | (16 * v14) | v11)))(v13);
}

uint64_t sub_19E82DDC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, int a5@<W8>, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  unsigned int v19 = *(_DWORD *)(a14 + 12) + a5;
  LODWORD(v25) = a5 + *(_DWORD *)(a14 + 16) - 335984265;
  if (v25 >= 0xFFFFFFFE) {
    uint64_t v20 = 885139635;
  }
  else {
    uint64_t v20 = 885139647;
  }
  HIDWORD(v25) = *(_DWORD *)(a17 - 0x19C7A72C32A62CB3);
  BOOL v21 = (HIDWORD(v25) + 2017540816) < 0xDF1D049C;
  if (v21 == ((v17 - 761) | 0x205u) - 551748011 > 0xDF1D049C) {
    BOOL v21 = (HIDWORD(v25) + 2017540816) > 0xDF1D049C;
  }
  LODWORD(v23) = v19 ^ 0x1F;
  HIDWORD(v23) = (v19 >> 8) ^ 0xFFFFFFFE;
  LODWORD(v24) = (v17 - 1350) ^ HIWORD(v19);
  HIDWORD(v24) = HIBYTE(v19) ^ 0x3C;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 8 * ((!v21 * ((v17 - 1844) ^ 0x1D)) ^ (v17 - 1422))))(a1, 773917799, a2, a3, a4, 3290836464, v20, 2447201948, a17 - 0x19C7A72C32A62CB3, v23, v24, a9, a10, a11, v25);
}

uint64_t sub_19E82DEBC(int8x16_t a1, int8x16_t a2, double a3, double a4, int8x16_t a5, int32x4_t a6, int8x16_t a7, int32x4_t a8, uint64_t a9, uint64_t a10, int a11, unsigned int a12, unint64_t a13)
{
  uint64_t v31 = v14 + 4;
  uint64_t v32 = v15 + 1;
  a2.i64[0] = v32[57].i64[0];
  a2.i32[2] = v32[57].i32[2];
  int8x16_t v33 = vextq_s8(a1, a2, 0xCuLL);
  int8x16_t v34 = a2;
  v34.i32[3] = v32[57].i32[3];
  int8x16_t v35 = (int8x16_t)vaddq_s32((int32x4_t)veorq_s8((int8x16_t)vaddq_s32((int32x4_t)vandq_s8(v33, v26), a6), a7), a8);
  int8x16_t v36 = veorq_s8(vandq_s8(v34, a5), v19);
  int8x16_t v37 = (int8x16_t)vaddq_s32((int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vsubq_s32((int32x4_t)vorrq_s8(v36, v20), (int32x4_t)vorrq_s8(v36, v21)), v22), v23), v25);
  int8x16_t v38 = veorq_s8(v37, v24);
  int32x4_t v39 = (int32x4_t)veorq_s8(vandq_s8(v38, v27), vandq_s8(v37, v30));
  uint32x4_t v40 = (uint32x4_t)vaddq_s32(vsubq_s32((int32x4_t)vorrq_s8(v38, vandq_s8(v35, v26)), vaddq_s32(v39, v39)), v28);
  v38.i32[0] = *(_DWORD *)(v17 + 4 * ((v32[57].i32[0] & 1) == 0));
  v38.i32[1] = *(_DWORD *)(v17 + 4 * ((v32[57].i32[1] & 1) == 0));
  v38.i32[2] = *(_DWORD *)(v17 + 4 * (~v32[57].i32[2] & 1));
  v38.i32[3] = *(_DWORD *)(v17 + 4 * ((v34.i8[12] & 1) == 0));
  *(int8x16_t *)(v16 + 4 * (v31 + ((v13 + a11) & a12 ^ a13))) = veorq_s8(veorq_s8(veorq_s8(*v32, v38), v29), (int8x16_t)vshrq_n_u32(v40, 1uLL));
  return (*(uint64_t (**)(void))(v18 + 8 * (v13 ^ (4 * (v31 == 392)))))();
}

unsigned int *sub_19E82DEC8@<X0>(unsigned int *result@<X0>, char a2@<W8>)
{
  *unint64_t result = (-397711069
           - (((*(_DWORD *)(*(void *)(v2 - 0x7CF6A079DDC7252CLL) + 4 * (v4 + 114361923)) ^ 0xB41B6ADu) >> a2) & ((v3 ^ 0x20) - 1006))) ^ 0x65A10F2D;
  return result;
}

uint64_t sub_19E82DF28()
{
  if (v0 >= 0xB1ABF81E) {
    int v2 = *v1 + 1;
  }
  else {
    int v2 = 1672127575;
  }
  *int v1 = v2;
  return sub_19E8D4F60();
}

uint64_t sub_19E82DF3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X7>, int a3@<W8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8 * ((1163 * (v3 + 1 == v5 + 44)) ^ a3)))(a1, a2);
}

uint64_t sub_19E82E0F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13)
{
  BOOL v16 = v13 + 949251869 < (a13 + 136786631);
  if ((a13 + 136786631) < 0x69E0934B != (v13 + 949251869) < 0x69E0934B) {
    BOOL v16 = (a13 + 136786631) < 0x69E0934B;
  }
  return (*(uint64_t (**)(void))(v14 + 8 * ((v16 * ((17 * (v15 ^ 0x228)) ^ 0x3B)) ^ v15)))();
}

uint64_t sub_19E82E160(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  return sub_19E82E1EC(a1, (a6 - 1492575045));
}

uint64_t sub_19E82E1EC(uint64_t a1, int a2, int a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  *(_DWORD *)(a27 + 4 * v28) = v27;
  int v33 = v28 + 1 + v31;
  BOOL v35 = v33 < a4 && v33 > a2;
  return (*(uint64_t (**)(void))(v32 + 8 * (((a5 & ~(a3 ^ v35)) * v29) ^ v30)))();
}

uint64_t sub_19E82E224()
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * (((8 * (((v1 < 0xF) ^ ((v0 & 0xCF ^ 0xE0) + 119)) & 1)) & 0xEF | (16 * (((v1 < 0xF) ^ ((v0 & 0xE5212CF ^ 0xAE0) - 137)) & 1))) ^ v0 & 0xE5212CFu)))();
}

uint64_t sub_19E82E26C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10)
{
  return (*(uint64_t (**)(void))(v10
                              + 8
                              * ((((a10 ^ 0x296A1AF2 ^ (v11 + 887884585) & 0xCB13F97F) > 0x14)
                                * ((v11 - 1671054242) & 0x639A473B ^ 0x714)) ^ v11)))();
}

uint64_t sub_19E82E2D4(int a1)
{
  return (*(uint64_t (**)(void))(v3
                              + 8
                              * (((v2 + v1 == ((a1 - 113) ^ (v1 + 415))) * (((a1 - 16) | 0x10) + 604)) ^ (a1 - 563))))();
}

uint64_t sub_19E82E318@<X0>(int a1@<W5>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t))(v2 + 8 * ((70 * (a2 + 1 == v4 + 48)) | a1)))(v3);
}

uint64_t sub_19E82E4D4()
{
  return (*(uint64_t (**)(void))(v0
                              + 8
                              * ((125
                                * ((((v1 - 1600483695) < 0xFFFFFFFE) ^ (v2 + 0x80)) & 1)) ^ v2)))();
}

uint64_t sub_19E82E518@<X0>(int a1@<W1>, uint64_t a2@<X4>, int a3@<W8>)
{
  *((unsigned char *)&STACK[0x360] + (v5 + a1 + v3 - 624)) = v4;
  *((unsigned char *)&STACK[0x360] + (a3 - 136129908)) = *(unsigned char *)(a2
                                                                        + ((v3 - 554904303) & 0x2113247F ^ 0x9C06C0A1)
                                                                        + 1677278997);
  return (*(uint64_t (**)(void))(v6 + 8 * ((223 * ((v7 + 1677279068) < 4)) ^ (v3 - 624))))();
}

uint64_t sub_19E82E540(int a1, int a2)
{
  int v8 = v5 | 0x888;
  unsigned int v9 = a1 + v4 + a2;
  uint64_t v10 = (2154 - v8);
  unsigned int v11 = v8 - (v3 & 0xFFFFFFE0) - 2154;
  int v12 = v8 - 375;
  v13.i64[0] = 0x8282828282828282;
  v13.i64[1] = 0x8282828282828282;
  v14.i64[0] = 0xC1C1C1C1C1C1C1C1;
  v14.i64[1] = 0xC1C1C1C1C1C1C1C1;
  int8x16_t v15 = vrev64q_s8(*(int8x16_t *)(v6 + v9 - 15));
  int8x16_t v16 = vextq_s8(v15, v15, 8uLL);
  int8x16_t v17 = vrev64q_s8(*(int8x16_t *)(v6 + v9 - 31));
  int8x16_t v18 = vextq_s8(v17, v17, 8uLL);
  uint64_t v19 = v2 + v9;
  int8x16_t v20 = vrev64q_s8(vaddq_s8(vsubq_s8(v16, vandq_s8(vaddq_s8(v16, v16), v13)), v14));
  *(int8x16_t *)(v19 - 15) = vextq_s8(v20, v20, 8uLL);
  int8x16_t v21 = vrev64q_s8(vaddq_s8(vsubq_s8(v18, vandq_s8(vaddq_s8(v18, v18), v13)), v14));
  *(int8x16_t *)(v19 - 31) = vextq_s8(v21, v21, 8uLL);
  return (*(uint64_t (**)(uint64_t))(v7 + 8 * ((61 * (v11 == 0)) ^ v12)))(v10);
}

uint64_t sub_19E838FCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 8 * ((((v9 ^ 0x471) + 50 * (v9 ^ 0x7E6) + 2573) * (v8 == 1242597624)) ^ v9)))();
}

uint64_t sub_19E839020(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  BOOL v12 = *(_DWORD *)(v8 + v9 * (uint64_t)v11 + 36) == a7 + ((v7 - 837) | 0xD4) - 1525;
  return (*(uint64_t (**)(void))(v10
                              + 8
                              * (((v7 + 67) ^ v12) & 1 | (8 * (((v7 + 67) ^ v12) & 1)) | v7)))();
}

uint64_t sub_19E839064@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(void))(v2 + 8 * ((((((v1 - 2170) | 0x349) ^ 0x1A8F3428u) - a1 < 7) * (v1 - 2039)) ^ v1)))();
}

uint64_t sub_19E8390AC(uint64_t a1, int a2, int a3, int a4)
{
  return (*(uint64_t (**)(void))(v4
                              + 8
                              * ((15
                                * ((a3 & 0xDDFFAA10 ^ 0x15C12A00) + (a2 ^ (a4 - 417) ^ 0x641F431A) - 1116292360 != 745967616)) | (a4 - 417))))();
}

uint64_t sub_19E839118(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, int a11, uint64_t a12)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8 * (((5 * (a3 ^ 0x309) - 652) * (a11 > a10)) ^ a3)))(a12, 2147482956);
}

void sub_19E83B7B8()
{
}

uint64_t sub_19E83B8B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  int8x16_t v15 = *(uint64_t (**)(void, uint64_t, unint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 8 * (int)(a8 ^ (29 * (v13 < 2))));
  return v15(v15, 0x1261376A8E9BEFDCLL, 0xDFB5DF7DEBFE3B8ALL, 2300256501, 0x16BF7E5FCLL, 0xF11FD5EFCB7F7FFFLL, 0x1CAEEFCFALL, a8, a9, a10, a11, a12, a13);
}

void sub_19E83B8EC()
{
}

uint64_t sub_19E83B9EC@<X0>(int a1@<W2>, uint64_t a2@<X4>, int a3@<W8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  a65 = a3;
  a66 = HIDWORD(a13);
  *(void *)(a2 + 400) = a14;
  a67 = ((v67 + 1996490926) & 0x88FFF5FF) - v71 + ((v67 + 340823834) | 0x20000004) + HIDWORD(a15) + 761843110;
  *(void *)(a2 + 416) = a12 + (v71 - 807847714);
  uint64_t v72 = (*(uint64_t (**)(uint64_t, uint64_t))(v70 + v69 * (uint64_t)a1 + 8))(a6, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v68 + 8 * ((2577 * (v72 + 694817499 - ((2 * v72) & 0x52D425B6) == 694817499)) ^ v67)))(v72, v73, 48, 694817499, &a16, v74, 2996759556, 2147483652, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14,
           a15,
           a16,
           a17,
           a18,
           a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48,
           a49,
           a50,
           a51,
           a52,
           a53,
           a54,
           a55,
           a56,
           a57,
           a58);
}

void sub_19E83BADC()
{
  *(_DWORD *)(v0 - 140) = LODWORD(STACK[0x240]) ^ 0x9797673F;
  *(_DWORD *)(v0 - 136) = LODWORD(STACK[0x248]) ^ 0x8388264A;
  *(_DWORD *)(v0 - 128) = LODWORD(STACK[0x24C]) ^ 0x1672FCFA;
  *(_DWORD *)(v0 - 132) = LODWORD(STACK[0x244]) ^ 0xB8B6BDE7;
  JUMPOUT(0x19E7607D4);
}

uint64_t sub_19E83BE10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  *(_DWORD *)(v17 - 124) = v16 + ((((v17 - 128) | 0xC5226061) + (~(v17 - 128) | 0x3ADD9F9E)) ^ 0xD4D06D2A) * v13 + 562;
  *(void *)(v17 - 120) = a12;
  *(void *)(v17 - 112) = v15;
  uint64_t v18 = (*(uint64_t (**)(uint64_t))(v12 + 8 * (v16 ^ 0x921)))(v17 - 128);
  return (*(uint64_t (**)(uint64_t))(v12 + 8 * (((*(_DWORD *)(v17 - 128) == v14 + 2) * (v16 + 190)) ^ v16)))(v18);
}

void sub_19E83BE94()
{
}

uint64_t sub_19E83BF54@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * ((44
                                * (((((v1 + 1196614879) & 0xB8AD1FF7 ^ 0x1FFFFFD45) + (v1 + 602)) & a1) == 0)) ^ v1)))();
}

void sub_19E83BFA8(_DWORD *a1@<X8>)
{
  *a1 = v2 + 236;
  *(_DWORD *)(v1 + 12) = *a1;
}

void sub_19E83BFB8(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 24) + 402930427 * (((a1 | 0xE198D957) - (a1 | 0x1E6726A8) + 510076584) ^ 0xFB2125EA);
  __asm { BRAA            X10, X17 }
}

uint64_t sub_19E83C2B4@<X0>(uint64_t a1@<X2>, int a2@<W8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56)
{
  uint64_t v60 = 4 * (v57 - 1655923419);
  unsigned int v61 = *(_DWORD *)(v58 + 4 * (v57 - 1655923420));
  int v62 = (*(_DWORD *)(v58 + v60) ^ 0xE26C6849 ^ (1566083941 * (v61 ^ v56 ^ (v61 >> 30))
                                              - ((984684234 * (v61 ^ v56 ^ (v61 >> 30))) & 0x3C39C094)
                                              + 505208906))
      - v57;
  *(_DWORD *)(v58 + v60) = v62 - ((2 * v62 - 983120458) & 0xF8E11006) + 1596189406;
  uint64_t v63 = 1431787901 * ((v59 - 152) ^ 0x46EFD8E62B90AAD7);
  int v64 = a2 + 273657476 - v63;
  *(_DWORD *)(v59 - 152) = v64;
  *(_DWORD *)(v59 - 116) = -1196567909 - v63 + a2;
  STACK[0x680] = (v57 - 1239791888) - v63;
  STACK[0x688] = v63 ^ 0x18CDA9CA;
  *(_DWORD *)(v59 - 120) = ((a2 + 273657476) ^ 0x5A) - v63;
  *(_DWORD *)(v59 - 128) = v64 - 2;
  *(_DWORD *)(v59 - 124) = v63 + 1;
  uint64_t v65 = (*(uint64_t (**)(uint64_t))(a1 + 8 * (a2 + 98859640)))(v59 - 152);
  return (*(uint64_t (**)(uint64_t))(a56 + 8 * *(int *)(v59 - 148)))(v65);
}

uint64_t sub_19E83C410()
{
  *int v2 = v0 - 64;
  return v1();
}

uint64_t sub_19E83C420()
{
  return (*(uint64_t (**)(uint64_t))(v3
                                            + 8
                                            * (((((v0 == v1) ^ v2 ^ 0x9F) & 1)
                                              * ((10 * (v2 ^ 0x37A)) ^ 0xA2)) ^ v2)))(4158837387);
}

void sub_19E83C470(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62)
{
  (*(void (**)(uint64_t, uint64_t))(a3 + 8 * (v62 - 98857403)))(a11, 2965982036);
  int v64 = (*(uint64_t (**)(void))(a62 + 8 * (v62 - 98857285)))();
  *uint64_t v63 = v64 - 59734013 - ((2 * v64) & 0xF8E11006);
  JUMPOUT(0x19E83C54CLL);
}

uint64_t sub_19E83C5C4(uint64_t a1, int a2, int a3)
{
  return (*(uint64_t (**)(void))(v3
                              + 8
                              * ((1161
                                * ((*(unsigned __int8 *)(v5 + 7) ^ (v4 + 52))
                                 + (((a3 - 4233975) & 0xB6DFBFF7 ^ a2) & (2 * *(unsigned __int8 *)(v5 + 7)))
                                 - 152 == v4)) ^ a3)))();
}

uint64_t sub_19E83C618()
{
  int v3 = (v1 - 675) | 0x400;
  BOOL v4 = v0 < v3 + 47 + 39 * (v3 ^ 0x4DFu) - 1849;
  return (*(uint64_t (**)(void))(v2 + 8 * (v4 | (4 * v4) | v3)))();
}

void sub_19E844B1C()
{
}

uint64_t sub_19E844B28@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(void))(v2 + 8 * ((((a1 - 474) ^ 0x5A5) * ((v3 + v1 - 2) < 0x7FFFFFFF)) ^ a1)))();
}

uint64_t sub_19E844B60@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  LODWORD(STACK[0x304]) = 0;
  int v28 = (_DWORD *)STACK[0x210];
  int v29 = LODWORD(STACK[0x304])++;
  *int v28 = v29 + 458213053;
  uint64_t v30 = (*(_DWORD *)STACK[0x218] + 1308709831);
  int v31 = (a1 + 1980725610) ^ a25;
  *(_DWORD *)(v27 - 144) = v31;
  *(_DWORD *)(v27 - 140) = 2092386721 - a25 + a1;
  *(_DWORD *)(v27 - 120) = (a1 + 1980725604) ^ a25;
  *(void *)(v26 + 1336) = a23;
  *(void *)(v26 + 1352) = v30 ^ a25;
  *(_DWORD *)(v27 - 152) = -(int)a25;
  *(_DWORD *)(v27 - 148) = v31 ^ 0x8E;
  uint64_t v32 = (*(uint64_t (**)(uint64_t))(v25 + 8 * (a1 + 1557)))(v27 - 152);
  return (*(uint64_t (**)(uint64_t))(v25 + 8 * *(int *)(v27 - 136)))(v32);
}

uint64_t sub_19E844B68(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8)
{
  return (*(uint64_t (**)(void))(v9
                              + 8 * (((*(_DWORD *)(v11 + v10 * (uint64_t)a3 + 36) + 849277941 < a8) * (v8 + 307)) ^ v8)))();
}

uint64_t sub_19E844BAC(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,char a33)
{
  *(void *)(&a33 + (a2 + v35 + v33 - 536 - 305)) = 0xC1C1C1C1C1C1C1C1;
  return (*(uint64_t (**)(void))(v36 + 8 * ((1172 * (((v34 + 1) & 0x1FFFFFFF8) == 8)) ^ v33)))();
}

uint64_t sub_19E844C00()
{
  return (*(uint64_t (**)(void))(v5
                              + 8
                              * ((159
                                * (((v0 - v4) ^ (v6 - 1))
                                 + (*(unsigned __int8 *)(v1 + v3 - 0x16A6F5B7FCBC8620) ^ 0xF5BFEFBB)
                                 + ((2 * *(unsigned __int8 *)(v1 + v3 - 0x16A6F5B7FCBC8620)) & 0x7777)
                                 + (*(unsigned __int8 *)(v2 + v3 - 0x16A6F5B7FCBC8620) ^ 0xC1006980)
                                 - (((*(unsigned __int8 *)(v2 + v3 - 0x16A6F5B7FCBC8620) ^ 0xC1) << (v0 - 54)) & 0x17C) == -1228908291)) ^ v0)))();
}

uint64_t sub_19E844CA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8 * (v12 + 1021)))(64, 0x1030040A43055ADLL);
  *uint64_t v11 = v14;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 8 * (((v14 == 0) * ((v12 - 425) ^ 0x46 ^ (v12 - 1901235555) & 0x71528BEA)) ^ v12)))(v14, v15, v16, v17, v18, v19, v20, v21, a9, a10, a11);
}

uint64_t sub_19E844D1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, unsigned int a13)
{
  a13 = (583844137 * ((-116941541 - (&a12 | 0xF9079D1B) + (&a12 | 0x6F862E4)) ^ 0x1626DF69)) ^ 0xD9A13099;
  uint64_t v14 = (*(uint64_t (**)(int *))(v13 + 18808))(&a12);
  return (*(uint64_t (**)(uint64_t))(v13 + 8 * ((313 * (a12 == 694817499)) ^ 0x256u)))(v14);
}

uint64_t sub_19E844DDC(uint64_t a1, int a2, int a3, int a4)
{
  BOOL v5 = (a2 ^ 0xFB1B6A5D) + 1230751729 + (a3 & 0xE3F7FFBE ^ 0x1C12B04) == 995608528;
  return (*(uint64_t (**)(void))(v4 + 8 * (a4 ^ (v5 | (2 * v5)))))();
}

uint64_t sub_19E844E58(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v7 = (v4 - 1);
  unint64_t v8 = (a3 ^ 0x7FFEF5562D4A24CCLL) + v7 + ((unint64_t)(v7 < v3) << 32) - 0x7FFEF5566444AE68;
  *(unsigned char *)(*(void *)(v6 - 120) + v8) ^= *((unsigned char *)*(&off_1EF0E5660 + (int)(a3 - 1537)) + (v8 & 0xF) - 4) ^ *((unsigned char *)*(&off_1EF0E5660 + (int)(a3 - 1494)) + (v8 & 0xF) + 2) ^ *((unsigned char *)*(&off_1EF0E5660 + (int)(a3 - 1512)) + (v8 & 0xF) + 4) ^ (119 * (((a3 ^ 0xCC) + v7 - 104) & 0xF)) ^ 0xC1;
  return (*(uint64_t (**)(void))(v5 + 8 * (int)((2 * (v7 == v3)) | (8 * (v7 == v3)) | a3)))();
}

void sub_19E844F1C(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 8) - 1980347521 * (((a1 | 0x124FB9D2) - (a1 & 0x124FB9D2)) ^ 0xABABF92F);
  uint64_t v2 = (char *)*(&off_1EF0E5660 + (v1 ^ 0xA2)) - 8;
  uint64_t v3 = *(void *)a1;
  (*(void (**)(char *, uint64_t (*)()))&v2[8 * (v1 ^ 0x812)])((char *)*(&off_1EF0E5660 + (v1 ^ 0x69)) - 4, sub_19E87FF5C);
  __asm { BRAA            X10, X17 }
}

uint64_t sub_19E84503C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, unsigned int a12)
{
  int v18 = *(_DWORD *)(a1 + 16) + v17 + *(_DWORD *)(v12 - 0x19C7A72C32A62CB3) - 760630880;
  unsigned int v19 = 1980347521 * ((&a9 & 0x9174A69 | ~(&a9 | 0x9174A69)) ^ 0x4F0CF56B);
  a11 = v12;
  a12 = v19 - 1620681834 + v18;
  a9 = (v13 + 1235) ^ v19;
  a10 = v19 ^ 0x75EAD9E4;
  uint64_t v20 = (*(uint64_t (**)(int *))(v16 + 8 * (v13 + 1539)))(&a9);
  return (*(uint64_t (**)(uint64_t))(v16 + 8 * (((*v15 != v14) * (v13 - 651)) ^ v13)))(v20);
}

uint64_t sub_19E845110(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,int a59)
{
  return (*(uint64_t (**)(void))(v59
                              + 8
                              * ((54 * (v61 < ((331 * (v60 ^ a59) - 942585495) & 0x382EB798u) - 1531262463)) ^ (v60 + 98857908))))();
}

void sub_19E84517C(_DWORD *a1@<X8>)
{
  unsigned int v4 = ((((*v10 ^ 0xC1) - (((v1 - 1687214553) & 0xFFFFFFF7 ^ 2) & (2 * (*v10 ^ 0xC1)))) << 24) - 117440512) ^ 0xF9000000;
  int v5 = ((((v10[1] ^ 0xC1) - ((2 * (v10[1] ^ 0xC1)) & 0x1AC)) << 16) + 768999424) ^ 0x2DD60000;
  unsigned int v6 = (v5 - ((2 * v5) & 0x13B60000) + 165382965) ^ 0x9DB8B35 | (v4 - ((2 * v4) & 0xE3FFFFFF) - 244107518) ^ 0xF1733702;
  int v7 = ((((v10[2] ^ 0xC1) - ((2 * (v10[2] ^ 0xC1)) & 0x7A)) << 8) + 613956864) ^ 0x24983D00;
  unsigned int v8 = (v6 - ((2 * v6) & 0xE270DE92) - 247959735) ^ 0xF1386F49 | (v7 - ((2 * v7) & 0x32B8AE00) + 1499223852) ^ 0x595C572C;
  unsigned int v9 = (v8 - ((2 * v8) & 0x86660412) + 1127416329) ^ 0x43330209 | ((v10[3] ^ 0xC1)
                                                                 - ((2 * (v10[3] ^ 0xC1)) & 0x1E0)
                                                                 - 1004130832) ^ 0xC4262DF0;
  *(_DWORD *)(*(void *)(v2 + 8) - 0x3BF054D022E331AELL) = v9 + v3 - ((2 * v9) & 0x52D425B6);
  *(_DWORD *)(v2 + 20) = *a1;
}

uint64_t sub_19E8452F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W8>)
{
  int v6 = a3 - 1530971441;
  if ((a3 - 1530971441) <= 0x40) {
    int v6 = 64;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5
                                                                       + 8
                                                                       * (((((v3 - 77) ^ ((1530971441 - a3 + v6) < 7)) & 1)
                                                                         * (v3 ^ 0x8AA)) ^ v3)))(a1, a2, 1986, v4);
}

uint64_t sub_19E845390@<X0>(int a1@<W0>, int a2@<W7>, uint64_t a3@<X8>)
{
  *(unsigned char *)(v3 + (a1 + v5)) = *(unsigned char *)(a3 + (a1 + v5));
  return (*(uint64_t (**)(void))(v6
                              + 8
                              * (int)((26 * (a1 - 1 != ((a2 + 27353321) & 0xFE5E9EFC ^ 0x15) + v4)) ^ (a2 + 27353321) & 0xFE5E9EFC)))();
}

void sub_19E8453E4()
{
}

uint64_t sub_19E8453EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,int a22)
{
  return (*(uint64_t (**)(void))(v23
                              + 8
                              * ((1538 * (a22 - *(_DWORD *)(a2 + 4) + ((v22 - 551) | 0x100) == -1264879192)) ^ v22)))();
}

void sub_19E84542C(uint64_t a1)
{
  __asm { BRAA            X8, X17 }
}

uint64_t sub_19E8454B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,_DWORD *a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  *a56 = a65 + 458213053;
  uint64_t v68 = (*v66 - 1094468661);
  unint64_t v69 = 1431787901
      * ((~((v67 - 152) | 0xEBCFD439FF8ACDCCLL) + ((v67 - 152) & 0xEBCFD439FF8ACDCCLL)) ^ 0x52DFF3202BE598E4);
  *(_DWORD *)(v67 - 116) = -1196567909 - v69 + v65 + 1650;
  *(_DWORD *)(v67 - 152) = v65 - 330810157 - v69;
  *(_DWORD *)(v67 - 128) = ((v65 - 330810157) ^ 0xB) - v69;
  *(_DWORD *)(v67 - 124) = v69 + 1;
  STACK[0x680] = v68 - v69;
  STACK[0x688] = v69 ^ 0x226E6022;
  *(_DWORD *)(v67 - 120) = ((v65 - 330810157) ^ 0x6D) - v69;
  uint64_t v70 = (*(uint64_t (**)(uint64_t))(a5 + 8 * (v65 + 98861290)))(v67 - 152);
  return (*(uint64_t (**)(uint64_t))(a62 + 8 * *(int *)(v67 - 148)))(v70);
}

uint64_t sub_19E8455C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6
                                                                       + 8
                                                                       * ((153
                                                                         * (v5 > 3 * (((v4 + 252) | 0xC8) ^ 0x344)
                                                                               - 1959)) ^ (v4 + 1848))))(a1, a2, a3, a4);
}

uint64_t sub_19E845638(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, void))(v6
                                                            + 8
                                                            * ((909
                                                              * ((v4 ^ 1)
                                                               + *(unsigned __int8 *)(v3 + v5 - 0x7B14B1C1FED2C7FELL)
                                                               + (*(unsigned __int8 *)(v2 + v5 - 0x7B14B1C1FED2C7FELL) ^ 0xEFFDFFEF)
                                                               + (((v4 - 153) ^ 0x55C) & (2
                                                                                        * *(unsigned __int8 *)(v2 + v5 - 0x7B14B1C1FED2C7FELL)))
                                                               - 2
                                                               * *(unsigned __int8 *)(v3 + v5 - 0x7B14B1C1FED2C7FELL) == -268565239)) ^ v4)))(0, a2, 0);
}

uint64_t sub_19E8457B8@<X0>(uint64_t a1@<X3>, unsigned int a2@<W4>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t))(v4
                                            + 8
                                            * (int)((151
                                                   * (a3 - a1 - (a2 ^ 0x2A5uLL) < (unint64_t)((a2 - 564656154) & 0x21A7F3FF)
                                                                                - 719)) ^ a2)))(v3);
}

uint64_t sub_19E845810(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  int v17 = v14 - 965;
  unint64_t v18 = ((unint64_t)&a14 ^ 0x46FF93F3CDFE3FDFLL)
      - 0x46FF93F3CDFE3FDFLL
      + ((2 * (void)&a14) & 0x8DFF27E79BFC7FB0);
  a14 = v15 - 1;
  char v19 = (v17 ^ 0x56 ^ ((v18 ^ 0xBA) + 12 - ((2 * (v18 ^ 0xBA)) & 0x78) - 80)) * (v18 + 17);
  *(unsigned char *)(a2 + a14) = (v19 - ((2 * v19) & 0xDA) - 19) ^ 0xED;
  return (*(uint64_t (**)(uint64_t))(v16 + 8 * ((2420 * (a14 == 0)) ^ v17)))(218);
}

uint64_t sub_19E8459E8@<X0>(int a1@<W8>)
{
  v7.i64[0] = 0x8282828282828282;
  v7.i64[1] = 0x8282828282828282;
  v8.i64[0] = 0xC1C1C1C1C1C1C1C1;
  v8.i64[1] = 0xC1C1C1C1C1C1C1C1;
  *(int8x16_t *)(v3 + v1 + ((a1 + 41) ^ (v2 + 1088))) = vaddq_s8(vsubq_s8(*v6, vandq_s8(vaddq_s8(*v6, *v6), v7)), v8);
  return (*(uint64_t (**)(int8x16_t *))(v5 + 8 * ((961 * (((v4 + 1) & 0x1FFFFFFF0) == 16)) ^ a1)))(v6 + 1);
}

void sub_19E845A5C()
{
}

uint64_t sub_19E845AD4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(v3 + 8 * ((1753 * (a2 + 1 == v4 + 24)) ^ v2)))();
}

uint64_t sub_19E845C18@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(void))(v2 + 8 * ((15 * (a1 + v1 - ((2 * a1) & 0x52D425B6) + 1065 == v1 + 1065)) ^ 0x426u)))();
}

uint64_t sub_19E845C74()
{
  return (*(uint64_t (**)(void))(v2 + 8 * ((888 * (v3 + v1 + 69 < (v0 - 1096))) ^ v0)))();
}

void sub_19E845CA4()
{
}

uint64_t sub_19E845CAC()
{
  return (*(uint64_t (**)(void))(v1
                              + 8
                              * (((((((v0 - 1016) ^ 0x517) - 1454) & *(_DWORD *)(v2 - 0x19C7A72C32A62CAFLL)) == 0)
                                * ((v0 - 311317945) & 0x128E55FB ^ 0x4BE)) ^ (v0 - 1016))))();
}

uint64_t sub_19E845D0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  return (*(uint64_t (**)(void))(v24 + 8 * ((90 * ((unint64_t)(a21 + v21 - v23) > 0xF)) ^ v22)))();
}

uint64_t sub_19E845D48()
{
  return (*(uint64_t (**)(void))(v0
                              + 8
                              * ((11
                                * (((2 * (v3 - 263820150) * (v1 - 263820150)) & 0x5A51BD6C)
                                 - 757653174
                                 + ((281 * (v2 ^ 0x516) - 1389831598) ^ ((v3 - 263820150) * (v1 - 263820150))) >= 0)) ^ v2)))();
}

uint64_t sub_19E845DB8()
{
  *(void *)(v7 - 144) = v3;
  *(void *)(v7 - 136) = v4;
  *(_DWORD *)(v7 - 112) = v6
                        + 402930427 * ((381444628 - ((v7 - 144) | 0x16BC6214) + ((v7 - 144) | 0xE9439DEB)) ^ 0xF3FA6156)
                        + 1012;
  *(void *)(v7 - 128) = v3;
  *(void *)(v7 - 120) = v5;
  (*(void (**)(uint64_t))(v0 + 8 * (v6 ^ 0x84E)))(v7 - 144);
  int v8 = 961177747 * ((v7 + 1871601295 - 2 * ((v7 - 144) & 0x6F8E5F1F)) ^ 0x48DCAE03);
  *(_DWORD *)(v7 - 128) = v8 + v6 + 617;
  *(void *)(v7 - 136) = v1;
  *(_DWORD *)(v7 - 140) = v8 + v2 - 181036342;
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(v0 + 8 * (v6 ^ 0x852)))(v7 - 144);
  return (*(uint64_t (**)(uint64_t))(v0
                                            + 8
                                            * (((*(_DWORD *)(v7 - 144) == -1914018290)
                                              * ((v6 - 29049257) & 0x1BB47CE ^ 0x768)) ^ v6)))(v9);
}

void sub_19E854980()
{
  STACK[0x4C0] = *(void *)(v0 + 8 * (int)(STACK[0x458] - 512));
  JUMPOUT(0x19E74F440);
}

uint64_t sub_19E8549A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,int a38,int a39)
{
  return (*(uint64_t (**)(void))(v40
                              + 8
                              * (((((-352952705
                                   - ((2 * (a7 - 2072727175)) & 0xD5ECBCF8)
                                   + (((v39 ^ 0x44F) - 176) & (a7 - 2072727175))) ^ 0xEAF65E7F) == a39)
                                * (((v39 - 1247) | 0xA8) + 328)) ^ v39)))();
}

uint64_t sub_19E854A10(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = (unint64_t)&v7[qword_1E945E360 ^ qword_1E945E7C0];
  qword_1E945E7C0 = 1616673103 * v2 - 0xC7490BBD9F1B221;
  qword_1E945E360 = 1616673103 * (v2 ^ 0xA7F80EC97C429E71);
  int v3 = *(_DWORD *)(a2 + 4);
  unsigned __int8 v4 = 79 * ((qword_1E945E360 + 79 * v2 - 33) ^ 0x71);
  uint64_t v5 = (char *)*(&off_1EF0E5660 + (v4 ^ byte_19EC7A500[byte_19EC72CD0[v4] ^ 0x94]) + 6)
     - 8;
  if (v3 == 2072727181) {
    __asm { BRAA            X1, X17 }
  }
  if (v3 == 2072727188) {
    __asm { BRAA            X3, X17 }
  }
  return 4294925278;
}

uint64_t sub_19E854DAC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, unsigned int a9@<W8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54)
{
  int v58 = v54 + 1;
  *(unsigned char *)(a2 + (v58 + v56)) = *(unsigned char *)(a54 + a7 + v55)
                                             - ((2 * *(unsigned char *)(a54 + a7 + v55)) & 0x83)
                                             - 63;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v57 + 8 * ((230 * ((v56 + v58 + 1) < 0x40)) ^ a9)))(a1, a2, a3, a4, a5, a6, a7, a8, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46);
}

void sub_19E854DB4()
{
}

uint64_t sub_19E854DC8@<X0>(int a1@<W6>, int a2@<W8>)
{
  int v6 = *(_DWORD *)(v3 + a2 * (uint64_t)v5 + 36);
  BOOL v8 = v6 + 1423128978 > 845862215 || v6 + 1423128978 < SLODWORD(STACK[0x240]);
  int v9 = !v8;
  if (v6 == a1) {
    int v9 = 1;
  }
  return (*(uint64_t (**)(void))(v4 + 8 * (int)((v9 * ((5 * ((v2 + 196070835) & 0xF4502FF7 ^ 0x5A0)) ^ 0x1B2)) ^ v2)))();
}

uint64_t sub_19E854E44(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29,int a30)
{
  return (*(uint64_t (**)(void))(v31 + 8
                                    * (((v30 - 1136919405 + (a24 | 0x1070D950u) >= v30 + a1) * (a30 - 1292)) ^ a30)))();
}

uint64_t sub_19E854EAC(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8)
{
  unsigned int v11 = a5 - 32;
  uint64_t v12 = v9 + v11;
  uint64_t v13 = v8 + v11;
  int8x16_t v14 = veorq_s8(*(int8x16_t *)(v12 - 31), a1);
  *(int8x16_t *)(v13 - 15) = veorq_s8(*(int8x16_t *)(v12 - 15), a1);
  *(int8x16_t *)(v13 - 31) = v14;
  return (*(uint64_t (**)(void))(v10 + 8 * (((a6 == 32) * a8) ^ a7)))();
}

void sub_19E854EB8()
{
}

void sub_19E855A84(uint64_t a1, int a2, int a3, uint64_t a4, int a5)
{
  int v7 = ((v6 + 11 * (a3 ^ 0x42F) - 77) ^ a2) + a5;
  LODWORD(STACK[0x3B8]) = v7 + v6 - (v5 & (2 * v7));
  JUMPOUT(0x19E855ACCLL);
}

uint64_t sub_19E855B5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void, void))(v7 + 8
                                                                          * ((((2 * v6) ^ 0x4F) * (v5 == a5)) ^ v6)))(a1, a2, v6 ^ 0x6F9u, (2 * v6) ^ 0x4DAu);
}

uint64_t sub_19E855B94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)(*(void *)(a7 + 96) + 1544) = *(void *)(a2 + 8);
  *(_DWORD *)(*(void *)(a7 + 96) + 1536) = *(_DWORD *)(a2 + 4);
  return v7 ^ 0x296A12DBu;
}

uint64_t sub_19E855BF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,int a22)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 8 * ((v23 - 53) ^ (41 * ((~((a22 | 0x1FFFFFFE) + 807768490) & 0x20040020) == 0)))))(a1, 41, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
}

uint64_t sub_19E855C40()
{
  uint64_t v6 = ((v4 - 1916) ^ 0x8BDA01E5091C5902) + v0;
  int v7 = *(unsigned __int8 *)(*(void *)(v1 + 8) + v6);
  uint64_t v8 = v0 + 1;
  BOOL v10 = (v7 ^ 0x76BFF79E)
      + (*(unsigned __int8 *)(v5 + v6) ^ 0x8221B214)
      + ((2 * v7) & 0x13C)
      - ((2 * *(unsigned __int8 *)(v5 + v6)) & 0x1D6) != -119428686
     || v8 == v2 + 16;
  return (*(uint64_t (**)(void))(v3 + 8 * ((4037 * v10) ^ v4)))();
}

uint64_t sub_19E855CE8()
{
  *(_DWORD *)(v5 - 128) = (v0 + 111) ^ (1575213817 * ((v5 - 128) ^ 0x8D65B0CC));
  *(void *)(v5 - 120) = v2;
  *(void *)(v5 - 112) = v3;
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(v1 + 8 * (v0 + 551)))(v5 - 128);
  return (*(uint64_t (**)(uint64_t))(v1 + 8 * ((((2 * v0) ^ 0xE38) * (v4 == 245820154)) ^ v0)))(v6);
}

uint64_t sub_19E855D6C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v6 = v4 - 1;
  int v7 = ((((v2 + a1) ^ 0xBA) + v1 - ((((v2 + a1) ^ 0xBA) << (((v3 - 56) | 0x94u) + 107)) & 0x6CB933E)) ^ v1)
     * (a1 + v2 + 17);
  *((unsigned char *)&STACK[0x360] + v6) = (v7 - ((2 * v7) & 0x52) - 87) ^ 0xA9;
  return (*(uint64_t (**)(void))(v5 + 8 * ((109 * (v6 == 0)) ^ v3)))();
}

uint64_t sub_19E855DF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8
                                                              + 8
                                                              * (((*(_DWORD *)(a7 + 72) == ((13 * (v7 ^ 0x2FF)
                                                                                           + 1866643731) & 0x90BD46BF ^ 0x7B8B4E1C))
                                                                * ((13 * (v7 ^ 0x2FF)) ^ 0x864)) ^ (13 * (v7 ^ 0x2FF)))))(a1, a2, 798101064);
}

uint64_t sub_19E855E80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _DWORD **a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, unsigned int a19, _DWORD *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,unsigned int a27,uint64_t a28,uint64_t a29,uint64_t a30,_DWORD *a31)
{
  uint64_t v34 = ((v32 + 559) | 0x310) ^ (v31 - 1205) ^ *a31;
  uint64_t v35 = (((*a20 - 1849482976) * v34) ^ 0x7CFE9DDE)
      - 76291041
      + ((((*a20 - 1849482976) * v34) << (((v32 + 47) ^ 0x99) + 37)) & 0xF9FD3BBC)
      + 3717;
  uint64_t v37 = v34 ^ 0x7F6FF635EFDCDD74;
  uint64_t v38 = (2 * v34) & 0x1DFB9BAE8;
  unint64_t v39 = (v35 | ((unint64_t)(v35 < 0x78729082) << 32)) - 2020774018;
  uint64_t v36 = (**a14 ^ v31 ^ 0x5DDCF7B9FB23F9B3) - 0x5DDCF7B9FB23F9B3 + ((2 * (**a14 ^ v31)) & 0x1F647F366);
  unint64_t v40 = v37
      + v38
      + ((v39 * v36) ^ 0xFB8FF3BF63EFEF3ALL)
      + ((2 * v39 * v36) & 0xF71FE77EC7DFDE74)
      + 0x1EE74FDDFCB76BFELL;
  BOOL v41 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, unint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _DWORD **, uint64_t, uint64_t, uint64_t))(v33 + 8 * (v32 ^ (2015 * (a27 > a19))));
  return v41(a1, a2, a3, a4, (v32 + 559) ^ 0xC99u, v40, v41, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
}

void sub_19E855E8C()
{
}

uint64_t sub_19E855F04@<X0>(unint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, unsigned int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, uint64_t a13, uint64_t a14, int a15, int a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  unint64_t v26 = ((a1 >> 31) & 0x17FFEEFA6 ^ 0x7078E506)
      + ((((v22 + 512041416) & 0xE17ADD7E) + 0x7EFF5A4F87C388E2) ^ HIDWORD(a1))
      + ((((v22 + 512041416) ^ 0x1E85245Bu) + 0x776EB3FDFB6FB34BLL) ^ ((unint64_t)(v25 - 0x7F1A9DD95DF05D10) >> 32))
      + (((unint64_t)(v25 - 0x7F1A9DD95DF05D10) >> 31) & 0x1F6DF6BFELL)
      + (*(_DWORD *)(a22 + a8) ^ v23 ^ 0x77BEDDFB38FFF7CFLL)
      + ((2 * (*(_DWORD *)(a22 + a8) ^ v23)) & 0x71FFEF9E);
  *(_DWORD *)(a22 + 4 * a9) = v26 - ((2 * v26 + 388084926) & 0x16836D5A) + 382898444;
  *(_DWORD *)(a22 + a8) = (((v26 - 0x6E2CEC48F46F25A1) >> 32)
                         - (((v26 - 0x6E2CEC48F46F25A1) >> 31) & 0x7CD51CE6)
                         + 1047170675) ^ 0x352B38DE;
  BOOL v27 = a16 + 1241486343 < a12;
  if (a7 > 0x1D096FEC != a16 + 1241486343 < -487157741) {
    BOOL v27 = a7 > 0x1D096FEC;
  }
  return (*(uint64_t (**)(void))(v24 + 8 * (v22 ^ (107 * !v27))))();
}

uint64_t sub_19E8560D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,int a56,int a57)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v57 + 8 * ((11 * ((((v59 - 75) | 0x29) ^ (v58 + 103)) + a57 < 0xFFFFFFFB)) ^ (v59 + 1896))))(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48);
}

_DWORD *sub_19E856130(_DWORD *result)
{
  *unint64_t result = -1914018290;
  return result;
}

void sub_19E856250()
{
}

void sub_19E856258()
{
  *(_DWORD *)(v3 - 0x7CF6A079DDC72530) = (((v1 + v2) * (v0 - 486464888)) ^ 0x9FBBB77E)
                                         + 1878907896
                                         + ((2 * (v1 + v2) * (v0 - 486464888)) & 0x3F776EFC);
}

uint64_t sub_19E8562E8()
{
  return (*(uint64_t (**)(void))(v2 + 8 * ((77 * (v0 < v1 - 2112027104)) ^ (v1 - 214))))();
}

uint64_t sub_19E85631C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t (*a20)(void))
{
  *v20 -= 64;
  return a20();
}

uint64_t sub_19E856334(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  *(_DWORD *)(v15 - 128) = v14
                         + 1305237457 * ((((2 * (v15 - 128)) | 0x4A33B69A) - (v15 - 128) + 1525032115) ^ 0x1CA07D83)
                         - 11;
  *(void *)(v15 - 120) = &STACK[0x7CF6A079DDC72564];
  *(void *)(v15 - 112) = a12;
  (*(void (**)(uint64_t))(v12 + 8 * (v14 ^ 0xC11)))(v15 - 128);
  *(void *)(v15 - 120) = a12;
  *(void *)(v15 - 112) = v13;
  *(_DWORD *)(v15 - 124) = v14 + 291962093 * ((v15 - 128) ^ 0x11F20D4A) - 311;
  uint64_t v16 = (*(uint64_t (**)(uint64_t))(v12 + 8 * (v14 ^ 0xDC8)))(v15 - 128);
  return (*(uint64_t (**)(uint64_t))(v12
                                            + 8
                                            * (((((v14 - 46) ^ (*(_DWORD *)(v15 - 128) > 0x3BBF8101u)) & 1)
                                              * (v14 - 1162)) ^ v14)))(v16);
}

void sub_19E856438(uint64_t a1)
{
  __asm { BRAA            X14, X17 }
}

uint64_t sub_19E856568@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * ((432
                                * (((((v1 + 508765) | 0x12701560) - 309845878) & a1) == (((v1 - 1532) | 0x18) ^ 0xDDLL))) ^ v1)))();
}

void sub_19E8565C0(int a1@<W8>)
{
  int v7 = ((2 * ((v6 - 144) & 0x7B3BB368) - (v6 - 144) - 2067510125) ^ 0x24308CFF) * v4;
  *(void *)(v6 - 136) = v3;
  *(_DWORD *)(v6 - 124) = (a1 + 697) ^ v7;
  *(void *)(v6 - 120) = v5;
  *(_DWORD *)(v6 - 144) = (((a1 + 437) ^ 0x554B3AFD) + v1) ^ v7;
  (*(void (**)(uint64_t))(v2 + 8 * (a1 + 1657)))(v6 - 144);
  JUMPOUT(0x19E75772CLL);
}

uint64_t sub_19E85663C()
{
  return (*(uint64_t (**)(void))(v3
                              + 8
                              * ((875
                                * (v2 + v1 + (v0 ^ 0x95Eu) + 1078200956 - 1452 < (((v0 ^ 0x95E) + 1121464884) & 0xBD27CEF5 ^ 0x2A9))) ^ v0 ^ 0x95E)))();
}

void sub_19E8566A8()
{
  int v5 = 402930427 * ((((v4 - 128) | 0x5310DCF3) - ((v4 - 128) & 0x5310DCF3)) ^ 0x49A9204E);
  *(_DWORD *)(v4 - 128) = (v3 + 944) ^ v5;
  *(_DWORD *)(v4 - 112) = v0 - v5 + ((v3 + 100862825) & 0xF9FCF7FF ^ 0x2C34E3E4);
  *(void *)(v4 - 120) = v2;
  (*(void (**)(uint64_t))(v1 + 8 * (v3 ^ 0x8C3)))(v4 - 128);
  JUMPOUT(0x19E85673CLL);
}

uint64_t sub_19E8567E0()
{
  return ((uint64_t (*)(void))STACK[0x220])();
}

uint64_t sub_19E8567EC(uint64_t a1, int a2)
{
  return (*(uint64_t (**)(void))(v4 + 8 * (a2 ^ ((v2 - v3 != -1179398562) | (2 * (v2 - v3 != -1179398562))))))();
}

uint64_t sub_19E856868(uint64_t a1, uint64_t a2, int a3, int a4)
{
  return (*(uint64_t (**)(void))(v4
                              + 8
                              * ((1788
                                * ((*(unsigned __int8 *)(v7 + 3) ^ (v5 + 52))
                                 + ((*(unsigned __int8 *)(v7 + 3) << (v6 + ((a3 + 126) | 0x83) + 79)) & a4)
                                 - 189 == v5)) ^ a3)))();
}

uint64_t sub_19E8568C8()
{
  return (*(uint64_t (**)(void))(v1 + 8 * ((v2 == ((((v0 - 1457328603) & 0x56DD17FA) - 1352) ^ 0x75EADB74)) ^ v0)))();
}

uint64_t sub_19E856908(int a1, unsigned int a2, int a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  int v47 = a5 + 1;
  uint64_t v48 = 4 * (a5 + 1 + v31);
  uint64_t v49 = (a7 & (v38 >> 31) ^ 0x40304738)
      + (HIDWORD(v38) ^ 0x5DBD6AFBDBC6CC23)
      + (*(_DWORD *)(a31 + v48) ^ v33 ^ (unint64_t)(v34 + v41))
      + (v43 & (2 * (*(_DWORD *)(a31 + v48) ^ v33)));
  int v50 = ((*(_DWORD *)(*v36 + v48) ^ v33 ^ 0x73F7F6BF) + ((2 * (*(_DWORD *)(*v36 + v48) ^ v33)) & a1) - 1945630399) * a3;
  int v51 = v49 - ((2 * v49 + 1286031750) & 0x8B5E2EA6) + v45;
  LODWORD(v49) = (((unint64_t)(a8 - 0x1AACB198D33FA096) >> 31) & 0xEED27DDA)
               + (v42 ^ ((unint64_t)(a8 - 0x1AACB198D33FA096) >> 32))
               + (v50 ^ v40)
               + (v44 & (2 * v50))
               + (v51 ^ 0x326D7CAE)
               + (v39 & (2 * v51) ^ 0x8B0406A2);
  *(_DWORD *)(a31 + 4 * (a5 + v31)) = v49 - ((v46 + 2 * v49) & 0x16836D5A) + v32;
  BOOL v52 = a2 > 0x19FB11D8;
  BOOL v53 = a5 + 874925025 < v35;
  if (v52 == v47 + 874925024 < -435884505) {
    BOOL v52 = v53;
  }
  return (*(uint64_t (**)(void))(a4 + 8 * ((105 * !v52) ^ v37)))();
}

uint64_t sub_19E856AD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  unint64_t v64 = (0xD44763956443654DLL
       - (a4 & 0x307A215DE467C17BLL ^ 0x20700001E4224101 | 0xD44763956443654DLL)
       + (a4 & 0x307A215DE467C17BLL ^ 0x20700001E4224101 | 0x2BB89C6A9BBC9AB2)) ^ 0x2BBCF9699F3DDC83;
  unint64_t v65 = (((((v61 - 251) ^ 0xF81C8820898354DLL) & a4 ^ 0x10214887809BB113) - 1) | a4 & 0xC004122013000A04) ^ 0xDEA5C8A5991BB596 | ((a4 & 0x40000000000) + 0x5D790FE047ABC84CLL + ((2 * (a4 & 0x40000000000)) ^ 0xBFFFFFFEFFFFFFFFLL)) ^ 0x1F3406A22D0333ABLL ^ (((2 * v64) | 0x42698DED450FBD6) - v64 - 0x2134C6F6A287DEBLL);
  uint64_t v66 = v65 - ((2 * v65) & 0x3AA61F8C8B7C4552) - 0x62ACF039BA41DD57;
  unint64_t v67 = (((2 * (v66 & 0xE5CDA753CC2D6DF2 ^ 0xC501A651C8252D30)) & 0x800A44251008D380)
       - (v66 & 0xE5CDA753CC2D6DF2 ^ 0xC501A651C8252D30)
       - 0x48077A9E8856E9CDLL) ^ 0xBB5824615EA30327;
  uint64_t v68 = v63 ^ a1;
  uint64_t v69 = v63 ^ a1 ^ 0x3295453B921EBE5ALL;
  uint64_t v70 = v69 & 0x3F1BBC47FE450785 ^ 0x2692BC022CC45181;
  unint64_t v71 = (2 * v69) & 0x7E37780B7C0A0F0ALL ^ 0xB2DA877B26775CFCLL;
  unint64_t v72 = ((0x507C17578F00D6B0 - (v67 | 0x507C17578F00D6B0) + (v67 | 0xAF83E8A870FF294FLL)) ^ 0x27E3E8BB0F929F5DLL)
      - 3664676374u;
  uint64_t v73 = ((2 * v66) ^ 0x3AA61F8C8B7C4552) - ((2 * ((2 * v66) ^ 0x8B7C4552)) & 0x894E607C) + 0x244A7303FLL;
  unint64_t v74 = ((2 * v73) & 0x220B01048 ^ 0x48)
      + (v73 & 0x190580824 ^ 0x727EB5737EFDEED9)
      + (v72 ^ 0x67DF3DF87BF6E17FLL)
      + ((2 * v72) & 0xCFBE7BF0F7EDC2FELL);
  unint64_t v75 = (v74 - ((2 * v74 + 0x4B4419280A165F08) & 0xACDFFFC893C04BB6) + 0x7C120C784EEB555FLL) ^ ((v66 & 0x1A3258AC33D2920DLL ^ 0x220008C20D21205)
                                                                                                  - ((2 * (v66 & 0x1A3258AC33D2920DLL ^ 0x220008C20D21205)) & 0x3000B05065050412)
                                                                                                  - 0x4333A08501741865) & 0xFA37FFFFFFDFBFFFLL;
  unint64_t v76 = a1 ^ 0xEBF0577A5F9B5EBFLL;
  *((void *)&v77 + 1) = v75 ^ 0x16963B904CLL;
  *(void *)&long long v77 = v75 ^ 0xF459A00000000000;
  unint64_t v78 = ((a1 ^ 0xEBF0577A5F9B5EBFLL) & (a2 ^ 0x870784A8969A676BLL))
      - ((2 * ((a1 ^ 0xEBF0577A5F9B5EBFLL) & (a2 ^ 0x870784A8969A676BLL))) & 0x180CD3F675814244);
  uint64_t v79 = (v77 >> 44) - ((2 * (v77 >> 44)) & 0xDFC68A7D6F80EA26) - 0x101CBAC1483F8AEDLL;
  unint64_t v80 = ((((v69 & 0xC0E443B801BAF87ALL ^ 0xC000054702FF135DLL) - 1) ^ 0xCA00445F3A17E315)
       - ((2 * (((v69 & 0xC0E443B801BAF87ALL ^ 0xC000054702FF135DLL) - 1) ^ 0xCA00445F3A17E315)) & 0x800086600200C064)
       - 0xEED148CBAFF9F4ELL) & 0xC0E443B821BAF87ALL ^ 0xBF9FFCE7FEC54FDDLL;
  unint64_t v81 = v80 - 0x6F1023E09425BCFCLL + ((2 * v80) & 0x1C8803043348004 ^ 0xDFE8C7F16B7FF9FDLL);
  unint64_t v82 = v75 ^ v62;
  *((void *)&v77 + 1) = v79 ^ 0x8E744;
  *(void *)&long long v77 = v79 ^ 0xE5039551A2400000;
  uint64_t v83 = (v77 >> 20) - ((2 * (v77 >> 20)) & 0x8B057940B155C174) + 0x4582BCA058AAE0BALL;
  unint64_t v84 = ((v76 + (a2 ^ 0x870784A8969A676BLL)) ^ 0x7ECEEB1FE6FFFD7CLL)
      + ((2 * (v76 + (a2 ^ 0x870784A8969A676BLL))) & 0xFD9DD63FCDFFFAF8)
      + ((2 * v78 + 0x180CD3F675814244) ^ 0xB82DE3E625817255)
      + ((2 * (2 * v78 + 0x180CD3F675814244)) & 0xBFBD9FDF5FFF9FDCLL ^ 0xCFE67833B4FD7B77)
      + 1;
  unint64_t v85 = v84 - ((2 * v84 - 0x3DE036606E005B1ALL) & 0xC1C76AD7C9284FD0) + 0x41F39A3BAD93FA5BLL;
  if ((v68 & 0x20000000) != 0) {
    uint64_t v86 = -536870912;
  }
  else {
    uint64_t v86 = 0x20000000;
  }
  uint64_t v87 = v71
      + v86
      + v70
      + 0x80004240C05001
      - 2 * ((v71 + v86 + v70 + 0x80004240C05001) & 0x2F5E2B9D978FDB5 ^ (v70 + 0x80004240C05001) & 1)
      - 0x7D0A1D462687024CLL;
  unint64_t v88 = ((v85 ^ 0x60E3B56BE49427E8) & (a2 ^ 0x78F87B5769659894))
      - ((2 * ((v85 ^ 0x60E3B56BE49427E8) & (a2 ^ 0x78F87B5769659894))) & 0xFEDE492E8F39E5E0)
      + 0x7F6F2497479CF2F0;
  uint64_t v89 = ((v83 ^ 0x335833F1AA53EE1DLL) & (v82 ^ 0xE4C4D9EEA423C3FLL))
      - ((2 * ((v83 ^ 0x335833F1AA53EE1DLL) & (v82 ^ 0xE4C4D9EEA423C3FLL))) & 0x24D6868C650AB50ALL)
      + 0x126B434632855A85;
  unint64_t v90 = v82 ^ v88;
  LOBYTE(v88) = (((2 * (v88 & 0x2D ^ 5)) | 0x98) - (v88 & 0x2D ^ 5) + 52) ^ 0x7F;
  char v91 = (v88 | 0x43) - (v88 | 0xBC) - 68;
  unint64_t v92 = ((v82 ^ 0xF1B3B26115BDC3C0) & (a2 ^ 0x870784A8969A676BLL))
      - ((2 * ((v82 ^ 0xF1B3B26115BDC3C0) & (a2 ^ 0x870784A8969A676BLL))) & 0xD88CC30CC8A9D030)
      - 0x13B99E799BAB17E8;
  unint64_t v93 = ((v68 ^ 0xB7FBBD9B7850745FLL) & (v85 ^ 0x9F1C4A941B6BD817))
      - ((2 * ((v68 ^ 0xB7FBBD9B7850745FLL) & (v85 ^ 0x9F1C4A941B6BD817))) & 0x345DE909C1EAA6B6)
      - 0x65D10B7B1F0AACA5;
  unint64_t v94 = ((v75 ^ 0xF459A016963B904CLL) & (v87 ^ 0xCEF98489CB85AA94 ^ v81))
      - ((2 * ((v75 ^ 0xF459A016963B904CLL) & (v87 ^ 0xCEF98489CB85AA94 ^ v81))) & 0xEFF1688571E70130)
      + 0x77F8B442B8F38098;
  unint64_t v95 = v68 ^ 0x8F5E63B0DDE37D9FLL ^ v89;
  *((void *)&v96 + 1) = a2 ^ 0x4A8969A676BLL;
  *(void *)&long long v96 = a2 ^ 0x8707800000000000;
  unint64_t v97 = ((((v90 ^ 0x71236909ADDECECFLL) >> (v91 ^ 0xD5u))
        - 0xE23AA63D5D4AB4
        - ((2 * ((v90 ^ 0x71236909ADDECECFLL) >> (v91 ^ 0xD5u))) & 0xFE3B8AB385456A98)) ^ 0xFF1DC559C2A2B54CLL) >> (v91 ^ 0xF8u);
  unint64_t v98 = (v97 + 0xE257ABA325397F3 - ((2 * v97) & 0x1C4AF57464A72FE6)) ^ 0xE257ABA325397F3 | (((v90 << 19) ^ 0x484D6EF676780000)
                                                                                                - 0x4EFDC321719475F8
                                                                                                - ((2
                                                                                                  * ((v90 << 19) ^ 0x484D6EF676780000)) & 0x620479BD1CD00000)) ^ 0xB1023CDE8E6B8A08;
  uint64_t v99 = (v98 - ((2 * v98) & 0x1C649B581051770CLL) + 0xE324DAC0828BB86) ^ ((v96 >> 45)
                                                                          - ((2 * (v96 >> 45)) & 0x994543D0DBAA2D2CLL)
                                                                          + 0x4CA2A1E86DD51696);
  unint64_t v100 = (((2 * ((v94 ^ v85) & 0xFF0303B7912D0C0CLL ^ 0x3401030010040000)) & 0x5004026200121818)
        - ((v94 ^ v85) & 0xFF0303B7912D0C0CLL ^ 0x3401030010040000)
        + 0x57B5E68E932430D1) & 0xFF1F3FFF93FFFC7CLL ^ 0x741724AF93053450 | (0x8713016B8342E18DLL
                                                                               - ((v94 ^ v85) & 0xFCFC486ED2F3F3 ^ 0x4808486C90E0F0 | 0x8713016B8342E18DLL)
                                                                               + ((v94 ^ v85) & 0xFCFC486ED2F3F3 ^ 0x4808486C90E0F0 | 0x78ECFE947CBD1E72)) ^ 0x78BCF6D45C6F5DF2;
  unint64_t v101 = v100 - ((2 * v100) & 0x97F38FC81AFC55C6) - 0x3406381BF281D51DLL;
  unint64_t v102 = v92 ^ v66;
  unint64_t v103 = v102 ^ v95;
  *((void *)&v96 + 1) = v99 ^ 0x5A102;
  *(void *)&long long v96 = v99 ^ 0xFF8F7D81D7500000;
  LODWORD(v102) = (((v102 ^ ~v95) >> 61) ^ 0x3FFE1DE7) + 2 * ((v102 ^ ~v95) >> 61);
  unint64_t v104 = ((v96 >> 19) - ((2 * (v96 >> 19)) & 0x3B417D3EEBE4086ELL) - 0x625F41608A0DFBC9) ^ v93;
  uint64_t v105 = v102 - ((2 * v102 + 304) & 0x166) - 1519523509;
  unint64_t v106 = v103 ^ (v103 >> 39) ^ 0x1B6B993B26A31D9FLL ^ (((8 * v103) ^ 0xDC84688A43540270)
                                                     - ((2 * ((8 * v103) ^ 0xDC84688A43540270)) & 0x7457CEC40D65E920)
                                                     + 0x3A2BE76206B2F493);
  int v107 = v105 ^ *(unsigned __int8 *)(a61 + (v105 ^ 0xE56C063DLL));
  unint64_t v108 = ((v106 & 0x8AAABC2EF6159FE6 ^ 0x80A8B02C12048B06)
        - ((2 * (v106 & 0x8AAABC2EF6159FE6 ^ 0x80A8B02C12048B06)) & 0x1155504560021B40)
        + 0x18ABE8B3B9214DB9) ^ 0x164BC17FDE2CDD07;
  DWORD1(v96) = v107;
  LODWORD(v96) = (v107 ^ 0x34) << 24;
  int v109 = ((unint64_t)v96 >> 26) - ((2 * ((unint64_t)v96 >> 26)) & 0x66) + 51;
  *((void *)&v96 + 1) = (v100 - ((2 * v100) & 0x1AFC55C6) + 226372323) ^ 0xFFFFFFC1;
  *(void *)&long long v96 = v101 ^ 0x66D9EAF8F8406680;
  uint64_t v110 = ((2 * (v106 & 0x755543D109EA6019 ^ 0x7100029008C04001)) | 0xEC008D9A3A4F6EALL)
       - (v106 & 0x755543D109EA6019 ^ 0x7100029008C04001)
       + 0x789FFB932E2D848BLL;
  char v111 = (v109 ^ 0x33) - ((2 * (v109 ^ 0x33)) & 0x9E) - 49;
  __int16 v112 = (v111 & 0xE6 ^ 0x82) + (v111 & 0xA6 ^ 0xB12D) - ((v111 & 0xE6 ^ 0x82) & 0xFFBF);
  unint64_t v113 = (((2 * v108) | 0xC37499C8FE51B87CLL) - v108 - 0x61BA4CE47F28DC3ELL) ^ 0x83E82022D0FF4F68 ^ ((v112 & 0x2FA ^ 0xE68A410CBAC80041) + (v112 & 0x1D04 ^ 0x10042200129105) - 2) | ((v110 & 0x565F65D4F0BB7397 ^ 0x5047208010291083) + (v110 ^ 0x87B8D57CE5D26F7CLL) - ((v110 ^ 0x87B8D57CE5D26F7CLL) & 0x565F65D4F0BB7397)) ^ 0x77D7F514C5F3678ELL ^ v111 & 0x19;
  return sub_19E858058(v101 ^ (v101 >> 41) ^ (((v101 << 23) ^ 0x7C7C203360800000)- ((2 * ((v101 << 23) ^ 0x7C7C203360800000)) & 0x7BA1C1FE29000000)- 0x422F1F00EB77B683) ^ ((v96 >> 7)- ((2 * (v96 >> 7)) & 0xBFDE46AFB7024C8ELL)+ 0x5FEF2357DB812647) ^ 0xBF596023BD1A9894, v104 ^ (v104 >> 10) ^ (v104 >> 17) ^ (((v104 << 54) ^ 0x4800000000000000)- ((2 * ((v104 << 54) ^ 0x4800000000000000)) & 0x5700000000000000)+ 0x2BAA87B926D53823) ^ (((v104 << 47) ^ 0x3490000000000000)- ((2 * ((v104 << 47) ^ 0x3490000000000000)) & 0x2315000000000000)- 0x6E753CEEE5D4EB86) ^ 0x723892F7FE546D5, 501, (((v103 << 25) ^ 0x2290D5009C000000)- ((2 * ((v103 << 25) ^ 0x2290D5009C000000)) & 0x6F4F56EE48000000)+ 0x37A7AB77256A4702) ^ 0x57954089705C72AFLL ^ (v113- ((2 * v113) & 0x7D889D28D92A6032)- 0x413BB16B936ACFE7), a5, 442, a7,
           0xE74809D47BC1E17ALL);
}

uint64_t sub_19E858058@<X0>(unsigned int a1@<W4>, unsigned int a2@<W8>)
{
  int v10 = (v6 ^ (a2 + 1)) + 4 * (v6 & 1) + ((2 * (v6 & 1)) ^ v8) + ((v7 + v4) & v5) - 1735909926;
  return (*(uint64_t (**)(void))(v9 + 8 * (((((v10 + a2 - ((v10 << (v7 + 52)) & v2)) ^ a2) < a1) * v3) ^ v7)))();
}

uint64_t sub_19E8580C0()
{
  int v6 = *(void **)v3;
  int v5 = *(_DWORD **)(v3 + 8);
  *(unsigned char *)(*(void *)v4 + 56) = v2;
  *int v6 = *(void *)(*(void *)v4 + 40) + 8;
  *int v5 = 136;
  return (*(uint64_t (**)(void))(v1
                              + 8
                              * (((*(void *)(*(void *)v4 + 48) == 0)
                                * (305 * ((v0 - 1427951785) & 0x551CCFFD ^ 0x5F0) - 1520)) | v0)))();
}

uint64_t sub_19E858134@<X0>(uint64_t a1@<X0>, int a2@<W6>, int a3@<W8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5
                                                     + 8
                                                     * ((((((a3 - 360) | 0x80) ^ a2) + a3 - a2 - 1044) * (v3 == v4)) ^ a3)))(a1, 3849373910);
}

uint64_t sub_19E858170()
{
  return (*(uint64_t (**)(void))(v3
                              + 8 * (((v2 == ((v0 + 159) | 0xD) + 1298204029) * (v1 + (v0 ^ (v4 + 671)) + 701)) ^ v0)))();
}

uint64_t sub_19E8581CC@<X0>(int a1@<W1>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(void))(a2 + 8 * (((a1 - 1 >= 0) * ((v2 + 916) ^ 0x263)) ^ v2)))();
}

uint64_t sub_19E858200(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24)
{
  (*(void (**)(void, void, uint64_t, uint64_t))(v25 + 8 * (v24 + 388)))(*(void *)(*(void *)v26 + 24), 0, a3, -1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v25 + 8 * (v24 + 369)))(*(void *)(*(void *)v26 + 24) + 101, a16, a15, -1);
  *(_DWORD *)(*(void *)(*(void *)v26 + 24) + 12) = a24;
  uint64_t v27 = (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 8 * (v24 ^ 0xF63)))(97, 3736635958);
  *(void *)(*(void *)v26 + 48) = v27;
  return (*(uint64_t (**)(void))(v25
                              + 8
                              * (((((v24 + 91) ^ (v27 == 0)) & 1) * (10 * (v24 ^ 0x7D9) - 8)) ^ v24)))();
}

void sub_19E8582D0()
{
}

uint64_t sub_19E858700@<X0>(uint64_t a1@<X1>, unsigned int a2@<W2>, int a3@<W8>)
{
  return (*(uint64_t (**)(void))(v5
                              + 8
                              * (((v3
                                 + (*(unsigned __int8 *)(a1 + 4) ^ v4)
                                 + ((2 * *(unsigned __int8 *)(a1 + 4)) & 0x7777)
                                 - 246 == a3)
                                * (a2 ^ 0x56A)) ^ a2)))();
}

uint64_t sub_19E858748(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,unsigned int a42,int a43,unsigned int a44,int a45,int a46,int a47,int a48,unsigned __int8 a49,int32x4_t a50,int32x4_t a51,int32x4_t a52,int32x4_t a53)
{
  int v54 = a49 ^ 0x11;
  if (v54 == 196)
  {
    int v56 = v53 ^ (v53 + 791);
    BYTE4(a40) = (((v53 ^ (v53 + 23)) + 5) ^ (8 * a42)) + ((16 * a42) & 0x80) - 63;
    BYTE5(a40) = (a42 >> 5) ^ 0xEE;
    BYTE6(a40) = (a42 >> 13) ^ 0x40;
    HIBYTE(a40) = (a42 >> 21) ^ 0xE1;
    HIDWORD(v59) = HIDWORD(a41) ^ 0x195D8874;
    LODWORD(v59) = a42 ^ 0x40000000;
    LOBYTE(a41) = ((v59 >> 29) - ((2 * (v59 >> 29)) & 0x66) + 51) ^ 0xF2;
    BYTE1(a41) = (HIDWORD(a41) >> 5) ^ 0x82;
    BYTE2(a41) = (HIDWORD(a41) >> 13) ^ 0x2D;
    int v58 = (HIDWORD(a41) >> 21) ^ 0xB;
    goto LABEL_5;
  }
  unsigned int v55 = -1527009150;
  if (v54 == 199)
  {
    int v56 = v53 ^ (v53 + 791);
    BYTE4(a40) = (HIDWORD(a41) >> 21) ^ 0xB;
    BYTE5(a40) = ((v53 ^ (v53 + 23)) + 18) ^ (HIDWORD(a41) >> 13);
    BYTE6(a40) = (HIDWORD(a41) >> 5) ^ 0x82;
    HIDWORD(v57) = HIDWORD(a41) ^ 0x195D8874;
    LODWORD(v57) = a42 ^ 0x40000000;
    HIBYTE(a40) = ((v57 >> 29) - 2 * ((v57 >> 29) & 0x3F) - 65) ^ 0x7E;
    LOBYTE(a41) = (a42 >> 21) ^ 0xE1;
    BYTE1(a41) = (a42 >> 13) ^ 0x40;
    BYTE2(a41) = (a42 >> 5) ^ 0xEE;
    LOBYTE(v58) = ((8 * a42) ^ 0x20) + (~(16 * a42) | 0x7F) - 62;
LABEL_5:
    unsigned int v55 = (v56 - 1090785573) & 0xE5FFBE8B;
    BYTE3(a41) = v58;
  }
  return sub_19E763248(a7, a7 + v55 + 435, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48,
           a49,
           a50,
           a51,
           a52,
           a53);
}

uint64_t sub_19E8588C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v28 + 8 * (v27 ^ (31 * (a6 > 1)))))(a1, a2, a27, 2695356712, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
}

uint64_t sub_19E8588D4()
{
  *(void *)(v3 - 112) = v5;
  *(void *)(v3 - 104) = v1;
  *(_DWORD *)(v3 - 120) = v0
                        + 1305237457 * ((((v3 - 120) | 0x9A4CBEB7) + (~(v3 - 120) | 0x65B34148)) ^ 0x23F51878)
                        + 1036;
  return (*(uint64_t (**)(uint64_t))(v2 + 8 * (v0 ^ 0x80E)))(v3 - 120);
}

uint64_t sub_19E858970@<X0>(int a1@<W8>)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v2 + 8 * (a1 ^ 0x8D1));
  return v3(v1);
}

uint64_t sub_19E8589A4()
{
  *(_DWORD *)(*v3 + 4 * (v1 + v4 - 1)) = v0;
  return (*(uint64_t (**)(void))(v5 + 8 * (int)((15 * ((v1 + v4 - 2) >> 31)) ^ v2)))();
}

uint64_t sub_19E8589E0@<X0>(uint64_t a1@<X0>, int a2@<W8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  int v17 = a2 ^ 0x96;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 8 * (a2 ^ 0xAD6)))(a1, a13 + 816, 20, -1);
  uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 8 * (v17 + 1454)))(a11, 1486268704);
  *(void *)(*(void *)a16 + 24) = v18;
  return (*(uint64_t (**)(void))(v16 + 8 * (((v18 != 0) * (((v17 + 577) | 0x28E) ^ 0x7D7)) | (v17 + 419))))();
}

void sub_19E858A74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  *(_DWORD *)(v14 - 120) = v13
                         + 1305237457 * (((~(v14 - 120) & 0xB4D8B408) - (~(v14 - 120) | 0xB4D8B409)) ^ 0xD6112C7)
                         - 940;
  *(void *)(v14 - 112) = a11;
  *(void *)(v14 - 104) = v12;
  (*(void (**)(uint64_t))(v11 + 8 * (v13 ^ 0x1F6)))(v14 - 120);
  JUMPOUT(0x19E858AD4);
}

uint64_t sub_19E858B10(uint64_t a1, uint64_t a2, int a3, __int16 a4)
{
  BOOL v12 = v9
      + ((a3 + 9044993) | 0xB6152100)
      + ((v4 + a3 - 178) ^ *(unsigned __int8 *)(v10 + 9) ^ 0xE161DA1C)
      + (unsigned __int16)(a4 & (2 * *(unsigned __int8 *)(v10 + 9)))
      - 231 == v8
     && (v6 + v5 + 4) < 0xC9;
  return (*(uint64_t (**)(void))(v7 + 8 * ((2002 * v12) ^ a3)))();
}

void sub_19E858B88()
{
}

void sub_19E858B98()
{
  int v1 = (const float *)(v0 + 908);
  vld1q_dup_f32(v1);
  JUMPOUT(0x19E858BD4);
}

uint64_t sub_19E858CD0()
{
  int v3 = (v0 + 44) | 0xD6;
  LODWORD(STACK[0xE60]) ^= LODWORD(STACK[0x220]) ^ v3 ^ 0x378D8A5A;
  return (*(uint64_t (**)(void))(v2 + 8 * ((760 * (v1 + (v3 ^ 0x123) - 1526 == 305 * (v3 ^ 0x4D3) + 353408982)) ^ v3)))();
}

uint64_t sub_19E858D08()
{
  if ((v1 + v0 + 1751853188) <= 0x40) {
    int v4 = 64;
  }
  else {
    int v4 = v1 + v0 + 1751853188;
  }
  return (*(uint64_t (**)(void))(v3 + 8 * ((202 * (-v0 - 1751853401 - v1 + 3 * (v2 ^ 0x229u) + v4 < 0xF)) ^ v2)))();
}

uint64_t sub_19E858D9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  (*(void (**)(void))(a8 + 8 * (v8 ^ 0xAC5)))();
  return (*(uint64_t (**)(void))(STACK[0x460] + 8 * ((248 * (STACK[0x548] != 0)) ^ (v8 - 433))))();
}

uint64_t sub_19E858DF0(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14)
{
  uint64_t v15 = (a4 - 324682713) & 0x135A3FFD;
  uint64_t v16 = (a4 - 1126);
  int v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t))(v14
                                                                                               + 8
                                                                                               * (int)(((v16 ^ v15 ^ 0xF00) * (a14 != a13)) ^ a4));
  return v17(a1, a2, v16, v17, a5, v15, a7);
}

uint64_t sub_19E858E38@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, int a7@<W8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 8 * (((a7 != 3 * (v7 ^ 0x664) + 1530970920) * ((3 * (v7 ^ 0x644)) ^ 0x2A4)) ^ v7)))(a1, a2, 4069662174, a3, a4, a5, a6, 4265605604);
}

uint64_t sub_19E858F8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  int v38 = STACK[0x214];
  int v39 = LODWORD(STACK[0x214]) + 163;
  STACK[0x590] = 0;
  LODWORD(STACK[0x644]) = 2072727178;
  STACK[0x5A0] = 0;
  LODWORD(STACK[0x500]) = 2072727178;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a8
                                                                                                  + 8 * ((((*(unsigned char *)(a38 - 0x737056611D0C9E6CLL) - *((unsigned char *)*(&off_1EF0E5660 + (v38 ^ 0x159u)) - 12)) == 39) * ((v39 - 172) ^ 0x2A5)) ^ v39)))(2561114876, 26, 2031, 1140, 247, 227, 1733852388);
}

uint64_t sub_19E859054()
{
  return (*(uint64_t (**)(void))(v0
                              + 8
                              * ((31
                                * (((v4 + ((v4 + 1101255091) & 0xBE5C2797 ^ v1) - 962) ^ *(_DWORD *)(*v2 + 4 * v5)) > (*(_DWORD *)(*v3 + 4 * v5) ^ (v1 + 757)))) ^ v4)))();
}

uint64_t sub_19E8590BC@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * ((((v3 & 0xFFFFFFFFFFFFFFFLL) == (a1 - v4 + 311) - 311) * (v1 + a1 - 234)) ^ (v1 + a1 + 1889))))();
}

uint64_t sub_19E8590F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unint64_t *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  int v67 = LODWORD(STACK[0x25C]) - 1524;
  int v69 = *a65;
  STACK[0x238] = *a16;
  STACK[0x220] = *(void *)(v66 + 8 * v67);
  LODWORD(STACK[0x29C]) = -1558073804;
  LODWORD(STACK[0x298]) = 2072727178;
  STACK[0x388] = 0;
  LODWORD(STACK[0x230]) = v69 + a4;
  LODWORD(STACK[0x228]) = -829048728;
  LODWORD(STACK[0x260]) = 807847714;
  LODWORD(STACK[0xEB0]) = a8 + 1525;
  LODWORD(STACK[0x240]) = -1301621428;
  LODWORD(STACK[0x248]) = -243540799;
  LODWORD(STACK[0x208]) = (a66 & 0xF43507FF) - 1673778328;
  LODWORD(STACK[0x20C]) = -340012588;
  return sub_19E869EC8(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48,
           a49,
           a50,
           a51,
           a52,
           a53,
           a54,
           a55,
           a56,
           a57,
           a58,
           a59,
           a60,
           a61);
}

uint64_t sub_19E859110(int a1)
{
  return (*(uint64_t (**)(void))(v3 + 8 * ((((2 * a1) ^ 0xD27) * (v1 == v2)) ^ a1)))();
}

uint64_t sub_19E859140()
{
  int v3 = (32 * v0) ^ 0x2320;
  *(_DWORD *)STACK[0x268] ^= LODWORD(STACK[0x22C]) ^ (v3 + 566880990);
  return (*(uint64_t (**)(void))(v1
                              + 8
                              * ((232 * ((((v3 - 593) | 0x300) ^ 0xFFFFFCF0) + v2 == ((v3 + 175) ^ 0x3C165DB3))) ^ v3)))();
}

uint64_t sub_19E8591C4@<X0>(int a1@<W0>, uint64_t a2@<X1>, int a3@<W8>)
{
  int v8 = a3 + v3 - 71 - 76;
  *(unsigned char *)(a2 + (v8 + v6)) = v5;
  return (*(uint64_t (**)(void))(v7 + 8 * ((((v4 + v8 + 62) < 0x38) * a1) ^ v3)))();
}

uint64_t sub_19E8591D4()
{
  *(void *)(v0 + 48) = 0;
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * (((*(void *)(*(void *)v3 + 24) == 0) * ((v1 ^ 0x2E2) + v1 + 12 - 3330)) | v1)))();
}

uint64_t sub_19E859210(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + v4 + (v3 ^ (v6 - 260))) = v8;
  return (*(uint64_t (**)(void))(v7 + 8 * (v2 ^ (16 * (v5 == 0)))))();
}

void sub_19E859360()
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = (uint64_t)*(&off_1EF0E5660
                + ((79 * (dword_1E945E7B8 ^ 0x71 ^ qword_1E945E360)) ^ byte_19EC54C60[byte_19EC7A300[(79 * (dword_1E945E7B8 ^ 0x71 ^ qword_1E945E360))] ^ 0x56])
                - 136);
  uint64_t v1 = *(void *)(v0 - 4);
  int v2 = (char *)off_1EF0E5AF0 - 12;
  int v3 = (char *)off_1EF0E5A68 - 12;
  int v4 = (unint64_t *)*(&off_1EF0E5660
                           + (*((unsigned char *)off_1EF0E5A68
                                               + (*((unsigned __int8 *)off_1EF0E5AF0
                                                  + (79 * ((qword_1E945E360 + v1) ^ 0x71))
                                                  - 12) ^ 0xCEu)
                                               - 12) ^ (79 * ((qword_1E945E360 + v1) ^ 0x71)))
                           - 223);
  unint64_t v5 = 1616673103 * ((*v4 + v1) ^ (unint64_t)&v7 ^ 0xA7F80EC97C429E71);
  *(void *)(v0 - 4) = v5;
  *int v4 = v5;
  v8[1] = 1001500783 * (((v8 | 0xC62A4CC0) - (v8 & 0xC62A4CC0)) ^ 0x8C9EB374) + 2310;
  int v9 = (char *)*(&off_1EF0E5660
               + ((79 * ((*(_DWORD *)v4 + *(_DWORD *)(v0 - 4)) ^ 0x71)) ^ v3[v2[(79 * ((*(_DWORD *)v4 + *(_DWORD *)(v0 - 4)) ^ 0x71))] ^ 0xDE])
               + 102)
     + 808;
  LOBYTE(v4) = 79 * ((*(_DWORD *)v4 + *(_DWORD *)(v0 - 4)) ^ 0x71);
  int v6 = (char *)*(&off_1EF0E5660
               + ((79 * ((qword_1E945E360 - dword_1E945E7B8) ^ 0x71)) ^ byte_19EC7A500[byte_19EC72CD0[(79 * ((qword_1E945E360 - dword_1E945E7B8) ^ 0x71))] ^ 0x99])
               + 60)
     - 8;
  (*(void (**)(_DWORD *))&v6[8
                                      * (*((unsigned char *)off_1EF0E57E0
                                                          + ((*off_1EF0E5CA8)[v4] ^ 0x49u)
                                                          - 4) ^ v4)
                                      + 17320])(v8);
  __asm { BRAA            X9, X17 }
}

uint64_t sub_19E8595B0(uint64_t a1, uint64_t a2, int a3, int a4)
{
  HIDWORD(v9) = a4;
  LODWORD(v9) = a4 ^ v7;
  return (*(uint64_t (**)(void))(v6 + 8 * ((53 * (v8 + 1 != v5 + 24)) ^ a3)))((v9 >> 2) + v7 - (v4 & (2 * (v9 >> 2))));
}

uint64_t sub_19E8596E4(_DWORD *a1)
{
  *((unsigned char *)a1 + (v3 ^ v2) + v1 + 4) = 54;
  *a1 = v1;
  return 0;
}

uint64_t sub_19E859704(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8)
{
  return (*(uint64_t (**)(void))(v11
                              + 8
                              * (((v9 + v8 == ((((v10 + a7) & a8) + 450) ^ (v8 + 415)))
                                * (((((v10 + a7) & a8) + 547) | 0x10) + 604)) ^ (v10 + a7) & a8)))();
}

uint64_t sub_19E85977C(uint64_t a1, uint64_t a2)
{
  return sub_19E8597D0(a1, a2, (v3 ^ v2 ^ 0x7BFD73D77C7FD7C7) + ((2 * (v3 ^ v2)) & 0xF8FFAF8E) - 0x7BFD73D77C7FD7C7, 0x651E9BC86EF15730);
}

uint64_t sub_19E8597D0@<X0>(int a1@<W0>, int a2@<W1>, uint64_t a3@<X2>, unint64_t a4@<X3>, int a5@<W4>, int a6@<W5>, int a7@<W6>, unint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v33 = *(_DWORD *)(*v27 + 4 * v26) ^ v19;
  uint64_t v34 = (v33 ^ v24) + v32 + (v22 & (2 * v33));
  uint64_t v35 = 4 * (a1 + v26);
  uint64_t v36 = ((a4 >> 31) & 0x1FFF5EFF4 ^ a9)
      + ((2 * (a6 ^ 0x13u)) ^ HIDWORD(a4) ^ 0x1FF2FBDE9AE46BE6)
      + (*(_DWORD *)(a19 + v35) ^ v19 ^ a8)
      + (v29 & (2 * (*(_DWORD *)(a19 + v35) ^ v19)))
      + ((v34 * a3) ^ v23)
      + (v28 & (2 * v34 * a3));
  *(_DWORD *)(a19 + v35) = (v36 - ((v30 + 2 * v36) & v31) + v20) ^ a2;
  BOOL v37 = v21 > 0x59426E74;
  if (v37 == v26 + 649957772 < a5) {
    BOOL v37 = v26 + 649957772 < a7;
  }
  return (*(uint64_t (**)(void))(v25 + 8 * (a6 ^ (2 * !v37))))();
}

void sub_19E8598C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, uint64_t a14)
{
  int v18 = 1001500783 * ((~((v17 - 152) | 0x426537E6) + ((v17 - 152) & 0x426537E6)) ^ 0xF72E37AD);
  *(void *)(v16 + 1312) = a14;
  *(_DWORD *)(v17 - 132) = 1535532749 - v18;
  *(void *)(v16 + 1336) = a1;
  *(_DWORD *)(v17 - 140) = v18 ^ 0x61E07257;
  *(_DWORD *)(v17 - 136) = v18 + v14 - 198;
  (*(void (**)(uint64_t))(v15 + 8 * a13))(v17 - 152);
  JUMPOUT(0x19E858A0CLL);
}

uint64_t sub_19E859954@<X0>(int a1@<W0>, int a2@<W1>, int a3@<W3>, unsigned int a4@<W5>, int a5@<W8>)
{
  return (*(uint64_t (**)(void))(v5 + 8 * (((a3 + a5 < ((a2 + 1412) ^ a4)) * a1) ^ a2)))();
}

#error "19E85998C: too big function (funcsize=0)"

uint64_t sub_19E85CC3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(v5 + 8 * ((2898 * (a4 + 1 == v6 + 16)) ^ v4)))();
}

void sub_19E85CE4C()
{
  uint64_t v4 = *(void *)(v0 + 8);
  *(_DWORD *)(*(void *)(v0 + 24) - 0x388BF9DCA2D07522) = *v1;
  *(_DWORD *)(v4 - 0x4987798DA1794EB5) = *v2 + ((v3 + 812222985) & 0xCF96767F ^ 0xAF772706) - ((2 * *v2) & 0x5EEE46F2);
  JUMPOUT(0x19E85CEC4);
}

uint64_t sub_19E85CF00()
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * (((((v0 - 875) | 0x241) - 380) * ((unint64_t)&STACK[0x270] - v1 + 96 > 0xF)) ^ v0)))();
}

uint64_t sub_19E85CF40@<X0>(uint64_t a1@<X1>, int a2@<W2>, int a3@<W8>)
{
  int v6 = 5 * (a2 ^ 0x2D2);
  BOOL v7 = v3 + ((2 * *(unsigned __int8 *)(a1 + 8)) & 0x7777) + (v6 ^ (v4 - 1155) ^ *(unsigned __int8 *)(a1 + 8)) - 10 == ((v6 - 640) ^ (a3 - 509));
  return (*(uint64_t (**)(void))(v5 + 8 * ((98 * ((v7 ^ 0x37) + 2 * v7 != ((v6 + 0x80) ^ 0x34))) ^ v6)))();
}

uint64_t sub_19E85CFB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _DWORD *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,_DWORD **a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t v70 = (v69 + 1940566283) & 0xB4A6835B;
  unint64_t v71 = *a53;
  if (((((v69 + 523123405) & 0x922F99E) - 283) & (unint64_t)*a53) != (v70 ^ 0x119)
    || (uint64_t v72 = (uint64_t)*(&off_1EF0E5660 + (int)(v69 ^ 0xD7AECCD9)),
        uint64_t v74 = *(void *)(v72 - 4),
        uint64_t v73 = (void *)(v72 - 4),
        v74))
  {
    *a9 = -694859420;
    JUMPOUT(0x19E822028);
  }
  int v75 = v70 + 300;
  *uint64_t v73 = v71;
  *(_DWORD *)*(&off_1EF0E5660 + (int)v70 - 270) = 255;
  *v71 |= ~v71[*v71 & 0x3ELL] << 16;
  v71[4] |= ~v71[v71[4] & 0x3ELL] << ((((v69 + 11) & 0x5B) + 44) ^ 0x55);
  v71[8] |= ~v71[v71[8] & 0x3ELL] << 16;
  v71[12] |= ~v71[v71[12] & 0x3ELL] << 16;
  v71[16] |= ~v71[v71[16] & 0x3ELL] << 16;
  v71[20] |= ~v71[v71[20] & 0x3ELL] << 16;
  v71[24] |= ~v71[v71[24] & 0x3ELL] << 16;
  v71[28] |= ~v71[v71[28] & 0x3ELL] << 16;
  v71[32] |= ~v71[v71[32] & 0x3ELL] << 16;
  v71[36] |= ~v71[v71[36] & 0x3ELL] << 16;
  v71[40] |= ~v71[v71[40] & 0x3ELL] << 16;
  v71[44] |= ~v71[v71[44] & 0x3ELL] << 16;
  v71[48] |= ~v71[v71[48] & 0x3ELL] << 16;
  v71[52] |= ~v71[v71[52] & 0x3ELL] << 16;
  v71[56] |= ~v71[v71[56] & 0x3ELL] << 16;
  v71[60] |= ~v71[v71[60] & 0x3ELL] << 16;
  uint64_t v76 = (*(uint64_t (**)(char *, void, uint64_t))(v68 + 8 * ((int)v70 + 2077)))(&a68, 0, 1024);
  STACK[0x670] = (unint64_t)&a68;
  return (*(uint64_t (**)(uint64_t))(a62 + 8 * ((((v75 ^ 0x7282758D) == 1921152968) * (v75 ^ 0x5F4)) ^ v75)))(v76);
}

uint64_t sub_19E85D3C8()
{
  *(void *)(v6 - 128) = v3;
  *(void *)(v6 - 120) = v1;
  *(_DWORD *)(v6 - 132) = v5 + ((((2 * (v6 - 136)) | 0x5242A984) - (v6 - 136) - 690050242) ^ 0x38D35988) * v0 + 792;
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(v2 + 8 * (v5 + 2055)))(v6 - 136);
  return (*(uint64_t (**)(uint64_t))(v2
                                            + 8
                                            * (int)((((*(_DWORD *)(v6 - 136) + v4) < 0xD1FD7B38)
                                                   * (((v5 + 1845344915) & 0x9202479D) + 5 * (v5 ^ 0xC3) + 840)) ^ v5)))(v7);
}

uint64_t sub_19E85D47C@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v12 = v10 - 490835452;
  *(_DWORD *)(a7 + 4 * (v7 + a1)) = *(_DWORD *)(*(void *)(v9 - 0x7CF6A079DDC7252CLL) + 4 * (v7 + a1));
  BOOL v14 = v7 - 1448341953 > 1656648195 || v7 - 1448341953 < v12;
  return (*(uint64_t (**)(uint64_t))(v11 + 8 * ((v14 * ((v8 ^ 0x4F4) - 283)) ^ v8)))(1656648195);
}

uint64_t sub_19E85D4F8()
{
  *(_DWORD *)(v5 - 136) = (v0 + 1620) ^ (1575213817 * ((v5 + 1407679243 - 2 * ((v5 - 136) & 0x53E77B93)) ^ 0xDE82CB5F));
  *(void *)(v5 - 128) = v1;
  *(void *)(v5 - 120) = v3;
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(v2 + 8 * (v0 + 2060)))(v5 - 136);
  return (*(uint64_t (**)(uint64_t))(v2
                                            + 8
                                            * (((v4 == v0 + 1548196960) * (5 * ((v0 + 1295) ^ 0x615) + 3480)) ^ (v0 + 1295))))(v6);
}

uint64_t sub_19E85D5A4@<X0>(int a1@<W6>, int a2@<W8>)
{
  return (*(uint64_t (**)(void))(v3
                              + 8
                              * ((1080 * (a2 - 445593386 < ((v2 + 1791864572) & 0xF036A8FB) - 2114)) ^ (a1 + v2 + 731))))();
}

uint64_t sub_19E85D5FC@<X0>(uint64_t a1@<X1>, int a2@<W8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, int a16)
{
  return (*(uint64_t (**)(void))(v16
                              + 8
                              * (((a16 - *(_DWORD *)(a1 + 4) + 1537328205 == ((a2 - 793480877) ^ 0xC0894D36))
                                * ((a2 - 793480877) & 0x2F4B8F3C ^ 0x913)) | a2)))();
}

uint64_t sub_19E85D664()
{
  return (*(uint64_t (**)(void))(v0
                              + 8
                              * (int)(((**(void **)(v2 + 8 * (v1 ^ 0x123)) == 0)
                                     * ((v1 + 670114029) & 0xD80EDFC6 ^ 0x10E)) ^ v1)))();
}

void sub_19E85D8D0()
{
}

uint64_t sub_19E85D8D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return (*(uint64_t (**)(void))(v6 + 8 * (((v5 >= ((a5 - 253) ^ 0x46Cu)) * (((a5 - 253) | 0x380) - 1956)) ^ a5)))();
}

void sub_19E85D914(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, unint64_t *a18, int a19, int a20,unint64_t a21,int a22,int a23,unint64_t *a24,uint64_t a25,int a26,int a27,unint64_t a28,int a29,int a30,unint64_t *a31,uint64_t a32,uint64_t a33,int a34,int a35,unint64_t *a36,int a37,int a38,uint64_t a39,int a40,int a41,int a42,int a43,unint64_t *a44,uint64_t a45,uint64_t a46,int a47,int a48,unint64_t a49,int a50,int a51,unint64_t *a52,unint64_t *a53,unint64_t *a54,unint64_t *a55,uint64_t a56,int64x2_t a57,int64x2_t a58,int64x2_t a59,int64x2_t a60,int64x2_t a61,int64x2_t a62,int64x2_t a63)
{
  STACK[0x3A8] = 0;
  a18 = &STACK[0xAD0B52F2B779AB8];
  STACK[0x3E8] = (unint64_t)&STACK[0x7401ED8592CDC4C9];
  STACK[0x3E0] = (unint64_t)&STACK[0x78F763A55785C2FE];
  STACK[0x3D8] = (unint64_t)&STACK[0x5CF1A0FB9E998446];
  STACK[0x3D0] = (unint64_t)&STACK[0x7C30A4ACD6601C47];
  a55 = &STACK[0x64C485B087006E45];
  a54 = &STACK[0x18A79E01698C4740];
  a53 = &STACK[0x64C485B087006E55];
  a52 = &STACK[0x18A79E01698C45FC];
  a31 = &STACK[0x64FFE3F062603DCA];
  a44 = &STACK[0xAD0B52F2B779C5C];
  STACK[0x268] = (unint64_t)&STACK[0x64C485B087006DD5];
  STACK[0x260] = (unint64_t)&STACK[0x18A79E01698C45E0];
  a36 = &STACK[0x56A724B613D70629];
  STACK[0x218] = (unint64_t)&STACK[0x56A724B613D7070D];
  STACK[0x230] = (unint64_t)&STACK[0x1A3B3DFF0D4F4F14];
  STACK[0x228] = (unint64_t)&STACK[0x1B623CBCC684DFD3];
  a24 = &STACK[0x3BF054D022E336A2];
  int v75 = *(_DWORD *)(v72 + 24);
  int v76 = *(_DWORD *)(v72 + 28);
  a70 = v72;
  int v77 = v76 - v70;
  unint64_t v78 = ((unint64_t)&STACK[0x59C] ^ 0x6CDF771DCF9D7DC7)
      - 0x6CDF771DCF9D7DC7
      + (((void)&STACK[0x59C] << (v71 + 97)) & 0xD9BEEE3B9F3AFB88);
  STACK[0x290] = ((v78 % 0x25) ^ 0xBFDEFF75FDBEEB6FLL)
               + 0x4021008A024114A1
               + ((2 * (v78 % 0x25)) & 0x5ELL);
  unint64_t v79 = ((unint64_t)&STACK[0x4D8] ^ 0xD7A77CFBAFF6DBFDLL)
      + ((2 * (void)&STACK[0x4D8]) & 0xAF4EF9F75FEDB7F0);
  a28 = ((unint64_t)&STACK[0x4A8] ^ 0xEF53A7BF5FF7FB7FLL)
      + 0x75EF7BFBB9F9A600
      + ((2 * (void)&STACK[0x4A8]) & 0xDEA74F7EBFEFF6F0);
  LODWORD(STACK[0x23C]) = v75 ^ v70;
  int64x2_t v80 = vdupq_n_s64(v79 + 0x7E5FF7E7DFBFE654);
  int64x2_t v81 = vdupq_n_s64(v79 + 0x7E5FF7E7DFBFE6B4);
  a21 = ((unint64_t)&STACK[0x5C0] ^ 0xD3B1B7EFFB3E9BFFLL)
      + 0x2C4E481004C16401
      + ((2 * (void)&STACK[0x5C0]) & 0xA7636FDFF67D37F0);
  a49 = ((unint64_t)&STACK[0x650] ^ 0x39EFAFF6DFD2DF5CLL)
      - 0x39EFAFF6DFD2DF5CLL
      + ((2 * (void)&STACK[0x650]) & 0x73DF5FEDBFA5BEB0);
  *(int32x4_t *)&STACK[0x390] = vdupq_n_s32(0x68589320u);
  LODWORD(STACK[0x214]) = (v73 - 330654929) & 0x13B563F7;
  LODWORD(STACK[0x3B4]) = (v73 - 1167505026) & 0x4596B6FF;
  LODWORD(STACK[0x224]) = -((2 * (v75 ^ v70) - 2067232734) & 0xFA687FBC) - 1080523793;
  LODWORD(STACK[0x27C]) = ((2 * v77) & 0xFDEFBF7A ^ 0x6C86B95A) + 2011051768;
  LODWORD(STACK[0x278]) = v77 ^ 0xC9B4A350;
  a34 = v77;
  LODWORD(STACK[0x220]) = v77 ^ 0x37437CED;
  STACK[0x200] = (unint64_t)(&a9 - 0xB9022E856505B4CLL);
  a68 = vaddq_s64(v80, (int64x2_t)xmmword_19EC7A630);
  a67 = vaddq_s64(v80, (int64x2_t)xmmword_19EC7A640);
  a65 = vaddq_s64(v80, (int64x2_t)xmmword_19EC7A660);
  a66 = vaddq_s64(v80, (int64x2_t)xmmword_19EC7A650);
  a63 = vaddq_s64(v80, (int64x2_t)xmmword_19EC3A120);
  a64 = vaddq_s64(v80, (int64x2_t)xmmword_19EC7A600);
  a61 = vaddq_s64(v80, (int64x2_t)xmmword_19EC35D70);
  a62 = vaddq_s64(v80, (int64x2_t)xmmword_19EC3A130);
  a59 = vaddq_s64(v81, (int64x2_t)xmmword_19EC3A120);
  a60 = vaddq_s64(v81, (int64x2_t)xmmword_19EC7A600);
  a57 = vaddq_s64(v81, (int64x2_t)xmmword_19EC35D70);
  a58 = vaddq_s64(v81, (int64x2_t)xmmword_19EC3A130);
  LODWORD(STACK[0x28C]) = v73 ^ 0xA91;
  LODWORD(STACK[0x288]) = v73 ^ 0xB1F;
  STACK[0x450] = v74 | 0x21217919C51FF3F5;
  unint64_t v82 = 1305237457 * (v74 ^ 0xD15D9971B9B9A6CELL);
  STACK[0x448] = v82;
  STACK[0x440] = v82 ^ 0xF7EA1DE0;
  LODWORD(STACK[0x424]) = v73 + 677532355;
  LODWORD(STACK[0x420]) = v73 + 1683709363;
  LODWORD(STACK[0x41C]) = (16 * v73) ^ 0x25C0;
  *(int32x4_t *)&STACK[0x370] = vdupq_n_s32(0x88179DC8);
  *(int32x4_t *)&STACK[0x380] = vdupq_n_s32(0xEFD0C470);
  *(int32x4_t *)&STACK[0x350] = vdupq_n_s32(0xB83E0604);
  *(int32x4_t *)&STACK[0x360] = vdupq_n_s32(0x75F0303Au);
  *(int32x4_t *)&STACK[0x330] = vdupq_n_s32(0x98B2941A);
  *(int32x4_t *)&STACK[0x340] = vdupq_n_s32(0x23E0FCFCu);
  *(int32x4_t *)&STACK[0x320] = vdupq_n_s32(0x7A0542Cu);
  uint64_t v83 = 1431787901 * (v74 ^ 0x46EFD8E62B90AAD7);
  LODWORD(STACK[0x314]) = v73 - 611764797;
  a26 = (v73 + 1783132493) & 0x95B78EEF;
  a27 = a26 ^ 0x268;
  a20 = 1388586422;
  a51 = v73 ^ 0x228;
  a43 = 13 * (v73 ^ 0x22F);
  a42 = v73 - 1840229953;
  a50 = v73 + 1326342284;
  LODWORD(STACK[0x210]) = v73 ^ 0x4DE;
  a30 = v73 + 1015628739;
  a35 = v73 ^ 0xB7C;
  LODWORD(STACK[0x2A4]) = 1817256913;
  a37 = 68658;
  a48 = v73 ^ 0x22E;
  a41 = v73 - 728470002;
  a39 = (int)v73;
  a23 = 1847765349;
  STACK[0x318] = v83;
  STACK[0x308] = v83 ^ 0x2AC9F5D3;
  STACK[0x458] = v73;
  a38 = (4 * v73) ^ 0x880;
  *(int32x4_t *)&STACK[0x2E0] = vdupq_n_s32(0x7FFFFFFEu);
  *(int32x4_t *)&STACK[0x2F0] = vdupq_n_s32(0x18B2941Au);
  *(int32x4_t *)&STACK[0x2D0] = vdupq_n_s32(0x5A2872D0u);
  LODWORD(STACK[0x2B4]) = 1320725744;
  JUMPOUT(0x19E85E09CLL);
}

uint64_t sub_19E85E12C@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  int v22 = v18 + 1867;
  int v23 = (((((v21 - 144) ^ 0x2A99C800 | 0x55603716) ^ 0xFFFFFFFE) - ((v21 - 144) ^ 0x14200112 | 0xAA9FC8E9)) ^ 0xE614C7F1)
      * v19;
  *(_DWORD *)(v21 - 128) = v23 + v18 + 1867 - 894;
  *(void *)(v21 - 136) = a18;
  *(_DWORD *)(v21 - 140) = a1 + v23;
  uint64_t v24 = (*(uint64_t (**)(uint64_t))(v20 + 8 * ((v18 + 1867) ^ 0xE79)))(v21 - 144);
  return (*(uint64_t (**)(uint64_t))(v20
                                            + 8
                                            * (((*(_DWORD *)(v21 - 144) != ((2 * v22) ^ 0xB1C) - 1914019704)
                                              * (v22 ^ 0x74E)) ^ v22)))(v24);
}

uint64_t sub_19E85E1F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  return (*(uint64_t (**)(void))(v8
                              + 8
                              * ((972
                                * (((*(_DWORD *)(v7 + ((((v6 + 574) | 0x1E0) ^ (a6 - 651)) + v10) * (uint64_t)v9 + 36) == v10) ^ v6) & 1)) ^ v6)))();
}

uint64_t sub_19E85E23C(int a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,int a62,int a63)
{
  int v74 = v67 - 427 + 8 * v68 + 1827721958 - ((16 * v68 + 147449936) & 0x1117C200);
  LOBYTE(STACK[0x30C]) = HIBYTE(v74) ^ 0x3A;
  LOBYTE(STACK[0x30D]) = BYTE2(v74) ^ 0x39;
  LODWORD(a16) = v68;
  LOBYTE(STACK[0x30A]) = v71;
  LOWORD(STACK[0x308]) = -19790;
  LOBYTE(STACK[0x30E]) = ((unsigned __int16)(v67 - 427 + 8 * v68 - 11546 - ((16 * v68 - 6064) & 0xC200)) >> 8) ^ 0x53;
  LOBYTE(STACK[0x30F]) = (v67 + 85 + 8 * v68 - 26) ^ 0xB5;
  LOBYTE(STACK[0x30B]) = (((v68 - 1131635067) >> 29) - 4 * ((v68 - 1131635067) >> 30) + 54) ^ 0x84;
  int v1031 = v67 - 427;
  HIDWORD(v981) = (v67 - 775465989) & 0x2E38ACBF;
  uint64_t v982 = (v67 - 915) | 0x400;
  unsigned int v1028 = (2 * a4 - 1342705306) & (HIDWORD(v981) ^ 0xEDBF550F);
  unsigned int v75 = (v70 + ((v982 + (LOBYTE(STACK[0x2D0]) ^ v71) - ((2 * LOBYTE(STACK[0x2D0])) & 8)) << 16) - 843972608) ^ 0xD2040000;
  unsigned int v76 = ((((LOBYTE(STACK[0x2D1]) ^ v71) - ((2 * (LOBYTE(STACK[0x2D1]) ^ v71)) & 0x3C)) << 8) - 293003776) ^ 0xEE891E00;
  unsigned int v77 = (v76 - 718621813 - ((2 * v76) & 0x2A556600)) ^ 0xD52AB38B | (v75 + 442193337 - ((2 * v75) & 0x34B60000)) ^ 0x1A5B55B9;
  unsigned int v78 = (v77 - 1999132009 - ((2 * v77) & 0x11AF552E)) ^ 0x88D7AA97 | ((LOBYTE(STACK[0x2D2]) ^ v71)
                                                                    - 1363818525
                                                                    - ((2 * (LOBYTE(STACK[0x2D2]) ^ v71)) & 0xFFFFFFC7)) ^ 0xAEB5C7E3;
  unsigned int v79 = (((v78 - ((2 * v78) & 0x57D5F4)) << 8) - 1410663936) ^ 0xABEAFA00;
  int v80 = (v79 + 709973306 - ((2 * v79) & 0x54A2AA00)) ^ 0x2A51553A | ((LOBYTE(STACK[0x2D3]) ^ v71)
                                                                   + 1906162097
                                                                   - ((2 * (LOBYTE(STACK[0x2D3]) ^ v71)) & 0x162)) ^ 0x719DB9B1;
  unsigned int v1021 = v80 - 920765772 - ((2 * v80) & 0x923C7568);
  unsigned int v81 = ((((LOBYTE(STACK[0x2D4]) ^ v71) - ((2 * (LOBYTE(STACK[0x2D4]) ^ v71)) & 0x44444444)) << 24) - 1577058304) ^ 0xA2000000;
  unsigned int v82 = ((((LOBYTE(STACK[0x2D5]) ^ v71) - ((2 * LOBYTE(STACK[0x2D5])) & 0x92)) << 16) - 1219952640) ^ 0xB7490000;
  unsigned int v83 = (v81 + a6 - ((2 * v81) & 0xE4000000)) ^ a6 | (v82 + 1771053114 - ((2 * v82) & 0x53200000)) ^ 0x6990203A;
  int v84 = ((((LOBYTE(STACK[0x2D6]) ^ v71) - ((2 * (LOBYTE(STACK[0x2D6]) ^ v71)) & 0x42)) << 8) + 1777803520) ^ 0x69F72100;
  unsigned int v85 = (v83 + 1245462856 - ((2 * v83) & 0x94788290)) ^ 0x4A3C4148 | (v84 + a7 - ((2 * v84) & 0x5EF8BA00)) ^ a7;
  int v86 = LOBYTE(STACK[0x2D8]);
  int v87 = ((((LOBYTE(STACK[0x2D9]) ^ v71) - ((2 * (LOBYTE(STACK[0x2D9]) ^ v71)) & 0x28)) << 21) + 1115684864) ^ 0x42800000;
  unsigned int v88 = (v85 - 1790008837 - ((2 * v85) & 0x2A9D43F6)) ^ 0x954EA1FB | ((LOBYTE(STACK[0x2D7]) ^ v71)
                                                                    + 1888007972
                                                                    - ((2 * (LOBYTE(STACK[0x2D7]) ^ v71)) & 0x48)) ^ 0x7088B724;
  int v89 = (v86 ^ v71) - 503582244;
  LODWORD(v983) = v88 + 1288215718 - ((2 * v88) & 0x9991394C);
  unsigned int v90 = (((v983 << 16) ^ 0x9CA60000) - 703659284 - ((2 * ((v983 << 16) ^ 0x9CA60000)) & 0xAC1E0000)) ^ 0xD60F02EC | ((((v89 - ((2 * (v86 ^ v71)) & 0x1B8)) << 8) ^ 0xFBF1DC00) + 309523129 - ((2 * (((v89 - ((2 * (v86 ^ v71)) & 0x1B8)) << 8) ^ 0xFBF1DC00)) & 0x24E5E400)) ^ 0x1272F2B9;
  unsigned int v91 = ((((v89 << 29) - ((v86 & 1) << 30) - 1212273172) ^ 0x37BE2DEC) & 0xFFE00000 | ((v90
                                                                                      - ((2 * v90) & 0x9BBFCF4A)
                                                                                      - 840964187) >> 11)) ^ 0x19BBFC;
  unsigned int v92 = (v91 - 646694536 - ((2 * v91) & 0xB2E872F0)) ^ 0xD9743978 | (v87 + 257508160 - ((2 * v87) & 0x1E800000)) ^ 0xF594340;
  int v93 = v92 - ((2 * v92) & 0x366315F6) + 456231675;
  HIDWORD(v94) = v93 ^ 0x189409;
  LODWORD(v94) = v93 ^ 0xB8200000;
  unsigned int v95 = ((((v94 >> 21) - ((2 * (v94 >> 21)) & 0x46)) << 16) + 2293760) ^ 0x230000;
  int v96 = ((((LOBYTE(STACK[0x2DA]) ^ v71) - ((2 * (LOBYTE(STACK[0x2DA]) ^ v71)) & 0x86)) << 8) + 1682457344) ^ 0x64484300;
  unsigned int v97 = (v95 - 695558582 - ((2 * v95) & 0xAD140000)) ^ 0xD68A9E4A | (v96 + 2004339027 + (~(2 * v96) | 0x91106DFF) + 1) ^ 0x7777C953;
  unsigned int v98 = (v97 - 1174026508 - ((2 * v97) & 0x740B8DE8)) ^ 0xBA05C6F4 | ((LOBYTE(STACK[0x2DB]) ^ v71)
                                                                    + 1079773114
                                                                    - ((2 * (LOBYTE(STACK[0x2DB]) ^ v71)) & 0x174)) ^ 0x405C07BA;
  unsigned int v1025 = v98 - ((2 * v98) & 0x8D6FF270) + 1186462008;
  int v99 = (LOBYTE(STACK[0x2DC]) ^ v71) - ((2 * (LOBYTE(STACK[0x2DC]) ^ v71)) & 0x5C);
  unsigned int v100 = ((((LOBYTE(STACK[0x2DD]) ^ v71) - ((2 * (LOBYTE(STACK[0x2DD]) ^ v71)) & 0x178)) << 8) - 1824146432) ^ 0x9345BC00;
  unsigned int v101 = (v100 + 755628085 - ((2 * v100) & 0x5A13F000)) ^ 0x2D09F835 | ((((v99 << 16) + 1261305856) ^ 0x4B2E0000)
                                                                      - 2125157147
                                                                      - ((2 * (((v99 << 16) + 1261305856) ^ 0x4B2E0000)) & 0x2A80000)) ^ 0x8154ACE5;
  unsigned int v102 = (v101 - 487140994 - ((2 * v101) & 0xC5EDA2FC)) ^ 0xE2F6D17E | ((LOBYTE(STACK[0x2DE]) ^ v71)
                                                                      + 2037631175
                                                                      - ((2 * (LOBYTE(STACK[0x2DE]) ^ v71)) & 0xFFFFFF8F)) ^ 0x7973C8C7;
  unsigned int v103 = (((v102 - ((2 * v102) & 0x3E78F0)) << 8) - 1623427072) ^ 0x9F3C7800;
  unsigned int v104 = (v103 + 1082696655 - ((2 * v103) & 0x81114600)) ^ 0x4088A3CF | ((LOBYTE(STACK[0x2DF]) ^ v71)
                                                                       + 899035858
                                                                       - ((2 * (LOBYTE(STACK[0x2DF]) ^ v71)) & 0x1A4)) ^ 0x359632D2;
  unsigned int v105 = v104 - 804536775 - ((2 * v104) & 0xA0177C72);
  int v106 = (LOBYTE(STACK[0x2E0]) ^ v71) - ((2 * (LOBYTE(STACK[0x2E0]) ^ v71)) & 0x44444444);
  int v107 = LOBYTE(STACK[0x2E5]);
  unsigned int v108 = ((((LOBYTE(STACK[0x2E1]) ^ v71) - ((2 * (LOBYTE(STACK[0x2E1]) ^ v71)) & 0xDDDDDDDD)) << 16) + 921567232) ^ 0x36EE0000;
  unsigned int v109 = (v108 - 738794505 - ((2 * v108) & 0x27EC0000)) ^ 0xD3F6E3F7 | ((((v106 << 24) + 570425344) ^ 0x22000000)
                                                                      - 2069895858
                                                                      - ((2 * ((v106 << 24) + 570425344)) & 0x8000000)) ^ 0x849FE54E;
  int v110 = ((((LOBYTE(STACK[0x2E2]) ^ v71) - ((2 * (LOBYTE(STACK[0x2E2]) ^ v71)) & 0x160)) << 8) + 2099228672) ^ 0x7D1FB000;
  unsigned int v111 = (v109 + 684115771 - ((2 * v109) & 0x518D8E76)) ^ 0x28C6C73B | (v110 - 1368117899 - ((2 * v110) & 0x5CE85A00)) ^ 0xAE742D75;
  LODWORD(v981) = LOBYTE(STACK[0x2E3]);
  int v112 = (v111 - 1896344265 - ((2 * v111) & 0x1DF02A6E)) ^ 0x8EF81537 | ((v981 ^ v71)
                                                                       - 386188652
                                                                       - ((2 * (v981 ^ v71)) & 0x128)) ^ 0xE8FB3A94;
  unsigned int v113 = v112 - 684658921 - ((2 * v112) & 0xAE61DE2E);
  unsigned int v114 = ((((LOBYTE(STACK[0x2E4]) ^ v71) + (~(2 * (LOBYTE(STACK[0x2E4]) ^ v71)) | 0xFE89)) << 16) - 239337472) ^ 0xF1BB0000;
  unsigned int v115 = (v114 + 1858215760 - ((2 * v114) & 0x1D840000)) ^ 0x6EC21F50 | ((((((v107 ^ v71) - ((2 * v107) & 0xA)) << 8)
                                                                         - 1981479680) ^ 0x89E50500)
                                                                       - 808502140
                                                                       - ((2
                                                                         * (((((v107 ^ v71) - ((2 * v107) & 0xA)) << 8)
                                                                           - 1981479680) ^ 0x89E50500)) & 0x1F9E7800)) ^ 0xCFCF3C84;
  int v116 = (v115 + 1580420123 - ((2 * v115) & 0x3C669836)) ^ 0x5E334C1B | ((LOBYTE(STACK[0x2E6]) ^ v71)
                                                                       + v72
                                                                       - ((2 * (LOBYTE(STACK[0x2E6]) ^ v71)) & 0x19C)) ^ v72;
  int v117 = (((v116 - ((2 * v116) & 0xAE0C64)) << 8) + 1460023808) ^ 0x57063200;
  unsigned int v118 = (v117 - 1061645850 - ((2 * v117) & 0x81712200)) ^ 0xC0B891E6 | ((LOBYTE(STACK[0x2E7]) ^ v71)
                                                                       - 2057778358
                                                                       - ((2 * (LOBYTE(STACK[0x2E7]) ^ v71)) & 0x94)) ^ 0x8558CB4A;
  unsigned int v119 = v118 + 1659523907 - ((2 * v118) & 0xC5D4A686);
  unsigned int v120 = ((((LOBYTE(STACK[0x2E8]) ^ v71) - ((2 * (LOBYTE(STACK[0x2E8]) ^ v71)) & 0xFFFFFFC7)) << 24) - 486539264) ^ 0xE3000000;
  unsigned int v121 = ((((LOBYTE(STACK[0x2E9]) ^ v71) + (~(2 * (LOBYTE(STACK[0x2E9]) ^ v71)) | 0xFF31)) << 16) - 1436024832) ^ 0xAA670000;
  unsigned int v122 = (v120 + v73 - ((2 * v120) & 0xBE000000)) ^ v73 | (v121 - 895934898 - ((2 * v121) & 0x5320000)) ^ 0xCA991E4E;
  unsigned int v123 = ((((LOBYTE(STACK[0x2EA]) ^ v71) - ((2 * (LOBYTE(STACK[0x2EA]) ^ v71)) & 0x68)) << 8) - 2121845760) ^ 0x81873400;
  unsigned int v124 = (v122 - 225305122 - ((2 * v122) & 0xE5243BBC)) ^ 0xF2921DDE | (v123 - 731298809 - ((2 * v123) & 0x28D28800)) ^ 0xD4694407;
  unsigned int v125 = (v124 + 1757162911 - ((2 * v124) & 0xD1785B3E)) ^ 0x68BC2D9F | ((LOBYTE(STACK[0x2EB]) ^ v71)
                                                                       - 1877320195
                                                                       - ((2 * (LOBYTE(STACK[0x2EB]) ^ v71)) & 0xFFFFFFFB)) ^ 0x901A5DFD;
  int v126 = v125 - 1109210978 - ((2 * v125) & 0x7BC5913C);
  unsigned int v127 = ((((LOBYTE(STACK[0x2EC]) ^ v71) - ((2 * (LOBYTE(STACK[0x2EC]) ^ v71)) & 0xC4)) << 16) - 580780032) ^ 0xDD620000;
  unsigned int v128 = ((((LOBYTE(STACK[0x2ED]) ^ v71) - ((2 * (LOBYTE(STACK[0x2ED]) ^ v71)) & 0x38)) << 8) - 575988736) ^ 0xDDAB1C00;
  int v129 = (v127 + 2061248754 - ((2 * v127) & 0x75B80000)) ^ 0x7ADC28F2 | (v128 + 803211230 - ((2 * v128) & 0x5FC00E00)) ^ 0x2FE007DE;
  unsigned int v130 = (v129 - 1975231071 - ((2 * v129) & 0x1488BB42)) ^ 0x8A445DA1 | ((LOBYTE(STACK[0x2EE]) ^ v71)
                                                                       - 742607282
                                                                       - ((2 * (LOBYTE(STACK[0x2EE]) ^ v71)) & 0x9C)) ^ 0xD3BCB64E;
  unsigned int v131 = (((v130 - ((2 * v130) & 0xA60A6)) << 8) - 2060430592) ^ 0x85305300;
  int v132 = (v131 + 497672918 - ((2 * v131) & 0x3B53C400)) ^ 0x1DA9E2D6 | ((LOBYTE(STACK[0x2EF]) ^ v71)
                                                                      + 824704889
                                                                      - ((2 * (LOBYTE(STACK[0x2EF]) ^ v71)) & 0xF2)) ^ 0x3127FF79;
  int v133 = v132 + 826236329 - ((2 * v132) & 0x627EBB52);
  int v134 = ((((LOBYTE(STACK[0x2F0]) ^ v71) - ((2 * (LOBYTE(STACK[0x2F0]) ^ v71)) & 0x4C)) << 24) + 637534208) ^ 0x26000000;
  int v135 = (((LOBYTE(STACK[0x2F1]) ^ v71) - ((2 * LOBYTE(STACK[0x2F1])) & 0x18)) << 16) - 1022623744;
  unsigned int v136 = ((v135 ^ 0xC30C0000) + 1416662429 - ((2 * v135) & 0x28E00000)) ^ 0x54708D9D | (v134
                                                                                      - 1505840993
                                                                                      - ((2 * v134) & 0x4C000000)) ^ 0xA63EB09F;
  unsigned int v137 = ((((LOBYTE(STACK[0x2F2]) ^ v71) - ((2 * (LOBYTE(STACK[0x2F2]) ^ v71)) & 0x15A)) << 8) - 583160576) ^ 0xDD3DAD00;
  unsigned int v138 = (v136 - 2086656636 - ((2 * v136) & 0x7404B08)) ^ 0x83A02584 | (v137 + a1 - ((2 * v137) & 0x52F50C00)) ^ a1;
  unsigned int v139 = (v138 + v69 - ((2 * v138) & 0xDA79FE9C)) ^ v69 | ((LOBYTE(STACK[0x2F3]) ^ v71)
                                                         + 111839662
                                                         - ((2 * (LOBYTE(STACK[0x2F3]) ^ v71)) & 0x15C)) ^ 0x6AA89AE;
  unsigned int v140 = v139 + 2023989042 - ((2 * v139) & 0xF1473E64);
  int v141 = ((((LOBYTE(STACK[0x2F4]) ^ 0xB2) - ((2 * (LOBYTE(STACK[0x2F4]) ^ 0xB2)) & 0x17C)) << 16) + 767426560) ^ 0x2DBE0000;
  unsigned int v142 = ((((LOBYTE(STACK[0x2F5]) ^ 0xB2) - 2 * ((LOBYTE(STACK[0x2F5]) ^ 0xB2) & 0x7F)) << 8) - 171540736) ^ 0xF5C67F00;
  unsigned int v143 = (v142 - 504820194 - ((2 * v142) & 0x43D21C00)) ^ 0xE1E90E1E | (v141 - 1057057369 - ((2 * v141) & 0x1FC0000)) ^ 0xC0FE95A7;
  int v144 = (v143 + 806414140 - ((2 * v143) & 0x6021CE78)) ^ 0x3010E73C | ((LOBYTE(STACK[0x2F6]) ^ 0xB2)
                                                                      + 593766243
                                                                      - ((2 * (LOBYTE(STACK[0x2F6]) ^ 0xB2)) & 0xC6)) ^ 0x23642763;
  int v145 = (((v144 - ((2 * v144) & 0x25CF60)) << 8) + 317173760) ^ 0x12E7B000;
  unsigned int v146 = (v145 + 1518157118 - ((2 * v145) & 0xB4FA7A00)) ^ 0x5A7D3D3E | ((LOBYTE(STACK[0x2F7]) ^ 0xB2)
                                                                       + 1874533109
                                                                       - ((2 * (LOBYTE(STACK[0x2F7]) ^ 0xB2)) & 0x1EA)) ^ 0x6FBB1AF5;
  int v147 = v146 - 2085657801 - ((2 * v146) & 0x75EC66E);
  int v148 = ((((LOBYTE(STACK[0x2F8]) ^ 0xB2) - ((2 * (LOBYTE(STACK[0x2F8]) ^ 0xB2)) & 0x2C)) << 24) + 369098752) ^ 0x16000000;
  int v149 = v148 + 86413393 - ((2 * v148) & 0xA000000);
  unsigned int v150 = ((((LOBYTE(STACK[0x2F9]) ^ 0xB2) - ((2 * (LOBYTE(STACK[0x2F9]) ^ 0xB2)) & 0x128)) << 16) - 1231814656) ^ 0xB6940000;
  unsigned int v151 = ((((LOBYTE(STACK[0x2FA]) ^ 0xB2) - ((2 * (LOBYTE(STACK[0x2FA]) ^ 0xB2)) & 0x192)) << 8) - 726349568) ^ 0xD4B4C900;
  unsigned int v152 = (((v150 + 645260168 - ((2 * v150) & 0x4CEA0000)) ^ 0x2675E388 | v149 ^ 0x5269051)
        + 1669876000
        - ((2 * ((v150 + 645260168 - ((2 * v150) & 0x4CEA0000)) ^ 0x2675E388 | v149 ^ 0x5269051)) & 0xC7109240)) ^ 0x63884920 | (v151 - 331233041 - ((2 * v151) & 0x58839000)) ^ 0xEC41C8EF;
  unsigned int v153 = (v152 - 1284120467 - ((2 * v152) & 0x66EBC0DA)) ^ 0xB375E06D | ((LOBYTE(STACK[0x2FB]) ^ 0xB2)
                                                                       - 1757387106
                                                                       - ((2 * (LOBYTE(STACK[0x2FB]) ^ 0xB2)) & 0x13C)) ^ 0x9740669E;
  unsigned int v154 = v153 + 1547180312 - ((2 * v153) & 0xB8703230);
  unsigned int v155 = ((((LOBYTE(STACK[0x2FC]) ^ 0xB2) - ((2 * (LOBYTE(STACK[0x2FC]) ^ 0xB2)) & 0xFFFFFFBF)) << 16) + 1423900672) ^ 0x54DF0000;
  unsigned int v156 = ((((LOBYTE(STACK[0x2FD]) ^ 0xB2) - ((2 * (LOBYTE(STACK[0x2FD]) ^ 0xB2)) & 0xFFFFFFF3)) << 8) + 1198586112) ^ 0x4770F900;
  int v157 = (v156 + 1285931607 - ((2 * v156) & 0x194B8400)) ^ 0x4CA5C257 | (v155 + 2091063082 - ((2 * v155) & 0x79460000)) ^ 0x7CA3172A;
  unsigned int v158 = (v157 - 421492981 - ((2 * v157) & 0xCDC10E16)) ^ 0xE6E0870B | ((LOBYTE(STACK[0x2FE]) ^ 0xB2)
                                                                      - 2136260865
                                                                      - 2 * (LOBYTE(STACK[0x2FE]) ^ 0xB2)) ^ 0x80AB3EFF;
  unsigned int v159 = (((v158 - ((2 * v158) & 0xE4EE54)) << 8) - 227071488) ^ 0xF2772A00;
  unsigned int v160 = (v159 - 1115839626 - ((2 * v159) & 0x7AFB4600)) ^ 0xBD7DA376 | ((LOBYTE(STACK[0x2FF]) ^ 0xB2)
                                                                       - 1737892275
                                                                       - ((2 * LOBYTE(STACK[0x2FF])) & 0x9A)) ^ 0x9869DE4D;
  unsigned int v161 = v160 - 814243029 - ((2 * v160) & 0x9EEF4656);
  int v162 = ((((LOBYTE(STACK[0x300]) ^ 0xB2) - ((2 * (LOBYTE(STACK[0x300]) ^ 0xB2)) & 0xE8)) << 24) + 1946157056) ^ 0x74000000;
  unsigned int v163 = ((((LOBYTE(STACK[0x301]) ^ 0xB2) + (~(2 * (LOBYTE(STACK[0x301]) ^ 0xB2)) | 0xFF39)) << 16) - 1788608512) ^ 0x95630000;
  unsigned int v164 = (v163 - 403521879 - ((2 * v163) & 0xFE40000)) ^ 0xE7F2BEA9 | (v162 - 1650521732 - ((2 * v162) & 0x3A000000)) ^ 0x9D9F097C;
  unsigned int v165 = ((((LOBYTE(STACK[0x302]) ^ 0xB2) - ((2 * (LOBYTE(STACK[0x302]) ^ 0xB2)) & 0x1D6)) << 8) - 1713968384) ^ 0x99D6EB00;
  unsigned int v166 = (v164 + 467496428 - ((2 * v164) & 0x37BADBD8)) ^ 0x1BDD6DEC | (v165 - 760064841 - ((2 * v165) & 0x2564A800)) ^ 0xD2B254B7;
  unsigned int v167 = (v166 + 1253342796 - ((2 * v166) & 0x9568FC98)) ^ 0x4AB47E4C | ((LOBYTE(STACK[0x303]) ^ 0xB2)
                                                                       - 1149597866
                                                                       - ((2 * (LOBYTE(STACK[0x303]) ^ 0xB2)) & 0xAC)) ^ 0xBB7A8756;
  int v168 = v167 + 424614887 - ((2 * v167) & 0x329E37CE);
  unsigned int v169 = ((((LOBYTE(STACK[0x304]) ^ 0xB2) - ((2 * (LOBYTE(STACK[0x304]) ^ 0xB2)) & 0xDDDDDDDD)) << 16) - 1158807552) ^ 0xBAEE0000;
  int v170 = ((((LOBYTE(STACK[0x305]) ^ 0xB2) - ((2 * (LOBYTE(STACK[0x305]) ^ 0xB2)) & 0x1F4)) << 8) + 923073024) ^ 0x3704FA00;
  int v171 = (v170 + 2121350890 - ((2 * v170) & 0x7CE27C00)) ^ 0x7E713EEA | (v169 + 1029347520 - ((2 * v169) & 0x7AB40000)) ^ 0x3D5A98C0;
  unsigned int v172 = (v171 - 1419535120 - ((2 * v171) & 0x56C739E0)) ^ 0xAB639CF0 | ((LOBYTE(STACK[0x306]) ^ 0xB2)
                                                                       - 2012668430
                                                                       - ((2 * (LOBYTE(STACK[0x306]) ^ 0xB2)) & 0x1E4)) ^ 0x88091DF2;
  unsigned int v173 = (((v172 - ((2 * v172) & 0xE4C9E6)) << 8) - 228265216) ^ 0xF264F300;
  unsigned int v174 = (v173 + 2053084726 - ((2 * v173) & 0xF4BF2C00)) ^ 0x7A5F9636 | ((LOBYTE(STACK[0x307]) ^ 0xB2)
                                                                       - 1755544072
                                                                       - ((2 * (LOBYTE(STACK[0x307]) ^ 0xB2)) & 0x1F0)) ^ 0x975C85F8;
  unsigned int v175 = v174 - 17376681 - ((2 * v174) & 0xFDEDB4AE);
  unsigned int v176 = ((((LOBYTE(STACK[0x308]) ^ 0xB2) - ((2 * (LOBYTE(STACK[0x308]) ^ 0xB2)) & 0xBC)) << 24) - 570425344) ^ 0xDE000000;
  int v177 = ((((LOBYTE(STACK[0x309]) ^ 0xB2) - ((2 * (LOBYTE(STACK[0x309]) ^ 0xB2)) & 0x3A)) << 16) + 421330944) ^ 0x191D0000;
  unsigned int v178 = (v177 + a5 - ((2 * v177) & 0x31260000)) ^ a5 | (v176 - 197370902 - ((2 * v176) & 0xE8000000)) ^ 0xF43C5BEA;
  int v179 = ((((LOBYTE(STACK[0x30A]) ^ 0xB2) - ((2 * (LOBYTE(STACK[0x30A]) ^ 0xB2)) & 0x18C)) << 8) + 1015989760) ^ 0x3C8EC600;
  unsigned int v180 = (v178 + 39314845 - ((2 * v178) & 0x4AFCB3A)) ^ 0x257E59D | (v179 - 2011122465 - ((2 * v179) & 0x10416800)) ^ 0x8820B4DF;
  unsigned int v181 = (v180 + 1128619430 - ((2 * v180) & 0x868ABB4C)) ^ 0x43455DA6 | ((LOBYTE(STACK[0x30B]) ^ 0xB2)
                                                                       - 919687594
                                                                       - ((2 * (LOBYTE(STACK[0x30B]) ^ 0xB2)) & 0xAC)) ^ 0xC92EAE56;
  unsigned int v182 = v181 + 1742929315 - ((2 * v181) & 0xCFC5FB46);
  int v183 = ((((LOBYTE(STACK[0x30C]) ^ 0xB2) - ((2 * (LOBYTE(STACK[0x30C]) ^ 0xB2)) & 0x100)) << 16) + 360710144) ^ 0x15800000;
  unsigned int v184 = ((((LOBYTE(STACK[0x30D]) ^ 0xB2) - ((2 * (LOBYTE(STACK[0x30D]) ^ 0xB2)) & 0x60)) << 8) - 1078906880) ^ 0xBFB13000;
  unsigned int v185 = (v184 - 801530932 - ((2 * v184) & 0x20733600)) ^ 0xD0399BCC | (v183 - 2056072240 - ((2 * v183) & 0xAE40000)) ^ 0x8572D3D0;
  unsigned int v186 = (v185 - 1446626649 - ((2 * v185) & 0x538C754E)) ^ 0xA9C63AA7 | ((LOBYTE(STACK[0x30E]) ^ 0xB2)
                                                                       + 941488810
                                                                       - ((2 * (LOBYTE(STACK[0x30E]) ^ 0xB2)) & 0x55555555)) ^ 0x381DFAAA;
  unsigned int v187 = (((v186 - ((2 * v186) & 0x24C2EC)) << 8) - 1839106560) ^ 0x92617600;
  HIDWORD(v983) = v105;
  unsigned int v188 = (v187 + 884427163 - ((2 * v187) & 0x696E9200)) ^ 0x34B7499B | ((LOBYTE(STACK[0x30F]) ^ 0xB2)
                                                                      + 1155882912
                                                                      + (~(2 * (LOBYTE(STACK[0x30F]) ^ 0xB2)) | 0xFFFFFEBF)
                                                                      + 1) ^ 0x44E55FA0;
  int v189 = v188 + 419754187 - ((2 * v188) & 0x3209E196);
  unsigned int v1004 = v1025 ^ 0xEDFC538E;
  unsigned int v190 = (((2 * ((v189 ^ v1004) & 0xFFFFFFF7 ^ 0xC79CCF41)) | 0xD9E21900)
        - ((v189 ^ v1004) & 0xFFFFFFF7 ^ 0xC79CCF41)
        + 319746944) ^ 0x6C72889C;
  unsigned int v191 = v190 - ((2 * v190) & 0xA016E640);
  HIDWORD(v94) = v140 ^ v1021 ^ v175 ^ v1025 ^ 0xEDFC538E ^ 0x7118D567;
  LODWORD(v94) = v140 ^ v1021 ^ v175 ^ v1025 ^ 0xEDFC538E;
  unsigned int v192 = (v94 >> 31) + 725785937 - ((2 * (v94 >> 31)) & 0x56853AA2);
  unsigned int v193 = (v189 ^ v1025 ^ 0xEDFC538E) & 8 ^ 0xC7FF557F;
  HIDWORD(v984) = v113;
  BOOL v194 = ((v193 + 9) & ~(v154 ^ v113) & 8) == 0;
  unsigned int v195 = v193 + 998046716;
  unsigned int v196 = -881088790 - v193;
  if (v194) {
    unsigned int v196 = v195;
  }
  unsigned int v197 = ((v154 ^ v113 ^ 0x8B08F60F)
        - 58478963
        + v196
        - ((2 * ((v154 ^ v113 ^ 0x8B08F60F) - 58478963 + v196)) & 0x14F52A64)
        - 1971677902) ^ (v191 - 804556000);
  HIDWORD(v198) = v197 ^ 0x3A39F73A;
  LODWORD(v198) = v197;
  int v199 = (v198 >> 31) + 1007401326 - ((2 * (v198 >> 31)) & 0x781772DC);
  HIDWORD(v198) = v105 ^ v983 ^ v147 ^ v182 ^ 0x788EBC0B;
  LODWORD(v198) = v105 ^ v983 ^ v147 ^ v182;
  int v200 = (v198 >> 31) - 1340504480 - ((2 * (v198 >> 31)) & 0x60330CC0);
  int v201 = v200 ^ v168;
  unsigned int v202 = ((2 * (v201 & 1)) ^ 2) & 0xFFFFFFFE | v201 & 1;
  unsigned int v203 = v126 ^ 0xBDE2C89E;
  HIDWORD(v986) = v203;
  BOOL v194 = ((v202 - 1) & v203) - 343843476 - ((2 * ((v202 - 1) & v203)) & 0xD702BAC2) == -343843476;
  int v204 = v202 + 940572005;
  int v205 = v202 ^ 0x380FFD67;
  if (v194) {
    int v205 = v204;
  }
  unsigned int v206 = ((v201 & 0x9D330564 ^ 0x8D130005 | v201 & 0x62CCFA9A) - 1) ^ 0xA7579DB7;
  unsigned int v207 = v119;
  HIDWORD(v985) = v119;
  HIDWORD(v208) = v119 ^ v105 ^ v161 ^ v192 ^ 0x56D4D300;
  LODWORD(v208) = v119 ^ v105 ^ v161 ^ v192;
  unsigned int v209 = (v208 >> 31) - 1305986495 - ((2 * (v208 >> 31)) & 0x64507482);
  unsigned int v210 = (v206 - ((2 * v206) & 0xEA735EE6) + 1966714739) ^ v113 ^ (v203
                                                                 - 940572006
                                                                 + v205
                                                                 - ((2 * (v203 - 940572006 + v205)) & 0xE0EA06BC)
                                                                 + 1886716766);
  HIDWORD(v208) = v210 ^ 0x516E430F;
  LODWORD(v208) = v210;
  unsigned int v211 = (v208 >> 31) - 2119550893 - ((2 * (v208 >> 31)) & 0x35470A6);
  int v212 = v133;
  LODWORD(v985) = v133;
  unsigned int v213 = v175;
  HIDWORD(v989) = v175;
  int v214 = v133 ^ v207 ^ v175;
  int v215 = v199;
  HIDWORD(v208) = v214 ^ 0x11286DD3 ^ v199;
  LODWORD(v208) = v214 ^ ~v199;
  int v216 = (v208 >> 31) + 1000135828 - ((2 * (v208 >> 31)) & 0x7739B928);
  unint64_t v987 = __PAIR64__(v147, v140);
  HIDWORD(v208) = v140 ^ v126 ^ v182 ^ v209 ^ 0x108B904E;
  LODWORD(v208) = v140 ^ v126 ^ v182 ^ v209;
  unsigned int v217 = (v208 >> 31) - 420669927 - ((2 * (v208 >> 31)) & 0xCDDA2C32);
  HIDWORD(v208) = v147 ^ v212 ^ v189 ^ v211 ^ 0x2A3EF606;
  LODWORD(v208) = v147 ^ v212 ^ v189 ^ v211;
  int v218 = (v208 >> 31) - ((2 * (v208 >> 31)) & 0xB3E7CFD2);
  unint64_t v988 = __PAIR64__(v161, v154);
  HIDWORD(v208) = v154 ^ v140 ^ v192 ^ v216 ^ 0x3445C7EF;
  LODWORD(v208) = v154 ^ v140 ^ v192 ^ v216;
  unsigned int v219 = (v208 >> 31) + 249900390 - ((2 * (v208 >> 31)) & 0x1DCA5ACC);
  v218 += 1509156841;
  int v220 = v168;
  LODWORD(v986) = v168;
  HIDWORD(v208) = v168 ^ v154 ^ v218 ^ v199 ^ 0x208F5C78;
  LODWORD(v208) = v168 ^ v154 ^ v218 ^ v199;
  int v221 = (v208 >> 31) - 1215411149 - ((2 * (v208 >> 31)) & 0x6F1C9866);
  int v222 = v213 ^ v161 ^ v209;
  HIDWORD(v208) = v222 ^ 0xD4C6E5B ^ v219;
  LODWORD(v208) = v222 ^ ~v219;
  int v223 = v208 >> 31;
  HIDWORD(v994) = v161 ^ v147 ^ v200 ^ v217;
  HIDWORD(v208) = HIDWORD(v994) ^ 0x1A2C5065;
  LODWORD(v208) = HIDWORD(v994);
  int v224 = v223 + 266565322 - ((2 * v223) & 0x1FC6ED94);
  int v225 = (v208 >> 31) - 272842023 - ((2 * (v208 >> 31)) & 0xDF7985B2);
  HIDWORD(v208) = v189 ^ v213 ^ v216 ^ v221 ^ 0x6BE0BA3B;
  LODWORD(v208) = v189 ^ v213 ^ v216 ^ v221;
  int v226 = v208 >> 31;
  LODWORD(v989) = v182;
  HIDWORD(v208) = v182 ^ v220 ^ v211 ^ v225 ^ 0x10BB1CCE;
  LODWORD(v208) = v182 ^ v220 ^ v211 ^ v225;
  int v227 = v226 - 1747190291 - ((2 * v226) & 0x2FB7FBDA);
  int v228 = v218 ^ 0x30223A60 ^ ((v208 >> 31) + 1775361417 - ((2 * (v208 >> 31)) & 0xD3A3BB12));
  unsigned int v229 = (v208 >> 31) + 1775361417 - ((2 * (v208 >> 31)) & 0xD3A3BB12);
  LODWORD(v984) = v200 ^ 0xB0198660;
  unsigned int v230 = (v228 & (v200 ^ 0xB0198660)) - ((2 * (v228 & (v200 ^ 0xB0198660))) & 0x3320A508);
  unsigned int v231 = ((v228 + (v200 ^ 0xB0198660)) ^ 0x5BFFDFFD)
       + ((2 * (v228 + (v200 ^ 0xB0198660))) & 0xB7FFBFFA)
       + ((2 * v230 + 857777416) ^ 0xAFC0E169)
       + ((2 * (2 * v230 + 857777416)) & 0xC63F773C ^ 0xB9FEBDEF)
       + 1;
  unsigned int v232 = ((2 * v218) ^ 0xB3E7CFD2) - 2 * (((2 * v218) ^ 0xB3E7CFD2) & 0x17947BEC ^ (2 * v218) & 0xC);
  unsigned int v233 = v231 - ((2 * v231 + 239056708) & 0x9422D2E4) - 785300204;
  HIDWORD(v208) = v233 ^ v189 ^ 0x531599B9;
  LODWORD(v208) = v233 ^ ~v189;
  unsigned int v234 = (v208 >> 31) - 860513554 - ((2 * (v208 >> 31)) & 0x996B35DC);
  unsigned int v235 = (v218 ^ 0x65C1F4D0)
       + ((v232 - 1751876640) & 0x78642672 ^ 0xEDEEDDDD)
       + ((2 * (v232 - 1751876640)) & 0xF0C04C60 ^ 0x20004440)
       + 34930755;
  unint64_t v991 = __PAIR64__(v217, v192);
  int v236 = v192 ^ v182 ^ v217;
  int v237 = v224;
  HIDWORD(v208) = v236 ^ 0x25AE0021 ^ v224;
  LODWORD(v208) = v236 ^ ~v224;
  unsigned int v238 = (v208 >> 31) + 994458885 - ((2 * (v208 >> 31)) & 0x768C7A0A);
  HIDWORD(v992) = v215;
  unint64_t v993 = __PAIR64__(v211, v209);
  int v239 = v215 ^ v192 ^ v219;
  int v240 = v227;
  HIDWORD(v208) = v239 ^ v227 ^ 0xE77F4B4;
  LODWORD(v208) = v239 ^ ~v227;
  int v241 = v208 >> 31;
  int v242 = v209 ^ v200 ^ v225;
  unsigned int v243 = v238;
  HIDWORD(v208) = v242 ^ 0x56CB43FD ^ v238;
  LODWORD(v208) = v242 ^ ~v238;
  int v244 = v241 - 1983874597 - ((2 * v241) & 0x1380F3B6);
  int v245 = (v208 >> 31) + 1641975471 - ((2 * (v208 >> 31)) & 0xC3BD1D5E);
  unsigned int v246 = v211;
  int v247 = v211 ^ v215 ^ v221;
  unsigned int v248 = v234;
  HIDWORD(v208) = v247 ^ 0x469A57E0 ^ v234;
  LODWORD(v208) = v247 ^ ~v234;
  int v249 = (v208 >> 31) + 381751388 - ((2 * (v208 >> 31)) & 0x2D8220B8);
  int v250 = v225;
  LODWORD(v992) = v225;
  HIDWORD(v208) = v225 ^ 0x2FBCC2D9;
  LODWORD(v208) = ~v225;
  int v251 = (v208 >> 30) - ((2 * (v208 >> 30)) & 0x7F56ECCC);
  HIDWORD(v990) = v216;
  HIDWORD(v208) = v216 ^ v209 ^ v237 ^ v244 ^ 0xF97E9C4;
  LODWORD(v208) = v216 ^ v209 ^ v237 ^ v244;
  unsigned int v252 = (v208 >> 31) - 1044527805 - ((2 * (v208 >> 31)) & 0x837B8A86);
  int v253 = v245;
  HIDWORD(v208) = v246 ^ v217 ^ v229 ^ v245 ^ 0x6F487D6C;
  LODWORD(v208) = v246 ^ v217 ^ v229 ^ v245;
  unsigned int v254 = (v208 >> 31) - 1399596956 - ((2 * (v208 >> 31)) & 0x5927B0C8);
  LODWORD(v990) = ((2 * v235) & 0xFF7ABBEA)
                + (v235 ^ 0xFFBD5DF5)
                - ((2 * (((2 * v235) & 0xFF7ABBEA) + (v235 ^ 0xFFBD5DF5)) - 2011095644) & 0x80790206)
                - 2075324459;
  HIDWORD(v208) = v240 ^ v216 ^ v990 ^ v249 ^ 0x7ABAB026;
  LODWORD(v208) = v240 ^ v216 ^ v990 ^ v249;
  unsigned int v255 = (v208 >> 31) + 877958569 - ((2 * (v208 >> 31)) & 0x68A92B52);
  unsigned int v256 = v254;
  HIDWORD(v208) = v254 ^ v248 ^ 0x2026428A;
  LODWORD(v208) = v254 ^ v248 ^ 0x40000000;
  int v257 = (v208 >> 30) - ((2 * (v208 >> 30)) & 0x762570A2);
  unint64_t v995 = __PAIR64__(v237, v219);
  HIDWORD(v208) = v219 ^ v217 ^ v243 ^ v252 ^ 0x12F3C339;
  LODWORD(v208) = v219 ^ v217 ^ v243 ^ v252;
  int v258 = (v257 + 991082577) ^ (v251 - 1079282074);
  unsigned int v259 = (v208 >> 31) + 1401457619 - ((2 * (v208 >> 31)) & 0xA71117A6);
  HIDWORD(v208) = v258 ^ 1;
  LODWORD(v208) = v258 ^ 0x994BBA14;
  int v260 = ((v208 >> 2) - ((2 * (v208 >> 2)) & 0x8052846E) + 1076445751) ^ v990;
  int v261 = (((v260 ^ 0x3DD08585) & 0x24A36AF5 ^ 0x24830280)
        - ((2 * ((v260 ^ 0x3DD08585) & 0x24A36AF5 ^ 0x24830280)) & 0x4940D568)
        + 2126047926) ^ 0x62B0AE97;
  unsigned int v262 = (((2 * v261) | 0x73565290) - v261 - 967518536) ^ 0x21812558 | (((2
                                                                        * ((v260 ^ 0x3DD08585) & 0x5B5C950A ^ 0xB058955D)) & 0x82B82228)
                                                                      - ((v260 ^ 0x3DD08585) & 0x5B5C950A ^ 0xB058955D)
                                                                      - 1096579509) ^ 0x14E3821E;
  HIDWORD(v208) = (v262 + 1095173426 - ((2 * v262) & 0x28E0A64)) ^ 0x41470532;
  LODWORD(v208) = v260;
  unsigned int v263 = (v208 >> 31) - 656399404 - ((2 * (v208 >> 31)) & 0xB1C047A8);
  int v264 = v237;
  int v265 = v253;
  int v266 = v237 ^ v250 ^ v253;
  unsigned int v267 = v259;
  HIDWORD(v208) = v266 ^ v259 ^ 0x5209B16F;
  LODWORD(v208) = v266 ^ ~v259;
  unsigned int v268 = (v208 >> 31) - 1833689856 - ((2 * (v208 >> 31)) & 0x25683A00);
  LODWORD(v994) = v221;
  unsigned int v269 = v255;
  HIDWORD(v208) = v221 ^ v219 ^ v244 ^ v255 ^ 0x4FF8D27;
  LODWORD(v208) = v221 ^ v219 ^ v244 ^ v255;
  int v270 = (v208 >> 31) + 2012571490 - ((2 * (v208 >> 31)) & 0xEFEACEC4);
  unint64_t v997 = __PAIR64__(v248, v240);
  int v271 = v249;
  HIDWORD(v999) = v249;
  HIDWORD(v208) = v221 ^ v229 ^ v249 ^ v263 ^ 0x107EA232;
  LODWORD(v208) = v221 ^ v229 ^ v249 ^ v263;
  unsigned int v272 = (v208 >> 31) - 1761954546 - ((2 * (v208 >> 31)) & 0x2DF56A1C);
  int v273 = v240;
  int v274 = v240 ^ v264 ^ v252 ^ v270;
  int v275 = v270;
  HIDWORD(v208) = v274 ^ 0x2E702906;
  LODWORD(v208) = v274;
  unsigned int v276 = (v208 >> 31) + 1454292477 - ((2 * (v208 >> 31)) & 0xAD5D7BFA);
  unsigned int v277 = v243;
  unint64_t v996 = __PAIR64__(v229, v243);
  HIDWORD(v208) = v243 ^ v229 ^ v256 ^ v268 ^ 0x6CB025E8;
  LODWORD(v208) = v243 ^ v229 ^ v256 ^ v268;
  int v278 = (v208 >> 31) - 1674801334 - ((2 * (v208 >> 31)) & 0x38591E94);
  unsigned int v279 = v248;
  int v280 = v248 ^ v273 ^ v269;
  unsigned int v281 = v269;
  HIDWORD(v208) = v280 ^ 0x79C047A4 ^ v272;
  LODWORD(v208) = v280 ^ ~v272;
  int v282 = v208 >> 31;
  int v283 = v265;
  LODWORD(v999) = v265;
  int v284 = v265 ^ v279 ^ v278;
  HIDWORD(v208) = v284 ^ 0x69A7B8DF ^ v263;
  LODWORD(v208) = v284 ^ ~v263;
  int v285 = (v208 >> 31) - 2001794253 - ((2 * (v208 >> 31)) & 0x115E1666);
  unint64_t v998 = __PAIR64__(v263, v244);
  unsigned int v286 = v282 - 569312700 - ((2 * v282) & 0xBC21F488);
  HIDWORD(v208) = v271 ^ v244 ^ v275 ^ v286 ^ 0x36E4F4A1;
  LODWORD(v208) = v271 ^ v244 ^ v275 ^ v286;
  unsigned int v287 = (v208 >> 31) + 1767589332 - ((2 * (v208 >> 31)) & 0xD2B68BA8);
  int v288 = v244 ^ v277 ^ v267;
  unsigned int v289 = v276;
  HIDWORD(v208) = v288 ^ 0x37A072F0 ^ v276;
  LODWORD(v208) = v288 ^ ~v276;
  unsigned int v290 = (v208 >> 31) - 506828809 - ((2 * (v208 >> 31)) & 0xC394CFEE);
  unsigned int v291 = v256;
  unint64_t v1000 = __PAIR64__(v256, v252);
  int v292 = v256 ^ v271 ^ v285;
  int v293 = v285;
  unsigned int v294 = v272;
  HIDWORD(v208) = v292 ^ v272 ^ 0x24077605;
  LODWORD(v208) = v292 ^ ~v272;
  unsigned int v295 = (v208 >> 31) - 1665211380 - ((2 * (v208 >> 31)) & 0x397DC818);
  int v296 = v252 ^ v283 ^ v268;
  unsigned int v297 = v290;
  HIDWORD(v208) = v296 ^ 0x531D311B ^ v290;
  LODWORD(v208) = v296 ^ ~v290;
  int v298 = (v208 >> 31) + 1121785301 + (~(2 * (v208 >> 31)) | 0x7A45D455);
  unsigned int v299 = v281;
  unint64_t v1001 = __PAIR64__(v267, v281);
  int v300 = v281 ^ v252 ^ v289;
  unsigned int v301 = v287;
  HIDWORD(v208) = v300 ^ 0x4A1CA8C3 ^ v287;
  LODWORD(v208) = v300 ^ ~v287;
  unsigned int v302 = (v208 >> 31) + 149528746 - ((2 * (v208 >> 31)) & 0x11D34154);
  unsigned int v303 = v298 + 1;
  int v304 = v267 ^ v291 ^ v278 ^ (v298 + 1);
  HIDWORD(v208) = v304 ^ 0x21EAC928;
  LODWORD(v208) = v304;
  unsigned int v305 = (v208 >> 31) + 1443197012 - ((2 * (v208 >> 31)) & 0xAC0AE0A8);
  unsigned int v306 = v268;
  LODWORD(v1002) = v275;
  *(void *)((char *)&v1002 + 4) = __PAIR64__(v272, v268);
  int v307 = v263 ^ v268 ^ v305 ^ v293;
  int v308 = v293;
  unsigned int v309 = v307 >> 31;
  LOBYTE(v217) = ((2 * (v307 < 0)) ^ 2) + 73 - 2 * ((2 * (v307 < 0)) ^ 2);
  int v310 = v275 ^ v267 ^ v297;
  unsigned int v311 = v302;
  HIDWORD(v208) = v310 ^ 0x4D5E2BEC ^ v302;
  LODWORD(v208) = v310 ^ ~v302;
  int v312 = (v208 >> 31) + 952031870 - ((2 * (v208 >> 31)) & 0x717DB4FC);
  unsigned int v313 = v294;
  int v314 = ((v294 << 22) ^ 0x43800000) - ((2 * ((v294 << 22) ^ 0x43800000)) & 0x7A000000);
  unsigned int v315 = ((v307 >> 31)
        - 37388692
        + ((2 * v307) ^ 0x29FC8B66)
        - ((2 * ((2 * v307) ^ 0x29FC8B66)) & 0xFB8AFCD8)) ^ 0xFDC57E6D;
  int v316 = v315 - 1546779553 - ((2 * v315) & 0x479C08BE);
  int v317 = v263 ^ v299 ^ v286;
  HIDWORD(v208) = v317 ^ v295 ^ 0x2E1AA835;
  LODWORD(v208) = v317 ^ ~v295;
  int v318 = v294 ^ v275 ^ v301 ^ ((v208 >> 31) - 1693099598 - ((2 * (v208 >> 31)) & 0x362AB364));
  unsigned int v319 = (v208 >> 31) - 1693099598 - ((2 * (v208 >> 31)) & 0x362AB364);
  unsigned int v320 = ((((v318 ^ 0x1341CE0Au) >> (v309 ^ 1)) + 381950071 - ((2 * ((v318 ^ 0x1341CE0Au) >> (v309 ^ 1))) & 0x2D8830EE)) ^ 0x16C41877) >> (((v217 + 13) ^ 0x49) + (v309 ^ 1));
  HIDWORD(v1002) = v278;
  int v321 = v295 ^ v278 ^ v316;
  int v322 = v316;
  HIDWORD(v208) = v321 ^ 0x319;
  LODWORD(v208) = v321 ^ 0xA35C6C00;
  int v323 = ((v208 >> 10) - ((2 * (v208 >> 10)) & 0x80DF5E60) + 1081061168) ^ (v314 + 1024009302);
  unint64_t v1003 = __PAIR64__(v286, v289);
  int v324 = v289 ^ v306 ^ v303;
  HIDWORD(v208) = v324 ^ 0x3E796F56 ^ v312;
  LODWORD(v208) = v324 ^ ~v312;
  unsigned int v325 = (v208 >> 31) + 948077376 - ((2 * (v208 >> 31)) & 0x71050680);
  HIDWORD(v208) = v323 ^ (v313 >> 10) ^ 0x243BAE;
  LODWORD(v208) = v323 ^ 0xFC00000;
  int v326 = (v208 >> 22) - ((2 * (v208 >> 22)) & 0xADDAD3EC);
  int v327 = (v320 - ((2 * v320) & 0x2E) - 105) ^ 0x18780517;
  unsigned int v328 = (((2 * v327) & 0x302002F4) - v327 + 552184965) & 0x30800BFF ^ 0x30800905 | (((2 * v318) ^ 0x26839C14)
                                                                                   - 2141719862
                                                                                   - ((2 * ((2 * v318) ^ 0x26839C14)) & 0xAFE594)) ^ 0x8057F2CA;
  int v329 = v328 - 2083199655 - ((2 * v328) & 0x7A9CAB2);
  unsigned int v330 = v286;
  HIDWORD(v208) = v286 ^ v289 ^ v302 ^ v329 ^ 0x383024A;
  LODWORD(v208) = v286 ^ v289 ^ v302 ^ v329;
  int v331 = (v208 >> 31) + 900284854 - ((2 * (v208 >> 31)) & 0x6B52836C);
  LODWORD(v1010) = v312 ^ 0x38BEDA7E;
  HIDWORD(v1013) = v331 ^ 0x35A941B6;
  HIDWORD(v208) = (v326 + HIDWORD(a18)) ^ 0x4AD4FC3C;
  LODWORD(v208) = -1458399735 - v326;
  unsigned int v332 = (~v301 & 0x40 ^ 0xFB97DFFF) + 2 * (~v301 & 0x40);
  int v333 = (v208 >> 31) - 430271950 - ((2 * (v208 >> 31)) & 0xCCB52464);
  int v334 = 2
       * (((v331 ^ 0x35A941B6) & (v312 ^ 0x38BEDA7E)) - ((2 * ((v331 ^ 0x35A941B6) & (v312 ^ 0x38BEDA7E))) & 0x48126B66))
       + 1209166694;
  unsigned int v335 = (((v331 ^ 0x35A941B6) + (v312 ^ 0x38BEDA7E)) ^ 0x7DAE7DBB)
       + ((2 * ((v331 ^ 0x35A941B6) + (v312 ^ 0x38BEDA7E))) & 0xFB5CFB76)
       + (v334 ^ 0x98FE234D)
       + ((2 * v334) & 0x5E276FA8 ^ 0xEFDBB977);
  BOOL v194 = ((v335 - 1318766053) & (v332 + 73932801))
       + 499117406
       - ((2 * ((v335 - 1318766053) & (v332 + 73932801))) & 0x3B7FDA80) == 499117406;
  unsigned int v336 = v332 + 1988082430;
  unsigned int v337 = 1840216828 - v332;
  if (!v194) {
    unsigned int v336 = v337;
  }
  unsigned int v338 = v335 + v336;
  unsigned int v339 = v301;
  unint64_t v1007 = __PAIR64__(v295, v301);
  unsigned int v340 = ((v301 & 0xFFFFFFBF ^ 0xA0CD89F)
        + (v301 & 0x10C6D7A0 ^ 0x10C20720)
        - ((v301 & 0xFFFFFFBF ^ 0xA0CD89F) & 0x10C6D7A0)) ^ 0x1281CFA2;
  unsigned int v341 = v297;
  unint64_t v1006 = __PAIR64__(v303, v297);
  HIDWORD(v342) = v297 ^ v278 ^ v305 ^ v325 ^ 0x13611BA9;
  LODWORD(v342) = v297 ^ v278 ^ v305 ^ v325;
  unsigned int v343 = (v342 >> 31) + 358033128 - ((2 * (v342 >> 31)) & 0x2AAE4DD0);
  unsigned int v344 = (2044821412 - (v340 | 0x79E17FA4) + (v340 | 0x861E805B)) ^ v341 ^ (v338
                                                                          + 1
                                                                          - ((2 * (v338 + 1) + 2124103226) & 0x6CA5D1DA)
                                                                          + 1973454858);
  HIDWORD(v1005) = v308;
  HIDWORD(v342) = v330 ^ v308 ^ v319 ^ v333 ^ 0x2BF03AF7;
  LODWORD(v342) = v330 ^ v308 ^ v319 ^ v333;
  int v345 = (v342 >> 31) + 2016397744 - ((2 * (v342 >> 31)) & 0xF05F9360);
  LODWORD(v1013) = v345 ^ 0x782FC9B0;
  int v346 = (v345 ^ 0x782FC9B0) + (v345 ^ v329 ^ 0x404D316) + 1;
  int v347 = v329;
  HIDWORD(v342) = v339 ^ v295 ^ 0x65A1D8;
  LODWORD(v342) = v339 ^ v295 ^ 0xF5800000;
  int v348 = v342 >> 23;
  HIDWORD(v342) = v344 ^ 0x30968A48;
  LODWORD(v342) = v344;
  int v349 = v342 >> 31;
  unsigned int v350 = (v329 ^ ((v329 ^ 0x7C2B1AA6) - ((2 * (v329 ^ 0x7C2B1AA6) + 2) & 0x85407948) + 1117797541) ^ 0xF3483568 ^ (v346 - ((2 * v346) & 0x6479D92A) + 842853525))
       + (v345 ^ 0x782FC9B0);
  unsigned int v351 = ((2 * v350) & 0x9CE3FDAC) + (v350 ^ 0x4E71FED6);
  HIDWORD(v342) = v351 + 917802;
  LODWORD(v342) = v351 - 1316093654;
  int v352 = ((v342 >> 23) - ((2 * (v342 >> 23)) & 0xFC66E26) - 2015152365) ^ (v348 - ((2 * v348) & 0x204DD93C) - 1876497250);
  HIDWORD(v342) = v352 ^ 0x170;
  LODWORD(v342) = v352 ^ 0x8A1B9600;
  int v353 = v349 - 2103371346 - ((2 * v349) & 0x542335C);
  int v354 = (v342 >> 9) + 1758648140 - ((2 * (v342 >> 9)) & 0xD1A5AE98);
  HIDWORD(v342) = v308 ^ v303 ^ v322 ^ v343 ^ 0x7CEB3C51;
  LODWORD(v342) = v308 ^ v303 ^ v322 ^ v343;
  unsigned int v355 = (v342 >> 31) - 2088051749 - ((2 * (v342 >> 31)) & 0x715B7B6);
  HIDWORD(v342) = v354 ^ 0x68D2D74C;
  LODWORD(v342) = v354;
  int v356 = v342 >> 31;
  int v357 = v311 ^ v303 ^ v325;
  HIDWORD(v342) = v357 ^ 0x70172F91 ^ v353;
  LODWORD(v342) = v357 ^ ~v353;
  int v358 = (v342 >> 31) + 77405974 - ((2 * (v342 >> 31)) & 0x93A3E2C);
  int v359 = v295 ^ v305 ^ v333;
  unsigned int v360 = v355;
  HIDWORD(v342) = v359 ^ 0x2F6BDDB1 ^ v355;
  LODWORD(v342) = v359 ^ ~v355;
  int v361 = (v342 >> 31) - 630544468 - ((2 * (v342 >> 31)) & 0xB4D54F58);
  LODWORD(v1014) = v356 - ((2 * v356) & 0x7F438D82) - 1079916863;
  unint64_t v1008 = __PAIR64__(v322, v319);
  HIDWORD(v342) = v311 ^ v319 ^ v331 ^ v1014 ^ 0xA17C7A07 ^ 0x4515DA24;
  LODWORD(v342) = v311 ^ v319 ^ v331 ^ v1014 ^ 0xA17C7A07;
  int v362 = v342 >> 31;
  int v363 = v358;
  HIDWORD(v342) = v312 ^ v305 ^ v343 ^ v358 ^ 0x7F7193D4;
  LODWORD(v342) = v312 ^ v305 ^ v343 ^ v358;
  int v364 = v362 - 1368165898 - ((2 * v362) & 0x5CE6E3EC);
  unsigned int v365 = (v342 >> 31) - 53038096 - ((2 * (v342 >> 31)) & 0xF9AD67E0);
  int v366 = v319 ^ v322 ^ v345;
  int v367 = v361;
  HIDWORD(v1014) = v361;
  HIDWORD(v342) = v366 ^ 0x1A9E33F1 ^ v361;
  LODWORD(v342) = v366 ^ ~v361;
  int v368 = (v342 >> 31) - 1312802043 - ((2 * (v342 >> 31)) & 0x6380760A);
  unint64_t v1009 = __PAIR64__(v325, v347);
  int v369 = v347 ^ v312 ^ v353;
  int v370 = v364;
  unint64_t v1015 = __PAIR64__(v365, v364);
  HIDWORD(v342) = v369 ^ 0x17B8577F ^ v364;
  LODWORD(v342) = v369 ^ ~v364;
  int v371 = v342 >> 31;
  int v372 = v325 ^ v322 ^ v360;
  unsigned int v373 = v365;
  HIDWORD(v342) = v372 ^ 0x6410EF34 ^ v365;
  LODWORD(v342) = v372 ^ ~v365;
  int v374 = v371 - 1838332087 - ((2 * v371) & 0x24DA8E92);
  int v375 = (v342 >> 31) + 537775853 - ((2 * (v342 >> 31)) & 0x401B9DDA);
  HIDWORD(v1010) = v333;
  int v376 = v368;
  int v1017 = v368;
  HIDWORD(v342) = v347 ^ v333 ^ v368 ^ v1014 ^ 0xA17C7A07 ^ 0x370E2EE4;
  LODWORD(v342) = v347 ^ v333 ^ v368 ^ v1014 ^ 0xA17C7A07;
  int v377 = (v342 >> 31) + 277393893 - ((2 * (v342 >> 31)) & 0x211163CA);
  int v378 = v331 ^ v325 ^ v363;
  HIDWORD(v1012) = v363;
  int v379 = v374;
  int v1018 = v374;
  HIDWORD(v342) = v378 ^ 0x1BDB9AA9 ^ v374;
  LODWORD(v342) = v378 ^ ~v374;
  int v380 = (v342 >> 31) - 1067386617 - ((2 * (v342 >> 31)) & 0x80C1F20E);
  int v1016 = v375;
  HIDWORD(v342) = v343 ^ v333 ^ v367 ^ v375 ^ 0x96ADD9B;
  LODWORD(v342) = v343 ^ v333 ^ v367 ^ v375;
  int v1024 = (v342 >> 31) - 2053718937 - ((2 * (v342 >> 31)) & 0xB2D78CE);
  int v381 = v331 ^ v345 ^ v370;
  int v1019 = v377;
  HIDWORD(v342) = v381 ^ v377 ^ 0x737D4815;
  LODWORD(v342) = v381 ^ ~v377;
  int v382 = v342 >> 31;
  LODWORD(v1012) = v353;
  int v383 = v353 ^ v343 ^ v373;
  int v1020 = v380;
  HIDWORD(v342) = v383 ^ 0x2B4075B1 ^ v380;
  LODWORD(v342) = v383 ^ ~v380;
  unsigned int v1023 = v382 - 725826486 - ((2 * v382) & 0xA9798894);
  int v384 = (v342 >> 31) + 1739997411 + (~(2 * (v342 >> 31)) | 0x30937E39);
  unint64_t v1011 = __PAIR64__(v343, v360);
  int v385 = v360 ^ v345 ^ v376 ^ v1024;
  unsigned int v386 = (v385 ^ 0xCFF39509) >> (((v263 & 0x1F ^ 0xEB) - 96) ^ 0x9F);
  unsigned int v1030 = ((2 * v385) ^ 0x9FE72A12) - ((2 * ((2 * v385) ^ 0x9FE72A12)) & 0x8ECDEDB0);
  unsigned int v387 = ((v386 + 1563322483 - ((2 * v386) & 0xBA5CD0E6)) ^ 0x5D2E6873) >> (v263 & 0x1F ^ 0xB);
  unsigned int v1029 = v387 - ((2 * v387) & 0x7867E8C0);
  unsigned int v388 = ((671352652 - a4) & (a67 + 1780009738))
       - 12582829
       - ((2 * ((671352652 - a4) & (a67 + 1780009738))) & 0xFE8000A6);
  HIDWORD(v342) = v353 ^ v1014 ^ 0xA17C7A07 ^ v379 ^ v1023 ^ 0x2730F827;
  LODWORD(v342) = v353 ^ v1014 ^ 0xA17C7A07 ^ v379 ^ v1023;
  unsigned int v389 = (a65 - 1982569994 - ((2 * a65 + 99124156) & 0x5C04030)) ^ 0x82E02018;
  int v1027 = (v342 >> 31) + 333410595 - ((2 * (v342 >> 31)) & 0x27BEE246);
  unsigned int v390 = a4 + 1323016579 - v1028;
  int v391 = v390 ^ 0x76DFA8D0;
  HIDWORD(v342) = a4 + 1323016579;
  LODWORD(v342) = v390 ^ 0x76DFA8D0;
  int v392 = (v342 >> 2) - 1087054752 - ((2 * (v342 >> 2)) & 0x7E69B8C0);
  HIDWORD(v342) = v390 ^ 0x6DFA8D0;
  LODWORD(v342) = v390 ^ 0x70000000;
  unsigned int v393 = ((((-116670943 - a65) & (a66 - 287522263))
         - ((2 * ((-116670943 - a65) & (a66 - 287522263))) & 0x92125F96)
         + 1225338827) ^ 0x414E2A03 ^ ((v389 & (a67 + 1780009738))
                                     - ((2 * (v389 & (a67 + 1780009738))) & 0x108E0B90)
                                     + 138872264))
       + 297077379;
  int v394 = ((v342 >> 27) ^ 0x7F296FFF)
       + a63
       + ((2 * (v342 >> 27)) & 0xFE52DFFE)
       + (v393 ^ 0x6EFFFBBE)
       + ((2 * v393) & 0xDDFFF77C)
       + (((v1021 ^ 0xC91E3AB4) + 1221422870) ^ 0xFFFFEEEE)
       + ((2 * ((v1021 ^ 0xC91E3AB4) + 1221422870)) & 0xFFFFDDDC);
  int v395 = v394 - ((2 * v394 - 1060919620) & 0xD318D786);
  HIDWORD(v342) = a65 - 1982569994;
  LODWORD(v342) = v389;
  int v396 = (v342 >> 2) - 525443061 - ((2 * (v342 >> 2)) & 0xC15CC016);
  int v397 = a66 - ((2 * a66 + 401327568) & 0x2939AE9E) + 9615927;
  unsigned int v398 = ((v388 ^ 0xFF400053) & (v397 ^ 0x949CD74F)) - ((2 * ((v388 ^ 0xFF400053) & (v397 ^ 0x949CD74F))) & 0x29513670);
  int v1022 = v384 + 1;
  HIDWORD(v342) = (v395 - 907133151) ^ 0x18C6BC3;
  LODWORD(v342) = (v395 - 907133151) ^ 0x68000000;
  unsigned int v399 = v396 ^ 0xE0AE600B;
  unsigned int v400 = (v397 ^ v388 ^ 0x6BDCD71C)
       + ((v396 ^ 0xE0AE600B) & v391 ^ 0xBC7DEFB8)
       + ((2 * ((v396 ^ 0xE0AE600B) & v391)) & 0x78FBDF70)
       + ((2 * v398 - 1454295440) ^ 0x52EE598F)
       + ((2 * (2 * v398 - 1454295440)) & 0xF77EDFFC ^ 0x52224CE0)
       + 1203937353;
  int v401 = (v400 ^ 0x7DDDC7FF) + ((2 * v400) & 0xFBBB8FFE) - 2111686655 + (v983 ^ 0x4CC89CA6);
  int v402 = ((2 * v401) & 0xEE7F5FFE)
       + (v401 ^ 0xF73FAFFF)
       + ((v342 >> 27) ^ 0x6BFFBFAC)
       + ((2 * (v342 >> 27)) & 0xD7FF7F58);
  int v403 = ((v395 - 907133151) ^ 0x698C6BC3) & (v396 ^ 0x5F9ABC6B ^ v392);
  int v404 = (v403 - ((2 * v403) & 0x7D185BF0) - 1098109448) ^ v396;
  int v405 = v402 + 1312188957;
  unsigned int v406 = v402 + 1312188957 - ((2 * v402 - 195833250) & 0xA81901DC);
  HIDWORD(v342) = v406 ^ 0x40C80EE;
  LODWORD(v342) = v406 ^ 0xD0000000;
  int v407 = v342 >> 27;
  unsigned int v408 = (v404 & 0x508DA889 ^ 0xFF725FF7) + 781580138 - ((2 * (v404 & 0x508DA889 ^ 0xFF725FF7)) & 0x5D2BEED4);
  HIDWORD(v342) = ~(v395 - 907133147);
  LODWORD(v342) = (v395 - 907133151) ^ 0x698C6BC0;
  int v409 = (v342 >> 2) + 2126596545 - ((2 * (v342 >> 2)) & 0xFD829382);
  unsigned int v410 = 2
       * (((v1025 ^ 0xD3AFF938) & (v408 ^ 0x2E95F76A))
        - ((2 * ((v1025 ^ 0xD3AFF938) & (v408 ^ 0x2E95F76A))) & 0x342A41A8))
       - 1272299096;
  unsigned int v411 = (v408 ^ 0x10C65DDC ^ v1004) + 69468289 + (v410 ^ 0x4FF1BECF) + ((2 * v410) & 0xF7B7FECC ^ 0x60148240) + 24;
  unsigned int v1026 = (v411 ^ 0x78BF3FA9) - 134230176 + ((2 * v411) & 0xF17E7F52);
  unsigned int v412 = a67
       + (v404 & 0xAF725776 ^ 0x919F9ECF)
       + ((2 * v404) & 0x1E60A668 ^ 0x1C408260)
       + (v407 ^ 0xEFBFFBFF)
       + ((2 * v407) & 0xDF7FF7FE)
       + v1026;
  unsigned int v413 = v409 ^ 0x75034718 ^ (((-2049567024 - v402) & (v392 ^ 0xC1F595A1 ^ v409))
                            - ((2 * ((-2049567024 - v402) & (v392 ^ 0xC1F595A1 ^ v409))) & 0x17841DB2)
                            + 197267161);
  int v414 = v412 - 1492662010 - ((2 * (v412 - 1492662010) + 466123460) & 0x1690FA5A) + 2032974479;
  HIDWORD(v342) = v414 ^ 0x3487D2D;
  LODWORD(v342) = v414 ^ 0x8000000;
  int v415 = v399
       + ((v413 - 1998931321) ^ 0xF17FBDEF)
       + ((2 * (v413 - 1998931321)) & 0xE2FF7BDE)
       + ((v342 >> 27) ^ 0xFFFFC7DF)
       + ((2 * (v342 >> 27)) & 0xFFFF8FBE)
       + 243300914;
  unsigned int v416 = (HIDWORD(v983) ^ 0xD00BBE39) + (v415 ^ 0xBCF73E7F) + ((2 * v415) & 0x79EE7CFE) + 1124647297;
  int v417 = ((2 * v416) & 0x5FFF787C) + (v416 ^ 0x2FFFBC3E);
  HIDWORD(v342) = v414 ^ 1;
  LODWORD(v342) = v414 ^ 0xB487D2C;
  LODWORD(v1005) = v342 >> 2;
  int v418 = v1005 + 1577555640 - ((2 * v1005) & 0xBC0F2D70);
  HIDWORD(v342) = v405 ^ 2;
  LODWORD(v342) = v406 ^ 0xD40C80EC;
  int v419 = (v342 >> 2) - 1924932471 - ((2 * (v342 >> 2)) & 0x1A87B912);
  unsigned int v420 = v419 ^ 0x8D43DC89;
  unsigned int v421 = (((v414 ^ 0xB487D2D) & (v419 ^ 0x8D43DC89))
        + 463976913
        - ((2 * ((v414 ^ 0xB487D2D) & (v419 ^ 0x8D43DC89))) & 0x374F73A2)) ^ 0x1BA7B9D1 | (((-351012457 - v412) & (v409 ^ 0x7EC149C1))
                                                                                         + 871714503
                                                                                         - ((2
                                                                                           * ((-351012457 - v412) & (v409 ^ 0x7EC149C1))) & 0x67EA9D8E)) ^ 0x33F54EC7;
  unsigned int v422 = (v392 ^ 0xBF34DC60) + (v421 ^ 0xFFD0FB77) + ((2 * v421) & 0xFFA1F6EE);
  unsigned int v423 = (2 * v417 + 1129317800) & 0xA03A6E8C;
  v417 -= 238732774;
  unsigned int v424 = v417 - v423;
  HIDWORD(v342) = v424 ^ 0x1D3746;
  LODWORD(v342) = v424 ^ 0x55555555;
  int v425 = (HIDWORD(v984) ^ 0xD730EF17)
       + ((v422 + 3081353) ^ 0x3EE75D9C)
       + ((2 * (v422 + 3081353)) & 0x7DCEBB38)
       + ((v342 >> 27) ^ 0xDDDEDF7D)
       + ((2 * (v342 >> 27)) & 0xBBBDBEFA)
       + 1338774566;
  int v426 = ((2 * v425) & 0x67383DBE) + (v425 ^ 0x339C1EDF);
  HIDWORD(v342) = v417 ^ 2;
  LODWORD(v342) = v424 ^ 0x501D3744;
  int v427 = (v342 >> 2) + 400716888 - ((2 * (v342 >> 2)) & 0x2FC4E8B0);
  unsigned int v428 = v419 ^ 0xE50AB5F8 ^ (((v424 ^ 0x501D3746) & (v419 ^ 0xD3444A31 ^ v418))
                            - ((2 * ((v424 ^ 0x501D3746) & (v419 ^ 0xD3444A31 ^ v418))) & 0xD092D2E2)
                            + 1749641585);
  int v429 = v426 + 925283407;
  unsigned int v430 = v426 + 925283407 - ((2 * v426 + 1957171958) & 0xF9A555A8);
  int v431 = v430 ^ 0x7CD2AAD4;
  int v432 = v427 ^ 0x17E27458;
  HIDWORD(v342) = v430 ^ 0x4D2AAD4;
  LODWORD(v342) = v430 ^ 0x78000000;
  int v433 = (v409 ^ 0x7EC149C1)
       + ((v428 - 1415376703) ^ 0x27CFB5C7)
       + ((2 * (v428 - 1415376703)) & 0x4F9F6B8E)
       + ((v342 >> 27) ^ 0xEDFEFB7B)
       + ((2 * (v342 >> 27)) & 0xDBFDF6F6)
       - 365867330;
  unsigned int v434 = (HIDWORD(v985) ^ 0x62EA5343) + (v433 ^ 0xF7F7CFFD) + ((2 * v433) & 0xEFEF9FFA) + 134754307;
  int v435 = ((2 * v434) & 0x7FDA7EBE) + (v434 ^ 0x3FED3F5F);
  v418 ^= 0x5E0796B8u;
  unsigned int v436 = (((v430 ^ 0x7CD2AAD4) & (v427 ^ 0x17E27458))
        + 1320911521
        - ((2 * ((v430 ^ 0x7CD2AAD4) & (v427 ^ 0x17E27458))) & 0x9D770542)) ^ 0x4EBB82A1 | (((1168897668 - v426) & v418)
                                                                                          + 491448810
                                                                                          - ((2
                                                                                            * ((1168897668 - v426) & v418)) & 0x3A95D3D4)) ^ 0x1D4AE9EA;
  unsigned int v437 = v435 - ((2 * v435 - 572239118) & 0x9410792C) - 1191549425;
  HIDWORD(v342) = v437 ^ 0x2083C96;
  LODWORD(v342) = v437 ^ 0x48000000;
  int v438 = (__PAIR64__(v429, v431) >> 2) - 900408987 - ((2 * (__PAIR64__(v429, v431) >> 2)) & 0x94A9B2CA);
  int v439 = v420
       + (v436 ^ 0xF7DEDDFD)
       + ((2 * v436) & 0xEFBDBBFA)
       + ((v342 >> 27) ^ 0x3BDEDBED)
       + ((2 * (v342 >> 27)) & 0x77BDB7DA)
       - 826618557;
  int v440 = HIDWORD(v986) + (v439 ^ 0x3CEC7B7E) + ((2 * v439) & 0x79D8F6FC) - 1022131070;
  unsigned int v441 = ((2 * v440) & 0xFBFBEC2E) + (v440 ^ 0x7DFDF617);
  unsigned int v442 = ((-1861364090 - v435) & (v427 ^ 0xDDB6AD3D ^ v438))
       - ((2 * ((-1861364090 - v435) & (v427 ^ 0xDDB6AD3D ^ v438))) & 0x6537213A);
  HIDWORD(v342) = v435 + 1;
  LODWORD(v342) = v437 ^ 0x4A083C94;
  int v443 = (v342 >> 2) - 886355848 - ((2 * (v342 >> 2)) & 0x965690F0);
  unsigned int v444 = v441 - ((2 * v441 - 1273497430) & 0xA6F0DD08) - 1383830823;
  HIDWORD(v342) = v444 ^ 0x3786E84;
  LODWORD(v342) = v444 ^ 0xD0000000;
  int v445 = ((v418 - 1356284774) ^ 0xDB4DEC7F)
       + ((2 * (v418 - 1356284774)) & 0xB69BD8FE)
       + (v438 ^ 0x78CF49F8 ^ (v442 - 1298427747))
       + ((v342 >> 27) ^ 0xFFFFFDFF)
       + ((2 * (v342 >> 27)) & 0xFFFFFBFF)
       + 615650690;
  int v446 = (v985 ^ 0x313F5DA9) + (v445 ^ 0xFFEF7FF8) + ((2 * v445) & 0xFFDEFFF0) + 1081352;
  unsigned int v447 = ((2 * v446) & 0xDFFCB9B2) + (v446 ^ 0x6FFE5CD9);
  unsigned int v448 = v447 + 2121150742 - ((2 * v447 + 1991688268) & 0x8625A1E0);
  HIDWORD(v342) = v448 ^ 0x312D0F0;
  LODWORD(v342) = v448 ^ 0x40000000;
  int v449 = (v443 ^ 0xE3D9CF38 ^ (((636748714 - v441) & (v438 ^ 0x17F911D ^ v443))
                             - ((2 * ((636748714 - v441) & (v438 ^ 0x17F911D ^ v443))) & 0x51E50E80)
                             + 686982976))
       + ((v342 >> 27) ^ 0x8DF7FFEF)
       + ((2 * (v342 >> 27)) & 0x1BEFFFDE);
  HIDWORD(v342) = v441 + 1;
  LODWORD(v342) = v444 ^ 0xD3786E84;
  int v450 = (v342 >> 2) + 1257510761 - ((2 * (v342 >> 2)) & 0x95E82ED2);
  HIDWORD(v342) = v447 + 2121150742;
  LODWORD(v342) = v448 ^ 0x4312D0F0;
  int v451 = (v342 >> 2) + 20701030 - ((2 * (v342 >> 2)) & 0x277BECC);
  unsigned int v452 = v432 + ((v449 + 1913126929) ^ 0xB7F41F9E) + ((2 * (v449 + 1913126929)) & 0x6FE83F3C) - 911353874;
  int v453 = (v987 ^ 0x78A39F32) + (v452 ^ 0xBFBFFBFF) + ((2 * v452) & 0x7F7FF7FE) + 1077937153;
  unsigned int v454 = ((2 * v453) & 0xFD9FFAFA)
       + (v453 ^ 0xFECFFD7D)
       - ((2 * (((2 * v453) & 0xFD9FFAFA) + (v453 ^ 0xFECFFD7D)) - 1272903392) & 0x9E75804E);
  unsigned int v455 = v454 + 692798647;
  int v456 = ((v454 + 692798647) ^ 0x4F3AC027) & (v450 ^ 0x4BCFC80F ^ v451);
  HIDWORD(v342) = (v454 + 692798647) ^ 0x73AC027;
  LODWORD(v342) = (v454 + 692798647) ^ 0x48000000;
  unsigned int v457 = (v450 ^ 0x67CC9DC9 ^ (((-995844135 - v447) & (v443 ^ 0x81DF5F11 ^ v450))
                             - ((2 * ((-995844135 - v447) & (v443 ^ 0x81DF5F11 ^ v450))) & 0x5A711540)
                             + 758680224))
       - 1613993498;
  int v458 = (v438 ^ 0xCA54D965)
       + (v457 ^ 0xFBBB3BFF)
       + ((2 * v457) & 0xF77677FE)
       + ((v342 >> 27) ^ 0xBFFCBBBD)
       + ((2 * (v342 >> 27)) & 0x7FF9777A);
  unsigned int v459 = ((2 * ((HIDWORD(v987) ^ 0x83AF6337) - 1162473549)) & 0xF671F7DA)
       + (((HIDWORD(v987) ^ 0x83AF6337) - 1162473549) ^ 0xFB38FBED)
       + ((v458 + 1145571396) ^ 0x77B77FBF)
       + ((2 * (v458 + 1145571396)) & 0xEF6EFF7E);
  int v460 = v459 - 2 * ((v459 + 219120724) & 0x40ED3C5A ^ v459 & 2) - 839073620;
  HIDWORD(v342) = v460 ^ 0xED3C58;
  LODWORD(v342) = v460 ^ 0x40000000;
  unsigned int v461 = (v450 ^ 0x9BA6E392 ^ (v456 - ((2 * v456) & 0xA2A5E9F6) - 783092485)) + 2042114089;
  int v462 = (v443 ^ 0xCB2B4878)
       + (v461 ^ 0xEADEEDEF)
       + ((2 * v461) & 0xD5BDDBDE)
       + ((v342 >> 27) ^ 0xFE7FCD00)
       + ((2 * (v342 >> 27)) & 0xFCFF9A00)
       + 379667729;
  HIDWORD(v342) = -692798672 - v454;
  LODWORD(v342) = (v454 + 692798647) ^ 0x4F3AC024;
  int v463 = (v342 >> 2) - 1436079930 + (~(2 * (v342 >> 2)) | 0xAB31AE73) + 1;
  v460 ^= 0x40ED3C58u;
  int v464 = (v988 ^ 0x5C381918) + (v462 ^ 0x7723E7DF) + ((2 * v462) & 0xEE47CFBE) - 1998841823;
  int v465 = v464 ^ 0x7FAF3EBE;
  unsigned int v466 = ((2 * v464) & 0xFF5E7D7C) + (v464 ^ 0x7FAF3EBE);
  unsigned int v467 = 2 * v466 - ((4 * v466 - 2073285942) & 0xCDE3821C);
  unsigned int v468 = (v451 ^ 0x75D81090 ^ ((v460 & (v451 ^ 0xAB5CF7A0 ^ v463))
                             - ((2 * (v460 & (v451 ^ 0xAB5CF7A0 ^ v463))) & 0xE9C79FEC)
                             + 1961086966))
       - 1018475001;
  unsigned int v469 = v466 + 1629162162;
  HIDWORD(v342) = v466 + 18549426;
  LODWORD(v342) = v466 + 1629162162;
  int v470 = (v450 ^ 0x4AF41769)
       + (v468 ^ 0x771FFBF3)
       + ((2 * v468) & 0xEE3FF7E6)
       + ((v342 >> 27) ^ 0xDEDDFFFC)
       + ((2 * (v342 >> 27)) & 0xBDBBFFF8)
       - 1442708463;
  unsigned int v471 = (HIDWORD(v988) ^ 0xCF77A32B) + (v470 ^ 0xFEFFBAEE) + ((2 * v470) & 0xFDFF75DC) + 16794898;
  unsigned int v472 = ((2 * v471) & 0xAB5EEFDE) + (v471 ^ 0x55AF77EF);
  unsigned int v473 = v463 ^ 0xAA6728C6;
  unsigned int v474 = (((((v467 - 1457006989) ^ 0x190E3EF0) + v469) ^ 0x87CCBF7F)
        + 2016624769
        + ((2 * (((v467 - 1457006989) ^ 0x190E3EF0) + v469)) & 0xF997EFE)) & (v463 ^ 0xAA6728C6);
  unsigned int v475 = v474 - ((2 * v474) & 0xE23EF0FE);
  int v476 = (__PAIR64__(v459, v460) >> 2) - 803627808 - ((2 * (__PAIR64__(v459, v460) >> 2)) & 0xA03339C0);
  HIDWORD(v342) = v465 + 2;
  LODWORD(v342) = v469;
  unsigned int v477 = v476 ^ 0xD0199CE0;
  int v478 = (v342 >> 2) - 653789353 - ((2 * (v342 >> 2)) & 0xB20FEEAE);
  unsigned int v479 = v472 + 1839832307;
  int v480 = v472 + 1839832307 - ((2 * v472 + 51341126) & 0x5843D2A0);
  HIDWORD(v342) = v480 ^ 0x421E950;
  LODWORD(v342) = v480 ^ 0x28000000;
  int v481 = (((v469 & (v476 ^ 0xD0199CE0)) - ((2 * (v469 & (v476 ^ 0xD0199CE0))) & 0xC3CCCBD6) + 1642489323) ^ 0x90F91D94 ^ (v475 - 249595777))
       + ((v342 >> 27) ^ 0x7DF5C6FF)
       + ((2 * (v342 >> 27)) & 0xFBEB8DFE)
       - 278346969;
  int v482 = (v451 ^ 0x13BDF66) + (v481 ^ 0x3F3E47F1) + ((2 * v481) & 0x7E7C8FE2) - 1061046257;
  int v483 = (v986 ^ 0x194F1BE7) + (v482 ^ 0xFDFFE5CB) + ((2 * v482) & 0xFBFFCB96) + 33561141;
  unsigned int v484 = ((2 * v483) & 0x6FE3E54A) + (v483 ^ 0xB7F1F2A5);
  unsigned int v485 = (v478 ^ 0xAF8A57F ^ (((-1099412388 - v472) & (v476 ^ 0x91E6BB7 ^ v478))
                            - ((2 * ((-1099412388 - v472) & (v476 ^ 0x91E6BB7 ^ v478))) & 0xA7FEA450)
                            - 738242008))
       + v473;
  unsigned int v486 = v484 - ((2 * v484 + 1784936860) & 0xFBEAD6AE);
  unsigned int v487 = v486 + 858220581;
  HIDWORD(v342) = (v486 + 858220581) ^ 0x5F56B57;
  LODWORD(v342) = -858220582 - v486;
  int v488 = v342 >> 27;
  HIDWORD(v342) = -858220590 - v486;
  LODWORD(v342) = (v486 + 858220581) ^ 0xFDF56B54;
  int v489 = (v342 >> 2) + 767882130 - ((2 * (v342 >> 2)) & 0x5B89E724);
  HIDWORD(v342) = v479;
  LODWORD(v342) = v480 ^ 0x2C21E950;
  int v490 = (v342 >> 2) - 1302039640 - ((2 * (v342 >> 2)) & 0x64C8E750);
  unsigned int v491 = (HIDWORD(v989) ^ 0xFEF6DA57)
       + (v485 ^ 0x53DDBF6B)
       + ((2 * v485) & 0xA7BB7ED6)
       + (v488 ^ 0xD7FFDE9E)
       + ((2 * v488) & 0xAFFFBD3C)
       + 2111477226;
  unsigned int v492 = ((2 * v491) & 0x37DDEBFC) + (v491 ^ 0x9BEEF5FE);
  unsigned int v493 = v478 ^ 0xD907F757;
  unsigned int v494 = (((v487 ^ 0xFDF56B57) & (v490 ^ 0xB26473A8))
        + 1217199449
        - ((2 * ((v487 ^ 0xFDF56B57) & (v490 ^ 0xB26473A8))) & 0x9119FAB2)) ^ 0x488CFD59 | (((-892468431 - v484) & (v478 ^ 0xD907F757))
                                                                                          - 1405127754
                                                                                          - ((2
                                                                                            * ((-892468431 - v484) & (v478 ^ 0xD907F757))) & 0x587EE76C)) ^ 0xAC3F73B6;
  unsigned int v495 = v492 - 297232866;
  unsigned int v496 = v492 - 297232866 - ((2 * v492 + 699834192) & 0xB2DA8CEC);
  HIDWORD(v342) = v496 ^ 0x16D4676;
  LODWORD(v342) = v496 ^ 0xD8000000;
  int v497 = v477
       + (v494 ^ 0x5FE7F7F6)
       + ((2 * v494) & 0xBFCFEFEC)
       + ((v342 >> 27) ^ 0x77B5FCE7)
       + ((2 * (v342 >> 27)) & 0xEF6BF9CE)
       + 2110628536;
  int v498 = (v989 ^ 0x67E2FDA3) + (v497 ^ 0xF8DBDDCF) + ((2 * v497) & 0xF1B7BB9E) + 119808561;
  unsigned int v499 = ((2 * v498) & 0xAFF9E7BE) + (v498 ^ 0x57FCF3DF);
  int v500 = v499 - ((2 * v499 + 1513348170) & 0x42777996) - 833246480;
  HIDWORD(v342) = v500 ^ 0x13BBCCB;
  LODWORD(v342) = v500 ^ 0x20000000;
  int v501 = v342 >> 27;
  unsigned int v502 = (v489 ^ 0x7A577A1A ^ (((-349917097 - v492) & (v490 ^ 0x9FA0803A ^ v489))
                             - ((2 * ((-349917097 - v492) & (v490 ^ 0x9FA0803A ^ v489))) & 0xAF271310)
                             + 1469286792))
       - 1437896587;
  HIDWORD(v342) = v495 ^ 2;
  LODWORD(v342) = v496 ^ 0xD96D4674;
  int v503 = v342 >> 2;
  unsigned int v504 = v493 + (v502 ^ 0xFB25DB7C) + ((2 * v502) & 0xF64BB6F8) + 81405060;
  unsigned int v505 = (v189 ^ 0x1904F0CB)
       + (v504 ^ 0x75F7FFBF)
       + ((2 * v504) & 0xEBEFFF7E)
       + (v501 ^ 0xFF3BFFDF)
       + ((2 * v501) & 0xFE77FFBE)
       + 990054790;
  unsigned int v506 = v505 + 1122296188 - ((2 * v505) & 0x85C9C2F8);
  HIDWORD(v342) = v506 ^ 0x2E4E17C;
  LODWORD(v342) = v506 ^ 0x40000000;
  int v507 = v342 >> 27;
  unsigned int v508 = v503 + 1634331039 - ((2 * v503) & 0xC2D3D33E);
  v489 ^= 0x2DC4F392u;
  int v509 = v489 + v984;
  unsigned int v510 = (v490 ^ 0xB26473A8)
       + ((1390809562 - v499) & v489 ^ 0xF84FF73F)
       + ((2 * ((1390809562 - v499) & v489)) & 0xF09FEE7E);
  int v511 = v508 ^ 0x6169E99F;
  HIDWORD(v342) = v499 + 1;
  LODWORD(v342) = v500 ^ 0x213BBCC8;
  int v512 = (v342 >> 2) - 1022144791 - ((2 * (v342 >> 2)) & 0x86269DD2);
  unsigned int v513 = v510
       + ((v500 ^ 0x213BBCCB) & v511 ^ 0x7FBEAF77)
       + ((2 * ((v500 ^ 0x213BBCCB) & v511)) & 0xFF7D5EEE)
       + (v507 ^ 0x776BBDF3)
       + ((2 * v507) & 0xEED77BE6)
       + 825704481;
  int v514 = (v991 ^ 0x2B429D51) + (v513 ^ 0xFFBFDFF5) + ((2 * v513) & 0xFF7FBFEA) + 4202507;
  unsigned int v515 = ((2 * v514) & 0xFFE7747E) + (v514 ^ 0xFFF3BA3F);
  int v516 = v515 + 337808954 + (~(2 * v515 + 1941583136) | 0x4B7518AD);
  HIDWORD(v342) = v505;
  LODWORD(v342) = v506 ^ 0x42E4E17C;
  int v517 = (v342 >> 2) + 613367030 - ((2 * (v342 >> 2)) & 0x491E79EC);
  HIDWORD(v342) = v516 ^ 0x24573A9;
  LODWORD(v342) = v516 ^ 0xD8000000;
  unsigned int v518 = (v508 ^ 0x10F2B134 ^ (((v506 ^ 0x42E4E17C) & (v508 ^ 0xA27AA776 ^ v512))
                             - ((2 * ((v506 ^ 0x42E4E17C) & (v508 ^ 0xA27AA776 ^ v512))) & 0xE336B156)
                             + 1906006187))
       + 1962826561;
  int v519 = ((2 * v509) & 0xFEF77EB6)
       + (v509 ^ 0x7F7BBF5B)
       + (v518 ^ 0xDF9FFFFC)
       + ((2 * v518) & 0xBF3FFFF8)
       + ((v342 >> 27) ^ 0xB7DFA73F)
       + ((2 * (v342 >> 27)) & 0x6FBF4E7E);
  BOOL v194 = v455 == 1329250343;
  unsigned int v520 = v512 ^ 0xC3134EE9;
  int v521 = ((-970791569 - v515) & v520) + 44920081 - ((2 * ((-970791569 - v515) & v520)) & 0x55ADA22);
  unsigned int v522 = v517 ^ 0xDB70C309 ^ v516;
  if (v194) {
    unsigned int v522 = v516;
  }
  int v523 = v517 ^ 0x248F3CF6;
  unsigned int v524 = (((v522 ^ 0xDA4573A9) & v523) - 770946497 - ((2 * ((v522 ^ 0xDA4573A9) & v523)) & 0xA418947E)) ^ 0xD20C4A3F | v521 ^ 0x2AD6D11;
  HIDWORD(v525) = v516 ^ 1;
  LODWORD(v525) = v516 ^ 0xDA4573A8;
  int v526 = (v525 >> 2) - 1881405820 - ((2 * (v525 >> 2)) & 0x1FB80D08);
  int v527 = v519 - ((2 * v519 + 487681924) & 0x2D8D81A2) + 1699707027;
  HIDWORD(v525) = v527 ^ 0x6C6C0D1;
  LODWORD(v525) = v527 ^ 0x90000000;
  int v528 = v525 >> 27;
  HIDWORD(v525) = v519 + 2;
  LODWORD(v525) = v527 ^ 0x96C6C0D0;
  int v529 = (v525 >> 2) + 898285419 - ((2 * (v525 >> 2)) & 0x6B157ED6);
  unsigned int v530 = v511
       + (v524 ^ 0xFDE91B6F)
       + ((2 * v524) & 0xFBD236DE)
       + (v528 ^ 0x6FF6A6BF)
       + ((2 * v528) & 0xDFED4D7E)
       + 737103528;
  unsigned int v531 = (HIDWORD(v992) ^ 0x3C0BB96E) + (v530 ^ 0x5F77DEF7) + ((2 * v530) & 0xBEEFBDEE) - 1601691383;
  unsigned int v532 = ((2 * v531) & 0xAFFF4E5E) + (v531 ^ 0x57FFA72F);
  int v533 = (2 * v532 + 1365738280) & 0x45AB1C54;
  v532 += 193548222;
  unsigned int v534 = v532 - v533;
  HIDWORD(v525) = v534 ^ 0x2D58E2A;
  LODWORD(v525) = v534 ^ 0xA0000000;
  unsigned int v535 = v520 + ((829900861 - v519) & v523 ^ 0x63FEDDF5) + ((2 * ((829900861 - v519) & v523)) & 0xC7FDBBEA);
  unsigned int v536 = v526 ^ 0x8FDC0684;
  int v537 = v535
       + ((v527 ^ 0x96C6C0D1) & (v526 ^ 0x8FDC0684) ^ 0xFADF3FFF)
       + ((2 * ((v527 ^ 0x96C6C0D1) & (v526 ^ 0x8FDC0684))) & 0xF5BE7FFE)
       + ((v525 >> 27) ^ 0x7F1FFCF2)
       + ((2 * (v525 >> 27)) & 0xFE3FF9E4)
       + 186576012;
  int v538 = (v993 ^ 0xB2283A41) + (v537 ^ 0x6DF3A572) + ((2 * v537) & 0xDBE74AE4) - 1844684146;
  unsigned int v539 = ((2 * v538) & 0x7F5EB4EA)
       + (v538 ^ 0xBFAF5A75)
       - ((2 * (((2 * v538) & 0x7F5EB4EA) + (v538 ^ 0xBFAF5A75)) + 1668034404) & 0x9606588A)
       - 54967305;
  HIDWORD(v525) = v539 ^ 0x3032C45;
  LODWORD(v525) = v539 ^ 0x48000000;
  int v540 = (v526 ^ v529 ^ 0x188337C5 ^ v534) + ((v525 >> 27) ^ 0xFBF99709) + ((2 * (v525 >> 27)) & 0xF7F32E12) + 67528951;
  unsigned int v541 = v523 + (v540 ^ 0xD9BF3F3A) + ((2 * v540) & 0xB37E7E74) - 90105670;
  unsigned int v542 = (HIDWORD(v993) ^ 0x81AA3853) + (v541 ^ 0x3EA75FCB) + ((2 * v541) & 0x7D4EBF96) - 1051156427;
  unsigned int v543 = ((2 * v542) & 0xAFE877FC) + (v542 ^ 0x57F43BFE);
  HIDWORD(v525) = v532 ^ 2;
  LODWORD(v525) = v534 ^ 0xA2D58E28;
  unsigned int v544 = v543 - 1646726043;
  unsigned int v545 = v543 - 1646726043 - ((2 * v543 - 2062897314) & 0xB6A7396C);
  unsigned int v546 = (2 * v545) ^ 0xB6A7396C;
  int v547 = (v546 - 2 * (v546 & 0x36142F0 ^ (2 * v545) & 0x10) + 190923489) & 0xFFFFFFE ^ 0xFF48BD0;
  int v548 = ((2 * v547) & 0x14DAABC0) - v547;
  int v549 = (v525 >> 2) - 1394084747 - ((2 * (v525 >> 2)) & 0x59CFE8EA);
  HIDWORD(v525) = v539 ^ 1;
  LODWORD(v525) = v539 ^ 0x4B032C44;
  int v550 = (v525 >> 2) - 1676416921 - ((2 * (v525 >> 2)) & 0x3827D0CE);
  int v551 = v546 - 764592246 + (~(2 * v546) | 0x5B2580EF);
  unsigned int v552 = (((v551 & 0xF0000000 ^ 0x51298106)
         + (v551 & 0xC0000000 ^ 0x86C03CF1)
         - ((v551 & 0xF0000000 ^ 0x51298106) & 0xC0290006)) ^ 0x47C0BDF1) & 0xFFFFFFFE | (v545 >> 31);
  unsigned int v553 = (v552 + 128284985 - ((2 * v552) & 0xF4AF276)) ^ 0x7A57939 | (v548 - 1785550306) ^ 0x9107632E;
  int v554 = v553 - ((2 * v553) & 0x5F5418F6) + 799673467;
  HIDWORD(v525) = v554 ^ 0x36CA86D;
  LODWORD(v525) = v554;
  int v555 = (((v529 ^ v549 ^ 0xD26E675B ^ v539) + 686734482) ^ 0x72FB9BF7)
       + ((2 * ((v529 ^ v549 ^ 0xD26E675B ^ v539) + 686734482)) & 0xE5F737EE)
       - 1929092087
       + (((v525 >> 28) - ((2 * (v525 >> 28)) & 0x92A89344) + 1230260642) ^ 0x853E08C0);
  unsigned int v556 = v536 + (v555 ^ 0xCEDFD57F) + ((2 * v555) & 0x9DBFAAFE) + 824191617;
  unsigned int v557 = (HIDWORD(v990) ^ 0x3B9CDC94) + (v556 ^ 0x777F2799) + ((2 * v556) & 0xEEFE4F32) - 2004821913;
  unsigned int v558 = ((2 * v557) & 0xEFEFF7E8) + (v557 ^ 0xF7F7FBF4);
  int v559 = (2 * v558 + 468084278) & 0x2171E000;
  v558 += 1588339483;
  unsigned int v560 = v558 - v559;
  HIDWORD(v525) = (v558 - v559) ^ 0xB8F000;
  LODWORD(v525) = (v558 - v559) ^ 0x10000000;
  int v561 = ((2 * ((v529 ^ 0x358ABF6B) + (HIDWORD(v991) ^ 0xE6ED1619))) & 0xF76FFE7C)
       + (((v529 ^ 0x358ABF6B) + (HIDWORD(v991) ^ 0xE6ED1619)) ^ 0x7BB7FF3E)
       + (((v549 ^ v550 ^ 0x6BA780A4 ^ v545) + 1141401652) ^ 0xFBE7EFFF)
       + ((2 * ((v549 ^ v550 ^ 0x6BA780A4 ^ v545) + 1141401652)) & 0xF7CFDFFE)
       + ((v525 >> 27) ^ 0x6AFB6EFD)
       + ((2 * (v525 >> 27)) & 0xD5F6DDFA);
  HIDWORD(v525) = v544 ^ 2;
  LODWORD(v525) = v545 ^ 0x5B539CB4;
  int v562 = (v525 >> 2) + 1102344738 - ((2 * (v525 >> 2)) & 0x8368E444);
  unsigned int v563 = (2 * v561 - 1871951258) & 0x96A207E4;
  v561 += 327624997;
  int v564 = v561 - v563;
  HIDWORD(v525) = (v561 - v563) ^ 0x35103F2;
  LODWORD(v525) = (v561 - v563) ^ 0xC8000000;
  int v565 = v525 >> 27;
  HIDWORD(v525) = v558;
  LODWORD(v525) = v560 ^ 0x10B8F000;
  int v566 = (v525 >> 2) + 1623320868 - ((2 * (v525 >> 2)) & 0xC183D248);
  unsigned int v567 = (v550 ^ v562 ^ 0xCD1F6A45 ^ v560) + (v565 ^ 0x65B7FD71) + ((2 * v565) & 0xCB6FFAE2);
  int v568 = v566 ^ 0x60C1E924;
  unsigned int v569 = (v562 ^ 0xDE8A64F9 ^ v566) + (v566 ^ 0x60C1E924) + 1;
  unsigned int v570 = (v549 ^ 0xACE7F475) + ((v567 - 1706556785) ^ 0xFBD7FBB9) + ((2 * (v567 - 1706556785)) & 0xF7AFF772) + 384894941;
  int v571 = (v990 ^ 0xC03C8103) + (v570 ^ 0x1D6DFFFF) + ((2 * v570) & 0x3ADBFFFE) - 493748223;
  unsigned int v572 = ((2 * v571) & 0x6BF1F5DE) + (v571 ^ 0xB5F8FAEF);
  HIDWORD(v525) = v561 ^ 2;
  LODWORD(v525) = v564 ^ 0xCB5103F0;
  unsigned int v573 = (v562 ^ ((v562 ^ 0xBE4B8DDD) - ((2 * (v562 ^ 0xBE4B8DDD) + 2) & 0x8E92D8BE) + 1195994208) ^ 0x69C71A5B ^ (v569 - ((2 * v569) & 0xDE74084C) + 1866073126))
       + (v566 ^ 0x60C1E924);
  int v574 = (v525 >> 2) - 2121345497 - ((2 * (v525 >> 2)) & 0x31DAC4E);
  unsigned int v575 = v564 ^ 0x1C9D24B6 ^ (v573 - ((2 * v573) & 0xAF984E88) - 674486460);
  int v576 = (2 * v572 + 1278204472) & 0x5949FB2C;
  v572 -= 759371086;
  unsigned int v577 = v572 - v576;
  HIDWORD(v525) = v577 ^ 0x4A4FD96;
  LODWORD(v525) = v577 ^ 0x28000000;
  unsigned int v578 = (v550 ^ 0x9C13E867)
       + ((v575 + 1705774211) ^ 0xAFD7DBD7)
       + ((2 * (v575 + 1705774211)) & 0x5FAFB7AE)
       + 1344807977;
  int v579 = (v995 ^ 0xEE52D66)
       + (v578 ^ 0x2EF2FFF3)
       + ((2 * v578) & 0x5DE5FFE6)
       + ((v525 >> 27) ^ 0xB3B5F7FE)
       + ((2 * (v525 >> 27)) & 0x676BEFFC)
       + 492242959;
  unsigned int v580 = ((2 * v579) & 0xFEFCD1AE) + (v579 ^ 0xFF7E68D7);
  HIDWORD(v525) = v572 ^ 2;
  LODWORD(v525) = v577 ^ 0x2CA4FD94;
  int v581 = (v525 >> 2) + 695356553 - ((2 * (v525 >> 2)) & 0x52E49912);
  int v582 = (2 * v580 + 324988046) & 0x78596F98;
  v580 -= 975426029;
  unsigned int v583 = v580 - v582;
  HIDWORD(v525) = v583 ^ 0x42CB7CC;
  LODWORD(v525) = v583 ^ 0xB8000000;
  int v584 = (v562 ^ 0x41B47222) + ((v525 >> 27) ^ 0x5EF3D796) + ((2 * (v525 >> 27)) & 0xBDE7AF2C) - 1593038742;
  unsigned int v585 = (v566 ^ v574 ^ 0xCDEBC295 ^ v577) + (v584 ^ 0xFCFF7BFB) + ((2 * v584) & 0xF9FEF7F6) + 50365445;
  int v586 = (v992 ^ 0xEFBCC2D9) + (v585 ^ 0xBFBEFDFC) + ((2 * v585) & 0x7F7DFBF8) - 149111588;
  unsigned int v587 = ((2 * v586) & 0x9FE5B8BE)
       + (v586 ^ 0x4FF2DC5F)
       - ((2 * (((2 * v586) & 0x9FE5B8BE) + (v586 ^ 0x4FF2DC5F)) - 803821356) & 0xF1D0DB32);
  int v588 = v581 ^ v574 ^ v583;
  HIDWORD(v525) = v580;
  LODWORD(v525) = v583 ^ 0xBC2CB7CC;
  int v589 = (v525 >> 2) + 1305407412 - ((2 * (v525 >> 2)) & 0x9B9DDF68);
  unsigned int v590 = v587 + 1626587651;
  HIDWORD(v525) = (v587 + 1626587651) ^ 0xE86D99;
  LODWORD(v525) = -1626587652 - v587;
  int v591 = (v525 >> 27) - 1683749243 - ((2 * (v525 >> 27)) & 0x37480D0A);
  unsigned int v592 = ((v591 ^ 0x9BA40685) & (v588 ^ 0x14D02D62)) - ((2 * ((v591 ^ 0x9BA40685) & (v588 ^ 0x14D02D62))) & 0x3F633FE2);
  unsigned int v593 = (2054677474
        - ((v591 ^ v588) & 0x4BD76127 ^ 0x4B341157 | 0x7A77E3E2)
        + ((v591 ^ v588) & 0x4BD76127 ^ 0x4B341157 | 0x85881C1D)) ^ 0xC5E82C6D | (v591 ^ v588) & 0xB4289ED8 ^ 0x84200AC0;
  unsigned int v594 = v568
       + ((2 * v592 - 1084014622) ^ 0x4A7824BD)
       + (v593 ^ 0xF47F7FB6)
       + ((2 * v593) & 0xE8FEFF6C)
       + ((2 * (2 * v592 - 1084014622)) & 0xEA3636BC ^ 0x6A063684)
       + 1597161581;
  int v595 = (v994 ^ 0xB78E4C33) + 196812 + (v594 ^ 0xFFFCFABD) + ((2 * v594) & 0xFFF9F57A) + 1143;
  unsigned int v596 = ((2 * v595) & 0x7FFBBFE4)
       + (v595 ^ 0xBFFDDFF2)
       - ((2 * (((2 * v595) & 0x7FFBBFE4) + (v595 ^ 0xBFFDDFF2)) - 870490022) & 0x8185BDF6);
  LOBYTE(v592) = (BYTE4(v994) & 5 ^ 0x24) - 96 + ((2 * (BYTE4(v994) & 5)) ^ 0xF7);
  HIDWORD(v525) = v590 ^ 1;
  LODWORD(v525) = v590 ^ 0xF8E86D98;
  int v597 = (v525 >> 2) + 1434646148 - ((2 * (v525 >> 2)) & 0xAB05ED08);
  unsigned int v598 = (((((v596 + 651267880) ^ 0xC0C2DEFB) << (v592 ^ 0xBE))
         + 2084157873
         - ((2 * (((v596 + 651267880) ^ 0xC0C2DEFB) << (v592 ^ 0xBE))) & 0xF8737362)) ^ 0x7C39B9B1) << (v592 ^ 0xBB);
  unsigned int v599 = (v574 ^ 0x818ED627)
       + (((v581 ^ v589 ^ 0x9C54CEA4 ^ v590) + 1975572830) ^ 0xCFB7F679)
       + ((2 * ((v581 ^ v589 ^ 0x9C54CEA4 ^ v590) + 1975572830)) & 0x9F6FECF2)
       + (((v596 + 651267880) >> 27) ^ 0x7BA4F6EF)
       + (((v596 + 651267880) >> 26) & 0xEEEEEEEE ^ 0x20)
       + (v598 ^ 0xCBFF79E7)
       + ((2 * v598) & 0x97FEF3CE)
       - 391931735;
  unsigned int v600 = (HIDWORD(v995) ^ 0xFE376CA) + (v599 ^ 0xEDF73C0F) + ((2 * v599) & 0xDBEE781E) + 186766900;
  int v601 = v600 + 515339388 - ((2 * v600) & 0x3D6EE8F8);
  HIDWORD(v525) = v601 ^ 0x6B7747C;
  LODWORD(v525) = v601 ^ 0x18000000;
  int v602 = (v581 ^ 0x29724C89) + ((v525 >> 27) ^ 0x5F1ABFDF) + ((2 * (v525 >> 27)) & 0xBE357FBE);
  unsigned int v603 = v589 ^ v597 ^ 0xD88EC7CB ^ (v596 + 651267880);
  HIDWORD(v525) = -651267885 - v596;
  LODWORD(v525) = (v596 + 651267880) ^ 0xC0C2DEF8;
  int v604 = v525 >> 2;
  unsigned int v605 = ((2 * ((HIDWORD(v996) ^ 0x69D1DD89) - 2028284717)) & 0xFFD7BF6E)
       + (((HIDWORD(v996) ^ 0x69D1DD89) - 2028284717) ^ 0xFFEBDFB7)
       + ((v603 - 406907186) ^ 0x5DF6DA6E)
       + ((2 * (v603 - 406907186)) & 0xBBEDB4DC)
       + ((v602 - 1595588575) ^ 0xDAF3DF5E)
       + ((2 * (v602 - 1595588575)) & 0xB5E7BEBC);
  unsigned int v606 = v605 - 169677831;
  int v607 = v605 - 169677831 - ((2 * v605 + 240307450) & 0x5D730AF8);
  HIDWORD(v525) = v607 ^ 0x6B9857C;
  LODWORD(v525) = v607 ^ 0x28000000;
  int v608 = v525 >> 27;
  unsigned int v609 = v604 - 560130900 - ((2 * v604) & 0xBD3A2958);
  HIDWORD(v525) = v600;
  LODWORD(v525) = v601 ^ 0x1EB7747C;
  int v610 = (v597 ^ 0x5582F684) + (v996 ^ 0x3B463D05);
  int v611 = (v525 >> 2) + 146219635 - ((2 * (v525 >> 2)) & 0x116E44E6);
  unsigned int v612 = (v597 ^ v609 ^ 0x95A89654 ^ v601) + (v608 ^ 0xE7FB7FEF) + ((2 * v608) & 0xCFF6FFDE) + 1571786313;
  unsigned int v613 = (v589 ^ 0x4DCEEFB4) + (v612 ^ 0xC8DFE62F) + ((2 * v612) & 0x91BFCC5E) + 924850641;
  int v614 = (v997 ^ 0x97DBFDED) + (v613 ^ 0x9FFFD7FD) + ((2 * v613) & 0x3FFFAFFA) + 1610622979;
  unsigned int v615 = ((2 * v614) & 0xFFBCB7FE) + (v614 ^ 0x7FDE5BFF);
  int v616 = v615 - ((2 * v615 + 1386283732) & 0x5B37FD54) + 1458339860;
  HIDWORD(v525) = v616 ^ 0x59BFEAA;
  LODWORD(v525) = v616 ^ 0xA8000000;
  int v617 = v525 >> 27;
  HIDWORD(v525) = v606;
  LODWORD(v525) = v607 ^ 0x2EB9857C;
  int v618 = (v525 >> 2) + 936034119 - ((2 * (v525 >> 2)) & 0x6F957E8E);
  unsigned int v619 = ((2 * v610) & 0xFDB5FFD4)
       + (v610 ^ 0x7EDAFFEA)
       + (((v609 ^ v611 ^ 0xF893B3A3 ^ v607) + 17546727) ^ 0xFFEDFFFF)
       + ((2 * ((v609 ^ v611 ^ 0xF893B3A3 ^ v607) + 17546727)) & 0xFFDBFFFE)
       + (v617 ^ 0x9FF3DEFF)
       + ((2 * v617) & 0x3FE7BDFE);
  unsigned int v620 = v619 + 155988246;
  v619 *= 2;
  unsigned int v621 = (~(v619 + 505585060) | 0x8B8A3B79) + v620;
  HIDWORD(v525) = v621 ^ 0x23AE243;
  LODWORD(v525) = v621 ^ 0xB8000000;
  int v622 = (v611 ^ v618 ^ 0x92E6639E ^ v616) + ((v525 >> 27) ^ 0xFEE7D7AF) + ((2 * (v525 >> 27)) & 0xFDCFAF5E) + 18360401;
  unsigned int v623 = (v609 ^ 0xDE9D14AC) + (v622 ^ 0xF96FDFFB) + ((2 * v622) & 0xF2DFBFF6);
  HIDWORD(v525) = v615 ^ 2;
  LODWORD(v525) = v616 ^ 0xAD9BFEA8;
  int v624 = (v525 >> 2) - 2017280214 - ((2 * (v525 >> 2)) & 0xF857E54);
  HIDWORD(v525) = v619 - v620;
  LODWORD(v525) = v621 ^ 0xBA3AE240;
  int v625 = (v525 >> 2) - 262418140 - ((2 * (v525 >> 2)) & 0xE0B7A248);
  unsigned int v626 = (HIDWORD(v997) ^ 0xCCB59AEE)
       + ((v623 + 1207018386) ^ 0x6FB7A7FF)
       + ((2 * (v623 + 1207018386)) & 0xDF6F4FFE)
       - 1874307071;
  unsigned int v627 = ((2 * v626) & 0xEF6DFEB6) + (v626 ^ 0xF7B6FF5B);
  int v628 = (~v625 & 0x10000 ^ 0x7FFBB9FB) + 2 * (~v625 & 0x10000);
  unsigned int v629 = v627 - ((2 * v627 + 1803735410) & 0xC9618DC0) - 1703792743;
  HIDWORD(v525) = v629 ^ 0x4B0C6E0;
  LODWORD(v525) = v629 ^ 0x60000000;
  int v630 = (v525 >> 27) - 1400079588 - ((2 * (v525 >> 27)) & 0x5918F638);
  unsigned int v631 = v624 ^ 0x87C2BF2A;
  int v632 = ((v628 - 2147203579) & v631) - 1999751949 - ((2 * ((v628 - 2147203579) & v631)) & 0x119C0000);
  unsigned int v633 = (v618 ^ v624 ^ 0xA32E22E ^ v621)
       - ((2 * (v618 ^ v624 ^ 0xA32E22E ^ v621) + 1473629560) & 0x91AFBB94)
       - 188562298;
  unsigned int v634 = ((v630 ^ 0xAC8C7B1C) & (v633 ^ 0xC8D7DDCA)) - ((2 * ((v630 ^ 0xAC8C7B1C) & (v633 ^ 0xC8D7DDCA))) & 0x67CF2A32);
  unsigned int v635 = (v633 ^ 0x645BA6D6 ^ v630)
       + ((2 * v634 - 405853646) ^ 0x1870DDE7)
       + 4196395
       + ((2 * (2 * v634 - 405853646)) & 0xFF7FEFA8 ^ 0xCF1E4420);
  int v636 = (v998 ^ 0x89C079DB) + (v635 ^ 0xEF7FF7FF) + ((2 * v635) & 0xDEFFEFFE) + 276826113;
  unsigned int v637 = (v611 ^ 0x8B72273) + (v636 ^ 0xDBDEFFBC) + ((2 * v636) & 0xB7BDFF78) + 606142532;
  unsigned int v638 = ((2 * v637) & 0xAFFE77EC)
       + (v637 ^ 0x57FF3BF6)
       - ((2 * (((2 * v637) & 0xAFFE77EC) + (v637 ^ 0x57FF3BF6)) - 706768418) & 0x9103B8EE);
  HIDWORD(v525) = v627 + 1;
  LODWORD(v525) = v629 ^ 0x64B0C6E0;
  int v639 = (v525 >> 2) + 1275135397 - ((2 * (v525 >> 2)) & 0x98020B4A);
  int v640 = v628 - 76556289;
  int v641 = -77116427 - v628;
  if (v632 == -1999751949) {
    int v641 = v640;
  }
  HIDWORD(v642) = (v638 - 1284397722) ^ 0x81DC77;
  LODWORD(v642) = (v638 - 1284397722) ^ 0xC8000000;
  unsigned int v643 = ((((2 * (v625 & 0xFFFEFFFF ^ 0x6F0CFFDC)) & 0x965974CE) - (v625 & 0xFFFEFFFF ^ 0x6F0CFFDC) + 886261144) ^ (v631 - 2070647290 + v641 - ((2 * (v631 - 2070647290 + v641)) & 0x5C231C2C) + 772902422) ^ v629 ^ 0xE1242396)
       + 1969134470;
  int v644 = (v618 ^ 0x37CABF47)
       + (v643 ^ 0xFBC4F7FB)
       + ((2 * v643) & 0xF789EFF6)
       + ((v642 >> 27) ^ 0x7E7EFF7C)
       + ((2 * (v642 >> 27)) & 0xFCFDFEF8);
  int v645 = ((2 * ((v999 ^ 0x61DE8EAF) - 109359077)) & 0xF5FDBD6A)
       + (((v999 ^ 0x61DE8EAF) - 109359077) ^ 0xFAFEDEB5)
       + ((v644 - 2051274615) ^ 0xFFF5F77F)
       + ((2 * (v644 - 2051274615)) & 0xFFEBEEFE);
  int v646 = v645 + 784683502;
  int v647 = v645 + 784683502 - ((2 * v645 + 169235352) & 0x53745004) - 32;
  HIDWORD(v642) = v647 ^ 0x1BA2802;
  LODWORD(v642) = v647 ^ 0x28000000;
  int v648 = (v625 ^ v639 ^ 0x74DB08F6 ^ (v638 - 1284397722)) + 18733790;
  int v649 = v631
       + (v648 ^ 0x6FF4F3FF)
       + ((2 * v648) & 0xDFE9E7FE)
       + ((v642 >> 27) ^ 0x3BFEBFA7)
       + ((2 * (v642 >> 27)) & 0x77FD7F4E)
       + 1410092122;
  HIDWORD(v642) = 1284397713 - v638;
  LODWORD(v642) = (v638 - 1284397722) ^ 0xC881DC74;
  unsigned int v650 = (HIDWORD(v999) ^ 0x16C1105C) + (v649 ^ 0x7FC7FFC7) + ((2 * v649) & 0xFF8FFF8F) - 2143813575;
  int v651 = (v642 >> 2) - 522058593 - ((2 * (v642 >> 2)) & 0xC1C4093E);
  unsigned int v652 = ((2 * v650) & 0x4FDFFFDC)
       + (v650 ^ 0xA7EFFFEE)
       - ((2 * (((2 * v650) & 0x4FDFFFDC) + (v650 ^ 0xA7EFFFEE)) + 194519466) & 0x43984592);
  HIDWORD(v642) = v646 ^ 2;
  LODWORD(v642) = v647 ^ 0x29BA2800;
  int v653 = (v642 >> 2) - 1125675802 - ((2 * (v642 >> 2)) & 0x79CF19CC);
  unsigned int v654 = v639 ^ v651 ^ 0x85592938 ^ v647;
  HIDWORD(v642) = (v652 + 1738027934) ^ 0x1CC22C9;
  LODWORD(v642) = (v652 + 1738027934) ^ 0xA0000000;
  int v655 = v642 >> 27;
  HIDWORD(v642) = (v652 + 1738027938) ^ 1;
  LODWORD(v642) = (v652 + 1738027934) ^ 0xA1CC22C8;
  int v656 = (v642 >> 2) + 292042710 - ((2 * (v642 >> 2)) & 0x22D06FAC);
  unsigned int v657 = (v625 ^ 0xF05BD124)
       + ((v654 - 1832775116) ^ 0xF275FC5F)
       + ((2 * (v654 - 1832775116)) & 0xE4EBF8BE)
       + (v655 ^ 0xAD85DE7F)
       + ((2 * v655) & 0x5B0BBCFE)
       + 1610884386;
  int v658 = (v1000 ^ 0xC1BDC543) + (v657 ^ 0x72BF7BF9) + ((2 * v657) & 0xE57EF7F2) - 1925151737;
  unsigned int v659 = ((2 * v658) & 0xF973FADE)
       + (v658 ^ 0x7CB9FD6F)
       - ((2 * (((2 * v658) & 0xF973FADE) + (v658 ^ 0x7CB9FD6F)) - 1094993924) & 0x9F533C76);
  HIDWORD(v642) = (v659 - 1358464455) ^ 0x7A99E3B;
  LODWORD(v642) = (v659 - 1358464455) ^ 0x48000000;
  int v660 = (v639 ^ 0x4C0105A5)
       + (((v651 ^ v653 ^ 0xFDC9AAB0 ^ (v652 + 1738027934)) - 763163710) ^ 0x37FFE7EE)
       + ((2 * ((v651 ^ v653 ^ 0xFDC9AAB0 ^ (v652 + 1738027934)) - 763163710)) & 0x6FFFCFDC)
       + ((v642 >> 27) ^ 0xFEFEAFFF)
       + ((2 * (v642 >> 27)) & 0xFDFD5FFE)
       - 922654701;
  unsigned int v661 = (HIDWORD(v1000) ^ 0xAC93D864) + (v660 ^ 0x9F4FFFCF) + ((2 * v660) & 0x3E9FFF9E) + 1622147121;
  unsigned int v662 = v653 ^ v656 ^ 0xE226250B ^ (v659 - 1358464455);
  HIDWORD(v642) = ~(v659 - 1358464427);
  LODWORD(v642) = (v659 - 1358464455) ^ 0x4FA99E38;
  int v663 = v642 >> 2;
  int v664 = ((2 * v661) & 0xE7F17BE)
       + (v661 ^ 0x73F8BDF)
       - 2
       * ((((2 * v661) & 0xE7F17BE) + (v661 ^ 0x73F8BDF) + 353850368) & 0x57835BFF ^ (((2 * v661) & 0xE7F17BE)
                                                                                    + (v661 ^ 0x73F8BDF)) & 0x18);
  int v665 = v664 - 325406745;
  HIDWORD(v642) = 325406736 - v664;
  LODWORD(v642) = (v664 - 325406745) ^ 0x57835BE4;
  unsigned int v666 = v663 - 1014961129 - ((2 * v663) & 0x8701D82E);
  int v667 = (v642 >> 2) - 936242478 - ((2 * (v642 >> 2)) & 0x906425A4);
  HIDWORD(v642) = (v664 - 325406745) ^ 0x7835BE7;
  LODWORD(v642) = (v664 - 325406745) ^ 0x55555555;
  int v668 = (v651 ^ 0xE0E2049F)
       + ((v662 + 1404773284) ^ 0xFDFC5CFA)
       + ((2 * (v662 + 1404773284)) & 0xFBF8B9F4)
       + ((v642 >> 27) ^ 0xFEEF2FF5)
       + ((2 * (v642 >> 27)) & 0xFDDE5FEA)
       + 51671825;
  int v669 = (v1001 ^ 0x345495A9) + (v668 ^ 0x38D7D3F7) + ((2 * v668) & 0x71AFA7EE) - 953668599;
  int v670 = ((2 * v669) & 0x6ECEF77A)
       + (v669 ^ 0x37677BBD)
       - 2
       * ((((2 * v669) & 0x6ECEF77A) + (v669 ^ 0x37677BBD) + 599215168) & 0x2032D75B ^ (((2 * v669) & 0x6ECEF77A)
                                                                                      + (v669 ^ 0x37677BBD)) & 0x18);
  int v671 = v670 + 65676163;
  HIDWORD(v642) = (v670 + 65676163) ^ 0x32D743;
  LODWORD(v642) = (v670 + 65676163) ^ 0x20000000;
  int v672 = (v656 ^ v666 ^ 0x856B8026 ^ v665) + ((v642 >> 27) ^ 0xEDFFFCA7) + ((2 * (v642 >> 27)) & 0xDBFFF94E) + 301990745;
  unsigned int v673 = (HIDWORD(v1001) ^ 0x53888BD3)
       + (((v653 ^ 0xBCE78CE6) - 1028479089) ^ 0xFDBFE9F7)
       + ((2 * ((v653 ^ 0xBCE78CE6) - 1028479089)) & 0xFB7FD3EE)
       + (v672 ^ 0xEF522E73)
       + ((2 * v672) & 0xDEA45CE6)
       + 317581206;
  unsigned int v674 = ((2 * v673) & 0xF47FB24C)
       + (v673 ^ 0x7A3FD926)
       - ((2 * (((2 * v673) & 0xF47FB24C) + (v673 ^ 0x7A3FD926)) + 1674499544) & 0x69ACB562);
  HIDWORD(v642) = -v670;
  LODWORD(v642) = (v670 + 65676163) ^ 0x2032D740;
  int v675 = (v642 >> 2) - 1502304621 - ((2 * (v642 >> 2)) & 0x4CE94D26);
  unsigned int v676 = v667 ^ 0xC83212D2;
  unsigned int v677 = ((v674 - 423770723) ^ 0xB4D65AB1 | v667 ^ 0xC83212D2)
       - ((2 * ((v674 - 423770723) ^ 0xB4D65AB1 | v667 ^ 0xC83212D2)) & 0x788FC774);
  HIDWORD(v642) = (v674 - 423770723) ^ 0x4D65AB1;
  LODWORD(v642) = (v674 - 423770723) ^ 0xB0000000;
  int v678 = (v656 ^ 0x116837D6)
       + (((v666 ^ v667 ^ 0x2B802986 ^ v671) + 1803906443) ^ 0xFF6F7FFA)
       + ((2 * ((v666 ^ v667 ^ 0x2B802986 ^ v671) + 1803906443)) & 0xFEDEFFF4)
       + ((v642 >> 27) ^ 0xE3DB7BA7)
       + ((2 * (v642 >> 27)) & 0xC7B6F74E)
       + 481625183;
  unsigned int v679 = (v263 ^ 0xD8E023D4) + (v678 ^ 0x7FF62EFB) + ((2 * v678) & 0xFFEC5DF6) - 2146840315;
  int v680 = (v667 ^ 0x7CE44863 ^ (v674 - 423770723)) & (v675 ^ 0x598B596C);
  unsigned int v681 = v680 - ((2 * v680) & 0xCB91F700);
  unsigned int v682 = ((2 * v679) & 0xDD77FFB8)
       + (v679 ^ 0x6EBBFFDC)
       - ((2 * (((2 * v679) & 0xDD77FFB8) + (v679 ^ 0x6EBBFFDC)) + 691076212) & 0xDA1A5542)
       + 27633883;
  HIDWORD(v642) = v682 ^ 0x50D2AA1;
  LODWORD(v642) = v682 ^ 0x68000000;
  unsigned int v683 = ((v677 - 1136139334) ^ (v681 + 1707670400) ^ 0xD98F183A) - 1873337703;
  int v684 = ((2 * v683) & 0xFF9DBBF2)
       + (v683 ^ 0xFFCEDDF9)
       + ((v642 >> 27) ^ 0xD6BFE0DB)
       + ((2 * (v642 >> 27)) & 0xAD7FC1B6);
  int v685 = v684 - ((2 * v684 + 1390576216) & 0x93B8C06C);
  HIDWORD(v642) = (v674 - 423770703) ^ 1;
  LODWORD(v642) = (v674 - 423770723) ^ 0xB4D65AB0;
  int v686 = (v642 >> 2) - 421344818 - ((2 * (v642 >> 2)) & 0xCDC5939C);
  unsigned int v687 = v686 ^ 0xE6E2C9CE;
  int v688 = v685 + 1934467426;
  unsigned int v689 = (((v685 + 1934467426) ^ 0x49DC6036) & (v666 ^ 0xC380EC17))
       - ((2 * (((v685 + 1934467426) ^ 0x49DC6036) & (v666 ^ 0xC380EC17))) & 0x34F32A50);
  unsigned int v690 = (v666 ^ 0x8A5C8C21 ^ v688)
       + ((2 * v689 + 888351312) ^ 0x570C6496)
       - 1677676230
       + ((2 * (2 * v689 + 888351312)) & 0xC7FE9D8C ^ 0x41E61480);
  unsigned int v691 = v675 ^ 0xA674A693;
  unsigned int v692 = (((v682 ^ 0x6D0D2AA1 | v686 ^ 0xE6E2C9CE)
         - 1188616906
         - ((2 * (v682 ^ 0x6D0D2AA1 | v686 ^ 0xE6E2C9CE)) & 0x724E4A6C)) ^ 0xB9272536) & (v675 ^ 0xA674A693);
  int v693 = (v1002 ^ 0x77F56762) + (v690 ^ 0x7E5BCCFA) + ((2 * v690) & 0xFCB799F4) - 2119945466;
  unsigned int v694 = ((2 * v693) & 0x77C5FEF6)
       + (v693 ^ 0x3BE2FF7B)
       - ((2 * (((2 * v693) & 0x77C5FEF6) + (v693 ^ 0x3BE2FF7B)) - 2050804336) & 0xCD0E83F6);
  HIDWORD(v642) = (v694 - 1452745533) ^ 0x68741FB;
  LODWORD(v642) = (v694 - 1452745533) ^ 0xE0000000;
  unsigned int v695 = (v692 + 1613553234 - ((2 * v692) & 0xC059BCA4)) ^ 0x602CDE52 | (((v682 ^ 0x6D0D2AA1) & (v686 ^ 0xE6E2C9CE))
                                                                       - 1128405426
                                                                       - ((2
                                                                         * ((v682 ^ 0x6D0D2AA1) & (v686 ^ 0xE6E2C9CE))) & 0x797BCC9C)) ^ 0xBCBDE64E;
  int v696 = (DWORD1(v1002) ^ 0x92B41D00)
       + ((v676 + 1804346385) ^ 0x7FFFABF5)
       + ((2 * (v676 + 1804346385)) & 0xFFFF57EA)
       + (v695 ^ 0xC5EDFEFB)
       + ((2 * v695) & 0x8BDBFDF6)
       + ((v642 >> 27) ^ 0x3FCBFFF6)
       + ((2 * (v642 >> 27)) & 0x7F97FFEC)
       + 2051429658;
  unsigned int v697 = ((2 * v696) & 0x8BD7F1EE)
       + (v696 ^ 0x45EBF8F7)
       - ((2 * (((2 * v696) & 0x8BD7F1EE) + (v696 ^ 0x45EBF8F7)) - 1152958552) & 0xD904DD66);
  HIDWORD(v642) = v682 ^ 1;
  LODWORD(v642) = v682 ^ 0x6D0D2AA0;
  int v698 = (v642 >> 2) - 224601590 - ((2 * (v642 >> 2)) & 0xE539B414);
  unsigned int v699 = v698 ^ 0xF29CDA0A;
  unsigned int v700 = (v686 ^ 0x658835 ^ (v694 - 1452745533)) & (v698 ^ 0xF29CDA0A);
  HIDWORD(v642) = (v697 - 903475577) ^ 0x4826EB3;
  LODWORD(v642) = (v697 - 903475577) ^ 0xE8000000;
  unsigned int v701 = ((v700 - ((2 * v700) & 0x44D2BDD8) - 1570152724) ^ ((((v694 - 1452745533) ^ 0xE68741FB) & (v686 ^ 0xE6E2C9CE))
                                                           - ((2
                                                             * (((v694 - 1452745533) ^ 0xE68741FB) & (v686 ^ 0xE6E2C9CE))) & 0xF77237BE)
                                                           - 71754785) ^ 0x59D04533)
       - 1773897427;
  unsigned int v702 = v691 + (v701 ^ 0x97BFF56F) + ((2 * v701) & 0x2F7FEADE) + 1749027473;
  int v703 = (DWORD2(v1002) ^ 0x96FAB50E) + ((v642 >> 27) ^ 0xF7FFED7B) + ((2 * (v642 >> 27)) & 0xEFFFDAF6) + 134222469;
  unsigned int v704 = ((2 * v702) & 0xEFFD963C) + (v702 ^ 0xF7FECB1E) + (v703 ^ 0x7BF6FF6F);
  unsigned int v705 = v704 + ((2 * v703) & 0xF7EDFEDE);
  int v706 = (v705 + 81885474) & 0x3DF3F3FD ^ v704 & 1;
  HIDWORD(v642) = -v694;
  LODWORD(v642) = (v694 - 1452745533) ^ 0xE68741F8;
  int v707 = (v642 >> 2) - 1604001573 - ((2 * (v642 >> 2)) & 0x40C9C1B6);
  unsigned int v708 = v707 ^ 0xA064E0DB;
  int v709 = v705 - 2 * v706 + 1121283358;
  HIDWORD(v642) = v709 ^ 0x5F3F3FC;
  LODWORD(v642) = v709 ^ 0xB8000000;
  int v710 = (v707 ^ 0x4CE68E68 ^ (v697 - 903475577)) & (v698 ^ 0xD6325F5);
  unsigned int v711 = ((v710 - ((2 * v710) & 0xF0C4B050) + 2019711016) ^ (((v697 - 903475577) ^ 0xEC826EB3 | v707 ^ 0xA064E0DB)
                                                           - ((2 * ((v697 - 903475577) ^ 0xEC826EB3 | v707 ^ 0xA064E0DB)) & 0xE9C31B80)
                                                           - 186544704) ^ 0x8C83D5E8)
       - 62559834;
  int v712 = v687
       + (v711 ^ 0x7F7FEB86)
       + ((2 * v711) & 0xFEFFD70C)
       + ((v642 >> 27) ^ 0x3F6FFFFC)
       + ((2 * (v642 >> 27)) & 0x7EDFFFF8)
       + 1091572862;
  int v713 = (v1003 ^ 0x56AEBDFD) + (v712 ^ 0xD37FB769) + ((2 * v712) & 0xA6FF6ED2) + 746604695;
  unsigned int v714 = ((2 * v713) & 0x9E3DF5FE) + (v713 ^ 0x4F1EFAFF);
  HIDWORD(v642) = 903475576 - v697;
  LODWORD(v642) = (v697 - 903475577) ^ 0xEC826EB0;
  int v715 = (v642 >> 2) - 1811558490 - ((2 * (v642 >> 2)) & 0x280B9F4C);
  unsigned int v716 = v715 ^ 0x9405CFA6;
  unsigned int v717 = (v715 ^ 0x9405CFA6 | v707 ^ 0xA064E0DB) - ((2 * (v715 ^ 0x9405CFA6 | v707 ^ 0xA064E0DB)) & 0x3918C52);
  int v718 = ((2065598173 - v705) & (v707 ^ 0x34612F7D ^ v715))
       - ((2 * ((2065598173 - v705) & (v707 ^ 0x34612F7D ^ v715))) & 0xAE44DC0);
  unsigned int v719 = v714 - 115700879;
  int v720 = v714 - 115700879 - ((2 * v714 + 124694638) & 0x6AC66674);
  HIDWORD(v642) = v720 ^ 0x563333A;
  LODWORD(v642) = v720 ^ 0xB0000000;
  int v721 = v642 >> 27;
  HIDWORD(v642) = v709;
  LODWORD(v642) = v709 ^ 0xBDF3F3FC;
  int v722 = (v642 >> 2) + 1733439885 - ((2 * (v642 >> 2)) & 0xCEA4631A);
  unsigned int v723 = v699
       + ((((v717 + 29935145) ^ 0x4BAE0C9 ^ (v718 + 91367136)) - 828621208) ^ 0xF5C7E37B)
       + ((2 * (((v717 + 29935145) ^ 0x4BAE0C9 ^ (v718 + 91367136)) - 828621208)) & 0xEB8FC6F6)
       + (v721 ^ 0xF970CEDE)
       + ((2 * v721) & 0xF2E19DBC);
  int v724 = v722 ^ 0x6752318D;
  unsigned int v725 = (v720 ^ 0xB563333A | v722 ^ 0x6752318D)
       + 1638768642
       - ((2 * (v720 ^ 0xB563333A | v722 ^ 0x6752318D)) & 0xC35B4004);
  HIDWORD(v642) = v719 ^ 2;
  LODWORD(v642) = v720 ^ 0xB5633338;
  int v726 = v642 >> 2;
  unsigned int v727 = (HIDWORD(v1002) ^ 0x9C2C8F4A)
       + ((v723 + 281496999) ^ 0x6BAFFDDC)
       + ((2 * (v723 + 281496999)) & 0xD75FFBB8)
       - 1806695900;
  unsigned int v728 = ((2 * v727) & 0x1FFFCFE2) + (v727 ^ 0x8FFFE7F1);
  unsigned int v729 = (((v725 ^ 0x61ADA002) & v716) + 613753110 - ((2 * ((v725 ^ 0x61ADA002) & v716)) & 0x492A422C)) ^ 0x24952116 | (((v720 ^ 0xB563333A) & (v722 ^ 0x6752318D)) - 1910036954 - ((2 * ((v720 ^ 0xB563333A) & (v722 ^ 0x6752318D))) & 0x1C4E4C4C)) ^ 0x8E272626;
  int v730 = v728 - ((2 * v728 + 16723206) & 0x1AE7E30) + 827774363;
  HIDWORD(v642) = v730 ^ 0xD73F18;
  LODWORD(v642) = v730;
  int v731 = v708
       + (v729 ^ 0xFB3FAFBF)
       + ((2 * v729) & 0xF67F5F7E)
       + ((v642 >> 27) ^ 0x7AF7FDDF)
       + ((2 * (v642 >> 27)) & 0xF5EFFBBE)
       + 565295273;
  unsigned int v732 = (HIDWORD(v1003) ^ 0xDE10FA44) + (v731 ^ 0x75FADBFC) + ((2 * v731) & 0xEBF5B7F8) - 1979374588;
  unsigned int v733 = ((2 * v732) & 0x3FFEBF6C) + (v732 ^ 0x9FFF5FB6);
  unsigned int v734 = v733 + 394403225 - ((2 * v733 - 1369051714) & 0x809E4D74);
  HIDWORD(v642) = v734 ^ 0x4F26BA;
  LODWORD(v642) = v734 ^ 0xC0000000;
  int v735 = v642 >> 27;
  int v736 = v726 - 2051149753 - ((2 * v726) & 0xB7BE08E);
  HIDWORD(v642) = v728 - 1;
  LODWORD(v642) = v730 ^ 0xD73F18;
  int v737 = (v642 >> 2) + 773658513 - ((2 * (v642 >> 2)) & 0x5C3A2F22);
  unsigned int v738 = v736 ^ 0x85BDF047;
  int v739 = v737 ^ 0x2E1D1791;
  unsigned int v740 = ((((v722 ^ 0x67850E95 ^ v730) & (v736 ^ 0x7A420FB8))
         - ((2 * ((v722 ^ 0x67850E95 ^ v730) & (v736 ^ 0x7A420FB8))) & 0xEBD9E414)
         + 1978462730) ^ ((v730 ^ 0xD73F18 | v722 ^ 0x6752318D)
                        - ((2 * (v730 ^ 0xD73F18 | v722 ^ 0x6752318D)) & 0x14F65FFC)
                        - 1971638274) ^ 0xFF97DDF4)
       + (v735 ^ 0xDBF7FA6B)
       + ((2 * v735) & 0xB7EFF4D6);
  unsigned int v741 = v716 + ((v740 - 1536156173) ^ 0xF3FE5EF9) + ((2 * (v740 - 1536156173)) & 0xE7FCBDF2) + 201433351;
  int v742 = (v1006 ^ 0xE1CA67F7) + (v741 ^ 0xBBFEEBFF) + ((2 * v741) & 0x77FDD7FE) + 1140921345;
  unsigned int v743 = ((2 * v742) & 0xEFFAFDEA)
       + (v742 ^ 0xF7FD7EF5)
       - ((2 * (((2 * v742) & 0xEFFAFDEA) + (v742 ^ 0xF7FD7EF5)) + 225200914) & 0x9E461FC);
  unsigned int v744 = v743 - 1683466617;
  HIDWORD(v642) = (v743 - 1683466617) ^ 0x4F230FE;
  LODWORD(v642) = v743 + a18;
  int v745 = v642 >> 27;
  unsigned int v746 = (((-1462957792 - v733) & (v736 ^ 0xABA0E7D6 ^ v737))
        - ((2 * ((-1462957792 - v733) & (v736 ^ 0xABA0E7D6 ^ v737))) & 0x123488)
        - 2146887100) ^ ((v737 ^ 0x2E1D1791 | v736 ^ 0x85BDF047)
                       - ((2 * (v737 ^ 0x2E1D1791 | v736 ^ 0x85BDF047)) & 0x6237EF80)
                       - 1323567168);
  HIDWORD(v642) = (v733 + 394403225) ^ 2;
  LODWORD(v642) = v734 ^ 0xC04F26B8;
  int v747 = (v642 >> 2) - 1834735163 - ((2 * (v642 >> 2)) & 0x2548538A);
  unsigned int v748 = (v744 ^ 0x84F230FE | v737 ^ 0x2E1D1791) - ((2 * (v744 ^ 0x84F230FE | v737 ^ 0x2E1D1791)) & 0xF550E1F0);
  int v749 = ((2 * v746) ^ 0x6225DB08) - 2 * (((2 * v746) ^ 0x6225DB08) & 0x2CA0FA3E ^ (2 * v746) & 0x10) - 324994513;
  unsigned int v750 = (v746 ^ 0x93F5F0D5) + (v745 ^ 0xFF7FCD3F) + ((2 * v745) & 0xFEFF9A7E) + 8401601;
  unsigned int v751 = ((2 * (v724 + (v308 ^ 0x88AF0B33))) & 0xD5FF7FC6)
       + ((v724 + (v308 ^ 0x88AF0B33)) ^ 0x6AFFBFE3)
       + (v749 & 0x45CE3AA2 ^ 0xB63C987)
       + ((2 * v749) & 0x8B846540 ^ 0x89006440)
       + (v750 ^ 0x7FEBFF32)
       + ((2 * v750) & 0xFFD7FE64);
  unsigned int v752 = ((v737 ^ 0xAAEF276F ^ v744) & (v747 ^ 0x6D5BD63A))
       - ((2 * ((v737 ^ 0xAAEF276F ^ v744) & (v747 ^ 0x6D5BD63A))) & 0xA1C70C1C);
  HIDWORD(v642) = v744 ^ 2;
  LODWORD(v642) = v744 ^ 0x84F230FC;
  int v753 = (v642 >> 2) - 778726045 - ((2 * (v642 >> 2)) & 0xA32B2AC6);
  unsigned int v754 = v751 - 229454115;
  int v755 = 2 * v751 + 1657395618;
  int v756 = (~v755 | 0x7E243BE9) + v751 - 229454115;
  HIDWORD(v642) = v756 ^ 0xEDE20B;
  LODWORD(v642) = v756 ^ 0x40000000;
  int v757 = ((v748 - 89624328) ^ (v752 - 790395378) ^ 0x2A4BF6F6)
       + ((v642 >> 27) ^ 0x77F435FC)
       + ((2 * (v642 >> 27)) & 0xEFE86BF8)
       - 2012493308;
  unsigned int v758 = v738 + (v757 ^ 0x6BFFDA67) + ((2 * v757) & 0xD7FFB4CE);
  unsigned int v759 = v747 ^ 0x92A429C5;
  int v760 = (v1007 ^ 0x695B45D4)
       + ((v758 - 1131520307) ^ 0x1FFBF7FF)
       + ((2 * (v758 - 1131520307)) & 0x3FF7EFFE)
       - 536606719;
  unsigned int v761 = ((2 * v760) & 0x53BABFEA) + (v760 ^ 0xA9DD5FF5);
  unsigned int v762 = v753 ^ 0xD1959563;
  int v763 = v761 - ((2 * v761 + 425740134) & 0x1F4CB130) - 866747317;
  HIDWORD(v642) = v763 ^ 0x7A65898;
  LODWORD(v642) = v763 ^ 0x8000000;
  unsigned int v764 = ((((v756 ^ 0x40EDE20B) & (v747 ^ 0x92A429C5))
         - ((2 * ((v756 ^ 0x40EDE20B) & (v747 ^ 0x92A429C5))) & 0xB15B5366)
         - 659707469) ^ (((v747 ^ 0xD249CBCE ^ v756) & (v753 ^ 0xD1959563))
                       - ((2 * ((v747 ^ 0xD249CBCE ^ v756) & (v753 ^ 0xD1959563))) & 0xC24158C4)
                       + 1629531234) ^ 0xB98D05D1)
       + 1232406298;
  int v765 = v739
       + (v764 ^ 0xADFBC755)
       + ((2 * v764) & 0x5BF78EAA)
       + ((v642 >> 27) ^ 0x3FFB9CCC)
       + ((2 * (v642 >> 27)) & 0x7FF73998)
       + 302554079;
  unsigned int v766 = (HIDWORD(v1006) ^ 0x42DD15D5) + (v765 ^ 0x7DF54FF3) + ((2 * v765) & 0xFBEA9FE6) - 2113228787;
  int v767 = v766 ^ 0x7227BFFE;
  unsigned int v768 = ((2 * v766) & 0xE44F7FFC) + (v766 ^ 0x7227BFFE);
  int v769 = 2 * v768;
  int v770 = v768 + 518302868 + (~(2 * v768 - 1493308536) | 0x69349261);
  HIDWORD(v642) = v755 - v754;
  LODWORD(v642) = v756 ^ 0x40EDE208;
  int v771 = (v642 >> 2) - 921362993 - ((2 * (v642 >> 2)) & 0x922A3B9E);
  unsigned int v772 = v771 ^ 0xC9151DCF;
  HIDWORD(v642) = v761 - 1;
  LODWORD(v642) = v763 ^ 0xFA65898;
  int v773 = (v642 >> 2) + 824896465 - ((2 * (v642 >> 2)) & 0x6255D7A2);
  HIDWORD(v642) = v770 ^ 0x365B6CF;
  LODWORD(v642) = v770 ^ 0x48000000;
  unsigned int v774 = ((((v771 ^ 0xC9151DCF) & (v753 ^ 0xD1959563))
         - ((2 * ((v771 ^ 0xC9151DCF) & (v753 ^ 0xD1959563))) & 0x81F99300)
         + 1090308480) ^ 0xC0D6EAD6 ^ (((v763 ^ 0xFA65898) & (v753 ^ 0x188088AC ^ v771))
                                     - ((2 * ((v763 ^ 0xFA65898) & (v753 ^ 0x188088AC ^ v771))) & 0x5446AC)
                                     - 2144722090))
       - 60594265;
  int v775 = v759
       + (v774 ^ 0xAF3BDCEF)
       + ((2 * v774) & 0x5E77B9DE)
       + ((v642 >> 27) ^ 0xFF72FF0F)
       + ((2 * (v642 >> 27)) & 0xFEE5FE1E)
       + 1364272130;
  unsigned int v776 = (HIDWORD(v1007) ^ 0x9CBEE40C) + (v775 ^ 0xA61F263F) + ((2 * v775) & 0x4C3E4C7E) + 1507908033;
  unsigned int v777 = ((2 * v776) & 0xFF7FFF7E) + (v776 ^ 0x7FBFFFBF);
  unsigned int v778 = v777 - ((2 * v777 + 636529388) & 0x7ADDEBC6);
  HIDWORD(v642) = (v778 + 1348946777) ^ 0x56EF5E3;
  LODWORD(v642) = (v778 + 1348946777) ^ 0x38000000;
  int v779 = v642 >> 27;
  int v780 = v773 ^ 0x312AEBD1;
  HIDWORD(v642) = v769 - v767;
  LODWORD(v642) = v770 ^ 0x4B65B6CC;
  int v781 = (v642 >> 2) + 364648070 - ((2 * (v642 >> 2)) & 0x2B782D0C);
  int v782 = v781 ^ 0x15BC1686;
  unsigned int v783 = ((((v771 ^ 0x8270AB00 ^ v770) & (v773 ^ 0x312AEBD1))
         - ((2 * ((v771 ^ 0x8270AB00 ^ v770) & (v773 ^ 0x312AEBD1))) & 0x46786904)
         + 591148162) ^ (((v770 ^ 0x4B65B6CF) & (v771 ^ 0xC9151DCF))
                       - ((2 * ((v770 ^ 0x4B65B6CF) & (v771 ^ 0xC9151DCF))) & 0x13BCBFC4)
                       + 165568482) ^ 0x2AE26B60)
       + 1059914426;
  unsigned int v784 = v762
       + (v783 ^ 0x7FBDFBAF)
       + ((2 * v783) & 0xFF7BF75E)
       + (v779 ^ 0xBFFDBEF7)
       + ((2 * v779) & 0x7FFB7DEE)
       - 1069267622;
  unsigned int v785 = (v311 ^ 0x8E9A0AA) + (v784 ^ 0xDFFBBD7E) + ((2 * v784) & 0xBFF77AFC) + 537150082;
  unsigned int v786 = ((2 * v785) & 0xCAED7E2E) + (v785 ^ 0x6576BF17);
  unsigned int v787 = v786 + 388140205;
  int v788 = v786 + 388140205 - ((2 * v786 + 1425012246) & 0x59552304) - 32;
  HIDWORD(v642) = v788 ^ 0x4AA9182;
  LODWORD(v642) = v788 ^ 0x28000000;
  int v789 = v642 >> 27;
  HIDWORD(v642) = -1348946778 - v778;
  LODWORD(v642) = (v778 + 1348946777) ^ 0x3D6EF5E0;
  int v790 = (v642 >> 2) - 1670821607 - ((2 * (v642 >> 2)) & 0x38D29232);
  unsigned int v791 = (((v781 ^ 0x15BC1686 | v773 ^ 0x312AEBD1)
         - ((2 * (v781 ^ 0x15BC1686 | v773 ^ 0x312AEBD1)) & 0x496101C4)
         + 615547106) ^ 0xE3FF63E9 ^ (((-318264695 - v777) & (v773 ^ 0x2496FD57 ^ v781))
                                    - ((2 * ((-318264695 - v777) & (v773 ^ 0x2496FD57 ^ v781))) & 0x8E9FC616)
                                    - 951065845))
       + 1272312086;
  unsigned int v792 = v772
       + (v791 ^ 0x4FD7F5FF)
       + ((2 * v791) & 0x9FAFEBFE)
       + (v789 ^ 0x4A63A74F)
       + ((2 * v789) & 0x94C74E9E)
       + 1707369138;
  unsigned int v793 = (v305 ^ 0x56057054) + (v792 ^ 0xF6F7C9FA) + ((2 * v792) & 0xEDEF93F4) + 151533062;
  unsigned int v794 = ((2 * v793) & 0xEEB6BCFE) + (v793 ^ 0x775B5E7F);
  unsigned int v795 = v790 ^ 0x9C694919;
  unsigned int v796 = v794 + 913505087;
  int v797 = 2 * v794 - 1747658098;
  unsigned int v798 = (~v797 | 0x2AEEE411) + v796;
  HIDWORD(v642) = v798 ^ 0x2888DF7;
  LODWORD(v642) = v798 ^ 0x68000000;
  int v799 = ((((v790 ^ 0x9C694919) & (v781 ^ 0x15BC1686))
         - ((2 * ((v790 ^ 0x9C694919) & (v781 ^ 0x15BC1686))) & 0x5992482)
         + 46961217) ^ 0xE0FE2AA9 ^ (((v788 ^ 0x2CAA9182) & (v781 ^ 0x89D55F9F ^ v790))
                                   - ((2 * ((v788 ^ 0x2CAA9182) & (v781 ^ 0x89D55F9F ^ v790))) & 0xC46571D0)
                                   - 499992344))
       + ((v642 >> 27) ^ 0x6FD1EF77)
       + ((2 * (v642 >> 27)) & 0xDFA3DEEE)
       - 1229244813;
  unsigned int v800 = v780 + 196812 + (v799 ^ 0xFFFCFF34) + ((2 * v799) & 0xFFF9FE68);
  HIDWORD(v642) = v787 ^ 2;
  LODWORD(v642) = v788 ^ 0x2CAA9180;
  int v801 = (v642 >> 2) + 2132401122 - ((2 * (v642 >> 2)) & 0xFE33B7C4);
  int v802 = (v1008 ^ 0x9B1559B2) + (v800 ^ 0x757FFFCF) + ((2 * v800) & 0xEAFFFF9E) - 1971322831;
  unsigned int v803 = ((2 * v802) & 0xFCA7E37A)
       + (v802 ^ 0x7E53F1BD)
       - ((2 * (((2 * v802) & 0xFCA7E37A) + (v802 ^ 0x7E53F1BD)) + 1416972906) & 0x55215E06);
  int v804 = v801 ^ 0x7F19DBE2;
  unsigned int v805 = (v798 ^ 0x6A888DF7) & (((v801 ^ 0x7F19DBE2 | v790 ^ 0x9C694919)
                               - 290291458
                               - ((2 * (v801 ^ 0x7F19DBE2 | v790 ^ 0x9C694919)) & 0xDD6501FC)) ^ 0xEEB280FE);
  HIDWORD(v642) = v797 - v796;
  LODWORD(v642) = v798 ^ 0x6A888DF4;
  unsigned int v806 = (v805 - 2046090652 - ((2 * v805) & 0xC1644C8)) ^ 0x860B2264 | (((v801 ^ 0x7F19DBE2) & v795)
                                                                      + 1213256018
                                                                      - ((2 * ((v801 ^ 0x7F19DBE2) & v795)) & 0x90A1A2A4)) ^ 0x4850D152;
  int v807 = (v642 >> 2) - 363677406 - ((2 * (v642 >> 2)) & 0xD4A57244);
  HIDWORD(v642) = (v803 + 348869688) ^ 0x290AF03;
  LODWORD(v642) = (v803 + 348869688) ^ 0x28000000;
  int v808 = (((v803 + 348869688) ^ 0x2A90AF03) & (v801 ^ 0x7F19DBE2))
       - ((2 * (((v803 + 348869688) ^ 0x2A90AF03) & (v801 ^ 0x7F19DBE2))) & 0x5C616C0);
  int v809 = v782
       + (v806 ^ 0x56F7F7D7)
       + ((2 * v806) & 0xADEFEFAE)
       + ((v642 >> 27) ^ 0xA33FAAAF)
       + ((2 * (v642 >> 27)) & 0x467F555E)
       - 1124658640;
  int v810 = v1010 + (v809 ^ 0x57EFD6A3) + ((2 * v809) & 0xAFDFAD46) - 1475335843;
  unsigned int v811 = ((2 * v810) & 0xFD565FBE)
       + (v810 ^ 0xFEAB2FDF)
       - ((2 * (((2 * v810) & 0xFD565FBE) + (v810 ^ 0xFEAB2FDF)) + 847491214) & 0x785F51D2);
  HIDWORD(v642) = -348869697 - v803;
  LODWORD(v642) = (v803 + 348869688) ^ 0x2A90AF00;
  int v812 = (v642 >> 2) + 2022749558 - ((2 * (v642 >> 2)) & 0xF1216AEC);
  int v813 = v801 ^ 0x558974E1 ^ (v803 + 348869688);
  unsigned int v814 = v807 ^ 0xEA52B922;
  HIDWORD(v642) = (v811 - 1787723472) ^ 0x42FA8E9;
  LODWORD(v642) = (v811 - 1787723472) ^ 0xB8000000;
  unsigned int v815 = ((v808 + 48434016) ^ ((v813 & (v807 ^ 0xEA52B922))
                             - ((2 * (v813 & (v807 ^ 0xEA52B922))) & 0x4FA3DFCC)
                             - 1479413786) ^ 0xA532E486)
       - 1385960412;
  int v816 = (HIDWORD(v1008) ^ 0xA3CE045F)
       + (v815 ^ 0xCD7BDB3E)
       + ((2 * v815) & 0x9AF7B67C)
       + ((v642 >> 27) ^ 0xF5A27B4E)
       + ((2 * (v642 >> 27)) & 0xEB44F69C);
  unsigned int v817 = v795 + ((v816 + 1021421940) ^ 0xBFCBECB7) + ((2 * (v816 + 1021421940)) & 0x7F97D96E) + 1077154633;
  unsigned int v818 = ((2 * v817) & 0xF76FFFFA) + (v817 ^ 0x7BB7FFFD);
  LOBYTE(v788) = (v1005 & 5 ^ 0x6C) - 32 + ((2 * (v1005 & 5)) ^ 0x67);
  unsigned int v819 = ((v811 - 1787723472) ^ 0xBC2FA8E9) & (((v812 ^ 0x7890B576 | v814)
                                              + 1449422213
                                              - ((2 * (v812 ^ 0x7890B576 | v814)) & 0xACC8DB0A)) ^ 0x56646D85);
  int v820 = v819 + 414896203 - ((2 * v819) & 0x3175A096);
  unsigned int v821 = v818 - ((2 * v818 - 872439434) & 0xEF8C8A8C) - 574220799;
  HIDWORD(v642) = (v811 - 1787723444) ^ 1;
  LODWORD(v642) = (v811 - 1787723472) ^ 0xBC2FA8E8;
  int v822 = (v642 >> 2) - 823296052 - ((2 * (v642 >> 2)) & 0x9DDAFF98);
  int v823 = v820 ^ 0x18BAD04B | (((v812 ^ 0x7890B576) & v814)
                            + 504347411
                            - ((2 * ((v812 ^ 0x7890B576) & v814)) & 0x3C1F7626)) ^ 0x1E0FBB13;
  unsigned int v824 = (((v821 ^ 0x77C64546) << (v788 ^ 0xB3))
        + 2011890840
        - ((2 * ((v821 ^ 0x77C64546) << (v788 ^ 0xB3))) & 0xEFD60930)) ^ 0x77EB0498;
  unsigned int v825 = v804
       + (v823 ^ 0x7A5597FB)
       + ((2 * v823) & 0xF4AB2FF6)
       + ((v821 >> 27) ^ 0xFFCFFF75)
       + ((v821 >> 26) & 0x36 ^ 0x14)
       + ((v824 << (v788 ^ 0xB6)) ^ 0x627F7CE7)
       + ((2 * (v824 << (v788 ^ 0xB6))) & 0xC4FEF9CE)
       - 1112523223;
  int v826 = (v1009 ^ 0x83D4E559) + (v825 ^ 0x9EF2BBD7) + ((2 * v825) & 0x3DE577AE) + 1628259369;
  unsigned int v827 = ((2 * v826) & 0xF5738352)
       + (v826 ^ 0x7AB9C1A9)
       - ((2 * (((2 * v826) & 0xF5738352) + (v826 ^ 0x7AB9C1A9)) - 199667366) & 0x9214E366);
  unsigned int v828 = v822 ^ 0xCEED7FCC;
  unsigned int v829 = (((v812 ^ 0xF56F030 ^ v821) & (v822 ^ 0xCEED7FCC))
        - ((2 * ((v812 ^ 0xF56F030 ^ v821) & (v822 ^ 0xCEED7FCC))) & 0x8C62794)
        - 2073881654) ^ (((v821 ^ 0x77C64546) & (v812 ^ 0x7890B576))
                       - ((2 * ((v821 ^ 0x77C64546) & (v812 ^ 0x7890B576))) & 0xB06F5E84)
                       - 667439294);
  HIDWORD(v642) = v818 - 1;
  LODWORD(v642) = v821 ^ 0x77C64544;
  int v830 = (v642 >> 2) - 1138870964 - ((2 * (v642 >> 2)) & 0x783C6A98);
  unsigned int v831 = v827 - 1021896096;
  HIDWORD(v642) = (v827 - 1021896096) ^ 0x10A71B3;
  LODWORD(v642) = (v827 - 1021896096) ^ 0x48000000;
  int v832 = v814
       + (((v829 ^ 0x5C54BC88) + 825927328) ^ 0x777F79EF)
       + ((2 * ((v829 ^ 0x5C54BC88) + 825927328)) & 0xEEFEF3DE)
       + ((v642 >> 27) ^ 0xBCBECF8B)
       + ((2 * (v642 >> 27)) & 0x797D9F16)
       - 876497274;
  unsigned int v833 = (v325 ^ 0x38828340) + (v832 ^ 0xFC7CDFFF) + ((2 * v832) & 0xF8F9BFFE) + 58925057;
  unsigned int v834 = (v830 ^ 0xF51444FF ^ (v827 - 1021896096)) & (v822 ^ 0x31128033);
  unsigned int v835 = v834 - ((2 * v834) & 0xF90EF44A);
  HIDWORD(v642) = 1021896083 - v827;
  LODWORD(v642) = (v827 - 1021896096) ^ 0x490A71B0;
  int v836 = v642 >> 2;
  int v837 = ((2 * v833) & 0x76DBBFB8)
       + (v833 ^ 0x3B6DDFDC)
       - 2 * ((((2 * v833) & 0x76DBBFB8) + (v833 ^ 0x3B6DDFDC) + 577975904) & 0x28592E5F ^ v833 & 3)
       - 892574532;
  HIDWORD(v642) = v837 ^ 0x592E5C;
  LODWORD(v642) = v837 ^ 0xA8000000;
  unsigned int v838 = v836 + 1275726185 - ((2 * v836) & 0x981412D2);
  unsigned int v839 = v830 ^ 0xBC1E354C;
  unsigned int v840 = v837 ^ 0xA8592E5C;
  unsigned int v841 = ((v837 ^ 0xA8592E5C) & (v830 ^ 0xBC1E354C)) - ((2 * ((v837 ^ 0xA8592E5C) & (v830 ^ 0xBC1E354C))) & 0x22C6AF9A);
  unsigned int v842 = (((v831 ^ 0x490A71B3 | v830 ^ 0xBC1E354C)
         - ((2 * (v831 ^ 0x490A71B3 | v830 ^ 0xBC1E354C)) & 0xA73841EC)
         - 744742666) ^ (v835 + 2089253413) ^ 0xAF1B5AD3)
       - 1166032343;
  int v843 = (v812 ^ 0x7890B576)
       + (v842 ^ 0xBFD7B3F5)
       + ((2 * v842) & 0x7FAF67EA)
       + ((v642 >> 27) ^ 0xBEEEFFF3)
       + ((2 * (v642 >> 27)) & 0x7DDDFFE6)
       - 2126951400;
  unsigned int v844 = (v333 ^ 0xE65A9232) + (v843 ^ 0xF37FDFEF) + ((2 * v843) & 0xE6FFBFDE) + 209723409;
  int v845 = ((2 * v844) & 0x5B8A775E) + (v844 ^ 0x2DC53BAF);
  int v846 = v838 ^ 0x4C0A0969;
  unsigned int v847 = ((v830 ^ 0x14471B10 ^ v837) & (v838 ^ 0x4C0A0969))
       - ((2 * ((v830 ^ 0x14471B10 ^ v837) & (v838 ^ 0x4C0A0969))) & 0xC6FEFEE8);
  unsigned int v848 = v845 - ((2 * v845 + 1303215624) & 0xF666CA9E);
  unsigned int v849 = v848 + 571090003;
  HIDWORD(v642) = (v848 + 571090003) ^ 0x333654F;
  LODWORD(v642) = (v848 + 571090003) ^ 0x78000000;
  int v850 = ((v841 - 1855760435) ^ (v847 - 478183564) ^ 0x721C28B9) + 861673106;
  int v851 = v828
       + (v850 ^ 0x55EFBBF3)
       + ((2 * v850) & 0xABDF77E6)
       + ((v642 >> 27) ^ 0x7BD3CF9F)
       + ((2 * (v642 >> 27)) & 0xF7A79F3E);
  unsigned int v852 = ((2 * (HIDWORD(v1013) + 1539286602)) & 0xDF4FBFF8)
       + ((HIDWORD(v1013) + 1539286602) ^ 0x6FA7DFFC)
       + ((v851 + 775713902) ^ 0x5BDFF7F)
       + ((2 * (v851 + 775713902)) & 0xB7BFEFE);
  unsigned int v853 = v852 - ((2 * v852 + 355746058) & 0x670C247A);
  int v854 = (__PAIR64__(v833, v840) >> 2) - 1662163924 - ((2 * (__PAIR64__(v833, v840) >> 2)) & 0x39DAC858);
  HIDWORD(v642) = -571090012 - v848;
  LODWORD(v642) = (v848 + 571090003) ^ 0x7B33654C;
  int v855 = (v642 >> 2) + 1605686635 - ((2 * (v642 >> 2)) & 0xBF69AAD6);
  HIDWORD(v642) = (v853 + 1042297538) ^ 0x386123D;
  LODWORD(v642) = (v853 + 1042297538) ^ 0xB0000000;
  int v856 = v642 >> 27;
  HIDWORD(v642) = (v853 + 1042297550) ^ 1;
  LODWORD(v642) = (v853 + 1042297538) ^ 0xB386123C;
  int v857 = v642 >> 2;
  unsigned int v858 = (v838 ^ v854 ^ 0xABD4080A ^ v849) + (v856 ^ 0x7FFFE6A9) + ((2 * v856) & 0xFFFFCD52) + 1302836997;
  unsigned int v859 = v839 + (v858 ^ 0xFDB7D683) + ((2 * v858) & 0xFB6FAD06) + 38283645;
  unsigned int v860 = (HIDWORD(v1011) ^ 0x155726E8) + 69468289 + (v859 ^ 0xFBDBFF7F) + ((2 * v859) & 0xF7B7FEFE);
  unsigned int v861 = ((2 * v860) & 0xF77EBD6E) + (v860 ^ 0x7BBF5EB7);
  unsigned int v862 = v861 - ((2 * v861 + 33000162) & 0xBAFDB32E) - 562389240;
  HIDWORD(v642) = v862 ^ 0x57ED997;
  LODWORD(v642) = v862 ^ 0x58000000;
  int v863 = v846
       + (((v854 ^ v855 ^ 0x70DFA37A ^ (v853 + 1042297538)) - 240967884) ^ 0x724FD79E)
       + ((2 * ((v854 ^ v855 ^ 0x70DFA37A ^ (v853 + 1042297538)) - 240967884)) & 0xE49FAF3C)
       + ((v642 >> 27) ^ 0x1DEDBAEF)
       + ((2 * (v642 >> 27)) & 0x3BDB75DE)
       + 1875012979;
  int v864 = v1013 + (v863 ^ 0xADDF73EF) + ((2 * v863) & 0x5BBEE7DE) + 1377864721;
  int v865 = ((2 * v864) & 0x7B93DBF6) + (v864 ^ 0x3DC9EDFB);
  int v866 = v865 - 1843623775;
  unsigned int v867 = v865 - 1843623775 - ((2 * v865 + 904620366) & 0xEE4DA7DC) - 12;
  HIDWORD(v642) = v867 ^ 0x726D3EE;
  LODWORD(v642) = v867 ^ 0xF0000000;
  int v868 = v642 >> 27;
  HIDWORD(v642) = v861 + 1;
  LODWORD(v642) = v862 ^ 0x5D7ED994;
  int v869 = v857 + 823825431 - ((2 * v857) & 0x6235282E);
  int v870 = (v642 >> 2) - 547132803 - ((2 * (v642 >> 2)) & 0xBEC6D4FA);
  unsigned int v871 = (v855 ^ v869 ^ 0x33D098EB ^ v862) + (v868 ^ 0xFDAD3DED) + ((2 * v868) & 0xFB5A7BDA) + 38978067;
  unsigned int v872 = (v854 ^ 0x9CED642C) + (v871 ^ 0x5FE3DABD) + ((2 * v871) & 0xBFC7B57A) + 1424312964;
  unsigned int v873 = (v353 ^ 0x82A119AE) + (v872 ^ 0xBAFF5DD9) + ((2 * v872) & 0x75FEBBB2) + 1157669415;
  unsigned int v874 = ((2 * v873) & 0xBD9FFB76) + (v873 ^ 0x5ECFFDBB);
  unsigned int v875 = v874 - ((2 * v874 + 1838366132) & 0x994B5EAC) - 2089857488;
  HIDWORD(v642) = v875 ^ 0x4A5AF56;
  LODWORD(v642) = v875 ^ 0xC8000000;
  int v876 = (v869 ^ v870 ^ 0x195F2D84 ^ v867) + ((v642 >> 27) ^ 0x7FFC7A37) + ((2 * (v642 >> 27)) & 0xFFF8F46E);
  HIDWORD(v642) = v866 ^ 2;
  LODWORD(v642) = v867 ^ 0xF726D3EC;
  int v877 = (v642 >> 2) - 1137308793 - ((2 * (v642 >> 2)) & 0x786C170E);
  unsigned int v878 = (v855 ^ 0x5FB4D56B) + ((v876 + 129989145) ^ 0x6EFDAF5F) + ((2 * (v876 + 129989145)) & 0xDDFB5EBE) - 1862119263;
  int v879 = (v1011 ^ 0x838ADBDB) + (v878 ^ 0x55EC7FF3) + ((2 * v878) & 0xABD8FFE6) - 1441562611;
  unsigned int v880 = (((v875 ^ v877) & 0x1CE04030 ^ 0x1CA00000)
        - ((2 * ((v875 ^ v877) & 0x1CE04030 ^ 0x1CA00000)) & 0x31008000)
        - 92126969) ^ 0xFAB2715B;
  unsigned int v881 = ((2 * v879) & 0xEFFEF7C6)
       + (v879 ^ 0x77FF7BE3)
       - ((2 * (((2 * v879) & 0xEFFEF7C6) + (v879 ^ 0x77FF7BE3)) + 357475142) & 0x4E124FD6);
  unsigned int v882 = (((2 * ((v875 ^ v877) & 0xE31FBFCF ^ 0x420AB188)) | 0x6C53B1B2)
        - ((v875 ^ v877) & 0xE31FBFCF ^ 0x420AB188)
        + 1238771495) ^ 0x9409D898;
  unsigned int v883 = (((2 * v880) | 0xA050026A) - v880 + 802684619) ^ 0xDC383179 | (((2 * v882) | 0x930A563A) - v882 - 1233464093) ^ 0x49BC3E15;
  HIDWORD(v642) = v870 ^ 0x636A7D;
  LODWORD(v642) = v870 ^ 0xDF000000;
  int v884 = (v642 >> 23) - ((2 * (v642 >> 23)) & 0x74AA6DFE);
  unsigned int v885 = v883 - ((2 * v883) & 0x8EAFBD4E) + 1196940967;
  HIDWORD(v642) = v885 ^ 0x57DEA7;
  LODWORD(v642) = v885 ^ 0x47000000;
  int v886 = ((v642 >> 23) - ((2 * (v642 >> 23)) & 0x3136A39E) - 1734651441) ^ (v884 + 978663167);
  HIDWORD(v642) = v886 ^ 0x45;
  LODWORD(v642) = v886 ^ 0xE5AA2A00;
  int v887 = (v642 >> 9) - ((2 * (v642 >> 9)) & 0x7BDCA544);
  unsigned int v888 = v881 - 240092786;
  HIDWORD(v642) = (v881 - 240092786) ^ 0x70927EB;
  LODWORD(v642) = (v881 - 240092786) ^ 0x20000000;
  int v889 = (v869 ^ 0x311A9417)
       + ((v642 >> 27) ^ 0xA67AEBFF)
       + ((2 * (v642 >> 27)) & 0x4CF5D7FE)
       + ((((v887 - 1108454750) ^ 0x74DE084) - 1423944951) ^ 0xDC31BE67)
       + ((2 * (((v887 - 1108454750) ^ 0x74DE084) - 1423944951)) & 0xB8637CCE)
       + 2102613402;
  int v890 = (v1014 ^ 0x423C188D) + (v889 ^ 0x17979A36) + ((2 * v889) & 0x2F2F346C) - 395811382;
  unsigned int v891 = ((2 * v890) & 0xFEFDCF76)
       + (v890 ^ 0x7F7EE7BB)
       + 1427300692
       + (~(2 * (((2 * v890) & 0xFEFDCF76) + (v890 ^ 0x7F7EE7BB)) + 1065815588) | 0x95614B7D);
  HIDWORD(v642) = v874 ^ 2;
  LODWORD(v642) = v875 ^ 0xCCA5AF54;
  int v892 = v642 >> 2;
  HIDWORD(v642) = v891 ^ 0x54F5A41;
  LODWORD(v642) = v891 ^ 0xB0000000;
  int v893 = v642 >> 27;
  unsigned int v894 = v892 - 160315745 - ((2 * v892) & 0xECE38D3E);
  HIDWORD(v642) = ~(v881 - 240092766);
  LODWORD(v642) = (v881 - 240092786) ^ 0x270927E8;
  int v895 = (v642 >> 2) + 909266712 - ((2 * (v642 >> 2)) & 0x6C649E30);
  unsigned int v896 = (v870 ^ 0xDF636A7D)
       + (((v877 ^ v894 ^ 0x6D4EEAF3 ^ v888) - 2057793587) ^ 0xBFF7FA1D)
       + ((2 * ((v877 ^ v894 ^ 0x6D4EEAF3 ^ v888) - 2057793587)) & 0x7FEFF43A)
       + (v893 ^ 0xBBEDE33D)
       + ((2 * v893) & 0x77DBC67A)
       - 2078661978;
  unsigned int v897 = (HIDWORD(v1012) ^ 0x49D1F16) + (v896 ^ 0xB7097F68) + ((2 * v896) & 0x6E12FED0) + 1224114328;
  unsigned int v898 = ((2 * v897) & 0xEDBF6F9E) + (v897 ^ 0xF6DFB7CF);
  int v899 = v898 - ((2 * v898 + 475329652) & 0x5FB387BC) - 33276392;
  HIDWORD(v642) = v899 ^ 0x7D9C3DE;
  LODWORD(v642) = v899 ^ 0xA8000000;
  int v900 = (v877 ^ 0xBC360B87)
       + (((v894 ^ v895 ^ 0x750CD3C6 ^ v891) - 918404734) ^ 0x7FF9FB7D)
       + ((2 * ((v894 ^ v895 ^ 0x750CD3C6 ^ v891) - 918404734)) & 0xFFF3F6FA)
       + ((v642 >> 27) ^ 0xF7ABB6FF)
       + ((2 * (v642 >> 27)) & 0xEF576DFE)
       - 2007347836;
  unsigned int v901 = (HIDWORD(v1014) ^ 0xDA6AA7AC) + (v900 ^ 0x6DF5EBDD) + ((2 * v900) & 0xDBEBD7BA) - 1844833245;
  int v902 = v901 ^ 0x7DEE7D6E;
  unsigned int v903 = ((2 * v901) & 0xFBDCFADC)
       + (v901 ^ 0x7DEE7D6E)
       - ((2 * (((2 * v901) & 0xFBDCFADC) + (v901 ^ 0x7DEE7D6E)) + 107218380) & 0x8C458CD0)
       - 917190322;
  unsigned int v904 = ((32 * v903) ^ 0xC458CD00) - 833438817 - ((2 * ((32 * v903) ^ 0xC458CD00)) & 0x9CA57700);
  HIDWORD(v642) = v891 ^ 1;
  LODWORD(v642) = v891 ^ 0xB54F5A40;
  unsigned int v905 = ((v903 >> 26) & 0x3A ^ 0x10) + ((v903 >> 27) ^ 0xFF6B3DD5);
  int v906 = (v642 >> 2) + 1658737588 - ((2 * (v642 >> 2)) & 0xC5BCA768);
  unsigned int v907 = v905 + 9749027;
  unsigned int v908 = v905
       + ((v904 ^ 0xCE52BB9F | (v905 + 9749027)) ^ 0xACE700C)
       - ((2 * (v904 ^ 0xCE52BB9F | (v905 + 9749027))) & 0xEA631FE6)
       + 1;
  unsigned int v909 = v908 - ((2 * v908 + 1804379180) & 0x40CAD5EE);
  HIDWORD(v642) = v898 ^ 2;
  LODWORD(v642) = v899 ^ 0xAFD9C3DC;
  int v910 = (v642 >> 2) - 1717309085 - ((2 * (v642 >> 2)) & 0x3347E2C6);
  unsigned int v911 = (v904 ^ ((v904 ^ 0x31AD4460) - ((2 * (v904 ^ 0x31AD4460) + 2) & 0x69A1FC60) - 1261371855) ^ 0xDAE72F58 ^ (v909 - 1775518451))
       + v907;
  unsigned int v912 = (v894 ^ 0xF671C69F)
       + (((v895 ^ v906 ^ 0xFB35DF72 ^ v899) - 97758930) ^ 0xEFBF79ED)
       + ((2 * ((v895 ^ v906 ^ 0xFB35DF72 ^ v899) - 97758930)) & 0xDF7EF3DA)
       + (v911 ^ 0x3F7A39BF)
       + ((2 * v911) & 0x7EF4737E)
       - 792310700;
  unsigned int v913 = ((2 * v912) & 0xB75F7FFA) + (v912 ^ 0xDBAFBFFD);
  int v914 = ((2 * ((v1015 ^ 0xAE7371F6) + 609239043 + v913)) & 0xBEB37FBE)
       + (((v1015 ^ 0xAE7371F6) + 609239043 + v913) ^ 0x5F59BFDF);
  unsigned int v915 = v914 - ((2 * v914 - 507944558) & 0xD030B48E) - 655029488;
  HIDWORD(v642) = v915 ^ 0x185A47;
  LODWORD(v642) = v915 ^ 0x68000000;
  int v916 = (v895 ^ 0x36324F18)
       + (((v906 ^ v910 ^ 0xBD5F64BF ^ v903) - 1603733000) ^ 0x7CDFDEFF)
       + ((2 * ((v906 ^ v910 ^ 0xBD5F64BF ^ v903) - 1603733000)) & 0xF9BFBDFE)
       + ((v642 >> 27) ^ 0x15FA73BF)
       + ((2 * (v642 >> 27)) & 0x2BF4E77E)
       + 1831185730;
  HIDWORD(v642) = v914 + 1;
  LODWORD(v642) = v915 ^ 0x68185A44;
  unsigned int v917 = (HIDWORD(v1015) ^ 0xFCD6B3F0) + (v916 ^ 0xDEEFFFBF) + ((2 * v916) & 0xBDDFFF7E) + 554696769;
  unsigned int v918 = ((2 * v917) & 0xFEFD7B6A) + (v917 ^ 0xFF7EBDB5);
  int v919 = (v642 >> 2) - 35092629 - ((2 * (v642 >> 2)) & 0xFBD10ED6);
  HIDWORD(v642) = v902 + 2;
  LODWORD(v642) = v903 ^ 0x4622C668;
  int v920 = v642 >> 2;
  unsigned int v921 = v918 + 878398015;
  int v922 = v918 + 878398015 - ((2 * v918 + 351671378) & 0x13C0802C);
  HIDWORD(v642) = v922 ^ 0x1E04016;
  LODWORD(v642) = v922 ^ 0x8000000;
  int v923 = v920 - 1191065079 - ((2 * v920) & 0x72039412);
  int v924 = (v910 ^ v923 ^ 0x48BA612D ^ v915) + ((v642 >> 27) ^ 0x69FFE73E) + ((2 * (v642 >> 27)) & 0xD3FFCE7C) - 734601801;
  unsigned int v925 = (v906 ^ 0x62DE53B4) + (v924 ^ 0x7F6F7FFF) + ((2 * v924) & 0xFEDEFFFE) - 2138013695;
  unsigned int v926 = (v1017 ^ 0xB1C03B05) + (v925 ^ 0x9FF0FEF6) + ((2 * v925) & 0x3FE1FDEC) + 1611596042;
  unsigned int v927 = ((2 * v926) & 0x9DB7F5FE)
       + (v926 ^ 0xCEDBFAFF)
       - ((2 * (((2 * v926) & 0x9DB7F5FE) + (v926 ^ 0xCEDBFAFF)) + 983565252) & 0x2D3F59CE);
  HIDWORD(v642) = v921 ^ 2;
  LODWORD(v642) = v922 ^ 0x9E04014;
  int v928 = v642 >> 2;
  HIDWORD(v642) = (v927 + 1408216777) ^ 0x69FACE7;
  LODWORD(v642) = (v927 + 1408216777) ^ 0x90000000;
  int v929 = v928 + 441119739 - ((2 * v928) & 0x3495E7F6);
  int v930 = (v910 ^ 0x99A3F163)
       + (((v923 ^ v919 ^ 0x4D090D74 ^ v922) + 57863904) ^ 0x6FFBDFC9)
       + ((2 * ((v923 ^ v919 ^ 0x4D090D74 ^ v922) + 57863904)) & 0xDFF7BF92)
       + ((v642 >> 27) ^ 0x66FBB97F)
       + ((2 * (v642 >> 27)) & 0xCDF772FE)
       + 688416440;
  unsigned int v931 = (v1018 ^ 0x926D4749) + (v930 ^ 0xB1FFBFB7) + ((2 * v930) & 0x63FF7F6E) + 1308639305;
  int v932 = (v919 ^ v929 ^ 0x713DD877 ^ (v927 + 1408216777)) - 1540884995;
  unsigned int v933 = ((2 * v931) & 0xB5EB3EDC)
       + (v931 ^ 0xDAF59F6E)
       - 2 * ((((2 * v931) & 0xB5EB3EDC) + (v931 ^ 0xDAF59F6E) + 737817480) & 0x26A30977 ^ (v931 ^ 0xDAF59F6E) & 2)
       + 312294653;
  HIDWORD(v642) = v933 ^ 0x6A30975;
  LODWORD(v642) = v933 ^ 0x20000000;
  int v934 = (v923 ^ 0xB901CA09)
       + (v932 ^ 0x4FFBDBFF)
       + ((2 * v932) & 0x9FF7B7FE)
       + ((v642 >> 27) ^ 0xF4FBC766)
       + ((2 * (v642 >> 27)) & 0xE9F78ECC)
       - 1157079909;
  HIDWORD(v642) = ~(v927 + 1408216801);
  LODWORD(v642) = (v927 + 1408216777) ^ 0x969FACE4;
  int v935 = (v642 >> 2) - 531153309 - ((2 * (v642 >> 2)) & 0xC0AE7CC6);
  unsigned int v936 = (v1016 ^ 0x200DCEED) + (v934 ^ 0x7ABAD4AF) + ((2 * v934) & 0xF575A95E) - 2059064495;
  unsigned int v937 = ((2 * v936) & 0xA7137FFE)
       + (v936 ^ 0xD389BFFF)
       - ((2 * (((2 * v936) & 0xA7137FFE) + (v936 ^ 0xD389BFFF)) + 90314676) & 0xD0690A6);
  HIDWORD(v642) = v933 ^ 1;
  LODWORD(v642) = v933 ^ 0x26A30974;
  int v938 = (v642 >> 2) + 1337863565 - ((2 * (v642 >> 2)) & 0x9F7C5B1A);
  HIDWORD(v642) = (v937 + 1496601645) ^ 0x6834853;
  LODWORD(v642) = v937 + 1496601645;
  int v939 = (v919 ^ 0xFDE8876B)
       + (((v929 ^ v935 ^ 0xDCBEC4ED ^ v933) + 801519791) ^ 0x3E7D7BAF)
       + ((2 * ((v929 ^ v935 ^ 0xDCBEC4ED ^ v933) + 801519791)) & 0x7CFAF75E)
       + ((v642 >> 27) ^ 0x77769B69)
       + ((2 * (v642 >> 27)) & 0xEEED36D2)
       + 1242294504;
  int v940 = (v1019 ^ 0x1088B1E5) + (v939 ^ 0x375CFDFF) + ((2 * v939) & 0x6EB9FBFE) - 928841215;
  unsigned int v941 = ((2 * v940) & 0xAEFFEF5C) + (v940 ^ 0xD77FF7AE);
  HIDWORD(v642) = -1496601666 - v937;
  LODWORD(v642) = (v937 + 1496601645) ^ 0x6834850;
  int v942 = (v642 >> 2) + 1704487308 - ((2 * (v642 >> 2)) & 0xCB30D318);
  unsigned int v943 = v941 - ((2 * v941 + 104407794) & 0x31FD37EE);
  HIDWORD(v642) = (v943 - 602198672) ^ 0xFE9BF7;
  LODWORD(v642) = (v943 - 602198672) ^ 0x18000000;
  int v944 = (v929 ^ 0x1A4AF3FB)
       + (((v935 ^ v938 ^ 0xA96A5BBD ^ (v937 + 1496601645)) - 1622954693) ^ 0x6D679D7A)
       + ((2 * ((v935 ^ v938 ^ 0xA96A5BBD ^ (v937 + 1496601645)) - 1622954693)) & 0xDACF3AF4)
       + ((v642 >> 27) ^ 0x1FDFEFF7)
       + ((2 * (v642 >> 27)) & 0x3FBFDFEE)
       + 1924690575;
  LOBYTE(v921) = (v913 - 1) & 2;
  unsigned int v945 = (v1020 ^ 0xC060F907) + (v944 ^ 0xF9BFADBA) + ((2 * v944) & 0xF37F5B74) + 104878662;
  unsigned int v946 = ((2 * v945) & 0xEDFD4B7C) + (v945 ^ 0x76FEA5BE);
  unsigned int v947 = v946 - 1334182739;
  unsigned int v948 = v946 - 1334182739 - ((2 * v946 + 1749081530) & 0xF8B31B70);
  unsigned int v949 = v948 - 24;
  HIDWORD(v642) = (v948 - 24) ^ 0x4598DB8;
  LODWORD(v642) = 23 - v948;
  int v950 = (v938 ^ v942 ^ 0x32D8DFF6 ^ (v943 - 602198672))
       + ((v642 >> 27) ^ 0x5AB953D6)
       + ((2 * (v642 >> 27)) & 0xB572A7AC);
  HIDWORD(v642) = ~(v943 - 602198652);
  LODWORD(v642) = (v943 - 602198672) ^ 0x18FE9BF4;
  int v951 = (v642 >> 2) + 92353885 - ((2 * (v642 >> 2)) & 0xB026ABA);
  unsigned int v952 = ((((v949 ^ 0xFC598DB8) >> v921) + 1201795490 - ((2 * ((v949 ^ 0xFC598DB8) >> v921)) & 0x8F43E344)) ^ 0x47A1F1A2) >> (v921 ^ 2);
  unsigned int v953 = (v935 ^ 0xE0573E63) + ((v950 - 1522095062) ^ 0x17FFA15D) + ((2 * (v950 - 1522095062)) & 0x2FFF42BA) - 179039974;
  unsigned int v954 = (v1024 ^ 0x8596BC67) + (v953 ^ 0x9DE71DF7) + ((2 * v953) & 0x3BCE3BEE) + 1645797897;
  unsigned int v955 = ((2 * v954) & 0xFFEFAB2E)
       + (v954 ^ 0xFFF7D597)
       - ((2 * (((2 * v954) & 0xFFEFAB2E) + (v954 ^ 0xFFF7D597)) + 2049864592) & 0x9D25F4CA)
       - 1951779795;
  HIDWORD(v642) = v955 ^ 0x692FA65;
  LODWORD(v642) = v955 ^ 0xC8000000;
  unsigned int v956 = v952 - ((2 * v952) & 0x941DBDD8) + 1242488556;
  int v957 = (v942 ^ v951 ^ 0x9C40D169 ^ v949) + ((v642 >> 27) ^ 0xFDFFF7FF) + ((2 * (v642 >> 27)) & 0xFBFFEFFE) - 37293371;
  int v958 = (v938 ^ 0x4FBE2D8D) + (v957 ^ 0x1FEEFD7E) + ((2 * v957) & 0x3FDDFAFC) - 535756158;
  unsigned int v959 = (v1023 ^ 0xD4BCC44A) + (v958 ^ 0xFC83FDF) + ((2 * v958) & 0x1F907FBE) - 264781791;
  unsigned int v960 = ((2 * v959) & 0xCBFFDFBA) + (v959 ^ 0xE5FFEFDD);
  HIDWORD(v642) = v956 ^ 0x5EEC;
  LODWORD(v642) = v956 ^ 0x4A0E8000;
  unsigned int v961 = (2 * v960 - 784871830) & 0xB0B5FFA8;
  v960 -= 1057560823;
  unsigned int v962 = v960 - v961;
  int v963 = ((v642 >> 15) - ((2 * (v642 >> 15)) & 0x17E39F26) + 200396691) ^ (((2
                                                                           * (((v947 << 15) + 70966) & 0x18000 | 0x5964962)) & 0x92E02C4)
                                                                         - (((v947 << 15) + 70966) & 0x18000 | 0x5964962)
                                                                         - 1558132068);
  HIDWORD(v642) = v955 ^ 1;
  LODWORD(v642) = v955 ^ 0xCE92FA64;
  int v964 = (v642 >> 2) + 661728084 - ((2 * (v642 >> 2)) & 0x4EE256A8);
  HIDWORD(v642) = v963 ^ 0xB583;
  LODWORD(v642) = v963 ^ 0xE5360000;
  int v965 = (v642 >> 17) - ((2 * (v642 >> 17)) & 0x3677B244);
  HIDWORD(v642) = v962 ^ 0x5AFFD4;
  LODWORD(v642) = v962 ^ 0xD8000000;
  v965 -= 1690576606;
  int v966 = (v942 ^ 0x6598698C)
       + (((v951 ^ v955 ^ 0x2CDF3222 ^ v965) - 1142550407) ^ 0x9CDFBB7B)
       + ((2 * ((v951 ^ v955 ^ 0x2CDF3222 ^ v965) - 1142550407)) & 0x39BF76F6)
       + ((v642 >> 27) ^ 0xEBFF93FF)
       + ((2 * (v642 >> 27)) & 0xD7FF27FE)
       + 1998631046;
  unsigned int v967 = (v1022 ^ 0x67B640E3) + (v966 ^ 0x77A5F5FB) + ((2 * v966) & 0xEF4BEBF6) - 2007365115;
  unsigned int v968 = ((2 * v967) & 0xB7377C08)
       + (v967 ^ 0xDB9BBE04)
       + 612737607
       - ((2 * (((2 * v967) & 0xB7377C08) + (v967 ^ 0xDB9BBE04)) + 1707206322) & 0xE3495DAC)
       - 24;
  HIDWORD(v642) = v968 ^ 0x1A4AED6;
  LODWORD(v642) = v968 ^ 0xF0000000;
  int v969 = (v951 ^ 0x581355D)
       + (((v965 ^ v964 ^ 0x18E7299A ^ v962) - 1655169826) ^ 0x7BEC3A75)
       + ((2 * ((v965 ^ v964 ^ 0x18E7299A ^ v962) - 1655169826)) & 0xF7D874EA)
       + ((v642 >> 27) ^ 0x6DB9D98E)
       + ((2 * (v642 >> 27)) & 0xDB73B31C);
  HIDWORD(v642) = v960;
  LODWORD(v642) = v962 ^ 0xD85AFFD4;
  int v970 = v642 >> 2;
  unsigned int v971 = ((v1030 + 1197930200) ^ 0x7B5502B8 ^ (v1029 + 1010037856))
       + ((v969 + 374991869) ^ 0x57B6FECC)
       + ((2 * (v969 + 374991869)) & 0xAF6DFD98)
       - 1471610572;
  unsigned int v972 = ((2 * v971) & 0xFDEFF9F2) + (v971 ^ 0x7EF7FCF9);
  int v973 = v972 - ((2 * v972 + 1545949182) & 0x660A8104) - 518526847;
  HIDWORD(v642) = v973 ^ 0x3054082;
  LODWORD(v642) = v973 ^ 0x30000000;
  int v974 = (v965 ^ 0xE7CCFD1A)
       + (((v964 ^ (v970 - 1128107637 - ((2 * v970) & 0x7984E316)) ^ 0x6A17F409 ^ v968) - 632249383) ^ 0x75B3EFEF)
       + ((2 * ((v964 ^ (v970 - 1128107637 - ((2 * v970) & 0x7984E316)) ^ 0x6A17F409 ^ v968) - 632249383)) & 0xEB67DFDE)
       + ((v642 >> 27) ^ 0x5DEFFD7F)
       + ((2 * (v642 >> 27)) & 0xBBDFFAFE)
       + 744231570;
  int v975 = v974 - 2032572374 - ((2 * v974) & 0xDB2D054);
  unsigned int v976 = 2
       * (((v975 ^ 0x86D9682A) & (v1027 ^ 0x13DF7123))
        - ((2 * ((v975 ^ 0x86D9682A) & (v1027 ^ 0x13DF7123))) & 0x3001CDF0))
       + 805424624;
  unsigned int v977 = (v1027 ^ 0x95061909 ^ v975) + (v976 ^ 0x5AE8B51F) - 1793685743 + ((2 * v976) & 0xD5D2F1DC ^ 0x400291C0);
  if (v1026 == 1891569417) {
    unsigned int v978 = 0x80000000;
  }
  else {
    unsigned int v978 = 1846341127;
  }
  HIDWORD(v979) = v972 - 1;
  LODWORD(v979) = v973 ^ 0x33054080;
  return (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, unint64_t, uint64_t, uint64_t, unint64_t, uint64_t, unint64_t, uint64_t, unint64_t, unint64_t, unint64_t, unint64_t, uint64_t, unint64_t, unint64_t, void, void, unint64_t, uint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, unint64_t))(a17 + 8 * (int)((105 * (((v978 & 0x6E0CEE07 ^ 0xEFF9FAF7) + 268829961 + ((2 * (v978 & 0x6E0CEE07)) & 0xDFF3F5EE)) >> 31)) ^ (v1031 - 52))))(1082696655, 3039886878, a65 + ((2 * v977) & 0x75C23FBE) + (v977 ^ 0x3AE11FDF) - 1255080418, a67 + ((v979 >> 2) ^ 0xDFB5FF3F) + ((2 * (v979 >> 2)) & 0xBF6BFE7E) + 541720769, 4294700410, 92353885, 1704487308, 277393893, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, v981,
           v982,
           v983,
           v984,
           v985,
           v986,
           v987,
           v988,
           v989,
           v990,
           v991,
           v992,
           v993,
           v994,
           v995,
           v996,
           v997,
           v998,
           v999,
           v1000,
           v1001,
           v1002,
           *((void *)&v1002 + 1),
           v1003,
           v1005,
           v1006,
           v1007,
           __PAIR64__(v305, v311),
           v1008,
           v1009,
           v1010,
           v1011,
           v1012,
           v1013,
           v1014,
           v1015);
}

uint64_t sub_19E86892C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  *(_DWORD *)(v41 - 136) = (v38 - 230) ^ (1305237457
                                        * ((-1188176798 - ((v41 - 144) | 0xB92DDC62) + ((v41 - 144) | 0x46D2239D)) ^ 0xFF6B8553));
  *(void *)(v41 - 144) = v40;
  *(void *)(v41 - 128) = v39;
  (*(void (**)(uint64_t))(v37 + 8 * (v38 + 682)))(v41 - 144);
  *(_DWORD *)(v41 - 128) = v38
                         + 522
                         - 291962093 * ((((v41 - 144) | 0xE792B4EB) - ((v41 - 144) & 0xE792B4EB)) ^ 0xF660B9A1);
  *(void *)(v41 - 144) = a24;
  *(void *)(v41 - 136) = v40;
  *(void *)(v41 - 120) = v39;
  *(void *)(v41 - 112) = a37;
  *(void *)(v41 - 104) = v40;
  (*(void (**)(uint64_t))(v37 + 8 * (v38 + 596)))(v41 - 144);
  *(void *)(v41 - 120) = v39;
  *(void *)(v41 - 112) = v40;
  *(void *)(v41 - 104) = a18;
  *(void *)(v41 - 144) = a24;
  *(void *)(v41 - 136) = v40;
  *(_DWORD *)(v41 - 128) = v38
                         + 522
                         - 291962093
                         * ((((v41 - 144) ^ 0xD4ADD39D | 0x3D705D2D) - (((v41 - 144) ^ 0xD4ADD39D) & 0x3D705D2D)) ^ 0xF82F83FA);
  (*(void (**)(uint64_t))(v37 + 8 * (v38 + 596)))(v41 - 144);
  *(_DWORD *)(v41 - 128) = v38
                         + 1001500783 * ((((2 * (v41 - 144)) | 0x636F0BF4) - (v41 - 144) - 834110970) ^ 0x7B037A4E)
                         + 459629285;
  *(void *)(v41 - 144) = v40;
  *(void *)(v41 - 136) = a23;
  (*(void (**)(uint64_t))(v37 + 8 * (v38 ^ 0xFE9)))(v41 - 144);
  *(_DWORD *)(v41 - 136) = (v38 - 230) ^ (1305237457
                                        * ((1247189337 - ((v41 - 144) | 0x4A569959) + ((v41 - 144) | 0xB5A966A6)) ^ 0xC10C068));
  *(void *)(v41 - 128) = a25;
  *(void *)(v41 - 144) = v40;
  (*(void (**)(uint64_t))(v37 + 8 * (v38 + 682)))(v41 - 144);
  *(void *)(v41 - 136) = a25;
  *(void *)(v41 - 128) = v40;
  *(_DWORD *)(v41 - 144) = v38
                         + 1305237457 * ((((2 * (v41 - 144)) | 0xE4C38250) - (v41 - 144) + 228474584) ^ 0x4BD867E6)
                         - 418;
  uint64_t v42 = (*(uint64_t (**)(uint64_t))(v37 + 8 * (v38 + 600)))(v41 - 144);
  return (*(uint64_t (**)(uint64_t))(v37
                                            + 8 * ((((v38 + 464) ^ v38 ^ 0xE70 ^ 0x33) * (a22 == 0)) ^ (v38 + 388))))(v42);
}

uint64_t sub_19E868BE0()
{
  return (*(uint64_t (**)(uint64_t))(v3
                                            + 8
                                            * (int)(((218 * ((v2 + 38759120) & 0xFDB091F3 ^ 0x23) + 873) * (v0 == v1)) ^ v2)))(584);
}

uint64_t sub_19E868C44@<X0>(uint64_t a1@<X8>)
{
  unsigned int v6 = v4 + (((&v6 | 0x74AD8F18) - (&v6 & 0x74AD8F18)) ^ 0xCD1429D6) * v2 - 188;
  uint64_t v7 = v3;
  uint64_t v8 = v1;
  return (*(uint64_t (**)(unsigned int *))(a1 + 8 * (v4 + 830)))(&v6);
}

uint64_t sub_19E868C98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, int a9@<W8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46)
{
  unsigned int v49 = a9 + 206;
  int v50 = 6 * ((a9 + 206) ^ 0x331);
  int v51 = v46 - 2144305881;
  unsigned int v52 = v51 + (v49 ^ 0x6AB);
  if (v52 <= 0x40) {
    unsigned int v52 = 64;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v48 + 8 * ((61 * (v47 + v52 <= ((v50 - 655) ^ (v51 + 1526)))) ^ v49)))(a1, a2, a3, a4, a5, a6, a7, a8, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46);
}

uint64_t sub_19E868D18@<X0>(int a1@<W8>)
{
  *int v2 = v2[623];
  return (*(uint64_t (**)(void))(v3
                              + 8 * (int)((((a1 + 971730647) & 0xC614935F ^ 0x9ED) * (v1 == 1961344967)) ^ (a1 + 432))))();
}

uint64_t sub_19E868D74@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  LODWORD(STACK[0x304]) = a1 + 1;
  uint64_t v24 = (*(uint64_t (**)(uint64_t, void))(v23 + 8 * (v22 ^ 0xAA4)))(a22, 0);
  uint64_t v25 = (_DWORD *)STACK[0x268];
  unsigned int v26 = *(_DWORD *)(STACK[0x268] + 16) - 59734013 - ((2 * *(_DWORD *)(STACK[0x268] + 16)) & 0xF8E11006);
  v25[1] = *(_DWORD *)(STACK[0x268] + 24) - 59734013 - ((v22 ^ 0xF8E11266) & (2 * *(_DWORD *)(STACK[0x268] + 24)));
  uint64_t v25[2] = v26;
  int v27 = (*(uint64_t (**)(uint64_t))(v23 + 8 * (v22 + 1747)))(v24);
  v25[3] = v27 - 59734013 - ((2 * v27) & 0xF8E11006);
  int v28 = (*(uint64_t (**)(void))(v23 + 8 * (v22 ^ 0xB53)))();
  *uint64_t v25 = v28 - 59734013 - ((2 * v28) & 0xF8E11006);
  int v29 = ((2 * STACK[0x230]) & 0xFEED7D6C) + (STACK[0x230] ^ 0xFF76BEB6);
  LODWORD(STACK[0x22C]) = v29 - ((2 * v29 + 17990292) & 0x4393DA7C) + 575876744;
  return sub_19E868E8C();
}

uint64_t sub_19E868E8C()
{
  uint64_t v6 = 4 * (v1 - 1268331523);
  unsigned int v7 = *(_DWORD *)(v2 + 4 * (v1 - 1268331524)) ^ 0xFC708800 ^ (*(_DWORD *)(v2
                                                                                         + 4
                                                                                         * (v1 - 1268331524)) >> 30);
  unsigned int v8 = (*(_DWORD *)(v2 + v6) ^ 0xECC25470 ^ (1664525 * v7 - ((3329050 * v7) & 0x2165B8E6) + 280157299))
     + (*(_DWORD *)(STACK[0x268] + 4 * (v3 - 644442242)) ^ 0xFC708803);
  unsigned int v9 = (v8 ^ 0xF7F7EFD2) + v3 + ((2 * v8) & 0xEFEFDFA4);
  *(_DWORD *)(v2 + v6) = v9 - ((2 * v9 - 1019392168) & 0xF8E11006) - 569430097;
  unint64_t v10 = STACK[0x260];
  *(_DWORD *)(v5 - 120) = (v0 - 1547823101) ^ STACK[0x260];
  int v11 = (v0 - 1547822998) ^ v10;
  *(_DWORD *)(v5 - 144) = v11;
  *(_DWORD *)(v5 - 140) = 2092386721 - v10 + v0;
  *(_DWORD *)(v5 - 152) = -(int)v10;
  *(_DWORD *)(v5 - 148) = v11 ^ 0x23;
  STACK[0x840] = (v1 + 914609453) ^ v10;
  STACK[0x830] = STACK[0x258];
  uint64_t v12 = (*(uint64_t (**)(uint64_t))(v4 + 8 * (v0 ^ 0xA2B)))(v5 - 152);
  return (*(uint64_t (**)(uint64_t))(v4 + 8 * *(int *)(v5 - 136)))(v12);
}

uint64_t sub_19E869008()
{
  *uint64_t v2 = v1;
  unsigned int v4 = ((2 * v1) & 0xFBDF17BE)
     + (v1 ^ 0xFDEF8BDF)
     - ((2 * (((2 * v1) & 0xFBDF17BE) + (v1 ^ 0xFDEF8BDF)) + 69265474) & 0x1FD9C764)
     + v0
     + 104
     + (v0 ^ 0xFFFFFF7D)
     - 1845667858;
  return (*(uint64_t (**)(void))(v3
                              + 8
                              * (v0 | (2
                                     * (((2 * v4) & 0x7F77F372 ^ 0x1F51C360) + (v4 ^ 0x30571A0B) + 1618745056 != 540545177)))))();
}

uint64_t sub_19E8690BC(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  *(_DWORD *)(*(void *)result - 0x5B59BD67F1E3CE2FLL) = a4;
  *uint64_t v6 = v5;
  *(_DWORD *)(result + 28) = *v4;
  return result;
}

uint64_t sub_19E869308(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  BOOL v10 = (*(unsigned __int8 *)(v9 + 5) ^ (v7 + 52))
      + ((*(unsigned __int8 *)(v9 + 5) << (v5 + a4 + ((a4 + 1) ^ (v8 - 3)) + 79)) & a5)
      - 294 != v7;
  return (*(uint64_t (**)(void))(v6 + 8 * ((v10 | (2 * v10)) ^ a4)))();
}

void sub_19E86935C(int a1@<W8>)
{
  uint64_t v2 = 4 * (v1 - 644442241);
  uint64_t v3 = (int *)(STACK[0x230] + v2);
  int v4 = *v3;
  LODWORD(v3) = 1631306195
              * ((*(_DWORD *)(*(void *)STACK[0x240] + (*(_DWORD *)STACK[0x238] & (304 * (a1 ^ 0x108) - 691553772))) ^ v3) & 0x7FFFFFFF);
  LODWORD(v3) = v3 ^ (v3 >> 16);
  unsigned int v5 = 1631306195 * v3;
  *(_DWORD *)(STACK[0x268] + v2) ^= v4 ^ *((_DWORD *)*(&off_1EF0E5660 + (a1 ^ 0x1A3)) + HIBYTE(v5) - 3) ^ *((_DWORD *)*(&off_1EF0E5660 + (a1 ^ 0x143)) + HIBYTE(v5) - 3) ^ *((_DWORD *)*(&off_1EF0E5660 + a1 - 229) + HIBYTE(v5)) ^ (-1043136512 * v3) ^ v5 ^ (782476393 * HIBYTE(v5));
  JUMPOUT(0x19E859174);
}

void sub_19E869460()
{
}

uint64_t sub_19E8694C0@<X0>(uint64_t a1@<X8>)
{
  *(_OWORD *)(v2 + v3) = 0u;
  return (*(uint64_t (**)(void))(v5 + 8 * (((v3 + a1 == 85) * v4) ^ v1)))();
}

uint64_t sub_19E8694EC@<X0>(int a1@<W0>, uint64_t a2@<X1>, unsigned int a3@<W2>, int a4@<W8>)
{
  return (*(uint64_t (**)(void))(v6
                              + 8
                              * ((1076
                                * (((77 * (a3 ^ 0x23A)) ^ (a1 + 1149))
                                 + v5
                                 + (*(unsigned __int8 *)(a2 + 3) ^ v4)
                                 + ((2 * *(unsigned __int8 *)(a2 + 3)) & 0x7777) == a4)) ^ a3)))();
}

uint64_t sub_19E869540()
{
  return (*(uint64_t (**)(void))(v3
                              + 8 * (((((v0 == v2 - 59028578) ^ (v1 - 25)) & 1) * (v1 - 493)) | v1)))();
}

uint64_t sub_19E869578(__n128 a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  *(__n128 *)(v10 + v12) = a1;
  return (*(uint64_t (**)(void))(v13 + 8 * (((4 * (v11 != 0)) | (16 * (v11 != 0))) ^ (a9 + v9 + 453))))();
}

uint64_t sub_19E8695B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, uint64_t a12, uint64_t a13, unint64_t *a14, unsigned int a15)
{
  a15 = (v16 + 691) ^ (1001500783
                     * ((((2 * &a13) | 0xA303F680) - &a13 + 780010688) ^ 0x9B3504F4));
  a13 = a12;
  a14 = &STACK[0x3BF054D022E331B2];
  uint64_t v17 = (*(uint64_t (**)(uint64_t *))(v15 + 8 * ((v16 + 24) ^ 0xA1F)))(&a13);
  return (*(uint64_t (**)(uint64_t))(v15
                                            + 8
                                            * (((a10 == ((v16 + 1861630400) & 0x973FFFB3) + 590599722)
                                              * (((v16 + 37104867) | 0x4000C91) - 104215797)) ^ (v16 + 24))))(v17);
}

uint64_t sub_19E86969C(uint64_t a1, uint64_t a2, int a3)
{
  return (*(uint64_t (**)(void))(v3
                              + 8
                              * ((1571
                                * ((*(unsigned __int8 *)(v5 + 2) ^ (v4 + a3 - 126))
                                 + ((2 * *(unsigned __int8 *)(v5 + 2)) & 0x15E)
                                 - 90 == v4)) ^ a3)))();
}

uint64_t sub_19E869A2C()
{
  return sub_19E869A38();
}

uint64_t sub_19E869A38(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  int8x16_t v15 = *(int8x16_t *)(v12 + (v10 + a1 + v9));
  *(int8x16_t *)(a2 + v9) = vaddq_s8(vsubq_s8(v15, vandq_s8(vaddq_s8(v15, v15), v14)), v13);
  return (*(uint64_t (**)(void))(v11 + 8 * ((1283 * (v9 == 48)) ^ (a8 + v8 + 338))))();
}

void sub_19E869A84()
{
}

uint64_t sub_19E869BA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  BOOL v40 = a12 == v37
     || (((_BYTE)a12 + 12) & 0xF) + 1842555292 - ((2 * a12) & 4) + 976 != ((v36 - 1323) ^ 0x6DD3299C ^ ((v36 - 1559) | 0x41C));
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v38 + 8 * ((84 * v40) ^ v36)))(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36);
}

void sub_19E869C10()
{
  *(_DWORD *)(v0 + 8) = v1 + 1;
}

uint64_t sub_19E869C50()
{
  if ((v0 + v2) <= 0x40) {
    int v4 = 64;
  }
  else {
    int v4 = v0 + v2;
  }
  return (*(uint64_t (**)(void))(v3
                              + 8
                              * (((v4 + (((v1 ^ 0x23) + 1514152616) & 0xA5BFD6EB) - 586 >= v0 + v2 - 1)
                                * ((((v1 ^ 0x23) - 1444) | 0x62) - 769)) ^ v1 ^ 0x23)))();
}

void sub_19E869CC0()
{
}

uint64_t sub_19E869CC8@<X0>(int a1@<W8>)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v2 + 8 * (a1 ^ 0xA5A));
  return v3(v1);
}

void sub_19E869CFC(int a1@<W8>)
{
  STACK[0x200] = v3 + v2;
  STACK[0x250] = v1 + 32;
  memset(&STACK[0x9B4], 193, 20);
  STACK[0xEA0] = (unint64_t)&STACK[0x3C8];
  LODWORD(STACK[0x5A4]) = 1546350112;
  STACK[0x218] = (unint64_t)&STACK[0xEB0];
  STACK[0x210] = (unint64_t)&STACK[0xEB8];
  STACK[0x238] = *(void *)(v4 + 8 * (a1 ^ 0xAEu)) - 8;
  JUMPOUT(0x19E869E28);
}

uint64_t sub_19E869EC8(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8)
{
  BOOL v11 = LODWORD(STACK[0xEB0]) == (v9 ^ a2) + a8;
  BOOL v13 = (v11 ^ 0x9F) + 2 * v11 == 159 || v8 != a7;
  return (*(uint64_t (**)(void))(v10 + 8 * ((v13 * ((v9 + 1576) ^ 0xE7A)) ^ v9)))();
}

uint64_t sub_19E869F1C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  BOOL v8 = v4 + 1299680803 > ((v5 - 608326938) & 0x2442535F ^ 0x689F2B9) || v4 + 1299680803 < a4 - 2037779991;
  int v9 = *(uint64_t (**)(uint64_t, void))(v6 + 8 * ((107 * v8) ^ v5));
  return v9(107, v9);
}

uint64_t sub_19E869FA4@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(uint64_t))(v3
                                            + 8
                                            * ((31
                                              * (v2 + a1 + 63 >= (((v1 | 0x20) + 2048471871) & 0x85E6CC6D ^ (v2 - 59))
                                                               + a1)) ^ (v1 | 0x20))))(1113);
}

uint64_t sub_19E86A014()
{
  return 0;
}

void sub_19E86A064()
{
}

uint64_t sub_19E86A0F0@<X0>(char a1@<W8>, uint64_t a2, uint64_t a3, unint64_t *a4, unsigned int a5, char a6, int a7, int a8, uint64_t a9)
{
  char v17 = *(unsigned char *)(v9 + 56) ^ v15;
  unsigned int v18 = (((&a4 ^ 0x8F83531B | 0x5C4E858B)
        - (&a4 ^ 0x8F83531B)
        + ((&a4 ^ 0x8F83531B) & 0xA3B17A70)) ^ 0x5EA8665C)
      * v13;
  a9 = v14;
  a5 = v18 + (v16 ^ 0x5F7CFFDB) + (v10 & 0xBEF9FFB6) - 124821507;
  a6 = (((&a4 ^ 0x1B | 0x8B) - (&a4 ^ 0x1B) + ((&a4 ^ 0x1B) & 0x70)) ^ 0x5C)
     * v13
     + (v17 ^ a1)
     + ((((v12 + 82) & 0xBF) + 61) & (2 * v17) ^ 0x50)
     + 72;
  a8 = v12 - v18 + 1628;
  a4 = &STACK[0x1D36EF366988505D];
  uint64_t v19 = (*(uint64_t (**)(unint64_t **))(v11 + 8 * (v12 ^ 0xB20)))(&a4);
  return (*(uint64_t (**)(uint64_t))(v11 + 8 * ((2660 * (a7 == 694817499)) ^ v12)))(v19);
}

uint64_t sub_19E86A214()
{
  int v2 = *(uint64_t (**)(uint64_t))(v1 + 18584);
  return v2(v0);
}

uint64_t sub_19E86A240()
{
  uint64_t v5 = *(void *)(v0 + 8 * (v1 - 1199));
  uint64_t v6 = *(void *)(v5 + 808);
  *(_DWORD *)(v4 - 144) = v1 + 1980347521 * ((v4 + 976528332 - 2 * ((v4 - 152) & 0x3A34A464)) ^ 0x83D0E499) - 1151;
  *(void *)(v3 + 1312) = v6;
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(v2 + 8 * (v1 + 998)))(v4 - 152);
  if (*(_DWORD *)v5 == 1308490554) {
    int v8 = 1308490455;
  }
  else {
    int v8 = *(_DWORD *)v5;
  }
  return (*(uint64_t (**)(uint64_t))(v2
                                            + 8
                                            * (((*(void *)(v5 + 8 * ((v1 ^ 0x1A3u) - 1308491670 + v8) + 8) != 0)
                                              * (v1 - 1153)) ^ v1)))(v7);
}

uint64_t sub_19E86A324()
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * (((((v0 > 0x7E967CBB) ^ (v1 + 122)) & 1) * (v1 - 775)) ^ (v1 - 575))))();
}

uint64_t sub_19E86A368(int a1)
{
  *(_DWORD *)(*v4 + 4 * (v1 + v7 + 452)) = v2;
  return (*(uint64_t (**)(void))(v8 + 8 * (((v1 + v7 + v3 > v6) * a1) ^ v5)))();
}

uint64_t sub_19E86A39C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13)
{
  *(void *)(v16 - 128) = a9;
  *(void *)(v16 - 120) = v13;
  *(_DWORD *)(v16 - 136) = v15
                         + 1305237457 * ((2 * ((v16 - 136) & 0xD5A9B30) - (v16 - 136) - 224041781) ^ 0x4B1CC205)
                         + 1003;
  uint64_t v17 = (*(uint64_t (**)(uint64_t))(v14 + 8 * (v15 ^ 0x86F)))(v16 - 136);
  return (*(uint64_t (**)(uint64_t))(v14
                                            + 8
                                            * ((2325 * ((int)(a13 ^ 0x802B5C30) < (int)((v15 - 324) & 0xFFFFFF3B))) ^ v15)))(v17);
}

uint64_t sub_19E86A45C@<X0>(int a1@<W8>)
{
  uint64_t v4 = *(uint64_t (**)(void))(v3
                                        + 8
                                        * ((((((v2 ^ 0x17E) - 714) | 0x230) ^ 0x27C)
                                          * ((v1 + a1 + 436) < 0x7FFFFFFF)) ^ v2 ^ 0x17E));
  return v4(v4);
}

void sub_19E86A4B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14)
{
  int v17 = 1431787901 * ((v16 - 768366693 - 2 * ((v16 - 192) & 0xD233A85B)) ^ 0xF9A3028C);
  *(_DWORD *)(v16 - 192) = v17 + v14 - 257;
  *(_DWORD *)(v16 - 188) = a14 - v17 + v14 + 326734484;
  (*(void (**)(uint64_t))(v15 + 8 * (v14 + 1128)))(v16 - 192);
  JUMPOUT(0x19E86A524);
}

uint64_t sub_19E86A570(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  return sub_19E86A640(a14 - 0x7CF6A079DDC7252CLL, (v14 + 1989277963), a3, a4, 1284, 0x1CF7BAFCELL, 0xFC7B571F1EEB0BF7, 1037441006);
}

uint64_t sub_19E86A640(void *a1, char a2, uint64_t a3, uint64_t a4, char a5, int a6, int a7, int a8)
{
  uint64_t v22 = 4 * (v19 - 453030483);
  uint64_t v23 = *(_DWORD *)(*v13 + v22) ^ v18;
  int v24 = v9
      + (v23 ^ 0xE7BDD7E7)
      + ((v23 << (a2 & 0xC5u ^ a5)) & a6)
      + (*(_DWORD *)(*v14 + v22) ^ v18 ^ a7)
      + ((2 * (*(_DWORD *)(*v14 + v22) ^ v18)) & a8);
  *(_DWORD *)(*a1 + v22) = v24 + v15 - ((v21 + 2 * (v24 + v15)) & 0x16836D5A) + v8;
  BOOL v25 = v12 < v11;
  if (v25 == v19 + v16 < v11) {
    BOOL v25 = v19 + v16 < v12;
  }
  return (*(uint64_t (**)(void))(v20 + 8 * ((!v25 * v17) ^ v10)))();
}

uint64_t sub_19E86A72C()
{
  return sub_19E86A768();
}

uint64_t sub_19E86A768(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 8 * ((7 * (v10 + 1 != v9)) ^ v8)))();
}

uint64_t sub_19E86A7E0@<X0>(int a1@<W7>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(void))(v4
                              + 8
                              * (int)(((a1 + ((v3 + 989329537) & 0xD77FDFFE) + ((v3 - 1968477963) & 0x755496CD) - 1277)
                                     * (a2 != v2)) ^ v3)))();
}

uint64_t sub_19E86A838(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v10 = v5 + 645;
  BOOL v12 = (v7 & a5) != (((v10 ^ 0xB64u) - v9 - 1947) ^ a2)
     && (*(_DWORD *)(v8 + 48 * (int)v7 + 36) + 1016529640) < 0x80000003;
  return (*(uint64_t (**)(void))(v6 + 8 * ((1189 * v12) ^ v10)))();
}

void sub_19E86A894(int a1@<W7>, int a2@<W8>)
{
  uint64_t v9 = *(void *)(v7 - 0x7CF6A079DDC7252CLL);
  unsigned int v10 = (*(_DWORD *)(v9 + 4 * (a1 + v8 - 689)) ^ v4) >> (v2 ^ 0xFB);
  uint64_t v11 = 4 * (v15 + 437);
  *(_DWORD *)(v9 + v11) = v10 + v4 - (v5 & (2 * v10));
  int v12 = a2 + v3 - (*(_DWORD *)(*(void *)(v7 - 0x7CF6A079DDC7252CLL) + v11) == v4);
  int v13 = v12 - 1951037933;
  int v14 = -1816289063 - v12;
  if ((*v6 - 263820151) < 0x7FFFFFFF) {
    int v14 = v13;
  }
  *uint64_t v6 = v14;
}

uint64_t sub_19E86A970@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, int a9@<W8>)
{
  *(unsigned char *)(a2 + (a9 - 1530971442)) = 50;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 8 * ((1019 * (a9 - 1530971441 + 131 * (v9 ^ 0x591u) - 1760 >= ((v9 - 540) | 0x49u) - 961)) ^ v9)))(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_19E86A9E4(uint64_t a1, int a2)
{
  return (*(uint64_t (**)(void))(v3
                              + 8
                              * (((*(void *)(v2 + 48) == 0x7FDFE0196EC10AFCLL) * (a2 + 3 + a2 - 190 - 442)) ^ a2)))();
}

void sub_19E86AA24()
{
  LOBYTE(STACK[0x2D0]) = -78;
  JUMPOUT(0x19E775188);
}

uint64_t sub_19E86AAAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  int v74 = (v71 - 1859062490) & 0x6ECF0B03;
  uint64_t v75 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(v73 + 8 * (v71 ^ 0xB9E)))(a1, &a71, 128);
  return (*(uint64_t (**)(uint64_t))(v73 + 8
                                                  * (((*(void *)(v72 + 24) == 0) * ((v74 ^ 0x3C) - 771)) ^ v74)))(v75);
}

uint64_t sub_19E86AAEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  *(_OWORD *)(a2 + ((v5 - 390 + 4294965591) & (v4 + a1))) = v7;
  return (*(uint64_t (**)(void))(v6 + 8 * ((((a4 & 0x1FFFFFFF0) == 16) * a3) ^ v5)))();
}

uint64_t sub_19E86AB2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  int v21 = 1305237457 * ((~((v20 - 160) | 0x945E95B7) + ((v20 - 160) & 0x945E95B7)) ^ 0xD218CC86);
  a5[70] = a17;
  a5[66] = a15;
  a5[68] = a14;
  a5[67] = a12;
  *(_DWORD *)(v20 - 136) = v19 + v21 + ((v17 - 1269237648) & 0x7FF797FF ^ 0xD39559DE);
  *(_DWORD *)(v20 - 132) = v21 + v17 - 60;
  a5[72] = a13;
  uint64_t v22 = (*(uint64_t (**)(uint64_t))(v18 + 8 * (v17 ^ 0x812)))(v20 - 160);
  return (*(uint64_t (**)(uint64_t))(v18 + 8 * ((765 * (*(_DWORD *)(v20 - 120) == 694817499)) ^ v17)))(v22);
}

uint64_t sub_19E86AC34@<X0>(int a1@<W2>, int a2@<W3>, int a3@<W4>, int a4@<W5>, int a5@<W6>, int a6@<W7>, int a7@<W8>)
{
  int v17 = (unsigned int *)(v11 + 4 * (v8 + v12));
  uint64_t v18 = v8 + 1;
  int v19 = *(_DWORD *)(v11 + 4 * (v18 + v12));
  *int v17 = v17[397] ^ *(_DWORD *)(v13 + 4 * ((v19 & 1) == 0)) ^ (((((v19 & 0x7FFFFFFE ^ a3)
                                                                  + (v19 & v10 ^ a4)
                                                                  - ((v19 & 0x7FFFFFFE ^ a3) & v10)) ^ a5 | (((a1 + ((a7 - 268) | 0x2E0) + 25) | v7) + a2) & 0x80000000)
                                                                - (a6 & (2
                                                                       * (((v19 & 0x7FFFFFFE ^ a3)
                                                                         + (v19 & v10 ^ a4)
                                                                         - ((v19 & 0x7FFFFFFE ^ a3) & v10)) ^ a5)))
                                                                + v9) >> 1) ^ v16;
  return (*(uint64_t (**)(void))(v14 + 8 * ((62 * (v18 == v15 + 3)) ^ a7)))();
}

void sub_19E86ACE0()
{
}

uint64_t sub_19E86ACEC@<X0>(int a1@<W2>, int a2@<W8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  return (*(uint64_t (**)(void))(v23
                              + 8
                              * ((213
                                * (*(_DWORD *)(a21 + 4 * (a2 + a1 + 1339)) == ((59 * (v21 ^ 0x547)) ^ (v22 - 1707)))) ^ (v21 - 272))))();
}

uint64_t sub_19E86AD3C(uint64_t a1, uint64_t a2, int a3)
{
  return (*(uint64_t (**)(void))(v4 + 8 * ((LODWORD(STACK[0x25C]) - 1501) | (678 * (v3 == a3)))))();
}

uint64_t sub_19E86AD64(uint64_t a1, uint64_t a2, int a3)
{
  *(_OWORD *)(a2 + ((v5 + v7) & v4)) = v9;
  return (*(uint64_t (**)(void))(v8 + 8 * (((v6 == 0) * a3) ^ v3)))();
}

void sub_19E86AD94()
{
  *(_DWORD *)(v1 + 16) = v0;
}

void sub_19E86AD9C(int a1@<W8>)
{
  uint64_t v2 = 4 * (v1 - 2040215476);
  unsigned int v3 = (int *)(STACK[0x228] + v2);
  int v4 = *v3;
  LODWORD(v3) = ((*(_DWORD *)(*(void *)STACK[0x238] + (*(_DWORD *)STACK[0x230] & 0x378F3EE4)) ^ v3) & 0x7FFFFFFF)
              * ((a1 ^ 0x702) + 1631304957);
  LODWORD(v3) = v3 ^ (v3 >> 16);
  unsigned int v5 = 1631306195 * v3;
  *(_DWORD *)(STACK[0x250] + v2) ^= v4 ^ *((_DWORD *)*(&off_1EF0E5660 + a1 - 736) + HIBYTE(v5) - 3) ^ *((_DWORD *)*(&off_1EF0E5660 + (a1 ^ 0x3EE)) + HIBYTE(v5)) ^ *((_DWORD *)*(&off_1EF0E5660 + a1 - 734) + HIBYTE(v5) + 4) ^ (-1043136512 * v3) ^ v5 ^ (-569311339 * HIBYTE(v5));
  JUMPOUT(0x19E86AE8CLL);
}

uint64_t sub_19E86AEE4()
{
  return (*(uint64_t (**)(void))(v3
                              + 8
                              * (((233 * (((v1 - 1244) | 0x184) ^ 0x191) - 1104) * (v0 == v2)) ^ ((v1 - 1244) | 0x184))))();
}

void sub_19E86AF2C(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 4) - 1001500783 * ((a1 + 2025632320 - 2 * (a1 & 0x78BCB240)) ^ 0x32084DF4);
  __asm { BRAA            X9, X17 }
}

uint64_t sub_19E86AFE0(uint64_t a1)
{
  int v1 = 402930427 * ((a1 & 0xAB47B1B6 | ~(a1 | 0xAB47B1B6)) ^ 0x4E01B2F4);
  int v2 = *(_DWORD *)(a1 + 20) + v1;
  uint64_t v3 = (*(_DWORD *)a1 - v1);
  int v4 = *(_DWORD *)(*(void *)(a1 + 24) - 0x7CF6A079DDC72530);
  LODWORD(v6) = v4 - 263820150;
  BOOL v5 = v4 - 263820150 < 0;
  unsigned int v7 = 263820150 - v4;
  if (v5) {
    uint64_t v6 = v7;
  }
  else {
    uint64_t v6 = v6;
  }
  uint64_t v8 = 4 * (v6 - ((2 * v6) & 0x28472980)) - 0x3F67F301AF71AD00;
  unint64_t v9 = (v8 ^ 0xF26E3818F74EDFDLL) + 0x3041108076DECCB8 + ((2 * v8) & 0x81301EFFBFF57DF8 ^ 0x813018FCA1142400);
  unint64_t v10 = (v3 | ((unint64_t)(v3 < 0x2D5DE277) << 32)) + 695970110;
  int v11 = (v10 < 0x56D98BB5) ^ (v9 < 0x56D98BB5);
  BOOL v12 = v9 > v10;
  if (v11) {
    BOOL v13 = v9 < 0x56D98BB5;
  }
  else {
    BOOL v13 = v12;
  }
  return (*((uint64_t (**)(void))*(&off_1EF0E5660 + v2 - 1196)
          + (int)((!v13 * (((v2 + 1149896821) & 0xBB75F7FC) - 915)) ^ v2)
          - 1))();
}

uint64_t sub_19E86B174()
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * ((1003 * (v0 < ((v1 - 517) ^ 0xBEDC7F0B ^ STACK[0x228] & 0x609F47CB))) ^ (v1 - 276))))();
}

void sub_19E86B1C0()
{
}

void sub_19E86B1CC()
{
}

void sub_19E86B1D4()
{
}

uint64_t sub_19E86B244(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29,int a30)
{
  return (*(uint64_t (**)(void))(v31
                              + 8
                              * ((220
                                * (a21 + a2 - v30 < ((a30 - 696264411) ^ 0xC4080080 ^ (a30 - 696264411) & 0x3BF7FF7F ^ 0x10uLL))) ^ (a30 + 132))))();
}

void sub_19E86B2B0(int a1@<W8>, uint64_t a2, int a3, unsigned int a4)
{
  unsigned int v8 = 1431787901
     * ((((2 * (&a2 ^ 0xD19E0AA)) | 0x344B659C) - (&a2 ^ 0xD19E0AA) + 1708805426) ^ 0xBCACF8B3);
  a2 = v5;
  a3 = (v7 - 970) ^ v8;
  a4 = a1 - ((v6 + 980600278) & 0x5125EB82) - v8 + ((v7 + 734052890) & 0xD43F3DE5 ^ 0x85CC5D2C);
  (*(void (**)(uint64_t *))(v4 + 8 * (v7 + 937)))(&a2);
  JUMPOUT(0x19E86B364);
}

void sub_19E86B38C(_DWORD *a1)
{
  unsigned int v1 = *a1 ^ (1575213817
            * ((-1102398904 - (a1 | 0xBE4ABA48) + (a1 | 0x41B545B7)) ^ 0xCCD0F57B));
  __asm { BRAA            X13, X17 }
}

uint64_t sub_19E86B460(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v10 = v7 + ((v9 - 510167222) & 0x1E688FED ^ (a2 + 1994));
  if (v10 <= 0x40) {
    unsigned int v10 = 64;
  }
  BOOL v11 = a1 - v5 - v6 + ((v9 - 510167222) ^ 0xE1977470) + v10 < 0xF;
  return (*(uint64_t (**)(uint64_t, unint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 8 * (((8 * v11) | (32 * v11)) ^ (v9 + 1169))))(4158837387, &STACK[0x360], 2594126357, 1700838839, a5, 1677278997);
}

uint64_t sub_19E86B4F8@<X0>(int a1@<W3>, uint64_t a2@<X8>)
{
  *(void *)(v2 - 7 + (v5 + v3 - v6)) = *(void *)(a2 - 7 + (v5 + v3 - v6));
  return (*(uint64_t (**)(void))(v7
                                           + 8 * ((a1 - 4) ^ (4 * (((a1 - 925) ^ 0x2A0) + v6 != ((a1 - 1613) & v4))))))(v5 - ((a1 - 1613) & v4));
}

uint64_t sub_19E86B548(int a1)
{
  return (*(uint64_t (**)(void))(v3 + 8 * (((((v1 == v2) ^ (a1 - 35)) & 1) * (a1 - 1356)) ^ a1)))();
}

void sub_19E86B578(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  int v2 = (1001500783 * ((a1 & 0xECA6456D | ~(a1 | 0xECA6456D)) ^ 0x59ED4526)) ^ *(_DWORD *)(a1 + 16) ^ 0x23D;
  __asm { BRAA            X10, X17 }
}

uint64_t sub_19E86B77C(uint64_t a1, int a2, uint64_t a3, unsigned int a4)
{
  return (*(uint64_t (**)(void))(v4 + 8 * (int)((((a2 + 315017950) & 0xED393738 ^ (a2 + 539)) * (v5 < a4)) ^ a2)))();
}

void sub_19E86D184()
{
}

uint64_t sub_19E86D18C()
{
  BOOL v9 = v4 < v5;
  int v10 = v0 + 1;
  *(unsigned char *)(*v8 + (v10 + v6)) = -63;
  if (v9 == v10 + v3 < v2) {
    BOOL v9 = v10 + v3 < v4;
  }
  return (*(uint64_t (**)(void))(v7 + 8 * ((!v9 * ((v1 - 104133599) & 0x634F4D7 ^ 0x4E0)) ^ v1)))();
}

uint64_t sub_19E86D200()
{
  return (*(uint64_t (**)(void))(v1
                              + 8
                              * ((505
                                * ((LODWORD(STACK[0x298]) | ((unint64_t)(LODWORD(STACK[0x298]) < 0x7B8B4E8A) << 32))
                                 + ((v0 + 990848278) & 0xC4F0DBAF)
                                 + 727275454 != 2800003057)) ^ v0)))();
}

uint64_t sub_19E86D270(int a1, int64x2_t a2, int64x2_t a3, int64x2_t a4, int64x2_t a5, int64x2_t a6, int8x16_t a7, int8x16_t a8, int64x2_t a9)
{
  int64x2_t v21 = vaddq_s64(a3, v20);
  int64x2_t v22 = vaddq_s64(a4, v20);
  int64x2_t v23 = vaddq_s64(a5, v20);
  int64x2_t v24 = vaddq_s64(a2, v20);
  int64x2_t v25 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(v22, a6), a7);
  int64x2_t v26 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(v23, a6), a7);
  int64x2_t v27 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(v21, a6), a7);
  int64x2_t v28 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(v24, a6), a7);
  int64x2_t v29 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(vsubq_s64(v28, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v28, v28), a8)), a9), (int8x16_t)a9);
  int64x2_t v30 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(vsubq_s64(v27, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v27, v27), a8)), a9), (int8x16_t)a9);
  int64x2_t v31 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(vsubq_s64(v26, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v26, v26), a8)), a9), (int8x16_t)a9);
  int64x2_t v32 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(vsubq_s64(v25, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v25, v25), a8)), a9), (int8x16_t)a9);
  int64x2_t v33 = vaddq_s64(v22, v14);
  v32.i64[0] *= v33.i64[0];
  v32.i64[1] *= v33.i64[1];
  int64x2_t v34 = vaddq_s64(v23, v14);
  v31.i64[0] *= v34.i64[0];
  v31.i64[1] *= v34.i64[1];
  int64x2_t v35 = vaddq_s64(v21, v14);
  v30.i64[0] *= v35.i64[0];
  v30.i64[1] *= v35.i64[1];
  int64x2_t v36 = vaddq_s64(v24, v14);
  v29.i64[0] *= v36.i64[0];
  v29.i64[1] *= v36.i64[1];
  v38.val[1] = (int8x16_t)vaddq_s64(vsubq_s64(v32, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v32, v32), v15)), v16);
  v38.val[0] = (int8x16_t)vaddq_s64(vsubq_s64(v31, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v31, v31), v15)), v16);
  v38.val[2] = (int8x16_t)vaddq_s64(vsubq_s64(v30, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v30, v30), v15)), v16);
  v38.val[3] = (int8x16_t)vaddq_s64(vsubq_s64(v29, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v29, v29), v15)), v16);
  *(int8x8_t *)(v11 - v9 + 91) = vrev64_s8(veor_s8(vadd_s8((int8x8_t)*(_OWORD *)&vqtbl4q_s8(v38, v17), v18), v19));
  return (*(uint64_t (**)(void))(v13 + 8 * (((v12 + v9 == 88) * a1) ^ v10)))();
}

uint64_t sub_19E86D284@<X0>(uint64_t a1@<X3>, int a2@<W8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,int a39)
{
  int v45 = *((_DWORD *)&a27 + ((v42 + a2) >> ((v44 + v40 - 121) ^ (v44 - 2))) + 18);
  *(unsigned char *)(a1 + (v42 + a2)) = v45 ^ 0xF1;
  *(unsigned char *)(a1 + (v42 + a2 + 1)) = BYTE1(v45) ^ 0x8D;
  *(unsigned char *)(a1 + (v42 + a2 + 2)) = BYTE2(v45) ^ 0xB7;
  *(unsigned char *)(a1 + (v42 + a2 + 3)) = HIBYTE(v45) ^ 0x2C;
  BOOL v46 = v42 + 1088823838 < (a39 + 947915481);
  if (v42 + 1088823838 < v39 != a39 + 947915481 < v39) {
    BOOL v46 = a39 + 947915481 < v39;
  }
  return (*(uint64_t (**)(void))(v43 + 8 * ((v46 * v41) ^ v40)))();
}

void sub_19E86D338()
{
}

uint64_t sub_19E86D394@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  LODWORD(STACK[0x394]) = a1;
  uint64_t v14 = (*(uint64_t (**)(uint64_t, void))(v10 + 8 * (v11 ^ 0xC12)))(a9, 0);
  unsigned int v15 = LODWORD(STACK[0xE78]) + v12 - ((2 * LODWORD(STACK[0xE78])) & 0xF8E11006);
  LODWORD(STACK[0xE68]) = v12 + v11 + 287 + LODWORD(STACK[0xE70]) - ((2 * LODWORD(STACK[0xE70])) & 0xF8E11006) - 1525;
  LODWORD(STACK[0xE64]) = v15;
  int v16 = (*(uint64_t (**)(uint64_t))(v10 + 8 * (v11 + 1117)))(v14);
  LODWORD(STACK[0xE6C]) = v12 + v16 - ((2 * v16) & 0xF8E11006);
  int v17 = (*(uint64_t (**)(void))(v10 + 8 * (v11 ^ 0xDE5)))();
  LODWORD(STACK[0xE60]) = v17 + v12 - ((2 * v17) & 0xF8E11006);
  int v18 = ((2 * STACK[0x228]) & 0xAF73FEF6) + (STACK[0x228] ^ 0xD7B9FF7B);
  LODWORD(STACK[0x220]) = v18 - ((2 * v18 + 1351352586) & 0x6F1B1D18) + 1607700241;
  unsigned int v19 = *v9 ^ 0x6F235078 ^ ((*v9 >> 30) | 0x9353D878);
  unsigned int v20 = (v9[1] ^ 0xC791D84D ^ (1664525 * v19 - ((3329050 * v19) & 0x77C2A09C) + 1004621902))
      + (*(_DWORD *)STACK[0x250] ^ v12);
  unsigned int v21 = (v20 ^ 0x9D44F3F6) + 2040215477 + ((2 * v20) & 0x3A89E7EC);
  v9[1] = v21 - ((2 * v21 - 767579990) & 0xF8E11006) - 443524008;
  uint64_t v22 = 1305237457
      * ((~((v13 - 192) | 0x79638AEACBEA8488) + ((v13 - 192) & 0x79638AEACBEA8488)) ^ 0x57C1EC648DACDDB9);
  int v23 = (v11 + 1879423309) ^ v22;
  *(_DWORD *)(v13 - 192) = -1305237457 * ((~((v13 - 192) | 0xCBEA8488) + ((v13 - 192) & 0xCBEA8488)) ^ 0x8DACDDB9);
  *(_DWORD *)(v13 - 188) = v23 ^ 0x64;
  *(void *)(v13 - 152) = v22 ^ 0x2ABA23D7;
  *(_DWORD *)(v13 - 184) = v23;
  *(_DWORD *)(v13 - 180) = 2092385979 - v22 + v11 + 287;
  *(void *)(v13 - 168) = v22 ^ 0x2ABA23D5;
  *(_DWORD *)(v13 - 160) = v23;
  uint64_t v24 = (*(uint64_t (**)(uint64_t))(v10 + 8 * (v11 + 1102)))(v13 - 192);
  return (*(uint64_t (**)(uint64_t))(v10 + 8 * *(int *)(v13 - 176)))(v24);
}

void sub_19E86D64C()
{
}

void sub_19E86D690()
{
}

uint64_t sub_19E86D698()
{
  return (*(uint64_t (**)(void))(v0
                              + 8
                              * (int)((((v1 + 608067682) & 0xDBC19977 ^ 0x158) * ((v2 - 1) < 0x7FFFFFFF)) ^ v1)))();
}

uint64_t sub_19E86D6DC@<X0>(uint64_t a1@<X8>)
{
  int v5 = (v3 - 1523477673) & 0x5ACE6FDF;
  uint64_t v8 = v2;
  uint64_t v9 = a1;
  unsigned int v7 = v3 + 1305237457 * (((&v7 | 0xEA5EDC81) + (~&v7 | 0x15A1237E)) ^ 0x53E77A4E) + 204;
  uint64_t result = (*(uint64_t (**)(unsigned int *))(v1 + 8 * (v3 + 1222)))(&v7);
  *unsigned int v4 = v5 - *v4 + 527638353;
  return result;
}

void sub_19E86D768()
{
}

uint64_t sub_19E86DA0C()
{
  *(void *)(v0 + 40) = 0;
  return (*(uint64_t (**)(void))(v1 + 8 * (((*v2 != 0) * ((8 * v3) ^ 0x2E2F)) ^ v3)))();
}

void sub_19E86DE24(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16) ^ (1001500783 * ((2 * (a1 & 0x2B052101) - a1 - 721756418) ^ 0x9E4E214A));
  __asm { BRAA            X8, X17 }
}

uint64_t sub_19E86DF14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11, uint64_t a12, int a13, int a14, uint64_t a15, uint64_t a16)
{
  *(_DWORD *)(a12 - 0x67AD5A2084A5D3A0) = -1611038164 - v16;
  int v20 = 583844137 * ((((v19 - 136) | 0x92AF293D) - ((v19 - 136) & 0x92AF293D)) ^ 0x827194B0);
  *(void *)(v19 - 128) = a15;
  *(_DWORD *)(v19 - 136) = v20 + v18 + 242;
  *(_DWORD *)(v19 - 120) = v20 + 748716562;
  (*(void (**)(uint64_t))(v17 + 8 * (v18 ^ 0xBDE)))(v19 - 136);
  int v21 = 402930427 * ((716814459 - ((v19 - 136) | 0x2AB9B87B) + ((v19 - 136) | 0xD5464784)) ^ 0xCFFFBB39);
  *(_DWORD *)(v19 - 120) = ((a11 - a14) ^ 0x7BD485C8) - v21 + ((2 * (a11 - a14)) & 0xF7FFB3C0 ^ 0x56B040) + 1054603232;
  *(void *)(v19 - 128) = a15;
  *(_DWORD *)(v19 - 136) = (v18 + 763) ^ v21;
  (*(void (**)(uint64_t))(v17 + 8 * (v18 ^ 0xB96)))(v19 - 136);
  *(_DWORD *)(v19 - 136) = v18
                         + 1305237457 * ((((2 * (v19 - 136)) | 0xF4D81F4C) - (v19 - 136) - 2053902246) ^ 0xC3D5A968)
                         + 681;
  *(void *)(v19 - 128) = &STACK[0x7CF6A079DDC72564];
  *(void *)(v19 - 120) = a16;
  (*(void (**)(uint64_t))(v17 + 8 * (v18 + 1699)))(v19 - 136);
  *(void *)(v19 - 128) = a16;
  *(void *)(v19 - 120) = a15;
  *(_DWORD *)(v19 - 132) = v18
                         + 291962093 * ((2 * ((v19 - 136) & 0x75F4E278) - (v19 - 136) - 1978983037) ^ 0x9BF910C9)
                         + 381;
  uint64_t v22 = (*(uint64_t (**)(uint64_t))(v17 + 8 * (v18 + 1644)))(v19 - 136);
  BOOL v23 = *(_DWORD *)(v19 - 136) + ((59 * ((v18 + 166865656) & 0xF60DD3C5 ^ 0x141)) ^ 0xC4407E12) < 0xD2B55D33;
  return (*(uint64_t (**)(uint64_t))(v17 + 8 * (((4 * v23) | (32 * v23)) ^ v18)))(v22);
}

uint64_t sub_19E86E1A8@<X0>(int a1@<W2>, int a2@<W3>, uint64_t a3@<X4>, int a4@<W8>)
{
  return (*(uint64_t (**)(void))(v6
                              + 8
                              * ((1126
                                * (v4
                                 + ((2 * *(unsigned __int8 *)(a3 + 4)) & 0x7777)
                                 + (*(unsigned __int8 *)(a3 + 4) ^ (v5 + a2 - 452))
                                 - 246 == a4)) ^ a1)))();
}

uint64_t sub_19E86E1EC@<X0>(unsigned int a1@<W1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X7>, uint64_t a6@<X8>)
{
  uint64_t v12 = (v8 - 1);
  unint64_t v13 = a2 + v12 + ((unint64_t)(v12 < a1) << 32) + 556;
  *(unsigned char *)(a4 + v13 + 36) = *(unsigned char *)(a3 + v13) ^ *(unsigned char *)(v6 + (v13 & 0xF)) ^ *(unsigned char *)(v7 + (v13 & 0xF)) ^ ((v9 ^ v10) * (v13 & 0xF)) ^ *(unsigned char *)((v13 & 0xF) + a6 + 1) ^ 0xC1;
  return (*(uint64_t (**)(void))(a5 + 8 * (((v12 == a1) * ((v9 ^ v11) - 502)) ^ ((v9 ^ v11) + 1585))))();
}

uint64_t sub_19E86E26C@<X0>(uint64_t a1@<X4>, unsigned int a2@<W8>)
{
  LOBYTE(STACK[0x360]) = *(unsigned char *)(a1 + a2);
  return (*(uint64_t (**)(void))(v4 + 8 * ((752 * ((v3 & 0xFFFFFFFC) == ((7 * (v2 ^ 0x447)) ^ 0x63F93F59))) ^ v2)))();
}

uint64_t sub_19E86E2BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,int a52,unsigned __int8 a53)
{
  int v55 = a53 ^ 0xA4;
  if (v55 == 114) {
    return (*(uint64_t (**)(uint64_t))(v53
  }
                                              + 8
                                              * ((26 * (LODWORD(STACK[0x3BC]) == (v54 ^ 0x748) + 166532563)) ^ (v54 + 1720))))(a13);
  if (v55 != 113) {
    JUMPOUT(0x19E86E4E0);
  }
  return (*(uint64_t (**)(uint64_t))(v53
                                            + 8 * (((LODWORD(STACK[0x3BC]) != 166534360) * (v54 - 14)) ^ (v54 + 1746))))(a13);
}

void sub_19E86E8A8(int a1@<W8>)
{
  *(void *)(v5 - 0x1A3B3DFF0D4F490CLL) = *v2;
  *(_DWORD *)(v6 - 0x1B623CBCC684D9FFLL) = a1;
  *int v2 = 0;
  *(void *)(v9 - 0x19C7A72C32A62CBBLL) = 0x580C5FD8580C5FD8;
  *uint64_t v4 = 1725680076;
  unsigned int v3 = (((v1 + 331622218) | (2 * (*(_DWORD *)(v9 - 0x19C7A72C32A62CAFLL) & 0xFFFFFFFE ^ 0xCEFB14F7)))
      - (*(_DWORD *)(v9 - 0x19C7A72C32A62CAFLL) & 0xFFFFFFFE ^ 0xCEFB14F7)
      - 165811726) ^ 0x753088CD;
  *(_DWORD *)(v9 - 0x19C7A72C32A62CAFLL) = (v3 - ((2 * v3) & 0x1402C30) + 10491416) ^ 0xB2899C2D;
  *(_DWORD *)(v8 + 8) = *v7;
}

uint64_t sub_19E86E9DC@<X0>(uint64_t a1@<X0>, unsigned int a2@<W2>, uint64_t a3@<X4>, int a4@<W8>)
{
  *(void *)(*(void *)(a1 + 16) - 0x519E2D9B46F0E39CLL) = (a2 | ((unint64_t)(a2 < 0x66DBC9CC) << 32))
                                                           + a3
                                                           - 1725680068;
  return (*(uint64_t (**)(void))(v4 + 8 * (((*v5 == v6) * ((a4 + 218) ^ 0x5E2)) ^ (a4 + 218))))();
}

uint64_t sub_19E86EA58(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  int v2 = 1575213817 * ((-2 - ((a1 | 0x20BA2424) + (~a1 | 0xDF45DBDB))) ^ 0x52206B17);
  int v3 = *(_DWORD *)(a1 + 24) ^ v2;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 40);
  unsigned int v7 = ((*(_DWORD *)a1 + v2) ^ 0xA6BA5065) + 1270861566 + ((2 * (*(_DWORD *)a1 + v2)) & 0xFD8FFFAC ^ 0xB08B5F24);
  int v8 = 583844137 * ((v10 - 1249890239 - 2 * ((unint64_t)v10 & 0xB5803041)) ^ 0xA55E8DCC);
  uint64_t v11 = *(void *)(a1 + 48);
  uint64_t v12 = v6;
  uint64_t v13 = v5;
  uint64_t v14 = v4;
  v10[1] = v3 + v8 + 1006216145;
  v10[2] = v7 ^ v8;
  uint64_t result = (*((uint64_t (**)(_DWORD *))*(&off_1EF0E5660 + (v3 & 0x10108446)) + (int)(v3 ^ 0xC4066A61) - 1))(v10);
  *(_DWORD *)(a1 + 28) = v10[0];
  return result;
}

uint64_t sub_19E86EBCC()
{
  int v3 = ((v0 & 0x3C3CE5AF) - 164) | 0x10;
  (*(void (**)(void))(v1 + 8 * (v0 & 0x3C3CE5AF ^ 0xDC2u)))();
  *(void *)(*(void *)v2 + 24) = 0;
  return (*(uint64_t (**)(void))(v1
                              + 8
                              * (((*(void *)(*(void *)v2 + 32) != 0) * ((17 * (v3 ^ 0x4D0)) ^ 0x481)) ^ v3)))();
}

uint64_t sub_19E86EC34()
{
  return (*(uint64_t (**)(void))(v3 + 8 * (((((v2 + 1430) | 0x41) ^ 0x68C) * (v1 + 1 != v0 + 64)) ^ v2)))();
}

void sub_19E86EC70(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  int v1 = *(_DWORD *)(a1 + 16) + 583844137 * ((a1 & 0x49E6B9B | ~(a1 | 0x49E6B9B)) ^ 0xEBBF29E9);
  int v2 = *(_DWORD *)(*(void *)(a1 + 8) - 0x7CF6A079DDC72530);
  uint64_t v4 = *(void *)(a1 + 8);
  unsigned int v5 = v1 + 1431787901 * (((&v4 | 0xD2053BA1) - (&v4 & 0xD2053BA1)) ^ 0xF9959176) - 1033;
  uint64_t v3 = (char *)*(&off_1EF0E5660 + (v1 ^ 0x735)) - 8;
  (*(void (**)(uint64_t *))&v3[8 * v1 + 3752])(&v4);
  __asm { BRAA            X8, X17 }
}

uint64_t sub_19E86EDAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t *a11, uint64_t a12, unint64_t *a13, int a14, int a15, int a16)
{
  unsigned int v20 = 402930427 * ((&a11 & 0xD6415B6D | ~(&a11 | 0xD6415B6D)) ^ 0x3307582F);
  a11 = &STACK[0x5B59BD67F1E3CE3B];
  a12 = v18;
  a16 = v20 ^ 0x1A3C4D6A;
  a14 = v19 - v20 + 985;
  a13 = &STACK[0x519E2D9B46F0E39C];
  uint64_t v21 = (*(uint64_t (**)(unint64_t **))(v17 + 8 * (v19 ^ 0x892)))(&a11);
  return (*(uint64_t (**)(uint64_t))(v17
                                            + 8
                                            * (int)(((*(_DWORD *)(v18 - 0x19C7A72C32A62CABLL) == v16)
                                                   * ((v19 + 2048316706) & 0x85E92FEF ^ 0x508)) ^ v19)))(v21);
}

uint64_t sub_19E86EEA4()
{
  unsigned int v10 = (v3 + 1326) ^ (1001500783
                     * ((&v8 + 1564895627 - 2 * (&v8 & 0x5D46698B)) ^ 0x17F2963F));
  int v8 = v7;
  uint64_t v9 = &STACK[0x3BF054D022E33112];
  (*(void (**)(unint64_t **))(v1 + 8 * (v3 + 2184)))(&v8);
  LODWORD(v8) = v3
              + ((2 * ((&v8 ^ 0xB0151CF7) & 0x602240BD) - (&v8 ^ 0xB0151CF7) - 1612857534) ^ 0x3E3AAEFF)
              * v2
              + 1390;
  uint64_t v9 = v7;
  (*(void (**)(unint64_t **))(v1 + 8 * (v3 + 2145)))(&v8);
  int v4 = HIDWORD(v8);
  uint64_t v9 = v7;
  HIDWORD(v8) = v3
              - ((2 * ((&v8 ^ 0x61573B24) & 0x49975014) - (&v8 ^ 0x61573B24) + 912830441) ^ 0x46CD9987)
              * v2
              + 1006;
  (*(void (**)(unint64_t **))(v1 + 8 * (v3 ^ 0x9C0u)))(&v8);
  uint64_t v9 = v6;
  HIDWORD(v8) = v3 - 28 - (&v8 ^ 0x11F20D4A) * v2 + 1034;
  (*(void (**)(unint64_t **))(v1 + 8 * ((v3 - 28) ^ 0x9A4)))(&v8);
  return v4 ^ v0;
}

uint64_t sub_19E86F064@<X0>(int a1@<W1>, int a2@<W2>, int a3@<W3>, int a4@<W4>, int a5@<W5>, uint64_t a6@<X6>, int a7@<W7>, int a8@<W8>)
{
  int v20 = v12 + 1;
  uint64_t v21 = 4 * (v20 + a8);
  int v22 = (a7 ^ ((unint64_t)(v19 + a6) >> 32))
      + (v13 & ((unint64_t)(v19 + a6) >> 31))
      + v16
      + (*(_DWORD *)(*v11 + v21) ^ 0xF4BE4952 ^ a1)
      + (a2 & (2 * (*(_DWORD *)(*v11 + v21) ^ 0xF4BE4952)));
  *(_DWORD *)(*v11 + v21) = v22 + a3 - 2 * ((v22 + a3 + a4) & (v14 + 2) ^ (v22 + a3) & 2) + a5;
  BOOL v23 = v20 + v17 < v10;
  if (v10 < v9 != v20 + v17 < v9) {
    BOOL v23 = v10 < v9;
  }
  return (*(uint64_t (**)(void))(v15 + 8 * ((v23 * v18) ^ v8)))();
}

uint64_t sub_19E86F080()
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * (((*(void *)(v0 + 8) == 0x57D6105BEF2C606DLL)
                                * ((((v1 - 477) ^ 0x257) + 663) ^ (v1 + 776))) ^ (v1 - 477))))();
}

uint64_t sub_19E86F1E8(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  return sub_19E7A3B6C(a4, 694817499);
}

uint64_t sub_19E86F224@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, int a9@<W8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  int v32 = v24 + 1;
  *(unsigned char *)(v28 + (v32 + v25 + a9)) = *(unsigned char *)(a24 + v31 + v27)
                                                   - ((2 * *(unsigned char *)(a24 + v31 + v27)) & 0x83)
                                                   - 63;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v30 + 8 * ((((a6 + v32 + 66) < 0x40) * v29) ^ v26)))(a1, a2, a3, a4, a5, a6, a7, a8, a10, a11, a12, a13, a14, a15, a16);
}

uint64_t sub_19E86F22C@<X0>(uint64_t a1@<X1>, int a2@<W8>)
{
  *(unsigned char *)(a1 + (a2 - 1530971441)) = v3;
  return (*(uint64_t (**)(void))(v4 + 8 * (((((v2 - 158) | 0x80) ^ 0x346) * (a2 == 1530971504)) ^ (v2 + 1052))))();
}

uint64_t sub_19E86F2A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14)
{
  int v16 = a14 - 263820150;
  if (a14 - 263820150 < 0) {
    int v16 = 263820150 - a14;
  }
  return (*(uint64_t (**)(uint64_t))(v14
                                            + 8
                                            * (int)((((int)((v16 ^ 0xFFB977F)
                                                          + ((v15 + 2113373708) & 0x820879EF)
                                                          + ((2 * v16) & 0x1FF72EFE)
                                                          - 268146825) >= 0)
                                                   * (((((v15 + 2113373708) & 0x820879EF) + 112) | 0x86) + 551)) ^ (v15 + 2113373708) & 0x820879EF)))(188855981);
}

uint64_t sub_19E86F344@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(void))(v5
                              + 8
                              * ((1862
                                * (v1
                                 + (*(unsigned __int8 *)(v3 + 2) ^ v2)
                                 + ((2 * *(unsigned __int8 *)(v3 + 2)) & 0x7777)
                                 - 71 == a1 + ((v4 - 236) | 0x50C) - 1501)) ^ v4)))();
}

uint64_t sub_19E86F394(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,unint64_t a61,uint64_t a62)
{
  unsigned int v68 = (v62 + 2014972071) | 0x820180A2;
  *unint64_t v65 = v65[623];
  int v69 = v68 - 804855917 - v66;
  *(_DWORD *)(v67 - 124) = v66 + 1;
  *(_DWORD *)(v67 - 120) = v69 + 113;
  *(_DWORD *)(v67 - 116) = -1196567909 - v66 + v68;
  STACK[0x680] = (v64 + 853507009) - v66;
  STACK[0x688] = a61;
  *(_DWORD *)(v67 - 152) = v69;
  *(_DWORD *)(v67 - 128) = ((v68 - 804855917) ^ 0x19) - v66;
  uint64_t v70 = (*(uint64_t (**)(uint64_t))(v63 + 8 * (int)(v68 + 98859640)))(v67 - 152);
  return (*(uint64_t (**)(uint64_t))(a62 + 8 * *(int *)(v67 - 148)))(v70);
}

uint64_t sub_19E86F450@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(void))(v3
                              + 8
                              * ((106
                                * ((v2 ^ 0x7FB34C7F)
                                 - 747718769
                                 + (v1 & 0xFF6698FE)
                                 + 567 * (((a1 - 310) | 1) ^ 0x3ED)
                                 - 1394740589 < 0x7FFFFF7D)) ^ a1)))();
}

uint64_t sub_19E86F4AC@<X0>(int a1@<W0>, int a2@<W1>, int a3@<W3>, uint64_t a4@<X4>, unsigned int a5@<W5>, int a6@<W6>, int a7@<W7>, int a8@<W8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  uint64_t v43 = 4 * (v33 + 1 + a3);
  int v44 = *(_DWORD *)(*v30 + v43) ^ v28;
  uint64_t v45 = *(_DWORD *)(a27 + v43) ^ v28;
  uint64_t v46 = (v34 & ((unint64_t)(v31 + a4) >> 31))
      + (((a8 - 197) + 0x4FFCF2D75FDFFAA5) ^ ((unint64_t)(v31 + a4) >> 32))
      + (v45 ^ v35);
  int v47 = v36 & (2 * v45);
  LODWORD(v45) = ((v44 ^ v38) + v40 + (v39 & (2 * v44))) * v29;
  LODWORD(v46) = v46 + v47 + (v45 ^ v27) + (v41 & (2 * v45));
  *(_DWORD *)(a27 + 4 * (v33 - 1599610584)) = v46 - ((v42 + 2 * v46) & a7) + v32;
  BOOL v48 = v33 + a2 < a1;
  if (a5 > 0x33DABEE7 != v33 + a2 < a6) {
    BOOL v48 = a5 > 0x33DABEE7;
  }
  return (*(uint64_t (**)(void))(v37 + 8 * (((16 * !v48) | (32 * !v48)) ^ a8)))();
}

uint64_t sub_19E86F5B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,unsigned int a24)
{
  return (*(uint64_t (**)(void))(v25
                                           + 8
                                           * ((23 * (((a24 < 0xB0) ^ (v24 - 118)) & 1)) ^ (v24 + 276))))(*a22);
}

void sub_19E86F5EC()
{
}

uint64_t sub_19E86F5F8(uint64_t a1, int a2)
{
  uint64_t v11 = (v8 - 1);
  unint64_t v12 = (v11 | ((unint64_t)(v11 < v3) << 32)) - 201978368;
  *(unsigned char *)(*(void *)(v10 - 120) + v12) = *(unsigned char *)(v5 + (v12 & 0xF)) ^ *(unsigned char *)(v2 + v12) ^ *(unsigned char *)(v4 + (v12 & 0xF)) ^ *(unsigned char *)(v6 + (v12 & 0xF)) ^ ((v12 & 0xF) * (((v7 - 57) & 0xE7) - 67));
  return (*(uint64_t (**)(void))(v9 + 8 * (((v11 != v3) * a2) ^ v7)))();
}

uint64_t sub_19E86F878@<X0>(uint64_t a1@<X7>, uint64_t a2@<X8>)
{
  if ((*(_DWORD *)(v2 + 1428) | 4) == 0x7D0EF0D4) {
    return (*(uint64_t (**)(void))(a1
  }
                                + 8
                                * (int)((2035
                                       * (*(_DWORD *)(a2 + 476) == ((STACK[0x458] - 22) | 0x100)
                                                                 + 1546349322)) ^ (STACK[0x458] + 299))))();
  STACK[0x578] = STACK[0x3C0];
  return v3();
}

uint64_t sub_19E86FAC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  *(void *)(v29 - 120) = v25;
  *(void *)(v29 - 112) = a23;
  *(void *)(v29 - 144) = a24;
  *(void *)(v29 - 136) = a23;
  *(_DWORD *)(v29 - 128) = v26
                         - (((((v29 - 144) | 0x1F946858) ^ 0xFFFFFFFE) - (~(v29 - 144) | 0xE06B97A7)) ^ 0xF1999AED)
                         * v24
                         + 854;
  *(void *)(v29 - 104) = a19;
  uint64_t v30 = (*(uint64_t (**)(uint64_t))(v27 + 8 * (v26 ^ 0xCA0)))(v29 - 144);
  return (*(uint64_t (**)(uint64_t))(v27
                                            + 8
                                            * ((111
                                              * ((((v26 - 133) | 0x86) ^ (v28 + 1157)) + a21 > 0x7FFFFFFE)) ^ (v26 - 1226))))(v30);
}

uint64_t sub_19E86FB78(uint64_t a1)
{
  return (*((uint64_t (**)(void))*(&off_1EF0E5660 + (int)(*(_DWORD *)a1 - 291962093 * (a1 ^ 0x11F20D4A) - 1514))
          + (int)(((*(void *)(a1 + 8) == 0x19C7A72C32A62CC3) * (*(_DWORD *)a1 - 291962093 * (a1 ^ 0x11F20D4A) - 1475)) ^ (*(_DWORD *)a1 - 291962093 * (a1 ^ 0x11F20D4A)))
          - 1))();
}

uint64_t sub_19E86FBE8(_DWORD *a1)
{
  unsigned int v1 = 583844137 * ((2 * (a1 & 0x5C026FA2) - a1 + 603820125) ^ 0x33232DD0);
  unsigned int v2 = *a1 - v1;
  unsigned int v3 = a1[4] - v1;
  unsigned int v5 = v3 - 748716561;
  BOOL v4 = (int)(v3 - 748716561) < 0;
  LODWORD(v6) = 748716561 - v3;
  if (v4) {
    uint64_t v6 = v6;
  }
  else {
    uint64_t v6 = v5;
  }
  return (*((uint64_t (**)(void))*(&off_1EF0E5660 + (int)(v2 - 819))
          + (int)(((v6 != ((2 * v6) & 0xEEAE56DC)) * (((v2 - 853) | 0x111) - 81)) ^ v2)
          - 1))();
}

uint64_t sub_19E86FCA8@<X0>(int a1@<W3>, char a2@<W8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,char a27)
{
  uint64_t v32 = v30 - 2767958147 + (a1 + v29 - 833);
  char v33 = ((((v28 + a2) ^ 0xBA) + v27 - ((2 * ((v28 + a2) ^ 0xBA)) & 0x24)) ^ v27) * (v28 + a2 + 17);
  *(&a27 + v32) = (v33 - ((2 * v33) & 0x83) + 65) ^ 0x41;
  return (*(uint64_t (**)(void))(v31 + 8 * ((131 * (v32 == 0)) ^ v29)))();
}

void sub_19E86FD2C()
{
  (*(void (**)(void))(v1 + 8 * (v0 + 1106)))();
  sub_19E774F04(*v2);
}

void sub_19E86FD44()
{
}

uint64_t sub_19E86FD4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  return (*(uint64_t (**)(void))(v7 + 8 * (((v6 < 4 * (a6 ^ 0x380u) - 1436) * ((321 * (a6 ^ 0x2EA)) ^ 0x7E4)) ^ a6)))();
}

uint64_t sub_19E86FD90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11)
{
  return (*(uint64_t (**)(void))(v12
                              + 8
                              * ((((((v13 - 1924333288) & 0x72B2F9D5) - 408) ^ (31 * (v13 ^ 0x6EC))) * (a11 == v11 + 4)) ^ v13)))();
}

uint64_t sub_19E86FDE4(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 4);
  *(void *)(a1 + 32) = *(void *)(a2 + 8);
  return 0;
}

uint64_t sub_19E86FE4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  *(_DWORD *)(*(void *)(v11 - 0x7CF6A079DDC7252CLL) + 4 * (v9 + v7)) = a7;
  return (*(uint64_t (**)(void))(v10 + 8 * ((15 * (v9 + v7 - 1 <= (v8 ^ 0x475) - 452)) ^ v8)))();
}

void sub_19E86FE9C()
{
}

void sub_19E86FF5C(uint64_t a1)
{
  unsigned int v2 = (uint64_t *)*(&off_1EF0E5660
                  + ((79 * ((qword_1E945E360 + dword_1E945D918) ^ 0x71)) ^ byte_19EC54D60[byte_19EC7A400[(79 * ((qword_1E945E360 + dword_1E945D918) ^ 0x71))] ^ 0xB8])
                  - 6);
  unsigned __int8 v3 = 79 * ((qword_1E945E360 + *v2) ^ 0x71);
  BOOL v4 = (unint64_t *)*(&off_1EF0E5660
                           + (*((unsigned char *)off_1EF0E5A68
                                               + (*((unsigned __int8 *)off_1EF0E5AF0 + v3 - 12) ^ 0xB8u)
                                               - 12) ^ v3)
                           - 108);
  unint64_t v5 = *v2 - (void)&v9 + *v4;
  uint64_t v6 = 1616673103 * (v5 + 0x5807F13683BD618FLL);
  unint64_t v7 = 1616673103 * (v5 ^ 0xA7F80EC97C429E71);
  *unsigned int v2 = v6;
  *BOOL v4 = v7;
  LODWORD(v4) = *(_DWORD *)v2;
  int v8 = (char *)*(&off_1EF0E5660
               + ((79 * (dword_1E945D918 ^ 0x71 ^ qword_1E945E360)) ^ byte_19EC54D60[byte_19EC7A400[(79 * (dword_1E945D918 ^ 0x71 ^ qword_1E945E360))] ^ 0x44])
               - 95)
     - 8;
  (*(void (**)(char *, uint64_t (*)()))&v8[8
                                                   * (*((unsigned char *)off_1EF0E5DA8
                                                                       + (*((unsigned __int8 *)off_1EF0E5E28
                                                                          + (79
                                                                                            * ((v7 - (_BYTE)v4) ^ 0x71))
                                                                          - 4) ^ 0x56u)
                                                                       - 8) ^ (79 * ((v7 - (_BYTE)v4) ^ 0x71)))
                                                   + 16600])((char *)*(&off_1EF0E5660+ ((79 * (v4 ^ 0x71 ^ v7)) ^ *((unsigned char *)off_1EF0E5DA8+ (*((unsigned __int8 *)off_1EF0E5E28+ (79 * (v4 ^ 0x71 ^ v7))- 4) ^ 0x76u)- 8))+ 16)- 4, sub_19E87FF5C);
  __asm { BRAA            X9, X17 }
}

uint64_t sub_19E87013C@<X0>(int a1@<W8>)
{
  *uint64_t v1 = v1[623];
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * (((v3 - 1 == (((a1 ^ 0x4CE) - 1457) ^ 0x4D3DC73E)) * (((a1 ^ 0x4CE) - 57) ^ 0x493)) ^ a1 ^ 0x4CE)))();
}

uint64_t sub_19E870190()
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  int v0 = (unsigned __int8 *)off_1EF0E5E08;
  uint64_t v1 = (char *)off_1EF0E5D58 - 4;
  uint64_t v2 = (uint64_t)*(&off_1EF0E5660
                + (*((unsigned char *)off_1EF0E5D58
                                                  + (*((unsigned __int8 *)off_1EF0E5E08
                                                     + (79 * (dword_1E945E798 ^ 0x71 ^ qword_1E945E360))) ^ 0x58u)
                                                  - 4) ^ (79 * (dword_1E945E798 ^ 0x71 ^ qword_1E945E360)))
                + 18);
  uint64_t v3 = *(void *)(v2 - 4);
  BOOL v4 = (unint64_t *)*(&off_1EF0E5660
                           + ((79 * ((qword_1E945E360 + v3) ^ 0x71)) ^ *((unsigned char *)off_1EF0E5D58
                                                                                        + (*((unsigned __int8 *)off_1EF0E5E08
                                                                                           + (79 * ((qword_1E945E360 + v3) ^ 0x71))) ^ 0x1Fu)
                                                                                        - 4))
                           - 176);
  unint64_t v5 = (unint64_t)&v14[*v4 - v3];
  uint64_t v6 = 1616673103 * v5 + 0x5807F13683BD618FLL;
  unint64_t v7 = 1616673103 * (v5 ^ 0xA7F80EC97C429E71);
  *(void *)(v2 - 4) = v6;
  *BOOL v4 = v7;
  LOBYTE(v7) = 79 * ((v7 + *(_DWORD *)(v2 - 4)) ^ 0x71);
  int v8 = (char *)off_1EF0E5AF0 - 12;
  char v9 = (char *)off_1EF0E5A68 - 12;
  int v17 = (char *)*(&off_1EF0E5660
                + (*((unsigned char *)off_1EF0E5A68
                                    + (*((unsigned __int8 *)off_1EF0E5AF0 + v7 - 12) ^ 0xB8u)
                                    - 12) ^ v7)
                - 82);
  unsigned int v16 = 1001500783 * (((&v15 | 0xFA599E8F) + (~&v15 | 0x5A66170)) ^ 0xB0ED613A) + 2310;
  uint64_t v10 = (char *)*(&off_1EF0E5660
                + ((79 * (dword_1E945E798 ^ 0x71 ^ qword_1E945E360)) ^ byte_19EC54D60[byte_19EC7A400[(79 * (dword_1E945E798 ^ 0x71 ^ qword_1E945E360))] ^ 0xCE])
                - 156)
      - 8;
  (*(void (**)(unsigned int *))&v10[8
                                             * ((79 * ((*(unsigned char *)v4 + *(unsigned char *)(v2 - 4)) ^ 0x71)) ^ v1[v0[(79 * ((*(unsigned char *)v4 + *(unsigned char *)(v2 - 4)) ^ 0x71))] ^ 0x99])
                                             + 18616])(&v15);
  int v17 = (char *)*(&off_1EF0E5660
                + ((79 * ((*(_DWORD *)v4 + *(_DWORD *)(v2 - 4)) ^ 0x71)) ^ v9[v8[(79 * ((*(_DWORD *)v4 + *(_DWORD *)(v2 - 4)) ^ 0x71))] ^ 0x44])
                + 33)
      - 4;
  unsigned int v16 = 1001500783
      * (((&v15 | 0x69D88424) - &v15 + (&v15 & 0x96277BD8)) ^ 0x236C7B90)
      + 2310;
  uint64_t v11 = off_1EF0E5CA8;
  uint64_t v12 = (char *)off_1EF0E57E0 - 4;
  (*(void (**)(unsigned int *))&v10[8
                                             * (*((unsigned char *)off_1EF0E57E0
                                                                 + ((*off_1EF0E5CA8)[(79 * ((*(_DWORD *)v4 + *(_DWORD *)(v2 - 4)) ^ 0x71))] ^ 0xDDu)
                                                                 - 4) ^ (79
                                                                       * ((*(_DWORD *)v4 + *(_DWORD *)(v2 - 4)) ^ 0x71)))
                                             + 18448])(&v15);
  LOBYTE(v16) = (-109 * ((~&v15 | 0xE2) + (&v15 | 0x1D))) ^ 0x58;
  unsigned int v15 = 961177747 * (((~&v15 | 0xFC866FE2) + (&v15 | 0x379901D)) ^ 0x242B6100) + 1633;
  return (*(uint64_t (**)(unsigned int *))&v10[8
                                                       * ((79
                                                                          * ((*(_DWORD *)v4 + *(_DWORD *)(v2 - 4)) ^ 0x71)) ^ v12[(*v11)[(79 * ((*(_DWORD *)v4 + *(_DWORD *)(v2 - 4)) ^ 0x71))] ^ 0x49])
                                                       + 17856])(&v15);
}

uint64_t sub_19E870534()
{
  return sub_19E870578();
}

uint64_t sub_19E870578@<X0>(uint64_t a1@<X8>)
{
  *(unsigned char *)(a1 + (v8 + v7)) = *(unsigned char *)(v4 + (v8 + v7));
  return (*(uint64_t (**)(void))(v1 + 8 * (v3 ^ (2 * (v8 + v6 + v5 != v2)))))(0);
}

uint64_t sub_19E8705A8@<X0>(uint64_t a1@<X0>, unsigned int a2@<W8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,int a39)
{
  int v44 = v40 ^ (v43 - 1143);
  int v45 = *(_DWORD *)(&a27 + (v44 ^ 0x9ABC377E) + v41 + 72);
  *(unsigned char *)(a1 + (v44 ^ 0x9ABC377E) + v41) = HIBYTE(v45) ^ 0x2C;
  *(unsigned char *)(a1 + (v41 + v39)) = BYTE2(v45) ^ 0xB7;
  *(unsigned char *)(a1 + (v41 + v39 + 1)) = BYTE1(v45) ^ 0x8D;
  *(unsigned char *)(a1 + (v41 + v39 + 2)) = v45 ^ 0xF1;
  BOOL v46 = v41 + 327841445 < (a39 - 2133757495);
  if (v41 + 327841445 < a2 != a39 - 2133757495 < a2) {
    BOOL v46 = a39 - 2133757495 < a2;
  }
  return (*(uint64_t (**)(void))(v42 + 8 * ((224 * v46) ^ v40)))();
}

uint64_t sub_19E870660(uint64_t result)
{
  unint64_t v1 = 1431787901 * (((result | 0xA4A86D44794EECB9) - (result & 0xA4A86D44794EECB9)) ^ 0xE247B5A252DE466ELL);
  unint64_t v2 = *(void *)(result + 8) + v1;
  unint64_t v3 = *(void *)(result + 16) ^ v1;
  BOOL v4 = v3 == v2;
  BOOL v5 = v3 > v2;
  int v6 = v4;
  if ((*(_DWORD *)(result + 28) - v1)) {
    int v7 = v5;
  }
  else {
    int v7 = v6;
  }
  if (v7) {
    int v8 = (_DWORD *)result;
  }
  else {
    int v8 = (_DWORD *)(result + 24);
  }
  *(_DWORD *)(result + 4) = (*v8 + v1) ^ (*(_DWORD *)(result + 32) + v1);
  return result;
}

uint64_t sub_19E8706E8()
{
  return v0();
}

uint64_t sub_19E8706F0()
{
  return sub_19E8707E0();
}

uint64_t sub_19E8707E0(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
  uint64_t v19 = 4 * (v15 - 1836579180);
  int v20 = v8
      + (*(_DWORD *)(*v12 + v19) ^ 0xB41B6AD ^ a2)
      + (((v11 + 568) ^ a3) & (2 * (*(_DWORD *)(*v12 + v19) ^ 0xB41B6AD)))
      + (*(_DWORD *)(*v13 + v19) ^ 0xB41B6AD ^ a4)
      - (a5 & (2 * (*(_DWORD *)(*v13 + v19) ^ 0xB41B6AD)));
  *(_DWORD *)(*v14 + v19) = v20 + a6 - ((a7 + 2 * (v20 + a6)) & 0x16836D5A) + a8;
  BOOL v21 = v10 < v9;
  if (v21 == v15 + v17 < v9) {
    BOOL v21 = v15 + v17 < v10;
  }
  return (*(uint64_t (**)(void))(v16 + 8 * ((v21 * v18) ^ v11)))();
}

uint64_t sub_19E8708B0(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 24);
  return 0;
}

void sub_19E8708C8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = (*(_DWORD *)(a2 + 4) - 2072727178) < 0x102;
  __asm { BRAA            X9, X17 }
}

uint64_t sub_19E87092C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  a21 = 2057538114;
  HIDWORD(a10) = 2072727485;
  return sub_19E870A30(a1, a2, 48, a4, &a21, a6, 2996759556, 2147483652, &a69, a10, a11, &STACK[0x7C30A4ACD6601737]);
}

uint64_t sub_19E870A30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21)
{
  BOOL v27 = v22 != 5 * (((v21 + 5242957) | 0x34009023) ^ (v24 - 285)) + 1298204201
     || ((a21 == v25) ^ 0x47) + 2 * (a21 == v25) == 71;
  return (*(uint64_t (**)(void))(v23 + 8 * ((118 * v27) ^ v21)))();
}

uint64_t sub_19E870AAC@<X0>(int a1@<W8>)
{
  unsigned int v5 = (((v4 + v3) >> 4) & 0x7F7EBCE ^ 0x2812B4C) + (((v4 + v3) >> 5) ^ 0x7EBF6249);
  if (v2 > 0x5BA21A52 != v5 < ((a1 + 1786048262) & 0x958B0FFF) + 2080109617) {
    BOOL v6 = v2 > 0x5BA21A52;
  }
  else {
    BOOL v6 = v5 + 677507014 < v2 - 1537350227;
  }
  return (*(uint64_t (**)(void))(v1 + 8 * ((v6 * ((188 * (a1 ^ 0x2B3)) ^ 0x80C)) ^ a1)))();
}

uint64_t sub_19E870B6C@<X0>(int a1@<W8>)
{
  unint64_t v4 = 402930427
     * ((((v3 - 216) | 0x1B69D2786FCE509FLL) - (v3 - 216) + ((v3 - 216) & 0xE4962D879031AF60)) ^ 0x6EC9ECBC7577AC22);
  unsigned int v5 = (unint64_t *)(v3 - 216);
  *unsigned int v5 = v1 ^ v4;
  v5[1] = v4 + 1022322419;
  *(_DWORD *)(v3 - 188) = a1 - v4 + 1575175976;
  *(_DWORD *)(v3 - 184) = a1 - v4 + 1575176068;
  *(_DWORD *)(v3 - 180) = v4 + a1 - 389757719;
  *(_DWORD *)(v3 - 200) = v4;
  *(_DWORD *)(v3 - 196) = a1 - v4 + 1575175930;
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(v2 + 8 * (a1 ^ 0x97A)))(v3 - 216);
  return (*(uint64_t (**)(uint64_t))(v2 + 8 * *(int *)(v3 - 192)))(v6);
}

uint64_t sub_19E870C40()
{
  BOOL v5 = v1 + 598429874 > ((v2 + 1082) ^ 0x9A41E88B) && v1 + 598429874 <= v0;
  return (*(uint64_t (**)(void))(v3 + 8 * (((2 * v5) | (32 * v5)) ^ v2)))();
}

uint64_t sub_19E870C90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5
                                                                       + 8
                                                                       * ((462
                                                                         * (v3 + 698984409 + ((v4 - 1658) | 0xDu) < v4 - 1658)) ^ v4)))(2293702135, a2, a3, 3631);
}

uint64_t sub_19E870CE4(int *a1)
{
  signed int v2 = (a1[1] ^ (583844137 * ((a1 & 0x1D4F369D | ~(a1 | 0x1D4F369D)) ^ 0xF26E74EF)))
     + 643747757;
  uint64_t result = (*((uint64_t (**)(char *, void (*)()))*(&off_1EF0E5660 + v2)
            + (int)((a1[1] ^ (583844137
                            * ((a1 & 0x1D4F369D | ~(a1 | 0x1D4F369D)) ^ 0xF26E74EF)))
                  + 643749981)
            - 1))((char *)*(&off_1EF0E5660+ (int)((a1[1] ^ (583844137* ((a1 & 0x1D4F369D | ~(a1 | 0x1D4F369D)) ^ 0xF26E74EF)))+ 643747768))- 8, sub_19E828430);
  int v4 = *(_DWORD *)*(&off_1EF0E5660 + v2 + 148);
  if (result != ((2 * result) & 0x52D425B6)) {
    int v4 = -694859675;
  }
  *a1 = v4;
  return result;
}

void sub_19E870DBC(uint64_t a1)
{
  BOOL v3 = *(_DWORD *)(*(void *)(a1 + 16) - 0x7CF6A079DDC72530) != 263820150
    && *(_DWORD *)(*(void *)(a1 + 8) - 0x7CF6A079DDC72530) != 263820150;
  int v1 = *(_DWORD *)a1 + 1980347521 * (((a1 | 0x906CFAAC) - a1 + (a1 & 0x6F930553)) ^ 0x2988BA51);
  __asm { BRAA            X13, X17 }
}

uint64_t sub_19E870ECC(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  return (*(uint64_t (**)(uint64_t, void))(v5
                                                    + 8
                                                    * (int)(((((((a4 + 1613117455) & 0x9FD9C7D3) + 1455843851) & 0xA939977E ^ 0xFFFFF984)
                                                            + ((a4 + 1613117455) & 0x9FD9C7D3)
                                                            - 1057)
                                                           * (v4 < 0x20)) ^ (a4 + 1613117455) & 0x9FD9C7D3)))(a1, 0);
}

uint64_t sub_19E870F2C()
{
  return (*(uint64_t (**)(void))(v0
                              + 8
                              * ((106
                                * ((((v1 - 1440) ^ 0xE1 ^ (((v3 - v2) & 0x1F ^ 0x65B7FEBF) + 2 * ((v3 - v2) & 0x1F) == 1706557119)) & 1) == 0)) ^ (v1 - 208))))();
}

void sub_19E870FAC()
{
}

void sub_19E870FB8()
{
}

uint64_t sub_19E87101C()
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * ((59
                                * ((((*(_DWORD *)&v1 | 0xFFFFFFFD) - 255363016) ^ 0xB4C6FC37)
                                 + ((v0 - 1445) | 0x80)
                                 - ((((v0 - 1445) ^ 0x264) + 195767) & (2
                                                                      * (((*(_DWORD *)&v1 | 0xFFFFFFFD) - 255363016) ^ 0xB4C6FC37))) != 1140753831)) ^ v0)))();
}

uint64_t sub_19E871088(uint64_t a1, double a2, __n128 a3, __n128 a4, __n128 a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,__n128 a63)
{
  __n128 v67 = (__n128)vld1q_dup_f32(v66);
  return sub_19E8D54E4(a1, 1466566708, 4049385810, 2270274391, 1538677931, 750804368, 2522885833, 2657267453, v67, a3, a4, a5, a66, a65, a64, a63);
}

uint64_t sub_19E871090(uint64_t a1, char a2)
{
  uint64_t v7 = v4 + 1;
  int v8 = *(unsigned __int8 *)(v2 + v7 - 0x4BA11E1A6C16FB15);
  unsigned int v9 = v8 ^ 0xDF73CABA;
  int v10 = (2 * v8) & 0x174;
  unsigned int v11 = *(unsigned __int8 *)(v3 + v7 - 0x4BA11E1A6C16FB15);
  if (v11 >= ((v5 ^ a2) + 18)) {
    int v12 = 0;
  }
  else {
    int v12 = -256;
  }
  return (*(uint64_t (**)(void))(v6 + 8 * ((1042 * (v9 - v11 + v10 + v12 == -546059597)) | v5)))();
}

void sub_19E871098()
{
  unint64_t v0 = STACK[0xEA0];
  STACK[0x9E0] = STACK[0xE90];
  LODWORD(STACK[0x9D8]) = STACK[0xE88];
  *(void *)(v0 + 488) = STACK[0xE48];
  *(_DWORD *)(v0 + 480) = STACK[0xE40];
  JUMPOUT(0x19E8711F0);
}

uint64_t sub_19E87138C@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(void))(v3
                              + 8
                              * ((v2 - 683) | (16
                                             * ((((v2 - 240260796) ^ ((-698984449 - v1 - a1 + 26) < 7)) & 1) == 0)))))();
}

uint64_t sub_19E8713DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  *(_DWORD *)(v25 - 120) = v24
                         + 1305237457
                         * ((1519611289 - ((v25 - 120) | 0x5A936D99) + ((v25 - 120) | 0xA56C9266)) ^ 0x1CD534A8)
                         - 383;
  *(void *)(v25 - 112) = a4;
  *(void *)(v25 - 104) = a23;
  (*(void (**)(uint64_t))(v23 + 8 * (v24 ^ 0xF85)))(v25 - 120);
  *(_DWORD *)(v25 - 116) = v24 + 291962093 * ((v25 - 120) ^ 0x11F20D4A) - 683;
  *(void *)(v25 - 112) = a23;
  *(void *)(v25 - 104) = a20;
  uint64_t v26 = (*(uint64_t (**)(uint64_t))(v23 + 8 * (v24 ^ 0xE5C)))(v25 - 120);
  return (*(uint64_t (**)(uint64_t))(v23
                                            + 8
                                            * ((31
                                              * (*(_DWORD *)(v25 - 120) > ((v24 - 1448324855) & 0x5653AC77 ^ 0x3BBF8531u))) ^ v24)))(v26);
}

void sub_19E87150C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  int v20 = 402930427 * ((v19 - 144) ^ 0x1AB9FCBD);
  *(void *)(v19 - 120) = v18;
  *(_DWORD *)(v19 - 124) = v17 - v20 + 689;
  *(void *)(v19 - 136) = a15;
  *(_DWORD *)(v19 - 144) = v20 + v15 + ((347 * (v17 ^ 0x244)) ^ 0x165FAB82);
  (*(void (**)(uint64_t))(v16 + 8 * (v17 ^ 0xB7E)))(v19 - 144);
  JUMPOUT(0x19E743A38);
}

uint64_t sub_19E87188C()
{
  return (*(uint64_t (**)(void))(v0 + 8 * (((((v1 ^ v3) - 258) ^ 0x2A0) * (v2 > 0xA4BAD008)) ^ (v1 + 98857908))))();
}

uint64_t sub_19E8718DC()
{
  return (*(uint64_t (**)(void))(v2 + 8 * ((v1 - 575) ^ (8 * (v0 >= (((v1 ^ 0x3D7) + 432) ^ 0x7E9678C4u))))))();
}

uint64_t sub_19E871910(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, int a8)
{
  uint64_t v27 = (a2 + 1073847557);
  unsigned int v8 = (v20 ^ 0x40019CFA) + a2 + a8;
  int v9 = *(unsigned __int8 *)(*v26 + v8) ^ v25;
  unsigned int v10 = (((v9 - ((2 * v9) & 0xFFFFFFF3)) << 24) - 117440512) ^ 0xF9000000;
  int v11 = *(unsigned __int8 *)(*v26 + v8 + 1) ^ v25;
  int v12 = (((v11 - ((2 * v11) & 0x1AC)) << 16) + 768999424) ^ 0x2DD60000;
  unsigned int v13 = (v12 + 165382965 - ((2 * v12) & 0x13B60000)) ^ 0x9DB8B35 | (v10 + v22 - ((2 * v10) & 0xE3FFFFFF)) ^ v22;
  int v14 = *(unsigned __int8 *)(*v26 + v8 + 2) ^ v25;
  int v15 = (v21 + ((v14 - ((2 * v14) & 0x7A)) << 8)) ^ v21;
  unsigned int v16 = (v13 - 247959735 - ((2 * v13) & 0xE270DE92)) ^ 0xF1386F49 | (v15 + 1499223852 - ((2 * v15) & 0x32B8AE00)) ^ 0x595C572C;
  int v17 = *(unsigned __int8 *)(*v26 + v8 + 3) ^ v25;
  unsigned int v18 = (v16 + 1127416329 - ((2 * v16) & 0x86660412)) ^ 0x43330209 | (v17 + a6 - ((2 * v17) & 0x1E0)) ^ a6;
  return (*(uint64_t (**)(uint64_t, void, void))(v24 + 8 * v20))(v27, (2 * v18) & 0x52D425B6, v18 + v23 - ((2 * v18) & 0x52D425B6));
}

void sub_19E871934()
{
  if (v0 == 176025885) {
    int v1 = 694817499;
  }
  else {
    int v1 = -694859517;
  }
  *uint64_t v2 = v1;
}

void sub_19E871998(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 32)
     - 961177747 * (((a1 ^ 0x6BB4C2C5 | 0x7EE1305) - (a1 ^ 0x6BB4C2C5) + ((a1 ^ 0x6BB4C2C5) & 0xF811ECFA)) ^ 0x4B0820DC);
  __asm { BRAA            X15, X17 }
}

uint64_t sub_19E871AD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,unsigned __int8 a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,int a45)
{
  int v47 = a24 ^ 0xF9;
  if (v47 == 47) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v45
  }
                                                                + 8 * ((224 * (a45 != 166534360)) ^ (a8 + v46 + 1111))))(a9, 2466242558, 2138569737);
  if (v47 != 44) {
    JUMPOUT(0x19E871D18);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v45
                                                                       + 8
                                                                       * ((635
                                                                         * (a45 != (v46 ^ (v46 - 1143)) + 166533215)) ^ (a8 + v46 + 1111))))(a1, 2466242558, 2138569737, a9);
}

uint64_t sub_19E871EB4(int a1)
{
  return (*(uint64_t (**)(void))(v3
                              + 8
                              * (((291 * (a1 ^ 0x404) + ((a1 - 377568104) & 0x16813FEB) - 2258) * (v1 == v2)) ^ a1)))();
}

uint64_t sub_19E871F00@<X0>(int a1@<W1>, uint64_t a2@<X4>, int a3@<W6>, int a4@<W8>)
{
  *(unsigned char *)(v5 + v6 + a2) = *(unsigned char *)(v8 + (a4 + a1))
                           - ((2 * *(unsigned char *)(v8 + (a4 + a1))) & 0x83)
                           - 63;
  return (*(uint64_t (**)(void))(v7 + 8 * ((120 * (v5 + 1 != v9 + 64)) ^ (a3 + v4 + 1834))))();
}

uint64_t sub_19E871F58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  *(void *)(v20 - 120) = v16;
  *(void *)(v20 - 112) = a15;
  *(void *)(v20 - 136) = v16;
  *(void *)(v20 - 128) = a12;
  *(_DWORD *)(v20 - 104) = v18
                         + 402930427 * ((((2 * (v20 - 136)) | 0x829AA7F2) - (v20 - 136) + 1051896839) ^ 0xDBF4AF44)
                         - 777;
  uint64_t v21 = (*(uint64_t (**)(uint64_t))(v17 + 8 * (v18 ^ 0x14B)))(v20 - 136);
  unsigned int v23 = (((v15 - 1619631216) >> 1) ^ 0xEDBDFF7D) + ((v15 - 1619631216) & 0xDB7BFEFA);
  return (*(uint64_t (**)(uint64_t))(v17
                                            + 8
                                            * ((15
                                              * (((v19 + v23 + 2) & a11)
                                               + 1716643828
                                               - ((((v19 + v23 + 2) & a11) << (v18 - 98)) & 0xCCA3CFB2) == 1716643828)) ^ v18)))(v21);
}

uint64_t sub_19E87205C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  BOOL v8 = v5 < v4;
  unint64_t v9 = ((a4 + 466524869) & 0xE431653B ^ 0x84EB4E3EBA1400D8) + v6;
  int v10 = v8 ^ (v9 < v4);
  BOOL v11 = v9 < v5;
  if (!v10) {
    BOOL v8 = v11;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 8 * (v8 ^ a4 ^ 1)))(2, a2, 1);
}

void sub_19E8720E8()
{
}

uint64_t sub_19E872108(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10
                                                              + 8
                                                              * ((115
                                                                * (v8
                                                                 + 748293145
                                                                 + a8
                                                                 + ((v9 + 2138569926) & 0x92FFDFFE)
                                                                 + 1288 > 0x3F)) ^ v9)))(a1, a2, 3488969685);
}

uint64_t sub_19E872164(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned int a12, unsigned int a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,int a54)
{
  if (a13 < a12 != a54 - 1761469313 < (v55 - 987169236)) {
    BOOL v56 = a54 - 1761469313 < (v55 - 987169236);
  }
  else {
    BOOL v56 = a54 - 1761469313 > a13;
  }
  return (*(uint64_t (**)(void))(v54 + 8 * ((57 * ((((v55 + 51) ^ v56) & 1) == 0)) ^ (v55 + 1607))))();
}

uint64_t sub_19E87216C()
{
  unsigned int v5 = ((v1 - 1681130608) & 0x6433FEAF ^ 0x8A6E7E31) + *(_DWORD *)(v2 + 4) - v0;
  BOOL v7 = (*(_DWORD *)(v3 - 0x19C7A72C32A62CAFLL) & ((v1 ^ 0x5C0) - 548)) == 0 && v5 < 0xFFFFFFBF;
  return (*(uint64_t (**)(void))(v4 + 8 * (((2 * v7) | (16 * v7)) ^ v1)))();
}

void sub_19E8721FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned char *a10)
{
  unsigned int v13 = v11 - ((2 * v11 + 350025898) & 0x1C82AC58) + ((v12 + 796) ^ 0x98AFDA0B);
  *a10 = HIBYTE(v13) ^ 0xCF;
  a10[1] = BYTE2(v13) ^ 0x80;
  a10[2] = ((unsigned __int16)(v11 - ((2 * v11 - 1878) & 0xAC58) + ((v12 + 796) ^ 0xDA0B)) >> 8) ^ 0x97;
  a10[3] = (v11 - ((2 * v11 - 86) & 0x58) + ((v12 + 28) ^ 0xB)) ^ 0xED;
  unint64_t v14 = ((2 * v10) & 0xFE7E3DA89FF9A722)
      + (v10 ^ 0xFF3F1ED44FFCD391)
      - ((2 * (((2 * v10) & 0xFE7E3DA89FF9A722) + (v10 ^ 0xFF3F1ED44FFCD391)) + 0x181C257600658DELL) & 0x4CC7CB8ADF1456E8)
      + 0x2724C6F11F8D57E3;
  a10[4] = HIBYTE(v14) ^ 0xE7;
  a10[5] = BYTE6(v14) ^ 0xA2;
  a10[6] = BYTE5(v14) ^ 0x24;
  a10[7] = BYTE4(v14) ^ 4;
  a10[8] = ((((2 * v10) & 0x9FF9A722)
           + (v10 ^ 0x4FFCD391)
           - ((2 * (((2 * v10) & 0x9FF9A722) + (v10 ^ 0x4FFCD391)) + 1611028702) & 0xDF1456E8)
           + 529356771) >> 24) ^ 0xAE;
  a10[9] = BYTE2(v14) ^ 0x4B;
  a10[10] = BYTE1(v14) ^ 0xEA;
  a10[11] = (((2 * v10) & 0x22) + (v10 ^ 0x91) - ((2 * (((2 * v10) & 0x22) + (v10 ^ 0x91)) - 34) & 0xE8) - 29) ^ 0xB5;
  JUMPOUT(0x19E87BE2CLL);
}

uint64_t sub_19E87233C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  int v74 = v71;
  int v75 = LODWORD(STACK[0x394])++;
  *a69 = v75 + 458213053;
  uint64_t v76 = (*a71 - 1688529740);
  int v77 = (v74 - 1013078031) ^ a22;
  *(_DWORD *)(v73 - 160) = v77 ^ 0x97;
  *(void *)(v73 - 152) = v76 ^ a22;
  *(_DWORD *)(v73 - 192) = -(int)a22;
  *(_DWORD *)(v73 - 188) = v77 ^ 0xFB;
  *(_DWORD *)(v73 - 184) = v77;
  *(_DWORD *)(v73 - 180) = 2092385979 - a22 + v74;
  *(void *)(v73 - 168) = a17;
  uint64_t v78 = (*(uint64_t (**)(uint64_t))(v72 + 8 * (v74 ^ 0xCD1)))(v73 - 192);
  return (*(uint64_t (**)(uint64_t))(v72 + 8 * *(int *)(v73 - 176)))(v78);
}

uint64_t sub_19E872344(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  return sub_19E872350(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36);
}

uint64_t sub_19E872350@<X0>(uint64_t a1@<X1>, uint64_t a2@<X6>, int a3@<W8>)
{
  int8x16_t v9 = *(int8x16_t *)(a2 + (a3 + v6 + v4));
  v10.i64[0] = 0x8282828282828282;
  v10.i64[1] = 0x8282828282828282;
  *(int8x16_t *)(a1 + v4) = vaddq_s8(vsubq_s8(v9, vandq_s8(vaddq_s8(v9, v9), v10)), v8);
  return (*(uint64_t (**)(void))(v7 + 8 * (((v4 == 48) * v5) ^ (v3 + 223))))();
}

void sub_19E872398()
{
}

uint64_t sub_19E8723AC(uint64_t result)
{
  *(_DWORD *)(*(void *)(result + 8) - 0x7A3849771BBF578CLL) = 0x1000000;
  return result;
}

uint64_t sub_19E8723CC(uint64_t a1)
{
  int v1 = 1305237457 * (((a1 | 0xF9A7E9AC) - (a1 & 0xF9A7E9AC)) ^ 0x401E4F62);
  int v2 = *(_DWORD *)(a1 + 16) - v1;
  uint64_t v3 = *(void *)(a1 + 8);
  unsigned int v4 = (*(_DWORD *)a1 ^ v1) - 1250507301;
  unsigned int v5 = v4
     + (*(_DWORD *)(v3 - 0x542A6DEB665DB922) ^ 0x441025E4)
     - ((2 * (v4 + (*(_DWORD *)(v3 - 0x542A6DEB665DB922) ^ 0x441025E4))) & 0x88204BC8)
     + 1141908964;
  *(_DWORD *)(v3 - 0x542A6DEB665DB922) = v5;
  return (*((uint64_t (**)(void))*(&off_1EF0E5660 + (v2 ^ 0x223)) + ((22 * ((v5 ^ 0x441025E4) < v4)) ^ v2) - 1))();
}

uint64_t sub_19E872498@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(void))(v4
                              + 8
                              * ((((190 * (((v1 - 2058) | 0x184) ^ 0x1B1)) ^ 0x3D8)
                                * (*(void *)(*(void *)(v3 + 8 * (v1 - 1926))
                                             + 8 * (a1 + v2 + 100)
                                             + 8) != 0)) ^ v1)))();
}

uint64_t sub_19E8724F0@<X0>(int a1@<W2>, uint64_t a2@<X4>, int a3@<W6>, int a4@<W8>)
{
  return (*(uint64_t (**)(void))(v6
                              + 8
                              * ((405
                                * (v5
                                 + (*(unsigned __int8 *)(a2 + 2) ^ v4)
                                 + ((2 * *(unsigned __int8 *)(a2 + 2)) & 0x7777)
                                 + ((a1 + 139507022) & 0xF7AF4BC6 ^ a3)
                                 + 62 == a4)) ^ a1)))();
}

void sub_19E87254C()
{
}

uint64_t sub_19E87257C@<X0>(uint64_t a1@<X4>, uint64_t a2@<X7>, uint64_t a3@<X8>)
{
  int v8 = STACK[0x5D4];
  unsigned int v9 = (2 * LODWORD(STACK[0x5D4]) + 1713697732) & 0xB0FB5F66;
  unsigned int v10 = 1575213817 * (v5 ^ 0x8D65B0CC);
  *(void *)(v7 - 240) = a3;
  *(void *)(v7 - 232) = a1 + 0x9033E6691F09CB9;
  *(void *)(v7 - 208) = v6;
  *(void *)(v7 - 200) = a1 + 0x6C4003946134F50ALL;
  *(_DWORD *)(v7 - 248) = v4 + 463 - v10 + v8 - v9 + 193996649;
  *(_DWORD *)(v7 - 216) = -1575213817 * (v5 ^ 0x8D65B0CC) + 1391786789 * v3 - 1104592735;
  *(_DWORD *)(v7 - 224) = (v4 - 1006214366) ^ v10;
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(a2 + 8 * (v4 ^ 0x900)))(v7 - 248);
  unint64_t v12 = STACK[0x460];
  int v13 = *(_DWORD *)(v7 - 220);
  LODWORD(STACK[0x600]) = v13;
  return (*(uint64_t (**)(uint64_t))(v12 + 8 * ((834 * (v13 == 694817499)) ^ v4)))(v11);
}

uint64_t sub_19E872680(uint64_t a1)
{
  int v2 = *(_DWORD *)(*(void *)(a1 + 16) - 0x7CF6A079DDC72530) - 896706149;
  int v3 = *(_DWORD *)(*(void *)(a1 + 8) - 0x7CF6A079DDC72530) - 896706149;
  int v4 = (v2 < 1514597649) ^ (v3 < 1514597649);
  BOOL v5 = v2 > v3;
  if (v4) {
    BOOL v6 = v2 < 1514597649;
  }
  else {
    BOOL v6 = v5;
  }
  int v1 = *(_DWORD *)(a1 + 4) - 291962093 * ((a1 - 447231944 - 2 * (a1 & 0xE557C838)) ^ 0xF4A5C572);
  return (*((uint64_t (**)(void))*(&off_1EF0E5660 + (v1 ^ 0x442))
          + (int)((!v6 * ((v1 + 531219179) & 0xE0563FFB ^ 0x6F9)) | v1)
          - 1))();
}

uint64_t sub_19E87278C(int a1)
{
  return (*(uint64_t (**)(void))(v3
                              + 8
                              * (((a1 + v2 + 75498545 >= 3 * (v1 ^ 0x768u) - 574) * (4 * (v1 ^ 0x751) - 908)) ^ v1)))();
}

uint64_t sub_19E8727EC@<X0>(int a1@<W0>, int a2@<W8>)
{
  return (*(uint64_t (**)(void))(v6
                              + 8
                              * ((988
                                * ((*(unsigned __int8 *)(v3 + 7) ^ v2)
                                 + a1
                                 + ((v4 - 327481790) & 0x1384FDDD ^ (v5 + 992))
                                 + ((2 * *(unsigned __int8 *)(v3 + 7)) & 0x7777) == a2)) ^ v4)))();
}

void sub_19E872848()
{
}

void sub_19E87289C()
{
}

uint64_t sub_19E872910()
{
  LODWORD(STACK[0xE40]) = 1639538820;
  STACK[0xE48] = 0;
  LODWORD(STACK[0xE50]) = 753450676;
  LODWORD(STACK[0xE58]) = 2072727178;
  STACK[0xE60] = 0;
  LODWORD(STACK[0xE68]) = 2072727178;
  STACK[0xE70] = 0;
  LODWORD(STACK[0xE78]) = 2072727178;
  STACK[0xE80] = 0;
  LODWORD(STACK[0xE88]) = 2072727178;
  LOBYTE(STACK[0xE98]) = 124;
  *(_OWORD *)&STACK[0x3CC] = 0u;
  STACK[0x3DC] = 0x7B8B4E8A00000000;
  LODWORD(STACK[0x3C8]) = 1639538820;
  LODWORD(STACK[0x3E4]) = 740445576;
  LODWORD(STACK[0x4B0]) = 740445576;
  *(_OWORD *)&STACK[0x57C] = 0u;
  *(_OWORD *)&STACK[0x58C] = 0u;
  STACK[0x59C] = 0;
  STACK[0x830] = 0xC1C1C1C1C1C1C1C1;
  STACK[0x838] = 0xC1C1C1C1C1C1C1C1;
  STACK[0x840] = 3250700737;
  STACK[0x848] = 0;
  STACK[0x850] = 0;
  *(_OWORD *)&STACK[0x858] = 0u;
  *(_OWORD *)&STACK[0x868] = 0u;
  STACK[0xE90] = 0;
  return (*(uint64_t (**)(void))(v1 + 8 * ((589 * (v0 == 983)) ^ (v0 - 1007))))();
}

uint64_t sub_19E872A00(int a1, int a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v48 = 4 * (v37 + 1 + a4);
  int v49 = (v35 + a8) & 0x308F7AFE ^ (v39 + 1988) ^ *(_DWORD *)(a31 + v48);
  LODWORD(v48) = ((*(_DWORD *)(*v31 + v48) ^ v39 ^ v45) + ((2 * (*(_DWORD *)(*v31 + v48) ^ v39)) & v46) + v47) * v36;
  int v50 = (((unint64_t)(a6 + v38) >> 31) & 0x4EDF77A8)
      + (((unint64_t)(a6 + v38) >> 32) ^ 0xA76FBBD4)
      + (v49 ^ v43)
      + (v44 & (2 * v49))
      + (v48 ^ v33)
      + (v32 & (2 * v48));
  *(_DWORD *)(a31 + 4 * (v37 + a4)) = v50 - ((v34 + 2 * v50) & 0x16836D5A) + a2;
  BOOL v52 = v37 + a1 > v40 || v37 + a1 < a3;
  return (*(uint64_t (**)(void))(v41 + 8 * ((v52 * v42) ^ v35)))();
}

void sub_19E872B04(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1F4188790](a1);
  int v2 = 291962093 * (((v1 | 0x710051E1) - v1 + (v1 & 0x8EFFAE1E)) ^ 0x60F25CAB);
  int v3 = *(_DWORD *)(v1 + 28) ^ v2;
  __asm { BRAA            X9, X17 }
}

uint64_t sub_19E872C30()
{
  return (*(uint64_t (**)(void))(v3
                              + 8
                              * ((42 * (v0 != (((v2 + v1 - 27) | 0x80) ^ 0x6F))) ^ (v2 + v1 + 932))))();
}

uint64_t sub_19E872C78@<X0>(int a1@<W8>)
{
  *(void *)(v1 + 24) = 0;
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * (((*(void *)(*(void *)v3 + 32) != 0) * (((a1 - 800) | 0x140) - 1377)) ^ a1)))();
}

uint64_t sub_19E872D64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21)
{
  return (*(uint64_t (**)(void))(v22
                              + 8 * (((((a21 == a6 + 10) ^ v21) & 1) * (v21 - 498)) ^ (v21 - 139))))();
}

uint64_t sub_19E872D9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  *(void *)(v28 - 112) = a23;
  *(void *)(v28 - 104) = v25;
  *(_DWORD *)(v28 - 116) = v27 + ((((2 * (v28 - 120)) | 0x1C453F64) - (v28 - 120) - 237150130) ^ 0x1FD092F8) * v23 + 859;
  uint64_t v29 = (*(uint64_t (**)(uint64_t))(v24 + 8 * (v27 + 2122)))(v28 - 120);
  return (*(uint64_t (**)(uint64_t))(v24
                                            + 8
                                            * (int)(((*(_DWORD *)(v28 - 120) > v26)
                                                   * (((v27 + 1117388118) & 0xBD66077D) - 1295)) ^ v27)))(v29);
}

uint64_t sub_19E872E3C@<X0>(uint64_t a1@<X8>, int a2, int a3)
{
  *(_DWORD *)(a1 - 0x18A79E01698C40FCLL) = a3;
  return (*(uint64_t (**)(void))(v5
                              + 8
                              * (((*(void *)(v4 + 32) == 0x64C485B0870068B5)
                                * (((((v3 + 802) | 0x100) - 2101162469) & 0x7D3D2AD7) + 3871)) ^ ((v3 + 802) | 0x100))))();
}

uint64_t sub_19E872EB0()
{
  BOOL v2 = (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8 * (v1 ^ 0x952)))(200, 1616997413) != 0;
  return (*(uint64_t (**)(void))(v0 + 8 * ((v2 * ((210 * (v1 ^ 0x1E4)) ^ ((v1 + 1813) | 2) ^ 0x1E)) ^ v1)))();
}

void sub_19E872F14()
{
}

uint64_t sub_19E8745BC(uint64_t a1, int a2)
{
  *(int8x8_t *)(a1 - 7 + (v5 + v4 + v6 - v7)) = vadd_s8(*(int8x8_t *)(v2 - 7 + (v5 + v4 + v6 - v7)), (int8x8_t)0x8484848484848484);
  return (*(uint64_t (**)(void))(v8 + 8 * (((v7 - (v3 & 0xFFFFFFF8) == -8) * (a2 + 2027)) ^ a2)))();
}

void sub_19E874618()
{
}

uint64_t sub_19E8746D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  unint64_t v12 = ((a10 + 4) ^ (v10 - 85 - 0x4476586802300CB6))
      + 0x447658688E39078ELL
      + (((v10 ^ 0x65) + 0x77134F2FFB9FE82DLL) & (2 * (a10 + 4)));
  unint64_t v13 = (a10 ^ 0x6F057FF77557FE77) - 0x6F057FF6E94F020CLL + ((2 * a10) & 0xDE0AFFEEEAAFFCEELL);
  BOOL v14 = v12 < 0x8C08FC6B;
  BOOL v15 = v12 > v13;
  if (v13 < 0x8C08FC6B != v14) {
    BOOL v15 = v14;
  }
  return (*(uint64_t (**)(uint64_t))(v11 + 8 * ((985 * !v15) ^ v10)))(0x447658688E39078ELL);
}

uint64_t sub_19E8747F4@<X0>(int a1@<W1>, int a2@<W8>)
{
  return (*(uint64_t (**)(void))(v4
                              + 8
                              * ((15 * (((((v2 - 16779451) & 0xA5FBB7B6) - v3 + 1180) ^ (a1 + 1235)) + a2 >= a2 + a1)) ^ v2)))();
}

uint64_t sub_19E8760C0@<X0>(int a1@<W3>, int a2@<W8>)
{
  return (*(uint64_t (**)(void))(v2 + 8 * (v3 + a1 + 458 + (v3 + a1 - 559) * (a2 == v4))))();
}

uint64_t sub_19E8760E8@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  int v22 = (a1 - 612926152) & 0x24888787;
  *(void *)(v21 - 144) = a17;
  *(void *)(v21 - 136) = a16;
  *(_DWORD *)(v21 - 128) = a1
                         - ((((2 * ((v21 - 144) ^ 0x29AFE05E)) | 0xF6D6B18) - ((v21 - 144) ^ 0x29AFE05E) + 2018069108) ^ 0xBFEB5898)
                         * v17
                         + 2070;
  *(void *)(v21 - 120) = v18;
  *(void *)(v21 - 112) = a16;
  *(void *)(v21 - 104) = a8;
  uint64_t v23 = (*(uint64_t (**)(uint64_t))(v19 + 8 * (a1 + 2144)))(v21 - 144);
  return (*(uint64_t (**)(uint64_t))(v19
                                            + 8
                                            * ((111
                                              * ((((v22 - 133) | 0x86) ^ (v20 + 1157)) + a14 > 0x7FFFFFFE)) ^ (v22 - 1226))))(v23);
}

uint64_t sub_19E8761B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11 = 1305237457 * ((((v10 - 248) | 0x1E7DDC43) - (v10 - 248) + ((v10 - 248) & 0xE18223B8)) ^ 0xA7C47A8D);
  unint64_t v12 = STACK[0x3E0];
  *(void *)(v10 - 240) = STACK[0x3D0];
  *(void *)(v10 - 232) = v12;
  *(void *)(v10 - 248) = STACK[0x3E8];
  *(_DWORD *)(v10 - 224) = v11 + v8 - 406468487;
  *(_DWORD *)(v10 - 220) = v11 + v9 - 75;
  *(void *)(v10 - 216) = STACK[0x430];
  *(void *)(v10 - 200) = STACK[0x3D8];
  (*(void (**)(uint64_t))(a8 + 8 * (v9 ^ 0x863)))(v10 - 248);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(STACK[0x460]
                                                                                                  + 8 * (((*(_DWORD *)(v10 - 208) == 694817499) * (((v9 - 294) | 0x20C) + ((v9 + 572) | 0x45) - 1009)) ^ v9)))(1570216885, 2724750410, 48, 2222238069, 80, 97, 179);
}

uint64_t sub_19E8762C4(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return (*(uint64_t (**)(void))(v3 + 8 * ((61 * (v5 + 1 == v4 + 16)) ^ a3)))();
}

void sub_19E8764C4(_DWORD *a1@<X8>)
{
  *a1 = v1;
  JUMPOUT(0x19E8764D0);
}

uint64_t sub_19E87650C@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14)
{
  return (*(uint64_t (**)(void))(v14
                              + 8
                              * ((((((a1 + 32540) | 0x34501002) ^ 0xB10CE419) + a14 < 0x10)
                                * (((a1 + 464) | 0x82) + 1520)) ^ a1)))();
}

uint64_t sub_19E876688(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8 * ((629 * (v3 > 0x18CDAC39)) ^ (v4 - 98859416))))();
}

uint64_t sub_19E8766D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  *(_DWORD *)(a18 + 4 * (v21 - 1945544937)) = v18;
  BOOL v24 = v21 - 902609431 > -1104548144 && v21 - 902609431 < v20;
  return (*(uint64_t (**)(void))(v22 + 8 * ((92 * (((109 * (v19 ^ 0xB6)) ^ v24) & 1)) ^ v19)))();
}

uint64_t sub_19E87673C(double a1)
{
  *(double *)(v2 + v5) = a1;
  return (*(uint64_t (**)(void))(v6 + 8 * (((v4 == 0) * v3) ^ v1)))();
}

void sub_19E876764()
{
}

void sub_19E8768EC()
{
  if (v0 == ((101 * (v2 ^ 0x307)) ^ (v3 + 2944))) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = v4;
  }
  *(void *)(v1 - 0x523BC1D27526C6FLL) = v5;
  JUMPOUT(0x19E876920);
}

uint64_t sub_19E876960@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(void))(v3
                              + 8
                              * (int)((((((v2 - 1236011228) ^ 0x82036A58) + 121) ^ (v2 - 1236011228) & 0x7DFC95A7)
                                     * (a1 - v1 == 1418933822)) ^ v2)))();
}

void sub_19E8769C8()
{
}

uint64_t sub_19E876A48@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(void))(v3
                              + 8
                              * ((((v1 - 1241605902) & 0x7E51F1E7 ^ (v4 - 292)) * ((a1 ^ 0xA321AE34) == v2 - 1824418995)) ^ v1)))();
}

void sub_19E876AAC()
{
}

void sub_19E877B90()
{
}

uint64_t sub_19E877C04(uint64_t a1, uint64_t a2, int a3)
{
  *(void *)(a2 + (v5 + v7)) = v9;
  return (*(uint64_t (**)(void))(v8 + 8 * ((((v3 ^ (v6 == v7)) & 1) * a3) ^ v4)))();
}

uint64_t sub_19E877C34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, unsigned int a18)
{
  return (*(uint64_t (**)(uint64_t))(v19 + 8 * (v18 ^ (22 * (a18 < 0x7FFFFFFE)))))(a16);
}

uint64_t sub_19E877C50(int a1)
{
  BOOL v4 = v1 + 59627863 < (int)(v3 + 1896206204 + ((a1 + 963) ^ 0x468));
  if (v3 > 0xEFA2D3C != v1 + 59627863 < -251276605) {
    BOOL v4 = v3 > 0xEFA2D3C;
  }
  return (*(uint64_t (**)(void))(v2 + 8 * ((1704 * v4) ^ a1)))();
}

uint64_t sub_19E877CD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  *(_DWORD *)(v29 - 120) = v28
                         + 1305237457
                         * ((-1079985213 - ((v29 - 120) | 0xBFA0BBC3) + ((v29 - 120) | 0x405F443C)) ^ 0xF9E6E2F2)
                         + 1089;
  *(void *)(v29 - 112) = a5;
  *(void *)(v29 - 104) = a26;
  (*(void (**)(uint64_t))(v27 + 8 * (v28 + 2107)))(v29 - 120);
  *(void *)(v29 - 112) = a26;
  *(void *)(v29 - 104) = a24;
  *(_DWORD *)(v29 - 116) = v28 + ((2 * ((v29 - 120) & 0x30BFD8C0) - (v29 - 120) - 817879239) ^ 0xDEB22A73) * v26 + 789;
  uint64_t v30 = (*(uint64_t (**)(uint64_t))(v27 + 8 * (v28 ^ 0x81C)))(v29 - 120);
  BOOL v31 = *(_DWORD *)(v29 - 120) - 1002406146 < ((v28 - 175) | 0x89Cu) - 521754681;
  return (*(uint64_t (**)(uint64_t))(v27 + 8 * (((2 * v31) | (16 * v31)) ^ v28)))(v30);
}

uint64_t sub_19E877E0C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4
                                                     + 8
                                                     * (v2 ^ ((2 * ((v5 + v3 - 1) < 0x7FFFFFFF)) | (4 * ((v5 + v3 - 1) < 0x7FFFFFFF))))))(a1, a2);
}

void sub_19E877E48()
{
}

uint64_t sub_19E8780F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  return sub_19E87ED50(a1, a2, a3, a4, a5, (a6 + 1), a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48,
           a49,
           a50);
}

void sub_19E87819C()
{
}

uint64_t sub_19E8781E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  HIDWORD(a21) = 807847714;
  unsigned int v34 = 1305237457 * ((1868393269 - (&a24 | 0x6F5D6B35) + (&a24 | 0x90A294CA)) ^ 0x291B3204);
  a26 = a16;
  a24 = a17;
  a25 = a14;
  a28 = a22;
  a30 = a15;
  LODWORD(a27) = v30 - 234 + v34 + (v30 ^ 0xE7C5C693) + a21;
  HIDWORD(a27) = v34 + v30 - 255;
  uint64_t v35 = (*(uint64_t (**)(uint64_t *))(v31 + 8 * (v30 ^ 0x8DF)))(&a24);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v31 + 8 * ((736 * (a29 == 694817499)) ^ v30)))(v35, v33, 798101064, 2929509201, 2147138047, 2072727188, v32, 1983418814, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30);
}

void sub_19E878494()
{
}

uint64_t sub_19E8784A4(uint64_t a1)
{
  (*(void (**)(uint64_t, void, uint64_t))(v4 + 8 * (v3 + 1518)))(a1, 0, 64);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8 * (v3 + 1397)))(v1, 3504810603);
  *(void *)(*(void *)v2 + 40) = v5;
  return (*(uint64_t (**)(void))(v4 + 8 * (((v5 == 0) * (((v3 - 518794767) & 0x1EEC2FFF) - 1330)) ^ v3)))();
}

uint64_t sub_19E87861C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  *(void *)(v18 - 128) = a14;
  *(void *)(v18 - 120) = v16;
  *(_DWORD *)(v18 - 132) = v14
                         + 291962093 * ((((2 * (v18 - 136)) | 0x33C7C306) - (v18 - 136) + 1713118845) ^ 0x8811ECC9)
                         + 701;
  uint64_t v19 = (*(uint64_t (**)(uint64_t))(v15 + 8 * (v14 + 1964)))(v18 - 136);
  return (*(uint64_t (**)(uint64_t))(v15
                                            + 8
                                            * (((((v14 - 6) ^ (*(_DWORD *)(v18 - 136) == v17 + 2)) & 1)
                                              * ((v14 - 6) ^ 0x149)) | v14)))(v19);
}

void sub_19E8786B8()
{
  *uint64_t v1 = 2087749635;
  (*(void (**)(unint64_t))(v2 + 8 * ((v0 - 608) | 0x8C1)))(STACK[0x230]);
  JUMPOUT(0x19E87871CLL);
}

uint64_t sub_19E8788A8(uint64_t a1, int a2)
{
  return (*(uint64_t (**)(void))(v4 + 8 * ((((a2 - 566) ^ 0x104) * (v2 == v3)) ^ (a2 + 358))))();
}

void sub_19E8788D4()
{
}

uint64_t sub_19E8788E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, int a9@<W8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  *(unsigned char *)(v38 + a2 + (v37 - 83) + v41) = *(unsigned char *)(a7 + (a9 + v40))
                                                        - ((2 * *(unsigned char *)(a7 + (a9 + v40))) & 0x83)
                                                        - 63;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v42 + 8 * (((v38 + 1 == v39 + 64) * (int)a1) | v37)))(a1, a2, a3, a4, a5, a6, a7, a8, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37);
}

uint64_t sub_19E878938()
{
  int v3 = v1 - ((((v2 - 720) | 0x100) + 1015983054) & (2 * v1 + 149512940)) - 1564735493;
  return (*(uint64_t (**)(void))(v0
                              + 8
                              * ((47
                                * (((2 * v3) & 0xCFF79FEE ^ 0xC868D0A) + (v3 ^ 0xF9BC9972) + 1604189629 != 1201262004)) ^ v2)))();
}

void sub_19E8789C8()
{
  (*(void (**)(void))(v0 + 8 * (v1 ^ 0xD28)))();
  sub_19E766640();
}

uint64_t sub_19E8789E0()
{
  *(_DWORD *)(v5 - 132) = v2 + ((2 * ((v5 - 136) & 0x25BC3048) - (v5 - 136) - 633090121) ^ 0xCBB1C2FD) * v4 - 483;
  *(void *)(v5 - 128) = v3;
  *(void *)(v5 - 120) = v0;
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(v1 + 8 * (v2 + 780)))(v5 - 136);
  BOOL v7 = *(_DWORD *)(v5 - 136) - 1002406146 < ((v2 + 24) ^ 0xC8E628B6);
  return (*(uint64_t (**)(uint64_t))(v1
                                            + 8
                                            * ((8 * (((v2 ^ 0x61D ^ v7) & 1) == 0)) & 0xEF | (16
                                                                                            * ((v2 ^ 0x1D ^ ~v7) & 1)) | v2)))(v6);
}

uint64_t sub_19E878AA0@<X0>(int a1@<W3>, int a2@<W8>)
{
  BOOL v5 = a2 == (a1 ^ (a1 - 272) ^ (v4 + 272));
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * ((1911 * (((v5 ^ 0x37) + 2 * v5) == (a1 + v3))) ^ (a1 + v3))))();
}

uint64_t sub_19E878AF4()
{
  return (*(uint64_t (**)(void))(v0 + 8 * ((v3 - 98858348) | (659 * (v2 < v1)))))();
}

uint64_t sub_19E878CE8@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(void))(v1 + 8 * (int)((((a1 ^ 0x89) - 1093) * ((v2 >> 30) & 1)) ^ a1)))();
}

uint64_t sub_19E878D0C()
{
  *(void *)(v5 - 128) = v1;
  *(void *)(v5 - 120) = v3;
  *(_DWORD *)(v5 - 136) = (v0 + 412) ^ (1575213817
                                      * ((~((v5 - 136) | 0x154EBBFC) + ((v5 - 136) & 0x154EBBFC)) ^ 0x67D4F4CF));
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(v2 + 8 * (v0 + 852)))(v5 - 136);
  return (*(uint64_t (**)(uint64_t))(v2 + 8 * ((((v0 - 517) ^ 0xE2F) * (v4 == 1422530390)) ^ v0)))(v6);
}

uint64_t sub_19E878DA8()
{
  *(void *)(v3 + 1312) = *(void *)(v6 + 808);
  *(_DWORD *)(v4 - 144) = (v1 - 521) ^ (((((v4 - 152) | 0x8B8A85D3) - ((v4 - 152) & 0x8B8A85D3)) ^ 0x9133796E) * v0);
  uint64_t result = (*(uint64_t (**)(uint64_t))(v2 + 8 * (v1 + 1558)))(v4 - 152);
  *(_DWORD *)(v7 + 40) = -694859505;
  return result;
}

uint64_t sub_19E878E00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  *(void *)(v17 - 128) = a14;
  *(void *)(v17 - 120) = v16;
  *(_DWORD *)(v17 - 132) = v15
                         + 291962093 * (((~(v17 - 136) & 0x486E1916) - (~(v17 - 136) | 0x486E1917)) ^ 0x599C145D)
                         + 231;
  uint64_t v18 = (*(uint64_t (**)(uint64_t))(v14 + 8 * (v15 ^ 0xBEE)))(v17 - 136);
  return (*(uint64_t (**)(uint64_t))(v14
                                            + 8
                                            * (((*(_DWORD *)(v17 - 136) == ((v15 - 1199607342) & 0x47808BD5)
                                                                         + 1002405950)
                                              * ((v15 - 600) ^ 0xBF)) ^ v15)))(v18);
}

void sub_19E878FB4(uint64_t a1, int a2)
{
  *uint64_t v2 = a2;
}

uint64_t sub_19E87B500(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  *(_DWORD *)(v19 - 132) = v14 + ((2 * ((v19 - 136) & 0x54E93408) - (v19 - 136) - 1424569355) ^ 0xBAE4C6BF) * v18 + 10;
  *(void *)(v19 - 128) = a14;
  *(void *)(v19 - 120) = v16;
  uint64_t v20 = (*(uint64_t (**)(uint64_t))(v15 + 8 * (v14 ^ 0xB09)))(v19 - 136);
  return (*(uint64_t (**)(uint64_t))(v15
                                            + 8
                                            * ((1174
                                              * (v17 + ((v14 + 38) | 0x206u) + *(_DWORD *)(v19 - 136) - 1575 < 0xD7288E83)) ^ v14)))(v20);
}

uint64_t sub_19E87B5A4()
{
  uint64_t v5 = *(void *)(*(void *)v3 + 48);
  *uint64_t v4 = v1 + 64;
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2
                                                     + 8 * (((v5 != 0) * (((v0 + 674) | 0x115) - 1016)) ^ (v0 + 1021))))(2114653229, 7334465);
}

void sub_19E87B5DC()
{
}

void sub_19E87B5EC()
{
}

uint64_t sub_19E87B660(uint64_t a1, int a2)
{
  BOOL v6 = v4 + 1345288984 > ((a2 - 334) ^ 0x18225B20) || v4 + 1345288984 < v3;
  return (*(uint64_t (**)(void))(v2 + 8 * ((3069 * v6) ^ a2)))();
}

void sub_19E87B6CC()
{
}

void sub_19E87B6D8(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  int v1 = *(_DWORD *)(a1 + 16) - 1001500783 * ((a1 - 2 * (a1 & 0xA6350830) - 1506473936) ^ 0xEC81F784);
  v4[0] = 0;
  v4[1] = 0;
  uint64_t v2 = (char *)*(&off_1EF0E5660 + v1 - 515) - 8;
  int v3 = (*(uint64_t (**)(unsigned char *, void *))&v2[8 * v1 + 14696])(v5, v4);
  __asm { BRAA            X10, X17 }
}

uint64_t sub_19E87B7C8(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, void))(v5 + 8 * (v6 | 0x80)))(a1, 0);
  int v9 = ((2 * result) & 0xCEFF7FFA) + (result ^ 0x677FBFFD);
  if (v9 == 1736425485)
  {
    --v2;
    goto LABEL_7;
  }
  if (v9 == 1736425481)
  {
LABEL_7:
    uint64_t result = (*(uint64_t (**)(uint64_t))(v5 + 8 * (v3 - 29)))(a1);
    int v10 = v2;
    goto LABEL_8;
  }
  if (v9 != 1736425469)
  {
    v2 -= 2;
    goto LABEL_7;
  }
  *int v4 = a1;
  int v10 = 2111805359;
LABEL_8:
  *int v1 = v10 - 2111805359;
  return result;
}

void sub_19E87BDB0()
{
}

void sub_19E87BE10()
{
}

uint64_t sub_19E87BE68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  int v30 = (v25 + 130) | 0x10;
  *(_DWORD *)(v29 - 112) = v30
                         - 190
                         + 402930427 * ((~((v29 - 144) | 0xD4AF55C4) + ((v29 - 144) & 0xD4AF55C4)) ^ 0x31E95686);
  *(void *)(v29 - 128) = a23;
  *(void *)(v29 - 120) = v26;
  *(void *)(v29 - 144) = a23;
  *(void *)(v29 - 136) = a24;
  (*(void (**)(uint64_t))(v28 + 8 * (v30 ^ 0xF30)))(v29 - 144);
  *(_DWORD *)(v29 - 112) = v30 - 190 + 402930427 * ((v29 - 144) ^ 0x1AB9FCBD);
  *(void *)(v29 - 144) = a23;
  *(void *)(v29 - 136) = a24;
  *(void *)(v29 - 128) = a23;
  *(void *)(v29 - 120) = v26;
  (*(void (**)(uint64_t))(v28 + 8 * (v30 ^ 0xF30)))(v29 - 144);
  int v31 = 961177747 * ((v29 - 144) ^ 0x2752F11C);
  *(_DWORD *)(v29 - 128) = v31 + v30 - 585;
  *(void *)(v29 - 136) = a25;
  *(_DWORD *)(v29 - 140) = v27 - 181036344 + v31 + ((v30 - 1594109985) & 0x5F042ACE) - 197;
  uint64_t v32 = (*(uint64_t (**)(uint64_t))(v28 + 8 * (v30 + 796)))(v29 - 144);
  return (*(uint64_t (**)(uint64_t))(v28
                                            + 8
                                            * ((71
                                              * (((((((v25 - 126) | 0x10) - 33) ^ 0x31) + 1) ^ (*(_DWORD *)(v29 - 144) == -1914018290)) & 1)) | v30)))(v32);
}

uint64_t sub_19E87BFE4(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8
                              + 8
                              * (int)(((((139 * (a1 ^ 0x6DE)) ^ 0xFFFFFE62) + a1 - 773) * ((v8 & 0x18) == 0)) ^ a1)))();
}

uint64_t sub_19E87C024()
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * ((2423
                                * ((int)(((v1 + 1156) ^ 0x874562E0) + (v3 ^ 0xFBFE9DED) + 2092694204 + (v0 & 0xF7FD3BDA)) >= 0)) ^ v1)))();
}

void sub_19E87C0BC()
{
}

uint64_t sub_19E87C0C4()
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * (int)((((((v0 - 645) ^ (*(void *)(v1 + 8) == 0x18A79E01698C40FCLL)) & 1) == 0)
                                     * ((v0 + 1134746020) & 0xBC5D27F8 ^ 0x7DF)) ^ v0)))();
}

uint64_t sub_19E87C124@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X7>, int a8@<W8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int8x16_t *a15)
{
  uint64_t v16 = (int8x16_t *)((char *)&STACK[0x6D0] + STACK[0x3C8] - 0x5C811742B282E230);
  *uint64_t v16 = veorq_s8(*a15, (int8x16_t)xmmword_19EC7A610);
  STACK[0x658] += (a8 - 599536628) & 0x23BC3588 ^ 0x5A8;
  STACK[0x660] = v15;
  STACK[0x668] = v15;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a7
                                                                                         + 8
                                                                                         * (a8 ^ (2835
                                                                                                * (v16 == (int8x16_t *)v15)))))(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_19E87C1BC()
{
  return (*(uint64_t (**)(void))(v3 + 8 * ((22 * (((v0 == v1) ^ (v2 - 1)) & 1)) ^ v2)))();
}

uint64_t sub_19E87C2A0(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6)
{
  *(void *)(a3 + (v9 + v6)) = *(void *)(v8 + (v9 + v6));
  return (*(uint64_t (**)(void))(v10 + 8 * (((a6 == 0) * v7) ^ a4)))();
}

void sub_19E87C2D0()
{
}

uint64_t sub_19E87C470(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  return (*(uint64_t (**)(void))(a26
                              + 8 * (((((v26 + 272) ^ 0xDDE45230) + a11 < 0x7FFFFFFF) * ((v26 + 613) ^ 0x686)) ^ v26)))();
}

uint64_t sub_19E87C4BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  return (*(uint64_t (**)(void))(v7
                              + 8
                              * ((38
                                * (((v9 - 40) ^ (*(_DWORD *)(v6
                                                                            + (a6
                                                                             + v10
                                                                             + ((v9 - 1376650903) & 0x520E02AF)
                                                                             - 526)
                                                                            * (uint64_t)v8) == 42251362)) & 1)) ^ (v9 - 808))))();
}

uint64_t sub_19E87C538(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  return (*(uint64_t (**)(void))(v9
                              + 8
                              * ((35
                                * (*(_DWORD *)(v10
                                             + (((v7 - 1297) ^ (a7 + 1111)) + v8 + ((v7 - 960) | 1)) * (uint64_t)a3
                                             + 36) == v8)) ^ v7)))();
}

uint64_t sub_19E87C654@<X0>(uint64_t a1@<X0>, int a2@<W8>)
{
  int v7 = *(_DWORD *)((char *)&STACK[0x360] + ((v5 + a2) & 0xFFFFFFFC) + 72);
  *(unsigned char *)(a1 + (v5 + a2)) = HIBYTE(v7) ^ 0x2C;
  *(unsigned char *)(a1 + (v5 + a2 + 1)) = (v3 + 72) ^ BYTE2(v7) ^ 0xFA;
  *(unsigned char *)(a1 + (v5 + a2 + 2)) = BYTE1(v7) ^ 0x8D;
  *(unsigned char *)(a1 + (v5 + a2 + 3)) = v7 ^ 0xF1;
  unsigned int v8 = LODWORD(STACK[0x3BC]) + 1950257619;
  BOOL v9 = v5 + 818157054 < v8;
  if (v5 + 818157054 < v2 != v8 < v2) {
    BOOL v9 = v8 < v2;
  }
  return (*(uint64_t (**)(void))(v6 + 8 * ((!v9 * v4) | v3)))();
}

uint64_t sub_19E87C7BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 8 * ((((v9 - 1429510095) & 0x153492EB ^ ((v9 ^ 0x565) - 8)) * (v10 == 0)) ^ (v9 + 165))))(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_19E87C808(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,int a41)
{
  *(_DWORD *)(*(void *)(v42 + 96) + 1428) = v41 + 16;
  return sub_19E743BCC(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41);
}

uint64_t sub_19E87C820(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  BOOL v7 = ((-257090506 - ((2 * (a4 + v6 + 3)) & 0xE15A3868) + (((v4 ^ 0x578) - 408) & (a4 + v6 + 3))) ^ 0xF0AD1C36) == LODWORD(STACK[0x230]);
  return (*(uint64_t (**)(void))(v5
                              + 8
                              * (((4 * (((v4 - 1) ^ v7) & 1)) & 0xEF | (16
                                                                                       * (((v4 - 1) ^ v7) & 1))) ^ v4)))();
}

uint64_t sub_19E87C888(uint64_t a1, int a2)
{
  return (*(uint64_t (**)(void))(v2 + 8 * (((v3 - 263820151 >= 0) * ((5 * ((a2 + 755) ^ 0x58A)) ^ 0x4E8)) ^ (a2 + 755))))();
}

uint64_t sub_19E87C8D4@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(void))(v2 + 8 * ((41 * (805997666 - v1 < ((a1 - 899) | 0x128u) - 1377)) ^ a1)))();
}

void sub_19E87CB30(int a1@<W8>, int a2, __int16 a3, char a4, char a5, char a6, char a7, char a8, char a9, char a10, char a11, char a12, char a13, char a14, char a15, char a16, char a17, char a18, char a19, char a20,char a21,char a22,char a23,char a24,char a25,char a26,char a27,char a28,char a29,char a30,char a31,char a32,char a33,char a34,char a35,char a36,char a37,char a38,char a39,char a40,char a41,char a42,char a43,char a44,char a45,char a46,char a47,char a48,char a49,char a50,char a51,char a52,char a53)
{
  unint64_t v59 = *(unsigned int **)(v57 + 8 * (a1 ^ 0x42F));
  uint64_t v60 = *v59;
  uint64_t v61 = *(void *)(v57 + 8 * (int)(a1 & 0x9F69B810));
  int v62 = *(unsigned char **)(v61 - 4);
  a4 = *v62 - 127;
  a5 = v62[1] - 127;
  a6 = v62[2] - 127;
  a7 = v62[3] - 127;
  a8 = v62[4] - 127;
  a9 = v62[5] - 127;
  a10 = v62[6] - 127;
  a11 = v62[7] - 127;
  a12 = v62[8] - 127;
  a13 = v62[9] - 127;
  a14 = v62[10] - 127;
  a15 = v62[11] - 127;
  a16 = v62[12] - 127;
  a17 = v62[13] - 127;
  a18 = v62[14] - 127;
  a19 = v62[15] - 127;
  a20 = v62[16] - 127;
  a21 = v62[17] - 127;
  a22 = v62[18] - 127;
  a23 = v62[19] - 127;
  a24 = v62[20] - 127;
  a25 = v62[21] - 127;
  uint64_t v63 = *(unsigned char **)(v61 - 4);
  a26 = v63[22] - 127;
  a27 = v63[23] - 127;
  a28 = v63[24] - 127;
  a29 = v63[25] - 127;
  a30 = v63[26] - 127;
  a31 = v63[27] - 127;
  a32 = v63[28] - 127;
  a33 = v63[29] - 127;
  uint64_t v64 = (*(uint64_t (**)(uint64_t, char *, unsigned int *))(v56 + 8 * (a1 ^ 0xD69)))(v60, &a4, v53);
  int v71 = ((2 * v64) & 0xF2FEFF7C) + (v64 ^ 0x797F7FBE);
  if (v71 == 2038398910)
  {
    *(_DWORD *)(v58 + 348) = ((*(_DWORD *)(v58 + 348) | 0xA)
                            - ((((v55 - 1019) | 0x372) + 1929443692) & (2 * *(_DWORD *)(v58 + 348)))
                            - 1182761297) ^ 0xB9807EB3;
    *(_DWORD *)(v58 + 48) = 1337981803;
    (*(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t))(v56 + 8 * (v55 + 1290)))(*v53, v58 + 336, v58 + 340, v58 + 344, v54);
    sub_19E85CE4C();
  }
  else
  {
    if (v71 == 2038400012)
    {
      uint64_t v72 = *v59;
      uint64_t v73 = *(unsigned char **)(*(void *)(v57 + 8 * (int)(v55 & 0xB394908F)) - 4);
      a34 = *v73 - 66;
      a35 = v73[1] - 66;
      a36 = v73[2] - 66;
      a37 = v73[3] - 66;
      a38 = v73[4] - 66;
      a39 = v73[5] - 66;
      a40 = v73[6] - 66;
      a41 = v73[7] - 66;
      a42 = v73[8] - 66;
      a43 = v73[9] - 66;
      a44 = v73[10] - 66;
      a45 = v73[11] - 66;
      a46 = v73[12] - 66;
      a47 = v73[13] - 66;
      a48 = v73[14] - 66;
      a49 = v73[15] - 66;
      a50 = v73[16] - 66;
      a51 = v73[17] - 66;
      a52 = v73[18] - 66;
      a53 = v73[19] - 66;
      uint64_t v64 = (*(uint64_t (**)(uint64_t, char *, unsigned int *))(v56 + 8 * (v55 + 1175)))(v72, &a34, v53);
      int v74 = (2 * v64) & 0xE47B6BAC;
      int v71 = (v64 ^ 0xF23DB5D6) + 1576501184;
    }
    else
    {
      int v74 = -692734504;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v56
                                                                                          + 8
                                                                                          * (((v71 + v74 == 1345664406)
                                                                                            * (v55 + 608)) ^ (v55 - 137))))(v64, v65, v66, v67, v68, v69, v70);
  }
}

uint64_t sub_19E87CF0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  int v67 = ((((v65 - 1072070758) | 0x3A020C60) + 1547253862) & (2 * (*v66 & 0x7FFFFFFE ^ 0x276E3F12)))
      - (*v66 & 0x7FFFFFFE ^ 0x276E3F12)
      + 1423285338;
  unsigned int v68 = (((v67 & (v65 - 835979020) ^ 0xC2207185) - 1) | v67 & 0x31D40422) ^ 0xCDEB5ACE;
  v66[623] = v66[396] ^ *((_DWORD *)&STACK[0x5D8] + ((*v66 & 1) == 0)) ^ (((v68 | ~v66[623] & 0x80000000)
                                                                         - ((2 * v68) & 0x4A5CC9A8)
                                                                         + 623797460) >> 1) ^ 0x2B030E5D;
  return (*(uint64_t (**)(void))(a5 + 8 * ((1541 * (a65 > 0x26F)) ^ v65)))();
}

uint64_t sub_19E87D01C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, unsigned int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v44 = 4 * (a5 + 1 + v42);
  uint64_t v45 = *(_DWORD *)(*a1 + v44) ^ a7;
  uint64_t v46 = (v45 ^ 0x7BFF6AF19F35BF7FLL) - 0x7BFF6AF19F35BF7FLL + ((2 * v45) & 0x13E6B7EFELL);
  unint64_t v47 = ((2 * (v36 >> ((5 * (v37 ^ 0x21)) ^ 1u))) & 0x7F5FFBBC ^ 0x54104B38)
      + ((v36 >> ((5 * (v37 ^ 0x21)) ^ 1u)) ^ 0x5B7C1FD015B7DA62)
      + (*(_DWORD *)(a31 + v44) ^ a7 ^ 0x8FF6AFFBF7BFDDECLL)
      + ((2 * (*(_DWORD *)(a31 + v44) ^ a7)) & 0x1EF7FBBD8)
      + ((v46 * v33) ^ 0x7977DFE7FFFD96ADLL)
      + ((2 * v46 * v33) & 0xF2EFBFCFFFFB2D5ALL);
  uint64_t v48 = v47 - ((2 * v47 + 0x362AA09791251B12) & 0x54304F798B5E2EA6) - 0x3AD287F771BE5B24;
  unint64_t v49 = a8 - 0x1AACB198D33FA096;
  uint64_t v50 = *(_DWORD *)(*v35 + v44) ^ a7;
  unint64_t v51 = ((v50 ^ 0x9FF7FEFB6F5DFFC7) + ((2 * v50) & 0xDEBBFF8E) + v40) * a3;
  unint64_t v52 = ((v49 >> 31) & 0x9FD77D4C)
      + (HIDWORD(v49) ^ 0x93A5BEF64FEBBEA6)
      + (v51 ^ v39)
      + (v43 & (2 * v51))
      + (v48 ^ 0xAFDEBBDE3B545E5FLL)
      + ((2 * v48) & 0x1FDF69218 ^ 0x189560200);
  *(_DWORD *)(a31 + 4 * (a5 + v42)) = v52 - 2 * ((v52 + a6) & (a7 + 2) ^ v52 & 2) + v32;
  BOOL v53 = a5 + v31 < v41;
  if (v41 < v34 != a5 + v31 < v38) {
    BOOL v53 = v41 < v34;
  }
  return (*(uint64_t (**)(void))(a4 + 8 * ((22 * v53) ^ v37)))();
}

uint64_t sub_19E87D48C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(qword_1EF0E5890
                                            - 8
                                            + 8 * ((3997 * (*(_DWORD *)(a2 + 4) == 2072727191)) ^ 0x79Au)))(4294925278);
}

void sub_19E87D4D0(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  int v1 = 402930427 * (a1 ^ 0x1AB9FCBD);
  int v2 = *(_DWORD *)a1 + v1;
  int v3 = (char *)*(&off_1EF0E5660 + (v2 ^ 0x439)) - 8;
  int v4 = (*(unsigned char *)(a1 + 16) ^ v1);
  (*(void (**)(char *, uint64_t (*)()))&v3[8 * (v2 ^ 0xC89)])((char *)*(&off_1EF0E5660 + (v2 ^ 0x4CA)) - 4, sub_19E870190);
  uint64_t v5 = *(void *)*(&off_1EF0E5660 + (v2 ^ 0x462));
  unsigned int v7 = v2 + 1980347521 * (((&v6 | 0x8D433EA1) - (&v6 & 0x8D433EA1)) ^ 0x34A77E5C) - 923;
  uint64_t v6 = v5;
  (*(void (**)(uint64_t *))&v3[8 * (v2 ^ 0xD36)])(&v6);
  __asm { BRAA            X9, X17 }
}

uint64_t sub_19E87D614@<X0>(int a1@<W0>, uint64_t a2@<X1>, unsigned int a3@<W2>, int a4@<W8>)
{
  return (*(uint64_t (**)(void))(v6
                              + 8
                              * ((1134
                                * ((a3 ^ 0x6B6 ^ (v5 + 957))
                                 + a1
                                 + (*(unsigned __int8 *)(a2 + 2) ^ v4)
                                 + ((2 * *(unsigned __int8 *)(a2 + 2)) & 0x7777) == a4)) ^ a3)))();
}

void sub_19E87D660(uint64_t a1)
{
  BOOL v4 = *(void *)(a1 + 32) != 0x19C7A72C32A62CC3
    && *(void *)a1 != 0x1A3B3DFF0D4F490CLL
    && *(void *)(a1 + 24) != 0x1B623CBCC684D9FFLL;
  int v1 = *(_DWORD *)(a1 + 20) + 961177747 * (((a1 | 0x7F5A09C8) - (a1 & 0x7F5A09C8)) ^ 0x5808F8D4);
  __asm { BRAA            X9, X17 }
}

uint64_t sub_19E87D770@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6
                                                                       + 8
                                                                       * ((((3 * (v4 ^ 0x5B7) - 965) ^ (7 * (v4 ^ 0x404)))
                                                                         * (a4 == v5)) ^ v4)))(a1, a2, a3, 3631);
}

void sub_19E87D7B8()
{
}

uint64_t sub_19E87D820()
{
  int v5 = 402930427 * ((((v4 - 144) | 0x8A88D9F5) + (~(v4 - 144) | 0x7577260A)) ^ 0x90312549);
  *(_DWORD *)(v4 - 144) = v8 + v5 + ((v0 - 1333) ^ 0xEE494734);
  *(_DWORD *)(v4 - 124) = v0 - v5 - 944;
  *(void *)(v4 - 136) = v9;
  *(void *)(v4 - 120) = v3;
  uint64_t result = (*(uint64_t (**)(uint64_t))(v2 + 8 * (v0 + 157)))(v4 - 144);
  *(_DWORD *)(v7 - 0x64FFE3F0626038CELL) = v8;
  *(_DWORD *)(v1 + 16) = 694817499;
  return result;
}

void sub_19E87D904(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62)
{
  uint64_t v63 = (*(uint64_t (**)(uint64_t))(a3 + 8 * (v62 + 946)))(41);
  uint64_t v64 = (uint64_t)*(&off_1EF0E5660 + v62 - 1412);
  *(void *)(v64 - 4) = v63;
  (*(void (**)(void))(a62 + 8 * (v62 ^ 0xCFAu)))();
  *(void *)*(&off_1EF0E5660 + v62 - 1475) = (*(uint64_t (**)(uint64_t))(a62 + 8 * (v62 + 946)))(32);
  (*(void (**)(void))(a62 + 8 * (v62 + 874)))();
  *(_DWORD *)(*(void *)(v64 - 4) + 8) = 0;
  uint64_t v65 = (uint64_t)*(&off_1EF0E5660 + (v62 ^ 0x5DFu));
  *(_DWORD *)(v65 + 100) = 0;
  *(unsigned char *)(v65 - 5) = 26;
  uint64_t v66 = *(&off_1EF0E5660 + (v62 ^ 0x5AAu));
  v66[44] = 88;
  *(v66 - 1) = -44;
  v66[19] = 79;
  *(unsigned char *)(v65 + 50) = 68;
  v66[67] = 51;
  v66[78] = -22;
  v66[76] = -72;
  v66[72] = 102;
  v66[122] = 80;
  v66[119] = 96;
  *(unsigned char *)(v65 + 56) = 1;
  v66[94] = -77;
  v66[86] = -34;
  *(unsigned char *)(v65 + 58) = 73;
  v66[115] = 80;
  *(unsigned char *)(v65 + 39) = 39;
  *(unsigned char *)(v65 + 88) = 25;
  *(unsigned char *)(v65 + 47) = 17;
  v66[30] = -113;
  v66[7] = -121;
  *(unsigned char *)(v65 + 22) = 47;
  v66[58] = 99;
  *(unsigned char *)(v65 + 71) = 23;
  v66[2] = 73;
  *(unsigned char *)(v65 + 91) = -59;
  *(unsigned char *)(v65 + 80) = -122;
  *(unsigned char *)(v65 + 37) = 59;
  v66[52] = 119;
  *(unsigned char *)(v65 + 76) = -52;
  v66[89] = -5;
  v66[10] = 34;
  *(unsigned char *)(v65 - 9) = -11;
  *(unsigned char *)(v65 + 96) = -109;
  v66[17] = 3;
  *(unsigned char *)(v65 + 51) = -36;
  *(unsigned char *)(v65 + 16) = 54;
  v66[46] = -15;
  *(unsigned char *)(v65 + 42) = -80;
  *(unsigned char *)(v65 + 13) = 83;
  *(unsigned char *)(v65 + 44) = 113;
  *(unsigned char *)(v65 + 59) = -87;
  *(unsigned char *)(v65 + 61) = -16;
  *(unsigned char *)(v65 + 17) = 32;
  v66[5] = 31;
  v66[101] = 66;
  *(unsigned char *)uint64_t v65 = -85;
  *(unsigned char *)(v65 + 65) = 77;
  *(unsigned char *)(v65 + 2) = -39;
  v66[57] = -92;
  v66[111] = 15;
  *(unsigned char *)(v65 + 97) = 36;
  v66[74] = -116;
  *(unsigned char *)(v65 + 64) = -15;
  v66[106] = -105;
  *(v66 - 3) = -98;
  v66[49] = 73;
  *(unsigned char *)(v65 + 30) = 105;
  *(unsigned char *)(v65 - 8) = -14;
  *(unsigned char *)(v65 + 66) = 120;
  *(unsigned char *)(v65 + 79) = 72;
  v66[22] = 79;
  *(unsigned char *)(v65 + 84) = -72;
  v66[9] = 52;
  *(unsigned char *)(v65 + 21) = -90;
  v66[69] = -39;
  *(unsigned char *)(v65 + 25) = 32;
  v66[120] = 13;
  v66[36] = 34;
  v66[125] = -121;
  *(unsigned char *)(v65 + 83) = -86;
  *(unsigned char *)(v65 + 69) = 69;
  *(v66 - 4) = 58;
  v66[95] = -15;
  v66[109] = -17;
  v66[32] = -119;
  v66[62] = 45;
  *(unsigned char *)(v65 + 5) = -105;
  v66[123] = -33;
  v66[53] = -15;
  JUMPOUT(0x19E87ED0CLL);
}

uint64_t sub_19E87ED50()
{
  return (*(uint64_t (**)(void))(v2 + 8 * ((972 * (v1 < 8)) ^ v0)))();
}

uint64_t sub_19E87EF04@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * (a1 | (16 * ((((a1 + 860) ^ (2001264293 - v1 + 71 * (a1 ^ 0x109u) < 7)) & 1) == 0)))))();
}

uint64_t sub_19E87EF58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11)
{
  return (*(uint64_t (**)(void))(v12 + 8 * ((1376 * ((((v11 ^ 0xB84) - 2029) ^ 0xED78E790) + a11 < 0x7FFFFFFF)) ^ v11)))();
}

uint64_t sub_19E87EFB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  unsigned int v13 = *(_DWORD *)(a10 + 20) + v11 - ((2 * (*(_DWORD *)(a10 + 20) + v11) + 1223901838) & 0x84F70EF0) + 1727342783;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12
                                                              + 8
                                                              * ((1486
                                                                * (((((v10 - 823) ^ 0x615) - 436217643) & (2 * v13) ^ 0x84F70EF0)
                                                                 + (v13 ^ (((v10 - 823) | 0x245) - 1333500492)) == 1929375629)) ^ v10)))(a1, a2, a3);
}

void sub_19E87F058(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57)
{
  _DWORD *v58 = 2087749635;
  (*(void (**)(uint64_t))(a3 + 8 * (v57 ^ 0x898)))(a57);
  JUMPOUT(0x19E87F0B0);
}

uint64_t sub_19E87F174@<X0>(uint64_t a1@<X4>, uint64_t a2@<X8>, int8x16_t a3@<Q0>, int8x16_t a4@<Q1>, int32x4_t a5@<Q2>, int8x16_t a6@<Q3>, int8x16_t a7@<Q4>, int8x16_t a8@<Q5>, int8x16_t a9@<Q6>, int8x16_t a10@<Q7>)
{
  uint64_t v22 = 4 * a2;
  uint64_t v23 = v13 + 4 * a2;
  uint64_t v24 = ((v10 ^ 0xEu) - 335) | a2;
  uint64_t v25 = a2 + 4;
  LODWORD(v24) = *(_DWORD *)(v13 + 4 * v24);
  v21.i32[0] = v24;
  v21.i32[1] = *(_DWORD *)(v13 + (v22 | 8));
  v21.i32[2] = *(_DWORD *)(v13 + (v22 | 0xC));
  int8x16_t v26 = vextq_s8(a3, v21, 0xCuLL);
  int8x16_t v27 = v21;
  v27.i32[3] = *(_DWORD *)(v13 + 4 * v25);
  int8x16_t v28 = (int8x16_t)vaddq_s32((int32x4_t)veorq_s8((int8x16_t)vaddq_s32((int32x4_t)vorrq_s8(v26, a4), a5), a6), v19);
  int32x4_t v29 = (int32x4_t)veorq_s8(vandq_s8(v27, a7), a8);
  int32x4_t v30 = (int32x4_t)veorq_s8(vorrq_s8(veorq_s8(v28, v15), (int8x16_t)vsubq_s32(vaddq_s32(v29, (int32x4_t)veorq_s8(vandq_s8(v27, a9), a10)), (int32x4_t)vandq_s8((int8x16_t)v29, v14))), v16);
  v31.i32[0] = *(_DWORD *)(v11 + 4 * ((v24 & 1) == 0));
  v31.i32[1] = *(_DWORD *)(v11 + 4 * ((*(_DWORD *)(v13 + (v22 | 8)) & 1) == 0));
  v31.i32[2] = *(_DWORD *)(v11 + 4 * (~*(_DWORD *)(v13 + (v22 | 0xC)) & 1));
  v31.i32[3] = *(_DWORD *)(v11 + 4 * ((v27.i8[12] & 1) == 0));
  *(int8x16_t *)uint64_t v23 = veorq_s8(veorq_s8(veorq_s8(*(int8x16_t *)(v23 + 1588), v31), v20), (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vsubq_s32(v30, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v30, v30), v17)), v18), 1uLL));
  return (*(uint64_t (**)(void))(a1 + 8 * (((v25 == 224) * v12) ^ v10)))();
}

uint64_t sub_19E87F280(double a1)
{
  *(double *)(v2 + v4) = a1;
  return (*(uint64_t (**)(void))(v6 + 8 * (((v5 == 0) * v3) ^ v1)))();
}

void sub_19E87F4B8()
{
}

void sub_19E87F4C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(a3 + v4) = v3;
  JUMPOUT(0x19E858934);
}

uint64_t sub_19E87F4D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,char a21)
{
  return (*(uint64_t (**)(uint64_t))(v21 + 8 * (((((a20 - 1056) | 0x22E) - 435) * ((a21 & 1) == 0)) ^ a20)))(11);
}

uint64_t sub_19E87F50C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  *(void *)(v29 - 112) = a24;
  *(void *)(v29 - 104) = v25;
  *(_DWORD *)(v29 - 120) = (v28 + 1778) ^ (1575213817 * ((v29 - 120) ^ 0x8D65B0CC));
  uint64_t v30 = (*(uint64_t (**)(uint64_t))(v26 + 8 * (v28 + 2218)))(v29 - 120);
  return (*(uint64_t (**)(uint64_t))(v26
                                            + 8
                                            * ((305 * (v24 == 281 * (v28 ^ 0xAC) + ((v28 + 1236) ^ (v27 - 738)))) ^ v28)))(v30);
}

void sub_19E87F59C()
{
  if (v0 == 1628344982) {
    int v1 = 694817499;
  }
  else {
    int v1 = -694859517;
  }
  *(_DWORD *)(v2 + 8) = v1;
}

void sub_19E87F600()
{
}

void sub_19E87F60C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,int a22)
{
  int v27 = ((v26 - 955661341 - 2 * ((v26 - 144) & 0xC709C473)) ^ 0x8DBD3BC7) * v25;
  *(void *)(v26 - 128) = a10;
  *(_DWORD *)(v26 - 136) = a22 - v27 - 434550194 + (v22 ^ 0xBCF);
  *(_DWORD *)(v26 - 120) = (v22 - 607) ^ v27;
  *(void *)(v26 - 144) = v24;
  (*(void (**)(uint64_t))(v23 + 8 * (v22 + 147)))(v26 - 144);
  JUMPOUT(0x19E87D8A4);
}

uint64_t sub_19E87F690(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned int a14, int a15, unint64_t *a16)
{
  a14 = 2036 - 653146051 * (&a14 ^ 0xAA14B5E2);
  a16 = &STACK[0x326850528847174F];
  uint64_t v18 = (*(uint64_t (**)(unsigned int *))(v17 + 18520))(&a14);
  return (*(uint64_t (**)(uint64_t))(v17 + 8 * ((1869 * (a15 == v16)) ^ 0xC2u)))(v18);
}

uint64_t sub_19E87F724@<X0>(int a1@<W0>, int a2@<W2>, int a3@<W8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(_DWORD *)(a9 + 4 * (v9 + a3)) = a2;
  int v15 = v10 - 442 + v11 + v9;
  BOOL v17 = v15 > v12 || v15 < v13;
  return (*(uint64_t (**)(void))(v14 + 8 * ((v17 * a1) ^ v10)))();
}

uint64_t sub_19E87F760()
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * (((((((v1 - 1381) | 0x402) - 1011) & v0) == 0) * (97 * ((v1 - 586) ^ 0x322) - 568)) ^ (v1 - 586))))();
}

void sub_19E87F7A8()
{
}

uint64_t sub_19E87F7B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  return sub_19E759EC0(a1, a2, a3, a4, a5, a6, a7, a8);
}

void sub_19E87F7D8(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 24) + 1980347521 * ((((2 * a1) | 0x86F3B850) - a1 - 1132059688) ^ 0xFA9D9CD5);
  __asm { BRAA            X9, X17 }
}

uint64_t sub_19E87F930(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,int a24)
{
  return (*(uint64_t (**)(void))(v24
                              + 8
                              * (int)((((v25 + 144) ^ 0x69C ^ (v25 + 214563707) & 0xF33605FE) * (a24 == -1558073676)) | v25)))();
}

void sub_19E87F98C()
{
}

void sub_19E87F994(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, int a14, int a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, int a20,_DWORD *a21,uint64_t a22,_DWORD *a23,uint64_t a24,uint64_t a25,int a26,uint64_t a27)
{
  uint64_t v33 = v27 ^ 0x7B3u;
  *(unsigned char *)(*(void *)(*(void *)v31 + 24) + 36) = 4;
  **(_DWORD **)(*(void *)v31 + 24) = v29;
  *(_DWORD *)(*(void *)(*(void *)v31 + 24) + 4) = 830;
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v30 + 8 * (v27 + 1733)))(*(void *)(*(void *)v31 + 24) + *(unsigned int *)(*(void *)(*(void *)v31 + 24) + 12) + 101, *(&off_1EF0E5660 + v27 - 633), 830, -1);
  unint64_t v34 = bswap64(v32[131]);
  unint64_t v35 = bswap64(v32[132]);
  unint64_t v36 = bswap64(v32[133]);
  uint64_t v37 = v28 + 32;
  unint64_t v38 = bswap64(v32[135]);
  unint64_t v39 = bswap64(v32[136]);
  unint64_t v40 = bswap64(v32[137]);
  unint64_t v41 = bswap64(v32[138]);
  v32[131] = bswap64(v32[134]);
  v32[134] = v34;
  v32[132] = v36;
  v32[133] = v35;
  v32[135] = v41;
  v32[138] = v38;
  v32[136] = v40;
  v32[137] = v39;
  uint64_t v42 = (*(uint64_t (**)(uint64_t, unint64_t *))(v30 + 8 * (v27 ^ 0xB8F)))(4, &STACK[0x710]);
  unint64_t v43 = v42 ^ 0xEFB76DFA46BBB9FBLL;
  unint64_t v44 = (2 * v42) & 0xDF6EDBF48D7773F6;
  uint64_t v45 = (*(uint64_t (**)(uint64_t, uint64_t))(v30 + 8 * (v27 ^ 0xB8F)))(4, v37);
  uint64_t v46 = (*(uint64_t (**)(uint64_t, unint64_t))(v30 + 8 * (v27 + 1723)))(0x2000000000000010, v43 + (v45 ^ 0x6FE7EFF1F2BB9FFBLL) + v44 + ((2 * v45) & 0xDFCFDFE3E5773FF6) - 0x5F9F5DEC397759F6);
  unint64_t v47 = ((2 * v46) & 0xB3BEFABFB7F57FFELL) + (v46 ^ (v33 + 0x59DF7D5FDBFABAC6));
  uint64_t v48 = *(void *)(*(void *)v31 + 24);
  uint64_t v49 = v48 + *(unsigned int *)(v48 + 12);
  uint64_t v50 = v49 + *(unsigned int *)(v48 + 4) + 101;
  unint64_t v51 = v47 + v49 + *(unsigned int *)(v48 + 4) - 0x59DF7D5FDBFABF9ALL;
  uint64_t v52 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v30 + 8 * (v27 + 1703)))(4, v37, v50, v51);
  uint64_t v53 = (*(uint64_t (**)(uint64_t, unint64_t *, uint64_t, uint64_t))(v30 + 8 * (v27 + 1703)))(4, &STACK[0x710], v50, v52);
  (*(void (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v30 + 8 * (v27 + 1745)))(0x2000000000000010, v51, v50, v53);
  *(_DWORD *)(*(void *)(*(void *)v31 + 24) + 8) = (v47 - ((2 * v47 + 1208647682) & 0xA05961EE) - 198053640) ^ 0xD02CB0F7;
  *a11 = *(void *)(*(void *)v31 + 24);
  **(_DWORD **)(a27 + 32) = a26 + *(_DWORD *)(*(void *)(*(void *)v31 + 24) + 8) + 931;
  *a21 = a15;
  *a23 = ((v33 - 546) ^ 0xB202063D) + a20;
  JUMPOUT(0x19E8979A8);
}

uint64_t sub_19E87FC58@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(void))(v2 + 8 * ((a1 + 466) ^ (8 * (v3 + v1 - 1 >= (a1 + 2147483356))))))();
}

uint64_t sub_19E87FC68@<X0>(int a1@<W3>, uint64_t a2@<X4>, uint64_t a3@<X5>, uint64_t a4@<X6>, int a5@<W7>, unint64_t a6@<X8>, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,void *a23,uint64_t a24,uint64_t a25)
{
  unint64_t v41 = v39 ^ HIDWORD(a6);
  int v42 = v31;
  unsigned int v43 = v33;
  uint64_t v44 = 4 * (v36 + 1 + a1);
  uint64_t v45 = *(_DWORD *)(*a22 + v44) ^ v26;
  unint64_t v46 = (v45 ^ 0xFFFFA59CDFEFA77ELL) + 0x5A6320105882 + ((2 * v45) & 0x1BFDF4EFCLL);
  unint64_t v47 = (a2 & (a6 >> 31) ^ v25)
      + v41
      + ((2 * (*(_DWORD *)(a25 + v44) ^ v26)) & 0x1FBC7E16ELL)
      + ((a5 - 327) ^ *(_DWORD *)(a25 + v44) ^ v26 ^ 0x87FDABFFFDE3F390)
      + ((v46 * v28) ^ 0xBDADEB6B5EEEF2FFLL)
      + ((2 * v46 * v28) & 0x7B5BD6D6BDDDE5FELL);
  uint64_t v48 = v47 - ((2 * v47 + 0x79AD5159DA625298) & 0x7079F507051B0324) + 0x3513A3306FBEAADELL;
  uint64_t v49 = ((*(_DWORD *)(*a23 + v44) ^ v26 ^ 0x7F37FFFFE5777E7DLL) + v29 + (a4 & (2 * (*(_DWORD *)(*a23 + v44) ^ v26))))
      * v35;
  unint64_t v50 = (((unint64_t)(v40 - 0x7F1A9DD95DF05D10) >> 31) & 0x1FF7B7FFCLL)
      + (((unint64_t)(v40 - 0x7F1A9DD95DF05D10) >> 32) ^ 0xEFF9CDFFFFBDBFFELL)
      + (v49 ^ a3)
      + (v32 & (2 * v49))
      + (v48 ^ 0x377A9BDD5467786DLL)
      + ((2 * v48) & 0x1ADD5F3FELL ^ 0x105110324);
  *(_DWORD *)(a25 + 4 * (v36 + a1)) = v50 - 2 * ((v50 + v27) & (v26 + 2) ^ v50 & 2) + v37;
  BOOL v51 = v36 + v30 < v42;
  if (v43 > 0x48C27390 != v36 + v30 < v38) {
    BOOL v51 = v43 > 0x48C27390;
  }
  return (*(uint64_t (**)(void))(v34 + 8 * ((29 * !v51) ^ a5)))();
}

uint64_t sub_19E87FED0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6
                                                                       + 8
                                                                       * (int)(((((v5 - 986) ^ 0xFFFFFD0B) + (v5 ^ 0x6E5))
                                                                              * (a4 == v4)) | v5)))(a1, a2, a3, 3631);
}

uint64_t sub_19E87FF08(uint64_t a1)
{
  return (*(uint64_t (**)(void))(v1
                              + 8
                              * ((49
                                * (v5 & ~(((v2 | 0x148) - 584) ^ (*(_DWORD *)(*(void *)(a1 + 8) + v4) == (v2 | 0x148) - 758 + v3)))) ^ (v2 | 0x148))))();
}

void sub_19E87FF50()
{
}

uint64_t sub_19E87FF5C()
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  int v0 = (unint64_t *)*(&off_1EF0E5660
                           + ((79 * (dword_1E945E7A8 ^ 0x71 ^ qword_1E945E360)) ^ byte_19EC54C60[byte_19EC7A300[(79 * (dword_1E945E7A8 ^ 0x71 ^ qword_1E945E360))] ^ 0x76])
                           - 74);
  unsigned __int8 v1 = 79 * ((qword_1E945E360 - *v0) ^ 0x71);
  int v2 = (unint64_t *)*(&off_1EF0E5660
                           + (*((unsigned char *)off_1EF0E5DA8
                                               + (*((unsigned __int8 *)off_1EF0E5E28 + v1 - 4) ^ 0x8Eu)
                                               - 8) ^ v1)
                           - 115);
  unint64_t v3 = 1616673103 * (((*v2 ^ *v0) - (void)&v5) ^ 0xA7F80EC97C429E71);
  *int v0 = v3;
  *int v2 = v3;
  LOBYTE(v3) = 79 * ((v3 + *(_DWORD *)v0) ^ 0x71);
  uint64_t v8 = (uint64_t)*(&off_1EF0E5660
                + (*((unsigned char *)off_1EF0E5BB8
                                                  + (*((unsigned __int8 *)off_1EF0E5688 + v3) ^ 0x5Fu)
                                                  - 8) ^ v3)
                + 21);
  unsigned int v7 = 1001500783 * (v6 ^ 0x4AB4FFB4) + 2310;
  LOBYTE(v2) = 79 * (*(_DWORD *)v0 ^ 0x71 ^ *(_DWORD *)v2);
  return (*((uint64_t (**)(unsigned char *))*(&off_1EF0E5660
                                              + ((79
                                                                               * (dword_1E945E7A8 ^ 0x71 ^ qword_1E945E360)) ^ byte_19EC5F310[byte_19EC54E60[(79 * (dword_1E945E7A8 ^ 0x71 ^ qword_1E945E360))] ^ 0x5F])
                                              + 46)
          + (*((unsigned char *)off_1EF0E5A68
                                            + (*((unsigned __int8 *)off_1EF0E5AF0 + v2 - 12) ^ 0xCEu)
                                            - 12) ^ v2)
          + 2110))(v6);
}

uint64_t sub_19E880174@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a2 + (v4 + a1 + v3)) = v7;
  return (*(uint64_t (**)(void))(v6
                              + 8
                              * ((51
                                * (((((v5 + 26) & 0xD6) + 121) ^ (((((v5 - 1521905638) & 0x5AB66FD6)
                                                                                   + 0x1FFFFF862) & a3)
                                                                                 - 8 == v3)) & 1)) ^ (v5 - 1521905638) & 0x5AB66FD6u)))();
}

uint64_t sub_19E8801E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,int a23,uint64_t a24,uint64_t a25,int a26,int a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  unint64_t v36 = (((unint64_t)(a8 - 0x1AACB198D33FA096) >> 32) ^ 0x7FEFA69EFCFF74AFLL)
      + ((v35 >> ((v34 ^ 0x74u) + 3)) ^ ((v34 ^ 0x525u) - 0x3306042B7A2FF5))
      + (((unint64_t)(a8 - 0x1AACB198D33FA096) >> 31) & 0x1F9FEE95ELL)
      + ((2 * (v35 >> ((v34 ^ 0x74u) + 3))) & 0x1FD3BEBD6 ^ 0x54304B50)
      + (*(_DWORD *)(a33 + a12) ^ v33 ^ 0x1EEFB147DFAAF79FLL)
      + ((2 * (*(_DWORD *)(a33 + a12) ^ v33)) & 0x1BF55EF3ELL);
  *(_DWORD *)(a33 + 4 * a17) = v36 - ((2 * v36 + 158284686) & 0x16836D5A) + 804869236;
  *(_DWORD *)(a33 + a12) = (((v36 + 0x6153AE1D24B79DC7) >> 32)
                          - (((v36 + 0x6153AE1D24B79DC7) >> 31) & 0xC9755468)
                          - 457528780) ^ 0xEFFB1C99;
  BOOL v37 = a27 + 1235779563 < a23;
  if (a23 < 207629747 != a27 + 1235779563 < 207629747) {
    BOOL v37 = a23 < 207629747;
  }
  return (*(uint64_t (**)(void))(a4 + 8 * (v34 | (16 * v37))))();
}

void sub_19E880380(_DWORD *a1)
{
  unsigned int v1 = *a1 ^ (1431787901 * ((2 * (a1 & 0x5EC99DAE) - a1 - 1590271407) ^ 0x8AA6C886));
  __asm { BRAA            X8, X17 }
}

uint64_t sub_19E880474(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  return (*(uint64_t (**)(void))(v72 + 8 * ((a72 * (v73 <= 0x2ABA2644)) | (LODWORD(STACK[0x25C]) - 622))))();
}

uint64_t sub_19E8804B4@<X0>(int a1@<W8>)
{
  *(_DWORD *)(*(void *)(v5 - 0x7CF6A079DDC7252CLL) + 4 * (a1 + v3 - 308 + v2 - 1 + 415316859)) = *(_DWORD *)(*(void *)(v5 - 0x7CF6A079DDC7252CLL) + 4 * (v2 + v1));
  return (*(uint64_t (**)(void))(v4
                              + 8
                              * ((1375 * (((98 * ((v3 - 308) ^ 0x1D7)) ^ (v1 + 375)) + v2 < 0x7FFFFFFF)) ^ (v3 - 308))))();
}

uint64_t sub_19E880534(uint64_t a1, int a2, int a3)
{
  return (*(uint64_t (**)(void))(v4
                              + 8
                              * ((4049
                                * ((a3 & 0xF9F3E406 ^ 0x69B08004) + ((v3 + 1260500716) ^ a2) + 252706813 != 201978368)) ^ v3)))();
}

void sub_19E880598(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,int a51)
{
  *((_DWORD *)&STACK[0x5E0] + (v51 - 1141891576)) ^= a51 ^ (a1 - 680) ^ 0x5F2E77BB;
  JUMPOUT(0x19E8805D8);
}

uint64_t sub_19E88061C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  *(void *)(v16 - 120) = v13;
  *(void *)(v16 - 112) = v11;
  *(void *)(v16 - 104) = a10;
  *(_DWORD *)(v16 - 128) = v14
                         + 28
                         - 291962093 * ((((v16 - 144) | 0x293679F7) - ((v16 - 144) & 0x293679F7)) ^ 0x38C474BD)
                         + 1882;
  *(void *)(v16 - 144) = v12;
  *(void *)(v16 - 136) = v11;
  uint64_t v17 = (*(uint64_t (**)(uint64_t))(v10 + 8 * (v14 + 1984)))(v16 - 144);
  return (*(uint64_t (**)(uint64_t))(v10
                                            + 8
                                            * (int)((((v14 + 608069256) & 0xDBC19977 ^ 0x158)
                                                   * ((v15 - 1) < 0x7FFFFFFF)) ^ (v14 + 1574))))(v17);
}

uint64_t sub_19E8806CC@<X0>(int a1@<W8>)
{
  uint64_t v6 = 4 * (v1 - 1268331523);
  unsigned int v7 = *(_DWORD *)(v2 + 4 * (v1 - 1268331524));
  int v8 = (*(_DWORD *)(v2 + v6) ^ 0x1A0AC3BD ^ (1566083941 * (v7 ^ v4 ^ (v7 >> 30))
                                           - ((-1162799414 * (v7 ^ v4 ^ (v7 >> 30))) & 0xCCF4977C)
                                           - 428192834))
     - v1;
  *(_DWORD *)(v2 + v6) = v8 - ((2 * v8 - 1758304250) & 0xF8E11006) + 1208597510;
  unint64_t v9 = 1305237457 * ((v5 - 152) ^ 0xD15D9971B9B9A6CELL);
  *(_DWORD *)(v5 - 120) = ((a1 + 1607743028) | 0x9C) ^ v9;
  STACK[0x840] = (v1 + 855459402) ^ v9;
  int v10 = (a1 + 1607743028) ^ v9;
  STACK[0x830] = v9 ^ 0x7E967A4C;
  *(_DWORD *)(v5 - 144) = v10;
  *(_DWORD *)(v5 - 140) = 2092386721 - v9 + a1;
  *(_DWORD *)(v5 - 152) = -1305237457 * ((v5 - 152) ^ 0xB9B9A6CE);
  *(_DWORD *)(v5 - 148) = v10 ^ 9;
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(v3 + 8 * (a1 + 1557)))(v5 - 152);
  return (*(uint64_t (**)(uint64_t))(v3 + 8 * *(int *)(v5 - 136)))(v11);
}

uint64_t sub_19E880820(_DWORD *a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  unsigned int v2 = 653146051 * (((a1 | 0xEDD5F45) - (a1 & 0xEDD5F45)) ^ 0xA4C9EAA7);
  int v3 = a1[6] ^ v2;
  int v4 = a1[4] + v2;
  v9[1] = (961177747 * (v9 ^ 0x2752F11C)) ^ (v3 + 638444691);
  uint64_t v5 = (char *)*(&off_1EF0E5660 + (v3 ^ 0x617BA351)) - 8;
  uint64_t result = (*(uint64_t (**)(_DWORD *))&v5[8 * v3 - 0x30BDCCED0])(v9);
  if (v4 > 1563561047)
  {
    if (v4 == 1848773719)
    {
      unsigned int v7 = 3;
    }
    else
    {
      if (v4 != 1563561048) {
        goto LABEL_11;
      }
      unsigned int v7 = 1;
    }
LABEL_10:
    uint64_t v8 = *(void *)&v5[8
                      * ((195
                        * ((*(uint64_t (**)(void, uint64_t))&v5[8 * (v3 ^ 0x617BABAA)])(*((_DWORD *)*(&off_1EF0E5660 + v3 - 1635492568) + 6 * v7 + 2)+ (((v3 - 1635492107) | 0x100) ^ 0x8474B27A), 2970849626) != 0)) ^ (v3 - 1635492505))];
    __asm { BRAA            X8, X17 }
  }
  if (v4 == 1563561044)
  {
    unsigned int v7 = 0;
    goto LABEL_10;
  }
  if (v4 == 1563561047)
  {
    unsigned int v7 = 2;
    goto LABEL_10;
  }
LABEL_11:
  a1[10] = -694859417;
  return result;
}

void sub_19E880A80()
{
}

void sub_19E880AD8()
{
}

uint64_t sub_19E880B80@<X0>(int a1@<W4>, uint64_t a2@<X8>)
{
  HIDWORD(v7) = v2;
  LODWORD(v7) = v2 ^ v6;
  return (*(uint64_t (**)(void))(v5 + 8 * (((2 * (a2 + 1 == v4 + 4)) | (8 * (a2 + 1 == v4 + 4))) ^ a1)))((v7 >> 2) + v6 - (v3 & (2 * (v7 >> 2))));
}

uint64_t sub_19E8970FC(uint64_t a1)
{
  return sub_19E897104(a1, *v1);
}

uint64_t sub_19E897104(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(void, uint64_t, void))(v4 + 8 * (v2 + 2121)))(*v6, a2, ((v2 + 689521111) & 0xD6E6BFBF) + *(_DWORD *)(v3 - 0x19C7A72C32A62CBBLL) - 1477206632);
  *unint64_t v9 = v8;
  *(_DWORD *)(v3 - 0x19C7A72C32A62CBBLL) = v7;
  *uint64_t v5 = v7;
  return result;
}

uint64_t sub_19E8971B8@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(void))(a1 + 8 * ((4071 * (v1 == 2072727178)) ^ 0x7EEu)))();
}

uint64_t sub_19E89720C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, unsigned int a16)
{
  BOOL v19 = v17 + 412539839 < (int)(a16 + 865570322);
  if (a16 > ((v16 - 67) | 0x40u) + 1281912971 != v17 + 412539839 < ((v16 - 1022853478) & 0x3CF786DE) - 1281915084) {
    BOOL v19 = a16 > ((v16 - 67) | 0x40u) + 1281912971;
  }
  return (*(uint64_t (**)(void))(v18 + 8 * ((2424 * v19) ^ v16)))();
}

uint64_t sub_19E89729C@<X0>(int a1@<W2>, int a2@<W8>)
{
  unsigned int v5 = (((((a2 - 1685167851) ^ 0x9B8E60F0) + a1) & *v2 ^ 0x112ABD5C)
      - ((2 * ((((a2 - 1685167851) ^ 0x9B8E60F0) + a1) & *v2 ^ 0x112ABD5C)) & 0xCD7C0F90)
      - 423753784) ^ 0x8FBC1357;
  v2[623] = v2[396] ^ *(_DWORD *)(v3 + 4 * ((*v2 & 1) == 0)) ^ ((((((2 * v5) & 0x29142CF4) - v5 + 1802889605) ^ 0x6F2DC844 | ((a2 - 1685167851) & 0x64719F0F ^ (a1 + 1568)) & v2[623] ^ 0x80000000)
                                                                 - 2
                                                                 * (((((2 * v5) & 0x29142CF4) - v5 + 1802889605) ^ 0x6F2DC844) & 0x1F2FDAE9 ^ (((2 * v5) & 0x29142CF4) - v5 + 1802889605) & 8)
                                                                 - 1624253727) >> 1) ^ 0x7A5EAA5;
  return (*(uint64_t (**)(void))(v4 + 8 * ((293 * (LODWORD(STACK[0x304]) > 0x26F)) ^ (a2 + 367))))();
}

void sub_19E8973B0(uint64_t a1)
{
  int v1 = 961177747 * ((((2 * a1) | 0x785733A2) - a1 + 1137993263) ^ 0x9B7968CD);
  __asm { BRAA            X10, X17 }
}

uint64_t sub_19E897468@<X0>(int a1@<W1>, int a2@<W8>)
{
  int v9 = a2 + 1;
  *(unsigned char *)(v5 + (v9 + v4 + v3)) = v6;
  return (*(uint64_t (**)(void))(v8 + 8 * ((((a1 + v9 + 1) < 0x38) * v7) ^ v2)))();
}

void sub_19E897470()
{
}

uint64_t sub_19E897738(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,int a24)
{
  return (*(uint64_t (**)(void))(v25 + 8 * ((1697 * (a24 == ((v24 - 234) ^ 0xA321AC94) + v24 - 378)) ^ v24)))();
}

uint64_t sub_19E89777C@<X0>(int a1@<W8>, __n128 a2@<Q0>)
{
  int v7 = (__n128 *)(v2 + v5);
  v7[22] = a2;
  v7[23] = a2;
  return (*(uint64_t (**)(void))(v6 + 8 * (((v3 == v5) * v4) ^ a1)))();
}

uint64_t sub_19E8977A4@<X0>(int a1@<W8>)
{
  *(unsigned char *)(v1 + (v3 + v2)) = *(unsigned char *)(v5 + (v3 + v2))
                                           - ((2 * *(unsigned char *)(v5 + (v3 + v2))) & 0x83)
                                           - 63;
  return (*(uint64_t (**)(void))(v6 + 8 * ((1811 * (v3 + 1093 * (v4 ^ 0x244) - 2187 == a1)) ^ v4)))();
}

void sub_19E8977F4(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 32) - 402930427 * ((-2 - ((a1 | 0x6DB78327) + (~a1 | 0x92487CD8))) ^ 0x88F18065);
  __asm { BRAA            X15, X17 }
}

uint64_t sub_19E89792C(uint64_t result)
{
  *(_DWORD *)(result + 16) = v1;
  return result;
}

void sub_19E897934(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  *(unsigned char *)(*(void *)v12 + 56) = 1;
  *a11 = *(&off_1EF0E5660 + v11 - 451);
  JUMPOUT(0x19E897960);
}

uint64_t sub_19E897A48()
{
  return (*(uint64_t (**)(void))(v0
                              + 8
                              * ((2037 * ((((v2 & 0x20000000) == 0) ^ ((v1 ^ 0x56) - 68)) & 1)) ^ (v1 - 592))))();
}

uint64_t sub_19E897A80(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v8 = (((a3 - 1244) | 0x710) ^ 0xFFFFF8AF) + v4;
  unint64_t v9 = (v8 | ((unint64_t)(v8 < v3) << 32)) - 189014704;
  *(unsigned char *)(v7 + v9) ^= *((unsigned char *)*(&off_1EF0E5660 + (a3 ^ 0x5C1)) + (v9 & 0xF) - 4) ^ *((unsigned char *)*(&off_1EF0E5660 + (a3 ^ 0x563))
                                                                                         + (v9 & 0xF)
                                                                                         - 6) ^ *((unsigned char *)*(&off_1EF0E5660 + a3 - 1154)
                                                                                                + (v9 & 0xF)
                                                                                                + 3) ^ (99 * ((v8 + 80) & 0xF));
  return (*(uint64_t (**)(void))(v6 + 8 * (((v8 != v3) * v5) ^ a3)))();
}

void sub_19E89894C()
{
  *int v1 = v0;
  JUMPOUT(0x19E822028);
}

uint64_t sub_19E898D8C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6, uint64_t a7)
{
  *(unsigned char *)(*(void *)(a7 + 96) + 1568) = 0;
  return (*(uint64_t (**)(void))(v8
                              + 8
                              * (int)(((*(_DWORD *)(a7 + 72) == a6)
                                     * ((a4 + (v7 ^ 0x488) + 285348005) & 0xEEFDEB59 ^ (a4 - 330))) ^ v7 ^ 0x488)))();
}

void sub_19E898F74()
{
}

uint64_t sub_19E89917C@<X0>(int a1@<W8>)
{
  BOOL v6 = v1 == v2 || LODWORD(STACK[0x260]) - v4 != -1264879464;
  return (*(uint64_t (**)(void))(v3 + 8 * ((v6 * ((a1 ^ 0x51C) - 1099)) ^ a1)))();
}

uint64_t sub_19E8991C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, int a15)
{
  int v20 = v16 + 264;
  *(unsigned char *)(*v19 + (v15 + v17)) = 65;
  BOOL v21 = v15 - 1971718670 < (a15 - 2018025157);
  if ((v15 - 1971718670) < 0xD4A4E759 != a15 - 2018025157 < 617 * (v20 ^ 0x3DBu) - 727391609) {
    BOOL v21 = a15 - 2018025157 < 617 * (v20 ^ 0x3DBu) - 727391609;
  }
  return (*(uint64_t (**)(void))(v18 + 8 * ((50 * !v21) ^ v20)))();
}

uint64_t sub_19E899250(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,unsigned int a27)
{
  BOOL v28 = a27 > 0x19FB11D8;
  if (v28 == a5 + 874925024 < -435884505) {
    LOBYTE(v28) = a5 + 874925024 < a14;
  }
  return (*(uint64_t (**)(uint64_t))(a4 + 8 * ((105 * (((v27 + 72) ^ v28) & 1)) ^ v27)))(3891260798);
}

uint64_t sub_19E899358(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  BOOL v15 = (int)a5 - 885078300 < (int)a2 + 234255533;
  if ((int)a5 - 885078300 < -1913228115 != a2 > ((a3 + 59) | 0x100)
                                                             + ((a3 - 219) ^ 0x720986B8u))
    BOOL v15 = a2 > ((a3 + 59) | 0x100) + ((a3 - 219) ^ 0x720986B8u);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 8 * (int)((1912 * v15) ^ a3)))(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
}

uint64_t sub_19E8993D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, int a7)
{
  BOOL v10 = v7 == a7 + ((v8 + 1463576102) & (a5 + 1460)) + ((v8 + 1463576102 + a5) | 0x4AC) - 2785;
  return (*(uint64_t (**)(void))(v9 + 8 * ((2 * v10) | (4 * v10) | v8)))();
}

uint64_t sub_19E899424(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  HIDWORD(v12) = a5;
  LODWORD(v12) = a5 ^ v11;
  return (*(uint64_t (**)(void))(v10 + 8 * ((1694 * (a8 + 1 == v9 + 44)) ^ a3)))((v12 >> 2)
                                                                                             + v11 - (v8 & (2 * (v12 >> 2))));
}

uint64_t sub_19E89966C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void, void, void))(v8
                                                                             + 8
                                                                             * ((89
                                                                               * (((a6 ^ 0x42E) & v6) != (a6 ^ 0x436))) ^ a6)))(a1, a2, (v7 - a2), a6 ^ 0x559, a6 ^ 0x697);
}

uint64_t sub_19E8996B4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(void))(a2
                              + 8
                              * (int)(((*(_DWORD *)(*a1 + v4) == v3)
                                     * ((((2 * (v2 + 94)) ^ 0x978) + 231) ^ (v2 + 495139347) & 0xE27CC6CC)) ^ (v2 + 94))))();
}

uint64_t sub_19E899808@<X0>(uint64_t a1@<X2>, int a2@<W8>)
{
  *int v5 = v5[623];
  return (*(uint64_t (**)(void))(a1
                              + 8
                              * (int)((533
                                     * (v4 + 98859640 + v2 + ((a2 + 1778922783) & 0x95F7CFEB ^ 0x59A) - 113 - 2395 == v3)) ^ (a2 + 1778922783) & 0x95F7CFEB)))();
}

uint64_t sub_19E899920(int a1)
{
  return (*(uint64_t (**)(void))(v4 + 8 * (v1 ^ (4 * (*(_DWORD *)(v2 + 4 * v3) == a1 + ((v1 + 2) | 0xF4) - 511)))))();
}

uint64_t sub_19E89995C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,unsigned int *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62)
{
  STACK[0x5D8] = 0xA09C8CE839943C37;
  uint64_t v65 = *a55;
  unint64_t v66 = 653146051
      * ((((v64 - 152) | 0x6331007A7EF38A11) - ((v64 - 152) & 0x6331007A7EF38A11)) ^ 0xCCC6EBE5D4E73FF3);
  STACK[0x690] = v66 ^ v63;
  int v67 = (v62 - 1650139519) ^ v66;
  *(_DWORD *)(v64 - 140) = v67 ^ 0x72;
  *(_DWORD *)(v64 - 136) = v66;
  STACK[0x6A0] = v65 - v66;
  *(_DWORD *)(v64 - 148) = v67;
  *(_DWORD *)(v64 - 144) = v66 + v62 - 274483119;
  *(_DWORD *)(v64 - 120) = ((v62 - 1650139519) ^ 3) - v66;
  uint64_t v68 = (*(uint64_t (**)(uint64_t))(a3 + 8 * (v62 ^ (a4 - 1828))))(v64 - 152);
  return (*(uint64_t (**)(uint64_t))(a62 + 8 * *(int *)(v64 - 152)))(v68);
}

void sub_19E899A54()
{
}

uint64_t sub_19E899A60@<X0>(unsigned int a1@<W0>, uint64_t a2@<X1>, int a3@<W2>, unsigned int a4@<W3>, char a5@<W4>, int a6@<W5>, uint64_t a7@<X6>, int a8@<W8>)
{
  BOOL v13 = a4 < a1;
  *(unsigned char *)(a2 + (v9 + v11)) = *(unsigned char *)(a7 + (a8 + v10))
                                            - (((v8 ^ a5) + 81) & (2 * *(unsigned char *)(a7 + (a8 + v10))))
                                            - 63;
  unsigned int v14 = a8 + 1 + a3;
  int v15 = v13 ^ (v14 < a1);
  BOOL v16 = v14 < a4;
  if (!v15) {
    BOOL v13 = v16;
  }
  return (*(uint64_t (**)(void))(v12 + 8 * ((!v13 * a6) ^ v8)))();
}

void sub_19E899ACC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  _DWORD *v14 = 2087749635;
  (*(void (**)(uint64_t))(v13 + 8 * (v12 ^ 0x84B)))(a12);
  JUMPOUT(0x19E899B20);
}

uint64_t sub_19E899CB8()
{
  return (*(uint64_t (**)(void))(v1
                              + 8
                              * ((27
                                * (LODWORD(STACK[0xEB0]) - 357041633 < ((((v0 - 33534575) & 0x1FFAFFD) - 1100) ^ 0x1B9u))) ^ v0)))();
}

uint64_t sub_19E89A048(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,char a33)
{
  *(&a33 + (v33 + a3)) = -63;
  return (*(uint64_t (**)(void))(v35 + 8 * ((1762 * ((v33 + 1 + a3) < 0x40)) ^ (a8 + v34 + 789))))();
}

uint64_t sub_19E89A08C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  unsigned int v33 = (v26 + 210833768) & 0xF36EECFD;
  int v34 = ((v32 + 1941759425 - 2 * ((v32 - 144) & 0x73BCE651)) ^ 0x54EE174D) * a2;
  *(void *)(v32 - 120) = v25;
  *(_DWORD *)(v32 - 136) = v27 - v34 + 768587110 + v33;
  *(_DWORD *)(v32 - 132) = v26 - v34 + 1380;
  *(void *)(v32 - 144) = v29;
  (*(void (**)(uint64_t))(v28 + 8 * (v26 + 1717)))(v32 - 144);
  *(void *)(v32 - 144) = a24;
  *(void *)(v32 - 136) = a23;
  *(_DWORD *)(v32 - 128) = (v33 - 8) ^ (1001500783
                                      * (((v32 - 144) & 0xD46D5E07 | ~((v32 - 144) | 0xD46D5E07)) ^ 0x61265E4C));
  uint64_t v37 = 8 * (int)(v33 ^ 0x9D5);
  (*(void (**)(uint64_t))(v28 + v37))(v32 - 144);
  *(_DWORD *)(v32 - 112) = v33
                         + 306
                         + 961177747
                         * ((1396034265 - ((v32 - 144) | 0x5335CAD9) + ((v32 - 144) | 0xACCA3526)) ^ 0x8B98C43A);
  *(void *)(v32 - 128) = v30;
  *(void *)(v32 - 120) = a23;
  *(void *)(v32 - 144) = a24;
  *(void *)(v32 - 136) = v29;
  (*(void (**)(uint64_t))(v28 + 8 * (int)(v33 + 2248)))(v32 - 144);
  *(void *)(v32 - 112) = v31;
  *(void *)(v32 - 104) = v30;
  *(_DWORD *)(v32 - 128) = v33
                         + 2063
                         - 291962093
                         * ((-452633057 - ((v32 - 144) | 0xE5055E1F) + ((v32 - 144) | 0x1AFAA1E0)) ^ 0xB08ACAA);
  *(void *)(v32 - 144) = a24;
  *(void *)(v32 - 136) = v30;
  *(void *)(v32 - 120) = a23;
  (*(void (**)(uint64_t))(v28 + 8 * (int)(v33 ^ 0x9EB)))(v32 - 144);
  *(_DWORD *)(v32 - 144) = v33
                         + 1209
                         - 291962093 * ((((v32 - 144) | 0xCDEEF093) + (~(v32 - 144) | 0x32110F6C)) ^ 0xDC1CFDD8);
  *(void *)(v32 - 120) = v30;
  *(void *)(v32 - 112) = a23;
  *(void *)(v32 - 136) = a24;
  *(void *)(v32 - 128) = v30;
  *(void *)(v32 - 104) = a25;
  (*(void (**)(uint64_t))(v28 + 8 * (int)(v33 ^ 0x9ED)))(v32 - 144);
  *(_DWORD *)(v32 - 128) = (v33 - 8) ^ (1001500783
                                      * ((815243602 - ((v32 - 144) | 0x3097A152) + ((v32 - 144) | 0xCF685EAD)) ^ 0x85DCA119));
  *(void *)(v32 - 144) = a24;
  *(void *)(v32 - 136) = a19;
  (*(void (**)(uint64_t))(v28 + v37))(v32 - 144);
  *(_DWORD *)(v32 - 112) = v33 + 306 + 961177747 * ((v32 - 144) ^ 0x2752F11C);
  *(void *)(v32 - 128) = a16;
  *(void *)(v32 - 120) = a19;
  *(void *)(v32 - 144) = a24;
  *(void *)(v32 - 136) = v29;
  (*(void (**)(uint64_t))(v28 + 8 * (int)(v33 ^ 0x958)))(v32 - 144);
  *(_DWORD *)(v32 - 128) = v33
                         + 2063
                         - 291962093
                         * ((((v32 - 144) | 0x990B0FA8) - (v32 - 144) + ((v32 - 144) & 0x66F4F050)) ^ 0x88F902E2);
  *(void *)(v32 - 112) = v31;
  *(void *)(v32 - 104) = a16;
  *(void *)(v32 - 144) = a24;
  *(void *)(v32 - 136) = a16;
  *(void *)(v32 - 120) = a19;
  (*(void (**)(uint64_t))(v28 + 8 * (int)(v33 + 2137)))(v32 - 144);
  *(void *)(v32 - 112) = a19;
  *(void *)(v32 - 104) = a17;
  *(void *)(v32 - 136) = a24;
  *(void *)(v32 - 128) = a16;
  *(_DWORD *)(v32 - 144) = v33
                         + 1209
                         - 291962093
                         * ((-1789737638 - ((v32 - 144) | 0x9552C55A) + ((v32 - 144) | 0x6AAD3AA5)) ^ 0x7B5F37EF);
  *(void *)(v32 - 120) = a16;
  (*(void (**)(uint64_t))(v28 + 8 * (int)(v33 ^ 0x9ED)))(v32 - 144);
  *(void *)(v32 - 136) = a16;
  *(void *)(v32 - 128) = v30;
  *(_DWORD *)(v32 - 144) = (v33 + 1742) ^ (1575213817
                                         * (((((v32 - 144) | 0x7CE8C98) ^ 0xFFFFFFFE) - (~(v32 - 144) | 0xF8317367)) ^ 0x7554C3AB));
  (*(void (**)(uint64_t))(v28 + 8 * (int)(v33 ^ 0x99E)))(v32 - 144);
  *(void *)(v32 - 144) = a16;
  *(_DWORD *)(v32 - 132) = v33
                         + 1431787901 * (((v32 - 144) & 0xF5B77B45 | ~((v32 - 144) | 0xF5B77B45)) ^ 0x21D82E6D)
                         + 669;
  uint64_t v35 = (*(uint64_t (**)(uint64_t))(v28 + 8 * (int)(v33 + 2171)))(v32 - 144);
  return (*(uint64_t (**)(uint64_t))(v28
                                            + 8 * (int)((459 * (*(_DWORD *)(v32 - 136) >= v33 + 486464683)) ^ v33)))(v35);
}

void sub_19E89A584(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  int v1 = *(_DWORD *)(a1 + 24) - 1431787901 * ((-2 - ((a1 | 0xCA778890) + (~a1 | 0x3588776F))) ^ 0x1E18DDB8);
  if (*(_DWORD *)(*(void *)(a1 + 16) - 0x7CF6A079DDC72530) - 263820150 >= 0) {
    unsigned int v3 = *(_DWORD *)(*(void *)(a1 + 16) - 0x7CF6A079DDC72530) - 263820150;
  }
  else {
    unsigned int v3 = 263820150 - *(_DWORD *)(*(void *)(a1 + 16) - 0x7CF6A079DDC72530);
  }
  uint64_t v2 = *(void *)a1;
  if (*(_DWORD *)(*(void *)a1 - 0x7CF6A079DDC72530) - 263820150 >= 0) {
    unsigned int v4 = *(_DWORD *)(v2 - 0x7CF6A079DDC72530) - 263820150;
  }
  else {
    unsigned int v4 = 263820150 - *(_DWORD *)(v2 - 0x7CF6A079DDC72530);
  }
  uint64_t v7 = *(void *)(a1 + 16);
  unsigned int v8 = v1 + 1431787901 * (&v7 ^ 0x2B90AAD7) + 583;
  int v5 = (char *)*(&off_1EF0E5660 + (v1 ^ 0x165)) - 8;
  (*(void (**)(uint64_t *))&v5[8 * (v1 ^ 0x86B)])(&v7);
  if (v3 >= v4) {
    unsigned int v6 = (v4 ^ 0xAFB7CDBF) + 1448048635 + ((2 * v4) & 0x5F6F9B7E);
  }
  else {
    unsigned int v6 = (v3 ^ 0xF6DFCFBB) + 254244351 + ((2 * v3) & 0xEDBF9F76);
  }
  __asm { BRAA            X9, X17 }
}

uint64_t sub_19E89A760(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  int v11 = (unsigned int *)(v9 + 4 * (v8 + v10));
  unsigned int v12 = (((((v6 - 334) | 0x815) ^ 0x893B988D) + (v7 | 0x7FFFFFFF)) ^ 0x2052846E) - 1;
  uint64_t v13 = v8 + 1;
  int v14 = *(_DWORD *)(v9 + 4 * (v13 + v10));
  unsigned int v15 = (((v14 & 0x7FFFFFFE ^ 0x1470CB03) + (v14 & a6 ^ 0x6A843014) - ((v14 & 0x7FFFFFFE ^ 0x1470CB03) & (a6 + 1))) | v12 ^ 0xA96914F6) ^ 0x16A43016;
  *int v11 = v11[397] ^ *((_DWORD *)&STACK[0x5D8] + ((v14 & 1) == 0)) ^ ((v15 - ((2 * v15) & 0xC89B50BE) - 464672673) >> 1) ^ 0x4BB2E818;
  return (*(uint64_t (**)(void))(a5 + 8 * ((56 * (v13 == a4 + 3)) ^ v6)))();
}

uint64_t sub_19E89A96C()
{
  *(_DWORD *)(v6 - 132) = v5 + ((v6 - 136) ^ 0x11F20D4A) * v0 - 553;
  *(void *)(v6 - 128) = v3;
  *(void *)(v6 - 120) = v1;
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(v2 + 8 * (v5 ^ 0xEDE)))(v6 - 136);
  return (*(uint64_t (**)(uint64_t))(v2 + 8 * (((*(_DWORD *)(v6 - 136) <= v4) * ((v5 ^ 0x76A) - 204)) ^ v5)))(v7);
}

uint64_t sub_19E89A9E4@<X0>(uint64_t a1@<X0>, int a2@<W8>)
{
  int v6 = *((_DWORD *)&STACK[0x360] + ((v4 + a2) >> (7 * (v3 ^ 0x14) - 75)) + 18);
  *(unsigned char *)(a1 + (v4 + a2)) = v6 ^ 0xF1;
  *(unsigned char *)(a1 + (v4 + a2 + 1)) = BYTE1(v6) ^ 0x8D;
  *(unsigned char *)(a1 + (v4 + a2 + 2)) = BYTE2(v6) ^ 0xB7;
  *(unsigned char *)(a1 + (v4 + a2 + 3)) = HIBYTE(v6) ^ 0x2C;
  unsigned int v7 = LODWORD(STACK[0x3BC]) - 864149832;
  BOOL v8 = v7 < v2;
  BOOL v9 = v4 - 1360276939 < v7;
  if (v4 - 1360276939 < v2 != v8) {
    BOOL v9 = v8;
  }
  return (*(uint64_t (**)(void))(v5 + 8 * ((63 * v9) ^ v3)))();
}

void sub_19E89AAA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62)
{
  (*(void (**)(uint64_t, uint64_t))(a5 + 8 * (v62 ^ (v62 - 2179))))(a43, 2965982036);
  int v64 = (*(uint64_t (**)(void))(a62 + 8 * (v62 ^ (v62 - 1809))))();
  *uint64_t v63 = v62 + 39123471 + v64 - ((2 * v64) & 0xF8E11006) - 238;
  JUMPOUT(0x19E89AB78);
}

uint64_t sub_19E89B614(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, int a8)
{
  int v17 = (unsigned int *)(v14 + 4 * (v10 + a2));
  uint64_t v18 = v10 + 1;
  int v19 = *(_DWORD *)(v14 + 4 * (v18 + a2));
  int v20 = ((v19 & 0x7FFFFFFE ^ a7) + (v19 & a6 ^ a8) - ((v19 & 0x7FFFFFFE ^ a7) & a6)) ^ v11;
  int v21 = (v20 - (v12 & (2 * v20)) + v16) ^ 0xEC04D47;
  *int v17 = v17[397] ^ *(_DWORD *)(v15 + 4 * ((v19 & 1) == 0)) ^ (((v21 | ((v8 ^ 0xAF) + v13) & v9 ^ 0x80000000)
                                                                - ((2 * v21) & 0xE5F465DE)
                                                                - 218483985) >> 1) ^ 0x4948BBB8;
  return (*(uint64_t (**)(void))(a3 + 8 * ((351 * (v18 == a5 + 3)) ^ v8)))();
}

uint64_t sub_19E89B6E4(uint64_t a1, int a2)
{
  return (*(uint64_t (**)(void))(v4 + 8 * ((((((a2 - 1001) ^ (v2 == v3)) & 1) == 0) * ((a2 ^ 0x440) + 190)) ^ a2)))();
}

void sub_19E89B724(uint64_t a1)
{
  unint64_t v2 = (*(void *)(a1 + 32) ^ 0x6FFFFEBE7F2ED7DFLL)
     - 0x6FFFFEBDFBA746D7
     + ((2 * *(void *)(a1 + 32)) & 0xDFFFFD7CFE5DAFBELL);
  unint64_t v3 = (*(void *)(a1 + 24) ^ 0xFEDF3DF436DDCFB7)
     + 0x120C20C4CA9C151
     + ((2 * *(void *)(a1 + 24)) & 0xFDBE7BE86DBB9F6ELL);
  BOOL v4 = v2 < 0x83879108;
  BOOL v5 = v2 > v3;
  if (v4 != v3 < 0x83879108) {
    BOOL v5 = v4;
  }
  int v1 = *(_DWORD *)(a1 + 4) - 583844137 * ((a1 & 0xC436EEB7 | ~(a1 | 0xC436EEB7)) ^ 0x2B17ACC5);
  __asm { BRAA            X15, X17 }
}

void sub_19E8B8800(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _DWORD *a11)
{
  *a11 = -694859282;
  JUMPOUT(0x19E8B8818);
}

void sub_19E8B883C()
{
}

uint64_t sub_19E8B8C2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, unsigned int a15)
{
  a15 = v18 ^ ((((&a14 | 0x3C395B91) + (~&a14 | 0xC3C6A46E)) ^ 0x2CE7E61D) * v17);
  uint64_t v19 = (*(uint64_t (**)(int *))(v16 + 18808))(&a14);
  return (*(uint64_t (**)(uint64_t))(v16 + 8 * ((35 * (a14 != v15)) ^ 0x85u)))(v19);
}

uint64_t sub_19E8B8C9C()
{
  return (*(uint64_t (**)(void))(v0 + 8 * ((163 * (((*off_1EF0E57C8 == 0) ^ 0x3B) & 1)) ^ 0x277u)))();
}

uint64_t sub_19E8B8CE0(uint64_t a1, int a2)
{
  BOOL v6 = v4 - 1813757689 > 1903942844 || v4 - 1813757689 < SLODWORD(STACK[0x248]);
  return (*(uint64_t (**)(void))(v3 + 8 * (int)(((((v2 + 292) ^ 0xFFFFFDF4) + (v2 ^ a2)) * v6) ^ v2)))();
}

uint64_t sub_19E8B8D2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unint64_t *a14, uint64_t a15, unsigned int a16, int a17, int a18, unsigned int a19)
{
  unsigned int v22 = 1575213817 * ((2 * (&a14 & 0x22B906B8) - &a14 - 582551225) ^ 0x5023498B);
  a19 = 1094543910 - v22;
  a14 = &STACK[0x698EDBACE60CACBC];
  a15 = a10;
  a16 = -1853230656 - v22;
  a18 = (v21 - 871891780) ^ v22;
  uint64_t v23 = (*(uint64_t (**)(unint64_t **))(v20 + 8 * (v21 + 2207)))(&a14);
  return (*(uint64_t (**)(uint64_t))(v20 + 8 * ((11 * (a17 == v19 + 83 * (v21 ^ 0xC0) - 166)) ^ v21)))(v23);
}

void sub_19E8B8E08()
{
}

uint64_t sub_19E8B8F20@<X0>(int a1@<W8>)
{
  int v10 = v6 + 1;
  BOOL v11 = a1 < v2;
  *(_DWORD *)(*v1 + 4 * (v10 + v7)) = *(_DWORD *)(*v1 + 4 * (v4 + v10));
  if (v11 == v10 + v8 < v2) {
    BOOL v11 = v10 + v8 < a1;
  }
  return (*(uint64_t (**)(void))(v9 + 8 * ((v11 * v3) ^ v5)))();
}

uint64_t sub_19E8B8F28()
{
  uint64_t v4 = *(void *)(v6 + 16);
  *(_DWORD *)(v3 - 128) = v0
                        + 1305237457 * ((2 * ((v3 - 128) & 0x41D84988) - (v3 - 128) + 1042790004) ^ 0x879E10BA)
                        + 817;
  *(void *)(v3 - 120) = v4;
  *(void *)(v3 - 112) = v2;
  return (*(uint64_t (**)(uint64_t))(v1 + 8 * (v0 ^ 0x8D5)))(v3 - 128);
}

void sub_19E8B8FE4(uint64_t a1@<X8>)
{
  int v6 = 545147329 * ((2 * ((v5 - 144) & 0x342A1B68) - (v5 - 144) + 1272308880) ^ 0xEB2124FC);
  *(void *)(v5 - 136) = v4;
  *(_DWORD *)(v5 - 124) = (v1 + 797) ^ v6;
  *(void *)(v5 - 120) = a1;
  *(_DWORD *)(v5 - 144) = (((v1 + 78921878) & 0xFB4BBDCF ^ 0x2D34D55C) + v2) ^ v6;
  (*(void (**)(uint64_t))(v3 + 8 * (v1 ^ 0xB23)))(v5 - 144);
  JUMPOUT(0x19E89A118);
}

uint64_t sub_19E8B9088(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 4);
  *(void *)(a1 + 48) = *(void *)(a2 + 8);
  return 0;
}

void I4nm3F2ne()
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  int v0 = (unsigned __int8 *)off_1EF0E5E08;
  int v1 = (char *)off_1EF0E5D58 - 4;
  int v2 = *(&off_1EF0E5660
       + (*((unsigned char *)off_1EF0E5D58
                           + (*((unsigned __int8 *)off_1EF0E5E08
                              + (79 * (dword_1E945E7A0 ^ 0x71 ^ qword_1E945E360))) ^ 0x58u)
                           - 4) ^ (79 * (dword_1E945E7A0 ^ 0x71 ^ qword_1E945E360)))
       - 11);
  unsigned __int8 v3 = 79 * ((qword_1E945E360 - *v2) ^ 0x71);
  uint64_t v4 = *(&off_1EF0E5660
       + (*((unsigned char *)off_1EF0E5DA8 + (*((unsigned __int8 *)off_1EF0E5E28 + v3 - 4) ^ 0x42u) - 8) ^ v3)
       - 230);
  unint64_t v5 = *v2 ^ (unint64_t)&v8 ^ *v4;
  *int v2 = 1616673103 * (v5 + 0x5807F13683BD618FLL);
  *uint64_t v4 = 1616673103 * (v5 ^ 0xA7F80EC97C429E71);
  v9[0] = (1980347521 * (((v9 | 0x1DF9B175) + (~v9 | 0xE2064E8A)) ^ 0xA41DF189)) ^ 0x64D;
  int v6 = (char *)*(&off_1EF0E5660
               + ((79 * (dword_1E945E7A0 ^ 0x71 ^ qword_1E945E360)) ^ byte_19EC54C60[byte_19EC7A300[(79 * (dword_1E945E7A0 ^ 0x71 ^ qword_1E945E360))] ^ 0x56])
               - 149)
     - 8;
  (*(void (**)(_DWORD *))&v6[8
                                      * ((79 * ((*(unsigned char *)v4 - *(unsigned char *)v2) ^ 0x71)) ^ v1[v0[(79 * ((*(unsigned char *)v4 - *(unsigned char *)v2) ^ 0x71))] ^ 0x1F])
                                      + 17768])(v9);
  v9[1] = (583844137 * ((1542028444 - (v9 | 0x5BE97C9C) + (v9 | 0xA4168363)) ^ 0xB4C83EEE)) ^ 0xD9A13099;
  unsigned __int8 v7 = 79 * ((*(_DWORD *)v4 - *(_DWORD *)v2) ^ 0x71);
  (*(void (**)(_DWORD *))&v6[8
                                      * (*((unsigned char *)off_1EF0E5848
                                                          + (*((unsigned __int8 *)off_1EF0E5DD0 + v7 - 8) ^ 0xA3u)) ^ v7)
                                      + 17752])(v9);
  __asm { BRAA            X8, X17 }
}

uint64_t sub_19E8B9348(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  return (*(uint64_t (**)(void))(v5
                              + 8
                              * (int)(((*(void *)(v4 + 24) == 0x523BC1D27526C6FLL)
                                     * ((a4 ^ 0xF8B) + ((a4 + 1482092390) & 0xA7A90B1D) - 2520)) ^ a4)))();
}

uint64_t sub_19E8B9534()
{
  return sub_19E8B95D8(0x6FFFF7CD5A35FF7FLL, 3026976510, 2949601744, 232069664, 1378632637, 0x53AEAD34F6B9E6E0, 0x7D73FBFDAFB01FA1, 0x15F603F42);
}

uint64_t sub_19E8B95D8@<X0>(int a1@<W0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, void *a6@<X8>)
{
  uint64_t v19 = 4 * (v14 + v17);
  int v20 = v7 + v9 + ((2 * (*(_DWORD *)(*v6 + v19) ^ v8)) & a2) + (*(_DWORD *)(*v6 + v19) ^ v8 ^ a1);
  *(_DWORD *)(*a6 + v19) = v20 + a3 - ((a4 + 2 * (v20 + a3)) & v18) + a5;
  int v21 = v14 + 1 + v10;
  BOOL v23 = v21 > v11 || v21 < v12;
  return (*(uint64_t (**)(void))(v15 + 8 * ((v23 * v16) ^ v13)))();
}

void sub_19E8B965C()
{
  *(_DWORD *)(v0 - 0x19C7A72C32A62CABLL) = -694859505;
  JUMPOUT(0x19E897170);
}

uint64_t sub_19E8B967C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, int a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,int a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,int a58,char a59)
{
  return (*(uint64_t (**)(uint64_t, unint64_t *, uint64_t, uint64_t, char *, uint64_t, uint64_t))(v59 + 8 * ((124 * (a15 + (a14 & (2 * LODWORD(STACK[0x3A4])) ^ 0x40) + (STACK[0x3A4] & 0x3F ^ 0x7FCF7CC7u) - 637931552 < 0xFFFFFFC0)) ^ (a45 + 1521))))(a1, &STACK[0x360], a3, a4, &a59, a52, a51);
}

void sub_19E8B9720(uint64_t a1)
{
  __asm { BRAA            X8, X17 }
}

void sub_19E8B97E4(uint64_t a1)
{
  uint64_t v2 = (uint64_t)*(&off_1EF0E5660
                + ((79 * ((qword_1E945E360 - dword_1E945E348) ^ 0x71)) ^ byte_19EC5F110[byte_19EC54B60[(79 * ((qword_1E945E360 - dword_1E945E348) ^ 0x71))] ^ 0x49])
                - 168);
  uint64_t v3 = *(void *)(v2 - 4);
  uint64_t v4 = (unint64_t *)*(&off_1EF0E5660
                           + (*((unsigned char *)off_1EF0E5A68
                                               + (*((unsigned __int8 *)off_1EF0E5AF0
                                                  + (79 * ((qword_1E945E360 - v3) ^ 0x71))
                                                  - 12) ^ 0x44u)
                                               - 12) ^ (79 * ((qword_1E945E360 - v3) ^ 0x71)))
                           - 162);
  unint64_t v5 = v3 - (void)&v9 + *v4;
  uint64_t v6 = 1616673103 * (v5 + 0x5807F13683BD618FLL);
  unint64_t v7 = 1616673103 * (v5 ^ 0xA7F80EC97C429E71);
  *(void *)(v2 - 4) = v6;
  *uint64_t v4 = v7;
  LODWORD(v4) = 1616673103 * (*(_DWORD *)(v2 - 4) ^ 0x7C429E71 ^ v7);
  int v8 = (char *)*(&off_1EF0E5660
               + ((79 * (dword_1E945E348 ^ 0x71 ^ qword_1E945E360)) ^ byte_19EC7A500[byte_19EC72CD0[(79 * (dword_1E945E348 ^ 0x71 ^ qword_1E945E360))] ^ 0x1F])
               - 109)
     - 8;
  (*(void (**)(char *, uint64_t (*)()))&v8[8
                                                   * (*((unsigned char *)off_1EF0E5D58
                                                                       + (*((unsigned __int8 *)off_1EF0E5E08
                                                                          + v4) ^ 0x94u)
                                                                       - 4) ^ v4)
                                                   + 17840])((char *)*(&off_1EF0E5660+ (*((unsigned char *)off_1EF0E5BB8+ (*((unsigned __int8 *)off_1EF0E5688 + v4) ^ 0x5Fu)- 8) ^ v4)+ 117)- 4, sub_19E87FF5C);
  __asm { BRAA            X8, X17 }
}

uint64_t sub_19E8B99C8@<X0>(uint64_t a1@<X0>, char a2@<W3>, unsigned int a3@<W8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,int a40)
{
  unsigned int v44 = *(_DWORD *)(&a28 + ((v42 + v40) & 0xFFFFFFFC) + 72);
  *(unsigned char *)(a1 + (v42 + v40)) = v44 ^ 0xF1;
  *(unsigned char *)(a1 + (v42 + v40 + 1)) = BYTE1(v44) ^ 0x8D;
  *(unsigned char *)(a1 + (v42 + v40 + 2)) = (v44 >> ((v41 - 23) & 0xFB ^ (a2 + 16))) ^ 0xB7;
  *(unsigned char *)(a1 + (v42 + v40 + 3)) = HIBYTE(v44) ^ 0x2C;
  int v45 = v42 + 2136330404 < (a40 - 614947195);
  if (v42 + 2136330404 < a3 != a40 - 614947195 < a3) {
    int v45 = a40 - 614947195 < a3;
  }
  return (*(uint64_t (**)(void))(v43 + 8 * (((8 * v45) | (v45 << 6)) ^ v41)))();
}

void sub_19E8B9A94()
{
}

void sub_19E8B9BA4(_DWORD *a1)
{
  unsigned int v1 = *a1 + 1001500783 * (((a1 | 0x7A806C72) - (a1 & 0x7A806C72)) ^ 0x303493C6);
  uint64_t v2 = (char *)*(&off_1EF0E5660 + (int)(v1 ^ 0x349)) - 8;
  int v3 = (*(uint64_t (**)(char *, void (*)()))&v2[8 * (v1 + 1511)])((char *)*(&off_1EF0E5660 + (int)(v1 - 633)) - 12, sub_19E859360);
  __asm { BRAA            X9, X17 }
}

void sub_19E8B9CA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  *(_DWORD *)(v15 - 108) = v13
                         + 183
                         + 1431787901 * ((((2 * (v15 - 120)) | 0xFBCDD42) - (v15 - 120) - 132017825) ^ 0x2C4EC476);
  *(void *)(v15 - 120) = a1;
  (*(void (**)(uint64_t))(v14 + 8 * (v13 + 1685)))(v15 - 120);
  *(_DWORD *)(v15 - 108) = v13 + 183 + 1431787901 * ((v15 - 619247200 - 2 * ((v15 - 120) & 0xDB170A18)) ^ 0xF087A0CF);
  *(void *)(v15 - 120) = a12;
  (*(void (**)(uint64_t))(v14 + 8 * (v13 ^ 0xBFB)))(v15 - 120);
  *(void *)(v15 - 112) = a12;
  *(void *)(v15 - 104) = v12;
  *(_DWORD *)(v15 - 120) = v13
                         + 1305237457 * ((((v15 - 120) | 0x80893321) - ((v15 - 120) & 0x80893321)) ^ 0x393095EF)
                         + 637;
  (*(void (**)(uint64_t))(v14 + 8 * (v13 ^ 0xB99)))(v15 - 120);
  JUMPOUT(0x19E8B9E14);
}

uint64_t sub_19E8B9E50()
{
  return (*(uint64_t (**)(void))(v1
                              + 8
                              * (int)(((**(void **)(v2 + 8 * (int)((v0 & 0x9AB273F3) - 198)) == 0)
                                     * (((6 * (v0 & 0x9AB273F3 ^ 0xD5)) ^ 0x399) + 1059)) ^ v0 & 0x9AB273F3)))();
}

uint64_t sub_19E8B9E9C@<X0>(int a1@<W3>, int a2@<W8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14)
{
  BOOL v17 = a2 == ((a14 + 852235388) ^ (v16 - 465));
  return (*(uint64_t (**)(void))(v14
                              + 8
                              * ((((v17 ^ 0x7B) + 2 * v17 != 123) * (a14 & 0x32CC1354 ^ 0x1F6)) ^ (v15 + a1 + 1089))))();
}

void sub_19E8B9F0C(int a1@<W8>)
{
  int v7 = v1 - 486464888 + (v1 - 486464888) * (a1 + v3 - (*(_DWORD *)(*v5 + 4 * (a1 + v3)) == v2));
  *uint64_t v6 = (v7 ^ 0xEFBBB3FF) + 536731511 + ((v7 << ((v4 - 111) ^ 0x55)) & 0xDF7767FE);
}

uint64_t sub_19E8B9F70()
{
  int v3 = 24 * (v0 ^ 0x384);
  (*(void (**)(void))(v1 + 8 * (v0 + 1327)))();
  *(void *)(*(void *)v2 + 32) = 0;
  return (*(uint64_t (**)(void))(v1
                              + 8
                              * (((*(void *)(*(void *)v2 + 40) != 0)
                                * ((v3 ^ 0x11) + ((v3 - 1561661427) & 0x5D150FE7) - 1966)) ^ v3)))();
}

void sub_19E8BA004()
{
}

uint64_t sub_19E8BA00C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _DWORD *a9, uint64_t a10, int a11)
{
  unsigned int v15 = (a11 << (((v13 - 96) | 0x11) ^ 0x3E)) - ((a11 << 6) & 0xD8B7B780) - 329524259;
  int v16 = 653146051 * ((((v14 - 128) | 0x9DED805D) - ((v14 - 128) & 0x9DED805D)) ^ 0x37F935BF);
  *(void *)(v14 - 120) = v12;
  *(_DWORD *)(v14 - 128) = v16 + v13 - 10;
  *(_DWORD *)(v14 - 124) = v16 + (v15 ^ 0xD7854600) - 421003464 + ((2 * v15) & 0x77BD3B80 ^ 0x50B53380);
  uint64_t v17 = (*(uint64_t (**)(uint64_t))(v11 + 8 * (v13 ^ 0xCFA)))(v14 - 128);
  return (*(uint64_t (**)(uint64_t))(v11 + 8
                                                  * ((1013 * ((*a9 - 263820151) < 0x7FFFFFFF)) ^ v13)))(v17);
}

uint64_t sub_19E8BA120()
{
  *int v3 = v3[623];
  return (*(uint64_t (**)(void))(v1
                              + 8
                              * ((1611
                                * (v2 + ((v0 + 258) ^ 0x33A) - 163 == ((v0 + 1880259978) | 0x8A090EC2) + 1720542464)) ^ (v0 + 258))))();
}

uint64_t sub_19E8BA188@<X0>(uint64_t a1@<X0>, char a2@<W2>, int a3@<W3>, int a4@<W4>, int a5@<W8>)
{
  *(unsigned char *)(*(void *)(a1 + 8) + (a4 - 761127544)) = (v7 + 78) ^ ((a3 ^ v6) >> (a2 - 48)) ^ 0x66;
  return (*(uint64_t (**)(void))(v5 + 8 * ((2603 * (a4 - 1 == ((v7 + 601) | 0x40) + a5)) ^ v7)))();
}

uint64_t sub_19E8BA1F4@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, int a3@<W4>, uint64_t a4@<X8>, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,unsigned int a55,int a56,unsigned int a57,uint64_t a58,uint64_t a59)
{
  int v303 = a3 ^ 0xFE5;
  uint64_t v63 = a4 & 0x4B601102F9321BD5;
  unint64_t v64 = (((5 * (a3 ^ 0x629u)) ^ 0xB49FEEFD06CDE30BLL) & a4 ^ 0x9086A8340448E428)
      - ((2 * (((5 * (a3 ^ 0x629u)) ^ 0xB49FEEFD06CDE30BLL) & a4 ^ 0x9086A8340448E428)) & 0x603C80D80D9B4814)
      - 0x46A1AF9311124926;
  uint64_t v65 = v59 ^ 0x4E9A6CDC1F92A16ELL;
  uint64_t v66 = v59 ^ 0x4E9A6CDC1F92A16ELL ^ v61;
  unint64_t v67 = (a47 ^ ((a49 ^ v63)
              + (v63 ^ 0x4160100010100001)
              + 1
              - ((2 * ((a49 ^ v63) + (v63 ^ 0x4160100010100001) + 1)) & 0xA27ED30C0427D3DCLL)
              + 0x513F69860213E9EELL))
      + (v63 ^ 0x4160100010100001);
  unint64_t v68 = v67 ^ 0xB2FFFCFFEEBFD7FFLL;
  uint64_t v69 = (2 * v67) & 0x65FFF9FFDD7FAFFELL;
  uint64_t v70 = v60 ^ 0x4488331B97246779;
  uint64_t v71 = a45 ^ ((v64 & 0x18E0E85D4AD8D6 ^ 0x86082014A0880)
             + ((44 * (a3 ^ 0x74Fu)) ^ 0x1011956C5CA5F2BBLL ^ v64)
             - (((44 * (a3 ^ 0x74Fu)) ^ 0x1011956C5CA5F2BBLL ^ v64) & 0x918E0E81D4AD8D7)) | (v68
                                                                                             + 0x4D00030011402801
                                                                                             + v69);
  unint64_t v72 = (v71 - ((2 * v71) & 0xADA5BDAB88952A6CLL) - 0x292D212A3BB56ACALL) ^ a50;
  unint64_t v73 = v72 ^ v62;
  uint64_t v74 = v60 ^ 0x4488331B97246779 ^ v65;
  unint64_t v75 = (((v72 ^ v62 ^ 0xCC4E1A0CA37FF316) & (v72 ^ 0x452870748971A841))
       + 0x7BE3D3A792124CLL
       + (~(2 * ((v72 ^ v62 ^ 0xCC4E1A0CA37FF316) & (v72 ^ 0x452870748971A841))) | 0xFF083858B0DBDB67)
       + 1) ^ 0x7BE3D3A792124CLL;
  uint64_t v76 = v66 ^ 0x116780AD4A7D6E58;
  uint64_t v77 = (v75 & (v66 ^ 0x116780AD4A7D6E58)) - ((2 * (v75 & (v66 ^ 0x116780AD4A7D6E58))) & 0x767C768E67EC6B72);
  uint64_t v78 = ((v74 ^ 0x5F6E2B743DE890B7) & (v60 ^ 0x55B06C5BFE43DDDELL))
      - ((2 * ((v74 ^ 0x5F6E2B743DE890B7) & (v60 ^ 0x55B06C5BFE43DDDELL))) & 0x57F7B2896CA9C2C4)
      + 0x2BFBD944B654E162;
  unint64_t v79 = (v66 ^ ((v66 ^ 0x116780AD4A7D6E58)
              + 0x6FC7FEF6CE991646
              + (~(2 * (v66 ^ 0x116780AD4A7D6E58) - 0x1576F60EB9D152DCLL) | 0xAF90C03A8FC8099)) ^ ((v66 ^ 0x64230455E96A38C9) - ((2 * (v66 ^ 0x64230455E96A38C9) + 2) & 0xB344321B666E990ELL) + 0x59A2190DB3374C88) ^ 0x38FD9B598E233402)
      + 0x754484F8A3175691;
  uint64_t v80 = 2 * v77 - 0x98389719813948ELL;
  uint64_t v81 = v80 ^ 0x3266DF0677EC2971;
  unint64_t v82 = (2 * v80) & 0x77CAACEFDFFF7BF8 ^ 0x9B3753F33027AD1FLL;
  unint64_t v83 = (v72 ^ 0xBAD78F8B768E57BELL) & ((v79 ^ 0xF1FAF9DF7C7F7BFFLL)
                                      + 0xE05062083808401
                                      + ((2 * v79) & 0xE3F5F3BEF8FEF7FELL));
  unint64_t v84 = (v83 - ((2 * v83) & 0x31BE4BCFA2918E64) + 0x18DF25E7D148C732) ^ v74;
  unint64_t v85 = ((2 * (v75 + v76)) & 0xEFFBD7FD5F0F94BCLL) + ((v75 + v76) ^ 0x77FDEBFEAF87CA5ELL) + v81 + v82;
  uint64_t v86 = v85 - 2 * ((v85 + 0x43E76A794077F3A0) & 0x79E8FAA8373D3F37 ^ v85 & 3) - 0x422F9ADE884ACD2CLL;
  unint64_t v87 = (((v72 ^ v62 ^ 0x33B1E5F35C800CE9) & (v60 ^ 0xAA4F93A401BC2221))
       - ((2 * ((v72 ^ v62 ^ 0x33B1E5F35C800CE9) & (v60 ^ 0xAA4F93A401BC2221))) & 0x7205168C1285EB88)
       - 0x46FD74B9F6BD0A3CLL) ^ v72 ^ v86;
  unint64_t v88 = (((v74 ^ 0xA091D48BC2176F48) & v76)
       - ((2 * ((v74 ^ 0xA091D48BC2176F48) & v76)) & 0xF9FC281FCDAFDECLL)
       + 0x7CFE140FE6D7EF6) ^ v70;
  unint64_t v89 = v86 ^ v84;
  unint64_t v90 = v73 ^ v78;
  *((void *)&v91 + 1) = v87 ^ 0xF951FB;
  *(void *)&long long v91 = v87 ^ 0x70830619C0000000;
  unint64_t v92 = (~(v87 >> 60) & 2) + ((v87 >> 61) ^ 0xCFFEF96FF7E9DFFALL);
  unint64_t v93 = v88 ^ v73 ^ v78;
  uint64_t v94 = v92 - ((2 * v92 + 0x60020D20102C413ALL) & 0x7222FA555C2F3D48) - 0x16ED7C4549D240BFLL;
  unint64_t v95 = (((v87 << 37) ^ 0x1F2A3F6000000000)
       - 0x75502E3552A6762FLL
       - ((2 * ((v87 << 37) ^ 0x1F2A3F6000000000)) & 0x155FA38000000000)) ^ 0x8AAFD1CAAD5989D1 | (v87 >> 27) & 0x3FFFFFFFFLL ^ 0x21060C338;
  unint64_t v96 = ((v89 << 36) ^ 0x85D3947000000000) - ((2 * ((v89 << 36) ^ 0x85D3947000000000)) & 0x79DDA4000000000);
  unint64_t v97 = ((v89 << 45) ^ 0xA728E00000000000) - ((2 * ((v89 << 45) ^ 0xA728E00000000000)) & 0xE5EC800000000000);
  unint64_t v98 = v89 ^ (v89 >> 19);
  unint64_t v99 = ((((((v89 << 35) ^ 0x42E9CA3800000000)
          - ((2 * ((v89 << 35) ^ 0x42E9CA3800000000)) & 0x2BB562F000000000)
          - 0x6A254E802AB309AFLL) & 0x8000000000000000 ^ 0x9671AAC09CACBBF3)
        - 1) & 0x8000000000000000 | (v89 >> 29)) ^ 0x58B0A5E67;
  uint64_t v100 = (v95 - ((2 * v95) & 0x4985B26CA4A60ED6) - 0x5B3D26C9ADACF895) ^ ((v91 >> 30)
                                                                            - ((2 * (v91 >> 30)) & 0x8C92A39EDB4EDCB6)
                                                                            - 0x39B6AE30925891A5);
  *((void *)&v91 + 1) = v98;
  *(void *)&long long v91 = v98 ^ 0xB1615DE0C124A44CLL;
  uint64_t v101 = (v99 - ((2 * v99) & 0x2CA7790E8) - 0x6557926E9AC4378CLL) ^ ((v91 >> 1)
                                                                     - ((2 * (v91 >> 1)) & 0x2A0FC1F78780B060)
                                                                     - 0x6AF81F043C3FA7D0);
  *((void *)&v91 + 1) = v101 ^ 0xFAF8D6AA6FB9044;
  *(void *)&long long v91 = v101;
  uint64_t v102 = (v91 >> 63) - ((2 * (v91 >> 63)) & 0x1DA44103BBC4DBCLL);
  *((void *)&v91 + 1) = v100 ^ 0x2EAD518E1;
  *(void *)&long long v91 = v100 ^ 0x18EF331000000000;
  uint64_t v103 = (v91 >> 34) - ((2 * (v91 >> 34)) & 0x3E1856DBC16C5D62);
  int v104 = *(unsigned __int8 *)(a51 + (v94 ^ 0xB9117D2AAE179EA8))
       + (~(2 * *(unsigned __int8 *)(a51 + (v94 ^ 0xB9117D2AAE179EA8)) + 30) | 0x7F)
       + 80;
  *((void *)&v91 + 1) = v73 ^ v78 ^ 0x15C348152B1274;
  *(void *)&long long v91 = v73 ^ v78 ^ 0xE7A0000000000000;
  uint64_t v105 = (v91 >> 53) - ((2 * (v91 >> 53)) & 0xDB1ECD8DF1A17C46) - 0x12709939072F41DDLL;
  *((void *)&v91 + 1) = v105 ^ 0x2B5;
  *(void *)&long long v91 = v105 ^ 0x9384712C715AA000;
  LOBYTE(v94) = ((((v104 & 0x48 | 0xB4) - (v104 & 0xA0 | 0x4A) + 75) ^ 0x7C) - 1) ^ (((v104 >> 2) | 0x14)
                                                                                   + 60) & 0x28 | ~((v104 >> 2) ^ v104) & 0x10;
  unsigned int v106 = ((v94 ^ 0x88) - ((2 * (_BYTE)v94) & 0x6A) + 53) & 0xF8;
  unint64_t v107 = ((unint64_t)(v91 >> 11)
        - ((2 * (unint64_t)(v91 >> 11)) & 0x50DD04C6A815F518)
        + 0x286E8263540AFA8CLL) >> 1;
  uint64_t v108 = (v107 & 0x200000000000000 ^ 0x2F7F7CD9D3F5FBD9) + 2 * (v107 & 0x200000000000000);
  unint64_t v109 = (((2 * (v107 & 0xFDFFFFFFFFFFFFFFLL ^ 0x4C9902E8B2D46A7ALL)) & 0x72D6413237AB13BCLL)
        - (v107 & 0xFDFFFFFFFFFFFFFFLL ^ 0x4C9902E8B2D46A7ALL)
        + 0x4694DF66E42A7621) ^ 0x1E149CEFF46B742DLL;
  unint64_t v110 = ((2 * v109) | 0x800E27507BA40BF0) - v109 + 0x3FF8EC57C22DFA08;
  if (((v108 - 0x2F7F7CD9D3F5FBD9) & (v90 ^ 0x7400000000000000))
     + 0x741223A0566D860BLL
     - ((2 * ((v108 - 0x2F7F7CD9D3F5FBD9) & (v90 ^ 0x7400000000000000))) & 0xE800000000000000) == 0x741223A0566D860BLL)
    uint64_t v111 = v108 - 0xE40544850300990;
  else {
    uint64_t v111 = 0x50BEA56B57BBEE22 - v108;
  }
  unint64_t v112 = ((2 * ((v90 ^ 0x757A022AE87A2337) - 0x213F289183C5F249 + v111)) & 0xE1FCFF9EA5FDF7EELL)
       + (((v90 ^ 0x757A022AE87A2337) - 0x213F289183C5F249 + v111) ^ 0x70FE7FCF52FEFBF7);
  char v113 = v107 & 0x29;
  char v114 = ((v107 & 0x29 ^ 0x21) - ((2 * (v107 & 0x29 ^ 0x21)) & 0x42) - 93) ^ 2;
  uint64_t v115 = ((v104 ^ (v106 >> 3)) ^ 0x46u) - ((2 * (v104 ^ (v106 >> 3) ^ 0x46)) & 0x1BALL);
  unint64_t v116 = v112 - 0x70FE7FCF52FEFBF7;
  unint64_t v117 = ((((v112 - 0x70FE7FCF52FEFBF7) ^ v110 ^ 0xC02913F8354210C8)
         - 2
         * (((v112 - 0x70FE7FCF52FEFBF7) ^ v110 ^ 0xC02913F8354210C8) & 0x5731BA9B3C19A37FLL ^ ((v112 - 0x70FE7FCF52FEFBF7) ^ v110) & 0x10)
         - 0x28CE4564C3E65C91) ^ 0x28CE4564C3E65C90)
       + v112;
  unint64_t v118 = ((((v93 ^ 0xBF226083564B4E0DLL) >> (v73 & 0x11 ^ 1))
         - 0x37A19709E397D0C4
         - ((2 * ((v93 ^ 0xBF226083564B4E0DLL) >> (v73 & 0x11 ^ 1))) & 0x90BCD1EC38D05E78)) ^ 0xC85E68F61C682F3CLL) >> (v73 & 0x11 ^ 0x10);
  unint64_t v119 = (v110 ^ ((v110 ^ 0x3FD6EC07CABDEF37)
                - ((2 * (v110 ^ 0x3FD6EC07CABDEF37) + 2) & 0xB541051C375200A0)
                + 0x5AA0828E1BA90051) ^ 0x4188EBF9490AD3C3 ^ (v117
                                                                - ((2 * v117 + 0x1E0300615A020814) & 0xB602F51ECFC386B6)
                                                                + 0x6A02FAC014E2C765))
       + v116;
  unint64_t v120 = (v119 - ((2 * v119) & 0x29CF7AA983EAA78ALL) - 0x6B1842AB3E0AAC3BLL) ^ (((v90 << 58) ^ 0xDC00000000000000)
                                                                              - ((2
                                                                                * ((v90 << 58) ^ 0xDC00000000000000)) & 0xDFFFFFFFFFFFFFFFLL)
                                                                              + 0x6E52F496ABBD5760);
  uint64_t v121 = v102 - 0x7F12DDF7E221D922;
  unint64_t v122 = (v115 - 0x79B26878D3DFF723) ^ (v87 >> 39) ^ (((v87 << 25) ^ 0x3381F2A3F6000000)
                                                      - ((2 * ((v87 << 25) ^ 0x3381F2A3F6000000)) & 0x81D14E2744000000)
                                                      + 0x40E8A713A35D03A9) ^ (v103 + 0x1F0C2B6DE0B62EB1);
  unint64_t v123 = v93 ^ (v93 >> 10) ^ (((v93 << 54) ^ 0x8340000000000000)
                            - ((v93 << 55) & 0xD100000000000000)
                            - 0x17461B849BA9FCDCLL) ^ (((v93 << 47) ^ 0xA706800000000000)
                                                     - ((2 * ((v93 << 47) ^ 0xA706800000000000)) & 0x48D8000000000000)
                                                     - 0x5B93E034643E4502) ^ (v118
                                                                              - ((2 * v118) & 0x50D7EBB585D221CALL)
                                                                              + 0x286BF5DAC2E910E5);
  uint64_t v124 = v123 ^ 0x36BCE7D0AEA54597;
  *((void *)&v125 + 1) = v122 ^ 0xD33;
  *(void *)&long long v125 = v122 ^ 0x2CE1478D31B30000;
  uint64_t v126 = (v125 >> 16) - ((2 * (v125 >> 16)) & 0xF5C67166BDFD5B42) + 0x7AE338B35EFEADA1;
  unint64_t v127 = ((((v84 ^ 0xF0882964BCEF9777) >> v113)
         + 0x3D1320AAD1223D39
         + (~(2 * ((v84 ^ 0xF0882964BCEF9777) >> v113)) | 0x85D9BEAA5DBB858DLL)
         + 1) ^ 0x3D1320AAD1223D39) >> ((((2 * v114) | 0xC8) - v114 - 100) ^ 0xCDu);
  unint64_t v128 = (((v127 - ((2 * v127) & 0x2E27B9D8) - 1760305940) & 0x289C3D5D ^ 0xB2E384EF08901D0DLL)
        + ((v127 - ((2 * v127) & 0x2E27B9D8) - 1760305940) & 0xD763C2A2 ^ 0xC642C2A1)
        - 1) ^ 0xBF9848EF69CD1749;
  unint64_t v129 = v84 ^ (v84 >> 7) ^ (((v84 << 57) ^ 0xEE00000000000000)
                           - ((2 * ((v84 << 57) ^ 0xEE00000000000000)) & 0x1400000000000000)
                           + 0xB1276130DA29ED8) ^ (((v84 << 23) ^ 0xB25E77CBBB800000)
                                                   - ((2 * ((v84 << 23) ^ 0xB25E77CBBB800000)) & 0x66AADE5BC3000000)
                                                   + 0x33556F2DE1B2A25ALL) ^ (0x874B634AB486C88CLL
                                                                            - (v128 | 0x874B634AB486C88CLL)
                                                                            + (v128 | 0x78B49CB54B793773));
  *((void *)&v125 + 1) = v126 ^ 0xF055E9B3FC3DLL;
  *(void *)&long long v125 = v126 ^ 0x5141000000000000;
  uint64_t v130 = (v96 + 0x3CEED257396CAA4) ^ (v97 + 0x72F65E878B92B9FDLL) ^ v129 ^ 0xD6B1456D33A8341 ^ v121;
  uint64_t v131 = (v125 >> 48) - ((2 * (v125 >> 48)) & 0x6625DA671477F04CLL) - 0x4CED12CC75C407DALL;
  uint64_t v132 = v129 ^ 0xD6B1456D33A8341 ^ v123 ^ 0x36BCE7D0AEA54597;
  unint64_t v133 = (((unint64_t)~v90 << 63) - 0x60AB5BAF08362EF7) ^ 0x9F54A450F7C9D109;
  unint64_t v134 = ((v120 ^ (v90 >> 6) ^ 0xFB60A1CAC1E9EC29 | v133)
        - ((2 * (v120 ^ (v90 >> 6) ^ 0xFB60A1CAC1E9EC29)) & 0xD32400999AA8DF80)
        + 0x6992004CCD546FC0) ^ ((v133 & ~v120) - 0x5CBFA6BB0725D6D1) ^ v131 ^ 0xF75DA4EBDFC44910;
  unint64_t v135 = ((v131 ^ 0x7BF45A7EDBA7D3EDLL) & (v130 ^ 0xBFA00ABE2BEC7E99))
       - ((2 * ((v131 ^ 0x7BF45A7EDBA7D3EDLL) & (v130 ^ 0xBFA00ABE2BEC7E99))) & 0xF0C9791AFC2D2F9ALL)
       - 0x79B437281E96833;
  unint64_t v136 = ((v130 ^ 0x405FF541D4138166) & (v132 ^ 0xA37ADAB52B731B68))
       - ((2 * ((v130 ^ 0x405FF541D4138166) & (v132 ^ 0xA37ADAB52B731B68))) & 0x3768B98B5B3623CALL)
       - 0x644BA33A5264EE1BLL;
  unint64_t v137 = (((v134 ^ 0x467BA79D31EDDC12) & (v131 ^ 0x840BA58124582C12))
        - ((2 * ((v134 ^ 0x467BA79D31EDDC12) & (v131 ^ 0x840BA58124582C12))) & 0xEDB0638DBB49B47ELL)
        - 0x927CE39225B25C1) ^ v130;
  unint64_t v138 = v135 ^ v132;
  unint64_t v139 = (((v134 ^ 0xB9845862CE1223EDLL) & (v123 ^ 0xDBB3A6714BE075E1))
        - ((2 * ((v134 ^ 0xB9845862CE1223EDLL) & (v123 ^ 0xDBB3A6714BE075E1))) & 0x12E12F0764264076)
        - 0x768F687C4DECDFC5) ^ v131 ^ 0xF75DA4EBDFC44910 ^ v137;
  unint64_t v140 = v134 ^ (((v129 ^ 0xBCE170BDE2F357A0) & (v123 ^ 0x244C598EB41F8A1ELL))
               - ((2 * ((v129 ^ 0xBCE170BDE2F357A0) & (v123 ^ 0x244C598EB41F8A1ELL))) & 0x89DE33BA33AC8A10)
               - 0x3B10E622E629BAF8);
  unint64_t v141 = v137 ^ v138;
  unint64_t v142 = ((v139 >> 61) | 0xECC42BD0ED239D30) ^ v139;
  unint64_t v143 = v136 ^ v124 ^ v140;
  uint64_t v144 = v142 ^ 0x8DD4717B5B1D27ELL;
  unint64_t v145 = ((v139 >> 39) ^ 0xF722B8E84B861F58 ^ v142) + (v142 ^ 0x8DD4717B5B1D27ELL) + 1;
  unint64_t v146 = (v140 & 0xDFF76DB37D61F5BELL ^ 0xCDD1499301605120)
       + ((v140 >> 1) ^ 0x191352367E02D64FLL)
       - 0x6FFBB6D9BEB0FADFLL;
  unint64_t v147 = v146 + (v140 ^ 0xBFAB43CE457AE79 ^ ((v140 << 63) - 0x19D4821C9ACC08A7));
  unint64_t v148 = ((v139 >> 39) ^ (((v139 >> 39) ^ 0xFFFFFFFFFE37CD26)
                        - ((2 * ((v139 >> 39) ^ 0xFFFFFFFFFE37CD26) + 2) & 0x3441444EAADF3F5ELL)
                        - 0x65DF5DD8AA906050) ^ 0xB6AE1D09FC331D4ALL ^ (v145
                                                                        - ((2 * v145) & 0x591D7E5D51296078)
                                                                        + 0x2C8EBF2EA894B03CLL))
       + v144;
  unint64_t v149 = 2
       * ((v146 & (v140 ^ 0xEDD1C9DF81645920)) - ((2 * (v146 & (v140 ^ 0xEDD1C9DF81645920))) & 0x53B0E4D37FDD2004))
       + 0x53B0E4D37FDD2004;
  unint64_t v150 = (v147 ^ 0xE7FD773FBCEF89F3)
       + ((2 * v147) & 0xCFFAEE7F79DF13E6)
       + (v149 ^ 0x67F1E4B3F5DD000DLL)
       + ((2 * v149) & 0x977DFF3EEBFFBFECLL ^ 0x789E36D91445FFF7)
       + 1;
  unint64_t v151 = ((((v141 << 45) ^ 0x9BC000000000000)
         - 0xFB776A6B698C56FLL
         - ((2 * ((v141 << 45) ^ 0x9BC000000000000)) & 0xE091000000000000)) ^ 0xF048895949673A91 | (v141 >> 19) ^ (v141 >> 28)) ^ 0x17C8ABF3BF0BLL;
  unint64_t v152 = (((8 * v139) ^ 0x20CB663AC4927A48)
        - ((2 * ((8 * v139) ^ 0x20CB663AC4927A48)) & 0x92AA164A704B3C00)
        + 0x49550B2538259E07) ^ (((v139 << 25) ^ 0x8EB1249E92000000)
                                 - ((2 * ((v139 << 25) ^ 0x8EB1249E92000000)) & 0xC874AD6028000000)
                                 - 0x1BC5A94FEB0BE4A6) ^ (v148
                                                          - ((2 * v148) & 0xABAEDFC1CBB3615ALL)
                                                          + 0x55D76FE0E5D9B0ADLL);
  unint64_t v153 = (((v138 << 57) ^ 0x3E00000000000000)
        - 0x4A9FB096E4152F55
        - ((2 * ((v138 << 57) ^ 0x3E00000000000000)) & 0x6800000000000000)) ^ 0xB5604F691BEAD0ABLL | (v138 >> 41) ^ 0x1F6CD2;
  unint64_t v154 = ((~(v140 << 59) | 0xD7FFFFFFFFFFFFFFLL) + (v140 << 58) + 0x1527F9818EB78E6FLL) ^ (v140 >> 6) ^ (v150 - ((2 * v150 - 0x387CEF408DDF53F8) & 0x8C7D60CBF743E8D8) + 0x2A0038C5B4B24A70);
  uint64_t v155 = v154 ^ 0x739F24515ED38F35;
  *((void *)&v125 + 1) = v143 ^ 0x3F;
  *(void *)&long long v125 = v143 ^ 0xF6A006BFBDAD6800;
  uint64_t v156 = (v125 >> 10) - ((2 * (v125 >> 10)) & 0xA2B008545492781ELL) - 0x2EA7FBD5D5B6C3F1;
  *((void *)&v125 + 1) = v143 ^ 0x1683F;
  *(void *)&long long v125 = v143 ^ 0xF6A006BFBDAC0000;
  unint64_t v157 = v138 ^ (v138 >> 7) ^ (((v138 << 23) ^ 0x9F958D030F800000)
                             - ((2 * ((v138 << 23) ^ 0x9F958D030F800000)) & 0xDB2BAB539E000000)
                             + 0x6D95D5A9CF6D900CLL) ^ (v153 - ((2 * v153) & 0x32306E40EE00E2DCLL) + 0x191837207700716ELL);
  unint64_t v158 = v152 ^ v154;
  unint64_t v159 = v158 ^ 0x8B27162497DBBAC5;
  uint64_t v160 = v156 ^ v143 ^ ((v125 >> 17) - ((2 * (v125 >> 17)) & 0x367092A7924918C4) - 0x64C7B6AC36DB739ELL);
  uint64_t v161 = v160 ^ 0x172A4290B85821DCLL;
  unint64_t v162 = (((v141 << 36) ^ 0x2084DE0000000000)
        - ((2 * ((v141 << 36) ^ 0x2084DE0000000000)) & 0x6647D0A000000000)
        + 0x3323E85D2CB3D173) ^ v141 ^ v157 ^ 0xB9C270BDBAE429ELL ^ (v151
                                                                     - ((2 * v151) & 0x9BE331BB83CC791CLL)
                                                                     + 0x4DF198DDC1E63C8ELL);
  if ((v160 ^ 0x172A4290B85821DCLL) == 0xABEA0956E698F98ELL) {
    unint64_t v163 = v158 ^ 0x8B27162497DBBAC5;
  }
  else {
    unint64_t v163 = v155;
  }
  uint64_t v164 = v157 ^ 0xB9C270BDBAE429ELL ^ v161;
  unint64_t v165 = v162 ^ 0x817DF1C379D231F2;
  unint64_t v166 = (((v163 ^ 0xA3312A9255C06453) & (v152 ^ 0x747CD8A36F7CA0FLL))
        - 0x62F67B06CDCEDCC7
        - ((2 * ((v163 ^ 0xA3312A9255C06453) & (v152 ^ 0x747CD8A36F7CA0FLL))) & 0x3A1309F264624672)) ^ 0x9D0984F932312339;
  unint64_t v167 = v166 + (v162 ^ 0x817DF1C379D231F2);
  unint64_t v168 = 2
       * ((v166 & (v162 ^ 0x817DF1C379D231F2)) - ((2 * (v166 & (v162 ^ 0x817DF1C379D231F2))) & 0x628B27436873D33ALL))
       + 0x628B27436873D33ALL;
  unint64_t v169 = ((v152 ^ 0xF8B83275C90835F0) & (v162 ^ 0x7E820E3C862DCE0DLL))
       - ((2 * ((v152 ^ 0xF8B83275C90835F0) & (v162 ^ 0x7E820E3C862DCE0DLL))) & 0x8AE1BC0C10DECBEELL)
       + 0x4570DE06086F65F7;
  unint64_t v170 = (((v158 ^ 0xD7E9C3493DE42169) & (v160 ^ 0xBCC04BC65EC0D852))
        - ((2 * ((v158 ^ 0xD7E9C3493DE42169) & (v160 ^ 0xBCC04BC65EC0D852))) & 0xC9F3FA61145EAFF6)
        - 0x1B0602CF75D0A805) ^ v152;
  unint64_t v171 = ((2 * v167) & 0x7FF9EF5FEFAF7F9ELL)
       + (v167 ^ 0x3FFCF7AFF7D7BFCFLL)
       + (v168 ^ 0xC089A50338738F59)
       + ((2 * v168) & 0xBBFAFB7F5FFF4738 ^ 0x7EEDB5F9AF18F9CFLL);
  uint64_t v172 = v171 - ((2 * v171 + 0x3C010C1F704FC79ELL) & 0x4EA3B887079688B0) - 0x3AAD9DACC40CD7D9;
  unint64_t v173 = v159 ^ (((v157 ^ 0x4A29F4FCED21D371) & (v160 ^ 0x433FB439A13F27ADLL))
               - ((2 * ((v157 ^ 0x4A29F4FCED21D371) & (v160 ^ 0x433FB439A13F27ADLL))) & 0xABBDC9506E7E15B8)
               + 0x55DEE4A8373F0ADCLL);
  unint64_t v174 = v169 ^ v164;
  uint64_t v175 = (v165 & (v164 ^ 0x15A0255E2FE8979ELL))
       + 0x543861B333931865
       + (~(2 * (v165 & (v164 ^ 0x15A0255E2FE8979ELL))) | 0x578F3C9998D9CF37);
  uint64_t v176 = 0x441AC6C87 - (v174 | 0x7FFFFFFFFLL);
  uint64_t v177 = ((v176 & 0x800000000 ^ 0x800000000) & ~v172)
       - 0x403807E50D682BDALL
       - 2 * ((v176 & 0x800000000 ^ 0x800000000) & ~v172);
  unint64_t v178 = ((2 * (v174 & 0xFFFFFFF7FFFFFFFFLL ^ 0x9067F75CA1028FBLL)) | 0xE1539E90ED1C3720)
       - (v174 & 0xFFFFFFF7FFFFFFFFLL ^ 0x9067F75CA1028FBLL)
       - 0x70A9CF48768E1B90;
  unint64_t v179 = (v178 & 0x809805088473646FLL ^ 0x801801008071446BLL) + (v178 & 0x7F67FAF77B8C9B90 ^ 0x5420CA50628C1B91) - 1;
  uint64_t v180 = v176 & 0x800000000 ^ 0x67BE5638F2962203 ^ v172;
  unint64_t v181 = v170 ^ v172;
  unint64_t v182 = v170 ^ v172 ^ 0xDCCD7EF2EC92302ELL;
  unint64_t v183 = (v176 | 0xFFFFFFF7FFFFFFFFLL)
       + (v172 ^ 0xC9551D1A9660C252)
       + 1
       - 2
       * (((v176 | 0xFFFFFFF7FFFFFFFFLL) + (v172 ^ 0xC9551D1A9660C252) + 1) & 0x2EEB4B2A64F6E05BLL ^ (v172 ^ 0xC9551D1A9660C252) & 0xA)
       - 0x5114B4D59B091FAFLL;
  if (v177 == 0xBFC7F81AF297D426) {
    unint64_t v183 = v180;
  }
  unint64_t v184 = v183 ^ v179;
  unint64_t v185 = v175 ^ v161 ^ v173;
  unint64_t v186 = v173 ^ (v173 >> 1);
  unint64_t v187 = (((v184 << 45) ^ 0xB02AE00000000000)
        + 0x2981A74BFAB61EB9
        - ((2 * ((v184 << 45) ^ 0xB02AE00000000000)) & 0x5303400000000000)) ^ 0x2981A74BFAB61EB9 | ((v183 ^ v179) >> 28) ^ (v184 >> 19);
  uint64_t v188 = (v187 ^ 0x1580A3AF5253) - 2 * ((v187 ^ 0x1580A3AF5253) & 0x47320D499EF0EED5 ^ v187 & 4);
  unint64_t v189 = ((((v174 ^ 0x89B84FBF88662682) - 1) ^ 0x7FA7DEFC6DFFEE7ELL)
        - 0x7FA7DEFC6DFFEE7ELL
        + ((2 * ((v174 ^ 0x89B84FBF88662682) - 1)) & 0xFF4FBDF8DBFFDCFCLL)) & (v174 ^ 0x50D0FB582787F269);
  unint64_t v190 = v186 ^ 0xC86736BD386C3DC2;
  unint64_t v191 = (v186 ^ 0xC86736BD386C3DC2) + ((v173 >> 6) ^ 0x35A621D19F2D1D67 ^ v186) + 1;
  unint64_t v192 = v191 - ((2 * v191) & 0x899686257089F478);
  if ((uint64_t)((v189 ^ 0xF35FF77DFBFFEFF4) - 0x735FF77DFBFFEFF4 + ((2 * v189) & 0xE6BFEEFBF7FFDFE8)) < 0) {
    unint64_t v193 = v174 ^ 0xF0F38F252BF2B112;
  }
  else {
    unint64_t v193 = 0x794BC09AA3949790;
  }
  unint64_t v194 = v182 ^ (v181 >> 39) ^ ((v182 >> 61) | 0xF23F7A42F48992F8) ^ (((8 * v181) ^ 0x4B4759F1F57FA778)
                                                                      - ((2 * ((8 * v181) ^ 0x4B4759F1F57FA778)) & 0x494A3BF65C7E1220)
                                                                      - 0x5B5AE204D1C0F6F0) ^ (((v181 << 25) ^ 0x7C7D5FE9DE000000)
                                                                                               - ((2
                                                                                                 * ((v181 << 25) ^ 0x7C7D5FE9DE000000)) & 0x26A9A852E8000000)
                                                                                               - 0x6CAB2BD68B2196D9);
  unint64_t v195 = ((v173 >> 6) ^ (((v173 >> 6) ^ 0xFDC1176CA74120A5)
                       - ((2 * ((v173 >> 6) ^ 0xFDC1176CA74120A5) + 2) & 0x8F721E7895EB091CLL)
                       + 0x47B90F3C4AF5848FLL) ^ 0x14CA4BDAA0FA1E8 ^ (v192 + 0x44CB4312B844FA3CLL))
       + v190;
  unint64_t v196 = v194 ^ 0xDE89B1CA205EF1DBLL ^ (v195 - ((2 * v195) & 0xF4EF1C0D73C77E22) - 0x58871F9461C40EFLL);
  unint64_t v197 = (((2 * (v196 & 0xA5CF65A75C432E65 ^ 0x840E21041C410001)) & 0x2800E08020482)
        - (v196 & 0xA5CF65A75C432E65 ^ 0x840E21041C410001)
        - 0x4211DA17879502DALL) ^ 0x95FE2DE801C97DA4;
  unint64_t v198 = ((v173 << 58) ^ 0xC00000000000000) - ((2 * ((v173 << 58) ^ 0xC00000000000000)) & 0xEFFFFFFFFFFFFFFFLL);
  uint64_t v199 = (((2 * (v196 & 0x5A309A58A3BCD19ALL ^ 0x4A301A58032C8082)) | 0x78F97EA83C7B25ACLL)
        - (v196 & 0x5A309A58A3BCD19ALL ^ 0x4A301A58032C8082)
        - 0x3C7CBF541E3D92D6) ^ 0x3836BF3B9DBF91E4;
  unint64_t v200 = ((2 * (v174 & 0xF7FFFFFFFFFFFFFFLL ^ 0x9273A1765FC0D6BDLL)) & 0xCD4CBC3F45DDB1CCLL)
       - (v174 & 0xF7FFFFFFFFFFFFFFLL ^ 0x9273A1765FC0D6BDLL)
       + 0x1959A1E05D112719;
  unint64_t v201 = (v199 - ((2 * v199) & 0x950B6D148EBA34CCLL) - 0x357A4975B8A2E599) ^ 0x94EFB4AD674B18C7 | (v197 - ((2 * v197) & 0x19600AD711D01272) + 0xEB0076B8AF80939) ^ (((unint64_t)~v173 << 63) | 0x62B2FEFAB58A1BALL);
  unint64_t v202 = v185 ^ (v185 >> 17) ^ (v185 >> 10) ^ (((v185 << 47) ^ 0x2229800000000000)
                                             - ((2 * ((v185 << 47) ^ 0x2229800000000000)) & 0xC30B000000000000)
                                             - 0x1E7A7FACDDFE93EFLL) ^ (((v185 << 54) ^ 0x14C0000000000000)
                                                                      - ((2 * ((v185 << 54) ^ 0x14C0000000000000)) & 0xBD80000000000000)
                                                                      + 0x5EEFE0FAD4224CF3);
  unint64_t v203 = (v201 - ((2 * v201) & 0x8277E2DBEA3CA89CLL) + 0x413BF16DF51E544ELL) ^ (v198 - 0xB37806C1B6EC1ECLL);
  unint64_t v204 = ((v200 & 0xF6E7CFE1493C69A0 ^ 0xE6E68E40412C4881) + (v200 & 0x918301EB6C3965FLL) - 1) ^ (v174 >> 7) ^ (((v193 << 57) ^ 0x2000000000000000) - ((v193 & 0xF) << 58) - 0x60A75C546FAEF5A5) ^ (((v193 << 23) ^ 0x4D51CA4BC8000000) - ((2 * ((v193 << 23) ^ 0x4D51CA4BC8000000)) & 0x9018017E22000000) + 0x480C00BF11279521) ^ (((v174 & 0x800000000000000 | (v193 >> 41)) ^ 0x8000000003CA5E0) - ((2 * ((v193 >> 41) ^ 0x3CA5E0)) & 0x5C6794) - 0x6A04A0BA5551CC36) ^ 0x159A13BC9C75708DLL;
  unint64_t v205 = v204 ^ v202 ^ 0xF263690F5790ADDDLL;
  unint64_t v206 = v184 ^ v204 ^ (((v184 << 36) ^ 0x2ED8157000000000)
                      - ((2 * ((v184 << 36) ^ 0x2ED8157000000000)) & 0xE795C1A000000000)
                      + 0x73CAE0DA74F9E68CLL) ^ (v188 - 0x38CDF2B6610F112FLL);
  unint64_t v207 = ((v203 ^ 0x4A0C7101EE7095A5) & (v202 ^ 0xC539C47A39456642))
       - ((2 * ((v203 ^ 0x4A0C7101EE7095A5) & (v202 ^ 0xC539C47A39456642))) & 0x3CED1AA15EF0FA8ALL)
       - 0x618972AF508782BBLL;
  unint64_t v208 = v203 ^ (((v205 ^ 0x8D08F36E6DF34449) & (v202 ^ 0x3AC63B85C6BA99BDLL))
               - ((2 * ((v205 ^ 0x8D08F36E6DF34449) & (v202 ^ 0x3AC63B85C6BA99BDLL))) & 0xC94F56075B5BD2E6)
               - 0x1B5854FC5252168DLL);
  unint64_t v209 = v208 ^ v202 ^ 0xF263690F5790ADDDLL ^ (((v206 ^ 0xA2F987680BC206DCLL) & (v205 ^ 0x72F70C91920CBBB6))
                                             - ((2 * ((v206 ^ 0xA2F987680BC206DCLL) & (v205 ^ 0x72F70C91920CBBB6))) & 0xFEA1852F0AB0A022)
                                             + 0x7F50C29785585011);
  unint64_t v210 = v206 ^ 0x6989AB2E995F7759 ^ (((v203 ^ 0xB5F38EFE118F6A5ALL) & (v194 ^ 0x6F94D9A382B81825))
                                      - ((2 * ((v203 ^ 0xB5F38EFE118F6A5ALL) & (v194 ^ 0x6F94D9A382B81825))) & 0xEF915A38BF521B96)
                                      - 0x83752E3A056F235);
  unint64_t v211 = (((v206 ^ 0x5D067897F43DF923) & (v194 ^ 0x906B265C7D47E7DALL))
        - ((2 * ((v206 ^ 0x5D067897F43DF923) & (v194 ^ 0x906B265C7D47E7DALL))) & 0xE013FC3761D3D470)
        - 0xFF601E44F1615C8) ^ v205;
  unint64_t v212 = v210 ^ v211;
  unint64_t v213 = v207 ^ v194 ^ 0xDE89B1CA205EF1DBLL ^ v210;
  unint64_t v214 = ((2 * (v210 ^ v211)) ^ 0x8373185E205DA47ELL)
       - ((2 * ((2 * (v210 ^ v211)) ^ 0x8373185E205DA47ELL)) & 0x1DF466EC16BB1FCLL)
       + 0x60EFA33760B5D8FELL;
  unint64_t v215 = (((v212 ^ 0x41B98C2F102ED23FLL) - 0x6809581A09170A76) ^ 0x26EF31DD9FFFD7D9)
       + ((2 * ((v212 ^ 0x41B98C2F102ED23FLL) - 0x6809581A09170A76)) & 0x4DDE63BB3FFFAFB2)
       + (v214 & 0x2FED4FCBEDD1EB14 ^ 0xA05D0F13629BC8E5)
       + ((2 * v214) & 0x5E9A8797DBA3D608 ^ 0xBF65F9F93EDC6FF7)
       + 1;
  unint64_t v216 = v215 - ((2 * v215 - 0x4F3E7BDB4413B194) & 0xCC44C863B83E4440) - 0x417CD9BBC5EAB6AALL;
  *((void *)&v217 + 1) = v213 ^ 0xE7BFF276722CD2FLL;
  *(void *)&long long v217 = v213 ^ 0xBFFFFFFFFFFFFFFFLL;
  uint64_t v218 = ((v208 << 58) ^ 0x4C00000000000000)
       - ((2 * ((v208 << 58) ^ 0x4C00000000000000)) & 0x5800000000000000)
       - 0x50490C4E0518B665;
  unint64_t v219 = (v208 & 0xBA3EF89C1F742FBFLL ^ 0x3200781002400F99)
       - ((2 * (v208 & 0xBA3EF89C1F742FBFLL ^ 0x3200781002400F99)) & 0x5075602004685E44)
       - 0x17444BEFBDC1409ELL;
  uint64_t v220 = (v211 ^ 0x7D010D75DD1AAE71)
       - ((2 * (v211 ^ 0x7D010D75DD1AAE71) + 0x3E00E9B905B84E78) & 0x263F64D5BF7AE58ALL)
       - 0x6DDFD8B89D6665FFLL;
  uint64_t v221 = v213 ^ (v213 >> 39) ^ (((v213 << 25) ^ 0x4ECE459A5E000000)
                              - ((2 * ((v213 << 25) ^ 0x4ECE459A5E000000)) & 0xE7413FA794000000)
                              + 0x73A09FD3CBE12354) ^ ((v217 >> 61)
                                                       - ((2 * (v217 >> 61)) & 0x99E8E30FDD795AF6)
                                                       + 0x4CF47187EEBCAD7BLL);
  unint64_t v222 = ((v219 & 0xD2F9B9D0696A26F3 ^ 0x60809C061480091)
        + (v219 ^ 0xF8F5F41C8C22EF62)
        - ((v219 ^ 0xF8F5F41C8C22EF62) & 0xD2F9B9D0696826F3)) ^ 0xE7FF6742B5AA4DBFLL ^ ((((v218 & 0x2000000000000000 | ~v218 & 0xB800000000000000 | 0x38A686961A09DA9)
                                                                                            - (~v218 & 0x2000000000000000)) ^ 0x2382F17C63A49A91)
                                                                                          - 0x7EC1BB12F57BD372) | ((v208 & 0x45C10763E08BD040 ^ 0xC00112C2892C20) + (v208 & 0x4C1070120099040 ^ 0x161DFE0D2C7093D6) - ((v208 & 0x45C10763E08BD040 ^ 0xC00112C2892C20) & 0x4C107112009BC40)) ^ 0x129DFD4D2E7993F6 ^ v218 & 0x4400000000000000;
  uint64_t v223 = v222 - ((2 * v222) & 0x48189A27309C5732) - 0x5BF3B2EC67B1D467;
  unint64_t v224 = (((v216 << 45) ^ 0xE444000000000000)
        + 0x1FE21A8800ED3C77
        - ((2 * ((v216 << 45) ^ 0xE444000000000000)) & 0x3FC4000000000000)) ^ 0x1FE21A8800ED3C77 | (v216 >> 28) ^ 0x66226431DLL;
  uint64_t v225 = v224 - ((2 * v224) & 0x4FA6B6489FB1A310) - 0x582CA4DBB0272E78;
  unint64_t v226 = (v221 ^ 0x912F11734323B4FELL) + (v221 ^ 0xCADCA39F24926098 ^ v223) + 1;
  unint64_t v227 = v226 - ((2 * v226) & 0xF85695A2A9BD6146) - 0x3D4B52EAB214F5DLL;
  uint64_t v228 = ((2 * v220) ^ 0x263F64D5BF7AE58ALL)
       - ((2 * ((2 * v220) ^ 0x263F64D5BF7AE58ALL)) & 0xA79845B83B3BCLL)
       + 0x2053CC22DC1D9DFLL;
  *((void *)&v217 + 1) = v209 ^ 0x1BB;
  *(void *)&long long v217 = v209 ^ 0x5D979F6EF26BBC00;
  unint64_t v229 = (v220 ^ 0x93E03949A29EAA01)
       + (v228 & 0x1FF1646FA47B188 ^ 0x5BFB67B5B7BF6E77)
       + ((2 * v228) & 0x3FC248D348D6310 ^ 0x8208410812310)
       - 0x5BFE73F79FFEFFFFLL;
  unint64_t v230 = v229 - ((2 * v229) & 0x3032C499F7DCA004);
  unint64_t v231 = v230 + 0x1819624CFBEE5002;
  uint64_t v232 = v209 ^ (v209 >> 17) ^ (((v209 << 47) ^ 0xDEDD800000000000)
                              - ((2 * ((v209 << 47) ^ 0xDEDD800000000000)) & 0xF236000000000000)
                              + 0x791B2F2E70F2FEE6) ^ ((v217 >> 10)
                                                       - ((2 * (v217 >> 10)) & 0x581B736DBFA95436)
                                                       - 0x53F24649202B55E5);
  *((void *)&v217 + 1) = (68268029 - v230);
  *(void *)&long long v217 = (v230 + 0x1819624CFBEE5002) ^ 0x68DECA9F088A6D80;
  uint64_t v233 = (v217 >> 7) - ((2 * (v217 >> 7)) & 0xF8F78CC8D65572F6) - 0x384399B94D54685;
  *((void *)&v217 + 1) = v231 ^ 0x9F088A6DFFLL;
  *(void *)&long long v217 = v231 ^ 0x68DECA0000000000;
  uint64_t v234 = v233 ^ v231 ^ ((v217 >> 41) - ((2 * (v217 >> 41)) & 0x5A63A3B4523C6344) + 0x2D31D1DA291E31A2);
  uint64_t v235 = v234 ^ 0x2BC2B0A977423961;
  unint64_t v236 = (v223 ^ ((v223 ^ 0x5BF3B2EC67B1D466)
                - ((2 * (v223 ^ 0x5BF3B2EC67B1D466) + 2) & 0xDF4A0432E39B66ALL)
                - 0x7905AFDE68E324CALL) ^ v227 ^ 0xDEDD57E35B8C400FLL)
       + (v221 ^ 0x912F11734323B4FELL);
  unint64_t v237 = (v232 ^ 0x8881273D92FA9073) + (v232 ^ 0xE528B54A50F9B3CBLL ^ v234 ^ 0x2BC2B0A977423961) + 1;
  unint64_t v238 = (v234 ^ ((v234 ^ 0x466B22DEB5411AD9)
                - ((2 * (v234 ^ 0x466B22DEB5411AD9) + 2) & 0xD07508D5BED573BCLL)
                - 0x17C57B9520954621) ^ 0xAF892E424ACDCA1FLL ^ (v237
                                                                - ((2 * v237) & 0xFC4EEE13BE332DCELL)
                                                                - 0x1D888F620E66919))
       + (v232 ^ 0x8881273D92FA9073);
  unint64_t v239 = v238 + 0x65ABDE5B6A04E9ADLL - ((2 * v238) & 0xCB57BCB6D409D35ALL);
  unint64_t v240 = v216 ^ (v216 >> 19) ^ (((v216 << 36) ^ 0xC1F2220000000000)
                              - ((2 * ((v216 << 36) ^ 0xC1F2220000000000)) & 0xD274B24000000000)
                              - 0x16C5A6D979B96F6FLL) ^ v235 ^ v225;
  unint64_t v241 = (((v208 >> 6) ^ 0x20A38EF3B72741CLL)
        + ((((unint64_t)~v208 << 63) - 0xAF8CCF4768B7B9FLL) ^ 0xF507330B89748461)
        - ((2 * ((v208 >> 6) ^ 0x20A38EF3B72741CLL)) & 0x6B10852B4A5E0DALL)
        - 0x2CA77BD6A5AD0F93) ^ (v208 >> 1) ^ (v236 - ((2 * v236) & 0x2F7F2E757C7FBC4) + 0x17BF973ABE3FDE2);
  unint64_t v242 = v240 ^ 0x719A8C3FE680423FLL ^ (((v241 ^ 0x936460BD9FFF8E06) & (v221 ^ 0x6ED0EE8CBCDC4B01))
                                      - ((2 * ((v241 ^ 0x936460BD9FFF8E06) & (v221 ^ 0x6ED0EE8CBCDC4B01))) & 0xA2D24D7E6B5D22C6)
                                      + 0x516926BF35AE9163);
  unint64_t v243 = v239 ^ (((v240 ^ 0x4562F8809B047B02) & (v221 ^ 0x912F11734323B4FELL))
               - ((2 * ((v240 ^ 0x4562F8809B047B02) & (v221 ^ 0x912F11734323B4FELL))) & 0x6A128E902E9841DALL)
               - 0x4AF6B8B7E8B3DF13);
  unint64_t v244 = (((v239 ^ 0x65ABDE5B6A04E9ADLL) & (v232 ^ 0x777ED8C26D056F8CLL))
        - ((2 * ((v239 ^ 0x65ABDE5B6A04E9ADLL) & (v232 ^ 0x777ED8C26D056F8CLL))) & 0x5EA9F8A569D07718)
        + 0x2F54FC52B4E83B8CLL) ^ v241;
  unint64_t v245 = (((v241 ^ 0x6C9B9F42600071F9) & (v232 ^ 0x8881273D92FA9073))
        - ((2 * ((v241 ^ 0x6C9B9F42600071F9) & (v232 ^ 0x8881273D92FA9073))) & 0x7ADEDF34AB82813ALL)
        + 0x3D6F6F9A55C1409DLL) ^ v221 ^ v242;
  unint64_t v246 = v243 ^ v242;
  unint64_t v247 = (((v243 ^ v242) << 45) ^ 0x695FC00000000000)
       + 0x6B95A174FA5D62F2
       - ((2 * (((v243 ^ v242) << 45) ^ 0x695FC00000000000)) & 0xD72B400000000000);
  unint64_t v248 = (((v239 ^ 0x9A5421A495FB1652) & (v240 ^ 0xBA9D077F64FB84FDLL))
        - ((2 * ((v239 ^ 0x9A5421A495FB1652) & (v240 ^ 0xBA9D077F64FB84FDLL))) & 0xE4C143BC52AD071ELL)
        + 0x7260A1DE2956838FLL) ^ v232 ^ v244;
  unint64_t v249 = v248 ^ 0xDA6931AB705DCEAALL;
  unint64_t v250 = ((v248 ^ 0xDA6931AB705DCEAALL) & 0x10000)
       + 0x3DD61E53C023F881
       - 2 * ((v248 ^ 0xDA6931AB705DCEAALL) & 0x10000);
  unint64_t v251 = (v245 ^ 0x92EC1A59C5DED265) >> 61;
  unint64_t v252 = ((v243 ^ v242) << 36) ^ 0xE14B7416EBF7FFEDLL;
  unint64_t v253 = ((v243 ^ v242) << 37) & 0xFFFFB7E000000000 ^ 0x3D6917C000000000;
  unint64_t v254 = (((v247 ^ 0x6B95A174FA5D62F2 | (v246 >> 28)) ^ 0x43F017AFDLL)
        - ((2 * ((v247 ^ 0x6B95A174FA5D62F2 | (v246 >> 28)) ^ 0x43F017AFDLL)) & 0xAAED78FC17FE1E48)
        - 0x2A894381F400F0DCLL) ^ v246;
  unint64_t v255 = v248 ^ 0xB5A5BA0D433B1BB4;
  uint64_t v256 = 0x10000;
  if (v250 != 0x3DD61E53C023F881) {
    uint64_t v256 = -65536;
  }
  uint64_t v257 = ((2 * (v256 + v255)) & 0x3FAF5FBDF6FFF9DELL) + ((v256 + v255) ^ 0x1FD7AFDEFB7FFCEFLL);
  unint64_t v258 = v252 + 0x240914080013 + v253;
  unint64_t v259 = 2
       * (((v254 ^ 0x9686ABD000000000) & v258) - ((2 * ((v254 ^ 0x9686ABD000000000) & v258)) & 0x3BD7568000000000))
       - 0x4428A97DDE2BD510;
  uint64_t v260 = v244 ^ (v244 >> 1) ^ 0x266AC7AEFEC168F1 ^ (((v244 << 58) ^ 0x3800000000000000)
                                                    - ((2 * ((v244 << 58) ^ 0x3800000000000000)) & 0x7000000000000000)
                                                    + 0x386D522EDE1BA274);
  uint64_t v261 = (((2 * (v260 & 0x71FBE9D3ACB66EF1 ^ 0x504241D2800448E0)) | 0x1CCE030B88492C30)
        - (v260 & 0x71FBE9D3ACB66EF1 ^ 0x504241D2800448E0)
        + 0x7198FE7A3BDB69E8) ^ 0x1E6C03E1D7A6F290;
  unint64_t v262 = 0x6259D6A408EA1CC5 - (v261 | 0x6259D6A408EA1CC5) + (v261 | 0x9DA6295BF715E33ALL);
  *((void *)&v263 + 1) = v245 ^ 0x23EB6C1370;
  *(void *)&long long v263 = v245 ^ 0x562B6D0000000000;
  uint64_t v264 = ((v263 >> 39) - ((2 * (v263 >> 39)) & 0xE2704F065D4BF9C2) + 0x713827832EA5FCE1) ^ v245 ^ 0x92EC1A59C5DED265 ^ (((8 * (v245 ^ 0x92EC1A59C5DED265)) ^ 0x263BBBD1759608A8) + 0x47CE5AED2A92F1ACLL - 2 * (((8 * (v245 ^ 0x92EC1A59C5DED265)) ^ 0x263BBBD1759608A8) & 0x47CE5AED2A92F1B8 ^ (8 * (v245 ^ 0x92EC1A59C5DED265)) & 0x10));
  unint64_t v265 = v244 >> 6;
  unint64_t v266 = (v254 ^ 0x9686ABD1DA1445DALL) + v258;
  uint64_t v267 = v251 ^ 6;
  uint64_t v268 = (v251 ^ 6) + (v251 ^ 0xDCEF5EBD57A33A1 ^ v264) + 1;
  unint64_t v269 = (v266 ^ 0x6D0DEEECF5F56FEDLL)
       + ((2 * v266) & 0xDA1BDDD9EBEADFDALL)
       + (v259 ^ 0x23DD76C568C4BDA3)
       + ((2 * v259) & 0xCFEBBF716DDED158 ^ 0xB85552FFBE77AEBFLL);
  uint64_t v270 = v269 + 1 - 2 * ((v269 + 0x7AE7F0CBC0F9F8C1) & 0x7D9104DBA917B0A7 ^ (v269 + 1) & 6) - 0x7870A5895EE569FLL;
  unint64_t v271 = (((v244 >> 6) & 0x303C40A08000046 ^ 0x20EAF84A78279EABLL)
        + ((v244 >> 6) & 0x4028400C82100 ^ 0x4020400C82101)
        - 2) ^ 0xA769C14AD8261EBALL;
  uint64_t v272 = v271 - ((2 * v271) & 0xE05B1044191400CLL) + 0x6742D89373EEAE07;
  unint64_t v273 = v262 ^ 0x7CE6AB7FC415EB72 | ((v260 & 0x400060841418108 ^ 0x11638C82A571C0C9)
                                      + (v260 & 0x8A04102412081006 ^ 0x200000010081003)
                                      - 2) & 0x8E04162C534991FELL ^ (v244 << 63) ^ 0x84000404110911C6;
  uint64_t v274 = v273 - ((2 * v273) & 0x485C1B75B595E89CLL) + 0x242E0DBADACAF44ELL;
  unint64_t v275 = (((v274 & 0xDF07C68E08C82146 ^ 0xC1C9B8D29AD0FDE9) - 1) & 0x9006400A00400040 ^ 0x10D05133214694E9)
       + (((v274 & 0xDF07C68E08C82146 ^ 0xC1C9B8D29AD0FDE9) - 1) & 0x4F01868408882106 ^ 0x2701800002890107)
       - 2;
  *((void *)&v263 + 1) = (v257 + 785);
  *(void *)&long long v263 = v257 - 0x1FD7AFDEFB7FFCEFLL;
  unint64_t v276 = ((v274 & 0x983021A3219609 ^ 0x9C1AE48E0200800CLL) + (v274 & 0x20600950541648B0 ^ 0x20600940040608A1) - 1) ^ 0x8418F6FEC04C344CLL;
  unint64_t v277 = (v264 ^ ((v264 ^ 0xDCEF5EBD57A33A7)
                - ((2 * (v264 ^ 0xDCEF5EBD57A33A7) + 2) & 0x372AB2DE3FAB1736)
                - 0x646AA690E02A7464) ^ (v268 - ((2 * v268) & 0x8E2C66837A18FF3CLL) - 0x38E9CCBE42F38062) ^ 0xAEB2603A885C385DLL)
       + v267;
  unint64_t v278 = v277 + 0x7E71540EF14F719ALL - ((2 * v277) & 0xFCE2A81DE29EE334);
  uint64_t v279 = (((v243 << 57) ^ 0x2200000000000000)
        + 0x22FC6C224CD005A8
        - ((2 * ((v243 << 57) ^ 0x2200000000000000)) & 0x4444444444444444)) ^ 0x22FC6C224CD005A8 | (v243 >> 41) ^ 0x7E8B97;
  unint64_t v280 = v243 ^ (v243 >> 7) ^ (((v243 << 23) ^ 0xDE7D5F4508800000)
                             - ((2 * ((v243 << 23) ^ 0xDE7D5F4508800000)) & 0x3BC30E7769000000)
                             - 0x621E78C44B30148ELL) ^ (v279 - ((2 * v279) & 0x3B1B1F9B05C37C08) + 0x1D8D8FCD82E1BE04);
  uint64_t v281 = v249 ^ (v249 >> 10) ^ (((v249 << 54) ^ 0x3700000000000000)
                              - ((2 * ((v249 << 54) ^ 0x3700000000000000)) & 0x1700000000000000)
                              + 0xB931C20A1CACADELL) ^ ((v263 >> 17)
                                                      - ((2 * (v263 >> 17)) & 0x3CF6347DC4600860)
                                                      + 0x1E7B1A3EE2300430);
  unint64_t v282 = v272 ^ (((2 * (v265 & 0xF83971F737DEB9 ^ 0x28214174311811)) | 0xFC80226564381F2ELL)
               - (v265 & 0xF83971F737DEB9 ^ 0x28214174311811)
               + 0x1BFEECD4DE3F069) ^ v278 ^ v275 ^ (v276 - ((2 * v276) & 0x1D472A1C2E7BCD4) - 0x7A1046A1160C2196);
  unint64_t v283 = v280 ^ (v246 >> 19) ^ v270;
  uint64_t v284 = v280 ^ 0x7C810915B565A273;
  unint64_t v285 = 2
       * (((v281 ^ 0x8ABF7E9A9910C245) & v284) - ((2 * ((v281 ^ 0x8ABF7E9A9910C245) & v284)) & 0x557C708003BEF6E2))
       + 0x557C708003BEF6E2;
  unint64_t v286 = (((v281 ^ 0x8ABF7E9A9910C245) + v284) ^ 0xE5FFC7FBF72B6E5BLL)
       + ((2 * ((v281 ^ 0x8ABF7E9A9910C245) + v284)) & 0xCBFF8FF7EE56DCB6)
       + (v285 ^ 0xD77C75A0033CF6E1)
       + ((2 * v285) & 0xFBFFF5BFFEFBFFF8 ^ 0x55071EFFF986123FLL)
       + 1;
  unint64_t v287 = v286 - ((2 * v286 + 0x300065C810A52344) & 0xE1E1B423AAE259A4) - 0x770EF30A223C418CLL;
  unint64_t v288 = ((v282 ^ 0xCE8A810A9C6EA4ALL) & (v278 ^ 0x818EABF10EB08E65))
       - ((2 * ((v282 ^ 0xCE8A810A9C6EA4ALL) & (v278 ^ 0x818EABF10EB08E65))) & 0x1003D83D9873ED7CLL)
       - 0x77FE13E133C60942;
  uint64_t v289 = v278 ^ 0x7E71540EF14F719ALL;
  BOOL v290 = (v278 & 0x100000000000) == 0;
  unint64_t v291 = 0xFFFFF00000000000;
  if (!v290) {
    unint64_t v291 = 0x100000000000;
  }
  uint64_t v292 = v291 + v289 + 0x49D4D869A9B0AFFCLL - 2 * ((v291 + v289) & 0x49D4D869A9B0AFFFLL ^ v289 & 3);
  unint64_t v293 = (((v287 ^ 0xF0F0DA11D5712CD2) & (v281 ^ 0x7540816566EF3DBALL))
        - ((2 * ((v287 ^ 0xF0F0DA11D5712CD2) & (v281 ^ 0x7540816566EF3DBALL))) & 0x3A05A58625105B2ELL)
        - 0x62FD2D3CED77D269) ^ v282;
  unint64_t v294 = ((v283 ^ 0x7EEFFA4FE1781710) & (v292 ^ 0x49D4C869A9B0AFFCLL) ^ 0xFFFFFFB5CB0BFF77)
       + 0x4A34F40089
       + ((2 * ((v283 ^ 0x7EEFFA4FE1781710) & (v292 ^ 0x49D4C869A9B0AFFCLL))) & 0xFFFFFF6B9617FEEELL);
  unint64_t v295 = 2
       * (((v287 ^ 0xF0F0DA11D5712CD2) & v294) - ((2 * ((v287 ^ 0xF0F0DA11D5712CD2) & v294)) & 0x7EC1DAD898CB719CLL))
       + 0x7EC1DAD898CB719CLL;
  unint64_t v296 = v283 ^ 0xF875A08E1D214520 ^ v288;
  unint64_t v297 = ((v287 ^ 0xF0F25EE2A8ED32DLL) & (v283 ^ 0x811005B01E87E8EFLL))
       - ((2 * ((v287 ^ 0xF0F25EE2A8ED32DLL) & (v283 ^ 0x811005B01E87E8EFLL))) & 0xE18438A17D4212D8)
       - 0xF3DE3AF415EF694;
  unint64_t v298 = ((2 * ((v287 ^ 0xF0F0DA11D5712CD2) + v294)) & 0x7BD223FFFFBF77BELL)
       + (((v287 ^ 0xF0F0DA11D5712CD2) + v294) ^ 0xBDE911FFFFDFBBDFLL)
       + (v295 ^ 0x54C15AD2B89BB015)
       + ((2 * v295) & 0xABFEFFEBBF5E7CECLL ^ 0x567D4A5ECEE99FD7);
  unint64_t v300 = v297 ^ v281;
  BOOL v301 = a57 > a55 + 1902722250;
  if (a57 < 0xB3570900 != a55 + 1902722250 < 0xB3570900) {
    BOOL v301 = a57 < 0xB3570900;
  }
  unint64_t v299 = (v298 - ((2 * v298 + 0x102CDBEBBF9F0532) & 0x161DE483DE400DE4) - 0x5CDA9FC831107675) ^ v296;
  return (*(uint64_t (**)(unint64_t, unint64_t, uint64_t, uint64_t, unint64_t, void, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a59 + 8 * (v303 ^ (8 * v301))))((((v300 ^ v293) << 47) ^ 0x7653800000000000)- ((2 * (((v300 ^ v293) << 47) ^ 0x7653800000000000)) & 0x67A0000000000000), ((v293 << 58) ^ 0xCC00000000000000) - ((2 * ((v293 << 58) ^ 0xCC00000000000000)) & 0x3800000000000000), a1, a2, v299 ^ (v299 >> 28) ^ (v299 >> 19) ^ (((v299 << 36) ^ 0xC117210000000000)- ((2 * ((v299 << 36) ^ 0xC117210000000000)) & 0x36A4D56000000000)+ 0x1B526AB2C4F2E200) ^ (((v299 << 45) ^ 0x2E42000000000000)- ((2 * ((v299 << 45) ^ 0x2E42000000000000)) & 0x3797800000000000)+ 0x1BCBD73ACCFBDC65), a55, a57, 1270948571, a5, a6, a7, a8, a9, a10,
           a11,
           a12,
           a13,
           a14,
           a15,
           a16,
           a17,
           a18,
           a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48,
           a49);
}

void sub_19E8BE58C()
{
}

uint64_t sub_19E8BE594()
{
  return (*(uint64_t (**)(void))(v1
                              + 8
                              * (int)(((103 * (v0 ^ 0x750) + ((v0 + 1538097197) & 0xA4527EF3) - 3239) * (*v2 != 0)) ^ v0)))();
}

uint64_t sub_19E8BE5F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  *(void *)(v17 - 128) = a13;
  *(void *)(v17 - 120) = v15;
  *(_DWORD *)(v17 - 136) = (v13 + 1712) ^ (1575213817 * ((v17 - 136) ^ 0x8D65B0CC));
  uint64_t v18 = (*(uint64_t (**)(uint64_t))(v14 + 8 * (v13 ^ 0x9B8)))(v17 - 136);
  return (*(uint64_t (**)(uint64_t))(v14
                                            + 8
                                            * (((v16 != ((v13 - 39) | 1) + 366075177) * (((v13 + 534) | 0x1C) - 790)) ^ v13)))(v18);
}

uint64_t sub_19E8BE688()
{
  return (*(uint64_t (**)(void))(v1
                              + 8
                              * (((v0 < LODWORD(STACK[0x25C]) - 157328489) * ((16 * LODWORD(STACK[0x25C])) ^ 0x5BC3)) ^ (LODWORD(STACK[0x25C]) - 789))))();
}

uint64_t sub_19E8BFB70(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  uint64_t v9 = (((a5 + 1503) | 0x11) ^ 0xDFC7E7F7) + a3;
  *(unsigned char *)(v6 + v9) = *(unsigned char *)(v7 + v9) ^ 0xC1;
  return (*(uint64_t (**)(void))(v8 + 8 * ((7 * (a3 - 1 == v5)) ^ a5)))();
}

uint64_t sub_19E8BFBBC(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  return (*(uint64_t (**)(void))(v5
                              + 8
                              * ((((*(unsigned __int8 *)(v7 + 4) ^ a5)
                                 + ((a3 - 1) ^ 0xFFFFFF88)
                                 + ((2 * *(unsigned __int8 *)(v7 + 4)) & 0x15E) == v6)
                                * (a3 + 1958)) ^ a3)))();
}

void sub_19E8BFC04()
{
}

uint64_t sub_19E8BFC14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  *(_DWORD *)(v31 - 116) = v30 + ((2 * ((v31 - 120) & 0x486DB868) - (v31 - 120) + 932333456) ^ 0x26604ADA) * v28 - 377;
  *(void *)(v31 - 112) = a26;
  *(void *)(v31 - 104) = v26;
  uint64_t v32 = (*(uint64_t (**)(uint64_t))(v27 + 8 * (v30 ^ 0xD8E)))(v31 - 120);
  return (*(uint64_t (**)(uint64_t))(v27 + 8 * (((*(_DWORD *)(v31 - 120) == v29 + 2) * (v30 - 1211)) ^ v30)))(v32);
}

void sub_19E8BFCA0()
{
}

uint64_t sub_19E8BFCAC()
{
  return (*(uint64_t (**)(void))(v3 + 8 * ((22 * (*v1 == (((v0 ^ 0x559) + 1032) ^ v2))) ^ v0 ^ 0xEAA)))();
}

uint64_t sub_19E8BFCF0@<X0>(uint64_t a1@<X0>, int a2@<W8>)
{
  return sub_19E8BA188(a1, 48, *(_DWORD *)(*v3 + 4 * (v4 - 1207098978)), v2, a2);
}

void sub_19E8BFD20()
{
}

void sub_19E8BFD28()
{
  int v5 = 402930427
     * ((2 * (((v4 - 136) ^ 0xBD40AFB9) & 0x74506CD8) - ((v4 - 136) ^ 0xBD40AFB9) - 1951427807) ^ 0x2C56C025);
  *(_DWORD *)(v4 - 120) = v0 - v5 + (((v3 + 1730) | 0x48) ^ 0xDE943C6B);
  *(_DWORD *)(v4 - 136) = (v3 + 1075) ^ v5;
  *(void *)(v4 - 128) = v2;
  (*(void (**)(uint64_t))(v1 + 8 * (v3 ^ 0x85E)))(v4 - 136);
  JUMPOUT(0x19E8BFDC0);
}

void sub_19E8BFE70()
{
}

void sub_19E8BFEB0(uint64_t a1, int a2)
{
  *uint64_t v2 = a2;
  JUMPOUT(0x19E8B8810);
}

uint64_t sub_19E8BFEB8(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  return (*(uint64_t (**)(void))(v4
                              + 8
                              * ((110 * (a4 == ((v6 + ((v5 - 1510794604) & 0x5A0CE4F9) - 50) ^ ((v5 - 155) | 0x29)))) ^ v5)))();
}

void sub_19E8C0000()
{
}

#error "19E8C00C4: call analysis failed (funcsize=26)"

uint64_t sub_19E8C00C8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  return (*(uint64_t (**)(void *, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 8 * ((207 * (v19 - 1596241302 < (((v20 + 592) | 0x140) ^ (v21 + 888)) + ((v20 - 1404079436) & 0x53B08B7Fu))) ^ (v20 + 896))))(a1, v22, (v20 - 1404079436) & 0x53B08B7F, a4, 1119333833, a6, a7, a8, *a1, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19);
}

void sub_19E8C0144()
{
}

uint64_t sub_19E8C014C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  return (*(uint64_t (**)(void))(v7 + 8 * (a6 ^ (16 * (v8 + 1 == v6 + 16)))))();
}

void sub_19E8C0334()
{
}

uint64_t sub_19E8C037C(uint64_t a1, uint64_t a2, int a3, int a4)
{
  int v10 = a4 + v5 + v4;
  int v11 = v10 + 1101;
  if ((v10 + 1101) <= 0x40) {
    int v11 = 64;
  }
  int v12 = __CFADD__(v10 + 1100, v8 + v7 + ((v6 - 1534) ^ (a3 + 1415) ^ (111 * (v6 ^ 0x78C))) + v11);
  return (*(uint64_t (**)(void))(v9 + 8 * ((8 * v12) | (v12 << 6) | v6)))();
}

uint64_t sub_19E8C03EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  return (*(uint64_t (**)(uint64_t))(v7 + 8 * (a6 ^ (49 * ((unint64_t)(a2 - v8 - a4) < 0x20)))))(v6);
}

uint64_t sub_19E8C05C0()
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * ((545
                                * ((((49 * ((v1 | 0x513) ^ 0x5A6u)) ^ 0x40DLL) & v0) == (((v1 | 0x513u) - 1027) ^ 0x1B0))) ^ (v1 | 0x513))))();
}

uint64_t sub_19E8C0614@<X0>(int a1@<W5>, uint64_t a2@<X8>)
{
  HIDWORD(v7) = v2;
  LODWORD(v7) = v2 ^ v6;
  return (*(uint64_t (**)(void))(v5 + 8 * ((a2 + 1 == v4 + 64) | (8 * (a2 + 1 == v4 + 64)) | a1)))((v7 >> 2) + v6 - (v3 & (2 * (v7 >> 2))));
}

uint64_t sub_19E8C0754()
{
  return sub_19E8C0774();
}

uint64_t sub_19E8C0774@<X0>(int a1@<W1>, int a2@<W3>, int a3@<W6>, int a4@<W8>)
{
  int8x16_t v11 = *(int8x16_t *)(v8 + (a4 + a1 + v5));
  *(int8x16_t *)(v6 + v5) = vaddq_s8(vsubq_s8(v11, vandq_s8(vaddq_s8(v11, v11), v10)), v9);
  return (*(uint64_t (**)(void))(v7 + 8 * (((v5 == 48) * a2) ^ (a3 + v4 + 1248))))();
}

uint64_t sub_19E8C07C4()
{
  return (*(uint64_t (**)(void))(v2 + 8 * ((102 * (v3 + 1 == v1 + 48)) ^ v0)))();
}

void sub_19E8C0964()
{
}

void sub_19E8C09CC(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  int v1 = *(_DWORD *)(a1 + 24) - 291962093 * ((~a1 & 0xE3F3EFE2 | a1 & 0x1C0C101D) ^ 0xF201E2A8);
  unsigned int v2 = 1001500783
     * ((2 * ((&v5 ^ 0x23885347) & 0x1CE339BD) - (&v5 ^ 0x23885347) - 484653502) ^ 0x8A206AB1);
  uint64_t v6 = &STACK[0x542A6DEB665DBCC6];
  unsigned int v7 = v2 ^ 0xAFF7E931;
  unsigned int v5 = v1 - 167302565 + v2;
  uint64_t v3 = (char *)*(&off_1EF0E5660 + v1 - 7) - 8;
  (*(void (**)(unsigned int *))&v3[8 * (v1 ^ 0x97F)])(&v5);
  __asm { BRAA            X10, X17 }
}

void sub_19E8C0CF4()
{
  if (*v3 + 1883663498 < 0) {
    int v0 = ((v2 | 0x30) ^ 0x9FD71F1D) - v1;
  }
  *uint64_t v3 = *v3 - 601563591 + v0;
  JUMPOUT(0x19E8C0D88);
}

void sub_19E8C0DD8(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  a6 = v8 + 1431787901 * ((((2 * &a3) | 0xB58E2F36) - &a3 + 624486501) ^ 0xF157BD4C) - 833;
  a3 = a1;
  a4 = v7;
  a5 = v7;
  (*(void (**)(uint64_t *))(v6 + 8 * (v8 ^ 0xD08)))(&a3);
  JUMPOUT(0x19E8C0E38);
}

uint64_t sub_19E8C0E64(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  return (*(uint64_t (**)(void))(v6
                              + 8
                              * ((83
                                * (((a4 + 16) ^ (v4
                                                                - v5
                                                                - (unint64_t)((a4 - 459568628) & 0x1B6472E7)
                                                                + 669 < 0x20)) & 1)) ^ a4)))();
}

uint64_t sub_19E8C109C@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(void))(v3
                              + 8
                              * (int)(((v2 ^ 0x7B7 ^ (v2 + 466230358) & 0xE435E7F5) * (a1 - v1 == 613440915)) ^ v2)))();
}

uint64_t sub_19E8C1104(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v18 = (v16 + v15);
  uint64_t v19 = (v18 + 548942362);
  if (v19 <= 0x40) {
    int v20 = 64;
  }
  else {
    int v20 = v18 + 548942362;
  }
  int v21 = *(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 8 * ((43 * ((a8 - v15 - v16 + v20) < 0xF)) ^ 0x59Eu));
  return v21(v21, v18, v19, 64, a5, 4038867676, a7, a8, a9, a10, a11, a12, a13, a14, a15);
}

uint64_t sub_19E8C12A0()
{
  return (*(uint64_t (**)(void))(v2
                              + 8 * (int)(((v0 > v1 - 1092846593) * (STACK[0x224] & 0xFE62A95F ^ 0x2E1)) ^ (v1 - 276))))();
}

uint64_t sub_19E8C12E8(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  int v76 = v72 ^ a2;
  int v77 = 1305237457 * ((v75 - 192) ^ 0xB9B9A6CE);
  *(_DWORD *)(v75 - 168) = v77 + v74 - 406468487;
  *(_DWORD *)(v75 - 164) = v77 + v72 - 174;
  *(void *)(v75 - 160) = STACK[0x238];
  *(void *)(v75 - 144) = a71;
  *(void *)(v75 - 184) = a70;
  *(void *)(v75 - 176) = a72;
  *(void *)(v75 - 192) = STACK[0x200];
  uint64_t v78 = (*(uint64_t (**)(uint64_t))(v73 + 8 * (v72 ^ 0x88C)))(v75 - 192);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v73
                                                     + 8
                                                     * (((*(_DWORD *)(v75 - 152) == 694817499) * (v76 + 189)) ^ v72)))(v78, 1116);
}

uint64_t sub_19E8C13C0(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3
                                                     + 8
                                                     * (int)(((v2 - 1560 + ((v2 + 1413250680) & 0xABC37B6F) - 1000)
                                                            * (v1 == 0)) ^ v2)))(a1, 961177747);
}

uint64_t sub_19E8C14DC(int a1)
{
  return (*(uint64_t (**)(void))(v4
                                           + 8
                                           * (int)(((((((2 * (a1 ^ 0x785)) ^ 0x30C) - 250) & v1) == 0)
                                                  * ((((a1 ^ 0x785) + 462573290) & 0xE46DB7DE) - 1962)) ^ a1 ^ 0x785)))((v2 - v3));
}

uint64_t sub_19E8C152C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,int a49)
{
  LODWORD(STACK[0x23C]) = (v49 + 426590173) & 0xE692BEF7;
  BOOL v53 = a49 == v50 || ((a49 + 13) & 0xF) != (((a49 + 13) << (((v49 - 35) & 0xF7) - 100)) & 0xC);
  uint64_t v54 = *(uint64_t (**)(void))(v51 + 8 * ((v53 | (4 * v53)) ^ v49));
  LODWORD(STACK[0x238]) = -42899;
  return v54();
}

void sub_19E8CC6BC()
{
}

uint64_t sub_19E8CC6C8@<X0>(uint64_t a1@<X1>, int a2@<W8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,unsigned char *a59,int a60,unsigned int a61)
{
  BOOL v61 = a61 < 0x6D6B3AA;
  *(unsigned char *)(a1 + (a2 - 1530971442)) = *a59
                                                   - ((*a59 << ((((v63 ^ 0x70) + v65) & 0x9C) + 101)) & 0x64)
                                                   - 78;
  if (a61 >= 0x6D6B3AA) {
    BOOL v61 = a61 - 1381115542 + (v63 ^ 0x70) > 0xB4849287;
  }
  return (*(uint64_t (**)(void))(v66 + 8 * ((v61 * v64) ^ v63 ^ 0x70)))();
}

uint64_t sub_19E8CC6F0()
{
  return (*(uint64_t (**)(void))(v0 + 8 * ((1015 * (v1 <= v4 + 3)) ^ (v3 + v2 - 1886))))();
}

uint64_t sub_19E8CC744(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(v8
                                                                      + 8 * ((((v7 ^ 0xBD) + 1915) * (v6 == a6)) ^ v7)))(a1, a2, a3, (v7 ^ 0xBDu) + 1520);
}

uint64_t sub_19E8CC770(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, int a16, int a17, int a18, uint64_t a19, uint64_t a20)
{
  *(_DWORD *)(a20 + 4 * (int)(a17 + v21 + (v22 ^ 0x8F964E82))) = (a4 >> ((v22 ^ 0xBAu) - 78)) ^ 0x6E5F2D65;
  int v23 = a18 + 2042544477 + (((v22 ^ 0x4BA) + 20) ^ 0xEC);
  BOOL v25 = v23 > 1781037940 || v23 < a16;
  return (*(uint64_t (**)(void))(v20 + 8 * ((107 * v25) ^ ((v22 ^ 0x4BA) - 460))))();
}

uint64_t sub_19E8CC80C()
{
  return (*(uint64_t (**)(void))(v0
                              + 8
                              * (((*(_DWORD *)(v2 - 0x19C7A72C32A62CABLL) == 694817499) * (v1 ^ 0x34C)) ^ (v1 - 1381))))();
}

void sub_19E8CC858()
{
}

uint64_t sub_19E8CCC5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t *a11, uint64_t a12, unint64_t *a13, int a14, int a15, int a16)
{
  unsigned int v20 = 402930427 * (((&a11 | 0xCD1FC8E9) - (&a11 & 0xCD1FC8E9)) ^ 0xD7A63454);
  a12 = v18;
  a13 = &STACK[0x519E2D9B46F0E3A4];
  a11 = &STACK[0x5B59BD67F1E3CE33];
  a14 = v19 - v20 + 661;
  a16 = v20 ^ 0x19CA2B56;
  uint64_t v21 = (*(uint64_t (**)(unint64_t **))(v17 + 8 * (v19 ^ 0xA56)))(&a11);
  return (*(uint64_t (**)(uint64_t))(v17
                                            + 8
                                            * ((60
                                              * (*(_DWORD *)(v18 - 0x19C7A72C32A62CABLL) == ((v19 + v16 + 1029) ^ (v19 + 107)))) ^ v19)))(v21);
}

void sub_19E8CCD48()
{
}

uint64_t sub_19E8CD120@<X0>(int a1@<W3>, int a2@<W8>)
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * ((63 * (((a2 == v4) | (2 * (a2 == v4))) == ((a1 ^ (a1 - 121)) + 119))) ^ (v3 + a1 - 430))))();
}

uint64_t sub_19E8CD164@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62)
{
  LODWORD(STACK[0x1038]) = a1;
  LODWORD(STACK[0x103C]) = STACK[0x298];
  STACK[0x1040] = STACK[0x388];
  LODWORD(STACK[0x1048]) = 1639538820 - v63 + LODWORD(STACK[0x260]);
  STACK[0x1050] = STACK[0x238] + (v63 - 807847714);
  uint64_t v68 = (*(uint64_t (**)(uint64_t, uint64_t))(v62 + v64 * (uint64_t)v66 + 8))(a62, a46);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v65 + 8 * ((1003 * (v68 + 694817499 - ((v68 << (((v67 + 96) | 0x44) - 76)) & 0x52D425B6) == ((v67 - 835519412) & 0x31CD07FF ^ 0x296A172E))) ^ v67)))(v68, 1116, 694817499, 2222240118, 2831389257, 2724750410, 1570216885, 357040108, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12,
           a13,
           a14,
           a15,
           a16,
           a17,
           a18,
           a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39);
}

uint64_t sub_19E8CD268()
{
  return (*(uint64_t (**)(void))(v3
                              + 8
                              * (((((v2 - 519281256) & 0x1EF393B6) - 409) * ((-673972317 - (v1 + v0)) > 6)) ^ v2)))();
}

void sub_19E8CD2B4()
{
}

uint64_t sub_19E8CD43C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24)
{
  uint64_t v28 = (*(uint64_t (**)(void, unint64_t, unint64_t, uint64_t))(v27 + 8 * (v26 + 1543)))(*(void *)(*(void *)v25 + 40), STACK[0x260] + 12, (v24 ^ 0x85FDCDF6EF7E3D2BLL) + 0x7A0232091081C2D5 + ((2 * v24) & 0x1DEFC7A56), -1);
  return (*(uint64_t (**)(uint64_t))(v27
                                            + 8
                                            * (((((a24 == 0) ^ (v26 + 39)) & 1) * ((v26 - 190) ^ 0x29C)) | (v26 + 472))))(v28);
}

uint64_t sub_19E8CD4EC@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  BOOL v8 = a1 - 52927192 < (a6 - 1471654980);
  if ((a6 - 1471654980) < 0xA01B440 != a1 - 52927192 < (((v6 - 388) | 0x40) ^ 0xA01B401u)) {
    BOOL v8 = (a6 - 1471654980) < 0xA01B440;
  }
  return (*(uint64_t (**)(void))(v7 + 8 * ((15 * v8) ^ v6)))();
}

void sub_19E8CD55C()
{
}

uint64_t sub_19E8CD5B0@<X0>(int a1@<W8>)
{
  unsigned int v4 = ((-2146970786
       - (*v1 & 0x7FFFFFFE ^ 0x88D9242 | (((a1 - 428448816) & 0x19899DFD) - 2146970786))
       + (*v1 & 0x7FFFFFFE ^ 0x88D9242 | 0x7FF826AC)
       + 1525) | (a1 - 14298685 + (v1[623] & 0x80000000)) & 0x80000000) ^ 0xB053CEC;
  v1[623] = v1[396] ^ *(_DWORD *)(v2 + 4 * ((*v1 & 1) == 0)) ^ ((v4 - ((2 * v4) & 0x35FF90F4) + 452970618) >> 1) ^ 0xDE694488;
  return (*(uint64_t (**)(void))(v3 + 8 * ((119 * (LODWORD(STACK[0x394]) < 0x270)) ^ a1)))();
}

uint64_t sub_19E8CD69C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  return (*(uint64_t (**)(void))(v8 + 8 * ((83 * (a5 + 1 == v9 + 48)) ^ a8)))();
}

uint64_t sub_19E8CD86C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, unint64_t *a12, unsigned int a13, uint64_t a14, unsigned int a15)
{
  unsigned int v18 = 1431787901 * ((939729711 - (&a11 | 0x3803232F) + (&a11 | 0xC7FCDCD0)) ^ 0xEC6C7607);
  a11 = (v15 + 479) ^ v18;
  a12 = &STACK[0x57D6105BEF2C6075];
  a14 = v16;
  a13 = 1368286277 - v18;
  a15 = v18 - 585810767;
  uint64_t v19 = (*(uint64_t (**)(int *))(v17 + 8 * (v15 + 1965)))(&a11);
  return (*(uint64_t (**)(uint64_t))(v17
                                            + 8
                                            * ((547
                                              * (*(_DWORD *)(v16 - 0x19C7A72C32A62CABLL) == ((v15 - 348) | 0x109)
                                                                                          + 694817166)) ^ v15)))(v19);
}

uint64_t sub_19E8CD960@<X0>(int a1@<W8>)
{
  return sub_19E7B0BA4(a1);
}

uint64_t sub_19E8CD974()
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * ((13
                                * (v1 >= (((((v0 - 704) | 0x12) - 753) | 0x1C) ^ 0xFFFFFED4)
                                       + ((((v0 - 704) | 0x12) - 1459) | 0x405))) ^ ((v0 - 704) | 0x12))))();
}

uint64_t sub_19E8CD9D0()
{
  return (*(uint64_t (**)(void))(v0
                              + 8
                              * ((243 * (v1 >= (STACK[0x20C] & 0xE3AB2BD6 ^ 0x559029AE))) ^ (LODWORD(STACK[0x25C]) - 1408))))();
}

uint64_t sub_19E8CDA1C()
{
  return (*(uint64_t (**)(void))(v1 + 8 * (((((v0 + 1480) ^ 0x62B) + 1430) | 0x41) ^ 0x68C ^ (v0 + 1480) ^ 0x62B)))();
}

void sub_19E8D4E40()
{
}

uint64_t sub_19E8D4F60@<X0>(int a1@<W1>, uint64_t a2@<X2>, int a3@<W3>, int a4@<W8>)
{
  uint64_t v8 = (unsigned char *)(a2 + (a3 - 7334466));
  unsigned int v9 = 1631306195
     * ((*(_DWORD *)(*(void *)STACK[0x240] + (*(_DWORD *)STACK[0x238] & 0x6CF082B0)) ^ v8) & 0x7FFFFFFF);
  unint64_t v10 = 1631306195 * (v9 ^ HIWORD(v9));
  char v11 = *(unsigned char *)(*(void *)(v6 + 8 * (a4 - 874)) + (v10 >> 24) - 8) ^ *(unsigned char *)(*(void *)(v6 + 8 * (a4 - 860))
                                                                                    + (v10 >> 24)
                                                                                    - 7) ^ (((v5 ^ 0xE4A34A12) >> (v4 + 1))
                                                                                          - ((2
                                                                                            * ((v5 ^ 0xE4A34A12) >> (v4 + 1))) & 0x3A)
                                                                                          + ((a4 + 67) | 3)
                                                                                          + 90) ^ *(unsigned char *)((v10 >> 24) + *(void *)(v6 + 8 * (a4 - 890)) + 5) ^ v10 ^ (-11 * BYTE3(v10)) ^ 0x9D;
  *uint64_t v8 = v11;
  return (*(uint64_t (**)(void))(v7 + 8 * ((3032 * (a3 - (v11 != 0) == a1)) ^ a4)))();
}

uint64_t sub_19E8D50BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(a4 + (v8 - v9)) = *(void *)(a8 + (v8 - v9));
  return (*(uint64_t (**)(void))(v12 + 8 * (v10 ^ (4 * (a5 + v9 != v11)))))();
}

uint64_t sub_19E8D50E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  uint64_t v40 = *(void *)(a1 + 16);
  *(int8x16_t *)(v39 - 112) = veorq_s8(*(int8x16_t *)(*(void *)(a1 + 40) - 0x9033E6691F09CA5), (int8x16_t)xmmword_19EC7A670);
  if (v38) {
    BOOL v41 = v40 == 0x6C4003946134F506;
  }
  else {
    BOOL v41 = 1;
  }
  int v42 = v41;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v37 + 8 * ((v42 * ((v36 - 1887822663) & 0x7085E777 ^ 0x3CC ^ (436 * (v36 ^ 0x2E5)))) ^ v36)))(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a1, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36);
}

void sub_19E8D5188()
{
}

void sub_19E8D51A0()
{
}

void sub_19E8D541C()
{
  *uint64_t v1 = 2087749635;
  (*(void (**)(unint64_t))(v2 + 8 * (v0 + 2156)))(STACK[0x228]);
  JUMPOUT(0x19E8D5468);
}

uint64_t sub_19E8D54E4@<X0>(int a1@<W8>, int8x16_t a2@<Q0>, int8x16_t a3@<Q1>, int8x16_t a4@<Q4>, int8x16_t a5@<Q5>, int8x16_t a6@<Q6>, int32x4_t a7@<Q7>)
{
  uint64_t v19 = 4 * v7;
  uint64_t v20 = v8 + 4 * v7;
  uint64_t v21 = v7 + 4;
  a3.i32[0] = *(_DWORD *)(v8 + (v19 | 4));
  a3.i32[1] = *(_DWORD *)(v8 + (v19 | 8));
  a3.i32[2] = *(_DWORD *)(v8 + (v19 | 0xC));
  int8x16_t v22 = vextq_s8(a2, a3, 0xCuLL);
  int8x16_t v23 = a3;
  v23.i32[3] = *(_DWORD *)(v8 + 4 * v21);
  int32x4_t v24 = (int32x4_t)veorq_s8(vandq_s8(v23, a4), a5);
  int32x4_t v25 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vsubq_s32((int32x4_t)vorrq_s8((int8x16_t)vaddq_s32(v24, v24), a6), v24), a7), v11);
  int32x4_t v26 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v25, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v25, v25), v12)), v13), v14);
  v27.i32[0] = *(_DWORD *)(v9 + 4 * ((*(_DWORD *)(v8 + (v19 | 4)) & 1) == 0));
  v27.i32[1] = *(_DWORD *)(v9 + 4 * ((*(_DWORD *)(v8 + (v19 | 8)) & 1) == 0));
  v27.i32[2] = *(_DWORD *)(v9 + 4 * (~*(_DWORD *)(v8 + (v19 | 0xC)) & 1));
  v27.i32[3] = *(_DWORD *)(v9 + 4 * (~v23.i32[3] & 1));
  *(int8x16_t *)uint64_t v20 = veorq_s8(veorq_s8(veorq_s8(*(int8x16_t *)(v20 + 1588), v27), v17), (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vsubq_s32((int32x4_t)vorrq_s8((int8x16_t)v26, vbicq_s8(v18, v22)), (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v26, v26), v15)), v16), 1uLL));
  return (*(uint64_t (**)(void))(v10 + 8 * (((2 * (v21 != 224)) | (4 * (v21 != 224))) ^ a1)))();
}

uint64_t sub_19E8D55EC(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 88) = 124;
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 4);
  *(void *)(a1 + 80) = *(void *)(a2 + 8);
  return 0;
}

uint64_t sub_19E8D560C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,int a21)
{
  uint64_t v28 = a5 + 24 * v22;
  *(_DWORD *)(v28 + 8) = v23;
  *(_DWORD *)(v28 + 12) = v27;
  *(void *)(v28 + 16) = a17;
  *(_DWORD *)(v28 + 24) = a21;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 8 * ((3084 * (*(_DWORD *)(v26 + v25 * (uint64_t)(int)a3 + 32) + ((v21 - 184837364) & 0x3F54F1BF ^ 0x6CE6252u) < a8)) ^ v21)))(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

uint64_t sub_19E8D56A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v20 = *(void *)(a16 + 40);
  *(void *)(v19 - 252) = 0xC1C1C1C1C1C1C1C1;
  *(void *)(v19 - 244) = 0xC1C1C1C1C1C1C1C1;
  int v21 = 583844137 * (((~(v19 - 216) & 0x8085B08A) - (~(v19 - 216) | 0x8085B08B)) ^ 0x905B0D06);
  unsigned int v22 = (void *)(v19 - 216);
  v22[2] = v20;
  v22[3] = &STACK[0x350];
  unsigned char v22[4] = v19 - 236;
  v22[5] = v19 + 0x9033E6691F09BA9;
  *(_DWORD *)(v19 - 212) = v21 + v16 + 1722;
  *(_DWORD *)(v19 - 208) = v21 ^ 0x4A87CEE4;
  uint64_t v23 = (*(uint64_t (**)(uint64_t))(v17 + 8 * (v16 ^ 0x988)))(v19 - 216);
  return (*(uint64_t (**)(uint64_t))(v17
                                            + 8
                                            * (((*(_DWORD *)(v19 - 216) == (((v16 + 754) | 0x441) ^ (v18 + 567)))
                                              * ((v16 - 73) ^ 0x850)) ^ v16)))(v23);
}

uint64_t sub_19E8D57B8()
{
  return (*(uint64_t (**)(void))(v2 + 8 * (((v1 - 955 + ((v1 - 1404) | 8) + 2701) * (v0 == 0)) ^ v1)))();
}

uint64_t sub_19E8D57E8(uint64_t a1, int a2, unsigned int a3)
{
  return (*(uint64_t (**)(void))(v4 + 8 * ((((((a3 + 963594478) & 0x4690B53E) + 1106) ^ (a3 + 648)) * (v3 == a2)) ^ a3)))();
}

void sub_19E8D5828(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 8) ^ (1305237457 * (a1 ^ 0xB9B9A6CE));
  __asm { BRAA            X14, X17 }
}

void sub_19E8D5BD8(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  int v1 = *(_DWORD *)(a1 + 8) ^ (1431787901 * ((-2 - ((a1 | 0x85E7A388) + (~a1 | 0x7A185C77))) ^ 0x5188F6A0));
  uint64_t v4 = *(void *)a1;
  v3[0] = (1575213817 * (v3 ^ 0x8D65B0CC)) ^ (v1 + 804);
  uint64_t v2 = (char *)*(&off_1EF0E5660 + v1 - 368) - 8;
  (*(void (**)(_DWORD *))&v2[8 * v1 + 15624])(v3);
  __asm { BRAA            X9, X17 }
}

uint64_t sub_19E8D5D1C(int a1, uint64_t a2, uint64_t a3, int a4)
{
  *(unsigned char *)(a2 + (v4 + a1)) = v6;
  return (*(uint64_t (**)(void))(v7 + 8 * (((v4 + 1 + ((v5 - 1243) ^ 0x88B71DBA) < 0x40) * a4) ^ (v5 + 402))))();
}

void sub_19E8D5D5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,int a27,int a28,int a29,uint64_t a30)
{
  STACK[0x230] = (*(uint64_t (**)(uint64_t, uint64_t))(v31 + 8 * a28))(a30, 2965982036);
  int v32 = (*(uint64_t (**)(void))(v31 + 8 * a27))();
  *int v30 = v32 + (a29 ^ 0xFC70809E) - ((2 * v32) & 0xF8E11006);
  JUMPOUT(0x19E8D5E14);
}

void sub_19E8D5E98()
{
}

uint64_t sub_19E8D5EA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  int v44 = 1305237457 * ((2 * ((v43 - 216) & 0x54044E80) - (v43 - 216) + 737915258) ^ 0x924217B4);
  *(_DWORD *)(v43 - 216) = v44 ^ a11;
  *(_DWORD *)(v43 - 200) = v44 + v42 + 564;
  *(void *)(v43 - 208) = a41;
  uint64_t v45 = (*(uint64_t (**)(uint64_t))(v41 + 8 * (v42 + 2336)))(v43 - 216);
  unsigned int v46 = (STACK[0x3A4] & 0x3F ^ 0xD65657FF) + ((2 * LODWORD(STACK[0x3A4])) & 0x36);
  *((unsigned char *)&STACK[0x360] + v46 + 698984485) = 65;
  return (*(uint64_t (**)(uint64_t))(v41
                                            + 8
                                            * ((910
                                              * (v46 + 698984429 < ((123 * ((v42 + 443478092) & 0xE5910FCF ^ 0x43)) ^ 0xFFFFF972))) | v42)))(v45);
}

uint64_t sub_19E8D5FF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 8 * (((((v15 - 368661285) & 0x15F94EFC) - 648) * (v14 == 0)) ^ v15)))(a1, a2, a3, a4, a5, a6, a7, a8, *(void *)(a1 + 8), a10, a11, a12, a13, a14);
}

void sub_19E8D6044(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 8) + 1431787901 * (a1 ^ 0x2B90AAD7);
  __asm { BRAA            X8, X17 }
}

uint64_t sub_19E8D6144@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(void))(v2 + 8 * (((v1 != ((v3 - 242) | 0x80) + a1) * (v3 - 1199)) ^ v3)))();
}

void sub_19E8D6178(uint64_t a1@<X8>, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  a5 = v8;
  a6 = v6;
  a3 = (v9 + 520) ^ ((((&a3 | 0x7ABB9CD8) - (&a3 & 0x7ABB9CD8)) ^ 0xC3023A16) * v7);
  a4 = v8;
  (*(void (**)(unsigned int *))(a1 + 8 * (v9 + 1303)))(&a3);
  JUMPOUT(0x19E8D61D0);
}

uint64_t sub_19E8D61F8(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + v4 + ((4 * v2) ^ 0x1084 ^ (v5 - 260))) = v7;
  return (*(uint64_t (**)(void))(v6 + 8 * (v2 ^ (16 * (((v3 + 1) & 0x1FFFFFFF8) == 8)))))();
}

void sub_19E8D640C()
{
}

uint64_t sub_19E8D6414(uint64_t a1, unsigned int a2)
{
  BOOL v6 = v5 + v4 >= ((v2 - 202) ^ 4 ^ a2);
  return (*(uint64_t (**)(void))(v3 + 8 * ((v6 | (2 * v6)) ^ v2)))();
}

uint64_t sub_19E8D6448(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8 * ((71 * (v3 < 0x6A5ABA73)) ^ (v4 - 98859241))))();
}

uint64_t sub_19E8D648C()
{
  BOOL v4 = v1[7] == 0x64FFE3F0626038CELL || (v1[6] | v1[4]) == 0;
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * (int)((v4 * ((((v0 + 1369714635) ^ 0x51A43EAD) + 331) ^ (v0 + 1369714635) & 0xAE5BCFFF)) ^ v0)))();
}

uint64_t sub_19E8D64F8@<X0>(int a1@<W8>)
{
  BOOL v5 = *(_DWORD *)(v2 + 20) - a1 == 1058315806 || *(_OWORD *)v2 == 0;
  return (*(uint64_t (**)(void))(v3 + 8 * ((v5 * (v1 ^ 0x5BF ^ (9 * (v1 ^ 0x3C2)))) | v1)))();
}

uint64_t sub_19E8D7E78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v21 + 8 * ((869 * (*(_DWORD *)(a20 - 0x19C7A72C32A62CABLL) == ((((v20 + 369) | 4) + 694816665) ^ ((v20 - 929) | 0x60A)))) ^ v20)))(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_19E8D81E0@<X0>(int a1@<W2>, uint64_t a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,char a27)
{
  *(void *)&long long v31 = 0xC1C1C1C1C1C1C1C1;
  *((void *)&v31 + 1) = 0xC1C1C1C1C1C1C1C1;
  *(_OWORD *)(&a27 + (a1 + v27 + v28 - 221)) = v31;
  return (*(uint64_t (**)(void))(v30
                              + 8
                              * (((4 * ((a2 & 0x1FFFFFFF0) != 16)) | (16 * ((a2 & 0x1FFFFFFF0) != 16))) ^ (v29 + 453))))();
}

void sub_19E8D822C(int a1@<W8>, uint64_t a2, uint64_t a3, int a4, uint64_t a5, unsigned int a6, uint64_t a7, unsigned int a8)
{
  unsigned int v10 = (((&a4 | 0x6D5B63BD) + (~&a4 | 0x92A49C42)) ^ 0x46CBC96B) * a1;
  a8 = v10 - 575543967;
  a4 = (v8 - 1291) ^ v10;
  a5 = 0x57D6105BEF2C606DLL;
  a6 = 1368286273 - v10;
  (*(void (**)(int *))(v9 + 8 * (v8 + 195)))(&a4);
  JUMPOUT(0x19E87BE2CLL);
}

uint64_t sub_19E8D82B8@<X0>(uint64_t a1@<X8>)
{
  BOOL v8 = v4 < v3;
  *(unsigned char *)(a1 + (v6 - 283571702)) = *(unsigned char *)(v1 + (v6 - 283571702));
  unsigned int v9 = (((v2 + 1167) | 0x11) ^ 0xB0519317) + v6;
  int v10 = v8 ^ (v9 < v3);
  BOOL v11 = v9 < v4;
  if (!v10) {
    BOOL v8 = v11;
  }
  return (*(uint64_t (**)(void))(v7 + 8 * ((v8 * v5) ^ v2)))();
}

void sub_19E8D8324()
{
}

void sub_19E8D832C(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  int v1 = *(_DWORD *)(a1 + 24) ^ (545147329
                             * ((-184725319 - (a1 ^ 0xD6223E5C | 0xF4FD50B9) + (a1 ^ 0xD6223E5C | 0xB02AF46)) ^ 0x7DD45176));
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(v2 - 0x67AD5A2084A5D3A8);
  LODWORD(v11) = v1
               - 291962093
               * (((&v9 | 0xBAFD9269) - &v9 + (&v9 & 0x45026D90)) ^ 0xAB0F9F23)
               + 336;
  uint64_t v13 = v6;
  uint64_t v14 = v3;
  uint64_t v9 = v2;
  int v10 = &STACK[0x7CF6A079DDC72544];
  uint64_t v12 = v5;
  uint64_t v7 = (char *)*(&off_1EF0E5660 + (v1 ^ 0x7CA)) - 8;
  (*(void (**)(uint64_t *))&v7[8 * v1 + 3280])(&v9);
  uint64_t v8 = *(void *)(v2 - 0x67AD5A2084A5D3B0);
  LODWORD(v9) = v1
              + 1305237457 * ((&v9 & 0x786735E6 | ~(&v9 | 0x786735E6)) ^ 0x3E216CD7)
              - 604;
  int v10 = &STACK[0x7CF6A079DDC72554];
  uint64_t v11 = v8;
  (*(void (**)(uint64_t *))&v7[8 * v1 + 3312])(&v9);
  uint64_t v9 = v4;
  LODWORD(v10) = (653146051
                * ((-811315147
                  - (&v9 ^ 0x863B8F6D | 0xCFA45035)
                  + (&v9 ^ 0x863B8F6D | 0x305BAFCA)) ^ 0x1C749545)) ^ (v1 - 30);
  (*(void (**)(uint64_t *))&v7[8 * (v1 ^ 0xE06)])(&v9);
  __asm { BRAA            X8, X17 }
}

uint64_t sub_19E8D85B0@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(void))(v3 + 8 * ((2371 * (a2 + 1 == v2 + 32)) ^ a1)))();
}

uint64_t sub_19E8D872C(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  int v2 = 402930427 * (((a1 | 0x13E3F966) - a1 + (a1 & 0xEC1C0699)) ^ 0x95A05DB);
  int v3 = *(_DWORD *)(a1 + 48) - v2;
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  unsigned int v8 = 961177747 * ((((2 * &v10) | 0x13EB67B2) - &v10 - 167097305) ^ 0x2EA742C5);
  int v14 = *(_DWORD *)(a1 + 8) - v2 + v8 + 48670875;
  uint64_t v10 = v4;
  uint64_t v12 = v7;
  uint64_t v13 = v5;
  uint64_t v15 = v6;
  unsigned int v16 = v3 + 114529946 - v8;
  uint64_t result = (*((uint64_t (**)(uint64_t *))*(&off_1EF0E5660 + (int)(v3 ^ 0xF92C6AE7)) + v3 + 114531996))(&v10);
  *(_DWORD *)(a1 + 12) = v11;
  return result;
}

uint64_t sub_19E8D8878(uint64_t a1)
{
  int v1 = 961177747 * (((a1 | 0x350C175F) - (a1 & 0x350C175F)) ^ 0x125EE643);
  int v2 = *(_DWORD *)(a1 + 16) - v1;
  int v3 = *(_DWORD *)(a1 + 4) - v1;
  if (v3 < 0) {
    int v3 = -v3;
  }
  unsigned int v4 = ((v3 >> 4) & 0x25DF37A) + ((v3 >> 5) ^ 0xF92EF9BD);
  int v5 = *(_DWORD *)(*(void *)(a1 + 8) - 0x7CF6A079DDC72530);
  unsigned int v7 = v5 - 263820150;
  BOOL v6 = v5 - 263820150 < 0;
  unsigned int v8 = 263820150 - v5;
  if (!v6) {
    unsigned int v8 = v7;
  }
  unsigned int v9 = v8 - 1152853371;
  BOOL v10 = v8 > 0x44B7257A;
  if (v10 == v4 - 1038491448 < 0xBB48DA85) {
    BOOL v10 = v4 - 1038491448 < v9;
  }
  return (*((uint64_t (**)(void))*(&off_1EF0E5660 + (v2 ^ 0x389)) + ((!v10 * (v2 ^ 0x3EF)) | v2) - 1))();
}

void sub_19E8D898C()
{
  (*(void (**)(unint64_t *, void, uint64_t))(v2 + 8 * (int)(v0 & 0xF5EC70BD ^ 0x91B)))(&STACK[0x308], 0, 1024);
  *(void *)(v3 + 1040) = &STACK[0x308];
  LODWORD(STACK[0x274]) = 8;
  STACK[0x200] = (v4 - 152) | 0x8CA1C0692D94F82ALL;
  unint64_t v5 = 1305237457 * ((v4 - 152) ^ 0xD15D9971B9B9A6CELL);
  STACK[0x260] = v5;
  STACK[0x258] = v5 ^ 0x821D092F;
  unint64_t v6 = 1305237457
     * ((((v4 - 152) | 0x30AE2EF619693BA0) - (v4 - 152) + ((v4 - 152) & 0xCF51D109E696C458)) ^ 0xE1F3B787A0D09D6ELL);
  STACK[0x250] = v6;
  STACK[0x248] = v6 ^ 0xBEDC7F0B;
  LODWORD(STACK[0x228]) = v1 - 1621051857;
  LODWORD(STACK[0x224]) = v1 + 27088027;
  JUMPOUT(0x19E8D9904);
}

uint64_t sub_19E8D8DB0()
{
  uint64_t v6 = *(void *)(v9 + 32);
  int v7 = 583844137 * ((-353127087 - ((v5 - 144) | 0xEAF3B551) + ((v5 - 144) | 0x150C4AAE)) ^ 0x5D2F723);
  *(_DWORD *)(v5 - 128) = v7 + 748716562;
  *(_DWORD *)(v5 - 144) = v7 + v1 - 1043;
  *(void *)(v5 - 136) = v10;
  (*(void (**)(uint64_t))(v0 + 8 * (v1 ^ 0xED5)))(v5 - 144);
  *(void *)(v5 - 120) = v4;
  *(void *)(v5 - 112) = v2;
  *(void *)(v5 - 144) = v3;
  *(void *)(v5 - 136) = v2;
  *(void *)(v5 - 104) = v10;
  *(_DWORD *)(v5 - 128) = v1
                        - 291962093
                        * (((((v5 - 144) | 0x2F981028) ^ 0xFFFFFFFE) - (~(v5 - 144) | 0xD067EFD7)) ^ 0xC195E29D)
                        + 336;
  (*(void (**)(uint64_t))(v0 + 8 * (v1 ^ 0xEAA)))(v5 - 144);
  *(_DWORD *)(v5 - 144) = v1 + 1305237457 * ((v5 - 144) ^ 0xB9B9A6CE) - 604;
  *(void *)(v5 - 136) = v6;
  *(void *)(v5 - 128) = v2;
  return (*(uint64_t (**)(uint64_t))(v0 + 8 * (v1 ^ 0xEA6)))(v5 - 144);
}

uint64_t sub_19E8D8F14@<X0>(int a1@<W0>, char a2@<W4>, int a3@<W7>, int a4@<W8>, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned char *a9, int a10, int a11)
{
  int v18 = v12 - 1861682800;
  int v19 = a4
      - 925041428
      - 2 * ((a4 + 1009074172) & 0x7F47AE3F ^ (a4 - 925041428) & a1)
      + ((v11 + 413) | 0x211)
      + 1922034471;
  unsigned int v20 = ((v18 + 1405659847) ^ 0x43C3D3F3) - 44964959 - ((2 * ((v18 + 1405659847) ^ 0x43C3D3F3)) & 0xFAA3C742);
  int v21 = 2 * v18 - ((4 * v18 + 1327672092) & 0x7CDC920C) + 1711251092;
  unsigned int v22 = v15 - 1973236789;
  unsigned int v23 = ((((v19 ^ 0x7F47AE34u) >> (a2 & 0x10 ^ 0x10))
        + 1041956221
        - ((2 * ((v19 ^ 0x7F47AE34u) >> (a2 & 0x10 ^ 0x10))) & 0x7C35FAFA)) ^ 0x3E1AFD7D) >> (a2 & 0x10);
  unsigned int v24 = bswap32((v21 & 0x8787A7E6 ^ 0x4FF1DE7B) + (v20 ^ 0xFD51E3A1) + ((2 * v21) & 0x30F0EC8 ^ 0xC0208) + 906502275);
  unsigned int v25 = v13 - 606913007;
  unsigned int v26 = v14 - 1131729401;
  unsigned int v27 = bswap32(v22);
  char v28 = v27 - ((2 * v27) & 0xEF);
  int v29 = HIWORD(v27) - ((v27 >> 15) & 0xC0);
  int v30 = (v27 >> 8) - ((v27 >> 7) & 0xD4);
  int v31 = HIBYTE(v27) - ((v27 >> 23) & 0x12);
  unsigned int v32 = bswap32(v25);
  unsigned int v33 = bswap32(v26);
  *a9 = (v24 - ((2 * v24) & 0x4E) - 89) ^ 0xA7;
  a9[1] = (BYTE1(v24) - ((v24 >> 7) & 0x20) - 112) ^ 0x90;
  a9[2] = (BYTE2(v24) - ((v24 >> 15) & 0xE2) + 113) ^ 0x71;
  a9[4] = HIBYTE(v19) ^ 0x7F;
  a9[6] = BYTE1(v19) ^ 0xAE;
  a9[3] = (HIBYTE(v24) - ((v24 >> 23) & 0x6C) - 74) ^ 0xB6;
  a9[5] = ((v23 - ((2 * v23) & 4) + 30) ^ 2) - 28;
  a9[8] = (v28 + 119) ^ 0x77;
  a9[9] = (v30 + 106) ^ 0x6A;
  a9[7] = v19 ^ 0x34;
  a9[10] = (v29 + 96) ^ 0x60;
  a9[11] = (v31 - 119) ^ 0x89;
  a9[12] = (v32 - ((v32 >> 5) << 6) - 32) ^ 0xE0;
  a9[14] = (BYTE2(v32) - ((v32 >> 15) & 0x82) - 63) ^ 0xC1;
  a9[13] = (BYTE1(v32) - ((v32 >> 7) & 0x20) + 16) ^ 0x10;
  a9[16] = (v33 + (v16 | ~(2 * v33)) - 52) ^ 0xCB;
  a9[15] = (HIBYTE(v32) - ((v32 >> 23) & 0x88) + 68) ^ 0x44;
  a9[19] = (HIBYTE(v33) - ((v33 >> 23) & 0xFC) - 2) ^ 0xFE;
  a9[18] = (BYTE2(v33) - ((v33 >> 15) & 0x52) + 41) ^ 0x29;
  a9[17] = (BYTE1(v33) - ((v33 >> 7) & 4) - 126) ^ 0x82;
  return (*(uint64_t (**)(void))(v17 + 8 * (v11 ^ (251 * (a3 & ~a11)))))();
}

uint64_t sub_19E8D92C4@<X0>(unsigned int a1@<W3>, int a2@<W8>)
{
  if (a2 == (v2 ^ (v3 + 391) ^ 0x1D3A837C)) {
    int v4 = -694859515;
  }
  else {
    int v4 = a2;
  }
  return v4 ^ a1;
}

uint64_t sub_19E8D9328(uint64_t result)
{
  unint64_t v1 = 402930427 * (((result | 0xA6437F5B6077367) - result + (result & 0xF59BC80A49F88C98)) ^ 0x7FC40931ACBE8FDALL);
  unint64_t v2 = *(void *)result ^ v1;
  unint64_t v3 = *(void *)(result + 8) - v1;
  BOOL v4 = v2 == v3;
  BOOL v5 = v2 >= v3;
  int v6 = !v4;
  if (((*(_DWORD *)(result + 16) - v1) & 1) == 0) {
    BOOL v5 = v6;
  }
  BOOL v4 = !v5;
  uint64_t v7 = 28;
  if (!v4) {
    uint64_t v7 = 20;
  }
  *(_DWORD *)(result + 24) = (*(_DWORD *)(result + v7) + v1) ^ (*(_DWORD *)(result + 32) + v1);
  return result;
}

uint64_t sub_19E8D93CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, unsigned int a15, uint64_t a16, uint64_t a17, int a18, unsigned int a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,unsigned int a25)
{
  HIDWORD(a14) = v26 + 1699284791;
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v27 + 8 * ((3380 * (a15 < 0xFFFFFFFE)) ^ (v25 - 141))))(a1, a25, a3, a4, a5, 3290836464, a19, 2447201948, a9, a10, a11, a12, a13, a14);
}

void sub_19E8D9454(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  int v1 = *(_DWORD *)(a1 + 12) - 1431787901 * (((a1 | 0x3F1050A9) - a1 + (a1 & 0xC0EFAF56)) ^ 0x1480FA7E);
  uint64_t v2 = *(void *)a1;
  v4[0] = (1575213817 * ((v4 & 0xDF2C1199 | ~(v4 | 0xDF2C1199)) ^ 0xADB65EAA)) ^ (v1 + 368);
  uint64_t v5 = v2;
  unint64_t v3 = (char *)*(&off_1EF0E5660 + v1 - 804) - 8;
  (*(void (**)(_DWORD *))&v3[8 * v1 + 12136])(v4);
  __asm { BRAA            X8, X17 }
}

uint64_t sub_19E8D9568@<X0>(uint64_t a1@<X8>)
{
  unsigned int v8 = v3 + 1431787901 * (&v5 ^ 0x2B90AAD7) - 788;
  uint64_t v5 = v1;
  uint64_t v6 = v2;
  uint64_t v7 = v2;
  return (*(uint64_t (**)(uint64_t *))(a1 + 8 * (v3 ^ 0xD5Bu)))(&v5);
}

uint64_t sub_19E8D95B0(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 4);
  *(void *)(a1 + 64) = *(void *)(a2 + 8);
  return 0;
}

uint64_t sub_19E8D95C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, int a9@<W8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 8 * ((3305 * ((((int)a7 + *(_DWORD *)(a5 + 24 * (a9 - 2057538115) + 8) + 2033) & 0xFFFFFFFFFFFFFFELL) == ((v13 - v14 + 1701061740) & 0x664B47FF) - 309)) ^ v13)))(a1, a2, a3, a4, a5, a6, a7, a8, a10, a11, a12, a13);
}

void sub_19E8D9674(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16) + 291962093 * (((a1 | 0xAE2E1E7A) - a1 + (a1 & 0x51D1E185)) ^ 0xBFDC1330);
  __asm { BRAA            X14, X17 }
}

void sub_19E8D98F0()
{
}

uint64_t sub_19E8D993C(uint64_t a1, int a2, int a3)
{
  return (*(uint64_t (**)(void))(v3 + 8 * (((a3 + 8 == v4 + 32) * (a2 - 915)) ^ a2)))();
}

void sub_19E8DA040()
{
  int v1 = (const float *)(v0 + 908);
  vld1q_dup_f32(v1);
  JUMPOUT(0x19E8DA0E8);
}

uint64_t sub_19E8DA1C8()
{
  return (*(uint64_t (**)(void))(v2 + 8 * ((23 * (v1 != ((13 * (v0 ^ 0x67E)) ^ 0x518E6196))) ^ v0)))();
}

uint64_t sub_19E8DA204()
{
  int v5 = (32 * v0) ^ 0x6040;
  uint64_t v6 = (*(uint64_t (**)(void, void))(v2 + 8 * (v0 + 1575)))(*v4, ((32 * v0) ^ 0x98CB173F) + v1);
  return (*(uint64_t (**)(uint64_t))(v2
                                            + 8
                                            * (int)(((103 * (v5 ^ 0x750) + ((v5 + 1538097197) & 0xA4527EF3) - 3239)
                                                   * (*v3 != 0)) ^ v5)))(v6);
}

void sub_19E8DA284()
{
}

uint64_t sub_19E8DA460(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, uint64_t a14)
{
  int v19 = 402930427 * ((2 * ((v18 - 136) & 0x16CA40F0) - (v18 - 136) + 1765129994) ^ 0x738C43B7);
  *(_DWORD *)(v18 - 120) = 987484633 - v19;
  *(void *)(v18 - 128) = v14;
  *(_DWORD *)(v18 - 136) = (a13 - 164) ^ v19;
  (*(void (**)(uint64_t))(v15 + 8 * (a13 ^ 0xF37)))(v18 - 136);
  *(_DWORD *)(v18 - 136) = a13
                         + 1305237457 * ((((v18 - 136) | 0xCF88F6B) + (~(v18 - 136) | 0xF3077094)) ^ 0xB54129A4)
                         - 246;
  *(void *)(v18 - 128) = v16;
  *(void *)(v18 - 120) = a14;
  (*(void (**)(uint64_t))(v15 + 8 * (a13 ^ 0xF0C)))(v18 - 136);
  *(void *)(v18 - 128) = a14;
  *(void *)(v18 - 120) = v14;
  *(_DWORD *)(v18 - 132) = a13 + ((((2 * (v18 - 136)) | 0x8F9B4182) - (v18 - 136) + 942825279) ^ 0xD63FAD8B) * v17 - 546;
  uint64_t v20 = (*(uint64_t (**)(uint64_t))(v15 + 8 * (a13 + 717)))(v18 - 136);
  return (*(uint64_t (**)(uint64_t))(v15
                                            + 8
                                            * (((*(_DWORD *)(v18 - 136) <= ((a13 - 63) ^ 0x3BBF84E6u)) * (a13 ^ 0x650)) ^ a13)))(v20);
}

void sub_19E8DA5CC()
{
}

uint64_t sub_19E8DA64C(uint64_t a1, uint64_t a2, int a3)
{
  STACK[0x380] = 0;
  return (*(uint64_t (**)(void))(v5 + 8 * (((v4 != a3 + 2 * (v3 ^ 0x72C) - 1874) * ((v3 ^ 0x72C) - 918)) ^ v3)))();
}

uint64_t sub_19E8DA688(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t *a22,uint64_t a23,int a24)
{
  STACK[0x278] = 0x200000005;
  uint64_t v28 = *a22;
  uint64_t v29 = *(void *)(*a22 + 24);
  STACK[0x280] = v29 + 101;
  LODWORD(STACK[0x288]) = a24;
  STACK[0x290] = v29 + 16;
  LODWORD(STACK[0x298]) = 20;
  STACK[0x2A0] = *(void *)(v28 + 48);
  LODWORD(STACK[0x2A8]) = 32;
  STACK[0x2B0] = v27 - 184;
  LODWORD(STACK[0x2B8]) = 32;
  STACK[0x2C0] = (unint64_t)&STACK[0x708];
  STACK[0x2C8] = (unint64_t)&STACK[0x274];
  LODWORD(STACK[0x2D0]) = 1;
  STACK[0x2D8] = *(void *)(v28 + 24) + 37;
  LODWORD(STACK[0x2E0]) = 64;
  STACK[0x2E8] = (unint64_t)&STACK[0x710];
  LODWORD(STACK[0x2F0]) = 64;
  *(void *)(v26 + 1320) = a10;
  *(_DWORD *)(v27 - 152) = v24
                         - 1431787901 * ((2 * ((v27 - 152) & 0x7E95EF30) - (v27 - 152) - 2123755317) ^ 0xAAFABA1C)
                         + 1403485942;
  uint64_t v30 = (*(uint64_t (**)(uint64_t))(v25 + 8 * (v24 ^ 0xA6A)))(v27 - 152);
  return (*(uint64_t (**)(uint64_t))(v25
                                            + 8
                                            * (((*(_DWORD *)(v27 - 136) == ((v24 + 769542347) & 0xD221B6AF ^ 0x296A1051))
                                              * ((v24 + 554) ^ 0x4DB)) ^ (v24 + 419))))(v30);
}

void sub_19E8DA7E0()
{
}

uint64_t sub_19E8DAFA0(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  return (*(uint64_t (**)(void))(v5
                              + 8
                              * (((67 * (a4 ^ 0x85)) ^ (v4 < ((a4 - 266251225) & 0xFDEA7FD ^ 0x39Du))) & 1 | (32 * (((67 * (a4 ^ 0x85)) ^ (v4 < ((a4 - 266251225) & 0xFDEA7FD ^ 0x39Du))) & 1)) | a4)))();
}

char *sub_19E8DAFF8(char *result, char *a2, unint64_t a3)
{
  if (((a2 ^ result) & 7) != 0)
  {
    if ((a3 + 7) >= 8)
    {
      unsigned int v9 = (a3 + 7) >> 3;
      switch(a3 & 7)
      {
        case 1uLL:
          goto LABEL_23;
        case 2uLL:
          goto LABEL_22;
        case 3uLL:
          goto LABEL_21;
        case 4uLL:
          goto LABEL_20;
        case 5uLL:
          goto LABEL_19;
        case 6uLL:
          goto LABEL_18;
        case 7uLL:
          goto LABEL_17;
        default:
          do
          {
            char v21 = *result++;
            *a2++ = v21;
LABEL_17:
            char v22 = *result++;
            *a2++ = v22;
LABEL_18:
            char v23 = *result++;
            *a2++ = v23;
LABEL_19:
            char v24 = *result++;
            *a2++ = v24;
LABEL_20:
            char v25 = *result++;
            *a2++ = v25;
LABEL_21:
            char v26 = *result++;
            *a2++ = v26;
LABEL_22:
            char v27 = *result++;
            *a2++ = v27;
LABEL_23:
            char v28 = *result++;
            *a2++ = v28;
            --v9;
          }
          while (v9);
          break;
      }
    }
  }
  else
  {
    unint64_t v10 = -(int)result & 7;
    switch((int)v10)
    {
      case 1:
        goto LABEL_11;
      case 2:
        goto LABEL_10;
      case 3:
        goto LABEL_9;
      case 4:
        goto LABEL_8;
      case 5:
        goto LABEL_7;
      case 6:
        goto LABEL_6;
      case 7:
        char v11 = *result++;
        *a2++ = v11;
LABEL_6:
        char v12 = *result++;
        *a2++ = v12;
LABEL_7:
        char v13 = *result++;
        *a2++ = v13;
LABEL_8:
        char v14 = *result++;
        *a2++ = v14;
LABEL_9:
        char v15 = *result++;
        *a2++ = v15;
LABEL_10:
        char v16 = *result++;
        *a2++ = v16;
LABEL_11:
        char v17 = *result++;
        *a2++ = v17;
        break;
      default:
        break;
    }
    BOOL v18 = a3 >= v10;
    unint64_t v19 = a3 - v10;
    if (!v18) {
      unint64_t v19 = 0;
    }
    if (v19 >= 8)
    {
      unint64_t v20 = ((v19 >> 3) + 7) >> 3;
      switch((v19 >> 3) & 7)
      {
        case 1uLL:
          goto LABEL_32;
        case 2uLL:
          goto LABEL_31;
        case 3uLL:
          goto LABEL_30;
        case 4uLL:
          goto LABEL_29;
        case 5uLL:
          goto LABEL_28;
        case 6uLL:
          goto LABEL_27;
        case 7uLL:
          goto LABEL_26;
        default:
          do
          {
            uint64_t v29 = *(void *)result;
            result += 8;
            *(void *)a2 = v29;
            a2 += 8;
LABEL_26:
            uint64_t v30 = *(void *)result;
            result += 8;
            *(void *)a2 = v30;
            a2 += 8;
LABEL_27:
            uint64_t v31 = *(void *)result;
            result += 8;
            *(void *)a2 = v31;
            a2 += 8;
LABEL_28:
            uint64_t v32 = *(void *)result;
            result += 8;
            *(void *)a2 = v32;
            a2 += 8;
LABEL_29:
            uint64_t v33 = *(void *)result;
            result += 8;
            *(void *)a2 = v33;
            a2 += 8;
LABEL_30:
            uint64_t v34 = *(void *)result;
            result += 8;
            *(void *)a2 = v34;
            a2 += 8;
LABEL_31:
            uint64_t v35 = *(void *)result;
            result += 8;
            *(void *)a2 = v35;
            a2 += 8;
LABEL_32:
            uint64_t v36 = *(void *)result;
            result += 8;
            *(void *)a2 = v36;
            a2 += 8;
            --v20;
          }
          while (v20);
          break;
      }
    }
    switch(v19 & 7)
    {
      case 1uLL:
        goto LABEL_40;
      case 2uLL:
        goto LABEL_39;
      case 3uLL:
        goto LABEL_38;
      case 4uLL:
        goto LABEL_37;
      case 5uLL:
        goto LABEL_36;
      case 6uLL:
        goto LABEL_35;
      case 7uLL:
        char v3 = *result++;
        *a2++ = v3;
LABEL_35:
        char v4 = *result++;
        *a2++ = v4;
LABEL_36:
        char v5 = *result++;
        *a2++ = v5;
LABEL_37:
        char v6 = *result++;
        *a2++ = v6;
LABEL_38:
        char v7 = *result++;
        *a2++ = v7;
LABEL_39:
        char v8 = *result++;
        *a2++ = v8;
LABEL_40:
        *a2 = *result;
        break;
      default:
        return result;
    }
  }
  return result;
}

unsigned char *sub_19E8DB218(unsigned char *result, unsigned int a2, unint64_t a3)
{
  unint64_t v3 = -(int)result & 7;
  if (v3 > a3) {
    LODWORD(v3) = a3;
  }
  switch((int)v3)
  {
    case 1:
      goto LABEL_10;
    case 2:
      goto LABEL_9;
    case 3:
      goto LABEL_8;
    case 4:
      goto LABEL_7;
    case 5:
      goto LABEL_6;
    case 6:
      goto LABEL_5;
    case 7:
      *result++ = a2;
LABEL_5:
      *result++ = a2;
LABEL_6:
      *result++ = a2;
LABEL_7:
      *result++ = a2;
LABEL_8:
      *result++ = a2;
LABEL_9:
      *result++ = a2;
LABEL_10:
      *result++ = a2;
      break;
    default:
      break;
  }
  unint64_t v4 = a3 - v3;
  if (v4 >= 8)
  {
    uint64_t v5 = 0x101010101010101 * a2;
    unint64_t v6 = ((v4 >> 3) + 7) >> 3;
    switch((v4 >> 3) & 7)
    {
      case 1uLL:
        goto LABEL_20;
      case 2uLL:
        goto LABEL_19;
      case 3uLL:
        goto LABEL_18;
      case 4uLL:
        goto LABEL_17;
      case 5uLL:
        goto LABEL_16;
      case 6uLL:
        goto LABEL_15;
      case 7uLL:
        goto LABEL_14;
      default:
        do
        {
          *(void *)uint64_t result = v5;
          result += 8;
LABEL_14:
          *(void *)uint64_t result = v5;
          result += 8;
LABEL_15:
          *(void *)uint64_t result = v5;
          result += 8;
LABEL_16:
          *(void *)uint64_t result = v5;
          result += 8;
LABEL_17:
          *(void *)uint64_t result = v5;
          result += 8;
LABEL_18:
          *(void *)uint64_t result = v5;
          result += 8;
LABEL_19:
          *(void *)uint64_t result = v5;
          result += 8;
LABEL_20:
          *(void *)uint64_t result = v5;
          result += 8;
          --v6;
        }
        while (v6);
        break;
    }
  }
  switch(v4 & 7)
  {
    case 1uLL:
      goto LABEL_28;
    case 2uLL:
      goto LABEL_27;
    case 3uLL:
      goto LABEL_26;
    case 4uLL:
      goto LABEL_25;
    case 5uLL:
      goto LABEL_24;
    case 6uLL:
      goto LABEL_23;
    case 7uLL:
      *result++ = a2;
LABEL_23:
      *result++ = a2;
LABEL_24:
      *result++ = a2;
LABEL_25:
      *result++ = a2;
LABEL_26:
      *result++ = a2;
LABEL_27:
      *result++ = a2;
LABEL_28:
      *uint64_t result = a2;
      break;
    default:
      return result;
  }
  return result;
}

void sub_19E8DB304()
{
}

uint64_t sub_19E8DB470()
{
  if (v3 == v4 + 99) {
    int v6 = v4;
  }
  else {
    int v6 = v3;
  }
  return (*(uint64_t (**)(void))(v5
                              + 8
                              * (int)(((*(void *)(v1 + 8 * (v2 + v6 + 1216) + 8) != 0)
                                     * (((v0 + 1807208565) & 0x94482EE7) - 990)) ^ v0)))();
}

uint64_t sub_19E8DB4D4()
{
  return (*(uint64_t (**)(void))(v3 + 8 * ((1796 * (**(_DWORD **)(v1 + 8 * (v0 ^ 0x3DB)) == v2 + v0 - 791)) ^ v0)))();
}

void sub_19E8DB50C()
{
}

void sub_19E8DB540()
{
}

uint64_t sub_19E8DB548()
{
  uint64_t v5 = *(_DWORD *)(v2 + 44) ^ v0;
  unint64_t v7 = *(void *)(v2 + 8);
  int v6 = *(_DWORD **)(v2 + 16);
  LODWORD(STACK[0x268]) = v1 - 8;
  *int v6 = 0;
  int v8 = 961177747 * ((2043148711 - ((v4 - 152) | 0x79C7F9A7) + ((v4 - 152) | 0x86380658)) ^ 0xA16AF744);
  STACK[0x820] = v7;
  *(_DWORD *)(v4 - 152) = v1 - 1536615827 - v8;
  *(_DWORD *)(v4 - 148) = v8 ^ 0x1AC2D5B8;
  (*(void (**)(uint64_t))(v3 + 8 * (v1 ^ 0xA7D)))(v4 - 152);
  int v9 = *(_DWORD *)(v4 - 136);
  int v10 = 961177747 * ((2 * ((v4 - 152) & 0x3A69EA98) - (v4 - 152) - 980019868) ^ 0xE2C4E478);
  STACK[0x260] = v7;
  STACK[0x820] = v7;
  *(_DWORD *)(v4 - 152) = v1 - 1536615827 - v10;
  *(_DWORD *)(v4 - 148) = v10 ^ 0x1AC2D5BC;
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(v3 + 8 * (v1 ^ 0xA7D)))(v4 - 152);
  unsigned int v12 = *(_DWORD *)(v4 - 136) + v9;
  uint64_t v13 = v12 > 0xFC7A2B18;
  uint64_t v14 = v12 + 59102439;
  unint64_t v15 = 0xFFFFFFFF00000000;
  if (v5 >= (((v1 - 437) | 0x401) ^ 0x65E266A8u)) {
    unint64_t v15 = 0;
  }
  return (*(uint64_t (**)(uint64_t))(v3
                                            + 8
                                            * (((v15 - v5 + v14 + (v13 << 32) == -1650233072)
                                              * (LODWORD(STACK[0x268]) ^ 0x8C8)) ^ v1)))(v11);
}

void sub_19E8DB700(uint64_t a1@<X8>)
{
  *(void *)(*(void *)(v1 + 40) - 0x698EDBACE60CACA4) = a1;
  JUMPOUT(0x19E8DB718);
}

void JsonMapImpl::JsonMapImpl(JsonMapImpl *this)
{
  *(unsigned char *)this = 0;
  *((void *)this + 1) = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)this);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)this);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v2, 0, 0, 1, 2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=((uint64_t)this, (uint64_t)v2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v3, v2[0]);
}

void sub_19E8DB844(_Unwind_Exception *a1)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(v1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(uint64_t a1)
{
  *(unsigned char *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=(uint64_t a1, uint64_t a2)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a2);
  char v4 = *(unsigned char *)a1;
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)a2 = v4;
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = v5;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

uint64_t **nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(uint64_t **a1)
{
  return a1;
}

uint64_t JsonMapImpl::JsonMapImpl(uint64_t a1, void *a2)
{
  *(unsigned char *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  JsonMapImpl::deserialize((unsigned char *)a1, a2);
  return a1;
}

void sub_19E8DB980(_Unwind_Exception *a1)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(v1);
  _Unwind_Resume(a1);
}

void *JsonMapImpl::deserialize(unsigned char *a1, void *a2)
{
  if (*(_DWORD *)((char *)a2 + *(void *)(*a2 - 24) + 32))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3C1380](exception, "Input stream is not valid");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return nlohmann::operator>>(a2, a1);
}

void sub_19E8DBA18(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL JsonMapImpl::getKeys(uint64_t a1, uint64_t *a2)
{
  nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::iter_impl(v9, a1);
  nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::set_begin(v9);
  while (1)
  {
    nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::iter_impl(v8, a1);
    nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::set_end(v8);
    BOOL result = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator==<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,(decltype(nullptr))0>(v9, v8);
    if (result) {
      break;
    }
    uint64_t v5 = (long long *)nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::key(v9);
    unint64_t v6 = a2[1];
    if (v6 >= a2[2])
    {
      uint64_t v7 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a2, v5);
    }
    else
    {
      std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a2, v5);
      uint64_t v7 = v6 + 24;
    }
    a2[1] = v7;
    nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator++(v9);
  }
  return result;
}

uint64_t nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::key(void *a1)
{
  if (!*a1) {
    nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::key();
  }
  if (*(unsigned char *)*a1 != 1)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v3, "cannot use key() for non-object iterators");
    nlohmann::detail::invalid_iterator::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(207, (uint64_t)v3, exception);
  }
  return a1[1] + 32;
}

void sub_19E8DBC1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

unsigned __int8 **nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator++(unsigned __int8 **result)
{
  if (!*result) {
    nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator++();
  }
  int v1 = **result;
  if (v1 == 2)
  {
    result[2] += 16;
  }
  else if (v1 == 1)
  {
    uint64_t v2 = result[1];
    uint64_t v3 = (unsigned __int8 *)*((void *)v2 + 1);
    if (v3)
    {
      do
      {
        char v4 = v3;
        uint64_t v3 = *(unsigned __int8 **)v3;
      }
      while (v3);
    }
    else
    {
      do
      {
        char v4 = (unsigned __int8 *)*((void *)v2 + 2);
        BOOL v5 = *(void *)v4 == (void)v2;
        uint64_t v2 = v4;
      }
      while (!v5);
    }
    result[1] = v4;
  }
  else
  {
    ++result[3];
  }
  return result;
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::at(uint64_t a1, const void **a2)
{
  if (*(unsigned char *)a1 != 1)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    BOOL v5 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name((char *)a1);
    std::string::basic_string[abi:ne180100]<0>(&v8, v5);
    unint64_t v6 = std::string::insert(&v8, 0, "cannot use at() with ");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    std::string::size_type v10 = v6->__r_.__value_.__r.__words[2];
    long long v9 = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(304, (uint64_t)&v9, exception);
  }
  return std::map<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::at(*(void *)(a1 + 8), a2);
}

void sub_19E8DBDAC(uint64_t a1, std::string *a2, long long a3)
{
}

void sub_19E8DBE4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v21 & 1) == 0)
    {
LABEL_8:
      __cxa_end_catch();
      _Unwind_Resume(a1);
    }
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void sub_19E8DBEB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

std::string *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(a1, a2);
}

void sub_19E8DBF40(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void JsonMapImpl::getObject(uint64_t a1, const void **a2)
{
  uint64_t v2 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::at(a1, a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v3, v2);
  operator new();
}

void sub_19E8DC00C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9, uint64_t a10, uint64_t *a11)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a11);
  MEMORY[0x19F3C1920](v11, 0x1022C40B06DCE69);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a9);
  _Unwind_Resume(a1);
}

void JsonMapImpl::setString(unsigned __int8 *a1, const void **a2, uint64_t a3)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string const&,std::string,0>((uint64_t)v6, a3);
  BOOL v5 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](a1, a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=((uint64_t)v5, (uint64_t)v6);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v6);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v7, v6[0]);
}

void sub_19E8DC0C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
}

uint64_t *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](unsigned __int8 *a1, const void **a2)
{
  int v4 = *a1;
  if (!*a1)
  {
    *a1 = 1;
    BOOL v5 = operator new(0x18uLL);
    void v5[2] = 0;
    v5[1] = 0;
    *BOOL v5 = v5 + 1;
    *((void *)a1 + 1) = v5;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)a1);
    int v4 = *a1;
  }
  if (v4 != 1)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    long long v9 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name((char *)a1);
    std::string::basic_string[abi:ne180100]<0>(&v12, v9);
    std::string::size_type v10 = std::string::insert(&v12, 0, "cannot use operator[] with a string argument with ");
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    std::string::size_type v14 = v10->__r_.__value_.__r.__words[2];
    long long v13 = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(305, (uint64_t)&v13, exception);
  }
  unint64_t v6 = (uint64_t **)*((void *)a1 + 1);
  *(void *)&long long v13 = a2;
  return std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, a2, (uint64_t)&std::piecewise_construct, (long long **)&v13)+ 7;
}

void sub_19E8DC1FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void *nlohmann::operator>>(void *a1, unsigned char *a2)
{
  v8[19] = *(void **)MEMORY[0x1E4F143B8];
  v5[0] = a1;
  v5[1] = *(void *)((char *)a1 + *(void *)(*a1 - 24) + 40);
  v6[3] = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::parser<nlohmann::detail::input_stream_adapter>((uint64_t)v5, (uint64_t)v6, 1, 0, (uint64_t)v7);
  nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::parse((uint64_t)v7, 0, a2);
  nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::~lexer(v8);
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::~__value_func[abi:ne180100](v7);
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::~__value_func[abi:ne180100](v6);
  nlohmann::detail::input_stream_adapter::~input_stream_adapter((nlohmann::detail::input_stream_adapter *)v5);
  return a1;
}

void sub_19E8DC334(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v7 = va_arg(va2, void);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::~lexer((void **)(v2 + 40));
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::~__value_func[abi:ne180100]((uint64_t *)va2);
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::~__value_func[abi:ne180100]((uint64_t *)va1);
  nlohmann::detail::input_stream_adapter::~input_stream_adapter((nlohmann::detail::input_stream_adapter *)va);
  _Unwind_Resume(a1);
}

void __clang_call_terminate(void *a1)
{
}

uint64_t JsonMapImpl::serialize(uint64_t a1, uint64_t *a2)
{
  *(uint64_t *)((char *)a2 + *(void *)(*a2 - 24) + 24) = 4;
  uint64_t v2 = nlohmann::operator<<(a2, a1);
  std::ios_base::getloc((const std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)));
  uint64_t v3 = std::locale::use_facet(&v5, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v3->__vftable[2].~facet_0)(v3, 10);
  std::locale::~locale(&v5);
  std::ostream::put();
  return std::ostream::flush();
}

void sub_19E8DC44C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t *nlohmann::operator<<(uint64_t *a1, uint64_t a2)
{
  v15[80] = *(void ***)MEMORY[0x1E4F143B8];
  uint64_t v4 = *a1;
  std::locale v5 = (char *)a1 + *(void *)(*a1 - 24);
  uint64_t v6 = *((void *)v5 + 3);
  *((void *)v5 + 3) = 0;
  uint64_t v7 = (std::__shared_weak_count *)operator new(0x28uLL);
  v7->__shared_owners_ = 0;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF0DDB58;
  v7->__shared_weak_owners_ = 0;
  v7[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF0DD020;
  v7[1].__shared_owners_ = (uint64_t)a1;
  std::string v12 = v7 + 1;
  long long v13 = v7;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  std::string v8 = (const std::ios_base *)((char *)a1 + *(void *)(v4 - 24));
  std::ios_base::fmtflags fmtflags = v8[1].__fmtflags_;
  if (fmtflags == -1)
  {
    std::ios_base::getloc(v8);
    uint64_t v10 = std::locale::use_facet(&v14, MEMORY[0x1E4FBA258]);
    std::ios_base::fmtflags fmtflags = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
    std::locale::~locale(&v14);
    v8[1].__fmtflags_ = fmtflags;
  }
  nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::serializer((uint64_t)v15, (uint64_t)&v12, (char)fmtflags, 0);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(v15, a2, v6 > 0, 0, v6 & ~(v6 >> 63), 0);
  nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~serializer((uint64_t)v15);
  return a1;
}

void sub_19E8DC644(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::locale a11, char a12)
{
  std::locale::~locale(&a11);
  std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  _Unwind_Resume(a1);
}

void JsonMap::JsonMap(JsonMap *this)
{
}

void sub_19E8DC6D0(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x1022C40B06DCE69);
  _Unwind_Resume(a1);
}

void JsonMap::JsonMap()
{
}

void sub_19E8DC750(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x1022C40B06DCE69);
  _Unwind_Resume(a1);
}

void JsonMap::~JsonMap(uint64_t ***this)
{
  uint64_t v1 = *this;
  *this = 0;
  if (v1) {
    std::default_delete<JsonMapImpl>::operator()[abi:ne180100]((uint64_t)this, v1);
  }
}

BOOL JsonMap::hasKey(uint64_t a1, const void **a2)
{
  return **(unsigned char **)a1 == 1
      && std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__count_unique<std::string>(*(void *)(*(void *)a1 + 8), a2) != 0;
}

BOOL JsonMap::getKeys(uint64_t *a1, uint64_t *a2)
{
  return JsonMapImpl::getKeys(*a1, a2);
}

std::string *JsonMap::getString@<X0>(uint64_t *a1@<X0>, const void **a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v4 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::at(*a1, a2);

  return nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v4, a3);
}

void JsonMap::getObject(uint64_t *a1, const void **a2)
{
}

void sub_19E8DC888(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t **a10)
{
  uint64_t v11 = a10;
  a10 = 0;
  if (v11) {
    std::default_delete<JsonMapImpl>::operator()[abi:ne180100]((uint64_t)&a10, v11);
  }
  _Unwind_Resume(exception_object);
}

void JsonMap::setString(unsigned __int8 **a1, const void **a2, uint64_t a3)
{
}

uint64_t JsonMap::serialize(uint64_t *a1, uint64_t *a2)
{
  return JsonMapImpl::serialize(*a1, a2);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(uint64_t result)
{
  switch(*(unsigned char *)result)
  {
    case 1:
      if (*(void *)(result + 8)) {
        return result;
      }
      uint64_t v1 = "m_type != value_t::object || m_value.object != nullptr";
      int v2 = 18026;
      break;
    case 2:
      if (*(void *)(result + 8)) {
        return result;
      }
      uint64_t v1 = "m_type != value_t::array || m_value.array != nullptr";
      int v2 = 18027;
      break;
    case 3:
      if (*(void *)(result + 8)) {
        return result;
      }
      uint64_t v1 = "m_type != value_t::string || m_value.string != nullptr";
      int v2 = 18028;
      break;
    case 8:
      if (*(void *)(result + 8)) {
        return result;
      }
      uint64_t v1 = "m_type != value_t::binary || m_value.binary != nullptr";
      int v2 = 18029;
      break;
    default:
      return result;
  }
  __assert_rtn("assert_invariant", "json.hpp", v2, v1);
}

void nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(uint64_t **a1, int a2)
{
  uint64_t v24 = 0;
  unint64_t v25 = 0;
  unint64_t v26 = 0;
  int v3 = a2 - 1;
  if (a2 == 1)
  {
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::reserve(&v24, (*a1)[2]);
    uint64_t v4 = (uint64_t)(*a1 + 1);
    std::locale v5 = (void *)**a1;
    if (v5 != (void *)v4)
    {
      unint64_t v6 = v25;
      do
      {
        if (v6 >= v26)
        {
          unint64_t v6 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(&v24, (uint64_t)(v5 + 7));
        }
        else
        {
          *(unsigned char *)unint64_t v6 = *((unsigned char *)v5 + 56);
          *(void *)(v6 + 8) = v5[8];
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)(v5 + 7));
          *((unsigned char *)v5 + 56) = 0;
          v5[8] = 0;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v6);
          v6 += 16;
        }
        unint64_t v25 = v6;
        uint64_t v7 = (void *)v5[1];
        if (v7)
        {
          do
          {
            std::string v8 = v7;
            uint64_t v7 = (void *)*v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            std::string v8 = (void *)v5[2];
            BOOL v9 = *v8 == (void)v5;
            std::locale v5 = v8;
          }
          while (!v9);
        }
        std::locale v5 = v8;
      }
      while (v8 != (void *)v4);
    }
  }
  else if (a2 == 2)
  {
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::reserve(&v24, ((*a1)[1] - **a1) >> 4);
    std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,std::back_insert_iterator<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>((uint64_t)&v22, **a1, (*a1)[1], &v24);
  }
  for (unint64_t i = v25; v24 != v25; unint64_t i = v25)
  {
    char v12 = *(unsigned char *)(i - 16);
    uint64_t v11 = i - 16;
    LOBYTE(v22) = v12;
    char v23 = *(uint64_t **)(v11 + 8);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
    *(unsigned char *)uint64_t v11 = 0;
    *(void *)(v11 + 8) = 0;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v22);
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__base_destruct_at_end[abi:ne180100]((uint64_t)&v24, v25 - 16);
    if (v22 == 1)
    {
      long long v13 = v23;
      std::locale v14 = v23 + 1;
      unint64_t v15 = (void *)*v23;
      if ((uint64_t *)*v23 != v23 + 1)
      {
        unint64_t v16 = v25;
        do
        {
          if (v16 >= v26)
          {
            unint64_t v16 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(&v24, (uint64_t)(v15 + 7));
          }
          else
          {
            *(unsigned char *)unint64_t v16 = *((unsigned char *)v15 + 56);
            *(void *)(v16 + 8) = v15[8];
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)(v15 + 7));
            *((unsigned char *)v15 + 56) = 0;
            v15[8] = 0;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v16);
            v16 += 16;
          }
          unint64_t v25 = v16;
          char v17 = (void *)v15[1];
          if (v17)
          {
            do
            {
              BOOL v18 = v17;
              char v17 = (void *)*v17;
            }
            while (v17);
          }
          else
          {
            do
            {
              BOOL v18 = (void *)v15[2];
              BOOL v9 = *v18 == (void)v15;
              unint64_t v15 = v18;
            }
            while (!v9);
          }
          unint64_t v15 = v18;
        }
        while (v18 != v14);
        long long v13 = v23;
      }
      std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::destroy((uint64_t)v13, (char *)v13[1]);
      *long long v13 = (uint64_t)(v13 + 1);
      void v13[2] = 0;
      v13[1] = 0;
    }
    else if (v22 == 2)
    {
      std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,std::back_insert_iterator<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>((uint64_t)&v27, *v23, v23[1], &v24);
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::clear[abi:ne180100](v23);
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v22);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v23, v22);
  }
  switch(v3)
  {
    case 0:
      std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::destroy((uint64_t)*a1, (char *)(*a1)[1]);
      goto LABEL_41;
    case 1:
      int v22 = (void **)*a1;
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100](&v22);
      goto LABEL_41;
    case 2:
      unint64_t v19 = *a1;
      if ((*((char *)*a1 + 23) & 0x80000000) == 0) {
        goto LABEL_42;
      }
      unint64_t v20 = (void *)*v19;
      break;
    case 7:
      unint64_t v19 = *a1;
      int v21 = (void *)**a1;
      if (!v21) {
        goto LABEL_42;
      }
      v19[1] = (uint64_t)v21;
      unint64_t v20 = v21;
      break;
    default:
      goto LABEL_43;
  }
  operator delete(v20);
LABEL_41:
  unint64_t v19 = *a1;
LABEL_42:
  operator delete(v19);
LABEL_43:
  int v22 = (void **)&v24;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100](&v22);
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 4)
  {
    if (a2 >> 60) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(result, a2);
    v7[1] = v7[0] + v5;
    _DWORD v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 16 * v6;
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_19E8DCD80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::clear[abi:ne180100](void *result)
{
  uint64_t v1 = result;
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  if (v2 != *result)
  {
    uint64_t v4 = v2 - 16;
    uint64_t v5 = (unsigned __int8 *)(v2 - 16);
    do
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v4);
      unsigned int v6 = *v5;
      v5 -= 16;
      uint64_t result = (void *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v4 + 8, v6);
      BOOL v7 = v4 == v3;
      uint64_t v4 = (uint64_t)v5;
    }
    while (!v7);
  }
  v1[1] = v3;
  return result;
}

void std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]()
{
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E59A3010, MEMORY[0x1E4FBA1C8]);
}

void sub_19E8DCED0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D0] + 16);
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(16 * a2);
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x1E4FBA350], MEMORY[0x1E4FBA1F8]);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v17 = a6;
  *((void *)&v17 + 1) = a7;
  long long v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  v14[2] = &v17;
  char v15 = 0;
  if (a3 == a5)
  {
    uint64_t v12 = a6;
  }
  else
  {
    uint64_t v9 = a3 - 16;
    do
    {
      *(unsigned char *)(v7 - 16) = *(unsigned char *)v9;
      uint64_t v10 = v7 - 16;
      *(void *)(v10 + 8) = *(void *)(v9 + 8);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v9);
      *(unsigned char *)uint64_t v9 = 0;
      *(void *)(v9 + 8) = 0;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v10);
      uint64_t v7 = *((void *)&v17 + 1) - 16;
      *((void *)&v17 + 1) -= 16;
      BOOL v11 = v9 == a5;
      v9 -= 16;
    }
    while (!v11);
    uint64_t v12 = v17;
  }
  char v15 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v14);
  return v12;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

uint64_t std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  uint64_t v15 = v3;
  uint64_t v16 = v2;
  uint64_t v17 = v3;
  uint64_t v18 = v2;
  uint64_t v4 = *a1;
  uint64_t v5 = (uint64_t *)a1[1];
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  uint64_t v10 = v7;
  uint64_t v11 = v6;
  uint64_t v12 = v7;
  uint64_t v13 = v6;
  return std::__allocator_destroy[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::reverse_iterator<std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>,std::reverse_iterator<std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>>(v4, (uint64_t)v14, (uint64_t)v9);
}

uint64_t std::__allocator_destroy[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::reverse_iterator<std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>,std::reverse_iterator<std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  for (unint64_t i = *(unsigned __int8 **)(a2 + 32); i != *(unsigned __int8 **)(a3 + 32); *(void *)(a2 + 32) = i)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)i);
    uint64_t result = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(i + 8, *i);
    unint64_t i = (unsigned __int8 *)(*(void *)(a2 + 32) + 16);
  }
  return result;
}

uint64_t std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destruct_at_end[abi:ne180100](uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 16);
  if (v2 != a2)
  {
    uint64_t v4 = result;
    do
    {
      *(void *)(v4 + 16) = v2 - 16;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v2 - 16);
      uint64_t result = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v2 - 8, *(unsigned __int8 *)(v2 - 16));
      uint64_t v2 = *(void *)(v4 + 16);
    }
    while (v2 != a2);
  }
  return result;
}

uint64_t std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,std::back_insert_iterator<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    unint64_t v7 = a4[1];
    do
    {
      if (v7 >= a4[2])
      {
        unint64_t v7 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(a4, v5);
      }
      else
      {
        std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__construct_one_at_end[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>((uint64_t)a4, v5);
        v7 += 16;
      }
      a4[1] = v7;
      v5 += 16;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__construct_one_at_end[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  *(unsigned char *)uint64_t v4 = *(unsigned char *)a2;
  *(void *)(v4 + 8) = *(void *)(a2 + 8);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a2);
  *(unsigned char *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t result = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v4);
  *(void *)(a1 + 8) = v4 + 16;
  return result;
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 4;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60) {
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 3 > v5) {
    unint64_t v5 = v8 >> 3;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v9 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  v15[4] = a1 + 2;
  uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(v7, v9);
  uint64_t v11 = (uint64_t)&v10[16 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v15[3] = &v10[16 * v12];
  *(unsigned char *)uint64_t v11 = *(unsigned char *)a2;
  *(void *)(v11 + 8) = *(void *)(a2 + 8);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a2);
  *(unsigned char *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
  v15[2] = v11 + 16;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(a1, v15);
  uint64_t v13 = a1[1];
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)v15);
  return v13;
}

void sub_19E8DD3D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__base_destruct_at_end[abi:ne180100](uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(result + 8);
  if (v4 != a2)
  {
    uint64_t v5 = v4 - 16;
    uint64_t v6 = (unsigned __int8 *)(v4 - 16);
    do
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v5);
      unsigned int v7 = *v6;
      v6 -= 16;
      uint64_t result = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v5 + 8, v7);
      BOOL v8 = v5 == a2;
      uint64_t v5 = (uint64_t)v6;
    }
    while (!v8);
  }
  *(void *)(v3 + 8) = a2;
  return result;
}

void std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::destroy(a1, *(void *)a2);
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::destroy(a1, *((void *)a2 + 1));
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)(a2 + 56));
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(a2 + 64, a2[56]);
    if (a2[55] < 0) {
      operator delete(*((void **)a2 + 4));
    }
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,0>(uint64_t a1)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1 + 24);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(a1 + 32), *(unsigned __int8 *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = (uint64_t)(v4 - 16);
      unsigned int v7 = v4 - 16;
      do
      {
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v6);
        unsigned int v8 = *v7;
        v7 -= 16;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v6 + 8, v8);
        BOOL v9 = v6 == (void)v2;
        uint64_t v6 = (uint64_t)v7;
      }
      while (!v9);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

unsigned char *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::json_value(unsigned char *a1, int a2)
{
  switch(a2)
  {
    case 1:
      uint64_t v3 = operator new(0x18uLL);
      _DWORD v3[2] = 0;
      v3[1] = 0;
      *uint64_t v3 = v3 + 1;
      goto LABEL_8;
    case 2:
      uint64_t v3 = operator new(0x18uLL);
      v3[1] = 0;
      _DWORD v3[2] = 0;
      *uint64_t v3 = 0;
      goto LABEL_8;
    case 3:
      uint64_t v3 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[1]>("");
      goto LABEL_8;
    case 4:
      *a1 = 0;
      return a1;
    case 8:
      uint64_t v3 = operator new(0x20uLL);
      v3[1] = 0;
      _DWORD v3[2] = 0;
      *uint64_t v3 = 0;
      *((_WORD *)v3 + 12) = 0;
LABEL_8:
      *(void *)a1 = v3;
      break;
    default:
      *(void *)a1 = 0;
      break;
  }
  return a1;
}

void *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[1]>(char *a1)
{
  uint64_t v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, a1);
  return v2;
}

void sub_19E8DD6EC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void nlohmann::detail::exception::name(int a1@<W1>, std::string *a2@<X8>)
{
  std::operator+<char>();
  uint64_t v4 = std::string::append(&v12, ".");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v13.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, a1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  unsigned int v8 = std::string::append(&v13, (const std::string::value_type *)p_p, size);
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v14.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  uint64_t v10 = std::string::append(&v14, "] ");
  *a2 = *v10;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
}

void sub_19E8DD820(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (*(char *)(v26 - 41) < 0) {
    operator delete(*(void **)(v26 - 64));
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

nlohmann::detail::exception *nlohmann::detail::exception::exception(nlohmann::detail::exception *this, int a2, const char *a3)
{
  *(void *)this = &unk_1EF0DD050;
  *((_DWORD *)this + 2) = a2;
  MEMORY[0x19F3C1380]((char *)this + 16, a3);
  return this;
}

void sub_19E8DD8D4(_Unwind_Exception *a1)
{
  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

const char *nlohmann::detail::exception::what(const std::runtime_error *this)
{
  return std::runtime_error::what(this + 1);
}

void nlohmann::detail::exception::~exception(std::runtime_error *this)
{
  this->__vftable = (std::runtime_error_vtbl *)&unk_1EF0DD050;
  std::runtime_error::~runtime_error(this + 1);

  std::exception::~exception(this);
}

{
  uint64_t vars8;

  this->__vftable = (std::runtime_error_vtbl *)&unk_1EF0DD050;
  std::runtime_error::~runtime_error(this + 1);
  std::exception::~exception(this);

  JUMPOUT(0x19F3C1920);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(uint64_t a1, uint64_t a2, uint64_t a3, char a4, int a5)
{
  uint64_t v8 = a2;
  *(unsigned char *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  if (a3)
  {
    uint64_t v10 = 24 * a3;
    uint64_t v11 = a2;
    while (1)
    {
      uint64_t v12 = *(void *)(v11 + 16) ? *(void *)(v11 + 16) : v11;
      if (*(unsigned char *)v12 != 2
        || *(void *)(*(void *)(v12 + 8) + 8) - **(void **)(v12 + 8) != 32
        || *(unsigned char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v12, 0) != 3)
      {
        break;
      }
      v11 += 24;
      v10 -= 24;
      if (!v10) {
        goto LABEL_10;
      }
    }
    int v13 = 0;
    if ((a4 & 1) == 0)
    {
LABEL_17:
      if (a5 == 2) {
        int v16 = 0;
      }
      else {
        int v16 = v13;
      }
      if (a5 != 1) {
        LOBYTE(v13) = 1;
      }
      if ((v13 & 1) == 0)
      {
        exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(&v20, "cannot create object from initializer list");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v19);
        nlohmann::detail::type_error::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(301, (uint64_t)&v20, exception);
      }
      if (!v16) {
        goto LABEL_24;
      }
      goto LABEL_12;
    }
  }
  else
  {
LABEL_10:
    int v13 = 1;
    if ((a4 & 1) == 0) {
      goto LABEL_17;
    }
  }
  if (!v13)
  {
LABEL_24:
    *(unsigned char *)a1 = 2;
    uint64_t v20 = v8;
    v19[0] = v8 + 24 * a3;
    *(void *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const*,nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const*>(&v20, v19);
    goto LABEL_25;
  }
LABEL_12:
  *(unsigned char *)a1 = 1;
  std::string v14 = operator new(0x18uLL);
  v14[2] = 0;
  v14[1] = 0;
  void *v14 = v14 + 1;
  *(void *)(a1 + 8) = v14;
  if (a3)
  {
    uint64_t v15 = 24 * a3;
    do
    {
      nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::moved_or_copied(v8, (uint64_t)&v20);
      std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_key_args<std::string,std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(*(uint64_t ***)(a1 + 8), *(const void ***)(*v21 + 8), *(long long **)(*v21 + 8), *v21 + 16);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v20);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v21, v20);
      v8 += 24;
      v15 -= 24;
    }
    while (v15);
  }
LABEL_25:
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void sub_19E8DDBB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
}

void nlohmann::detail::type_error::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(int a1@<W0>, uint64_t a2@<X1>, nlohmann::detail::exception *a3@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&v18, "type_error");
  nlohmann::detail::exception::name(a1, &v20);
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  if ((v17 & 0x80u) == 0) {
    uint64_t v6 = __p;
  }
  else {
    uint64_t v6 = (void **)__p[0];
  }
  if ((v17 & 0x80u) == 0) {
    std::string::size_type v7 = v17;
  }
  else {
    std::string::size_type v7 = (std::string::size_type)__p[1];
  }
  uint64_t v8 = std::string::append(&v20, (const std::string::value_type *)v6, v7);
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  int v10 = *(char *)(a2 + 23);
  if (v10 >= 0) {
    uint64_t v11 = (const std::string::value_type *)a2;
  }
  else {
    uint64_t v11 = *(const std::string::value_type **)a2;
  }
  if (v10 >= 0) {
    std::string::size_type v12 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v12 = *(void *)(a2 + 8);
  }
  int v13 = std::string::append(&v21, v11, v12);
  long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  int64_t v23 = v13->__r_.__value_.__r.__words[2];
  long long v22 = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  if ((char)v17 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  if (v19 < 0) {
    operator delete(v18);
  }
  if (v23 >= 0) {
    uint64_t v15 = (const char *)&v22;
  }
  else {
    uint64_t v15 = (const char *)v22;
  }
  nlohmann::detail::exception::exception(a3, a1, v15);
  *(void *)a3 = &unk_1EF0DCF80;
  if (SHIBYTE(v23) < 0) {
    operator delete((void *)v22);
  }
}

void sub_19E8DDD70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  _Unwind_Resume(exception_object);
}

void nlohmann::detail::type_error::~type_error(std::runtime_error *this)
{
  this->__vftable = (std::runtime_error_vtbl *)&unk_1EF0DD050;
  std::runtime_error::~runtime_error(this + 1);

  std::exception::~exception(this);
}

{
  uint64_t vars8;

  this->__vftable = (std::runtime_error_vtbl *)&unk_1EF0DD050;
  std::runtime_error::~runtime_error(this + 1);
  std::exception::~exception(this);

  JUMPOUT(0x19F3C1920);
}

uint64_t nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::moved_or_copied@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    return nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(a2, v3);
  }
  else
  {
    *(unsigned char *)a2 = *(unsigned char *)a1;
    *(void *)(a2 + 8) = *(void *)(a1 + 8);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
    *(unsigned char *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    return nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a2);
  }
}

void *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const*,nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const*>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = operator new(0x18uLL);
  uint64_t v5 = *a1;
  uint64_t v6 = *a2;
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((*a2 - *a1) >> 3);
  v4[1] = 0;
  _DWORD v4[2] = 0;
  *uint64_t v4 = 0;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__init_with_size[abi:ne180100]<nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const*,nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const*>(v4, v5, v6, v7);
  return v4;
}

void sub_19E8DDF20(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)a1 != 2)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    uint64_t v5 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name((char *)a1);
    std::string::basic_string[abi:ne180100]<0>(&v8, v5);
    uint64_t v6 = std::string::insert(&v8, 0, "cannot use operator[] with a numeric argument with ");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    std::string::size_type v10 = v6->__r_.__value_.__r.__words[2];
    long long v9 = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(305, (uint64_t)&v9, exception);
  }
  return **(void **)(a1 + 8) + 16 * a2;
}

void sub_19E8DE008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

const char *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name(char *a1)
{
  unint64_t v1 = *a1;
  if (v1 > 9) {
    return "number";
  }
  else {
    return off_1E59A37A8[v1];
  }
}

uint64_t *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_key_args<std::string,std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(uint64_t **a1, const void **a2, long long *a3, uint64_t a4)
{
  long long v7 = (uint64_t **)std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::string>((uint64_t)a1, &v13, a2);
  std::string v8 = *v7;
  if (!*v7)
  {
    long long v9 = v7;
    std::string v8 = (uint64_t *)operator new(0x48uLL);
    v11[1] = a1 + 1;
    std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::pair[abi:ne180100]<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,0>((uint64_t)(v8 + 4), a3, a4);
    char v12 = 1;
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, v13, v9, v8);
    v11[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v11, 0);
  }
  return v8;
}

void *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::string>(uint64_t a1, void *a2, const void **a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v7 = a1 + 16;
    do
    {
      while (1)
      {
        std::string v8 = (void *)v4;
        long long v9 = (const void **)(v4 + 32);
        if (!std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(v7, a3, (const void **)(v4 + 32)))break; {
        uint64_t v4 = *v8;
        }
        uint64_t v5 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (!std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(v7, v9, a3)) {
        break;
      }
      uint64_t v5 = v8 + 1;
      uint64_t v4 = v8[1];
    }
    while (v4);
  }
  else
  {
    std::string v8 = (void *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

BOOL std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(uint64_t a1, const void **a2, const void **a3)
{
  int v3 = *((char *)a3 + 23);
  int v4 = *((char *)a2 + 23);
  if (v4 >= 0) {
    size_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v5 = (size_t)a2[1];
  }
  if (v4 >= 0) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = *a2;
  }
  if (v3 >= 0) {
    size_t v7 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v7 = (size_t)a3[1];
  }
  if (v3 >= 0) {
    std::string v8 = a3;
  }
  else {
    std::string v8 = *a3;
  }
  if (v7 >= v5) {
    size_t v9 = v5;
  }
  else {
    size_t v9 = v7;
  }
  int v10 = memcmp(v6, v8, v9);
  if (v10) {
    return v10 < 0;
  }
  else {
    return v5 < v7;
  }
}

uint64_t std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::pair[abi:ne180100]<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,0>(uint64_t a1, long long *a2, uint64_t a3)
{
  long long v5 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v5;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  *(unsigned char *)(a1 + 24) = *(unsigned char *)a3;
  uint64_t v6 = a1 + 24;
  *(void *)(a1 + 32) = *(void *)(a3 + 8);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a3);
  *(unsigned char *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v6);
  return a1;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void *std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__init_with_size[abi:ne180100]<nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const*,nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const*,nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_19E8DE3F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const*,nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  _DWORD v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,0>(v4, v6);
      v6 += 24;
      uint64_t v4 = v11 + 16;
      v11 += 16;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_19E8DE4EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,0>(uint64_t a1, uint64_t a2)
{
  nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::moved_or_copied(a2, (uint64_t)v4);
  *(unsigned char *)a1 = v4[0];
  *(void *)(a1 + 8) = v5;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v4);
  v4[0] = 0;
  long long v5 = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v4);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v5, v4[0]);
  return a1;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::__allocator_destroy[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>(*(void *)a1, **(void **)(a1 + 16), **(void **)(a1 + 16), **(void **)(a1 + 8), **(void **)(a1 + 8));
  }
  return a1;
}

void std::__allocator_destroy[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a3 != a5)
  {
    uint64_t v6 = a3 - 16;
    size_t v7 = (unsigned __int8 *)(a3 - 16);
    do
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v6);
      int v8 = *v7;
      v7 -= 16;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(v6 + 8), v8);
      BOOL v9 = v6 == a5;
      uint64_t v6 = (uint64_t)v7;
    }
    while (!v9);
  }
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a2);
  switch(*(unsigned char *)a1)
  {
    case 1:
      uint64_t v4 = (std::string *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::map<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::map<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const&>(*(const void ****)(a2 + 8));
      goto LABEL_8;
    case 2:
      uint64_t v4 = (std::string *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const&>(*(uint64_t **)(a2 + 8));
      goto LABEL_8;
    case 3:
      uint64_t v4 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,std::string const&>(*(void *)(a2 + 8));
      goto LABEL_8;
    case 4:
      uint64_t v4 = (std::string *)*(unsigned __int8 *)(a2 + 8);
      goto LABEL_8;
    case 5:
    case 6:
    case 7:
      uint64_t v4 = *(std::string **)(a2 + 8);
      goto LABEL_8;
    case 8:
      uint64_t v4 = (std::string *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<nlohmann::byte_container_with_subtype<std::vector<unsigned char>>,nlohmann::byte_container_with_subtype<std::vector<unsigned char>> const&>(*(void *)(a2 + 8));
LABEL_8:
      *(void *)(a1 + 8) = v4;
      break;
    default:
      break;
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

uint64_t *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::map<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::map<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const&>(const void ***a1)
{
  uint64_t v2 = (uint64_t *)operator new(0x18uLL);
  std::map<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::map[abi:ne180100](v2, a1);
  return v2;
}

void sub_19E8DE748(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::map[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_19E8DE79C(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *> *,long>>>(uint64_t *result, const void **a2, const void ***a3)
{
  if (a2 != (const void **)a3)
  {
    uint64_t v4 = a2;
    long long v5 = (uint64_t **)result;
    uint64_t v6 = result + 1;
    do
    {
      uint64_t result = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const&>(v5, v6, v4 + 4, (long long *)v4 + 2);
      size_t v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          int v8 = (const void ***)v7;
          size_t v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          int v8 = (const void ***)v4[2];
          BOOL v9 = *v8 == v4;
          uint64_t v4 = (const void **)v8;
        }
        while (!v9);
      }
      uint64_t v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const&>(uint64_t **a1, uint64_t *a2, const void **a3, long long *a4)
{
  uint64_t v6 = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::string>(a1, a2, &v12, &v11, a3);
  size_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    int v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__construct_node<std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const&>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    size_t v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

const void **std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::string>(void *a1, uint64_t *a2, const void ***a3, uint64_t *a4, const void **a5)
{
  BOOL v9 = (const void **)(a1 + 1);
  if (a1 + 1 != a2
    && !std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>((uint64_t)(a1 + 2), a5, (const void **)a2 + 4))
  {
    if (!std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>((uint64_t)(a1 + 2), (const void **)a2 + 4, a5))
    {
      *a3 = (const void **)a2;
      *a4 = (uint64_t)a2;
      return (const void **)a4;
    }
    a4 = a2 + 1;
    uint64_t v13 = a2[1];
    if (v13)
    {
      long long v14 = (const void **)a2[1];
      do
      {
        uint64_t v15 = v14;
        long long v14 = (const void **)*v14;
      }
      while (v14);
    }
    else
    {
      uint64_t v18 = (const void **)a2;
      do
      {
        uint64_t v15 = (const void **)v18[2];
        BOOL v17 = *v15 == v18;
        uint64_t v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>((uint64_t)(a1 + 2), a5, v15 + 4))goto LABEL_28; {
      uint64_t v13 = *a4;
      }
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = (const void **)a2;
    }
    return (const void **)a4;
  }
  if ((uint64_t *)*a1 == a2)
  {
    char v12 = (const void **)a2;
LABEL_16:
    if (*a2)
    {
      *a3 = v12;
      return v12 + 1;
    }
    else
    {
      *a3 = (const void **)a2;
      return (const void **)a2;
    }
  }
  uint64_t v11 = (const void **)*a2;
  if (*a2)
  {
    do
    {
      char v12 = v11;
      uint64_t v11 = (const void **)v11[1];
    }
    while (v11);
  }
  else
  {
    int v16 = a2;
    do
    {
      char v12 = (const void **)v16[2];
      BOOL v17 = *v12 == v16;
      int v16 = (uint64_t *)v12;
    }
    while (v17);
  }
  if (std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>((uint64_t)(a1 + 2), v12 + 4, a5)) {
    goto LABEL_16;
  }
LABEL_28:

  return (const void **)std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::string>((uint64_t)a1, a3, a5);
}

std::string *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__construct_node<std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const&>@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x48uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_19E8DEAD8(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(&this[1], (char *)a2 + 24);
  return this;
}

void sub_19E8DEB4C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const&>(uint64_t *a1)
{
  uint64_t v2 = operator new(0x18uLL);
  v2[1] = 0;
  v2[2] = 0;
  *uint64_t v2 = 0;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__init_with_size[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>(v2, *a1, a1[1], (a1[1] - *a1) >> 4);
  return v2;
}

void sub_19E8DEBB0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__init_with_size[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_19E8DEC2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  _DWORD v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(v4, v6);
      v6 += 16;
      uint64_t v4 = v11 + 16;
      v11 += 16;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_19E8DECDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

std::string *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,std::string const&>(uint64_t a1)
{
  uint64_t v2 = (std::string *)operator new(0x18uLL);
  int v3 = v2;
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
  }
  return v3;
}

void sub_19E8DED48(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<nlohmann::byte_container_with_subtype<std::vector<unsigned char>>,nlohmann::byte_container_with_subtype<std::vector<unsigned char>> const&>(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  v2[1] = 0;
  v2[2] = 0;
  *uint64_t v2 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v2, *(const void **)a1, *(void *)(a1 + 8), *(void *)(a1 + 8) - *(void *)a1);
  *((_WORD *)v2 + 12) = *(_WORD *)(a1 + 24);
  return v2;
}

void sub_19E8DEDA8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(void *result, const void *a2, uint64_t a3, size_t __sz)
{
  if (__sz)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<unsigned char>::__vallocate[abi:ne180100](result, __sz);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_19E8DEE1C(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned char>::__vallocate[abi:ne180100](void *a1, size_t __sz)
{
  if ((__sz & 0x8000000000000000) != 0) {
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

uint64_t std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__count_unique<std::string>(uint64_t a1, const void **a2)
{
  uint64_t v2 = *(const void ***)(a1 + 8);
  if (v2)
  {
    uint64_t v4 = a1 + 16;
    uint64_t v5 = 1;
    do
    {
      if (!std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(v4, a2, v2 + 4))
      {
        if (!std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(v4, v2 + 4, a2)) {
          return v5;
        }
        ++v2;
      }
      uint64_t v2 = (const void **)*v2;
    }
    while (v2);
  }
  return 0;
}

unsigned __int8 **nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::set_begin(unsigned __int8 **result)
{
  uint64_t v1 = *result;
  if (!*result) {
    __assert_rtn("set_begin", "json.hpp", 11268, "m_object != nullptr");
  }
  int v2 = *v1;
  if (*v1)
  {
    if (v2 == 2)
    {
      result[2] = (unsigned __int8 *)**((void **)v1 + 1);
    }
    else if (v2 == 1)
    {
      result[1] = (unsigned __int8 *)**((void **)v1 + 1);
    }
    else
    {
      result[3] = 0;
    }
  }
  else
  {
    result[3] = (unsigned __int8 *)1;
  }
  return result;
}

void *nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::iter_impl(void *result, uint64_t a2)
{
  *uint64_t result = a2;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0x8000000000000000;
  if (!a2) {
    __assert_rtn("iter_impl", "json.hpp", 11182, "m_object != nullptr");
  }
  return result;
}

unsigned __int8 **nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::set_end(unsigned __int8 **result)
{
  uint64_t v1 = *result;
  if (!*result) {
    __assert_rtn("set_end", "json.hpp", 11305, "m_object != nullptr");
  }
  int v2 = *v1;
  if (v2 == 2)
  {
    result[2] = *(unsigned __int8 **)(*((void *)v1 + 1) + 8);
  }
  else if (v2 == 1)
  {
    result[1] = (unsigned __int8 *)(*((void *)v1 + 1) + 8);
  }
  else
  {
    result[3] = (unsigned __int8 *)1;
  }
  return result;
}

BOOL nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator==<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,(decltype(nullptr))0>(unsigned __int8 **a1, unsigned __int8 **a2)
{
  int v2 = *a1;
  if (*a1 != *a2)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v8, "cannot compare iterators of different containers");
    nlohmann::detail::invalid_iterator::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(212, (uint64_t)v8, exception);
  }
  if (!v2) {
    nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator==<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,(decltype(nullptr))0>();
  }
  int v3 = *v2;
  if (v3 == 2)
  {
    uint64_t v4 = a1[2];
    uint64_t v5 = a2[2];
  }
  else if (v3 == 1)
  {
    uint64_t v4 = a1[1];
    uint64_t v5 = a2[1];
  }
  else
  {
    uint64_t v4 = a1[3];
    uint64_t v5 = a2[3];
  }
  return v4 == v5;
}

void sub_19E8DF134(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void nlohmann::detail::invalid_iterator::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(int a1@<W0>, uint64_t a2@<X1>, nlohmann::detail::exception *a3@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&v18, "invalid_iterator");
  nlohmann::detail::exception::name(a1, &v20);
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  if ((v17 & 0x80u) == 0) {
    uint64_t v6 = __p;
  }
  else {
    uint64_t v6 = (void **)__p[0];
  }
  if ((v17 & 0x80u) == 0) {
    std::string::size_type v7 = v17;
  }
  else {
    std::string::size_type v7 = (std::string::size_type)__p[1];
  }
  size_t v8 = std::string::append(&v20, (const std::string::value_type *)v6, v7);
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  int v10 = *(char *)(a2 + 23);
  if (v10 >= 0) {
    uint64_t v11 = (const std::string::value_type *)a2;
  }
  else {
    uint64_t v11 = *(const std::string::value_type **)a2;
  }
  if (v10 >= 0) {
    std::string::size_type v12 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v12 = *(void *)(a2 + 8);
  }
  uint64_t v13 = std::string::append(&v21, v11, v12);
  long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  int64_t v23 = v13->__r_.__value_.__r.__words[2];
  long long v22 = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  if ((char)v17 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  if (v19 < 0) {
    operator delete(v18);
  }
  if (v23 >= 0) {
    uint64_t v15 = (const char *)&v22;
  }
  else {
    uint64_t v15 = (const char *)v22;
  }
  nlohmann::detail::exception::exception(a3, a1, v15);
  *(void *)a3 = &unk_1EF0DCFF8;
  if (SHIBYTE(v23) < 0) {
    operator delete((void *)v22);
  }
}

void sub_19E8DF2D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  _Unwind_Resume(exception_object);
}

void nlohmann::detail::invalid_iterator::~invalid_iterator(std::runtime_error *this)
{
  this->__vftable = (std::runtime_error_vtbl *)&unk_1EF0DD050;
  std::runtime_error::~runtime_error(this + 1);

  std::exception::~exception(this);
}

{
  uint64_t vars8;

  this->__vftable = (std::runtime_error_vtbl *)&unk_1EF0DD050;
  std::runtime_error::~runtime_error(this + 1);
  std::exception::~exception(this);

  JUMPOUT(0x19F3C1920);
}

void std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(uint64_t a1, long long *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *(void *)(v3 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v3 = v4;
  }
  *(void *)(a1 + 8) = v3 + 24;
}

void sub_19E8DF460(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::string>::__push_back_slow_path<std::string const&>(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9) {
    int v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  }
  else {
    int v10 = 0;
  }
  std::__split_buffer<std::string>::pointer end = v10 + v4;
  __v.__first_ = v10;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v10[v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    std::__split_buffer<std::string>::pointer end = __v.__end_;
  }
  else
  {
    long long v12 = *a2;
    end->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
  }
  __v.__end_ = end + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  uint64_t v13 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v13;
}

void sub_19E8DF578(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    v1 += 24;
  }
}

uint64_t std::map<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::at(uint64_t a1, const void **a2)
{
  uint64_t v2 = *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::string>(a1, &v4, a2);
  if (!v2) {
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  }
  return v2 + 56;
}

void nlohmann::detail::out_of_range::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(int a1@<W0>, uint64_t a2@<X1>, nlohmann::detail::exception *a3@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&v18, "out_of_range");
  nlohmann::detail::exception::name(a1, &v20);
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  if ((v17 & 0x80u) == 0) {
    uint64_t v6 = __p;
  }
  else {
    uint64_t v6 = (void **)__p[0];
  }
  if ((v17 & 0x80u) == 0) {
    std::string::size_type v7 = v17;
  }
  else {
    std::string::size_type v7 = (std::string::size_type)__p[1];
  }
  unint64_t v8 = std::string::append(&v20, (const std::string::value_type *)v6, v7);
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  int v10 = *(char *)(a2 + 23);
  if (v10 >= 0) {
    uint64_t v11 = (const std::string::value_type *)a2;
  }
  else {
    uint64_t v11 = *(const std::string::value_type **)a2;
  }
  if (v10 >= 0) {
    std::string::size_type v12 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v12 = *(void *)(a2 + 8);
  }
  uint64_t v13 = std::string::append(&v21, v11, v12);
  long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  int64_t v23 = v13->__r_.__value_.__r.__words[2];
  long long v22 = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  if ((char)v17 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  if (v19 < 0) {
    operator delete(v18);
  }
  if (v23 >= 0) {
    uint64_t v15 = (const char *)&v22;
  }
  else {
    uint64_t v15 = (const char *)v22;
  }
  nlohmann::detail::exception::exception(a3, a1, v15);
  *(void *)a3 = &unk_1EF0DCFD0;
  if (SHIBYTE(v23) < 0) {
    operator delete((void *)v22);
  }
}

void sub_19E8DF77C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  _Unwind_Resume(exception_object);
}

void nlohmann::detail::out_of_range::~out_of_range(std::runtime_error *this)
{
  this->__vftable = (std::runtime_error_vtbl *)&unk_1EF0DD050;
  std::runtime_error::~runtime_error(this + 1);

  std::exception::~exception(this);
}

{
  uint64_t vars8;

  this->__vftable = (std::runtime_error_vtbl *)&unk_1EF0DD050;
  std::runtime_error::~runtime_error(this + 1);
  std::exception::~exception(this);

  JUMPOUT(0x19F3C1920);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
  return result;
}

std::string *nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(uint64_t a1, std::string *this)
{
  if (*(unsigned char *)a1 != 3)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    std::string::size_type v7 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name((char *)a1);
    std::string::basic_string[abi:ne180100]<0>(&v10, v7);
    unint64_t v8 = std::string::insert(&v10, 0, "type must be string, but is ");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    std::string::size_type v12 = v8->__r_.__value_.__r.__words[2];
    long long v11 = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(302, (uint64_t)&v11, exception);
  }
  uint64_t v4 = *(const std::string **)(a1 + 8);

  return std::string::operator=(this, v4);
}

void sub_19E8DF9C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void std::default_delete<JsonMapImpl>::operator()[abi:ne180100](uint64_t a1, uint64_t **a2)
{
  if (a2)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)a2);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(a2 + 1, *(unsigned __int8 *)a2);
    JUMPOUT(0x19F3C1920);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  std::string::size_type v7 = *v6;
  if (!*v6)
  {
    unint64_t v8 = v6;
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, v11, v8, v10[0]);
    std::string::size_type v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x48uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::pair[abi:ne180100]<std::string const&>((std::string *)(v6 + 32), *a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_19E8DFB8C(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::pair[abi:ne180100]<std::string const&>(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v3 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  this[1].__r_.__value_.__s.__data_[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&this[1]);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&this[1]);
  return this;
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string const&,std::string,0>(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  *(void *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,std::string const&>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::parser<nlohmann::detail::input_stream_adapter>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int8 a3@<W2>, char a4@<W3>, uint64_t a5@<X8>)
{
  _DWORD v10[4] = *MEMORY[0x1E4F143B8];
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)v10, a2);
  nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::parser(a5, a1, (uint64_t)v10, a3, a4);
  return std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::~__value_func[abi:ne180100](v10);
}

void sub_19E8DFCFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::parse(uint64_t a1, int a2, unsigned char *a3)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 24))
  {
    std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)v28, a1);
    nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::json_sax_dom_callback_parser((uint64_t)&v29, (uint64_t)a3, (uint64_t)v28, *(unsigned char *)(a1 + 184));
    std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::~__value_func[abi:ne180100](v28);
    nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::sax_parse_internal<nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(a1, (uint64_t *)&v29);
    if (a2)
    {
      int v6 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan((int64x2_t *)(a1 + 40));
      *(_DWORD *)(a1 + 32) = v6;
      if (v6 != 15)
      {
        uint64_t v7 = *(void *)(a1 + 72);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string(a1 + 40, &v27);
        long long v23 = *(_OWORD *)(a1 + 72);
        uint64_t v24 = *(void *)(a1 + 88);
        std::string::basic_string[abi:ne180100]<0>(v20, "value");
        nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::exception_message(a1, 0xFu, (uint64_t)v20, &__p);
        v18[0] = 0;
        char v19 = 0;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v18);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v18);
        nlohmann::detail::parse_error::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(101, (uint64_t *)&v23, (uint64_t)&__p, (nlohmann::detail::exception *)&v25);
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error<nlohmann::detail::parse_error>((uint64_t)&v29, v7, (uint64_t)&v27, (const nlohmann::detail::parse_error *)&v25);
        v25.__vftable = (std::exception_vtbl *)&unk_1EF0DD050;
        std::runtime_error::~runtime_error(&v26);
        std::exception::~exception(&v25);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v18);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v19, v18[0]);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (v21 < 0) {
          operator delete(v20[0]);
        }
        if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v27.__r_.__value_.__l.__data_);
        }
      }
    }
    if (v34)
    {
      v16[0] = 9;
      unsigned __int8 v17 = 0;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v16);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=((uint64_t)a3, (uint64_t)v16);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v16);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v17, v16[0]);
      nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_sax_dom_callback_parser((uint64_t)&v29);
      return;
    }
    if (*a3 == 9)
    {
      v14[0] = 0;
      uint64_t v15 = 0;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v14);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v14);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=((uint64_t)a3, (uint64_t)v14);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v14);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v15, v14[0]);
    }
    nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_sax_dom_callback_parser((uint64_t)&v29);
    goto LABEL_29;
  }
  char v8 = *(unsigned char *)(a1 + 184);
  uint64_t v29 = a3;
  long long v30 = 0u;
  long long v31 = 0u;
  unsigned __int8 v32 = 0;
  char v33 = v8;
  nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::sax_parse_internal<nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(a1, (uint64_t *)&v29);
  if (a2)
  {
    int v9 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan((int64x2_t *)(a1 + 40));
    *(_DWORD *)(a1 + 32) = v9;
    if (v9 != 15)
    {
      uint64_t v10 = *(void *)(a1 + 72);
      nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string(a1 + 40, &v27);
      long long v23 = *(_OWORD *)(a1 + 72);
      uint64_t v24 = *(void *)(a1 + 88);
      std::string::basic_string[abi:ne180100]<0>(v20, "value");
      nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::exception_message(a1, 0xFu, (uint64_t)v20, &__p);
      v18[0] = 0;
      char v19 = 0;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v18);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v18);
      nlohmann::detail::parse_error::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(101, (uint64_t *)&v23, (uint64_t)&__p, (nlohmann::detail::exception *)&v25);
      nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error<nlohmann::detail::parse_error>((uint64_t)&v29, v10, (uint64_t)&v27, (const nlohmann::detail::parse_error *)&v25);
      v25.__vftable = (std::exception_vtbl *)&unk_1EF0DD050;
      std::runtime_error::~runtime_error(&v26);
      std::exception::~exception(&v25);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v18);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v19, v18[0]);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v21 < 0) {
        operator delete(v20[0]);
      }
      if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v27.__r_.__value_.__l.__data_);
      }
    }
  }
  int v11 = v32;
  if (v32)
  {
    v12[0] = 9;
    uint64_t v13 = 0;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v12);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=((uint64_t)a3, (uint64_t)v12);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v12);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v13, v12[0]);
  }
  if ((void)v30)
  {
    *((void *)&v30 + 1) = v30;
    operator delete((void *)v30);
  }
  if (!v11) {
LABEL_29:
  }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)a3);
}

void sub_19E8E016C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t *a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,std::runtime_error a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,char a43)
{
  nlohmann::detail::parse_error::~parse_error(&a33);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a15);
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  if (a42 < 0) {
    operator delete(a37);
  }
  uint64_t v45 = *(void **)(v43 - 200);
  if (v45)
  {
    *(void *)(v43 - 192) = v45;
    operator delete(v45);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  long long v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    long long v3 = (void *)(a1 + 24);
  }
  *long long v3 = 0;
  return a1;
}

{
  uint64_t v3;

  long long v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::parser(uint64_t a1, uint64_t a2, uint64_t a3, __int8 a4, char a5)
{
  uint64_t v9 = std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100](a1, a3);
  *(_OWORD *)(v9 + 40) = *(_OWORD *)a2;
  uint64_t v10 = (int64x2_t *)(v9 + 40);
  *(_DWORD *)(v9 + 32) = 0;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(v9 + 56) = a5;
  *(_DWORD *)(v9 + 60) = -1;
  *(unsigned char *)(v9 + 64) = 0;
  *(_OWORD *)(v9 + 72) = 0u;
  *(_OWORD *)(v9 + 88) = 0u;
  *(_OWORD *)(v9 + 104) = 0u;
  *(_OWORD *)(v9 + 120) = 0u;
  *(void *)(v9 + 136) = 0;
  *(void *)(v9 + 144) = "";
  *(void *)(v9 + 160) = 0;
  *(void *)(v9 + 168) = 0;
  *(void *)(v9 + 152) = 0;
  *(_DWORD *)(v9 + 176) = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_decimal_point();
  v10[9].i8[0] = a4;
  *(_DWORD *)(a1 + 32) = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v10);
  return a1;
}

void sub_19E8E039C(_Unwind_Exception *a1)
{
  nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::~lexer(v2);
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_decimal_point()
{
  unsigned int v0 = localeconv();
  if (!v0) {
    __assert_rtn("get_decimal_point", "json.hpp", 6346, "loc != nullptr");
  }
  if (v0->decimal_point) {
    return *v0->decimal_point;
  }
  else {
    return 46;
  }
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(int64x2_t *this)
{
  if (this[2].i64[0]
    || nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::skip_bom(this))
  {
    do
    {
      nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get(this);
      int v2 = this[1].i32[1];
    }
    while (v2 <= 0x20 && ((1 << v2) & 0x100002600) != 0);
    while (this[1].i8[0])
    {
      if (v2 != 47) {
        break;
      }
      if (!nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_comment(this)) {
        return 14;
      }
      do
      {
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get(this);
        int v2 = this[1].i32[1];
      }
      while (v2 <= 0x20 && ((1 << v2) & 0x100002600) != 0);
    }
    if (v2 <= 90)
    {
      switch(v2)
      {
        case '""':
          uint64_t result = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_string((uint64_t)this);
          break;
        case '#':
        case '$':
        case '%':
        case '&':
        case '\'':
        case '(':
        case ')':
        case '*':
        case '+':
        case '.':
        case '/':
          goto LABEL_50;
        case ',':
          uint64_t result = 13;
          break;
        case '-':
        case '0':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
          uint64_t result = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_number((uint64_t)this);
          break;
        case ':':
          uint64_t result = 12;
          break;
        default:
          if ((v2 + 1) >= 2) {
            goto LABEL_50;
          }
          uint64_t result = 15;
          break;
      }
      return result;
    }
    if (v2 <= 109)
    {
      switch(v2)
      {
        case '[':
          return 8;
        case ']':
          return 10;
        case 'f':
          qmemcpy(v12, "false", 5);
          int v6 = v12;
          uint64_t v7 = this;
          unint64_t v8 = 5;
          uint64_t v9 = 2;
          return nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_literal(v7, (unsigned __int8 *)v6, v8, v9);
      }
    }
    else if (v2 > 122)
    {
      if (v2 == 123) {
        return 9;
      }
      if (v2 == 125) {
        return 11;
      }
    }
    else
    {
      if (v2 == 110)
      {
        int v11 = 1819047278;
        int v6 = &v11;
        uint64_t v7 = this;
        unint64_t v8 = 4;
        uint64_t v9 = 3;
        return nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_literal(v7, (unsigned __int8 *)v6, v8, v9);
      }
      if (v2 == 116)
      {
        int v13 = 1702195828;
        int v6 = &v13;
        uint64_t v7 = this;
        unint64_t v8 = 4;
        uint64_t v9 = 1;
        return nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_literal(v7, (unsigned __int8 *)v6, v8, v9);
      }
    }
LABEL_50:
    uint64_t v10 = "invalid literal";
  }
  else
  {
    uint64_t v10 = "invalid BOM; must be 0xEF 0xBB 0xBF if given";
  }
  this[6].i64[1] = (uint64_t)v10;
  return 14;
}

BOOL nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::skip_bom(int64x2_t *a1)
{
  if (nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get(a1) == 239)
  {
    return nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get(a1) == 187
        && nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get(a1) == 191;
  }
  else
  {
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::unget((uint64_t)a1);
    return 1;
  }
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_comment(int64x2_t *a1)
{
  int v2 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get(a1);
  if (v2 == 47)
  {
    do
    {
      do
        unsigned int v4 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get(a1)
           + 1;
      while (v4 >= 0xF);
    }
    while (((0x4803u >> v4) & 1) == 0);
    return 1;
  }
  else
  {
    if (v2 == 42)
    {
      do
      {
        while (1)
        {
          int v3 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get(a1);
          if (v3 != 42) {
            break;
          }
          if (nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get(a1) == 47) {
            return 1;
          }
          nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::unget((uint64_t)a1);
        }
      }
      while ((v3 + 1) >= 2);
      int v6 = "invalid comment; missing closing '*/'";
    }
    else
    {
      int v6 = "invalid comment; expecting '/' or '*' after '/'";
    }
    uint64_t result = 0;
    a1[6].i64[1] = (uint64_t)v6;
  }
  return result;
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_literal(int64x2_t *this, unsigned __int8 *a2, unint64_t a3, uint64_t a4)
{
  if (*a2 != this[1].u8[4]) {
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_literal();
  }
  if (a3 >= 2)
  {
    unint64_t v6 = a3 - 1;
    uint64_t v7 = a2 + 1;
    while (1)
    {
      unsigned __int8 v8 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get(this);
      int v9 = *v7++;
      if (v9 != v8) {
        break;
      }
      if (!--v6) {
        return a4;
      }
    }
    this[6].i64[1] = (uint64_t)"invalid literal";
    return 14;
  }
  return a4;
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_string(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::reset(a1);
  if (*(_DWORD *)(a1 + 20) != 34) {
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_string();
  }
  while (2)
  {
    while (2)
    {
      int v2 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((int64x2_t *)a1)
         + 1;
      uint64_t result = 4;
      unsigned int v4 = "invalid string: missing closing quote";
      switch(v2)
      {
        case 0:
          goto LABEL_82;
        case 1:
          unsigned int v4 = "invalid string: control character U+0000 (NUL) must be escaped to \\u0000";
          goto LABEL_82;
        case 2:
          unsigned int v4 = "invalid string: control character U+0001 (SOH) must be escaped to \\u0001";
          goto LABEL_82;
        case 3:
          unsigned int v4 = "invalid string: control character U+0002 (STX) must be escaped to \\u0002";
          goto LABEL_82;
        case 4:
          unsigned int v4 = "invalid string: control character U+0003 (ETX) must be escaped to \\u0003";
          goto LABEL_82;
        case 5:
          unsigned int v4 = "invalid string: control character U+0004 (EOT) must be escaped to \\u0004";
          goto LABEL_82;
        case 6:
          unsigned int v4 = "invalid string: control character U+0005 (ENQ) must be escaped to \\u0005";
          goto LABEL_82;
        case 7:
          unsigned int v4 = "invalid string: control character U+0006 (ACK) must be escaped to \\u0006";
          goto LABEL_82;
        case 8:
          unsigned int v4 = "invalid string: control character U+0007 (BEL) must be escaped to \\u0007";
          goto LABEL_82;
        case 9:
          unsigned int v4 = "invalid string: control character U+0008 (BS) must be escaped to \\u0008 or \\b";
          goto LABEL_82;
        case 10:
          unsigned int v4 = "invalid string: control character U+0009 (HT) must be escaped to \\u0009 or \\t";
          goto LABEL_82;
        case 11:
          unsigned int v4 = "invalid string: control character U+000A (LF) must be escaped to \\u000A or \\n";
          goto LABEL_82;
        case 12:
          unsigned int v4 = "invalid string: control character U+000B (VT) must be escaped to \\u000B";
          goto LABEL_82;
        case 13:
          unsigned int v4 = "invalid string: control character U+000C (FF) must be escaped to \\u000C or \\f";
          goto LABEL_82;
        case 14:
          unsigned int v4 = "invalid string: control character U+000D (CR) must be escaped to \\u000D or \\r";
          goto LABEL_82;
        case 15:
          unsigned int v4 = "invalid string: control character U+000E (SO) must be escaped to \\u000E";
          goto LABEL_82;
        case 16:
          unsigned int v4 = "invalid string: control character U+000F (SI) must be escaped to \\u000F";
          goto LABEL_82;
        case 17:
          unsigned int v4 = "invalid string: control character U+0010 (DLE) must be escaped to \\u0010";
          goto LABEL_82;
        case 18:
          unsigned int v4 = "invalid string: control character U+0011 (DC1) must be escaped to \\u0011";
          goto LABEL_82;
        case 19:
          unsigned int v4 = "invalid string: control character U+0012 (DC2) must be escaped to \\u0012";
          goto LABEL_82;
        case 20:
          unsigned int v4 = "invalid string: control character U+0013 (DC3) must be escaped to \\u0013";
          goto LABEL_82;
        case 21:
          unsigned int v4 = "invalid string: control character U+0014 (DC4) must be escaped to \\u0014";
          goto LABEL_82;
        case 22:
          unsigned int v4 = "invalid string: control character U+0015 (NAK) must be escaped to \\u0015";
          goto LABEL_82;
        case 23:
          unsigned int v4 = "invalid string: control character U+0016 (SYN) must be escaped to \\u0016";
          goto LABEL_82;
        case 24:
          unsigned int v4 = "invalid string: control character U+0017 (ETB) must be escaped to \\u0017";
          goto LABEL_82;
        case 25:
          unsigned int v4 = "invalid string: control character U+0018 (CAN) must be escaped to \\u0018";
          goto LABEL_82;
        case 26:
          unsigned int v4 = "invalid string: control character U+0019 (EM) must be escaped to \\u0019";
          goto LABEL_82;
        case 27:
          unsigned int v4 = "invalid string: control character U+001A (SUB) must be escaped to \\u001A";
          goto LABEL_82;
        case 28:
          unsigned int v4 = "invalid string: control character U+001B (ESC) must be escaped to \\u001B";
          goto LABEL_82;
        case 29:
          unsigned int v4 = "invalid string: control character U+001C (FS) must be escaped to \\u001C";
          goto LABEL_82;
        case 30:
          unsigned int v4 = "invalid string: control character U+001D (GS) must be escaped to \\u001D";
          goto LABEL_82;
        case 31:
          unsigned int v4 = "invalid string: control character U+001E (RS) must be escaped to \\u001E";
          goto LABEL_82;
        case 32:
          unsigned int v4 = "invalid string: control character U+001F (US) must be escaped to \\u001F";
          goto LABEL_82;
        case 33:
        case 34:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 58:
        case 59:
        case 60:
        case 61:
        case 62:
        case 63:
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 71:
        case 72:
        case 73:
        case 74:
        case 75:
        case 76:
        case 77:
        case 78:
        case 79:
        case 80:
        case 81:
        case 82:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 126:
        case 127:
        case 128:
          int v5 = *(_DWORD *)(a1 + 20);
          goto LABEL_4;
        case 35:
          return result;
        case 93:
          int v10 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((int64x2_t *)a1);
          unsigned int v4 = "invalid string: forbidden character after backslash";
          if (v10 <= 97)
          {
            switch(v10)
            {
              case '""':
                LOBYTE(v5) = 34;
                break;
              case '/':
                LOBYTE(v5) = 47;
                break;
              case '\\':
                LOBYTE(v5) = 92;
                break;
              default:
                goto LABEL_82;
            }
            goto LABEL_4;
          }
          break;
        case 195:
        case 196:
        case 197:
        case 198:
        case 199:
        case 200:
        case 201:
        case 202:
        case 203:
        case 204:
        case 205:
        case 206:
        case 207:
        case 208:
        case 209:
        case 210:
        case 211:
        case 212:
        case 213:
        case 214:
        case 215:
        case 216:
        case 217:
        case 218:
        case 219:
        case 220:
        case 221:
        case 222:
        case 223:
        case 224:
          *(void *)&long long v14 = 0xBF00000080;
          uint64_t v6 = a1;
          unint64_t v7 = 2;
          goto LABEL_19;
        case 225:
          long long v8 = xmmword_19EC7A6A0;
          goto LABEL_7;
        case 226:
        case 227:
        case 228:
        case 229:
        case 230:
        case 231:
        case 232:
        case 233:
        case 234:
        case 235:
        case 236:
        case 237:
        case 239:
        case 240:
          long long v8 = xmmword_19EC7A690;
          goto LABEL_7;
        case 238:
          long long v8 = xmmword_19EC7A680;
LABEL_7:
          long long v14 = v8;
          uint64_t v6 = a1;
          unint64_t v7 = 4;
          goto LABEL_19;
        case 241:
          uint64_t v15 = 0xBF00000080;
          int v9 = &xmmword_19EC7A758;
          goto LABEL_18;
        case 242:
        case 243:
        case 244:
          uint64_t v15 = 0xBF00000080;
          int v9 = &xmmword_19EC7A770;
          goto LABEL_18;
        case 245:
          uint64_t v15 = 0xBF00000080;
          int v9 = &xmmword_19EC7A788;
LABEL_18:
          long long v14 = *v9;
          uint64_t v6 = a1;
          unint64_t v7 = 6;
LABEL_19:
          if ((nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::next_byte_in_range(v6, &v14, v7) & 1) == 0)return 14; {
          continue;
          }
        default:
          unsigned int v4 = "invalid string: ill-formed UTF-8 byte";
          goto LABEL_82;
      }
      break;
    }
    switch(v10)
    {
      case 'n':
        LOBYTE(v5) = 10;
        goto LABEL_4;
      case 'o':
      case 'p':
      case 'q':
      case 's':
        goto LABEL_82;
      case 'r':
        LOBYTE(v5) = 13;
        goto LABEL_4;
      case 't':
        LOBYTE(v5) = 9;
        goto LABEL_4;
      case 'u':
        unsigned int codepoint = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_codepoint((int64x2_t *)a1);
        if (codepoint == -1) {
          goto LABEL_85;
        }
        unsigned int v12 = codepoint;
        if ((codepoint & 0xFFFFFC00) != 0xD800)
        {
          if ((codepoint & 0xFFFFFC00) == 0xDC00)
          {
            unsigned int v4 = "invalid string: surrogate U+DC00..U+DFFF must follow U+D800..U+DBFF";
            goto LABEL_82;
          }
          if (codepoint >= 0x110000) {
            nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_string();
          }
          if (codepoint > 0x7F)
          {
            if (codepoint <= 0x7FF)
            {
              std::string::push_back((std::string *)(a1 + 80), (codepoint >> 6) | 0xC0);
              goto LABEL_39;
            }
            if (!HIWORD(codepoint))
            {
              std::string::push_back((std::string *)(a1 + 80), (codepoint >> 12) | 0xE0);
              goto LABEL_38;
            }
LABEL_37:
            std::string::push_back((std::string *)(a1 + 80), (v12 >> 18) | 0xF0);
            std::string::push_back((std::string *)(a1 + 80), (v12 >> 12) & 0x3F | 0x80);
LABEL_38:
            std::string::push_back((std::string *)(a1 + 80), (v12 >> 6) & 0x3F | 0x80);
LABEL_39:
            LOBYTE(v5) = v12 & 0x3F | 0x80;
            goto LABEL_4;
          }
          LOBYTE(v5) = codepoint;
LABEL_4:
          std::string::push_back((std::string *)(a1 + 80), v5);
          continue;
        }
        if (nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((int64x2_t *)a1) != 92
          || nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((int64x2_t *)a1) != 117)
        {
LABEL_86:
          unsigned int v4 = "invalid string: surrogate U+D800..U+DBFF must be followed by U+DC00..U+DFFF";
          goto LABEL_82;
        }
        unsigned int v13 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_codepoint((int64x2_t *)a1);
        if (v13 != -1)
        {
          if (v13 >> 10 != 55) {
            goto LABEL_86;
          }
          unsigned int v12 = v13 + (v12 << 10) - 56613888;
          goto LABEL_37;
        }
LABEL_85:
        unsigned int v4 = "invalid string: '\\u' must be followed by 4 hex digits";
LABEL_82:
        *(void *)(a1 + 104) = v4;
        return 14;
      default:
        if (v10 == 98)
        {
          LOBYTE(v5) = 8;
        }
        else
        {
          if (v10 != 102) {
            goto LABEL_82;
          }
          LOBYTE(v5) = 12;
        }
        goto LABEL_4;
    }
  }
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_number(uint64_t a1)
{
  nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::reset(a1);
  int v2 = *(_DWORD *)(a1 + 20);
  if ((v2 - 49) >= 9)
  {
    if (v2 == 48)
    {
      std::string::push_back((std::string *)(a1 + 80), 48);
      int v4 = 5;
    }
    else
    {
      if (v2 != 45) {
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_number();
      }
      int v3 = (std::string *)(a1 + 80);
      std::string::push_back((std::string *)(a1 + 80), 45);
      int v13 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((int64x2_t *)a1);
      if ((v13 - 49) < 9)
      {
        int v2 = *(_DWORD *)(a1 + 20);
        int v4 = 6;
        goto LABEL_3;
      }
      if (v13 != 48)
      {
        long long v14 = "invalid number; expected digit after '-'";
        goto LABEL_52;
      }
      std::string::push_back((std::string *)(a1 + 80), *(unsigned char *)(a1 + 20));
      int v4 = 6;
    }
    int v15 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((int64x2_t *)a1);
    if (v15 == 101 || v15 == 69)
    {
      int v5 = (std::string *)(a1 + 80);
      goto LABEL_9;
    }
    if (v15 != 46) {
      goto LABEL_40;
    }
    int v5 = (std::string *)(a1 + 80);
LABEL_34:
    std::string::push_back(v5, *(unsigned char *)(a1 + 136));
    if (nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((int64x2_t *)a1)
       - 48 > 9)
    {
      long long v14 = "invalid number; expected digit after '.'";
      goto LABEL_52;
    }
    int v5 = (std::string *)(a1 + 80);
    do
    {
      std::string::push_back((std::string *)(a1 + 80), *(unsigned char *)(a1 + 20));
      int v16 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((int64x2_t *)a1);
    }
    while ((v16 - 48) < 0xA);
    if (v16 != 101 && v16 != 69)
    {
LABEL_13:
      nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::unget(a1);
      __endptr = 0;
      *__error() = 0;
      goto LABEL_14;
    }
LABEL_9:
    std::string::push_back(v5, *(unsigned char *)(a1 + 20));
    int v7 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((int64x2_t *)a1);
    if ((v7 - 48) < 0xA)
    {
      long long v8 = (std::string *)(a1 + 80);
      goto LABEL_11;
    }
    if (v7 == 45 || v7 == 43)
    {
      long long v8 = (std::string *)(a1 + 80);
      std::string::push_back((std::string *)(a1 + 80), *(unsigned char *)(a1 + 20));
      if (nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((int64x2_t *)a1)
         - 48 < 0xA)
      {
LABEL_11:
        std::string::push_back(v8, *(unsigned char *)(a1 + 20));
        if (nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((int64x2_t *)a1)
           - 48 <= 9)
        {
          do
            std::string::push_back((std::string *)(a1 + 80), *(unsigned char *)(a1 + 20));
          while (nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((int64x2_t *)a1)
                - 48 < 0xA);
        }
        goto LABEL_13;
      }
      long long v14 = "invalid number; expected digit after exponent sign";
    }
    else
    {
      long long v14 = "invalid number; expected '+', '-', or digit after exponent";
    }
LABEL_52:
    *(void *)(a1 + 104) = v14;
    return 14;
  }
  int v3 = (std::string *)(a1 + 80);
  int v4 = 5;
LABEL_3:
  std::string::push_back(v3, v2);
  int v5 = (std::string *)(a1 + 80);
  while (1)
  {
    int v6 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((int64x2_t *)a1);
    if ((v6 - 48) >= 0xA) {
      break;
    }
    std::string::push_back((std::string *)(a1 + 80), *(unsigned char *)(a1 + 20));
  }
  if (v6 == 46) {
    goto LABEL_34;
  }
  if (v6 == 69 || v6 == 101) {
    goto LABEL_9;
  }
LABEL_40:
  nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::unget(a1);
  __endptr = 0;
  *__error() = 0;
  if (v4 == 6)
  {
    char v21 = (const char **)(a1 + 80);
    int v22 = (const char *)(a1 + 80);
    if (*(char *)(a1 + 103) < 0) {
      int v22 = *v21;
    }
    uint64_t v23 = strtoll(v22, &__endptr, 10);
    if (*(char *)(a1 + 103) < 0)
    {
      char v21 = *(const char ***)(a1 + 80);
      uint64_t v24 = *(void *)(a1 + 88);
    }
    else
    {
      uint64_t v24 = *(unsigned __int8 *)(a1 + 103);
    }
    if (__endptr != (char *)v21 + v24) {
      nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_number();
    }
    if (!*__error())
    {
      *(void *)(a1 + 112) = v23;
      return 6;
    }
  }
  else
  {
    unsigned __int8 v17 = (const char **)(a1 + 80);
    uint64_t v18 = (const char *)(a1 + 80);
    if (*(char *)(a1 + 103) < 0) {
      uint64_t v18 = *v17;
    }
    unint64_t v19 = strtoull(v18, &__endptr, 10);
    if (*(char *)(a1 + 103) < 0)
    {
      unsigned __int8 v17 = *(const char ***)(a1 + 80);
      uint64_t v20 = *(void *)(a1 + 88);
    }
    else
    {
      uint64_t v20 = *(unsigned __int8 *)(a1 + 103);
    }
    if (__endptr != (char *)v17 + v20) {
      nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_number();
    }
    if (!*__error())
    {
      *(void *)(a1 + 120) = v19;
      return 5;
    }
  }
LABEL_14:
  int v9 = (const char **)(a1 + 80);
  int v10 = (const char *)(a1 + 80);
  if (*(char *)(a1 + 103) < 0) {
    int v10 = *v9;
  }
  *(double *)(a1 + 128) = strtod(v10, &__endptr);
  if (*(char *)(a1 + 103) < 0)
  {
    int v9 = *(const char ***)(a1 + 80);
    uint64_t v11 = *(void *)(a1 + 88);
  }
  else
  {
    uint64_t v11 = *(unsigned __int8 *)(a1 + 103);
  }
  if (__endptr != (char *)v9 + v11) {
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_number();
  }
  return 7;
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get(int64x2_t *this)
{
  this[2] = vaddq_s64(this[2], vdupq_n_s64(1uLL));
  if (this[1].i8[8])
  {
    this[1].i8[8] = 0;
    __int32 character = this[1].i32[1];
  }
  else
  {
    __int32 character = nlohmann::detail::input_stream_adapter::get_character((nlohmann::detail::input_stream_adapter *)this);
    this[1].i32[1] = character;
  }
  if (character == -1) {
    return 0xFFFFFFFFLL;
  }
  int v4 = (unsigned char *)this[4].i64[0];
  unint64_t v3 = this[4].u64[1];
  if ((unint64_t)v4 >= v3)
  {
    uint64_t v6 = this[3].i64[1];
    int v7 = &v4[-v6];
    uint64_t v8 = (uint64_t)&v4[-v6 + 1];
    if (v8 < 0) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = v3 - v6;
    if (2 * v9 > v8) {
      uint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v10 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v10 = v8;
    }
    if (v10) {
      uint64_t v11 = (uint64_t)operator new(v10);
    }
    else {
      uint64_t v11 = 0;
    }
    unsigned int v12 = (char *)(v11 + v10);
    v7[v11] = character;
    uint64_t v5 = (uint64_t)&v7[v11 + 1];
    if (v4 == (unsigned char *)v6)
    {
      v11 += (uint64_t)v7;
    }
    else
    {
      int v13 = &v4[~v6];
      do
      {
        char v14 = *--v4;
        (v13--)[v11] = v14;
      }
      while (v4 != (unsigned char *)v6);
      int v4 = (unsigned char *)this[3].i64[1];
    }
    this[3].i64[1] = v11;
    this[4].i64[0] = v5;
    this[4].i64[1] = (uint64_t)v12;
    if (v4) {
      operator delete(v4);
    }
  }
  else
  {
    *int v4 = character;
    uint64_t v5 = (uint64_t)(v4 + 1);
  }
  this[4].i64[0] = v5;
  uint64_t result = this[1].u32[1];
  if (result == 10)
  {
    uint64_t v16 = this[3].i64[0] + 1;
    this[2].i64[1] = 0;
    this[3].i64[0] = v16;
  }
  return result;
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::unget(uint64_t result)
{
  uint64_t v1 = (void *)(result + 40);
  uint64_t v2 = *(void *)(result + 40);
  *(unsigned char *)(result + 24) = 1;
  --*(void *)(result + 32);
  if (v2 || (v1 = (void *)(result + 48), (uint64_t v2 = *(void *)(result + 48)) != 0)) {
    *uint64_t v1 = v2 - 1;
  }
  if (*(_DWORD *)(result + 20) != -1)
  {
    uint64_t v3 = *(void *)(result + 64);
    if (*(void *)(result + 56) == v3) {
      nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::unget();
    }
    *(void *)(result + 64) = v3 - 1;
  }
  return result;
}

uint64_t nlohmann::detail::input_stream_adapter::get_character(nlohmann::detail::input_stream_adapter *this)
{
  uint64_t v2 = (void *)*((void *)this + 1);
  uint64_t v3 = (unsigned __int8 *)v2[3];
  if (v3 == (unsigned __int8 *)v2[4])
  {
    uint64_t result = (*(uint64_t (**)(void *))(*v2 + 80))(v2);
    if (result == -1)
    {
      uint64_t v5 = (std::ios_base *)(*(void *)this + *(void *)(**(void **)this - 24));
      std::ios_base::clear(v5, v5->__rdstate_ | 2);
      return 0xFFFFFFFFLL;
    }
  }
  else
  {
    v2[3] = v3 + 1;
    return *v3;
  }
  return result;
}

void nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::reset(uint64_t a1)
{
  if (*(char *)(a1 + 103) < 0)
  {
    **(unsigned char **)(a1 + 80) = 0;
    *(void *)(a1 + 88) = 0;
  }
  else
  {
    *(unsigned char *)(a1 + 80) = 0;
    *(unsigned char *)(a1 + 103) = 0;
  }
  uint64_t v2 = *(unsigned char **)(a1 + 56);
  *(void *)(a1 + 64) = v2;
  int v3 = *(_DWORD *)(a1 + 20);
  unint64_t v4 = *(void *)(a1 + 72);
  if ((unint64_t)v2 >= v4)
  {
    unint64_t v6 = v4 - (void)v2;
    uint64_t v7 = 2 * v6;
    if (2 * v6 <= 1) {
      uint64_t v7 = 1;
    }
    if (v6 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v8 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v8 = v7;
    }
    unint64_t v9 = operator new(v8);
    *unint64_t v9 = v3;
    uint64_t v5 = v9 + 1;
    *(void *)(a1 + 56) = v9;
    *(void *)(a1 + 64) = v9 + 1;
    *(void *)(a1 + 72) = &v9[v8];
    if (v2) {
      operator delete(v2);
    }
  }
  else
  {
    *uint64_t v2 = v3;
    uint64_t v5 = v2 + 1;
  }
  *(void *)(a1 + 64) = v5;
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_codepoint(int64x2_t *this)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (this[1].i32[1] != 117) {
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_codepoint();
  }
  uint64_t v2 = 0;
  LODWORD(v3) = 0;
  long long v8 = xmmword_19EC7A6B0;
  do
  {
    int v4 = *(_DWORD *)((char *)&v8 + v2);
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get(this);
    __int32 v5 = this[1].i32[1];
    __int32 v6 = v5 - 48;
    if ((v5 - 48) >= 0xA)
    {
      if ((v5 - 65) > 5)
      {
        if ((v5 - 97) > 5) {
          return 0xFFFFFFFFLL;
        }
        __int32 v6 = v5 - 87;
      }
      else
      {
        __int32 v6 = v5 - 55;
      }
    }
    uint64_t v3 = ((v6 << v4) + v3);
    v2 += 4;
  }
  while (v2 != 16);
  if (v3 >= 0x10000) {
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_codepoint();
  }
  return v3;
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::next_byte_in_range(uint64_t a1, _DWORD *a2, unint64_t a3)
{
  if (a3 > 6 || ((1 << a3) & 0x54) == 0) {
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::next_byte_in_range();
  }
  __int32 v6 = (std::string *)(a1 + 80);
  std::string::push_back((std::string *)(a1 + 80), *(unsigned char *)(a1 + 20));
  uint64_t v7 = &a2[a3];
  while (1)
  {
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((int64x2_t *)a1);
    int v8 = *(_DWORD *)(a1 + 20);
    if (*a2 > v8 || v8 > a2[1]) {
      break;
    }
    std::string::push_back(v6, v8);
    a2 += 2;
    if (a2 == v7) {
      return 1;
    }
  }
  uint64_t result = 0;
  *(void *)(a1 + 104) = "invalid string: ill-formed UTF-8 byte";
  return result;
}

void nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::~lexer(void **this)
{
  if (*((char *)this + 103) < 0) {
    operator delete(this[10]);
  }
  uint64_t v2 = this[7];
  if (v2)
  {
    this[8] = v2;
    operator delete(v2);
  }

  nlohmann::detail::input_stream_adapter::~input_stream_adapter((nlohmann::detail::input_stream_adapter *)this);
}

uint64_t nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::sax_parse_internal<nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(uint64_t a1, uint64_t *a2)
{
  int v42 = 0;
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  int v4 = (long long *)(a1 + 120);
  __int32 v5 = (int64x2_t *)(a1 + 40);
  while (2)
  {
    switch(*(_DWORD *)(a1 + 32))
    {
      case 1:
        LOBYTE(v39.__vftable) = 1;
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<BOOL &>(a2, (unsigned __int8 *)&v39, 0);
        goto LABEL_19;
      case 2:
        LOBYTE(v39.__vftable) = 0;
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<BOOL &>(a2, (unsigned __int8 *)&v39, 0);
        goto LABEL_19;
      case 3:
        v39.__vftable = 0;
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<decltype(nullptr)>(a2, (uint64_t)&v39, 0);
        goto LABEL_19;
      case 4:
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<std::string&>(a2, (uint64_t)v4, 0);
        goto LABEL_19;
      case 5:
        v39.__vftable = *(std::runtime_error_vtbl **)(a1 + 160);
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<unsigned long long &>(a2, (uint64_t **)&v39, 0);
        goto LABEL_19;
      case 6:
        v39.__vftable = *(std::runtime_error_vtbl **)(a1 + 152);
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<long long &>(a2, (uint64_t **)&v39, 0);
        goto LABEL_19;
      case 7:
        if ((*(void *)(a1 + 168) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
        {
          v39.__vftable = *(std::runtime_error_vtbl **)(a1 + 168);
          nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<double &>(a2, (uint64_t **)&v39, 0);
          goto LABEL_19;
        }
        uint64_t v28 = *(void *)(a1 + 72);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string((uint64_t)v5, &v41);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string((uint64_t)v5, &v35);
        uint64_t v29 = std::string::insert(&v35, 0, "number overflow parsing '");
        long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v30;
        v29->__r_.__value_.__l.__size_ = 0;
        v29->__r_.__value_.__r.__words[2] = 0;
        v29->__r_.__value_.__r.__words[0] = 0;
        long long v31 = std::string::append(&__p, "'");
        long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
        std::string::size_type v38 = v31->__r_.__value_.__r.__words[2];
        *(_OWORD *)uint64_t v37 = v32;
        v31->__r_.__value_.__l.__size_ = 0;
        v31->__r_.__value_.__r.__words[2] = 0;
        v31->__r_.__value_.__r.__words[0] = 0;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v33);
        nlohmann::detail::out_of_range::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(406, (uint64_t)v37, (nlohmann::detail::exception *)&v39);
        uint64_t v17 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error<nlohmann::detail::out_of_range>((uint64_t)a2, v28, (uint64_t)&v41, (const nlohmann::detail::out_of_range *)&v39);
        nlohmann::detail::out_of_range::~out_of_range(&v39);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&v33);
        if (SHIBYTE(v38) < 0) {
          operator delete(v37[0]);
        }
        goto LABEL_50;
      case 8:
        if (!nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::start_array(a2, 0xFFFFFFFFFFFFFFFFLL))goto LABEL_56; {
        int v6 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v5);
        }
        *(_DWORD *)(a1 + 32) = v6;
        if (v6 == 10)
        {
          char v7 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_array(a2);
          goto LABEL_13;
        }
        LOBYTE(v39.__vftable) = 1;
        std::vector<BOOL>::push_back((uint64_t)&v42, &v39);
        continue;
      case 9:
        if ((nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::start_object(a2, 0xFFFFFFFFFFFFFFFFLL) & 1) == 0)goto LABEL_56; {
        int v8 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v5);
        }
        *(_DWORD *)(a1 + 32) = v8;
        if (v8 != 11)
        {
          if (v8 != 4) {
            goto LABEL_59;
          }
          if (!nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::key(a2, v4))goto LABEL_56; {
          int v16 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v5);
          }
          *(_DWORD *)(a1 + 32) = v16;
          if (v16 != 12) {
            goto LABEL_60;
          }
          LOBYTE(v39.__vftable) = 0;
          std::vector<BOOL>::push_back((uint64_t)&v42, &v39);
          int v15 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v5);
LABEL_37:
          *(_DWORD *)(a1 + 32) = v15;
          continue;
        }
        char v7 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_object(a2);
LABEL_13:
        if ((v7 & 1) == 0)
        {
LABEL_56:
          uint64_t v17 = 0;
          goto LABEL_44;
        }
LABEL_19:
        uint64_t v9 = v43;
        if (!v43)
        {
LABEL_43:
          uint64_t v17 = 1;
          goto LABEL_44;
        }
        while (2)
        {
          if ((*(void *)&v42[((unint64_t)(v9 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8] >> (v9 - 1)))
          {
            int v10 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v5);
            *(_DWORD *)(a1 + 32) = v10;
            if (v10 == 13) {
              goto LABEL_36;
            }
            if (v10 != 10)
            {
              uint64_t v22 = *(void *)(a1 + 72);
              nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string((uint64_t)v5, &v41);
              *(_OWORD *)uint64_t v37 = *(_OWORD *)(a1 + 72);
              std::string::size_type v38 = *(void *)(a1 + 88);
              std::string::basic_string[abi:ne180100]<0>(&v35, "array");
              nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::exception_message(a1, 0xAu, (uint64_t)&v35, &__p);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v33);
              nlohmann::detail::parse_error::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(101, (uint64_t *)v37, (uint64_t)&__p, (nlohmann::detail::exception *)&v39);
              uint64_t v23 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error<nlohmann::detail::parse_error>((uint64_t)a2, v22, (uint64_t)&v41, (const nlohmann::detail::parse_error *)&v39);
              goto LABEL_61;
            }
            if (!nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_array(a2)) {
              goto LABEL_56;
            }
            uint64_t v11 = v43;
            if (!v43)
            {
              int v24 = 10820;
              goto LABEL_63;
            }
LABEL_30:
            uint64_t v9 = v11 - 1;
            uint64_t v43 = v9;
            if (!v9) {
              goto LABEL_43;
            }
            continue;
          }
          break;
        }
        int v12 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v5);
        *(_DWORD *)(a1 + 32) = v12;
        if (v12 != 13)
        {
          if (v12 != 11)
          {
            uint64_t v25 = *(void *)(a1 + 72);
            nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string((uint64_t)v5, &v41);
            *(_OWORD *)uint64_t v37 = *(_OWORD *)(a1 + 72);
            std::string::size_type v38 = *(void *)(a1 + 88);
            std::string::basic_string[abi:ne180100]<0>(&v35, "object");
            nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::exception_message(a1, 0xBu, (uint64_t)&v35, &__p);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v33);
            nlohmann::detail::parse_error::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(101, (uint64_t *)v37, (uint64_t)&__p, (nlohmann::detail::exception *)&v39);
            uint64_t v23 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error<nlohmann::detail::parse_error>((uint64_t)a2, v25, (uint64_t)&v41, (const nlohmann::detail::parse_error *)&v39);
            goto LABEL_61;
          }
          if (!nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_object(a2)) {
            goto LABEL_56;
          }
          uint64_t v11 = v43;
          if (!v43)
          {
            int v24 = 10874;
LABEL_63:
            __assert_rtn("sax_parse_internal", "json.hpp", v24, "!states.empty()");
          }
          goto LABEL_30;
        }
        int v13 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v5);
        *(_DWORD *)(a1 + 32) = v13;
        if (v13 != 4)
        {
LABEL_59:
          uint64_t v26 = *(void *)(a1 + 72);
          nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string((uint64_t)v5, &v41);
          *(_OWORD *)uint64_t v37 = *(_OWORD *)(a1 + 72);
          std::string::size_type v38 = *(void *)(a1 + 88);
          std::string::basic_string[abi:ne180100]<0>(&v35, "object key");
          nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::exception_message(a1, 4u, (uint64_t)&v35, &__p);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v33);
          nlohmann::detail::parse_error::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(101, (uint64_t *)v37, (uint64_t)&__p, (nlohmann::detail::exception *)&v39);
          uint64_t v23 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error<nlohmann::detail::parse_error>((uint64_t)a2, v26, (uint64_t)&v41, (const nlohmann::detail::parse_error *)&v39);
          goto LABEL_61;
        }
        if (!nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::key(a2, v4))goto LABEL_56; {
        int v14 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v5);
        }
        *(_DWORD *)(a1 + 32) = v14;
        if (v14 == 12)
        {
LABEL_36:
          int v15 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v5);
          goto LABEL_37;
        }
LABEL_60:
        uint64_t v27 = *(void *)(a1 + 72);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string((uint64_t)v5, &v41);
        *(_OWORD *)uint64_t v37 = *(_OWORD *)(a1 + 72);
        std::string::size_type v38 = *(void *)(a1 + 88);
        std::string::basic_string[abi:ne180100]<0>(&v35, "object separator");
        nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::exception_message(a1, 0xCu, (uint64_t)&v35, &__p);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v33);
        nlohmann::detail::parse_error::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(101, (uint64_t *)v37, (uint64_t)&__p, (nlohmann::detail::exception *)&v39);
        uint64_t v23 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error<nlohmann::detail::parse_error>((uint64_t)a2, v27, (uint64_t)&v41, (const nlohmann::detail::parse_error *)&v39);
LABEL_61:
        uint64_t v17 = v23;
        nlohmann::detail::parse_error::~parse_error(&v39);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&v33);
LABEL_50:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v35.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v41.__r_.__value_.__l.__data_);
        }
LABEL_44:
        if (v42) {
          operator delete(v42);
        }
        return v17;
      case 0xE:
        uint64_t v19 = *(void *)(a1 + 72);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string((uint64_t)v5, &v41);
        *(_OWORD *)uint64_t v37 = *(_OWORD *)(a1 + 72);
        std::string::size_type v38 = *(void *)(a1 + 88);
        std::string::basic_string[abi:ne180100]<0>(&v35, "value");
        nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::exception_message(a1, 0, (uint64_t)&v35, &__p);
        LOBYTE(v33) = 0;
        char v34 = 0;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v33);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v33);
        nlohmann::detail::parse_error::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(101, (uint64_t *)v37, (uint64_t)&__p, (nlohmann::detail::exception *)&v39);
        uint64_t v20 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error<nlohmann::detail::parse_error>((uint64_t)a2, v19, (uint64_t)&v41, (const nlohmann::detail::parse_error *)&v39);
        goto LABEL_49;
      default:
        uint64_t v21 = *(void *)(a1 + 72);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string((uint64_t)v5, &v41);
        *(_OWORD *)uint64_t v37 = *(_OWORD *)(a1 + 72);
        std::string::size_type v38 = *(void *)(a1 + 88);
        std::string::basic_string[abi:ne180100]<0>(&v35, "value");
        nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::exception_message(a1, 0x10u, (uint64_t)&v35, &__p);
        LOBYTE(v33) = 0;
        char v34 = 0;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v33);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v33);
        nlohmann::detail::parse_error::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(101, (uint64_t *)v37, (uint64_t)&__p, (nlohmann::detail::exception *)&v39);
        uint64_t v20 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error<nlohmann::detail::parse_error>((uint64_t)a2, v21, (uint64_t)&v41, (const nlohmann::detail::parse_error *)&v39);
LABEL_49:
        uint64_t v17 = v20;
        v39.__vftable = (std::runtime_error_vtbl *)&unk_1EF0DD050;
        std::runtime_error::~runtime_error(&v40);
        std::exception::~exception(&v39);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v33);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v34, v33);
        goto LABEL_50;
    }
  }
}

void sub_19E8E23C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,std::runtime_error a31)
{
  nlohmann::detail::parse_error::~parse_error(&a31);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a10);
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a17 < 0) {
    operator delete(a12);
  }
  if (*(char *)(v31 - 89) < 0) {
    operator delete(*(void **)(v31 - 112));
  }
  char v33 = *(void **)(v31 - 88);
  if (v33) {
    operator delete(v33);
  }
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error<nlohmann::detail::parse_error>(uint64_t a1, uint64_t a2, uint64_t a3, const nlohmann::detail::parse_error *a4)
{
  *(unsigned char *)(a1 + 88) = 1;
  if (*(unsigned char *)(a1 + 128))
  {
    exception = (nlohmann::detail::parse_error *)__cxa_allocate_exception(0x28uLL);
    char v7 = nlohmann::detail::parse_error::parse_error(exception, a4);
  }
  return 0;
}

void nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  uint64_t v3 = *(unsigned __int8 **)(a1 + 56);
  for (unint64_t i = *(unsigned __int8 **)(a1 + 64); v3 != i; ++v3)
  {
    unsigned int v5 = *v3;
    if (v5 > 0x1F)
    {
      std::string::push_back(a2, v5);
    }
    else
    {
      char v7 = 0;
      *(void *)__str = 0;
      snprintf(__str, 9uLL, "<U+%.4X>", v5);
      std::string::append(a2, __str);
    }
  }
}

void sub_19E8E267C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void nlohmann::detail::parse_error::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(int a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, nlohmann::detail::exception *a4@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&v30, "parse_error");
  nlohmann::detail::exception::name(a1, &v32);
  uint64_t v8 = std::string::append(&v32, "parse error");
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v33.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  nlohmann::detail::parse_error::position_string((uint64_t)a2, &v29);
  if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v10 = &v29;
  }
  else {
    int v10 = (std::string *)v29.__r_.__value_.__r.__words[0];
  }
  if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v29.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v29.__r_.__value_.__l.__size_;
  }
  int v12 = std::string::append(&v33, (const std::string::value_type *)v10, size);
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v34.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  int v14 = std::string::append(&v34, ": ");
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v35.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  if ((v28 & 0x80u) == 0) {
    int v16 = __p;
  }
  else {
    int v16 = (void **)__p[0];
  }
  if ((v28 & 0x80u) == 0) {
    std::string::size_type v17 = v28;
  }
  else {
    std::string::size_type v17 = (std::string::size_type)__p[1];
  }
  uint64_t v18 = std::string::append(&v35, (const std::string::value_type *)v16, v17);
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v36.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  int v20 = *(char *)(a3 + 23);
  if (v20 >= 0) {
    uint64_t v21 = (const std::string::value_type *)a3;
  }
  else {
    uint64_t v21 = *(const std::string::value_type **)a3;
  }
  if (v20 >= 0) {
    std::string::size_type v22 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    std::string::size_type v22 = *(void *)(a3 + 8);
  }
  uint64_t v23 = std::string::append(&v36, v21, v22);
  long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  int64_t v38 = v23->__r_.__value_.__r.__words[2];
  long long v37 = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }
  if ((char)v28 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v34.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  if (v31 < 0) {
    operator delete(v30);
  }
  uint64_t v25 = *a2;
  if (v38 >= 0) {
    uint64_t v26 = (const char *)&v37;
  }
  else {
    uint64_t v26 = (const char *)v37;
  }
  nlohmann::detail::exception::exception(a4, a1, v26);
  *(void *)a4 = &unk_1EF0DCFA8;
  *((void *)a4 + 4) = v25;
  if (SHIBYTE(v38) < 0) {
    operator delete((void *)v37);
  }
}

void sub_19E8E28F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  if (*(char *)(v45 - 57) < 0) {
    operator delete(*(void **)(v45 - 80));
  }
  _Unwind_Resume(exception_object);
}

void nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::exception_message(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(a4, "syntax error ");
  uint64_t v8 = *(unsigned __int8 *)(a3 + 23);
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *(void *)(a3 + 8);
  }
  if (v8)
  {
    std::operator+<char>();
    long long v9 = std::string::append(&v38, " ");
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    int64_t v40 = v9->__r_.__value_.__r.__words[2];
    long long v39 = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    if (v40 >= 0) {
      uint64_t v11 = (const std::string::value_type *)&v39;
    }
    else {
      uint64_t v11 = (const std::string::value_type *)v39;
    }
    if (v40 >= 0) {
      std::string::size_type v12 = HIBYTE(v40);
    }
    else {
      std::string::size_type v12 = *((void *)&v39 + 1);
    }
    std::string::append(a4, v11, v12);
    if (SHIBYTE(v40) < 0) {
      operator delete((void *)v39);
    }
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v38.__r_.__value_.__l.__data_);
    }
  }
  std::string::append(a4, "- ");
  unsigned int v13 = *(_DWORD *)(a1 + 32);
  if (v13 == 14)
  {
    std::string::basic_string[abi:ne180100]<0>(&v36, *(char **)(a1 + 144));
    int v14 = std::string::append(&v36, "; last read: '");
    long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v37.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string(a1 + 40, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    uint64_t v18 = std::string::append(&v37, (const std::string::value_type *)p_p, size);
    long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v38.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    int v20 = std::string::append(&v38, "'");
    long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    int64_t v40 = v20->__r_.__value_.__r.__words[2];
    long long v39 = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    if (v40 >= 0) {
      std::string::size_type v22 = (const std::string::value_type *)&v39;
    }
    else {
      std::string::size_type v22 = (const std::string::value_type *)v39;
    }
    if (v40 >= 0) {
      std::string::size_type v23 = HIBYTE(v40);
    }
    else {
      std::string::size_type v23 = *((void *)&v39 + 1);
    }
    std::string::append(a4, v22, v23);
    if (SHIBYTE(v40) < 0) {
      operator delete((void *)v39);
    }
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v38.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v37.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    {
      long long v24 = (void *)v36.__r_.__value_.__r.__words[0];
      goto LABEL_49;
    }
LABEL_46:
    if (!a2) {
      return;
    }
    goto LABEL_50;
  }
  uint64_t v25 = (char *)nlohmann::detail::lexer_base<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::token_type_name(v13);
  std::string::basic_string[abi:ne180100]<0>(&v38, v25);
  uint64_t v26 = std::string::insert(&v38, 0, "unexpected ");
  long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  int64_t v40 = v26->__r_.__value_.__r.__words[2];
  long long v39 = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  if (v40 >= 0) {
    unsigned __int8 v28 = (const std::string::value_type *)&v39;
  }
  else {
    unsigned __int8 v28 = (const std::string::value_type *)v39;
  }
  if (v40 >= 0) {
    std::string::size_type v29 = HIBYTE(v40);
  }
  else {
    std::string::size_type v29 = *((void *)&v39 + 1);
  }
  std::string::append(a4, v28, v29);
  if (SHIBYTE(v40) < 0) {
    operator delete((void *)v39);
  }
  if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_46;
  }
  long long v24 = (void *)v38.__r_.__value_.__r.__words[0];
LABEL_49:
  operator delete(v24);
  if (!a2) {
    return;
  }
LABEL_50:
  long long v30 = (char *)nlohmann::detail::lexer_base<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::token_type_name(a2);
  std::string::basic_string[abi:ne180100]<0>(&v38, v30);
  char v31 = std::string::insert(&v38, 0, "; expected ");
  long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  int64_t v40 = v31->__r_.__value_.__r.__words[2];
  long long v39 = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  if (v40 >= 0) {
    std::string v33 = (const std::string::value_type *)&v39;
  }
  else {
    std::string v33 = (const std::string::value_type *)v39;
  }
  if (v40 >= 0) {
    std::string::size_type v34 = HIBYTE(v40);
  }
  else {
    std::string::size_type v34 = *((void *)&v39 + 1);
  }
  std::string::append(a4, v33, v34);
  if (SHIBYTE(v40) < 0) {
    operator delete((void *)v39);
  }
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
}

void sub_19E8E2CF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v34 - 41) < 0) {
    operator delete(*(void **)(v34 - 64));
  }
  if (a33 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (*(char *)(v33 + 23) < 0) {
    operator delete(*(void **)v33);
  }
  _Unwind_Resume(exception_object);
}

void nlohmann::detail::parse_error::~parse_error(std::runtime_error *this)
{
  this->__vftable = (std::runtime_error_vtbl *)&unk_1EF0DD050;
  std::runtime_error::~runtime_error(this + 1);

  std::exception::~exception(this);
}

{
  uint64_t vars8;

  this->__vftable = (std::runtime_error_vtbl *)&unk_1EF0DD050;
  std::runtime_error::~runtime_error(this + 1);
  std::exception::~exception(this);

  JUMPOUT(0x19F3C1920);
}

uint64_t nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::sax_parse_internal<nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  int v4 = (std::runtime_error_vtbl *)(a1 + 120);
  unsigned int v5 = (int64x2_t *)(a1 + 40);
  while (2)
  {
    switch(*(_DWORD *)(a1 + 32))
    {
      case 1:
        LOBYTE(v40.__vftable) = 1;
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<BOOL &>(a2, (unsigned __int8 *)&v40);
        goto LABEL_17;
      case 2:
        LOBYTE(v40.__vftable) = 0;
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<BOOL &>(a2, (unsigned __int8 *)&v40);
        goto LABEL_17;
      case 3:
        v40.__vftable = 0;
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<decltype(nullptr)>(a2);
        goto LABEL_17;
      case 4:
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<std::string&>(a2, (uint64_t)v4);
        goto LABEL_17;
      case 5:
        v40.__vftable = *(std::runtime_error_vtbl **)(a1 + 160);
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<unsigned long long &>(a2, (uint64_t *)&v40);
        goto LABEL_17;
      case 6:
        v40.__vftable = *(std::runtime_error_vtbl **)(a1 + 152);
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<long long &>(a2, (uint64_t *)&v40);
        goto LABEL_17;
      case 7:
        if ((*(void *)(a1 + 168) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
        {
          v40.__vftable = *(std::runtime_error_vtbl **)(a1 + 168);
          nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<double &>(a2, (uint64_t *)&v40);
          goto LABEL_17;
        }
        uint64_t v29 = *(void *)(a1 + 72);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string((uint64_t)v5, &v42);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string((uint64_t)v5, &v36);
        long long v30 = std::string::insert(&v36, 0, "number overflow parsing '");
        long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v31;
        v30->__r_.__value_.__l.__size_ = 0;
        v30->__r_.__value_.__r.__words[2] = 0;
        v30->__r_.__value_.__r.__words[0] = 0;
        long long v32 = std::string::append(&__p, "'");
        long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
        std::string::size_type v39 = v32->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string v38 = v33;
        v32->__r_.__value_.__l.__size_ = 0;
        v32->__r_.__value_.__r.__words[2] = 0;
        v32->__r_.__value_.__r.__words[0] = 0;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v34);
        nlohmann::detail::out_of_range::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(406, (uint64_t)v38, (nlohmann::detail::exception *)&v40);
        uint64_t v18 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error<nlohmann::detail::out_of_range>((uint64_t)a2, v29, (uint64_t)&v42, (const nlohmann::detail::out_of_range *)&v40);
        nlohmann::detail::out_of_range::~out_of_range(&v40);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&v34);
        if (SHIBYTE(v39) < 0) {
          operator delete(v38[0]);
        }
        goto LABEL_43;
      case 8:
        if (!nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::start_array(a2, 0xFFFFFFFFFFFFFFFFLL))goto LABEL_56; {
        int v6 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v5);
        }
        *(_DWORD *)(a1 + 32) = v6;
        if (v6 == 10) {
          goto LABEL_12;
        }
        LOBYTE(v40.__vftable) = 1;
        std::vector<BOOL>::push_back((uint64_t)&v43, &v40);
        continue;
      case 9:
        if ((nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::start_object(a2, 0xFFFFFFFFFFFFFFFFLL) & 1) == 0)
        {
LABEL_56:
          uint64_t v18 = 0;
          goto LABEL_37;
        }
        int v7 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v5);
        *(_DWORD *)(a1 + 32) = v7;
        if (v7 != 11)
        {
          if (v7 != 4) {
            goto LABEL_51;
          }
          int v16 = *(uint64_t ***)(*(void *)(a2[2] - 8) + 8);
          v40.__vftable = v4;
          a2[4] = (uint64_t)(std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v16, (const void **)&v4->~runtime_error, (uint64_t)&std::piecewise_construct, (long long **)&v40)+ 7);
          int v17 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v5);
          *(_DWORD *)(a1 + 32) = v17;
          if (v17 != 12) {
            goto LABEL_54;
          }
          LOBYTE(v40.__vftable) = 0;
          std::vector<BOOL>::push_back((uint64_t)&v43, &v40);
          int v15 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v5);
LABEL_32:
          *(_DWORD *)(a1 + 32) = v15;
          continue;
        }
LABEL_12:
        a2[2] -= 8;
LABEL_17:
        uint64_t v8 = v44;
        if (!v44)
        {
LABEL_36:
          uint64_t v18 = 1;
          goto LABEL_37;
        }
        while (2)
        {
          if ((*(void *)&v43[((unint64_t)(v8 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8] >> (v8 - 1)))
          {
            int v9 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v5);
            *(_DWORD *)(a1 + 32) = v9;
            if (v9 == 13) {
              goto LABEL_31;
            }
            if (v9 != 10)
            {
              uint64_t v23 = *(void *)(a1 + 72);
              nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string((uint64_t)v5, &v42);
              *(_OWORD *)std::string v38 = *(_OWORD *)(a1 + 72);
              std::string::size_type v39 = *(void *)(a1 + 88);
              std::string::basic_string[abi:ne180100]<0>(&v36, "array");
              nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::exception_message(a1, 0xAu, (uint64_t)&v36, &__p);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v34);
              nlohmann::detail::parse_error::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(101, (uint64_t *)v38, (uint64_t)&__p, (nlohmann::detail::exception *)&v40);
              uint64_t v24 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error<nlohmann::detail::parse_error>((uint64_t)a2, v23, (uint64_t)&v42, (const nlohmann::detail::parse_error *)&v40);
              goto LABEL_55;
            }
            a2[2] -= 8;
            uint64_t v10 = v44;
            if (!v44)
            {
              int v25 = 10820;
              goto LABEL_53;
            }
LABEL_26:
            uint64_t v8 = v10 - 1;
            uint64_t v44 = v8;
            if (!v8) {
              goto LABEL_36;
            }
            continue;
          }
          break;
        }
        int v11 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v5);
        *(_DWORD *)(a1 + 32) = v11;
        if (v11 != 13)
        {
          if (v11 != 11)
          {
            uint64_t v26 = *(void *)(a1 + 72);
            nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string((uint64_t)v5, &v42);
            *(_OWORD *)std::string v38 = *(_OWORD *)(a1 + 72);
            std::string::size_type v39 = *(void *)(a1 + 88);
            std::string::basic_string[abi:ne180100]<0>(&v36, "object");
            nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::exception_message(a1, 0xBu, (uint64_t)&v36, &__p);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v34);
            nlohmann::detail::parse_error::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(101, (uint64_t *)v38, (uint64_t)&__p, (nlohmann::detail::exception *)&v40);
            uint64_t v24 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error<nlohmann::detail::parse_error>((uint64_t)a2, v26, (uint64_t)&v42, (const nlohmann::detail::parse_error *)&v40);
            goto LABEL_55;
          }
          a2[2] -= 8;
          uint64_t v10 = v44;
          if (!v44)
          {
            int v25 = 10874;
LABEL_53:
            __assert_rtn("sax_parse_internal", "json.hpp", v25, "!states.empty()");
          }
          goto LABEL_26;
        }
        int v12 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v5);
        *(_DWORD *)(a1 + 32) = v12;
        if (v12 != 4)
        {
LABEL_51:
          uint64_t v27 = *(void *)(a1 + 72);
          nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string((uint64_t)v5, &v42);
          *(_OWORD *)std::string v38 = *(_OWORD *)(a1 + 72);
          std::string::size_type v39 = *(void *)(a1 + 88);
          std::string::basic_string[abi:ne180100]<0>(&v36, "object key");
          nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::exception_message(a1, 4u, (uint64_t)&v36, &__p);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v34);
          nlohmann::detail::parse_error::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(101, (uint64_t *)v38, (uint64_t)&__p, (nlohmann::detail::exception *)&v40);
          uint64_t v24 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error<nlohmann::detail::parse_error>((uint64_t)a2, v27, (uint64_t)&v42, (const nlohmann::detail::parse_error *)&v40);
          goto LABEL_55;
        }
        unsigned int v13 = *(uint64_t ***)(*(void *)(a2[2] - 8) + 8);
        v40.__vftable = v4;
        a2[4] = (uint64_t)(std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v13, (const void **)&v4->~runtime_error, (uint64_t)&std::piecewise_construct, (long long **)&v40)+ 7);
        int v14 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v5);
        *(_DWORD *)(a1 + 32) = v14;
        if (v14 == 12)
        {
LABEL_31:
          int v15 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v5);
          goto LABEL_32;
        }
LABEL_54:
        uint64_t v28 = *(void *)(a1 + 72);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string((uint64_t)v5, &v42);
        *(_OWORD *)std::string v38 = *(_OWORD *)(a1 + 72);
        std::string::size_type v39 = *(void *)(a1 + 88);
        std::string::basic_string[abi:ne180100]<0>(&v36, "object separator");
        nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::exception_message(a1, 0xCu, (uint64_t)&v36, &__p);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v34);
        nlohmann::detail::parse_error::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(101, (uint64_t *)v38, (uint64_t)&__p, (nlohmann::detail::exception *)&v40);
        uint64_t v24 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error<nlohmann::detail::parse_error>((uint64_t)a2, v28, (uint64_t)&v42, (const nlohmann::detail::parse_error *)&v40);
LABEL_55:
        uint64_t v18 = v24;
        nlohmann::detail::parse_error::~parse_error(&v40);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&v34);
LABEL_43:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v36.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v42.__r_.__value_.__l.__data_);
        }
LABEL_37:
        if (v43) {
          operator delete(v43);
        }
        return v18;
      case 0xE:
        uint64_t v20 = *(void *)(a1 + 72);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string((uint64_t)v5, &v42);
        *(_OWORD *)std::string v38 = *(_OWORD *)(a1 + 72);
        std::string::size_type v39 = *(void *)(a1 + 88);
        std::string::basic_string[abi:ne180100]<0>(&v36, "value");
        nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::exception_message(a1, 0, (uint64_t)&v36, &__p);
        LOBYTE(v34) = 0;
        std::string v35 = 0;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v34);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v34);
        nlohmann::detail::parse_error::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(101, (uint64_t *)v38, (uint64_t)&__p, (nlohmann::detail::exception *)&v40);
        uint64_t v21 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error<nlohmann::detail::parse_error>((uint64_t)a2, v20, (uint64_t)&v42, (const nlohmann::detail::parse_error *)&v40);
        goto LABEL_42;
      default:
        uint64_t v22 = *(void *)(a1 + 72);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string((uint64_t)v5, &v42);
        *(_OWORD *)std::string v38 = *(_OWORD *)(a1 + 72);
        std::string::size_type v39 = *(void *)(a1 + 88);
        std::string::basic_string[abi:ne180100]<0>(&v36, "value");
        nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::exception_message(a1, 0x10u, (uint64_t)&v36, &__p);
        LOBYTE(v34) = 0;
        std::string v35 = 0;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v34);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v34);
        nlohmann::detail::parse_error::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(101, (uint64_t *)v38, (uint64_t)&__p, (nlohmann::detail::exception *)&v40);
        uint64_t v21 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error<nlohmann::detail::parse_error>((uint64_t)a2, v22, (uint64_t)&v42, (const nlohmann::detail::parse_error *)&v40);
LABEL_42:
        uint64_t v18 = v21;
        v40.__vftable = (std::runtime_error_vtbl *)&unk_1EF0DD050;
        std::runtime_error::~runtime_error(&v41);
        std::exception::~exception(&v40);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v34);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v35, v34);
        goto LABEL_43;
    }
  }
}

void sub_19E8E3730(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,std::runtime_error a31)
{
  nlohmann::detail::parse_error::~parse_error(&a31);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a10);
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a17 < 0) {
    operator delete(a12);
  }
  if (*(char *)(v31 - 89) < 0) {
    operator delete(*(void **)(v31 - 112));
  }
  long long v33 = *(void **)(v31 - 88);
  if (v33) {
    operator delete(v33);
  }
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error<nlohmann::detail::parse_error>(uint64_t a1, uint64_t a2, uint64_t a3, const nlohmann::detail::parse_error *a4)
{
  *(unsigned char *)(a1 + 40) = 1;
  if (*(unsigned char *)(a1 + 41))
  {
    exception = (nlohmann::detail::parse_error *)__cxa_allocate_exception(0x28uLL);
    int v7 = nlohmann::detail::parse_error::parse_error(exception, a4);
  }
  return 0;
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::json_sax_dom_callback_parser(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(void *)a1 = a2;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  uint64_t v6 = a1 + 32;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(unsigned char *)(a1 + 88) = 0;
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100](a1 + 96, a3);
  *(unsigned char *)(a1 + 136) = 9;
  *(unsigned char *)(a1 + 128) = a4;
  *(void *)(a1 + 144) = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1 + 136);
  char v8 = 1;
  std::vector<BOOL>::push_back(v6, &v8);
  return a1;
}

void sub_19E8E39D4(_Unwind_Exception *a1)
{
  uint64_t v6 = v3;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(v4);
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::~__value_func[abi:ne180100](v6);
  char v8 = *(void **)(v1 + 56);
  if (v8) {
    operator delete(v8);
  }
  if (*v2) {
    operator delete(*v2);
  }
  int v9 = *v5;
  if (*v5)
  {
    *(void *)(v1 + 16) = v9;
    operator delete(v9);
  }
  _Unwind_Resume(a1);
}

void std::vector<BOOL>::push_back(uint64_t a1, unsigned char *a2)
{
  unint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  if (v4 == v5 << 6)
  {
    if ((uint64_t)(v4 + 1) < 0) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v6 = v5 << 7;
    if (v6 <= (v4 & 0xFFFFFFFFFFFFFFC0) + 64) {
      unint64_t v6 = (v4 & 0xFFFFFFFFFFFFFFC0) + 64;
    }
    if (v4 <= 0x3FFFFFFFFFFFFFFELL) {
      unint64_t v7 = v6;
    }
    else {
      unint64_t v7 = 0x7FFFFFFFFFFFFFFFLL;
    }
    std::vector<BOOL>::reserve((char **)a1, v7);
    unint64_t v4 = *(void *)(a1 + 8);
  }
  *(void *)(a1 + 8) = v4 + 1;
  char v8 = *(char **)a1;
  unint64_t v9 = v4 >> 6;
  uint64_t v10 = 1 << v4;
  if (*a2) {
    uint64_t v11 = *(void *)&v8[8 * v9] | v10;
  }
  else {
    uint64_t v11 = *(void *)&v8[8 * v9] & ~v10;
  }
  *(void *)&v8[8 * v9] = v11;
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::start_object(uint64_t *a1, unint64_t a2)
{
  unint64_t v4 = (char **)(a1 + 1);
  char v30 = std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()((uint64_t)(a1 + 12), (unint64_t)(a1[2] - a1[1]) >> 3, 0);
  std::vector<BOOL>::push_back((uint64_t)(a1 + 4), &v30);
  LOBYTE(v28) = 1;
  nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>(a1, (unsigned __int8 *)&v28, 1);
  uint64_t v6 = v5;
  unint64_t v7 = (void *)a1[2];
  unint64_t v8 = a1[3];
  if ((unint64_t)v7 >= v8)
  {
    uint64_t v10 = ((char *)v7 - *v4) >> 3;
    if ((unint64_t)(v10 + 1) >> 61) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v8 - (void)*v4;
    uint64_t v12 = v11 >> 2;
    if (v11 >> 2 <= (unint64_t)(v10 + 1)) {
      uint64_t v12 = v10 + 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    if (v13) {
      int v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v13);
    }
    else {
      int v14 = 0;
    }
    int v15 = &v14[8 * v10];
    int v16 = &v14[8 * v13];
    *(void *)int v15 = v6;
    unint64_t v9 = v15 + 8;
    uint64_t v18 = (char *)a1[1];
    int v17 = (char *)a1[2];
    if (v17 != v18)
    {
      do
      {
        uint64_t v19 = *((void *)v17 - 1);
        v17 -= 8;
        *((void *)v15 - 1) = v19;
        v15 -= 8;
      }
      while (v17 != v18);
      int v17 = *v4;
    }
    a1[1] = (uint64_t)v15;
    a1[2] = (uint64_t)v9;
    a1[3] = (uint64_t)v16;
    if (v17) {
      operator delete(v17);
    }
  }
  else
  {
    *unint64_t v7 = v5;
    unint64_t v9 = v7 + 1;
  }
  a1[2] = (uint64_t)v9;
  if (a2 != -1)
  {
    uint64_t v20 = (char *)*(v9 - 1);
    if (v20)
    {
      unint64_t v21 = *v20;
      if (v21 > 2) {
        unint64_t v22 = 1;
      }
      else {
        unint64_t v22 = qword_19EC7B170[v21];
      }
      if (v22 < a2)
      {
        exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
        std::to_string(&v27, a2);
        int v25 = std::string::insert(&v27, 0, "excessive object size: ");
        long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
        std::string::size_type v29 = v25->__r_.__value_.__r.__words[2];
        long long v28 = v26;
        v25->__r_.__value_.__l.__size_ = 0;
        v25->__r_.__value_.__r.__words[2] = 0;
        v25->__r_.__value_.__r.__words[0] = 0;
        nlohmann::detail::out_of_range::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(408, (uint64_t)&v28, exception);
      }
    }
  }
  return 1;
}

void sub_19E8E3CCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v21 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_object(void *a1)
{
  uint64_t v2 = a1[2];
  if (*(void *)(v2 - 8)
    && (std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()((uint64_t)(a1 + 12), ((unint64_t)(v2 - a1[1]) >> 3) - 1, 1) & 1) == 0)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v16, (uint64_t)(a1 + 17));
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=(*(void *)(a1[2] - 8), (uint64_t)v16);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v16);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v17, v16[0]);
  }
  uint64_t v4 = a1[1];
  uint64_t v3 = a1[2];
  if (v4 == v3) {
    nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_object();
  }
  uint64_t v5 = a1[5];
  if (!v5) {
    nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_object();
  }
  a1[2] = v3 - 8;
  a1[5] = v5 - 1;
  if (v4 != v3 - 8)
  {
    uint64_t v6 = *(unsigned __int8 **)(v3 - 16);
    if (v6)
    {
      if (*v6 - 1 <= 1)
      {
        nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::iter_impl(&v13, (uint64_t)v6);
        nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::set_begin(&v13);
        nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::iter_impl(v12, *(void *)(a1[2] - 8));
        nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::set_end(v12);
        if (!nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator==<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,(decltype(nullptr))0>(&v13, v12))
        {
          while (*nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator->(&v13) != 9)
          {
            nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator++(&v13);
            nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::iter_impl(v12, *(void *)(a1[2] - 8));
            nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::set_end(v12);
            if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator==<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,(decltype(nullptr))0>(&v13, v12))
            {
              return 1;
            }
          }
          unint64_t v7 = *(unsigned __int8 **)(a1[2] - 8);
          unint64_t v9 = v13;
          long long v10 = v14;
          uint64_t v11 = v15;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::erase<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,0>(v7, &v9, v12);
        }
      }
    }
  }
  return 1;
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::key(void *a1, long long *a2)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string const&,std::string,0>((uint64_t)v10, (uint64_t)a2);
  char v9 = std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()((uint64_t)(a1 + 12), (a1[2] - a1[1]) >> 3, 4);
  std::vector<BOOL>::push_back((uint64_t)(a1 + 7), &v9);
  if (v9 && *(void *)(a1[2] - 8))
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v7, (uint64_t)(a1 + 17));
    uint64_t v4 = *(uint64_t ***)(*(void *)(a1[2] - 8) + 8);
    uint64_t v12 = a2;
    uint64_t v5 = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v4, (const void **)a2, (uint64_t)&std::piecewise_construct, &v12);
    a1[10] = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=((uint64_t)(v5 + 7), (uint64_t)v7);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v7);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v8, v7[0]);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v10);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v11, v10[0]);
  return 1;
}

void sub_19E8E3FA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, uint64_t *);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)va);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)va1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::start_array(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = (char **)(a1 + 1);
  char v30 = std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()((uint64_t)(a1 + 12), (unint64_t)(a1[2] - a1[1]) >> 3, 2);
  std::vector<BOOL>::push_back((uint64_t)(a1 + 4), &v30);
  LOBYTE(v28) = 2;
  nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>(a1, (unsigned __int8 *)&v28, 1);
  uint64_t v6 = v5;
  unint64_t v7 = (void *)a1[2];
  unint64_t v8 = a1[3];
  if ((unint64_t)v7 >= v8)
  {
    uint64_t v10 = ((char *)v7 - *v4) >> 3;
    if ((unint64_t)(v10 + 1) >> 61) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v8 - (void)*v4;
    uint64_t v12 = v11 >> 2;
    if (v11 >> 2 <= (unint64_t)(v10 + 1)) {
      uint64_t v12 = v10 + 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    if (v13) {
      long long v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v13);
    }
    else {
      long long v14 = 0;
    }
    uint64_t v15 = &v14[8 * v10];
    int v16 = &v14[8 * v13];
    *(void *)uint64_t v15 = v6;
    char v9 = v15 + 8;
    uint64_t v18 = (char *)a1[1];
    int v17 = (char *)a1[2];
    if (v17 != v18)
    {
      do
      {
        uint64_t v19 = *((void *)v17 - 1);
        v17 -= 8;
        *((void *)v15 - 1) = v19;
        v15 -= 8;
      }
      while (v17 != v18);
      int v17 = *v4;
    }
    a1[1] = (uint64_t)v15;
    a1[2] = (uint64_t)v9;
    a1[3] = (uint64_t)v16;
    if (v17) {
      operator delete(v17);
    }
  }
  else
  {
    *unint64_t v7 = v5;
    char v9 = v7 + 1;
  }
  a1[2] = (uint64_t)v9;
  if (a2 != -1)
  {
    uint64_t v20 = (char *)*(v9 - 1);
    if (v20)
    {
      unint64_t v21 = *v20;
      if (v21 > 2) {
        unint64_t v22 = 1;
      }
      else {
        unint64_t v22 = qword_19EC7B170[v21];
      }
      if (v22 < a2)
      {
        exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
        std::to_string(&v27, a2);
        int v25 = std::string::insert(&v27, 0, "excessive array size: ");
        long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
        std::string::size_type v29 = v25->__r_.__value_.__r.__words[2];
        long long v28 = v26;
        v25->__r_.__value_.__l.__size_ = 0;
        v25->__r_.__value_.__r.__words[2] = 0;
        v25->__r_.__value_.__r.__words[0] = 0;
        nlohmann::detail::out_of_range::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(408, (uint64_t)&v28, exception);
      }
    }
  }
  return 1;
}

void sub_19E8E41CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v21 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_array(void *a1)
{
  uint64_t v2 = a1[2];
  if (*(void *)(v2 - 8)
    && (std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()((uint64_t)(a1 + 12), ((unint64_t)(v2 - a1[1]) >> 3) - 1, 3) & 1) == 0)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v9, (uint64_t)(a1 + 17));
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=(*(void *)(a1[2] - 8), (uint64_t)v9);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v9);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v10, v9[0]);
    char v3 = 0;
  }
  else
  {
    char v3 = 1;
  }
  uint64_t v5 = a1[1];
  uint64_t v4 = a1[2];
  if (v5 == v4) {
    nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_array();
  }
  uint64_t v6 = a1[5];
  if (!v6) {
    nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_array();
  }
  a1[2] = v4 - 8;
  a1[5] = v6 - 1;
  if (v5 == v4 - 8) {
    char v3 = 1;
  }
  if ((v3 & 1) == 0)
  {
    uint64_t v7 = *(void *)(v4 - 16);
    if (*(unsigned char *)v7 == 2) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__base_destruct_at_end[abi:ne180100](*(void *)(v7 + 8), *(void *)(*(void *)(v7 + 8) + 8) - 16);
    }
  }
  return 1;
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error<nlohmann::detail::out_of_range>(uint64_t a1, uint64_t a2, uint64_t a3, const nlohmann::detail::out_of_range *a4)
{
  *(unsigned char *)(a1 + 88) = 1;
  if (*(unsigned char *)(a1 + 128))
  {
    exception = (nlohmann::detail::out_of_range *)__cxa_allocate_exception(0x20uLL);
    uint64_t v7 = nlohmann::detail::out_of_range::out_of_range(exception, a4);
  }
  return 0;
}

uint64_t std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()(uint64_t a1, int a2, char a3)
{
  int v6 = a2;
  char v5 = a3;
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, int *, char *))(*(void *)v3 + 48))(v3, &v6, &v5);
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>(uint64_t *a1, unsigned __int8 *a2, char a3)
{
  uint64_t v3 = a1[5];
  if (!v3) {
    nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>();
  }
  if ((*(void *)(a1[4] + (((unint64_t)(v3 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v3 - 1)))
  {
    int v6 = *a2;
    v24[0] = v6;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::json_value(&v25, v6);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v24);
    if ((a3 & 1) != 0
      || (std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()((uint64_t)(a1 + 12), (unint64_t)(a1[2] - a1[1]) >> 3, 5) & 1) != 0)
    {
      uint64_t v7 = a1[2];
      if (a1[1] == v7)
      {
        v22[0] = v24[0];
        uint64_t v23 = v25;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v24);
        v24[0] = 0;
        int v25 = 0;
        uint64_t v13 = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=(*a1, (uint64_t)v22);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v23, v22[0]);
LABEL_20:
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v24);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v25, v24[0]);
        return v13;
      }
      unint64_t v8 = *(unsigned __int8 **)(v7 - 8);
      if (v8)
      {
        int v9 = *v8;
        if (v9 == 2)
        {
          uint64_t v10 = (uint64_t *)*((void *)v8 + 1);
          unint64_t v11 = v10[1];
          if (v11 >= v10[2])
          {
            uint64_t v12 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(v10, (uint64_t)v24);
          }
          else
          {
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__construct_one_at_end[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>((uint64_t)v10, (uint64_t)v24);
            uint64_t v12 = v11 + 16;
          }
          v10[1] = v12;
          uint64_t v13 = 1;
          goto LABEL_20;
        }
        if (v9 == 1)
        {
          uint64_t v14 = a1[8];
          if (v14)
          {
            unint64_t v15 = v14 - 1;
            unint64_t v16 = *(void *)(a1[7] + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8));
            a1[8] = v15;
            if ((v16 >> v15))
            {
              if (!a1[10]) {
                __assert_rtn("handle_value", "json.hpp", 6101, "object_element");
              }
              v20[0] = v24[0];
              int v21 = v25;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v24);
              v24[0] = 0;
              int v25 = 0;
              uint64_t v13 = 1;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=(a1[10], (uint64_t)v20);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v21, v20[0]);
              goto LABEL_20;
            }
            goto LABEL_17;
          }
          uint64_t v18 = "!key_keep_stack.empty()";
          int v19 = 6092;
        }
        else
        {
          uint64_t v18 = "ref_stack.back()->is_array() || ref_stack.back()->is_object()";
          int v19 = 6080;
        }
        __assert_rtn("handle_value", "json.hpp", v19, v18);
      }
    }
LABEL_17:
    uint64_t v13 = 0;
    goto LABEL_20;
  }
  return 0;
}

void sub_19E8E4684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)va);
  _Unwind_Resume(a1);
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  exception = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);

  JUMPOUT(0x19F3C1920);
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 4;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60) {
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 3 > v5) {
    unint64_t v5 = v8 >> 3;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v9 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  v15[4] = a1 + 2;
  uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(v7, v9);
  uint64_t v11 = (uint64_t)&v10[16 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v15[3] = &v10[16 * v12];
  *(unsigned char *)uint64_t v11 = *(unsigned char *)a2;
  *(void *)(v11 + 8) = *(void *)(a2 + 8);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a2);
  *(unsigned char *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
  v15[2] = v11 + 16;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(a1, v15);
  uint64_t v13 = a1[1];
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)v15);
  return v13;
}

void sub_19E8E480C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator->(unsigned __int8 **a1)
{
  uint64_t result = *a1;
  if (!result) {
    nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator->();
  }
  int v3 = *result;
  if (v3 == 2)
  {
    unint64_t v5 = *(unsigned __int8 **)(*((void *)result + 1) + 8);
    uint64_t result = a1[2];
    if (result == v5) {
      nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator->();
    }
  }
  else if (v3 == 1)
  {
    uint64_t v4 = a1[1];
    if (v4 == (unsigned __int8 *)(*((void *)result + 1) + 8)) {
      nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator->();
    }
    return v4 + 56;
  }
  else if (a1[3])
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v7, "cannot get value");
    nlohmann::detail::invalid_iterator::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(214, (uint64_t)v7, exception);
  }
  return result;
}

void sub_19E8E4910(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::erase<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,0>(unsigned __int8 *a1@<X0>, unsigned __int8 **a2@<X1>, void *a3@<X8>)
{
  if (*a2 != a1)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(&v25, "iterator does not fit current value");
    nlohmann::detail::invalid_iterator::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(202, (uint64_t)&v25, exception);
  }
  int v6 = (unsigned __int8 **)nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::iter_impl(a3, (uint64_t)a1);
  nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::set_end(v6);
  int v7 = *a1;
  if ((v7 - 3) < 6)
  {
    if (a2[3])
    {
      int v19 = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(&v25, "iterator out of range");
      nlohmann::detail::invalid_iterator::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(205, (uint64_t)&v25, v19);
    }
    if (v7 == 8)
    {
      unint64_t v9 = (void **)(a1 + 8);
      uint64_t v8 = (void **)*((void *)a1 + 1);
      uint64_t v14 = *v8;
      if (*v8)
      {
        v8[1] = v14;
        uint64_t v10 = v14;
        goto LABEL_13;
      }
    }
    else
    {
      if (v7 != 3)
      {
LABEL_15:
        *a1 = 0;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)a1);
        return;
      }
      unint64_t v9 = (void **)(a1 + 8);
      uint64_t v8 = (void **)*((void *)a1 + 1);
      if (*((char *)v8 + 23) < 0)
      {
        uint64_t v10 = *v8;
LABEL_13:
        operator delete(v10);
        uint64_t v8 = (void **)*v9;
      }
    }
    operator delete(v8);
    *unint64_t v9 = 0;
    goto LABEL_15;
  }
  if (v7 == 1)
  {
    unint64_t v15 = (uint64_t **)*((void *)a1 + 1);
    int v16 = (uint64_t *)a2[1];
    int v17 = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__remove_node_pointer(v15, v16);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,0>((uint64_t)(v16 + 4));
    operator delete(v16);
    a3[1] = v17;
  }
  else
  {
    if (v7 != 2)
    {
      uint64_t v20 = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      int v21 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name((char *)a1);
      std::string::basic_string[abi:ne180100]<0>(&v24, v21);
      unint64_t v22 = std::string::insert(&v24, 0, "cannot use erase() with ");
      long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      std::string::size_type v26 = v22->__r_.__value_.__r.__words[2];
      long long v25 = v23;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      nlohmann::detail::type_error::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(307, (uint64_t)&v25, v20);
    }
    uint64_t v11 = *((void *)a1 + 1);
    uint64_t v12 = (uint64_t)a2[2];
    std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *>((uint64_t)&v25, v12 + 16, *(void *)(v11 + 8), v12);
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__base_destruct_at_end[abi:ne180100](v11, v13);
    a3[2] = v12;
  }
}

void sub_19E8E4BDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (v22) {
    __cxa_free_exception(v21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__remove_node_pointer(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      int v3 = v2;
      uint64_t v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    uint64_t v4 = a2;
    do
    {
      int v3 = (uint64_t *)v4[2];
      BOOL v5 = *v3 == (void)v4;
      uint64_t v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2) {
    *a1 = v3;
  }
  int v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v6, a2);
  return v3;
}

uint64_t *std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  int v3 = a2;
  if (*a2)
  {
    uint64_t v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      int v3 = a2;
      goto LABEL_7;
    }
    do
    {
      int v3 = v4;
      uint64_t v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  uint64_t v2 = v3[1];
  if (v2)
  {
LABEL_7:
    int v5 = 0;
    *(void *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  int v5 = 1;
LABEL_8:
  int v6 = (uint64_t **)v3[2];
  int v7 = *v6;
  if (*v6 == v3)
  {
    *int v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      int v7 = 0;
      uint64_t result = (uint64_t *)v2;
    }
    else
    {
      int v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  int v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    uint64_t v9 = a2[2];
    _DWORD v3[2] = v9;
    *(void *)(v9 + 8 * (*(void *)a2[2] != (void)a2)) = v3;
    uint64_t v11 = *a2;
    uint64_t v10 = a2[1];
    *(void *)(v11 + 16) = v3;
    *int v3 = v11;
    v3[1] = v10;
    if (v10) {
      *(void *)(v10 + 16) = v3;
    }
    *((unsigned char *)v3 + 24) = *((unsigned char *)a2 + 24);
    if (result == a2) {
      uint64_t result = v3;
    }
  }
  if (!v8 || !result) {
    return result;
  }
  if (!v5)
  {
    *(unsigned char *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    uint64_t v12 = v7[2];
    if (*(uint64_t **)v12 == v7) {
      break;
    }
    if (!*((unsigned char *)v7 + 24))
    {
      *((unsigned char *)v7 + 24) = 1;
      *(unsigned char *)(v12 + 24) = 0;
      uint64_t v13 = *(uint64_t **)(v12 + 8);
      uint64_t v14 = *v13;
      *(void *)(v12 + 8) = *v13;
      if (v14) {
        *(void *)(v14 + 16) = v12;
      }
      void v13[2] = *(void *)(v12 + 16);
      *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v13;
      *uint64_t v13 = v12;
      *(void *)(v12 + 16) = v13;
      if (result == (uint64_t *)*v7) {
        uint64_t result = v7;
      }
      int v7 = *(uint64_t **)(*v7 + 8);
    }
    unint64_t v15 = (void *)*v7;
    if (*v7 && !*((unsigned char *)v15 + 24))
    {
      int v16 = (uint64_t *)v7[1];
      if (!v16) {
        goto LABEL_56;
      }
LABEL_55:
      if (*((unsigned char *)v16 + 24))
      {
LABEL_56:
        *((unsigned char *)v15 + 24) = 1;
        *((unsigned char *)v7 + 24) = 0;
        uint64_t v22 = v15[1];
        *int v7 = v22;
        if (v22) {
          *(void *)(v22 + 16) = v7;
        }
        v15[2] = v7[2];
        *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v15;
        v15[1] = v7;
        _DWORD v7[2] = (uint64_t)v15;
        int v16 = v7;
      }
      else
      {
        unint64_t v15 = v7;
      }
      uint64_t v23 = v15[2];
      *((unsigned char *)v15 + 24) = *(unsigned char *)(v23 + 24);
      *(unsigned char *)(v23 + 24) = 1;
      *((unsigned char *)v16 + 24) = 1;
      std::string v24 = *(uint64_t **)(v23 + 8);
      uint64_t v25 = *v24;
      *(void *)(v23 + 8) = *v24;
      if (v25) {
        *(void *)(v25 + 16) = v23;
      }
      _OWORD v24[2] = *(void *)(v23 + 16);
      *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
      *std::string v24 = v23;
      goto LABEL_72;
    }
    int v16 = (uint64_t *)v7[1];
    if (v16 && !*((unsigned char *)v16 + 24)) {
      goto LABEL_55;
    }
    *((unsigned char *)v7 + 24) = 0;
    int v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      int v17 = result;
LABEL_53:
      *((unsigned char *)v17 + 24) = 1;
      return result;
    }
    if (!*((unsigned char *)v17 + 24)) {
      goto LABEL_53;
    }
LABEL_49:
    int v7 = *(uint64_t **)(v17[2] + 8 * (*(void *)v17[2] == (void)v17));
  }
  if (!*((unsigned char *)v7 + 24))
  {
    *((unsigned char *)v7 + 24) = 1;
    *(unsigned char *)(v12 + 24) = 0;
    uint64_t v18 = v7[1];
    *(void *)uint64_t v12 = v18;
    if (v18) {
      *(void *)(v18 + 16) = v12;
    }
    _DWORD v7[2] = *(void *)(v12 + 16);
    *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v7;
    v7[1] = v12;
    *(void *)(v12 + 16) = v7;
    if (result == (uint64_t *)v12) {
      uint64_t result = v7;
    }
    int v7 = *(uint64_t **)v12;
  }
  int v19 = (void *)*v7;
  if (*v7 && !*((unsigned char *)v19 + 24)) {
    goto LABEL_68;
  }
  uint64_t v20 = (uint64_t *)v7[1];
  if (!v20 || *((unsigned char *)v20 + 24))
  {
    *((unsigned char *)v7 + 24) = 0;
    int v17 = (uint64_t *)v7[2];
    if (*((unsigned char *)v17 + 24)) {
      BOOL v21 = v17 == result;
    }
    else {
      BOOL v21 = 1;
    }
    if (v21) {
      goto LABEL_53;
    }
    goto LABEL_49;
  }
  if (v19 && !*((unsigned char *)v19 + 24))
  {
LABEL_68:
    uint64_t v20 = v7;
  }
  else
  {
    *((unsigned char *)v20 + 24) = 1;
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v26 = *v20;
    v7[1] = *v20;
    if (v26) {
      *(void *)(v26 + 16) = v7;
    }
    v20[2] = v7[2];
    *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v20;
    *uint64_t v20 = (uint64_t)v7;
    _DWORD v7[2] = (uint64_t)v20;
    int v19 = v7;
  }
  uint64_t v23 = v20[2];
  *((unsigned char *)v20 + 24) = *(unsigned char *)(v23 + 24);
  *(unsigned char *)(v23 + 24) = 1;
  *((unsigned char *)v19 + 24) = 1;
  std::string v24 = *(uint64_t **)v23;
  uint64_t v27 = *(void *)(*(void *)v23 + 8);
  *(void *)uint64_t v23 = v27;
  if (v27) {
    *(void *)(v27 + 16) = v23;
  }
  _OWORD v24[2] = *(void *)(v23 + 16);
  *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
  v24[1] = v23;
LABEL_72:
  *(void *)(v23 + 16) = v24;
  return result;
}

uint64_t std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      v8[0] = *(unsigned char *)v5;
      uint64_t v9 = *(uint64_t **)(v5 + 8);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v5);
      *(unsigned char *)uint64_t v5 = 0;
      *(void *)(v5 + 8) = 0;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v8);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=(a4, (uint64_t)v8);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v8);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v9, v8[0]);
      a4 += 16;
      v5 += 16;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

nlohmann::detail::out_of_range *nlohmann::detail::out_of_range::out_of_range(nlohmann::detail::out_of_range *this, const nlohmann::detail::out_of_range *a2)
{
  *(void *)this = &unk_1EF0DD050;
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  MEMORY[0x19F3C13A0]((char *)this + 16, (char *)a2 + 16);
  *(void *)this = &unk_1EF0DCFD0;
  return this;
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<double &>(uint64_t *a1, uint64_t **a2, char a3)
{
  uint64_t v3 = a1[5];
  if (!v3) {
    nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>();
  }
  if ((*(void *)(a1[4] + (((unint64_t)(v3 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v3 - 1)))
  {
    int v6 = *a2;
    v24[0] = 7;
    uint64_t v25 = v6;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v24);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v24);
    if ((a3 & 1) != 0
      || (std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()((uint64_t)(a1 + 12), (unint64_t)(a1[2] - a1[1]) >> 3, 5) & 1) != 0)
    {
      uint64_t v7 = a1[2];
      if (a1[1] == v7)
      {
        v22[0] = v24[0];
        uint64_t v23 = v25;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v24);
        v24[0] = 0;
        uint64_t v25 = 0;
        uint64_t v13 = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=(*a1, (uint64_t)v22);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v23, v22[0]);
LABEL_20:
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v24);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v25, v24[0]);
        return v13;
      }
      int v8 = *(unsigned __int8 **)(v7 - 8);
      if (v8)
      {
        int v9 = *v8;
        if (v9 == 2)
        {
          uint64_t v10 = (uint64_t *)*((void *)v8 + 1);
          unint64_t v11 = v10[1];
          if (v11 >= v10[2])
          {
            uint64_t v12 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(v10, (uint64_t)v24);
          }
          else
          {
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__construct_one_at_end[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>((uint64_t)v10, (uint64_t)v24);
            uint64_t v12 = v11 + 16;
          }
          v10[1] = v12;
          uint64_t v13 = 1;
          goto LABEL_20;
        }
        if (v9 == 1)
        {
          uint64_t v14 = a1[8];
          if (v14)
          {
            unint64_t v15 = v14 - 1;
            unint64_t v16 = *(void *)(a1[7] + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8));
            a1[8] = v15;
            if ((v16 >> v15))
            {
              if (!a1[10]) {
                __assert_rtn("handle_value", "json.hpp", 6101, "object_element");
              }
              v20[0] = v24[0];
              BOOL v21 = v25;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v24);
              v24[0] = 0;
              uint64_t v25 = 0;
              uint64_t v13 = 1;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=(a1[10], (uint64_t)v20);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v21, v20[0]);
              goto LABEL_20;
            }
            goto LABEL_17;
          }
          uint64_t v18 = "!key_keep_stack.empty()";
          int v19 = 6092;
        }
        else
        {
          uint64_t v18 = "ref_stack.back()->is_array() || ref_stack.back()->is_object()";
          int v19 = 6080;
        }
        __assert_rtn("handle_value", "json.hpp", v19, v18);
      }
    }
LABEL_17:
    uint64_t v13 = 0;
    goto LABEL_20;
  }
  return 0;
}

void sub_19E8E5428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<BOOL &>(uint64_t *a1, unsigned __int8 *a2, char a3)
{
  uint64_t v3 = a1[5];
  if (!v3) {
    nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>();
  }
  if ((*(void *)(a1[4] + (((unint64_t)(v3 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v3 - 1)))
  {
    int v6 = (uint64_t *)*a2;
    v24[0] = 4;
    uint64_t v25 = v6;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v24);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v24);
    if ((a3 & 1) != 0
      || (std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()((uint64_t)(a1 + 12), (unint64_t)(a1[2] - a1[1]) >> 3, 5) & 1) != 0)
    {
      uint64_t v7 = a1[2];
      if (a1[1] == v7)
      {
        v22[0] = v24[0];
        uint64_t v23 = v25;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v24);
        v24[0] = 0;
        uint64_t v25 = 0;
        uint64_t v13 = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=(*a1, (uint64_t)v22);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v23, v22[0]);
LABEL_20:
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v24);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v25, v24[0]);
        return v13;
      }
      int v8 = *(unsigned __int8 **)(v7 - 8);
      if (v8)
      {
        int v9 = *v8;
        if (v9 == 2)
        {
          uint64_t v10 = (uint64_t *)*((void *)v8 + 1);
          unint64_t v11 = v10[1];
          if (v11 >= v10[2])
          {
            uint64_t v12 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(v10, (uint64_t)v24);
          }
          else
          {
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__construct_one_at_end[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>((uint64_t)v10, (uint64_t)v24);
            uint64_t v12 = v11 + 16;
          }
          v10[1] = v12;
          uint64_t v13 = 1;
          goto LABEL_20;
        }
        if (v9 == 1)
        {
          uint64_t v14 = a1[8];
          if (v14)
          {
            unint64_t v15 = v14 - 1;
            unint64_t v16 = *(void *)(a1[7] + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8));
            a1[8] = v15;
            if ((v16 >> v15))
            {
              if (!a1[10]) {
                __assert_rtn("handle_value", "json.hpp", 6101, "object_element");
              }
              v20[0] = v24[0];
              BOOL v21 = v25;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v24);
              v24[0] = 0;
              uint64_t v25 = 0;
              uint64_t v13 = 1;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=(a1[10], (uint64_t)v20);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v21, v20[0]);
              goto LABEL_20;
            }
            goto LABEL_17;
          }
          uint64_t v18 = "!key_keep_stack.empty()";
          int v19 = 6092;
        }
        else
        {
          uint64_t v18 = "ref_stack.back()->is_array() || ref_stack.back()->is_object()";
          int v19 = 6080;
        }
        __assert_rtn("handle_value", "json.hpp", v19, v18);
      }
    }
LABEL_17:
    uint64_t v13 = 0;
    goto LABEL_20;
  }
  return 0;
}

void sub_19E8E56F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<decltype(nullptr)>(uint64_t *a1, uint64_t a2, char a3)
{
  uint64_t v3 = a1[5];
  if (!v3) {
    nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>();
  }
  if ((*(void *)(a1[4] + (((unint64_t)(v3 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v3 - 1)))
  {
    v23[0] = 0;
    std::string v24 = 0;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v23);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v23);
    if ((a3 & 1) != 0
      || (std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()((uint64_t)(a1 + 12), (unint64_t)(a1[2] - a1[1]) >> 3, 5) & 1) != 0)
    {
      uint64_t v6 = a1[2];
      if (a1[1] == v6)
      {
        v21[0] = v23[0];
        uint64_t v22 = v24;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v23);
        v23[0] = 0;
        std::string v24 = 0;
        uint64_t v12 = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=(*a1, (uint64_t)v21);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v22, v21[0]);
LABEL_20:
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v23);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v24, v23[0]);
        return v12;
      }
      uint64_t v7 = *(unsigned __int8 **)(v6 - 8);
      if (v7)
      {
        int v8 = *v7;
        if (v8 == 2)
        {
          int v9 = (uint64_t *)*((void *)v7 + 1);
          unint64_t v10 = v9[1];
          if (v10 >= v9[2])
          {
            uint64_t v11 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(v9, (uint64_t)v23);
          }
          else
          {
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__construct_one_at_end[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>((uint64_t)v9, (uint64_t)v23);
            uint64_t v11 = v10 + 16;
          }
          v9[1] = v11;
          uint64_t v12 = 1;
          goto LABEL_20;
        }
        if (v8 == 1)
        {
          uint64_t v13 = a1[8];
          if (v13)
          {
            unint64_t v14 = v13 - 1;
            unint64_t v15 = *(void *)(a1[7] + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8));
            a1[8] = v14;
            if ((v15 >> v14))
            {
              if (!a1[10]) {
                __assert_rtn("handle_value", "json.hpp", 6101, "object_element");
              }
              v19[0] = v23[0];
              uint64_t v20 = v24;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v23);
              v23[0] = 0;
              std::string v24 = 0;
              uint64_t v12 = 1;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=(a1[10], (uint64_t)v19);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v20, v19[0]);
              goto LABEL_20;
            }
            goto LABEL_17;
          }
          int v17 = "!key_keep_stack.empty()";
          int v18 = 6092;
        }
        else
        {
          int v17 = "ref_stack.back()->is_array() || ref_stack.back()->is_object()";
          int v18 = 6080;
        }
        __assert_rtn("handle_value", "json.hpp", v18, v17);
      }
    }
LABEL_17:
    uint64_t v12 = 0;
    goto LABEL_20;
  }
  return 0;
}

void sub_19E8E59B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<long long &>(uint64_t *a1, uint64_t **a2, char a3)
{
  uint64_t v3 = a1[5];
  if (!v3) {
    nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>();
  }
  if ((*(void *)(a1[4] + (((unint64_t)(v3 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v3 - 1)))
  {
    uint64_t v6 = *a2;
    v24[0] = 5;
    uint64_t v25 = v6;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v24);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v24);
    if ((a3 & 1) != 0
      || (std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()((uint64_t)(a1 + 12), (unint64_t)(a1[2] - a1[1]) >> 3, 5) & 1) != 0)
    {
      uint64_t v7 = a1[2];
      if (a1[1] == v7)
      {
        v22[0] = v24[0];
        uint64_t v23 = v25;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v24);
        v24[0] = 0;
        uint64_t v25 = 0;
        uint64_t v13 = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=(*a1, (uint64_t)v22);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v23, v22[0]);
LABEL_20:
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v24);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v25, v24[0]);
        return v13;
      }
      int v8 = *(unsigned __int8 **)(v7 - 8);
      if (v8)
      {
        int v9 = *v8;
        if (v9 == 2)
        {
          unint64_t v10 = (uint64_t *)*((void *)v8 + 1);
          unint64_t v11 = v10[1];
          if (v11 >= v10[2])
          {
            uint64_t v12 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(v10, (uint64_t)v24);
          }
          else
          {
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__construct_one_at_end[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>((uint64_t)v10, (uint64_t)v24);
            uint64_t v12 = v11 + 16;
          }
          v10[1] = v12;
          uint64_t v13 = 1;
          goto LABEL_20;
        }
        if (v9 == 1)
        {
          uint64_t v14 = a1[8];
          if (v14)
          {
            unint64_t v15 = v14 - 1;
            unint64_t v16 = *(void *)(a1[7] + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8));
            a1[8] = v15;
            if ((v16 >> v15))
            {
              if (!a1[10]) {
                __assert_rtn("handle_value", "json.hpp", 6101, "object_element");
              }
              v20[0] = v24[0];
              BOOL v21 = v25;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v24);
              v24[0] = 0;
              uint64_t v25 = 0;
              uint64_t v13 = 1;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=(a1[10], (uint64_t)v20);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v21, v20[0]);
              goto LABEL_20;
            }
            goto LABEL_17;
          }
          int v18 = "!key_keep_stack.empty()";
          int v19 = 6092;
        }
        else
        {
          int v18 = "ref_stack.back()->is_array() || ref_stack.back()->is_object()";
          int v19 = 6080;
        }
        __assert_rtn("handle_value", "json.hpp", v19, v18);
      }
    }
LABEL_17:
    uint64_t v13 = 0;
    goto LABEL_20;
  }
  return 0;
}

void sub_19E8E5C84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<std::string&>(uint64_t *a1, uint64_t a2, char a3)
{
  uint64_t v3 = a1[5];
  if (!v3) {
    nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>();
  }
  if ((*(void *)(a1[4] + (((unint64_t)(v3 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v3 - 1)))
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string const&,std::string,0>((uint64_t)v23, a2);
    if ((a3 & 1) != 0
      || (std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()((uint64_t)(a1 + 12), (unint64_t)(a1[2] - a1[1]) >> 3, 5) & 1) != 0)
    {
      uint64_t v6 = a1[2];
      if (a1[1] == v6)
      {
        v21[0] = v23[0];
        uint64_t v22 = v24;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v23);
        v23[0] = 0;
        std::string v24 = 0;
        uint64_t v12 = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=(*a1, (uint64_t)v21);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v22, v21[0]);
LABEL_20:
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v23);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v24, v23[0]);
        return v12;
      }
      uint64_t v7 = *(unsigned __int8 **)(v6 - 8);
      if (v7)
      {
        int v8 = *v7;
        if (v8 == 2)
        {
          int v9 = (uint64_t *)*((void *)v7 + 1);
          unint64_t v10 = v9[1];
          if (v10 >= v9[2])
          {
            uint64_t v11 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(v9, (uint64_t)v23);
          }
          else
          {
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__construct_one_at_end[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>((uint64_t)v9, (uint64_t)v23);
            uint64_t v11 = v10 + 16;
          }
          v9[1] = v11;
          uint64_t v12 = 1;
          goto LABEL_20;
        }
        if (v8 == 1)
        {
          uint64_t v13 = a1[8];
          if (v13)
          {
            unint64_t v14 = v13 - 1;
            unint64_t v15 = *(void *)(a1[7] + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8));
            a1[8] = v14;
            if ((v15 >> v14))
            {
              if (!a1[10]) {
                __assert_rtn("handle_value", "json.hpp", 6101, "object_element");
              }
              v19[0] = v23[0];
              uint64_t v20 = v24;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v23);
              v23[0] = 0;
              std::string v24 = 0;
              uint64_t v12 = 1;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=(a1[10], (uint64_t)v19);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v20, v19[0]);
              goto LABEL_20;
            }
            goto LABEL_17;
          }
          int v17 = "!key_keep_stack.empty()";
          int v18 = 6092;
        }
        else
        {
          int v17 = "ref_stack.back()->is_array() || ref_stack.back()->is_object()";
          int v18 = 6080;
        }
        __assert_rtn("handle_value", "json.hpp", v18, v17);
      }
    }
LABEL_17:
    uint64_t v12 = 0;
    goto LABEL_20;
  }
  return 0;
}

void sub_19E8E5F2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<unsigned long long &>(uint64_t *a1, uint64_t **a2, char a3)
{
  uint64_t v3 = a1[5];
  if (!v3) {
    nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>();
  }
  if ((*(void *)(a1[4] + (((unint64_t)(v3 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v3 - 1)))
  {
    uint64_t v6 = *a2;
    v24[0] = 6;
    uint64_t v25 = v6;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v24);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v24);
    if ((a3 & 1) != 0
      || (std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()((uint64_t)(a1 + 12), (unint64_t)(a1[2] - a1[1]) >> 3, 5) & 1) != 0)
    {
      uint64_t v7 = a1[2];
      if (a1[1] == v7)
      {
        v22[0] = v24[0];
        uint64_t v23 = v25;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v24);
        v24[0] = 0;
        uint64_t v25 = 0;
        uint64_t v13 = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=(*a1, (uint64_t)v22);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v23, v22[0]);
LABEL_20:
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v24);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v25, v24[0]);
        return v13;
      }
      int v8 = *(unsigned __int8 **)(v7 - 8);
      if (v8)
      {
        int v9 = *v8;
        if (v9 == 2)
        {
          unint64_t v10 = (uint64_t *)*((void *)v8 + 1);
          unint64_t v11 = v10[1];
          if (v11 >= v10[2])
          {
            uint64_t v12 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(v10, (uint64_t)v24);
          }
          else
          {
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__construct_one_at_end[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>((uint64_t)v10, (uint64_t)v24);
            uint64_t v12 = v11 + 16;
          }
          v10[1] = v12;
          uint64_t v13 = 1;
          goto LABEL_20;
        }
        if (v9 == 1)
        {
          uint64_t v14 = a1[8];
          if (v14)
          {
            unint64_t v15 = v14 - 1;
            unint64_t v16 = *(void *)(a1[7] + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8));
            a1[8] = v15;
            if ((v16 >> v15))
            {
              if (!a1[10]) {
                __assert_rtn("handle_value", "json.hpp", 6101, "object_element");
              }
              v20[0] = v24[0];
              BOOL v21 = v25;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v24);
              v24[0] = 0;
              uint64_t v25 = 0;
              uint64_t v13 = 1;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=(a1[10], (uint64_t)v20);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v21, v20[0]);
              goto LABEL_20;
            }
            goto LABEL_17;
          }
          int v18 = "!key_keep_stack.empty()";
          int v19 = 6092;
        }
        else
        {
          int v18 = "ref_stack.back()->is_array() || ref_stack.back()->is_object()";
          int v19 = 6080;
        }
        __assert_rtn("handle_value", "json.hpp", v19, v18);
      }
    }
LABEL_17:
    uint64_t v13 = 0;
    goto LABEL_20;
  }
  return 0;
}

void sub_19E8E61F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)va);
  _Unwind_Resume(a1);
}

nlohmann::detail::parse_error *nlohmann::detail::parse_error::parse_error(nlohmann::detail::parse_error *this, const nlohmann::detail::parse_error *a2)
{
  *(void *)this = &unk_1EF0DD050;
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  MEMORY[0x19F3C13A0]((char *)this + 16, (char *)a2 + 16);
  *(void *)this = &unk_1EF0DCFA8;
  *((void *)this + 4) = *((void *)a2 + 4);
  return this;
}

void nlohmann::detail::parse_error::position_string(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::to_string(&v12, *(void *)(a1 + 16) + 1);
  uint64_t v4 = std::string::insert(&v12, 0, " at line ");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v13.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  uint64_t v6 = std::string::append(&v13, ", column ");
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v14.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, *(void *)(a1 + 8));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  unint64_t v10 = std::string::append(&v14, (const std::string::value_type *)p_p, size);
  *a2 = *v10;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
}

void sub_19E8E640C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v26 - 25) < 0) {
    operator delete(*(void **)(v26 - 48));
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

const char *nlohmann::detail::lexer_base<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::token_type_name(unsigned int a1)
{
  if (a1 > 0x10) {
    return "unknown token";
  }
  else {
    return off_1E59A37F8[a1];
  }
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_sax_dom_callback_parser(uint64_t a1)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1 + 136);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(a1 + 144), *(unsigned __int8 *)(a1 + 136));
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::~__value_func[abi:ne180100]((void *)(a1 + 96));
  uint64_t v2 = *(void **)(a1 + 56);
  if (v2) {
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 32);
  if (v3) {
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    *(void *)(a1 + 16) = v4;
    operator delete(v4);
  }
  return a1;
}

uint64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::start_object(uint64_t *a1, unint64_t a2)
{
  LOBYTE(v26) = 1;
  uint64_t v4 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>(a1, (unsigned __int8 *)&v26);
  unint64_t v5 = a1[3];
  uint64_t v6 = (uint64_t *)a1[2];
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v8 = a1[1];
    uint64_t v9 = ((uint64_t)v6 - v8) >> 3;
    if ((unint64_t)(v9 + 1) >> 61) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v5 - v8;
    uint64_t v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    if (v12) {
      std::string v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v12);
    }
    else {
      std::string v13 = 0;
    }
    std::string v14 = (uint64_t *)&v13[8 * v9];
    unint64_t v15 = &v13[8 * v12];
    uint64_t *v14 = v4;
    long long v7 = v14 + 1;
    int v17 = (char *)a1[1];
    unint64_t v16 = (char *)a1[2];
    if (v16 != v17)
    {
      do
      {
        uint64_t v18 = *((void *)v16 - 1);
        v16 -= 8;
        *--std::string v14 = v18;
      }
      while (v16 != v17);
      unint64_t v16 = (char *)a1[1];
    }
    a1[1] = (uint64_t)v14;
    a1[2] = (uint64_t)v7;
    a1[3] = (uint64_t)v15;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    *uint64_t v6 = v4;
    long long v7 = v6 + 1;
  }
  a1[2] = (uint64_t)v7;
  if (a2 != -1)
  {
    unint64_t v19 = *(char *)*(v7 - 1);
    if (v19 > 2) {
      unint64_t v20 = 1;
    }
    else {
      unint64_t v20 = qword_19EC7B170[v19];
    }
    if (v20 < a2)
    {
      exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      std::to_string(&v25, a2);
      uint64_t v23 = std::string::insert(&v25, 0, "excessive object size: ");
      long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      std::string::size_type v27 = v23->__r_.__value_.__r.__words[2];
      long long v26 = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      nlohmann::detail::out_of_range::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(408, (uint64_t)&v26, exception);
    }
  }
  return 1;
}

void sub_19E8E66C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v21 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::start_array(uint64_t *a1, unint64_t a2)
{
  LOBYTE(v26) = 2;
  uint64_t v4 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>(a1, (unsigned __int8 *)&v26);
  unint64_t v5 = a1[3];
  uint64_t v6 = (uint64_t *)a1[2];
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v8 = a1[1];
    uint64_t v9 = ((uint64_t)v6 - v8) >> 3;
    if ((unint64_t)(v9 + 1) >> 61) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v5 - v8;
    uint64_t v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    if (v12) {
      std::string v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v12);
    }
    else {
      std::string v13 = 0;
    }
    std::string v14 = (uint64_t *)&v13[8 * v9];
    unint64_t v15 = &v13[8 * v12];
    uint64_t *v14 = v4;
    long long v7 = v14 + 1;
    int v17 = (char *)a1[1];
    unint64_t v16 = (char *)a1[2];
    if (v16 != v17)
    {
      do
      {
        uint64_t v18 = *((void *)v16 - 1);
        v16 -= 8;
        *--std::string v14 = v18;
      }
      while (v16 != v17);
      unint64_t v16 = (char *)a1[1];
    }
    a1[1] = (uint64_t)v14;
    a1[2] = (uint64_t)v7;
    a1[3] = (uint64_t)v15;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    *uint64_t v6 = v4;
    long long v7 = v6 + 1;
  }
  a1[2] = (uint64_t)v7;
  if (a2 != -1)
  {
    unint64_t v19 = *(char *)*(v7 - 1);
    if (v19 > 2) {
      unint64_t v20 = 1;
    }
    else {
      unint64_t v20 = qword_19EC7B170[v19];
    }
    if (v20 < a2)
    {
      exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      std::to_string(&v25, a2);
      uint64_t v23 = std::string::insert(&v25, 0, "excessive array size: ");
      long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      std::string::size_type v27 = v23->__r_.__value_.__r.__words[2];
      long long v26 = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      nlohmann::detail::out_of_range::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(408, (uint64_t)&v26, exception);
    }
  }
  return 1;
}

void sub_19E8E68E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v21 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error<nlohmann::detail::out_of_range>(uint64_t a1, uint64_t a2, uint64_t a3, const nlohmann::detail::out_of_range *a4)
{
  *(unsigned char *)(a1 + 40) = 1;
  if (*(unsigned char *)(a1 + 41))
  {
    exception = (nlohmann::detail::out_of_range *)__cxa_allocate_exception(0x20uLL);
    long long v7 = nlohmann::detail::out_of_range::out_of_range(exception, a4);
  }
  return 0;
}

uint64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v3 = a1[2];
  if (a1[1] == v3)
  {
    int v9 = *a2;
    v14[0] = v9;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::json_value(&v15, v9);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v14);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=(*a1, (uint64_t)v14);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v14);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v15, v14[0]);
    return *a1;
  }
  else
  {
    uint64_t v4 = *(unsigned __int8 **)(v3 - 8);
    int v5 = *v4;
    if (v5 == 2)
    {
      uint64_t v6 = (uint64_t *)*((void *)v4 + 1);
      unint64_t v7 = v6[1];
      if (v7 >= v6[2])
      {
        uint64_t v8 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<nlohmann::detail::value_t>(v6, a2);
      }
      else
      {
        std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__construct_one_at_end[abi:ne180100]<nlohmann::detail::value_t>((uint64_t)v6, a2);
        uint64_t v8 = v7 + 16;
      }
      v6[1] = v8;
      return *(void *)(*(void *)(*(void *)(a1[2] - 8) + 8) + 8) - 16;
    }
    else
    {
      if (v5 != 1) {
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>();
      }
      if (!a1[4]) {
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>();
      }
      int v11 = *a2;
      v12[0] = v11;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::json_value(&v13, v11);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v12);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=(a1[4], (uint64_t)v12);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v12);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v13, v12[0]);
      return a1[4];
    }
  }
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__construct_one_at_end[abi:ne180100]<nlohmann::detail::value_t>(uint64_t a1, unsigned __int8 *a2)
{
  int v4 = *a2;
  uint64_t v3 = *(unsigned char **)(a1 + 8);
  *uint64_t v3 = v4;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::json_value(v3 + 8, v4);
  uint64_t result = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v3);
  *(void *)(a1 + 8) = v3 + 16;
  return result;
}

void sub_19E8E6B30(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<nlohmann::detail::value_t>(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 4;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60) {
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 3 > v5) {
    unint64_t v5 = v8 >> 3;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v9 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v18 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  int v11 = &v10[16 * v4];
  v15[0] = v10;
  v15[1] = v11;
  unint64_t v16 = v11;
  int v17 = &v10[16 * v9];
  int v12 = *a2;
  *int v11 = v12;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::json_value(v11 + 8, v12);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v11);
  v16 += 16;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(a1, v15);
  uint64_t v13 = a1[1];
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)v15);
  return v13;
}

void sub_19E8E6C1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<double &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = a1[2];
  if (a1[1] == v3)
  {
    uint64_t v10 = (uint64_t *)*a2;
    v15[0] = 7;
    unint64_t v16 = v10;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v15);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v15);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=(*a1, (uint64_t)v15);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v15);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v16, v15[0]);
    return *a1;
  }
  else
  {
    uint64_t v4 = *(unsigned __int8 **)(v3 - 8);
    int v5 = *v4;
    if (v5 == 2)
    {
      uint64_t v6 = (uint64_t *)*((void *)v4 + 1);
      unint64_t v7 = v6[1];
      if (v7 >= v6[2])
      {
        uint64_t v9 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<double &>(v6, a2);
      }
      else
      {
        *(void *)(v7 + 8) = 0;
        uint64_t v8 = *a2;
        *(unsigned char *)unint64_t v7 = 7;
        *(void *)(v7 + 8) = v8;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v7);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v7);
        uint64_t v9 = v7 + 16;
      }
      v6[1] = v9;
      return *(void *)(*(void *)(*(void *)(a1[2] - 8) + 8) + 8) - 16;
    }
    else
    {
      if (v5 != 1) {
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>();
      }
      if (!a1[4]) {
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>();
      }
      int v12 = (uint64_t *)*a2;
      v13[0] = 7;
      std::string v14 = v12;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v13);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v13);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=(a1[4], (uint64_t)v13);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v13);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v14, v13[0]);
      return a1[4];
    }
  }
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<double &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 4;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60) {
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 3 > v5) {
    unint64_t v5 = v8 >> 3;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v9 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  v16[4] = a1 + 2;
  uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(v7, v9);
  uint64_t v11 = (uint64_t)&v10[16 * v4];
  v16[0] = v10;
  v16[1] = v11;
  v16[3] = &v10[16 * v12];
  *(void *)(v11 + 8) = 0;
  uint64_t v13 = *a2;
  *(unsigned char *)uint64_t v11 = 7;
  *(void *)(v11 + 8) = v13;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
  v16[2] = v11 + 16;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(a1, v16);
  uint64_t v14 = a1[1];
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)v16);
  return v14;
}

void sub_19E8E6E94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<BOOL &>(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v3 = a1[2];
  if (a1[1] == v3)
  {
    uint64_t v10 = (uint64_t *)*a2;
    v15[0] = 4;
    unint64_t v16 = v10;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v15);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v15);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=(*a1, (uint64_t)v15);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v15);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v16, v15[0]);
    return *a1;
  }
  else
  {
    uint64_t v4 = *(unsigned __int8 **)(v3 - 8);
    int v5 = *v4;
    if (v5 == 2)
    {
      uint64_t v6 = (uint64_t *)*((void *)v4 + 1);
      unint64_t v7 = v6[1];
      if (v7 >= v6[2])
      {
        uint64_t v9 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<BOOL &>(v6, a2);
      }
      else
      {
        *(void *)(v7 + 8) = 0;
        uint64_t v8 = *a2;
        *(unsigned char *)unint64_t v7 = 4;
        *(void *)(v7 + 8) = v8;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v7);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v7);
        uint64_t v9 = v7 + 16;
      }
      v6[1] = v9;
      return *(void *)(*(void *)(*(void *)(a1[2] - 8) + 8) + 8) - 16;
    }
    else
    {
      if (v5 != 1) {
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>();
      }
      if (!a1[4]) {
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>();
      }
      uint64_t v12 = (uint64_t *)*a2;
      v13[0] = 4;
      uint64_t v14 = v12;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v13);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v13);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=(a1[4], (uint64_t)v13);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v13);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v14, v13[0]);
      return a1[4];
    }
  }
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<BOOL &>(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 4;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60) {
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 3 > v5) {
    unint64_t v5 = v8 >> 3;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v9 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  v16[4] = a1 + 2;
  uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(v7, v9);
  uint64_t v11 = (uint64_t)&v10[16 * v4];
  v16[0] = v10;
  v16[1] = v11;
  v16[3] = &v10[16 * v12];
  *(void *)(v11 + 8) = 0;
  uint64_t v13 = *a2;
  *(unsigned char *)uint64_t v11 = 4;
  *(void *)(v11 + 8) = v13;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
  v16[2] = v11 + 16;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(a1, v16);
  uint64_t v14 = a1[1];
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)v16);
  return v14;
}

void sub_19E8E710C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<decltype(nullptr)>(uint64_t *a1)
{
  uint64_t v2 = a1[2];
  if (a1[1] == v2)
  {
    v11[0] = 0;
    uint64_t v12 = 0;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v11);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v11);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=(*a1, (uint64_t)v11);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v11);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v12, v11[0]);
    return *a1;
  }
  else
  {
    uint64_t v3 = *(unsigned __int8 **)(v2 - 8);
    int v4 = *v3;
    if (v4 == 2)
    {
      unint64_t v5 = (uint64_t *)*((void *)v3 + 1);
      unint64_t v6 = v5[1];
      if (v6 >= v5[2])
      {
        uint64_t v7 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<decltype(nullptr)>(v5);
      }
      else
      {
        *(unsigned char *)unint64_t v6 = 0;
        *(void *)(v6 + 8) = 0;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v6);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v6);
        uint64_t v7 = v6 + 16;
      }
      v5[1] = v7;
      return *(void *)(*(void *)(*(void *)(a1[2] - 8) + 8) + 8) - 16;
    }
    else
    {
      if (v4 != 1) {
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>();
      }
      if (!a1[4]) {
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>();
      }
      v9[0] = 0;
      uint64_t v10 = 0;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v9);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v9);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=(a1[4], (uint64_t)v9);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v9);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v10, v9[0]);
      return a1[4];
    }
  }
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<decltype(nullptr)>(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (a1[1] - *a1) >> 4;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 60) {
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v5 = (uint64_t)(a1 + 2);
  uint64_t v6 = a1[2] - v2;
  if (v6 >> 3 > v4) {
    unint64_t v4 = v6 >> 3;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v7 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v4;
  }
  v13[4] = a1 + 2;
  uint64_t v8 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(v5, v7);
  uint64_t v9 = (uint64_t)&v8[16 * v3];
  v13[0] = v8;
  v13[1] = v9;
  v13[3] = &v8[16 * v10];
  *(unsigned char *)uint64_t v9 = 0;
  *(void *)(v9 + 8) = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v9);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v9);
  void v13[2] = v9 + 16;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(a1, v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)v13);
  return v11;
}

void sub_19E8E7350(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<long long &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = a1[2];
  if (a1[1] == v3)
  {
    uint64_t v10 = (uint64_t *)*a2;
    v15[0] = 5;
    unint64_t v16 = v10;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v15);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v15);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=(*a1, (uint64_t)v15);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v15);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v16, v15[0]);
    return *a1;
  }
  else
  {
    unint64_t v4 = *(unsigned __int8 **)(v3 - 8);
    int v5 = *v4;
    if (v5 == 2)
    {
      uint64_t v6 = (uint64_t *)*((void *)v4 + 1);
      unint64_t v7 = v6[1];
      if (v7 >= v6[2])
      {
        uint64_t v9 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<long long &>(v6, a2);
      }
      else
      {
        *(void *)(v7 + 8) = 0;
        uint64_t v8 = *a2;
        *(unsigned char *)unint64_t v7 = 5;
        *(void *)(v7 + 8) = v8;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v7);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v7);
        uint64_t v9 = v7 + 16;
      }
      v6[1] = v9;
      return *(void *)(*(void *)(*(void *)(a1[2] - 8) + 8) + 8) - 16;
    }
    else
    {
      if (v5 != 1) {
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>();
      }
      if (!a1[4]) {
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>();
      }
      uint64_t v12 = (uint64_t *)*a2;
      v13[0] = 5;
      uint64_t v14 = v12;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v13);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v13);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=(a1[4], (uint64_t)v13);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v13);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v14, v13[0]);
      return a1[4];
    }
  }
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<long long &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 4;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60) {
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 3 > v5) {
    unint64_t v5 = v8 >> 3;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v9 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  v16[4] = a1 + 2;
  uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(v7, v9);
  uint64_t v11 = (uint64_t)&v10[16 * v4];
  v16[0] = v10;
  v16[1] = v11;
  v16[3] = &v10[16 * v12];
  *(void *)(v11 + 8) = 0;
  uint64_t v13 = *a2;
  *(unsigned char *)uint64_t v11 = 5;
  *(void *)(v11 + 8) = v13;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
  v16[2] = v11 + 16;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(a1, v16);
  uint64_t v14 = a1[1];
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)v16);
  return v14;
}

void sub_19E8E75C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<std::string&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = a1[2];
  if (a1[1] == v3)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string const&,std::string,0>((uint64_t)v9, a2);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=(*a1, (uint64_t)v9);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v9);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v10, v9[0]);
    return *a1;
  }
  else
  {
    uint64_t v4 = *(uint64_t ***)(v3 - 8);
    int v5 = *(unsigned __int8 *)v4;
    if (v5 == 2)
    {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::emplace_back<std::string&>(v4[1], a2);
      return *(void *)(*(void *)(*(void *)(a1[2] - 8) + 8) + 8) - 16;
    }
    else
    {
      if (v5 != 1) {
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>();
      }
      if (!a1[4]) {
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>();
      }
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string const&,std::string,0>((uint64_t)v7, a2);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=(a1[4], (uint64_t)v7);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v7);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v8, v7[0]);
      return a1[4];
    }
  }
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::emplace_back<std::string&>(uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    uint64_t v9 = (uint64_t)(v7 - *a1) >> 4;
    if ((unint64_t)(v9 + 1) >> 60) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v5 - *a1;
    uint64_t v11 = v10 >> 3;
    if (v10 >> 3 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    uint64_t v19 = v4;
    if (v12) {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(v4, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    unint64_t v15 = v13;
    unint64_t v16 = &v13[16 * v9];
    uint64_t v18 = &v13[16 * v12];
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string const&,std::string,0>((uint64_t)v16, a2);
    int v17 = v16 + 16;
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(a1, &v15);
    uint64_t v8 = a1[1];
    std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)&v15);
  }
  else
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string const&,std::string,0>(*(void *)(v4 - 8), a2);
    uint64_t v8 = v7 + 16;
    a1[1] = v7 + 16;
  }
  a1[1] = v8;
  return v8 - 16;
}

void sub_19E8E77BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<unsigned long long &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = a1[2];
  if (a1[1] == v3)
  {
    uint64_t v10 = (uint64_t *)*a2;
    v15[0] = 6;
    unint64_t v16 = v10;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v15);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v15);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=(*a1, (uint64_t)v15);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v15);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v16, v15[0]);
    return *a1;
  }
  else
  {
    uint64_t v4 = *(unsigned __int8 **)(v3 - 8);
    int v5 = *v4;
    if (v5 == 2)
    {
      unint64_t v6 = (uint64_t *)*((void *)v4 + 1);
      unint64_t v7 = v6[1];
      if (v7 >= v6[2])
      {
        uint64_t v9 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<unsigned long long &>(v6, a2);
      }
      else
      {
        *(void *)(v7 + 8) = 0;
        uint64_t v8 = *a2;
        *(unsigned char *)unint64_t v7 = 6;
        *(void *)(v7 + 8) = v8;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v7);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v7);
        uint64_t v9 = v7 + 16;
      }
      v6[1] = v9;
      return *(void *)(*(void *)(*(void *)(a1[2] - 8) + 8) + 8) - 16;
    }
    else
    {
      if (v5 != 1) {
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>();
      }
      if (!a1[4]) {
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>();
      }
      unint64_t v12 = (uint64_t *)*a2;
      v13[0] = 6;
      uint64_t v14 = v12;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v13);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v13);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=(a1[4], (uint64_t)v13);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v13);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v14, v13[0]);
      return a1[4];
    }
  }
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<unsigned long long &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 4;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60) {
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 3 > v5) {
    unint64_t v5 = v8 >> 3;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v9 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  v16[4] = a1 + 2;
  uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(v7, v9);
  uint64_t v11 = (uint64_t)&v10[16 * v4];
  v16[0] = v10;
  v16[1] = v11;
  v16[3] = &v10[16 * v12];
  *(void *)(v11 + 8) = 0;
  uint64_t v13 = *a2;
  *(unsigned char *)uint64_t v11 = 6;
  *(void *)(v11 + 8) = v13;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
  v16[2] = v11 + 16;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(a1, v16);
  uint64_t v14 = a1[1];
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)v16);
  return v14;
}

void sub_19E8E7A40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void nlohmann::detail::input_stream_adapter::~input_stream_adapter(nlohmann::detail::input_stream_adapter *this)
{
  if (*(void *)this) {
    std::ios_base::clear((std::ios_base *)(*(void *)this + *(void *)(**(void **)this - 24)), *(_DWORD *)(*(void *)this + *(void *)(**(void **)this - 24) + 32) & 2);
  }
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(void ***a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  switch(*(unsigned char *)a2)
  {
    case 0:
      uint64_t v11 = (uint64_t (*)(void))(**a1)[1];
      goto LABEL_83;
    case 1:
      uint64_t v12 = (uint64_t)**a1;
      if (!*(void *)(*(void *)(a2 + 8) + 16))
      {
        uint64_t v45 = *(uint64_t (**)(void))(v12 + 8);
        goto LABEL_52;
      }
      if (a3)
      {
        (*(void (**)(void))(v12 + 8))();
        unsigned int v13 = a6 + a5;
        uint64_t v14 = a1 + 76;
        if (*((char *)a1 + 631) < 0)
        {
          unint64_t v15 = (unint64_t)a1[77];
          if (v15 >= v13) {
            goto LABEL_7;
          }
        }
        else
        {
          unint64_t v15 = *((unsigned __int8 *)a1 + 631);
          if (v13 <= v15)
          {
LABEL_7:
            unint64_t v16 = *(void **)(a2 + 8);
            int v17 = (void *)*v16;
            if (v16[2] == 1)
            {
              uint64_t v18 = (void *)*v16;
            }
            else
            {
              unint64_t v67 = 0;
              do
              {
                uint64_t v68 = a1 + 76;
                if (*((char *)a1 + 631) < 0) {
                  uint64_t v68 = (void ***)*v14;
                }
                ((void (*)(void, void ***, void))(**a1)[1])(*a1, v68, (a6 + a5));
                ((void (*)(void))***a1)();
                nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped((uint64_t)a1, v17 + 4, a4);
                ((void (*)(void, const char *, uint64_t))(**a1)[1])(*a1, "\": ", 3);
                nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, v17 + 7, 1, a4, a5, (a6 + a5));
                ((void (*)(void, const char *, uint64_t))(**a1)[1])(*a1, ",\n", 2);
                uint64_t v69 = (void *)v17[1];
                if (v69)
                {
                  do
                  {
                    uint64_t v18 = v69;
                    uint64_t v69 = (void *)*v69;
                  }
                  while (v69);
                }
                else
                {
                  do
                  {
                    uint64_t v18 = (void *)v17[2];
                    BOOL v51 = *v18 == (void)v17;
                    int v17 = v18;
                  }
                  while (!v51);
                }
                ++v67;
                unint64_t v16 = *(void **)(a2 + 8);
                int v17 = v18;
              }
              while (v67 < v16[2] - 1);
            }
            uint64_t v70 = v16 + 1;
            if (v18 == v70) {
              nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump();
            }
            uint64_t v71 = (void *)v18[1];
            if (v71)
            {
              do
              {
                int v72 = v71;
                uint64_t v71 = (void *)*v71;
              }
              while (v71);
            }
            else
            {
              int v74 = v18;
              do
              {
                int v72 = (void *)v74[2];
                BOOL v51 = *v72 == (void)v74;
                int v74 = v72;
              }
              while (!v51);
            }
            if (v72 != v70) {
              nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump();
            }
            uint64_t v75 = a1 + 76;
            if (*((char *)a1 + 631) < 0) {
              uint64_t v75 = (void ***)*v14;
            }
            ((void (*)(void, void ***, void))(**a1)[1])(*a1, v75, (a6 + a5));
            ((void (*)(void))***a1)();
            nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped((uint64_t)a1, v18 + 4, a4);
            ((void (*)(void, const char *, uint64_t))(**a1)[1])(*a1, "\": ", 3);
            nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, v18 + 7, 1, a4, a5, (a6 + a5));
            ((void (*)(void))***a1)();
            int v66 = (void (*)(void))(**a1)[1];
            goto LABEL_121;
          }
        }
        std::string::resize((std::string *)(a1 + 76), 2 * v15, 32);
        goto LABEL_7;
      }
      (*(void (**)(void))v12)();
      uint64_t v46 = *(void *)(a2 + 8);
      unint64_t v47 = *(void **)v46;
      if (*(void *)(v46 + 16) != 1)
      {
        unint64_t v48 = 0;
        do
        {
          ((void (*)(void, uint64_t))***a1)(*a1, 34);
          nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped((uint64_t)a1, v47 + 4, a4);
          ((void (*)(void, const char *, uint64_t))(**a1)[1])(*a1, "\":", 2);
          nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, v47 + 7, 0, a4, a5, a6);
          ((void (*)(void))***a1)();
          int v49 = (void *)v47[1];
          int v50 = v47;
          if (v49)
          {
            do
            {
              unint64_t v47 = v49;
              int v49 = (void *)*v49;
            }
            while (v49);
          }
          else
          {
            do
            {
              unint64_t v47 = (void *)v50[2];
              BOOL v51 = *v47 == (void)v50;
              int v50 = v47;
            }
            while (!v51);
          }
          ++v48;
          uint64_t v46 = *(void *)(a2 + 8);
        }
        while (v48 < *(void *)(v46 + 16) - 1);
      }
      uint64_t v52 = (void *)(v46 + 8);
      if (v47 == v52) {
        nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump();
      }
      BOOL v53 = (void *)v47[1];
      if (v53)
      {
        do
        {
          uint64_t v54 = v53;
          BOOL v53 = (void *)*v53;
        }
        while (v53);
      }
      else
      {
        uint64_t v73 = v47;
        do
        {
          uint64_t v54 = (void *)v73[2];
          BOOL v51 = *v54 == (void)v73;
          uint64_t v73 = v54;
        }
        while (!v51);
      }
      if (v54 != v52) {
        nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump();
      }
      ((void (*)(void, uint64_t))***a1)(*a1, 34);
      nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped((uint64_t)a1, v47 + 4, a4);
      ((void (*)(void, const char *, uint64_t))(**a1)[1])(*a1, "\":", 2);
      nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, v47 + 7, 0, a4, a5, a6);
LABEL_122:
      uint64_t v11 = (uint64_t (*)(void))***a1;
LABEL_123:
      return v11();
    case 2:
      uint64_t v19 = (void (**)(void))**a1;
      if (**(void **)(a2 + 8) != *(void *)(*(void *)(a2 + 8) + 8))
      {
        if (!a3)
        {
          (*v19)();
          int v55 = *(uint64_t **)(a2 + 8);
          uint64_t v57 = *v55;
          uint64_t v56 = v55[1];
          if (v57 == v56 - 16)
          {
            uint64_t v58 = v57;
          }
          else
          {
            uint64_t v58 = v57;
            do
            {
              nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, v58, 0, a4, a5, a6);
              ((void (*)(void))***a1)();
              v58 += 16;
              uint64_t v59 = *(uint64_t **)(a2 + 8);
              uint64_t v56 = v59[1];
            }
            while (v58 != v56 - 16);
            uint64_t v57 = *v59;
          }
          if (v57 == v56) {
            nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump();
          }
          nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, v58, 0, a4, a5, a6);
          goto LABEL_108;
        }
        v19[1]();
        unsigned int v20 = a6 + a5;
        int v21 = a1 + 76;
        if (*((char *)a1 + 631) < 0)
        {
          unint64_t v22 = (unint64_t)a1[77];
          if (v22 >= v20) {
            goto LABEL_13;
          }
        }
        else
        {
          unint64_t v22 = *((unsigned __int8 *)a1 + 631);
          if (v20 <= v22)
          {
LABEL_13:
            uint64_t v23 = *(uint64_t **)(a2 + 8);
            uint64_t v25 = *v23;
            uint64_t v24 = v23[1];
            if (v25 != v24 - 16)
            {
              do
              {
                long long v26 = a1 + 76;
                if (*((char *)a1 + 631) < 0) {
                  long long v26 = (void ***)*v21;
                }
                ((void (*)(void, void ***, void))(**a1)[1])(*a1, v26, (a6 + a5));
                nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, v25, 1, a4, a5, (a6 + a5));
                ((void (*)(void, const char *, uint64_t))(**a1)[1])(*a1, ",\n", 2);
                v25 += 16;
                std::string::size_type v27 = *(uint64_t **)(a2 + 8);
                uint64_t v24 = v27[1];
              }
              while (v25 != v24 - 16);
              uint64_t v25 = *v27;
            }
            if (v25 == v24) {
              nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump();
            }
            long long v28 = a1 + 76;
            if (*((char *)a1 + 631) < 0) {
              long long v28 = (void ***)*v21;
            }
            ((void (*)(void, void ***, void))(**a1)[1])(*a1, v28, (a6 + a5));
            nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, *(void *)(*(void *)(a2 + 8) + 8) - 16, 1, a4, a5, (a6 + a5));
            ((void (*)(void))***a1)();
            if (*((char *)a1 + 631) < 0) {
              int v21 = (void *)*v21;
            }
            ((void (*)(void, void *, void))(**a1)[1])(*a1, v21, a6);
LABEL_108:
            uint64_t v11 = (uint64_t (*)(void))***a1;
            goto LABEL_123;
          }
        }
        std::string::resize((std::string *)(a1 + 76), 2 * v22, 32);
        goto LABEL_13;
      }
      uint64_t v45 = (uint64_t (*)(void))v19[1];
LABEL_52:
      return v45();
    case 3:
      ((void (*)(void))***a1)();
      nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped((uint64_t)a1, *(uint64_t **)(a2 + 8), a4);
      uint64_t v11 = (uint64_t (*)(void))***a1;
      goto LABEL_123;
    case 4:
      uint64_t v11 = (uint64_t (*)(void))(**a1)[1];
      goto LABEL_83;
    case 5:
      unint64_t v29 = *(void *)(a2 + 8);
      return nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<long long,0>((uint64_t (****)(void))a1, v29);
    case 6:
      unint64_t v31 = *(void *)(a2 + 8);
      return nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned long long,0>((uint64_t (****)(void))a1, v31);
    case 7:
      double v32 = *(double *)(a2 + 8);
      return nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_float((char *)a1, v32);
    case 8:
      long long v33 = (void (*)(void))(**a1)[1];
      if (a3)
      {
        v33();
        uint64_t v34 = (a6 + a5);
        std::string v35 = a1 + 76;
        if (*((char *)a1 + 631) < 0)
        {
          unint64_t v36 = (unint64_t)a1[77];
          if (v36 >= v34)
          {
            std::string v37 = (uint64_t (***)(void))*a1;
            goto LABEL_73;
          }
        }
        else
        {
          unint64_t v36 = *((unsigned __int8 *)a1 + 631);
          if (v34 <= v36)
          {
            std::string v37 = (uint64_t (***)(void))*a1;
            std::string v38 = a1 + 76;
            goto LABEL_74;
          }
        }
        std::string::resize((std::string *)(a1 + 76), 2 * v36, 32);
        std::string v37 = (uint64_t (***)(void))*a1;
        std::string v38 = a1 + 76;
        if ((*((char *)a1 + 631) & 0x80000000) == 0)
        {
LABEL_74:
          ((void (*)(uint64_t (***)(void), void ***, uint64_t))(*v37)[1])(v37, v38, v34);
          ((void (*)(void, const char *, uint64_t))(**a1)[1])(*a1, "\"bytes\": [", 10);
          uint64_t v60 = *(unsigned __int8 ***)(a2 + 8);
          uint64_t v62 = *v60;
          BOOL v61 = v60[1];
          if (v62 != v61)
          {
            if (v62 != v61 - 1)
            {
              do
              {
                unsigned int v63 = *v62++;
                nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>((uint64_t)a1, v63);
                ((void (*)(void, const char *, uint64_t))(**a1)[1])(*a1, ", ", 2);
              }
              while (v62 != (unsigned __int8 *)(*(void *)(*(void *)(a2 + 8) + 8) - 1));
            }
            nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>((uint64_t)a1, *v62);
          }
          ((void (*)(void, const char *, uint64_t))(**a1)[1])(*a1, "],\n", 3);
          int v64 = a1 + 76;
          if (*((char *)a1 + 631) < 0) {
            int v64 = (void ***)*v35;
          }
          ((void (*)(void, void ***, uint64_t))(**a1)[1])(*a1, v64, v34);
          ((void (*)(void, const char *, uint64_t))(**a1)[1])(*a1, "\"subtype\": ", 11);
          uint64_t v65 = *(void *)(a2 + 8);
          if (*(unsigned char *)(v65 + 25)) {
            nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>((uint64_t)a1, *(unsigned __int8 *)(v65 + 24));
          }
          else {
            ((void (*)(void, const char *, uint64_t))(**a1)[1])(*a1, "null", 4);
          }
          ((void (*)(void, uint64_t))***a1)(*a1, 10);
          int v66 = (void (*)(void))(**a1)[1];
LABEL_121:
          v66();
          goto LABEL_122;
        }
LABEL_73:
        std::string v38 = (void ***)*v35;
        goto LABEL_74;
      }
      v33();
      std::string::size_type v39 = *(unsigned __int8 ***)(a2 + 8);
      std::runtime_error v41 = *v39;
      std::runtime_error v40 = v39[1];
      if (v41 != v40)
      {
        while (v41 != v40 - 1)
        {
          unsigned int v42 = *v41++;
          nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>((uint64_t)a1, v42);
          ((void (*)(void, uint64_t))***a1)(*a1, 44);
          std::runtime_error v40 = *(unsigned __int8 **)(*(void *)(a2 + 8) + 8);
        }
        nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>((uint64_t)a1, *v41);
      }
      ((void (*)(void, const char *, uint64_t))(**a1)[1])(*a1, "],\"subtype\":", 12);
      uint64_t v43 = *(void *)(a2 + 8);
      if (*(unsigned char *)(v43 + 25))
      {
        nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>((uint64_t)a1, *(unsigned __int8 *)(v43 + 24));
        uint64_t v44 = (uint64_t (*)(void))***a1;
        return v44();
      }
      uint64_t v11 = (uint64_t (*)(void))(**a1)[1];
LABEL_83:
      return v11();
    case 9:
      uint64_t v11 = (uint64_t (*)(void))(**a1)[1];
      goto LABEL_83;
    default:
      nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump();
  }
}

void std::__shared_ptr_emplace<nlohmann::detail::output_stream_adapter<char>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF0DDB58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<nlohmann::detail::output_stream_adapter<char>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF0DDB58;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x19F3C1920);
}

uint64_t std::__shared_ptr_emplace<nlohmann::detail::output_stream_adapter<char>>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 16))();
}

uint64_t nlohmann::detail::output_stream_adapter<char>::write_character()
{
  return std::ostream::put();
}

uint64_t nlohmann::detail::output_stream_adapter<char>::write_characters()
{
  return std::ostream::write();
}

void nlohmann::detail::output_stream_adapter<char>::~output_stream_adapter()
{
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::serializer(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  uint64_t v7 = localeconv();
  *(void *)(a1 + 80) = v7;
  thousands_sep = v7->thousands_sep;
  if (thousands_sep) {
    LOBYTE(thousands_sep) = *thousands_sep;
  }
  *(unsigned char *)(a1 + 88) = (_BYTE)thousands_sep;
  decimal_point = v7->decimal_point;
  if (v7->decimal_point) {
    LOBYTE(decimal_point) = *decimal_point;
  }
  *(_OWORD *)(a1 + 90) = 0u;
  *(unsigned char *)(a1 + 89) = (_BYTE)decimal_point;
  *(_OWORD *)(a1 + 106) = 0u;
  *(_OWORD *)(a1 + 122) = 0u;
  *(_OWORD *)(a1 + 138) = 0u;
  *(_OWORD *)(a1 + 154) = 0u;
  *(_OWORD *)(a1 + 170) = 0u;
  *(_OWORD *)(a1 + 186) = 0u;
  *(_OWORD *)(a1 + 202) = 0u;
  *(_OWORD *)(a1 + 218) = 0u;
  *(_OWORD *)(a1 + 234) = 0u;
  *(_OWORD *)(a1 + 250) = 0u;
  *(_OWORD *)(a1 + 266) = 0u;
  *(_OWORD *)(a1 + 282) = 0u;
  *(_OWORD *)(a1 + 298) = 0u;
  *(_OWORD *)(a1 + 314) = 0u;
  *(_OWORD *)(a1 + 330) = 0u;
  *(_OWORD *)(a1 + 346) = 0u;
  *(_OWORD *)(a1 + 362) = 0u;
  *(_OWORD *)(a1 + 378) = 0u;
  *(_OWORD *)(a1 + 394) = 0u;
  *(_OWORD *)(a1 + 410) = 0u;
  *(_OWORD *)(a1 + 426) = 0u;
  *(_OWORD *)(a1 + 442) = 0u;
  *(_OWORD *)(a1 + 458) = 0u;
  *(_OWORD *)(a1 + 474) = 0u;
  *(_OWORD *)(a1 + 490) = 0u;
  *(_OWORD *)(a1 + 506) = 0u;
  *(_OWORD *)(a1 + 522) = 0u;
  *(_OWORD *)(a1 + 538) = 0u;
  *(_OWORD *)(a1 + 554) = 0u;
  *(_OWORD *)(a1 + 570) = 0u;
  *(_OWORD *)(a1 + 586) = 0u;
  *(unsigned char *)(a1 + 602) = a3;
  uint64_t v10 = (int8x16_t *)operator new(0x208uLL);
  *(void *)(a1 + 608) = v10;
  *(void *)(a1 + 624) = 0x8000000000000208;
  int8x16_t v11 = vdupq_n_s8(a3);
  *(void *)(a1 + 616) = 512;
  int8x16_t *v10 = v11;
  v10[1] = v11;
  v10[2] = v11;
  v10[3] = v11;
  _DWORD v10[4] = v11;
  void v10[5] = v11;
  v10[6] = v11;
  v10[7] = v11;
  unsigned char v10[8] = v11;
  v10[9] = v11;
  v10[10] = v11;
  v10[11] = v11;
  v10[12] = v11;
  v10[13] = v11;
  v10[14] = v11;
  v10[15] = v11;
  unsigned char v10[16] = v11;
  v10[17] = v11;
  v10[18] = v11;
  v10[19] = v11;
  v10[20] = v11;
  v10[21] = v11;
  v10[22] = v11;
  v10[23] = v11;
  v10[24] = v11;
  v10[25] = v11;
  v10[26] = v11;
  v10[27] = v11;
  v10[28] = v11;
  v10[29] = v11;
  v10[30] = v11;
  v10[31] = v11;
  v10[32].i8[0] = 0;
  *(_DWORD *)(a1 + 632) = a4;
  return a1;
}

void sub_19E8E8D74(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped(uint64_t result, uint64_t *a2, int a3)
{
  char v47 = 0;
  LOBYTE(v3) = *((char *)a2 + 23) < 0;
  uint64_t v4 = *((unsigned __int8 *)a2 + 23);
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = a2[1];
  }
  if (!v4) {
    return result;
  }
  uint64_t v7 = (void *)result;
  unint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  v48[0] = 0;
  uint64_t v12 = result + 90;
  do
  {
    if (v3) {
      unsigned int v13 = (uint64_t *)*a2;
    }
    else {
      unsigned int v13 = a2;
    }
    int v14 = *((unsigned __int8 *)v13 + v8);
    uint64_t result = nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::decode(&v47, v48, v14);
    if (result == 1)
    {
      int v16 = *((_DWORD *)v7 + 158);
      if ((v16 - 1) >= 2)
      {
        if (!v16)
        {
          char v46 = 3;
          *(_DWORD *)__str = 0;
          snprintf(__str, 3uLL, "%.2X", v14);
          exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
          std::to_string(&v39, v8);
          long long v28 = std::string::insert(&v39, 0, "invalid UTF-8 byte at index ");
          long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
          v40.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v29;
          v28->__r_.__value_.__l.__size_ = 0;
          v28->__r_.__value_.__r.__words[2] = 0;
          v28->__r_.__value_.__r.__words[0] = 0;
          char v30 = std::string::append(&v40, ": 0x");
          long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
          v41.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v31;
          v30->__r_.__value_.__l.__size_ = 0;
          v30->__r_.__value_.__r.__words[2] = 0;
          v30->__r_.__value_.__r.__words[0] = 0;
          if (v46 >= 0) {
            double v32 = __str;
          }
          else {
            double v32 = *(char **)__str;
          }
          if (v46 >= 0) {
            std::string::size_type v33 = v46;
          }
          else {
            std::string::size_type v33 = v45;
          }
          uint64_t v34 = std::string::append(&v41, v32, v33);
          long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
          std::string::size_type v43 = v34->__r_.__value_.__r.__words[2];
          long long v42 = v35;
          v34->__r_.__value_.__l.__size_ = 0;
          v34->__r_.__value_.__r.__words[2] = 0;
          v34->__r_.__value_.__r.__words[0] = 0;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v38);
          nlohmann::detail::type_error::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(316, (uint64_t)&v42, exception);
        }
        nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped();
      }
      uint64_t v17 = v9 != 0;
      if (v16 == 1)
      {
        uint64_t v18 = v12 + v10;
        if (a3)
        {
          *(_DWORD *)uint64_t v18 = 1717990748;
          *(_WORD *)(v18 + 4) = 25702;
          v10 += 6;
        }
        else
        {
          v10 += 3;
          *(_WORD *)uint64_t v18 = -16401;
          *(unsigned char *)(v18 + 2) = -67;
        }
        if ((unint64_t)(v10 - 500) <= 0xC)
        {
          uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*v7 + 8))(*v7, v12, v10);
          uint64_t v10 = 0;
        }
      }
      uint64_t v9 = 0;
      v8 -= v17;
      char v47 = 0;
      uint64_t v11 = v10;
    }
    else if (result)
    {
      if ((a3 & 1) == 0)
      {
        if (*((char *)a2 + 23) >= 0) {
          uint64_t v19 = a2;
        }
        else {
          uint64_t v19 = (uint64_t *)*a2;
        }
        *(unsigned char *)(v12 + v11++) = *((unsigned char *)v19 + v8);
      }
      ++v9;
    }
    else
    {
      switch(v48[0])
      {
        case 8u:
          __int16 v15 = 25180;
          goto LABEL_43;
        case 9u:
          __int16 v15 = 29788;
          goto LABEL_43;
        case 0xAu:
          __int16 v15 = 28252;
          goto LABEL_43;
        case 0xBu:
          goto LABEL_29;
        case 0xCu:
          __int16 v15 = 26204;
          goto LABEL_43;
        case 0xDu:
          __int16 v15 = 29276;
          goto LABEL_43;
        default:
          if (v48[0] == 34)
          {
            __int16 v15 = 8796;
            goto LABEL_43;
          }
          if (v48[0] == 92)
          {
            __int16 v15 = 23644;
LABEL_43:
            *(_WORD *)(v12 + v11) = v15;
            v11 += 2;
            goto LABEL_44;
          }
LABEL_29:
          if (v48[0] > 0x7E) {
            int v20 = a3;
          }
          else {
            int v20 = 0;
          }
          if (v48[0] < 0x20 || v20)
          {
            uint64_t v24 = (char *)(v12 + v11);
            if (HIWORD(v48[0]))
            {
              uint64_t result = snprintf(v24, 0xDuLL, "\\u%04x\\u%04x", (unsigned __int16)((v48[0] >> 10) - 10304), v48[0] & 0x3FF | 0xDC00);
              v11 += 12;
            }
            else
            {
              uint64_t result = snprintf(v24, 7uLL, "\\u%04x", v48[0]);
              v11 += 6;
            }
          }
          else
          {
            if (*((char *)a2 + 23) >= 0) {
              int v21 = a2;
            }
            else {
              int v21 = (uint64_t *)*a2;
            }
            *(unsigned char *)(v12 + v11++) = *((unsigned char *)v21 + v8);
          }
LABEL_44:
          if ((unint64_t)(v11 - 500) > 0xC)
          {
            uint64_t v9 = 0;
            uint64_t v10 = v11;
          }
          else
          {
            uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*v7 + 8))(*v7, v12, v11);
            uint64_t v11 = 0;
            uint64_t v10 = 0;
            uint64_t v9 = 0;
          }
          break;
      }
    }
    ++v8;
    int v22 = *((char *)a2 + 23);
    unsigned int v3 = v22 >> 31;
    unint64_t v23 = a2[1];
    if (v22 >= 0) {
      unint64_t v23 = *((unsigned __int8 *)a2 + 23);
    }
  }
  while (v8 < v23);
  if (v47)
  {
    int v26 = *((_DWORD *)v7 + 158);
    switch(v26)
    {
      case 1:
        (*(void (**)(void, uint64_t, uint64_t))(*(void *)*v7 + 8))(*v7, v12, v10);
        uint64_t v25 = *(uint64_t (**)(void))(*(void *)*v7 + 8);
        break;
      case 2:
        uint64_t v25 = *(uint64_t (**)(void))(*(void *)*v7 + 8);
        break;
      case 0:
        char v46 = 3;
        *(_DWORD *)__str = 0;
        unint64_t v36 = (uint64_t *)*a2;
        if (v22 >= 0) {
          unint64_t v36 = a2;
        }
        snprintf(__str, 3uLL, "%.2X", *((unsigned __int8 *)v36 + v23 - 1));
        std::string v37 = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
        std::operator+<char>();
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v41);
        nlohmann::detail::type_error::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(316, (uint64_t)&v42, v37);
      default:
        nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped();
    }
    return v25();
  }
  else if (v11)
  {
    uint64_t v25 = *(uint64_t (**)(void))(*(void *)*v7 + 8);
    return v25();
  }
  return result;
}

void sub_19E8E9354(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)&a29);
  if (a41 < 0)
  {
    operator delete(__p);
    if ((v42 & 1) == 0)
    {
LABEL_6:
      if (*(char *)(v43 - 97) < 0) {
        operator delete(*(void **)(v43 - 120));
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v42)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v41);
  goto LABEL_6;
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return (***(uint64_t (****)(void, uint64_t))a1)(*(void *)a1, 48);
  }
  LOBYTE(v2) = a2;
  if (a2 >= 0xA)
  {
    if (a2 >= 0x64)
    {
      *(_WORD *)(a1 + 17) = nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>(unsigned char)::digits_to_99[(a2 - 100 * ((41 * a2) >> 12))];
      uint64_t v5 = a1 + 17;
      unsigned int v2 = (41 * a2) >> 12;
      goto LABEL_10;
    }
    uint64_t v3 = 2;
  }
  else
  {
    uint64_t v3 = 1;
  }
  uint64_t v5 = a1 + 16 + v3;
  if (a2 < 0xA)
  {
LABEL_10:
    *(unsigned char *)(v5 - 1) = v2 | 0x30;
    return (*(uint64_t (**)(void))(**(void **)a1 + 8))();
  }
  *(_WORD *)(v5 - 2) = nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>(unsigned char)::digits_to_99[a2];
  return (*(uint64_t (**)(void))(**(void **)a1 + 8))();
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<long long,0>(uint64_t (****a1)(void), unint64_t a2)
{
  if (a2)
  {
    unint64_t v2 = a2;
    uint64_t v3 = a1 + 2;
    if ((v2 & 0x8000000000000000) != 0)
    {
      *uint64_t v3 = 45;
      unint64_t v2 = -(uint64_t)v2;
      if (v2 >= 0xA)
      {
        int v7 = 4;
        unint64_t v11 = v2;
        while (1)
        {
          if (v11 <= 0x63)
          {
            v7 -= 2;
            goto LABEL_26;
          }
          if (v11 <= 0x3E7) {
            break;
          }
          if (v11 >> 4 < 0x271) {
            goto LABEL_26;
          }
          v7 += 4;
          BOOL v10 = v11 >= 0x186A0;
          v11 /= 0x2710uLL;
          if (!v10)
          {
            v7 -= 3;
            goto LABEL_26;
          }
        }
        --v7;
      }
      else
      {
        int v7 = 1;
      }
LABEL_26:
      unsigned int v8 = v7 + 1;
    }
    else
    {
      if (v2 < 0xA)
      {
        uint64_t v4 = (char *)a1 + 17;
        goto LABEL_35;
      }
      unsigned int v8 = 4;
      unint64_t v9 = v2;
      while (1)
      {
        if (v9 <= 0x63)
        {
          v8 -= 2;
          goto LABEL_27;
        }
        if (v9 <= 0x3E7) {
          break;
        }
        if (v9 >> 4 < 0x271) {
          goto LABEL_27;
        }
        v8 += 4;
        BOOL v10 = v9 >= 0x186A0;
        v9 /= 0x2710uLL;
        if (!v10)
        {
          v8 -= 3;
          goto LABEL_27;
        }
      }
      --v8;
    }
LABEL_27:
    if (v8 >= 0x3F) {
      nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<long long,0>();
    }
    uint64_t v4 = &v3[v8];
    if (v2 < 0x64)
    {
      unint64_t v12 = v2;
    }
    else
    {
      do
      {
        unint64_t v12 = v2 / 0x64;
        *((_WORD *)v4 - 1) = nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<long long,0>(long long)::digits_to_99[v2 % 0x64];
        v4 -= 2;
        unint64_t v13 = v2 >> 4;
        v2 /= 0x64uLL;
      }
      while (v13 > 0x270);
    }
    if (v12 >= 0xA)
    {
      *((_WORD *)v4 - 1) = nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<long long,0>(long long)::digits_to_99[v12];
LABEL_36:
      int v14 = (**a1)[1];
      return v14();
    }
    LOBYTE(v2) = v12;
LABEL_35:
    *(v4 - 1) = v2 + 48;
    goto LABEL_36;
  }
  uint64_t v5 = ***a1;

  return v5();
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned long long,0>(uint64_t (****a1)(void), unint64_t a2)
{
  if (a2)
  {
    unint64_t v2 = a2;
    if (a2 >= 0xA)
    {
      unsigned int v6 = 4;
      unint64_t v7 = a2;
      while (1)
      {
        if (v7 <= 0x63)
        {
          v6 -= 2;
          goto LABEL_15;
        }
        if (v7 <= 0x3E7) {
          break;
        }
        if (v7 >> 4 < 0x271) {
          goto LABEL_15;
        }
        unint64_t v8 = v7 >> 5;
        v7 /= 0x2710uLL;
        v6 += 4;
        if (v8 <= 0xC34)
        {
          v6 -= 3;
          goto LABEL_15;
        }
      }
      --v6;
LABEL_15:
      if (v6 >= 0x3F) {
        nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<long long,0>();
      }
      uint64_t v3 = (uint64_t)a1 + v6 + 16;
      if (a2 < 0x64)
      {
        unint64_t v9 = a2;
      }
      else
      {
        do
        {
          unint64_t v9 = v2 / 0x64;
          *(_WORD *)(v3 - 2) = nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned long long,0>(unsigned long long)::digits_to_99[v2 % 0x64];
          v3 -= 2;
          unint64_t v10 = v2 >> 4;
          v2 /= 0x64uLL;
        }
        while (v10 > 0x270);
      }
      if (v9 >= 0xA)
      {
        *(_WORD *)(v3 - 2) = nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned long long,0>(unsigned long long)::digits_to_99[v9];
LABEL_24:
        unint64_t v11 = (**a1)[1];
        return v11();
      }
      LOBYTE(v2) = v9;
    }
    else
    {
      uint64_t v3 = (uint64_t)a1 + 17;
    }
    *(unsigned char *)(v3 - 1) = v2 + 48;
    goto LABEL_24;
  }
  uint64_t v4 = ***a1;

  return v4();
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_float(char *a1, double a2)
{
  if ((*(void *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    uint64_t v5 = *(void *)a1;
    uint64_t v4 = *(uint64_t (**)(uint64_t, const char *, uint64_t))(**(void **)a1 + 8);
    unsigned int v6 = "null";
    uint64_t v3 = 4;
  }
  else
  {
    uint64_t v3 = nlohmann::detail::to_chars<double>(a1 + 16, (uint64_t)(a1 + 80), a2) - (a1 + 16);
    uint64_t v4 = *(uint64_t (**)(uint64_t, const char *, uint64_t))(**(void **)a1 + 8);
    uint64_t v5 = *(void *)a1;
    unsigned int v6 = a1 + 16;
  }

  return v4(v5, v6, v3);
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::decode(unsigned char *a1, unsigned int *a2, int a3)
{
  unsigned int v3 = nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::decode(unsigned char &,unsigned int &,unsigned char)::utf8d[a3];
  if (*a1) {
    unsigned int v4 = a3 & 0x3F | (*a2 << 6);
  }
  else {
    unsigned int v4 = (0xFFu >> v3) & a3;
  }
  *a2 = v4;
  unint64_t v5 = 16 * *a1 + v3 + 256;
  if (v5 >= 0x190) {
    __assert_rtn("decode", "json.hpp", 16606, "index < 400");
  }
  uint64_t v6 = nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::decode(unsigned char &,unsigned int &,unsigned char)::utf8d[v5];
  *a1 = v6;
  return v6;
}

char *nlohmann::detail::to_chars<double>(char *a1, uint64_t a2, double a3)
{
  if ((*(void *)&a3 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000) {
    nlohmann::detail::to_chars<double>();
  }
  unsigned int v3 = a1;
  if ((*(void *)&a3 & 0x8000000000000000) != 0)
  {
    a3 = -a3;
    *a1 = 45;
    unsigned int v3 = a1 + 1;
  }
  if (a3 == 0.0)
  {
    *(_WORD *)unsigned int v3 = 11824;
    uint64_t result = v3 + 3;
    _DWORD v3[2] = 48;
  }
  else
  {
    unint64_t v5 = a2 - (void)v3;
    if (a2 - (uint64_t)v3 <= 16) {
      nlohmann::detail::to_chars<double>();
    }
    uint64_t v6 = 0;
    nlohmann::detail::dtoa_impl::grisu2<double>((uint64_t)v3, (unsigned int *)&v6 + 1, &v6, a3);
    if (SHIDWORD(v6) >= 18) {
      nlohmann::detail::to_chars<double>();
    }
    if (v5 <= 0x15) {
      nlohmann::detail::to_chars<double>();
    }
    if (v5 == 22) {
      nlohmann::detail::to_chars<double>();
    }
    return nlohmann::detail::dtoa_impl::format_buffer((nlohmann::detail::dtoa_impl *)v3, (char *)HIDWORD(v6), (int)v6, -4, 15);
  }
  return result;
}

uint64_t nlohmann::detail::dtoa_impl::grisu2<double>(uint64_t a1, unsigned int *a2, _DWORD *a3, double a4)
{
  if ((*(void *)&a4 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000) {
    nlohmann::detail::dtoa_impl::grisu2<double>();
  }
  if (a4 <= 0.0) {
    nlohmann::detail::dtoa_impl::grisu2<double>();
  }
  nlohmann::detail::dtoa_impl::compute_boundaries<double>((uint64_t)v9, a4);
  return nlohmann::detail::dtoa_impl::grisu2(a1, a2, a3, v9[2], v9[3], v9[0], v9[1], v7, v9[4], (nlohmann::detail::dtoa_impl *)v9[5]);
}

char *nlohmann::detail::dtoa_impl::format_buffer(nlohmann::detail::dtoa_impl *this, char *a2, int a3, int a4, int a5)
{
  if ((a4 & 0x80000000) == 0) {
    nlohmann::detail::dtoa_impl::format_buffer();
  }
  if (a5 <= 0) {
    nlohmann::detail::dtoa_impl::format_buffer();
  }
  int v5 = (int)a2;
  uint64_t v7 = a3 + (uint64_t)(int)a2;
  if ((a3 & 0x80000000) == 0 && (int)v7 <= a5)
  {
    memset((char *)this + (int)a2, 48, a3);
    *((unsigned char *)this + v7) = 46;
    uint64_t result = (char *)this + v7 + 2;
    *((unsigned char *)this + (int)v7 + 1) = 48;
    return result;
  }
  if ((int)v7 < 1 || (int)v7 > a5)
  {
    if ((int)v7 > a4 && (int)v7 <= 0)
    {
      size_t v10 = -(int)v7;
      memmove((char *)this + v10 + 2, this, (int)a2);
      *(_WORD *)this = 11824;
      memset((char *)this + 2, 48, v10);
      return (char *)this + v10 + v5 + 2;
    }
    if (a2 == 1)
    {
      uint64_t v11 = 1;
    }
    else
    {
      memmove((char *)this + 2, (char *)this + 1, (int)a2 - 1);
      *((unsigned char *)this + 1) = 46;
      uint64_t v11 = v5 + 1;
    }
    unint64_t v12 = (char *)this + v11;
    *unint64_t v12 = 101;
    if ((int)v7 <= -999) {
      nlohmann::detail::dtoa_impl::format_buffer();
    }
    if ((int)v7 >= 1001) {
      nlohmann::detail::dtoa_impl::format_buffer();
    }
    if ((int)v7 >= 1) {
      char v13 = 43;
    }
    else {
      char v13 = 45;
    }
    if ((int)v7 - 1 >= 0) {
      unsigned int v14 = v7 - 1;
    }
    else {
      unsigned int v14 = 1 - v7;
    }
    v12[1] = v13;
    if (v14 > 9)
    {
      if (v14 > 0x63)
      {
        _DWORD v12[2] = (unsigned __int16)v14 / 0x64u + 48;
        unsigned __int8 v17 = (unsigned __int16)v14 % 0x64u;
        v12[3] = (v17 / 0xAu) | 0x30;
        v12[4] = (v17 % 0xAu) | 0x30;
        uint64_t v16 = 2;
        return &v12[v16 + 3];
      }
      _DWORD v12[2] = v14 / 0xAu + 48;
      char v15 = (v14 % 0xAu) | 0x30;
    }
    else
    {
      _DWORD v12[2] = 48;
      char v15 = v14 + 48;
    }
    v12[3] = v15;
    uint64_t v16 = 1;
    return &v12[v16 + 3];
  }
  if ((a3 & 0x80000000) == 0) {
    nlohmann::detail::dtoa_impl::format_buffer();
  }
  unint64_t v9 = (char *)this + v7;
  memmove(v9 + 1, v9, (int)a2 - (unint64_t)v7);
  *unint64_t v9 = 46;
  return (char *)this + v5 + 1;
}

uint64_t nlohmann::detail::dtoa_impl::compute_boundaries<double>@<X0>(uint64_t a1@<X8>, double a2@<D0>)
{
  if ((*(void *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000) {
    nlohmann::detail::dtoa_impl::compute_boundaries<double>();
  }
  if (a2 <= 0.0) {
    nlohmann::detail::dtoa_impl::compute_boundaries<double>();
  }
  uint64_t v4 = *(void *)&a2 >> 52;
  uint64_t v5 = *(void *)&a2 & 0xFFFFFFFFFFFFFLL | 0x10000000000000;
  uint64_t v6 = 2 * v5;
  uint64_t v7 = *(void *)&a2 >> 53;
  uint64_t v8 = 4 * v5;
  int v9 = (*(void *)&a2 >> 52) - 1077;
  uint64_t v10 = 0x10000000000000;
  if ((*(void *)&a2 & 0xFFFFFFFFFFFFFLL) != 0)
  {
    uint64_t v8 = 2 * v5;
    int v9 = (*(void *)&a2 >> 52) - 1076;
    uint64_t v10 = *(void *)&a2 & 0xFFFFFFFFFFFFFLL | 0x10000000000000;
  }
  BOOL v11 = v7 == 0;
  if (v7) {
    uint64_t v12 = v8;
  }
  else {
    uint64_t v12 = 2 * v5;
  }
  if (v11) {
    int v9 = (*(void *)&a2 >> 52) - 1076;
  }
  else {
    uint64_t v5 = v10;
  }
  uint64_t v3 = *(void *)&a2 & 0xFFFFFFFFFFFFFLL;
  if (v4)
  {
    unint64_t v13 = (*(void *)&a2 >> 52) - 1076;
  }
  else
  {
    uint64_t v12 = 2 * v3;
    int v9 = -1075;
    unint64_t v13 = 4294966221;
  }
  if (v4)
  {
    unint64_t v14 = (*(void *)&a2 >> 52) - 1075;
  }
  else
  {
    uint64_t v6 = 2 * v3;
    unint64_t v14 = 4294966222;
  }
  if (v4) {
    uint64_t v15 = v5;
  }
  else {
    uint64_t v15 = *(void *)&a2 & 0xFFFFFFFFFFFFFLL;
  }
  uint64_t v24 = v12 - 1;
  int v25 = v9;
  uint64_t v16 = nlohmann::detail::dtoa_impl::diyfp::normalize(v6 | 1, v13);
  int v18 = v17;
  unint64_t v19 = nlohmann::detail::dtoa_impl::diyfp::normalize_to(&v24, v17);
  int v21 = v20;
  uint64_t result = nlohmann::detail::dtoa_impl::diyfp::normalize(v15, v14);
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v23;
  *(void *)(a1 + 16) = v19;
  *(_DWORD *)(a1 + 24) = v21;
  *(void *)(a1 + 32) = v16;
  *(_DWORD *)(a1 + 40) = v18;
  return result;
}

uint64_t nlohmann::detail::dtoa_impl::grisu2(uint64_t a1, unsigned int *a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, nlohmann::detail::dtoa_impl *a10)
{
  v31[0] = a4;
  v31[1] = a5;
  v30[0] = a6;
  v30[1] = a7;
  v29[0] = a9;
  v29[1] = a10;
  if (a10 != a5) {
    nlohmann::detail::dtoa_impl::grisu2();
  }
  if (a10 != a7) {
    nlohmann::detail::dtoa_impl::grisu2();
  }
  uint64_t cached_power_for_binary_exponent = nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent(a10);
  int v15 = v14;
  uint64_t v27 = cached_power_for_binary_exponent;
  int v28 = v16;
  unint64_t v17 = nlohmann::detail::dtoa_impl::diyfp::mul(v30, &v27);
  uint64_t v19 = v18;
  unint64_t v20 = nlohmann::detail::dtoa_impl::diyfp::mul(v31, &v27);
  unsigned int v22 = v21;
  unint64_t v23 = nlohmann::detail::dtoa_impl::diyfp::mul(v29, &v27);
  *a3 = -v15;
  return nlohmann::detail::dtoa_impl::grisu2_digit_gen(a1, a2, a3, v20 + 1, v22, v17, v19, v25, v23 - 1, v24);
}

uint64_t nlohmann::detail::dtoa_impl::diyfp::normalize(uint64_t result, unint64_t a2)
{
  if (!result) {
    __assert_rtn("normalize", "json.hpp", 14760, "x.f != 0");
  }
  for (; (result & 0x8000000000000000) == 0; a2 = (a2 - 1) | a2 & 0xFFFFFFFF00000000)
    result *= 2;
  return result;
}

unint64_t nlohmann::detail::dtoa_impl::diyfp::normalize_to(uint64_t *a1, int a2)
{
  int v2 = *((_DWORD *)a1 + 2) - a2;
  if (v2 < 0)
  {
    uint64_t v5 = "delta >= 0";
    int v6 = 14779;
    goto LABEL_6;
  }
  uint64_t v3 = *a1;
  unint64_t result = *a1 << v2;
  if (result >> v2 != v3)
  {
    uint64_t v5 = "((x.f << delta) >> delta) == x.f";
    int v6 = 14780;
LABEL_6:
    __assert_rtn("normalize_to", "json.hpp", v6, v5);
  }
  return result;
}

uint64_t nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent(nlohmann::detail::dtoa_impl *this)
{
  if ((int)this <= -1501) {
    nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent();
  }
  if ((int)this >= 1501) {
    nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent();
  }
  int v1 = 78913 * (-61 - (int)this) / 0x40000;
  if ((int)this < -61) {
    ++v1;
  }
  if (v1 <= -315) {
    nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent();
  }
  unsigned int v2 = (int)((v1 + 307 + (((__int16)(v1 + 307) >> 28) & 7)) << 16) >> 19;
  if (v2 >= 0x4F) {
    nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent();
  }
  uint64_t v3 = (void *)((char *)&nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent(int)::kCachedPowers
                + 16 * (unsigned __int16)v2);
  int v4 = v3[1] + this;
  if (v4 <= -125) {
    nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent();
  }
  if (v4 >= -95) {
    nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent();
  }
  return *v3;
}

unint64_t nlohmann::detail::dtoa_impl::diyfp::mul(void *a1, void *a2)
{
  uint64_t v2 = HIDWORD(*a1);
  uint64_t v3 = HIDWORD(*a2);
  unint64_t v4 = v3 * (unint64_t)*a1;
  unint64_t v5 = *a2 * (unint64_t)v2;
  return HIDWORD(v5)
       + v3 * (unint64_t)v2
       + HIDWORD(v4)
       + ((((*a2 * (unint64_t)*a1) >> 32)
         + v4
         + v5
         + 0x80000000) >> 32);
}

uint64_t nlohmann::detail::dtoa_impl::grisu2_digit_gen(uint64_t a1, unsigned int *a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10)
{
  v47[0] = a4;
  v47[1] = a5;
  v46[0] = a6;
  v46[1] = a7;
  unint64_t v44 = a9;
  uint64_t v45 = a10;
  if ((int)a10 <= -61) {
    nlohmann::detail::dtoa_impl::grisu2_digit_gen();
  }
  if ((int)a10 >= -31) {
    nlohmann::detail::dtoa_impl::grisu2_digit_gen();
  }
  unint64_t v13 = nlohmann::detail::dtoa_impl::diyfp::sub((uint64_t)&v44, (uint64_t)v47);
  uint64_t v14 = nlohmann::detail::dtoa_impl::diyfp::sub((uint64_t)&v44, (uint64_t)v46);
  int v15 = -(int)v45;
  unint64_t v16 = v44 >> -(char)v45;
  if (!v16) {
    nlohmann::detail::dtoa_impl::grisu2_digit_gen();
  }
  unint64_t v17 = v14;
  unint64_t v18 = 1 << v15;
  uint64_t v19 = (1 << v15) - 1;
  unint64_t v20 = v19 & v44;
  if (v16 <= 0x3B9AC9FF)
  {
    if (v16 <= 0x5F5E0FF)
    {
      if (v16 <= 0x98967F)
      {
        if (v16 <= 0xF423F)
        {
          unsigned int v23 = v16 >> 5;
          unsigned int v24 = v16 >> 4;
          if (v16 <= 9) {
            int v25 = 1;
          }
          else {
            int v25 = 10;
          }
          if (v16 <= 9) {
            int v26 = 1;
          }
          else {
            int v26 = 2;
          }
          if (v16 <= 0x63) {
            int v27 = v26;
          }
          else {
            int v27 = 3;
          }
          if (v16 <= 0x63) {
            int v28 = v25;
          }
          else {
            int v28 = 100;
          }
          if (v16 <= 0x3E7) {
            int v29 = v27;
          }
          else {
            int v29 = 4;
          }
          if (v16 <= 0x3E7) {
            int v30 = v28;
          }
          else {
            int v30 = 1000;
          }
          if (v24 <= 0x270) {
            int v31 = v29;
          }
          else {
            int v31 = 5;
          }
          if (v24 <= 0x270) {
            int v32 = v30;
          }
          else {
            int v32 = 10000;
          }
          if (v23 <= 0xC34) {
            int v22 = v31;
          }
          else {
            int v22 = 6;
          }
          if (v23 > 0xC34) {
            unsigned int v21 = 100000;
          }
          else {
            unsigned int v21 = v32;
          }
        }
        else
        {
          unsigned int v21 = 1000000;
          int v22 = 7;
        }
      }
      else
      {
        unsigned int v21 = 10000000;
        int v22 = 8;
      }
    }
    else
    {
      unsigned int v21 = 100000000;
      int v22 = 9;
    }
  }
  else
  {
    unsigned int v21 = 1000000000;
    int v22 = 10;
  }
  unsigned int v33 = v22 + 1;
  do
  {
    unsigned int v34 = v16 / v21;
    if (v16 / v21 >= 0xA) {
      nlohmann::detail::dtoa_impl::grisu2_digit_gen();
    }
    unint64_t v16 = v16 % v21;
    uint64_t v35 = (int)*a2;
    *a2 = v35 + 1;
    *(unsigned char *)(a1 + v35) = v34 + 48;
    if ((v16 << v15) + v20 <= v13)
    {
      *a3 = *a3 + v33 - 2;
      unint64_t v18 = (unint64_t)v21 << v15;
      std::string v40 = (char *)*a2;
      uint64_t v41 = a1;
      unint64_t v42 = v13;
      v20 += v16 << v15;
      return nlohmann::detail::dtoa_impl::grisu2_round(v41, v40, v17, v42, v20, v18);
    }
    v21 /= 0xAu;
    --v33;
  }
  while (v33 > 1);
  if (v20 <= v13) {
    nlohmann::detail::dtoa_impl::grisu2_digit_gen();
  }
  int v36 = 0;
  do
  {
    if (v20 >= 0x199999999999999ALL) {
      nlohmann::detail::dtoa_impl::grisu2_digit_gen();
    }
    unint64_t v37 = (10 * v20) >> v15;
    if (v37 >= 0xA) {
      nlohmann::detail::dtoa_impl::grisu2_digit_gen();
    }
    uint64_t v38 = (int)*a2;
    *a2 = v38 + 1;
    *(unsigned char *)(a1 + v38) = v37 + 48;
    uint64_t v39 = 5 * v13;
    unint64_t v20 = (10 * v20) & v19;
    v13 *= 10;
    v17 *= 10;
    --v36;
  }
  while (v20 > 2 * v39);
  *a3 += v36;
  std::string v40 = (char *)*a2;
  uint64_t v41 = a1;
  unint64_t v42 = v13;
  return nlohmann::detail::dtoa_impl::grisu2_round(v41, v40, v17, v42, v20, v18);
}

uint64_t nlohmann::detail::dtoa_impl::diyfp::sub(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8))
  {
    unint64_t v4 = "x.e == y.e";
    int v5 = 14683;
LABEL_6:
    __assert_rtn("sub", "json.hpp", v5, v4);
  }
  BOOL v2 = *(void *)a1 >= *(void *)a2;
  uint64_t result = *(void *)a1 - *(void *)a2;
  if (!v2)
  {
    unint64_t v4 = "x.f >= y.f";
    int v5 = 14684;
    goto LABEL_6;
  }
  return result;
}

uint64_t nlohmann::detail::dtoa_impl::grisu2_round(uint64_t this, char *a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6)
{
  if ((int)a2 <= 0) {
    nlohmann::detail::dtoa_impl::grisu2_round();
  }
  if (a3 > a4) {
    nlohmann::detail::dtoa_impl::grisu2_round();
  }
  if (a4 < a5) {
    nlohmann::detail::dtoa_impl::grisu2_round();
  }
  if (!a6) {
    nlohmann::detail::dtoa_impl::grisu2_round();
  }
  if (a5 < a3 && a4 - a5 >= a6)
  {
    uint64_t v6 = (a2 - 1);
    uint64_t v7 = -(uint64_t)a5;
    unint64_t v8 = a6 + a5;
    do
    {
      if (v8 >= a3 && a3 + v7 <= v8 - a3) {
        break;
      }
      int v9 = *(unsigned __int8 *)(this + v6);
      if (v9 == 48) {
        nlohmann::detail::dtoa_impl::grisu2_round();
      }
      *(unsigned char *)(this + v6) = v9 - 1;
      if (v8 >= a3) {
        break;
      }
      unint64_t v10 = a4 - a6 + v7;
      v7 -= a6;
      v8 += a6;
    }
    while (v10 >= a6);
  }
  return this;
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~serializer(uint64_t a1)
{
  if (*(char *)(a1 + 631) < 0) {
    operator delete(*(void **)(a1 + 608));
  }
  BOOL v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::key()
{
  __assert_rtn("key", "json.hpp", 11708, "m_object != nullptr");
}

void nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator++()
{
  __assert_rtn("operator++", "json.hpp", 11418, "m_object != nullptr");
}

void nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator==<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,(decltype(nullptr))0>()
{
  __assert_rtn("operator==", "json.hpp", 11500, "m_object != nullptr");
}

void nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_literal()
{
  __assert_rtn("scan_literal", "json.hpp", 7503, "std::char_traits<char_type>::to_char_type(current) == literal_text[0]");
}

void nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_string()
{
  __assert_rtn("scan_string", "json.hpp", 6580, "0x00 <= codepoint && codepoint <= 0x10FFFF");
}

{
  __assert_rtn("scan_string", "json.hpp", 6460, "current == '\\\"'");
}

void nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_number()
{
}

{
  __assert_rtn("scan_number", "json.hpp", 7489, "endptr == token_buffer.data() + token_buffer.size()");
}

{
  __assert_rtn("scan_number", "json.hpp", 7456, "endptr == token_buffer.data() + token_buffer.size()");
}

{
  __assert_rtn("scan_number", "json.hpp", 7472, "endptr == token_buffer.data() + token_buffer.size()");
}

void nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::unget()
{
}

void nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_codepoint()
{
  __assert_rtn("get_codepoint", "json.hpp", 6398, "0x0000 <= codepoint && codepoint <= 0xFFFF");
}

{
  __assert_rtn("get_codepoint", "json.hpp", 6372, "current == 'u'");
}

void nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::next_byte_in_range()
{
  __assert_rtn("next_byte_in_range", "json.hpp", 6419, "ranges.size() == 2 || ranges.size() == 4 || ranges.size() == 6");
}

void nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_object()
{
}

{
  __assert_rtn("end_object", "json.hpp", 5939, "!keep_stack.empty()");
}

void nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_array()
{
}

{
  __assert_rtn("end_array", "json.hpp", 5995, "!keep_stack.empty()");
}

void nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>()
{
}

void nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator->()
{
  __assert_rtn("operator->", "json.hpp", 11373, "m_object != nullptr");
}

{
  __assert_rtn("operator->", "json.hpp", 11379, "m_it.object_iterator != m_object->m_value.object->end()");
}

{
  __assert_rtn("operator->", "json.hpp", 11385, "m_it.array_iterator != m_object->m_value.array->end()");
}

void nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>()
{
}

{
  __assert_rtn("handle_value", "json.hpp", 5802, "object_element");
}

void nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump()
{
}

{
  __assert_rtn("dump", "json.hpp", 15850, "i != val.m_value.object->cend()");
}

{
  __assert_rtn("dump", "json.hpp", 15851, "std::next(i) == val.m_value.object->cend()");
}

{
  __assert_rtn("dump", "json.hpp", 15878, "i != val.m_value.object->cend()");
}

{
  __assert_rtn("dump", "json.hpp", 15879, "std::next(i) == val.m_value.object->cend()");
}

{
  __assert_rtn("dump", "json.hpp", 15920, "!val.m_value.array->empty()");
}

{
  __assert_rtn("dump", "json.hpp", 15941, "!val.m_value.array->empty()");
}

void nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped()
{
}

{
  __assert_rtn("dump_escaped", "json.hpp", 16274, "false");
}

void nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<long long,0>()
{
}

void nlohmann::detail::to_chars<double>()
{
  __assert_rtn("to_chars", "json.hpp", 15697, "last - first >= std::numeric_limits<FloatType>::max_digits10");
}

{
  __assert_rtn("to_chars", "json.hpp", 15707, "len <= std::numeric_limits<FloatType>::max_digits10");
}

{
  __assert_rtn("to_chars", "json.hpp", 15715, "last - first >= 2 + (-kMinExp - 1) + std::numeric_limits<FloatType>::max_digits10");
}

{
  __assert_rtn("to_chars", "json.hpp", 15716, "last - first >= std::numeric_limits<FloatType>::max_digits10 + 6");
}

{
  __assert_rtn("to_chars", "json.hpp", 15679, "std::isfinite(value)");
}

void nlohmann::detail::dtoa_impl::grisu2<double>()
{
}

{
  __assert_rtn("grisu2", "json.hpp", 15504, "std::isfinite(value)");
}

void nlohmann::detail::dtoa_impl::format_buffer()
{
}

{
  __assert_rtn("format_buffer", "json.hpp", 15595, "max_exp > 0");
}

{
  __assert_rtn("append_exponent", "json.hpp", 15541, "e > -1000");
}

{
  __assert_rtn("append_exponent", "json.hpp", 15542, "e < 1000");
}

{
  __assert_rtn("format_buffer", "json.hpp", 15621, "k > n");
}

void nlohmann::detail::dtoa_impl::compute_boundaries<double>()
{
}

{
  __assert_rtn("compute_boundaries", "json.hpp", 14802, "std::isfinite(value)");
}

void nlohmann::detail::dtoa_impl::grisu2()
{
  __assert_rtn("grisu2", "json.hpp", 15443, "m_plus.e == v.e");
}

{
  __assert_rtn("grisu2", "json.hpp", 15442, "m_plus.e == m_minus.e");
}

void nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent()
{
  __assert_rtn("get_cached_power_for_binary_exponent", "json.hpp", 15083, "e >= -1500");
}

{
  __assert_rtn("get_cached_power_for_binary_exponent", "json.hpp", 15084, "e <= 1500");
}

{
  __assert_rtn("get_cached_power_for_binary_exponent", "json.hpp", 15089, "index >= 0");
}

{
  __assert_rtn("get_cached_power_for_binary_exponent", "json.hpp", 15093, "kAlpha <= cached.e + e + 64");
}

{
  __assert_rtn("get_cached_power_for_binary_exponent", "json.hpp", 15094, "kGamma >= cached.e + e + 64");
}

{
  __assert_rtn("get_cached_power_for_binary_exponent", "json.hpp", 15090, "static_cast<std::size_t>(index) < kCachedPowers.size()");
}

void nlohmann::detail::dtoa_impl::grisu2_digit_gen()
{
  __assert_rtn("grisu2_digit_gen", "json.hpp", 15216, "M_plus.e >= kAlpha");
}

{
  __assert_rtn("grisu2_digit_gen", "json.hpp", 15217, "M_plus.e <= kGamma");
}

{
  __assert_rtn("grisu2_digit_gen", "json.hpp", 15238, "p1 > 0");
}

{
  __assert_rtn("grisu2_digit_gen", "json.hpp", 15274, "d <= 9");
}

{
  __assert_rtn("grisu2_digit_gen", "json.hpp", 15372, "p2 <= (std::numeric_limits<std::uint64_t>::max)() / 10");
}

{
  __assert_rtn("grisu2_digit_gen", "json.hpp", 15381, "d <= 9");
}

{
  __assert_rtn("grisu2_digit_gen", "json.hpp", 15361, "p2 > delta");
}

void nlohmann::detail::dtoa_impl::grisu2_round()
{
  __assert_rtn("grisu2_round", "json.hpp", 15160, "len >= 1");
}

{
  __assert_rtn("grisu2_round", "json.hpp", 15161, "dist <= delta");
}

{
  __assert_rtn("grisu2_round", "json.hpp", 15162, "rest <= delta");
}

{
  __assert_rtn("grisu2_round", "json.hpp", 15163, "ten_k > 0");
}

{
  __assert_rtn("grisu2_round", "json.hpp", 15188, "buf[len - 1] != '0'");
}

std::string *MPL::detail::ModelPackageItemInfoImpl::ModelPackageItemInfoImpl(std::string *this, long long *a2, long long *a3, long long *a4, long long *a5, long long *a6)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v11 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v11;
  }
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v12 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v12;
  }
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *(const std::string::value_type **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v13 = *a4;
    this[2].__r_.__value_.__r.__words[2] = *((void *)a4 + 2);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v13;
  }
  if (*((char *)a5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 3, *(const std::string::value_type **)a5, *((void *)a5 + 1));
  }
  else
  {
    long long v14 = *a5;
    this[3].__r_.__value_.__r.__words[2] = *((void *)a5 + 2);
    *(_OWORD *)&this[3].__r_.__value_.__l.__data_ = v14;
  }
  int v15 = this + 4;
  if (*((char *)a6 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v15, *(const std::string::value_type **)a6, *((void *)a6 + 1));
  }
  else
  {
    long long v16 = *a6;
    this[4].__r_.__value_.__r.__words[2] = *((void *)a6 + 2);
    *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
  }
  return this;
}

void sub_19E8EB25C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 95) < 0) {
    operator delete(*v4);
  }
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void MPL::detail::ModelPackageItemInfoImpl::~ModelPackageItemInfoImpl(void **this)
{
  if (*((char *)this + 119) < 0) {
    operator delete(this[12]);
  }
  if (*((char *)this + 95) < 0) {
    operator delete(this[9]);
  }
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

uint64_t MPL::ModelPackageItemInfo::path(MPL::ModelPackageItemInfo *this)
{
  return *(void *)this + 24;
}

void MPL::detail::ModelPackageImpl::ModelPackageImpl(std::string *this, const std::__fs::filesystem::path *a2, int a3, std::string::value_type a4)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (SHIBYTE(a2->__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(this, a2->__pn_.__r_.__value_.__l.__data_, a2->__pn_.__r_.__value_.__l.__size_);
  }
  else
  {
    long long v8 = *(_OWORD *)&a2->__pn_.__r_.__value_.__l.__data_;
    this->__r_.__value_.__r.__words[2] = a2->__pn_.__r_.__value_.__r.__words[2];
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v8;
  }
  std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(&__p, kModelPackageManifestFileName);
  std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&__p, (uint64_t)a2, (std::__fs::filesystem::path *)&this[1]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(&__p, &kModelPackageDataDir);
  std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&__p, (uint64_t)a2, (std::__fs::filesystem::path *)&this[2]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  this[3].__r_.__value_.__r.__words[0] = 0;
  this[3].__r_.__value_.__s.__data_[8] = a4;
  std::__fs::filesystem::__status((const std::__fs::filesystem::path *)this, 0);
  if (!__p.__r_.__value_.__s.__data_[0] || __p.__r_.__value_.__s.__data_[0] == 255)
  {
    if (a3)
    {
      if (std::__fs::filesystem::__create_directory((const std::__fs::filesystem::path *)this, 0))
      {
        if (std::__fs::filesystem::__create_directory((const std::__fs::filesystem::path *)&this[2], 0)) {
          operator new();
        }
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        if (SHIBYTE(this[2].__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v21, this[2].__r_.__value_.__l.__data_, this[2].__r_.__value_.__l.__size_);
        }
        else {
          std::string v21 = this[2];
        }
        uint64_t v19 = std::string::insert(&v21, 0, "Failed to create data directory at path: ");
        long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
        v19->__r_.__value_.__l.__size_ = 0;
        v19->__r_.__value_.__r.__words[2] = 0;
        v19->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, &__p);
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      long long v11 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v21, this->__r_.__value_.__l.__data_, this->__r_.__value_.__l.__size_);
      }
      else {
        std::string v21 = *this;
      }
      unint64_t v17 = std::string::insert(&v21, 0, "Failed to create model package at path: ");
      long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v11, &__p);
      __cxa_throw(v11, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    int v9 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v21, this->__r_.__value_.__l.__data_, this->__r_.__value_.__l.__size_);
    }
    else {
      std::string v21 = *this;
    }
    long long v13 = std::string::insert(&v21, 0, "Failed to open model package at path: ");
    long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v9, &__p);
    __cxa_throw(v9, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  std::__fs::filesystem::__status((const std::__fs::filesystem::path *)&this[1], 0);
  if (__p.__r_.__value_.__s.__data_[0] && __p.__r_.__value_.__s.__data_[0] != 255)
  {
    std::ifstream::basic_ifstream((uint64_t *)&__p);
    operator new();
  }
  unint64_t v10 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  if (SHIBYTE(this[1].__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v21, this[1].__r_.__value_.__l.__data_, this[1].__r_.__value_.__l.__size_);
  }
  else {
    std::string v21 = this[1];
  }
  int v15 = std::string::insert(&v21, 0, "A valid manifest does not exist at path: ");
  long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  std::runtime_error::runtime_error(v10, &__p);
  __cxa_throw(v10, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
}

void sub_19E8EBA48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  __cxa_free_exception(v32);
  std::unique_ptr<JsonMap>::reset[abi:ne180100](v31, 0);
  if (*(char *)(v28 + 71) < 0) {
    operator delete(*v30);
  }
  if (*(char *)(v28 + 47) < 0) {
    operator delete(*v29);
  }
  if (*(char *)(v28 + 23) < 0) {
    operator delete(*(void **)v28);
  }
  _Unwind_Resume(a1);
}

std::__fs::filesystem::path *std::__fs::filesystem::operator/[abi:ne180100]@<X0>(std::__fs::filesystem::path *this@<X1>, uint64_t a2@<X0>, std::__fs::filesystem::path *a3@<X8>)
{
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&a3->__pn_, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&a3->__pn_.__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    a3->__pn_.__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
  }
  return std::__fs::filesystem::path::operator/=[abi:ne180100](a3, this);
}

void sub_19E8EBC44(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void MPL::detail::ModelPackageImpl::validate(MPL::detail::ModelPackageImpl *this)
{
  BOOL v2 = (uint64_t *)*((void *)this + 9);
  std::string::basic_string[abi:ne180100]<0>(__p, "fileFormatVersion");
  JsonMap::getString(v2, (const void **)__p, &v19);
  if (v18 < 0) {
    operator delete(__p[0]);
  }
  std::istringstream::basic_istringstream[abi:ne180100]((uint64_t *)__p, &v19, 8);
  long long v14 = 0;
  int v15 = 0;
  unint64_t v16 = 0;
  memset(&v13, 0, sizeof(v13));
  while (1)
  {
    uint64_t v3 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, (uint64_t)&v13, 0x2Eu);
    if ((*((unsigned char *)v3 + *(void *)(*v3 - 24) + 32) & 5) != 0) {
      break;
    }
    unint64_t v4 = v15;
    if ((unint64_t)v15 >= v16)
    {
      uint64_t v6 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v14, (long long *)&v13);
    }
    else
    {
      if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v15, v13.__r_.__value_.__l.__data_, v13.__r_.__value_.__l.__size_);
      }
      else
      {
        long long v5 = *(_OWORD *)&v13.__r_.__value_.__l.__data_;
        v15->__r_.__value_.__r.__words[2] = v13.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
      }
      uint64_t v6 = v4 + 1;
    }
    int v15 = v6;
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if ((char *)v15 - (char *)v14 == 72)
  {
    unsigned int v7 = std::stoi(v14, 0, 10);
    int v8 = std::stoi(v14 + 1, 0, 10);
    int v9 = std::stoi(v14 + 2, 0, 10);
    if ((v7 & 0x80000000) == 0 && (v8 & 0x80000000) == 0 && (v9 & 0x80000000) == 0)
    {
      if (v7 <= 1 && (v7 != 1 || !v8) && (v8 || !v9)) {
        MPL::detail::ModelPackageImpl::getItemInfoEntries(this);
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      std::runtime_error::runtime_error(exception, &v13);
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    long long v12 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(v12, &v13);
    __cxa_throw(v12, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  long long v11 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::operator+<char>();
  std::runtime_error::runtime_error(v11, &v13);
  __cxa_throw(v11, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
}

void sub_19E8EC308(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a30 < 0)
  {
    operator delete(__p);
    if ((v41 & 1) == 0)
    {
LABEL_6:
      std::string __p = &a32;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      std::istringstream::~istringstream((uint64_t)&a35);
      if (*(char *)(v42 - 81) < 0) {
        operator delete(*(void **)(v42 - 104));
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v41)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v40);
  goto LABEL_6;
}

void sub_19E8EC374(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t ***a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  std::unique_ptr<JsonMap>::reset[abi:ne180100](&a21, 0);
  JUMPOUT(0x19E8EC614);
}

void sub_19E8EC474(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a36 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v37 & 1) == 0) {
      goto LABEL_10;
    }
  }
  else if (!v37)
  {
LABEL_10:
    __cxa_end_catch();
    JUMPOUT(0x19E8EC630);
  }
  __cxa_free_exception(v36);
  goto LABEL_10;
}

void sub_19E8EC50C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
}

void sub_19E8EC534(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
  {
    operator delete(__p);
    if ((v26 & 1) == 0) {
LABEL_6:
    }
      JUMPOUT(0x19E8EC608);
  }
  else if (!v26)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v27);
  goto LABEL_6;
}

void sub_19E8EC56C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a22 < 0)
  {
    operator delete(__p);
    if ((v29 & 1) == 0)
    {
LABEL_6:
      if (a29 < 0) {
        operator delete(a24);
      }
      std::unique_ptr<JsonMap>::reset[abi:ne180100]((uint64_t ****)&a15, 0);
      JUMPOUT(0x19E8EC614);
    }
  }
  else if (!v29)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v30);
  goto LABEL_6;
}

void sub_19E8EC5A8()
{
}

void sub_19E8EC5B8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a14 < 0) {
    JUMPOUT(0x19E8EC604);
  }
  JUMPOUT(0x19E8EC608);
}

void MPL::detail::ModelPackageImpl::~ModelPackageImpl(MPL::detail::ModelPackageImpl *this)
{
  v6[19] = *MEMORY[0x1E4F143B8];
  if (!*((unsigned char *)this + 80))
  {
    if (*((char *)this + 47) < 0) {
      std::string::__init_copy_ctor_external(&v4, *((const std::string::value_type **)this + 3), *((void *)this + 4));
    }
    else {
      std::string v4 = *(std::string *)((unsigned char *)this + 1);
    }
    MPL::detail::ModelPackageImpl::generateIdentifier(v5);
    std::__fs::filesystem::path __replacement = v5[0];
    std::__fs::filesystem::path::replace_extension((std::__fs::filesystem::path *)&v4, &__replacement);
    std::ofstream::basic_ofstream((uint64_t *)v5);
    JsonMap::serialize(*((uint64_t **)this + 9), (uint64_t *)v5);
    if (!std::filebuf::close()) {
      std::ios_base::clear((std::ios_base *)((char *)v5 + *(void *)(v5[0].__pn_.__r_.__value_.__r.__words[0] - 24)), *(_DWORD *)((char *)&v5[1].__pn_.__r_.__value_.__r.__words[1]+ *(void *)(v5[0].__pn_.__r_.__value_.__r.__words[0] - 24)) | 4);
    }
    if ((*((unsigned char *)&v5[1].__pn_.__r_.__value_.__r.__words[1]
          + *(void *)(v5[0].__pn_.__r_.__value_.__r.__words[0] - 24)) & 5) == 0)
    {
      v2.__val_ = 0;
      v2.__cat_ = std::system_category();
      std::__fs::filesystem::__rename((const std::__fs::filesystem::path *)&v4, (const std::__fs::filesystem::path *)this + 1, &v2);
      if (v2.__val_) {
        std::__fs::filesystem::__remove((const std::__fs::filesystem::path *)&v4, 0);
      }
    }
    v5[0].__pn_.__r_.__value_.__r.__words[0] = *MEMORY[0x1E4FBA400];
    *(std::string::size_type *)((char *)v5[0].__pn_.__r_.__value_.__r.__words
                              + *(void *)(v5[0].__pn_.__r_.__value_.__r.__words[0] - 24)) = *(void *)(MEMORY[0x1E4FBA400] + 24);
    MEMORY[0x19F3C1500](&v5[0].__pn_.__r_.__value_.__r.__words[1]);
    std::ostream::~ostream();
    MEMORY[0x19F3C1850](v6);
    if (SHIBYTE(__replacement.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__replacement.__pn_.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v4.__r_.__value_.__l.__data_);
    }
  }
  std::unique_ptr<JsonMap>::reset[abi:ne180100]((uint64_t ****)this + 9, 0);
  if (*((char *)this + 71) < 0) {
    operator delete(*((void **)this + 6));
  }
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

void sub_19E8EC8F4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void *MPL::detail::ModelPackageImpl::generateIdentifier@<X0>(void *a1@<X8>)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  *(void *)uu = 0;
  uint64_t v6 = 0;
  memset(v4, 0, sizeof(v4));
  MEMORY[0x19F3C36F0](uu);
  uuid_unparse(uu, v4);
  return std::string::basic_string[abi:ne180100]<0>(a1, v4);
}

uint64_t *std::istringstream::basic_istringstream[abi:ne180100](uint64_t *a1, const std::string *a2, int a3)
{
  uint64_t v6 = MEMORY[0x1E4FBA490] + 64;
  a1[15] = MEMORY[0x1E4FBA490] + 64;
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = *(void *)(MEMORY[0x1E4FBA410] + 16);
  uint64_t v9 = *(void *)(MEMORY[0x1E4FBA410] + 8);
  *a1 = v9;
  *(uint64_t *)((char *)a1 + *(void *)(v9 - 24)) = v8;
  a1[1] = 0;
  unint64_t v10 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::init(v10, a1 + 2);
  uint64_t v11 = MEMORY[0x1E4FBA490] + 24;
  v10[1].__vftable = 0;
  v10[1].__fmtflags_ = -1;
  *a1 = v11;
  a1[15] = v6;
  std::stringbuf::basic_stringbuf[abi:ne180100](v7, a2, a3 | 8);
  return a1;
}

void sub_19E8ECAE4(_Unwind_Exception *a1)
{
  std::istream::~istream();
  MEMORY[0x19F3C1850](v1);
  _Unwind_Resume(a1);
}

void *std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(void *a1, uint64_t a2, unsigned __int8 a3)
{
  MEMORY[0x19F3C1560](&v11, a1, 1);
  if (!v11) {
    return a1;
  }
  if (*(char *)(a2 + 23) < 0)
  {
    **(unsigned char **)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 23) = 0;
  }
  uint64_t v6 = 0;
  while (1)
  {
    uint64_t v7 = *(void **)((char *)a1 + *(void *)(*a1 - 24) + 40);
    uint64_t v8 = (unsigned char *)v7[3];
    if (v8 != (unsigned char *)v7[4])
    {
      void v7[3] = v8 + 1;
      LOBYTE(v7) = *v8;
      goto LABEL_9;
    }
    LODWORD(v7) = (*(uint64_t (**)(void *))(*v7 + 80))(v7);
    if (v7 == -1) {
      break;
    }
LABEL_9:
    if (v7 == a3)
    {
      int v9 = 0;
      goto LABEL_17;
    }
    std::string::push_back((std::string *)a2, (std::string::value_type)v7);
    --v6;
    if (*(char *)(a2 + 23) < 0 && *(void *)(a2 + 8) == 0x7FFFFFFFFFFFFFF7)
    {
      int v9 = 4;
      goto LABEL_17;
    }
  }
  if (v6) {
    int v9 = 2;
  }
  else {
    int v9 = 6;
  }
LABEL_17:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | v9);
  return a1;
}

void sub_19E8ECC6C(void *a1)
{
  __cxa_begin_catch(a1);
  uint64_t v2 = *v1;
  *(_DWORD *)((char *)v1 + *(void *)(*v1 - 24) + 32) |= 1u;
  if ((*((unsigned char *)v1 + *(void *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x19E8ECC2CLL);
  }
  __cxa_rethrow();
}

void sub_19E8ECCE8(_Unwind_Exception *a1)
{
}

void MPL::detail::ModelPackageImpl::getItemInfoEntries(MPL::detail::ModelPackageImpl *this)
{
  uint64_t v2 = *((void *)this + 9);
  std::string::basic_string[abi:ne180100]<0>(__p, "itemInfoEntries");
  BOOL hasKey = JsonMap::hasKey(v2, (const void **)__p);
  BOOL v4 = hasKey;
  if (v7 < 0)
  {
    operator delete(__p[0]);
    if (v4)
    {
LABEL_3:
      long long v5 = (uint64_t *)*((void *)this + 9);
      std::string::basic_string[abi:ne180100]<0>(__p, "itemInfoEntries");
      JsonMap::getObject(v5, (const void **)__p);
    }
  }
  else if (hasKey)
  {
    goto LABEL_3;
  }
  operator new();
}

void sub_19E8ECDC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  MEMORY[0x19F3C1920](v15, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

void MPL::detail::ModelPackageImpl::getItemInfoEntry(MPL::detail::ModelPackageImpl *a1)
{
}

void sub_19E8ECE88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<JsonMap>::reset[abi:ne180100]((uint64_t ****)va, 0);
  _Unwind_Resume(a1);
}

double std::__fs::filesystem::path::parent_path[abi:ne180100]@<D0>(const std::__fs::filesystem::path *a1@<X0>, uint64_t a2@<X8>)
{
  std::__fs::filesystem::path::__string_view v3 = std::__fs::filesystem::path::__parent_path(a1);
  if (v3.__size_ >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v3.__size_ >= 0x17)
  {
    std::basic_string_view<_CharT, _Traits>::size_type v5 = (v3.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3.__size_ | 7) != 0x17) {
      std::basic_string_view<_CharT, _Traits>::size_type v5 = v3.__size_ | 7;
    }
    std::basic_string_view<_CharT, _Traits>::size_type v6 = v5 + 1;
    p_dst = (long long *)operator new(v5 + 1);
    *((void *)&__dst + 1) = v3.__size_;
    unint64_t v9 = v6 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
  }
  else
  {
    HIBYTE(v9) = v3.__size_;
    p_dst = &__dst;
    if (!v3.__size_) {
      goto LABEL_9;
    }
  }
  memmove(p_dst, v3.__data_, v3.__size_);
LABEL_9:
  *((unsigned char *)p_dst + v3.__size_) = 0;
  double result = *(double *)&__dst;
  *(_OWORD *)a2 = __dst;
  *(void *)(a2 + 16) = v9;
  return result;
}

void MPL::detail::ModelPackageImpl::findItem(MPL::detail::ModelPackageImpl *a1)
{
}

void sub_19E8ED168(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  std::unique_ptr<JsonMap>::reset[abi:ne180100]((uint64_t ****)(v33 - 48), 0);
  _Unwind_Resume(a1);
}

void sub_19E8ED264()
{
}

void MPL::detail::ModelPackageImpl::getRootModel(MPL::detail::ModelPackageImpl *this)
{
  uint64_t v2 = *((void *)this + 9);
  std::string::basic_string[abi:ne180100]<0>(&__p, "rootModelIdentifier");
  BOOL hasKey = JsonMap::hasKey(v2, (const void **)&__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (hasKey)
  {
    BOOL v4 = (uint64_t *)*((void *)this + 9);
    std::string::basic_string[abi:ne180100]<0>(v6, "rootModelIdentifier");
    JsonMap::getString(v4, (const void **)v6, &__p);
    if (v7 < 0) {
      operator delete(v6[0]);
    }
    MPL::detail::ModelPackageImpl::findItem(this);
  }
  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x19F3C1380](exception, "Failed to look up root model");
  __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
}

void sub_19E8ED364(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  __cxa_free_exception(v20);
  _Unwind_Resume(a1);
}

void MPL::ModelPackage::ModelPackage(uint64_t a1, char *a2, unsigned __int8 a3, std::string::value_type a4)
{
  unsigned __int8 v5 = a3;
  std::string::value_type v4 = a4;
  std::allocate_shared[abi:ne180100]<MPL::detail::ModelPackageImpl,std::allocator<MPL::detail::ModelPackageImpl>,std::string const&,BOOL &,BOOL &,void>((uint64_t)&v6, a2, &v5, &v4);
}

void MPL::ModelPackage::~ModelPackage(MPL::ModelPackage *this)
{
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void MPL::ModelPackage::getRootModel(MPL::detail::ModelPackageImpl **this)
{
}

std::__fs::filesystem::path *std::__fs::filesystem::path::operator/=[abi:ne180100](std::__fs::filesystem::path *a1, std::__fs::filesystem::path *this)
{
  if (std::__fs::filesystem::path::__root_directory(this).__size_)
  {
    std::string::operator=(&a1->__pn_, &this->__pn_);
  }
  else
  {
    if (std::__fs::filesystem::path::__filename(a1).__size_) {
      std::string::push_back(&a1->__pn_, 47);
    }
    int v4 = SHIBYTE(this->__pn_.__r_.__value_.__r.__words[2]);
    if (v4 >= 0) {
      unsigned __int8 v5 = this;
    }
    else {
      unsigned __int8 v5 = (std::__fs::filesystem::path *)this->__pn_.__r_.__value_.__r.__words[0];
    }
    if (v4 >= 0) {
      std::string::size_type size = HIBYTE(this->__pn_.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = this->__pn_.__r_.__value_.__l.__size_;
    }
    std::string::append(&a1->__pn_, (const std::string::value_type *)v5, size);
  }
  return a1;
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(std::string *this, char **a2)
{
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  std::__fs::filesystem::path::__string_view v3 = *a2;
  int v4 = v3 - 1;
  while (*++v4)
    ;
  std::string::append[abi:ne180100]<char const*,0>(this, v3, v4);
  return this;
}

void sub_19E8ED4E4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::string::append[abi:ne180100]<char const*,0>(std::string *this, char *a2, char *a3)
{
  int v4 = a2;
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  unint64_t v7 = a3 - a2;
  if ((v6 & 0x80000000) != 0)
  {
    if (a3 == a2) {
      return this;
    }
    std::string::size_type size = this->__r_.__value_.__l.__size_;
    unint64_t v11 = this->__r_.__value_.__r.__words[2];
    std::string::size_type v9 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    unint64_t v10 = (std::string *)this->__r_.__value_.__r.__words[0];
    unint64_t v6 = HIBYTE(v11);
  }
  else
  {
    if (a3 == a2) {
      return this;
    }
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    std::string::size_type v9 = 22;
    unint64_t v10 = this;
  }
  if (v10 > (std::string *)v4 || (char *)&v10->__r_.__value_.__l.__data_ + size + 1 <= v4)
  {
    if (v9 - size < v7)
    {
      std::string::__grow_by(this, v9, size - v9 + v7, size, size, 0, 0);
      this->__r_.__value_.__l.__size_ = size;
      LOBYTE(v6) = *((unsigned char *)&this->__r_.__value_.__s + 23);
    }
    long long v14 = this;
    if ((v6 & 0x80) != 0) {
      long long v14 = (std::string *)this->__r_.__value_.__r.__words[0];
    }
    for (unint64_t i = (char *)v14 + size; v4 != a3; ++i)
    {
      char v16 = *v4++;
      *unint64_t i = v16;
    }
    *unint64_t i = 0;
    std::string::size_type v17 = v7 + size;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
      this->__r_.__value_.__l.__size_ = v17;
    }
    else {
      *((unsigned char *)&this->__r_.__value_.__s + 23) = v17 & 0x7F;
    }
  }
  else
  {
    std::string::__init_with_size[abi:ne180100]<char const*,char const*>(__p, v4, a3, v7);
    if ((v20 & 0x80u) == 0) {
      long long v12 = __p;
    }
    else {
      long long v12 = (void **)__p[0];
    }
    if ((v20 & 0x80u) == 0) {
      std::string::size_type v13 = v20;
    }
    else {
      std::string::size_type v13 = (std::string::size_type)__p[1];
    }
    std::string::append(this, (const std::string::value_type *)v12, v13);
    if ((char)v20 < 0) {
      operator delete(__p[0]);
    }
  }
  return this;
}

void sub_19E8ED65C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::string::__init_with_size[abi:ne180100]<char const*,char const*>(void *result, char *a2, char *a3, unint64_t a4)
{
  int v4 = result;
  if (a4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (a4 > 0x16)
  {
    uint64_t v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17) {
      uint64_t v8 = a4 | 7;
    }
    uint64_t v9 = v8 + 1;
    double result = operator new(v8 + 1);
    v4[1] = a4;
    _DWORD v4[2] = v9 | 0x8000000000000000;
    *int v4 = result;
    int v4 = result;
  }
  else
  {
    *((unsigned char *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    char v10 = *a2++;
    *(unsigned char *)int v4 = v10;
    int v4 = (void *)((char *)v4 + 1);
  }
  *(unsigned char *)int v4 = 0;
  return result;
}

uint64_t ***std::unique_ptr<JsonMap>::reset[abi:ne180100](uint64_t ****a1, uint64_t ***a2)
{
  double result = *a1;
  *a1 = a2;
  if (result)
  {
    JsonMap::~JsonMap(result);
    JUMPOUT(0x19F3C1920);
  }
  return result;
}

void *std::string::basic_string[abi:ne180100](void *__b, size_t __len, int __c)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    unint64_t v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((unsigned char *)__b + 23) = __len;
    unint64_t v6 = __b;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memset(v6, __c, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __b;
}

uint64_t *std::ofstream::basic_ofstream(uint64_t *a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA468] + 64;
  a1[52] = MEMORY[0x1E4FBA468] + 64;
  std::__fs::filesystem::path::__string_view v3 = a1 + 1;
  uint64_t v4 = *(void *)(MEMORY[0x1E4FBA400] + 16);
  uint64_t v5 = *(void *)(MEMORY[0x1E4FBA400] + 8);
  *a1 = v5;
  *(uint64_t *)((char *)a1 + *(void *)(v5 - 24)) = v4;
  unint64_t v6 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::init(v6, a1 + 1);
  uint64_t v7 = MEMORY[0x1E4FBA468] + 24;
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *a1 = v7;
  a1[52] = v2;
  MEMORY[0x19F3C14F0](v3);
  if (!std::filebuf::open()) {
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 4);
  }
  return a1;
}

void sub_19E8ED9A4(_Unwind_Exception *a1)
{
  std::ostream::~ostream();
  MEMORY[0x19F3C1850](v1);
  _Unwind_Resume(a1);
}

uint64_t std::stringbuf::basic_stringbuf[abi:ne180100](uint64_t a1, const std::string *a2, int a3)
{
  uint64_t v6 = std::streambuf::basic_streambuf();
  *(void *)uint64_t v6 = MEMORY[0x1E4FBA470] + 16;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_DWORD *)(v6 + 96) = a3;
  std::string::operator=((std::string *)(v6 + 64), a2);
  std::stringbuf::__init_buf_ptrs[abi:ne180100](a1);
  return a1;
}

void sub_19E8EDA58(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 87) < 0) {
    operator delete(*v2);
  }
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

void std::stringbuf::__init_buf_ptrs[abi:ne180100](uint64_t a1)
{
  *(void *)(a1 + 88) = 0;
  uint64_t v2 = (std::string *)(a1 + 64);
  char v3 = *(unsigned char *)(a1 + 87);
  if (v3 < 0)
  {
    uint64_t v4 = *(std::string **)(a1 + 64);
    unint64_t v5 = *(void *)(a1 + 72);
  }
  else
  {
    uint64_t v4 = v2;
    unint64_t v5 = *(unsigned __int8 *)(a1 + 87);
  }
  int v6 = *(_DWORD *)(a1 + 96);
  if ((v6 & 8) != 0)
  {
    *(void *)(a1 + 88) = (char *)v4 + v5;
    *(void *)(a1 + 16) = v4;
    *(void *)(a1 + 24) = v4;
    *(void *)(a1 + 32) = (char *)v4 + v5;
  }
  if ((v6 & 0x10) != 0)
  {
    *(void *)(a1 + 88) = (char *)v4 + v5;
    std::string::size_type v7 = v3 < 0 ? (*(void *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL) - 1 : 22;
    std::string::resize(v2, v7, 0);
    uint64_t v8 = *(char *)(a1 + 87) < 0 ? *(void *)(a1 + 72) : *(unsigned __int8 *)(a1 + 87);
    *(void *)(a1 + 40) = v4;
    *(void *)(a1 + 48) = v4;
    *(void *)(a1 + 56) = (char *)v4 + v8;
    if ((*(unsigned char *)(a1 + 96) & 3) != 0)
    {
      if (v5 >> 31)
      {
        uint64_t v9 = ((v5 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        unint64_t v10 = 0x7FFFFFFF * ((v9 + ((v5 - 0x80000000 - v9) >> 1)) >> 30);
        uint64_t v4 = (std::string *)((char *)v4 + v10 + 0x7FFFFFFF);
        unint64_t v5 = v5 - v10 - 0x7FFFFFFF;
        *(void *)(a1 + 48) = v4;
      }
      if (v5) {
        *(void *)(a1 + 48) = (char *)v4 + v5;
      }
    }
  }
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(std::string *a1, char *a2)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  LODWORD(v3) = a2[23];
  BOOL v4 = (int)v3 < 0;
  uint64_t v5 = *((void *)a2 + 1);
  if ((int)v3 < 0) {
    a2 = *(char **)a2;
  }
  uint64_t v3 = v3;
  if (v4) {
    uint64_t v3 = v5;
  }
  std::string::append[abi:ne180100]<char const*,0>(a1, a2, &a2[v3]);
  return a1;
}

void sub_19E8EDBDC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::allocate_shared[abi:ne180100]<MPL::detail::ModelPackageItemInfoImpl,std::allocator<MPL::detail::ModelPackageItemInfoImpl>,std::string const&,std::__fs::filesystem::path &,std::string&,std::string&,std::string&,void>@<X0>(long long *a1@<X1>, uint64_t a2@<X2>, long long *a3@<X3>, long long *a4@<X4>, long long *a5@<X5>, void *a6@<X8>)
{
  long long v12 = (std::string *)operator new(0x90uLL);
  double result = std::__shared_ptr_emplace<MPL::detail::ModelPackageItemInfoImpl>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::__fs::filesystem::path &,std::string&,std::string&,std::string&,std::allocator<MPL::detail::ModelPackageItemInfoImpl>,0>(v12, a1, a2, a3, a4, a5);
  *a6 = v12 + 1;
  a6[1] = v12;
  return result;
}

void sub_19E8EDC70(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__shared_ptr_emplace<MPL::detail::ModelPackageItemInfoImpl>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::__fs::filesystem::path &,std::string&,std::string&,std::string&,std::allocator<MPL::detail::ModelPackageItemInfoImpl>,0>(std::string *a1, long long *a2, uint64_t a3, long long *a4, long long *a5, long long *a6)
{
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1EF0DD5E0;
  std::allocator<MPL::detail::ModelPackageItemInfoImpl>::construct[abi:ne180100]<MPL::detail::ModelPackageItemInfoImpl,std::string const&,std::__fs::filesystem::path &,std::string&,std::string&,std::string&>((int)&v8, a1 + 1, a2, a3, a4, a5, a6);
  return a1;
}

void sub_19E8EDCF0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<MPL::detail::ModelPackageItemInfoImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF0DD5E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MPL::detail::ModelPackageItemInfoImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF0DD5E0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x19F3C1920);
}

void std::__shared_ptr_emplace<MPL::detail::ModelPackageItemInfoImpl>::__on_zero_shared(uint64_t a1)
{
}

void std::allocator<MPL::detail::ModelPackageItemInfoImpl>::construct[abi:ne180100]<MPL::detail::ModelPackageItemInfoImpl,std::string const&,std::__fs::filesystem::path &,std::string&,std::string&,std::string&>(int a1, std::string *this, long long *a3, uint64_t a4, long long *a5, long long *a6, long long *a7)
{
  if (*(char *)(a4 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else {
    std::string __p = *(std::string *)a4;
  }
  MPL::detail::ModelPackageItemInfoImpl::ModelPackageItemInfoImpl(this, a3, (long long *)&__p, a5, a6, a7);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_19E8EDE20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::allocate_shared[abi:ne180100]<MPL::ModelPackageItemInfo,std::allocator<MPL::ModelPackageItemInfo>,std::shared_ptr<MPL::detail::ModelPackageItemInfoImpl>,void>@<X0>(uint64_t *a1@<X1>, void *a2@<X8>)
{
  BOOL v4 = (char *)operator new(0x28uLL);
  uint64_t result = std::__shared_ptr_emplace<MPL::ModelPackageItemInfo>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<MPL::detail::ModelPackageItemInfoImpl>,std::allocator<MPL::ModelPackageItemInfo>,0>((uint64_t)v4, a1);
  *a2 = v4 + 24;
  a2[1] = v4;
  return result;
}

void sub_19E8EDE84(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<MPL::ModelPackageItemInfo>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<MPL::detail::ModelPackageItemInfoImpl>,std::allocator<MPL::ModelPackageItemInfo>,0>(uint64_t a1, uint64_t *a2)
{
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)a1 = &unk_1EF0DD570;
  uint64_t v4 = *a2;
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  *(_OWORD *)a2 = 0u;
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = v3;
  if (v3)
  {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

void std::__shared_ptr_emplace<MPL::ModelPackageItemInfo>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF0DD570;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MPL::ModelPackageItemInfo>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF0DD570;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x19F3C1920);
}

void std::__shared_ptr_emplace<MPL::ModelPackageItemInfo>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void std::allocate_shared[abi:ne180100]<MPL::detail::ModelPackageImpl,std::allocator<MPL::detail::ModelPackageImpl>,std::string const&,BOOL &,BOOL &,void>(uint64_t a1, char *a2, unsigned __int8 *a3, std::string::value_type *a4)
{
  std::string::size_type v7 = (std::string *)operator new(0x70uLL);
  std::__shared_ptr_emplace<MPL::detail::ModelPackageImpl>::__shared_ptr_emplace[abi:ne180100]<std::string const&,BOOL &,BOOL &,std::allocator<MPL::detail::ModelPackageImpl>,0>(v7, a2, a3, a4);
}

void sub_19E8EDFE8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<MPL::detail::ModelPackageImpl>::__shared_ptr_emplace[abi:ne180100]<std::string const&,BOOL &,BOOL &,std::allocator<MPL::detail::ModelPackageImpl>,0>(std::string *a1, char *a2, unsigned __int8 *a3, std::string::value_type *a4)
{
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1EF0DD5A8;
  std::allocator<MPL::detail::ModelPackageImpl>::construct[abi:ne180100]<MPL::detail::ModelPackageImpl,std::string const&,BOOL &,BOOL &>((uint64_t)&v4, a1 + 1, a2, a3, a4);
}

void sub_19E8EE060(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<MPL::detail::ModelPackageImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF0DD5A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MPL::detail::ModelPackageImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF0DD5A8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x19F3C1920);
}

void std::__shared_ptr_emplace<MPL::detail::ModelPackageImpl>::__on_zero_shared(uint64_t a1)
{
}

void std::allocator<MPL::detail::ModelPackageImpl>::construct[abi:ne180100]<MPL::detail::ModelPackageImpl,std::string const&,BOOL &,BOOL &>(uint64_t a1, std::string *a2, char *a3, unsigned __int8 *a4, std::string::value_type *a5)
{
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&__p, a3);
  MPL::detail::ModelPackageImpl::ModelPackageImpl(a2, (const std::__fs::filesystem::path *)&__p, *a4, *a5);
}

void sub_19E8EE160(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<_KDInterval>>(unint64_t a1)
{
  if (a1 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(8 * a1);
}

void *std::vector<_KDInterval>::__init_with_size[abi:ne180100]<_KDInterval*,_KDInterval*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    int v6 = result;
    uint64_t result = std::vector<_KDInterval>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_19E8EE214(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<_KDInterval>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_KDInterval>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void _KDBoundingBox::_KDBoundingBox(_KDBoundingBox *this, _KDBoundingBox *a2)
{
  this->_intervals.__begin_ = 0;
  this->_intervals.__end_ = 0;
  this->_intervals.__end_cap_.__value_ = 0;
  this->_numDimensions = a2->_numDimensions;
  long long v4 = 0uLL;
  uint64_t v5 = 0;
  std::vector<_KDInterval>::__init_with_size[abi:ne180100]<_KDInterval*,_KDInterval*>(&v4, a2->_intervals.__begin_, (uint64_t)a2->_intervals.__end_, (a2->_intervals.__end_ - a2->_intervals.__begin_) >> 3);
  begin = this->_intervals.__begin_;
  if (this->_intervals.__begin_)
  {
    this->_intervals.__end_ = begin;
    operator delete(begin);
    this->_intervals.__begin_ = 0;
    this->_intervals.__end_ = 0;
    this->_intervals.__end_cap_.__value_ = 0;
  }
  *(_OWORD *)&this->_intervals.__begin_ = v4;
  this->_intervals.__end_cap_.__value_ = v5;
}

void sub_19E8EE2F4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

double _KDBoundingBox::computeDistanceFromPoint(_KDBoundingBox *this, const float *a2, float *a3)
{
  if (a2 == (const float *)this) {
    return 0.0;
  }
  unint64_t v3 = ((char *)a2 - (char *)this) >> 3;
  if (v3 <= 1) {
    unint64_t v3 = 1;
  }
  long long v4 = (float *)&this->_intervals.__begin_ + 1;
  double result = 0.0;
  do
  {
    float v6 = *a3++;
    float v7 = v6;
    float v8 = *(v4 - 1);
    float v9 = *(float *)&result + (float)((float)(v6 - v8) * (float)(v6 - v8));
    if (v6 < v8) {
      *(float *)&double result = v9;
    }
    float v10 = *v4;
    v4 += 2;
    float v11 = *(float *)&result + (float)((float)(v7 - v10) * (float)(v7 - v10));
    if (v7 > v10) {
      *(float *)&double result = v11;
    }
    --v3;
  }
  while (v3);
  return result;
}

void sub_19E8EE46C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  std::string::size_type v13 = v12;

  std::mutex::unlock(v11);
  _Unwind_Resume(a1);
}

void sub_19E8EE520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  float v11 = v10;

  a9.super_class = (Class)MLGPUComputeDeviceRegistry;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA408];
  uint64_t v3 = *MEMORY[0x1E4FBA408];
  *(void *)a1 = *MEMORY[0x1E4FBA408];
  uint64_t v4 = *(void *)(v2 + 72);
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 64);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = MEMORY[0x1E4FBA470] + 16;
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x19F3C1850](a1 + 128);
  return a1;
}

uint64_t std::__shared_ptr_pointer<MIL::IRProgram  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), 0x800000019EC7DDE1)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

BOOL std::type_info::operator==[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1;
  }
  if ((a2 & a1) < 0 != __OFSUB__(a1, a2)) {
    return strcmp((const char *)(a1 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(a2 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  }
  return 0;
}

void std::__shared_ptr_pointer<MIL::IRProgram  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x19F3C1920);
}

uint64_t std::__shared_ptr_pointer<MIL::MILContext  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), 0x800000019EC7CFD4)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void std::__shared_ptr_pointer<MIL::MILContext  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x19F3C1920);
}

void sub_19E8EEBA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E8EEC68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E8EED78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19E8EEE5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E8EF000(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E8EF174(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19E8EF248(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E8EF3B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E8EF508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
}

void sub_19E8EF6D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Block_object_dispose(&a17, 8);

  _Block_object_dispose((const void *)(v22 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_19E8EF8C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E8EFAAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_19E8F11A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17, void *a18, uint64_t a19, void *a20,void *a21,uint64_t a22,void *a23,void *a24,void *a25,uint64_t a26,void *a27,void *a28,void *a29,uint64_t a30,void *a31)
{
  _Unwind_Resume(a1);
}

double Kernel::swap_index(Kernel *this, int a2, int a3)
{
  uint64_t v3 = *((void *)this + 3);
  uint64_t v4 = *(void *)(v3 + 8 * a2);
  *(void *)(v3 + 8 * a2) = *(void *)(v3 + 8 * a3);
  *(void *)(v3 + 8 * a3) = v4;
  uint64_t v5 = *((void *)this + 4);
  if (v5)
  {
    double result = *(double *)(v5 + 8 * a2);
    *(void *)(v5 + 8 * a2) = *(void *)(v5 + 8 * a3);
    *(double *)(v5 + 8 * a3) = result;
  }
  return result;
}

void Solver::do_shrinking(Solver *this)
{
  int v2 = *((_DWORD *)this + 2);
  if (v2 < 1)
  {
    double v8 = -INFINITY;
    double v6 = -INFINITY;
  }
  else
  {
    uint64_t v4 = (double *)*((void *)this + 3);
    uint64_t v3 = (unsigned __int8 *)*((void *)this + 4);
    uint64_t v5 = (unsigned __int8 *)*((void *)this + 2);
    double v6 = -INFINITY;
    uint64_t v7 = *((unsigned int *)this + 2);
    double v8 = -INFINITY;
    do
    {
      int v10 = *v5++;
      int v9 = v10;
      int v12 = *v3++;
      int v11 = v12;
      double v13 = *v4;
      if (v9 == 1)
      {
        if (v11 == 1) {
          goto LABEL_8;
        }
        if (v8 <= -v13) {
          double v8 = -v13;
        }
        if (v11)
        {
LABEL_8:
          if (v13 >= v6) {
            double v6 = *v4;
          }
        }
      }
      else
      {
        if (v11 == 1) {
          goto LABEL_15;
        }
        if (v6 <= -v13) {
          double v6 = -v13;
        }
        if (v11)
        {
LABEL_15:
          if (v13 >= v8) {
            double v8 = *v4;
          }
        }
      }
      ++v4;
      --v7;
    }
    while (v7);
  }
  if (!*((unsigned char *)this + 116) && v8 + v6 <= *((double *)this + 8) * 10.0)
  {
    *((unsigned char *)this + 116) = 1;
    Solver::reconstruct_gradient((uint64_t)this);
    *((_DWORD *)this + 2) = *((_DWORD *)this + 28);
    info("*");
    int v2 = *((_DWORD *)this + 2);
  }
  if (v2 >= 1)
  {
    for (int i = 0; i < v2; ++i)
    {
      if (Solver::be_shrunk(this, i, v8, v6))
      {
        while (1)
        {
          *((_DWORD *)this + 2) = --v2;
          if (v2 <= i) {
            break;
          }
          if (!Solver::be_shrunk(this, v2, v8, v6))
          {
            Solver::swap_index(this, i, v2);
            int v2 = *((_DWORD *)this + 2);
            break;
          }
        }
      }
    }
  }
}

uint64_t Solver::reconstruct_gradient(uint64_t this)
{
  uint64_t v1 = *(unsigned int *)(this + 8);
  int v2 = *(_DWORD *)(this + 112);
  if (v1 != v2)
  {
    uint64_t v3 = this;
    if ((int)v1 < v2)
    {
      uint64_t v4 = v2 - (uint64_t)(int)v1;
      uint64_t v5 = (double *)(*(void *)(this + 24) + 8 * (int)v1);
      double v6 = (double *)(*(void *)(this + 88) + 8 * (int)v1);
      uint64_t v7 = (double *)(*(void *)(this + 104) + 8 * (int)v1);
      do
      {
        double v8 = *v7++;
        double v9 = v8;
        double v10 = *v6++;
        *v5++ = v9 + v10;
        --v4;
      }
      while (v4);
    }
    if ((int)v1 < 1)
    {
      int v11 = 0;
    }
    else
    {
      int v11 = 0;
      int v12 = *(unsigned __int8 **)(this + 32);
      uint64_t v13 = v1;
      do
      {
        int v14 = *v12++;
        if (v14 == 2) {
          ++v11;
        }
        --v13;
      }
      while (v13);
    }
    if ((int)v1 > 2 * v11)
    {
      this = info("\nWARNING: using -h 0 may be faster\n");
      int v2 = *(_DWORD *)(v3 + 112);
      uint64_t v1 = *(unsigned int *)(v3 + 8);
    }
    if (v2 * v11 <= 2 * (int)v1 * (v2 - (int)v1))
    {
      if ((int)v1 >= 1)
      {
        uint64_t v19 = 0;
        do
        {
          if (*(unsigned char *)(*(void *)(v3 + 32) + v19) == 2)
          {
            this = (***(uint64_t (****)(void, uint64_t))(v3 + 48))(*(void *)(v3 + 48), v19);
            LODWORD(v1) = *(_DWORD *)(v3 + 8);
            int v20 = *(_DWORD *)(v3 + 112);
            if ((int)v1 < v20)
            {
              double v21 = *(double *)(*(void *)(v3 + 40) + 8 * v19);
              uint64_t v22 = v20 - (uint64_t)(int)v1;
              uint64_t v23 = (double *)(*(void *)(v3 + 24) + 8 * (int)v1);
              unsigned int v24 = (float *)(this + 4 * (int)v1);
              do
              {
                float v25 = *v24++;
                *uint64_t v23 = *v23 + v21 * v25;
                ++v23;
                --v22;
              }
              while (v22);
            }
          }
          ++v19;
        }
        while (v19 < (int)v1);
      }
    }
    else if (v2 > (int)v1)
    {
      uint64_t v15 = (int)v1;
      uint64_t v16 = v1;
      do
      {
        this = (***(uint64_t (****)(void, uint64_t, uint64_t))(v3 + 48))(*(void *)(v3 + 48), v15, v16);
        uint64_t v16 = *(unsigned int *)(v3 + 8);
        if ((int)v16 >= 1)
        {
          uint64_t v17 = 0;
          uint64_t v18 = *(void *)(v3 + 32);
          do
          {
            if (*(unsigned char *)(v18 + v17) == 2) {
              *(double *)(*(void *)(v3 + 24) + 8 * v15) = *(double *)(*(void *)(v3 + 24) + 8 * v15)
            }
                                                          + *(double *)(*(void *)(v3 + 40) + 8 * v17)
                                                          * *(float *)(this + 4 * v17);
            ++v17;
          }
          while (v16 != v17);
        }
        ++v15;
      }
      while (v15 < *(int *)(v3 + 112));
    }
  }
  return this;
}

uint64_t info(const char *a1, ...)
{
  va_start(va, a1);
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  vsprintf(v2, a1, va);
  return svm_print_string(v2);
}

BOOL Solver::be_shrunk(Solver *this, int a2, double a3, double a4)
{
  if (*(unsigned char *)(*((void *)this + 4) + a2))
  {
    if (*(unsigned char *)(*((void *)this + 4) + a2) != 1) {
      return 0;
    }
    double v4 = -*(double *)(*((void *)this + 3) + 8 * a2);
    if (*(unsigned char *)(*((void *)this + 2) + a2) != 1) {
      goto LABEL_4;
    }
  }
  else
  {
    double v4 = *(double *)(*((void *)this + 3) + 8 * a2);
    if (*(unsigned char *)(*((void *)this + 2) + a2) == 1)
    {
LABEL_4:
      BOOL v5 = v4 <= a4;
      return !v5;
    }
  }
  BOOL v5 = v4 <= a3;
  return !v5;
}

double Solver::swap_index(Solver *this, int a2, int a3)
{
  (*(void (**)(void))(**((void **)this + 6) + 16))(*((void *)this + 6));
  uint64_t v6 = *((void *)this + 2);
  char v7 = *(unsigned char *)(v6 + a2);
  *(unsigned char *)(v6 + a2) = *(unsigned char *)(v6 + a3);
  *(unsigned char *)(v6 + a3) = v7;
  uint64_t v8 = *((void *)this + 3);
  uint64_t v9 = *((void *)this + 4);
  uint64_t v10 = *(void *)(v8 + 8 * a2);
  *(void *)(v8 + 8 * a2) = *(void *)(v8 + 8 * a3);
  *(void *)(v8 + 8 * a3) = v10;
  LOBYTE(v8) = *(unsigned char *)(v9 + a2);
  *(unsigned char *)(v9 + a2) = *(unsigned char *)(v9 + a3);
  *(unsigned char *)(v9 + a3) = v8;
  uint64_t v11 = *((void *)this + 5);
  uint64_t v12 = *(void *)(v11 + 8 * a2);
  *(void *)(v11 + 8 * a2) = *(void *)(v11 + 8 * a3);
  *(void *)(v11 + 8 * a3) = v12;
  uint64_t v13 = *((void *)this + 11);
  uint64_t v14 = *((void *)this + 12);
  uint64_t v15 = *(void *)(v13 + 8 * a2);
  *(void *)(v13 + 8 * a2) = *(void *)(v13 + 8 * a3);
  *(void *)(v13 + 8 * a3) = v15;
  LODWORD(v13) = *(_DWORD *)(v14 + 4 * a2);
  *(_DWORD *)(v14 + 4 * a2) = *(_DWORD *)(v14 + 4 * a3);
  *(_DWORD *)(v14 + 4 * a3) = v13;
  uint64_t v16 = *((void *)this + 13);
  double result = *(double *)(v16 + 8 * a2);
  *(void *)(v16 + 8 * a2) = *(void *)(v16 + 8 * a3);
  *(double *)(v16 + 8 * a3) = result;
  return result;
}

uint64_t print_string_stdout(const char *a1)
{
  uint64_t v1 = (FILE **)MEMORY[0x1E4F143D8];
  fputs(a1, (FILE *)*MEMORY[0x1E4F143D8]);
  int v2 = *v1;

  return fflush(v2);
}

double Solver::calculate_rho(Solver *this)
{
  uint64_t v1 = *((unsigned int *)this + 2);
  if ((int)v1 < 1)
  {
    double v7 = INFINITY;
    double v8 = -INFINITY;
  }
  else
  {
    int v2 = 0;
    uint64_t v3 = (unsigned __int8 *)*((void *)this + 2);
    double v4 = (double *)*((void *)this + 3);
    BOOL v5 = (unsigned __int8 *)*((void *)this + 4);
    double v6 = 0.0;
    double v7 = INFINITY;
    double v8 = -INFINITY;
    do
    {
      int v10 = *v3++;
      int v9 = v10;
      double v11 = (double)(char)v10;
      double v12 = *v4++;
      double v13 = v12 * v11;
      LODWORD(v12) = *v5++;
      int v14 = LODWORD(v12);
      if (v8 <= v13) {
        double v15 = v13;
      }
      else {
        double v15 = v8;
      }
      if (v7 >= v13) {
        double v16 = v13;
      }
      else {
        double v16 = v7;
      }
      if (v9 == 1) {
        double v15 = v8;
      }
      else {
        double v16 = v7;
      }
      double v17 = v6 + v13;
      if (v8 <= v13) {
        double v18 = v13;
      }
      else {
        double v18 = v8;
      }
      if (v7 < v13) {
        double v13 = v7;
      }
      if (v9 == 255) {
        double v18 = v8;
      }
      else {
        double v13 = v7;
      }
      if (v14 == 1) {
        int v19 = v2;
      }
      else {
        int v19 = v2 + 1;
      }
      if (v14 == 1)
      {
        double v7 = v13;
        double v8 = v18;
        double v20 = v6;
      }
      else
      {
        double v20 = v17;
      }
      if (v14)
      {
        int v2 = v19;
      }
      else
      {
        double v7 = v16;
        double v8 = v15;
      }
      if (v14) {
        double v6 = v20;
      }
      --v1;
    }
    while (v1);
    if (v2 > 0) {
      return v6 / (double)v2;
    }
  }
  return (v7 + v8) * 0.5;
}

uint64_t Solver::select_working_set(Solver *this, int *a2, int *a3)
{
  uint64_t v4 = *((unsigned int *)this + 2);
  if ((int)v4 < 1) {
    return 1;
  }
  uint64_t v7 = 0;
  uint64_t v8 = 0xFFFFFFFFLL;
  double v9 = -INFINITY;
  do
  {
    if (*(unsigned char *)(*((void *)this + 2) + v7) == 1)
    {
      if (*(unsigned char *)(*((void *)this + 4) + v7) != 1)
      {
        double v10 = -*(double *)(*((void *)this + 3) + 8 * v7);
        if (v9 <= v10) {
          goto LABEL_9;
        }
      }
    }
    else if (*(unsigned char *)(*((void *)this + 4) + v7))
    {
      double v10 = *(double *)(*((void *)this + 3) + 8 * v7);
      if (v10 >= v9)
      {
LABEL_9:
        double v9 = v10;
        uint64_t v8 = v7;
      }
    }
    ++v7;
  }
  while (v4 != v7);
  if (v8 == -1)
  {
    uint64_t v11 = 0;
    LODWORD(v8) = -1;
  }
  else
  {
    uint64_t v11 = (***((uint64_t (****)(void, uint64_t))this + 6))(*((void *)this + 6), v8);
    LODWORD(v4) = *((_DWORD *)this + 2);
  }
  if ((int)v4 < 1) {
    return 1;
  }
  uint64_t v12 = 0;
  uint64_t v13 = *((void *)this + 2);
  int v14 = -1;
  double v15 = -INFINITY;
  double v16 = INFINITY;
  while (2)
  {
    if (*(unsigned char *)(v13 + v12) == 1)
    {
      if (*(unsigned char *)(*((void *)this + 4) + v12))
      {
        uint64_t v17 = *((void *)this + 3);
        double v18 = *(double *)(v17 + 8 * v12);
        double v19 = v9 + v18;
        if (v18 >= v15) {
          double v15 = *(double *)(v17 + 8 * v12);
        }
        if (v19 > 0.0)
        {
          double v20 = *(double *)(*((void *)this + 7) + 8 * (int)v8) + *(double *)(*((void *)this + 7) + 8 * v12);
          double v21 = *(float *)(v11 + 4 * v12);
          double v22 = (double)*(char *)(v13 + (int)v8) * -2.0;
          goto LABEL_27;
        }
      }
    }
    else if (*(unsigned char *)(*((void *)this + 4) + v12) != 1)
    {
      double v23 = *(double *)(*((void *)this + 3) + 8 * v12);
      double v19 = v9 - v23;
      double v24 = -v23;
      if (v15 <= v24) {
        double v15 = v24;
      }
      if (v19 > 0.0)
      {
        double v20 = *(double *)(*((void *)this + 7) + 8 * (int)v8) + *(double *)(*((void *)this + 7) + 8 * v12);
        double v22 = (double)*(char *)(v13 + (int)v8) + (double)*(char *)(v13 + (int)v8);
        double v21 = *(float *)(v11 + 4 * v12);
LABEL_27:
        double v25 = v20 + v22 * v21;
        double v26 = -(v19 * v19);
        if (v25 <= 0.0) {
          double v25 = 1.0e-12;
        }
        double v27 = v26 / v25;
        if (v27 <= v16)
        {
          int v14 = v12;
          double v16 = v27;
        }
      }
    }
    if (v4 != ++v12) {
      continue;
    }
    break;
  }
  if (v9 + v15 >= *((double *)this + 8) && v14 != -1)
  {
    uint64_t result = 0;
    *a2 = v8;
    *a3 = v14;
    return result;
  }
  return 1;
}

void Solver::~Solver(Solver *this)
{
}

void Solver_NU::do_shrinking(Solver_NU *this)
{
  int v2 = *((_DWORD *)this + 2);
  if (v2 >= 1)
  {
    uint64_t v4 = (double *)*((void *)this + 3);
    uint64_t v3 = (unsigned __int8 *)*((void *)this + 4);
    double v5 = -INFINITY;
    double v6 = (unsigned __int8 *)*((void *)this + 2);
    uint64_t v7 = *((unsigned int *)this + 2);
    double v8 = -INFINITY;
    double v9 = -INFINITY;
    double v10 = -INFINITY;
    while (1)
    {
      int v12 = *v3++;
      int v11 = v12;
      int v14 = *v6++;
      int v13 = v14;
      if (v11 == 1)
      {
        double v15 = *v4;
      }
      else
      {
        double v15 = *v4;
        double v16 = -*v4;
        if (v13 == 1)
        {
          if (v10 < v16) {
            double v10 = -*v4;
          }
        }
        else if (v5 < v16)
        {
          double v5 = -*v4;
        }
        if (!v11) {
          goto LABEL_16;
        }
      }
      if (v13 == 1)
      {
        if (v15 > v9) {
          double v9 = v15;
        }
      }
      else if (v15 > v8)
      {
        double v8 = v15;
      }
LABEL_16:
      ++v4;
      if (!--v7) {
        goto LABEL_19;
      }
    }
  }
  double v10 = -INFINITY;
  double v9 = -INFINITY;
  double v8 = -INFINITY;
  double v5 = -INFINITY;
LABEL_19:
  if (!*((unsigned char *)this + 116))
  {
    double v17 = v10 + v9;
    if (v10 + v9 <= v8 + v5) {
      double v17 = v8 + v5;
    }
    if (v17 <= *((double *)this + 8) * 10.0)
    {
      *((unsigned char *)this + 116) = 1;
      Solver::reconstruct_gradient((uint64_t)this);
      int v2 = *((_DWORD *)this + 28);
      *((_DWORD *)this + 2) = v2;
    }
  }
  if (v2 >= 1)
  {
    for (int i = 0; i < v2; ++i)
    {
      if (Solver_NU::be_shrunk(this, i, v10, v9, v8, v5))
      {
        while (1)
        {
          *((_DWORD *)this + 2) = --v2;
          if (v2 <= i) {
            break;
          }
          if (!Solver_NU::be_shrunk(this, v2, v10, v9, v8, v5))
          {
            Solver::swap_index(this, i, v2);
            int v2 = *((_DWORD *)this + 2);
            break;
          }
        }
      }
    }
  }
}

BOOL Solver_NU::be_shrunk(Solver_NU *this, int a2, double a3, double a4, double a5, double a6)
{
  if (*(unsigned char *)(*((void *)this + 4) + a2))
  {
    if (*(unsigned char *)(*((void *)this + 4) + a2) != 1) {
      return 0;
    }
    double v6 = -*(double *)(*((void *)this + 3) + 8 * a2);
    if (*(unsigned char *)(*((void *)this + 2) + a2) == 1) {
      BOOL v7 = v6 <= a3;
    }
    else {
      BOOL v7 = v6 <= a6;
    }
  }
  else
  {
    double v8 = *(double *)(*((void *)this + 3) + 8 * a2);
    if (*(unsigned char *)(*((void *)this + 2) + a2) == 1) {
      BOOL v7 = v8 <= a4;
    }
    else {
      BOOL v7 = v8 <= a5;
    }
  }
  return !v7;
}

double Solver_NU::calculate_rho(Solver_NU *this)
{
  uint64_t v1 = *((unsigned int *)this + 2);
  if ((int)v1 < 1)
  {
    int v3 = 0;
    double v5 = 0.0;
    double v6 = INFINITY;
    double v7 = -INFINITY;
    double v9 = -INFINITY;
    double v10 = INFINITY;
  }
  else
  {
    uint64_t v2 = 0;
    int v3 = 0;
    int v4 = 0;
    double v5 = 0.0;
    double v6 = INFINITY;
    double v7 = -INFINITY;
    double v8 = 0.0;
    double v9 = -INFINITY;
    double v10 = INFINITY;
    do
    {
      int v11 = *(unsigned __int8 *)(*((void *)this + 4) + v2);
      if (*(unsigned char *)(*((void *)this + 2) + v2) == 1)
      {
        if (*(unsigned char *)(*((void *)this + 4) + v2))
        {
          if (v11 == 1)
          {
            if (v9 <= *(double *)(*((void *)this + 3) + 8 * v2)) {
              double v9 = *(double *)(*((void *)this + 3) + 8 * v2);
            }
          }
          else
          {
            ++v4;
            double v8 = v8 + *(double *)(*((void *)this + 3) + 8 * v2);
          }
        }
        else if (v10 >= *(double *)(*((void *)this + 3) + 8 * v2))
        {
          double v10 = *(double *)(*((void *)this + 3) + 8 * v2);
        }
      }
      else if (*(unsigned char *)(*((void *)this + 4) + v2))
      {
        if (v11 == 1)
        {
          if (v7 <= *(double *)(*((void *)this + 3) + 8 * v2)) {
            double v7 = *(double *)(*((void *)this + 3) + 8 * v2);
          }
        }
        else
        {
          ++v3;
          double v5 = v5 + *(double *)(*((void *)this + 3) + 8 * v2);
        }
      }
      else if (v6 >= *(double *)(*((void *)this + 3) + 8 * v2))
      {
        double v6 = *(double *)(*((void *)this + 3) + 8 * v2);
      }
      ++v2;
    }
    while (v1 != v2);
    if (v4 > 0)
    {
      double v12 = v8 / (double)v4;
      goto LABEL_27;
    }
  }
  double v12 = (v10 + v9) * 0.5;
LABEL_27:
  if (v3 < 1) {
    double v13 = (v6 + v7) * 0.5;
  }
  else {
    double v13 = v5 / (double)v3;
  }
  *(double *)(*((void *)this + 15) + 32) = (v12 + v13) * 0.5;
  return (v12 - v13) * 0.5;
}

uint64_t Solver_NU::select_working_set(Solver_NU *this, int *a2, int *a3)
{
  uint64_t v6 = *((unsigned int *)this + 2);
  if ((int)v6 < 1)
  {
    LODWORD(v8) = -1;
    double v9 = -INFINITY;
    LODWORD(v10) = -1;
    double v11 = -INFINITY;
    double v13 = -INFINITY;
    double v14 = -INFINITY;
    int v15 = -1;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0xFFFFFFFFLL;
    double v9 = -INFINITY;
    uint64_t v10 = 0xFFFFFFFFLL;
    double v11 = -INFINITY;
    do
    {
      if (*(unsigned char *)(*((void *)this + 2) + v7) == 1)
      {
        if (*(unsigned char *)(*((void *)this + 4) + v7) != 1 && v11 <= -*(double *)(*((void *)this + 3) + 8 * v7))
        {
          double v11 = -*(double *)(*((void *)this + 3) + 8 * v7);
          uint64_t v10 = v7;
        }
      }
      else if (*(unsigned char *)(*((void *)this + 4) + v7) && *(double *)(*((void *)this + 3) + 8 * v7) >= v9)
      {
        double v9 = *(double *)(*((void *)this + 3) + 8 * v7);
        uint64_t v8 = v7;
      }
      ++v7;
    }
    while (v6 != v7);
    if (v10 == -1)
    {
      uint64_t v12 = 0;
      LODWORD(v10) = -1;
    }
    else
    {
      uint64_t v12 = (***((uint64_t (****)(void, uint64_t))this + 6))(*((void *)this + 6), v10);
      uint64_t v6 = *((unsigned int *)this + 2);
    }
    if (v8 == -1)
    {
      uint64_t v16 = 0;
      LODWORD(v8) = -1;
    }
    else
    {
      uint64_t v16 = (***((uint64_t (****)(void, uint64_t, uint64_t))this + 6))(*((void *)this + 6), v8, v6);
      LODWORD(v6) = *((_DWORD *)this + 2);
    }
    if ((int)v6 >= 1)
    {
      uint64_t v17 = 0;
      int v15 = -1;
      double v14 = -INFINITY;
      double v18 = INFINITY;
      double v13 = -INFINITY;
      while (1)
      {
        if (*(unsigned char *)(*((void *)this + 2) + v17) == 1)
        {
          if (!*(unsigned char *)(*((void *)this + 4) + v17)) {
            goto LABEL_35;
          }
          uint64_t v19 = *((void *)this + 3);
          double v20 = *(double *)(v19 + 8 * v17);
          double v21 = v11 + v20;
          if (v20 >= v13) {
            double v13 = *(double *)(v19 + 8 * v17);
          }
          if (v21 <= 0.0) {
            goto LABEL_35;
          }
          double v22 = *(double *)(*((void *)this + 7) + 8 * (int)v10) + *(double *)(*((void *)this + 7) + 8 * v17);
          float v23 = *(float *)(v12 + 4 * v17);
        }
        else
        {
          if (*(unsigned char *)(*((void *)this + 4) + v17) == 1) {
            goto LABEL_35;
          }
          double v24 = *(double *)(*((void *)this + 3) + 8 * v17);
          double v21 = v9 - v24;
          double v25 = -v24;
          if (v14 <= v25) {
            double v14 = v25;
          }
          if (v21 <= 0.0) {
            goto LABEL_35;
          }
          double v22 = *(double *)(*((void *)this + 7) + 8 * (int)v8) + *(double *)(*((void *)this + 7) + 8 * v17);
          float v23 = *(float *)(v16 + 4 * v17);
        }
        double v26 = v22 - (float)(v23 + v23);
        double v27 = -(v21 * v21);
        if (v26 <= 0.0) {
          double v26 = 1.0e-12;
        }
        double v28 = v27 / v26;
        if (v28 <= v18)
        {
          int v15 = v17;
          double v18 = v28;
        }
LABEL_35:
        if (v6 == ++v17) {
          goto LABEL_38;
        }
      }
    }
    int v15 = -1;
    double v13 = -INFINITY;
    double v14 = -INFINITY;
  }
LABEL_38:
  double v29 = v11 + v13;
  double v30 = v9 + v14;
  if (v29 > v30) {
    double v30 = v29;
  }
  if (v30 < *((double *)this + 8) || v15 == -1) {
    return 1;
  }
  uint64_t result = 0;
  if (*(unsigned char *)(*((void *)this + 2) + v15) == 1) {
    int v33 = v10;
  }
  else {
    int v33 = v8;
  }
  *a2 = v33;
  *a3 = v15;
  return result;
}

void Solver_NU::~Solver_NU(Solver_NU *this)
{
}

void Cache::Cache(Cache *this, int a2, uint64_t a3)
{
  *(_DWORD *)this = a2;
  *((void *)this + 1) = a3;
  int v4 = malloc_type_calloc(a2, 0x20uLL, 0x10A004007F91357uLL);
  uint64_t v5 = *(int *)this;
  uint64_t v6 = (*((void *)this + 1) >> 2) - 8 * (v5 & 0x7FFFFFFFFFFFFFFLL);
  BOOL v7 = v6 <= 2 * v5;
  uint64_t v8 = 2 * v5;
  if (v7) {
    uint64_t v6 = v8;
  }
  *((void *)this + 1) = v6;
  *((void *)this + 2) = v4;
  *((void *)this + 3) = (char *)this + 24;
  *((void *)this + 4) = (char *)this + 24;
}

void Cache::~Cache(Cache *this)
{
  uint64_t v2 = (char *)this + 24;
  for (uint64_t i = *((void *)this + 4); (char *)i != v2; uint64_t i = *(void *)(i + 8))
    free(*(void **)(i + 16));
  free(*((void **)this + 2));
}

uint64_t Cache::get_data(Cache *this, int a2, float **a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v7 = *((void *)this + 2);
  uint64_t v8 = a2;
  double v9 = (uint64_t *)(v7 + 32 * a2);
  double v11 = v9 + 3;
  int v10 = *((_DWORD *)v9 + 6);
  if (v10)
  {
    uint64_t v12 = *v9;
    *(void *)(v12 + 8) = v9[1];
    *(void *)v9[1] = v12;
  }
  uint64_t v13 = (a4 - v10);
  if ((int)a4 <= v10)
  {
    uint64_t v19 = *(float **)(v7 + 32 * a2 + 16);
  }
  else
  {
    if (*((void *)this + 1) < (uint64_t)v13)
    {
      do
      {
        double v14 = (uint64_t *)*((void *)this + 4);
        uint64_t v15 = *v14;
        *(void *)(v15 + 8) = v14[1];
        uint64_t v16 = (void *)v14[2];
        *(void *)v14[1] = v15;
        free(v16);
        uint64_t v17 = *((void *)this + 1) + *((int *)v14 + 6);
        *((void *)this + 1) = v17;
        v14[2] = 0;
        *((_DWORD *)v14 + 6) = 0;
      }
      while (v17 < v13);
    }
    uint64_t v18 = v7 + 32 * v8;
    uint64_t v19 = (float *)malloc_type_realloc(*(void **)(v18 + 16), 4 * (int)v4, 0x100004052888210uLL);
    *(void *)(v18 + 16) = v19;
    *((void *)this + 1) -= v13;
    uint64_t v20 = *v11;
    *double v11 = v4;
    uint64_t v4 = v20;
  }
  uint64_t v21 = v7 + 32 * v8;
  uint64_t v22 = *((void *)this + 3);
  *(void *)(v21 + 8) = (char *)this + 24;
  *double v9 = v22;
  *(void *)(v22 + 8) = v9;
  **(void **)(v21 + 8) = v9;
  *a3 = v19;
  return v4;
}

void Cache::swap_index(Cache *this, int a2, int a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = *((void *)this + 2);
    uint64_t v5 = (uint64_t *)(v4 + 32 * a2);
    if (*((_DWORD *)v5 + 6))
    {
      uint64_t v6 = *v5;
      *(void *)(v6 + 8) = v5[1];
      *(void *)v5[1] = v6;
    }
    uint64_t v7 = (uint64_t *)(v4 + 32 * a3);
    if (*((_DWORD *)v7 + 6))
    {
      uint64_t v8 = *v7;
      *(void *)(v8 + 8) = v7[1];
      *(void *)v7[1] = v8;
    }
    uint64_t v9 = v4 + 32 * a2;
    uint64_t v10 = *(void *)(v9 + 16);
    *(void *)(v9 + 16) = v7[2];
    _DWORD v7[2] = v10;
    uint64_t v11 = *((void *)this + 2);
    uint64_t v12 = v11 + 32 * a2;
    uint64_t v13 = v11 + 32 * a3;
    int v14 = *(_DWORD *)(v12 + 24);
    *(_DWORD *)(v12 + 24) = *(_DWORD *)(v13 + 24);
    *(_DWORD *)(v13 + 24) = v14;
    if (*(_DWORD *)(v12 + 24))
    {
      uint64_t v15 = *((void *)this + 3);
      *(void *)uint64_t v12 = v15;
      *(void *)(v12 + 8) = (char *)this + 24;
      *(void *)(v15 + 8) = v12;
      **(void **)(v12 + 8) = v12;
    }
    if (v14)
    {
      uint64_t v16 = *((void *)this + 3);
      uint64_t v17 = (void *)(v11 + 32 * a3);
      *uint64_t v17 = v16;
      v17[1] = (char *)this + 24;
      *(void *)(v16 + 8) = v17;
      *(void *)v17[1] = v17;
    }
    if (a2 >= a3) {
      int v18 = a3;
    }
    else {
      int v18 = a2;
    }
    if (a2 <= a3) {
      int v19 = a3;
    }
    else {
      int v19 = a2;
    }
    uint64_t v20 = (char *)this + 24;
    uint64_t v21 = (char *)*((void *)this + 4);
    if (v21 != (char *)this + 24)
    {
      do
      {
        int v22 = *((_DWORD *)v21 + 6);
        if (v22 > v18)
        {
          if (v22 <= v19)
          {
            uint64_t v25 = *(void *)v21;
            *(void *)(v25 + 8) = *((void *)v21 + 1);
            double v26 = (void *)*((void *)v21 + 2);
            **((void **)v21 + 1) = v25;
            free(v26);
            *((void *)this + 1) += *((int *)v21 + 6);
            *((void *)v21 + 2) = 0;
            *((_DWORD *)v21 + 6) = 0;
          }
          else
          {
            uint64_t v23 = *((void *)v21 + 2);
            int v24 = *(_DWORD *)(v23 + 4 * v18);
            *(_DWORD *)(v23 + 4 * v18) = *(_DWORD *)(v23 + 4 * v19);
            *(_DWORD *)(v23 + 4 * v19) = v24;
          }
        }
        uint64_t v21 = (char *)*((void *)v21 + 1);
      }
      while (v21 != v20);
    }
  }
}

void Kernel::Kernel(Kernel *this, int a2, svm_node *const *a3, const svm_parameter *a4, double a5, __n128 a6)
{
  *(void *)this = &unk_1EF0CE0F8;
  *((double *)this + 5) = a5;
  *((__n128 *)this + 3) = a6;
  uint64_t v6 = Kernel::kernel_linear;
  switch(LODWORD(a5))
  {
    case 0:
      goto LABEL_7;
    case 1:
      uint64_t v7 = Kernel::kernel_poly;
      goto LABEL_6;
    case 2:
      uint64_t v7 = (double (*)(Kernel *, int, int))Kernel::kernel_rbf;
      goto LABEL_6;
    case 3:
      uint64_t v7 = (double (*)(Kernel *, int, int))Kernel::kernel_sigmoid;
      goto LABEL_6;
    case 4:
      uint64_t v7 = Kernel::kernel_precomputed;
LABEL_6:
      uint64_t v6 = v7;
LABEL_7:
      *((void *)this + 1) = v6;
      *((void *)this + 2) = 0;
      break;
    default:
      break;
  }
  operator new[]();
}

double Kernel::kernel_linear(Kernel *this, int a2, int a3)
{
  uint64_t v3 = *((void *)this + 3);
  uint64_t v4 = *(double **)(v3 + 8 * a2);
  int v5 = *(_DWORD *)v4;
  if (*(_DWORD *)v4 == -1) {
    return 0.0;
  }
  uint64_t v6 = *(double **)(v3 + 8 * a3);
  double result = 0.0;
  do
  {
    int v8 = *(_DWORD *)v6;
    if (*(_DWORD *)v6 == -1) {
      break;
    }
    if (v5 == v8)
    {
      double result = result + v4[1] * v6[1];
      v4 += 2;
      v6 += 2;
    }
    else if (v5 > v8)
    {
      v6 += 2;
    }
    else
    {
      v4 += 2;
    }
    int v5 = *(_DWORD *)v4;
  }
  while (*(_DWORD *)v4 != -1);
  return result;
}

double Kernel::kernel_poly(Kernel *this, int a2, int a3)
{
  uint64_t v3 = *((void *)this + 3);
  uint64_t v4 = *(double **)(v3 + 8 * a2);
  int v5 = *(_DWORD *)v4;
  if (*(_DWORD *)v4 == -1)
  {
    double v7 = 0.0;
  }
  else
  {
    uint64_t v6 = *(double **)(v3 + 8 * a3);
    double v7 = 0.0;
    do
    {
      int v8 = *(_DWORD *)v6;
      if (*(_DWORD *)v6 == -1) {
        break;
      }
      if (v5 == v8)
      {
        double v7 = v7 + v4[1] * v6[1];
        v4 += 2;
        v6 += 2;
      }
      else if (v5 > v8)
      {
        v6 += 2;
      }
      else
      {
        v4 += 2;
      }
      int v5 = *(_DWORD *)v4;
    }
    while (*(_DWORD *)v4 != -1);
  }
  int v9 = *((_DWORD *)this + 11);
  if (v9 < 1) {
    return 1.0;
  }
  double v10 = *((double *)this + 7) + *((double *)this + 6) * v7;
  double result = 1.0;
  do
  {
    if (v9) {
      double v12 = v10;
    }
    else {
      double v12 = 1.0;
    }
    double result = result * v12;
    double v10 = v10 * v10;
    BOOL v13 = v9 > 1;
    int v9 = v9 >> 1;
  }
  while (v13);
  return result;
}

long double Kernel::kernel_rbf(Kernel *this, int a2, int a3)
{
  uint64_t v4 = *((void *)this + 3);
  uint64_t v3 = *((void *)this + 4);
  double v5 = *(double *)(v3 + 8 * a2);
  double v6 = *(double *)(v3 + 8 * a3);
  double v7 = *(double **)(v4 + 8 * a2);
  int v8 = *(_DWORD *)v7;
  if (*(_DWORD *)v7 == -1)
  {
    double v10 = 0.0;
  }
  else
  {
    int v9 = *(double **)(v4 + 8 * a3);
    double v10 = 0.0;
    do
    {
      int v11 = *(_DWORD *)v9;
      if (*(_DWORD *)v9 == -1) {
        break;
      }
      if (v8 == v11)
      {
        double v10 = v10 + v7[1] * v9[1];
        v7 += 2;
        v9 += 2;
      }
      else if (v8 > v11)
      {
        v9 += 2;
      }
      else
      {
        v7 += 2;
      }
      int v8 = *(_DWORD *)v7;
    }
    while (*(_DWORD *)v7 != -1);
  }
  return exp(-(*((double *)this + 6) * (v5 + v6 + v10 * -2.0)));
}

long double Kernel::kernel_sigmoid(Kernel *this, int a2, int a3)
{
  uint64_t v3 = *((void *)this + 3);
  uint64_t v4 = *(double **)(v3 + 8 * a2);
  int v5 = *(_DWORD *)v4;
  if (*(_DWORD *)v4 == -1)
  {
    double v7 = 0.0;
  }
  else
  {
    double v6 = *(double **)(v3 + 8 * a3);
    double v7 = 0.0;
    do
    {
      int v8 = *(_DWORD *)v6;
      if (*(_DWORD *)v6 == -1) {
        break;
      }
      if (v5 == v8)
      {
        double v7 = v7 + v4[1] * v6[1];
        v4 += 2;
        v6 += 2;
      }
      else if (v5 > v8)
      {
        v6 += 2;
      }
      else
      {
        v4 += 2;
      }
      int v5 = *(_DWORD *)v4;
    }
    while (*(_DWORD *)v4 != -1);
  }
  return tanh(*((double *)this + 7) + *((double *)this + 6) * v7);
}

double Kernel::kernel_precomputed(Kernel *this, int a2, int a3)
{
  return *(double *)(*(void *)(*((void *)this + 3) + 8 * a2)
                   + 16 * (int)*(double *)(*(void *)(*((void *)this + 3) + 8 * a3) + 8)
                   + 8);
}

void Kernel::~Kernel(Kernel *this)
{
  *(void *)this = &unk_1EF0CE0F8;
  uint64_t v2 = *((void *)this + 3);
  if (v2) {
    MEMORY[0x19F3C1900](v2, 0x60C8044C4A2DFLL);
  }
  uint64_t v3 = *((void *)this + 4);
  if (v3) {
    MEMORY[0x19F3C1900](v3, 0x1000C8000313F17);
  }
}

long double Kernel::k_function(Kernel *this, const svm_node *a2, const svm_node *a3, const svm_parameter *a4)
{
  long double result = 0.0;
  switch(*(&a3->var0 + 1))
  {
    case 0:
      while (1)
      {
        int v5 = *(_DWORD *)this;
        if (*(_DWORD *)this == -1) {
          break;
        }
        int var0 = a2->var0;
        if (a2->var0 == -1) {
          break;
        }
        if (v5 == var0)
        {
          long double result = result + *((double *)this + 1) * a2->var1;
          this = (Kernel *)((char *)this + 16);
          ++a2;
        }
        else if (v5 > var0)
        {
          ++a2;
        }
        else
        {
          this = (Kernel *)((char *)this + 16);
        }
      }
      break;
    case 1:
      while (1)
      {
        int v7 = *(_DWORD *)this;
        if (*(_DWORD *)this == -1) {
          break;
        }
        int v8 = a2->var0;
        if (a2->var0 == -1) {
          break;
        }
        if (v7 == v8)
        {
          long double result = result + *((double *)this + 1) * a2->var1;
          this = (Kernel *)((char *)this + 16);
          ++a2;
        }
        else if (v7 > v8)
        {
          ++a2;
        }
        else
        {
          this = (Kernel *)((char *)this + 16);
        }
      }
      int var1_low = LODWORD(a3->var1);
      if (var1_low < 1)
      {
        long double result = 1.0;
      }
      else
      {
        double v16 = a3[1].var1 + *(double *)&a3[1].var0 * result;
        long double result = 1.0;
        do
        {
          if (var1_low) {
            double v17 = v16;
          }
          else {
            double v17 = 1.0;
          }
          long double result = result * v17;
          double v16 = v16 * v16;
          BOOL v18 = var1_low >= 2;
          int var1_low = var1_low >> 1;
        }
        while (v18);
      }
      break;
    case 2:
      while (1)
      {
        int v9 = *(_DWORD *)this;
        if (*(_DWORD *)this == -1) {
          break;
        }
        int v10 = a2->var0;
        if (a2->var0 == -1)
        {
          int v19 = (double *)((char *)this + 16);
          do
          {
            long double result = result + *(v19 - 1) * *(v19 - 1);
            int v20 = *(_DWORD *)v19;
            v19 += 2;
          }
          while (v20 != -1);
          break;
        }
        if (v9 == v10)
        {
          double v11 = *((double *)this + 1) - a2->var1;
          long double result = result + v11 * v11;
          this = (Kernel *)((char *)this + 16);
          ++a2;
        }
        else if (v9 <= v10)
        {
          long double result = result + *((double *)this + 1) * *((double *)this + 1);
          this = (Kernel *)((char *)this + 16);
        }
        else
        {
          long double result = result + a2->var1 * a2->var1;
          ++a2;
        }
      }
      if (a2->var0 != -1)
      {
        uint64_t v21 = a2 + 1;
        do
        {
          long double result = result + v21[-1].var1 * v21[-1].var1;
          int v22 = v21->var0;
          ++v21;
        }
        while (v22 != -1);
      }
      long double result = exp(-(*(double *)&a3[1].var0 * result));
      break;
    case 3:
      int v12 = *(_DWORD *)this;
      double v13 = 0.0;
      while (v12 != -1)
      {
        int v14 = a2->var0;
        if (a2->var0 == -1) {
          break;
        }
        if (v12 == v14)
        {
          double v13 = v13 + *((double *)this + 1) * a2->var1;
          this = (Kernel *)((char *)this + 16);
          ++a2;
        }
        else if (v12 > v14)
        {
          ++a2;
        }
        else
        {
          this = (Kernel *)((char *)this + 16);
        }
        int v12 = *(_DWORD *)this;
      }
      long double result = tanh(a3[1].var1 + *(double *)&a3[1].var0 * v13);
      break;
    case 4:
      long double result = *((double *)this + 2 * (int)a2->var1 + 1);
      break;
    default:
      return result;
  }
  return result;
}

void Solver::Solve(uint64_t a1, int a2, uint64_t a3)
{
  *(_DWORD *)(a1 + 112) = a2;
  *(void *)(a1 + 48) = a3;
  *(void *)(a1 + 56) = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 8))(a3);
  operator new[]();
}

char *svm_train(int *a1, long long *a2)
{
  uint64_t v4 = (char *)malloc_type_malloc(0xB8uLL, 0x109004003BC950CuLL);
  int v5 = v4;
  long long v6 = *a2;
  long long v7 = a2[2];
  *((_OWORD *)v4 + 1) = a2[1];
  *((_OWORD *)v4 + 2) = v7;
  *(_OWORD *)uint64_t v4 = v6;
  long long v8 = a2[3];
  long long v9 = a2[4];
  long long v10 = a2[5];
  *((void *)v4 + 12) = *((void *)a2 + 12);
  *((_OWORD *)v4 + 4) = v9;
  *((_OWORD *)v4 + 5) = v10;
  *((_OWORD *)v4 + 3) = v8;
  *((_DWORD *)v4 + 44) = 0;
  int v303 = a2;
  if ((*(_DWORD *)a2 - 2) <= 2)
  {
    *((void *)v4 + 17) = 0;
    double v11 = (void **)(v4 + 136);
    *((_DWORD *)v4 + 26) = 2;
    *((void *)v4 + 18) = 0;
    *((void *)v4 + 20) = 0;
    *((void *)v4 + 21) = 0;
    *((void *)v4 + 15) = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
    if (*((_DWORD *)a2 + 25) && (*(_DWORD *)a2 - 3) <= 1)
    {
      *double v11 = malloc_type_malloc(8uLL, 0x100004000313F17uLL);
      int v12 = (double *)malloc_type_malloc(8 * *a1, 0x100004000313F17uLL);
      uint64_t v332 = *((void *)a2 + 12);
      long long v13 = a2[4];
      long long v331 = a2[5];
      long long v14 = a2[1];
      long long v326 = *a2;
      long long v327 = v14;
      long long v15 = a2[2];
      long long v329 = a2[3];
      long long v330 = v13;
      long long v328 = v15;
      HIDWORD(v332) = 0;
      svm_cross_validation(a1, &v326, 5, v12);
      uint64_t v16 = *a1;
      if ((int)v16 < 1)
      {
        int v23 = 0;
        double v25 = 0.0;
      }
      else
      {
        double v17 = (double *)*((void *)a1 + 1);
        double v18 = 0.0;
        int v19 = v12;
        uint64_t v20 = *a1;
        do
        {
          double v21 = *v17++;
          double v22 = *v19;
          *int v19 = v21 - *v19;
          ++v19;
          double v18 = v18 + vabdd_f64(v21, v22);
          --v20;
        }
        while (v20);
        int v23 = 0;
        double v24 = sqrt(v18 / (double)(int)v16 * (v18 / (double)(int)v16 + v18 / (double)(int)v16)) * 5.0;
        double v25 = 0.0;
        double v26 = v12;
        uint64_t v27 = v16;
        do
        {
          double v28 = *v26++;
          double v29 = fabs(v28);
          BOOL v30 = v29 <= v24;
          if (v29 > v24) {
            double v29 = -0.0;
          }
          double v25 = v25 + v29;
          if (!v30) {
            ++v23;
          }
          --v27;
        }
        while (v27);
      }
      double v265 = v25 / (double)((int)v16 - v23);
      info("Prob. model for test data: target value = predicted value + z,\nz: Laplace distribution e^(-|z|/sigma)/(2sigma),sigma= %g\n", v265);
      free(v12);
      *(double *)*double v11 = v265;
    }
    unint64_t v236 = svm_train_one(a1, a2);
    uint64_t v267 = v266;
    uint64_t v268 = malloc_type_malloc(8uLL, 0x100004000313F17uLL);
    *((void *)v5 + 16) = v268;
    void *v268 = v267;
    uint64_t v269 = *a1;
    if ((int)v269 < 1)
    {
      unsigned int v270 = 0;
    }
    else
    {
      unsigned int v270 = 0;
      unint64_t v271 = (double *)v236;
      do
      {
        double v272 = *v271++;
        int v273 = v272 < 0.0;
        if (v272 > 0.0) {
          int v273 = 1;
        }
        v270 += v273;
        --v269;
      }
      while (v269);
    }
    *((_DWORD *)v5 + 27) = v270;
    *((void *)v5 + 14) = malloc_type_malloc(8 * v270, 0x2004093837F09uLL);
    **((void **)v5 + 15) = malloc_type_malloc(8 * v270, 0x100004000313F17uLL);
    *((void *)v5 + 19) = malloc_type_malloc(4 * v270, 0x100004052888210uLL);
    int v274 = *a1;
    if (*a1 >= 1)
    {
      uint64_t v275 = 0;
      int v276 = 0;
      do
      {
        double v277 = *(double *)&v236[8 * v275];
        if (v277 < 0.0 || v277 > 0.0)
        {
          *(void *)(*((void *)v5 + 14) + 8 * v276) = *(void *)(*((void *)a1 + 2) + 8 * v275);
          *(double *)(**((void **)v5 + 15) + 8 * v276) = v277;
          *(_DWORD *)(*((void *)v5 + 19) + 4 * v276++) = ++v275;
          int v274 = *a1;
        }
        else
        {
          ++v275;
        }
      }
      while (v275 < v274);
    }
    goto LABEL_232;
  }
  size_t v31 = *a1;
  size_t v32 = *a1;
  unsigned int v325 = 0;
  int v323 = 0;
  int v324 = 0;
  int v322 = 0;
  uint64_t v284 = (int *)malloc_type_malloc(4 * v31, 0x100004052888210uLL);
  svm_group_classes(a1, (int *)&v325, &v324, &v323, &v322, (uint64_t)v284);
  uint64_t v33 = v325;
  if (v325 == 1) {
    info("WARNING: training data in only one class. See README for details.\n");
  }
  uint64_t v34 = (int)v33;
  uint64_t v35 = malloc_type_malloc(8 * v31, 0x2004093837F09uLL);
  int v36 = v35;
  if ((int)v32 >= 1)
  {
    int v37 = v284;
    uint64_t v38 = v35;
    size_t v39 = v32;
    do
    {
      uint64_t v40 = *v37++;
      *v38++ = *(void *)(*((void *)a1 + 2) + 8 * v40);
      --v39;
    }
    while (v39);
  }
  size_t size = v31;
  size_t v283 = v32;
  int v41 = malloc_type_malloc(8 * (int)v33, 0x100004000313F17uLL);
  int v42 = v33 - 1;
  if ((int)v33 >= 1)
  {
    uint64_t v43 = v41;
    uint64_t v44 = v33;
    do
    {
      *v43++ = *((void *)a2 + 6);
      --v44;
    }
    while (v44);
  }
  unint64_t v291 = (double *)v41;
  int v45 = *((_DWORD *)a2 + 14);
  if (v45 >= 1)
  {
    uint64_t v46 = 0;
    char v47 = v324;
    unint64_t v48 = (FILE **)MEMORY[0x1E4F143C8];
    do
    {
      if ((int)v33 < 1)
      {
        LODWORD(v49) = 0;
      }
      else
      {
        uint64_t v49 = 0;
        int v50 = *(_DWORD *)(*((void *)v303 + 8) + 4 * v46);
        while (v50 != v47[v49])
        {
          if (v33 == ++v49)
          {
            BOOL v51 = v303;
            goto LABEL_32;
          }
        }
      }
      if (v49 == v33)
      {
        BOOL v51 = v303;
        int v50 = *(_DWORD *)(*((void *)v303 + 8) + 4 * v46);
LABEL_32:
        fprintf(*v48, "WARNING: class label %d specified in weight is not found\n", v50);
        int v45 = *((_DWORD *)v51 + 14);
      }
      else
      {
        v291[v49] = *(double *)(*((void *)v303 + 9) + 8 * v46) * v291[v49];
      }
      ++v46;
    }
    while (v46 < v45);
  }
  uint64_t v52 = (char *)malloc_type_malloc(size, 0x100004077774924uLL);
  BOOL v53 = v52;
  if ((int)v283 >= 1) {
    bzero(v52, v283);
  }
  unint64_t v295 = v53;
  unsigned int v280 = v33 - 1;
  int v285 = v42 * v33;
  uint64_t v54 = (uint64_t)(int)(v42 * v33 + (v42 * (int)v33 < 0)) >> 1;
  int v55 = malloc_type_malloc(16 * (v42 * (int)v33 / 2), 0x1080040FC6463CFuLL);
  unsigned int v281 = v54;
  size_t v56 = 8 * v54;
  size_t v279 = v56;
  if (*((_DWORD *)v303 + 25))
  {
    uint64_t v57 = (double *)malloc_type_malloc(v56, 0x100004000313F17uLL);
    unsigned int v306 = (double *)malloc_type_malloc(v56, 0x100004000313F17uLL);
  }
  else
  {
    uint64_t v57 = 0;
    unsigned int v306 = 0;
  }
  uint64_t v58 = v291;
  BOOL v290 = v36;
  int v307 = v57;
  if ((int)v33 < 1) {
    goto LABEL_162;
  }
  uint64_t v59 = 0;
  LODWORD(v305) = 0;
  uint64_t v292 = v322;
  unint64_t v293 = v323;
  double v60 = -1.0;
  uint64_t v61 = 1;
  uint64_t v286 = (int)v33;
  unint64_t v287 = v5;
  uint64_t v294 = v33;
  unint64_t v296 = v55;
  do
  {
    uint64_t v62 = v59 + 1;
    if (v59 + 1 >= v34) {
      goto LABEL_161;
    }
    uint64_t v288 = v59 + 1;
    uint64_t v289 = v61;
    uint64_t v305 = (int)v305;
    uint64_t v63 = v61;
    int v64 = v303;
    uint64_t v297 = v59;
    do
    {
      uint64_t v299 = v293[v59];
      uint64_t v300 = v293[v63];
      uint64_t v65 = v292->i32[v59];
      uint64_t v304 = v65;
      uint64_t v302 = v63;
      uint64_t v66 = v292->u32[v63];
      int v67 = v66 + v65;
      int v319 = v66 + v65;
      uint64_t v68 = malloc_type_malloc(8 * ((int)v66 + (int)v65), 0x2004093837F09uLL);
      int v321 = v68;
      uint64_t v311 = 8 * ((int)v66 + (int)v65);
      uint64_t v69 = (double *)malloc_type_malloc(v311, 0x100004000313F17uLL);
      uint64_t v70 = v69;
      unsigned int v320 = v69;
      if ((int)v65 >= 1)
      {
        uint64_t v71 = v68;
        int v72 = v69;
        uint64_t v73 = v65;
        int v74 = &v36[v299];
        do
        {
          uint64_t v75 = *v74++;
          *v71++ = v75;
          *v72++ = 1.0;
          --v73;
        }
        while (v73);
      }
      uint64_t v301 = v66;
      uint64_t v298 = (int)v66;
      BOOL v30 = (int)v66 < 1;
      uint64_t v76 = v305;
      if (!v30)
      {
        int v77 = (char *)&v69[v65];
        uint64_t v78 = &v68[v65];
        uint64_t v79 = v301;
        uint64_t v80 = &v36[v300];
        do
        {
          uint64_t v81 = *v80++;
          *v78++ = v81;
          *(void *)int v77 = 0xBFF0000000000000;
          v77 += 8;
          --v79;
        }
        while (v79);
      }
      if (!v64[25]) {
        goto LABEL_147;
      }
      uint64_t v82 = v67;
      double v83 = v58[v297];
      double v84 = v58[v302];
      unint64_t v85 = (int *)malloc_type_malloc(4 * v67, 0x100004052888210uLL);
      uint64_t v86 = (double *)malloc_type_malloc(v311, 0x100004000313F17uLL);
      if ((int)v82 >= 1)
      {
        for (uint64_t i = 0; i != v82; ++i)
          v85[i] = i;
        uint64_t v88 = 0;
        uint64_t v89 = v82;
        do
        {
          int v90 = v88 + rand() % (int)v89;
          int v91 = v85[v88];
          v85[v88] = v85[v90];
          v85[v90] = v91;
          ++v88;
          --v89;
        }
        while (v89);
      }
      int v308 = v85;
      int v92 = 0;
      uint64_t v317 = v298 + v65;
      do
      {
        int v93 = v82 * v92;
        int v94 = (int)v82 * v92++ / 5;
        int v95 = (int)v82 * v92 / 5;
        int v333 = v94 - v95 + v82;
        size_t v96 = 8 * v333;
        unint64_t v97 = malloc_type_malloc(v96, 0x2004093837F09uLL);
        unsigned int v335 = v97;
        unint64_t v98 = malloc_type_malloc(v96, 0x100004000313F17uLL);
        unint64_t v99 = v98;
        int v334 = v98;
        if (v93 < 5)
        {
          LODWORD(v105) = 0;
        }
        else
        {
          uint64_t v100 = v308;
          uint64_t v101 = v97;
          uint64_t v102 = v98;
          uint64_t v103 = (v93 / 5);
          do
          {
            uint64_t v104 = *v100++;
            *v101++ = v68[v104];
            *v102++ = *(void *)&v70[v104];
            --v103;
          }
          while (v103);
          LODWORD(v105) = v93 / 5;
        }
        if (v95 < (int)v82)
        {
          uint64_t v105 = v105;
          uint64_t v106 = v317 - v95;
          unint64_t v107 = &v308[v95];
          do
          {
            uint64_t v108 = *v107++;
            v97[v105] = v68[v108];
            *((double *)v98 + v105++) = v70[v108];
            --v106;
          }
          while (v106);
        }
        if (v105)
        {
          int v109 = 0;
          int v110 = 0;
          uint64_t v111 = (double *)v98;
          uint64_t v105 = v105;
          do
          {
            double v112 = *v111++;
            if (v112 <= 0.0) {
              ++v109;
            }
            else {
              ++v110;
            }
            --v105;
          }
          while (v105);
        }
        else
        {
          int v110 = 0;
          int v109 = 0;
        }
        if (v110 | v109)
        {
          if (v110) {
            BOOL v116 = v109 == 0;
          }
          else {
            BOOL v116 = 0;
          }
          if (v116)
          {
            if (v94 < v95)
            {
              uint64_t v129 = v95 - (uint64_t)v94;
              uint64_t v130 = &v308[v94];
              do
              {
                uint64_t v131 = *v130++;
                v86[v131] = 1.0;
                --v129;
              }
              while (v129);
            }
          }
          else
          {
            if (v110) {
              BOOL v117 = 1;
            }
            else {
              BOOL v117 = v109 == 0;
            }
            if (v117)
            {
              uint64_t v332 = *((void *)v303 + 12);
              long long v118 = v303[4];
              long long v331 = v303[5];
              long long v119 = v303[1];
              long long v326 = *v303;
              long long v327 = v119;
              long long v120 = v303[2];
              HIDWORD(v329) = HIDWORD(v303[3]);
              long long v330 = v118;
              long long v328 = v120;
              HIDWORD(v332) = 0;
              *(void *)&long long v329 = 0x3FF0000000000000;
              DWORD2(v329) = 2;
              uint64_t v121 = malloc_type_malloc(8uLL, 0x100004052888210uLL);
              *(void *)&long long v330 = v121;
              unint64_t v122 = (double *)malloc_type_malloc(0x10uLL, 0x100004000313F17uLL);
              *((void *)&v330 + 1) = v122;
              unsigned int v313 = v122;
              unsigned int v315 = v121;
              void *v121 = 0xFFFFFFFF00000001;
              double *v122 = v83;
              v122[1] = v84;
              uint64_t v123 = svm_train(&v333, &v326);
              uint64_t v125 = v123;
              if (v94 >= v95)
              {
                if (v123) {
                  goto LABEL_100;
                }
              }
              else
              {
                uint64_t v126 = v95 - (uint64_t)v94;
                unint64_t v127 = &v308[v94];
                do
                {
                  svm_predict_values((svm_node *)v125, (Kernel *)v68[*v127], &v86[*v127], v124);
                  uint64_t v128 = *v127++;
                  v86[v128] = v86[v128] * (double)**(int **)(v125 + 160);
                  --v126;
                }
                while (v126);
LABEL_100:
                svm_free_model_content(v125);
                free((void *)v125);
              }
              free(v315);
              free(v313);
              goto LABEL_102;
            }
            if (v94 < v95)
            {
              uint64_t v132 = v95 - (uint64_t)v94;
              unint64_t v133 = &v308[v94];
              do
              {
                uint64_t v134 = *v133++;
                v86[v134] = -1.0;
                --v132;
              }
              while (v132);
            }
          }
        }
        else if (v94 < v95)
        {
          uint64_t v113 = v95 - (uint64_t)v94;
          char v114 = &v308[v94];
          do
          {
            uint64_t v115 = *v114++;
            v86[v115] = 0.0;
            --v113;
          }
          while (v113);
        }
LABEL_102:
        free(v97);
        free(v99);
      }
      while (v92 != 5);
      double v135 = 0.0;
      double v136 = 0.0;
      double v137 = 0.0;
      if ((int)v82 >= 1)
      {
        unint64_t v138 = v70;
        uint64_t v139 = v82;
        do
        {
          double v140 = *v138++;
          if (v140 <= 0.0) {
            double v137 = v137 + 1.0;
          }
          else {
            double v136 = v136 + 1.0;
          }
          --v139;
        }
        while (v139);
      }
      unint64_t v141 = (double *)malloc_type_malloc(v311, 0x100004000313F17uLL);
      v307[v305] = 0.0;
      double v142 = log((v137 + 1.0) / (v136 + 1.0));
      v306[v305] = v142;
      if ((int)v82 < 1)
      {
        double v152 = v142;
      }
      else
      {
        double v143 = (v136 + 1.0) / (v136 + 2.0);
        double v135 = 0.0;
        uint64_t v144 = v70;
        unint64_t v145 = v141;
        unint64_t v146 = v86;
        uint64_t v147 = v82;
        double v148 = 1.0 / (v137 + 2.0);
        do
        {
          double v149 = *v144++;
          if (v149 <= 0.0) {
            double v150 = v148;
          }
          else {
            double v150 = v143;
          }
          *v145++ = v150;
          double v151 = *v146++;
          double v152 = v306[v305];
          double v153 = v152 + v151 * v307[v305];
          double v154 = -v153;
          if (v153 >= 0.0)
          {
            double v155 = v150;
          }
          else
          {
            double v154 = v153;
            double v155 = v150 + v60;
          }
          long double v156 = exp(v154);
          double v135 = v135 + log(v156 + 1.0) + v155 * v153;
          --v147;
        }
        while (v147);
      }
      int v157 = 0;
      uint64_t v57 = v307;
      uint64_t v76 = v305;
      double v158 = 1.0;
      double v159 = v152;
      while (1)
      {
        double v316 = v135;
        double v318 = v159;
        if ((int)v82 < 1)
        {
          double v166 = 0.0;
          double v168 = 1.0e-12;
          double v167 = 1.0e-12;
          double v165 = 0.0;
          double v161 = 0.0;
        }
        else
        {
          double v160 = v57[v76];
          double v161 = 0.0;
          unint64_t v162 = v86;
          unint64_t v163 = v141;
          uint64_t v164 = v82;
          double v165 = 0.0;
          double v166 = 0.0;
          double v167 = 1.0e-12;
          double v168 = 1.0e-12;
          do
          {
            double v169 = *v162;
            double v170 = v159 + *v162 * v160;
            if (v170 >= 0.0)
            {
              long double v174 = exp(-v170);
              double v159 = v318;
              double v172 = v174 / (v174 + v158);
              double v173 = v158 / (v174 + v158);
            }
            else
            {
              long double v171 = exp(v170);
              double v159 = v318;
              double v172 = v158 / (v171 + v158);
              double v173 = v171 / (v171 + v158);
            }
            double v175 = v172 * v173;
            double v167 = v167 + v169 * v169 * v175;
            double v168 = v168 + v175;
            double v176 = *v163++;
            double v166 = v166 + v169 * v175;
            double v165 = v165 + v169 * (v176 - v172);
            double v161 = v161 + v176 - v172;
            ++v162;
            --v164;
          }
          while (v164);
        }
        uint64_t v57 = v307;
        uint64_t v76 = v305;
        if (fabs(v165) < 0.00001 && fabs(v161) < 0.00001) {
          break;
        }
        double v177 = v167 * v168 - v166 * v166;
        double v312 = -(v167 * v161 + -v166 * v165) / v177;
        double v314 = -(v168 * v165 - v166 * v161) / v177;
        double v309 = v307[v305];
        double v310 = v161 * v312 + v165 * v314;
        double v178 = 1.0;
        while (1)
        {
          double v179 = v309 + v178 * v314;
          double v180 = v159 + v178 * v312;
          double v181 = 0.0;
          if ((int)v82 >= 1)
          {
            unint64_t v182 = v86;
            unint64_t v183 = v141;
            uint64_t v184 = v82;
            do
            {
              double v185 = *v182++;
              double v186 = v185;
              double v187 = *v183++;
              double v188 = v187;
              double v189 = v180 + v186 * v179;
              double v190 = -v189;
              double v191 = v187 + -1.0;
              if (v189 >= 0.0)
              {
                double v192 = v188;
              }
              else
              {
                double v190 = v189;
                double v192 = v191;
              }
              long double v193 = exp(v190);
              double v181 = v181 + log(v193 + 1.0) + v192 * v189;
              --v184;
            }
            while (v184);
          }
          if (v181 < v316 + v178 * 0.0001 * v310) {
            break;
          }
          double v178 = v178 * 0.5;
          double v159 = v318;
          if (v178 < 1.0e-10)
          {
            uint64_t v57 = v307;
            uint64_t v76 = v305;
            double v158 = 1.0;
            double v135 = v316;
            goto LABEL_142;
          }
        }
        uint64_t v57 = v307;
        uint64_t v76 = v305;
        v307[v305] = v179;
        v306[v305] = v180;
        double v159 = v180;
        double v135 = v181;
        double v158 = 1.0;
LABEL_142:
        if (v178 < 1.0e-10)
        {
          info("Line search fails in two-class probability estimates\n");
          break;
        }
        if (++v157 == 100)
        {
          info("Reaching maximal iterations in two-class probability estimates\n");
          break;
        }
      }
      free(v141);
      free(v86);
      free(v308);
      int v36 = v290;
      uint64_t v58 = v291;
      int v64 = v303;
      double v60 = -1.0;
LABEL_147:
      uint64_t v59 = v297;
      unint64_t v194 = svm_train_one(&v319, v64);
      unint64_t v195 = (char **)&v296[2 * v76];
      *unint64_t v195 = v194;
      v195[1] = v196;
      if ((int)v304 >= 1)
      {
        unint64_t v197 = &v295[v299];
        unint64_t v198 = (double *)v194;
        uint64_t v199 = v304;
        do
        {
          if (!*v197 && *v198 != 0.0) {
            *unint64_t v197 = 1;
          }
          ++v198;
          ++v197;
          --v199;
        }
        while (v199);
      }
      if ((int)v301 >= 1)
      {
        uint64_t v200 = v298;
        unint64_t v201 = (double *)&v194[8 * (int)v304];
        unint64_t v202 = &v295[v300];
        do
        {
          if (!*v202 && *v201 != 0.0) {
            *unint64_t v202 = 1;
          }
          ++v201;
          ++v202;
          --v200;
        }
        while (v200);
      }
      free(v68);
      free(v70);
      uint64_t v305 = v76 + 1;
      uint64_t v63 = v302 + 1;
      uint64_t v33 = v294;
    }
    while (v302 + 1 != v294);
    uint64_t v34 = v286;
    int v5 = v287;
    int v55 = v296;
    uint64_t v62 = v288;
    uint64_t v61 = v289;
LABEL_161:
    ++v61;
    uint64_t v59 = v62;
  }
  while (v62 != v33);
LABEL_162:
  *((_DWORD *)v5 + 26) = v33;
  unint64_t v203 = malloc_type_malloc(4 * v34, 0x100004052888210uLL);
  *((void *)v5 + 20) = v203;
  if ((int)v33 >= 1)
  {
    unint64_t v204 = (int *)v324;
    uint64_t v205 = v33;
    do
    {
      int v206 = *v204++;
      *v203++ = v206;
      --v205;
    }
    while (v205);
  }
  unint64_t v207 = malloc_type_malloc(v279, 0x100004000313F17uLL);
  *((void *)v5 + 16) = v207;
  if (v285 > 1)
  {
    uint64_t v208 = v281;
    unint64_t v209 = v55 + 1;
    do
    {
      uint64_t v210 = *v209;
      v209 += 2;
      *v207++ = v210;
      --v208;
    }
    while (v208);
  }
  if (*((_DWORD *)v303 + 25))
  {
    *((void *)v5 + 17) = malloc_type_malloc(v279, 0x100004000313F17uLL);
    unint64_t v211 = malloc_type_malloc(v279, 0x100004000313F17uLL);
    *((void *)v5 + 18) = v211;
    if (v285 > 1)
    {
      unint64_t v212 = (void *)*((void *)v5 + 17);
      uint64_t v213 = v281;
      unint64_t v214 = v57;
      unint64_t v215 = v306;
      do
      {
        uint64_t v216 = *(void *)v214++;
        *v212++ = v216;
        uint64_t v217 = *(void *)v215++;
        *v211++ = v217;
        --v213;
      }
      while (v213);
    }
  }
  else
  {
    *((void *)v5 + 17) = 0;
    *((void *)v5 + 18) = 0;
  }
  uint64_t v218 = (int *)malloc_type_malloc(4 * v34, 0x100004052888210uLL);
  unint64_t v219 = malloc_type_malloc(4 * v34, 0x100004052888210uLL);
  *((void *)v5 + 21) = v219;
  if ((int)v33 < 1)
  {
    int v221 = 0;
  }
  else
  {
    uint64_t v220 = 0;
    int v221 = 0;
    unint64_t v222 = v322;
    uint64_t v223 = v323;
    do
    {
      uint64_t v224 = v222->u32[v220];
      if ((int)v224 < 1)
      {
        int v225 = 0;
      }
      else
      {
        int v225 = 0;
        unint64_t v226 = &v295[v223[v220]];
        do
        {
          int v227 = *v226++;
          v221 += v227;
          v225 += v227;
          --v224;
        }
        while (v224);
      }
      v219[v220] = v225;
      v218[v220++] = v225;
    }
    while (v220 != v33);
  }
  info("Total nSV = %d\n", v221);
  *((_DWORD *)v5 + 27) = v221;
  size_t v228 = 8 * v221;
  *((void *)v5 + 14) = malloc_type_malloc(v228, 0x2004093837F09uLL);
  unint64_t v229 = malloc_type_malloc(4 * v221, 0x100004052888210uLL);
  unint64_t v230 = (unsigned __int8 *)v295;
  *((void *)v5 + 19) = v229;
  if ((int)v283 >= 1)
  {
    int v231 = 0;
    uint64_t v232 = size;
    uint64_t v233 = v284;
    do
    {
      if (*v230++)
      {
        *(void *)(*((void *)v5 + 14) + 8 * v231) = *v36;
        *(_DWORD *)(*((void *)v5 + 19) + 4 * v231++) = *v233 + 1;
      }
      ++v233;
      ++v36;
      --v232;
    }
    while (v232);
  }
  uint64_t v235 = malloc_type_malloc(4 * v34, 0x100004052888210uLL);
  unint64_t v236 = (char *)v235;
  *uint64_t v235 = 0;
  if ((int)v33 <= 1)
  {
    *((void *)v5 + 15) = malloc_type_malloc(8 * (int)v280, 0x80040B8603338uLL);
    unint64_t v243 = v5 + 120;
  }
  else
  {
    int v237 = 0;
    uint64_t v238 = v33 - 1;
    unint64_t v239 = v235 + 1;
    unint64_t v240 = v218;
    do
    {
      int v241 = *v240++;
      v237 += v241;
      *v239++ = v237;
      --v238;
    }
    while (v238);
    uint64_t v242 = 0;
    *((void *)v5 + 15) = malloc_type_malloc(8 * (int)v280, 0x80040B8603338uLL);
    unint64_t v243 = v5 + 120;
    do
    {
      *(void *)(*v243 + v242) = malloc_type_malloc(v228, 0x100004000313F17uLL);
      v242 += 8;
    }
    while (8 * v280 != v242);
    uint64_t v57 = v307;
  }
  unint64_t v245 = v322;
  unint64_t v244 = v323;
  if ((int)v33 >= 1)
  {
    uint64_t v246 = 0;
    LODWORD(v247) = 0;
    uint64_t v248 = 1;
    do
    {
      uint64_t v249 = v246 + 1;
      if (v246 + 1 < v34)
      {
        uint64_t v250 = v245->u32[v246];
        int v251 = *(_DWORD *)&v236[4 * v246];
        uint64_t v247 = (int)v247;
        unint64_t v252 = &v295[v244[v246]];
        uint64_t v253 = v248;
        do
        {
          uint64_t v254 = v244[v253];
          uint64_t v255 = v245->u32[v253];
          if ((int)v250 >= 1)
          {
            uint64_t v256 = 0;
            int v257 = v251;
            do
            {
              if (v252[v256]) {
                *(void *)(*(void *)(*v243 + 8 * (v253 - 1)) + 8 * v257++) = *(void *)(v55[2 * v247] + 8 * v256);
              }
              ++v256;
            }
            while (v250 != v256);
          }
          if ((int)v255 >= 1)
          {
            int v258 = *(_DWORD *)&v236[4 * v253];
            unint64_t v259 = &v295[v254];
            uint64_t v260 = 8 * (int)v250;
            do
            {
              if (*v259++) {
                *(void *)(*(void *)(*v243 + 8 * v246) + 8 * v258++) = *(void *)(v55[2 * v247] + v260);
              }
              v260 += 8;
              --v255;
            }
            while (v255);
          }
          ++v247;
          ++v253;
        }
        while (v253 != v33);
      }
      ++v248;
      ++v246;
    }
    while (v249 != v33);
  }
  free(v324);
  free(v57);
  free(v306);
  free(v245);
  free(v284);
  free(v244);
  free(v290);
  free(v291);
  free(v295);
  if (v285 > 1)
  {
    uint64_t v262 = v281;
    long long v263 = (void **)v55;
    do
    {
      uint64_t v264 = *v263;
      v263 += 2;
      free(v264);
      --v262;
    }
    while (v262);
  }
  free(v55);
  free(v218);
LABEL_232:
  free(v236);
  return v5;
}