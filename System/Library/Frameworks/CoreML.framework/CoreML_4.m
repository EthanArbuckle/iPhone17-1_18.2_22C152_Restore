void sub_19EA06498(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t MLE5CopySurfaceToPixelBuffer(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  v6 = a2;
  v7 = (__CVBuffer *)MLE5CopyPixelBufferOwningSurfaceOfPort(a1, (void *)a4);
  VTPixelTransferSessionRef pixelTransferSessionOut = 0;
  v19 = v7;
  uint64_t v8 = VTPixelTransferSessionCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], &pixelTransferSessionOut);
  if (v8)
  {
    v9 = +[MLLogging coreChannel];
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      int v25 = v8;
      _os_log_error_impl(&dword_19E58B000, v9, OS_LOG_TYPE_ERROR, "Failed to create a pixel buffer transfer engine. (VideoToolbox error: %d.)", buf, 8u);
    }

    if (a4)
    {
      v10 = (void *)MEMORY[0x1E4F28C58];
      uint64_t v22 = *MEMORY[0x1E4F28568];
      v11 = objc_msgSend(NSString, "stringWithFormat:", @"Failed to create a pixel buffer transfer engine. (VideoToolbox error: %d.)", v8);
      v23 = v11;
      v12 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v23 forKeys:&v22 count:1];
      v13 = [v10 errorWithDomain:@"com.apple.CoreML" code:0 userInfo:v12];
LABEL_11:
      *(void *)a4 = v13;

      a4 = 0;
    }
  }
  else
  {
    uint64_t v14 = VTPixelTransferSessionTransferImage(pixelTransferSessionOut, v7, v6);
    if (!v14)
    {
      CFRelease(pixelTransferSessionOut);
      a4 = 1;
      goto LABEL_13;
    }
    CFRelease(pixelTransferSessionOut);
    v15 = +[MLLogging coreChannel];
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      int v25 = v14;
      _os_log_error_impl(&dword_19E58B000, v15, OS_LOG_TYPE_ERROR, "Failed to transfer pixel buffer with err: %d", buf, 8u);
    }

    if (a4)
    {
      v16 = (void *)MEMORY[0x1E4F28C58];
      uint64_t v20 = *MEMORY[0x1E4F28568];
      v11 = objc_msgSend(NSString, "stringWithFormat:", @"Failed to transfer pixel buffer with err: %d", v14);
      v21 = v11;
      v12 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v21 forKeys:&v20 count:1];
      v13 = [v16 errorWithDomain:@"com.apple.CoreML" code:0 userInfo:v12];
      goto LABEL_11;
    }
  }
LABEL_13:
  std::unique_ptr<__CVBuffer,MLE5ObjectDeleter<__CVBuffer>>::reset[abi:ne180100](&v19);

  return a4;
}

void sub_19EA06750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);

  std::unique_ptr<__CVBuffer,MLE5ObjectDeleter<__CVBuffer>>::reset[abi:ne180100]((__CVBuffer **)va);
  _Unwind_Resume(a1);
}

uint64_t MLE5CopyTensorToMultiArray(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v6 = a2;
  v7 = +[MLMultiArray multiArrayOwningBufferObjectOfPort:a1 error:a4];
  uint64_t v8 = v7;
  if (v7) {
    uint64_t v9 = [v7 copyIntoMultiArray:v6 error:a4];
  }
  else {
    uint64_t v9 = 0;
  }

  return v9;
}

void sub_19EA0682C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL MLE5CopyTensorToPixelBuffer(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  id v6 = a2;
  id v7 = a3;
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(v6);
  uint64_t v9 = [v7 imageConstraint];
  uint64_t v10 = [v9 pixelType];

  MLE5TensorDescriptorOf((e5rt_io_port *)&v44);
  MLE5PixelBufferAndTensorStrategyKey::MLE5PixelBufferAndTensorStrategyKey((uint64_t)&v41, PixelFormatType, v10);
  {
    copyTensorToPixelBufferFunctionTable(void)::table = 0u;
    *(_OWORD *)&qword_1E946A438 = 0u;
    dword_1E946A448 = 1065353216;
  }
  if (copyTensorToPixelBufferFunctionTable(void)::onceToken != -1) {
    dispatch_once(&copyTensorToPixelBufferFunctionTable(void)::onceToken, &__block_literal_global_66);
  }
  if (!*((void *)&copyTensorToPixelBufferFunctionTable(void)::table + 1)) {
    goto LABEL_22;
  }
  unint64_t v11 = v42 ^ v41 ^ v43;
  uint8x8_t v12 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&copyTensorToPixelBufferFunctionTable(void)::table + 8));
  v12.i16[0] = vaddlv_u8(v12);
  if (v12.u32[0] > 1uLL)
  {
    unint64_t v13 = v42 ^ v41 ^ v43;
    if (v11 >= *((void *)&copyTensorToPixelBufferFunctionTable(void)::table + 1)) {
      unint64_t v13 = v11 % *((void *)&copyTensorToPixelBufferFunctionTable(void)::table + 1);
    }
  }
  else
  {
    unint64_t v13 = v11 & (*((void *)&copyTensorToPixelBufferFunctionTable(void)::table + 1) - 1);
  }
  uint64_t v14 = *(uint64_t ***)(copyTensorToPixelBufferFunctionTable(void)::table + 8 * v13);
  if (!v14) {
    goto LABEL_22;
  }
  v15 = *v14;
  if (!v15) {
    goto LABEL_22;
  }
  while (1)
  {
    unint64_t v16 = v15[1];
    if (v11 == v16) {
      break;
    }
    if (v12.u32[0] > 1uLL)
    {
      if (v16 >= *((void *)&copyTensorToPixelBufferFunctionTable(void)::table + 1)) {
        v16 %= *((void *)&copyTensorToPixelBufferFunctionTable(void)::table + 1);
      }
    }
    else
    {
      v16 &= *((void *)&copyTensorToPixelBufferFunctionTable(void)::table + 1) - 1;
    }
    if (v16 != v13) {
      goto LABEL_22;
    }
LABEL_21:
    v15 = (uint64_t *)*v15;
    if (!v15) {
      goto LABEL_22;
    }
  }
  if (*((_DWORD *)v15 + 8) != v43 || v15[3] != v42 || *((_DWORD *)v15 + 4) != v41) {
    goto LABEL_21;
  }
  uint64_t v26 = (void (*)(uint64_t, uint64_t, uint64_t, void *, size_t, size_t, size_t))v15[5];
  if (v26)
  {
    MLE5BufferObjectBoundTo((e5rt_io_port *)__p);
    uint64_t StridesFromTensorDescriptor = MLE5GetStridesFromTensorDescriptor();
    uint64_t RankFromTensorDescriptor = MLE5GetRankFromTensorDescriptor();
    uint64_t v29 = MLE5DataPointerOfBufferObject();
    uint64_t v30 = CVPixelBufferLockBaseAddress(v6, 0);
    BOOL v23 = v30 == 0;
    if (v30)
    {
      v31 = +[MLLogging coreChannel];
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        LODWORD(v50) = v30;
        _os_log_error_impl(&dword_19E58B000, v31, OS_LOG_TYPE_ERROR, "Failed to lock the source pixel buffer. (CVReturn: %d).", buf, 8u);
      }

      if (a4)
      {
        v32 = (void *)MEMORY[0x1E4F28C58];
        uint64_t v45 = *MEMORY[0x1E4F28568];
        v33 = objc_msgSend(NSString, "stringWithFormat:", @"Failed to lock the source pixel buffer. (CVReturn: %d).", v30);
        v46 = v33;
        v34 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v46 forKeys:&v45 count:1];
        *a4 = [v32 errorWithDomain:@"com.apple.CoreML" code:0 userInfo:v34];
      }
    }
    else
    {
      BaseAddress = CVPixelBufferGetBaseAddress(v6);
      size_t Width = CVPixelBufferGetWidth(v6);
      size_t Height = CVPixelBufferGetHeight(v6);
      size_t BytesPerRow = CVPixelBufferGetBytesPerRow(v6);
      v26(v29, StridesFromTensorDescriptor, RankFromTensorDescriptor, BaseAddress, Width, Height, BytesPerRow);
      CVPixelBufferUnlockBaseAddress(v6, 0);
    }
    std::unique_ptr<e5rt_buffer_object,MLE5ObjectDeleter<e5rt_buffer_object>>::reset[abi:ne180100]((uint64_t *)__p, 0);
    goto LABEL_30;
  }
LABEL_22:
  v17 = +[MLLogging coreChannel];
  if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
  {
    MLE5PixelBufferAndTensorStrategyKey::str((MLE5PixelBufferAndTensorStrategyKey *)__p, &v41);
    int v25 = v40 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    v50 = v25;
    _os_log_error_impl(&dword_19E58B000, v17, OS_LOG_TYPE_ERROR, "Copy from tensor to pixel buffer (%s) is not supported.", buf, 0xCu);
    if (v40 < 0) {
      operator delete(__p[0]);
    }
  }

  if (a4)
  {
    v18 = (void *)MEMORY[0x1E4F28C58];
    uint64_t v47 = *MEMORY[0x1E4F28568];
    v19 = NSString;
    MLE5PixelBufferAndTensorStrategyKey::str((MLE5PixelBufferAndTensorStrategyKey *)__p, &v41);
    uint64_t v20 = v40 >= 0 ? __p : (void **)__p[0];
    v21 = objc_msgSend(v19, "stringWithFormat:", @"Copy from tensor to pixel buffer (%s) is not supported.", v20);
    v48 = v21;
    uint64_t v22 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v48 forKeys:&v47 count:1];
    *a4 = [v18 errorWithDomain:@"com.apple.CoreML" code:1 userInfo:v22];

    if (v40 < 0) {
      operator delete(__p[0]);
    }
  }
  BOOL v23 = 0;
LABEL_30:
  std::unique_ptr<e5rt_tensor_desc,MLE5ObjectDeleter<e5rt_tensor_desc>>::reset[abi:ne180100](&v44);

  return v23;
}

void sub_19EA06D78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  std::unique_ptr<e5rt_buffer_object,MLE5ObjectDeleter<e5rt_buffer_object>>::reset[abi:ne180100]((uint64_t *)&__p, 0);
  std::unique_ptr<e5rt_tensor_desc,MLE5ObjectDeleter<e5rt_tensor_desc>>::reset[abi:ne180100](&a19);

  _Unwind_Resume(a1);
}

void *___ZL36copyTensorToPixelBufferFunctionTablev_block_invoke()
{
  int v3 = 1111970369;
  uint64_t v2 = 30;
  int v1 = 52;
  std::__hash_table<std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,long const*,unsigned long,void *,unsigned long,unsigned long,unsigned long)>,std::__unordered_map_hasher<MLE5PixelBufferAndTensorStrategyKey,std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,long const*,unsigned long,void *,unsigned long,unsigned long,unsigned long)>,MLE5PixelBufferAndTensorStrategyKey::hash,std::equal_to<MLE5PixelBufferAndTensorStrategyKey>,true>,std::__unordered_map_equal<MLE5PixelBufferAndTensorStrategyKey,std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,long const*,unsigned long,void *,unsigned long,unsigned long,unsigned long)>,std::equal_to<MLE5PixelBufferAndTensorStrategyKey>,MLE5PixelBufferAndTensorStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,long const*,unsigned long,void *,unsigned long,unsigned long,unsigned long)>>>::__emplace_unique_key_args<MLE5PixelBufferAndTensorStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PixelBufferAndTensorStrategyKey&&>,std::tuple<>>(&v1, (uint64_t)&v1)[5] = MLE5CopyBGRTensor_CompDtypeFLOAT_CompPackFmt32_32BGRA;
  int v3 = 1111970369;
  uint64_t v2 = 20;
  int v1 = 52;
  std::__hash_table<std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,long const*,unsigned long,void *,unsigned long,unsigned long,unsigned long)>,std::__unordered_map_hasher<MLE5PixelBufferAndTensorStrategyKey,std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,long const*,unsigned long,void *,unsigned long,unsigned long,unsigned long)>,MLE5PixelBufferAndTensorStrategyKey::hash,std::equal_to<MLE5PixelBufferAndTensorStrategyKey>,true>,std::__unordered_map_equal<MLE5PixelBufferAndTensorStrategyKey,std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,long const*,unsigned long,void *,unsigned long,unsigned long,unsigned long)>,std::equal_to<MLE5PixelBufferAndTensorStrategyKey>,MLE5PixelBufferAndTensorStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,long const*,unsigned long,void *,unsigned long,unsigned long,unsigned long)>>>::__emplace_unique_key_args<MLE5PixelBufferAndTensorStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PixelBufferAndTensorStrategyKey&&>,std::tuple<>>(&v1, (uint64_t)&v1)[5] = MLE5CopyRGBTensor_CompDtypeFLOAT_CompPackFmt32_32BGRA;
  int v3 = 1278226488;
  uint64_t v2 = 10;
  int v1 = 52;
  std::__hash_table<std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,long const*,unsigned long,void *,unsigned long,unsigned long,unsigned long)>,std::__unordered_map_hasher<MLE5PixelBufferAndTensorStrategyKey,std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,long const*,unsigned long,void *,unsigned long,unsigned long,unsigned long)>,MLE5PixelBufferAndTensorStrategyKey::hash,std::equal_to<MLE5PixelBufferAndTensorStrategyKey>,true>,std::__unordered_map_equal<MLE5PixelBufferAndTensorStrategyKey,std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,long const*,unsigned long,void *,unsigned long,unsigned long,unsigned long)>,std::equal_to<MLE5PixelBufferAndTensorStrategyKey>,MLE5PixelBufferAndTensorStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,long const*,unsigned long,void *,unsigned long,unsigned long,unsigned long)>>>::__emplace_unique_key_args<MLE5PixelBufferAndTensorStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PixelBufferAndTensorStrategyKey&&>,std::tuple<>>(&v1, (uint64_t)&v1)[5] = MLE5CopyGrayTensor_CompDtypeFLOAT_CompPackFmt32_OneComponent8;
  int v3 = 1278226536;
  uint64_t v2 = 40;
  int v1 = 52;
  std::__hash_table<std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,long const*,unsigned long,void *,unsigned long,unsigned long,unsigned long)>,std::__unordered_map_hasher<MLE5PixelBufferAndTensorStrategyKey,std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,long const*,unsigned long,void *,unsigned long,unsigned long,unsigned long)>,MLE5PixelBufferAndTensorStrategyKey::hash,std::equal_to<MLE5PixelBufferAndTensorStrategyKey>,true>,std::__unordered_map_equal<MLE5PixelBufferAndTensorStrategyKey,std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,long const*,unsigned long,void *,unsigned long,unsigned long,unsigned long)>,std::equal_to<MLE5PixelBufferAndTensorStrategyKey>,MLE5PixelBufferAndTensorStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,long const*,unsigned long,void *,unsigned long,unsigned long,unsigned long)>>>::__emplace_unique_key_args<MLE5PixelBufferAndTensorStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PixelBufferAndTensorStrategyKey&&>,std::tuple<>>(&v1, (uint64_t)&v1)[5] = MLE5CopyGrayTensor_CompDtypeFLOAT_CompPackFmt32_OneComponent16Half;
  int v3 = 1111970369;
  uint64_t v2 = 30;
  int v1 = 28;
  std::__hash_table<std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,long const*,unsigned long,void *,unsigned long,unsigned long,unsigned long)>,std::__unordered_map_hasher<MLE5PixelBufferAndTensorStrategyKey,std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,long const*,unsigned long,void *,unsigned long,unsigned long,unsigned long)>,MLE5PixelBufferAndTensorStrategyKey::hash,std::equal_to<MLE5PixelBufferAndTensorStrategyKey>,true>,std::__unordered_map_equal<MLE5PixelBufferAndTensorStrategyKey,std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,long const*,unsigned long,void *,unsigned long,unsigned long,unsigned long)>,std::equal_to<MLE5PixelBufferAndTensorStrategyKey>,MLE5PixelBufferAndTensorStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,long const*,unsigned long,void *,unsigned long,unsigned long,unsigned long)>>>::__emplace_unique_key_args<MLE5PixelBufferAndTensorStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PixelBufferAndTensorStrategyKey&&>,std::tuple<>>(&v1, (uint64_t)&v1)[5] = MLE5CopyBGRTensor_CompDtypeFLOAT_CompPackFmt16_32BGRA;
  int v3 = 1111970369;
  uint64_t v2 = 20;
  int v1 = 28;
  std::__hash_table<std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,long const*,unsigned long,void *,unsigned long,unsigned long,unsigned long)>,std::__unordered_map_hasher<MLE5PixelBufferAndTensorStrategyKey,std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,long const*,unsigned long,void *,unsigned long,unsigned long,unsigned long)>,MLE5PixelBufferAndTensorStrategyKey::hash,std::equal_to<MLE5PixelBufferAndTensorStrategyKey>,true>,std::__unordered_map_equal<MLE5PixelBufferAndTensorStrategyKey,std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,long const*,unsigned long,void *,unsigned long,unsigned long,unsigned long)>,std::equal_to<MLE5PixelBufferAndTensorStrategyKey>,MLE5PixelBufferAndTensorStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,long const*,unsigned long,void *,unsigned long,unsigned long,unsigned long)>>>::__emplace_unique_key_args<MLE5PixelBufferAndTensorStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PixelBufferAndTensorStrategyKey&&>,std::tuple<>>(&v1, (uint64_t)&v1)[5] = MLE5CopyRGBTensor_CompDtypeFLOAT_CompPackFmt16_32BGRA;
  int v3 = 1278226488;
  uint64_t v2 = 10;
  int v1 = 28;
  std::__hash_table<std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,long const*,unsigned long,void *,unsigned long,unsigned long,unsigned long)>,std::__unordered_map_hasher<MLE5PixelBufferAndTensorStrategyKey,std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,long const*,unsigned long,void *,unsigned long,unsigned long,unsigned long)>,MLE5PixelBufferAndTensorStrategyKey::hash,std::equal_to<MLE5PixelBufferAndTensorStrategyKey>,true>,std::__unordered_map_equal<MLE5PixelBufferAndTensorStrategyKey,std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,long const*,unsigned long,void *,unsigned long,unsigned long,unsigned long)>,std::equal_to<MLE5PixelBufferAndTensorStrategyKey>,MLE5PixelBufferAndTensorStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,long const*,unsigned long,void *,unsigned long,unsigned long,unsigned long)>>>::__emplace_unique_key_args<MLE5PixelBufferAndTensorStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PixelBufferAndTensorStrategyKey&&>,std::tuple<>>(&v1, (uint64_t)&v1)[5] = MLE5CopyGrayTensor_CompDtypeFLOAT_CompPackFmt16_OneComponent8;
  int v3 = 1278226536;
  uint64_t v2 = 40;
  int v1 = 28;
  result = std::__hash_table<std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,long const*,unsigned long,void *,unsigned long,unsigned long,unsigned long)>,std::__unordered_map_hasher<MLE5PixelBufferAndTensorStrategyKey,std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,long const*,unsigned long,void *,unsigned long,unsigned long,unsigned long)>,MLE5PixelBufferAndTensorStrategyKey::hash,std::equal_to<MLE5PixelBufferAndTensorStrategyKey>,true>,std::__unordered_map_equal<MLE5PixelBufferAndTensorStrategyKey,std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,long const*,unsigned long,void *,unsigned long,unsigned long,unsigned long)>,std::equal_to<MLE5PixelBufferAndTensorStrategyKey>,MLE5PixelBufferAndTensorStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,long const*,unsigned long,void *,unsigned long,unsigned long,unsigned long)>>>::__emplace_unique_key_args<MLE5PixelBufferAndTensorStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PixelBufferAndTensorStrategyKey&&>,std::tuple<>>(&v1, (uint64_t)&v1);
  result[5] = MLE5CopyGrayTensor_CompDtypeFLOAT_CompPackFmt16_OneComponent16Half;
  return result;
}

void *std::__hash_table<std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,long const*,unsigned long,void *,unsigned long,unsigned long,unsigned long)>,std::__unordered_map_hasher<MLE5PixelBufferAndTensorStrategyKey,std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,long const*,unsigned long,void *,unsigned long,unsigned long,unsigned long)>,MLE5PixelBufferAndTensorStrategyKey::hash,std::equal_to<MLE5PixelBufferAndTensorStrategyKey>,true>,std::__unordered_map_equal<MLE5PixelBufferAndTensorStrategyKey,std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,long const*,unsigned long,void *,unsigned long,unsigned long,unsigned long)>,std::equal_to<MLE5PixelBufferAndTensorStrategyKey>,MLE5PixelBufferAndTensorStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,long const*,unsigned long,void *,unsigned long,unsigned long,unsigned long)>>>::__emplace_unique_key_args<MLE5PixelBufferAndTensorStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PixelBufferAndTensorStrategyKey&&>,std::tuple<>>(int *a1, uint64_t a2)
{
  unsigned int v4 = a1[4];
  uint64_t v5 = *((void *)a1 + 1);
  int v6 = *a1;
  unint64_t v7 = v5 ^ *a1 ^ v4;
  unint64_t v8 = *((void *)&copyTensorToPixelBufferFunctionTable(void)::table + 1);
  if (*((void *)&copyTensorToPixelBufferFunctionTable(void)::table + 1))
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&copyTensorToPixelBufferFunctionTable(void)::table + 8));
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v2 = v5 ^ v6 ^ v4;
      if (v7 >= *((void *)&copyTensorToPixelBufferFunctionTable(void)::table + 1)) {
        unint64_t v2 = v7 % *((void *)&copyTensorToPixelBufferFunctionTable(void)::table + 1);
      }
    }
    else
    {
      unint64_t v2 = v7 & (*((void *)&copyTensorToPixelBufferFunctionTable(void)::table + 1) - 1);
    }
    uint64_t v10 = *(void ***)(copyTensorToPixelBufferFunctionTable(void)::table + 8 * v2);
    if (v10)
    {
      unint64_t v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 8) == v4 && v11[3] == v5 && *((_DWORD *)v11 + 4) == v6) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= *((void *)&copyTensorToPixelBufferFunctionTable(void)::table + 1)) {
                v12 %= *((void *)&copyTensorToPixelBufferFunctionTable(void)::table + 1);
              }
            }
            else
            {
              v12 &= *((void *)&copyTensorToPixelBufferFunctionTable(void)::table + 1) - 1;
            }
            if (v12 != v2) {
              break;
            }
          }
          unint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  unint64_t v11 = operator new(0x30uLL);
  void *v11 = 0;
  v11[1] = v7;
  *((_OWORD *)v11 + 1) = *(_OWORD *)a2;
  v11[4] = *(void *)(a2 + 16);
  v11[5] = 0;
  float v13 = (float)(unint64_t)(qword_1E946A440 + 1);
  if (!v8 || (float)(*(float *)&dword_1E946A448 * (float)v8) < v13)
  {
    BOOL v14 = 1;
    if (v8 >= 3) {
      BOOL v14 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v8);
    unint64_t v16 = vcvtps_u32_f32(v13 / *(float *)&dword_1E946A448);
    if (v15 <= v16) {
      int8x8_t prime = (int8x8_t)v16;
    }
    else {
      int8x8_t prime = (int8x8_t)v15;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v8 = *((void *)&copyTensorToPixelBufferFunctionTable(void)::table + 1);
    }
    if (*(void *)&prime > v8) {
      goto LABEL_32;
    }
    if (*(void *)&prime < v8)
    {
      unint64_t v24 = vcvtps_u32_f32((float)(unint64_t)qword_1E946A440 / *(float *)&dword_1E946A448);
      if (v8 < 3 || (uint8x8_t v25 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        unint64_t v24 = std::__next_prime(v24);
      }
      else
      {
        uint64_t v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2) {
          unint64_t v24 = v26;
        }
      }
      if (*(void *)&prime <= v24) {
        int8x8_t prime = (int8x8_t)v24;
      }
      if (*(void *)&prime >= v8)
      {
        unint64_t v8 = *((void *)&copyTensorToPixelBufferFunctionTable(void)::table + 1);
      }
      else
      {
        if (prime)
        {
LABEL_32:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          v18 = operator new(8 * *(void *)&prime);
          v19 = (void *)copyTensorToPixelBufferFunctionTable(void)::table;
          *(void *)&copyTensorToPixelBufferFunctionTable(void)::table = v18;
          if (v19) {
            operator delete(v19);
          }
          uint64_t v20 = 0;
          *((int8x8_t *)&copyTensorToPixelBufferFunctionTable(void)::table + 1) = prime;
          do
            *(void *)(copyTensorToPixelBufferFunctionTable(void)::table + 8 * v20++) = 0;
          while (*(void *)&prime != v20);
          v21 = (void **)qword_1E946A438;
          if (qword_1E946A438)
          {
            unint64_t v22 = *(void *)(qword_1E946A438 + 8);
            uint8x8_t v23 = (uint8x8_t)vcnt_s8(prime);
            v23.i16[0] = vaddlv_u8(v23);
            if (v23.u32[0] > 1uLL)
            {
              if (v22 >= *(void *)&prime) {
                v22 %= *(void *)&prime;
              }
            }
            else
            {
              v22 &= *(void *)&prime - 1;
            }
            *(void *)(copyTensorToPixelBufferFunctionTable(void)::table + 8 * v22) = &qword_1E946A438;
            for (i = *v21; i; unint64_t v22 = v28)
            {
              unint64_t v28 = i[1];
              if (v23.u32[0] > 1uLL)
              {
                if (v28 >= *(void *)&prime) {
                  v28 %= *(void *)&prime;
                }
              }
              else
              {
                v28 &= *(void *)&prime - 1;
              }
              if (v28 != v22)
              {
                if (!*(void *)(copyTensorToPixelBufferFunctionTable(void)::table + 8 * v28))
                {
                  *(void *)(copyTensorToPixelBufferFunctionTable(void)::table + 8 * v28) = v21;
                  goto LABEL_57;
                }
                void *v21 = (void *)*i;
                void *i = **(void **)(copyTensorToPixelBufferFunctionTable(void)::table + 8 * v28);
                **(void **)(copyTensorToPixelBufferFunctionTable(void)::table + 8 * v28) = i;
                i = v21;
              }
              unint64_t v28 = v22;
LABEL_57:
              v21 = (void **)i;
              i = (void *)*i;
            }
          }
          unint64_t v8 = (unint64_t)prime;
          goto LABEL_61;
        }
        v33 = (void *)copyTensorToPixelBufferFunctionTable(void)::table;
        *(void *)&copyTensorToPixelBufferFunctionTable(void)::table = 0;
        if (v33) {
          operator delete(v33);
        }
        unint64_t v8 = 0;
        *((void *)&copyTensorToPixelBufferFunctionTable(void)::table + 1) = 0;
      }
    }
LABEL_61:
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v2 = v7 % v8;
      }
      else {
        unint64_t v2 = v7;
      }
    }
    else
    {
      unint64_t v2 = (v8 - 1) & v7;
    }
  }
  uint64_t v29 = copyTensorToPixelBufferFunctionTable(void)::table;
  uint64_t v30 = *(void **)(copyTensorToPixelBufferFunctionTable(void)::table + 8 * v2);
  if (v30)
  {
    void *v11 = *v30;
LABEL_74:
    *uint64_t v30 = v11;
    goto LABEL_75;
  }
  void *v11 = qword_1E946A438;
  qword_1E946A438 = (uint64_t)v11;
  *(void *)(v29 + 8 * v2) = &qword_1E946A438;
  if (*v11)
  {
    unint64_t v31 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v31 >= v8) {
        v31 %= v8;
      }
    }
    else
    {
      v31 &= v8 - 1;
    }
    uint64_t v30 = (void *)(copyTensorToPixelBufferFunctionTable(void)::table + 8 * v31);
    goto LABEL_74;
  }
LABEL_75:
  ++qword_1E946A440;
  return v11;
}

void sub_19EA07414(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

vImage_Error MLE5CopyGrayTensor_CompDtypeFLOAT_CompPackFmt16_OneComponent16Half(void *a1, uint64_t a2, uint64_t a3, void *a4, vImagePixelCount a5, vImagePixelCount a6, size_t a7)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  src.data = a1;
  src.height = a6;
  size_t v7 = *(void *)(a2 + 8 * a3 - 16);
  src.width = a5;
  src.rowBytes = v7;
  dest.data = a4;
  dest.height = a6;
  dest.width = a5;
  dest.rowBytes = a7;
  vImage_Error result = vImageCopyBuffer(&src, &dest, 2uLL, 0);
  if (result)
  {
    vImage_Error v9 = result;
    uint64_t v10 = +[MLLogging coreChannel];
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      int v14 = v9;
      _os_log_error_impl(&dword_19E58B000, v10, OS_LOG_TYPE_ERROR, "vImageCopyBuffer has failed with error: %d", buf, 8u);
    }

    return objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", *MEMORY[0x1E4F1C3A8], @"vImageCopyBuffer has failed with error: %d", v9);
  }
  return result;
}

void MLE5CopyGrayTensor_CompDtypeFLOAT_CompPackFmt16_OneComponent8(char *a1, uint64_t a2, uint64_t a3, char *a4, vImagePixelCount a5, uint64_t a6, size_t a7)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  memptr = 0;
  size_t v22 = 4 * a5;
  malloc_type_posix_memalign(&memptr, 0x80uLL, 4 * a5, 0x100004052888210uLL);
  if (a6)
  {
    size_t v14 = *(void *)(a2 + 8 * a3 - 16);
    uint64_t v15 = *MEMORY[0x1E4F1C3A8];
    do
    {
      src.data = a1;
      src.height = 1;
      src.width = a5;
      src.rowBytes = v14;
      dest.data = memptr;
      dest.height = 1;
      dest.width = a5;
      dest.rowBytes = v22;
      vImage_Error v16 = vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
      if (v16)
      {
        vImage_Error v17 = v16;
        v18 = +[MLLogging coreChannel];
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          LODWORD(v28.data) = 67109120;
          HIDWORD(v28.data) = v17;
          _os_log_error_impl(&dword_19E58B000, v18, OS_LOG_TYPE_ERROR, "vImageConvert_Planar16FtoPlanarF has failed with error: %d", (uint8_t *)&v28, 8u);
        }

        objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", v15, @"vImageConvert_Planar16FtoPlanarF has failed with error: %d", v17);
      }
      v28.data = a4;
      v28.height = 1;
      v28.width = a5;
      v28.rowBytes = a7;
      vImage_Error v19 = vImageConvert_PlanarFtoPlanar8(&dest, &v28, 255.0, 0.0, 0);
      if (v19)
      {
        vImage_Error v20 = v19;
        v21 = +[MLLogging coreChannel];
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67109120;
          int v27 = v20;
          _os_log_error_impl(&dword_19E58B000, v21, OS_LOG_TYPE_ERROR, "vImageConvert_PlanarFtoPlanar16F with error: %d", buf, 8u);
        }

        objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", v15, @"vImageConvert_PlanarFtoPlanar16F with error: %d", v20);
      }
      a1 += v14;
      a4 += a7;
      --a6;
    }
    while (a6);
  }
  free(memptr);
}

void MLE5CopyRGBTensor_CompDtypeFLOAT_CompPackFmt16_32BGRA(char *a1, const uint64_t *a2, uint64_t a3, char *a4, vImagePixelCount a5, uint64_t a6, size_t a7)
{
}

void _MLE5CopyXXXTensor_CompDtypeFLOAT_CompPackFmt16_32YYYY(char *a1, const uint64_t *a2, uint64_t a3, char *a4, vImagePixelCount a5, uint64_t a6, size_t a7, int a8)
{
  v49[3] = *MEMORY[0x1E4F143B8];
  uint64_t v13 = a2[a3 - 3];
  size_t v14 = a2[a3 - 2];
  v49[0] = a1;
  v49[1] = &a1[v13];
  v49[2] = &a1[2 * v13];
  uint64_t v44 = 0;
  memptr = 0;
  size_t v15 = (4 * a5 + 127) & 0xFFFFFFFFFFFFFF80;
  size_t v16 = (a5 + 127) & 0xFFFFFFFFFFFFFF80;
  malloc_type_posix_memalign(&memptr, 0x80uLL, 3 * v15, 0xC359222DuLL);
  malloc_type_posix_memalign(&v44, 0x80uLL, 3 * v16, 0xD7A7430DuLL);
  if (a6)
  {
    uint64_t v17 = 0;
    uint64_t v18 = 2;
    if (a8) {
      uint64_t v19 = 0;
    }
    else {
      uint64_t v19 = 2;
    }
    size_t v20 = v19 * v16;
    if (!a8) {
      uint64_t v18 = 0;
    }
    size_t v33 = v18 * v16;
    size_t v34 = v20;
    uint64_t v38 = *MEMORY[0x1E4F1C3A8];
    size_t v35 = a7;
    do
    {
      uint64_t v36 = v17;
      v37 = a4;
      uint64_t v21 = 0;
      for (uint64_t i = 0; i != 3; ++i)
      {
        uint8x8_t v23 = (char *)v49[i];
        src.data = v23;
        src.height = 1;
        src.width = a5;
        src.rowBytes = v14;
        dest.data = (char *)memptr + v21;
        dest.height = 1;
        dest.width = a5;
        dest.rowBytes = v15;
        vImage_Error v24 = vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
        if (v24)
        {
          vImage_Error v25 = v24;
          uint64_t v26 = +[MLLogging coreChannel];
          if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
          {
            LODWORD(buf.data) = 67109120;
            HIDWORD(buf.data) = v25;
            _os_log_error_impl(&dword_19E58B000, v26, OS_LOG_TYPE_ERROR, "vImageConvert_Planar16FtoPlanarF has failed with error: %d", (uint8_t *)&buf, 8u);
          }

          objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", v38, @"vImageConvert_Planar16FtoPlanarF has failed with error: %d", v25);
        }
        v49[i] = &v23[v14];
        v21 += v15;
      }
      src.data = memptr;
      src.height = 3;
      src.width = a5;
      src.rowBytes = v15;
      dest.data = v44;
      dest.height = 3;
      dest.width = a5;
      dest.rowBytes = v16;
      vImage_Error v27 = vImageConvert_PlanarFtoPlanar8(&src, &dest, 255.0, 0.0, 0);
      if (v27)
      {
        vImage_Error v28 = v27;
        uint64_t v29 = +[MLLogging coreChannel];
        if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf.data) = 67109120;
          HIDWORD(buf.data) = v28;
          _os_log_error_impl(&dword_19E58B000, v29, OS_LOG_TYPE_ERROR, "vImageConvert_PlanarFtoPlanar8 has failed with error: %d", (uint8_t *)&buf, 8u);
        }

        objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", v38, @"vImageConvert_PlanarFtoPlanar8 has failed with error: %d", v28);
      }
      buf.data = (char *)v44 + v34;
      buf.height = 1;
      buf.width = a5;
      buf.rowBytes = v16;
      green.data = (char *)v44 + v16;
      green.height = 1;
      green.width = a5;
      green.rowBytes = v16;
      red.data = (char *)v44 + v33;
      red.height = 1;
      red.width = a5;
      red.rowBytes = v16;
      v39.data = v37;
      v39.height = 1;
      v39.width = a5;
      v39.rowBytes = v35;
      vImage_Error v30 = vImageConvert_Planar8ToBGRX8888(&buf, &green, &red, 0xFFu, &v39, 0);
      if (v30)
      {
        vImage_Error v31 = v30;
        v32 = +[MLLogging coreChannel];
        if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v46 = 67109120;
          int v47 = v31;
          _os_log_error_impl(&dword_19E58B000, v32, OS_LOG_TYPE_ERROR, "vImageConvert_Planar8ToBGRX8888 has failed with error: %d", v46, 8u);
        }

        objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", v38, @"vImageConvert_Planar8ToBGRX8888 has failed with error: %d", v31);
      }
      a4 = &v37[v35];
      uint64_t v17 = v36 + 1;
    }
    while (v36 + 1 != a6);
  }
  free(memptr);
  free(v44);
}

void MLE5CopyBGRTensor_CompDtypeFLOAT_CompPackFmt16_32BGRA(char *a1, const uint64_t *a2, uint64_t a3, char *a4, vImagePixelCount a5, uint64_t a6, size_t a7)
{
}

vImage_Error MLE5CopyGrayTensor_CompDtypeFLOAT_CompPackFmt32_OneComponent16Half(void *a1, uint64_t a2, uint64_t a3, void *a4, vImagePixelCount a5, vImagePixelCount a6, size_t a7)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  src.data = a1;
  src.height = a6;
  size_t v7 = *(void *)(a2 + 8 * a3 - 16);
  src.width = a5;
  src.rowBytes = v7;
  dest.data = a4;
  dest.height = a6;
  dest.width = a5;
  dest.rowBytes = a7;
  vImage_Error result = vImageConvert_PlanarFtoPlanar16F(&src, &dest, 0);
  if (result)
  {
    vImage_Error v9 = result;
    uint64_t v10 = +[MLLogging coreChannel];
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)vImage_Buffer buf = 67109120;
      int v14 = v9;
      _os_log_error_impl(&dword_19E58B000, v10, OS_LOG_TYPE_ERROR, "vImageConvert_PlanarFtoPlanar16F has failed with error: %d", buf, 8u);
    }

    return objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", *MEMORY[0x1E4F1C3A8], @"vImageConvert_PlanarFtoPlanar16F has failed with error: %d", v9);
  }
  return result;
}

vImage_Error MLE5CopyGrayTensor_CompDtypeFLOAT_CompPackFmt32_OneComponent8(void *a1, uint64_t a2, uint64_t a3, void *a4, vImagePixelCount a5, vImagePixelCount a6, size_t a7)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  src.data = a1;
  src.height = a6;
  size_t v7 = *(void *)(a2 + 8 * a3 - 16);
  src.width = a5;
  src.rowBytes = v7;
  dest.data = a4;
  dest.height = a6;
  dest.width = a5;
  dest.rowBytes = a7;
  vImage_Error result = vImageConvert_PlanarFtoPlanar8(&src, &dest, 255.0, 0.0, 0);
  if (result)
  {
    vImage_Error v9 = result;
    uint64_t v10 = +[MLLogging coreChannel];
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)vImage_Buffer buf = 67109120;
      int v14 = v9;
      _os_log_error_impl(&dword_19E58B000, v10, OS_LOG_TYPE_ERROR, "vImageConvert_PlanarFtoPlanar8 has failed with error: %d", buf, 8u);
    }

    return objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", *MEMORY[0x1E4F1C3A8], @"vImageConvert_PlanarFtoPlanar8 has failed with error: %d", v9);
  }
  return result;
}

vImage_Error MLE5CopyRGBTensor_CompDtypeFLOAT_CompPackFmt32_32BGRA(char *a1, uint64_t a2, uint64_t a3, void *a4, vImagePixelCount a5, vImagePixelCount a6, size_t a7)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  red.data = a1;
  red.height = a6;
  uint64_t v7 = *(void *)(a2 + 8 * a3 - 24);
  size_t v8 = *(void *)(a2 + 8 * a3 - 16);
  red.width = a5;
  red.rowBytes = v8;
  green.data = &a1[v7];
  green.height = a6;
  green.width = a5;
  green.rowBytes = v8;
  blue.data = &a1[2 * v7];
  blue.height = a6;
  blue.width = a5;
  blue.rowBytes = v8;
  dest.data = a4;
  dest.height = a6;
  dest.width = a5;
  dest.rowBytes = a7;
  long long maxFloat = xmmword_19EC7B950;
  minFloat[0] = 0;
  minFloat[1] = 0;
  vImage_Error result = vImageConvert_PlanarFToBGRX8888(&blue, &green, &red, 0xFFu, &dest, (const float *)&maxFloat, (const float *)minFloat, 0);
  if (result)
  {
    vImage_Error v10 = result;
    unint64_t v11 = +[MLLogging coreChannel];
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)vImage_Buffer buf = 67109120;
      int v17 = v10;
      _os_log_error_impl(&dword_19E58B000, v11, OS_LOG_TYPE_ERROR, "vImageConvert_PlanarFToBGRX8888 has failed with error: %d", buf, 8u);
    }

    return objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", *MEMORY[0x1E4F1C3A8], @"vImageConvert_PlanarFToBGRX8888 has failed with error: %d", v10);
  }
  return result;
}

vImage_Error MLE5CopyBGRTensor_CompDtypeFLOAT_CompPackFmt32_32BGRA(char *a1, uint64_t a2, uint64_t a3, void *a4, vImagePixelCount a5, vImagePixelCount a6, size_t a7)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  blue.data = a1;
  blue.height = a6;
  uint64_t v7 = *(void *)(a2 + 8 * a3 - 24);
  size_t v8 = *(void *)(a2 + 8 * a3 - 16);
  blue.width = a5;
  blue.rowBytes = v8;
  green.data = &a1[v7];
  green.height = a6;
  green.width = a5;
  green.rowBytes = v8;
  red.data = &a1[2 * v7];
  red.height = a6;
  red.width = a5;
  red.rowBytes = v8;
  dest.data = a4;
  dest.height = a6;
  dest.width = a5;
  dest.rowBytes = a7;
  long long maxFloat = xmmword_19EC7B950;
  minFloat[0] = 0;
  minFloat[1] = 0;
  vImage_Error result = vImageConvert_PlanarFToBGRX8888(&blue, &green, &red, 0xFFu, &dest, (const float *)&maxFloat, (const float *)minFloat, 0);
  if (result)
  {
    vImage_Error v10 = result;
    unint64_t v11 = +[MLLogging coreChannel];
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)vImage_Buffer buf = 67109120;
      int v17 = v10;
      _os_log_error_impl(&dword_19E58B000, v11, OS_LOG_TYPE_ERROR, "vImageConvert_PlanarFToBGRX8888 has failed with error: %d", buf, 8u);
    }

    return objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", *MEMORY[0x1E4F1C3A8], @"vImageConvert_PlanarFToBGRX8888 has failed with error: %d", v10);
  }
  return result;
}

void *___ZL31outputFeatureValueFunctionTablev_block_invoke()
{
  LOWORD(v1) = 1;
  BYTE2(v1) = 1;
  *((void *)&v1 + 1) = 5;
  std::__hash_table<std::__hash_value_type<MLE5PortBindStrategyKey,MLFeatureValue * (*)(e5rt_io_port *,MLFeatureDescription *,NSError * {__autoreleasing}*)>,std::__unordered_map_hasher<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,MLFeatureValue * (*)(e5rt_io_port *,MLFeatureDescription *,NSError * {__autoreleasing}*)>,MLE5PortBindStrategyKey::hash,std::equal_to<MLE5PortBindStrategyKey>,true>,std::__unordered_map_equal<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,MLFeatureValue * (*)(e5rt_io_port *,MLFeatureDescription *,NSError * {__autoreleasing}*)>,std::equal_to<MLE5PortBindStrategyKey>,MLE5PortBindStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PortBindStrategyKey,MLFeatureValue * (*)(e5rt_io_port *,MLFeatureDescription *,NSError * {__autoreleasing}*)>>>::__emplace_unique_key_args<MLE5PortBindStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PortBindStrategyKey&&>,std::tuple<>>((unsigned __int8 *)&v1, &v1)[4] = MLE5OutputMultiArrayFeatureValueByRetainingTensor;
  LOWORD(v1) = 1;
  BYTE2(v1) = 1;
  *((void *)&v1 + 1) = 0;
  std::__hash_table<std::__hash_value_type<MLE5PortBindStrategyKey,MLFeatureValue * (*)(e5rt_io_port *,MLFeatureDescription *,NSError * {__autoreleasing}*)>,std::__unordered_map_hasher<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,MLFeatureValue * (*)(e5rt_io_port *,MLFeatureDescription *,NSError * {__autoreleasing}*)>,MLE5PortBindStrategyKey::hash,std::equal_to<MLE5PortBindStrategyKey>,true>,std::__unordered_map_equal<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,MLFeatureValue * (*)(e5rt_io_port *,MLFeatureDescription *,NSError * {__autoreleasing}*)>,std::equal_to<MLE5PortBindStrategyKey>,MLE5PortBindStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PortBindStrategyKey,MLFeatureValue * (*)(e5rt_io_port *,MLFeatureDescription *,NSError * {__autoreleasing}*)>>>::__emplace_unique_key_args<MLE5PortBindStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PortBindStrategyKey&&>,std::tuple<>>((unsigned __int8 *)&v1, &v1)[4] = MLE5OutputMultiArrayFeatureValueByRetainingTensor;
  LOWORD(v1) = 1;
  BYTE2(v1) = 1;
  *((void *)&v1 + 1) = 6;
  std::__hash_table<std::__hash_value_type<MLE5PortBindStrategyKey,MLFeatureValue * (*)(e5rt_io_port *,MLFeatureDescription *,NSError * {__autoreleasing}*)>,std::__unordered_map_hasher<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,MLFeatureValue * (*)(e5rt_io_port *,MLFeatureDescription *,NSError * {__autoreleasing}*)>,MLE5PortBindStrategyKey::hash,std::equal_to<MLE5PortBindStrategyKey>,true>,std::__unordered_map_equal<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,MLFeatureValue * (*)(e5rt_io_port *,MLFeatureDescription *,NSError * {__autoreleasing}*)>,std::equal_to<MLE5PortBindStrategyKey>,MLE5PortBindStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PortBindStrategyKey,MLFeatureValue * (*)(e5rt_io_port *,MLFeatureDescription *,NSError * {__autoreleasing}*)>>>::__emplace_unique_key_args<MLE5PortBindStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PortBindStrategyKey&&>,std::tuple<>>((unsigned __int8 *)&v1, &v1)[4] = MLE5OutputMultiArrayFeatureValueByRetainingTensor;
  LOWORD(v1) = 1;
  BYTE2(v1) = 2;
  *((void *)&v1 + 1) = 5;
  std::__hash_table<std::__hash_value_type<MLE5PortBindStrategyKey,MLFeatureValue * (*)(e5rt_io_port *,MLFeatureDescription *,NSError * {__autoreleasing}*)>,std::__unordered_map_hasher<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,MLFeatureValue * (*)(e5rt_io_port *,MLFeatureDescription *,NSError * {__autoreleasing}*)>,MLE5PortBindStrategyKey::hash,std::equal_to<MLE5PortBindStrategyKey>,true>,std::__unordered_map_equal<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,MLFeatureValue * (*)(e5rt_io_port *,MLFeatureDescription *,NSError * {__autoreleasing}*)>,std::equal_to<MLE5PortBindStrategyKey>,MLE5PortBindStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PortBindStrategyKey,MLFeatureValue * (*)(e5rt_io_port *,MLFeatureDescription *,NSError * {__autoreleasing}*)>>>::__emplace_unique_key_args<MLE5PortBindStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PortBindStrategyKey&&>,std::tuple<>>((unsigned __int8 *)&v1, &v1)[4] = MLE5OutputMultiArrayFeatureValueByCopyingTensor;
  LOWORD(v1) = 1;
  BYTE2(v1) = 2;
  *((void *)&v1 + 1) = 4;
  std::__hash_table<std::__hash_value_type<MLE5PortBindStrategyKey,MLFeatureValue * (*)(e5rt_io_port *,MLFeatureDescription *,NSError * {__autoreleasing}*)>,std::__unordered_map_hasher<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,MLFeatureValue * (*)(e5rt_io_port *,MLFeatureDescription *,NSError * {__autoreleasing}*)>,MLE5PortBindStrategyKey::hash,std::equal_to<MLE5PortBindStrategyKey>,true>,std::__unordered_map_equal<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,MLFeatureValue * (*)(e5rt_io_port *,MLFeatureDescription *,NSError * {__autoreleasing}*)>,std::equal_to<MLE5PortBindStrategyKey>,MLE5PortBindStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PortBindStrategyKey,MLFeatureValue * (*)(e5rt_io_port *,MLFeatureDescription *,NSError * {__autoreleasing}*)>>>::__emplace_unique_key_args<MLE5PortBindStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PortBindStrategyKey&&>,std::tuple<>>((unsigned __int8 *)&v1, &v1)[4] = MLE5OutputPixelBufferFeatureValueByCopyingTensor;
  LOWORD(v1) = 1;
  BYTE2(v1) = 1;
  *((void *)&v1 + 1) = 4;
  vImage_Error result = std::__hash_table<std::__hash_value_type<MLE5PortBindStrategyKey,MLFeatureValue * (*)(e5rt_io_port *,MLFeatureDescription *,NSError * {__autoreleasing}*)>,std::__unordered_map_hasher<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,MLFeatureValue * (*)(e5rt_io_port *,MLFeatureDescription *,NSError * {__autoreleasing}*)>,MLE5PortBindStrategyKey::hash,std::equal_to<MLE5PortBindStrategyKey>,true>,std::__unordered_map_equal<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,MLFeatureValue * (*)(e5rt_io_port *,MLFeatureDescription *,NSError * {__autoreleasing}*)>,std::equal_to<MLE5PortBindStrategyKey>,MLE5PortBindStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PortBindStrategyKey,MLFeatureValue * (*)(e5rt_io_port *,MLFeatureDescription *,NSError * {__autoreleasing}*)>>>::__emplace_unique_key_args<MLE5PortBindStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PortBindStrategyKey&&>,std::tuple<>>((unsigned __int8 *)&v1, &v1);
  result[4] = MLE5OutputPixelBufferFeatureValueByRetainingTensor;
  return result;
}

void *std::__hash_table<std::__hash_value_type<MLE5PortBindStrategyKey,MLFeatureValue * (*)(e5rt_io_port *,MLFeatureDescription *,NSError * {__autoreleasing}*)>,std::__unordered_map_hasher<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,MLFeatureValue * (*)(e5rt_io_port *,MLFeatureDescription *,NSError * {__autoreleasing}*)>,MLE5PortBindStrategyKey::hash,std::equal_to<MLE5PortBindStrategyKey>,true>,std::__unordered_map_equal<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,MLFeatureValue * (*)(e5rt_io_port *,MLFeatureDescription *,NSError * {__autoreleasing}*)>,std::equal_to<MLE5PortBindStrategyKey>,MLE5PortBindStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PortBindStrategyKey,MLFeatureValue * (*)(e5rt_io_port *,MLFeatureDescription *,NSError * {__autoreleasing}*)>>>::__emplace_unique_key_args<MLE5PortBindStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PortBindStrategyKey&&>,std::tuple<>>(unsigned __int8 *a1, _OWORD *a2)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v6 = *((void *)a1 + 1);
  unint64_t v7 = ((unint64_t)*a1 << 24) | (v4 << 16) | (v5 << 8) | v6;
  unint64_t v8 = *((void *)&outputFeatureValueFunctionTable(void)::table + 1);
  if (*((void *)&outputFeatureValueFunctionTable(void)::table + 1))
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&outputFeatureValueFunctionTable(void)::table + 8));
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v2 = ((unint64_t)*a1 << 24) | (v4 << 16) | (v5 << 8) | v6;
      if (v7 >= *((void *)&outputFeatureValueFunctionTable(void)::table + 1)) {
        unint64_t v2 = v7 % *((void *)&outputFeatureValueFunctionTable(void)::table + 1);
      }
    }
    else
    {
      unint64_t v2 = v7 & (*((void *)&outputFeatureValueFunctionTable(void)::table + 1) - 1);
    }
    vImage_Error v10 = *(void ***)(outputFeatureValueFunctionTable(void)::table + 8 * v2);
    if (v10)
    {
      unint64_t v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((unsigned __int8 *)v11 + 16) == *a1
              && __PAIR64__(*((unsigned __int8 *)v11 + 18), *((unsigned __int8 *)v11 + 17)) == __PAIR64__(v5, v4)
              && v11[3] == v6)
            {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= *((void *)&outputFeatureValueFunctionTable(void)::table + 1)) {
                v12 %= *((void *)&outputFeatureValueFunctionTable(void)::table + 1);
              }
            }
            else
            {
              v12 &= *((void *)&outputFeatureValueFunctionTable(void)::table + 1) - 1;
            }
            if (v12 != v2) {
              break;
            }
          }
          unint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  unint64_t v11 = operator new(0x28uLL);
  void *v11 = 0;
  v11[1] = v7;
  *((_OWORD *)v11 + 1) = *a2;
  v11[4] = 0;
  float v13 = (float)(unint64_t)(qword_1EB4DCD58 + 1);
  if (!v8 || (float)(*(float *)&dword_1EB4DCD60 * (float)v8) < v13)
  {
    BOOL v14 = 1;
    if (v8 >= 3) {
      BOOL v14 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v8);
    unint64_t v16 = vcvtps_u32_f32(v13 / *(float *)&dword_1EB4DCD60);
    if (v15 <= v16) {
      int8x8_t prime = (int8x8_t)v16;
    }
    else {
      int8x8_t prime = (int8x8_t)v15;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v8 = *((void *)&outputFeatureValueFunctionTable(void)::table + 1);
    }
    if (*(void *)&prime > v8) {
      goto LABEL_32;
    }
    if (*(void *)&prime < v8)
    {
      unint64_t v24 = vcvtps_u32_f32((float)(unint64_t)qword_1EB4DCD58 / *(float *)&dword_1EB4DCD60);
      if (v8 < 3 || (uint8x8_t v25 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        unint64_t v24 = std::__next_prime(v24);
      }
      else
      {
        uint64_t v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2) {
          unint64_t v24 = v26;
        }
      }
      if (*(void *)&prime <= v24) {
        int8x8_t prime = (int8x8_t)v24;
      }
      if (*(void *)&prime >= v8)
      {
        unint64_t v8 = *((void *)&outputFeatureValueFunctionTable(void)::table + 1);
      }
      else
      {
        if (prime)
        {
LABEL_32:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v18 = operator new(8 * *(void *)&prime);
          uint64_t v19 = (void *)outputFeatureValueFunctionTable(void)::table;
          *(void *)&outputFeatureValueFunctionTable(void)::table = v18;
          if (v19) {
            operator delete(v19);
          }
          uint64_t v20 = 0;
          *((int8x8_t *)&outputFeatureValueFunctionTable(void)::table + 1) = prime;
          do
            *(void *)(outputFeatureValueFunctionTable(void)::table + 8 * v20++) = 0;
          while (*(void *)&prime != v20);
          uint64_t v21 = (void **)qword_1EB4DCD50;
          if (qword_1EB4DCD50)
          {
            unint64_t v22 = *(void *)(qword_1EB4DCD50 + 8);
            uint8x8_t v23 = (uint8x8_t)vcnt_s8(prime);
            v23.i16[0] = vaddlv_u8(v23);
            if (v23.u32[0] > 1uLL)
            {
              if (v22 >= *(void *)&prime) {
                v22 %= *(void *)&prime;
              }
            }
            else
            {
              v22 &= *(void *)&prime - 1;
            }
            *(void *)(outputFeatureValueFunctionTable(void)::table + 8 * v22) = &qword_1EB4DCD50;
            for (i = *v21; i; unint64_t v22 = v28)
            {
              unint64_t v28 = i[1];
              if (v23.u32[0] > 1uLL)
              {
                if (v28 >= *(void *)&prime) {
                  v28 %= *(void *)&prime;
                }
              }
              else
              {
                v28 &= *(void *)&prime - 1;
              }
              if (v28 != v22)
              {
                if (!*(void *)(outputFeatureValueFunctionTable(void)::table + 8 * v28))
                {
                  *(void *)(outputFeatureValueFunctionTable(void)::table + 8 * v28) = v21;
                  goto LABEL_57;
                }
                NSObject *v21 = (void *)*i;
                void *i = **(void **)(outputFeatureValueFunctionTable(void)::table + 8 * v28);
                **(void **)(outputFeatureValueFunctionTable(void)::table + 8 * v28) = i;
                uint64_t i = v21;
              }
              unint64_t v28 = v22;
LABEL_57:
              uint64_t v21 = (void **)i;
              uint64_t i = (void *)*i;
            }
          }
          unint64_t v8 = (unint64_t)prime;
          goto LABEL_61;
        }
        size_t v33 = (void *)outputFeatureValueFunctionTable(void)::table;
        *(void *)&outputFeatureValueFunctionTable(void)::table = 0;
        if (v33) {
          operator delete(v33);
        }
        unint64_t v8 = 0;
        *((void *)&outputFeatureValueFunctionTable(void)::table + 1) = 0;
      }
    }
LABEL_61:
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v2 = v7 % v8;
      }
      else {
        unint64_t v2 = v7;
      }
    }
    else
    {
      unint64_t v2 = (v8 - 1) & v7;
    }
  }
  uint64_t v29 = outputFeatureValueFunctionTable(void)::table;
  vImage_Error v30 = *(void **)(outputFeatureValueFunctionTable(void)::table + 8 * v2);
  if (v30)
  {
    void *v11 = *v30;
LABEL_74:
    *vImage_Error v30 = v11;
    goto LABEL_75;
  }
  void *v11 = qword_1EB4DCD50;
  qword_1EB4DCD50 = (uint64_t)v11;
  *(void *)(v29 + 8 * v2) = &qword_1EB4DCD50;
  if (*v11)
  {
    unint64_t v31 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v31 >= v8) {
        v31 %= v8;
      }
    }
    else
    {
      v31 &= v8 - 1;
    }
    vImage_Error v30 = (void *)(outputFeatureValueFunctionTable(void)::table + 8 * v31);
    goto LABEL_74;
  }
LABEL_75:
  ++qword_1EB4DCD58;
  return v11;
}

void sub_19EA0852C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

id MLE5OutputPixelBufferFeatureValueByRetainingTensor(uint64_t a1, void *a2, void *a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v4 = a2;
  MLE5BufferObjectBoundTo((e5rt_io_port *)&v17);
  uint64_t v5 = (__IOSurface *)MLE5IOSurfaceOfBufferObject();
  CVPixelBufferRef pixelBufferOut = 0;
  uint64_t v6 = CVPixelBufferCreateWithIOSurface((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v5, 0, &pixelBufferOut);
  if (v6)
  {
    unint64_t v7 = +[MLLogging coreChannel];
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      unint64_t v15 = [v4 name];
      *(_DWORD *)vImage_Buffer buf = 138412546;
      uint64_t v21 = v15;
      __int16 v22 = 1024;
      int v23 = v6;
      _os_log_error_impl(&dword_19E58B000, v7, OS_LOG_TYPE_ERROR, "Failed to create an output pixel buffer for feature named: %@. (CVReturn: %d.)", buf, 0x12u);
    }
    if (a3)
    {
      unint64_t v8 = (void *)MEMORY[0x1E4F28C58];
      uint64_t v18 = *MEMORY[0x1E4F28568];
      uint8x8_t v9 = NSString;
      vImage_Error v10 = [v4 name];
      unint64_t v11 = [v9 stringWithFormat:@"Failed to create an output pixel buffer for feature named: %@. (CVReturn: %d.)", v10, v6];
      uint64_t v19 = v11;
      unint64_t v12 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v19 forKeys:&v18 count:1];
      *a3 = [v8 errorWithDomain:@"com.apple.CoreML" code:1 userInfo:v12];
    }
    float v13 = 0;
  }
  else
  {
    float v13 = +[MLFeatureValue featureValueWithPixelBuffer:pixelBufferOut];
    CVPixelBufferRelease(pixelBufferOut);
  }
  std::unique_ptr<e5rt_buffer_object,MLE5ObjectDeleter<e5rt_buffer_object>>::reset[abi:ne180100](&v17, 0);

  return v13;
}

void sub_19EA08758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);

  std::unique_ptr<e5rt_buffer_object,MLE5ObjectDeleter<e5rt_buffer_object>>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

id MLE5OutputPixelBufferFeatureValueByCopyingTensor(uint64_t a1, void *a2, void *a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  kdebug_trace();
  uint64_t v6 = +[MLMultiArray multiArrayOwningBufferObjectOfPort:a1 error:a3];
  unint64_t v7 = [v5 imageConstraint];
  uint64_t v8 = [v7 pixelType];

  if (v8 > 19)
  {
    if (v8 != 20)
    {
      if (v8 != 30)
      {
        if (v8 == 40)
        {
          uint8x8_t v9 = +[MLMultiArray pixelBufferGray16HalfFromMultiArrayHW:v6 error:a3];
          goto LABEL_12;
        }
LABEL_14:
        float v13 = +[MLLogging coreChannel];
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)vImage_Buffer buf = 134217984;
          uint64_t v21 = v8;
          _os_log_error_impl(&dword_19E58B000, v13, OS_LOG_TYPE_ERROR, "MLImagePixelType %tu is not supported.", buf, 0xCu);
        }

        if (a3)
        {
          BOOL v14 = (void *)MEMORY[0x1E4F28C58];
          uint64_t v18 = *MEMORY[0x1E4F28568];
          unint64_t v15 = objc_msgSend(NSString, "stringWithFormat:", @"MLImagePixelType %tu is not supported.", v8);
          uint64_t v19 = v15;
          unint64_t v16 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v19 forKeys:&v18 count:1];
          *a3 = [v14 errorWithDomain:@"com.apple.CoreML" code:1 userInfo:v16];
        }
        goto LABEL_18;
      }
      uint64_t v10 = 1;
      goto LABEL_11;
    }
LABEL_9:
    uint64_t v10 = 0;
LABEL_11:
    uint8x8_t v9 = +[MLMultiArray pixelBufferBGRA8FromMultiArrayCHW:v6 channelOrderIsBGR:v10 error:a3];
    goto LABEL_12;
  }
  if (!v8) {
    goto LABEL_9;
  }
  if (v8 != 10) {
    goto LABEL_14;
  }
  uint8x8_t v9 = +[MLMultiArray pixelBufferGray8FromMultiArrayHW:v6 error:a3];
LABEL_12:
  unint64_t v11 = v9;
  if (v9)
  {
    unint64_t v12 = +[MLFeatureValue featureValueWithPixelBuffer:v9];
    CVPixelBufferRelease(v11);
    goto LABEL_19;
  }
LABEL_18:
  unint64_t v12 = 0;
LABEL_19:

  kdebug_trace();

  return v12;
}

void sub_19EA08A50(_Unwind_Exception *a1)
{
  kdebug_trace();
  _Unwind_Resume(a1);
}

id MLE5OutputMultiArrayFeatureValueByCopyingTensor(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  MLE5TensorDescriptorOf((e5rt_io_port *)&v12);
  uint64_t v6 = MLE5MultiArrayShapeForTensor();
  unint64_t v7 = [v5 multiArrayConstraint];
  uint8x8_t v9 = -[MLMultiArray initWithShape:dataType:error:]([MLMultiArray alloc], "initWithShape:dataType:error:", v6, [v7 dataType], a3);
  if (v9 && (MLE5CopyTensorToMultiArray(a1, v9, v8, a3) & 1) != 0)
  {
    uint64_t v10 = +[MLFeatureValue featureValueWithMultiArray:v9];
  }
  else
  {
    uint64_t v10 = 0;
  }

  std::unique_ptr<e5rt_tensor_desc,MLE5ObjectDeleter<e5rt_tensor_desc>>::reset[abi:ne180100](&v12);

  return v10;
}

void sub_19EA08BEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);

  std::unique_ptr<e5rt_tensor_desc,MLE5ObjectDeleter<e5rt_tensor_desc>>::reset[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

id MLE5OutputMultiArrayFeatureValueByRetainingTensor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = +[MLMultiArray multiArrayOwningBufferObjectOfPort:a1 error:a3];
  if (v3)
  {
    id v4 = +[MLFeatureValue featureValueWithMultiArray:v3];
  }
  else
  {
    id v4 = 0;
  }

  return v4;
}

void sub_19EA08CA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA096FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void (**a11)(void), void *a12, uint64_t a13, void *a14, void *a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28)
{
  a11[2]();
  ElapsedTimeRecorder::~ElapsedTimeRecorder(&a28);

  _Unwind_Resume(a1);
}

void sub_19EA09A0C(_Unwind_Exception *a1)
{
  unint64_t v7 = v6;

  _Unwind_Resume(a1);
}

void sub_19EA09B00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t MLE5FeatureTraitOfBackingObject(void *a1)
{
  id v1 = a1;
  unint64_t v2 = v1;
  if (!v1) {
    goto LABEL_8;
  }
  CFTypeID v3 = CFGetTypeID(v1);
  if (v3 != CVPixelBufferGetTypeID())
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      unsigned __int8 v4 = MLE5FeatureTraitOfMultiArray(v2);
      goto LABEL_9;
    }
LABEL_8:
    unsigned __int8 v4 = 0;
    goto LABEL_9;
  }
  if (CVPixelBufferGetIOSurface((CVPixelBufferRef)v2)) {
    unsigned __int8 v4 = 3;
  }
  else {
    unsigned __int8 v4 = 4;
  }
LABEL_9:

  return v4;
}

void sub_19EA09BA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *___ZL36directOutputBackingModeFunctionTablev_block_invoke()
{
  LOWORD(v1) = 769;
  BYTE2(v1) = 0;
  *((void *)&v1 + 1) = 0;
  std::__hash_table<std::__hash_value_type<MLE5PortBindStrategyKey,MLE5DirectMode (*)(e5rt_io_port *,objc_object *,NSError * {__autoreleasing}*)>,std::__unordered_map_hasher<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,MLE5DirectMode (*)(e5rt_io_port *,objc_object *,NSError * {__autoreleasing}*)>,MLE5PortBindStrategyKey::hash,std::equal_to<MLE5PortBindStrategyKey>,true>,std::__unordered_map_equal<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,MLE5DirectMode (*)(e5rt_io_port *,objc_object *,NSError * {__autoreleasing}*)>,std::equal_to<MLE5PortBindStrategyKey>,MLE5PortBindStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PortBindStrategyKey,MLE5DirectMode (*)(e5rt_io_port *,objc_object *,NSError * {__autoreleasing}*)>>>::__emplace_unique_key_args<MLE5PortBindStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PortBindStrategyKey&&>,std::tuple<>>((unsigned __int8 *)&v1, &v1)[4] = MLE5DirectOutputBackingModeFromTensorToPixelBufferSurface;
  LOWORD(v1) = 1025;
  BYTE2(v1) = 0;
  *((void *)&v1 + 1) = 0;
  std::__hash_table<std::__hash_value_type<MLE5PortBindStrategyKey,MLE5DirectMode (*)(e5rt_io_port *,objc_object *,NSError * {__autoreleasing}*)>,std::__unordered_map_hasher<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,MLE5DirectMode (*)(e5rt_io_port *,objc_object *,NSError * {__autoreleasing}*)>,MLE5PortBindStrategyKey::hash,std::equal_to<MLE5PortBindStrategyKey>,true>,std::__unordered_map_equal<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,MLE5DirectMode (*)(e5rt_io_port *,objc_object *,NSError * {__autoreleasing}*)>,std::equal_to<MLE5PortBindStrategyKey>,MLE5PortBindStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PortBindStrategyKey,MLE5DirectMode (*)(e5rt_io_port *,objc_object *,NSError * {__autoreleasing}*)>>>::__emplace_unique_key_args<MLE5PortBindStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PortBindStrategyKey&&>,std::tuple<>>((unsigned __int8 *)&v1, &v1)[4] = MLE5DirectOutputBackingModeBufferCopy;
  LOWORD(v1) = 513;
  BYTE2(v1) = 0;
  *((void *)&v1 + 1) = 0;
  std::__hash_table<std::__hash_value_type<MLE5PortBindStrategyKey,MLE5DirectMode (*)(e5rt_io_port *,objc_object *,NSError * {__autoreleasing}*)>,std::__unordered_map_hasher<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,MLE5DirectMode (*)(e5rt_io_port *,objc_object *,NSError * {__autoreleasing}*)>,MLE5PortBindStrategyKey::hash,std::equal_to<MLE5PortBindStrategyKey>,true>,std::__unordered_map_equal<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,MLE5DirectMode (*)(e5rt_io_port *,objc_object *,NSError * {__autoreleasing}*)>,std::equal_to<MLE5PortBindStrategyKey>,MLE5PortBindStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PortBindStrategyKey,MLE5DirectMode (*)(e5rt_io_port *,objc_object *,NSError * {__autoreleasing}*)>>>::__emplace_unique_key_args<MLE5PortBindStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PortBindStrategyKey&&>,std::tuple<>>((unsigned __int8 *)&v1, &v1)[4] = MLE5DirectOutputBackingModeBufferCopy;
  LOWORD(v1) = 257;
  BYTE2(v1) = 0;
  *((void *)&v1 + 1) = 0;
  vImage_Error result = std::__hash_table<std::__hash_value_type<MLE5PortBindStrategyKey,MLE5DirectMode (*)(e5rt_io_port *,objc_object *,NSError * {__autoreleasing}*)>,std::__unordered_map_hasher<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,MLE5DirectMode (*)(e5rt_io_port *,objc_object *,NSError * {__autoreleasing}*)>,MLE5PortBindStrategyKey::hash,std::equal_to<MLE5PortBindStrategyKey>,true>,std::__unordered_map_equal<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,MLE5DirectMode (*)(e5rt_io_port *,objc_object *,NSError * {__autoreleasing}*)>,std::equal_to<MLE5PortBindStrategyKey>,MLE5PortBindStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PortBindStrategyKey,MLE5DirectMode (*)(e5rt_io_port *,objc_object *,NSError * {__autoreleasing}*)>>>::__emplace_unique_key_args<MLE5PortBindStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PortBindStrategyKey&&>,std::tuple<>>((unsigned __int8 *)&v1, &v1);
  result[4] = MLE5DirectOutputBackingModeFromTensorToMultiArraySurface;
  return result;
}

void *std::__hash_table<std::__hash_value_type<MLE5PortBindStrategyKey,MLE5DirectMode (*)(e5rt_io_port *,objc_object *,NSError * {__autoreleasing}*)>,std::__unordered_map_hasher<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,MLE5DirectMode (*)(e5rt_io_port *,objc_object *,NSError * {__autoreleasing}*)>,MLE5PortBindStrategyKey::hash,std::equal_to<MLE5PortBindStrategyKey>,true>,std::__unordered_map_equal<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,MLE5DirectMode (*)(e5rt_io_port *,objc_object *,NSError * {__autoreleasing}*)>,std::equal_to<MLE5PortBindStrategyKey>,MLE5PortBindStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PortBindStrategyKey,MLE5DirectMode (*)(e5rt_io_port *,objc_object *,NSError * {__autoreleasing}*)>>>::__emplace_unique_key_args<MLE5PortBindStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PortBindStrategyKey&&>,std::tuple<>>(unsigned __int8 *a1, _OWORD *a2)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v6 = *((void *)a1 + 1);
  unint64_t v7 = ((unint64_t)*a1 << 24) | (v4 << 16) | (v5 << 8) | v6;
  unint64_t v8 = *((void *)&directOutputBackingModeFunctionTable(void)::table + 1);
  if (*((void *)&directOutputBackingModeFunctionTable(void)::table + 1))
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&directOutputBackingModeFunctionTable(void)::table + 8));
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v2 = ((unint64_t)*a1 << 24) | (v4 << 16) | (v5 << 8) | v6;
      if (v7 >= *((void *)&directOutputBackingModeFunctionTable(void)::table + 1)) {
        unint64_t v2 = v7 % *((void *)&directOutputBackingModeFunctionTable(void)::table + 1);
      }
    }
    else
    {
      unint64_t v2 = v7 & (*((void *)&directOutputBackingModeFunctionTable(void)::table + 1) - 1);
    }
    uint64_t v10 = *(void ***)(directOutputBackingModeFunctionTable(void)::table + 8 * v2);
    if (v10)
    {
      unint64_t v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((unsigned __int8 *)v11 + 16) == *a1
              && __PAIR64__(*((unsigned __int8 *)v11 + 18), *((unsigned __int8 *)v11 + 17)) == __PAIR64__(v5, v4)
              && v11[3] == v6)
            {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= *((void *)&directOutputBackingModeFunctionTable(void)::table + 1)) {
                v12 %= *((void *)&directOutputBackingModeFunctionTable(void)::table + 1);
              }
            }
            else
            {
              v12 &= *((void *)&directOutputBackingModeFunctionTable(void)::table + 1) - 1;
            }
            if (v12 != v2) {
              break;
            }
          }
          unint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  unint64_t v11 = operator new(0x28uLL);
  void *v11 = 0;
  v11[1] = v7;
  *((_OWORD *)v11 + 1) = *a2;
  v11[4] = 0;
  float v13 = (float)(unint64_t)(qword_1E945FD50 + 1);
  if (!v8 || (float)(*(float *)&dword_1E945FD58 * (float)v8) < v13)
  {
    BOOL v14 = 1;
    if (v8 >= 3) {
      BOOL v14 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v8);
    unint64_t v16 = vcvtps_u32_f32(v13 / *(float *)&dword_1E945FD58);
    if (v15 <= v16) {
      int8x8_t prime = (int8x8_t)v16;
    }
    else {
      int8x8_t prime = (int8x8_t)v15;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v8 = *((void *)&directOutputBackingModeFunctionTable(void)::table + 1);
    }
    if (*(void *)&prime > v8) {
      goto LABEL_32;
    }
    if (*(void *)&prime < v8)
    {
      unint64_t v24 = vcvtps_u32_f32((float)(unint64_t)qword_1E945FD50 / *(float *)&dword_1E945FD58);
      if (v8 < 3 || (uint8x8_t v25 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        unint64_t v24 = std::__next_prime(v24);
      }
      else
      {
        uint64_t v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2) {
          unint64_t v24 = v26;
        }
      }
      if (*(void *)&prime <= v24) {
        int8x8_t prime = (int8x8_t)v24;
      }
      if (*(void *)&prime >= v8)
      {
        unint64_t v8 = *((void *)&directOutputBackingModeFunctionTable(void)::table + 1);
      }
      else
      {
        if (prime)
        {
LABEL_32:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v18 = operator new(8 * *(void *)&prime);
          uint64_t v19 = (void *)directOutputBackingModeFunctionTable(void)::table;
          *(void *)&directOutputBackingModeFunctionTable(void)::table = v18;
          if (v19) {
            operator delete(v19);
          }
          uint64_t v20 = 0;
          *((int8x8_t *)&directOutputBackingModeFunctionTable(void)::table + 1) = prime;
          do
            *(void *)(directOutputBackingModeFunctionTable(void)::table + 8 * v20++) = 0;
          while (*(void *)&prime != v20);
          uint64_t v21 = (void **)qword_1E945FD48;
          if (qword_1E945FD48)
          {
            unint64_t v22 = *(void *)(qword_1E945FD48 + 8);
            uint8x8_t v23 = (uint8x8_t)vcnt_s8(prime);
            v23.i16[0] = vaddlv_u8(v23);
            if (v23.u32[0] > 1uLL)
            {
              if (v22 >= *(void *)&prime) {
                v22 %= *(void *)&prime;
              }
            }
            else
            {
              v22 &= *(void *)&prime - 1;
            }
            *(void *)(directOutputBackingModeFunctionTable(void)::table + 8 * v22) = &qword_1E945FD48;
            for (i = *v21; i; unint64_t v22 = v28)
            {
              unint64_t v28 = i[1];
              if (v23.u32[0] > 1uLL)
              {
                if (v28 >= *(void *)&prime) {
                  v28 %= *(void *)&prime;
                }
              }
              else
              {
                v28 &= *(void *)&prime - 1;
              }
              if (v28 != v22)
              {
                if (!*(void *)(directOutputBackingModeFunctionTable(void)::table + 8 * v28))
                {
                  *(void *)(directOutputBackingModeFunctionTable(void)::table + 8 * v28) = v21;
                  goto LABEL_57;
                }
                void *v21 = (void *)*i;
                void *i = **(void **)(directOutputBackingModeFunctionTable(void)::table + 8 * v28);
                **(void **)(directOutputBackingModeFunctionTable(void)::table + 8 * v28) = i;
                uint64_t i = v21;
              }
              unint64_t v28 = v22;
LABEL_57:
              uint64_t v21 = (void **)i;
              uint64_t i = (void *)*i;
            }
          }
          unint64_t v8 = (unint64_t)prime;
          goto LABEL_61;
        }
        size_t v33 = (void *)directOutputBackingModeFunctionTable(void)::table;
        *(void *)&directOutputBackingModeFunctionTable(void)::table = 0;
        if (v33) {
          operator delete(v33);
        }
        unint64_t v8 = 0;
        *((void *)&directOutputBackingModeFunctionTable(void)::table + 1) = 0;
      }
    }
LABEL_61:
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v2 = v7 % v8;
      }
      else {
        unint64_t v2 = v7;
      }
    }
    else
    {
      unint64_t v2 = (v8 - 1) & v7;
    }
  }
  uint64_t v29 = directOutputBackingModeFunctionTable(void)::table;
  vImage_Error v30 = *(void **)(directOutputBackingModeFunctionTable(void)::table + 8 * v2);
  if (v30)
  {
    void *v11 = *v30;
LABEL_74:
    *vImage_Error v30 = v11;
    goto LABEL_75;
  }
  void *v11 = qword_1E945FD48;
  qword_1E945FD48 = (uint64_t)v11;
  *(void *)(v29 + 8 * v2) = &qword_1E945FD48;
  if (*v11)
  {
    unint64_t v31 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v31 >= v8) {
        v31 %= v8;
      }
    }
    else
    {
      v31 &= v8 - 1;
    }
    vImage_Error v30 = (void *)(directOutputBackingModeFunctionTable(void)::table + 8 * v31);
    goto LABEL_74;
  }
LABEL_75:
  ++qword_1E945FD50;
  return v11;
}

void sub_19EA0A0BC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t MLE5DirectOutputBackingModeFromTensorToMultiArraySurface(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  MLE5TensorDescriptorOf((e5rt_io_port *)&v7);
  uint64_t v5 = MLE5CompareTensorAndMultiArrayMemoryLayout(v7, v4, a3);
  std::unique_ptr<e5rt_tensor_desc,MLE5ObjectDeleter<e5rt_tensor_desc>>::reset[abi:ne180100](&v7);

  return v5;
}

void sub_19EA0A144(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<e5rt_tensor_desc,MLE5ObjectDeleter<e5rt_tensor_desc>>::reset[abi:ne180100]((uint64_t *)va);

  _Unwind_Resume(a1);
}

uint64_t MLE5DirectOutputBackingModeBufferCopy()
{
  return 2;
}

uint64_t MLE5DirectOutputBackingModeFromTensorToPixelBufferSurface(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  MLE5TensorDescriptorOf((e5rt_io_port *)&v7);
  uint64_t v5 = MLE5CompareTensorAndPixelBufferMemoryLayout(v7, v4, a3);
  std::unique_ptr<e5rt_tensor_desc,MLE5ObjectDeleter<e5rt_tensor_desc>>::reset[abi:ne180100](&v7);

  return v5;
}

void sub_19EA0A1DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<e5rt_tensor_desc,MLE5ObjectDeleter<e5rt_tensor_desc>>::reset[abi:ne180100]((uint64_t *)va);

  _Unwind_Resume(a1);
}

void *___ZL30outputBackingBindFunctionTablev_block_invoke()
{
  LOWORD(v1) = 769;
  BYTE2(v1) = 0;
  *((void *)&v1 + 1) = 0;
  std::__hash_table<std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(e5rt_io_port *,objc_object *,NSError * {__autoreleasing}*)>,std::__unordered_map_hasher<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(e5rt_io_port *,objc_object *,NSError * {__autoreleasing}*)>,MLE5PortBindStrategyKey::hash,std::equal_to<MLE5PortBindStrategyKey>,true>,std::__unordered_map_equal<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(e5rt_io_port *,objc_object *,NSError * {__autoreleasing}*)>,std::equal_to<MLE5PortBindStrategyKey>,MLE5PortBindStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(e5rt_io_port *,objc_object *,NSError * {__autoreleasing}*)>>>::__emplace_unique_key_args<MLE5PortBindStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PortBindStrategyKey&&>,std::tuple<>>((unsigned __int8 *)&v1, &v1)[4] = MLE5BindPixelBufferOutputBackingToTensorPort;
  LOWORD(v1) = 257;
  BYTE2(v1) = 0;
  *((void *)&v1 + 1) = 0;
  std::__hash_table<std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(e5rt_io_port *,objc_object *,NSError * {__autoreleasing}*)>,std::__unordered_map_hasher<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(e5rt_io_port *,objc_object *,NSError * {__autoreleasing}*)>,MLE5PortBindStrategyKey::hash,std::equal_to<MLE5PortBindStrategyKey>,true>,std::__unordered_map_equal<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(e5rt_io_port *,objc_object *,NSError * {__autoreleasing}*)>,std::equal_to<MLE5PortBindStrategyKey>,MLE5PortBindStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(e5rt_io_port *,objc_object *,NSError * {__autoreleasing}*)>>>::__emplace_unique_key_args<MLE5PortBindStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PortBindStrategyKey&&>,std::tuple<>>((unsigned __int8 *)&v1, &v1)[4] = MLE5BindMultiArrayOutputBackingToTensorPort;
  LOWORD(v1) = 770;
  BYTE2(v1) = 0;
  *((void *)&v1 + 1) = 0;
  vImage_Error result = std::__hash_table<std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(e5rt_io_port *,objc_object *,NSError * {__autoreleasing}*)>,std::__unordered_map_hasher<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(e5rt_io_port *,objc_object *,NSError * {__autoreleasing}*)>,MLE5PortBindStrategyKey::hash,std::equal_to<MLE5PortBindStrategyKey>,true>,std::__unordered_map_equal<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(e5rt_io_port *,objc_object *,NSError * {__autoreleasing}*)>,std::equal_to<MLE5PortBindStrategyKey>,MLE5PortBindStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(e5rt_io_port *,objc_object *,NSError * {__autoreleasing}*)>>>::__emplace_unique_key_args<MLE5PortBindStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PortBindStrategyKey&&>,std::tuple<>>((unsigned __int8 *)&v1, &v1);
  result[4] = MLE5BindPixelBufferOutputBackingToSurfacePort;
  return result;
}

void *std::__hash_table<std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(e5rt_io_port *,objc_object *,NSError * {__autoreleasing}*)>,std::__unordered_map_hasher<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(e5rt_io_port *,objc_object *,NSError * {__autoreleasing}*)>,MLE5PortBindStrategyKey::hash,std::equal_to<MLE5PortBindStrategyKey>,true>,std::__unordered_map_equal<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(e5rt_io_port *,objc_object *,NSError * {__autoreleasing}*)>,std::equal_to<MLE5PortBindStrategyKey>,MLE5PortBindStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(e5rt_io_port *,objc_object *,NSError * {__autoreleasing}*)>>>::__emplace_unique_key_args<MLE5PortBindStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PortBindStrategyKey&&>,std::tuple<>>(unsigned __int8 *a1, _OWORD *a2)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v6 = *((void *)a1 + 1);
  unint64_t v7 = ((unint64_t)*a1 << 24) | (v4 << 16) | (v5 << 8) | v6;
  unint64_t v8 = *((void *)&outputBackingBindFunctionTable(void)::table + 1);
  if (*((void *)&outputBackingBindFunctionTable(void)::table + 1))
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&outputBackingBindFunctionTable(void)::table + 8));
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v2 = ((unint64_t)*a1 << 24) | (v4 << 16) | (v5 << 8) | v6;
      if (v7 >= *((void *)&outputBackingBindFunctionTable(void)::table + 1)) {
        unint64_t v2 = v7 % *((void *)&outputBackingBindFunctionTable(void)::table + 1);
      }
    }
    else
    {
      unint64_t v2 = v7 & (*((void *)&outputBackingBindFunctionTable(void)::table + 1) - 1);
    }
    uint64_t v10 = *(void ***)(outputBackingBindFunctionTable(void)::table + 8 * v2);
    if (v10)
    {
      unint64_t v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((unsigned __int8 *)v11 + 16) == *a1
              && __PAIR64__(*((unsigned __int8 *)v11 + 18), *((unsigned __int8 *)v11 + 17)) == __PAIR64__(v5, v4)
              && v11[3] == v6)
            {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= *((void *)&outputBackingBindFunctionTable(void)::table + 1)) {
                v12 %= *((void *)&outputBackingBindFunctionTable(void)::table + 1);
              }
            }
            else
            {
              v12 &= *((void *)&outputBackingBindFunctionTable(void)::table + 1) - 1;
            }
            if (v12 != v2) {
              break;
            }
          }
          unint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  unint64_t v11 = operator new(0x28uLL);
  void *v11 = 0;
  v11[1] = v7;
  *((_OWORD *)v11 + 1) = *a2;
  v11[4] = 0;
  float v13 = (float)(unint64_t)(qword_1E945FCF0 + 1);
  if (!v8 || (float)(*(float *)&dword_1E945FCF8 * (float)v8) < v13)
  {
    BOOL v14 = 1;
    if (v8 >= 3) {
      BOOL v14 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v8);
    unint64_t v16 = vcvtps_u32_f32(v13 / *(float *)&dword_1E945FCF8);
    if (v15 <= v16) {
      int8x8_t prime = (int8x8_t)v16;
    }
    else {
      int8x8_t prime = (int8x8_t)v15;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v8 = *((void *)&outputBackingBindFunctionTable(void)::table + 1);
    }
    if (*(void *)&prime > v8) {
      goto LABEL_32;
    }
    if (*(void *)&prime < v8)
    {
      unint64_t v24 = vcvtps_u32_f32((float)(unint64_t)qword_1E945FCF0 / *(float *)&dword_1E945FCF8);
      if (v8 < 3 || (uint8x8_t v25 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        unint64_t v24 = std::__next_prime(v24);
      }
      else
      {
        uint64_t v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2) {
          unint64_t v24 = v26;
        }
      }
      if (*(void *)&prime <= v24) {
        int8x8_t prime = (int8x8_t)v24;
      }
      if (*(void *)&prime >= v8)
      {
        unint64_t v8 = *((void *)&outputBackingBindFunctionTable(void)::table + 1);
      }
      else
      {
        if (prime)
        {
LABEL_32:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v18 = operator new(8 * *(void *)&prime);
          uint64_t v19 = (void *)outputBackingBindFunctionTable(void)::table;
          *(void *)&outputBackingBindFunctionTable(void)::table = v18;
          if (v19) {
            operator delete(v19);
          }
          uint64_t v20 = 0;
          *((int8x8_t *)&outputBackingBindFunctionTable(void)::table + 1) = prime;
          do
            *(void *)(outputBackingBindFunctionTable(void)::table + 8 * v20++) = 0;
          while (*(void *)&prime != v20);
          uint64_t v21 = (void **)qword_1E945FCE8;
          if (qword_1E945FCE8)
          {
            unint64_t v22 = *(void *)(qword_1E945FCE8 + 8);
            uint8x8_t v23 = (uint8x8_t)vcnt_s8(prime);
            v23.i16[0] = vaddlv_u8(v23);
            if (v23.u32[0] > 1uLL)
            {
              if (v22 >= *(void *)&prime) {
                v22 %= *(void *)&prime;
              }
            }
            else
            {
              v22 &= *(void *)&prime - 1;
            }
            *(void *)(outputBackingBindFunctionTable(void)::table + 8 * v22) = &qword_1E945FCE8;
            for (i = *v21; i; unint64_t v22 = v28)
            {
              unint64_t v28 = i[1];
              if (v23.u32[0] > 1uLL)
              {
                if (v28 >= *(void *)&prime) {
                  v28 %= *(void *)&prime;
                }
              }
              else
              {
                v28 &= *(void *)&prime - 1;
              }
              if (v28 != v22)
              {
                if (!*(void *)(outputBackingBindFunctionTable(void)::table + 8 * v28))
                {
                  *(void *)(outputBackingBindFunctionTable(void)::table + 8 * v28) = v21;
                  goto LABEL_57;
                }
                void *v21 = (void *)*i;
                void *i = **(void **)(outputBackingBindFunctionTable(void)::table + 8 * v28);
                **(void **)(outputBackingBindFunctionTable(void)::table + 8 * v28) = i;
                uint64_t i = v21;
              }
              unint64_t v28 = v22;
LABEL_57:
              uint64_t v21 = (void **)i;
              uint64_t i = (void *)*i;
            }
          }
          unint64_t v8 = (unint64_t)prime;
          goto LABEL_61;
        }
        size_t v33 = (void *)outputBackingBindFunctionTable(void)::table;
        *(void *)&outputBackingBindFunctionTable(void)::table = 0;
        if (v33) {
          operator delete(v33);
        }
        unint64_t v8 = 0;
        *((void *)&outputBackingBindFunctionTable(void)::table + 1) = 0;
      }
    }
LABEL_61:
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v2 = v7 % v8;
      }
      else {
        unint64_t v2 = v7;
      }
    }
    else
    {
      unint64_t v2 = (v8 - 1) & v7;
    }
  }
  uint64_t v29 = outputBackingBindFunctionTable(void)::table;
  vImage_Error v30 = *(void **)(outputBackingBindFunctionTable(void)::table + 8 * v2);
  if (v30)
  {
    void *v11 = *v30;
LABEL_74:
    *vImage_Error v30 = v11;
    goto LABEL_75;
  }
  void *v11 = qword_1E945FCE8;
  qword_1E945FCE8 = (uint64_t)v11;
  *(void *)(v29 + 8 * v2) = &qword_1E945FCE8;
  if (*v11)
  {
    unint64_t v31 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v31 >= v8) {
        v31 %= v8;
      }
    }
    else
    {
      v31 &= v8 - 1;
    }
    vImage_Error v30 = (void *)(outputBackingBindFunctionTable(void)::table + 8 * v31);
    goto LABEL_74;
  }
LABEL_75:
  ++qword_1E945FCF0;
  return v11;
}

void sub_19EA0A6DC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

BOOL MLE5BindPixelBufferOutputBackingToSurfacePort(int a1, CVPixelBufferRef pixelBuffer, void *a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  CVPixelBufferGetIOSurface(pixelBuffer);
  MLE5NewSurfaceObjectUsing((__IOSurface *)&v9);
  uint64_t v4 = e5rt_io_port_bind_surface_object();
  if (v4)
  {
    uint64_t v5 = +[MLLogging coreChannel];
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      uint64_t last_error_message = e5rt_get_last_error_message();
      *(_DWORD *)vImage_Buffer buf = 136315394;
      uint64_t v11 = last_error_message;
      __int16 v12 = 1024;
      int v13 = v4;
      _os_log_error_impl(&dword_19E58B000, v5, OS_LOG_TYPE_ERROR, "E5RT: %s (%d)", buf, 0x12u);
    }

    if (a3)
    {
      uint64_t v6 = +[MLModelErrorUtils genericErrorWithFormat:@"E5RT: %s (%d)", e5rt_get_last_error_message(), v4];
      *a3 = +[MLModelErrorUtils errorWithCode:1 underlyingError:v6 format:@"Failed to bind the output buffer object backed by the specified pixel buffer output backing object."];
    }
  }
  std::unique_ptr<e5rt_surface_object,MLE5ObjectDeleter<e5rt_surface_object>>::reset[abi:ne180100](&v9, 0);
  return v4 == 0;
}

void sub_19EA0A850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);

  std::unique_ptr<e5rt_surface_object,MLE5ObjectDeleter<e5rt_surface_object>>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

BOOL MLE5BindMultiArrayOutputBackingToTensorPort(uint64_t a1, void *a2, void *a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  CVPixelBufferGetIOSurface((CVPixelBufferRef)[a2 pixelBuffer]);
  MLE5NewBufferObjectUsing((__IOSurface *)&v9);
  uint64_t v4 = e5rt_io_port_bind_buffer_object();
  if (v4)
  {
    uint64_t v5 = +[MLLogging coreChannel];
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      uint64_t last_error_message = e5rt_get_last_error_message();
      *(_DWORD *)vImage_Buffer buf = 136315394;
      uint64_t v11 = last_error_message;
      __int16 v12 = 1024;
      int v13 = v4;
      _os_log_error_impl(&dword_19E58B000, v5, OS_LOG_TYPE_ERROR, "E5RT: %s (%d)", buf, 0x12u);
    }

    if (a3)
    {
      uint64_t v6 = +[MLModelErrorUtils genericErrorWithFormat:@"E5RT: %s (%d)", e5rt_get_last_error_message(), v4];
      *a3 = +[MLModelErrorUtils errorWithCode:1 underlyingError:v6 format:@"Failed to bind the output buffer object backed by the specified multi-array output backing object."];
    }
  }
  std::unique_ptr<e5rt_buffer_object,MLE5ObjectDeleter<e5rt_buffer_object>>::reset[abi:ne180100](&v9, 0);
  return v4 == 0;
}

void sub_19EA0A9F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);

  std::unique_ptr<e5rt_buffer_object,MLE5ObjectDeleter<e5rt_buffer_object>>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

BOOL MLE5BindPixelBufferOutputBackingToTensorPort(int a1, CVPixelBufferRef pixelBuffer, void *a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  CVPixelBufferGetIOSurface(pixelBuffer);
  MLE5NewBufferObjectUsing((__IOSurface *)&v9);
  uint64_t v4 = e5rt_io_port_bind_buffer_object();
  if (v4)
  {
    uint64_t v5 = +[MLLogging coreChannel];
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      uint64_t last_error_message = e5rt_get_last_error_message();
      *(_DWORD *)vImage_Buffer buf = 136315394;
      uint64_t v11 = last_error_message;
      __int16 v12 = 1024;
      int v13 = v4;
      _os_log_error_impl(&dword_19E58B000, v5, OS_LOG_TYPE_ERROR, "E5RT: %s (%d)", buf, 0x12u);
    }

    if (a3)
    {
      uint64_t v6 = +[MLModelErrorUtils genericErrorWithFormat:@"E5RT: %s (%d)", e5rt_get_last_error_message(), v4];
      *a3 = +[MLModelErrorUtils errorWithCode:1 underlyingError:v6 format:@"Failed to bind the output buffer object backed by the specified multi-array output backing object."];
    }
  }
  std::unique_ptr<e5rt_buffer_object,MLE5ObjectDeleter<e5rt_buffer_object>>::reset[abi:ne180100](&v9, 0);
  return v4 == 0;
}

void sub_19EA0AB8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);

  std::unique_ptr<e5rt_buffer_object,MLE5ObjectDeleter<e5rt_buffer_object>>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void anonymous namespace'::CollectEspressoConfigurationNames(std::vector<std::string> *a1, void *a2)
{
  a1->__begin_ = 0;
  a1->__end_ = 0;
  a1->__end_cap_.__value_ = 0;
  if (a2)
  {
    std::vector<std::string>::reserve(a1, a2[2]);
    uint64_t v6 = (void *)*a2;
    uint64_t v4 = a2 + 1;
    uint64_t v5 = v6;
    if (v6 != v4)
    {
      unint64_t end = (unint64_t)a1->__end_;
      do
      {
        unint64_t v8 = (long long *)(v5 + 4);
        if ((std::string *)end >= a1->__end_cap_.__value_)
        {
          unint64_t end = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)a1, v8);
        }
        else
        {
          std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a1, v8);
          end += 24;
        }
        a1->__end_ = (std::vector<std::string>::pointer)end;
        uint64_t v9 = (void *)v5[1];
        if (v9)
        {
          do
          {
            uint64_t v10 = v9;
            uint64_t v9 = (void *)*v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            uint64_t v10 = (void *)v5[2];
            BOOL v11 = *v10 == (void)v5;
            uint64_t v5 = v10;
          }
          while (!v11);
        }
        uint64_t v5 = v10;
      }
      while (v10 != v4);
    }
  }
}

void sub_19EA0AC88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void anonymous namespace'::GetDefaultShapes(uint64_t a1, void *a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  unint64_t v2 = a2 + 1;
  CFTypeID v3 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    while (1)
    {
      uint64_t Shape = CoreML::NNCompiler::MLShapeInfo::getShape((CoreML::NNCompiler::MLShapeInfo *)(v3 + 7));
      int v6 = *(_DWORD *)(Shape + 48);
      uint64_t v7 = CoreML::NNCompiler::MLShapeInfo::getShape((CoreML::NNCompiler::MLShapeInfo *)(v3 + 7));
      if (v6 == 2) {
        break;
      }
      if (*(_DWORD *)(v7 + 48) == 1)
      {
        __int16 v12 = *(uint64_t **)v7;
        int v13 = *(uint64_t **)(v7 + 8);
        unint64_t v14 = ((uint64_t)v13 - *(void *)v7) >> 3;
        uint64_t v22 = 0;
        long long v21 = 0uLL;
        std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<long long const*>,std::__wrap_iter<long long const*>>((char *)&v21, v12, v13, v14);
        uint8x8_t v23 = (long long *)(v3 + 4);
        BOOL v11 = std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a1, v3 + 4, &v23);
        goto LABEL_6;
      }
LABEL_9:
      uint64_t v18 = (void *)v3[1];
      if (v18)
      {
        do
        {
          uint64_t v19 = v18;
          uint64_t v18 = (void *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          uint64_t v19 = (void *)v3[2];
          BOOL v20 = *v19 == (void)v3;
          CFTypeID v3 = v19;
        }
        while (!v20);
      }
      CFTypeID v3 = v19;
      if (v19 == v2) {
        return;
      }
    }
    unint64_t v8 = *(uint64_t **)Shape;
    uint64_t v9 = *(uint64_t **)(Shape + 8);
    unint64_t v10 = ((uint64_t)v9 - *(void *)Shape) >> 3;
    uint64_t v22 = 0;
    long long v21 = 0uLL;
    std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<long long const*>,std::__wrap_iter<long long const*>>((char *)&v21, v8, v9, v10);
    uint8x8_t v23 = (long long *)(v3 + 4);
    BOOL v11 = std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a1, v3 + 4, &v23);
LABEL_6:
    unint64_t v15 = v11;
    uint64_t v17 = v11 + 7;
    unint64_t v16 = (void *)v11[7];
    if (v16)
    {
      v15[8] = (uint64_t)v16;
      operator delete(v16);
      void *v17 = 0;
      v17[1] = 0;
      v17[2] = 0;
    }
    *(_OWORD *)(v15 + 7) = v21;
    v15[9] = v22;
    goto LABEL_9;
  }
}

void sub_19EA0AE04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::destroy(*v9);
  _Unwind_Resume(a1);
}

void *anonymous namespace'::GetRangeShapes(void *result, void *a2)
{
  result[1] = 0;
  result[2] = 0;
  vImage_Error v30 = (char *)(result + 1);
  void *result = result + 1;
  unint64_t v2 = a2 + 1;
  CFTypeID v3 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    uint64_t v4 = (uint64_t **)result;
    do
    {
      vImage_Error result = (void *)CoreML::NNCompiler::MLShapeInfo::getShape((CoreML::NNCompiler::MLShapeInfo *)(v3 + 7));
      if (*((_DWORD *)result + 12) != 1) {
        goto LABEL_29;
      }
      uint64_t v5 = result;
      int v6 = (void **)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__find_equal<std::string>((uint64_t)v4, &v33, v3 + 4);
      uint64_t v7 = (char *)*v6;
      if (!*v6)
      {
        unint64_t v8 = (uint64_t **)v6;
        uint64_t v7 = (char *)operator new(0x68uLL);
        v31[0] = v7;
        v31[1] = v30;
        char v32 = 0;
        uint64_t v9 = (std::string *)(v7 + 32);
        if (*((char *)v3 + 55) < 0)
        {
          std::string::__init_copy_ctor_external(v9, (const std::string::value_type *)v3[4], v3[5]);
        }
        else
        {
          long long v10 = *((_OWORD *)v3 + 2);
          *((void *)v7 + 6) = v3[6];
          *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
        }
        *(_OWORD *)(v7 + 88) = 0u;
        *(_OWORD *)(v7 + 72) = 0u;
        *(_OWORD *)(v7 + 56) = 0u;
        char v32 = 1;
        std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(v4, v33, v8, (uint64_t *)v7);
        v31[0] = 0;
        std::unique_ptr<std::__tree_node<std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>,void *>>>>::reset[abi:ne180100]((uint64_t)v31);
      }
      vImage_Error result = v7 + 56;
      if (v7 + 56 == (char *)v5) {
        goto LABEL_29;
      }
      vImage_Error result = std::vector<long long>::__assign_with_size[abi:ne180100]<long long *,long long *>((char *)result, (char *)*v5, v5[1], (v5[1] - *v5) >> 3);
      BOOL v11 = (char *)*((void *)v7 + 10);
      __int16 v12 = (char *)v5[3];
      int v13 = (unsigned char *)v5[4];
      size_t v14 = v13 - v12;
      unint64_t v15 = (v13 - v12) >> 4;
      uint64_t v16 = *((void *)v7 + 12);
      if (v15 <= (v16 - (uint64_t)v11) >> 4)
      {
        uint64_t v22 = (char *)*((void *)v7 + 11);
        uint64_t v19 = (void **)(v7 + 88);
        long long v21 = v22;
        size_t v23 = v22 - v11;
        unint64_t v24 = (v22 - v11) >> 4;
        if (v24 < v15)
        {
          if (v21 != v11)
          {
            vImage_Error result = memmove(v11, v12, v23);
            BOOL v11 = (char *)*v19;
          }
          uint8x8_t v25 = &v12[16 * v24];
          size_t v14 = v13 - v25;
          if (v13 == v25) {
            goto LABEL_28;
          }
          uint64_t v26 = v11;
          goto LABEL_27;
        }
      }
      else
      {
        if (v11)
        {
          *((void *)v7 + 11) = v11;
          operator delete(v11);
          uint64_t v16 = 0;
          *((void *)v7 + 10) = 0;
          *((void *)v7 + 11) = 0;
          *((void *)v7 + 12) = 0;
        }
        if ((v14 & 0x8000000000000000) != 0) {
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v17 = v16 >> 3;
        if (v16 >> 3 <= v15) {
          uint64_t v17 = (v13 - v12) >> 4;
        }
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v18 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v18 = v17;
        }
        vImage_Error result = std::vector<CoreML::NNCompiler::MLRangeShape::Range>::__vallocate[abi:ne180100]((void *)v7 + 10, v18);
        BOOL v20 = (char *)*((void *)v7 + 11);
        uint64_t v19 = (void **)(v7 + 88);
        BOOL v11 = v20;
      }
      if (v13 != v12)
      {
        uint64_t v26 = v11;
        uint8x8_t v25 = v12;
LABEL_27:
        vImage_Error result = memmove(v26, v25, v14);
      }
LABEL_28:
      void *v19 = &v11[v14];
LABEL_29:
      vImage_Error v27 = (void *)v3[1];
      if (v27)
      {
        do
        {
          unint64_t v28 = v27;
          vImage_Error v27 = (void *)*v27;
        }
        while (v27);
      }
      else
      {
        do
        {
          unint64_t v28 = (void *)v3[2];
          BOOL v29 = *v28 == (void)v3;
          CFTypeID v3 = v28;
        }
        while (!v29);
      }
      CFTypeID v3 = v28;
    }
    while (v28 != v2);
  }
  return result;
}

void sub_19EA0B07C(_Unwind_Exception *a1, uint64_t a2, void **a3, ...)
{
  va_start(va, a3);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>>>::destroy(*a3);
  _Unwind_Resume(a1);
}

char *std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<long long const*>,std::__wrap_iter<long long const*>>(char *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  if (a4)
  {
    int v6 = result;
    vImage_Error result = std::vector<int>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = (_DWORD *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      uint64_t v8 = *a2++;
      *v7++ = v8;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_19EA0B100(_Unwind_Exception *exception_object)
{
  CFTypeID v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CoreML::NNCompiler::MLFunctionInfo::MLFunctionInfo(uint64_t a1, long long *a2, uint64_t a3, void *a4, void *a5, void *a6, uint64_t a7, long long *a8, char a9)
{
  long long v15 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v15;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  *(void *)(a1 + 24) = *a5;
  uint64_t v16 = (void *)(a1 + 24);
  uint64_t v17 = a5 + 1;
  uint64_t v18 = a5[1];
  *(void *)(a1 + 32) = v18;
  uint64_t v19 = a1 + 32;
  uint64_t v20 = a5[2];
  *(void *)(a1 + 40) = v20;
  if (v20)
  {
    *(void *)(v18 + 16) = v19;
    *a5 = v17;
    void *v17 = 0;
    a5[2] = 0;
  }
  else
  {
    void *v16 = v19;
  }
  *(void *)(a1 + 96) = *a6;
  long long v21 = a6 + 1;
  uint64_t v22 = a6[1];
  *(void *)(a1 + 104) = v22;
  uint64_t v23 = a1 + 104;
  uint64_t v24 = a6[2];
  *(void *)(a1 + 112) = v24;
  if (v24)
  {
    *(void *)(v22 + 16) = v23;
    *a6 = v21;
    void *v21 = 0;
    a6[2] = 0;
  }
  else
  {
    *(void *)(a1 + 96) = v23;
  }
  *(_OWORD *)(a1 + 168) = *(_OWORD *)a7;
  *(void *)a7 = 0;
  *(void *)(a7 + 8) = 0;
  *(void *)(a1 + 240) = 0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(void *)(a1 + 248) = *a4;
  uint64_t v25 = a1 + 256;
  uint64_t v26 = a4 + 1;
  uint64_t v27 = a4[1];
  *(void *)(a1 + 256) = v27;
  uint64_t v28 = a4[2];
  *(void *)(a1 + 264) = v28;
  if (v28)
  {
    *(void *)(v27 + 16) = v25;
    *a4 = v26;
    *uint64_t v26 = 0;
    a4[2] = 0;
  }
  else
  {
    *(void *)(a1 + 248) = v25;
  }
  *(_OWORD *)(a1 + 272) = *(_OWORD *)a3;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  long long v29 = *a8;
  *(void *)(a1 + 304) = *((void *)a8 + 2);
  *(_OWORD *)(a1 + 288) = v29;
  *((void *)a8 + 1) = 0;
  *((void *)a8 + 2) = 0;
  *(void *)a8 = 0;
  *(_WORD *)(a1 + 312) = 0;
  *(unsigned char *)(a1 + 314) = a9;
  *(_WORD *)(a1 + 315) = 0;
  *(unsigned char *)(a1 + 317) = 0;
  return a1;
}

void sub_19EA0B2C4(_Unwind_Exception *a1)
{
  CFTypeID v3 = *(std::__shared_weak_count **)(v1 + 176);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>>>::destroy(*(void **)(v1 + 152));
  std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::destroy(*(void **)(v1 + 128));
  std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>>>::destroy(*(void **)(v1 + 104));
  std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>>>::destroy(*(void **)(v1 + 80));
  std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::destroy(*(void **)(v1 + 56));
  std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>>>::destroy(*(void **)(v1 + 32));
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(a1);
}

void sub_19EA0B414(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA0B540(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA0B69C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Block_object_dispose(&a17, 8);

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__19653(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__19654(uint64_t a1)
{
}

void sub_19EA0B9E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26)
{
  _Block_object_dispose(&a21, 8);
  _Unwind_Resume(a1);
}

void sub_19EA0BE60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  __cxa_free_exception(v21);
  if (a16 < 0) {
    operator delete(__p);
  }
  _MLModelInputArchiver::~_MLModelInputArchiver((_MLModelInputArchiver *)&a17);

  if (a2 == 1)
  {
    uint64_t v24 = __cxa_begin_catch(a1);
    if (v19)
    {
      (*(void (**)(void *))(*(void *)v24 + 16))(v24);
      void *v19 = +[MLModelErrorUtils IOErrorWithFormat:@"Failed to read encryptionInfo: %s"];
    }
    unsigned char *v18 = 0;
    __cxa_end_catch();
    JUMPOUT(0x19EA0BDDCLL);
  }

  _Unwind_Resume(a1);
}

void *__copy_helper_atomic_property_(void *result, uint64_t a2)
{
  void *result = 0;
  result[1] = 0;
  result[2] = 0;
  CFTypeID v3 = *(const void **)a2;
  uint64_t v2 = *(void *)(a2 + 8);
  int64_t v4 = v2 - *(void *)a2;
  if (v2 != *(void *)a2)
  {
    uint64_t v5 = result;
    std::vector<_KDInterval>::__vallocate[abi:ne180100](result, v4 >> 3);
    int v6 = (char *)v5[1];
    vImage_Error result = memmove(v6, v3, v4);
    v5[1] = &v6[8 * (v4 >> 3)];
  }
  return result;
}

void sub_19EA0C0B0(_Unwind_Exception *exception_object)
{
  CFTypeID v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_19EA0C2E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_19EA0C358()
{
}

void sub_19EA0C360()
{
}

void sub_19EA0C3EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA0C504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19EA0C5D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA0C820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_19EA0C984(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19EA0CF0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  _MLModelInputArchiver::~_MLModelInputArchiver((_MLModelInputArchiver *)(v40 - 144));
  _Unwind_Resume(a1);
}

void sub_19EA0D0BC()
{
}

void sub_19EA0D168(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id neuralNetworkOutputFromArchive(void *a1)
{
  if ((*(unsigned int (**)(void))(*(void *)*a1 + 56))(*a1) == 1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "CompiledObject");
    uint64_t v2 = (*(void (**)(void, void **))(*(void *)*a1 + 40))(*a1, __p);
    if (v7 < 0) {
      operator delete(__p[0]);
    }
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      CFTypeID v3 = v2;
    }
    else {
      CFTypeID v3 = 0;
    }
    id v4 = v3;
  }
  else
  {
    id v4 = 0;
  }

  return v4;
}

void sub_19EA0D274(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

MIL::Attributes::IOAliasInfo *std::unique_ptr<MIL::Attributes::IOAliasInfo>::reset[abi:ne180100](MIL::Attributes::IOAliasInfo **a1)
{
  vImage_Error result = *a1;
  *a1 = 0;
  if (result)
  {
    MIL::Attributes::IOAliasInfo::~IOAliasInfo(result);
    JUMPOUT(0x19F3C1920);
  }
  return result;
}

void sub_19EA0E20C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__20079(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__20080(uint64_t a1)
{
}

void sub_19EA0EFE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29)
{
  if (__p) {
    operator delete(__p);
  }
  if (a22) {
    operator delete(a22);
  }

  _Unwind_Resume(a1);
}

void sub_19EA0F2FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA0F4B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }

  _Unwind_Resume(a1);
}

void sub_19EA0F748(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA0F868(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA0FB74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA101D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,void *a24)
{
  _Unwind_Resume(a1);
}

void CoreML::numericVectorFromObjC<long>(uint64_t a1, void *a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  std::vector<long long>::reserve((void **)a1, [v3 count]);
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  id v4 = v3;
  uint64_t v5 = [v4 countByEnumeratingWithState:&v22 objects:v26 count:16];
  if (v5)
  {
    uint64_t v6 = *(void *)v23;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v23 != v6) {
          objc_enumerationMutation(v4);
        }
        id v8 = *(id *)(*((void *)&v22 + 1) + 8 * i);
        uint64_t v9 = [v8 longValue];
        uint64_t v10 = v9;
        __int16 v12 = *(uint64_t **)(a1 + 8);
        unint64_t v11 = *(void *)(a1 + 16);
        if ((unint64_t)v12 >= v11)
        {
          size_t v14 = *(uint64_t **)a1;
          uint64_t v15 = ((uint64_t)v12 - *(void *)a1) >> 3;
          unint64_t v16 = v15 + 1;
          if ((unint64_t)(v15 + 1) >> 61) {
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v17 = v11 - (void)v14;
          if (v17 >> 2 > v16) {
            unint64_t v16 = v17 >> 2;
          }
          if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v18 = v16;
          }
          if (v18) {
            unint64_t v18 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<_KDInterval>>(v18);
          }
          else {
            uint64_t v19 = 0;
          }
          uint64_t v20 = (uint64_t *)(v18 + 8 * v15);
          *uint64_t v20 = v10;
          int v13 = v20 + 1;
          while (v12 != v14)
          {
            uint64_t v21 = *--v12;
            *--uint64_t v20 = v21;
          }
          *(void *)a1 = v20;
          *(void *)(a1 + 8) = v13;
          *(void *)(a1 + 16) = v18 + 8 * v19;
          if (v14) {
            operator delete(v14);
          }
        }
        else
        {
          uint64_t *v12 = v9;
          int v13 = v12 + 1;
        }
        *(void *)(a1 + 8) = v13;
      }
      uint64_t v5 = [v4 countByEnumeratingWithState:&v22 objects:v26 count:16];
    }
    while (v5);
  }
}

void sub_19EA1046C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  int v13 = *(void **)v10;
  if (*(void *)v10)
  {
    *(void *)(v10 + 8) = v13;
    operator delete(v13);
  }

  _Unwind_Resume(a1);
}

uint64_t *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[MLMultiArrayBufferLayout initWithShape:strides:]::$_0 &,unsigned long *>(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *result;
  uint64_t v6 = *(void *)(a4 + 8 * *a2);
  uint64_t v7 = *a3;
  uint64_t v8 = *(void *)(a4 + 8 * *a3);
  if (v6 >= *(void *)(a4 + 8 * *result))
  {
    if (v8 < v6)
    {
      *a2 = v7;
      *a3 = v4;
      uint64_t v9 = *result;
      if (*(void *)(a4 + 8 * *a2) < *(void *)(a4 + 8 * *result))
      {
        MIL::Attributes::IOAliasInfo *result = *a2;
        *a2 = v9;
      }
    }
  }
  else
  {
    if (v8 >= v6)
    {
      MIL::Attributes::IOAliasInfo *result = v4;
      *a2 = v5;
      if (*(void *)(a4 + 8 * *a3) >= *(void *)(a4 + 8 * v5)) {
        return result;
      }
      *a2 = *a3;
    }
    else
    {
      MIL::Attributes::IOAliasInfo *result = v7;
    }
    *a3 = v5;
  }
  return result;
}

uint64_t *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,-[MLMultiArrayBufferLayout initWithShape:strides:]::$_0 &,unsigned long *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t **a5)
{
  vImage_Error result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,[(MLMultiArrayBufferLayout *)a1 initWithShape:a3 strides:**a5];
  uint64_t v11 = *a3;
  uint64_t v12 = **a5;
  if (*(void *)(v12 + 8 * *a4) < *(void *)(v12 + 8 * *a3))
  {
    *a3 = *a4;
    *a4 = v11;
    uint64_t v13 = *a2;
    if (*(void *)(v12 + 8 * *a3) < *(void *)(v12 + 8 * *a2))
    {
      *a2 = *a3;
      *a3 = v13;
      uint64_t v14 = *a1;
      if (*(void *)(v12 + 8 * *a2) < *(void *)(v12 + 8 * *a1))
      {
        *a1 = *a2;
        *a2 = v14;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,-[MLMultiArrayBufferLayout initWithShape:strides:]::$_0 &,unsigned long *>(uint64_t *a1, uint64_t *a2, uint64_t **a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v8 = *(a2 - 1);
      uint64_t v9 = *a1;
      if (*(void *)(**a3 + 8 * v8) < *(void *)(**a3 + 8 * *a1))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,[(MLMultiArrayBufferLayout *)a1 initWithShape:a2 - 1 strides:**a3];
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,-[MLMultiArrayBufferLayout initWithShape:strides:]::$_0 &,unsigned long *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      uint64_t v20 = a1 + 1;
      uint64_t v21 = a1 + 2;
      long long v22 = a1 + 3;
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,-[MLMultiArrayBufferLayout initWithShape:strides:]::$_0 &,unsigned long *>(a1, a1 + 1, a1 + 2, a1 + 3, a3);
      uint64_t v23 = *(a2 - 1);
      uint64_t v24 = a1[3];
      uint64_t v25 = **a3;
      if (*(void *)(v25 + 8 * v23) < *(void *)(v25 + 8 * v24))
      {
        *long long v22 = v23;
        *(a2 - 1) = v24;
        uint64_t v26 = *v22;
        uint64_t v27 = *v21;
        if (*(void *)(v25 + 8 * *v22) < *(void *)(v25 + 8 * *v21))
        {
          uint64_t *v21 = v26;
          *long long v22 = v27;
          uint64_t v28 = *v20;
          if (*(void *)(v25 + 8 * v26) < *(void *)(v25 + 8 * *v20))
          {
            a1[1] = v26;
            a1[2] = v28;
            uint64_t v29 = *a1;
            if (*(void *)(v25 + 8 * v26) < *(void *)(v25 + 8 * *a1))
            {
              *a1 = v26;
              a1[1] = v29;
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v10 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,[(MLMultiArrayBufferLayout *)a1 initWithShape:a1 + 2 strides:**a3];
      uint64_t v11 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v12 = 0;
      uint64_t v13 = **a3;
      uint64_t v14 = 24;
      break;
  }
  while (1)
  {
    uint64_t v15 = *v11;
    uint64_t v16 = *v10;
    if (*(void *)(v13 + 8 * *v11) < *(void *)(v13 + 8 * *v10))
    {
      uint64_t v17 = v14;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v17) = v16;
        uint64_t v18 = v17 - 8;
        if (v17 == 8) {
          break;
        }
        uint64_t v16 = *(uint64_t *)((char *)a1 + v17 - 16);
        v17 -= 8;
        if (*(void *)(v13 + 8 * v15) >= *(void *)(v13 + 8 * v16))
        {
          uint64_t v19 = (uint64_t *)((char *)a1 + v18);
          goto LABEL_13;
        }
      }
      uint64_t v19 = a1;
LABEL_13:
      uint64_t *v19 = v15;
      if (++v12 == 8) {
        return v11 + 1 == a2;
      }
    }
    uint64_t v10 = v11;
    v14 += 8;
    if (++v11 == a2) {
      return 1;
    }
  }
}

void sub_19EA11304(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA113F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA11538(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA11668(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19EA11784(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t ModelKeyServerAPIResultErrorReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = *(void **)(a1 + 8);
        *(void *)(a1 + 8) = v17;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_19EA11E6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_19EA12214(_Unwind_Exception *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);

  v10[2](v10);
  ElapsedTimeRecorder::~ElapsedTimeRecorder((id *)va);

  _Unwind_Resume(a1);
}

void sub_19EA12368(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)MLAppleTextClassifier;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_19EA125A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA13288(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,std::__shared_weak_count *a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  if (a44) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a44);
  }

  _Unwind_Resume(a1);
}

void sub_19EA13B94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25)
{
  CoreML::Specification::CoreMLModels::TextClassifier::~TextClassifier((CoreML::Specification::CoreMLModels::TextClassifier *)&a17);
  if (a25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a25);
  }

  _Unwind_Resume(a1);
}

void sub_19EA13D7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA14018(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA14278(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA14470(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t CoreML::NNCompiler::Backend::MIL::Ios16Train::Ios16TrainBackend::Compile(CoreML::NNCompiler::Backend::MIL::Ios16Train::Ios16TrainBackend *this, OArchive *a2)
{
  v41[4] = *MEMORY[0x1E4F143B8];
  if ((*(unsigned int (**)(void))(**((void **)a2 + 1) + 48))(*((void *)a2 + 1)) == 1)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3C1380](exception, "Ios16TrainBackend doesn't support in-memory compilation.");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CoreML::NNCompiler::Backend::MIL::OptimizeProgram((CoreML::NNCompiler::Backend::MIL *)&v36, *((const IRProgram **)this + 1));
  std::string::basic_string[abi:ne180100]<0>(&v40, "classify");
  v41[0] = &unk_1EF0DD078;
  v41[1] = CoreML::NNCompiler::Backend::MIL::Ios15::Translations::TranslateClassify;
  v41[3] = v41;
  uint64_t v4 = (MIL::Opsets::Train::ios16Train::ios16_trainOpset *)std::unordered_map<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>::unordered_map((uint64_t)v39, (uint64_t)&v40, 1);
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 13;
  strcpy((char *)&__p, "CoreML6_train");
  uint64_t OpsetName = MIL::Opsets::Train::ios16Train::ios16_trainOpset::GetOpsetName(v4);
  std::string::size_type v7 = v6;
  if (v6 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  char v8 = (const void *)OpsetName;
  if (v6 >= 0x17)
  {
    uint64_t v10 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v10 = v6 | 7;
    }
    uint64_t v11 = v10 + 1;
    p_dst = (std::string *)operator new(v10 + 1);
    __dst.__r_.__value_.__l.__size_ = v7;
    __dst.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_9;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v6;
  p_dst = &__dst;
  if (v6) {
LABEL_9:
  }
    memmove(p_dst, v8, v7);
  p_dst->__r_.__value_.__s.__data_[v7] = 0;
  CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator::ProgramLayerTranslator((uint64_t)v34, (uint64_t *)v39, (long long *)&__p, (__n128 *)&__dst);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>>>::~__hash_table((uint64_t)v39);
  std::__function::__value_func<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>::~__value_func[abi:ne180100](v41);
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v40.__r_.__value_.__l.__data_);
  }
  v34[0] = &unk_1EF0CE4A0;
  CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator::Translate(&v35, (const IRProgram *)v34, v36);
  CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator::~ProgramLayerTranslator(v34);
  CoreML::NNCompiler::Backend::MIL::MILMetadataUtils::SetAttributesForFunctions((uint64_t)v35, *((void *)this + 3));
  MIL::Util::FindBlobFilePaths((uint64_t *)v34, v35, v12);
  char v13 = v35;
  uint64_t v14 = *((void *)this + 3);
  uint64_t v15 = *(unsigned int *)(v14 + 120);
  uint64_t v16 = *((void *)a2 + 1);
  if (*(char *)(v16 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(&v40, *(const std::string::value_type **)(v16 + 32), *(void *)(v16 + 40));
    uint64_t v14 = *((void *)this + 3);
  }
  else
  {
    std::string v40 = *(std::string *)(v16 + 32);
  }
  CoreML::NNCompiler::Backend::MIL::WriteProgram((uint64_t)v13, v15, (char *)&v40, v14 + 56);
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v40.__r_.__value_.__l.__data_);
  }
  CoreML::NNCompiler::Backend::MetadataUtils::WriteMetadataIos15(*((void *)this + 3), (uint64_t)a2);
  CoreML::NNCompiler::Backend::MIL::CopyWeights((uint64_t *)(*((void *)this + 3) + 56), (uint64_t **)v34, (uint64_t)a2);
  uint64_t v17 = *((void *)a2 + 1);
  if (*(char *)(v17 + 55) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v17 + 32), *(void *)(v17 + 40));
  }
  else {
    std::string __p = *(std::string *)(v17 + 32);
  }
  v39[0].__pn_ = __p;
  memset(&__p, 0, sizeof(__p));
  std::__fs::filesystem::path::path[abi:ne180100]<char [10],void>(&__dst, "model.mil");
  std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&__dst, (uint64_t)v39, (std::__fs::filesystem::path *)&v40);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v39[0].__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v39[0].__pn_.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v18 = *((void *)a2 + 1);
  if (*(char *)(v18 + 55) < 0) {
    std::string::__init_copy_ctor_external(&__dst, *(const std::string::value_type **)(v18 + 32), *(void *)(v18 + 40));
  }
  else {
    std::string __dst = *(std::string *)(v18 + 32);
  }
  std::string __p = __dst;
  memset(&__dst, 0, sizeof(__dst));
  memset(&v33, 0, sizeof(v33));
  std::string::append[abi:ne180100]<char const*,0>(&v33.__pn_, "model_train.mil", "");
  std::__fs::filesystem::operator/[abi:ne180100](&v33, (uint64_t)&__p, v39);
  if (SHIBYTE(v33.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__pn_.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  if (espresso_generate_training_program())
  {
    unint64_t v31 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3C1380](v31, "Cannot generate training program.");
    __cxa_throw(v31, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v19 = [MEMORY[0x1E4F28CB8] defaultManager];
  uint64_t v20 = (void *)MEMORY[0x1E4F1CB10];
  if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v21 = &v40;
  }
  else {
    uint64_t v21 = (std::string *)v40.__r_.__value_.__r.__words[0];
  }
  long long v22 = [NSString stringWithUTF8String:v21];
  uint64_t v23 = [v20 fileURLWithPath:v22];

  uint64_t v24 = (void *)MEMORY[0x1E4F1CB10];
  if ((v39[0].__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v25 = v39;
  }
  else {
    uint64_t v25 = (std::__fs::filesystem::path *)v39[0].__pn_.__r_.__value_.__r.__words[0];
  }
  uint64_t v26 = [NSString stringWithUTF8String:v25];
  uint64_t v27 = [v24 fileURLWithPath:v26];

  if (([v19 replaceItemAtURL:v23 withItemAtURL:v27 backupItemName:0 options:0 resultingItemURL:0 error:0] & 1) == 0)
  {
    [v19 removeItemAtURL:v27 error:0];
    char v32 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3C1380](v32, "Cannot save training program.");
    __cxa_throw(v32, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }

  if (SHIBYTE(v39[0].__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v39[0].__pn_.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v40.__r_.__value_.__l.__data_);
  }
  v40.__r_.__value_.__r.__words[0] = (std::string::size_type)v34;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
  uint64_t v28 = v35;
  size_t v35 = 0;
  if (v28) {
    (*(void (**)(MIL::Util *))(*(void *)v28 + 8))(v28);
  }
  uint64_t result = v36;
  uint64_t v36 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_19EA1576C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  __cxa_free_exception(v45);

  if (*(char *)(v46 - 169) < 0) {
    operator delete(*(void **)(v46 - 192));
  }
  if (*(char *)(v46 - 121) < 0) {
    operator delete(*(void **)(v46 - 144));
  }
  *(void *)(v46 - 144) = &a16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v46 - 144));
  uint64_t v48 = a28;
  a28 = 0;
  if (v48) {
    (*(void (**)(uint64_t))(*(void *)v48 + 8))(v48);
  }
  uint64_t v49 = a29;
  a29 = 0;
  if (v49) {
    (*(void (**)(uint64_t))(*(void *)v49 + 8))(v49);
  }
  _Unwind_Resume(a1);
}

void CoreML::NNCompiler::Backend::MIL::Ios16Train::Ios16TrainBackend::~Ios16TrainBackend(CoreML::NNCompiler::Backend::MIL::Ios16Train::Ios16TrainBackend *this)
{
  CoreML::NNCompiler::Backend::MIL::Ios16Train::Ios16TrainBackend::~Ios16TrainBackend(this);

  JUMPOUT(0x19F3C1920);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *(void *)this = &unk_1EF0CE478;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  id v3 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void sub_19EA162C4(_Unwind_Exception *a1)
{
  if (v3) {
    operator delete(v3);
  }

  _Unwind_Resume(a1);
}

void sub_19EA164A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_19EA16760(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (v13) {
    operator delete(v13);
  }

  _Unwind_Resume(a1);
}

void sub_19EA1688C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19EA16D2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

float *std::__introsort<std::_ClassicAlgPolicy,CoreML::CompareIndexDistancePairs &,std::pair<unsigned long,float> *,false>(float *result, float *a2, uint64_t a3, char a4)
{
  unsigned int v9 = result;
  while (2)
  {
    uint64_t v10 = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          unsigned int v9 = v10;
          uint64_t v11 = (char *)a2 - (char *)v10;
          unint64_t v12 = ((char *)a2 - (char *)v10) >> 4;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                float v45 = *(a2 - 2);
                float v46 = v10[2];
                if (v45 < v46)
                {
                  uint64_t v47 = *(void *)v10;
                  *(void *)uint64_t v10 = *((void *)a2 - 2);
                  *((void *)a2 - 2) = v47;
                  v10[2] = v45;
                  *(a2 - 2) = v46;
                }
                break;
              case 3uLL:
                uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CoreML::CompareIndexDistancePairs &,std::pair<unsigned long,float> *>(v10, v10 + 4, a2 - 4);
                break;
              case 4uLL:
                uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CoreML::CompareIndexDistancePairs &,std::pair<unsigned long,float> *>(v10, v10 + 4, v10 + 8, (uint64_t)(a2 - 4));
                break;
              case 5uLL:
                uint64_t result = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,CoreML::CompareIndexDistancePairs &,std::pair<unsigned long,float> *>(v10, v10 + 4, v10 + 8, (uint64_t)(v10 + 12), (uint64_t)(a2 - 4));
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v11 <= 383)
          {
            uint64_t v48 = v10 + 4;
            BOOL v50 = v10 == a2 || v48 == a2;
            if (a4)
            {
              if (!v50)
              {
                uint64_t v51 = 0;
                v52 = v10;
                do
                {
                  v53 = v48;
                  float v54 = v52[6];
                  if (v54 < v52[2])
                  {
                    uint64_t v55 = *((void *)v52 + 2);
                    uint64_t v56 = v51;
                    while (1)
                    {
                      v57 = (char *)v10 + v56;
                      *((void *)v57 + 2) = *(void *)((char *)v10 + v56);
                      *((float *)v57 + 6) = *(float *)((char *)v10 + v56 + 8);
                      if (!v56) {
                        break;
                      }
                      v56 -= 16;
                      if (v54 >= *((float *)v57 - 2))
                      {
                        uint64_t v58 = (uint64_t)v10 + v56 + 16;
                        goto LABEL_84;
                      }
                    }
                    uint64_t v58 = (uint64_t)v10;
LABEL_84:
                    *(void *)uint64_t v58 = v55;
                    *(float *)(v58 + 8) = v54;
                  }
                  uint64_t v48 = v53 + 4;
                  v51 += 16;
                  v52 = v53;
                }
                while (v53 + 4 != a2);
              }
            }
            else if (!v50)
            {
              v85 = v10 + 2;
              do
              {
                v86 = v48;
                float v87 = v9[6];
                if (v87 < v9[2])
                {
                  uint64_t v88 = *((void *)v9 + 2);
                  v89 = v85;
                  do
                  {
                    *((void *)v89 + 1) = *((void *)v89 - 1);
                    v89[4] = *v89;
                    float v90 = *(v89 - 4);
                    v89 -= 4;
                  }
                  while (v87 < v90);
                  *((void *)v89 + 1) = v88;
                  v89[4] = v87;
                }
                uint64_t v48 = v86 + 4;
                v85 += 4;
                unsigned int v9 = v86;
              }
              while (v86 + 4 != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v59 = (v12 - 2) >> 1;
              int64_t v60 = v59;
              do
              {
                int64_t v61 = v60;
                if (v59 >= v60)
                {
                  uint64_t v62 = (2 * v60) | 1;
                  v63 = &v10[4 * v62];
                  if (2 * v61 + 2 < (uint64_t)v12 && v63[2] < v63[6])
                  {
                    v63 += 4;
                    uint64_t v62 = 2 * v61 + 2;
                  }
                  v64 = &v10[4 * v61];
                  float v65 = v64[2];
                  if (v63[2] >= v65)
                  {
                    uint64_t v66 = *(void *)v64;
                    do
                    {
                      v67 = v64;
                      v64 = v63;
                      *(void *)v67 = *(void *)v63;
                      v67[2] = v63[2];
                      if (v59 < v62) {
                        break;
                      }
                      uint64_t v68 = 2 * v62;
                      uint64_t v62 = (2 * v62) | 1;
                      v63 = &v10[4 * v62];
                      uint64_t v69 = v68 + 2;
                      if (v69 < (uint64_t)v12 && v63[2] < v63[6])
                      {
                        v63 += 4;
                        uint64_t v62 = v69;
                      }
                    }
                    while (v63[2] >= v65);
                    *(void *)v64 = v66;
                    v64[2] = v65;
                  }
                }
                int64_t v60 = v61 - 1;
              }
              while (v61);
              uint64_t v70 = (unint64_t)v11 >> 4;
              do
              {
                uint64_t v71 = 0;
                uint64_t v72 = *(void *)v10;
                int v73 = *((_DWORD *)v10 + 2);
                v74 = v10;
                do
                {
                  v75 = v74;
                  v74 += 4 * v71 + 4;
                  uint64_t v76 = 2 * v71;
                  uint64_t v71 = (2 * v71) | 1;
                  uint64_t v77 = v76 + 2;
                  if (v77 < v70 && v74[2] < v74[6])
                  {
                    v74 += 4;
                    uint64_t v71 = v77;
                  }
                  *(void *)v75 = *(void *)v74;
                  v75[2] = v74[2];
                }
                while (v71 <= (uint64_t)((unint64_t)(v70 - 2) >> 1));
                if (v74 == a2 - 4)
                {
                  *(void *)v74 = v72;
                  *((_DWORD *)v74 + 2) = v73;
                }
                else
                {
                  *(void *)v74 = *((void *)a2 - 2);
                  v74[2] = *(a2 - 2);
                  *((void *)a2 - 2) = v72;
                  *((_DWORD *)a2 - 2) = v73;
                  uint64_t v78 = (char *)v74 - (char *)v10 + 16;
                  if (v78 >= 17)
                  {
                    unint64_t v79 = (unint64_t)((v78 >> 4) - 2) >> 1;
                    v80 = &v10[4 * v79];
                    float v81 = v74[2];
                    if (v80[2] < v81)
                    {
                      uint64_t v82 = *(void *)v74;
                      do
                      {
                        v83 = v74;
                        v74 = v80;
                        *(void *)v83 = *(void *)v80;
                        v83[2] = v80[2];
                        if (!v79) {
                          break;
                        }
                        unint64_t v79 = (v79 - 1) >> 1;
                        v80 = &v10[4 * v79];
                      }
                      while (v80[2] < v81);
                      *(void *)v74 = v82;
                      v74[2] = v81;
                    }
                  }
                }
                a2 -= 4;
              }
              while (v70-- > 2);
            }
            return result;
          }
          unint64_t v13 = v12 >> 1;
          uint64_t v14 = &v10[4 * (v12 >> 1)];
          if ((unint64_t)v11 >= 0x801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CoreML::CompareIndexDistancePairs &,std::pair<unsigned long,float> *>(v9, &v9[4 * (v12 >> 1)], a2 - 4);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CoreML::CompareIndexDistancePairs &,std::pair<unsigned long,float> *>(v9 + 4, v14 - 4, a2 - 8);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CoreML::CompareIndexDistancePairs &,std::pair<unsigned long,float> *>(v9 + 8, &v9[4 * v13 + 4], a2 - 12);
            uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CoreML::CompareIndexDistancePairs &,std::pair<unsigned long,float> *>(v14 - 4, v14, &v9[4 * v13 + 4]);
            uint64_t v15 = *(void *)v9;
            *(void *)unsigned int v9 = *(void *)v14;
            *(void *)uint64_t v14 = v15;
            int v16 = *((_DWORD *)v9 + 2);
            v9[2] = v14[2];
            *((_DWORD *)v14 + 2) = v16;
          }
          else
          {
            uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CoreML::CompareIndexDistancePairs &,std::pair<unsigned long,float> *>(&v9[4 * (v12 >> 1)], v9, a2 - 4);
          }
          --a3;
          if (a4) {
            break;
          }
          float v17 = v9[2];
          float v18 = v17;
          if (*(v9 - 2) < v17) {
            goto LABEL_13;
          }
          if (v17 >= *(a2 - 2))
          {
            size_t v35 = v9 + 4;
            do
            {
              uint64_t v10 = v35;
              if (v35 >= a2) {
                break;
              }
              float v36 = v35[2];
              v35 += 4;
            }
            while (v17 >= v36);
          }
          else
          {
            std::__fs::filesystem::path v33 = v9;
            do
            {
              uint64_t v10 = v33 + 4;
              float v34 = v33[6];
              v33 += 4;
            }
            while (v17 >= v34);
          }
          v37 = a2;
          if (v10 < a2)
          {
            uint64_t v38 = a2;
            do
            {
              v37 = v38 - 4;
              float v39 = *(v38 - 2);
              v38 -= 4;
            }
            while (v17 < v39);
          }
          uint64_t v40 = *(void *)v9;
          while (v10 < v37)
          {
            uint64_t v41 = *(void *)v10;
            *(void *)uint64_t v10 = *(void *)v37;
            *(void *)v37 = v41;
            int v42 = *((_DWORD *)v10 + 2);
            v10[2] = v37[2];
            *((_DWORD *)v37 + 2) = v42;
            do
            {
              float v43 = v10[6];
              v10 += 4;
            }
            while (v17 >= v43);
            do
            {
              float v44 = *(v37 - 2);
              v37 -= 4;
            }
            while (v17 < v44);
          }
          BOOL v4 = v10 - 4 >= v9;
          BOOL v5 = v10 - 4 == v9;
          if (v10 - 4 != v9)
          {
            *(void *)unsigned int v9 = *((void *)v10 - 2);
            v9[2] = *(v10 - 2);
          }
          a4 = 0;
          *((void *)v10 - 2) = v40;
          *(v10 - 2) = v17;
        }
        float v17 = v9[2];
        float v18 = v17;
LABEL_13:
        uint64_t v19 = *(void *)v9;
        uint64_t v20 = v9;
        do
        {
          uint64_t v21 = v20;
          v20 += 4;
        }
        while (v18 > v21[6]);
        long long v22 = a2;
        if (v21 == v9)
        {
          uint64_t v25 = a2;
          while (v20 < v25)
          {
            uint64_t v23 = v25 - 4;
            float v26 = *(v25 - 2);
            v25 -= 4;
            if (v18 > v26) {
              goto LABEL_23;
            }
          }
          uint64_t v23 = v25;
        }
        else
        {
          do
          {
            uint64_t v23 = v22 - 4;
            float v24 = *(v22 - 2);
            v22 -= 4;
          }
          while (v18 <= v24);
        }
LABEL_23:
        uint64_t v10 = v20;
        if (v20 < v23)
        {
          unint64_t v27 = (unint64_t)v23;
          do
          {
            uint64_t v28 = *(void *)v10;
            *(void *)uint64_t v10 = *(void *)v27;
            *(void *)unint64_t v27 = v28;
            int v29 = *((_DWORD *)v10 + 2);
            v10[2] = *(float *)(v27 + 8);
            *(_DWORD *)(v27 + 8) = v29;
            do
            {
              float v30 = v10[6];
              v10 += 4;
            }
            while (v18 > v30);
            do
            {
              float v31 = *(float *)(v27 - 8);
              v27 -= 16;
            }
            while (v18 <= v31);
          }
          while ((unint64_t)v10 < v27);
        }
        if (v10 - 4 != v9)
        {
          *(void *)unsigned int v9 = *((void *)v10 - 2);
          v9[2] = *(v10 - 2);
        }
        *((void *)v10 - 2) = v19;
        *(v10 - 2) = v17;
        if (v20 >= v23) {
          break;
        }
LABEL_34:
        uint64_t result = (float *)std::__introsort<std::_ClassicAlgPolicy,CoreML::CompareIndexDistancePairs &,std::pair<unsigned long,float> *,false>(v9, v10 - 4, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v32 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,CoreML::CompareIndexDistancePairs &,std::pair<unsigned long,float> *>(v9, v10 - 4);
      uint64_t result = (float *)std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,CoreML::CompareIndexDistancePairs &,std::pair<unsigned long,float> *>(v10, a2);
      if (result) {
        break;
      }
      if (!v32) {
        goto LABEL_34;
      }
    }
    a2 = v10 - 4;
    if (!v32) {
      continue;
    }
    return result;
  }
}

float *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CoreML::CompareIndexDistancePairs &,std::pair<unsigned long,float> *>(float *result, float *a2, float *a3)
{
  uint64_t v3 = *(void *)a2;
  float v4 = a2[2];
  float v5 = result[2];
  float v6 = a3[2];
  if (v4 >= v5)
  {
    if (v6 < v4)
    {
      *(void *)a2 = *(void *)a3;
      *(void *)a3 = v3;
      a2[2] = v6;
      a3[2] = v4;
      float v8 = a2[2];
      float v9 = result[2];
      if (v8 < v9)
      {
        uint64_t v10 = *(void *)result;
        *(void *)uint64_t result = *(void *)a2;
        *(void *)a2 = v10;
        result[2] = v8;
        a2[2] = v9;
      }
    }
  }
  else
  {
    uint64_t v7 = *(void *)result;
    if (v6 >= v4)
    {
      *(void *)uint64_t result = v3;
      *(void *)a2 = v7;
      result[2] = v4;
      a2[2] = v5;
      float v11 = a3[2];
      if (v11 >= v5) {
        return result;
      }
      *(void *)a2 = *(void *)a3;
      *(void *)a3 = v7;
      a2[2] = v11;
    }
    else
    {
      *(void *)uint64_t result = *(void *)a3;
      *(void *)a3 = v7;
      result[2] = v6;
    }
    a3[2] = v5;
  }
  return result;
}

float *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CoreML::CompareIndexDistancePairs &,std::pair<unsigned long,float> *>(float *a1, float *a2, float *a3, uint64_t a4)
{
  uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CoreML::CompareIndexDistancePairs &,std::pair<unsigned long,float> *>(a1, a2, a3);
  float v9 = *(float *)(a4 + 8);
  float v10 = a3[2];
  if (v9 < v10)
  {
    uint64_t v11 = *(void *)a3;
    *(void *)a3 = *(void *)a4;
    *(void *)a4 = v11;
    a3[2] = v9;
    *(float *)(a4 + 8) = v10;
    float v12 = a3[2];
    float v13 = a2[2];
    if (v12 < v13)
    {
      uint64_t v14 = *(void *)a2;
      *(void *)a2 = *(void *)a3;
      *(void *)a3 = v14;
      a2[2] = v12;
      a3[2] = v13;
      float v15 = a2[2];
      float v16 = a1[2];
      if (v15 < v16)
      {
        uint64_t v17 = *(void *)a1;
        *(void *)a1 = *(void *)a2;
        *(void *)a2 = v17;
        a1[2] = v15;
        a2[2] = v16;
      }
    }
  }
  return result;
}

float *std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,CoreML::CompareIndexDistancePairs &,std::pair<unsigned long,float> *>(float *a1, float *a2, float *a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CoreML::CompareIndexDistancePairs &,std::pair<unsigned long,float> *>(a1, a2, a3, a4);
  float v11 = *(float *)(a5 + 8);
  float v12 = *(float *)(a4 + 8);
  if (v11 < v12)
  {
    uint64_t v13 = *(void *)a4;
    *(void *)a4 = *(void *)a5;
    *(void *)a5 = v13;
    *(float *)(a4 + 8) = v11;
    *(float *)(a5 + 8) = v12;
    float v14 = *(float *)(a4 + 8);
    float v15 = a3[2];
    if (v14 < v15)
    {
      uint64_t v16 = *(void *)a3;
      *(void *)a3 = *(void *)a4;
      *(void *)a4 = v16;
      a3[2] = v14;
      *(float *)(a4 + 8) = v15;
      float v17 = a3[2];
      float v18 = a2[2];
      if (v17 < v18)
      {
        uint64_t v19 = *(void *)a2;
        *(void *)a2 = *(void *)a3;
        *(void *)a3 = v19;
        a2[2] = v17;
        a3[2] = v18;
        float v20 = a2[2];
        float v21 = a1[2];
        if (v20 < v21)
        {
          uint64_t v22 = *(void *)a1;
          *(void *)a1 = *(void *)a2;
          *(void *)a2 = v22;
          a1[2] = v20;
          a2[2] = v21;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,CoreML::CompareIndexDistancePairs &,std::pair<unsigned long,float> *>(float *a1, float *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      float v6 = *(a2 - 2);
      float v7 = a1[2];
      if (v6 < v7)
      {
        uint64_t v8 = *(void *)a1;
        *(void *)a1 = *((void *)a2 - 2);
        *((void *)a2 - 2) = v8;
        a1[2] = v6;
        *(a2 - 2) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CoreML::CompareIndexDistancePairs &,std::pair<unsigned long,float> *>(a1, a1 + 4, a2 - 4);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CoreML::CompareIndexDistancePairs &,std::pair<unsigned long,float> *>(a1, a1 + 4, a1 + 8, (uint64_t)(a2 - 4));
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,CoreML::CompareIndexDistancePairs &,std::pair<unsigned long,float> *>(a1, a1 + 4, a1 + 8, (uint64_t)(a1 + 12), (uint64_t)(a2 - 4));
      return 1;
    default:
      float v9 = a1 + 8;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CoreML::CompareIndexDistancePairs &,std::pair<unsigned long,float> *>(a1, a1 + 4, a1 + 8);
      float v10 = a1 + 12;
      if (a1 + 12 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    float v13 = v10[2];
    if (v13 < v9[2])
    {
      uint64_t v14 = *(void *)v10;
      uint64_t v15 = v11;
      while (1)
      {
        uint64_t v16 = (char *)a1 + v15;
        *((void *)v16 + 6) = *(void *)((char *)a1 + v15 + 32);
        *((float *)v16 + 14) = *(float *)((char *)a1 + v15 + 40);
        if (v15 == -32) {
          break;
        }
        v15 -= 16;
        if (v13 >= *((float *)v16 + 6))
        {
          uint64_t v17 = (uint64_t)a1 + v15 + 48;
          goto LABEL_12;
        }
      }
      uint64_t v17 = (uint64_t)a1;
LABEL_12:
      *(void *)uint64_t v17 = v14;
      *(float *)(v17 + 8) = v13;
      if (++v12 == 8) {
        return v10 + 4 == a2;
      }
    }
    float v9 = v10;
    v11 += 16;
    v10 += 4;
    if (v10 == a2) {
      return 1;
    }
  }
}

void sub_19EA17CD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  if (__p) {
    operator delete(__p);
  }
  float v24 = *(void **)(v22 - 104);
  if (v24)
  {
    *(void *)(v22 - 96) = v24;
    operator delete(v24);
  }
  if (a15) {
    operator delete(a15);
  }
  if (a18) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

void sub_19EA1805C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }

  _Unwind_Resume(a1);
}

void sub_19EA183F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19EA18794(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19EA18B34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, void *a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19EA18D38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA18E44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA18E8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::__shuffle[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<long *>,std::__wrap_iter<long *>,std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u> &>(unint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((uint64_t)(a2 - a1) >= 9)
  {
    uint64_t v4 = (uint64_t *)a1;
    unint64_t v5 = a2 - 8;
    if (a2 - 8 > a1)
    {
      unint64_t v7 = (a2 - a1) >> 3;
      do
      {
        if (v7 != 1)
        {
          if (v7)
          {
            unint64_t v8 = __clz(v7);
            if (((v7 << v8) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
              uint64_t v9 = 64;
            }
            else {
              uint64_t v9 = 63;
            }
            std::__independent_bits_engine<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>,unsigned long>::__independent_bits_engine((uint64_t)v13, a3, v9 - v8);
            do
              unint64_t v10 = std::__independent_bits_engine<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>,unsigned long>::__eval((uint64_t)v13);
            while (v10 >= v7);
            if (!v10) {
              goto LABEL_13;
            }
          }
          else
          {
            std::__independent_bits_engine<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>,unsigned long>::__independent_bits_engine((uint64_t)v13, a3, 0x40uLL);
            unint64_t v10 = std::__independent_bits_engine<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>,unsigned long>::__eval((uint64_t)v13);
            if (!v10) {
              goto LABEL_13;
            }
          }
          uint64_t v11 = *v4;
          uint64_t *v4 = v4[v10];
          v4[v10] = v11;
        }
LABEL_13:
        ++v4;
        --v7;
      }
      while ((unint64_t)v4 < v5);
    }
  }
  return a2;
}

uint64_t std::__independent_bits_engine<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>,unsigned long>::__eval(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    uint64_t result = 0;
    uint64_t v4 = 0;
    unint64_t v5 = *(void *)(a1 + 16);
    unsigned int v6 = **(_DWORD **)a1;
    do
    {
      do
      {
        unsigned int v7 = v6 / 0xADC8;
        unsigned int v8 = 48271 * (v6 % 0xADC8);
        v7 *= 3399;
        BOOL v9 = v8 >= v7;
        unsigned int v10 = v8 - v7;
        if (v9) {
          int v11 = 0;
        }
        else {
          int v11 = 0x7FFFFFFF;
        }
        unsigned int v6 = v11 + v10;
        unint64_t v12 = v6 - 1;
      }
      while (*(void *)(a1 + 40) <= v12);
      uint64_t v13 = result << v5;
      if (v5 >= 0x40) {
        uint64_t v13 = 0;
      }
      uint64_t result = v13 + (*(_DWORD *)(a1 + 56) & v12);
      ++v4;
    }
    while (v4 != v2);
    **(_DWORD **)a1 = v6;
  }
  else
  {
    uint64_t result = 0;
  }
  unint64_t v14 = *(void *)(a1 + 24);
  if (v2 < v14)
  {
    uint64_t v15 = *(unsigned int **)a1;
    unint64_t v16 = *(void *)(a1 + 48);
    unint64_t v17 = *(void *)(a1 + 16);
    int v18 = *(_DWORD *)(a1 + 60);
    unsigned int v19 = *v15;
    while (1)
    {
      unsigned int v20 = v19 / 0xADC8;
      unsigned int v21 = 48271 * (v19 % 0xADC8);
      v20 *= 3399;
      BOOL v9 = v21 >= v20;
      unsigned int v22 = v21 - v20;
      if (v9) {
        int v23 = 0;
      }
      else {
        int v23 = 0x7FFFFFFF;
      }
      unsigned int v19 = v23 + v22;
      unint64_t v24 = v19 - 1;
      if (v16 > v24)
      {
        uint64_t v25 = result << (v17 + 1);
        if (v17 >= 0x3F) {
          uint64_t v25 = 0;
        }
        uint64_t result = v25 + (v18 & v24);
        if (++v2 == v14) {
          break;
        }
      }
    }
    unsigned int *v15 = v19;
  }
  return result;
}

void sub_19EA19494(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CoreML::NNCompiler::MLClassifierInfo::~MLClassifierInfo(CoreML::NNCompiler::MLClassifierInfo *this)
{
  uint64_t v3 = (void **)((char *)this + 104);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  unint64_t v2 = (void *)*((void *)this + 10);
  if (v2)
  {
    *((void *)this + 11) = v2;
    operator delete(v2);
  }
  if (*((char *)this + 71) < 0) {
    operator delete(*((void **)this + 6));
  }
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

void sub_19EA198C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19EA19A90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA19CFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA19F60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA1B910(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, void *a20,void *a21,void *a22,uint64_t a23,void *a24,void *a25,void *a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL10performNMSIddEP27MLDictionaryFeatureProviderP12MLMultiArrayS3_ddP33MLNonMaximumSuppressionParametersyyPU15__autoreleasingP7NSError_block_invoke()
{
  return kdebug_trace();
}

uint64_t ___ZL10performNMSIddEP27MLDictionaryFeatureProviderP12MLMultiArrayS3_ddP33MLNonMaximumSuppressionParametersyyPU15__autoreleasingP7NSError_block_invoke_2()
{
  return kdebug_trace();
}

uint64_t ___ZL10performNMSIddEP27MLDictionaryFeatureProviderP12MLMultiArrayS3_ddP33MLNonMaximumSuppressionParametersyyPU15__autoreleasingP7NSError_block_invoke_3()
{
  return kdebug_trace();
}

void std::vector<double>::resize(char **a1, unint64_t a2, void *a3)
{
  unsigned int v6 = *a1;
  unint64_t v5 = a1[1];
  unint64_t v7 = (v5 - *a1) >> 3;
  if (a2 <= v7)
  {
    if (a2 < v7) {
      a1[1] = &v6[8 * a2];
    }
  }
  else
  {
    BOOL v9 = a1[2];
    if (a2 - v7 <= (v9 - v5) >> 3)
    {
      int v23 = &v5[8 * (a2 - v7)];
      uint64_t v24 = 8 * a2 - 8 * v7;
      do
      {
        *(void *)unint64_t v5 = *a3;
        v5 += 8;
        v24 -= 8;
      }
      while (v24);
      a1[1] = v23;
    }
    else
    {
      if (a2 >> 61) {
        std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v10 = v9 - v6;
      unint64_t v11 = (v9 - v6) >> 2;
      if (v11 <= a2) {
        unint64_t v11 = a2;
      }
      if (v10 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v12 = v11;
      }
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_KDInterval>>(v12);
      uint64_t v15 = &v13[8 * v7];
      unint64_t v16 = &v13[8 * a2];
      uint64_t v17 = 8 * a2 - 8 * v7;
      int v18 = v15;
      do
      {
        *(void *)int v18 = *a3;
        v18 += 8;
        v17 -= 8;
      }
      while (v17);
      unsigned int v19 = &v13[8 * v14];
      unsigned int v20 = *a1;
      for (uint64_t i = a1[1]; i != v20; i -= 8)
      {
        uint64_t v22 = *((void *)i - 1);
        *((void *)v15 - 1) = v22;
        v15 -= 8;
      }
      *a1 = v15;
      a1[1] = v16;
      a1[2] = v19;
      if (v20)
      {
        operator delete(v20);
      }
    }
  }
}

void *std::vector<BOOL>::vector(void *a1, unint64_t a2, unsigned __int8 *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<BOOL>::__vallocate[abi:ne180100](a1, a2);
    int v6 = *a3;
    unint64_t v7 = a1[1];
    unint64_t v8 = v7 + a2;
    a1[1] = v7 + a2;
    if (v7)
    {
      unint64_t v9 = v8 - 1;
      if (((v8 - 1) ^ (v7 - 1)) < 0x40)
      {
LABEL_10:
        uint64_t v13 = *a1 + 8 * (v7 >> 6);
        int v14 = v7 & 0x3F;
        if (v6) {
          std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(&v13, a2);
        }
        else {
          std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v13, a2);
        }
        return a1;
      }
    }
    else
    {
      unint64_t v9 = v8 - 1;
    }
    unint64_t v10 = v9 >> 6;
    if (v8 >= 0x41) {
      unint64_t v11 = v10;
    }
    else {
      unint64_t v11 = 0;
    }
    *(void *)(*a1 + 8 * v11) = 0;
    goto LABEL_10;
  }
  return a1;
}

uint64_t ___ZL10performNMSIffEP27MLDictionaryFeatureProviderP12MLMultiArrayS3_ddP33MLNonMaximumSuppressionParametersyyPU15__autoreleasingP7NSError_block_invoke()
{
  return kdebug_trace();
}

uint64_t ___ZL10performNMSIffEP27MLDictionaryFeatureProviderP12MLMultiArrayS3_ddP33MLNonMaximumSuppressionParametersyyPU15__autoreleasingP7NSError_block_invoke_2()
{
  return kdebug_trace();
}

uint64_t ___ZL10performNMSIffEP27MLDictionaryFeatureProviderP12MLMultiArrayS3_ddP33MLNonMaximumSuppressionParametersyyPU15__autoreleasingP7NSError_block_invoke_3()
{
  return kdebug_trace();
}

void std::vector<float>::resize(char **a1, unint64_t a2, _DWORD *a3)
{
  int v6 = *a1;
  unint64_t v5 = a1[1];
  unint64_t v7 = (v5 - *a1) >> 2;
  if (a2 <= v7)
  {
    if (a2 < v7) {
      a1[1] = &v6[4 * a2];
    }
  }
  else
  {
    unint64_t v9 = a1[2];
    if (a2 - v7 <= (v9 - v5) >> 2)
    {
      int v23 = &v5[4 * (a2 - v7)];
      uint64_t v24 = 4 * a2 - 4 * v7;
      do
      {
        *(_DWORD *)unint64_t v5 = *a3;
        v5 += 4;
        v24 -= 4;
      }
      while (v24);
      a1[1] = v23;
    }
    else
    {
      if (a2 >> 62) {
        std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v10 = v9 - v6;
      unint64_t v11 = (v9 - v6) >> 1;
      if (v11 <= a2) {
        unint64_t v11 = a2;
      }
      if (v10 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v12 = v11;
      }
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v12);
      uint64_t v15 = &v13[4 * v7];
      unint64_t v16 = &v13[4 * a2];
      uint64_t v17 = 4 * a2 - 4 * v7;
      int v18 = v15;
      do
      {
        *(_DWORD *)int v18 = *a3;
        v18 += 4;
        v17 -= 4;
      }
      while (v17);
      unsigned int v19 = &v13[4 * v14];
      unsigned int v20 = *a1;
      for (uint64_t i = a1[1]; i != v20; i -= 4)
      {
        int v22 = *((_DWORD *)i - 1);
        *((_DWORD *)v15 - 1) = v22;
        v15 -= 4;
      }
      *a1 = v15;
      a1[1] = v16;
      a1[2] = v19;
      if (v20)
      {
        operator delete(v20);
      }
    }
  }
}

void sub_19EA1C368(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA1CD30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, void *a5, ...)
{
  va_start(va, a5);
  CoreML::Specification::NonMaximumSuppression::~NonMaximumSuppression((CoreML::Specification::NonMaximumSuppression *)va);

  _Unwind_Resume(a1);
}

void sub_19EA1D0B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA1D1E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA1D7E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA1D874(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA1D96C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA1DA08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__21784(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__21785(uint64_t a1)
{
}

void sub_19EA1DAF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA1DB88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA1DBF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA1DC88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t CoreML::MLModelException::what(CoreML::MLModelException *this)
{
  uint64_t result = (uint64_t)this + 16;
  if (*((char *)this + 39) < 0) {
    return *(void *)result;
  }
  return result;
}

void CoreML::MLModelException::~MLModelException(std::exception *this)
{
  CoreML::MLModelException::~MLModelException(this);

  JUMPOUT(0x19F3C1920);
}

{
  uint64_t vars8;

  this->__vftable = (std::exception_vtbl *)&unk_1EF0DAF48;
  if (SHIBYTE(this[4].__vftable) < 0) {
    operator delete(this[2].__vftable);
  }

  std::exception::~exception(this);
}

CoreML::MLModelException *CoreML::MLModelException::MLModelException(CoreML::MLModelException *this, NSError *a2)
{
  uint64_t v3 = a2;
  *(void *)this = &unk_1EF0DAF48;
  uint64_t v4 = v3;
  *((void *)this + 1) = v4;
  id v5 = [(NSError *)v4 localizedDescription];
  std::string::basic_string[abi:ne180100]<0>((void *)this + 2, (char *)[v5 UTF8String]);

  return this;
}

void sub_19EA1DDE4(_Unwind_Exception *a1)
{
  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

void Archiver::_IArchiveDiskImpl::getObject()
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "Error: getObject is not supported by _OArchiveDiskImpl");
  __cxa_throw(exception, MEMORY[0x1E4FBA328], MEMORY[0x1E4FBA1B0]);
}

void sub_19EA1DE58(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Archiver::_IDataBlobImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF0DD848;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x19F3C1920);
}

void std::__shared_ptr_emplace<Archiver::_IDataBlobImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF0DD848;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<Archiver::MMappedInputENMLFile>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Archiver::MMappedInputENMLFile>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF0DDA08;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x19F3C1920);
}

void std::__shared_ptr_emplace<Archiver::MMappedInputENMLFile>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF0DDA08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<Archiver::_IDataBlobENMLImpl>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Archiver::_IDataBlobENMLImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF0DD960;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x19F3C1920);
}

void std::__shared_ptr_emplace<Archiver::_IDataBlobENMLImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF0DD960;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void *std::ifstream::~ifstream(void *a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA3F8];
  uint64_t v3 = *MEMORY[0x1E4FBA3F8];
  *a1 = *MEMORY[0x1E4FBA3F8];
  *(void *)((char *)a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  MEMORY[0x19F3C1500](a1 + 2);
  std::istream::~istream();
  MEMORY[0x19F3C1850](a1 + 53);
  return a1;
}

void Archiver::_IArchiveDiskImpl::~_IArchiveDiskImpl(Archiver::_IArchiveDiskImpl *this)
{
  Archiver::_IArchiveImpl::~_IArchiveImpl(this);

  JUMPOUT(0x19F3C1920);
}

uint64_t Archiver::_IArchiveMemoryImpl::isENMLFormat(Archiver::_IArchiveMemoryImpl *this)
{
  return 0;
}

uint64_t Archiver::_IArchiveMemoryImpl::storageType(Archiver::_IArchiveMemoryImpl *this)
{
  return 1;
}

BOOL Archiver::_IArchiveMemoryImpl::hasNestedArchive(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = NSString;
  if (*(char *)(a1 + 31) >= 0) {
    size_t v5 = *(unsigned __int8 *)(a1 + 31);
  }
  else {
    size_t v5 = *(void *)(a1 + 16);
  }
  int v6 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v5 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    int v6 = (std::string *)v21.__r_.__value_.__r.__words[0];
  }
  if (v5)
  {
    if (*(char *)(a1 + 31) >= 0) {
      unint64_t v7 = (const void *)(a1 + 8);
    }
    else {
      unint64_t v7 = *(const void **)(a1 + 8);
    }
    memmove(v6, v7, v5);
  }
  *(_WORD *)((char *)&v6->__r_.__value_.__l.__data_ + v5) = 47;
  int v8 = *(char *)(a2 + 23);
  if (v8 >= 0) {
    unint64_t v9 = (const std::string::value_type *)a2;
  }
  else {
    unint64_t v9 = *(const std::string::value_type **)a2;
  }
  if (v8 >= 0) {
    std::string::size_type v10 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v10 = *(void *)(a2 + 8);
  }
  unint64_t v11 = std::string::append(&v21, v9, v10);
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  int64_t v20 = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  if (v20 >= 0) {
    uint64_t v13 = __p;
  }
  else {
    uint64_t v13 = (void **)__p[0];
  }
  uint64_t v14 = objc_msgSend(v4, "stringWithUTF8String:", v13, __p[0], __p[1], v20);
  if (SHIBYTE(v20) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v15 = [v14 pathComponents];
  unint64_t v16 = Archiver::findArchive(v15, *(void **)(a1 + 48));
  BOOL v17 = v16 != 0;

  return v17;
}

void sub_19EA1E284(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  _Unwind_Resume(a1);
}

id Archiver::findArchive(void *a1, void *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id v5 = v3;
  uint64_t v6 = [v5 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v6)
  {
    uint64_t v7 = *(void *)v13;
    while (2)
    {
      uint64_t v8 = 0;
      id v9 = v4;
      do
      {
        if (*(void *)v13 != v7) {
          objc_enumerationMutation(v5);
        }
        objc_msgSend(v9, "objectForKeyedSubscript:", *(void *)(*((void *)&v12 + 1) + 8 * v8), (void)v12);
        id v4 = (id)objc_claimAutoreleasedReturnValue();
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {

          std::string::size_type v10 = 0;
          goto LABEL_11;
        }

        ++v8;
        id v9 = v4;
      }
      while (v6 != v8);
      uint64_t v6 = [v5 countByEnumeratingWithState:&v12 objects:v16 count:16];
      if (v6) {
        continue;
      }
      break;
    }
  }

  id v9 = v4;
  std::string::size_type v10 = v9;
LABEL_11:

  return v10;
}

void sub_19EA1E43C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id Archiver::_IArchiveMemoryImpl::getObject(uint64_t a1, uint64_t *a2)
{
  id v4 = (void *)(a1 + 8);
  if (*(char *)(a1 + 31) < 0) {
    id v4 = (void *)*v4;
  }
  id v5 = [NSString stringWithUTF8String:v4];
  uint64_t v6 = [v5 pathComponents];

  uint64_t v7 = Archiver::findArchive(v6, *(void **)(a1 + 48));
  if (*((char *)a2 + 23) >= 0) {
    uint64_t v8 = a2;
  }
  else {
    uint64_t v8 = (uint64_t *)*a2;
  }
  id v9 = [NSString stringWithUTF8String:v8];
  std::string::size_type v10 = [v7 objectForKeyedSubscript:v9];

  return v10;
}

void sub_19EA1E54C(_Unwind_Exception *a1)
{
  id v4 = v3;

  _Unwind_Resume(a1);
}

void Archiver::_IArchiveMemoryImpl::getNestedArchive(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  if (*(char *)(a1 + 31) >= 0) {
    size_t v6 = *(unsigned __int8 *)(a1 + 31);
  }
  else {
    size_t v6 = *(void *)(a1 + 16);
  }
  uint64_t v7 = &v16;
  std::string::basic_string[abi:ne180100]((uint64_t)&v16, v6 + 1);
  if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v7 = (std::string *)v16.__r_.__value_.__r.__words[0];
  }
  if (v6)
  {
    if (*(char *)(a1 + 31) >= 0) {
      uint64_t v8 = (const void *)(a1 + 8);
    }
    else {
      uint64_t v8 = *(const void **)(a1 + 8);
    }
    memmove(v7, v8, v6);
  }
  *(_WORD *)((char *)&v7->__r_.__value_.__l.__data_ + v6) = 47;
  int v9 = *(char *)(a2 + 23);
  if (v9 >= 0) {
    std::string::size_type v10 = (const std::string::value_type *)a2;
  }
  else {
    std::string::size_type v10 = *(const std::string::value_type **)a2;
  }
  if (v9 >= 0) {
    std::string::size_type v11 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v11 = *(void *)(a2 + 8);
  }
  long long v12 = std::string::append(&v16, v10, v11);
  std::string __p = *v12;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  long long v13 = operator new(0x50uLL);
  v13[1] = 0;
  v13[2] = 0;
  void *v13 = &unk_1EF0DD998;
  *(void *)&long long v14 = Archiver::_IArchiveMemoryImpl::_IArchiveMemoryImpl((uint64_t)(v13 + 3), (uint64_t)&__p, *(void **)(a1 + 48));
  *((void *)&v14 + 1) = v13;
  *a3 = v14;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_19EA1E6C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::__shared_weak_count::~__shared_weak_count(v20);
  operator delete(v22);
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t Archiver::_IArchiveMemoryImpl::_IArchiveMemoryImpl(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v23 = *(std::string *)a2;
  }
  *(void *)a1 = &unk_1EF0DCA30;
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), v23.__r_.__value_.__l.__data_, v23.__r_.__value_.__l.__size_);
    int v6 = SHIBYTE(v23.__r_.__value_.__r.__words[2]);
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    if (v6 < 0) {
      operator delete(v23.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *(std::string *)(a1 + 8) = v23;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
  }
  *(void *)a1 = &unk_1EF0DCD90;
  id v7 = v5;
  *(void *)(a1 + 48) = v7;
  std::string::basic_string[abi:ne180100]<0>(v18, "coremldata.bin");
  if (*(char *)(a1 + 31) >= 0) {
    size_t v8 = *(unsigned __int8 *)(a1 + 31);
  }
  else {
    size_t v8 = *(void *)(a1 + 16);
  }
  int v9 = &v23;
  std::string::basic_string[abi:ne180100]((uint64_t)&v23, v8 + 1);
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    int v9 = (std::string *)v23.__r_.__value_.__r.__words[0];
  }
  if (v8)
  {
    if (*(char *)(a1 + 31) >= 0) {
      std::string::size_type v10 = (const void *)(a1 + 8);
    }
    else {
      std::string::size_type v10 = *(const void **)(a1 + 8);
    }
    memmove(v9, v10, v8);
  }
  *(_WORD *)((char *)&v9->__r_.__value_.__l.__data_ + v8) = 47;
  if ((v19 & 0x80u) == 0) {
    std::string::size_type v11 = v18;
  }
  else {
    std::string::size_type v11 = (void **)v18[0];
  }
  if ((v19 & 0x80u) == 0) {
    std::string::size_type v12 = v19;
  }
  else {
    std::string::size_type v12 = (std::string::size_type)v18[1];
  }
  long long v13 = std::string::append(&v23, (const std::string::value_type *)v11, v12);
  long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  std::string::size_type v21 = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  Archiver::_IArchiveMemoryImpl::createBlob(a1, (long long *)__p, (uint64_t)v22);
  uint64_t v15 = v22[1];
  std::string v16 = *(std::__shared_weak_count **)(a1 + 40);
  *(void *)(a1 + 32) = v22[0];
  *(void *)(a1 + 40) = v15;
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (SHIBYTE(v21) < 0) {
    operator delete(__p[0]);
  }
  if ((char)v19 < 0) {
    operator delete(v18[0]);
  }

  return a1;
}

void sub_19EA1E8FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void Archiver::_IArchiveMemoryImpl::createBlob(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  if (*((char *)a2 + 23) >= 0) {
    int v6 = (uint64_t *)a2;
  }
  else {
    int v6 = *(uint64_t **)a2;
  }
  id v7 = [NSString stringWithUTF8String:v6];
  id v24 = [v7 pathComponents];

  if ((unint64_t)[v24 count] >= 2)
  {
    size_t v8 = objc_msgSend(v24, "subarrayWithRange:", 0, objc_msgSend(v24, "count") - 1);
    int v9 = Archiver::findArchive(v8, *(void **)(a1 + 48));
    if (v9)
    {
      std::string::size_type v10 = [v24 lastObject];
      std::string::size_type v11 = [v9 objectForKeyedSubscript:v10];
    }
    else
    {
      std::string::size_type v11 = 0;
    }
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      std::string::size_type v12 = (char *)operator new(0x110uLL);
      *((void *)v12 + 1) = 0;
      *((void *)v12 + 2) = 0;
      *(void *)std::string::size_type v12 = &unk_1EF0DD880;
      Archiver::_MemoryIStream::_MemoryIStream((Archiver::_MemoryIStream *)(v12 + 24), v11);
      long long v13 = operator new(0x60uLL);
      v13[1] = 0;
      v13[2] = 0;
      void *v13 = &unk_1EF0DDA40;
      *(void *)&long long v25 = v12 + 24;
      *((void *)&v25 + 1) = v12;
      atomic_fetch_add_explicit((atomic_ullong *volatile)v12 + 1, 1uLL, memory_order_relaxed);
      Archiver::_IDataBlobImpl::_IDataBlobImpl(v13 + 3, a2, &v25);
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v12);
      v13[3] = &unk_1EF0DCE68;
      v13[11] = *((id *)v12 + 14);
      *(void *)&long long v14 = v13 + 3;
      *((void *)&v14 + 1) = v13;
      *(_OWORD *)a3 = v14;
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v12);

      goto LABEL_12;
    }
  }
  uint64_t v15 = (std::__shared_weak_count *)operator new(0x258uLL);
  v15->__shared_owners_ = 0;
  v15->__shared_weak_owners_ = 0;
  v15->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF0DDBC8;
  uint64_t v16 = MEMORY[0x1E4FBA460] + 64;
  v15[18].__shared_weak_owners_ = MEMORY[0x1E4FBA460] + 64;
  uint64_t v17 = *(std::__shared_weak_count_vtbl **)(MEMORY[0x1E4FBA3F8] + 16);
  int v18 = *(std::__shared_weak_count_vtbl **)(MEMORY[0x1E4FBA3F8] + 8);
  v15[1].__vftable = v18;
  *(std::__shared_weak_count_vtbl **)((char *)&v15[1].__vftable + (unint64_t)v18[-1].__on_zero_shared) = v17;
  v15[1].__shared_owners_ = 0;
  unsigned __int8 v19 = (std::ios_base *)((char *)&v15[1] + (unint64_t)v15[1].__vftable[-1].__on_zero_shared);
  std::ios_base::init(v19, &v15[1].__shared_weak_owners_);
  uint64_t v20 = MEMORY[0x1E4FBA460] + 24;
  v19[1].__vftable = 0;
  v19[1].__fmtflags_ = -1;
  v15[1].__vftable = (std::__shared_weak_count_vtbl *)v20;
  v15[18].__shared_weak_owners_ = v16;
  MEMORY[0x19F3C14F0](&v15[1].__shared_weak_owners_);
  *(void *)&long long v21 = v15 + 1;
  *((void *)&v21 + 1) = v15;
  long long v23 = v21;
  int v22 = operator new(0x58uLL);
  v22[1] = 0;
  void v22[2] = 0;
  *int v22 = &unk_1EF0DD848;
  long long v25 = v23;
  Archiver::_IDataBlobImpl::_IDataBlobImpl(v22 + 3, a2, &v25);
  std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  *(void *)a3 = v22 + 3;
  *(void *)(a3 + 8) = v22;
LABEL_12:
}

void sub_19EA1ED34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, id a11)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v17);
  std::__shared_weak_count::__release_shared[abi:ne180100](v14);

  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<std::ifstream>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<std::ifstream>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF0DDBC8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x19F3C1920);
}

void std::__shared_ptr_emplace<std::ifstream>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF0DDBC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<Archiver::_IDataBlobMemoryImpl>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Archiver::_IDataBlobMemoryImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF0DDA40;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x19F3C1920);
}

void std::__shared_ptr_emplace<Archiver::_IDataBlobMemoryImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF0DDA40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Archiver::_MemoryIStream>::__on_zero_shared(uint64_t a1)
{
  Archiver::_MemoryIStream::~_MemoryIStream((id *)(a1 + 24));

  JUMPOUT(0x19F3C1850);
}

void std::__shared_ptr_emplace<Archiver::_MemoryIStream>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF0DD880;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x19F3C1920);
}

void std::__shared_ptr_emplace<Archiver::_MemoryIStream>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF0DD880;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Archiver::_IArchiveMemoryImpl>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = (Archiver::_IArchiveImpl *)(a1 + 24);

  Archiver::_IArchiveImpl::~_IArchiveImpl(v1);
}

void std::__shared_ptr_emplace<Archiver::_IArchiveMemoryImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF0DD998;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x19F3C1920);
}

void std::__shared_ptr_emplace<Archiver::_IArchiveMemoryImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF0DD998;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Archiver::_IArchiveMemoryImpl::getBlob(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*(char *)(a1 + 31) >= 0) {
    size_t v6 = *(unsigned __int8 *)(a1 + 31);
  }
  else {
    size_t v6 = *(void *)(a1 + 16);
  }
  id v7 = &v16;
  std::string::basic_string[abi:ne180100]((uint64_t)&v16, v6 + 1);
  if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    id v7 = (std::string *)v16.__r_.__value_.__r.__words[0];
  }
  if (v6)
  {
    if (*(char *)(a1 + 31) >= 0) {
      size_t v8 = (const void *)(a1 + 8);
    }
    else {
      size_t v8 = *(const void **)(a1 + 8);
    }
    memmove(v7, v8, v6);
  }
  *(_WORD *)((char *)&v7->__r_.__value_.__l.__data_ + v6) = 47;
  int v9 = *(char *)(a2 + 23);
  if (v9 >= 0) {
    std::string::size_type v10 = (const std::string::value_type *)a2;
  }
  else {
    std::string::size_type v10 = *(const std::string::value_type **)a2;
  }
  if (v9 >= 0) {
    std::string::size_type v11 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v11 = *(void *)(a2 + 8);
  }
  std::string::size_type v12 = std::string::append(&v16, v10, v11);
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  std::string::size_type v15 = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  Archiver::_IArchiveMemoryImpl::createBlob(a1, (long long *)__p, a3);
  if (SHIBYTE(v15) < 0) {
    operator delete(__p[0]);
  }
}

void sub_19EA1F1E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Archiver::_IArchiveMemoryImpl::~_IArchiveMemoryImpl(id *this)
{
  Archiver::_IArchiveImpl::~_IArchiveImpl((Archiver::_IArchiveImpl *)this);

  JUMPOUT(0x19F3C1920);
}

{
  uint64_t vars8;

  Archiver::_IArchiveImpl::~_IArchiveImpl((Archiver::_IArchiveImpl *)this);
}

void sub_19EA1F474(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_19EA1F5F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA1F684(_Unwind_Exception *a1)
{
  id v4 = v3;

  _Unwind_Resume(a1);
}

void sub_19EA1FBB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA1FE34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  _Unwind_Resume(a1);
}

void sub_19EA1FEB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19EA202F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA204DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__22137(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = 0;
  *(void *)(result + 48) = v2;
  return result;
}

uint64_t __Block_byref_object_dispose__22138(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (result) {
    JUMPOUT(0x19F3C1920);
  }
  return result;
}

void sub_19EA208A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA20A94(_Unwind_Exception *a1)
{
  kdebug_trace();
  _Unwind_Resume(a1);
}

void sub_19EA20B70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA20C6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA20F6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_19EA212A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_19EA21384(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA2140C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA215E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA216A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)MLE5ExecutionStream;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_19EA21860(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CoreML::NNCompiler::Backend::MIL::Ios16Train::Ios16TrainLayerTranslator::~Ios16TrainLayerTranslator(void **this)
{
  CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator::~ProgramLayerTranslator(this);

  JUMPOUT(0x19F3C1920);
}

void sub_19EA21B20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA21E64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA21EBC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  __cxa_free_exception(v10);
  if (a2 == 1)
  {
    long long v13 = __cxa_begin_catch(a1);
    if (v9)
    {
      (*(void (**)(void *))(*(void *)v13 + 16))(v13);
      void *v9 = +[MLModelErrorUtils genericErrorWithFormat:@"%s"];
    }
    __cxa_end_catch();
    JUMPOUT(0x19EA21DDCLL);
  }
  JUMPOUT(0x19EA21EACLL);
}

void sub_19EA21F48()
{
}

void sub_19EA21FD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA22038(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CoreML::NNCompiler::Backend::MIL::Ios15::Ios15LayerTranslator::~Ios15LayerTranslator(void **this)
{
  CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator::~ProgramLayerTranslator(this);

  JUMPOUT(0x19F3C1920);
}

void sub_19EA2236C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA224F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA2260C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA23AA4(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v2, 0x10A1C403937033FLL);

  _Unwind_Resume(a1);
}

void sub_19EA23D40()
{
  JUMPOUT(0x19EA23D34);
}

void sub_19EA245F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object)
{
  _Unwind_Resume(a1);
}

void sub_19EA25474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,void *a22,uint64_t a23,uint64_t a24,void *a25,void *a26)
{
  _Unwind_Resume(a1);
}

void sub_19EA25AA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_19EA263BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, void *a15)
{
  MEMORY[0x19F3C1920](v16, 0x10A1C406130BDD3);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v15);

  _Unwind_Resume(a1);
}

void sub_19EA26620(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA26A50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  CoreML::Specification::Model::~Model((CoreML::Specification::Model *)&a17);

  _Unwind_Resume(a1);
}

void sub_19EA26D68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_19EA27004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_19EA27108(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA271D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA27300(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA27620(_Unwind_Exception *a1)
{
  size_t v6 = v5;

  _Unwind_Resume(a1);
}

void sub_19EA278BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA28410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, uint64_t a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25)
{
  _Unwind_Resume(a1);
}

id _validateAndGetData(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 23);
  if (*(char *)(v4 + 23) < 0) {
    uint64_t v6 = *(void *)(v4 + 8);
  }
  else {
    uint64_t v6 = *(unsigned __int8 *)(v4 + 23);
  }
  uint64_t v7 = *(void *)(a1 + 48);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 23);
  if (*(char *)(v7 + 23) < 0) {
    uint64_t v9 = *(void *)(v7 + 8);
  }
  else {
    uint64_t v9 = *(unsigned __int8 *)(v7 + 23);
  }
  int v10 = *(_DWORD *)(a1 + 16);
  uint64_t v11 = *(void *)(a1 + 56);
  uint64_t v12 = *(unsigned __int8 *)(v11 + 23);
  if (*(char *)(v11 + 23) < 0) {
    uint64_t v13 = *(void *)(v11 + 8);
  }
  else {
    uint64_t v13 = *(unsigned __int8 *)(v11 + 23);
  }
  if (v10 <= 0) {
    int v14 = 1;
  }
  else {
    int v14 = 2;
  }
  if (v6) {
    int v15 = v14;
  }
  else {
    int v15 = v10 > 0;
  }
  if (v9) {
    ++v15;
  }
  if (v13) {
    ++v15;
  }
  if (v10 < 1 || v15 != 1)
  {
    if (a2)
    {
      id v24 = +[MLModelErrorUtils updateErrorWithFormat:@"only float32 weight/bias supported."];
      long long v23 = 0;
      *a2 = v24;
    }
    else
    {
      long long v23 = 0;
    }
    goto LABEL_42;
  }
  if ((v5 & 0x80) == 0)
  {
    if ((v8 & 0x80) == 0) {
      goto LABEL_24;
    }
LABEL_46:
    uint64_t v8 = *(void *)(v7 + 8);
    if ((v12 & 0x80) == 0) {
      goto LABEL_25;
    }
LABEL_47:
    uint64_t v12 = *(void *)(v11 + 8);
    goto LABEL_25;
  }
  uint64_t v5 = *(void *)(v4 + 8);
  if ((v8 & 0x80) != 0) {
    goto LABEL_46;
  }
LABEL_24:
  if ((v12 & 0x80) != 0) {
    goto LABEL_47;
  }
LABEL_25:
  if (v5) {
    int v16 = v14;
  }
  else {
    int v16 = v10 > 0;
  }
  if (v8) {
    ++v16;
  }
  if (v12) {
    ++v16;
  }
  if (v16 == 1) {
    int v17 = 4 * v10;
  }
  else {
    int v17 = 0;
  }
  size_t v18 = v17;
  unsigned __int8 v19 = malloc_type_malloc(v17, 0x7DEEB7F7uLL);
  uint64_t v20 = v19;
  uint64_t v21 = *(void *)(a1 + 24);
  if (v21) {
    int v22 = (const void *)(v21 + 8);
  }
  else {
    int v22 = 0;
  }
  memcpy(v19, v22, v18);
  long long v23 = [MEMORY[0x1E4F30C80] dataWithBytesNoCopy:v20 length:v18 freeWhenDone:1];
LABEL_42:

  return v23;
}

id _mlcActivationDescriptor(int a1, void *a2)
{
  if (a1 > 39)
  {
    if (a1 == 40)
    {
      uint64_t v3 = 3;
      goto LABEL_10;
    }
    if (a1 == 41)
    {
      uint64_t v3 = 4;
      goto LABEL_10;
    }
  }
  else
  {
    if (a1 == 10)
    {
      uint64_t v3 = 1;
      goto LABEL_10;
    }
    if (a1 == 30)
    {
      uint64_t v3 = 5;
LABEL_10:
      uint64_t v4 = [MEMORY[0x1E4F30BC0] descriptorWithType:v3];
      goto LABEL_11;
    }
  }
  if (a2)
  {
    id v6 = +[MLModelErrorUtils errorWithCode:6 format:@"LSTM Actiavtion not supported."];
    uint64_t v4 = 0;
    *a2 = v6;
  }
  else
  {
    uint64_t v4 = 0;
  }
LABEL_11:

  return v4;
}

void sub_19EA28974(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA28B2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA28D88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA29118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  CoreML::Specification::WeightParams::~WeightParams((CoreML::Specification::WeightParams *)&a13);
  CoreML::Specification::WeightParams::~WeightParams((CoreML::Specification::WeightParams *)&a23);
  CoreML::Specification::WeightParams::~WeightParams((CoreML::Specification::WeightParams *)&a33);
  CoreML::Specification::WeightParams::~WeightParams((CoreML::Specification::WeightParams *)(v37 - 160));
  _Unwind_Resume(a1);
}

void sub_19EA2919C()
{
}

void CoreML::NNCompiler::NeuralNetwork::NeuralNetworkSpecProxy::Make(CoreML::NNCompiler::NeuralNetwork::NeuralNetworkSpecProxy *this, const CoreML::Specification::Model *a2, int a3)
{
  if (a3 != 303)
  {
    if (a3 != 403)
    {
      if (a3 == 500) {
        operator new();
      }
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x19F3C1380](exception, "Invalid NeuralNetwork Specification type");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    operator new();
  }
  operator new();
}

void sub_19EA29360(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t *anonymous namespace'::NeuralNetworkSpecProxyImpl<CoreML::Specification::NeuralNetworkClassifier>::updateparams(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 8) + 72)) {
    return *(uint64_t **)(*(void *)(a1 + 8) + 72);
  }
  else {
    return &CoreML::Specification::_NetworkUpdateParameters_default_instance_;
  }
}

std::string *anonymous namespace'::NeuralNetworkSpecProxyImpl<CoreML::Specification::NeuralNetworkClassifier>::preprocessing@<X0>(std::string *result@<X0>, google::protobuf::internal::RepeatedPtrFieldBase *a2@<X8>)
{
  std::string::size_type size = result->__r_.__value_.__l.__size_;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  unsigned int v4 = *(_DWORD *)(size + 48);
  if (v4)
  {
    uint64_t v5 = (const CoreML::Specification::NeuralNetworkPreprocessing **)(*(void *)(size + 56) + 8);
    id v6 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend(a2, v4);
    uint64_t v7 = (_DWORD *)*((void *)a2 + 2);
    int v8 = *((_DWORD *)a2 + 2);
    uint64_t result = google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>((std::string *)a2, (std::string **)v6, v5, v4, *v7 - v8);
    *((_DWORD *)a2 + 2) = v8 + v4;
    if (*v7 < (signed int)(v8 + v4)) {
      _DWORD *v7 = v8 + v4;
    }
  }
  return result;
}

std::string *google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>(std::string *result, std::string **a2, const CoreML::Specification::NeuralNetworkPreprocessing **a3, unsigned int a4, unsigned int a5)
{
  uint64_t v9 = (google::protobuf::Arena **)result;
  if ((int)a5 >= (int)a4) {
    uint64_t v10 = a4;
  }
  else {
    uint64_t v10 = a5;
  }
  if ((int)v10 >= 1)
  {
    uint64_t v11 = a3;
    uint64_t v12 = a2;
    do
    {
      int v14 = *v11++;
      uint64_t v13 = v14;
      int v15 = *v12++;
      uint64_t result = google::protobuf::internal::GenericTypeHandler<CoreML::Specification::NeuralNetworkPreprocessing>::Merge(v13, v15);
      --v10;
    }
    while (v10);
  }
  BOOL v16 = __OFSUB__(a4, a5);
  int v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    size_t v18 = *v9;
    unsigned __int8 v19 = (google::protobuf::Arena ***)&a2[a5];
    uint64_t v20 = &a3[a5];
    do
    {
      uint64_t v21 = *v20;
      if (!v18) {
        operator new();
      }
      CoreML::Specification::NeuralNetworkPreprocessing::NeuralNetworkPreprocessing((CoreML::Specification::NeuralNetworkPreprocessing *)Aligned);
      long long v23 = google::protobuf::Arena::AllocateAligned(v18, 0, 24);
      void *v23 = (google::protobuf::Arena *)Aligned;
      v23[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::NeuralNetworkPreprocessing>;
      id v24 = (unint64_t *)((char *)v18 + 32);
      do
        unint64_t v25 = __ldxr(v24);
      while (__stxr((unint64_t)v23, v24));
      v23[2] = (google::protobuf::Arena *)v25;
      uint64_t result = google::protobuf::internal::GenericTypeHandler<CoreML::Specification::NeuralNetworkPreprocessing>::Merge(v21, (std::string *)Aligned);
      *v19++ = Aligned;
      ++v20;
      --v17;
    }
    while (v17);
  }
  return result;
}

void sub_19EA29548(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C40EE95837BLL);
  _Unwind_Resume(a1);
}

std::string *google::protobuf::internal::GenericTypeHandler<CoreML::Specification::NeuralNetworkPreprocessing>::Merge(const CoreML::Specification::NeuralNetworkPreprocessing *a1, std::string *a2)
{
  return CoreML::Specification::NeuralNetworkPreprocessing::MergeFrom(a2, a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<CoreML::Specification::NeuralNetworkPreprocessing>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t anonymous namespace'::NeuralNetworkSpecProxyImpl<CoreML::Specification::NeuralNetworkClassifier>::layers(uint64_t a1)
{
  return *(void *)(a1 + 8) + 16;
}

uint64_t anonymous namespace'::NeuralNetworkSpecProxyImpl<CoreML::Specification::NeuralNetworkClassifier>::imageinputshapemapping(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 8) + 84);
}

uint64_t anonymous namespace'::NeuralNetworkSpecProxyImpl<CoreML::Specification::NeuralNetworkClassifier>::arrayinputshapemapping(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 8) + 80);
}

uint64_t anonymous namespace'::NeuralNetworkSpecProxyImpl<CoreML::Specification::NeuralNetworkClassifier>::GetOutputNames@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  long long v54 = 0u;
  long long v55 = 0u;
  int v56 = 1065353216;
  unsigned int v4 = *(uint64_t **)(a2 + 16);
  if (!v4) {
    unsigned int v4 = &CoreML::Specification::_ModelDescription_default_instance_;
  }
  uint64_t v5 = v4[7];
  if (v5) {
    uint64_t v6 = v5 + 8;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *((int *)v4 + 12);
  if (v7)
  {
    uint64_t v9 = 8 * v7;
    do
    {
      uint64_t v10 = *(void *)(*(void *)v6 + 16);
      if (*(void *)(a2 + 16)) {
        uint64_t v11 = *(uint64_t **)(a2 + 16);
      }
      else {
        uint64_t v11 = &CoreML::Specification::_ModelDescription_default_instance_;
      }
      size_t v12 = *(unsigned __int8 *)(v10 + 23);
      size_t v13 = v12;
      int v14 = *(const void **)(*(void *)v6 + 16);
      if (*(char *)(v10 + 23) < 0)
      {
        int v14 = *(const void **)v10;
        size_t v13 = *(void *)(v10 + 8);
      }
      uint64_t v15 = v11[17];
      int v16 = *(char *)(v15 + 23);
      if (v16 >= 0) {
        size_t v17 = *(unsigned __int8 *)(v15 + 23);
      }
      else {
        size_t v17 = *(void *)(v15 + 8);
      }
      if (v16 >= 0) {
        size_t v18 = (const void *)v11[17];
      }
      else {
        size_t v18 = *(const void **)v15;
      }
      if (v17 >= v13) {
        size_t v19 = v13;
      }
      else {
        size_t v19 = v17;
      }
      if (memcmp(v14, v18, v19) || v17 != v13)
      {
        uint64_t v21 = (const void *)v10;
        if ((v12 & 0x80) != 0)
        {
          uint64_t v21 = *(const void **)v10;
          size_t v12 = *(void *)(v10 + 8);
        }
        uint64_t v22 = v11[18];
        int v23 = *(char *)(v22 + 23);
        if (v23 >= 0) {
          size_t v24 = *(unsigned __int8 *)(v22 + 23);
        }
        else {
          size_t v24 = *(void *)(v22 + 8);
        }
        if (v23 >= 0) {
          unint64_t v25 = (const void *)v11[18];
        }
        else {
          unint64_t v25 = *(const void **)v22;
        }
        if (v24 >= v12) {
          size_t v26 = v12;
        }
        else {
          size_t v26 = v24;
        }
        if (memcmp(v21, v25, v26) || v24 != v12) {
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&v54, (unsigned __int8 *)v10, v10);
        }
      }
      v6 += 8;
      v9 -= 8;
    }
    while (v9);
  }
  uint64_t v28 = *(void *)(v3 + 64);
  if (*(char *)(v28 + 23) < 0) {
    uint64_t v29 = *(void *)(v28 + 8);
  }
  else {
    uint64_t v29 = *(unsigned __int8 *)(v28 + 23);
  }
  if (v29)
  {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&v54, (unsigned __int8 *)v28, *(void *)(v3 + 64));
  }
  else
  {
    long long v51 = 0u;
    long long v52 = 0u;
    int v53 = 1065353216;
    memset(v49, 0, sizeof(v49));
    int v50 = 1065353216;
    uint64_t v30 = *(void *)(v3 + 32);
    if (v30) {
      float v31 = (uint64_t *)(v30 + 8);
    }
    else {
      float v31 = 0;
    }
    uint64_t v32 = *(int *)(v3 + 24);
    if (v32)
    {
      std::__fs::filesystem::path v33 = &v31[v32];
      do
      {
        uint64_t v34 = *v31;
        uint64_t v35 = *(void *)(*v31 + 32);
        if (v35) {
          float v36 = (unsigned __int8 **)(v35 + 8);
        }
        else {
          float v36 = 0;
        }
        uint64_t v37 = *(int *)(v34 + 24);
        if (v37)
        {
          uint64_t v38 = 8 * v37;
          do
          {
            std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v49, *v36, (uint64_t)*v36);
            ++v36;
            v38 -= 8;
          }
          while (v38);
        }
        uint64_t v39 = *(void *)(v34 + 56);
        if (v39) {
          uint64_t v40 = (unsigned __int8 **)(v39 + 8);
        }
        else {
          uint64_t v40 = 0;
        }
        uint64_t v41 = *(int *)(v34 + 48);
        if (v41)
        {
          uint64_t v42 = 8 * v41;
          do
          {
            std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&v51, *v40, (uint64_t)*v40);
            ++v40;
            v42 -= 8;
          }
          while (v42);
        }
        ++v31;
      }
      while (v31 != v33);
      for (uint64_t i = (unsigned __int8 *)v52; i; uint64_t i = *(unsigned __int8 **)i)
      {
        if (!std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::Blob::StorageReader>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::Blob::StorageReader>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::Blob::StorageReader>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::Blob::StorageReader>>>>::find<std::string>(v49, i + 16))std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&v54, i + 16, (uint64_t)(i + 16)); {
      }
        }
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v49);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v51);
  }
  float v44 = (uint64_t *)v55;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  unint64_t v45 = 0;
  if (v44)
  {
    float v46 = v44;
    do
    {
      ++v45;
      float v46 = (uint64_t *)*v46;
    }
    while (v46);
  }
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>,std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>(a3, v44, v45);
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v54);
}

void sub_19EA2986C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

void anonymous namespace'::NeuralNetworkSpecProxyImpl<CoreML::Specification::NeuralNetworkClassifier>::~NeuralNetworkSpecProxyImpl()
{
}

uint64_t *anonymous namespace'::NeuralNetworkSpecProxyImpl<CoreML::Specification::NeuralNetworkRegressor>::updateparams(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 8) + 64)) {
    return *(uint64_t **)(*(void *)(a1 + 8) + 64);
  }
  else {
    return &CoreML::Specification::_NetworkUpdateParameters_default_instance_;
  }
}

std::string *anonymous namespace'::NeuralNetworkSpecProxyImpl<CoreML::Specification::NeuralNetworkRegressor>::preprocessing@<X0>(std::string *result@<X0>, google::protobuf::internal::RepeatedPtrFieldBase *a2@<X8>)
{
  std::string::size_type size = result->__r_.__value_.__l.__size_;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  unsigned int v4 = *(_DWORD *)(size + 48);
  if (v4)
  {
    uint64_t v5 = (const CoreML::Specification::NeuralNetworkPreprocessing **)(*(void *)(size + 56) + 8);
    uint64_t v6 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend(a2, v4);
    uint64_t v7 = (_DWORD *)*((void *)a2 + 2);
    int v8 = *((_DWORD *)a2 + 2);
    uint64_t result = google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>((std::string *)a2, (std::string **)v6, v5, v4, *v7 - v8);
    *((_DWORD *)a2 + 2) = v8 + v4;
    if (*v7 < (signed int)(v8 + v4)) {
      _DWORD *v7 = v8 + v4;
    }
  }
  return result;
}

uint64_t anonymous namespace'::NeuralNetworkSpecProxyImpl<CoreML::Specification::NeuralNetworkRegressor>::layers(uint64_t a1)
{
  return *(void *)(a1 + 8) + 16;
}

uint64_t anonymous namespace'::NeuralNetworkSpecProxyImpl<CoreML::Specification::NeuralNetworkRegressor>::imageinputshapemapping(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 8) + 76);
}

uint64_t anonymous namespace'::NeuralNetworkSpecProxyImpl<CoreML::Specification::NeuralNetworkRegressor>::arrayinputshapemapping(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 8) + 72);
}

uint64_t anonymous namespace'::NeuralNetworkSpecProxyImpl<CoreML::Specification::NeuralNetworkRegressor>::GetOutputNames@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  long long v12 = 0u;
  long long v13 = 0u;
  int v14 = 1065353216;
  uint64_t v3 = *(uint64_t **)(a1 + 16);
  if (!v3) {
    uint64_t v3 = &CoreML::Specification::_ModelDescription_default_instance_;
  }
  uint64_t v4 = v3[7];
  if (v4) {
    uint64_t v5 = v4 + 8;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *((int *)v3 + 12);
  if (v6)
  {
    uint64_t v7 = 8 * v6;
    do
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&v12, *(unsigned __int8 **)(*(void *)v5 + 16), *(void *)(*(void *)v5 + 16));
      v5 += 8;
      v7 -= 8;
    }
    while (v7);
    int v8 = (uint64_t *)v13;
    a2[1] = 0;
    a2[2] = 0;
    *a2 = 0;
    unint64_t v9 = 0;
    if (v8)
    {
      uint64_t v10 = v8;
      do
      {
        ++v9;
        uint64_t v10 = (uint64_t *)*v10;
      }
      while (v10);
    }
  }
  else
  {
    int v8 = 0;
    unint64_t v9 = 0;
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>,std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>(a2, v8, v9);
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v12);
}

void sub_19EA29A68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void anonymous namespace'::NeuralNetworkSpecProxyImpl<CoreML::Specification::NeuralNetworkRegressor>::~NeuralNetworkSpecProxyImpl()
{
}

uint64_t *anonymous namespace'::NeuralNetworkSpecProxyImpl<CoreML::Specification::NeuralNetwork>::updateparams(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 8) + 64)) {
    return *(uint64_t **)(*(void *)(a1 + 8) + 64);
  }
  else {
    return &CoreML::Specification::_NetworkUpdateParameters_default_instance_;
  }
}

std::string *anonymous namespace'::NeuralNetworkSpecProxyImpl<CoreML::Specification::NeuralNetwork>::preprocessing@<X0>(std::string *result@<X0>, google::protobuf::internal::RepeatedPtrFieldBase *a2@<X8>)
{
  std::string::size_type size = result->__r_.__value_.__l.__size_;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  unsigned int v4 = *(_DWORD *)(size + 48);
  if (v4)
  {
    uint64_t v5 = (const CoreML::Specification::NeuralNetworkPreprocessing **)(*(void *)(size + 56) + 8);
    uint64_t v6 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend(a2, v4);
    uint64_t v7 = (_DWORD *)*((void *)a2 + 2);
    int v8 = *((_DWORD *)a2 + 2);
    uint64_t result = google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>((std::string *)a2, (std::string **)v6, v5, v4, *v7 - v8);
    *((_DWORD *)a2 + 2) = v8 + v4;
    if (*v7 < (signed int)(v8 + v4)) {
      _DWORD *v7 = v8 + v4;
    }
  }
  return result;
}

uint64_t anonymous namespace'::NeuralNetworkSpecProxyImpl<CoreML::Specification::NeuralNetwork>::layers(uint64_t a1)
{
  return *(void *)(a1 + 8) + 16;
}

uint64_t anonymous namespace'::NeuralNetworkSpecProxyImpl<CoreML::Specification::NeuralNetwork>::imageinputshapemapping(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 8) + 76);
}

uint64_t anonymous namespace'::NeuralNetworkSpecProxyImpl<CoreML::Specification::NeuralNetwork>::arrayinputshapemapping(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 8) + 72);
}

uint64_t anonymous namespace'::NeuralNetworkSpecProxyImpl<CoreML::Specification::NeuralNetwork>::GetOutputNames@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  long long v12 = 0u;
  long long v13 = 0u;
  int v14 = 1065353216;
  uint64_t v3 = *(uint64_t **)(a1 + 16);
  if (!v3) {
    uint64_t v3 = &CoreML::Specification::_ModelDescription_default_instance_;
  }
  uint64_t v4 = v3[7];
  if (v4) {
    uint64_t v5 = v4 + 8;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *((int *)v3 + 12);
  if (v6)
  {
    uint64_t v7 = 8 * v6;
    do
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&v12, *(unsigned __int8 **)(*(void *)v5 + 16), *(void *)(*(void *)v5 + 16));
      v5 += 8;
      v7 -= 8;
    }
    while (v7);
    int v8 = (uint64_t *)v13;
    a2[1] = 0;
    a2[2] = 0;
    *a2 = 0;
    unint64_t v9 = 0;
    if (v8)
    {
      uint64_t v10 = v8;
      do
      {
        ++v9;
        uint64_t v10 = (uint64_t *)*v10;
      }
      while (v10);
    }
  }
  else
  {
    int v8 = 0;
    unint64_t v9 = 0;
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>,std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>(a2, v8, v9);
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v12);
}

void sub_19EA29C44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void anonymous namespace'::NeuralNetworkSpecProxyImpl<CoreML::Specification::NeuralNetwork>::~NeuralNetworkSpecProxyImpl()
{
}

uint64_t CoreML::NNCompiler::NeuralNetwork::NeuralNetworkSpecProxy::HasLayerOfType(uint64_t a1, void *a2)
{
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  uint64_t v4 = *(void *)(v3 + 16);
  if (v4) {
    uint64_t v5 = v4 + 8;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(int *)(v3 + 8);
  if (!v6) {
    return 0;
  }
  uint64_t v7 = v5 + 8 * v6;
  int v8 = (_DWORD *)a2[1];
  while ((_DWORD *)*a2 == v8)
  {
LABEL_10:
    v5 += 8;
    if (v5 == v7) {
      return 0;
    }
  }
  unint64_t v9 = (_DWORD *)*a2;
  while (*(_DWORD *)(*(void *)v5 + 140) != *v9)
  {
    if (++v9 == v8) {
      goto LABEL_10;
    }
  }
  return 1;
}

void sub_19EA2AF4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA2B030(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA2B0D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA2B124(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA2B16C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA2B1C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA2B238(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19EA2B2A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA2B32C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA2B39C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)MLE5OutputPort;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_19EA2B4A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA2C07C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_19EA2C118(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19EA2C1CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_19EA2C258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19EA2C30C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_19EA2C398(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19EA2C4A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_19EA2C550(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19EA2C8F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26)
{
  _Block_object_dispose((const void *)(v28 - 128), 8);

  _Block_object_dispose(&a21, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__23045(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__23046(uint64_t a1)
{
}

char *OArchive::nestedArchive(char *a1, uint64_t a2)
{
  uint64_t v4 = a1 + 32;
  uint64_t v5 = (void *)*((void *)a1 + 4);
  if (!v5) {
    goto LABEL_8;
  }
  uint64_t v6 = a1 + 32;
  do
  {
    BOOL v7 = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v5 + 4, (void *)a2);
    int v8 = v5 + 1;
    if (!v7)
    {
      int v8 = v5;
      uint64_t v6 = v5;
    }
    uint64_t v5 = (void *)*v8;
  }
  while (*v8);
  if (v6 != v4
    && !google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()((void *)a2, v6 + 4))
  {
    return (char *)(v6 + 7);
  }
LABEL_8:
  unint64_t v9 = (uint64_t **)(v4 - 1);
  (*(void (**)(long long *__return_ptr))(**((void **)a1 + 1) + 24))(&v22);
  char v10 = *a1;
  char v23 = *a1;
  long long v24 = v22;
  if (*((void *)&v22 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v22 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  unint64_t v25 = &v26;
  uint64_t v11 = (void **)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__find_equal<std::string>((uint64_t)v9, &v28, (void *)a2);
  long long v12 = (char *)*v11;
  if (!*v11)
  {
    long long v13 = (uint64_t **)v11;
    long long v12 = (char *)operator new(0x68uLL);
    int v14 = (std::string *)(v12 + 32);
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v14, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)&v14->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      *((void *)v12 + 6) = *(void *)(a2 + 16);
    }
    *((void *)v12 + 8) = 0;
    *((void *)v12 + 9) = 0;
    *((void *)v12 + 12) = 0;
    *((void *)v12 + 11) = 0;
    *((void *)v12 + 10) = v12 + 88;
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(v9, v28, v13, (uint64_t *)v12);
    char v10 = v23;
  }
  v12[56] = v10;
  uint64_t v15 = v12 + 56;
  long long v16 = v24;
  long long v24 = 0uLL;
  size_t v17 = (std::__shared_weak_count *)*((void *)v12 + 9);
  *((_OWORD *)v12 + 4) = v16;
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  size_t v18 = v12 + 88;
  std::__tree<std::__value_type<std::string,OArchive>,std::__map_value_compare<std::string,std::__value_type<std::string,OArchive>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,OArchive>>>::destroy(*((char **)v12 + 11));
  uint64_t v19 = v26;
  *((void *)v12 + 10) = v25;
  *((void *)v12 + 11) = v19;
  uint64_t v20 = v27;
  *((void *)v12 + 12) = v27;
  if (v20)
  {
    *(void *)(v19 + 16) = v18;
    uint64_t v19 = 0;
    unint64_t v25 = &v26;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
  }
  else
  {
    *((void *)v12 + 10) = v18;
  }
  std::__tree<std::__value_type<std::string,OArchive>,std::__map_value_compare<std::string,std::__value_type<std::string,OArchive>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,OArchive>>>::destroy((char *)v19);
  if (*((void *)&v24 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v24 + 1));
  }
  if (*((void *)&v22 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v22 + 1));
  }
  return v15;
}

void sub_19EA2D36C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, ...)
{
  va_start(va, a4);
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,OArchive>,void *>>>::operator()[abi:ne180100](0, v4);
  _MLModelOutputArchiver::~_MLModelOutputArchiver((char **)va);
  if (a4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a4);
  }
  _Unwind_Resume(a1);
}

uint64_t OArchive::listFilesWritten(OArchive *this, uint64_t a2)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  return OArchive::appendToListFilesWritten(a2, (uint64_t)this);
}

void sub_19EA2D3DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t OArchive::appendToListFilesWritten(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8));
  uint64_t v5 = *(void **)(a1 + 24);
  uint64_t v6 = (void *)(a1 + 32);
  if (v5 != v6)
  {
    do
    {
      uint64_t result = OArchive::appendToListFilesWritten(v5 + 7, a2);
      BOOL v7 = (void *)v5[1];
      if (v7)
      {
        do
        {
          int v8 = v7;
          BOOL v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          int v8 = (void *)v5[2];
          BOOL v9 = *v8 == (void)v5;
          uint64_t v5 = v8;
        }
        while (!v9);
      }
      uint64_t v5 = v8;
    }
    while (v8 != v6);
  }
  return result;
}

uint64_t OArchive::flush(uint64_t this)
{
  uint64_t v1 = this;
  uint64_t v2 = *(void *)(*(void *)(this + 8) + 56);
  if (v2)
  {
    this = *(void *)(v2 + 624);
    if (this) {
      this = std::ostream::flush();
    }
  }
  uint64_t v3 = *(void **)(v1 + 24);
  uint64_t v4 = (void *)(v1 + 32);
  if (v3 != v4)
  {
    do
    {
      this = OArchive::flush((OArchive *)(v3 + 7));
      uint64_t v5 = (void *)v3[1];
      if (v5)
      {
        do
        {
          uint64_t v6 = v5;
          uint64_t v5 = (void *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          uint64_t v6 = (void *)v3[2];
          BOOL v7 = *v6 == (void)v3;
          uint64_t v3 = v6;
        }
        while (!v7);
      }
      uint64_t v3 = v6;
    }
    while (v6 != v4);
  }
  return this;
}

uint64_t operator<<(uint64_t a1, uint64_t *a2)
{
  if (*((char *)a2 + 23) >= 0) {
    uint64_t v4 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    uint64_t v4 = a2[1];
  }
  operator<<(a1, v4);
  BOOL v5 = *((char *)a2 + 23) < 0;
  uint64_t v6 = *((unsigned __int8 *)a2 + 23);
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = a2[1];
  }
  if (v6)
  {
    unint64_t v7 = 0;
    do
    {
      if (v5) {
        int v8 = (uint64_t *)*a2;
      }
      else {
        int v8 = a2;
      }
      char v14 = *((unsigned char *)v8 + v7);
      (*(void (**)(void))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8));
      std::ostream::write();
      if (!*(unsigned char *)a1)
      {
        BOOL v9 = (void *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8));
        if ((*((unsigned char *)v9 + *(void *)(*v9 - 24) + 32) & 5) != 0)
        {
          exception = (std::ios_base::failure *)__cxa_allocate_exception(0x20uLL);
          *(void *)&__ec.__val_ = 1;
          __ec.__cat_ = std::iostream_category();
          std::ios_base::failure::failure(exception, "Error writing to archive.", &__ec);
          __cxa_throw(exception, MEMORY[0x1E4FBA300], MEMORY[0x1E4FBA298]);
        }
      }
      ++v7;
      BOOL v5 = *((char *)a2 + 23) < 0;
      unint64_t v10 = *((unsigned __int8 *)a2 + 23);
      if ((v10 & 0x80u) != 0) {
        unint64_t v10 = a2[1];
      }
    }
    while (v7 < v10);
  }
  return a1;
}

void sub_19EA2D6A4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t operator<<(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = a2;
  (*(void (**)(void))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8));
  std::ostream::write();
  if (!*(unsigned char *)a1)
  {
    uint64_t v3 = (void *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8));
    if ((*((unsigned char *)v3 + *(void *)(*v3 - 24) + 32) & 5) != 0)
    {
      exception = (std::ios_base::failure *)__cxa_allocate_exception(0x20uLL);
      *(void *)&__ec.__val_ = 1;
      __ec.__cat_ = std::iostream_category();
      std::ios_base::failure::failure(exception, "Error writing to archive.", &__ec);
      __cxa_throw(exception, MEMORY[0x1E4FBA300], MEMORY[0x1E4FBA298]);
    }
  }
  return a1;
}

{
  void *v3;
  std::ios_base::failure *exception;
  std::error_code __ec;
  uint64_t v7;

  uint64_t v7 = a2;
  (*(void (**)(void))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8));
  std::ostream::write();
  if (!*(unsigned char *)a1)
  {
    uint64_t v3 = (void *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8));
    if ((*((unsigned char *)v3 + *(void *)(*v3 - 24) + 32) & 5) != 0)
    {
      exception = (std::ios_base::failure *)__cxa_allocate_exception(0x20uLL);
      *(void *)&__ec.__val_ = 1;
      __ec.__cat_ = std::iostream_category();
      std::ios_base::failure::failure(exception, "Error writing to archive.", &__ec);
      __cxa_throw(exception, MEMORY[0x1E4FBA300], MEMORY[0x1E4FBA298]);
    }
  }
  return a1;
}

void sub_19EA2D7C0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19EA2D8B0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t operator<<(uint64_t a1, int a2)
{
  int v7 = a2;
  (*(void (**)(void))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8));
  std::ostream::write();
  if (!*(unsigned char *)a1)
  {
    uint64_t v3 = (void *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8));
    if ((*((unsigned char *)v3 + *(void *)(*v3 - 24) + 32) & 5) != 0)
    {
      exception = (std::ios_base::failure *)__cxa_allocate_exception(0x20uLL);
      *(void *)&__ec.__val_ = 1;
      __ec.__cat_ = std::iostream_category();
      std::ios_base::failure::failure(exception, "Error writing to archive.", &__ec);
      __cxa_throw(exception, MEMORY[0x1E4FBA300], MEMORY[0x1E4FBA298]);
    }
  }
  return a1;
}

{
  void *v3;
  std::ios_base::failure *exception;
  std::error_code __ec;
  int v7;

  int v7 = a2;
  (*(void (**)(void))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8));
  std::ostream::write();
  if (!*(unsigned char *)a1)
  {
    uint64_t v3 = (void *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8));
    if ((*((unsigned char *)v3 + *(void *)(*v3 - 24) + 32) & 5) != 0)
    {
      exception = (std::ios_base::failure *)__cxa_allocate_exception(0x20uLL);
      *(void *)&__ec.__val_ = 1;
      __ec.__cat_ = std::iostream_category();
      std::ios_base::failure::failure(exception, "Error writing to archive.", &__ec);
      __cxa_throw(exception, MEMORY[0x1E4FBA300], MEMORY[0x1E4FBA298]);
    }
  }
  return a1;
}

void sub_19EA2D9CC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19EA2DAE8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19EA2DC04(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19EA2DCF4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t operator<<(uint64_t a1, float a2)
{
  float v7 = a2;
  (*(void (**)(void))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8));
  std::ostream::write();
  if (!*(unsigned char *)a1)
  {
    uint64_t v3 = (void *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8));
    if ((*((unsigned char *)v3 + *(void *)(*v3 - 24) + 32) & 5) != 0)
    {
      exception = (std::ios_base::failure *)__cxa_allocate_exception(0x20uLL);
      *(void *)&__ec.__val_ = 1;
      __ec.__cat_ = std::iostream_category();
      std::ios_base::failure::failure(exception, "Error writing to archive.", &__ec);
      __cxa_throw(exception, MEMORY[0x1E4FBA300], MEMORY[0x1E4FBA298]);
    }
  }
  return a1;
}

void sub_19EA2DE10(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19EA2DF9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_19EA2E07C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__23300(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__23301(uint64_t a1)
{
}

void sub_19EA2F048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_19EA2F714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);

  v17[2](v17);
  ElapsedTimeRecorder::~ElapsedTimeRecorder((id *)va);

  _Unwind_Resume(a1);
}

void sub_19EA2F934(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)MLAppleWordTagger;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_19EA2FB78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA3127C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,std::__shared_weak_count *a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  MEMORY[0x19F3C1920](v47, 0x10A1C40EE95837BLL);
  if (a44) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a44);
  }

  _Unwind_Resume(a1);
}

void sub_19EA31ED0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  CoreML::Specification::CoreMLModels::WordTagger::~WordTagger((CoreML::Specification::CoreMLModels::WordTagger *)&a17);
  _Unwind_Resume(a1);
}

void sub_19EA33964(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,char *__p,char *a26)
{
  __cxa_free_exception(v28);
  if (__p)
  {
    a26 = __p;
    operator delete(__p);
  }
  float v31 = *(void **)(v29 - 136);
  if (v31)
  {
    *(void *)(v29 - 128) = v31;
    operator delete(v31);
  }
  std::string __p = &a10;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (a13) {
    operator delete(a13);
  }
  if (a16)
  {
    a17 = (uint64_t)a16;
    operator delete(a16);
  }
  std::string __p = &a19;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (a22)
  {
    a23 = (uint64_t)a22;
    operator delete(a22);
  }

  _Unwind_Resume(a1);
}

void sub_19EA33C7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA33EE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  a12 = &a9;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  a12 = (uint64_t *)&a15;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t ModelKeyServerAPISignedKeyReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  BOOL v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    float v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v17 = PBReaderReadData();
        size_t v18 = *(void **)(a1 + 8);
        *(void *)(a1 + 8) = v17;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_19EA34538(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CoreML::TreeEnsembles::buildTreeEnsembleModelFromSpec(uint64_t a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4)
{
  v5[0] = a2;
  v5[1] = (uint64_t)a3;
  if (a3) {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  CoreML::TreeEnsembles::Internal::buildTreeEnsembleModelFromSpec(a1, v5, a4);
  if (a3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
}

void sub_19EA345D4(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::unique_ptr<e5rt_async_event,MLE5ObjectDeleter<e5rt_async_event>>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  float *result = a2;
  if (v2) {
    return (uint64_t *)e5rt_async_event_release();
  }
  return result;
}

void sub_19EA34A0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA34CDC(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  MEMORY[0x19F3C1900](v1, 0x50C80EE9192B6);
  _Unwind_Resume(a1);
}

void sub_19EA34FC4(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  MEMORY[0x19F3C1900](v1, 0x50C80EE9192B6);
  _Unwind_Resume(a1);
}

void sub_19EA352AC(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  MEMORY[0x19F3C1900](v1, 0x50C80EE9192B6);
  _Unwind_Resume(a1);
}

void sub_19EA3545C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA35668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);

  std::unique_ptr<e5rt_async_event,MLE5ObjectDeleter<e5rt_async_event>>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void sub_19EA35980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);

  std::unique_ptr<e5rt_async_event,MLE5ObjectDeleter<e5rt_async_event>>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

id getIOSurfaceSharedEventFromMTLSharedEvent(void *a1)
{
  uint64_t v1 = (void *)[a1 newSharedEventHandle];
  uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F2EF90]), "initWithMachPort:", objc_msgSend(v1, "eventPort"));

  return v2;
}

void sub_19EA35A64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA35C50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA35EBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_19EA36460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_19EA366A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA3672C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19EA36A10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  *(void *)(v25 - 128) = &a24;
  std::vector<std::unique_ptr<e5rt_async_event,MLE5ObjectDeleter<e5rt_async_event>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 128));

  _Unwind_Resume(a1);
}

void anonymous namespace'::dependentEventsBoundTo(_anonymous_namespace_ *this, e5rt_execution_stream_operation *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t dependent_event_count = e5rt_execution_stream_operation_get_dependent_event_count();
  uint64_t v4 = (void *)MEMORY[0x1E4F1C3A8];
  if (dependent_event_count)
  {
    BOOL v5 = +[MLLogging coreChannel];
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      int buf = 136315394;
      uint64_t buf_4 = e5rt_get_last_error_message();
      __int16 v12 = 1024;
      int v13 = dependent_event_count;
      _os_log_error_impl(&dword_19E58B000, v5, OS_LOG_TYPE_ERROR, "Failed to get the number of dependent events. E5RT: %s (%d)", (uint8_t *)&buf, 0x12u);
    }

    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", *v4, @"Failed to get the number of dependent events. E5RT: %s (%d)", e5rt_get_last_error_message(), dependent_event_count);
  }
  uint64_t v6 = malloc_type_calloc(0, 8uLL, 0x2004093837F09uLL);
  uint64_t v7 = e5rt_execution_stream_operation_retain_dependent_events();
  if (v7)
  {
    char v8 = +[MLLogging coreChannel];
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      uint64_t last_error_message = e5rt_get_last_error_message();
      int buf = 136315394;
      uint64_t buf_4 = last_error_message;
      __int16 v12 = 1024;
      int v13 = v7;
      _os_log_error_impl(&dword_19E58B000, v8, OS_LOG_TYPE_ERROR, "Failed to retain dependent event bound to the E5 operation. E5RT: %s (%d)", (uint8_t *)&buf, 0x12u);
    }

    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", *v4, @"Failed to retain dependent event bound to the E5 operation. E5RT: %s (%d)", e5rt_get_last_error_message(), v7);
  }
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  free(v6);
}

void sub_19EA36DE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::vector<std::unique_ptr<e5rt_async_event,MLE5ObjectDeleter<e5rt_async_event>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (uint64_t *)**a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t *)v1[1];
    BOOL v5 = **a1;
    if (v4 != v2)
    {
      do
        std::unique_ptr<e5rt_async_event,MLE5ObjectDeleter<e5rt_async_event>>::reset[abi:ne180100](--v4, 0);
      while (v4 != v2);
      BOOL v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__split_buffer<std::unique_ptr<e5rt_async_event,MLE5ObjectDeleter<e5rt_async_event>>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    std::unique_ptr<e5rt_async_event,MLE5ObjectDeleter<e5rt_async_event>>::reset[abi:ne180100]((uint64_t *)(i - 8), 0);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_19EA3746C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  if (v20) {
    operator delete(v20);
  }

  _Unwind_Resume(a1);
}

void sub_19EA37788(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA37D10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA380D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_19EA383F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_19EA3870C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_19EA38950(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA38D4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA38E04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA38E6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA38FD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA39398(_Unwind_Exception *a1)
{
  v1[2](v1);

  _Unwind_Resume(a1);
}

void sub_19EA39638(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA39844(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA39C6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_19EA39E14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA3A078(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA3A2C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA3A374(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  unint64_t v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)MLE5ExecutionStreamOperation;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_19EA3A5A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_19EA3A698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_19EA3A7A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_19EA3A858(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19EA3AA84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);

  ElapsedTimeRecorder::~ElapsedTimeRecorder((id *)va);
  _Unwind_Resume(a1);
}

void sub_19EA3ADD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA3B14C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA3B26C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA3B304(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA3B358(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA3B3D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA3B474(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  __int16 v12 = v11;

  _Unwind_Resume(a1);
}

void sub_19EA3B520(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t Archiver::MMappedInputENMLFile::size(Archiver::MMappedInputENMLFile *this)
{
  return *((void *)this + 7);
}

uint64_t Archiver::MMappedInputENMLFile::data(Archiver::MMappedInputENMLFile *this)
{
  return *((void *)this + 6);
}

void Archiver::MMappedInputENMLFile::~MMappedInputENMLFile(Archiver::MMappedInputENMLFile *this)
{
  Archiver::MMappedFile::~MMappedFile(this);

  JUMPOUT(0x19F3C1920);
}

void sub_19EA3B63C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA3BF18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  v17[2](v17);
  _Unwind_Resume(a1);
}

void sub_19EA3C498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_19EA3C64C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA3C78C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA3D0F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  _Unwind_Resume(a1);
}

uint64_t **google::protobuf::Map<long long,double>::InnerMap::iterator_base<google::protobuf::Map<long long,double>::KeyValuePair const>::operator++(uint64_t **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (uint64_t *)(*a1)[2];
  if (v3) {
    goto LABEL_2;
  }
  long long v16 = 0;
  uint64_t v4 = a1[1];
  uint64_t v5 = (unint64_t)a1[2] & (v4[1] - 1);
  a1[2] = (uint64_t *)v5;
  uint64_t v6 = v4[4];
  uint64_t v7 = *(uint64_t **)(v6 + 8 * v5);
  if (v7 == v2) {
    goto LABEL_11;
  }
  if (v7 && v7 != *(uint64_t **)(v6 + 8 * (v5 ^ 1)))
  {
    while (1)
    {
      uint64_t v7 = (uint64_t *)v7[2];
      if (!v7) {
        break;
      }
      if (v7 == v2) {
        goto LABEL_11;
      }
    }
  }
  google::protobuf::Map<long long,double>::InnerMap::FindHelper(&v17, v4, v2, &v16);
  uint64_t v5 = v18;
  a1[2] = (uint64_t *)v18;
  uint64_t v8 = a1[1][4];
  uint64_t v9 = *(void *)(v8 + 8 * v5);
  if (!v9 || v9 != *(void *)(v8 + 8 * (v5 ^ 1)))
  {
LABEL_11:
    unint64_t v10 = v5 + 1;
LABEL_12:
    google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::KeyValuePair const>::SearchFrom(a1, v10);
    return a1;
  }
  __int16 v12 = v16;
  int v13 = (void *)v16[1];
  if (v13)
  {
    do
    {
      uint64_t v14 = v13;
      int v13 = (void *)*v13;
    }
    while (v13);
  }
  else
  {
    do
    {
      uint64_t v14 = (void *)v12[2];
      BOOL v15 = *v14 == (void)v12;
      __int16 v12 = v14;
    }
    while (!v15);
  }
  long long v16 = v14;
  if (v14 == (void *)(v9 + 8))
  {
    unint64_t v10 = v5 + 2;
    goto LABEL_12;
  }
  uint64_t v3 = (uint64_t *)v14[4];
LABEL_2:
  *a1 = v3;
  return a1;
}

void *google::protobuf::Map<long long,double>::InnerMap::FindHelper(void *result, void *a2, uint64_t *a3, void *a4)
{
  uint64_t v4 = result;
  uint64_t v5 = (a2[1] - 1) & (a2[2] + *a3);
  uint64_t v6 = a2[4];
  uint64_t v7 = *(void **)(v6 + 8 * v5);
  if (v7)
  {
    if (v7 != *(void **)(v6 + 8 * (v5 ^ 1)))
    {
      while (*v7 != *a3)
      {
        uint64_t v7 = (void *)v7[2];
        if (!v7) {
          goto LABEL_10;
        }
      }
      float *result = v7;
      goto LABEL_12;
    }
    v5 &= ~1uLL;
    uint64_t v10 = *(void *)(v6 + 8 * v5);
    uint64_t result = (void *)std::__tree<long long *,google::protobuf::Map<long long,double>::InnerMap::KeyCompare,google::protobuf::Map<long long,double>::MapAllocator<long long *>>::find<long long *>(v10, a3);
    if ((void *)(v10 + 8) != result)
    {
      if (a4) {
        *a4 = result;
      }
      void *v4 = result[4];
LABEL_12:
      v4[1] = a2;
      v4[2] = v5;
      goto LABEL_13;
    }
  }
LABEL_10:
  void *v4 = 0;
  v4[1] = 0;
  v4[2] = 0;
LABEL_13:
  v4[3] = v5;
  return result;
}

uint64_t std::__tree<long long *,google::protobuf::Map<long long,double>::InnerMap::KeyCompare,google::protobuf::Map<long long,double>::MapAllocator<long long *>>::find<long long *>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v2 = a1 + 8;
  uint64_t v3 = v4;
  if (!v4) {
    return v2;
  }
  uint64_t v5 = *a2;
  uint64_t v6 = v2;
  do
  {
    uint64_t v7 = **(void **)(v3 + 32);
    BOOL v8 = v7 < v5;
    if (v7 >= v5) {
      uint64_t v9 = (uint64_t *)v3;
    }
    else {
      uint64_t v9 = (uint64_t *)(v3 + 8);
    }
    if (!v8) {
      uint64_t v6 = v3;
    }
    uint64_t v3 = *v9;
  }
  while (*v9);
  if (v6 == v2 || v5 < **(void **)(v6 + 32)) {
    return v2;
  }
  return v6;
}

void sub_19EA3D5B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA3D728(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA3D7F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t CoreML::NNCompiler::Backend::NeuralNetwork::NeuralNetworkEspressoNetBackend::GetMLModelInfo(CoreML::NNCompiler::Backend::NeuralNetwork::NeuralNetworkEspressoNetBackend *this)
{
  return *((void *)this + 4);
}

void CoreML::NNCompiler::Backend::NeuralNetwork::NeuralNetworkEspressoNetBackend::Compile(CoreML::NNCompiler::Backend::NeuralNetwork::NeuralNetworkEspressoNetBackend *this, OArchive *a2)
{
  uint64_t v221 = *MEMORY[0x1E4F143B8];
  if (*((char *)this + 71) < 0)
  {
    **((unsigned char **)this + 6) = 0;
    *((void *)this + 7) = 0;
  }
  else
  {
    *((unsigned char *)this + 48) = 0;
    *((unsigned char *)this + 71) = 0;
  }
  v186[1] = 0;
  v187 = 0;
  v185 = (uint64_t *)v186;
  v186[0] = 0;
  uint64_t v163 = std::map<std::string,std::string>::at(*((void *)this + 4) + 80, (void *)(*((void *)this + 4) + 32));
  if (!*(unsigned char *)(v163 + 312))
  {
    v205[1] = 0;
    v205[0] = 0;
    *(void *)v204 = v205;
    operator new();
  }
  uint64_t v2 = *(uint64_t **)(*((void *)this + 1) + 16);
  if (!v2) {
    uint64_t v2 = &CoreML::Specification::_ModelDescription_default_instance_;
  }
  uint64_t v3 = v2[4];
  if (v3) {
    uint64_t v4 = v3 + 8;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v5 = *((int *)v2 + 6);
  if (!v5) {
    goto LABEL_74;
  }
  uint64_t v6 = v4 + 8 * v5;
  uint64_t v7 = *((void *)this + 4);
  uint64_t v159 = v7 + 80;
  v160 = (void *)(v7 + 32);
  while (1)
  {
    uint64_t v8 = *(void *)v4;
    uint64_t v9 = *(void **)(*(void *)v4 + 16);
    uint64_t v10 = *(uint64_t **)(*(void *)v4 + 32);
    if (!v10) {
      uint64_t v10 = &CoreML::Specification::_FeatureType_default_instance_;
    }
    int v11 = *((_DWORD *)v10 + 9);
    if (v11 == 5) {
      break;
    }
    if (v11 != 4)
    {
      uint64_t v35 = +[MLLogging coreChannel];
      if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v204 = 0;
        _os_log_error_impl(&dword_19E58B000, v35, OS_LOG_TYPE_ERROR, "Neural networks only accept image and array inputs.", v204, 2u);
      }

      float v36 = (void *)MEMORY[0x1E4F28C58];
      *(void *)int buf = *MEMORY[0x1E4F28568];
      uint64_t v37 = [NSString stringWithFormat:@"Neural networks only accept image and array inputs."];
      *(void *)v204 = v37;
      uint64_t v38 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v204 forKeys:buf count:1];
      uint64_t v39 = [v36 errorWithDomain:@"com.apple.CoreML" code:1 userInfo:v38];
      goto LABEL_73;
    }
    inited = (CoreML::Specification::protobuf_FeatureTypes_2eproto *)std::map<std::string,std::string>::at(v159, v160);
    if (*((unsigned char *)inited + 317)) {
      LODWORD(v13) = 5;
    }
    else {
      LODWORD(v13) = 4;
    }
    uint64_t v14 = *(uint64_t **)(v8 + 32);
    if (v14) {
      BOOL v15 = *(uint64_t **)(v8 + 32);
    }
    else {
      BOOL v15 = &CoreML::Specification::_FeatureType_default_instance_;
    }
    if (*((_DWORD *)v15 + 9) == 4)
    {
      long long v16 = (uint64_t *)v15[3];
    }
    else
    {
      inited = (CoreML::Specification::protobuf_FeatureTypes_2eproto *)CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(inited);
      uint64_t v14 = *(uint64_t **)(v8 + 32);
      long long v16 = &CoreML::Specification::_ImageFeatureType_default_instance_;
    }
    int v28 = *((_DWORD *)v16 + 8);
    _ZF = v28 == 10 || v28 == 40;
    if (_ZF) {
      int v25 = 1;
    }
    else {
      int v25 = 3;
    }
    if (v14) {
      uint64_t v30 = v14;
    }
    else {
      uint64_t v30 = &CoreML::Specification::_FeatureType_default_instance_;
    }
    if (*((_DWORD *)v30 + 9) == 4)
    {
      float v31 = (uint64_t *)v30[3];
    }
    else
    {
      inited = (CoreML::Specification::protobuf_FeatureTypes_2eproto *)CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(inited);
      uint64_t v14 = *(uint64_t **)(v8 + 32);
      float v31 = &CoreML::Specification::_ImageFeatureType_default_instance_;
    }
    int v23 = *((_DWORD *)v31 + 4);
    if (!v14) {
      uint64_t v14 = &CoreML::Specification::_FeatureType_default_instance_;
    }
    if (*((_DWORD *)v14 + 9) == 4)
    {
      uint64_t v32 = (uint64_t *)v14[3];
    }
    else
    {
      CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(inited);
      uint64_t v32 = &CoreML::Specification::_ImageFeatureType_default_instance_;
    }
    int v24 = *((_DWORD *)v32 + 6);
    if (v23) {
      BOOL v33 = v24 == 0;
    }
    else {
      BOOL v33 = 1;
    }
    if (v33)
    {
      uint64_t v42 = +[MLLogging coreChannel];
      if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v204 = 0;
        _os_log_error_impl(&dword_19E58B000, v42, OS_LOG_TYPE_ERROR, "Invalid height and width for the image input.", v204, 2u);
      }

      float v43 = (void *)MEMORY[0x1E4F28C58];
      *(void *)int buf = *MEMORY[0x1E4F28568];
      uint64_t v37 = [NSString stringWithFormat:@"Invalid height and width for the image input."];
      *(void *)v204 = v37;
      uint64_t v38 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v204 forKeys:buf count:1];
      uint64_t v39 = [v43 errorWithDomain:@"com.apple.CoreML" code:1 userInfo:v38];
      goto LABEL_73;
    }
    int v27 = 1;
    int v26 = 1;
LABEL_61:
    *(void *)v204 = v9;
    uint64_t v34 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v185, v9, (long long **)v204);
    *((_DWORD *)v34 + 14) = v23;
    *((_DWORD *)v34 + 15) = v24;
    *((_DWORD *)v34 + 16) = v25;
    *((_DWORD *)v34 + 17) = v26;
    *((_DWORD *)v34 + 18) = v27;
    *((_DWORD *)v34 + 19) = v13;
    *((void *)v34 + 10) = 0;
    *((void *)v34 + 11) = 0;
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v34 + 96, 0, 0, 0);
    v4 += 8;
    if (v4 == v6) {
      goto LABEL_74;
    }
  }
  uint64_t v17 = v10[3];
  uint64_t v13 = *(unsigned int *)(v17 + 16);
  if ((int)v13 > 0)
  {
    uint64_t v18 = 0;
    uint64_t v19 = (v13 - 1);
    uint64_t v20 = (v13 - 2);
    uint64_t v21 = (v13 - 3);
    uint64_t v22 = (v13 - 4);
    int v23 = 1;
    int v24 = 1;
    int v25 = 1;
    int v26 = 1;
    int v27 = 1;
    do
    {
      if (!v18) {
        int v23 = *(_DWORD *)(*(void *)(v17 + 24) + 8 * v19 + 8);
      }
      if (!(v19 - v20 + v18)) {
        int v24 = *(_DWORD *)(*(void *)(v17 + 24) + 8 * v20 + 8);
      }
      if (!(v19 - v21 + v18)) {
        int v25 = *(_DWORD *)(*(void *)(v17 + 24) + 8 * v21 + 8);
      }
      if (!(v19 - v22 + v18)) {
        int v26 = *(_DWORD *)(*(void *)(v17 + 24) + 8 * v22 + 8);
      }
      if (v19 + v18 <= (int)v13 - 5) {
        v27 *= *(void *)(*(void *)(v17 + 24) + 8 * (v13 - 1) + 8 + 8 * v18);
      }
      --v18;
    }
    while (v19 + v18 + 1 > 0);
    goto LABEL_61;
  }
  uint64_t v40 = +[MLLogging coreChannel];
  if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)v204 = 67109120;
    *(_DWORD *)&v204[4] = v13;
    _os_log_error_impl(&dword_19E58B000, v40, OS_LOG_TYPE_ERROR, "Input MLMultiArray cannot be %d dimensional (must have at least 1 dimension).", v204, 8u);
  }

  uint64_t v41 = (void *)MEMORY[0x1E4F28C58];
  *(void *)int buf = *MEMORY[0x1E4F28568];
  uint64_t v37 = objc_msgSend(NSString, "stringWithFormat:", @"Input MLMultiArray cannot be %d dimensional (must have at least 1 dimension).", v13);
  *(void *)v204 = v37;
  uint64_t v38 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v204 forKeys:buf count:1];
  uint64_t v39 = [v41 errorWithDomain:@"com.apple.CoreML" code:1 userInfo:v38];
LABEL_73:
  v187 = v39;

LABEL_74:
  char v44 = 0;
  std::map<std::string,Espresso::layer_shape>::map[abi:ne180100]((uint64_t)&v183, &v185);
  if (*(unsigned char *)(v163 + 312))
  {
    unint64_t v45 = v183;
    if (v183 != v184)
    {
      do
      {
        v45[7] = (void *)-1;
        v45[8] = (void *)-1;
        *((_DWORD *)v45 + 18) = -1;
        float v46 = v45[1];
        if (v46)
        {
          do
          {
            uint64_t v47 = (void **)v46;
            float v46 = (void *)*v46;
          }
          while (v46);
        }
        else
        {
          do
          {
            uint64_t v47 = (void **)v45[2];
            _ZF = *v47 == v45;
            unint64_t v45 = v47;
          }
          while (!_ZF);
        }
        unint64_t v45 = v47;
      }
      while (v47 != v184);
    }
  }
  *(_DWORD *)v204 = 80000;
  Espresso::create_context((Espresso::abstract_engine_factory *)&v181, (int *)v204);
  uint64_t v179 = v181;
  v180 = v182;
  if (v182) {
    atomic_fetch_add_explicit(&v182->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v177 = 0;
  v178 = 0;
  MEMORY[0x19F3C0B90](v204, &v179, 0, &v177);
  if (v178) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v178);
  }
  if (v180) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v180);
  }
  char v176 = 0;
  uint64_t v48 = *((void *)this + 1);
  uint64_t v49 = *((void *)this + 4);
  int v50 = operator new(0x30uLL);
  *int v50 = &unk_1EF0DD128;
  v50[1] = v49;
  v50[2] = &v176;
  v50[3] = v48;
  v50[4] = v204;
  v50[5] = &v183;
  *(void *)&buf[24] = v50;
  std::__function::__func<ConvertLayers(CoreML::Specification::Model const&,CoreML::NNCompiler::MLModelInfo const&,Espresso::sequential_builder &,std::map<std::string,Espresso::layer_shape> &,EspressoCommon::compileModelResult &,NSError * {__strong}&)::$_0,std::allocator<ConvertLayers(CoreML::Specification::Model const&,CoreML::NNCompiler::MLModelInfo const&,Espresso::sequential_builder &,std::map<std::string,Espresso::layer_shape> &,EspressoCommon::compileModelResult &,NSError * {__strong}&)::$_0>,BOOL ()(void)>::__clone((uint64_t)v50);
  *(void *)&v193[8] = v51;
  std::string::basic_string[abi:ne180100]<0>(__p, "Error in compiling custom layer model.");
  if (!*(void *)&v193[8]) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  char v52 = (*(uint64_t (**)(void))(**(void **)&v193[8] + 48))(*(void *)&v193[8]);
  if (SBYTE7(v169[0]) < 0) {
    operator delete(__p[0]);
  }
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](&__sb);
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](buf);
  if ((v52 & 1) == 0)
  {
    v151 = v187;
    if (v187)
    {
      exception = (CoreML::MLModelException *)__cxa_allocate_exception(0x28uLL);
      v153 = (void (*)(void *))CoreML::MLModelException::~MLModelException;
      CoreML::MLModelException::MLModelException(exception, v151);
    }
    else
    {
      exception = (CoreML::MLModelException *)__cxa_allocate_exception(0x10uLL);
      v153 = (void (*)(void *))MEMORY[0x1E4FBA1D8];
      MEMORY[0x19F3C1380](exception, "Could not convert neural network model layers.");
      v154 = (struct type_info *)MEMORY[0x1E4FBA338];
    }
    __cxa_throw(exception, v154, v153);
  }
  if (*(unsigned char *)(v163 + 312))
  {
    if (*(unsigned char *)(v163 + 314)) {
      char v53 = 1;
    }
    else {
      char v53 = *(unsigned char *)(v163 + 316) != 0;
    }
  }
  else
  {
    char v53 = 0;
  }
  char v175 = 0;
  BuildFromShapes((uint64_t)v174, (uint64_t)v204, (uint64_t)&v185, v53, (uint64_t)&v187, &v175);
  if (!v174[0])
  {
    long long v54 = v187;
    if (*(unsigned char *)(v163 + 312) || !v175)
    {
      if (v187)
      {
        v155 = (CoreML::MLModelException *)__cxa_allocate_exception(0x28uLL);
        v156 = (void (*)(void *))CoreML::MLModelException::~MLModelException;
        CoreML::MLModelException::MLModelException(v155, v54);
      }
      else
      {
        v155 = (CoreML::MLModelException *)__cxa_allocate_exception(0x10uLL);
        v156 = (void (*)(void *))MEMORY[0x1E4FBA1D8];
        MEMORY[0x19F3C1380](v155, "Could not build inference network.");
        v157 = (struct type_info *)MEMORY[0x1E4FBA338];
      }
      __cxa_throw(v155, v157, v156);
    }
    v187 = 0;

    char v44 = 1;
  }
  if (*(_DWORD *)(*((void *)this + 1) + 44) == 500)
  {
    std::streambuf::basic_streambuf();
    *(void *)&long long __sb = &unk_1EF0DAFC0;
    operator new();
  }
  if (!*(unsigned char *)(v163 + 312))
  {
    if (v44)
    {
LABEL_105:
      std::map<std::string,Espresso::layer_shape>::map[abi:ne180100]((uint64_t)__p, &v185);
      int v55 = 1;
      while (1)
      {
        int v56 = (void **)__p[0];
        if (__p[0] != &__p[1])
        {
          do
          {
            *((_DWORD *)v56 + 18) = v55;
            v57 = (void **)v56[1];
            if (v57)
            {
              do
              {
                uint64_t v58 = v57;
                v57 = (void **)*v57;
              }
              while (v57);
            }
            else
            {
              do
              {
                uint64_t v58 = (void **)v56[2];
                _ZF = *v58 == v56;
                int v56 = v58;
              }
              while (!_ZF);
            }
            int v56 = v58;
          }
          while (v58 != &__p[1]);
        }
        *(void *)&buf[8] = 0;
        *(void *)&buf[16] = 0;
        *(void *)&buf[32] = 0;
        *(void *)&buf[40] = 0;
        *(void *)int buf = &buf[8];
        *(void *)&buf[24] = &buf[32];
        v216 = v207;
        v217 = v208;
        if (v208) {
          atomic_fetch_add_explicit(&v208->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        Espresso::compute_network_shape_starting_from_data_shapes();
        std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy(*(void **)&buf[8]);
        *(_OWORD *)int buf = __sb;
        *(void *)&buf[16] = *(void *)v193;
        if (*(void *)v193)
        {
          *(void *)(*((void *)&__sb + 1) + 16) = &buf[8];
          *(void *)&long long __sb = (char *)&__sb + 8;
          *((void *)&__sb + 1) = 0;
          *(void *)v193 = 0;
        }
        else
        {
          *(void *)int buf = &buf[8];
        }
        std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy(*(void **)&buf[32]);
        int64_t v59 = *(void **)&v193[16];
        *(void *)&buf[24] = *(void *)&v193[8];
        *(void *)&buf[32] = *(void *)&v193[16];
        *(void *)&buf[40] = *(void *)&v193[24];
        if (*(void *)&v193[24])
        {
          *(void *)(*(void *)&v193[16] + 16) = &buf[32];
          int64_t v59 = 0;
          *(void *)&v193[8] = &v193[16];
          *(void *)&v193[16] = 0;
          *(void *)&v193[24] = 0;
        }
        else
        {
          *(void *)&buf[24] = &buf[32];
        }
        std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy(v59);
        std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy(*((void **)&__sb + 1));
        if (v217) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v217);
        }
        int64_t v60 = *(uint8_t **)buf;
        if (*(uint8_t **)buf == &buf[8]) {
          break;
        }
        char v61 = 0;
        while (1)
        {
          v63.i64[0] = 0x100000001;
          v63.i64[1] = 0x100000001;
          v62.i64[1] = *((void *)v60 + 7);
          v62.i64[0] = *(void *)(v60 + 68);
          v62.i8[0] = vmaxv_u16((uint16x4_t)vmovn_s32(vcgtq_s32(v63, v62)));
          char v64 = v62.i8[0] | (*((_DWORD *)v60 + 16) < 1);
          if (v62.i8[0] & 1 | (*((_DWORD *)v60 + 16) < 1)) {
            break;
          }
          float v65 = (uint8_t *)*((void *)v60 + 1);
          if (v65)
          {
            do
            {
              uint64_t v66 = v65;
              float v65 = *(uint8_t **)v65;
            }
            while (v65);
          }
          else
          {
            do
            {
              uint64_t v66 = (uint8_t *)*((void *)v60 + 2);
              _ZF = *(void *)v66 == (void)v60;
              int64_t v60 = v66;
            }
            while (!_ZF);
          }
          v61 |= v64;
          int64_t v60 = v66;
          if (v66 == &buf[8])
          {
            if ((v61 & 1) == 0) {
              goto LABEL_168;
            }
            break;
          }
        }
        std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy(*(void **)&buf[32]);
        std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy(*(void **)&buf[8]);
        if (++v55 == 400) {
          goto LABEL_169;
        }
      }
LABEL_168:
      std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy(*(void **)&buf[32]);
      std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy(*(void **)&buf[8]);
LABEL_169:
      uint64_t v71 = +[MLLogging coreChannel];
      if (os_log_type_enabled(v71, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)int buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v55;
        _os_log_impl(&dword_19E58B000, v71, OS_LOG_TYPE_INFO, "IOS 11 Legacy code found sequence length %d", buf, 8u);
      }

      BuildFromShapes((uint64_t)buf, (uint64_t)v204, (uint64_t)__p, 0, (uint64_t)&v187, 0);
      long long v72 = *(_OWORD *)buf;
      *(_OWORD *)int buf = 0uLL;
      int v73 = (std::__shared_weak_count *)v174[1];
      *(_OWORD *)v174 = v72;
      if (v73)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v73);
        v74 = v174[0];
        if (*(void *)&buf[8]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
        }
        if (v74)
        {
LABEL_175:
          std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((void *)__p[1]);
          goto LABEL_176;
        }
      }
      else if ((void)v72)
      {
        goto LABEL_175;
      }
      v147 = v187;
      if (v187)
      {
        v148 = (CoreML::MLModelException *)__cxa_allocate_exception(0x28uLL);
        v149 = (void (*)(void *))CoreML::MLModelException::~MLModelException;
        CoreML::MLModelException::MLModelException(v148, v147);
      }
      else
      {
        v148 = (CoreML::MLModelException *)__cxa_allocate_exception(0x10uLL);
        v149 = (void (*)(void *))MEMORY[0x1E4FBA1D8];
        MEMORY[0x19F3C1380](v148, "Could not build inference network.");
        v150 = (struct type_info *)MEMORY[0x1E4FBA338];
      }
      __cxa_throw(v148, v150, v149);
    }
    if (!*(unsigned char *)(v163 + 315))
    {
      v67 = (char *)v174[0] + 152;
      while (1)
      {
        v67 = *(char **)v67;
        if (!v67) {
          break;
        }
        if (v67[39] < 0) {
          std::string::__init_copy_ctor_external(&v188, *((const std::string::value_type **)v67 + 2), *((void *)v67 + 3));
        }
        else {
          std::string v188 = *(std::string *)(v67 + 16);
        }
        uint64_t v68 = *((void *)v67 + 5);
        uint64_t v69 = (std::__shared_weak_count *)*((void *)v67 + 6);
        uint64_t v189 = v68;
        v190 = v69;
        if (v69)
        {
          atomic_fetch_add_explicit(&v69->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v68 = v189;
        }
        Espresso::abstract_blob_container::shape((char *)buf, v68);
        if ((*(_DWORD *)&buf[16] & 0x80000000) != 0)
        {
          BOOL v70 = 1;
        }
        else
        {
          Espresso::abstract_blob_container::shape((char *)&__sb, v189);
          if (SHIDWORD(__sb) < 1)
          {
            BOOL v70 = 1;
          }
          else
          {
            Espresso::abstract_blob_container::shape((char *)__p, v189);
            if (SLODWORD(__p[1]) < 1)
            {
              BOOL v70 = 1;
            }
            else
            {
              Espresso::abstract_blob_container::shape((char *)&v216, v189);
              if (SHIDWORD(v216) < 1)
              {
                BOOL v70 = 1;
              }
              else
              {
                Espresso::abstract_blob_container::shape((char *)&__s1, v189);
                BOOL v70 = (int)__s1 < 1;
                if (v214)
                {
                  v215 = v214;
                  operator delete(v214);
                }
              }
              if (v219)
              {
                v220 = v219;
                operator delete(v219);
              }
            }
            if (*((void *)&v169[1] + 1))
            {
              *(void *)&long long v170 = *((void *)&v169[1] + 1);
              operator delete(*((void **)&v169[1] + 1));
            }
          }
          if (*(void *)&v193[24])
          {
            v194.__r_.__value_.__r.__words[0] = *(void *)&v193[24];
            operator delete(*(void **)&v193[24]);
          }
        }
        if (*(void *)&buf[40])
        {
          v200[0].__r_.__value_.__r.__words[0] = *(void *)&buf[40];
          operator delete(*(void **)&buf[40]);
        }
        if (v190) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v190);
        }
        if (SHIBYTE(v188.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v188.__r_.__value_.__l.__data_);
          if (v70) {
            goto LABEL_105;
          }
        }
        else if (v70)
        {
          goto LABEL_105;
        }
      }
    }
  }
LABEL_176:
  v75 = *(void **)(v163 + 232);
  *(void *)&buf[16] = 0;
  *(void *)&buf[8] = 0;
  v161 = v174[0];
  *(void *)int buf = &buf[8];
  uint64_t v76 = v75 + 1;
  uint64_t v77 = (void *)*v75;
  if ((void *)*v75 != v75 + 1)
  {
    uint64_t v78 = (uint64_t)(v75 + 21);
    uint64_t v79 = (uint64_t)(v75 + 6);
    uint64_t v80 = (uint64_t)(v75 + 3);
    uint64_t v81 = (uint64_t)(v75 + 15);
    uint64_t v82 = (uint64_t)(v75 + 12);
    uint64_t v83 = (uint64_t)(v75 + 9);
    uint64_t v84 = (uint64_t)(v75 + 18);
    __asm { FMOV            V8.2S, #1.0 }
    do
    {
      int v89 = *(_DWORD *)std::map<std::string,std::string>::at(v78, v77 + 4);
      if (*(float *)std::map<std::string,std::string>::at(v79, v77 + 4) <= 0.0)
      {
        if (*(float *)std::map<std::string,std::string>::at(v80, v77 + 4) <= 0.0)
        {
          int v91 = *(_DWORD *)std::map<std::string,std::string>::at(v81, v77 + 4);
          int v92 = *(_DWORD *)std::map<std::string,std::string>::at(v82, v77 + 4);
          int v90 = *(_DWORD *)std::map<std::string,std::string>::at(v83, v77 + 4);
          uint64_t v93 = 1;
        }
        else
        {
          int v90 = *(_DWORD *)std::map<std::string,std::string>::at(v81, v77 + 4);
          int v92 = *(_DWORD *)std::map<std::string,std::string>::at(v82, v77 + 4);
          int v91 = *(_DWORD *)std::map<std::string,std::string>::at(v83, v77 + 4);
          uint64_t v93 = 0x100000001;
        }
        uint64_t v164 = v93;
      }
      else
      {
        uint64_t v164 = 0;
        int v90 = *(_DWORD *)std::map<std::string,std::string>::at(v84, v77 + 4);
        int v91 = 0;
        int v92 = 0;
      }
      *(void *)&long long __sb = v77 + 4;
      v94 = std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)buf, v77 + 4, (long long **)&__sb);
      *((_DWORD *)v94 + 14) = v89;
      *((_DWORD *)v94 + 15) = 0;
      *((void *)v94 + 8) = v164;
      *((_DWORD *)v94 + 18) = v90;
      *((_DWORD *)v94 + 19) = v92;
      *((_DWORD *)v94 + 20) = v91;
      *(void *)(v94 + 92) = 0;
      *(void *)(v94 + 84) = 0;
      *((_DWORD *)v94 + 25) = 0;
      *((void *)v94 + 13) = _D8;
      *((void *)v94 + 14) = 0;
      *((void *)v94 + 15) = 0;
      *((_DWORD *)v94 + 32) = 0;
      v95 = (void *)v77[1];
      if (v95)
      {
        do
        {
          v96 = v95;
          v95 = (void *)*v95;
        }
        while (v95);
      }
      else
      {
        do
        {
          v96 = (void *)v77[2];
          _ZF = *v96 == (void)v77;
          uint64_t v77 = v96;
        }
        while (!_ZF);
      }
      uint64_t v77 = v96;
    }
    while (v96 != v76);
  }
  v97 = (char *)v161 + 336;
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(*((char **)v161 + 42));
  uint64_t v98 = *(void *)&buf[8];
  *((void *)v161 + 41) = *(void *)buf;
  *((void *)v161 + 42) = v98;
  uint64_t v99 = *(void *)&buf[16];
  *((void *)v161 + 43) = *(void *)&buf[16];
  if (v99)
  {
    *(void *)(v98 + 16) = v97;
    *(void *)int buf = &buf[8];
    *(void *)&buf[8] = 0;
    *(void *)&buf[16] = 0;
    uint64_t v98 = 0;
  }
  else
  {
    *((void *)v161 + 41) = v97;
  }
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy((char *)v98);
  std::map<std::string,std::string>::map[abi:ne180100](&v216, (void *)(*((void *)this + 4) + 128));
  if (v218)
  {
    std::string::basic_string[abi:ne180100]<0>(buf, "mldb_token");
    uint64_t v100 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__count_unique<std::string>(v217, buf);
    uint64_t v101 = v100;
    if ((char)buf[23] < 0)
    {
      operator delete(*(void **)buf);
      if (!v101) {
        goto LABEL_252;
      }
    }
    else if (!v100)
    {
      goto LABEL_252;
    }
    Espresso::net::get_analysis_model_metadata((uint64_t *)buf, v174[0]);
    long long v172 = 0u;
    memset(v173, 0, 56);
    memset(v171, 0, sizeof(v171));
    long long v170 = 0u;
    *(_OWORD *)std::string __p = 0u;
    memset(v169, 0, sizeof(v169));
    if (v203)
    {
      if ((char)buf[23] < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&__sb, *(const std::string::value_type **)buf, *(std::string::size_type *)&buf[8]);
      }
      else
      {
        long long __sb = *(_OWORD *)buf;
        *(void *)v193 = *(void *)&buf[16];
      }
      if ((char)buf[47] < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v193[8], *(const std::string::value_type **)&buf[24], *(std::string::size_type *)&buf[32]);
      }
      else
      {
        *(_OWORD *)&v193[8] = *(_OWORD *)&buf[24];
        *(void *)&v193[24] = *(void *)&buf[40];
      }
      if (SHIBYTE(v200[0].__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v194, v200[0].__r_.__value_.__l.__data_, v200[0].__r_.__value_.__l.__size_);
      }
      else {
        std::string v194 = v200[0];
      }
      if (SHIBYTE(v200[1].__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v195, v200[1].__r_.__value_.__l.__data_, v200[1].__r_.__value_.__l.__size_);
      }
      else {
        std::string v195 = v200[1];
      }
      if (SHIBYTE(v200[2].__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v196, v200[2].__r_.__value_.__l.__data_, v200[2].__r_.__value_.__l.__size_);
      }
      else {
        std::string v196 = v200[2];
      }
      if (SHIBYTE(v201.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v197, v201.__r_.__value_.__l.__data_, v201.__r_.__value_.__l.__size_);
      }
      else {
        std::string v197 = v201;
      }
      if (SHIBYTE(v202.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v198, v202.__r_.__value_.__l.__data_, v202.__r_.__value_.__l.__size_);
      }
      else {
        std::string v198 = v202;
      }
    }
    else
    {
      *(void *)v193 = 0;
      *(void *)&v193[24] = *((void *)&v169[1] + 1);
      v194.__r_.__value_.__r.__words[2] = *(void *)&v171[0];
      std::string v195 = *(std::string *)((char *)v171 + 8);
      v196.__r_.__value_.__r.__words[2] = *(void *)v173;
      std::string v197 = *(std::string *)&v173[8];
      long long __sb = 0uLL;
      __p[0] = 0;
      __p[1] = 0;
      long long v102 = *(_OWORD *)((char *)v169 + 8);
      memset(v169, 0, sizeof(v169));
      *(_OWORD *)&v193[8] = v102;
      *(_OWORD *)&v194.__r_.__value_.__l.__data_ = v170;
      long long v170 = 0uLL;
      memset(v171, 0, sizeof(v171));
      *(_OWORD *)&v196.__r_.__value_.__l.__data_ = v172;
      long long v172 = 0uLL;
      memset(v173, 0, 56);
      std::string v198 = *(std::string *)&v173[32];
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "mldb_token");
    __s1 = __p;
    v103 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v216, __p, (_OWORD **)&__s1);
    std::string::operator=(&v198, (const std::string *)((char *)v103 + 56));
    if (SBYTE7(v169[0]) < 0) {
      operator delete(__p[0]);
    }
    Espresso::net::set_analysis_model_metadata(v174[0], (const Espresso::model_metadata_t *)&__sb);
    if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v198.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v197.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v196.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v196.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v195.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v194.__r_.__value_.__l.__data_);
    }
    if ((v193[31] & 0x80000000) != 0) {
      operator delete(*(void **)&v193[8]);
    }
    if ((v193[7] & 0x80000000) != 0) {
      operator delete((void *)__sb);
    }
    if (v203)
    {
      if (SHIBYTE(v202.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v202.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v201.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v201.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v200[2].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v200[2].__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v200[1].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v200[1].__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v200[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v200[0].__r_.__value_.__l.__data_);
      }
      if ((char)buf[47] < 0) {
        operator delete(*(void **)&buf[24]);
      }
      if ((char)buf[23] < 0) {
        operator delete(*(void **)buf);
      }
    }
  }
LABEL_252:
  *(_OWORD *)std::string __p = 0u;
  v169[0] = 0u;
  LODWORD(v169[1]) = 1065353216;
  v104 = *(uint64_t **)(*((void *)this + 1) + 16);
  if (!v104) {
    v104 = &CoreML::Specification::_ModelDescription_default_instance_;
  }
  uint64_t v105 = v104[7];
  if (v105) {
    uint64_t v106 = v105 + 8;
  }
  else {
    uint64_t v106 = 0;
  }
  uint64_t v107 = *((int *)v104 + 12);
  if (v107)
  {
    uint64_t v108 = 8 * v107;
    do
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)__p, *(unsigned __int8 **)(*(void *)v106 + 16), *(void *)(*(void *)v106 + 16));
      v106 += 8;
      v108 -= 8;
    }
    while (v108);
  }
  CoreML::NNCompiler::Backend::NeuralNetwork::EspressoNetBackend::WriteModelOutputs((uint64_t *)v174, __p);
  *(_OWORD *)&v188.__r_.__value_.__l.__data_ = 0uLL;
  *(void *)int buf = 0x4220000000000000;
  *(_DWORD *)&buf[8] = 0;
  *(_DWORD *)&buf[11] = 0;
  memset(&buf[16], 0, 32);
  v200[0].__r_.__value_.__s.__data_[0] = 0;
  *(_OWORD *)&v200[0].__r_.__value_.__r.__words[1] = 0u;
  memset(&v200[1], 0, 32);
  LODWORD(v200[2].__r_.__value_.__r.__words[1]) = 4096;
  WORD2(v200[2].__r_.__value_.__r.__words[1]) = 0;
  if (v176)
  {
    v109 = +[MLLogging coreChannel];
    if (os_log_type_enabled(v109, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(__sb) = 0;
      _os_log_debug_impl(&dword_19E58B000, v109, OS_LOG_TYPE_DEBUG, "Setting optimize parameter to use half precision", (uint8_t *)&__sb, 2u);
    }

    buf[0] = 1;
  }
  __s1 = v174[0];
  v213 = (std::__shared_weak_count *)v174[1];
  if (v174[1]) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v174[1] + 1, 1uLL, memory_order_relaxed);
  }
  long long __sb = *(_OWORD *)buf;
  *(_OWORD *)v193 = *(_OWORD *)&buf[16];
  *(_OWORD *)&v193[16] = *(_OWORD *)&buf[32];
  v194.__r_.__value_.__s.__data_[0] = v200[0].__r_.__value_.__s.__data_[0];
  v195.__r_.__value_.__r.__words[0] = 0;
  *(_OWORD *)&v194.__r_.__value_.__r.__words[1] = 0uLL;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&v194.__r_.__value_.__r.__words[1], (long long *)v200[0].__r_.__value_.__l.__size_, (long long *)v200[0].__r_.__value_.__r.__words[2], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v200[0].__r_.__value_.__r.__words[2] - v200[0].__r_.__value_.__l.__size_) >> 3));
  if (v200[2].__r_.__value_.__s.__data_[7] < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v195.__r_.__value_.__r.__words[1], (const std::string::value_type *)v200[1].__r_.__value_.__l.__size_, v200[1].__r_.__value_.__r.__words[2]);
  }
  else
  {
    *(_OWORD *)&v195.__r_.__value_.__r.__words[1] = *(_OWORD *)&v200[1].__r_.__value_.__r.__words[1];
    v196.__r_.__value_.__r.__words[0] = v200[2].__r_.__value_.__r.__words[0];
  }
  LODWORD(v196.__r_.__value_.__r.__words[1]) = v200[2].__r_.__value_.__r.__words[1];
  WORD2(v196.__r_.__value_.__r.__words[1]) = WORD2(v200[2].__r_.__value_.__r.__words[1]);
  Espresso::auto_optimize();
  if (v196.__r_.__value_.__s.__data_[7] < 0) {
    operator delete((void *)v195.__r_.__value_.__l.__size_);
  }
  v191[0] = (void **)&v194.__r_.__value_.__l.__size_;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v191);
  if (v213) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v213);
  }
  if (v200[2].__r_.__value_.__s.__data_[7] < 0) {
    operator delete((void *)v200[1].__r_.__value_.__l.__size_);
  }
  v191[0] = (void **)&v200[0].__r_.__value_.__l.__size_;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v191);
  uint64_t v165 = v167;
  *(_OWORD *)&v188.__r_.__value_.__l.__data_ = v167;
  v110 = *(uint64_t (***)(void))this;
  memset(&v166, 0, sizeof(v166));
  uint64_t v111 = v110[3]();
  v112 = *(void **)(std::map<std::string,std::string>::at(v111 + 80, (void *)(v111 + 32)) + 168);
  std::vector<std::string>::size_type v113 = v112[2];
  if (v113)
  {
    uint64_t v114 = v167;
    v115 = (uint64_t **)(v167 + 776);
    if ((void *)(v167 + 776) != v112)
    {
      v116 = v112 + 1;
      v117 = (void *)*v112;
      if (*(void *)(v167 + 792))
      {
        uint64_t v118 = *(void *)(v167 + 776);
        v119 = (uint64_t **)(v167 + 784);
        *(void *)(v167 + 776) = v167 + 784;
        *(void *)(*(void *)(v165 + 784) + 16) = 0;
        *(void *)(v165 + 784) = 0;
        *(void *)(v165 + 792) = 0;
        if (*(void *)(v118 + 8)) {
          uint64_t v120 = *(void *)(v118 + 8);
        }
        else {
          uint64_t v120 = v118;
        }
        *(void *)int buf = v115;
        *(void *)&buf[8] = v120;
        *(void *)&buf[16] = v120;
        if (!v120
          || (*(void *)&buf[8] = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::_DetachedTreeCache::__detach_next(v120),
              v117 == v116))
        {
          v126 = v117;
        }
        else
        {
          do
          {
            std::string::operator=((std::string *)(v120 + 32), (const std::string *)(v117 + 4));
            if ((void *)v120 != v117)
            {
              std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v120 + 56, (std::string *)v117[7], (long long *)v117[8], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v117[8] - v117[7]) >> 3));
              std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,Espresso::layer_shape>,std::__tree_node<std::__value_type<std::string,Espresso::layer_shape>,void *> *,long>>(v120 + 80, (uint64_t *)v117[10], v117 + 11);
            }
            v121 = *(uint64_t **)&buf[16];
            v122 = *v119;
            v123 = (uint64_t **)(v165 + 784);
            v124 = (uint64_t **)(v165 + 784);
            if (*v119)
            {
              do
              {
                while (1)
                {
                  v123 = (uint64_t **)v122;
                  if (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v121 + 4, v122 + 4))break; {
                  v122 = *v123;
                  }
                  v124 = v123;
                  if (!*v123) {
                    goto LABEL_291;
                  }
                }
                v122 = v123[1];
              }
              while (v122);
              v124 = v123 + 1;
            }
LABEL_291:
            std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(v115, (uint64_t)v123, v124, v121);
            *(void *)&buf[16] = *(void *)&buf[8];
            if (*(void *)&buf[8]) {
              *(void *)&buf[8] = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::_DetachedTreeCache::__detach_next(*(uint64_t *)&buf[8]);
            }
            v125 = (void *)v117[1];
            if (v125)
            {
              do
              {
                v126 = v125;
                v125 = (void *)*v125;
              }
              while (v125);
            }
            else
            {
              do
              {
                v126 = (void *)v117[2];
                _ZF = *v126 == (void)v117;
                v117 = v126;
              }
              while (!_ZF);
            }
            uint64_t v120 = *(void *)&buf[16];
            if (*(void *)&buf[16]) {
              BOOL v127 = v126 == v116;
            }
            else {
              BOOL v127 = 1;
            }
            v117 = v126;
          }
          while (!v127);
        }
        std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)buf);
        v117 = v126;
      }
      if (v117 != v116)
      {
        v128 = (uint64_t **)(v165 + 784);
        do
        {
          v129 = (char *)operator new(0x68uLL);
          v130 = v129;
          *(void *)int buf = v129;
          *(void *)&buf[8] = v165 + 784;
          buf[16] = 0;
          v131 = v129 + 32;
          if (*((char *)v117 + 55) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)(v129 + 32), (const std::string::value_type *)v117[4], v117[5]);
          }
          else
          {
            long long v132 = *((_OWORD *)v117 + 2);
            *((void *)v129 + 6) = v117[6];
            *(_OWORD *)v131 = v132;
          }
          *((void *)v130 + 7) = 0;
          *((void *)v130 + 8) = 0;
          *((void *)v130 + 9) = 0;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(v130 + 56), (long long *)v117[7], (long long *)v117[8], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v117[8] - v117[7]) >> 3));
          std::map<std::string,Espresso::layer_shape>::map[abi:ne180100]((uint64_t)(v130 + 80), v117 + 10);
          buf[16] = 1;
          v133 = *v128;
          v134 = (uint64_t **)(v165 + 784);
          v135 = (uint64_t **)(v165 + 784);
          if (*v128)
          {
            do
            {
              while (1)
              {
                v134 = (uint64_t **)v133;
                if (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v131, v133 + 4)) {
                  break;
                }
                v133 = *v134;
                v135 = v134;
                if (!*v134) {
                  goto LABEL_317;
                }
              }
              v133 = v134[1];
            }
            while (v133);
            v135 = v134 + 1;
          }
LABEL_317:
          std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(v115, (uint64_t)v134, v135, (uint64_t *)v130);
          *(void *)int buf = 0;
          std::unique_ptr<std::__tree_node<std::__value_type<std::string,Espresso::net_configuration>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,Espresso::net_configuration>,void *>>>>::reset[abi:ne180100]((uint64_t)buf);
          v136 = (void *)v117[1];
          if (v136)
          {
            do
            {
              v137 = v136;
              v136 = (void *)*v136;
            }
            while (v136);
          }
          else
          {
            do
            {
              v137 = (void *)v117[2];
              _ZF = *v137 == (void)v117;
              v117 = v137;
            }
            while (!_ZF);
          }
          v117 = v137;
        }
        while (v137 != v116);
      }
      std::vector<std::string>::size_type v113 = v112[2];
      uint64_t v114 = v165;
    }
    std::vector<std::string>::reserve(&v166, v113);
    v138 = (void *)*v112;
    if ((void *)*v112 != v112 + 1)
    {
      unint64_t end = v166.__end_;
      do
      {
        v140 = (long long *)(v138 + 4);
        if (end >= v166.__end_cap_.__value_)
        {
          unint64_t end = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v166, v140);
        }
        else
        {
          if (*((char *)v138 + 55) < 0)
          {
            std::string::__init_copy_ctor_external(end, (const std::string::value_type *)v138[4], v138[5]);
          }
          else
          {
            long long v141 = *v140;
            end->__r_.__value_.__r.__words[2] = v138[6];
            *(_OWORD *)&end->__r_.__value_.__l.__data_ = v141;
          }
          ++end;
        }
        v166.__end_ = end;
        v142 = (void *)v138[1];
        if (v142)
        {
          do
          {
            v143 = v142;
            v142 = (void *)*v142;
          }
          while (v142);
        }
        else
        {
          do
          {
            v143 = (void *)v138[2];
            _ZF = *v143 == (void)v138;
            v138 = v143;
          }
          while (!_ZF);
        }
        v138 = v143;
      }
      while (v143 != v112 + 1);
    }
    uint64_t v144 = *std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__find_equal<std::string>((uint64_t)v112, buf, v166.__begin_->__r_.__value_.__r.__words);
    if (!v144) {
      std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
    }
    if (v114 + 800 != v144 + 56)
    {
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v114 + 800, *(std::string **)(v144 + 56), *(long long **)(v144 + 64), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v144 + 64) - *(void *)(v144 + 56)) >> 3));
      std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,Espresso::layer_shape>,std::__tree_node<std::__value_type<std::string,Espresso::layer_shape>,void *> *,long>>(v114 + 824, *(uint64_t **)(v144 + 80), (uint64_t *)(v144 + 88));
    }
  }
  *(void *)&long long __sb = &v166;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__sb);
  CoreML::NNCompiler::Backend::NeuralNetwork::EspressoNetBackend::WriteNetwork((uint64_t)&__sb, &v188, (uint64_t)a2);
  (*(void (**)(CoreML::NNCompiler::Backend::NeuralNetwork::NeuralNetworkEspressoNetBackend *, OArchive *))(*(void *)this + 32))(this, a2);
  uint64_t v145 = *(void *)v193;
  long long v146 = __sb;
  long long __sb = *((_OWORD *)this + 3);
  *(void *)v193 = *((void *)this + 8);
  *((_OWORD *)this + 3) = v146;
  *((void *)this + 8) = v145;
  if ((v193[7] & 0x80000000) != 0) {
    operator delete((void *)__sb);
  }
  if (v188.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v188.__r_.__value_.__l.__size_);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)__p);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v217);
  if (v174[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v174[1]);
  }
  std::deque<std::pair<std::shared_ptr<Espresso::abstract_context>,Espresso::compute_path>>::~deque[abi:ne180100]((uint64_t)&v211);
  if (v210) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v210);
  }
  if (v209) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v209);
  }
  if (v208) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v208);
  }
  if (v206 < 0) {
    operator delete(v205[6]);
  }
  std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy(&v205[2]->__vftable);
  if (v205[0]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v205[0]);
  }
  if (v182) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v182);
  }
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy(v184[0]);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy(v186[0]);
}

void sub_19EA3FA6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,std::__shared_weak_count *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,std::__shared_weak_count *a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,void *a60)
{
  if (a46) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a46);
  }
  Espresso::sequential_builder::~sequential_builder((Espresso::sequential_builder *)&STACK[0x360]);
  if (a53) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a53);
  }
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy(a55);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy(a58);

  JUMPOUT(0x19EA4073CLL);
}

void sub_19EA3FC50(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a70);
  if (v72) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v72);
  }
  Espresso::auto_optimize_options::~auto_optimize_options((void **)&STACK[0x2B0]);
  if (a2 == 1)
  {
    uint64_t v76 = __cxa_begin_catch(a1);
    uint64_t v77 = +[MLLogging coreChannel];
    if (os_log_type_enabled(v77, OS_LOG_TYPE_ERROR))
    {
      uint64_t v78 = (*(uint64_t (**)(void *))(*(void *)v76 + 16))(v76);
      LODWORD(STACK[0x2B0]) = 136315138;
      *(void *)(v73 + 4) = v78;
      _os_log_error_impl(&dword_19E58B000, v77, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&STACK[0x2B0], 0xCu);
    }

    uint64_t v79 = (void *)MEMORY[0x1E4F28C58];
    a71 = *MEMORY[0x1E4F28568];
    uint64_t v80 = NSString;
    (*(void (**)(void *))(*(void *)v76 + 16))(v76);
    uint64_t v81 = [v80 stringWithFormat:@"%s"];
    a72 = (uint64_t)v81;
    uint64_t v82 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&a72 forKeys:&a71 count:1];
    uint64_t v83 = [v79 errorWithDomain:@"com.apple.CoreML" code:0 userInfo:v82];

    exception = (CoreML::MLModelException *)__cxa_allocate_exception(0x28uLL);
    CoreML::MLModelException::MLModelException(exception, v83);
  }
  if (a62) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a62);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a23);
  JUMPOUT(0x19EA406E4);
}

void sub_19EA3FC68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,std::__shared_weak_count *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,std::__shared_weak_count *a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,void *a60)
{
  if (SLOBYTE(STACK[0x2C7]) < 0) {
    operator delete((void *)STACK[0x2B0]);
  }
  if (a46) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a46);
  }
  Espresso::sequential_builder::~sequential_builder((Espresso::sequential_builder *)&STACK[0x360]);
  if (a53) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a53);
  }
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy(a55);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy(a58);

  _Unwind_Resume(a1);
}

void sub_19EA3FC80(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t *a57,uint64_t a58,uint64_t a59,void *a60)
{
  MEMORY[0x19F3C1920](a13, 0x1020C40DF1BFCEALL);
  if (a2 == 1)
  {
    int32x4_t v63 = __cxa_begin_catch(a1);
    char v64 = +[MLLogging coreChannel];
    if (os_log_type_enabled(v64, OS_LOG_TYPE_ERROR))
    {
      LOWORD(STACK[0x2B0]) = 0;
      _os_log_error_impl(&dword_19E58B000, v64, OS_LOG_TYPE_ERROR, "Error computing shape information for Neural Network model. This model may be invalid.", (uint8_t *)&STACK[0x2B0], 2u);
    }

    float v65 = +[MLLogging coreChannel];
    if (os_log_type_enabled(v65, OS_LOG_TYPE_ERROR))
    {
      uint64_t v67 = (*(uint64_t (**)(void *))(*(void *)v63 + 16))(v63);
      LODWORD(STACK[0x2B0]) = 136315138;
      STACK[0x2B4] = v67;
      _os_log_error_impl(&dword_19E58B000, v65, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&STACK[0x2B0], 0xCu);
    }

    uint64_t v66 = +[MLLogging coreChannel];
    if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
    {
      LOWORD(STACK[0x2B0]) = 0;
      _os_log_error_impl(&dword_19E58B000, v66, OS_LOG_TYPE_ERROR, "IMPORTANT: new sequence length computation failed, falling back to old path.", (uint8_t *)&STACK[0x2B0], 2u);
    }

    CollectInputShapesLegacyIOS11(*(uint64_t **)(v60 + 16), &a57, &a60);
    __cxa_end_catch();
    JUMPOUT(0x19EA3DFC0);
  }
  JUMPOUT(0x19EA40634);
}

void sub_19EA3FDFC()
{
}

void sub_19EA3FE18()
{
}

void sub_19EA3FE44()
{
  v0 = (void *)STACK[0x430];
  if (STACK[0x430])
  {
    STACK[0x438] = (unint64_t)v0;
    operator delete(v0);
  }
  JUMPOUT(0x19EA406A4);
}

void sub_19EA3FEC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,std::__shared_weak_count *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,std::__shared_weak_count *a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,void *a60)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(void **)(v60 - 216));
  if (a46) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a46);
  }
  Espresso::sequential_builder::~sequential_builder((Espresso::sequential_builder *)&STACK[0x360]);
  if (a53) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a53);
  }
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy(a55);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy(a58);

  JUMPOUT(0x19EA4073CLL);
}

void sub_19EA3FEE8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x19EA3FF00);
}

void sub_19EA3FF18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,std::__shared_weak_count *a62)
{
  if (SLOBYTE(STACK[0x217]) < 0) {
    operator delete((void *)STACK[0x200]);
  }
  if (a62) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a62);
  }
  JUMPOUT(0x19EA406DCLL);
}

void sub_19EA3FF30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62)
{
  if (a62) {
    std::__shared_weak_count::__release_shared[abi:ne180100]();
  }
  JUMPOUT(0x19EA406DCLL);
}

void sub_19EA3FF38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,std::__shared_weak_count *a62)
{
  STACK[0x200] = (unint64_t)&a18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x200]);
  if (a62) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a62);
  }
  JUMPOUT(0x19EA406DCLL);
}

void sub_19EA3FF54(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  Espresso::auto_optimize_options::~auto_optimize_options((void **)&STACK[0x200]);
  if (STACK[0x438]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x438]);
  }
  Espresso::auto_optimize_options::~auto_optimize_options((void **)&STACK[0x2B0]);
  if (a2 == 1)
  {
    v75 = __cxa_begin_catch(a1);
    uint64_t v76 = +[MLLogging coreChannel];
    if (os_log_type_enabled(v76, OS_LOG_TYPE_ERROR))
    {
      uint64_t v77 = (*(uint64_t (**)(void *))(*(void *)v75 + 16))(v75);
      LODWORD(STACK[0x2B0]) = 136315138;
      *(void *)(v72 + 4) = v77;
      _os_log_error_impl(&dword_19E58B000, v76, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&STACK[0x2B0], 0xCu);
    }

    uint64_t v78 = (void *)MEMORY[0x1E4F28C58];
    a71 = *MEMORY[0x1E4F28568];
    uint64_t v79 = NSString;
    (*(void (**)(void *))(*(void *)v75 + 16))(v75);
    uint64_t v80 = [v79 stringWithFormat:@"%s"];
    a72 = v80;
    uint64_t v81 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&a72 forKeys:&a71 count:1];
    uint64_t v82 = [v78 errorWithDomain:@"com.apple.CoreML" code:0 userInfo:v81];

    exception = (CoreML::MLModelException *)__cxa_allocate_exception(0x28uLL);
    CoreML::MLModelException::MLModelException(exception, v82);
  }
  JUMPOUT(0x19EA40148);
}

void sub_19EA3FF6C()
{
}

void sub_19EA40108()
{
  __cxa_free_exception(v1);

  __cxa_end_catch();
  JUMPOUT(0x19EA40148);
}

void sub_19EA40158(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void sub_19EA4016C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *a60)
{
  if (a46) {
    std::__shared_weak_count::__release_shared[abi:ne180100]();
  }
  Espresso::sequential_builder::~sequential_builder((Espresso::sequential_builder *)&STACK[0x360]);
  if (a53) {
    std::__shared_weak_count::__release_shared[abi:ne180100]();
  }
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy(a55);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy(a58);

  JUMPOUT(0x19EA4073CLL);
}

void sub_19EA40178()
{
}

void sub_19EA40198(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,std::__shared_weak_count *a49,uint64_t a50,std::__shared_weak_count *a51)
{
  if (a49) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a49);
  }
  if (a51) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a51);
  }
  JUMPOUT(0x19EA40710);
}

void sub_19EA401B8()
{
}

void sub_19EA401D8()
{
}

void sub_19EA401E0()
{
  *(void *)(v1 - 216) = v0;
  JUMPOUT(0x19EA406A4);
}

void sub_19EA401EC(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a2)
  {
    if (a2 != 4)
    {
      if (a2 == 3)
      {
        uint64_t v66 = (id *)__cxa_begin_catch(a1);
        uint64_t v67 = +[MLLogging coreChannel];
        if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
        {
          int v82 = a28;
          uint64_t v83 = a23;
          uint64_t v84 = [v66[1] localizedDescription];
          v85 = (void *)v84;
          v86 = &a23;
          if (v82 < 0) {
            v86 = (uint64_t *)v83;
          }
          *(_DWORD *)(v64 - 224) = 136315394;
          *(void *)(v63 + 4) = v86;
          *(_WORD *)(v64 - 212) = 2112;
          *(void *)(v63 + 14) = v84;
          _os_log_error_impl(&dword_19E58B000, v67, OS_LOG_TYPE_ERROR, "%s (Underlying error: %@)", (uint8_t *)(v64 - 224), 0x16u);
        }
        uint64_t v68 = +[MLModelErrorUtils errorWithCode:4 underlyingError:v66[1] format:@"%s"];
        uint64_t v69 = (void *)a63;
        a63 = v68;
      }
      else
      {
        BOOL v70 = __cxa_begin_catch(a1);
        if (a2 == 1)
        {
          uint64_t v71 = +[MLLogging coreChannel];
          if (os_log_type_enabled(v71, OS_LOG_TYPE_ERROR))
          {
            uint64_t v87 = (*(uint64_t (**)(void *))(*(void *)v70 + 16))(v70);
            *(_DWORD *)(v64 - 224) = 136315138;
            *(void *)(v63 + 4) = v87;
            _os_log_error_impl(&dword_19E58B000, v71, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)(v64 - 224), 0xCu);
          }

          uint64_t v72 = (void *)MEMORY[0x1E4F28C58];
          STACK[0x430] = *MEMORY[0x1E4F28568];
          uint64_t v73 = NSString;
          (*(void (**)(void *))(*(void *)v70 + 16))(v70);
          uint64_t v69 = [v73 stringWithFormat:@"%s"];
          *(void *)(v64 - 224) = v69;
          v74 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v64 - 224 forKeys:&STACK[0x430] count:1];
          uint64_t v75 = [v72 errorWithDomain:@"com.apple.CoreML" code:0 userInfo:v74];
          uint64_t v76 = (void *)a63;
          a63 = v75;
        }
        else
        {
          uint64_t v77 = +[MLLogging coreChannel];
          if (os_log_type_enabled(v77, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)(v64 - 224) = 138412290;
            *(void *)(v63 + 4) = @"Unknown error in compiling network layers.";
            _os_log_error_impl(&dword_19E58B000, v77, OS_LOG_TYPE_ERROR, "%@", (uint8_t *)(v64 - 224), 0xCu);
          }

          uint64_t v78 = (void *)MEMORY[0x1E4F28C58];
          STACK[0x430] = *MEMORY[0x1E4F28568];
          uint64_t v69 = [NSString stringWithFormat:@"%@"];
          *(void *)(v64 - 224) = v69;
          uint64_t v79 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v64 - 224 forKeys:&STACK[0x430] count:1];
          uint64_t v80 = [v78 errorWithDomain:@"com.apple.CoreML" code:0 userInfo:v79];
          uint64_t v81 = (void *)a63;
          a63 = v80;
        }
      }

      __cxa_end_catch();
      JUMPOUT(0x19EA3E144);
    }
    uint64_t v88 = __cxa_begin_catch(a1);
    std::rethrow_if_nested[abi:ne180100]<std::exception>(v88);
    __cxa_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_19EA4053C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  __cxa_end_catch();
  if (a28 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x19EA4017CLL);
}

void sub_19EA405DC()
{
}

void sub_19EA405FC()
{
}

void sub_19EA40614()
{
}

void sub_19EA40628(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
}

void sub_19EA40640(void *a1, int a2)
{
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x19EA3F5C8);
  }
  JUMPOUT(0x19EA3FF40);
}

void sub_19EA406A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,std::__shared_weak_count *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,std::__shared_weak_count *a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,id a60)
{
  STACK[0x430] = v60 - 224;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x430]);
  google::protobuf::io::OstreamOutputStream::~OstreamOutputStream((google::protobuf::io::OstreamOutputStream *)&a23);
  std::ostream::~ostream();
  CoreML::HashOutputStreamBuf::~HashOutputStreamBuf((CoreML::HashOutputStreamBuf *)&STACK[0x200]);
  if (a46) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a46);
  }
  Espresso::sequential_builder::~sequential_builder((Espresso::sequential_builder *)&STACK[0x360]);
  if (a53) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a53);
  }
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy(a55);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy(a58);

  JUMPOUT(0x19EA4073CLL);
}

void sub_19EA406D0()
{
}

void sub_19EA406F0()
{
}

void std::default_delete<CoreML::NeuralNetworkShaper>::operator()[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::destroy(*(void **)(a1 + 40));
  std::__tree<std::__value_type<std::string,std::set<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<int>>>>::destroy(*(void **)(a1 + 16));

  JUMPOUT(0x19F3C1920);
}

void CollectInputShapesLegacyIOS11(uint64_t *a1, uint64_t **a2, void **a3)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = &CoreML::Specification::_ModelDescription_default_instance_;
  if (a1) {
    uint64_t v3 = a1;
  }
  uint64_t v4 = v3[4];
  if (v4) {
    uint64_t v5 = v4 + 8;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *((int *)v3 + 6);
  if (!v6) {
    return;
  }
  uint64_t v8 = 8 * v6;
  while (1)
  {
    uint64_t v9 = *(void **)(*(void *)v5 + 16);
    uint64_t v10 = *(uint64_t **)(*(void *)v5 + 32);
    if (!v10) {
      uint64_t v10 = &CoreML::Specification::_FeatureType_default_instance_;
    }
    int v11 = *((_DWORD *)v10 + 9);
    if (v11 == 5) {
      break;
    }
    if (v11 != 4)
    {
      int v25 = +[MLLogging coreChannel];
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)int buf = 0;
        _os_log_error_impl(&dword_19E58B000, v25, OS_LOG_TYPE_ERROR, "Neural networks only accept image and array inputs.", buf, 2u);
      }

      int v26 = (void *)MEMORY[0x1E4F28C58];
      uint64_t v37 = *MEMORY[0x1E4F28568];
      int v27 = [NSString stringWithFormat:@"Neural networks only accept image and array inputs."];
      uint64_t v38 = v27;
      int v28 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v38 forKeys:&v37 count:1];
      uint64_t v29 = [v26 errorWithDomain:@"com.apple.CoreML" code:1 userInfo:v28];
      goto LABEL_43;
    }
    __int16 v12 = (_DWORD *)v10[3];
    int v13 = v12[8];
    if (v13 == 10 || v13 == 40) {
      int v15 = 1;
    }
    else {
      int v15 = 3;
    }
    int v16 = v12[4];
    int v17 = v12[6];
    if (v16) {
      BOOL v18 = v17 == 0;
    }
    else {
      BOOL v18 = 1;
    }
    if (v18)
    {
      uint64_t v30 = +[MLLogging coreChannel];
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)int buf = 0;
        _os_log_error_impl(&dword_19E58B000, v30, OS_LOG_TYPE_ERROR, "Invalid height and width for the image input.", buf, 2u);
      }

      uint64_t v32 = (void *)MEMORY[0x1E4F28C58];
      uint64_t v41 = *MEMORY[0x1E4F28568];
      int v27 = [NSString stringWithFormat:@"Invalid height and width for the image input."];
      uint64_t v42 = v27;
      int v28 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v42 forKeys:&v41 count:1];
      uint64_t v29 = [v32 errorWithDomain:@"com.apple.CoreML" code:1 userInfo:v28];
      goto LABEL_43;
    }
LABEL_32:
    *(void *)int buf = *(void *)(*(void *)v5 + 16);
    int v24 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2, v9, (long long **)buf);
    *((_DWORD *)v24 + 14) = v16;
    *((_DWORD *)v24 + 15) = v17;
    *((_DWORD *)v24 + 16) = v15;
    *(void *)(v24 + 68) = 0x100000001;
    *((_DWORD *)v24 + 19) = -1;
    *((void *)v24 + 10) = 0;
    *((void *)v24 + 11) = 0;
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v24 + 96, 0, 0, 0);
    v5 += 8;
    v8 -= 8;
    if (!v8) {
      return;
    }
  }
  uint64_t v19 = v10[3];
  uint64_t v20 = *(unsigned int *)(v19 + 16);
  if ((v20 - 1) < 5)
  {
    switch((int)v20)
    {
      case 1:
        int v15 = *(_DWORD *)(*(void *)(v19 + 24) + 8);
        goto LABEL_28;
      case 2:
        int v15 = *(_DWORD *)(*(void *)(v19 + 24) + 16);
LABEL_28:
        int v17 = 1;
        int v16 = 1;
        break;
      case 3:
        uint64_t v21 = *(_DWORD **)(v19 + 24);
        int v15 = v21[2];
        int v16 = v21[6];
        int v17 = v21[4];
        break;
      case 4:
        uint64_t v22 = *(_DWORD **)(v19 + 24);
        int v15 = v22[4];
        int v16 = v22[8];
        int v17 = v22[6];
        break;
      default:
        int v23 = *(_DWORD **)(v19 + 24);
        int v15 = v23[6];
        int v16 = v23[10];
        int v17 = v23[8];
        break;
    }
    goto LABEL_32;
  }
  BOOL v33 = +[MLLogging coreChannel];
  if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)int buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v20;
    _os_log_error_impl(&dword_19E58B000, v33, OS_LOG_TYPE_ERROR, "Input MLMultiArray cannot be %d dimensional (must be between 1 and 5 dimensions).", buf, 8u);
  }

  uint64_t v34 = (void *)MEMORY[0x1E4F28C58];
  uint64_t v39 = *MEMORY[0x1E4F28568];
  int v27 = objc_msgSend(NSString, "stringWithFormat:", @"Input MLMultiArray cannot be %d dimensional (must be between 1 and 5 dimensions).", v20);
  uint64_t v40 = v27;
  int v28 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v40 forKeys:&v39 count:1];
  uint64_t v29 = [v34 errorWithDomain:@"com.apple.CoreML" code:1 userInfo:v28];
LABEL_43:
  uint64_t v35 = *a3;
  *a3 = (void *)v29;
}

void sub_19EA40C0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void Espresso::create_context(Espresso::abstract_engine_factory *a1, int *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  Espresso::abstract_engine_factory::shared((uint64_t *)buf, a1);
  Espresso::abstract_engine_factory::engine_for_platform();
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (v7)
  {
    (*(void (**)(Espresso *, Espresso **, uint64_t))(*(void *)v7 + 32))(v7, &v7, 0xFFFFFFFFLL);
  }
  else
  {
    uint64_t v5 = Espresso::espresso_os_log_subsystem(0, v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      int v6 = *a2;
      *(_DWORD *)int buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v6;
      _os_log_error_impl(&dword_19E58B000, v5, OS_LOG_TYPE_ERROR, "Unsupported Engine type %d.", buf, 8u);
    }

    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
  }
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
}

void sub_19EA40D88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, uint64_t a11)
{
  if (*((void *)&a9 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&a9 + 1));
  }
  if (a2 == 1)
  {
    uint64_t v14 = __cxa_begin_catch(exception_object);
    int v16 = Espresso::espresso_os_log_subsystem(0, v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      uint64_t v17 = (*(uint64_t (**)(void *))(*(void *)v14 + 16))(v14);
      LODWORD(a9) = 136315138;
      *(void *)((char *)&a9 + 4) = v17;
      _os_log_error_impl(&dword_19E58B000, v16, OS_LOG_TYPE_ERROR, "Cannot create context, Caught exception: %s", (uint8_t *)&a9, 0xCu);
    }

    void *v11 = 0;
    v11[1] = 0;
    __cxa_end_catch();
    JUMPOUT(0x19EA40D1CLL);
  }
  _Unwind_Resume(exception_object);
}

const std::nested_exception *std::rethrow_if_nested[abi:ne180100]<std::exception>(const void *a1)
{
  uint64_t result = (const std::nested_exception *)__dynamic_cast(a1, MEMORY[0x1E4FBA368], (const struct __class_type_info *)off_1E59A3030, -2);
  if (result)
  {
    std::nested_exception::rethrow_nested(result);
    return (const std::nested_exception *)std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](v2);
  }
  return result;
}

void *std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *BuildFromShapes(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, unsigned char *a6)
{
  v17[9] = *MEMORY[0x1E4F143B8];
  char v14 = a4;
  uint64_t v9 = operator new(0x20uLL);
  void *v9 = &unk_1EF0DD180;
  v9[1] = a2;
  v9[2] = a3;
  v9[3] = &v14;
  v17[3] = v9;
  std::__function::__func<BuildFromShapes(Espresso::sequential_builder &,std::map<std::string,Espresso::layer_shape> const&,BOOL,NSError * {__strong}&,BOOL *)::$_0,std::allocator<BuildFromShapes(Espresso::sequential_builder &,std::map<std::string,Espresso::layer_shape> const&,BOOL,NSError * {__strong}&,BOOL *)::$_0>,std::shared_ptr<Espresso::net> ()(void)>::__clone((uint64_t)v9);
  uint64_t v16 = v10;
  std::string::basic_string[abi:ne180100]<0>(&__p, "Error in laying out custom layer model in memory.");
  if (a6) {
    *a6 = 0;
  }
  if (!v16) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t))(*(void *)v16 + 48))(v16);
  if (v13 < 0) {
    operator delete(__p);
  }
  std::__function::__value_func<std::shared_ptr<Espresso::net> ()(void)>::~__value_func[abi:ne180100](v15);
  return std::__function::__value_func<std::shared_ptr<Espresso::net> ()(void)>::~__value_func[abi:ne180100](v17);
}

void sub_19EA41090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  std::__function::__value_func<std::shared_ptr<Espresso::net> ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
  std::__function::__value_func<std::shared_ptr<Espresso::net> ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_19EA410B4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,long long buf)
{
  if (a2)
  {
    if (a2 != 4)
    {
      if (a2 == 3)
      {
        float v31 = (id *)__cxa_begin_catch(a1);
        uint64_t v32 = +[MLLogging coreChannel];
        if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
        {
          int v48 = a16;
          uint64_t v49 = a11;
          uint64_t v50 = [v31[1] localizedDescription];
          uint64_t v51 = (void *)v50;
          char v52 = &a11;
          if (v48 < 0) {
            char v52 = (uint64_t *)v49;
          }
          LODWORD(buf) = 136315394;
          *(void *)((char *)&buf + 4) = v52;
          WORD6(buf) = 2112;
          *(void *)((char *)&buf + 14) = v50;
          _os_log_error_impl(&dword_19E58B000, v32, OS_LOG_TYPE_ERROR, "%s (Underlying error: %@)", (uint8_t *)&buf, 0x16u);
        }
        uint64_t v33 = +[MLModelErrorUtils errorWithCode:4 underlyingError:v31[1] format:@"%s"];
        uint64_t v34 = *v27;
        *int v27 = (void *)v33;
      }
      else
      {
        uint64_t v35 = __cxa_begin_catch(a1);
        if (a2 == 2)
        {
          float v36 = v35;
          if (v28) {
            *int v28 = 1;
          }
          uint64_t v37 = +[MLLogging coreChannel];
          if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
          {
            uint64_t v53 = (*(uint64_t (**)(void *))(*(void *)v36 + 16))(v36);
            LODWORD(buf) = 136315138;
            *(void *)((char *)&buf + 4) = v53;
            _os_log_error_impl(&dword_19E58B000, v37, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&buf, 0xCu);
          }

          uint64_t v38 = (void *)MEMORY[0x1E4F28C58];
          *(void *)(v29 - 80) = *MEMORY[0x1E4F28568];
          uint64_t v39 = NSString;
          (*(void (**)(void *))(*(void *)v36 + 16))(v36);
          uint64_t v34 = [v39 stringWithFormat:@"%s"];
          *(void *)&int buf = v34;
          uint64_t v40 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&buf forKeys:v29 - 80 count:1];
          uint64_t v41 = [v38 errorWithDomain:@"com.apple.CoreML" code:0 userInfo:v40];
          uint64_t v42 = *v27;
          *int v27 = (void *)v41;
        }
        else
        {
          float v43 = +[MLLogging coreChannel];
          if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
          {
            LODWORD(buf) = 138412290;
            *(void *)((char *)&buf + 4) = @"Unknown error in building network shapes.";
            _os_log_error_impl(&dword_19E58B000, v43, OS_LOG_TYPE_ERROR, "%@", (uint8_t *)&buf, 0xCu);
          }

          uint64_t v44 = (void *)MEMORY[0x1E4F28C58];
          *(void *)(v29 - 80) = *MEMORY[0x1E4F28568];
          uint64_t v34 = [NSString stringWithFormat:@"%@"];
          *(void *)&int buf = v34;
          unint64_t v45 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&buf forKeys:v29 - 80 count:1];
          uint64_t v46 = [v44 errorWithDomain:@"com.apple.CoreML" code:0 userInfo:v45];
          uint64_t v47 = *v27;
          *int v27 = (void *)v46;
        }
      }

      __cxa_end_catch();
      *int v26 = 0;
      v26[1] = 0;
      JUMPOUT(0x19EA41030);
    }
    long long v54 = __cxa_begin_catch(a1);
    std::rethrow_if_nested[abi:ne180100]<std::exception>(v54);
    __cxa_rethrow();
  }
  JUMPOUT(0x19EA410ACLL);
}

void sub_19EA41410(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  __cxa_end_catch();
  if (a16 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x19EA41094);
}

void sub_19EA414A8(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x19EA410ACLL);
}

void sub_19EA414B8()
{
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>(unint64_t a1, __n128 *a2, uint64_t a3, char a4)
{
  uint64_t v103 = *MEMORY[0x1E4F143B8];
  while (2)
  {
    uint64_t v10 = &a2[-2].n128_u64[1];
    v96 = a2 - 3;
    uint64_t v98 = a2;
    uint64_t v11 = &a2[-5].n128_u64[1];
    uint64_t v12 = (__n128 *)a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = (unint64_t)v12;
          uint64_t v13 = (char *)a2 - (char *)v12;
          unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)v12) >> 3);
          if (v5 || !v4)
          {
            switch(v14)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                if (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v10, (void *)a1))
                {
                  __n128 v41 = *(__n128 *)a1;
                  unint64_t v100 = *(void *)(a1 + 16);
                  __n128 v99 = v41;
                  long long v42 = *(_OWORD *)v10;
                  *(void *)(a1 + 16) = v10[2];
                  *(_OWORD *)a1 = v42;
                  __n128 v43 = v99;
                  v10[2] = v100;
                  *(__n128 *)uint64_t v10 = v43;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((void *)a1, (void *)(a1 + 24), v10);
                break;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((__n128 *)a1, (void *)(a1 + 24), (void *)(a1 + 48), v10);
                break;
              case 5uLL:
                std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((__n128 *)a1, (void *)(a1 + 24), (void *)(a1 + 48), (void *)(a1 + 72), v10);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v13 <= 575)
          {
            uint64_t v44 = (__n128 *)(a1 + 24);
            BOOL v46 = (__n128 *)a1 == a2 || v44 == a2;
            if (a4)
            {
              if (!v46)
              {
                uint64_t v47 = 0;
                n128_u64 = (void *)a1;
                do
                {
                  uint64_t v49 = n128_u64;
                  n128_u64 = v44->n128_u64;
                  if (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v44, v49))
                  {
                    __n128 v50 = *(__n128 *)n128_u64;
                    unint64_t v100 = n128_u64[2];
                    __n128 v99 = v50;
                    n128_u64[1] = 0;
                    n128_u64[2] = 0;
                    void *n128_u64 = 0;
                    uint64_t v51 = v47;
                    while (1)
                    {
                      uint64_t v52 = a1 + v51;
                      *(_OWORD *)(v52 + 24) = *(_OWORD *)(a1 + v51);
                      *(void *)(v52 + 40) = *(void *)(a1 + v51 + 16);
                      *(unsigned char *)(v52 + 23) = 0;
                      *(unsigned char *)uint64_t v52 = 0;
                      if (!v51) {
                        break;
                      }
                      v51 -= 24;
                      if (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(&v99, (void *)(v51 + a1)))
                      {
                        uint64_t v53 = a1 + v51 + 24;
                        goto LABEL_87;
                      }
                    }
                    uint64_t v53 = a1;
LABEL_87:
                    __n128 v54 = v99;
                    *(void *)(v53 + 16) = v100;
                    *(__n128 *)uint64_t v53 = v54;
                  }
                  uint64_t v44 = (__n128 *)(n128_u64 + 3);
                  v47 += 24;
                }
                while (n128_u64 + 3 != (void *)a2);
              }
            }
            else if (!v46)
            {
              do
              {
                int v89 = (void *)a1;
                a1 = (unint64_t)v44;
                if (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v44, v89))
                {
                  __n128 v90 = *(__n128 *)a1;
                  unint64_t v100 = *(void *)(a1 + 16);
                  __n128 v99 = v90;
                  *(void *)(a1 + 8) = 0;
                  *(void *)(a1 + 16) = 0;
                  *(void *)a1 = 0;
                  unint64_t v91 = a1;
                  do
                  {
                    unint64_t v92 = v91 - 24;
                    *(_OWORD *)unint64_t v91 = *(_OWORD *)(v91 - 24);
                    *(void *)(v91 + 16) = *(void *)(v91 - 8);
                    *(unsigned char *)(v91 - 1) = 0;
                    *(unsigned char *)(v91 - 24) = 0;
                    BOOL v93 = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(&v99, (void *)(v91 - 48));
                    unint64_t v91 = v92;
                  }
                  while (v93);
                  __n128 v94 = v99;
                  *(void *)(v92 + 16) = v100;
                  *(__n128 *)unint64_t v92 = v94;
                }
                uint64_t v44 = (__n128 *)(a1 + 24);
              }
              while ((__n128 *)(a1 + 24) != a2);
            }
            return;
          }
          if (!a3)
          {
            if ((__n128 *)a1 != a2)
            {
              int64_t v55 = (v14 - 2) >> 1;
              int64_t v56 = v55;
              do
              {
                int64_t v57 = v56;
                if (v55 >= v56)
                {
                  uint64_t v58 = (2 * v56) | 1;
                  unint64_t v59 = a1 + 24 * v58;
                  if (2 * v56 + 2 < (uint64_t)v14
                    && google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()((void *)(a1 + 24 * v58), (void *)(v59 + 24)))
                  {
                    v59 += 24;
                    uint64_t v58 = 2 * v57 + 2;
                  }
                  uint64_t v60 = (__n128 *)(a1 + 24 * v57);
                  a2 = v98;
                  if (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()((void *)v59, v60))
                  {
                    __n128 v61 = *v60;
                    unint64_t v100 = v60[1].n128_u64[0];
                    __n128 v99 = v61;
                    v60->n128_u64[1] = 0;
                    v60[1].n128_u64[0] = 0;
                    v60->n128_u64[0] = 0;
                    do
                    {
                      int32x4_t v62 = (__n128 *)v59;
                      __n128 v63 = *(__n128 *)v59;
                      v60[1].n128_u64[0] = *(void *)(v59 + 16);
                      *uint64_t v60 = v63;
                      *(unsigned char *)(v59 + 23) = 0;
                      *(unsigned char *)unint64_t v59 = 0;
                      if (v55 < v58) {
                        break;
                      }
                      uint64_t v64 = (2 * v58) | 1;
                      unint64_t v59 = a1 + 24 * v64;
                      uint64_t v65 = 2 * v58 + 2;
                      if (v65 < (uint64_t)v14
                        && google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()((void *)(a1 + 24 * v64), (void *)(v59 + 24)))
                      {
                        v59 += 24;
                        uint64_t v64 = v65;
                      }
                      uint64_t v60 = v62;
                      uint64_t v58 = v64;
                    }
                    while (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()((void *)v59, &v99));
                    __n128 v66 = v99;
                    v62[1].n128_u64[0] = v100;
                    *int32x4_t v62 = v66;
                    a2 = v98;
                  }
                }
                int64_t v56 = v57 - 1;
              }
              while (v57);
              int64_t v67 = v13 / 0x18uLL;
              do
              {
                uint64_t v68 = a2;
                uint64_t v69 = 0;
                unint64_t v95 = *(void *)a1;
                v101.n128_u64[0] = *(void *)(a1 + 8);
                *(unint64_t *)((char *)v101.n128_u64 + 7) = *(void *)(a1 + 15);
                unsigned __int8 v97 = *(unsigned char *)(a1 + 23);
                *(void *)(a1 + 8) = 0;
                *(void *)(a1 + 16) = 0;
                *(void *)a1 = 0;
                uint64_t v70 = v67 - 2;
                if (v67 < 2) {
                  uint64_t v70 = v67 - 1;
                }
                uint64_t v71 = v70 >> 1;
                unint64_t v72 = a1;
                do
                {
                  uint64_t v73 = v72 + 24 * v69 + 24;
                  uint64_t v74 = 2 * v69;
                  uint64_t v69 = (2 * v69) | 1;
                  uint64_t v75 = v74 + 2;
                  if (v74 + 2 < v67
                    && google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()((void *)v73, (void *)(v73 + 24)))
                  {
                    v73 += 24;
                    uint64_t v69 = v75;
                  }
                  if (*(char *)(v72 + 23) < 0) {
                    operator delete(*(void **)v72);
                  }
                  __n128 v76 = *(__n128 *)v73;
                  *(void *)(v72 + 16) = *(void *)(v73 + 16);
                  *(__n128 *)unint64_t v72 = v76;
                  *(unsigned char *)(v73 + 23) = 0;
                  *(unsigned char *)uint64_t v73 = 0;
                  unint64_t v72 = v73;
                }
                while (v69 <= v71);
                a2 = (__n128 *)((char *)v68 - 24);
                if ((__int8 *)v73 == &v68[-2].n128_i8[8])
                {
                  *(void *)uint64_t v73 = v95;
                  uint64_t v87 = *(uint64_t *)((char *)v101.n128_i64 + 7);
                  *(void *)(v73 + 8) = v101.n128_u64[0];
                  *(void *)(v73 + 15) = v87;
                  *(unsigned char *)(v73 + 23) = v97;
                  int64_t v80 = v67 - 1;
                }
                else
                {
                  __n128 v77 = *a2;
                  *(void *)(v73 + 16) = v68[-1].n128_u64[1];
                  *(__n128 *)uint64_t v73 = v77;
                  v68[-2].n128_u64[1] = v95;
                  unint64_t v78 = v101.n128_u64[0];
                  *(unint64_t *)((char *)v68[-1].n128_u64 + 7) = *(unint64_t *)((char *)v101.n128_u64 + 7);
                  v68[-1].n128_u64[0] = v78;
                  v68[-1].n128_u8[15] = v97;
                  uint64_t v79 = v73 - a1 + 24;
                  int64_t v80 = v67 - 1;
                  if (v79 >= 25)
                  {
                    unint64_t v81 = (unint64_t)(-2 - 0x5555555555555555 * (v79 >> 3)) >> 1;
                    unint64_t v82 = a1 + 24 * v81;
                    if (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()((void *)v82, (void *)v73))
                    {
                      __n128 v83 = *(__n128 *)v73;
                      unint64_t v100 = *(void *)(v73 + 16);
                      __n128 v99 = v83;
                      *(void *)(v73 + 8) = 0;
                      *(void *)(v73 + 16) = 0;
                      *(void *)uint64_t v73 = 0;
                      do
                      {
                        uint64_t v84 = v82;
                        long long v85 = *(_OWORD *)v82;
                        *(void *)(v73 + 16) = *(void *)(v82 + 16);
                        *(_OWORD *)uint64_t v73 = v85;
                        *(unsigned char *)(v82 + 23) = 0;
                        *(unsigned char *)unint64_t v82 = 0;
                        if (!v81) {
                          break;
                        }
                        unint64_t v81 = (v81 - 1) >> 1;
                        unint64_t v82 = a1 + 24 * v81;
                        uint64_t v73 = v84;
                      }
                      while (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()((void *)v82, &v99));
                      __n128 v86 = v99;
                      *(void *)(v84 + 16) = v100;
                      *(__n128 *)uint64_t v84 = v86;
                    }
                  }
                }
                BOOL v88 = v67 <= 2;
                int64_t v67 = v80;
              }
              while (!v88);
            }
            return;
          }
          int v15 = (void *)(a1 + 24 * (v14 >> 1));
          if ((unint64_t)v13 >= 0xC01)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((void *)a1, (void *)(a1 + 24 * (v14 >> 1)), v10);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((void *)(a1 + 24), (void *)(a1 + 24 * (v14 >> 1) - 24), v96);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((void *)(a1 + 48), (void *)(a1 + 24 + 24 * (v14 >> 1)), v11);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((void *)(a1 + 24 * (v14 >> 1) - 24), v15, (void *)(a1 + 24 + 24 * (v14 >> 1)));
            __n128 v16 = *(__n128 *)a1;
            unint64_t v100 = *(void *)(a1 + 16);
            __n128 v99 = v16;
            uint64_t v17 = v15[2];
            *(_OWORD *)a1 = *(_OWORD *)v15;
            *(void *)(a1 + 16) = v17;
            __n128 v18 = v99;
            v15[2] = v100;
            *(__n128 *)int v15 = v18;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((void *)(a1 + 24 * (v14 >> 1)), (void *)a1, v10);
          }
          --a3;
          a2 = v98;
          if ((a4 & 1) != 0
            || google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()((void *)(a1 - 24), (void *)a1))
          {
            break;
          }
          __n128 v31 = *(__n128 *)a1;
          unint64_t v102 = *(void *)(a1 + 16);
          __n128 v101 = v31;
          *(void *)(a1 + 8) = 0;
          *(void *)(a1 + 16) = 0;
          *(void *)a1 = 0;
          if (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(&v101, v10))
          {
            uint64_t v12 = (__n128 *)a1;
            do
              uint64_t v12 = (__n128 *)((char *)v12 + 24);
            while (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(&v101, v12));
          }
          else
          {
            uint64_t v32 = (__n128 *)(a1 + 24);
            do
            {
              uint64_t v12 = v32;
              if (v32 >= v98) {
                break;
              }
              BOOL v33 = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(&v101, v32);
              uint64_t v32 = (__n128 *)((char *)v12 + 24);
            }
            while (!v33);
          }
          uint64_t v34 = v98;
          if (v12 < v98)
          {
            uint64_t v34 = v98;
            do
              uint64_t v34 = (__n128 *)((char *)v34 - 24);
            while (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(&v101, v34));
          }
          while (v12 < v34)
          {
            __n128 v35 = *v12;
            unint64_t v100 = v12[1].n128_u64[0];
            __n128 v99 = v35;
            __n128 v36 = *v34;
            v12[1].n128_u64[0] = v34[1].n128_u64[0];
            __n128 *v12 = v36;
            __n128 v37 = v99;
            v34[1].n128_u64[0] = v100;
            __n128 *v34 = v37;
            do
              uint64_t v12 = (__n128 *)((char *)v12 + 24);
            while (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(&v101, v12));
            do
              uint64_t v34 = (__n128 *)((char *)v34 - 24);
            while (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(&v101, v34));
          }
          uint64_t v38 = &v12[-2].n128_i8[8];
          BOOL v4 = (unint64_t)&v12[-2].n128_u64[1] >= a1;
          BOOL v5 = &v12[-2].n128_i8[8] == (__int8 *)a1;
          if (&v12[-2].n128_i8[8] == (__int8 *)a1)
          {
            if (v12[-1].n128_i8[15] < 0) {
              operator delete(*(void **)a1);
            }
          }
          else
          {
            if (*(char *)(a1 + 23) < 0) {
              operator delete(*(void **)a1);
            }
            long long v39 = *(_OWORD *)v38;
            *(void *)(a1 + 16) = v12[-1].n128_u64[1];
            *(_OWORD *)a1 = v39;
            v12[-1].n128_u8[15] = 0;
            v12[-2].n128_u8[8] = 0;
          }
          a4 = 0;
          __n128 v40 = v101;
          v12[-1].n128_u64[1] = v102;
          *(__n128 *)uint64_t v38 = v40;
        }
        __n128 v19 = *(__n128 *)a1;
        unint64_t v102 = *(void *)(a1 + 16);
        __n128 v101 = v19;
        *(void *)(a1 + 8) = 0;
        *(void *)(a1 + 16) = 0;
        *(void *)a1 = 0;
        uint64_t v20 = (__n128 *)a1;
        do
        {
          uint64_t v21 = v20;
          uint64_t v20 = (__n128 *)((char *)v20 + 24);
        }
        while (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v20, &v101));
        uint64_t v22 = v98;
        if (v21 == (__n128 *)a1)
        {
          uint64_t v22 = v98;
          do
          {
            if (v20 >= v22) {
              break;
            }
            uint64_t v22 = (__n128 *)((char *)v22 - 24);
          }
          while (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v22, &v101));
        }
        else
        {
          do
            uint64_t v22 = (__n128 *)((char *)v22 - 24);
          while (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v22, &v101));
        }
        uint64_t v12 = v20;
        if (v20 < v22)
        {
          int v23 = v22;
          do
          {
            __n128 v99 = *v12;
            __n128 v24 = v99;
            unint64_t v100 = v12[1].n128_u64[0];
            unint64_t v25 = v100;
            unint64_t v26 = v23[1].n128_u64[0];
            __n128 *v12 = *v23;
            v12[1].n128_u64[0] = v26;
            v23[1].n128_u64[0] = v25;
            __n128 *v23 = v24;
            do
              uint64_t v12 = (__n128 *)((char *)v12 + 24);
            while (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v12, &v101));
            do
              int v23 = (__n128 *)((char *)v23 - 24);
            while (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v23, &v101));
          }
          while (v12 < v23);
        }
        int v27 = &v12[-2].n128_i8[8];
        if (&v12[-2].n128_i8[8] == (__int8 *)a1)
        {
          if (v12[-1].n128_i8[15] < 0) {
            operator delete(*(void **)a1);
          }
        }
        else
        {
          if (*(char *)(a1 + 23) < 0) {
            operator delete(*(void **)a1);
          }
          long long v28 = *(_OWORD *)v27;
          *(void *)(a1 + 16) = v12[-1].n128_u64[1];
          *(_OWORD *)a1 = v28;
          v12[-1].n128_u8[15] = 0;
          v12[-2].n128_u8[8] = 0;
        }
        __n128 v29 = v101;
        v12[-1].n128_u64[1] = v102;
        *(__n128 *)int v27 = v29;
        if (v20 >= v22) {
          break;
        }
LABEL_35:
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>(a1, &v12[-2].n128_i8[8], a3, a4 & 1);
        a4 = 0;
      }
      BOOL v30 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((__n128 *)a1, (__n128 *)((char *)v12 - 24));
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(v12, v98))
      {
        break;
      }
      if (!v30) {
        goto LABEL_35;
      }
    }
    a2 = (__n128 *)((char *)v12 - 24);
    if (!v30) {
      continue;
    }
    break;
  }
}

void CoreML::HashOutputStreamBuf::~HashOutputStreamBuf(CoreML::HashOutputStreamBuf *this)
{
  *(void *)this = &unk_1EF0DAFC0;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 9);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  std::streambuf::~streambuf();
}

{
  std::__shared_weak_count *v1;
  uint64_t vars8;

  *(void *)this = &unk_1EF0DAFC0;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 9);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  std::streambuf::~streambuf();

  JUMPOUT(0x19F3C1920);
}

uint64_t std::pair<std::string const,std::shared_ptr<Espresso::abstract_blob_container>>::~pair(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void Espresso::model_metadata_t::~model_metadata_t(void **this)
{
  if (*((char *)this + 167) < 0) {
    operator delete(this[18]);
  }
  if (*((char *)this + 143) < 0) {
    operator delete(this[15]);
  }
  if (*((char *)this + 119) < 0) {
    operator delete(this[12]);
  }
  if (*((char *)this + 95) < 0) {
    operator delete(this[9]);
  }
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

uint64_t std::deque<std::pair<std::shared_ptr<Espresso::abstract_context>,Espresso::compute_path>>::~deque[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  uint64_t v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    BOOL v4 = (void *)(a1 + 40);
    uint64_t v3 = *(void ***)(a1 + 8);
  }
  else
  {
    BOOL v4 = (void *)(a1 + 40);
    unint64_t v5 = *(void *)(a1 + 32);
    int v6 = &v2[v5 / 0xAA];
    unint64_t v7 = (unint64_t)*v6;
    unint64_t v8 = (unint64_t)*v6 + 24 * (v5 % 0xAA);
    unint64_t v9 = (unint64_t)v2[(*(void *)(a1 + 40) + v5) / 0xAA] + 24 * ((*(void *)(a1 + 40) + v5) % 0xAA);
    if (v8 != v9)
    {
      do
      {
        uint64_t v10 = *(std::__shared_weak_count **)(v8 + 8);
        if (v10)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v10);
          unint64_t v7 = (unint64_t)*v6;
        }
        v8 += 24;
        if (v8 - v7 == 4080)
        {
          unint64_t v11 = (unint64_t)v6[1];
          ++v6;
          unint64_t v7 = v11;
          unint64_t v8 = v11;
        }
      }
      while (v8 != v9);
      uint64_t v2 = *(void ***)(a1 + 8);
      uint64_t v3 = *(void ***)(a1 + 16);
    }
  }
  void *v4 = 0;
  unint64_t v12 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = *(void ***)(a1 + 16);
      uint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v12 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v13 = v12 >> 3;
  if (v13 == 1)
  {
    uint64_t v14 = 85;
    goto LABEL_16;
  }
  if (v13 == 2)
  {
    uint64_t v14 = 170;
LABEL_16:
    *(void *)(a1 + 32) = v14;
  }
  if (v2 != v3)
  {
    do
    {
      int v15 = *v2++;
      operator delete(v15);
    }
    while (v2 != v3);
    uint64_t v17 = *(void *)(a1 + 8);
    uint64_t v16 = *(void *)(a1 + 16);
    if (v16 != v17) {
      *(void *)(a1 + 16) = v16 + ((v17 - v16 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void Espresso::sequential_builder::~sequential_builder(Espresso::sequential_builder *this)
{
  std::deque<std::pair<std::shared_ptr<Espresso::abstract_context>,Espresso::compute_path>>::~deque[abi:ne180100]((uint64_t)this + 136);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 15);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 13);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  BOOL v4 = (std::__shared_weak_count *)*((void *)this + 11);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (*((char *)this + 79) < 0) {
    operator delete(*((void **)this + 7));
  }
  std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy(*((void **)this + 3));
  unint64_t v5 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

BOOL std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(void *a1, void *a2, void *a3)
{
  BOOL v6 = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(a2, a1);
  BOOL result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(a3, a2);
  if (v6)
  {
    if (result)
    {
      uint64_t v8 = a1[2];
      long long v9 = *(_OWORD *)a1;
      uint64_t v10 = a3[2];
      *(_OWORD *)a1 = *(_OWORD *)a3;
      a1[2] = v10;
    }
    else
    {
      uint64_t v17 = a1[2];
      long long v18 = *(_OWORD *)a1;
      uint64_t v19 = a2[2];
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = v19;
      *(_OWORD *)a2 = v18;
      a2[2] = v17;
      BOOL result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(a3, a2);
      if (!result) {
        return result;
      }
      uint64_t v8 = a2[2];
      long long v9 = *(_OWORD *)a2;
      uint64_t v20 = a3[2];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      a2[2] = v20;
    }
    *(_OWORD *)a3 = v9;
    a3[2] = v8;
  }
  else if (result)
  {
    uint64_t v11 = a2[2];
    long long v12 = *(_OWORD *)a2;
    uint64_t v13 = a3[2];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    a2[2] = v13;
    *(_OWORD *)a3 = v12;
    a3[2] = v11;
    BOOL result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(a2, a1);
    if (result)
    {
      uint64_t v14 = a1[2];
      long long v15 = *(_OWORD *)a1;
      uint64_t v16 = a2[2];
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = v16;
      *(_OWORD *)a2 = v15;
      a2[2] = v14;
    }
  }
  return result;
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(__n128 *a1, void *a2, void *a3, void *a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, a2, a3);
  if (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(a4, a3))
  {
    uint64_t v9 = a3[2];
    long long v10 = *(_OWORD *)a3;
    uint64_t v11 = a4[2];
    *(_OWORD *)a3 = *(_OWORD *)a4;
    a3[2] = v11;
    *(_OWORD *)a4 = v10;
    a4[2] = v9;
    if (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(a3, a2))
    {
      uint64_t v12 = a2[2];
      long long v13 = *(_OWORD *)a2;
      uint64_t v14 = a3[2];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      a2[2] = v14;
      *(_OWORD *)a3 = v13;
      a3[2] = v12;
      if (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(a2, a1))
      {
        unint64_t v15 = a1[1].n128_u64[0];
        __n128 result = *a1;
        unint64_t v16 = a2[2];
        *a1 = *(__n128 *)a2;
        a1[1].n128_u64[0] = v16;
        *(__n128 *)a2 = result;
        a2[2] = v15;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(__n128 *a1, void *a2, void *a3, void *a4, void *a5)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, a2, a3, a4);
  if (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(a5, a4))
  {
    uint64_t v11 = a4[2];
    long long v12 = *(_OWORD *)a4;
    uint64_t v13 = a5[2];
    *(_OWORD *)a4 = *(_OWORD *)a5;
    a4[2] = v13;
    *(_OWORD *)a5 = v12;
    a5[2] = v11;
    if (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(a4, a3))
    {
      uint64_t v14 = a3[2];
      long long v15 = *(_OWORD *)a3;
      uint64_t v16 = a4[2];
      *(_OWORD *)a3 = *(_OWORD *)a4;
      a3[2] = v16;
      *(_OWORD *)a4 = v15;
      a4[2] = v14;
      if (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(a3, a2))
      {
        uint64_t v17 = a2[2];
        long long v18 = *(_OWORD *)a2;
        uint64_t v19 = a3[2];
        *(_OWORD *)a2 = *(_OWORD *)a3;
        a2[2] = v19;
        *(_OWORD *)a3 = v18;
        a3[2] = v17;
        if (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(a2, a1))
        {
          unint64_t v20 = a1[1].n128_u64[0];
          __n128 result = *a1;
          unint64_t v21 = a2[2];
          *a1 = *(__n128 *)a2;
          a1[1].n128_u64[0] = v21;
          *(__n128 *)a2 = result;
          a2[2] = v20;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(__n128 *a1, __n128 *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      BOOL v6 = (__n128 *)((char *)a2 - 24);
      if (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(&a2[-2].n128_u64[1], a1))
      {
        unint64_t v7 = a1[1].n128_u64[0];
        __n128 v8 = *a1;
        unint64_t v9 = v6[1].n128_u64[0];
        *a1 = *v6;
        a1[1].n128_u64[0] = v9;
        __n128 *v6 = v8;
        v6[1].n128_u64[0] = v7;
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, &a1[1].n128_u64[1], &a2[-2].n128_u64[1]);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, &a1[1].n128_u64[1], (__n128 *)a1[3].n128_u64, &a2[-2].n128_u64[1]);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, &a1[1].n128_u64[1], (__n128 *)a1[3].n128_u64, &a1[4].n128_u64[1], &a2[-2].n128_u64[1]);
      return 1;
    default:
      long long v10 = a1 + 3;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, &a1[1].n128_u64[1], (__n128 *)a1[3].n128_u64);
      uint64_t v11 = &a1[4].n128_u64[1];
      if (&a1[4].n128_i8[8] == (__int8 *)a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  while (1)
  {
    if (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v11, v10))
    {
      long long v17 = *(_OWORD *)v11;
      unint64_t v18 = v11[2];
      v11[1] = 0;
      v11[2] = 0;
      unint64_t *v11 = 0;
      uint64_t v14 = v12;
      while (1)
      {
        long long v15 = (char *)a1 + v14;
        *(__n128 *)(v15 + 72) = *(__n128 *)((char *)a1 + v14 + 48);
        *((void *)v15 + 11) = *(unint64_t *)((char *)a1[4].n128_u64 + v14);
        v15[71] = 0;
        v15[48] = 0;
        if (v14 == -48) {
          break;
        }
        v14 -= 24;
        if (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(&v17, (void *)v15 + 3))
        {
          uint64_t v16 = (uint64_t)&a1[4].n128_i64[1] + v14;
          goto LABEL_12;
        }
      }
      uint64_t v16 = (uint64_t)a1;
LABEL_12:
      *(_OWORD *)uint64_t v16 = v17;
      *(void *)(v16 + 16) = v18;
      if (++v13 == 8) {
        return v11 + 3 == (unint64_t *)a2;
      }
    }
    long long v10 = (__n128 *)v11;
    v12 += 24;
    v11 += 3;
    if (v11 == (unint64_t *)a2) {
      return 1;
    }
  }
}

void *std::__function::__value_func<std::shared_ptr<Espresso::net> ()(void)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__func<BuildFromShapes(Espresso::sequential_builder &,std::map<std::string,Espresso::layer_shape> const&,BOOL,NSError * {__strong}&,BOOL *)::$_0,std::allocator<BuildFromShapes(Espresso::sequential_builder &,std::map<std::string,Espresso::layer_shape> const&,BOOL,NSError * {__strong}&,BOOL *)::$_0>,std::shared_ptr<Espresso::net> ()(void)>::target_type()
{
}

uint64_t std::__function::__func<BuildFromShapes(Espresso::sequential_builder &,std::map<std::string,Espresso::layer_shape> const&,BOOL,NSError * {__strong}&,BOOL *)::$_0,std::allocator<BuildFromShapes(Espresso::sequential_builder &,std::map<std::string,Espresso::layer_shape> const&,BOOL,NSError * {__strong}&,BOOL *)::$_0>,std::shared_ptr<Espresso::net> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZL15BuildFromShapesRN8Espresso18sequential_builderERKNSt3__13mapINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS_11layer_shapeENS2_4lessIS9_EENS7_INS2_4pairIKS9_SA_EEEEEEbRU8__strongP7NSErrorPbE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<BuildFromShapes(Espresso::sequential_builder &,std::map<std::string,Espresso::layer_shape> const&,BOOL,NSError * {__strong}&,BOOL *)::$_0,std::allocator<BuildFromShapes(Espresso::sequential_builder &,std::map<std::string,Espresso::layer_shape> const&,BOOL,NSError * {__strong}&,BOOL *)::$_0>,std::shared_ptr<Espresso::net> ()(void)>::operator()(uint64_t a1)
{
  if (**(unsigned char **)(a1 + 24)) {
    Espresso::net::setup_script();
  }
}

void sub_19EA4284C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  uint64_t v12 = *(std::__shared_weak_count **)(v10 + 8);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  _Unwind_Resume(exception_object);
}

__n128 std::__function::__func<BuildFromShapes(Espresso::sequential_builder &,std::map<std::string,Espresso::layer_shape> const&,BOOL,NSError * {__strong}&,BOOL *)::$_0,std::allocator<BuildFromShapes(Espresso::sequential_builder &,std::map<std::string,Espresso::layer_shape> const&,BOOL,NSError * {__strong}&,BOOL *)::$_0>,std::shared_ptr<Espresso::net> ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF0DD180;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<BuildFromShapes(Espresso::sequential_builder &,std::map<std::string,Espresso::layer_shape> const&,BOOL,NSError * {__strong}&,BOOL *)::$_0,std::allocator<BuildFromShapes(Espresso::sequential_builder &,std::map<std::string,Espresso::layer_shape> const&,BOOL,NSError * {__strong}&,BOOL *)::$_0>,std::shared_ptr<Espresso::net> ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1EF0DD180;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void std::__function::__func<BuildFromShapes(Espresso::sequential_builder &,std::map<std::string,Espresso::layer_shape> const&,BOOL,NSError * {__strong}&,BOOL *)::$_0,std::allocator<BuildFromShapes(Espresso::sequential_builder &,std::map<std::string,Espresso::layer_shape> const&,BOOL,NSError * {__strong}&,BOOL *)::$_0>,std::shared_ptr<Espresso::net> ()(void)>::~__func()
{
}

void *std::__function::__func<ConvertLayers(CoreML::Specification::Model const&,CoreML::NNCompiler::MLModelInfo const&,Espresso::sequential_builder &,std::map<std::string,Espresso::layer_shape> &,EspressoCommon::compileModelResult &,NSError * {__strong}&)::$_0,std::allocator<ConvertLayers(CoreML::Specification::Model const&,CoreML::NNCompiler::MLModelInfo const&,Espresso::sequential_builder &,std::map<std::string,Espresso::layer_shape> &,EspressoCommon::compileModelResult &,NSError * {__strong}&)::$_0>,BOOL ()(void)>::target_type()
{
}

uint64_t std::__function::__func<ConvertLayers(CoreML::Specification::Model const&,CoreML::NNCompiler::MLModelInfo const&,Espresso::sequential_builder &,std::map<std::string,Espresso::layer_shape> &,EspressoCommon::compileModelResult &,NSError * {__strong}&)::$_0,std::allocator<ConvertLayers(CoreML::Specification::Model const&,CoreML::NNCompiler::MLModelInfo const&,Espresso::sequential_builder &,std::map<std::string,Espresso::layer_shape> &,EspressoCommon::compileModelResult &,NSError * {__strong}&)::$_0>,BOOL ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZL13ConvertLayersRKN6CoreML13Specification5ModelERKNS_10NNCompiler11MLModelInfoERN8Espresso18sequential_builderERNSt3__13mapINSB_12basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEENS8_11layer_shapeENSB_4lessISI_EENSG_INSB_4pairIKSI_SJ_EEEEEERN14EspressoCommon18compileModelResultERU8__strongP7NSErrorE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<ConvertLayers(CoreML::Specification::Model const&,CoreML::NNCompiler::MLModelInfo const&,Espresso::sequential_builder &,std::map<std::string,Espresso::layer_shape> &,EspressoCommon::compileModelResult &,NSError * {__strong}&)::$_0,std::allocator<ConvertLayers(CoreML::Specification::Model const&,CoreML::NNCompiler::MLModelInfo const&,Espresso::sequential_builder &,std::map<std::string,Espresso::layer_shape> &,EspressoCommon::compileModelResult &,NSError * {__strong}&)::$_0>,BOOL ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2 = std::map<std::string,std::string>::at(*(void *)(a1 + 8) + 80, (void *)(*(void *)(a1 + 8) + 32));
  **(unsigned char **)(a1 + 16) = EspressoConverter::convertToEspresso(*(const CoreML::Specification::NeuralNetwork **)(*(void *)(a1 + 24) + 32), *(_DWORD *)(*(void *)(a1 + 24) + 44), *(void **)(a1 + 32), *(uint64_t ***)(a1 + 40), *(unsigned char *)(v2 + 312));
  return 1;
}

__n128 std::__function::__func<ConvertLayers(CoreML::Specification::Model const&,CoreML::NNCompiler::MLModelInfo const&,Espresso::sequential_builder &,std::map<std::string,Espresso::layer_shape> &,EspressoCommon::compileModelResult &,NSError * {__strong}&)::$_0,std::allocator<ConvertLayers(CoreML::Specification::Model const&,CoreML::NNCompiler::MLModelInfo const&,Espresso::sequential_builder &,std::map<std::string,Espresso::layer_shape> &,EspressoCommon::compileModelResult &,NSError * {__strong}&)::$_0>,BOOL ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF0DD128;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ConvertLayers(CoreML::Specification::Model const&,CoreML::NNCompiler::MLModelInfo const&,Espresso::sequential_builder &,std::map<std::string,Espresso::layer_shape> &,EspressoCommon::compileModelResult &,NSError * {__strong}&)::$_0,std::allocator<ConvertLayers(CoreML::Specification::Model const&,CoreML::NNCompiler::MLModelInfo const&,Espresso::sequential_builder &,std::map<std::string,Espresso::layer_shape> &,EspressoCommon::compileModelResult &,NSError * {__strong}&)::$_0>,BOOL ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_1EF0DD128;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

void std::__function::__func<ConvertLayers(CoreML::Specification::Model const&,CoreML::NNCompiler::MLModelInfo const&,Espresso::sequential_builder &,std::map<std::string,Espresso::layer_shape> &,EspressoCommon::compileModelResult &,NSError * {__strong}&)::$_0,std::allocator<ConvertLayers(CoreML::Specification::Model const&,CoreML::NNCompiler::MLModelInfo const&,Espresso::sequential_builder &,std::map<std::string,Espresso::layer_shape> &,EspressoCommon::compileModelResult &,NSError * {__strong}&)::$_0>,BOOL ()(void)>::~__func()
{
}

void std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,CoreML::ShapeConstraint>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__tree<std::__value_type<std::string,std::set<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<int>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::set<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<int>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::set<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<int>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::set<int>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::set<int>>,0>(uint64_t a1)
{
  std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy(*(void **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,CoreML::ShapeConstraint>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 207) < 0) {
    operator delete(*(void **)(a1 + 184));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void CoreML::NNCompiler::Backend::NeuralNetwork::NeuralNetworkEspressoNetBackend::~NeuralNetworkEspressoNetBackend(void **this)
{
  CoreML::NNCompiler::Backend::NeuralNetwork::NeuralNetworkEspressoNetBackend::~NeuralNetworkEspressoNetBackend(this);

  JUMPOUT(0x19F3C1920);
}

{
  std::__shared_weak_count *v2;
  void *v3;
  std::__shared_weak_count *v4;

  *this = &unk_1EF0CE3D0;
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  uint64_t v2 = (std::__shared_weak_count *)this[5];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  long long v3 = this[3];
  this[3] = 0;
  if (v3) {
    (*(void (**)(void *))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)this[2];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void CoreML::NNCompiler::Backend::NeuralNetwork::NeuralNetworkEspressoNetBackend::NeuralNetworkEspressoNetBackend(void *a1, uint64_t a2, uint64_t a3)
{
  *a1 = &unk_1EF0CE3D0;
  a1[1] = a2;
  a1[2] = a3;
  if (a3)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(a3 + 8), 1uLL, memory_order_relaxed);
    a2 = a1[1];
  }
  CoreML::NNCompiler::NeuralNetwork::NeuralNetworkSpecProxy::Make((CoreML::NNCompiler::NeuralNetwork::NeuralNetworkSpecProxy *)(a1 + 3), *(const CoreML::Specification::Model **)(a2 + 32), *(_DWORD *)(a2 + 44));
}

void sub_19EA42D18(_Unwind_Exception *exception_object)
{
  long long v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NNCompiler::Backend::NeuralNetwork::NeuralNetworkEspressoNetBackend::UpgradeNeuralNetworkToMIL(uint64_t a1, char *a2)
{
  uint64_t v110 = *MEMORY[0x1E4F143B8];
  uint64_t v74 = objc_opt_new();
  unint64_t p_v = (unint64_t)MLModel;
  uint64_t v4 = (void *)MEMORY[0x1E4F1CB10];
  if (a2[23] >= 0) {
    unint64_t v5 = a2;
  }
  else {
    unint64_t v5 = *(char **)a2;
  }
  BOOL v6 = objc_msgSend(NSString, "stringWithUTF8String:", v5, a1);
  unint64_t v7 = [v4 fileURLWithPath:v6];
  id v91 = 0;
  uint64_t v75 = +[MLModel modelWithContentsOfURL:v7 configuration:v74 error:&v91];
  id v72 = v91;

  if (!v75)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    if (v72)
    {
      uint64_t v65 = [v72 localizedDescription];
    }
    else
    {
      uint64_t v65 = "Failed to read model from disk.";
    }
    MEMORY[0x19F3C1380](exception, v65);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  __n128 v8 = [v75 internalEngine];
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();

  if ((isKindOfClass & 1) == 0)
  {
    __n128 v66 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3C1380](v66, "Inappropriate model type for upgrade.");
    __cxa_throw(v66, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  [v75 internalEngine];
  int v89 = 0;
  uint64_t v90 = 0;
  BOOL v88 = &v89;
  long long v84 = 0u;
  long long v85 = 0u;
  long long v86 = 0u;
  __n128 v77 = v87 = 0u;
  uint64_t v10 = [v77 defaultOptionalValues];
  uint64_t v11 = [v10 countByEnumeratingWithState:&v84 objects:v108 count:16];
  if (v11)
  {
    uint64_t v12 = *(void *)v85;
    unint64_t p_v = (unint64_t)&__v;
    do
    {
      for (uint64_t i = 0; i != v11; ++i)
      {
        if (*(void *)v85 != v12) {
          objc_enumerationMutation(v10);
        }
        uint64_t v14 = *(void **)(*((void *)&v84 + 1) + 8 * i);
        long long v15 = [v77 defaultOptionalValues];
        uint64_t v16 = [v15 objectForKeyedSubscript:v14];
        [v16 floatValue];
        int v18 = v17;
        std::string::basic_string[abi:ne180100]<0>(&__v, (char *)[v14 UTF8String]);
        __p[0] = &__v;
        *((_DWORD *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v88, &__v, (_OWORD **)__p)+ 14) = v18;
        if (SHIBYTE(__v.__end_) < 0) {
          operator delete(__v.__first_);
        }
      }
      uint64_t v11 = [v10 countByEnumeratingWithState:&v84 objects:v108 count:16];
    }
    while (v11);
  }

  memset(&v83, 0, sizeof(v83));
  long long v79 = 0u;
  long long v80 = 0u;
  long long v81 = 0u;
  long long v82 = 0u;
  uint64_t v19 = [v77 modelDescription];
  unint64_t v20 = [v19 outputDescriptionsByName];

  uint64_t v21 = [v20 countByEnumeratingWithState:&v79 objects:v107 count:16];
  if (v21)
  {
    uint64_t v22 = *(void *)v80;
    unint64_t p_v = 0xAAAAAAAAAAAAAAABLL;
    do
    {
      for (uint64_t j = 0; j != v21; ++j)
      {
        if (*(void *)v80 != v22) {
          objc_enumerationMutation(v20);
        }
        std::string::basic_string[abi:ne180100]<0>(__p, (char *)[*(id *)(*((void *)&v79 + 1) + 8 * j) UTF8String]);
        std::vector<std::string>::pointer end = v83.__end_;
        if (v83.__end_ >= v83.__end_cap_.__value_)
        {
          unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * (((char *)v83.__end_ - (char *)v83.__begin_) >> 3);
          unint64_t v27 = v26 + 1;
          if (v26 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * (((char *)v83.__end_cap_.__value_ - (char *)v83.__begin_) >> 3) > v27) {
            unint64_t v27 = 0x5555555555555556 * (((char *)v83.__end_cap_.__value_ - (char *)v83.__begin_) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * (((char *)v83.__end_cap_.__value_ - (char *)v83.__begin_) >> 3) >= 0x555555555555555) {
            unint64_t v28 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v28 = v27;
          }
          __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v83.__end_cap_;
          if (v28) {
            __n128 v29 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v83.__end_cap_, v28);
          }
          else {
            __n128 v29 = 0;
          }
          BOOL v30 = v29 + v26;
          __v.__first_ = v29;
          __v.__begin_ = v30;
          __v.__end_cap_.__value_ = &v29[v28];
          long long v31 = *(_OWORD *)__p;
          v30->__r_.__value_.__r.__words[2] = v95;
          *(_OWORD *)&v30->__r_.__value_.__l.__data_ = v31;
          __p[1] = 0;
          *(void *)&long long v95 = 0;
          __p[0] = 0;
          __v.__end_ = v30 + 1;
          std::vector<std::string>::__swap_out_circular_buffer(&v83, &__v);
          uint64_t v32 = v83.__end_;
          std::__split_buffer<std::string>::~__split_buffer(&__v);
          v83.__end_ = v32;
          if (SBYTE7(v95) < 0) {
            operator delete(__p[0]);
          }
        }
        else
        {
          long long v25 = *(_OWORD *)__p;
          v83.__end_->__r_.__value_.__r.__words[2] = v95;
          *(_OWORD *)&end->__r_.__value_.__l.__data_ = v25;
          v83.__end_ = end + 1;
        }
      }
      uint64_t v21 = [v20 countByEnumeratingWithState:&v79 objects:v107 count:16];
    }
    while (v21);
  }

  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>((std::string *)__p, a2);
  memset(&v92, 0, sizeof(v92));
  std::string::append[abi:ne180100]<char const*,0>(&v92.__pn_, "model.espresso.net", "");
  std::__fs::filesystem::operator/[abi:ne180100](&v92, (uint64_t)__p, (std::__fs::filesystem::path *)&__v);
  if (SHIBYTE(__v.__end_) < 0)
  {
    std::string::__init_copy_ctor_external(&v78, (const std::string::value_type *)__v.__first_, (std::string::size_type)__v.__begin_);
    if (SHIBYTE(__v.__end_) < 0) {
      operator delete(__v.__first_);
    }
  }
  else
  {
    *(_OWORD *)&v78.__r_.__value_.__l.__data_ = *(_OWORD *)&__v.__first_;
    v78.__r_.__value_.__r.__words[2] = (std::string::size_type)__v.__end_;
  }
  if (SHIBYTE(v92.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v92.__pn_.__r_.__value_.__l.__data_);
  }
  if (SBYTE7(v95) < 0) {
    operator delete(__p[0]);
  }
  id v33 = v77;
  objc_opt_class();
  __n128 v76 = v33;
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    LODWORD(__v.__first_) = 80000;
    Espresso::create_context((Espresso::abstract_engine_factory *)&v103, (int *)&__v);
    if (!v103)
    {
      uint64_t v69 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x19F3C1380](v69, "Unable to create IR context.");
      __cxa_throw(v69, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    *((unsigned char *)v103 + 53) = 1;
    Espresso::load_network();
    *(_OWORD *)uint64_t v98 = 0u;
    long long v99 = 0u;
    float v100 = 1.0;
    *(_OWORD *)std::string __p = 0u;
    long long v95 = 0u;
    long long v96 = 0u;
    long long v97 = 0u;
    uint64_t v34 = [v33 outputLayers];
    uint64_t v35 = [v34 countByEnumeratingWithState:__p objects:&__v count:16];
    if (v35)
    {
      uint64_t v36 = *(void *)v95;
      do
      {
        for (uint64_t k = 0; k != v35; ++k)
        {
          if (*(void *)v95 != v36) {
            objc_enumerationMutation(v34);
          }
          std::string::basic_string[abi:ne180100]<0>(&v92, (char *)[*((id *)__p[1] + k) UTF8String]);
          unint64_t v38 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&v92);
          unint64_t v39 = v38;
          unint64_t v40 = (unint64_t)v98[1];
          if (v98[1])
          {
            uint8x8_t v41 = (uint8x8_t)vcnt_s8((int8x8_t)v98[1]);
            v41.i16[0] = vaddlv_u8(v41);
            unint64_t v42 = v41.u32[0];
            if (v41.u32[0] > 1uLL)
            {
              unint64_t p_v = v38;
              if ((void *)v38 >= v98[1]) {
                unint64_t p_v = v38 % (unint64_t)v98[1];
              }
            }
            else
            {
              unint64_t p_v = ((unint64_t)v98[1] - 1) & v38;
            }
            __n128 v43 = (unsigned __int8 **)*((void *)v98[0] + p_v);
            if (v43)
            {
              for (m = *v43; m; m = *(unsigned __int8 **)m)
              {
                unint64_t v45 = *((void *)m + 1);
                if (v45 == v39)
                {
                  if (std::equal_to<std::string>::operator()[abi:ne180100](m + 16, (unsigned __int8 *)&v92)) {
                    goto LABEL_88;
                  }
                }
                else
                {
                  if (v42 > 1)
                  {
                    if (v45 >= v40) {
                      v45 %= v40;
                    }
                  }
                  else
                  {
                    v45 &= v40 - 1;
                  }
                  if (v45 != p_v) {
                    break;
                  }
                }
              }
            }
          }
          BOOL v46 = (char *)operator new(0x28uLL);
          *(void *)BOOL v46 = 0;
          *((void *)v46 + 1) = v39;
          *(std::__fs::filesystem::path *)(v46 + 16) = v92;
          memset(&v92, 0, sizeof(v92));
          float v47 = (float)(unint64_t)(*((void *)&v99 + 1) + 1);
          if (!v40 || (float)(v100 * (float)v40) < v47)
          {
            BOOL v48 = (v40 & (v40 - 1)) != 0;
            if (v40 < 3) {
              BOOL v48 = 1;
            }
            unint64_t v49 = v48 | (2 * v40);
            unint64_t v50 = vcvtps_u32_f32(v47 / v100);
            if (v49 <= v50) {
              size_t v51 = v50;
            }
            else {
              size_t v51 = v49;
            }
            std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__rehash<true>((uint64_t)v98, v51);
            unint64_t v40 = (unint64_t)v98[1];
            if (((unint64_t)v98[1] & ((unint64_t)v98[1] - 1)) != 0)
            {
              if ((void *)v39 >= v98[1]) {
                unint64_t p_v = v39 % (unint64_t)v98[1];
              }
              else {
                unint64_t p_v = v39;
              }
            }
            else
            {
              unint64_t p_v = ((unint64_t)v98[1] - 1) & v39;
            }
          }
          uint64_t v52 = v98[0];
          uint64_t v53 = (void *)*((void *)v98[0] + p_v);
          if (v53)
          {
            *(void *)BOOL v46 = *v53;
LABEL_86:
            void *v53 = v46;
            goto LABEL_87;
          }
          *(void *)BOOL v46 = v99;
          *(void *)&long long v99 = v46;
          v52[p_v] = &v99;
          if (*(void *)v46)
          {
            unint64_t v54 = *(void *)(*(void *)v46 + 8);
            if ((v40 & (v40 - 1)) != 0)
            {
              if (v54 >= v40) {
                v54 %= v40;
              }
            }
            else
            {
              v54 &= v40 - 1;
            }
            uint64_t v53 = (char *)v98[0] + 8 * v54;
            goto LABEL_86;
          }
LABEL_87:
          ++*((void *)&v99 + 1);
LABEL_88:
          if (SHIBYTE(v92.__pn_.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v92.__pn_.__r_.__value_.__l.__data_);
          }
        }
        uint64_t v35 = [v34 countByEnumeratingWithState:__p objects:&__v count:16];
      }
      while (v35);
    }

    CoreML::NNCompiler::Backend::NeuralNetwork::EspressoNetBackend::WriteModelOutputs((uint64_t *)&v102, v98);
    int64_t v55 = [v76 compilerVersionInfo];
    int64_t v56 = +[MLVersionInfo versionInfoWithMajor:2 minor:0 patch:0 variant:&stru_1EF0E81D0];
    if ([v55 olderThan:v56])
    {
      BOOL v57 = *(void *)(v102.__r_.__value_.__r.__words[0] + 344) == 0;

      if (v57
        && ([v76 copyImagePreprocessingParametersTo:v102.__r_.__value_.__r.__words[0] error:0] & 1) == 0)
      {
        uint64_t v58 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x19F3C1380](v58, "Failed to process net for upgrade.");
        __cxa_throw(v58, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
    }
    else
    {
    }
    OArchive::OArchive((uint64_t)&v92, (uint64_t)a2, 0);
    CoreML::NNCompiler::Backend::NeuralNetwork::EspressoNetBackend::WriteNetwork((uint64_t)&__s, &v102, (uint64_t)&v92);
    if (SHIBYTE(__s.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__s.__pn_.__r_.__value_.__l.__data_);
    }
    std::__tree<std::__value_type<std::string,OArchive>,std::__map_value_compare<std::string,std::__value_type<std::string,OArchive>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,OArchive>>>::destroy(v93);
    if (v92.__pn_.__r_.__value_.__r.__words[2]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v92.__pn_.__r_.__value_.__r.__words[2]);
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v98);
    if (v102.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v102.__r_.__value_.__l.__size_);
    }
    if (v104) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v104);
    }
  }

  unint64_t v59 = [v76 modelVersionInfo];
  [v59 majorVersion];
  char v60 = [v76 ndArrayInterpretation];
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v92.__pn_, (char *)&v78);
  std::__fs::filesystem::path::parent_path[abi:ne180100](&v92, (uint64_t)v98);
  std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>((std::string *)&__v, (char **)&kModelMILFileName);
  std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&__v, (uint64_t)v98, &__s);
  if (SHIBYTE(__v.__end_) < 0) {
    operator delete(__v.__first_);
  }
  if ((v92.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    __n128 v61 = &v92;
  }
  else {
    __n128 v61 = (std::__fs::filesystem::path *)v92.__pn_.__r_.__value_.__r.__words[0];
  }
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)v61);
  std::string::basic_string[abi:ne180100]<0>(&v103, "model.mil");
  std::string::basic_string[abi:ne180100]<0>(&v102, "model.espresso.weights");
  memset(&__v, 0, 32);
  LODWORD(__v.__end_cap_.__value_) = 1065353216;
  int v62 = espresso_upgrade_net_to_mil();
  std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_shape>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_shape>>>::~__hash_table((uint64_t)&__v);
  if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v102.__r_.__value_.__l.__data_);
  }
  if (v105 < 0) {
    operator delete(v103);
  }
  if (SBYTE7(v95) < 0) {
    operator delete(__p[0]);
  }
  if (v62)
  {
    int64_t v67 = __cxa_allocate_exception(0x10uLL);
    uint64_t last_error = espresso_get_last_error();
    MEMORY[0x19F3C1380](v67, last_error);
    __cxa_throw(v67, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (v90) {
    char v63 = 0;
  }
  else {
    char v63 = v60;
  }
  if ((v63 & 1) == 0)
  {
    if (SHIBYTE(__s.__pn_.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)__p, __s.__pn_.__r_.__value_.__l.__data_, __s.__pn_.__r_.__value_.__l.__size_);
    }
    else
    {
      *(_OWORD *)std::string __p = *(_OWORD *)&__s.__pn_.__r_.__value_.__l.__data_;
      *(void *)&long long v95 = *((void *)&__s.__pn_.__r_.__value_.__l + 2);
    }
    CoreML::NNCompiler::Backend::MIL::LoadProgram();
  }
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v102, (char *)&v78);
  std::__fs::filesystem::path::parent_path[abi:ne180100]((const std::__fs::filesystem::path *)&v102, (uint64_t)&v103);
  std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(&v101.__pn_, (char **)&kModelMILFileName);
  std::__fs::filesystem::operator/[abi:ne180100](&v101, (uint64_t)&v103, (std::__fs::filesystem::path *)__p);
  if (SBYTE7(v95) < 0)
  {
    std::string::__init_copy_ctor_external(v71, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    if (SBYTE7(v95) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(_OWORD *)&v71->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    v71->__r_.__value_.__r.__words[2] = v95;
  }
  if (SHIBYTE(v101.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v101.__pn_.__r_.__value_.__l.__data_);
  }
  if (v105 < 0) {
    operator delete(v103);
  }
  if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v102.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__s.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__pn_.__r_.__value_.__l.__data_);
  }
  if (SBYTE7(v99) < 0) {
    operator delete(v98[0]);
  }
  if (SHIBYTE(v92.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v92.__pn_.__r_.__value_.__l.__data_);
  }

  if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v78.__r_.__value_.__l.__data_);
  }
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v83;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(v89);
}

void sub_19EA43C30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12, void *a13, void *a14, uint64_t a15, void *a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  __cxa_free_exception(v73);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a62);
  if (a72) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a72);
  }
  if (a73) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a73);
  }

  if (a22 < 0) {
    operator delete(__p);
  }
  a62 = &a33;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a62);
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy((char *)a45);

  _Unwind_Resume(a1);
}

void sub_19EA44340(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t buf, long long a16)
{
  uint64_t v19 = v18;

  if ((void)a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a16);
  }
  MPL::ModelPackage::~ModelPackage((MPL::ModelPackage *)&a12);
  if (a2 == 1)
  {
    uint64_t v22 = __cxa_begin_catch(a1);
    int v23 = v22;
    if (v17)
    {
      (*(void (**)(void *))(*(void *)v22 + 16))(v22);
      void *v17 = +[MLModelErrorUtils IOErrorWithFormat:@"Failed to read model package at %@. Error: %s"];
    }
    __n128 v24 = +[MLLogging coreChannel];
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      uint64_t v25 = (*(uint64_t (**)(void *))(*(void *)v23 + 16))(v23);
      LODWORD(buf) = 138412546;
      WORD2(a16) = 2080;
      *(void *)((char *)&a16 + 6) = v25;
      _os_log_error_impl(&dword_19E58B000, v24, OS_LOG_TYPE_ERROR, "Failed to read model package at %@. Error: %s", (uint8_t *)&buf, 0x16u);
    }

    __cxa_end_catch();
    JUMPOUT(0x19EA442B8);
  }

  _Unwind_Resume(a1);
}

void sub_19EA445B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(a1);
}

void sub_19EA44654(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_19EA44748(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_19EA44DB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<CoreML::Specification::ModelDescription>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF0DD688;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x19F3C1920);
}

void std::__shared_ptr_emplace<CoreML::Specification::ModelDescription>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF0DD688;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_19EA45184(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  if (*(char *)(v37 - 113) < 0) {
    operator delete(*(void **)(v37 - 136));
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x1E4FBA408];
  uint64_t v40 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  a19 = v40;
  a20 = MEMORY[0x1E4FBA470] + 16;
  if (a33 < 0) {
    operator delete(a28);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x19F3C1850](&a36);
  if (a2 == 1)
  {
    uint8x8_t v41 = __cxa_begin_catch(a1);
    if (v36)
    {
      (*(void (**)(void *))(*(void *)v41 + 16))(v41);
      *uint64_t v36 = +[MLModelErrorUtils IOErrorWithFormat:@"%s"];
    }
    __cxa_end_catch();
    JUMPOUT(0x19EA45164);
  }
  _Unwind_Resume(a1);
}

void sub_19EA4555C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  google::protobuf::io::OstreamOutputStream::~OstreamOutputStream((google::protobuf::io::OstreamOutputStream *)&a24);
  _Unwind_Resume(a1);
}

void sub_19EA458A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  id v33 = *(std::__shared_weak_count **)(v31 - 136);
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  CoreML::Specification::Model::~Model((CoreML::Specification::Model *)&a17);

  _Unwind_Resume(a1);
}

void sub_19EA45F74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }

  _Unwind_Resume(a1);
}

void sub_19EA461DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);

  ElapsedTimeRecorder::~ElapsedTimeRecorder((id *)va);
  _Unwind_Resume(a1);
}

void sub_19EA4664C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA468C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_19EA46FF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_19EA47158(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA471E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA472A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA4735C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<unsigned long long>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>(uint64_t *result, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = result;
  BOOL v6 = (uint64_t **)(result + 1);
  unint64_t v5 = (uint64_t *)result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        unint64_t v7 = (uint64_t **)v5;
        unint64_t v8 = v5[4];
        if (v8 <= a2) {
          break;
        }
        unint64_t v5 = *v7;
        BOOL v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      unint64_t v5 = v7[1];
      if (!v5)
      {
        BOOL v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    unint64_t v7 = (uint64_t **)(result + 1);
LABEL_9:
    unint64_t v9 = (uint64_t *)operator new(0x28uLL);
    v9[4] = a3;
    uint64_t *v9 = 0;
    v9[1] = 0;
    v9[2] = (uint64_t)v7;
    void *v6 = v9;
    uint64_t v10 = *(void *)*v4;
    if (v10)
    {
      uint64_t *v4 = v10;
      uint64_t v11 = *v6;
    }
    else
    {
      uint64_t v11 = v9;
    }
    __n128 result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v4[1], v11);
    ++v4[2];
  }
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *,false>(unint64_t *a1, unint64_t a2, uint64_t a3, char a4)
{
unint64_t *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>(unint64_t *result, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3 = *a2;
  unint64_t v4 = *result;
  if (*a2 >= *result && (v4 < v3 || *((double *)a2 + 1) >= *((double *)result + 1)))
  {
    unint64_t v8 = *a3;
    if (*a3 >= v3)
    {
      if (v3 < v8) {
        return result;
      }
      double v10 = *((double *)a3 + 1);
      double v9 = *((double *)a2 + 1);
      if (v10 >= v9) {
        return result;
      }
    }
    else
    {
      double v9 = *((double *)a2 + 1);
      double v10 = *((double *)a3 + 1);
    }
    *a2 = v8;
    *a3 = v3;
    *((double *)a2 + 1) = v10;
    *((double *)a3 + 1) = v9;
    unint64_t v11 = *a2;
    unint64_t v12 = *result;
    if (*a2 >= *result)
    {
      if (v12 < v11) {
        return result;
      }
      double v14 = *((double *)a2 + 1);
      double v13 = *((double *)result + 1);
      if (v14 >= v13) {
        return result;
      }
    }
    else
    {
      double v13 = *((double *)result + 1);
      double v14 = *((double *)a2 + 1);
    }
    const std::nested_exception *result = v11;
    *a2 = v12;
    *((double *)result + 1) = v14;
    *((double *)a2 + 1) = v13;
    return result;
  }
  unint64_t v5 = *a3;
  if (*a3 < v3)
  {
    double v6 = *((double *)a3 + 1);
LABEL_6:
    const std::nested_exception *result = v5;
    *a3 = v4;
    unint64_t v7 = result[1];
    *((double *)result + 1) = v6;
    a3[1] = v7;
    return result;
  }
  if (v3 >= v5)
  {
    double v6 = *((double *)a3 + 1);
    double v15 = *((double *)a2 + 1);
    if (v6 < v15) {
      goto LABEL_6;
    }
  }
  else
  {
    double v15 = *((double *)a2 + 1);
  }
  const std::nested_exception *result = v3;
  *a2 = v4;
  double v16 = *((double *)result + 1);
  *((double *)result + 1) = v15;
  *((double *)a2 + 1) = v16;
  unint64_t v17 = *a3;
  if (*a3 < v4)
  {
    double v18 = *((double *)a3 + 1);
LABEL_24:
    *a2 = v17;
    *a3 = v4;
    *((double *)a2 + 1) = v18;
    *((double *)a3 + 1) = v16;
    return result;
  }
  if (v4 >= v17)
  {
    double v18 = *((double *)a3 + 1);
    if (v18 < v16) {
      goto LABEL_24;
    }
  }
  return result;
}

unint64_t *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>((unint64_t *)a1, (unint64_t *)a2, (unint64_t *)a3);
  unint64_t v9 = *(void *)a4;
  unint64_t v10 = *(void *)a3;
  if (*(void *)a4 >= *(void *)a3)
  {
    if (v10 < v9) {
      return result;
    }
    double v12 = *(double *)(a4 + 8);
    double v11 = *(double *)(a3 + 8);
    if (v12 >= v11) {
      return result;
    }
  }
  else
  {
    double v11 = *(double *)(a3 + 8);
    double v12 = *(double *)(a4 + 8);
  }
  *(void *)a3 = v9;
  *(void *)a4 = v10;
  *(double *)(a3 + 8) = v12;
  *(double *)(a4 + 8) = v11;
  unint64_t v13 = *(void *)a3;
  unint64_t v14 = *(void *)a2;
  if (*(void *)a3 >= *(void *)a2)
  {
    if (v14 < v13) {
      return result;
    }
    double v16 = *(double *)(a3 + 8);
    double v15 = *(double *)(a2 + 8);
    if (v16 >= v15) {
      return result;
    }
  }
  else
  {
    double v15 = *(double *)(a2 + 8);
    double v16 = *(double *)(a3 + 8);
  }
  *(void *)a2 = v13;
  *(void *)a3 = v14;
  *(double *)(a2 + 8) = v16;
  *(double *)(a3 + 8) = v15;
  unint64_t v17 = *(void *)a2;
  unint64_t v18 = *(void *)a1;
  if (*(void *)a2 < *(void *)a1)
  {
    double v19 = *(double *)(a1 + 8);
    double v20 = *(double *)(a2 + 8);
LABEL_15:
    *(void *)a1 = v17;
    *(void *)a2 = v18;
    *(double *)(a1 + 8) = v20;
    *(double *)(a2 + 8) = v19;
    return result;
  }
  if (v18 >= v17)
  {
    double v20 = *(double *)(a2 + 8);
    double v19 = *(double *)(a1 + 8);
    if (v20 < v19) {
      goto LABEL_15;
    }
  }
  return result;
}

double std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>(a1, a2, a3, a4);
  unint64_t v11 = *a5;
  unint64_t v12 = *(void *)a4;
  if (*a5 >= *(void *)a4)
  {
    if (v12 < v11) {
      return result;
    }
    double v13 = *((double *)a5 + 1);
    double result = *(double *)(a4 + 8);
    if (v13 >= result) {
      return result;
    }
  }
  else
  {
    double result = *(double *)(a4 + 8);
    double v13 = *((double *)a5 + 1);
  }
  *(void *)a4 = v11;
  *a5 = v12;
  *(double *)(a4 + 8) = v13;
  *((double *)a5 + 1) = result;
  unint64_t v14 = *(void *)a4;
  unint64_t v15 = *(void *)a3;
  if (*(void *)a4 >= *(void *)a3)
  {
    if (v15 < v14) {
      return result;
    }
    double v16 = *(double *)(a4 + 8);
    double result = *(double *)(a3 + 8);
    if (v16 >= result) {
      return result;
    }
  }
  else
  {
    double result = *(double *)(a3 + 8);
    double v16 = *(double *)(a4 + 8);
  }
  *(void *)a3 = v14;
  *(void *)a4 = v15;
  *(double *)(a3 + 8) = v16;
  *(double *)(a4 + 8) = result;
  unint64_t v17 = *(void *)a3;
  unint64_t v18 = *(void *)a2;
  if (*(void *)a3 >= *(void *)a2)
  {
    if (v18 < v17) {
      return result;
    }
    double v19 = *(double *)(a3 + 8);
    double result = *(double *)(a2 + 8);
    if (v19 >= result) {
      return result;
    }
  }
  else
  {
    double result = *(double *)(a2 + 8);
    double v19 = *(double *)(a3 + 8);
  }
  *(void *)a2 = v17;
  *(void *)a3 = v18;
  *(double *)(a2 + 8) = v19;
  *(double *)(a3 + 8) = result;
  unint64_t v20 = *(void *)a2;
  unint64_t v21 = *(void *)a1;
  if (*(void *)a2 < *(void *)a1)
  {
    double result = *(double *)(a1 + 8);
    double v22 = *(double *)(a2 + 8);
LABEL_9:
    *(void *)a1 = v20;
    *(void *)a2 = v21;
    *(double *)(a1 + 8) = v22;
    *(double *)(a2 + 8) = result;
    return result;
  }
  if (v21 >= v20)
  {
    double v22 = *(double *)(a2 + 8);
    double result = *(double *)(a1 + 8);
    if (v22 < result) {
      goto LABEL_9;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unint64_t v6 = *(void *)(a2 - 16);
      unint64_t v7 = *(void *)a1;
      if (v6 < *(void *)a1)
      {
        double v8 = *(double *)(a1 + 8);
        double v9 = *(double *)(a2 - 8);
LABEL_30:
        *(void *)a1 = v6;
        *(void *)(a2 - 16) = v7;
        *(double *)(a1 + 8) = v9;
        *(double *)(a2 - 8) = v8;
        return result;
      }
      if (v7 >= v6)
      {
        double v9 = *(double *)(a2 - 8);
        double v8 = *(double *)(a1 + 8);
        if (v9 < v8) {
          goto LABEL_30;
        }
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>((unint64_t *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a2 - 16));
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>(a1, a1 + 16, a1 + 32, a2 - 16);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>(a1, a1 + 16, a1 + 32, a1 + 48, (unint64_t *)(a2 - 16));
      return 1;
    default:
      uint64_t v10 = a1 + 32;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>((unint64_t *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32));
      uint64_t v11 = a1 + 48;
      if (a1 + 48 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
LABEL_6:
  unint64_t v14 = *(void *)v11;
  unint64_t v15 = *(void *)v10;
  if (*(void *)v11 >= *(void *)v10)
  {
    if (v15 < v14) {
      goto LABEL_21;
    }
    double v16 = *(double *)(v11 + 8);
    double v17 = *(double *)(v10 + 8);
    if (v16 >= v17) {
      goto LABEL_21;
    }
  }
  else
  {
    double v16 = *(double *)(v11 + 8);
    double v17 = *(double *)(v10 + 8);
  }
  *(void *)uint64_t v11 = v15;
  *(double *)(v11 + 8) = v17;
  uint64_t v18 = a1;
  if (v10 == a1) {
    goto LABEL_20;
  }
  uint64_t v19 = v12;
  while (1)
  {
    uint64_t v20 = a1 + v19;
    unint64_t v21 = *(void *)(a1 + v19 + 16);
    if (v14 >= v21)
    {
      if (v21 < v14)
      {
        uint64_t v18 = v10;
        goto LABEL_20;
      }
      double v22 = *(double *)(a1 + v19 + 24);
      if (v16 >= v22)
      {
        uint64_t v18 = a1 + v19 + 32;
LABEL_20:
        *(void *)uint64_t v18 = v14;
        *(double *)(v18 + 8) = v16;
        if (++v13 == 8) {
          return v11 + 16 == a2;
        }
LABEL_21:
        uint64_t v10 = v11;
        v12 += 16;
        v11 += 16;
        if (v11 == a2) {
          return 1;
        }
        goto LABEL_6;
      }
    }
    else
    {
      double v22 = *(double *)(v20 + 24);
    }
    v10 -= 16;
    *(void *)(v20 + 32) = v21;
    *(double *)(a1 + v19 + 40) = v22;
    v19 -= 16;
    if (v19 == -32)
    {
      uint64_t v18 = a1;
      goto LABEL_20;
    }
  }
}

void std::__shared_ptr_emplace<CoreML::Recommender::_ItemSimilarityRecommenderData>::__on_zero_shared(uint64_t a1)
{
  unint64_t v3 = (void **)(a1 + 248);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v2 = *(void **)(a1 + 224);
  if (v2)
  {
    *(void *)(a1 + 232) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 223) < 0) {
    operator delete(*(void **)(a1 + 200));
  }
  if (*(char *)(a1 + 199) < 0) {
    operator delete(*(void **)(a1 + 176));
  }
  if (*(char *)(a1 + 175) < 0) {
    operator delete(*(void **)(a1 + 152));
  }
  if (*(char *)(a1 + 151) < 0) {
    operator delete(*(void **)(a1 + 128));
  }
  if (*(char *)(a1 + 127) < 0) {
    operator delete(*(void **)(a1 + 104));
  }
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy(*(void **)(a1 + 56));
  std::__tree<std::__value_type<unsigned long long,std::vector<std::pair<unsigned long long,double>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<std::pair<unsigned long long,double>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<std::pair<unsigned long long,double>>>>>::destroy(*(void **)(a1 + 32));
}

void std::__tree<std::__value_type<unsigned long long,std::vector<std::pair<unsigned long long,double>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<std::pair<unsigned long long,double>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<std::pair<unsigned long long,double>>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<unsigned long long,std::vector<std::pair<unsigned long long,double>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<std::pair<unsigned long long,double>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<std::pair<unsigned long long,double>>>>>::destroy(*a1);
    std::__tree<std::__value_type<unsigned long long,std::vector<std::pair<unsigned long long,double>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<std::pair<unsigned long long,double>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<std::pair<unsigned long long,double>>>>>::destroy(a1[1]);
    uint64_t v2 = (void *)a1[5];
    if (v2)
    {
      a1[6] = v2;
      operator delete(v2);
    }
    operator delete(a1);
  }
}

void std::__shared_ptr_emplace<CoreML::Recommender::_ItemSimilarityRecommenderData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF0DD618;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x19F3C1920);
}

void std::__shared_ptr_emplace<CoreML::Recommender::_ItemSimilarityRecommenderData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF0DD618;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void CoreML::Recommender::Internal::ItemSimilarityModel::~ItemSimilarityModel(CoreML::Archiver::MMappedContentManager **this)
{
}

uint64_t **CoreML::NNCompiler::Frontend::ParseOptionalInputDefaults(uint64_t **this, const CoreML::Specification::ModelDescription *a2, uint64_t a3)
{
  this[1] = 0;
  this[2] = 0;
  *this = (uint64_t *)(this + 1);
  if (a3) {
    unint64_t v3 = (uint64_t *)(a3 + 8);
  }
  else {
    unint64_t v3 = 0;
  }
  if (a2)
  {
    uint64_t v4 = this;
    uint64_t v5 = 8 * (int)a2;
    while (1)
    {
      uint64_t v6 = *v3;
      unint64_t v7 = *(uint64_t **)(*v3 + 32);
      if (!v7) {
        unint64_t v7 = &CoreML::Specification::_FeatureType_default_instance_;
      }
      if (!*((unsigned char *)v7 + 16)) {
        goto LABEL_42;
      }
      if (*((_DWORD *)v7 + 9) == 5)
      {
        double v8 = (uint64_t *)v7[3];
      }
      else
      {
        this = (uint64_t **)CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults((CoreML::Specification::protobuf_FeatureTypes_2eproto *)this);
        double v8 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
      }
      int v9 = *((_DWORD *)v8 + 16);
      if (v9 == 41) {
        break;
      }
      if (v9 == 51)
      {
        unint64_t v14 = *(uint64_t **)(v6 + 32);
        if (!v14) {
          unint64_t v14 = &CoreML::Specification::_FeatureType_default_instance_;
        }
        if (*((_DWORD *)v14 + 9) == 5)
        {
          unint64_t v15 = (uint64_t *)v14[3];
        }
        else
        {
          CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults((CoreML::Specification::protobuf_FeatureTypes_2eproto *)this);
          unint64_t v15 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
        }
        int v19 = 0;
        if (*((_DWORD *)v15 + 16) == 51) {
          int v19 = *((_DWORD *)v15 + 12);
        }
        uint64_t v20 = *(long long **)(v6 + 16);
        this = (uint64_t **)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v4, v20, &v20);
        *((_DWORD *)this + 14) = v19;
        goto LABEL_42;
      }
      if (v9 == 61)
      {
        uint64_t v10 = *(uint64_t **)(v6 + 32);
        if (!v10) {
          uint64_t v10 = &CoreML::Specification::_FeatureType_default_instance_;
        }
        if (*((_DWORD *)v10 + 9) == 5)
        {
          uint64_t v11 = (uint64_t *)v10[3];
        }
        else
        {
          CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults((CoreML::Specification::protobuf_FeatureTypes_2eproto *)this);
          uint64_t v11 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
        }
        double v16 = 0.0;
        if (*((_DWORD *)v11 + 16) == 61) {
          double v16 = *((double *)v11 + 6);
        }
        uint64_t v20 = *(long long **)(v6 + 16);
        this = (uint64_t **)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v4, v20, &v20);
        float v17 = v16;
LABEL_41:
        *((float *)this + 14) = v17;
        goto LABEL_42;
      }
      uint64_t v20 = *(long long **)(v6 + 16);
      this = (uint64_t **)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v4, v20, &v20);
      *((_DWORD *)this + 14) = 0;
LABEL_42:
      ++v3;
      v5 -= 8;
      if (!v5) {
        return this;
      }
    }
    uint64_t v12 = *(uint64_t **)(v6 + 32);
    if (!v12) {
      uint64_t v12 = &CoreML::Specification::_FeatureType_default_instance_;
    }
    if (*((_DWORD *)v12 + 9) == 5)
    {
      int v13 = (uint64_t *)v12[3];
    }
    else
    {
      CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults((CoreML::Specification::protobuf_FeatureTypes_2eproto *)this);
      int v13 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
    }
    if (*((_DWORD *)v13 + 16) == 41) {
      int v18 = *((_DWORD *)v13 + 12);
    }
    else {
      int v18 = 0;
    }
    uint64_t v20 = *(long long **)(v6 + 16);
    this = (uint64_t **)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v4, v20, &v20);
    float v17 = (float)v18;
    goto LABEL_41;
  }
  return this;
}

void sub_19EA49874(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

void *CoreML::NNCompiler::Frontend::ParseModelOSSizeTrackingInfo(CoreML::NNCompiler::Frontend *this, const CoreML::Specification::ModelDescription *a2)
{
  *((void *)this + 1) = 0;
  unint64_t v3 = (char *)this + 8;
  *((void *)this + 2) = 0;
  *(void *)this = (char *)this + 8;
  if (a2) {
    uint64_t v4 = a2;
  }
  else {
    uint64_t v4 = (const CoreML::Specification::ModelDescription *)&CoreML::Specification::_Metadata_default_instance_;
  }
  uint64_t v25 = 0;
  int v26 = *((_DWORD *)v4 + 8);
  google::protobuf::Map<std::string,std::string>::Init((uint64_t)&v25);
  google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::begin(&v28, *((void **)v4 + 5));
  long long v30 = v28;
  unint64_t v31 = v29;
  uint64_t v5 = v28;
  for (i = v27; (void)v30; uint64_t v5 = v30)
  {
    google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper(v32, (uint64_t)i, *(unsigned __int8 **)(v5 + 24), 0);
    if (!v32[0])
    {
      unint64_t v7 = *(const std::string **)(v30 + 24);
      double v8 = google::protobuf::Map<std::string,std::string>::operator[]((uint64_t)&v25, (uint64_t)v7);
      std::string::operator=((std::string *)v8, v7 + 1);
    }
    google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::KeyValuePair const>::operator++((unsigned __int8 **)&v30);
  }
  unint64_t v9 = i[3];
  unint64_t v10 = i[1];
  if (v10 > v9)
  {
    uint64_t v11 = i[4];
    while (1)
    {
      uint64_t v12 = *(void **)(v11 + 8 * v9);
      if (v12) {
        break;
      }
      if (v10 == ++v9) {
        return google::protobuf::Map<std::string,std::string>::~Map(&v25);
      }
    }
    if (v12 != *(void **)(v11 + 8 * (v9 ^ 1)))
    {
      *(void *)&long long v30 = *(void *)(v11 + 8 * v9);
      *((void *)&v30 + 1) = i;
      unint64_t v31 = v9;
      goto LABEL_16;
    }
    uint64_t v12 = *(void **)(*v12 + 32);
    *(void *)&long long v30 = v12;
    *((void *)&v30 + 1) = i;
    unint64_t v31 = v9;
    if (v12)
    {
      do
      {
LABEL_16:
        int v13 = (std::string *)v12[3];
        int v14 = SHIBYTE(v13->__r_.__value_.__r.__words[2]);
        if (v14 < 0)
        {
          if (v13->__r_.__value_.__l.__size_ == 10)
          {
            unint64_t v15 = (uint64_t *)v13->__r_.__value_.__r.__words[0];
LABEL_21:
            uint64_t v16 = *v15;
            int v17 = *((unsigned __int16 *)v15 + 4);
            if (v16 == 0x6B6F745F62646C6DLL && v17 == 28261)
            {
              int v19 = (void **)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__find_equal<std::string>((uint64_t)this, &v28, v13);
              uint64_t v20 = (char *)*v19;
              if (!*v19)
              {
                unint64_t v21 = (uint64_t **)v19;
                uint64_t v20 = (char *)operator new(0x50uLL);
                v32[0] = v20;
                v32[1] = v3;
                char v33 = 0;
                double v22 = (std::string *)(v20 + 32);
                if (SHIBYTE(v13->__r_.__value_.__r.__words[2]) < 0)
                {
                  std::string::__init_copy_ctor_external(v22, v13->__r_.__value_.__l.__data_, v13->__r_.__value_.__l.__size_);
                }
                else
                {
                  long long v23 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
                  *((void *)v20 + CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = *((void *)&v13->__r_.__value_.__l + 2);
                  *(_OWORD *)&v22->__r_.__value_.__l.__data_ = v23;
                }
                *((void *)v20 + 7) = 0;
                *((void *)v20 + 8) = 0;
                *((void *)v20 + 9) = 0;
                char v33 = 1;
                std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at((uint64_t **)this, v28, v21, (uint64_t *)v20);
                v32[0] = 0;
                std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v32);
              }
              std::string::operator=((std::string *)(v20 + 56), v13 + 1);
            }
          }
        }
        else
        {
          unint64_t v15 = (uint64_t *)v12[3];
          if (v14 == 10) {
            goto LABEL_21;
          }
        }
        google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::KeyValuePair>::operator++(&v30);
        uint64_t v12 = (void *)v30;
      }
      while ((void)v30);
    }
  }
  return google::protobuf::Map<std::string,std::string>::~Map(&v25);
}

void sub_19EA49AC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)&a19);
  google::protobuf::Map<std::string,std::string>::~Map(&a9);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*v19);
  _Unwind_Resume(a1);
}

void std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::erase(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = (uint64_t *)a2[1];
  if (v4)
  {
    do
    {
      uint64_t v5 = v4;
      uint64_t v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  else
  {
    uint64_t v6 = a2;
    do
    {
      uint64_t v5 = (uint64_t *)v6[2];
      BOOL v7 = *v5 == (void)v6;
      uint64_t v6 = v5;
    }
    while (!v7);
  }
  if (*(uint64_t **)a1 == a2) {
    *(void *)a1 = v5;
  }
  --*(void *)(a1 + 24);
  std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 8), a2);
  if (!*(void *)(a1 + 16))
  {
    operator delete(a2);
  }
}

uint64_t CoreML::NNCompiler::Backend::MIL::MILMetadataUtils::SetFlexibleShapesAttribute(uint64_t result, uint64_t a2, unint64_t a3, void *a4, void *a5)
{
  if (a4[2]) {
    BOOL v5 = 0;
  }
  else {
    BOOL v5 = a5[2] == 0;
  }
  if (!v5 || *(void *)(a3 + 16) != 0)
  {
    BOOL v7 = a5;
    unint64_t v9 = a3;
    uint64_t v10 = result;
    MIL::Attributes::FlexibleShapeInfo::Make();
    uint64_t v103 = v10;
    unint64_t v98 = v9;
    if (a4[2])
    {
      int v13 = (void *)*a4;
      uint64_t v12 = a4 + 1;
      uint64_t v11 = v13;
      if (v13 != v12)
      {
        int v14 = v11;
        uint64_t v100 = v7;
        uint64_t v99 = v12;
        do
        {
          *(_OWORD *)std::string __p = 0u;
          long long v113 = 0u;
          float v114 = 1.0;
          unint64_t v15 = (void *)v14[10];
          unint64_t v102 = v14;
          unint64_t v104 = v14 + 11;
          if (v15 != v14 + 11)
          {
            do
            {
              *(_OWORD *)unint64_t v110 = 0uLL;
              int v16 = *((_DWORD *)v15 + 18);
              if (v16 == 1) {
                int v17 = 4;
              }
              else {
                int v17 = 5;
              }
              if (*((_DWORD *)v15 + 19) == -1) {
                int v18 = v17;
              }
              else {
                int v18 = *((_DWORD *)v15 + 19);
              }
              *(_DWORD *)&v110[16] = 0;
              int v111 = v18;
              switch(v18)
              {
                case 0:
                  break;
                case 1:
                  *(_DWORD *)unint64_t v110 = *((_DWORD *)v15 + 14);
                  break;
                case 2:
                  *(int32x2_t *)unint64_t v110 = vrev64_s32((int32x2_t)v15[7]);
                  break;
                case 3:
                  *(int32x2_t *)unint64_t v110 = vrev64_s32(*(int32x2_t *)((char *)v15 + 60));
                  *(_DWORD *)&v110[8] = *((_DWORD *)v15 + 14);
                  break;
                case 4:
                  int8x16_t v19 = (int8x16_t)vrev64q_s32(*(int32x4_t *)(v15 + 7));
                  *(int8x16_t *)unint64_t v110 = vextq_s8(v19, v19, 8uLL);
                  break;
                case 5:
                  *(_DWORD *)unint64_t v110 = v16;
                  int8x16_t v20 = (int8x16_t)vrev64q_s32(*(int32x4_t *)(v15 + 7));
                  *(int8x16_t *)&v110[4] = vextq_s8(v20, v20, 8uLL);
                  break;
                default:
                  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::to_string(&v115, v18);
                  uint64_t v96 = std::string::insert(&v115, 0, "Invalid rank: ");
                  long long v97 = *(_OWORD *)&v96->__r_.__value_.__l.__data_;
                  v116.__end_cap_.__value_ = (int *)v96->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v116.__begin_ = v97;
                  v96->__r_.__value_.__l.__size_ = 0;
                  v96->__r_.__value_.__r.__words[2] = 0;
                  v96->__r_.__value_.__r.__words[0] = 0;
                  std::runtime_error::runtime_error(exception, (const std::string *)&v116);
                  __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              memset(&v116, 0, sizeof(v116));
              std::vector<int>::reserve(&v116, v18);
              if (v18)
              {
                unint64_t v21 = 0;
                std::vector<int>::pointer end = v116.__end_;
                value = v116.__end_cap_.__value_;
                begin = v116.__begin_;
                do
                {
                  if (end >= value)
                  {
                    uint64_t v26 = end - begin;
                    unint64_t v27 = v26 + 1;
                    if ((unint64_t)(v26 + 1) >> 62)
                    {
                      v116.__end_cap_.__value_ = value;
                      v116.__begin_ = begin;
                      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
                    }
                    if (((char *)value - (char *)begin) >> 1 > v27) {
                      unint64_t v27 = ((char *)value - (char *)begin) >> 1;
                    }
                    if ((unint64_t)((char *)value - (char *)begin) >= 0x7FFFFFFFFFFFFFFCLL) {
                      unint64_t v28 = 0x3FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v28 = v27;
                    }
                    if (v28) {
                      unint64_t v28 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v28);
                    }
                    else {
                      uint64_t v29 = 0;
                    }
                    long long v30 = (int *)(v28 + 4 * v26);
                    *long long v30 = *(_DWORD *)&v110[4 * v21];
                    uint64_t v25 = v30 + 1;
                    while (end != begin)
                    {
                      int v31 = *--end;
                      *--long long v30 = v31;
                    }
                    value = (int *)(v28 + 4 * v29);
                    v116.__end_ = v25;
                    if (begin) {
                      operator delete(begin);
                    }
                    begin = v30;
                  }
                  else
                  {
                    *std::vector<int>::pointer end = *(_DWORD *)&v110[4 * v21];
                    uint64_t v25 = end + 1;
                  }
                  v116.__end_ = v25;
                  ++v21;
                  std::vector<int>::pointer end = v25;
                }
                while (v21 < v111);
                v116.__end_cap_.__value_ = value;
                v116.__begin_ = begin;
                uint64_t v10 = v103;
              }
              if (v116.__begin_) {
                operator delete(v116.__begin_);
              }
              v116.__begin_ = (std::vector<int>::pointer)(v15 + 4);
              uint64_t v32 = std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)__p, (unsigned __int8 *)v15 + 32, (long long **)&v116);
              char v33 = (void *)*((void *)v32 + 5);
              if (v33)
              {
                *((void *)v32 + CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = v33;
                operator delete(v33);
                *((void *)v32 + 5) = 0;
                *((void *)v32 + CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = 0;
                *((void *)v32 + 7) = 0;
              }
              *(_OWORD *)(v32 + 40) = v108;
              *((void *)v32 + 7) = v109;
              unint64_t v34 = (void *)v15[1];
              if (v34)
              {
                do
                {
                  BOOL v35 = v34;
                  unint64_t v34 = (void *)*v34;
                }
                while (v34);
              }
              else
              {
                do
                {
                  BOOL v35 = (void *)v15[2];
                  BOOL v5 = *v35 == (void)v15;
                  unint64_t v15 = v35;
                }
                while (!v5);
              }
              unint64_t v15 = v35;
            }
            while (v35 != v104);
          }
          unint64_t v36 = v102;
          if (*((char *)v102 + 55) < 0) {
            std::string::__init_copy_ctor_external(&v107, (const std::string::value_type *)v102[4], v102[5]);
          }
          else {
            std::string v107 = *(std::string *)(v102 + 4);
          }
          MIL::Attributes::FlexibleShapeInfo::AddEnumeratedShapes();
          if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v107.__r_.__value_.__l.__data_);
          }
          std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::~__hash_table((uint64_t)__p);
          unint64_t v37 = (void *)v102[1];
          if (v37)
          {
            do
            {
              unint64_t v38 = v37;
              unint64_t v37 = (void *)*v37;
            }
            while (v37);
          }
          else
          {
            do
            {
              unint64_t v38 = (void *)v36[2];
              BOOL v5 = *v38 == (void)v36;
              unint64_t v36 = v38;
            }
            while (!v5);
          }
          int v14 = v38;
        }
        while (v38 != v99);
        unint64_t v9 = v98;
        BOOL v7 = v100;
      }
    }
    if (v7[2])
    {
      *(_OWORD *)std::string __p = 0u;
      long long v113 = 0u;
      float v114 = 1.0;
      unint64_t v39 = (unsigned __int8 *)*v7;
      uint64_t v101 = (unsigned __int8 *)(v7 + 1);
      if ((void *)*v7 != v7 + 1)
      {
        while (1)
        {
          unint64_t v40 = (int *)*((void *)v39 + 10);
          unint64_t v41 = (int *)*((void *)v39 + 11);
          if (v40 == v41)
          {
            unint64_t v42 = 0;
            long long v105 = 0u;
          }
          else
          {
            unint64_t v42 = 0;
            unint64_t v43 = 0;
            long long v105 = 0u;
            do
            {
              int v44 = *v40;
              int v45 = v40[2];
              if (v43 >= v42)
              {
                unint64_t v9 = v105;
                uint64_t v46 = (uint64_t)&v43[-v105] >> 3;
                unint64_t v47 = v46 + 1;
                if ((unint64_t)(v46 + 1) >> 61) {
                  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
                }
                if ((uint64_t)&v42[-v105] >> 2 > v47) {
                  unint64_t v47 = (uint64_t)&v42[-v105] >> 2;
                }
                if ((unint64_t)&v42[-v105] >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v48 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v48 = v47;
                }
                if (v48 >> 61) {
                  std::__throw_bad_array_new_length[abi:ne180100]();
                }
                double v49 = (char *)operator new(8 * v48);
                double v50 = &v49[8 * v46];
                *(_DWORD *)double v50 = v44;
                *((_DWORD *)v50 + 1) = v45;
                uint64_t v51 = *((void *)&v105 + 1);
                uint64_t v52 = v50;
                while (v51 != (void)v105)
                {
                  uint64_t v53 = *(void *)(v51 - 8);
                  v51 -= 8;
                  *((void *)v52 - 1) = v53;
                  v52 -= 8;
                }
                unint64_t v42 = &v49[8 * v48];
                unint64_t v43 = v50 + 8;
                *(void *)&long long v105 = v52;
                if (v9) {
                  operator delete((void *)v9);
                }
              }
              else
              {
                *(_DWORD *)unint64_t v43 = v44;
                *((_DWORD *)v43 + 1) = v45;
                v43 += 8;
              }
              *(void *)&long long v54 = v105;
              *((void *)&v54 + 1) = v43;
              long long v105 = v54;
              v40 += 4;
            }
            while (v40 != v41);
          }
          unint64_t v55 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(v39 + 32));
          unint64_t v56 = v55;
          unint64_t v57 = (unint64_t)__p[1];
          if (__p[1])
          {
            uint8x8_t v58 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
            v58.i16[0] = vaddlv_u8(v58);
            unint64_t v59 = v58.u32[0];
            if (v58.u32[0] > 1uLL)
            {
              unint64_t v9 = v55;
              if ((void *)v55 >= __p[1]) {
                unint64_t v9 = v55 % (unint64_t)__p[1];
              }
            }
            else
            {
              unint64_t v9 = ((unint64_t)__p[1] - 1) & v55;
            }
            double v60 = (std::vector<int>::pointer *)*((void *)__p[0] + v9);
            if (v60)
            {
              for (std::vector<int>::pointer i = *v60; i; std::vector<int>::pointer i = *(std::vector<int>::pointer *)i)
              {
                unint64_t v62 = *((void *)i + 1);
                if (v62 == v56)
                {
                  if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)i + 16, v39 + 32)) {
                    goto LABEL_163;
                  }
                }
                else
                {
                  if (v59 > 1)
                  {
                    if (v62 >= v57) {
                      v62 %= v57;
                    }
                  }
                  else
                  {
                    v62 &= v57 - 1;
                  }
                  if (v62 != v9) {
                    break;
                  }
                }
              }
            }
          }
          unint64_t v63 = (char *)operator new(0x40uLL);
          v116.__begin_ = (std::vector<int>::pointer)v63;
          v116.__end_ = (std::vector<int>::pointer)&v113;
          LOBYTE(v116.__end_cap_.__value_) = 0;
          *(void *)unint64_t v63 = 0;
          *((void *)v63 + 1) = v56;
          double v64 = (std::string *)(v63 + 16);
          if ((char)v39[55] < 0)
          {
            std::string::__init_copy_ctor_external(v64, *((const std::string::value_type **)v39 + 4), *((void *)v39 + 5));
          }
          else
          {
            long long v65 = *((_OWORD *)v39 + 2);
            *((void *)v63 + 4) = *((void *)v39 + 6);
            *(_OWORD *)&v64->__r_.__value_.__l.__data_ = v65;
          }
          *((void *)v63 + 5) = 0;
          *((void *)v63 + CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = 0;
          *((void *)v63 + 7) = 0;
          LOBYTE(v116.__end_cap_.__value_) = 1;
          float v66 = (float)(unint64_t)(*((void *)&v113 + 1) + 1);
          if (!v57 || (float)(v114 * (float)v57) < v66) {
            break;
          }
LABEL_153:
          double v82 = (std::vector<int>::pointer *)*((void *)__p[0] + v9);
          std::vector<int>::pointer i = v116.__begin_;
          if (v82)
          {
            *(void *)v116.__begin_ = *v82;
          }
          else
          {
            *(void *)v116.__begin_ = v113;
            *(void *)&long long v113 = i;
            *((void *)__p[0] + v9) = &v113;
            if (!*(void *)i) {
              goto LABEL_162;
            }
            unint64_t v83 = *(void *)(*(void *)i + 8);
            if ((v57 & (v57 - 1)) != 0)
            {
              if (v83 >= v57) {
                v83 %= v57;
              }
            }
            else
            {
              v83 &= v57 - 1;
            }
            double v82 = (std::vector<int>::pointer *)((char *)__p[0] + 8 * v83);
          }
          *double v82 = i;
LABEL_162:
          v116.__begin_ = 0;
          ++*((void *)&v113 + 1);
          std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v116);
LABEL_163:
          long long v84 = (void *)*((void *)i + 5);
          if (v84)
          {
            *((void *)i + CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = v84;
            operator delete(v84);
            *((void *)i + 5) = 0;
            *((void *)i + CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = 0;
            *((void *)i + 7) = 0;
          }
          *(_OWORD *)(i + 10) = v105;
          *((void *)i + 7) = v42;
          unint64_t v85 = (unsigned __int8 *)*((void *)v39 + 1);
          if (v85)
          {
            do
            {
              unint64_t v86 = v85;
              unint64_t v85 = *(unsigned __int8 **)v85;
            }
            while (v85);
          }
          else
          {
            do
            {
              unint64_t v86 = (unsigned __int8 *)*((void *)v39 + 2);
              BOOL v5 = *(void *)v86 == (void)v39;
              unint64_t v39 = v86;
            }
            while (!v5);
          }
          unint64_t v39 = v86;
          uint64_t v10 = v103;
          if (v86 == v101) {
            goto LABEL_181;
          }
        }
        BOOL v67 = (v57 & (v57 - 1)) != 0;
        if (v57 < 3) {
          BOOL v67 = 1;
        }
        unint64_t v68 = v67 | (2 * v57);
        unint64_t v69 = vcvtps_u32_f32(v66 / v114);
        if (v68 <= v69) {
          int8x8_t prime = (int8x8_t)v69;
        }
        else {
          int8x8_t prime = (int8x8_t)v68;
        }
        if (*(void *)&prime == 1)
        {
          int8x8_t prime = (int8x8_t)2;
        }
        else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
        {
          int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
        }
        unint64_t v57 = (unint64_t)__p[1];
        if ((void *)*(void *)&prime > __p[1]) {
          goto LABEL_119;
        }
        if ((void *)*(void *)&prime < __p[1])
        {
          unint64_t v77 = vcvtps_u32_f32((float)*((unint64_t *)&v113 + 1) / v114);
          if (__p[1] < (void *)3
            || (uint8x8_t v78 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]), v78.i16[0] = vaddlv_u8(v78), v78.u32[0] > 1uLL))
          {
            unint64_t v77 = std::__next_prime(v77);
          }
          else
          {
            uint64_t v79 = 1 << -(char)__clz(v77 - 1);
            if (v77 >= 2) {
              unint64_t v77 = v79;
            }
          }
          if (*(void *)&prime <= v77) {
            int8x8_t prime = (int8x8_t)v77;
          }
          if (*(void *)&prime >= v57)
          {
            unint64_t v57 = (unint64_t)__p[1];
          }
          else
          {
            if (prime)
            {
LABEL_119:
              if (*(void *)&prime >> 61) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              unint64_t v71 = operator new(8 * *(void *)&prime);
              unint64_t v72 = __p[0];
              __p[0] = v71;
              if (v72) {
                operator delete(v72);
              }
              uint64_t v73 = 0;
              __p[1] = (void *)prime;
              do
                *((void *)__p[0] + v73++) = 0;
              while (*(void *)&prime != v73);
              unint64_t v74 = (void **)v113;
              if ((void)v113)
              {
                unint64_t v75 = *(void *)(v113 + 8);
                uint8x8_t v76 = (uint8x8_t)vcnt_s8(prime);
                v76.i16[0] = vaddlv_u8(v76);
                if (v76.u32[0] > 1uLL)
                {
                  if (v75 >= *(void *)&prime) {
                    v75 %= *(void *)&prime;
                  }
                }
                else
                {
                  v75 &= *(void *)&prime - 1;
                }
                *((void *)__p[0] + v75) = &v113;
                for (j = *v74; j; unint64_t v75 = v81)
                {
                  unint64_t v81 = j[1];
                  if (v76.u32[0] > 1uLL)
                  {
                    if (v81 >= *(void *)&prime) {
                      v81 %= *(void *)&prime;
                    }
                  }
                  else
                  {
                    v81 &= *(void *)&prime - 1;
                  }
                  if (v81 != v75)
                  {
                    if (!*((void *)__p[0] + v81))
                    {
                      *((void *)__p[0] + v81) = v74;
                      goto LABEL_144;
                    }
                    void *v74 = (void *)*j;
                    *unint64_t j = **((void **)__p[0] + v81);
                    **((void **)__p[0] + v81) = j;
                    unint64_t j = v74;
                  }
                  unint64_t v81 = v75;
LABEL_144:
                  unint64_t v74 = (void **)j;
                  unint64_t j = (void *)*j;
                }
              }
              unint64_t v57 = (unint64_t)prime;
              goto LABEL_148;
            }
            double v87 = __p[0];
            __p[0] = 0;
            if (v87) {
              operator delete(v87);
            }
            unint64_t v57 = 0;
            __p[1] = 0;
          }
        }
LABEL_148:
        if ((v57 & (v57 - 1)) != 0)
        {
          if (v56 >= v57) {
            unint64_t v9 = v56 % v57;
          }
          else {
            unint64_t v9 = v56;
          }
        }
        else
        {
          unint64_t v9 = (v57 - 1) & v56;
        }
        goto LABEL_153;
      }
LABEL_181:
      MIL::Attributes::FlexibleShapeInfo::SetRangeShapes();
      unint64_t v9 = v98;
      std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::~__hash_table((uint64_t)__p);
    }
    if (*(void *)(v9 + 16))
    {
      *(_OWORD *)std::string __p = 0u;
      long long v113 = 0u;
      float v114 = 1.0;
      unint64_t v90 = *(unsigned __int8 **)v9;
      unint64_t v89 = (unsigned __int8 *)(v9 + 8);
      BOOL v88 = v90;
      if (v90 != v89)
      {
        do
        {
          v115.__r_.__value_.__r.__words[0] = (std::string::size_type)(v88 + 32);
          uint64_t v91 = std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)__p, v88 + 32, (long long **)&v115);
          uint64_t v92 = (void *)*((void *)v91 + 5);
          if (v92)
          {
            *((void *)v91 + CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = v92;
            operator delete(v92);
            *((void *)v91 + 5) = 0;
            *((void *)v91 + CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = 0;
            *((void *)v91 + 7) = 0;
          }
          *(std::vector<int> *)(v91 + 40) = v116;
          unint64_t v93 = (unsigned __int8 *)*((void *)v88 + 1);
          if (v93)
          {
            do
            {
              double v94 = v93;
              unint64_t v93 = *(unsigned __int8 **)v93;
            }
            while (v93);
          }
          else
          {
            do
            {
              double v94 = (unsigned __int8 *)*((void *)v88 + 2);
              BOOL v5 = *(void *)v94 == (void)v88;
              BOOL v88 = v94;
            }
            while (!v5);
          }
          BOOL v88 = v94;
        }
        while (v94 != v89);
      }
      MIL::Attributes::FlexibleShapeInfo::SetDefaultShapes();
      std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::~__hash_table((uint64_t)__p);
    }
    MIL::Attributes::FlexibleShapeInfo::Replace();
    BOOL result = (uint64_t)v106;
    if (v106)
    {
      MIL::Attributes::FlexibleShapeInfo::~FlexibleShapeInfo(v106);
      return MEMORY[0x19F3C1920]();
    }
  }
  return result;
}

void sub_19EA4A690(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, long long a17, uint64_t a18, MIL::Attributes::FlexibleShapeInfo *a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
}

void anonymous namespace'::LayerShapeToDimensions(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v4 = *(_DWORD **)a3;
  BOOL v5 = *(_DWORD **)(a3 + 8);
  uint64_t v6 = (uint64_t)v5 - *(void *)a3;
  if (v5 == *(_DWORD **)a3)
  {
    double v8 = 0;
  }
  else
  {
    if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFFDLL) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
    double v8 = (uint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<_KDInterval>>(v6 >> 2);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[v9];
    uint64_t v4 = *(_DWORD **)a3;
    BOOL v5 = *(_DWORD **)(a3 + 8);
  }
  for (; v4 != v5; double v8 = v19)
  {
    if ((*v4 & 0x80000000) != 0)
    {
      uint64_t v10 = MIL::IRUnknownDimension::Make();
      unint64_t v18 = (unint64_t)a1[2];
      if ((unint64_t)v8 >= v18)
      {
        int8x16_t v20 = *a1;
        uint64_t v21 = v8 - *a1;
        unint64_t v22 = v21 + 1;
        if ((unint64_t)(v21 + 1) >> 61) {
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v23 = v18 - (void)v20;
        if (v23 >> 2 > v22) {
          unint64_t v22 = v23 >> 2;
        }
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v16 = v22;
        }
        if (v16) {
          unint64_t v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<_KDInterval>>(v16);
        }
        else {
          uint64_t v17 = 0;
        }
        unint64_t v24 = (uint64_t *)(v16 + 8 * v21);
        *unint64_t v24 = v10;
        int8x16_t v19 = v24 + 1;
        if (v8 != v20)
        {
          do
          {
            uint64_t v26 = *--v8;
            *--unint64_t v24 = v26;
          }
          while (v8 != v20);
LABEL_33:
          double v8 = *a1;
        }
LABEL_34:
        *a1 = v24;
        a1[1] = v19;
        a1[2] = (uint64_t *)(v16 + 8 * v17);
        if (v8) {
          operator delete(v8);
        }
        goto LABEL_36;
      }
    }
    else
    {
      uint64_t v10 = MIL::IRConstantDimension::Make();
      unint64_t v11 = (unint64_t)a1[2];
      if ((unint64_t)v8 >= v11)
      {
        uint64_t v12 = *a1;
        uint64_t v13 = v8 - *a1;
        unint64_t v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 61) {
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v15 = v11 - (void)v12;
        if (v15 >> 2 > v14) {
          unint64_t v14 = v15 >> 2;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v16 = v14;
        }
        if (v16) {
          unint64_t v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<_KDInterval>>(v16);
        }
        else {
          uint64_t v17 = 0;
        }
        unint64_t v24 = (uint64_t *)(v16 + 8 * v13);
        *unint64_t v24 = v10;
        int8x16_t v19 = v24 + 1;
        if (v8 != v12)
        {
          do
          {
            uint64_t v25 = *--v8;
            *--unint64_t v24 = v25;
          }
          while (v8 != v12);
          goto LABEL_33;
        }
        goto LABEL_34;
      }
    }
    *double v8 = v10;
    int8x16_t v19 = v8 + 1;
LABEL_36:
    a1[1] = v19;
    ++v4;
  }
}

void sub_19EA4A9E0(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, long long **a3)
{
  unint64_t v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    uint64_t v12 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      uint64_t v13 = (char *)*v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = *((void *)v13 + 1);
          if (v14 == v8)
          {
            if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)v13 + 16, a2)) {
              return v13;
            }
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9) {
                v14 %= v9;
              }
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v3) {
              break;
            }
          }
          uint64_t v13 = *(char **)v13;
        }
        while (v13);
      }
    }
  }
  uint64_t v15 = (void *)(a1 + 16);
  uint64_t v13 = (char *)operator new(0x40uLL);
  v29[0] = v13;
  v29[1] = a1 + 16;
  char v30 = 0;
  *(void *)uint64_t v13 = 0;
  *((void *)v13 + 1) = v8;
  unint64_t v16 = (std::string *)(v13 + 16);
  uint64_t v17 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v16, *(const std::string::value_type **)v17, *((void *)v17 + 1));
  }
  else
  {
    long long v18 = *v17;
    *((void *)v13 + 4) = *((void *)v17 + 2);
    *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v18;
  }
  *((void *)v13 + 5) = 0;
  *((void *)v13 + CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = 0;
  *((void *)v13 + 7) = 0;
  char v30 = 1;
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (!v9 || (float)(v20 * (float)v9) < v19)
  {
    BOOL v21 = 1;
    if (v9 >= 3) {
      BOOL v21 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v9);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      size_t v24 = v23;
    }
    else {
      size_t v24 = v22;
    }
    std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__rehash<true>(a1, v24);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v25 = *(void *)a1;
  uint64_t v26 = *(void **)(*(void *)a1 + 8 * v3);
  if (v26)
  {
    *(void *)uint64_t v13 = *v26;
LABEL_41:
    *uint64_t v26 = v13;
    goto LABEL_42;
  }
  *(void *)uint64_t v13 = *v15;
  void *v15 = v13;
  *(void *)(v25 + 8 * v3) = v15;
  if (*(void *)v13)
  {
    unint64_t v27 = *(void *)(*(void *)v13 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v27 >= v9) {
        v27 %= v9;
      }
    }
    else
    {
      v27 &= v9 - 1;
    }
    uint64_t v26 = (void *)(*(void *)a1 + 8 * v27);
    goto LABEL_41;
  }
LABEL_42:
  v29[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *>>>>::reset[abi:ne180100]((uint64_t)v29);
  return v13;
}

void sub_19EA4AC74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void CoreML::NNCompiler::Backend::MIL::MILMetadataUtils::SetAttributesForFunctions(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v63 = *(void *)(a2 + 16);
  uint64_t v64 = v4;
  if (v5 != v63)
  {
    uint64_t v61 = v3;
    uint64_t v62 = a2 + 80;
    uint64_t v60 = a2;
    do
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)v3 + 64))(&v68, v3, v5);
      if (!v68)
      {
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v71);
        long long v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)"Cannot find ", 12);
        int v55 = *(char *)(v5 + 23);
        if (v55 >= 0) {
          uint64_t v56 = v5;
        }
        else {
          uint64_t v56 = *(void *)v5;
        }
        if (v55 >= 0) {
          uint64_t v57 = *(unsigned __int8 *)(v5 + 23);
        }
        else {
          uint64_t v57 = *(void *)(v5 + 8);
        }
        uint8x8_t v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, v56, v57);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)" function in translated program.", 32);
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::stringbuf::str();
        std::runtime_error::runtime_error(exception, (const std::string *)v76);
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      uint64_t v6 = (const CoreML::NNCompiler::MLFunctionInfo *)std::map<std::string,std::string>::at(v62, (void *)v5);
      CoreML::NNCompiler::Backend::MIL::MILMetadataUtils::SetInputDefaultValuesAttribute(v64, v68, (void *)v6 + 31);
      unint64_t v7 = +[MLNeuralNetworkCompiler iOS18CompilerVersionInfo];
      id v8 = *(id *)(a2 + 112);
      char v9 = [v8 olderThan:v7];

      uint8x8_t v10 = v7;
      if (v9)
      {
        uint64_t v11 = v68;
        CoreML::NNCompiler::Backend::MIL::MILMetadataUtils::GetDefaultShapes(&v71, v6);
        uint64_t v12 = (void *)*((void *)v6 + 21);
        CoreML::NNCompiler::Backend::MIL::MILMetadataUtils::GetRangeShapes((uint64_t **)v76, v6);
        CoreML::NNCompiler::Backend::MIL::MILMetadataUtils::SetFlexibleShapesAttribute(v64, v11, (unint64_t)&v71, v12, v76);
        std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>>>::destroy(*(void **)&v76[8]);
        std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::destroy(v72);
      }
      else
      {
        uint64_t v13 = (void *)*((void *)v6 + 21);
        float v66 = 0;
        uint64_t v67 = 0;
        long long v65 = &v66;
        memset(v76, 0, sizeof(v76));
        int v77 = 1065353216;
        std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__rehash<true>((uint64_t)v76, (unint64_t)(float)(unint64_t)v13[2]);
        unint64_t v16 = (uint64_t *)*v13;
        unint64_t v14 = v13 + 1;
        uint64_t v15 = v16;
        if (v16 != v14)
        {
          do
          {
            CoreML::MLNeuralNetworkUtilities::encodeConfigurationName((char *)&v74, (const void **)v15 + 4);
            uint64_t v17 = v66;
            if (v66)
            {
              long long v18 = &v66;
              do
              {
                float v19 = v18;
                float v20 = v17 + 4;
                BOOL v21 = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v17 + 4, &v74);
                if (v21) {
                  unint64_t v22 = v17 + 1;
                }
                else {
                  unint64_t v22 = v17;
                }
                if (v21) {
                  long long v18 = v19;
                }
                else {
                  long long v18 = (uint64_t **)v17;
                }
                uint64_t v17 = (uint64_t *)*v22;
              }
              while (*v22);
              if (v18 != &v66)
              {
                unint64_t v23 = v21 ? v19 + 4 : (uint64_t **)v20;
                if (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(&v74, v23))
                {
                  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v71);
                  BOOL v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)"The configuration name=", 23);
                  v70.__r_.__value_.__r.__words[0] = (std::string::size_type)&v74;
                  unint64_t v36 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v76, (unsigned __int8 *)&v74, (long long **)&v70);
                  uint64_t v39 = *((void *)v36 + 5);
                  unint64_t v37 = v36 + 40;
                  uint64_t v38 = v39;
                  int v40 = v37[23];
                  if (v40 >= 0) {
                    uint64_t v41 = (uint64_t)v37;
                  }
                  else {
                    uint64_t v41 = v38;
                  }
                  if (v40 >= 0) {
                    uint64_t v42 = v37[23];
                  }
                  else {
                    uint64_t v42 = *((void *)v37 + 1);
                  }
                  unint64_t v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, v41, v42);
                  int v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)" and the configuration name=", 28);
                  int v45 = *((char *)v15 + 55);
                  if (v45 >= 0) {
                    uint64_t v46 = (uint64_t)(v15 + 4);
                  }
                  else {
                    uint64_t v46 = v15[4];
                  }
                  if (v45 >= 0) {
                    uint64_t v47 = *((unsigned __int8 *)v15 + 55);
                  }
                  else {
                    uint64_t v47 = v15[5];
                  }
                  unint64_t v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, v46, v47);
                  double v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)" have the same encoded value=", 29);
                  if (v75 >= 0) {
                    double v50 = &v74;
                  }
                  else {
                    double v50 = (long long *)v74;
                  }
                  if (v75 >= 0) {
                    uint64_t v51 = HIBYTE(v75);
                  }
                  else {
                    uint64_t v51 = *((void *)&v74 + 1);
                  }
                  uint64_t v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)v50, v51);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)".", 1);
                  uint64_t v53 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                  std::stringbuf::str();
                  std::logic_error::logic_error(v53, &v70);
                  __cxa_throw(v53, MEMORY[0x1E4FBA328], MEMORY[0x1E4FBA1B0]);
                }
              }
            }
            size_t v24 = (uint64_t **)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__find_equal<std::string>((uint64_t)&v65, &v70, &v74);
            uint64_t v25 = *v24;
            if (!*v24)
            {
              uint64_t v26 = v24;
              uint64_t v25 = (uint64_t *)operator new(0x68uLL);
              unint64_t v71 = v25;
              unint64_t v72 = &v66;
              LOBYTE(v73[0]) = 0;
              unint64_t v27 = (std::string *)(v25 + 4);
              if (SHIBYTE(v75) < 0)
              {
                std::string::__init_copy_ctor_external(v27, (const std::string::value_type *)v74, *((std::string::size_type *)&v74 + 1));
              }
              else
              {
                *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v74;
                v25[6] = v75;
              }
              v25[7] = 0;
              v25[8] = 0;
              v25[11] = 0;
              v25[12] = 0;
              v25[9] = 0;
              v25[10] = (uint64_t)(v25 + 11);
              LOBYTE(v73[0]) = 1;
              std::string::size_type v28 = v70.__r_.__value_.__r.__words[0];
              *uint64_t v25 = 0;
              v25[1] = 0;
              v25[2] = v28;
              *uint64_t v26 = v25;
              uint64_t v29 = v25;
              if (*v65)
              {
                long long v65 = (uint64_t **)*v65;
                uint64_t v29 = *v26;
              }
              std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v66, v29);
              ++v67;
              unint64_t v71 = 0;
              std::unique_ptr<std::__tree_node<std::__value_type<std::string,Espresso::net_configuration>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,Espresso::net_configuration>,void *>>>>::reset[abi:ne180100]((uint64_t)&v71);
            }
            if (v15 != v25)
            {
              std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)(v25 + 7), (std::string *)v15[7], (long long *)v15[8], 0xAAAAAAAAAAAAAAABLL * ((v15[8] - v15[7]) >> 3));
              std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,Espresso::layer_shape>,std::__tree_node<std::__value_type<std::string,Espresso::layer_shape>,void *> *,long>>((uint64_t)(v25 + 10), (uint64_t *)v15[10], v15 + 11);
            }
            unint64_t v71 = (uint64_t *)&v74;
            char v30 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v76, (unsigned __int8 *)&v74, (long long **)&v71);
            std::string::operator=((std::string *)(v30 + 40), (const std::string *)(v15 + 4));
            unint64_t v7 = v10;
            if (SHIBYTE(v75) < 0) {
              operator delete((void *)v74);
            }
            int v31 = (uint64_t *)v15[1];
            if (v31)
            {
              do
              {
                uint64_t v32 = v31;
                int v31 = (uint64_t *)*v31;
              }
              while (v31);
            }
            else
            {
              do
              {
                uint64_t v32 = (uint64_t *)v15[2];
                BOOL v33 = *v32 == (void)v15;
                uint64_t v15 = v32;
              }
              while (!v33);
            }
            uint64_t v15 = v32;
          }
          while (v32 != v14);
        }
        std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v76);
        uint64_t v34 = v68;
        CoreML::NNCompiler::Backend::MIL::MILMetadataUtils::GetDefaultShapes(&v71, v6);
        uint64_t v3 = v61;
        CoreML::NNCompiler::Backend::MIL::MILMetadataUtils::GetRangeShapes((uint64_t **)v76, v6);
        a2 = v60;
        CoreML::NNCompiler::Backend::MIL::MILMetadataUtils::SetFlexibleShapesAttribute(v64, v34, (unint64_t)&v71, &v65, v76);
        std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>>>::destroy(*(void **)&v76[8]);
        std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::destroy(v72);
        std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::destroy(v66);
      }

      if (v69) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v69);
      }
      v5 += 24;
    }
    while (v5 != v63);
  }
}

void sub_19EA4B240(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,uint64_t a27)
{
  if (a25 < 0)
  {
    operator delete(__p);
    if ((v27 & 1) == 0)
    {
LABEL_6:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a26);
      if (*(char *)(v30 - 129) < 0) {
        operator delete(*(void **)(v30 - 152));
      }
      std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(v30 - 128);
      std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::destroy(a16);

      if (a19) {
        std::__shared_weak_count::__release_shared[abi:ne180100](a19);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v27)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v29);
  goto LABEL_6;
}

uint64_t CoreML::NNCompiler::Backend::MIL::MILMetadataUtils::SetInputDefaultValuesAttribute(uint64_t result, uint64_t a2, void *a3)
{
  if (a3[2])
  {
    MIL::IRTensorValueType::MakeScalar();
    Scalar = (MIL::IRTensorValueType *)MIL::IRTensorValueType::MakeScalar();
    long long v42 = 0u;
    long long v43 = 0u;
    float v44 = 1.0;
    unint64_t v7 = (void *)*a3;
    uint64_t v6 = a3 + 1;
    uint64_t v5 = v7;
    if (v7 != v6)
    {
      do
      {
        if (*((char *)v5 + 55) < 0) {
          std::string::__init_copy_ctor_external(&v37, (const std::string::value_type *)v5[4], v5[5]);
        }
        else {
          std::string v37 = *(std::string *)(v5 + 4);
        }
        MIL::IRTensorValueType::MakeStringValue();
        MIL::IRTensorValueType::MakeFloat32Value(&v36, Scalar, *((float *)v5 + 14));
        std::pair<std::shared_ptr<MIL::IRValue const> const,std::shared_ptr<MIL::IRValue const>>::pair[abi:ne180100]<std::unique_ptr<MIL::IRTensorValue const>,std::unique_ptr<MIL::IRTensorValue const>,0>((uint64_t *)&v39, &v38, &v36);
        unint64_t v8 = MIL::IRValueMapHasher::operator()();
        unint64_t v9 = v8;
        unint64_t v10 = *((void *)&v42 + 1);
        if (*((void *)&v42 + 1))
        {
          uint8x8_t v11 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v42 + 8));
          v11.i16[0] = vaddlv_u8(v11);
          unint64_t v12 = v11.u32[0];
          if (v11.u32[0] > 1uLL)
          {
            unint64_t v3 = v8;
            if (v8 >= *((void *)&v42 + 1)) {
              unint64_t v3 = v8 % *((void *)&v42 + 1);
            }
          }
          else
          {
            unint64_t v3 = (*((void *)&v42 + 1) - 1) & v8;
          }
          uint64_t v13 = *(void **)(v42 + 8 * v3);
          if (v13)
          {
            unint64_t v14 = (void *)*v13;
            if (*v13)
            {
              do
              {
                unint64_t v15 = v14[1];
                if (v15 == v9)
                {
                  if (MIL::IRValueMapEq::operator()()) {
                    goto LABEL_46;
                  }
                }
                else
                {
                  if (v12 > 1)
                  {
                    if (v15 >= v10) {
                      v15 %= v10;
                    }
                  }
                  else
                  {
                    v15 &= v10 - 1;
                  }
                  if (v15 != v3) {
                    break;
                  }
                }
                unint64_t v14 = (void *)*v14;
              }
              while (v14);
            }
          }
        }
        unint64_t v16 = operator new(0x30uLL);
        uint64_t v17 = v16;
        v45[0] = v16;
        v45[1] = &v43;
        void *v16 = 0;
        v16[1] = v9;
        long long v18 = v40;
        v16[2] = v39;
        v16[3] = v18;
        if (v18) {
          atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        *((_OWORD *)v16 + 2) = v41;
        long long v41 = 0uLL;
        char v46 = 1;
        float v19 = (float)(unint64_t)(*((void *)&v43 + 1) + 1);
        if (!v10 || (float)(v44 * (float)v10) < v19)
        {
          BOOL v20 = (v10 & (v10 - 1)) != 0;
          if (v10 < 3) {
            BOOL v20 = 1;
          }
          unint64_t v21 = v20 | (2 * v10);
          unint64_t v22 = vcvtps_u32_f32(v19 / v44);
          if (v21 <= v22) {
            size_t v23 = v22;
          }
          else {
            size_t v23 = v21;
          }
          std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__rehash<true>((uint64_t)&v42, v23);
          unint64_t v10 = *((void *)&v42 + 1);
          if ((*((void *)&v42 + 1) & (*((void *)&v42 + 1) - 1)) != 0)
          {
            if (v9 >= *((void *)&v42 + 1)) {
              unint64_t v3 = v9 % *((void *)&v42 + 1);
            }
            else {
              unint64_t v3 = v9;
            }
          }
          else
          {
            unint64_t v3 = (*((void *)&v42 + 1) - 1) & v9;
          }
        }
        uint64_t v24 = v42;
        uint64_t v25 = *(void **)(v42 + 8 * v3);
        if (v25)
        {
          void *v17 = *v25;
        }
        else
        {
          void *v17 = v43;
          *(void *)&long long v43 = v17;
          *(void *)(v24 + 8 * v3) = &v43;
          if (!*v17) {
            goto LABEL_45;
          }
          unint64_t v26 = *(void *)(*v17 + 8);
          if ((v10 & (v10 - 1)) != 0)
          {
            if (v26 >= v10) {
              v26 %= v10;
            }
          }
          else
          {
            v26 &= v10 - 1;
          }
          uint64_t v25 = (void *)(v42 + 8 * v26);
        }
        *uint64_t v25 = v17;
LABEL_45:
        v45[0] = 0;
        ++*((void *)&v43 + 1);
        std::unique_ptr<std::__hash_node<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v45);
LABEL_46:
        if (*((void *)&v41 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v41 + 1));
        }
        if (v40) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v40);
        }
        uint64_t v27 = v36;
        uint64_t v36 = 0;
        if (v27) {
          (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
        }
        uint64_t v28 = v38;
        uint64_t v38 = 0;
        if (v28) {
          (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
        }
        if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v37.__r_.__value_.__l.__data_);
        }
        uint64_t v29 = (void *)v5[1];
        if (v29)
        {
          do
          {
            uint64_t v30 = v29;
            uint64_t v29 = (void *)*v29;
          }
          while (v29);
        }
        else
        {
          do
          {
            uint64_t v30 = (void *)v5[2];
            BOOL v31 = *v30 == (void)v5;
            uint64_t v5 = v30;
          }
          while (!v31);
        }
        uint64_t v5 = v30;
      }
      while (v30 != v6);
    }
    MIL::IRDictionaryValueType::Make();
    MIL::IRDictionaryValueType::MakeValue();
    std::string::basic_string[abi:ne180100]<0>(&__p, "CoreML_InputDefaultValues");
    if (v39) {
      operator new();
    }
    uint64_t v39 = 0;
    MIL::IRObject::SetAttribute();
    if (v35 < 0) {
      operator delete(__p);
    }
    uint64_t v32 = v39;
    uint64_t v39 = 0;
    if (v32)
    {
      MIL::IRDictionaryValue::~IRDictionaryValue(v32);
      MEMORY[0x19F3C1920]();
    }
    return std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&v42);
  }
  return result;
}

void sub_19EA4B854(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,MIL::IRDictionaryValue *a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  std::unique_ptr<MIL::IRDictionaryValue const>::reset[abi:ne180100](&a31);
  std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a35);
  _Unwind_Resume(a1);
}

char *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, long long **a3)
{
  unint64_t v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    unint64_t v12 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      uint64_t v13 = (char *)*v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = *((void *)v13 + 1);
          if (v14 == v8)
          {
            if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)v13 + 16, a2)) {
              return v13;
            }
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9) {
                v14 %= v9;
              }
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v3) {
              break;
            }
          }
          uint64_t v13 = *(char **)v13;
        }
        while (v13);
      }
    }
  }
  unint64_t v15 = (void *)(a1 + 16);
  uint64_t v13 = (char *)operator new(0x40uLL);
  v29[0] = v13;
  v29[1] = a1 + 16;
  char v30 = 0;
  *(void *)uint64_t v13 = 0;
  *((void *)v13 + 1) = v8;
  unint64_t v16 = (std::string *)(v13 + 16);
  uint64_t v17 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v16, *(const std::string::value_type **)v17, *((void *)v17 + 1));
  }
  else
  {
    long long v18 = *v17;
    *((void *)v13 + 4) = *((void *)v17 + 2);
    *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v18;
  }
  *((void *)v13 + 5) = 0;
  *((void *)v13 + CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = 0;
  *((void *)v13 + 7) = 0;
  char v30 = 1;
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (!v9 || (float)(v20 * (float)v9) < v19)
  {
    BOOL v21 = 1;
    if (v9 >= 3) {
      BOOL v21 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v9);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      size_t v24 = v23;
    }
    else {
      size_t v24 = v22;
    }
    std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__rehash<true>(a1, v24);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v25 = *(void *)a1;
  unint64_t v26 = *(void **)(*(void *)a1 + 8 * v3);
  if (v26)
  {
    *(void *)uint64_t v13 = *v26;
LABEL_41:
    *unint64_t v26 = v13;
    goto LABEL_42;
  }
  *(void *)uint64_t v13 = *v15;
  void *v15 = v13;
  *(void *)(v25 + 8 * v3) = v15;
  if (*(void *)v13)
  {
    unint64_t v27 = *(void *)(*(void *)v13 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v27 >= v9) {
        v27 %= v9;
      }
    }
    else
    {
      v27 &= v9 - 1;
    }
    unint64_t v26 = (void *)(*(void *)a1 + 8 * v27);
    goto LABEL_41;
  }
LABEL_42:
  v29[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v29);
  return v13;
}

void sub_19EA4BBBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *CoreML::NNCompiler::Backend::MIL::MILMetadataUtils::GetDefaultShapes(uint64_t **this, const CoreML::NNCompiler::MLFunctionInfo *a2)
{
  BOOL result = (void *)std::map<std::string,std::vector<int>>::map[abi:ne180100]((uint64_t)this, (void *)a2 + 6);
  uint64_t v5 = (char *)*((void *)a2 + 15);
  uint64_t v6 = (char *)a2 + 128;
  if (v5 != v6)
  {
    unint64_t v7 = this + 1;
    do
    {
      BOOL result = std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::vector<int>> const&>(this, v7, (void *)v5 + 4, (uint64_t)(v5 + 32));
      unint64_t v8 = (void *)result[1];
      if (v8)
      {
        do
        {
          unint64_t v7 = v8;
          unint64_t v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          unint64_t v7 = (void *)result[2];
          BOOL v9 = *v7 == (void)result;
          BOOL result = v7;
        }
        while (!v9);
      }
      uint8x8_t v10 = (char *)*((void *)v5 + 1);
      if (v10)
      {
        do
        {
          unint64_t v11 = v10;
          uint8x8_t v10 = *(char **)v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          unint64_t v11 = (char *)*((void *)v5 + 2);
          BOOL v9 = *(void *)v11 == (void)v5;
          uint64_t v5 = v11;
        }
        while (!v9);
      }
      uint64_t v5 = v11;
    }
    while (v11 != v6);
  }
  return result;
}

void sub_19EA4BC94(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

uint64_t CoreML::NNCompiler::Backend::MIL::MILMetadataUtils::GetRangeShapes(uint64_t **this, const CoreML::NNCompiler::MLFunctionInfo *a2)
{
  uint64_t result = std::map<std::string,CoreML::NNCompiler::MLRangeShape>::map[abi:ne180100]((uint64_t)this, (void *)a2 + 9);
  uint64_t v5 = (char *)*((void *)a2 + 18);
  uint64_t v6 = (char *)a2 + 152;
  if (v5 != v6)
  {
    unint64_t v7 = (uint64_t *)(this + 1);
    do
    {
      uint64_t result = (uint64_t)std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,CoreML::NNCompiler::MLRangeShape> const&>(this, v7, (void *)v5 + 4, (uint64_t)(v5 + 32));
      unint64_t v8 = *(uint64_t **)(result + 8);
      if (v8)
      {
        do
        {
          unint64_t v7 = v8;
          unint64_t v8 = (uint64_t *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          unint64_t v7 = *(uint64_t **)(result + 16);
          BOOL v9 = *v7 == result;
          uint64_t result = (uint64_t)v7;
        }
        while (!v9);
      }
      uint8x8_t v10 = (char *)*((void *)v5 + 1);
      if (v10)
      {
        do
        {
          unint64_t v11 = v10;
          uint8x8_t v10 = *(char **)v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          unint64_t v11 = (char *)*((void *)v5 + 2);
          BOOL v9 = *(void *)v11 == (void)v5;
          uint64_t v5 = v11;
        }
        while (!v9);
      }
      uint64_t v5 = v11;
    }
    while (v11 != v6);
  }
  return result;
}

void sub_19EA4BD68(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::shared_ptr<MIL::IRValue const> const,std::shared_ptr<MIL::IRValue const>>::~pair(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

void std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_19EA4C348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17, uint64_t a18, uint64_t a19, void *a20)
{
  _Unwind_Resume(a1);
}

void sub_19EA4C528(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA4C994(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v2, 0x1012C40EC159624);

  _Unwind_Resume(a1);
}

void sub_19EA4CB88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_19EA4CE38(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v2, 0x1081C40622C3295);

  _Unwind_Resume(a1);
}

void sub_19EA4D024(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  MEMORY[0x19F3C1920](v3, 0x1081C40622C3295);

  _Unwind_Resume(a1);
}

void sub_19EA4D1C4(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  MEMORY[0x19F3C1920](v3, 0x1081C40622C3295);

  _Unwind_Resume(a1);
}

void sub_19EA4D400(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA4D5EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA4D6D8(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v2, 0x10A1C40BFDB1307);

  _Unwind_Resume(a1);
}

void sub_19EA4DB88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  _Unwind_Resume(a1);
}

void sub_19EA4E40C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *___ZL30getXGBoosterSaveModelSymbolLocv_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)XGBoostFrameworkLibrary();
  uint64_t result = dlsym(v2, "XGBoosterSaveModel");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getXGBoosterSaveModelSymbolLoc(void)::ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t XGBoostFrameworkLibrary()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  if (!XGBoostFrameworkLibraryCore(char **)::frameworkLibrary)
  {
    v3[1] = MEMORY[0x1E4F143A8];
    v3[2] = 3221225472;
    v3[3] = ___ZL27XGBoostFrameworkLibraryCorePPc_block_invoke_25694;
    v3[4] = &__block_descriptor_40_e5_v8__0l;
    v3[5] = v3;
    long long v4 = xmmword_1E59A51C0;
    uint64_t v5 = 0;
    XGBoostFrameworkLibraryCore(char **)::frameworkLibrary = _sl_dlopen();
    uint64_t v1 = (void *)v3[0];
    uint64_t v0 = XGBoostFrameworkLibraryCore(char **)::frameworkLibrary;
    if (XGBoostFrameworkLibraryCore(char **)::frameworkLibrary)
    {
      if (!v3[0]) {
        return v0;
      }
    }
    else
    {
      uint64_t v1 = (void *)abort_report_np();
    }
    free(v1);
    return v0;
  }
  return XGBoostFrameworkLibraryCore(char **)::frameworkLibrary;
}

uint64_t ___ZL27XGBoostFrameworkLibraryCorePPc_block_invoke_25694()
{
  uint64_t result = _sl_dlopen();
  XGBoostFrameworkLibraryCore(char **)::frameworkLibrary = result;
  return result;
}

void sub_19EA4E744(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA4EBA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t softLink_XGBoosterSetParam(void *a1, const char *a2, const char *a3)
{
  uint64_t v10 = 0;
  unint64_t v11 = &v10;
  uint64_t v12 = 0x2020000000;
  uint64_t v6 = (uint64_t (*)(void *, const char *, const char *))getXGBoosterSetParamSymbolLoc(void)::ptr;
  uint64_t v13 = getXGBoosterSetParamSymbolLoc(void)::ptr;
  if (!getXGBoosterSetParamSymbolLoc(void)::ptr)
  {
    unint64_t v7 = (void *)XGBoostFrameworkLibrary();
    v11[3] = (uint64_t)dlsym(v7, "XGBoosterSetParam");
    getXGBoosterSetParamSymbolLoc(void)::ptr = (_UNKNOWN *)v11[3];
    uint64_t v6 = (uint64_t (*)(void *, const char *, const char *))v11[3];
  }
  _Block_object_dispose(&v10, 8);
  if (!v6)
  {
    dlerror();
    BOOL v9 = (_Unwind_Exception *)abort_report_np();
    _Block_object_dispose(&v10, 8);
    _Unwind_Resume(v9);
  }
  return v6(a1, a2, a3);
}

void *___ZL29getXGBoosterSetParamSymbolLocv_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)XGBoostFrameworkLibrary();
  uint64_t result = dlsym(v2, "XGBoosterSetParam");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getXGBoosterSetParamSymbolLoc(void)::ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_19EA4F5A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);

  XGBoostDataFormat::~XGBoostDataFormat((XGBoostDataFormat *)va);
  _Unwind_Resume(a1);
}

void *___ZL34getXGDMatrixCreateFromMatSymbolLocv_block_invoke_25738(uint64_t a1)
{
  uint64_t v2 = (void *)XGBoostFrameworkLibrary();
  uint64_t result = dlsym(v2, "XGDMatrixCreateFromMat");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getXGDMatrixCreateFromMatSymbolLoc(void)::ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *___ZL33getXGDMatrixSetFloatInfoSymbolLocv_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)XGBoostFrameworkLibrary();
  uint64_t result = dlsym(v2, "XGDMatrixSetFloatInfo");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getXGDMatrixSetFloatInfoSymbolLoc(void)::ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *___ZL27getXGBoosterCreateSymbolLocv_block_invoke_25742(uint64_t a1)
{
  uint64_t v2 = (void *)XGBoostFrameworkLibrary();
  uint64_t result = dlsym(v2, "XGBoosterCreate");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getXGBoosterCreateSymbolLoc(void)::ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t softLink_XGDMatrixFree(uint64_t a1)
{
  uint64_t v6 = 0;
  unint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  uint64_t v2 = (uint64_t (*)(uint64_t))getXGDMatrixFreeSymbolLoc(void)::ptr;
  BOOL v9 = getXGDMatrixFreeSymbolLoc(void)::ptr;
  if (!getXGDMatrixFreeSymbolLoc(void)::ptr)
  {
    uint64_t v3 = (void *)XGBoostFrameworkLibrary();
    v7[3] = (uint64_t)dlsym(v3, "XGDMatrixFree");
    getXGDMatrixFreeSymbolLoc(void)::ptr = (_UNKNOWN *)v7[3];
    uint64_t v2 = (uint64_t (*)(uint64_t))v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (!v2)
  {
    dlerror();
    uint64_t v5 = (_Unwind_Exception *)abort_report_np();
    _Block_object_dispose(&v6, 8);
    _Unwind_Resume(v5);
  }
  return v2(a1);
}

void *___ZL34getXGBoosterUpdateOneIterSymbolLocv_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)XGBoostFrameworkLibrary();
  uint64_t result = dlsym(v2, "XGBoosterUpdateOneIter");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getXGBoosterUpdateOneIterSymbolLoc(void)::ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *___ZL25getXGDMatrixFreeSymbolLocv_block_invoke_25755(uint64_t a1)
{
  uint64_t v2 = (void *)XGBoostFrameworkLibrary();
  uint64_t result = dlsym(v2, "XGDMatrixFree");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getXGDMatrixFreeSymbolLoc(void)::ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_19EA4FA5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19EA4FAC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA504DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  CoreML::Specification::StringParameter::~StringParameter((CoreML::Specification::StringParameter *)&a18);
  _Unwind_Resume(a1);
}

void sub_19EA50C6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  _MLModelInputArchiver::~_MLModelInputArchiver((_MLModelInputArchiver *)(v31 - 120));

  _Unwind_Resume(a1);
}

void sub_19EA50EA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA51198(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA512B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__16(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__17(uint64_t a1)
{
}

void sub_19EA51760(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA531B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, void *a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,void *a42)
{
  _Unwind_Resume(a1);
}

void anonymous namespace'::findProgramFunctionInLibrary(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = e5rt_program_library_retain_program_function();
  if (v7)
  {
    uint64_t v8 = +[MLLogging coreChannel];
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315394;
      uint64_t last_error_message = e5rt_get_last_error_message();
      __int16 v12 = 1024;
      int v13 = v7;
      _os_log_error_impl(&dword_19E58B000, v8, OS_LOG_TYPE_ERROR, "E5RT: %s (%d)", buf, 0x12u);
    }

    if (a4)
    {
      BOOL v9 = +[MLModelErrorUtils genericErrorWithFormat:@"E5RT: %s (%d)", e5rt_get_last_error_message(), v7];
      *a4 = +[MLModelErrorUtils errorWithCode:0, v9, @"ML Program doesn't have the requested function named %s.", a3 underlyingError format];
    }
  }
  *a1 = 0;
}

void sub_19EA53960(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<e5rt_program_function,MLE5ObjectDeleter<e5rt_program_function>>::reset[abi:ne180100](uint64_t *result)
{
  uint64_t v1 = *result;
  void *result = 0;
  if (v1) {
    return (uint64_t *)e5rt_program_function_release();
  }
  return result;
}

void sub_19EA53BC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26)
{
  _Block_object_dispose(&a21, 8);
  _Block_object_dispose((const void *)(v30 - 112), 8);

  _Unwind_Resume(a1);
}

void sub_19EA53DB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA53F34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Block_object_dispose(&a17, 8);

  _Block_object_dispose((const void *)(v22 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_19EA540EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA54298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);

  _Block_object_dispose((const void *)(v25 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_19EA54BC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);

  std::unique_ptr<e5rt_program_function,MLE5ObjectDeleter<e5rt_program_function>>::reset[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<e5rt_compute_gpu_device,MLE5ObjectDeleter<e5rt_compute_gpu_device>>::reset[abi:ne180100](uint64_t *result)
{
  uint64_t v1 = *result;
  void *result = 0;
  if (v1) {
    return (uint64_t *)e5rt_compute_gpu_device_release();
  }
  return result;
}

uint64_t *std::unique_ptr<e5rt_precompiled_compute_op_create_options,MLE5ObjectDeleter<e5rt_precompiled_compute_op_create_options>>::reset[abi:ne180100](uint64_t *result)
{
  uint64_t v1 = *result;
  void *result = 0;
  if (v1) {
    return (uint64_t *)e5rt_precompiled_compute_op_create_options_release();
  }
  return result;
}

void sub_19EA54E14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__26116(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[3];
  a1[3] = result;
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  return result;
}

void __Block_byref_object_dispose__26117(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 56);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void sub_19EA551DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_19EA5580C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void (**a14)(void), uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  a14[2]();
  _Unwind_Resume(a1);
}

void sub_19EA55D4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_19EA55FD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA56B28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void sub_19EA56E38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  v11[2](v11);
  _Unwind_Resume(a1);
}

void sub_19EA57118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_19EA57264(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA57384(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA57634(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA57E54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA57F18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA580A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA581A8(_Unwind_Exception *a1)
{
  uint64_t v5 = v3;

  _Unwind_Resume(a1);
}

void sub_19EA5825C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA583C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA58480(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA58500(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA58570(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA58640(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19EA5875C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA588F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA58A74(_Unwind_Exception *a1)
{
  uint64_t v5 = v4;

  _Unwind_Resume(a1);
}

void sub_19EA58C1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_19EA58D80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA58E0C(_Unwind_Exception *a1)
{
  long long v4 = v3;

  _Unwind_Resume(a1);
}

void sub_19EA59180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void sub_19EA5941C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  uint64_t v17 = v16;

  _Unwind_Resume(a1);
}

void sub_19EA5954C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA59658(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA59754(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA59924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_19EA59B00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA59BBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA5A060(_Unwind_Exception *a1)
{
  *(void *)(v4 - 9CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = v3;
  std::vector<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v4 - 96));
  *(void *)(v4 - 9CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = v4 - 144;
  std::vector<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v4 - 96));

  _Unwind_Resume(a1);
}

void sub_19EA5A398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_19EA5A7A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);

  v14[2](v14);
  ElapsedTimeRecorder::~ElapsedTimeRecorder((id *)va);

  _Unwind_Resume(a1);
}

void sub_19EA5A910(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)MLAppleWordEmbedding;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_19EA5AB50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA5B6F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,std::__shared_weak_count *a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  if (a44) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a44);
  }

  _Unwind_Resume(a1);
}

void sub_19EA5BE78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  CoreML::Specification::CoreMLModels::WordEmbedding::~WordEmbedding((CoreML::Specification::CoreMLModels::WordEmbedding *)&a15);
  _Unwind_Resume(a1);
}

void sub_19EA5C0E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19EA5C22C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19EA5C368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19EA5C4F4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_19EA5C648(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19EA5CCC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void (**a10)(void), void *a11, void *a12, void *a13, void *a14)
{
  a10[2]();
  _Unwind_Resume(a1);
}

void sub_19EA5D0E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_19EA5D43C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CoreML::NNCompiler::Backend::MIL::NameStore::AddVarNameUsed(uint64_t a1, uint64_t a2)
{
  unint64_t v5 = std::__string_hash<char>::operator()[abi:ne180100](a2);
  unint64_t v6 = v5;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    unint64_t v9 = v8.u32[0];
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v2 = v5;
      if (v5 >= v7) {
        unint64_t v2 = v5 % v7;
      }
    }
    else
    {
      unint64_t v2 = (v7 - 1) & v5;
    }
    uint64_t v10 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v2);
    if (v10)
    {
      for (std::vector<int>::pointer i = *v10; i; std::vector<int>::pointer i = *(unsigned __int8 **)i)
      {
        unint64_t v12 = *((void *)i + 1);
        if (v12 == v6)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, (unsigned __int8 *)a2))
          {
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::operator+<char>();
            uint64_t v25 = std::string::append(&v27, " shadowed.");
            long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
            v28.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v26;
            v25->__r_.__value_.__l.__size_ = 0;
            v25->__r_.__value_.__r.__words[2] = 0;
            v25->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(exception, &v28);
            __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
        }
        else
        {
          if (v9 > 1)
          {
            if (v12 >= v7) {
              v12 %= v7;
            }
          }
          else
          {
            v12 &= v7 - 1;
          }
          if (v12 != v2) {
            break;
          }
        }
      }
    }
  }
  int v13 = operator new(0x30uLL);
  void *v13 = 0;
  v13[1] = v6;
  *((_OWORD *)v13 + 1) = *(_OWORD *)a2;
  uint64_t v14 = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 1CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = 0;
  v13[4] = v14;
  v13[5] = 0;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v7 || (float)(v16 * (float)v7) < v15)
  {
    BOOL v17 = 1;
    if (v7 >= 3) {
      BOOL v17 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v7);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__rehash<true>(a1, v20);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v2 = v6 % v7;
      }
      else {
        unint64_t v2 = v6;
      }
    }
    else
    {
      unint64_t v2 = (v7 - 1) & v6;
    }
  }
  uint64_t v21 = *(void *)a1;
  uint64_t v22 = *(void **)(*(void *)a1 + 8 * v2);
  if (v22)
  {
    void *v13 = *v22;
LABEL_38:
    *uint64_t v22 = v13;
    goto LABEL_39;
  }
  void *v13 = *(void *)(a1 + 16);
  *(void *)(a1 + 1CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = v13;
  *(void *)(v21 + 8 * v2) = a1 + 16;
  if (*v13)
  {
    unint64_t v23 = *(void *)(*v13 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v23 >= v7) {
        v23 %= v7;
      }
    }
    else
    {
      v23 &= v7 - 1;
    }
    uint64_t v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
}

void sub_19EA5D774(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,int>,void *>>>::operator()[abi:ne180100](1, v21);
  _Unwind_Resume(a1);
}

void sub_19EA5DE14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  v12[2](v12);
  _Unwind_Resume(a1);
}

void sub_19EA5E01C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA5E360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p)
{
  CoreML::Specification::Scaler::~Scaler((CoreML::Specification::Scaler *)&a9);
  _Unwind_Resume(a1);
}

void sub_19EA5E4BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA5E56C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA5E6B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA5E8E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA5ED54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA5EE1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA5EF40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA5F218(_Unwind_Exception *a1)
{
  v3[2](v3);
  _Unwind_Resume(a1);
}

void sub_19EA5F634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_19EA5F7CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA5F8EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA5FB68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_19EA5FFB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  _Unwind_Resume(a1);
}

void std::default_delete<_MLModelInputArchiver>::operator()[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<std::string,IArchive>,std::__map_value_compare<std::string,std::__value_type<std::string,IArchive>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,IArchive>>>::destroy(*(char **)(a1 + 24));
  unint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  JUMPOUT(0x19F3C1920);
}

void sub_19EA60480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  *(void *)(v14 - 72) = v13;
  std::vector<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(void *)(v14 - 72) = &a13;
  std::vector<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void sub_19EA60550(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA606F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  MEMORY[0x19F3C1920](v17, 0x1020C40DBF2485DLL);
  _MLModelInputArchiver::~_MLModelInputArchiver((_MLModelInputArchiver *)&a15);
  if (a14 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_19EA60A04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA60AD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA60DF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  if (__p) {
    operator delete(__p);
  }
  if (a18) {
    operator delete(a18);
  }
  if (a21) {
    operator delete(a21);
  }
  pthread_rwlock_unlock(v23);
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }

  _Unwind_Resume(a1);
}

void sub_19EA6106C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA61504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28)
{
  uint64_t v34 = *(void **)(v32 - 192);
  if (v34) {
    operator delete(v34);
  }
  char v35 = *(void **)(v32 - 168);
  if (v35) {
    operator delete(v35);
  }
  pthread_rwlock_unlock(v31);
  if (a21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a21);
  }
  v30[2](v30);

  ElapsedTimeRecorder::~ElapsedTimeRecorder(&a28);
  _Unwind_Resume(a1);
}

void sub_19EA6167C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA61864(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA61CA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, id a12)
{
  std::__shared_weak_count::~__shared_weak_count(v18);
  operator delete(v20);

  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<CoreML::BayesianProbitRegression::FeatureValues>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF0DD7D8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x19F3C1920);
}

void std::__shared_ptr_emplace<CoreML::BayesianProbitRegression::FeatureValues>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF0DD7D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_19EA61F68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA62240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t _ZNSt3__115allocate_sharedB8ne180100IN6CoreML24BayesianProbitRegression24BayesianProbitRegressionENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(void *a1)
{
  unint64_t v2 = (char *)operator new(0x138uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)unint64_t v2 = &unk_1EF0DD810;
  *((void *)v2 + 3) = 0;
  *((_OWORD *)v2 + 2) = 0u;
  *((_OWORD *)v2 + 3) = 0u;
  *((_DWORD *)v2 + 1CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = 1065353216;
  *(_OWORD *)(v2 + 72) = xmmword_19EC7B880;
  *(_OWORD *)(v2 + 88) = xmmword_19EC7B880;
  uint64_t result = pthread_rwlock_init((pthread_rwlock_t *)(v2 + 112), 0);
  *a1 = v2 + 24;
  a1[1] = v2;
  return result;
}

void sub_19EA62320(_Unwind_Exception *a1)
{
  std::__hash_table<MIL::Builder::Variable const*,std::hash<MIL::Builder::Variable const*>,std::equal_to<MIL::Builder::Variable const*>,std::allocator<MIL::Builder::Variable const*>>::~__hash_table(v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<CoreML::BayesianProbitRegression::BayesianProbitRegression>::__on_zero_shared(uint64_t a1)
{
  pthread_rwlock_destroy((pthread_rwlock_t *)(a1 + 112));

  return std::__hash_table<MIL::Builder::Variable const*,std::hash<MIL::Builder::Variable const*>,std::equal_to<MIL::Builder::Variable const*>,std::allocator<MIL::Builder::Variable const*>>::~__hash_table(a1 + 32);
}

void std::__shared_ptr_emplace<CoreML::BayesianProbitRegression::BayesianProbitRegression>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF0DD810;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x19F3C1920);
}

void std::__shared_ptr_emplace<CoreML::BayesianProbitRegression::BayesianProbitRegression>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF0DD810;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_19EA627FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }

  _Unwind_Resume(a1);
}

id getString(uint64_t *a1)
{
  if (*((char *)a1 + 23) < 0)
  {
    uint64_t v1 = (unsigned char *)*a1;
    uint64_t v2 = a1[1];
    if (v2) {
      BOOL v3 = v1 == 0;
    }
    else {
      BOOL v3 = 1;
    }
    if (v3) {
      goto LABEL_17;
    }
  }
  else
  {
    if (!*((unsigned char *)a1 + 23)) {
      goto LABEL_17;
    }
    uint64_t v1 = a1;
    uint64_t v2 = *((unsigned __int8 *)a1 + 23);
  }
  uint64_t v4 = v1;
  while (*v4 == 32)
  {
    ++v4;
    if (!--v2) {
      goto LABEL_17;
    }
  }
  if (v4 - v1 != -1)
  {
    if (*((char *)a1 + 23) >= 0) {
      unint64_t v5 = a1;
    }
    else {
      unint64_t v5 = (uint64_t *)*a1;
    }
    unint64_t v6 = [NSString stringWithUTF8String:v5];
    goto LABEL_18;
  }
LABEL_17:
  unint64_t v6 = 0;
LABEL_18:

  return v6;
}

void sub_19EA629E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA62A94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA630C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  MEMORY[0x19F3C1920](v17, 0x10A1C4092A090F6);
  _Unwind_Resume(a1);
}

void sub_19EA6326C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA63330(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA633B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA6344C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t Archiver::_MemoryStreamBuf::overflow(Archiver::_MemoryStreamBuf *this, uint64_t a2)
{
  if (a2 != -1)
  {
    char v4 = a2;
    (*(void (**)(Archiver::_MemoryStreamBuf *, char *, uint64_t))(*(void *)this + 96))(this, &v4, 1);
  }
  return a2;
}

uint64_t Archiver::_MemoryStreamBuf::pbackfail(Archiver::_MemoryStreamBuf *this, uint64_t a2)
{
  uint64_t v2 = *((void *)this + 3);
  if (*((void *)this + 2) == v2 || a2 != -1 && *(char *)(v2 - 1) != a2) {
    return 0xFFFFFFFFLL;
  }
  *((void *)this + 3) = v2 - 1;
  return a2;
}

uint64_t Archiver::_MemoryStreamBuf::uflow(Archiver::_MemoryStreamBuf *this)
{
  uint64_t v1 = (unsigned __int8 *)*((void *)this + 3);
  if (v1 == *((unsigned __int8 **)this + 4)) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = *v1;
  *((void *)this + 3) = v1 + 1;
  return result;
}

uint64_t Archiver::_MemoryStreamBuf::underflow(Archiver::_MemoryStreamBuf *this)
{
  uint64_t v1 = (unsigned __int8 *)*((void *)this + 3);
  if (v1 == *((unsigned __int8 **)this + 4)) {
    return 0xFFFFFFFFLL;
  }
  else {
    return *v1;
  }
}

uint64_t Archiver::_MemoryStreamBuf::showmanyc(Archiver::_MemoryStreamBuf *this)
{
  return *((void *)this + 4) - *((void *)this + 3);
}

uint64_t Archiver::_MemoryStreamBuf::seekpos(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, void, void, uint64_t))(*(void *)a1 + 32))(a1, *(void *)(a2 + 128), 0, a3);
}

double Archiver::_MemoryStreamBuf::seekoff@<D0>(Archiver::_MemoryStreamBuf *this@<X0>, std::ios_base::seekdir a2@<W2>, uint64_t a3@<X1>, int a4@<W3>, uint64_t a5@<X8>)
{
  int v7 = *((_DWORD *)this + 16) & a4;
  if ((v7 & 0x10) == 0)
  {
    if ((v7 & 8) != 0)
    {
      uint64_t v8 = *((void *)this + 2);
      uint64_t v9 = *((void *)this + 4) - v8;
      switch(a2)
      {
        case beg:
LABEL_17:
          uint64_t v12 = -1;
          if ((a3 & 0x8000000000000000) == 0 && a3 < v9)
          {
            *((void *)this + 3) = v8 + a3;
            uint64_t v12 = a3;
          }
          goto LABEL_20;
        case end:
          a3 += v9;
          goto LABEL_17;
        case cur:
          a3 = a3 - v8 + *((void *)this + 3);
          goto LABEL_17;
      }
    }
LABEL_11:
    uint64_t v12 = -1;
    goto LABEL_20;
  }
  uint64_t v10 = *((void *)this + 5);
  uint64_t v11 = *((void *)this + 7) - v10;
  if (a2)
  {
    if (a2 == end)
    {
      a3 += v11;
    }
    else
    {
      if (a2 != cur) {
        goto LABEL_11;
      }
      a3 = a3 - v10 + *((void *)this + 6);
    }
  }
  uint64_t v12 = -1;
  if ((a3 & 0x8000000000000000) == 0 && a3 <= v11)
  {
    *((void *)this + CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = v10;
    Archiver::_MemoryStreamBuf::safe_pbump((uint64_t)this, a3);
    uint64_t v12 = *((void *)this + 6) - *((void *)this + 5);
  }
LABEL_20:
  double result = 0.0;
  *(_OWORD *)(a5 + 9CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = 0u;
  *(_OWORD *)(a5 + 112) = 0u;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_OWORD *)(a5 + 80) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 1CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = 0u;
  *(void *)(a5 + 128) = v12;
  return result;
}

uint64_t Archiver::_MemoryStreamBuf::safe_pbump(uint64_t this, uint64_t a2)
{
  if ((a2 & 0x8000000000000000) == 0)
  {
    if (!((unint64_t)a2 >> 31)) {
      goto LABEL_11;
    }
    uint64_t v2 = 4294967294;
    if (a2 < 4294967294) {
      uint64_t v2 = a2;
    }
    unint64_t v3 = 0x7FFFFFFF * ((a2 - v2 + 2147483646) / 0x7FFFFFFFuLL);
    uint64_t v4 = v3 + *(void *)(this + 48) + 0x7FFFFFFFLL;
    unint64_t v5 = a2 - v3;
    uint64_t v6 = -2147483647;
LABEL_10:
    a2 = v5 + v6;
    *(void *)(this + 48) = v4;
LABEL_11:
    if (!a2) {
      return this;
    }
    goto LABEL_12;
  }
  if ((unint64_t)a2 <= 0xFFFFFFFF7FFFFFFFLL)
  {
    unint64_t v7 = 0xFFFFFFFF00000000;
    if (a2 > (uint64_t)0xFFFFFFFF00000000) {
      unint64_t v7 = a2;
    }
    unint64_t v5 = (v7 - a2 + 0x7FFFFFFF) & 0xFFFFFFFF80000000;
    uint64_t v4 = *(void *)(this + 48) - v5 - 0x80000000;
    uint64_t v6 = a2 + 0x80000000;
    goto LABEL_10;
  }
LABEL_12:
  *(void *)(this + 48) += (int)a2;
  return this;
}

uint64_t Archiver::_MemoryIStreamBuf::xsgetn(Archiver::_MemoryIStreamBuf *this, char *a2, uint64_t a3)
{
  uint64_t v3 = *((void *)this + 3);
  if (*((void *)this + 4) - v3 >= a3) {
    uint64_t v4 = a3;
  }
  else {
    uint64_t v4 = *((void *)this + 4) - v3;
  }
  if (v4 < 1) {
    return 0;
  }
  uint64_t v6 = v3 - *((void *)this + 2);
  objc_msgSend(*((id *)this + 9), "getBytes:range:", a2, v6, v4);
  uint64_t v7 = [*((id *)this + 9) bytes];
  uint64_t v8 = [*((id *)this + 9) length];
  *((void *)this + 2) = v7;
  *((void *)this + 3) = v7 + v6 + v4;
  *((void *)this + 4) = v7 + v8;
  return v4;
}

void Archiver::_MemoryIStreamBuf::~_MemoryIStreamBuf(id *this)
{
  std::streambuf::~streambuf();

  JUMPOUT(0x19F3C1920);
}

{
  uint64_t vars8;

  std::streambuf::~streambuf();
}

uint64_t Archiver::_MemoryOStreamBuf::xsputn(Archiver::_MemoryOStreamBuf *this, const char *a2, uint64_t a3)
{
  if (a3 < 1) {
    return 0;
  }
  uint64_t v3 = a3;
  uint64_t v5 = *((void *)this + 6) - *((void *)this + 5);
  objc_msgSend(*((id *)this + 9), "replaceBytesInRange:withBytes:", v5, a3, a2);
  uint64_t v6 = [*((id *)this + 9) bytes];
  uint64_t v7 = [*((id *)this + 9) length];
  *((void *)this + 5) = v6;
  *((void *)this + CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = v6;
  *((void *)this + 7) = v6 + v7;
  Archiver::_MemoryStreamBuf::safe_pbump((uint64_t)this, v5 + v3);
  return v3;
}

void Archiver::_MemoryOStreamBuf::~_MemoryOStreamBuf(id *this)
{
  std::streambuf::~streambuf();

  JUMPOUT(0x19F3C1920);
}

{
  uint64_t vars8;

  std::streambuf::~streambuf();
}

Archiver::_MemoryIStream *Archiver::_MemoryIStream::_MemoryIStream(Archiver::_MemoryIStream *this, NSData *a2)
{
  uint64_t v3 = a2;
  *(void *)this = &unk_1EF0CAA88;
  *((void *)this + 1) = 0;
  *((void *)this + 12) = &unk_1EF0CAAB0;
  std::ios_base::init((std::ios_base *)((char *)this + 96), 0);
  *((void *)this + 29) = 0;
  *((_DWORD *)this + 60) = -1;
  *(void *)this = off_1EF0DCB18;
  *((void *)this + 12) = off_1EF0DCB40;
  uint64_t v4 = v3;
  std::streambuf::basic_streambuf();
  *((_DWORD *)this + CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 20) = 12;
  *((void *)this + 2) = &unk_1EF0DCC08;
  uint64_t v5 = v4;
  *((void *)this + 11) = v5;
  uint64_t v6 = [(NSData *)v5 bytes];
  uint64_t v7 = [(NSData *)v5 length];
  *((void *)this + 4) = v6;
  *((void *)this + 5) = v6;
  *((void *)this + CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = v6 + v7;

  *((void *)this + 17) = (char *)this + 16;
  std::ios_base::clear((std::ios_base *)((char *)this + 96), 0);

  return this;
}

void sub_19EA63AB4(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x19F3C1850](v2);

  _Unwind_Resume(a1);
}

void sub_19EA63BC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA63DA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_19EA63ECC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_19EA641DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  _Unwind_Resume(a1);
}

void sub_19EA64398(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA645A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA646C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);

  _Block_object_dispose((const void *)(v20 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__28162(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__28163(uint64_t a1)
{
}

void sub_19EA6479C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19EA648C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA64998(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA64A48(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_19EA64AAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA64B50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA64BF4(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_19EA64C80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA64D08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA64E3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

objc_object *LabelIndexMapFromSharedKeySet(objc_object *a1)
{
  uint64_t v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0) {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"sharedKeySet must be created with +[MLProbabilityDictionary sharedKeySetForKeys:]."];
  }

  return v1;
}

void sub_19EA64EF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA64FB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA65100(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA65268(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA652D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA65348(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19EA653C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19EA65430(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19EA6548C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19EA6551C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19EA655A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA656AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA65870(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA6590C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA659D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA65A94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void CoreML::NNCompiler::Backend::NeuralNetwork::UpdatableNeuralNetworkEspressoNetBackend::Compile(CoreML::NNCompiler::Backend::NeuralNetwork::UpdatableNeuralNetworkEspressoNetBackend *this, OArchive *a2)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  if ((*(unsigned int (**)(void))(**((void **)a2 + 1) + 48))(*((void *)a2 + 1)) == 1)
  {
    uint64_t v9 = +[MLLogging coreChannel];
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p) = 0;
      _os_log_error_impl(&dword_19E58B000, v9, OS_LOG_TYPE_ERROR, "UpdatableNeuralNetworkEspressoNetBackend doesn't support in-memory compilation.", (uint8_t *)&__p, 2u);
    }

    uint64_t v10 = (void *)MEMORY[0x1E4F28C58];
    uint64_t v27 = *MEMORY[0x1E4F28568];
    uint64_t v11 = [NSString stringWithFormat:@"UpdatableNeuralNetworkEspressoNetBackend doesn't support in-memory compilation."];
    std::string v28 = v11;
    uint64_t v12 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v28 forKeys:&v27 count:1];
    uint64_t v13 = [v10 errorWithDomain:@"com.apple.CoreML" code:3 userInfo:v12];

    exception = (CoreML::MLModelException *)__cxa_allocate_exception(0x28uLL);
    CoreML::MLModelException::MLModelException(exception, v13);
  }
  CoreML::NNCompiler::Backend::NeuralNetwork::NeuralNetworkEspressoNetBackend::Compile(this, a2);
  uint64_t v4 = *((void *)this + 3);
  uint64_t v5 = (google::protobuf::MessageLite *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 56))(v4);
  std::string::basic_string[abi:ne180100]<0>(v23, "NetworkUpdateParameters");
  std::string::basic_string[abi:ne180100]<0>(&__p, "updateParameters");
  uint64_t v6 = OArchive::nestedArchive((char *)a2, (uint64_t)&__p);
  if (SHIBYTE(v33) < 0) {
    operator delete(__p);
  }
  (*(void (**)(void))(**((void **)v6 + 1) + 56))(*((void *)v6 + 1));
  uint64_t v7 = OArchive::nestedArchive(v6, (uint64_t)v23);
  (*(void (**)(void))(**((void **)v7 + 1) + 56))(*((void *)v7 + 1));
  uint64_t v8 = (*(uint64_t (**)(void))(**((void **)v7 + 1) + 56))(*((void *)v7 + 1));
  std::string __p = &unk_1EF0DB360;
  uint64_t v32 = &unk_1EF0DB338;
  uint64_t v33 = v8;
  uint64_t v34 = &unk_1EF0DB3E8;
  char v35 = &v32;
  __int16 v36 = 0;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  uint64_t v39 = 0x2000;
  if (google::protobuf::MessageLite::SerializeToZeroCopyStream(v5, (google::protobuf::io::ZeroCopyOutputStream *)&__p))
  {
    CoreML::Result::Result((CoreML::Result *)v25);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(buf, "unable to serialize object");
    v25[0] = 4;
    std::operator+<char>();
    if (v30 < 0) {
      operator delete(*(void **)buf);
    }
  }
  google::protobuf::io::OstreamOutputStream::~OstreamOutputStream((google::protobuf::io::OstreamOutputStream *)&__p);
  if (v24 < 0) {
    operator delete(v23[0]);
  }
  if ((v25[0] & 0xFFFFFFEF) != 0)
  {
    float v15 = +[MLLogging coreChannel];
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p) = 0;
      _os_log_error_impl(&dword_19E58B000, v15, OS_LOG_TYPE_ERROR, "Failed to archive update parameters.", (uint8_t *)&__p, 2u);
    }

    float v16 = (void *)MEMORY[0x1E4F28C58];
    *(void *)int buf = *MEMORY[0x1E4F28568];
    uint64_t v17 = [NSString stringWithFormat:@"Failed to archive update parameters."];
    std::string __p = v17;
    unint64_t v18 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&__p forKeys:buf count:1];
    unint64_t v19 = [v16 errorWithDomain:@"com.apple.CoreML" code:3 userInfo:v18];

    uint64_t v20 = (CoreML::MLModelException *)__cxa_allocate_exception(0x28uLL);
    CoreML::MLModelException::MLModelException(v20, v19);
  }
  std::string __p = 0;
  if (!compileUpdatableModel(v4, (uint64_t *)this + 6, (char *)a2, &__p))
  {
    uint64_t v21 = +[MLLogging coreChannel];
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int buf = 0;
      _os_log_error_impl(&dword_19E58B000, v21, OS_LOG_TYPE_ERROR, "Error compiling updatable model.", buf, 2u);
    }

    uint64_t v22 = (CoreML::MLModelException *)__cxa_allocate_exception(0x28uLL);
    CoreML::MLModelException::MLModelException(v22, (NSError *)__p);
  }

  if (v26 < 0) {
    operator delete((void *)v25[1]);
  }
}

void sub_19EA6601C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  __cxa_free_exception(v38);

  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

BOOL compileUpdatableModel(uint64_t a1, uint64_t *a2, char *a3, id *a4)
{
  v210[1] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1) + 32) + 8);
  uint64_t v6 = NSString;
  uint64_t v7 = *(const void ***)(*(void *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1) + 32)
                                   + 8)
                       + 16);
  if (*((char *)v7 + 23) >= 0) {
    size_t v8 = *((unsigned __int8 *)v7 + 23);
  }
  else {
    size_t v8 = (size_t)v7[1];
  }
  p_p = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v8 + 10);
  if (SHIBYTE(v191) < 0) {
    p_p = (long long *)__p;
  }
  if (v8)
  {
    if (*((char *)v7 + 23) >= 0) {
      uint64_t v10 = v7;
    }
    else {
      uint64_t v10 = *v7;
    }
    memmove(p_p, v10, v8);
  }
  strcpy((char *)p_p + v8, "_lossValue");
  if (SHIBYTE(v191) >= 0) {
    uint64_t v11 = &__p;
  }
  else {
    uint64_t v11 = (long long *)__p;
  }
  v173 = [v6 stringWithUTF8String:v11];
  if (SHIBYTE(v191) < 0) {
    operator delete((void *)__p);
  }
  int v12 = *(_DWORD *)(v5 + 36);
  if (v12 != 10)
  {
    if (v12 == 11)
    {
      uint64_t v13 = *(uint64_t **)(*(void *)(v5 + 24) + 24);
      if (*((char *)v13 + 23) < 0) {
        uint64_t v13 = (uint64_t *)*v13;
      }
      uint64_t v14 = [NSString stringWithUTF8String:v13];
      v174 = v14;
      float v15 = NSString;
      if (*(_DWORD *)(v5 + 36) == 11)
      {
        float v16 = *(uint64_t **)(v5 + 24);
      }
      else
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v14);
        float v16 = &CoreML::Specification::_MeanSquaredErrorLossLayer_default_instance_;
      }
      uint64_t v27 = v16[2];
      if (*(char *)(v27 + 23) < 0) {
        uint64_t v27 = *(void *)v27;
      }
      uint64_t v28 = [v15 stringWithUTF8String:v27];
      long long v170 = [MEMORY[0x1E4F611A8] L2LossWithInputName:v28 targetInputName:v174 lossOutputName:v173];
      if (v170)
      {
        uint64_t v157 = 2;
        uint64_t v29 = v28;
        goto LABEL_57;
      }
      uint64_t v40 = +[MLLogging coreChannel];
      if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
      {
        LOWORD(__p) = 0;
        _os_log_error_impl(&dword_19E58B000, v40, OS_LOG_TYPE_ERROR, "Error in initalizing mean squared error loss layer. This loss layer might be invalid.", (uint8_t *)&__p, 2u);
      }

      long long v41 = (void *)MEMORY[0x1E4F28C58];
      uint64_t v207 = *MEMORY[0x1E4F28568];
      uint64_t v208 = [NSString stringWithFormat:@"Error in initalizing mean squared error loss layer. This loss layer might be invalid."];
      v171 = (void *)v208;
      long long v42 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v208 forKeys:&v207 count:1];
      uint64_t v43 = [v41 errorWithDomain:@"com.apple.CoreML" code:6 userInfo:v42];
      id v44 = *a4;
      *a4 = (id)v43;

      id v25 = 0;
      BOOL v26 = 0;
      id v168 = (id)v28;
    }
    else
    {
      uint64_t v21 = +[MLLogging coreChannel];
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        LOWORD(__p) = 0;
        _os_log_error_impl(&dword_19E58B000, v21, OS_LOG_TYPE_ERROR, "Current loss layer is not supported.", (uint8_t *)&__p, 2u);
      }

      uint64_t v22 = (void *)MEMORY[0x1E4F28C58];
      uint64_t v205 = *MEMORY[0x1E4F28568];
      uint64_t v23 = [NSString stringWithFormat:@"Current loss layer is not supported."];
      uint64_t v206 = v23;
      id v168 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v206 forKeys:&v205 count:1];
      uint64_t v24 = objc_msgSend(v22, "errorWithDomain:code:userInfo:", @"com.apple.CoreML", 6);
      id v25 = 0;
      BOOL v26 = 0;
      id v169 = *a4;
      *a4 = (id)v24;
      v174 = (void *)v23;
    }
    goto LABEL_160;
  }
  uint64_t v17 = *(uint64_t **)(*(void *)(v5 + 24) + 24);
  if (*((char *)v17 + 23) < 0) {
    uint64_t v17 = (uint64_t *)*v17;
  }
  unint64_t v18 = [NSString stringWithUTF8String:v17];
  v174 = v18;
  unint64_t v19 = NSString;
  if (*(_DWORD *)(v5 + 36) == 10)
  {
    uint64_t v20 = *(uint64_t **)(v5 + 24);
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v18);
    uint64_t v20 = &CoreML::Specification::_CategoricalCrossEntropyLossLayer_default_instance_;
  }
  uint64_t v30 = v20[2];
  if (*(char *)(v30 + 23) < 0) {
    uint64_t v30 = *(void *)v30;
  }
  uint64_t v31 = [v19 stringWithUTF8String:v30];
  uint64_t v32 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  uint64_t v33 = *(void *)(v32 + 16);
  if (v33) {
    uint64_t v34 = (uint64_t *)(v33 + 8);
  }
  else {
    uint64_t v34 = 0;
  }
  uint64_t v35 = *(int *)(v32 + 8);
  if (!v35)
  {
LABEL_48:
    uint64_t v29 = (uint64_t)v31;
    goto LABEL_55;
  }
  uint64_t v36 = 8 * v35;
  while (1)
  {
    uint64_t v37 = *v34;
    if (*(_DWORD *)(*v34 + 140) == 175) {
      break;
    }
LABEL_47:
    ++v34;
    v36 -= 8;
    if (!v36) {
      goto LABEL_48;
    }
  }
  uint64_t v38 = *(uint64_t **)(*(void *)(v37 + 56) + 8);
  if (*((char *)v38 + 23) < 0) {
    uint64_t v38 = (uint64_t *)*v38;
  }
  uint64_t v39 = [NSString stringWithUTF8String:v38];
  if (![v39 isEqualToString:v31])
  {

    goto LABEL_47;
  }
  int v45 = *(uint64_t **)(*(void *)(v37 + 32) + 8);
  if (*((char *)v45 + 23) < 0) {
    int v45 = (uint64_t *)*v45;
  }
  uint64_t v29 = [NSString stringWithUTF8String:v45];

LABEL_55:
  long long v170 = [MEMORY[0x1E4F611A8] crossEntropyLossWithInputName:v29 targetInputName:v174 lossOutputName:v173];
  if (!v170)
  {
    v135 = +[MLLogging coreChannel];
    id v168 = (id)v29;
    if (os_log_type_enabled(v135, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p) = 0;
      _os_log_error_impl(&dword_19E58B000, v135, OS_LOG_TYPE_ERROR, "Error in initalizing categorical cross entropy loss layer. This loss layer might be invalid.", (uint8_t *)&__p, 2u);
    }

    v136 = (void *)MEMORY[0x1E4F28C58];
    uint64_t v209 = *MEMORY[0x1E4F28568];
    v210[0] = [NSString stringWithFormat:@"Error in initalizing categorical cross entropy loss layer. This loss layer might be invalid."];
    long long v172 = (void *)v210[0];
    v137 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v210 forKeys:&v209 count:1];
    uint64_t v138 = [v136 errorWithDomain:@"com.apple.CoreML" code:6 userInfo:v137];
    id v139 = *a4;
    *a4 = (id)v138;

    id v25 = 0;
    BOOL v26 = 0;

    goto LABEL_160;
  }
  uint64_t v157 = 1;
LABEL_57:
  std::vector<std::string> v166 = (void *)[MEMORY[0x1E4F1CC08] mutableCopy];
  id v168 = (id)v29;
  uint64_t v46 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  if (*(void *)(v46 + 48)) {
    uint64_t v47 = *(const CoreML::Specification::Int64Parameter **)(v46 + 48);
  }
  else {
    uint64_t v47 = (const CoreML::Specification::Int64Parameter *)&CoreML::Specification::_Int64Parameter_default_instance_;
  }
  CoreML::Specification::Int64Parameter::Int64Parameter((CoreML::Specification::Int64Parameter *)v188, v47);
  unint64_t v48 = [NSNumber numberWithLongLong:v189];
  double v49 = +[MLParameterKey epochs];
  [v166 setObject:v48 forKeyedSubscript:v49];

  double v50 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  if (v50 != &CoreML::Specification::_NetworkUpdateParameters_default_instance_ && v50[7])
  {
    uint64_t v51 = NSNumber;
    uint64_t v52 = *(uint64_t **)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1) + 56);
    if (!v52) {
      uint64_t v52 = &CoreML::Specification::_BoolParameter_default_instance_;
    }
    uint64_t v53 = [v51 numberWithBool:*((unsigned __int8 *)v52 + 16)];
    long long v54 = +[MLParameterKey shuffle];
    [v166 setObject:v53 forKeyedSubscript:v54];
  }
  int v55 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  if (v55 != &CoreML::Specification::_NetworkUpdateParameters_default_instance_ && v55[8])
  {
    uint64_t v56 = NSNumber;
    uint64_t v57 = *(uint64_t **)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1) + 64);
    if (!v57) {
      uint64_t v57 = &CoreML::Specification::_Int64Parameter_default_instance_;
    }
    uint8x8_t v58 = [v56 numberWithLongLong:v57[2]];
    unint64_t v59 = +[MLParameterKey seed];
    [v166 setObject:v58 forKeyedSubscript:v59];
  }
  uint64_t v60 = *(uint64_t **)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1) + 40);
  if (!v60) {
    uint64_t v60 = &CoreML::Specification::_Optimizer_default_instance_;
  }
  int v61 = *((_DWORD *)v60 + 7);
  if (v61 == 10)
  {
    unint64_t v86 = (uint64_t *)v60[2];
    if (v86[2]) {
      double v87 = (const CoreML::Specification::DoubleParameter *)v86[2];
    }
    else {
      double v87 = (const CoreML::Specification::DoubleParameter *)&CoreML::Specification::_DoubleParameter_default_instance_;
    }
    CoreML::Specification::DoubleParameter::DoubleParameter((CoreML::Specification::DoubleParameter *)&__p, v87);
    if (v86[3]) {
      BOOL v88 = (const CoreML::Specification::Int64Parameter *)v86[3];
    }
    else {
      BOOL v88 = (const CoreML::Specification::Int64Parameter *)&CoreML::Specification::_Int64Parameter_default_instance_;
    }
    CoreML::Specification::Int64Parameter::Int64Parameter((CoreML::Specification::Int64Parameter *)v186, v88);
    unint64_t v89 = +[MLParameterKey learningRate];
    v203[0] = v89;
    unint64_t v90 = [NSNumber numberWithDouble:*(double *)&v191];
    v204[0] = v90;
    uint64_t v91 = +[MLParameterKey miniBatchSize];
    v203[1] = v91;
    uint64_t v92 = [NSNumber numberWithLongLong:v187];
    v204[1] = v92;
    unint64_t v93 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v204 forKeys:v203 count:2];
    uint64_t v165 = (void *)[v93 mutableCopy];

    v201[0] = *MEMORY[0x1E4F614E8];
    double v94 = [NSNumber numberWithLongLong:v187];
    v202[0] = v94;
    v201[1] = *MEMORY[0x1E4F61508];
    uint64_t v95 = [NSNumber numberWithDouble:*(double *)&v191];
    v202[1] = v95;
    uint64_t v96 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v202 forKeys:v201 count:2];
    double v82 = (void *)[v96 mutableCopy];

    if (v86 != &CoreML::Specification::_SGDOptimizer_default_instance_)
    {
      long long v97 = (const CoreML::Specification::DoubleParameter *)v86[4];
      if (v97)
      {
        CoreML::Specification::DoubleParameter::DoubleParameter((CoreML::Specification::DoubleParameter *)v184, v97);
        unint64_t v98 = [NSNumber numberWithDouble:v185];
        uint64_t v99 = +[MLParameterKey momentum];
        [v165 setObject:v98 forKeyedSubscript:v99];

        uint64_t v100 = [NSNumber numberWithDouble:v185];
        [v82 setObject:v100 forKeyedSubscript:*MEMORY[0x1E4F61510]];

        CoreML::Specification::DoubleParameter::~DoubleParameter((CoreML::Specification::DoubleParameter *)v184);
      }
    }
    id v183 = 0;
    uint64_t v101 = createEspressoOptimizer(0, v82, &v183);
    id v102 = v183;
    id v25 = v183;
    uint64_t v159 = (void *)v101;
    if (v101)
    {
      CoreML::Specification::Int64Parameter::~Int64Parameter((CoreML::Specification::Int64Parameter *)v186);
      CoreML::Specification::DoubleParameter::~DoubleParameter((CoreML::Specification::DoubleParameter *)&__p);
      uint64_t v85 = 1;
      goto LABEL_103;
    }
    objc_storeStrong(a4, v102);
    CoreML::Specification::Int64Parameter::~Int64Parameter((CoreML::Specification::Int64Parameter *)v186);
    CoreML::Specification::DoubleParameter::~DoubleParameter((CoreML::Specification::DoubleParameter *)&__p);
    goto LABEL_142;
  }
  if (v61 != 11)
  {
    v131 = +[MLLogging coreChannel];
    if (os_log_type_enabled(v131, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p) = 0;
      _os_log_error_impl(&dword_19E58B000, v131, OS_LOG_TYPE_ERROR, "Current optimizer is not supported.", (uint8_t *)&__p, 2u);
    }

    long long v132 = (void *)MEMORY[0x1E4F28C58];
    uint64_t v195 = *MEMORY[0x1E4F28568];
    uint64_t v196 = [NSString stringWithFormat:@"Current optimizer is not supported."];
    uint64_t v165 = (void *)v196;
    double v82 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v196 forKeys:&v195 count:1];
    uint64_t v133 = [v132 errorWithDomain:@"com.apple.CoreML" code:6 userInfo:v82];
    id v134 = *a4;
    *a4 = (id)v133;

    id v25 = 0;
LABEL_142:
    BOOL v26 = 0;
    goto LABEL_159;
  }
  uint64_t v62 = (void *)v60[2];
  if (v62[2]) {
    uint64_t v63 = (const CoreML::Specification::DoubleParameter *)v62[2];
  }
  else {
    uint64_t v63 = (const CoreML::Specification::DoubleParameter *)&CoreML::Specification::_DoubleParameter_default_instance_;
  }
  CoreML::Specification::DoubleParameter::DoubleParameter((CoreML::Specification::DoubleParameter *)&__p, v63);
  if (v62[3]) {
    uint64_t v64 = (const CoreML::Specification::Int64Parameter *)v62[3];
  }
  else {
    uint64_t v64 = (const CoreML::Specification::Int64Parameter *)&CoreML::Specification::_Int64Parameter_default_instance_;
  }
  CoreML::Specification::Int64Parameter::Int64Parameter((CoreML::Specification::Int64Parameter *)v186, v64);
  if (v62[4]) {
    long long v65 = (const CoreML::Specification::DoubleParameter *)v62[4];
  }
  else {
    long long v65 = (const CoreML::Specification::DoubleParameter *)&CoreML::Specification::_DoubleParameter_default_instance_;
  }
  CoreML::Specification::DoubleParameter::DoubleParameter((CoreML::Specification::DoubleParameter *)v184, v65);
  if (v62[5]) {
    float v66 = (const CoreML::Specification::DoubleParameter *)v62[5];
  }
  else {
    float v66 = (const CoreML::Specification::DoubleParameter *)&CoreML::Specification::_DoubleParameter_default_instance_;
  }
  CoreML::Specification::DoubleParameter::DoubleParameter((CoreML::Specification::DoubleParameter *)v181, v66);
  if (v62[6]) {
    uint64_t v67 = (const CoreML::Specification::DoubleParameter *)v62[6];
  }
  else {
    uint64_t v67 = (const CoreML::Specification::DoubleParameter *)&CoreML::Specification::_DoubleParameter_default_instance_;
  }
  CoreML::Specification::DoubleParameter::DoubleParameter((CoreML::Specification::DoubleParameter *)v179, v67);
  uint64_t v68 = +[MLParameterKey learningRate];
  v199[0] = v68;
  v160 = [NSNumber numberWithDouble:*(double *)&v191];
  v200[0] = v160;
  v153 = (void *)v68;
  v158 = +[MLParameterKey miniBatchSize];
  v199[1] = v158;
  v155 = [NSNumber numberWithLongLong:v187];
  v200[1] = v155;
  unint64_t v69 = +[MLParameterKey beta1];
  v199[2] = v69;
  std::string v70 = [NSNumber numberWithDouble:v185];
  v200[2] = v70;
  unint64_t v71 = +[MLParameterKey beta2];
  v199[3] = v71;
  unint64_t v72 = [NSNumber numberWithDouble:v182];
  std::string v200[3] = v72;
  uint64_t v73 = +[MLParameterKey eps];
  v199[4] = v73;
  long long v74 = [NSNumber numberWithDouble:v180];
  v200[4] = v74;
  uint64_t v75 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v200 forKeys:v199 count:5];
  uint64_t v165 = (void *)[v75 mutableCopy];

  v197[0] = *MEMORY[0x1E4F614E8];
  uint8x8_t v76 = [NSNumber numberWithLongLong:v187];
  v198[0] = v76;
  v197[1] = *MEMORY[0x1E4F61508];
  int v77 = [NSNumber numberWithDouble:*(double *)&v191];
  v198[1] = v77;
  v197[2] = *MEMORY[0x1E4F614F0];
  uint8x8_t v78 = [NSNumber numberWithDouble:v185];
  v198[2] = v78;
  v197[3] = *MEMORY[0x1E4F614F8];
  uint64_t v79 = [NSNumber numberWithDouble:v182];
  v198[3] = v79;
  v197[4] = *MEMORY[0x1E4F61500];
  unint64_t v80 = [NSNumber numberWithDouble:v180];
  v198[4] = v80;
  unint64_t v81 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v198 forKeys:v197 count:5];
  double v82 = (void *)[v81 mutableCopy];

  id v178 = 0;
  uint64_t v83 = createEspressoOptimizer(1, v82, &v178);
  id v84 = v178;
  id v25 = v178;
  uint64_t v159 = (void *)v83;
  if (!v83) {
    objc_storeStrong(a4, v84);
  }
  CoreML::Specification::DoubleParameter::~DoubleParameter((CoreML::Specification::DoubleParameter *)v179);
  CoreML::Specification::DoubleParameter::~DoubleParameter((CoreML::Specification::DoubleParameter *)v181);
  CoreML::Specification::DoubleParameter::~DoubleParameter((CoreML::Specification::DoubleParameter *)v184);
  CoreML::Specification::Int64Parameter::~Int64Parameter((CoreML::Specification::Int64Parameter *)v186);
  CoreML::Specification::DoubleParameter::~DoubleParameter((CoreML::Specification::DoubleParameter *)&__p);
  uint64_t v85 = 2;
LABEL_103:
  id v103 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  uint64_t v104 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  uint64_t v105 = *(void *)(v104 + 16);
  if (v105) {
    uint64_t v106 = v105 + 8;
  }
  else {
    uint64_t v106 = 0;
  }
  uint64_t v107 = *(int *)(v104 + 8);
  if (v107)
  {
    uint64_t v108 = 8 * v107;
    do
    {
      if (*(unsigned char *)(*(void *)v106 + 120))
      {
        uint64_t v109 = *(uint64_t **)(*(void *)v106 + 112);
        if (*((char *)v109 + 23) < 0) {
          uint64_t v109 = (uint64_t *)*v109;
        }
        unint64_t v110 = [NSString stringWithUTF8String:v109];
        [v103 addObject:v110];
      }
      v106 += 8;
      v108 -= 8;
    }
    while (v108);
  }
  int v111 = (void *)MEMORY[0x1E4F1CB10];
  if (*((char *)a2 + 23) >= 0) {
    v112 = a2;
  }
  else {
    v112 = (uint64_t *)*a2;
  }
  long long v113 = [NSString stringWithUTF8String:v112];
  v161 = [v111 fileURLWithPath:v113];

  id v114 = objc_alloc(MEMORY[0x1E4F611B0]);
  id v177 = v25;
  uint64_t v164 = (void *)[v114 initWithInferenceNetworkPath:v161 inferenceInputs:MEMORY[0x1E4F1CBF0] inferenceOutputs:MEMORY[0x1E4F1CBF0] error:&v177];
  id v115 = v177;

  if (v164)
  {
    id v116 = objc_alloc(MEMORY[0x1E4F611D8]);
    obunint64_t j = *a4;
    uint64_t v154 = [v116 initForLayers:v103 error:&obj];
    objc_storeStrong(a4, obj);
    v117 = (void *)MEMORY[0x19F3C29E0]();
    id v118 = objc_alloc(MEMORY[0x1E4F611D0]);
    id v175 = v115;
    v119 = (void *)[v118 initWithModelDefinition:v164 lossDefinition:v170 variablesDefinition:v154 optimizerDefinition:v159 forPlatform:1 error:&v175];
    id v156 = v175;

    BOOL v26 = v119 != 0;
    if (v119)
    {
      v193[0] = @"kUpdateLossTargetName";
      v193[1] = @"kUpdateLossInputName";
      v194[0] = v174;
      v194[1] = v168;
      v193[2] = @"kUpdateLossOutputName";
      v194[2] = v173;
      id v120 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v194 forKeys:v193 count:3];
      v121 = [[MLNeuralNetworksCompileTimeParams alloc] initWithLossType:v157 optimizerType:v85 optimizerParameters:v165 lossParameters:v120 trainableLayerNames:v103 updateParameters:v166];
      std::string::basic_string[abi:ne180100]<0>(v186, "updateParameters");
      v122 = OArchive::nestedArchive(a3, (uint64_t)v186);
      if (SHIBYTE(v187) < 0) {
        operator delete(v186[0]);
      }
      (*(void (**)(void))(**((void **)v122 + 1) + 56))(*((void *)v122 + 1));
      LOBYTE(__p) = *v122;
      v123 = (std::__shared_weak_count *)*((void *)v122 + 2);
      *((void *)&__p + 1) = *((void *)v122 + 1);
      v191 = v123;
      if (v123) {
        atomic_fetch_add_explicit(&v123->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::map<std::string,OArchive>::map[abi:ne180100]((uint64_t)v192, (void *)v122 + 3);
      uint64_t v124 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
      uint64_t v125 = *(void *)(v124 + 16);
      if (v125) {
        v126 = (uint64_t *)(v125 + 8);
      }
      else {
        v126 = 0;
      }
      uint64_t v127 = *(int *)(v124 + 8);
      if (v127)
      {
        uint64_t v128 = 0;
        uint64_t v129 = 8 * v127;
        do
        {
          uint64_t v130 = *v126++;
          v128 += *(unsigned __int8 *)(v130 + 120);
          v129 -= 8;
        }
        while (v129);
      }
      else
      {
        uint64_t v128 = 0;
      }
      operator<<((uint64_t)&__p, v128);
      uint64_t v145 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
      uint64_t v146 = *(void *)(v145 + 16);
      if (v146) {
        uint64_t v147 = v146 + 8;
      }
      else {
        uint64_t v147 = 0;
      }
      uint64_t v148 = *(int *)(v145 + 8);
      if (v148)
      {
        uint64_t v149 = 8 * v148;
        do
        {
          if (*(unsigned char *)(*(void *)v147 + 120)) {
            operator<<((uint64_t)&__p, *(uint64_t **)(*(void *)v147 + 112));
          }
          v147 += 8;
          v149 -= 8;
        }
        while (v149);
      }
      std::string::basic_string[abi:ne180100]<0>(v186, (char *)[v168 UTF8String]);
      operator<<((uint64_t)&__p, (uint64_t *)v186);
      if (SHIBYTE(v187) < 0) {
        operator delete(v186[0]);
      }
      std::__tree<std::__value_type<std::string,OArchive>,std::__map_value_compare<std::string,std::__value_type<std::string,OArchive>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,OArchive>>>::destroy(v192[1]);
      if (v191) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v191);
      }
    }
    else
    {
      v143 = +[MLLogging coreChannel];
      if (os_log_type_enabled(v143, OS_LOG_TYPE_ERROR))
      {
        v152 = [v156 localizedDescription];
        LODWORD(__p) = 138412290;
        *(void *)((char *)&__p + 4) = v152;
        _os_log_error_impl(&dword_19E58B000, v143, OS_LOG_TYPE_ERROR, "Error in creating updatable model. (Underlying error: %@)", (uint8_t *)&__p, 0xCu);
      }
      uint64_t v144 = +[MLModelErrorUtils errorWithCode:underlyingError:format:](MLModelErrorUtils, "errorWithCode:underlyingError:format:", 6);
      id v120 = *a4;
      *a4 = (id)v144;
    }

    id v142 = (id)v154;
    id v115 = v156;
  }
  else
  {
    v140 = +[MLLogging coreChannel];
    if (os_log_type_enabled(v140, OS_LOG_TYPE_ERROR))
    {
      v151 = [v115 localizedDescription];
      LODWORD(__p) = 138412290;
      *(void *)((char *)&__p + 4) = v151;
      _os_log_error_impl(&dword_19E58B000, v140, OS_LOG_TYPE_ERROR, "Error in initializing updatable model. (Underlying error: %@)", (uint8_t *)&__p, 0xCu);
    }
    uint64_t v141 = +[MLModelErrorUtils errorWithCode:6 underlyingError:v115 format:@"Error in initializing updatable model."];
    BOOL v26 = 0;
    id v142 = *a4;
    *a4 = (id)v141;
  }

  id v25 = v115;
LABEL_159:

  CoreML::Specification::Int64Parameter::~Int64Parameter((CoreML::Specification::Int64Parameter *)v188);
LABEL_160:

  return v26;
}

void sub_19EA67630(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, uint64_t a11, void *a12, void *a13, uint64_t a14, void *a15, void *a16, void *a17, uint64_t a18, void *a19, void *a20,void *a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58)
{
  CoreML::Specification::Int64Parameter::~Int64Parameter((CoreML::Specification::Int64Parameter *)&a51);
  _Unwind_Resume(a1);
}

id createEspressoOptimizer(uint64_t a1, void *a2, void *a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v12 = 0;
  uint64_t v6 = (void *)[objc_alloc(MEMORY[0x1E4F611C0]) initWithOptimizationAlgorithm:a1 parameters:v5 error:&v12];
  id v7 = v12;
  if (v6)
  {
    id v8 = v6;
  }
  else
  {
    uint64_t v9 = +[MLLogging coreChannel];
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = [v7 localizedDescription];
      *(_DWORD *)int buf = 138412290;
      uint64_t v14 = v11;
      _os_log_error_impl(&dword_19E58B000, v9, OS_LOG_TYPE_ERROR, "Error in initalizing optimizer. The parameters might be invalid. (Underlying error: %@)", buf, 0xCu);
    }
    if (a3)
    {
      *a3 = +[MLModelErrorUtils errorWithCode:6 underlyingError:v7 format:@"Error in initalizing optimizer. The parameters might be invalid."];
    }
  }

  return v6;
}

void sub_19EA67CDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CoreML::NNCompiler::Backend::NeuralNetwork::UpdatableNeuralNetworkEspressoNetBackend::~UpdatableNeuralNetworkEspressoNetBackend(void **this)
{
  CoreML::NNCompiler::Backend::NeuralNetwork::NeuralNetworkEspressoNetBackend::~NeuralNetworkEspressoNetBackend(this);

  JUMPOUT(0x19F3C1920);
}

void sub_19EA683CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__28550(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__28551(uint64_t a1)
{
}

void sub_19EA691EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA693DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19EA69664(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA698DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA699E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA69A70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA69BA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA69E40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  operator delete(__p);
  operator delete(v12);

  _Unwind_Resume(a1);
}

void sub_19EA69FDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA6A544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);

  v11[2](v11);
  ElapsedTimeRecorder::~ElapsedTimeRecorder((id *)va);

  _Unwind_Resume(a1);
}

void sub_19EA6A8EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_19EA6AA70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA6ABA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA6AEB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, char a18, uint64_t a19, uint64_t a20,void *__p)
{
  if (__p)
  {
    if (!*__p) {
      operator delete(__p);
    }
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v21);

  _Unwind_Resume(a1);
}

void LayerTranslator::addSlice(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  uint64_t v4 = (long long *)*((void *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v79, *(const std::string::value_type **)v4, *((void *)v4 + 1));
  }
  else
  {
    long long v5 = *v4;
    v79.__r_.__value_.__r.__words[2] = *((void *)v4 + 2);
    *(_OWORD *)&v79.__r_.__value_.__l.__data_ = v5;
  }
  uint8x8_t v76 = 0;
  int v77 = 0;
  uint64_t v78 = 0;
  uint64_t v73 = 0;
  long long v74 = 0;
  uint64_t v75 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v76, (uint64_t *)&v73, *((void *)this + 1));
  if (*((_DWORD *)a2 + 35) == 350)
  {
    id v7 = (const CoreML::Specification::SliceLayerParams *)*((void *)a2 + 16);
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    id v7 = (const CoreML::Specification::SliceLayerParams *)&CoreML::Specification::_SliceLayerParams_default_instance_;
  }
  CoreML::Specification::SliceLayerParams::SliceLayerParams((CoreML::Specification::SliceLayerParams *)&v68, v7);
  int v64 = 2;
  uint64_t v67 = 0x100000000;
  int32x2_t v65 = vmovn_s64(v70);
  int v66 = v71;
  if (v72 > 1)
  {
    if (v72 == 2)
    {
      int v64 = 0;
      goto LABEL_15;
    }
    unsigned int v8 = 0x7FFFFFFF;
  }
  else
  {
    if (v72 == 1)
    {
      int v64 = 1;
      goto LABEL_15;
    }
    unsigned int v8 = 0x80000000;
  }
  if (v72 == v8)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
    uint64_t v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v82, (uint64_t)"Slice layer: '", 14);
    uint64_t v29 = *((void *)a2 + 14);
    int v30 = *(char *)(v29 + 23);
    if (v30 >= 0) {
      uint64_t v31 = *((void *)a2 + 14);
    }
    else {
      uint64_t v31 = *(void *)v29;
    }
    if (v30 >= 0) {
      uint64_t v32 = *(unsigned __int8 *)(v29 + 23);
    }
    else {
      uint64_t v32 = *(void *)(v29 + 8);
    }
    uint64_t v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, v31, v32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"': unknown value for parameter 'axis'.", 38);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, (const std::string *)v97);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
LABEL_15:
  uint64_t v9 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(&__p, "slice");
  memset(&v61, 0, sizeof(v61));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v61, v73, v74, 0xAAAAAAAAAAAAAAABLL * (((char *)v74 - (char *)v73) >> 3));
  memset(&v60, 0, sizeof(v60));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v60, v76, v77, 0xAAAAAAAAAAAAAAABLL * (((char *)v77 - (char *)v76) >> 3));
  Espresso::sequential_builder::add<Espresso::slice_params_t>(&v62, v9, (uint64_t)&__p, (uint64_t)&v79, (uint64_t)&v64, (long long *)v61.__r_.__value_.__l.__data_, (long long *)v61.__r_.__value_.__l.__size_, (long long **)&v60);
  if (v63) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v63);
  }
  *(void *)long long v97 = &v60;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v97);
  *(void *)long long v97 = &v61;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v97);
  if (SBYTE7(v82) < 0) {
    operator delete((void *)__p);
  }
  if (**((unsigned char **)this + 2))
  {
    LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v76);
  }
  else
  {
    uint64_t v10 = (uint64_t **)*((void *)this + 1);
    uint64_t v11 = std::map<std::string,std::string>::at((uint64_t)v10, v73);
    *(_OWORD *)long long v97 = *(_OWORD *)v11;
    *(_OWORD *)&v97[16] = *(_OWORD *)(v11 + 16);
    uint64_t v98 = *(void *)(v11 + 32);
    uint64_t v99 = 0;
    uint64_t v100 = 0;
    uint64_t v101 = 0;
    uint64_t v12 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v99, *(const void **)(v11 + 40), *(void *)(v11 + 48), (uint64_t)(*(void *)(v11 + 48)- *(void *)(v11 + 40)) >> 2);
    if (*((_DWORD *)a2 + 35) == 350)
    {
      uint64_t v13 = (const CoreML::Specification::SliceLayerParams *)*((void *)a2 + 16);
    }
    else
    {
      CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v12);
      uint64_t v13 = (const CoreML::Specification::SliceLayerParams *)&CoreML::Specification::_SliceLayerParams_default_instance_;
    }
    CoreML::Specification::SliceLayerParams::SliceLayerParams((CoreML::Specification::SliceLayerParams *)&v91, v13);
    int v14 = v93;
    int v15 = v94;
    int v16 = v95;
    int v17 = v96;
    int v19 = *(_DWORD *)&v97[4];
    int v18 = *(_DWORD *)&v97[8];
    int v20 = *(_DWORD *)v97;
    long long v85 = *(_OWORD *)v97;
    long long v86 = *(_OWORD *)&v97[16];
    uint64_t v87 = v98;
    BOOL v88 = 0;
    uint64_t v90 = 0;
    uint64_t v89 = 0;
    unint64_t v59 = v99;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v88, v99, v100, (v100 - (uint64_t)v99) >> 2);
    if (v17)
    {
      if (v17 == 1)
      {
        v14 += v19 & (v14 >> 31);
        int v21 = v19;
      }
      else if (v17 == 2)
      {
        v14 += v20 & (v14 >> 31);
        int v21 = v20;
      }
      else
      {
        int v21 = 0;
      }
    }
    else
    {
      v14 += v18 & (v14 >> 31);
      int v21 = v18;
    }
    if (v14 >= v21)
    {
      int v22 = 0;
    }
    else
    {
      if (v21 >= (v21 & (v15 >> 31)) + v15) {
        int v21 = (v21 & (v15 >> 31)) + v15;
      }
      int v22 = (v21 + ~v14) / v16 + 1;
    }
    if (v17 == 2)
    {
      if (v20 != -1)
      {
        if (v22 <= 0)
        {
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
          uint64_t v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v82, (uint64_t)"Slice layer: '", 14);
          uint64_t v44 = *((void *)a2 + 14);
          int v45 = *(char *)(v44 + 23);
          if (v45 >= 0) {
            uint64_t v46 = *((void *)a2 + 14);
          }
          else {
            uint64_t v46 = *(void *)v44;
          }
          if (v45 >= 0) {
            uint64_t v47 = *(unsigned __int8 *)(v44 + 23);
          }
          else {
            uint64_t v47 = *(void *)(v44 + 8);
          }
          unint64_t v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, v46, v47);
          double v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)"': output blob width dimension size is 0.", 41);
          std::endl[abi:ne180100]<char,std::char_traits<char>>(v49);
          double v50 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::stringbuf::str();
          std::runtime_error::runtime_error(v50, &v80);
          __cxa_throw(v50, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        LODWORD(v85) = v22;
      }
    }
    else if (v17 == 1)
    {
      if (v19 != -1)
      {
        if (v22 <= 0)
        {
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
          uint64_t v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v82, (uint64_t)"Slice layer: '", 14);
          uint64_t v36 = *((void *)a2 + 14);
          int v37 = *(char *)(v36 + 23);
          if (v37 >= 0) {
            uint64_t v38 = *((void *)a2 + 14);
          }
          else {
            uint64_t v38 = *(void *)v36;
          }
          if (v37 >= 0) {
            uint64_t v39 = *(unsigned __int8 *)(v36 + 23);
          }
          else {
            uint64_t v39 = *(void *)(v36 + 8);
          }
          uint64_t v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, v38, v39);
          long long v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"': output blob height dimension size is 0.", 42);
          std::endl[abi:ne180100]<char,std::char_traits<char>>(v41);
          long long v42 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::stringbuf::str();
          std::runtime_error::runtime_error(v42, &v80);
          __cxa_throw(v42, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        DWORD1(v85) = v22;
      }
    }
    else if (!v17 && v18 != -1)
    {
      if (v22 <= 0)
      {
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
        uint64_t v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v82, (uint64_t)"Slice layer: '", 14);
        uint64_t v52 = *((void *)a2 + 14);
        int v53 = *(char *)(v52 + 23);
        if (v53 >= 0) {
          uint64_t v54 = *((void *)a2 + 14);
        }
        else {
          uint64_t v54 = *(void *)v52;
        }
        if (v53 >= 0) {
          uint64_t v55 = *(unsigned __int8 *)(v52 + 23);
        }
        else {
          uint64_t v55 = *(void *)(v52 + 8);
        }
        uint64_t v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, v54, v55);
        uint64_t v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)"': output blob channel dimension size is 0.", 43);
        std::endl[abi:ne180100]<char,std::char_traits<char>>(v57);
        uint8x8_t v58 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::stringbuf::str();
        std::runtime_error::runtime_error(v58, &v80);
        __cxa_throw(v58, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      DWORD2(v85) = v22;
    }
    long long __p = v85;
    long long v82 = v86;
    uint64_t v23 = v88;
    uint64_t v83 = v87;
    memset(v84, 0, 24);
    uint64_t v24 = v89;
    unint64_t v25 = (v89 - (uint64_t)v88) >> 2;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v84, v88, v89, v25);
    EspressoConverter::validateShape((int *)&__p, *((void *)a2 + 14), (uint64_t)v76);
    if (v84[0]) {
      operator delete(v84[0]);
    }
    v80.__r_.__value_.__r.__words[0] = (std::string::size_type)v76;
    BOOL v26 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v10, v76, (long long **)&v80);
    long long v27 = v86;
    *(_OWORD *)(v26 + 5CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = v85;
    *(_OWORD *)(v26 + 72) = v27;
    *((void *)v26 + 11) = v87;
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v26 + 96, v23, v24, v25);
    if (v23) {
      operator delete(v23);
    }
    uint64_t v91 = &unk_1EF0D1DD0;
    google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(&v92);
    if (v59) {
      operator delete(v59);
    }
  }
  uint64_t v68 = &unk_1EF0D1DD0;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(&v69);
  *(void *)&long long __p = &v73;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  *(void *)&long long __p = &v76;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v79.__r_.__value_.__l.__data_);
  }
}

void sub_19EA6C17C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45)
{
  if (a44 < 0)
  {
    operator delete(__p);
    if ((v45 & 1) == 0)
    {
LABEL_6:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a45);
      if (STACK[0x238]) {
        operator delete((void *)STACK[0x238]);
      }
      *(void *)(v47 - 208) = &unk_1EF0D1DD0;
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)(v47 - 200));
      if (a9) {
        operator delete(a9);
      }
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(&a22);
      STACK[0x210] = (unint64_t)&a27;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x210]);
      STACK[0x210] = (unint64_t)&a30;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x210]);
      if (a38 < 0) {
        operator delete(a33);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v45)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v46);
  goto LABEL_6;
}

void Espresso::sequential_builder::add<Espresso::slice_params_t>(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, long long *a6, long long *a7, long long **a8)
{
  memset(&v13, 0, sizeof(v13));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v13, a6, a7, 0xAAAAAAAAAAAAAAABLL * (((char *)a7 - (char *)a6) >> 3));
  memset(&v12, 0, sizeof(v12));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v12, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a8[1] - (char *)*a8) >> 3));
  LODWORD(v15.__r_.__value_.__l.__data_) = (***(uint64_t (****)(void))(a2[14] + 8))(*(void *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  uint64_t v11 = (std::__shared_weak_count *)a1[1];
  uint64_t v16 = *a1;
  int v17 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(&v15, 0, sizeof(v15));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v15, (long long *)v13.__r_.__value_.__l.__data_, (long long *)v13.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13.__r_.__value_.__l.__size_ - v13.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v14, 0, sizeof(v14));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v14, (long long *)v12.__r_.__value_.__l.__data_, (long long *)v12.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12.__r_.__value_.__l.__size_ - v12.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  int v18 = &v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  int v18 = &v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (*a2) {
    Espresso::sequential_builder::add_shape_from_kernel();
  }
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
}

void sub_19EA6C538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v16 = *(std::__shared_weak_count **)(v13 + 8);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  *(void *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(void *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void *std::endl[abi:ne180100]<char,std::char_traits<char>>(void *a1)
{
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
  uint64_t v2 = std::locale::use_facet(&v4, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
  std::locale::~locale(&v4);
  std::ostream::put();
  std::ostream::flush();
  return a1;
}

void sub_19EA6C668(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void LayerTranslator::addMax(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  std::locale v4 = (long long *)*((void *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v57, *(const std::string::value_type **)v4, *((void *)v4 + 1));
  }
  else
  {
    long long v5 = *v4;
    v57.__r_.__value_.__r.__words[2] = *((void *)v4 + 2);
    *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v5;
  }
  uint64_t v54 = 0;
  uint64_t v55 = 0;
  uint64_t v56 = 0;
  uint64_t v51 = 0;
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v54, (uint64_t *)&v51, *((void *)this + 1));
  int v37 = a2;
  EspressoConverter::splitElementwiseLayer((uint64_t)&v49, &v51, (uint64_t)v54);
  uint64_t v6 = v49;
  if (v50 != v49)
  {
    unint64_t v7 = 0;
    uint64_t v8 = 71;
    do
    {
      *(void *)&long long v64 = 897988541;
      BYTE8(v64) = 0;
      *(void *)((char *)&v66 + 4) = 0;
      *(void *)&long long v63 = 23;
      *((void *)&v63 + 1) = 1065353216;
      long long v59 = 0uLL;
      *(void *)&long long v60 = 0;
      uint64_t v68 = 0;
      uint64_t v69 = 0;
      unint64_t v70 = 0;
      if ((char *)v52 - (char *)v51 == 24)
      {
        *((void *)&v59 + 1) = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v59, v51);
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v68, v54, v55, 0xAAAAAAAAAAAAAAABLL * (((char *)v55 - (char *)v54) >> 3));
      }
      else
      {
        uint64_t v9 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v59, (long long *)(v6 + v8 - 71));
        uint64_t v10 = v9;
        *((void *)&v59 + 1) = v9;
        uint64_t v11 = (long long *)(v49 + v8 - 47);
        if ((unint64_t)v9 >= (unint64_t)v60)
        {
          uint64_t v13 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v59, v11);
        }
        else
        {
          if (*(char *)(v49 + v8 - 24) < 0)
          {
            std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v11, *(void *)(v49 + v8 - 39));
          }
          else
          {
            long long v12 = *v11;
            v9->__r_.__value_.__r.__words[2] = *(void *)(v49 + v8 - 31);
            *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v12;
          }
          uint64_t v13 = (uint64_t)&v10[1];
        }
        *((void *)&v59 + 1) = v13;
        uint64_t v14 = (long long *)(v49 + v8 - 23);
        std::string v15 = v69;
        if ((unint64_t)v69 >= v70)
        {
          int v17 = (long long *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v68, v14);
        }
        else
        {
          if (*(char *)(v49 + v8) < 0)
          {
            std::string::__init_copy_ctor_external(v69, *(const std::string::value_type **)v14, *(void *)(v49 + v8 - 15));
          }
          else
          {
            long long v16 = *v14;
            v69->__r_.__value_.__r.__words[2] = *(void *)(v49 + v8 - 7);
            *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
          }
          int v17 = (long long *)&v15[1];
        }
        uint64_t v69 = (std::string *)v17;
      }
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v52 - (char *)v51) >> 3) > 2)
      {
        int v20 = *(void **)this;
        std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
        std::to_string(&v40, v7);
        if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v21 = &v57;
        }
        else {
          int v21 = (std::string *)v57.__r_.__value_.__r.__words[0];
        }
        if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v57.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v57.__r_.__value_.__l.__size_;
        }
        uint64_t v23 = std::string::insert(&v40, 0, (const std::string::value_type *)v21, size);
        long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
        std::string::size_type v42 = v23->__r_.__value_.__r.__words[2];
        *(_OWORD *)long long v41 = v24;
        v23->__r_.__value_.__l.__size_ = 0;
        v23->__r_.__value_.__r.__words[2] = 0;
        v23->__r_.__value_.__r.__words[0] = 0;
        memset(&v39, 0, sizeof(v39));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v39, (long long *)v59, *((long long **)&v59 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v59 + 1) - v59) >> 3));
        memset(&v38, 0, sizeof(v38));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v38, (long long *)v68, (long long *)v69, 0xAAAAAAAAAAAAAAABLL * (((char *)v69 - (char *)v68) >> 3));
        Espresso::sequential_builder::add<Espresso::elementwise_params>(&v43, v20, (uint64_t)__p, (uint64_t)v41, (uint64_t)&v63, (long long *)v39.__r_.__value_.__l.__data_, (long long *)v39.__r_.__value_.__l.__size_, (long long **)&v38);
        uint8x8_t v58 = &v38;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
        uint8x8_t v58 = &v39;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
        if (SHIBYTE(v42) < 0) {
          operator delete(v41[0]);
        }
        if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v40.__r_.__value_.__l.__data_);
        }
        if (v48 < 0) {
          operator delete(__p[0]);
        }
        int v19 = v44;
        if (!v44) {
          goto LABEL_26;
        }
      }
      else
      {
        int v18 = *(void **)this;
        std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
        memset(&v46, 0, sizeof(v46));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v46, (long long *)v59, *((long long **)&v59 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v59 + 1) - v59) >> 3));
        memset(&v45, 0, sizeof(v45));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v45, (long long *)v68, (long long *)v69, 0xAAAAAAAAAAAAAAABLL * (((char *)v69 - (char *)v68) >> 3));
        Espresso::sequential_builder::add<Espresso::elementwise_params>((uint64_t *)v41, v18, (uint64_t)__p, (uint64_t)&v57, (uint64_t)&v63, (long long *)v46.__r_.__value_.__l.__data_, (long long *)v46.__r_.__value_.__l.__size_, (long long **)&v45);
        v40.__r_.__value_.__r.__words[0] = (std::string::size_type)&v45;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
        v40.__r_.__value_.__r.__words[0] = (std::string::size_type)&v46;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
        if (v48 < 0) {
          operator delete(__p[0]);
        }
        int v19 = (std::__shared_weak_count *)v41[1];
        if (!v41[1]) {
          goto LABEL_26;
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v19);
LABEL_26:
      __p[0] = &v68;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      uint64_t v68 = (void **)&v59;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v68);
      ++v7;
      uint64_t v6 = v49;
      v8 += 72;
    }
    while (v7 < 0x8E38E38E38E38E39 * ((v50 - v49) >> 3));
  }
  if (**((unsigned char **)this + 2))
  {
    LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v54);
  }
  else
  {
    unint64_t v25 = (uint64_t **)*((void *)this + 1);
    uint64_t v68 = 0;
    uint64_t v69 = 0;
    unint64_t v70 = 0;
    long long v27 = v51;
    BOOL v26 = v52;
    if (v51 == v52)
    {
      uint64_t v31 = 0;
      uint64_t v32 = 0;
      uint64_t v28 = (uint64_t)v37;
    }
    else
    {
      uint64_t v28 = (uint64_t)v37;
      do
      {
        uint64_t v29 = (long long *)std::map<std::string,std::string>::at((uint64_t)v25, v27);
        int v30 = v69;
        if ((unint64_t)v69 >= v70)
        {
          uint64_t v31 = (long long *)std::vector<Espresso::layer_shape>::__push_back_slow_path<Espresso::layer_shape const&>((uint64_t *)&v68, v29);
        }
        else
        {
          std::vector<Espresso::layer_shape>::__construct_one_at_end[abi:ne180100]<Espresso::layer_shape const&>((uint64_t)&v68, v29);
          uint64_t v31 = (long long *)&v30[2].__r_.__value_.__r.__words[2];
        }
        uint64_t v69 = (std::string *)v31;
        long long v27 = (long long *)((char *)v27 + 24);
      }
      while (v27 != v26);
      uint64_t v32 = (int *)v68;
    }
    EspressoConverter::validateEqualInputShapes(v28, v32, (int *)v31);
    long long v63 = *(_OWORD *)v68;
    long long v64 = *((_OWORD *)v68 + 1);
    int32x2_t v65 = v68[4];
    long long v66 = 0uLL;
    uint64_t v67 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v66, v68[5], (uint64_t)v68[6], ((unsigned char *)v68[6] - (unsigned char *)v68[5]) >> 2);
    long long v59 = v63;
    long long v60 = v64;
    uint64_t v33 = (char *)v66;
    std::string v61 = v65;
    memset(v62, 0, sizeof(v62));
    uint64_t v34 = *((void *)&v66 + 1);
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v62, (const void *)v66, *((uint64_t *)&v66 + 1), (uint64_t)(*((void *)&v66 + 1) - v66) >> 2);
    EspressoConverter::validateShape((int *)&v59, *(void *)(v28 + 112), (uint64_t)v54);
    if (v62[0]) {
      operator delete(v62[0]);
    }
    __p[0] = v54;
    uint64_t v35 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v25, v54, (long long **)__p);
    long long v36 = v64;
    *(_OWORD *)(v35 + 5CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = v63;
    *(_OWORD *)(v35 + 72) = v36;
    *((void *)v35 + 11) = v65;
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v35 + 96, v33, v34, (v34 - (uint64_t)v33) >> 2);
    if (v33) {
      operator delete(v33);
    }
    *(void *)&long long v63 = &v68;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v63);
  }
  *(void *)&long long v63 = &v49;
  std::vector<std::pair<std::pair<std::string,std::string>,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v63);
  *(void *)&long long v63 = &v51;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v63);
  *(void *)&long long v63 = &v54;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v63);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v57.__r_.__value_.__l.__data_);
  }
}

void sub_19EA6CC9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  if (v55) {
    operator delete(v55);
  }
  *(void *)(v56 - 208) = v56 - 136;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)(v56 - 208));
  *(void *)(v56 - 208) = &a34;
  std::vector<std::pair<std::pair<std::string,std::string>,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v56 - 208));
  *(void *)(v56 - 208) = &a37;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v56 - 208));
  *(void *)(v56 - 208) = &a40;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v56 - 208));
  if (a48 < 0) {
    operator delete(a43);
  }
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::add<Espresso::elementwise_params>(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, long long *a6, long long *a7, long long **a8)
{
  memset(&v13, 0, sizeof(v13));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v13, a6, a7, 0xAAAAAAAAAAAAAAABLL * (((char *)a7 - (char *)a6) >> 3));
  memset(&v12, 0, sizeof(v12));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v12, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a8[1] - (char *)*a8) >> 3));
  LODWORD(v15.__r_.__value_.__l.__data_) = (***(uint64_t (****)(void))(a2[14] + 8))(*(void *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  uint64_t v11 = (std::__shared_weak_count *)a1[1];
  uint64_t v16 = *a1;
  int v17 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(&v15, 0, sizeof(v15));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v15, (long long *)v13.__r_.__value_.__l.__data_, (long long *)v13.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13.__r_.__value_.__l.__size_ - v13.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v14, 0, sizeof(v14));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v14, (long long *)v12.__r_.__value_.__l.__data_, (long long *)v12.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12.__r_.__value_.__l.__size_ - v12.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  int v18 = &v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  int v18 = &v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (*a2) {
    Espresso::sequential_builder::add_shape_from_kernel();
  }
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
}

void sub_19EA6D010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v16 = *(std::__shared_weak_count **)(v13 + 8);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  *(void *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(void *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void *std::vector<Espresso::layer_shape>::__construct_one_at_end[abi:ne180100]<Espresso::layer_shape const&>(uint64_t a1, long long *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  long long v4 = *a2;
  long long v5 = a2[1];
  *(void *)(v3 + 32) = *((void *)a2 + 4);
  *(_OWORD *)uint64_t v3 = v4;
  *(_OWORD *)(v3 + 1CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = v5;
  *(void *)(v3 + 48) = 0;
  *(void *)(v3 + 5CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = 0;
  *(void *)(v3 + 40) = 0;
  double result = std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((void *)(v3 + 40), *((const void **)a2 + 5), *((void *)a2 + 6), (uint64_t)(*((void *)a2 + 6) - *((void *)a2 + 5)) >> 2);
  *(void *)(a1 + 8) = v3 + 64;
  return result;
}

void sub_19EA6D0F8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<Espresso::layer_shape>::__push_back_slow_path<Espresso::layer_shape const&>(uint64_t *a1, long long *a2)
{
  uint64_t v2 = (a1[1] - *a1) >> 6;
  unint64_t v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 58) {
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = a1 + 2;
  uint64_t v7 = a1[2] - *a1;
  if (v7 >> 5 > v3) {
    unint64_t v3 = v7 >> 5;
  }
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFC0) {
    unint64_t v8 = 0x3FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v8 = v3;
  }
  int v18 = v6;
  if (v8) {
    unint64_t v8 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::layer_shape>>(v8);
  }
  else {
    uint64_t v9 = 0;
  }
  unint64_t v10 = v8 + (v2 << 6);
  v15[0] = v8;
  v15[1] = v10;
  unint64_t v16 = v10;
  unint64_t v17 = v8 + (v9 << 6);
  long long v11 = *a2;
  long long v12 = a2[1];
  *(void *)(v10 + 32) = *((void *)a2 + 4);
  *(_OWORD *)unint64_t v10 = v11;
  *(_OWORD *)(v10 + 1CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = v12;
  *(void *)(v10 + 48) = 0;
  *(void *)(v10 + 5CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = 0;
  *(void *)(v10 + 40) = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((void *)(v10 + 40), *((const void **)a2 + 5), *((void *)a2 + 6), (uint64_t)(*((void *)a2 + 6) - *((void *)a2 + 5)) >> 2);
  v16 += 64;
  std::vector<Espresso::layer_shape>::__swap_out_circular_buffer(a1, v15);
  uint64_t v13 = a1[1];
  std::__split_buffer<Espresso::layer_shape>::~__split_buffer((uint64_t)v15);
  return v13;
}

void sub_19EA6D1F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<Espresso::layer_shape>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<std::pair<std::pair<std::string,std::string>,std::string>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    long long v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 72;
        std::allocator<std::pair<std::pair<std::string,std::string>,std::string>>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<std::pair<std::pair<std::string,std::string>,std::string>>::destroy[abi:ne180100](uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void LayerTranslator::addScatter(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  uint64_t v4 = (long long *)*((void *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v43, *(const std::string::value_type **)v4, *((void *)v4 + 1));
  }
  else
  {
    long long v5 = *v4;
    v43.__r_.__value_.__r.__words[2] = *((void *)v4 + 2);
    *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v5;
  }
  std::string v40 = 0;
  long long v41 = 0;
  uint64_t v42 = 0;
  int v37 = 0;
  std::string v38 = 0;
  uint64_t v39 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v40, (uint64_t *)&v37, *((void *)this + 1));
  unsigned int v35 = 0;
  __int16 v36 = 257;
  if (*((_DWORD *)a2 + 35) == 935)
  {
    uint64_t v7 = (uint64_t *)*((void *)a2 + 16);
    uint64_t v8 = v7[2];
    int v33 = 0;
    int v34 = v8;
  }
  else
  {
    inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    int v10 = *((_DWORD *)a2 + 35);
    int v33 = 0;
    int v34 = qword_1EB4DFEB0;
    if (v10 == 935)
    {
      uint64_t v7 = (uint64_t *)*((void *)a2 + 16);
    }
    else
    {
      CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
      uint64_t v7 = &CoreML::Specification::_ScatterLayerParams_default_instance_;
    }
  }
  uint64_t v29 = &unk_1EF0D3460;
  v30[0] = 0;
  int v32 = 0;
  uint64_t v11 = v7[1];
  if (v11) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((unint64_t *)v30, v11 & 0xFFFFFFFFFFFFFFFELL);
  }
  uint64_t v12 = v7[2];
  unsigned int v13 = *((_DWORD *)v7 + 6);
  unsigned int v31 = v13;
  v30[1] = v12;
  if (v13 >= 7)
  {
    if (v13 == 0x80000000 || v13 == 0x7FFFFFFF)
    {
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
      std::string v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Scatter layer: '", 16);
      uint64_t v16 = *((void *)a2 + 14);
      int v17 = *(char *)(v16 + 23);
      if (v17 >= 0) {
        uint64_t v18 = *((void *)a2 + 14);
      }
      else {
        uint64_t v18 = *(void *)v16;
      }
      if (v17 >= 0) {
        uint64_t v19 = *(unsigned __int8 *)(v16 + 23);
      }
      else {
        uint64_t v19 = *(void *)(v16 + 8);
      }
      int v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, v18, v19);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"': unknown value for parameter 'mode'.", 38);
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::runtime_error::runtime_error(exception, &v26);
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  else
  {
    unsigned int v35 = v13;
  }
  uint64_t v14 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "scatter_nd");
  memset(&v23, 0, sizeof(v23));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v23, v37, v38, 0xAAAAAAAAAAAAAAABLL * (((char *)v38 - (char *)v37) >> 3));
  memset(&v22, 0, sizeof(v22));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v22, v40, v41, 0xAAAAAAAAAAAAAAABLL * (((char *)v41 - (char *)v40) >> 3));
  Espresso::sequential_builder::add<Espresso::scatter_nd_params_t>(&v24, v14, (uint64_t)__p, (uint64_t)&v43, (uint64_t)&v33, (long long *)v23.__r_.__value_.__l.__data_, (long long *)v23.__r_.__value_.__l.__size_, (long long **)&v22);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  v26.__r_.__value_.__r.__words[0] = (std::string::size_type)&v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
  v26.__r_.__value_.__r.__words[0] = (std::string::size_type)&v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
  if (SHIBYTE(v28) < 0) {
    operator delete(__p[0]);
  }
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v40);
  uint64_t v29 = &unk_1EF0D3460;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v30);
  __p[0] = &v37;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  __p[0] = &v40;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
}

void sub_19EA6D5F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a22 < 0)
  {
    operator delete(__p);
    if ((v31 & 1) == 0)
    {
LABEL_6:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a23);
      *(void *)(v32 - 17CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = v29;
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v28);
      a23 = (void *)(v32 - 128);
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
      a23 = (void *)(v32 - 104);
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
      if (*(char *)(v32 - 57) < 0) {
        operator delete(*(void **)(v32 - 80));
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v31)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v30);
  goto LABEL_6;
}

void Espresso::sequential_builder::add<Espresso::scatter_nd_params_t>(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, long long *a6, long long *a7, long long **a8)
{
  memset(&v13, 0, sizeof(v13));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v13, a6, a7, 0xAAAAAAAAAAAAAAABLL * (((char *)a7 - (char *)a6) >> 3));
  memset(&v12, 0, sizeof(v12));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v12, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a8[1] - (char *)*a8) >> 3));
  LODWORD(v15.__r_.__value_.__l.__data_) = (***(uint64_t (****)(void))(a2[14] + 8))(*(void *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  uint64_t v11 = (std::__shared_weak_count *)a1[1];
  uint64_t v16 = *a1;
  int v17 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(&v15, 0, sizeof(v15));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v15, (long long *)v13.__r_.__value_.__l.__data_, (long long *)v13.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13.__r_.__value_.__l.__size_ - v13.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v14, 0, sizeof(v14));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v14, (long long *)v12.__r_.__value_.__l.__data_, (long long *)v12.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12.__r_.__value_.__l.__size_ - v12.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  uint64_t v18 = &v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  uint64_t v18 = &v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (*a2) {
    Espresso::sequential_builder::add_shape_from_kernel();
  }
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
}

void sub_19EA6D8C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v16 = *(std::__shared_weak_count **)(v13 + 8);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  *(void *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(void *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void LayerTranslator::addGlobalPooling3d(LayerTranslator *this, uint64_t **a2)
{
  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  uint64_t v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v37, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    long long v5 = *(_OWORD *)v4;
    v37.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v5;
  }
  int v34 = 0;
  unsigned int v35 = 0;
  uint64_t v36 = 0;
  int v31 = 0;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v34, (uint64_t *)&v31, *((void *)this + 1));
  if (*((_DWORD *)a2 + 35) == 1466)
  {
    uint64_t v7 = a2[16];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    uint64_t v7 = &CoreML::Specification::_GlobalPooling3DLayerParams_default_instance_;
  }
  long long v27 = &unk_1EF0D70F0;
  uint64_t v28 = 0;
  int v30 = 0;
  uint64_t v8 = v7[1];
  if (v8) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((unint64_t *)&v28, v8 & 0xFFFFFFFFFFFFFFFELL);
  }
  int v9 = *((_DWORD *)v7 + 4);
  int v29 = v9;
  v20[0] = xmmword_19EC7B870;
  v20[1] = xmmword_19EC7B8B0;
  uint64_t v24 = 0;
  uint64_t v23 = 0;
  __int16 v25 = 0;
  if (v9)
  {
    if (v9 == 0x80000000 || v9 == 0x7FFFFFFF)
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v18, v29);
      uint64_t v11 = std::string::insert(&v18, 0, "Unsupported Pooling Type: ");
      long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
      v19.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v12;
      v11->__r_.__value_.__l.__size_ = 0;
      v11->__r_.__value_.__r.__words[2] = 0;
      v11->__r_.__value_.__r.__words[0] = 0;
      std::logic_error::logic_error(exception, &v19);
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
      __cxa_throw(exception, (struct type_info *)off_1E59A3028, MEMORY[0x1E4FBA1E8]);
    }
  }
  else
  {
    LODWORD(v20[0]) = 1;
  }
  int v26 = 1;
  int v21 = 0;
  __int16 v22 = 2;
  uint64_t v13 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(&v19, "pool3d");
  memset(&v15, 0, sizeof(v15));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v15, v31, v32, 0xAAAAAAAAAAAAAAABLL * (((char *)v32 - (char *)v31) >> 3));
  memset(&v14, 0, sizeof(v14));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v14, v34, v35, 0xAAAAAAAAAAAAAAABLL * (((char *)v35 - (char *)v34) >> 3));
  Espresso::sequential_builder::add<Espresso::pool3d_params_t>(&v16, v13, (uint64_t)&v19, (uint64_t)&v37, (uint64_t)v20, (long long *)v15.__r_.__value_.__l.__data_, (long long *)v15.__r_.__value_.__l.__size_, (long long **)&v14);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  v18.__r_.__value_.__r.__words[0] = (std::string::size_type)&v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  v18.__r_.__value_.__r.__words[0] = (std::string::size_type)&v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v34);
  long long v27 = &unk_1EF0D70F0;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(&v28);
  *(void *)&v20[0] = &v31;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v20);
  *(void *)&v20[0] = &v34;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v20);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
}

void sub_19EA6DC4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  if (a23 < 0)
  {
    operator delete(a18);
    if ((v34 & 1) == 0)
    {
LABEL_8:
      *(void *)(v35 - 152) = v32;
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v31);
      a31 = v35 - 128;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a31);
      a31 = v35 - 104;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a31);
      if (*(char *)(v35 - 57) < 0) {
        operator delete(*(void **)(v35 - 80));
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v34)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v33);
  goto LABEL_8;
}

void Espresso::sequential_builder::add<Espresso::pool3d_params_t>(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, long long *a6, long long *a7, long long **a8)
{
  memset(&v13, 0, sizeof(v13));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v13, a6, a7, 0xAAAAAAAAAAAAAAABLL * (((char *)a7 - (char *)a6) >> 3));
  memset(&v12, 0, sizeof(v12));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v12, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a8[1] - (char *)*a8) >> 3));
  LODWORD(v15.__r_.__value_.__l.__data_) = (***(uint64_t (****)(void))(a2[14] + 8))(*(void *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  uint64_t v11 = (std::__shared_weak_count *)a1[1];
  uint64_t v16 = *a1;
  int v17 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(&v15, 0, sizeof(v15));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v15, (long long *)v13.__r_.__value_.__l.__data_, (long long *)v13.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13.__r_.__value_.__l.__size_ - v13.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v14, 0, sizeof(v14));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v14, (long long *)v12.__r_.__value_.__l.__data_, (long long *)v12.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12.__r_.__value_.__l.__size_ - v12.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  std::string v18 = &v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  std::string v18 = &v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (*a2) {
    Espresso::sequential_builder::add_shape_from_kernel();
  }
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
}

void sub_19EA6DF2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v16 = *(std::__shared_weak_count **)(v13 + 8);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  *(void *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(void *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void LayerTranslator::addGatherND(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  uint64_t v4 = (long long *)*((void *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)v4, *((void *)v4 + 1));
  }
  else
  {
    long long v5 = *v4;
    v22.__r_.__value_.__r.__words[2] = *((void *)v4 + 2);
    *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v5;
  }
  std::string v19 = 0;
  int v20 = 0;
  uint64_t v21 = 0;
  uint64_t v16 = 0;
  int v17 = 0;
  uint64_t v18 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v19, (uint64_t *)&v16, *((void *)this + 1));
  int v14 = 0;
  __int16 v15 = 257;
  uint64_t v13 = 1;
  uint64_t v6 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "gather_nd");
  memset(&v8, 0, sizeof(v8));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v8, (long long *)v16, v17, 0xAAAAAAAAAAAAAAABLL * (((char *)v17 - (char *)v16) >> 3));
  memset(&v7, 0, sizeof(v7));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v7, v19, v20, 0xAAAAAAAAAAAAAAABLL * (((char *)v20 - (char *)v19) >> 3));
  Espresso::sequential_builder::add<Espresso::gather_nd_params_t>(&v11, v6, (uint64_t)__p, (uint64_t)&v22, (uint64_t)&v13, (long long *)v8.__r_.__value_.__l.__data_, (long long *)v8.__r_.__value_.__l.__size_, (long long **)&v7);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  uint64_t v23 = &v7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  uint64_t v23 = &v8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v19);
  __p[0] = &v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  uint64_t v16 = (void **)&v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v16);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
}

void sub_19EA6E154(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  long long __p = &a26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  a26 = v26 - 88;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a26);
  if (*(char *)(v26 - 41) < 0) {
    operator delete(*(void **)(v26 - 64));
  }
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::add<Espresso::gather_nd_params_t>(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, long long *a6, long long *a7, long long **a8)
{
  memset(&v13, 0, sizeof(v13));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v13, a6, a7, 0xAAAAAAAAAAAAAAABLL * (((char *)a7 - (char *)a6) >> 3));
  memset(&v12, 0, sizeof(v12));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v12, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a8[1] - (char *)*a8) >> 3));
  LODWORD(v15.__r_.__value_.__l.__data_) = (***(uint64_t (****)(void))(a2[14] + 8))(*(void *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  uint64_t v11 = (std::__shared_weak_count *)a1[1];
  uint64_t v16 = *a1;
  int v17 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(&v15, 0, sizeof(v15));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v15, (long long *)v13.__r_.__value_.__l.__data_, (long long *)v13.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13.__r_.__value_.__l.__size_ - v13.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v14, 0, sizeof(v14));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v14, (long long *)v12.__r_.__value_.__l.__data_, (long long *)v12.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12.__r_.__value_.__l.__size_ - v12.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  uint64_t v18 = &v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  uint64_t v18 = &v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (*a2) {
    Espresso::sequential_builder::add_shape_from_kernel();
  }
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
}

void sub_19EA6E3BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v16 = *(std::__shared_weak_count **)(v13 + 8);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  *(void *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(void *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void LayerTranslator::addSign(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  uint64_t v4 = (long long *)*((void *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)v4, *((void *)v4 + 1));
  }
  else
  {
    long long v5 = *v4;
    v23.__r_.__value_.__r.__words[2] = *((void *)v4 + 2);
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v5;
  }
  int v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  int v17 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v20, (uint64_t *)&v17, *((void *)this + 1));
  v13[2] = (void **)897988541;
  char v14 = 0;
  int v15 = 0;
  int v16 = 0;
  v13[0] = (void **)38;
  v13[1] = (void **)1065353216;
  uint64_t v6 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
  memset(&v8, 0, sizeof(v8));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v8, v17, v18, 0xAAAAAAAAAAAAAAABLL * (((char *)v18 - (char *)v17) >> 3));
  memset(&v7, 0, sizeof(v7));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v7, v20, v21, 0xAAAAAAAAAAAAAAABLL * (((char *)v21 - (char *)v20) >> 3));
  Espresso::sequential_builder::add<Espresso::elementwise_params>(&v11, v6, (uint64_t)__p, (uint64_t)&v23, (uint64_t)v13, (long long *)v8.__r_.__value_.__l.__data_, (long long *)v8.__r_.__value_.__l.__size_, (long long **)&v7);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  uint64_t v24 = &v7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  uint64_t v24 = &v8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v20);
  v13[0] = (void **)&v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v13);
  v13[0] = (void **)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v13);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
}

void sub_19EA6E5F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  a23 = v23 - 112;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  a23 = v23 - 88;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  if (*(char *)(v23 - 41) < 0) {
    operator delete(*(void **)(v23 - 64));
  }
  _Unwind_Resume(a1);
}

void LayerTranslator::addMultiplyBroadcastable(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  uint64_t v4 = (long long *)*((void *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)v4, *((void *)v4 + 1));
  }
  else
  {
    long long v5 = *v4;
    v23.__r_.__value_.__r.__words[2] = *((void *)v4 + 2);
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v5;
  }
  int v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  int v17 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v20, (uint64_t *)&v17, *((void *)this + 1));
  v13[2] = (void **)897988541;
  int v15 = 0;
  int v16 = 0;
  v13[0] = (void **)1;
  v13[1] = (void **)1065353216;
  char v14 = 1;
  uint64_t v6 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
  memset(&v8, 0, sizeof(v8));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v8, v17, v18, 0xAAAAAAAAAAAAAAABLL * (((char *)v18 - (char *)v17) >> 3));
  memset(&v7, 0, sizeof(v7));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v7, v20, v21, 0xAAAAAAAAAAAAAAABLL * (((char *)v21 - (char *)v20) >> 3));
  Espresso::sequential_builder::add<Espresso::elementwise_params>(&v11, v6, (uint64_t)__p, (uint64_t)&v23, (uint64_t)v13, (long long *)v8.__r_.__value_.__l.__data_, (long long *)v8.__r_.__value_.__l.__size_, (long long **)&v7);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  uint64_t v24 = &v7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  uint64_t v24 = &v8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v20);
  v13[0] = (void **)&v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v13);
  v13[0] = (void **)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v13);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
}

void sub_19EA6E82C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  a23 = v23 - 112;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  a23 = v23 - 88;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  if (*(char *)(v23 - 41) < 0) {
    operator delete(*(void **)(v23 - 64));
  }
  _Unwind_Resume(a1);
}

void LayerTranslator::addClampedRelu(LayerTranslator *this, uint64_t **a2)
{
  *(void *)&long long v78 = *MEMORY[0x1E4F143B8];
  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  uint64_t v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v71, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    long long v5 = *(_OWORD *)v4;
    v71.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v71.__r_.__value_.__l.__data_ = v5;
  }
  uint64_t v68 = 0;
  uint64_t v69 = 0;
  uint64_t v70 = 0;
  int32x2_t v65 = 0;
  long long v66 = 0;
  uint64_t v67 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v68, (uint64_t *)&v65, *((void *)this + 1));
  __asm { FMOV            V0.2S, #1.0 }
  uint64_t v61 = _D0;
  uint64_t v63 = 0;
  uint64_t v64 = 0;
  uint64_t v62 = 0;
  uint64_t v55 = 0;
  uint64_t v56 = 1065353216;
  uint64_t v57 = 897988541;
  char v58 = 0;
  uint64_t v59 = 0;
  int v60 = 2;
  if (*((_DWORD *)a2 + 35) == 1460)
  {
    std::string v12 = a2[16];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    std::string v12 = &CoreML::Specification::_ClampedReLULayerParams_default_instance_;
  }
  LODWORD(v61) = *((_DWORD *)v12 + 4);
  uint64_t v13 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "activation");
  if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v71.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v71.__r_.__value_.__l.__size_;
  }
  int v15 = &v76;
  std::string::basic_string[abi:ne180100]((uint64_t)&v76, size + 11);
  if (v77 < 0) {
    int v15 = (long long *)v76;
  }
  if (size)
  {
    if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v16 = &v71;
    }
    else {
      int v16 = (std::string *)v71.__r_.__value_.__r.__words[0];
    }
    memmove(v15, v16, size);
  }
  strcpy((char *)v15 + size, "_leaky_relu");
  memset(&v50, 0, sizeof(v50));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v50, v65, v66, 0xAAAAAAAAAAAAAAABLL * (((char *)v66 - (char *)v65) >> 3));
  std::to_string(&v44, *(_DWORD *)(*((void *)this + 2) + 4));
  int v17 = std::string::append(&v44, "_");
  long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v45.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  int v19 = *((char *)v65 + 23);
  if (v19 >= 0) {
    int v20 = (const std::string::value_type *)v65;
  }
  else {
    int v20 = *(const std::string::value_type **)v65;
  }
  if (v19 >= 0) {
    std::string::size_type v21 = *((unsigned __int8 *)v65 + 23);
  }
  else {
    std::string::size_type v21 = *((void *)v65 + 1);
  }
  uint64_t v22 = std::string::append(&v45, v20, v21);
  long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  uint64_t v24 = std::string::append(&v46, "_leaky_relu");
  long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v74.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v74.__r_.__value_.__l.__data_ = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  uint64_t v47 = 0;
  char v48 = 0;
  uint64_t v49 = 0;
  int v72 = &v47;
  char v73 = 0;
  uint64_t v47 = (std::string *)operator new(0x18uLL);
  char v48 = v47;
  uint64_t v49 = v47 + 1;
  char v48 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v49, (long long *)&v74, (long long *)&v75, v47);
  Espresso::sequential_builder::add<Espresso::activation_params>(&v53, v13, (uint64_t)__p, (uint64_t)&v76, (uint64_t)&v60, (long long *)v50.__r_.__value_.__l.__data_, (long long *)v50.__r_.__value_.__l.__size_, (long long **)&v47);
  if (v54) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v54);
  }
  int v72 = &v47;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v72);
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v74.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v45.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v44.__r_.__value_.__l.__data_);
  }
  v74.__r_.__value_.__r.__words[0] = (std::string::size_type)&v50;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
  if (SHIBYTE(v77) < 0) {
    operator delete((void *)v76);
  }
  if (v52 < 0) {
    operator delete(__p[0]);
  }
  LODWORD(v55) = 119;
  LODWORD(v5CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = -8388609;
  if (*((_DWORD *)a2 + 35) == 1460)
  {
    long long v27 = a2[16];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v26);
    long long v27 = &CoreML::Specification::_ClampedReLULayerParams_default_instance_;
  }
  HIDWORD(v5CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = *((_DWORD *)v27 + 5);
  uint64_t v28 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
  std::to_string(&v45, *(_DWORD *)(*((void *)this + 2) + 4));
  int v29 = std::string::append(&v45, "_");
  long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  int v31 = *((char *)v65 + 23);
  if (v31 >= 0) {
    uint64_t v32 = (const std::string::value_type *)v65;
  }
  else {
    uint64_t v32 = *(const std::string::value_type **)v65;
  }
  if (v31 >= 0) {
    std::string::size_type v33 = *((unsigned __int8 *)v65 + 23);
  }
  else {
    std::string::size_type v33 = *((void *)v65 + 1);
  }
  int v34 = std::string::append(&v46, v32, v33);
  long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
  v74.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v74.__r_.__value_.__l.__data_ = v35;
  v34->__r_.__value_.__l.__size_ = 0;
  v34->__r_.__value_.__r.__words[2] = 0;
  v34->__r_.__value_.__r.__words[0] = 0;
  uint64_t v36 = std::string::append(&v74, "_leaky_relu");
  long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
  int64_t v77 = v36->__r_.__value_.__r.__words[2];
  long long v76 = v37;
  v36->__r_.__value_.__l.__size_ = 0;
  v36->__r_.__value_.__r.__words[2] = 0;
  v36->__r_.__value_.__r.__words[0] = 0;
  uint64_t v39 = 0;
  std::string v40 = 0;
  long long v41 = 0;
  v44.__r_.__value_.__r.__words[0] = (std::string::size_type)&v39;
  v44.__r_.__value_.__s.__data_[8] = 0;
  uint64_t v39 = (long long *)operator new(0x18uLL);
  std::string v40 = v39;
  long long v41 = (char *)v39 + 24;
  std::string v40 = (long long *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v41, &v76, &v78, (std::string *)v39);
  memset(&v38, 0, sizeof(v38));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v38, v68, v69, 0xAAAAAAAAAAAAAAABLL * (((char *)v69 - (char *)v68) >> 3));
  Espresso::sequential_builder::add<Espresso::elementwise_params>(&v42, v28, (uint64_t)__p, (uint64_t)&v71, (uint64_t)&v55, v39, v40, (long long **)&v38);
  if (v43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v43);
  }
  v44.__r_.__value_.__r.__words[0] = (std::string::size_type)&v38;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v44);
  v44.__r_.__value_.__r.__words[0] = (std::string::size_type)&v39;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v44);
  if (SHIBYTE(v77) < 0) {
    operator delete((void *)v76);
  }
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v74.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v45.__r_.__value_.__l.__data_);
  }
  if (v52 < 0) {
    operator delete(__p[0]);
  }
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v68);
  uint64_t v55 = &v65;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v55);
  uint64_t v55 = &v68;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v55);
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v71.__r_.__value_.__l.__data_);
  }
}

void sub_19EA6EE64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52)
{
}

void Espresso::sequential_builder::add<Espresso::activation_params>(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, long long *a6, long long *a7, long long **a8)
{
  memset(&v13, 0, sizeof(v13));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v13, a6, a7, 0xAAAAAAAAAAAAAAABLL * (((char *)a7 - (char *)a6) >> 3));
  memset(&v12, 0, sizeof(v12));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v12, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a8[1] - (char *)*a8) >> 3));
  LODWORD(v15.__r_.__value_.__l.__data_) = (***(uint64_t (****)(void))(a2[14] + 8))(*(void *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  uint64_t v11 = (std::__shared_weak_count *)a1[1];
  uint64_t v16 = *a1;
  int v17 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(&v15, 0, sizeof(v15));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v15, (long long *)v13.__r_.__value_.__l.__data_, (long long *)v13.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13.__r_.__value_.__l.__size_ - v13.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v14, 0, sizeof(v14));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v14, (long long *)v12.__r_.__value_.__l.__data_, (long long *)v12.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12.__r_.__value_.__l.__size_ - v12.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  long long v18 = &v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  long long v18 = &v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (*a2) {
    Espresso::sequential_builder::add_shape_from_kernel();
  }
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
}

void sub_19EA6F1F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v16 = *(std::__shared_weak_count **)(v13 + 8);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  *(void *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(void *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void LayerTranslator::addLayerNormalization(LayerTranslator *this, uint64_t **a2)
{
  uint64_t v417 = *MEMORY[0x1E4F143B8];
  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  uint64_t v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v392, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    long long v5 = *(_OWORD *)v4;
    v392.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v392.__r_.__value_.__l.__data_ = v5;
  }
  v390 = 0;
  v389 = 0;
  uint64_t v391 = 0;
  memset(__str, 0, sizeof(__str));
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v389, (uint64_t *)__str, *((void *)this + 1));
  memset(&v387, 0, sizeof(v387));
  memset(&__s, 0, sizeof(__s));
  long long v385 = 0uLL;
  long long __p = 0;
  std::string::basic_string[abi:ne180100]<0>(&v383, "numerator");
  uint64_t v6 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)std::string::basic_string[abi:ne180100]<0>(&v382, "denominator");
  if (*((_DWORD *)a2 + 35) == 1350)
  {
    std::string v7 = a2[16];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    std::string v7 = &CoreML::Specification::_LayerNormalizationLayerParams_default_instance_;
  }
  uint64_t v377 = 0;
  uint64_t v376 = 0;
  v374 = (std::string **)&unk_1EF0D7F30;
  unint64_t v375 = 0;
  int v8 = *((_DWORD *)v7 + 4);
  if (v8)
  {
    google::protobuf::RepeatedField<double>::Reserve((unsigned int *)&v376, v8);
    memcpy((void *)(v377 + 8), (const void *)(v7[3] + 8), 8 * *((int *)v7 + 4));
    LODWORD(v37CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = *((_DWORD *)v7 + 4);
  }
  int v381 = 0;
  uint64_t v9 = v7[1];
  if (v9) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&v375, v9 & 0xFFFFFFFFFFFFFFFELL);
  }
  if (v7 == &CoreML::Specification::_LayerNormalizationLayerParams_default_instance_)
  {
    v378 = 0;
  }
  else
  {
    if (v7[5]) {
      operator new();
    }
    v378 = 0;
    if (v7[6]) {
      operator new();
    }
  }
  v379 = 0;
  int v380 = *((_DWORD *)v7 + 14);
  v373 = 0;
  uint64_t v372 = 0;
  if (v376)
  {
    google::protobuf::RepeatedField<double>::Reserve((unsigned int *)&v372, v376);
    char v10 = v373;
    memcpy(v373 + 1, (const void *)(v377 + 8), 8 * (int)v376);
    int v11 = v376;
    LODWORD(v372) = v376;
  }
  else
  {
    char v10 = 0;
    int v11 = 0;
  }
  if (v10) {
    std::string v12 = (int *)(v10 + 1);
  }
  else {
    std::string v12 = 0;
  }
  uint64_t v13 = (uint64_t)&v10[v11 + 1];
  if (!v10) {
    uint64_t v13 = 0;
  }
  int v14 = 1;
  while (v12 != (int *)v13)
  {
    int v15 = *v12;
    v12 += 2;
    v14 *= v15;
  }
  uint64_t v367 = 0x100000007;
  uint64_t v369 = 0;
  uint64_t v368 = 0;
  unint64_t v370 = 0xFFFFFFFF00000000;
  uint64_t v366 = 0x358637BD00000001;
  char v371 = 0;
  if ((v392.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v392.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v392.__r_.__value_.__l.__size_;
  }
  int v17 = &v314;
  std::string::basic_string[abi:ne180100]((uint64_t)&v314, size + 23);
  if ((v314.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    int v17 = (std::string *)v314.__r_.__value_.__r.__words[0];
  }
  if (size)
  {
    if ((v392.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v18 = &v392;
    }
    else {
      long long v18 = (std::string *)v392.__r_.__value_.__r.__words[0];
    }
    memmove(v17, v18, size);
  }
  strcpy((char *)v17 + size, "_numerator_reduce_mean_");
  std::to_string(&v414, *(_DWORD *)(*((void *)this + 2) + 4));
  if ((v414.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v19 = &v414;
  }
  else {
    int v19 = (std::string *)v414.__r_.__value_.__r.__words[0];
  }
  if ((v414.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v20 = HIBYTE(v414.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v20 = v414.__r_.__value_.__l.__size_;
  }
  std::string::size_type v21 = std::string::append(&v314, (const std::string::value_type *)v19, v20);
  uint64_t v22 = (void *)v21->__r_.__value_.__r.__words[0];
  v411.__r_.__value_.__r.__words[0] = v21->__r_.__value_.__l.__size_;
  *(std::string::size_type *)((char *)v411.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v21->__r_.__value_.__r.__words[1] + 7);
  char v23 = HIBYTE(v21->__r_.__value_.__r.__words[2]);
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v385) < 0) {
    operator delete(__p);
  }
  long long __p = v22;
  *(void *)&long long v385 = v411.__r_.__value_.__r.__words[0];
  *(void *)((char *)&v385 + 7) = *(std::string::size_type *)((char *)v411.__r_.__value_.__r.__words + 7);
  HIBYTE(v385) = v23;
  if (SHIBYTE(v414.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v414.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v314.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v314.__r_.__value_.__l.__data_);
  }
  std::string::operator=(&v387, __str[0]);
  MEMORY[0x19F3C1430](&__s, "reduce_mean");
  if (v11 == 1)
  {
    LODWORD(v367) = 1;
    uint64_t v24 = *(void **)this;
    std::string::basic_string[abi:ne180100]<0>(&v314, "reduce");
    if (SHIBYTE(v387.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v414, v387.__r_.__value_.__l.__data_, v387.__r_.__value_.__l.__size_);
    }
    else {
      std::string v414 = v387;
    }
    v362 = 0;
    v361 = 0;
    v363 = 0;
    v411.__r_.__value_.__r.__words[0] = (std::string::size_type)&v361;
    v411.__r_.__value_.__s.__data_[8] = 0;
    v361 = (long long *)operator new(0x18uLL);
    v362 = v361;
    v363 = (char *)v361 + 24;
    v362 = (long long *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v363, (long long *)&v414, &v415, (std::string *)v361);
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v411, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
    }
    else {
      std::string v411 = __s;
    }
    v359 = 0;
    v358 = 0;
    v360 = 0;
    v407.__r_.__value_.__r.__words[0] = (std::string::size_type)&v358;
    v407.__r_.__value_.__s.__data_[8] = 0;
    v358 = (std::string *)operator new(0x18uLL);
    v359 = v358;
    v360 = v358 + 1;
    v359 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v360, (long long *)&v411, &v412, v358);
    Espresso::sequential_builder::add<Espresso::reduce_params_t>(&v364, v24, (uint64_t)&v314, (uint64_t)&__p, (uint64_t)&v366, v361, v362, (long long **)&v358);
    if (v365) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v365);
    }
    v407.__r_.__value_.__r.__words[0] = (std::string::size_type)&v358;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v407);
    if (SHIBYTE(v411.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v411.__r_.__value_.__l.__data_);
    }
    uint64_t v26 = &v361;
LABEL_65:
    v411.__r_.__value_.__r.__words[0] = (std::string::size_type)v26;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v411);
    if (SHIBYTE(v414.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v414.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v314.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v314.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    switch(v11)
    {
      case 2:
        LODWORD(v367) = 3;
        long long v25 = *(void **)this;
        std::string::basic_string[abi:ne180100]<0>(&v314, "reduce");
        if (SHIBYTE(v387.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v414, v387.__r_.__value_.__l.__data_, v387.__r_.__value_.__l.__size_);
        }
        else {
          std::string v414 = v387;
        }
        v354 = 0;
        v353 = 0;
        v355 = 0;
        v411.__r_.__value_.__r.__words[0] = (std::string::size_type)&v353;
        v411.__r_.__value_.__s.__data_[8] = 0;
        v353 = (long long *)operator new(0x18uLL);
        v354 = v353;
        v355 = (char *)v353 + 24;
        v354 = (long long *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v355, (long long *)&v414, &v415, (std::string *)v353);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v411, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
        }
        else {
          std::string v411 = __s;
        }
        v351 = 0;
        v350 = 0;
        v352 = 0;
        v407.__r_.__value_.__r.__words[0] = (std::string::size_type)&v350;
        v407.__r_.__value_.__s.__data_[8] = 0;
        v350 = (std::string *)operator new(0x18uLL);
        v351 = v350;
        v352 = v350 + 1;
        v351 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v352, (long long *)&v411, &v412, v350);
        Espresso::sequential_builder::add<Espresso::reduce_params_t>(&v356, v25, (uint64_t)&v314, (uint64_t)&__p, (uint64_t)&v366, v353, v354, (long long **)&v350);
        if (v357) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v357);
        }
        v407.__r_.__value_.__r.__words[0] = (std::string::size_type)&v350;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v407);
        if (SHIBYTE(v411.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v411.__r_.__value_.__l.__data_);
        }
        uint64_t v26 = &v353;
        goto LABEL_65;
      case 3:
        LODWORD(v367) = 7;
        v173 = *(void **)this;
        std::string::basic_string[abi:ne180100]<0>(&v314, "reduce");
        if (SHIBYTE(v387.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v414, v387.__r_.__value_.__l.__data_, v387.__r_.__value_.__l.__size_);
        }
        else {
          std::string v414 = v387;
        }
        v346 = 0;
        v345 = 0;
        v347 = 0;
        v411.__r_.__value_.__r.__words[0] = (std::string::size_type)&v345;
        v411.__r_.__value_.__s.__data_[8] = 0;
        v345 = (long long *)operator new(0x18uLL);
        v346 = v345;
        v347 = (char *)v345 + 24;
        v346 = (long long *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v347, (long long *)&v414, &v415, (std::string *)v345);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v411, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
        }
        else {
          std::string v411 = __s;
        }
        v343 = 0;
        v342 = 0;
        v344 = 0;
        v407.__r_.__value_.__r.__words[0] = (std::string::size_type)&v342;
        v407.__r_.__value_.__s.__data_[8] = 0;
        v342 = (std::string *)operator new(0x18uLL);
        v343 = v342;
        v344 = v342 + 1;
        v343 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v344, (long long *)&v411, &v412, v342);
        Espresso::sequential_builder::add<Espresso::reduce_params_t>(&v348, v173, (uint64_t)&v314, (uint64_t)&__p, (uint64_t)&v366, v345, v346, (long long **)&v342);
        if (v349) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v349);
        }
        v407.__r_.__value_.__r.__words[0] = (std::string::size_type)&v342;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v407);
        if (SHIBYTE(v411.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v411.__r_.__value_.__l.__data_);
        }
        uint64_t v26 = &v345;
        goto LABEL_65;
      case 4:
        LODWORD(v367) = 7;
        v174 = *(void **)this;
        std::string::basic_string[abi:ne180100]<0>(&v314, "reduce");
        if (v385 >= 0) {
          size_t v175 = HIBYTE(v385);
        }
        else {
          size_t v175 = v385;
        }
        char v176 = &v414;
        std::string::basic_string[abi:ne180100]((uint64_t)&v414, v175 + 5);
        if ((v414.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          char v176 = (std::string *)v414.__r_.__value_.__r.__words[0];
        }
        if (v175)
        {
          if (v385 >= 0) {
            p_p = &__p;
          }
          else {
            p_p = __p;
          }
          memmove(v176, p_p, v175);
        }
        strcpy((char *)v176 + v175, "_temp");
        if (SHIBYTE(v387.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v411, v387.__r_.__value_.__l.__data_, v387.__r_.__value_.__l.__size_);
        }
        else {
          std::string v411 = v387;
        }
        v338 = 0;
        v337 = 0;
        v339 = 0;
        v407.__r_.__value_.__r.__words[0] = (std::string::size_type)&v337;
        v407.__r_.__value_.__s.__data_[8] = 0;
        v337 = (long long *)operator new(0x18uLL);
        v338 = v337;
        v339 = (char *)v337 + 24;
        v338 = (long long *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v339, (long long *)&v411, &v412, (std::string *)v337);
        std::string::basic_string[abi:ne180100]<0>(&v407, "temp");
        v335 = 0;
        v334 = 0;
        v336 = 0;
        v402.__r_.__value_.__r.__words[0] = (std::string::size_type)&v334;
        v402.__r_.__value_.__s.__data_[8] = 0;
        v334 = (std::string *)operator new(0x18uLL);
        v335 = v334;
        v336 = v334 + 1;
        v335 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v336, (long long *)&v407, &v408, v334);
        Espresso::sequential_builder::add<Espresso::reduce_params_t>(&v340, v174, (uint64_t)&v314, (uint64_t)&v414, (uint64_t)&v366, v337, v338, (long long **)&v334);
        if (v341) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v341);
        }
        v402.__r_.__value_.__r.__words[0] = (std::string::size_type)&v334;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v402);
        if (SHIBYTE(v407.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v407.__r_.__value_.__l.__data_);
        }
        v407.__r_.__value_.__r.__words[0] = (std::string::size_type)&v337;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v407);
        if (SHIBYTE(v411.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v411.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v414.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v414.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v314.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v314.__r_.__value_.__l.__data_);
        }
        LODWORD(v367) = 8;
        double v185 = *(void **)this;
        std::string::basic_string[abi:ne180100]<0>(&v314, "reduce");
        std::string::basic_string[abi:ne180100]<0>(&v414, "temp");
        v330 = 0;
        v329 = 0;
        v331 = 0;
        v411.__r_.__value_.__r.__words[0] = (std::string::size_type)&v329;
        v411.__r_.__value_.__s.__data_[8] = 0;
        v329 = (long long *)operator new(0x18uLL);
        v330 = v329;
        v331 = (char *)v329 + 24;
        v330 = (long long *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v331, (long long *)&v414, &v415, (std::string *)v329);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v411, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
        }
        else {
          std::string v411 = __s;
        }
        v327 = 0;
        v326 = 0;
        v328 = 0;
        v407.__r_.__value_.__r.__words[0] = (std::string::size_type)&v326;
        v407.__r_.__value_.__s.__data_[8] = 0;
        v326 = (std::string *)operator new(0x18uLL);
        v327 = v326;
        v328 = v326 + 1;
        v327 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v328, (long long *)&v411, &v412, v326);
        Espresso::sequential_builder::add<Espresso::reduce_params_t>(&v332, v185, (uint64_t)&v314, (uint64_t)&__p, (uint64_t)&v366, v329, v330, (long long **)&v326);
        if (v333) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v333);
        }
        v407.__r_.__value_.__r.__words[0] = (std::string::size_type)&v326;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v407);
        if (SHIBYTE(v411.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v411.__r_.__value_.__l.__data_);
        }
        uint64_t v26 = &v329;
        goto LABEL_65;
      case 5:
        LODWORD(v367) = 31;
        id v178 = *(void **)this;
        std::string::basic_string[abi:ne180100]<0>(&v314, "reduce");
        if (SHIBYTE(v387.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v414, v387.__r_.__value_.__l.__data_, v387.__r_.__value_.__l.__size_);
        }
        else {
          std::string v414 = v387;
        }
        v322 = 0;
        v321 = 0;
        v323 = 0;
        v411.__r_.__value_.__r.__words[0] = (std::string::size_type)&v321;
        v411.__r_.__value_.__s.__data_[8] = 0;
        v321 = (long long *)operator new(0x18uLL);
        v322 = v321;
        v323 = (char *)v321 + 24;
        v322 = (long long *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v323, (long long *)&v414, &v415, (std::string *)v321);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v411, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
        }
        else {
          std::string v411 = __s;
        }
        v319 = 0;
        v318 = 0;
        v320 = 0;
        v407.__r_.__value_.__r.__words[0] = (std::string::size_type)&v318;
        v407.__r_.__value_.__s.__data_[8] = 0;
        v318 = (std::string *)operator new(0x18uLL);
        v319 = v318;
        v320 = v318 + 1;
        v319 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v320, (long long *)&v411, &v412, v318);
        Espresso::sequential_builder::add<Espresso::reduce_params_t>(&v324, v178, (uint64_t)&v314, (uint64_t)&__p, (uint64_t)&v366, v321, v322, (long long **)&v318);
        if (v325) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v325);
        }
        v407.__r_.__value_.__r.__words[0] = (std::string::size_type)&v318;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v407);
        if (SHIBYTE(v411.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v411.__r_.__value_.__l.__data_);
        }
        uint64_t v26 = &v321;
        goto LABEL_65;
      default:
        break;
    }
  }
  v314.__r_.__value_.__r.__words[2] = 897988541;
  int v317 = 0;
  int v316 = 0;
  v314.__r_.__value_.__l.__size_ = 1065353216;
  v314.__r_.__value_.__r.__words[0] = 33;
  char v315 = 1;
  std::string::operator=(&v387, &__s);
  if ((v392.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v27 = HIBYTE(v392.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v27 = v392.__r_.__value_.__l.__size_;
  }
  uint64_t v28 = &v407;
  std::string::basic_string[abi:ne180100]((uint64_t)&v407, v27 + 1);
  if ((v407.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v28 = (std::string *)v407.__r_.__value_.__r.__words[0];
  }
  if (v27)
  {
    if ((v392.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v29 = &v392;
    }
    else {
      int v29 = (std::string *)v392.__r_.__value_.__r.__words[0];
    }
    memmove(v28, v29, v27);
  }
  *(_WORD *)((char *)&v28->__r_.__value_.__l.__data_ + v27) = 95;
  if ((v383.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v30 = &v383;
  }
  else {
    long long v30 = (std::string *)v383.__r_.__value_.__r.__words[0];
  }
  if ((v383.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v31 = HIBYTE(v383.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v31 = v383.__r_.__value_.__l.__size_;
  }
  uint64_t v32 = std::string::append(&v407, (const std::string::value_type *)v30, v31);
  long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
  v411.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v411.__r_.__value_.__l.__data_ = v33;
  v32->__r_.__value_.__l.__size_ = 0;
  v32->__r_.__value_.__r.__words[2] = 0;
  v32->__r_.__value_.__r.__words[0] = 0;
  int v34 = std::string::append(&v411, "_");
  long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
  v414.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v414.__r_.__value_.__l.__data_ = v35;
  v34->__r_.__value_.__l.__size_ = 0;
  v34->__r_.__value_.__r.__words[2] = 0;
  v34->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v402, *(_DWORD *)(*((void *)this + 2) + 4));
  if ((v402.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v36 = &v402;
  }
  else {
    uint64_t v36 = (std::string *)v402.__r_.__value_.__r.__words[0];
  }
  if ((v402.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v37 = HIBYTE(v402.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v37 = v402.__r_.__value_.__l.__size_;
  }
  std::string v38 = std::string::append(&v414, (const std::string::value_type *)v36, v37);
  uint64_t v39 = (void *)v38->__r_.__value_.__r.__words[0];
  v398.__r_.__value_.__r.__words[0] = v38->__r_.__value_.__l.__size_;
  *(std::string::size_type *)((char *)v398.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v38->__r_.__value_.__r.__words[1] + 7);
  char v40 = HIBYTE(v38->__r_.__value_.__r.__words[2]);
  v38->__r_.__value_.__l.__size_ = 0;
  v38->__r_.__value_.__r.__words[2] = 0;
  v38->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v385) < 0) {
    operator delete(__p);
  }
  long long __p = v39;
  *(void *)&long long v385 = v398.__r_.__value_.__r.__words[0];
  *(void *)((char *)&v385 + 7) = *(std::string::size_type *)((char *)v398.__r_.__value_.__r.__words + 7);
  HIBYTE(v385) = v40;
  if (SHIBYTE(v402.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v402.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v414.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v414.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v411.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v411.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v407.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v407.__r_.__value_.__l.__data_);
  }
  long long v41 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(&v411, "elementwise");
  if (SHIBYTE(__str[0]->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v414, __str[0]->__r_.__value_.__l.__data_, __str[0]->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v42 = *(_OWORD *)__str[0];
    v414.__r_.__value_.__r.__words[2] = __str[0]->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v414.__r_.__value_.__l.__data_ = v42;
  }
  if (SHIBYTE(v387.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v415, v387.__r_.__value_.__l.__data_, v387.__r_.__value_.__l.__size_);
  }
  else
  {
    long long v415 = *(_OWORD *)&v387.__r_.__value_.__l.__data_;
    *(void *)v416 = *((void *)&v387.__r_.__value_.__l + 2);
  }
  v310 = 0;
  v309 = 0;
  v311 = 0;
  v407.__r_.__value_.__r.__words[0] = (std::string::size_type)&v309;
  v407.__r_.__value_.__s.__data_[8] = 0;
  v309 = (long long *)operator new(0x30uLL);
  v310 = v309;
  v311 = v309 + 3;
  v310 = (long long *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v311, (long long *)&v414, (long long *)&v416[8], (std::string *)v309);
  if (SHIBYTE(v383.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v407, v383.__r_.__value_.__l.__data_, v383.__r_.__value_.__l.__size_);
  }
  else {
    std::string v407 = v383;
  }
  v307 = 0;
  v306 = 0;
  v308 = 0;
  v402.__r_.__value_.__r.__words[0] = (std::string::size_type)&v306;
  v402.__r_.__value_.__s.__data_[8] = 0;
  v306 = (std::string *)operator new(0x18uLL);
  v307 = v306;
  v308 = v306 + 1;
  v307 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v308, (long long *)&v407, &v408, v306);
  Espresso::sequential_builder::add<Espresso::elementwise_params>(&v312, v41, (uint64_t)&v411, (uint64_t)&__p, (uint64_t)&v314, v309, v310, (long long **)&v306);
  if (v313) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v313);
  }
  v402.__r_.__value_.__r.__words[0] = (std::string::size_type)&v306;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v402);
  if (SHIBYTE(v407.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v407.__r_.__value_.__l.__data_);
  }
  v407.__r_.__value_.__r.__words[0] = (std::string::size_type)&v309;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v407);
  for (uint64_t i = 0; i != -48; i -= 24)
  {
    if ((char)v416[i + 7] < 0) {
      operator delete(*(void **)((char *)&v414 + i + 24));
    }
  }
  if (SHIBYTE(v411.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v411.__r_.__value_.__l.__data_);
  }
  uint64_t v301 = 0x100000007;
  uint64_t v302 = 0;
  uint64_t v303 = 0;
  unint64_t v304 = 0xFFFFFFFF00000000;
  uint64_t v300 = 0x358637BD00000005;
  char v305 = 0;
  if ((v392.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v44 = HIBYTE(v392.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v44 = v392.__r_.__value_.__l.__size_;
  }
  std::string v45 = &v414;
  std::string::basic_string[abi:ne180100]((uint64_t)&v414, v44 + 23);
  if ((v414.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string v45 = (std::string *)v414.__r_.__value_.__r.__words[0];
  }
  if (v44)
  {
    if ((v392.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string v46 = &v392;
    }
    else {
      std::string v46 = (std::string *)v392.__r_.__value_.__r.__words[0];
    }
    memmove(v45, v46, v44);
  }
  strcpy((char *)v45 + v44, "_denominator_reduce_l2_");
  std::to_string(&v411, *(_DWORD *)(*((void *)this + 2) + 4));
  if ((v411.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v47 = &v411;
  }
  else {
    uint64_t v47 = (std::string *)v411.__r_.__value_.__r.__words[0];
  }
  if ((v411.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v48 = HIBYTE(v411.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v48 = v411.__r_.__value_.__l.__size_;
  }
  uint64_t v49 = std::string::append(&v414, (const std::string::value_type *)v47, v48);
  std::string v50 = (void *)v49->__r_.__value_.__r.__words[0];
  v407.__r_.__value_.__r.__words[0] = v49->__r_.__value_.__l.__size_;
  *(std::string::size_type *)((char *)v407.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v49->__r_.__value_.__r.__words[1] + 7);
  char v51 = HIBYTE(v49->__r_.__value_.__r.__words[2]);
  v49->__r_.__value_.__l.__size_ = 0;
  v49->__r_.__value_.__r.__words[2] = 0;
  v49->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v385) < 0) {
    operator delete(__p);
  }
  long long __p = v50;
  *(void *)&long long v385 = v407.__r_.__value_.__r.__words[0];
  *(void *)((char *)&v385 + 7) = *(std::string::size_type *)((char *)v407.__r_.__value_.__r.__words + 7);
  HIBYTE(v385) = v51;
  if (SHIBYTE(v411.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v411.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v414.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v414.__r_.__value_.__l.__data_);
  }
  std::string::operator=(&v387, &v383);
  MEMORY[0x19F3C1430](&__s, "reduce_l2");
  if (v11 == 1)
  {
    LODWORD(v301) = 1;
    char v52 = *(void **)this;
    std::string::basic_string[abi:ne180100]<0>(&v414, "reduce");
    if (SHIBYTE(v387.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v411, v387.__r_.__value_.__l.__data_, v387.__r_.__value_.__l.__size_);
    }
    else {
      std::string v411 = v387;
    }
    v296 = 0;
    v295 = 0;
    v297 = 0;
    v407.__r_.__value_.__r.__words[0] = (std::string::size_type)&v295;
    v407.__r_.__value_.__s.__data_[8] = 0;
    v295 = (long long *)operator new(0x18uLL);
    v296 = v295;
    v297 = (char *)v295 + 24;
    v296 = (long long *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v297, (long long *)&v411, &v412, (std::string *)v295);
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v407, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
    }
    else {
      std::string v407 = __s;
    }
    v293 = 0;
    v292 = 0;
    v294 = 0;
    v402.__r_.__value_.__r.__words[0] = (std::string::size_type)&v292;
    v402.__r_.__value_.__s.__data_[8] = 0;
    v292 = (std::string *)operator new(0x18uLL);
    v293 = v292;
    v294 = v292 + 1;
    v293 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v294, (long long *)&v407, &v408, v292);
    Espresso::sequential_builder::add<Espresso::reduce_params_t>(&v298, v52, (uint64_t)&v414, (uint64_t)&__p, (uint64_t)&v300, v295, v296, (long long **)&v292);
    if (v299) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v299);
    }
    v402.__r_.__value_.__r.__words[0] = (std::string::size_type)&v292;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v402);
    if (SHIBYTE(v407.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v407.__r_.__value_.__l.__data_);
    }
    uint64_t v54 = &v295;
LABEL_157:
    v407.__r_.__value_.__r.__words[0] = (std::string::size_type)v54;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v407);
    if (SHIBYTE(v411.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v411.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v414.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v414.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    switch(v11)
    {
      case 2:
        LODWORD(v301) = 3;
        uint64_t v53 = *(void **)this;
        std::string::basic_string[abi:ne180100]<0>(&v414, "reduce");
        if (SHIBYTE(v387.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v411, v387.__r_.__value_.__l.__data_, v387.__r_.__value_.__l.__size_);
        }
        else {
          std::string v411 = v387;
        }
        v288 = 0;
        v287 = 0;
        v289 = 0;
        v407.__r_.__value_.__r.__words[0] = (std::string::size_type)&v287;
        v407.__r_.__value_.__s.__data_[8] = 0;
        v287 = (long long *)operator new(0x18uLL);
        v288 = v287;
        v289 = (char *)v287 + 24;
        v288 = (long long *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v289, (long long *)&v411, &v412, (std::string *)v287);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v407, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
        }
        else {
          std::string v407 = __s;
        }
        v285 = 0;
        v284 = 0;
        v286 = 0;
        v402.__r_.__value_.__r.__words[0] = (std::string::size_type)&v284;
        v402.__r_.__value_.__s.__data_[8] = 0;
        v284 = (std::string *)operator new(0x18uLL);
        v285 = v284;
        v286 = v284 + 1;
        v285 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v286, (long long *)&v407, &v408, v284);
        Espresso::sequential_builder::add<Espresso::reduce_params_t>(&v290, v53, (uint64_t)&v414, (uint64_t)&__p, (uint64_t)&v300, v287, v288, (long long **)&v284);
        if (v291) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v291);
        }
        v402.__r_.__value_.__r.__words[0] = (std::string::size_type)&v284;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v402);
        if (SHIBYTE(v407.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v407.__r_.__value_.__l.__data_);
        }
        uint64_t v54 = &v287;
        goto LABEL_157;
      case 3:
        LODWORD(v301) = 7;
        uint64_t v179 = *(void **)this;
        std::string::basic_string[abi:ne180100]<0>(&v414, "reduce");
        if (SHIBYTE(v387.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v411, v387.__r_.__value_.__l.__data_, v387.__r_.__value_.__l.__size_);
        }
        else {
          std::string v411 = v387;
        }
        v280 = 0;
        v279 = 0;
        v281 = 0;
        v407.__r_.__value_.__r.__words[0] = (std::string::size_type)&v279;
        v407.__r_.__value_.__s.__data_[8] = 0;
        v279 = (long long *)operator new(0x18uLL);
        v280 = v279;
        v281 = (char *)v279 + 24;
        v280 = (long long *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v281, (long long *)&v411, &v412, (std::string *)v279);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v407, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
        }
        else {
          std::string v407 = __s;
        }
        v277 = 0;
        v276 = 0;
        v278 = 0;
        v402.__r_.__value_.__r.__words[0] = (std::string::size_type)&v276;
        v402.__r_.__value_.__s.__data_[8] = 0;
        v276 = (std::string *)operator new(0x18uLL);
        v277 = v276;
        v278 = v276 + 1;
        v277 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v278, (long long *)&v407, &v408, v276);
        Espresso::sequential_builder::add<Espresso::reduce_params_t>(&v282, v179, (uint64_t)&v414, (uint64_t)&__p, (uint64_t)&v300, v279, v280, (long long **)&v276);
        if (v283) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v283);
        }
        v402.__r_.__value_.__r.__words[0] = (std::string::size_type)&v276;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v402);
        if (SHIBYTE(v407.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v407.__r_.__value_.__l.__data_);
        }
        uint64_t v54 = &v279;
        goto LABEL_157;
      case 4:
        LODWORD(v301) = 7;
        double v180 = *(void **)this;
        std::string::basic_string[abi:ne180100]<0>(&v414, "reduce");
        if (v385 >= 0) {
          size_t v181 = HIBYTE(v385);
        }
        else {
          size_t v181 = v385;
        }
        double v182 = &v411;
        std::string::basic_string[abi:ne180100]((uint64_t)&v411, v181 + 5);
        if ((v411.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          double v182 = (std::string *)v411.__r_.__value_.__r.__words[0];
        }
        if (v181)
        {
          if (v385 >= 0) {
            id v183 = &__p;
          }
          else {
            id v183 = __p;
          }
          memmove(v182, v183, v181);
        }
        strcpy((char *)v182 + v181, "_temp");
        if (SHIBYTE(v387.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v407, v387.__r_.__value_.__l.__data_, v387.__r_.__value_.__l.__size_);
        }
        else {
          std::string v407 = v387;
        }
        v272 = 0;
        v271 = 0;
        v273 = 0;
        v402.__r_.__value_.__r.__words[0] = (std::string::size_type)&v271;
        v402.__r_.__value_.__s.__data_[8] = 0;
        v271 = (long long *)operator new(0x18uLL);
        v272 = v271;
        v273 = (char *)v271 + 24;
        v272 = (long long *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v273, (long long *)&v407, &v408, (std::string *)v271);
        std::string::basic_string[abi:ne180100]<0>(&v402, "temp");
        v269 = 0;
        v268 = 0;
        v270 = 0;
        v398.__r_.__value_.__r.__words[0] = (std::string::size_type)&v268;
        v398.__r_.__value_.__s.__data_[8] = 0;
        v268 = (std::string *)operator new(0x18uLL);
        v269 = v268;
        v270 = v268 + 1;
        v269 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v270, (long long *)&v402, (long long *)&v403, v268);
        Espresso::sequential_builder::add<Espresso::reduce_params_t>(&v274, v180, (uint64_t)&v414, (uint64_t)&v411, (uint64_t)&v300, v271, v272, (long long **)&v268);
        if (v275) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v275);
        }
        v398.__r_.__value_.__r.__words[0] = (std::string::size_type)&v268;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v398);
        if (SHIBYTE(v402.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v402.__r_.__value_.__l.__data_);
        }
        v402.__r_.__value_.__r.__words[0] = (std::string::size_type)&v271;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v402);
        if (SHIBYTE(v407.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v407.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v411.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v411.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v414.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v414.__r_.__value_.__l.__data_);
        }
        LODWORD(v301) = 8;
        v186 = *(void **)this;
        std::string::basic_string[abi:ne180100]<0>(&v414, "reduce");
        std::string::basic_string[abi:ne180100]<0>(&v411, "temp");
        v264 = 0;
        v263 = 0;
        v265 = 0;
        v407.__r_.__value_.__r.__words[0] = (std::string::size_type)&v263;
        v407.__r_.__value_.__s.__data_[8] = 0;
        v263 = (long long *)operator new(0x18uLL);
        v264 = v263;
        v265 = (char *)v263 + 24;
        v264 = (long long *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v265, (long long *)&v411, &v412, (std::string *)v263);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v407, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
        }
        else {
          std::string v407 = __s;
        }
        v261 = 0;
        v260 = 0;
        v262 = 0;
        v402.__r_.__value_.__r.__words[0] = (std::string::size_type)&v260;
        v402.__r_.__value_.__s.__data_[8] = 0;
        v260 = (std::string *)operator new(0x18uLL);
        v261 = v260;
        v262 = v260 + 1;
        v261 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v262, (long long *)&v407, &v408, v260);
        Espresso::sequential_builder::add<Espresso::reduce_params_t>(&v266, v186, (uint64_t)&v414, (uint64_t)&__p, (uint64_t)&v300, v263, v264, (long long **)&v260);
        if (v267) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v267);
        }
        v402.__r_.__value_.__r.__words[0] = (std::string::size_type)&v260;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v402);
        if (SHIBYTE(v407.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v407.__r_.__value_.__l.__data_);
        }
        uint64_t v54 = &v263;
        goto LABEL_157;
      case 5:
        LODWORD(v301) = 31;
        v184 = *(void **)this;
        std::string::basic_string[abi:ne180100]<0>(&v414, "reduce");
        if (SHIBYTE(v387.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v411, v387.__r_.__value_.__l.__data_, v387.__r_.__value_.__l.__size_);
        }
        else {
          std::string v411 = v387;
        }
        v256 = 0;
        v255 = 0;
        v257 = 0;
        v407.__r_.__value_.__r.__words[0] = (std::string::size_type)&v255;
        v407.__r_.__value_.__s.__data_[8] = 0;
        v255 = (long long *)operator new(0x18uLL);
        v256 = v255;
        v257 = (char *)v255 + 24;
        v256 = (long long *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v257, (long long *)&v411, &v412, (std::string *)v255);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v407, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
        }
        else {
          std::string v407 = __s;
        }
        v253 = 0;
        v252 = 0;
        v254 = 0;
        v402.__r_.__value_.__r.__words[0] = (std::string::size_type)&v252;
        v402.__r_.__value_.__s.__data_[8] = 0;
        v252 = (std::string *)operator new(0x18uLL);
        v253 = v252;
        v254 = v252 + 1;
        v253 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v254, (long long *)&v407, &v408, v252);
        Espresso::sequential_builder::add<Espresso::reduce_params_t>(&v258, v184, (uint64_t)&v414, (uint64_t)&__p, (uint64_t)&v300, v255, v256, (long long **)&v252);
        if (v259) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v259);
        }
        v402.__r_.__value_.__r.__words[0] = (std::string::size_type)&v252;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v402);
        if (SHIBYTE(v407.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v407.__r_.__value_.__l.__data_);
        }
        uint64_t v54 = &v255;
        goto LABEL_157;
      default:
        break;
    }
  }
  v414.__r_.__value_.__r.__words[2] = 897988541;
  *(void *)&v416[4] = 0;
  v414.__r_.__value_.__r.__words[0] = 1;
  *(float *)&v414.__r_.__value_.__r.__words[1] = 1.0 / (float)v14;
  HIDWORD(v414.__r_.__value_.__r.__words[1]) = v380;
  LOBYTE(v415) = 0;
  std::string::operator=(&v387, &__s);
  MEMORY[0x19F3C1430](&__s, "square_of_denominator");
  if ((v392.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v55 = HIBYTE(v392.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v55 = v392.__r_.__value_.__l.__size_;
  }
  uint64_t v56 = &v402;
  std::string::basic_string[abi:ne180100]((uint64_t)&v402, v55 + 1);
  if ((v402.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v56 = (std::string *)v402.__r_.__value_.__r.__words[0];
  }
  if (v55)
  {
    if ((v392.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v57 = &v392;
    }
    else {
      uint64_t v57 = (std::string *)v392.__r_.__value_.__r.__words[0];
    }
    memmove(v56, v57, v55);
  }
  *(_WORD *)((char *)&v56->__r_.__value_.__l.__data_ + v55) = 95;
  if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_s = &__s;
  }
  else {
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v59 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v59 = __s.__r_.__value_.__l.__size_;
  }
  int v60 = std::string::append(&v402, (const std::string::value_type *)p_s, v59);
  long long v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
  v407.__r_.__value_.__r.__words[2] = v60->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v407.__r_.__value_.__l.__data_ = v61;
  v60->__r_.__value_.__l.__size_ = 0;
  v60->__r_.__value_.__r.__words[2] = 0;
  v60->__r_.__value_.__r.__words[0] = 0;
  uint64_t v62 = std::string::append(&v407, "_");
  long long v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
  v411.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v411.__r_.__value_.__l.__data_ = v63;
  v62->__r_.__value_.__l.__size_ = 0;
  v62->__r_.__value_.__r.__words[2] = 0;
  v62->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v398, *(_DWORD *)(*((void *)this + 2) + 4));
  if ((v398.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v64 = &v398;
  }
  else {
    uint64_t v64 = (std::string *)v398.__r_.__value_.__r.__words[0];
  }
  if ((v398.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v65 = HIBYTE(v398.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v65 = v398.__r_.__value_.__l.__size_;
  }
  long long v66 = std::string::append(&v411, (const std::string::value_type *)v64, v65);
  uint64_t v67 = (void *)v66->__r_.__value_.__r.__words[0];
  v393[0].__r_.__value_.__r.__words[0] = v66->__r_.__value_.__l.__size_;
  *(std::string::size_type *)((char *)v393[0].__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v66->__r_.__value_.__r.__words[1] + 7);
  char v68 = HIBYTE(v66->__r_.__value_.__r.__words[2]);
  v66->__r_.__value_.__l.__size_ = 0;
  v66->__r_.__value_.__r.__words[2] = 0;
  v66->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v385) < 0) {
    operator delete(__p);
  }
  long long __p = v67;
  *(void *)&long long v385 = v393[0].__r_.__value_.__r.__words[0];
  *(void *)((char *)&v385 + 7) = *(std::string::size_type *)((char *)v393[0].__r_.__value_.__r.__words + 7);
  HIBYTE(v385) = v68;
  if (SHIBYTE(v398.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v398.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v411.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v411.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v407.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v407.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v402.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v402.__r_.__value_.__l.__data_);
  }
  uint64_t v69 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(&v407, "elementwise");
  if ((SHIBYTE(v387.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    std::string v411 = v387;
LABEL_196:
    long long v412 = *(_OWORD *)&v387.__r_.__value_.__l.__data_;
    *(void *)v413 = *((void *)&v387.__r_.__value_.__l + 2);
    goto LABEL_197;
  }
  std::string::__init_copy_ctor_external(&v411, v387.__r_.__value_.__l.__data_, v387.__r_.__value_.__l.__size_);
  if ((SHIBYTE(v387.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_196;
  }
  std::string::__init_copy_ctor_external((std::string *)&v412, v387.__r_.__value_.__l.__data_, v387.__r_.__value_.__l.__size_);
LABEL_197:
  v248 = 0;
  v247 = 0;
  v249 = 0;
  v402.__r_.__value_.__r.__words[0] = (std::string::size_type)&v247;
  v402.__r_.__value_.__s.__data_[8] = 0;
  v247 = (long long *)operator new(0x30uLL);
  v248 = v247;
  v249 = v247 + 3;
  v248 = (long long *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v249, (long long *)&v411, (long long *)&v413[8], (std::string *)v247);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v402, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  }
  else {
    std::string v402 = __s;
  }
  v244 = 0;
  v245 = 0;
  v246 = 0;
  v398.__r_.__value_.__r.__words[0] = (std::string::size_type)&v244;
  v398.__r_.__value_.__s.__data_[8] = 0;
  v244 = (std::string *)operator new(0x18uLL);
  v245 = v244;
  v246 = v244 + 1;
  v245 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v246, (long long *)&v402, (long long *)&v403, v244);
  Espresso::sequential_builder::add<Espresso::elementwise_params>(&v250, v69, (uint64_t)&v407, (uint64_t)&__p, (uint64_t)&v414, v247, v248, (long long **)&v244);
  if (v251) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v251);
  }
  v398.__r_.__value_.__r.__words[0] = (std::string::size_type)&v244;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v398);
  if (SHIBYTE(v402.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v402.__r_.__value_.__l.__data_);
  }
  v402.__r_.__value_.__r.__words[0] = (std::string::size_type)&v247;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v402);
  for (uint64_t j = 0; j != -48; j -= 24)
  {
    if ((char)v413[j + 7] < 0) {
      operator delete(*(void **)((char *)&v411 + j + 24));
    }
  }
  if (SHIBYTE(v407.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v407.__r_.__value_.__l.__data_);
  }
  v411.__r_.__value_.__r.__words[2] = 897988541;
  LOBYTE(v412) = 0;
  *(void *)&v413[4] = 0;
  v411.__r_.__value_.__r.__words[0] = 11;
  v411.__r_.__value_.__l.__size_ = 1065353216;
  std::string::operator=(&v387, &__s);
  MEMORY[0x19F3C1430](&v382, "denominator");
  if ((v392.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v71 = HIBYTE(v392.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v71 = v392.__r_.__value_.__l.__size_;
  }
  int v72 = &v407;
  std::string::basic_string[abi:ne180100]((uint64_t)&v407, v71 + 13);
  if ((v407.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    int v72 = (std::string *)v407.__r_.__value_.__r.__words[0];
  }
  if (v71)
  {
    if ((v392.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v73 = &v392;
    }
    else {
      char v73 = (std::string *)v392.__r_.__value_.__r.__words[0];
    }
    memmove(v72, v73, v71);
  }
  strcpy((char *)v72 + v71, "_denominator_");
  std::to_string(&v402, *(_DWORD *)(*((void *)this + 2) + 4));
  if ((v402.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string v74 = &v402;
  }
  else {
    std::string v74 = (std::string *)v402.__r_.__value_.__r.__words[0];
  }
  if ((v402.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v75 = HIBYTE(v402.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v75 = v402.__r_.__value_.__l.__size_;
  }
  long long v76 = std::string::append(&v407, (const std::string::value_type *)v74, v75);
  int64_t v77 = (void *)v76->__r_.__value_.__r.__words[0];
  v398.__r_.__value_.__r.__words[0] = v76->__r_.__value_.__l.__size_;
  *(std::string::size_type *)((char *)v398.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v76->__r_.__value_.__r.__words[1] + 7);
  char v78 = HIBYTE(v76->__r_.__value_.__r.__words[2]);
  v76->__r_.__value_.__l.__size_ = 0;
  v76->__r_.__value_.__r.__words[2] = 0;
  v76->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v385) < 0) {
    operator delete(__p);
  }
  long long __p = v77;
  *(void *)&long long v385 = v398.__r_.__value_.__r.__words[0];
  *(void *)((char *)&v385 + 7) = *(std::string::size_type *)((char *)v398.__r_.__value_.__r.__words + 7);
  HIBYTE(v385) = v78;
  if (SHIBYTE(v402.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v402.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v407.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v407.__r_.__value_.__l.__data_);
  }
  std::string v79 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(&v407, "elementwise");
  if (SHIBYTE(v387.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v402, v387.__r_.__value_.__l.__data_, v387.__r_.__value_.__l.__size_);
  }
  else {
    std::string v402 = v387;
  }
  v239 = 0;
  v240 = 0;
  v241 = 0;
  v398.__r_.__value_.__r.__words[0] = (std::string::size_type)&v239;
  v398.__r_.__value_.__s.__data_[8] = 0;
  v239 = (long long *)operator new(0x18uLL);
  v240 = v239;
  v241 = (char *)v239 + 24;
  v240 = (long long *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v241, (long long *)&v402, (long long *)&v403, (std::string *)v239);
  if (SHIBYTE(v382.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v398, v382.__r_.__value_.__l.__data_, v382.__r_.__value_.__l.__size_);
  }
  else {
    std::string v398 = v382;
  }
  v236 = 0;
  v237 = 0;
  v238 = 0;
  v393[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v236;
  v393[0].__r_.__value_.__s.__data_[8] = 0;
  v236 = (std::string *)operator new(0x18uLL);
  v237 = v236;
  v238 = v236 + 1;
  v237 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v238, (long long *)&v398, &v399, v236);
  Espresso::sequential_builder::add<Espresso::elementwise_params>(&v242, v79, (uint64_t)&v407, (uint64_t)&__p, (uint64_t)&v411, v239, v240, (long long **)&v236);
  if (v243) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v243);
  }
  v393[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v236;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v393);
  if (SHIBYTE(v398.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v398.__r_.__value_.__l.__data_);
  }
  v398.__r_.__value_.__r.__words[0] = (std::string::size_type)&v239;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v398);
  if (SHIBYTE(v402.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v402.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v407.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v407.__r_.__value_.__l.__data_);
  }
  v407.__r_.__value_.__r.__words[2] = 897988541;
  int v410 = 0;
  int v409 = 0;
  v407.__r_.__value_.__l.__size_ = 1065353216;
  v407.__r_.__value_.__r.__words[0] = 102;
  LOBYTE(v408) = 1;
  MEMORY[0x19F3C1430](&__s, "numerator_div_denominator");
  if ((v392.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v80 = HIBYTE(v392.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v80 = v392.__r_.__value_.__l.__size_;
  }
  unint64_t v81 = v393;
  std::string::basic_string[abi:ne180100]((uint64_t)v393, v80 + 1);
  if ((v393[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    unint64_t v81 = (std::string *)v393[0].__r_.__value_.__r.__words[0];
  }
  if (v80)
  {
    if ((v392.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v82 = &v392;
    }
    else {
      long long v82 = (std::string *)v392.__r_.__value_.__r.__words[0];
    }
    memmove(v81, v82, v80);
  }
  *(_WORD *)((char *)&v81->__r_.__value_.__l.__data_ + v80) = 95;
  if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v83 = &__s;
  }
  else {
    uint64_t v83 = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v84 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v84 = __s.__r_.__value_.__l.__size_;
  }
  long long v85 = std::string::append(v393, (const std::string::value_type *)v83, v84);
  long long v86 = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
  v398.__r_.__value_.__r.__words[2] = v85->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v398.__r_.__value_.__l.__data_ = v86;
  v85->__r_.__value_.__l.__size_ = 0;
  v85->__r_.__value_.__r.__words[2] = 0;
  v85->__r_.__value_.__r.__words[0] = 0;
  uint64_t v87 = std::string::append(&v398, "_");
  long long v88 = *(_OWORD *)&v87->__r_.__value_.__l.__data_;
  v402.__r_.__value_.__r.__words[2] = v87->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v402.__r_.__value_.__l.__data_ = v88;
  v87->__r_.__value_.__l.__size_ = 0;
  v87->__r_.__value_.__r.__words[2] = 0;
  v87->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v235, *(_DWORD *)(*((void *)this + 2) + 4));
  if ((v235.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v89 = &v235;
  }
  else {
    uint64_t v89 = (std::string *)v235.__r_.__value_.__r.__words[0];
  }
  if ((v235.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v90 = HIBYTE(v235.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v90 = v235.__r_.__value_.__l.__size_;
  }
  uint64_t v91 = std::string::append(&v402, (const std::string::value_type *)v89, v90);
  uint64_t v92 = (void *)v91->__r_.__value_.__r.__words[0];
  v405.__r_.__value_.__r.__words[0] = v91->__r_.__value_.__l.__size_;
  *(std::string::size_type *)((char *)v405.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v91->__r_.__value_.__r.__words[1] + 7);
  char v93 = HIBYTE(v91->__r_.__value_.__r.__words[2]);
  v91->__r_.__value_.__l.__size_ = 0;
  v91->__r_.__value_.__r.__words[2] = 0;
  v91->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v385) < 0) {
    operator delete(__p);
  }
  long long __p = v92;
  *(void *)&long long v385 = v405.__r_.__value_.__r.__words[0];
  *(void *)((char *)&v385 + 7) = *(std::string::size_type *)((char *)v405.__r_.__value_.__r.__words + 7);
  HIBYTE(v385) = v93;
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v235.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v402.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v402.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v398.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v398.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v393[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v393[0].__r_.__value_.__l.__data_);
  }
  int v94 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(&v398, "elementwise");
  if (SHIBYTE(v383.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v402, v383.__r_.__value_.__l.__data_, v383.__r_.__value_.__l.__size_);
  }
  else {
    std::string v402 = v383;
  }
  if (SHIBYTE(v382.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v403, v382.__r_.__value_.__l.__data_, v382.__r_.__value_.__l.__size_);
  }
  else {
    std::string v403 = v382;
  }
  v230 = 0;
  v231 = 0;
  v232 = 0;
  v393[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v230;
  v393[0].__r_.__value_.__s.__data_[8] = 0;
  v230 = (long long *)operator new(0x30uLL);
  v231 = v230;
  v232 = v230 + 3;
  v231 = (long long *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v232, (long long *)&v402, &v404, (std::string *)v230);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(v393, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  }
  else {
    v393[0] = __s;
  }
  v227 = 0;
  v228 = 0;
  v229 = 0;
  v235.__r_.__value_.__r.__words[0] = (std::string::size_type)&v227;
  v235.__r_.__value_.__s.__data_[8] = 0;
  v227 = (std::string *)operator new(0x18uLL);
  v228 = v227;
  v229 = v227 + 1;
  v228 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v229, (long long *)v393, (long long *)v394, v227);
  Espresso::sequential_builder::add<Espresso::elementwise_params>(&v233, v94, (uint64_t)&v398, (uint64_t)&__p, (uint64_t)&v407, v230, v231, (long long **)&v227);
  if (v234) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v234);
  }
  v235.__r_.__value_.__r.__words[0] = (std::string::size_type)&v227;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v235);
  if (SHIBYTE(v393[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v393[0].__r_.__value_.__l.__data_);
  }
  v393[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v230;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v393);
  for (uint64_t k = 0; k != -6; k -= 3)
  {
    if (SHIBYTE(v403.__r_.__value_.__r.__words[k + 2]) < 0) {
      operator delete(*(void **)((char *)&v402 + k * 8 + 24));
    }
  }
  if (SHIBYTE(v398.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v398.__r_.__value_.__l.__data_);
  }
  int v96 = v373;
  unsigned int v97 = v373[v11];
  if (v11 <= 1)
  {
    int v99 = 1;
    int v98 = 1;
    goto LABEL_301;
  }
  int v98 = v373[(v11 - 2) + 1];
  if (v11 == 2)
  {
    int v99 = 1;
LABEL_301:
    int v100 = 1;
    goto LABEL_302;
  }
  int v100 = v373[(v11 - 3) + 1];
  if (v11 < 4)
  {
    int v99 = 1;
    goto LABEL_302;
  }
  int v99 = v373[(v11 - 4) + 1];
  if (v11 == 4)
  {
LABEL_302:
    int v101 = 1;
    goto LABEL_303;
  }
  int v101 = v373[(v11 - 5) + 1];
LABEL_303:
  v235.__r_.__value_.__l.__size_ = __PAIR64__(v99, v100);
  v235.__r_.__value_.__r.__words[0] = __PAIR64__(v98, v97);
  v235.__r_.__value_.__r.__words[2] = __PAIR64__(v11, v101);
  MEMORY[0x19F3C1430](&__s, "gamma");
  if ((v392.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v102 = HIBYTE(v392.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v102 = v392.__r_.__value_.__l.__size_;
  }
  id v103 = v393;
  std::string::basic_string[abi:ne180100]((uint64_t)v393, v102 + 1);
  if ((v393[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    id v103 = (std::string *)v393[0].__r_.__value_.__r.__words[0];
  }
  if (v102)
  {
    if ((v392.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v104 = &v392;
    }
    else {
      uint64_t v104 = (std::string *)v392.__r_.__value_.__r.__words[0];
    }
    memmove(v103, v104, v102);
  }
  *(_WORD *)((char *)&v103->__r_.__value_.__l.__data_ + v102) = 95;
  if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v105 = &__s;
  }
  else {
    uint64_t v105 = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v106 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v106 = __s.__r_.__value_.__l.__size_;
  }
  uint64_t v107 = std::string::append(v393, (const std::string::value_type *)v105, v106);
  long long v108 = *(_OWORD *)&v107->__r_.__value_.__l.__data_;
  v398.__r_.__value_.__r.__words[2] = v107->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v398.__r_.__value_.__l.__data_ = v108;
  v107->__r_.__value_.__l.__size_ = 0;
  v107->__r_.__value_.__r.__words[2] = 0;
  v107->__r_.__value_.__r.__words[0] = 0;
  uint64_t v109 = std::string::append(&v398, "_");
  long long v110 = *(_OWORD *)&v109->__r_.__value_.__l.__data_;
  v402.__r_.__value_.__r.__words[2] = v109->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v402.__r_.__value_.__l.__data_ = v110;
  v109->__r_.__value_.__l.__size_ = 0;
  v109->__r_.__value_.__r.__words[2] = 0;
  v109->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v405, *(_DWORD *)(*((void *)this + 2) + 4));
  if ((v405.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v111 = &v405;
  }
  else {
    int v111 = (std::string *)v405.__r_.__value_.__r.__words[0];
  }
  if ((v405.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v112 = HIBYTE(v405.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v112 = v405.__r_.__value_.__l.__size_;
  }
  long long v113 = std::string::append(&v402, (const std::string::value_type *)v111, v112);
  id v114 = (void *)v113->__r_.__value_.__r.__words[0];
  v401.__r_.__value_.__r.__words[0] = v113->__r_.__value_.__l.__size_;
  *(std::string::size_type *)((char *)v401.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v113->__r_.__value_.__r.__words[1] + 7);
  char v115 = HIBYTE(v113->__r_.__value_.__r.__words[2]);
  v113->__r_.__value_.__l.__size_ = 0;
  v113->__r_.__value_.__r.__words[2] = 0;
  v113->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v385) < 0) {
    operator delete(__p);
  }
  long long __p = v114;
  *(void *)&long long v385 = v401.__r_.__value_.__r.__words[0];
  *(void *)((char *)&v385 + 7) = *(std::string::size_type *)((char *)v401.__r_.__value_.__r.__words + 7);
  HIBYTE(v385) = v115;
  if (SHIBYTE(v405.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v405.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v402.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v402.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v398.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v398.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v393[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v393[0].__r_.__value_.__l.__data_);
  }
  id v116 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(&v402, "load_constant");
  v222 = 0;
  v223 = 0;
  uint64_t v224 = 0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v398, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  }
  else {
    std::string v398 = __s;
  }
  v219 = 0;
  v220 = 0;
  uint64_t v221 = 0;
  v393[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v219;
  v393[0].__r_.__value_.__s.__data_[8] = 0;
  v219 = (std::string *)operator new(0x18uLL);
  v220 = v219;
  uint64_t v221 = v219 + 1;
  v220 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v221, (long long *)&v398, &v399, v219);
  Espresso::sequential_builder::add<Espresso::load_constant_params>(&v225, v116, (uint64_t)&v402, (uint64_t)&__p, (uint64_t)&v235, v222, v223, (long long **)&v219);
  v393[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v219;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v393);
  if (SHIBYTE(v398.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v398.__r_.__value_.__l.__data_);
  }
  v398.__r_.__value_.__r.__words[0] = (std::string::size_type)&v222;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v398);
  if (SHIBYTE(v402.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v402.__r_.__value_.__l.__data_);
  }
  v117 = v226;
  if (v226) {
    atomic_fetch_add_explicit(&v226->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string v188 = v117;
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v217, (int)v235.__r_.__value_.__l.__data_, SHIDWORD(v235.__r_.__value_.__r.__words[0]), v235.__r_.__value_.__r.__words[1], LODWORD(v235.__r_.__value_.__r.__words[2]) * HIDWORD(v235.__r_.__value_.__r.__words[1]));
  uint64_t v118 = v217;
  if (v378) {
    v119 = v378;
  }
  else {
    v119 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  size_t v120 = 4 * v14;
  EspressoConverter::copyWeightsToDataBlob(*(EspressoConverter **)(v217 + 24), v119, v120);
  v121 = v218;
  uint64_t v215 = v118;
  v216 = v218;
  if (v218) {
    atomic_fetch_add_explicit(&v218->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::generic_load_constant_kernel::set_constant_blob();
  if (v216) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v216);
  }
  MEMORY[0x19F3C1430](&__s, "beta");
  if ((v392.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v122 = HIBYTE(v392.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v122 = v392.__r_.__value_.__l.__size_;
  }
  std::string::basic_string[abi:ne180100]((uint64_t)v393, v122 + 1);
  if ((v393[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v123 = v393;
  }
  else {
    v123 = (std::string *)v393[0].__r_.__value_.__r.__words[0];
  }
  if (v122)
  {
    if ((v392.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v124 = &v392;
    }
    else {
      uint64_t v124 = (std::string *)v392.__r_.__value_.__r.__words[0];
    }
    memmove(v123, v124, v122);
  }
  *(_WORD *)((char *)&v123->__r_.__value_.__l.__data_ + v122) = 95;
  if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v125 = &__s;
  }
  else {
    uint64_t v125 = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v126 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v126 = __s.__r_.__value_.__l.__size_;
  }
  uint64_t v127 = std::string::append(v393, (const std::string::value_type *)v125, v126);
  long long v128 = *(_OWORD *)&v127->__r_.__value_.__l.__data_;
  v398.__r_.__value_.__r.__words[2] = v127->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v398.__r_.__value_.__l.__data_ = v128;
  v127->__r_.__value_.__l.__size_ = 0;
  v127->__r_.__value_.__r.__words[2] = 0;
  v127->__r_.__value_.__r.__words[0] = 0;
  uint64_t v129 = std::string::append(&v398, "_");
  long long v130 = *(_OWORD *)&v129->__r_.__value_.__l.__data_;
  v402.__r_.__value_.__r.__words[2] = v129->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v402.__r_.__value_.__l.__data_ = v130;
  v129->__r_.__value_.__l.__size_ = 0;
  v129->__r_.__value_.__r.__words[2] = 0;
  v129->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v405, *(_DWORD *)(*((void *)this + 2) + 4));
  if ((v405.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v131 = &v405;
  }
  else {
    v131 = (std::string *)v405.__r_.__value_.__r.__words[0];
  }
  if ((v405.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v132 = HIBYTE(v405.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v132 = v405.__r_.__value_.__l.__size_;
  }
  uint64_t v133 = std::string::append(&v402, (const std::string::value_type *)v131, v132);
  id v134 = (void *)v133->__r_.__value_.__r.__words[0];
  v401.__r_.__value_.__r.__words[0] = v133->__r_.__value_.__l.__size_;
  *(std::string::size_type *)((char *)v401.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v133->__r_.__value_.__r.__words[1] + 7);
  char v135 = HIBYTE(v133->__r_.__value_.__r.__words[2]);
  v133->__r_.__value_.__l.__size_ = 0;
  v133->__r_.__value_.__r.__words[2] = 0;
  v133->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v385) < 0) {
    operator delete(__p);
  }
  long long __p = v134;
  *(void *)&long long v385 = v401.__r_.__value_.__r.__words[0];
  *(void *)((char *)&v385 + 7) = *(std::string::size_type *)((char *)v401.__r_.__value_.__r.__words + 7);
  HIBYTE(v385) = v135;
  if (SHIBYTE(v405.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v405.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v402.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v402.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v398.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v398.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v393[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v393[0].__r_.__value_.__l.__data_);
  }
  v136 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(&v402, "load_constant");
  v210 = 0;
  uint64_t v211 = 0;
  uint64_t v212 = 0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v398, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  }
  else {
    std::string v398 = __s;
  }
  uint64_t v207 = 0;
  uint64_t v208 = 0;
  uint64_t v209 = 0;
  v393[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v207;
  v393[0].__r_.__value_.__s.__data_[8] = 0;
  uint64_t v207 = (std::string *)operator new(0x18uLL);
  uint64_t v208 = v207;
  uint64_t v209 = v207 + 1;
  uint64_t v208 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v209, (long long *)&v398, &v399, v207);
  Espresso::sequential_builder::add<Espresso::load_constant_params>(&v213, v136, (uint64_t)&v402, (uint64_t)&__p, (uint64_t)&v235, v210, v211, (long long **)&v207);
  v393[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v207;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v393);
  if (SHIBYTE(v398.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v398.__r_.__value_.__l.__data_);
  }
  v398.__r_.__value_.__r.__words[0] = (std::string::size_type)&v210;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v398);
  if (SHIBYTE(v402.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v402.__r_.__value_.__l.__data_);
  }
  v137 = v214;
  if (v214) {
    atomic_fetch_add_explicit(&v214->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v187 = v137;
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v205, (int)v235.__r_.__value_.__l.__data_, SHIDWORD(v235.__r_.__value_.__r.__words[0]), v235.__r_.__value_.__r.__words[1], LODWORD(v235.__r_.__value_.__r.__words[2]) * HIDWORD(v235.__r_.__value_.__r.__words[1]));
  uint64_t v138 = v205;
  if (v379) {
    id v139 = v379;
  }
  else {
    id v139 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  EspressoConverter::copyWeightsToDataBlob(*(EspressoConverter **)(v205 + 24), v139, v120);
  v140 = v206;
  uint64_t v203 = v138;
  v204 = v206;
  if (v206) {
    atomic_fetch_add_explicit(&v206->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::generic_load_constant_kernel::set_constant_blob();
  if (v204) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v204);
  }
  v402.__r_.__value_.__r.__words[2] = 897988541;
  LODWORD(v404) = 0;
  HIDWORD(v403.__r_.__value_.__r.__words[2]) = 0;
  v402.__r_.__value_.__l.__size_ = 1065353216;
  v402.__r_.__value_.__r.__words[0] = 1;
  v403.__r_.__value_.__s.__data_[0] = 1;
  std::string::operator=(&v387, &__s);
  MEMORY[0x19F3C1430](&__s, "numerator_div_denominator_mul_gamma");
  if ((v392.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v141 = HIBYTE(v392.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v141 = v392.__r_.__value_.__l.__size_;
  }
  std::string::basic_string[abi:ne180100]((uint64_t)&v405, v141 + 1);
  if ((v405.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    id v142 = &v405;
  }
  else {
    id v142 = (std::string *)v405.__r_.__value_.__r.__words[0];
  }
  if (v141)
  {
    if ((v392.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      v143 = &v392;
    }
    else {
      v143 = (std::string *)v392.__r_.__value_.__r.__words[0];
    }
    memmove(v142, v143, v141);
  }
  *(_WORD *)((char *)&v142->__r_.__value_.__l.__data_ + v141) = 95;
  if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v144 = &__s;
  }
  else {
    uint64_t v144 = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v145 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v145 = __s.__r_.__value_.__l.__size_;
  }
  uint64_t v146 = std::string::append(&v405, (const std::string::value_type *)v144, v145);
  long long v147 = *(_OWORD *)&v146->__r_.__value_.__l.__data_;
  v393[0].__r_.__value_.__r.__words[2] = v146->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v393[0].__r_.__value_.__l.__data_ = v147;
  v146->__r_.__value_.__l.__size_ = 0;
  v146->__r_.__value_.__r.__words[2] = 0;
  v146->__r_.__value_.__r.__words[0] = 0;
  uint64_t v148 = std::string::append(v393, "_");
  long long v149 = *(_OWORD *)&v148->__r_.__value_.__l.__data_;
  v398.__r_.__value_.__r.__words[2] = v148->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v398.__r_.__value_.__l.__data_ = v149;
  v148->__r_.__value_.__l.__size_ = 0;
  v148->__r_.__value_.__r.__words[2] = 0;
  v148->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v401, *(_DWORD *)(*((void *)this + 2) + 4));
  if ((v401.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v150 = &v401;
  }
  else {
    v150 = (std::string *)v401.__r_.__value_.__r.__words[0];
  }
  if ((v401.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v151 = HIBYTE(v401.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v151 = v401.__r_.__value_.__l.__size_;
  }
  v152 = std::string::append(&v398, (const std::string::value_type *)v150, v151);
  v153 = (void *)v152->__r_.__value_.__r.__words[0];
  v396.__r_.__value_.__r.__words[0] = v152->__r_.__value_.__l.__size_;
  *(std::string::size_type *)((char *)v396.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v152->__r_.__value_.__r.__words[1] + 7);
  char v154 = HIBYTE(v152->__r_.__value_.__r.__words[2]);
  v152->__r_.__value_.__l.__size_ = 0;
  v152->__r_.__value_.__r.__words[2] = 0;
  v152->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v385) < 0) {
    operator delete(__p);
  }
  long long __p = v153;
  *(void *)&long long v385 = v396.__r_.__value_.__r.__words[0];
  *(void *)((char *)&v385 + 7) = *(std::string::size_type *)((char *)v396.__r_.__value_.__r.__words + 7);
  HIBYTE(v385) = v154;
  if (SHIBYTE(v401.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v401.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v398.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v398.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v393[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v393[0].__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v405.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v405.__r_.__value_.__l.__data_);
  }
  v155 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(v393, "elementwise");
  std::string::basic_string[abi:ne180100]<0>(&v398, "numerator_div_denominator");
  std::string::basic_string[abi:ne180100]<0>(&v399, "gamma");
  std::string v198 = 0;
  v199 = 0;
  v200 = 0;
  v405.__r_.__value_.__r.__words[0] = (std::string::size_type)&v198;
  v405.__r_.__value_.__s.__data_[8] = 0;
  std::string v198 = (long long *)operator new(0x30uLL);
  v199 = v198;
  v200 = v198 + 3;
  v199 = (long long *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v200, (long long *)&v398, (long long *)((char *)&v400 + 4), (std::string *)v198);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v405, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  }
  else {
    std::string v405 = __s;
  }
  uint64_t v195 = 0;
  uint64_t v196 = 0;
  std::string v197 = 0;
  v401.__r_.__value_.__r.__words[0] = (std::string::size_type)&v195;
  v401.__r_.__value_.__s.__data_[8] = 0;
  uint64_t v195 = (std::string *)operator new(0x18uLL);
  uint64_t v196 = v195;
  std::string v197 = v195 + 1;
  uint64_t v196 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v197, (long long *)&v405, (long long *)&v406, v195);
  Espresso::sequential_builder::add<Espresso::elementwise_params>(&v201, v155, (uint64_t)v393, (uint64_t)&__p, (uint64_t)&v402, v198, v199, (long long **)&v195);
  if (v202) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v202);
  }
  v401.__r_.__value_.__r.__words[0] = (std::string::size_type)&v195;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v401);
  if (SHIBYTE(v405.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v405.__r_.__value_.__l.__data_);
  }
  v405.__r_.__value_.__r.__words[0] = (std::string::size_type)&v198;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v405);
  for (uint64_t m = 0; m != -48; m -= 24)
  {
    if (*((char *)&v400 + m + 3) < 0) {
      operator delete(*(void **)((char *)&v398 + m + 24));
    }
  }
  if (SHIBYTE(v393[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v393[0].__r_.__value_.__l.__data_);
  }
  v398.__r_.__value_.__r.__words[2] = 897988541;
  uint64_t v400 = 0;
  v398.__r_.__value_.__l.__size_ = 1065353216;
  v398.__r_.__value_.__r.__words[0] = 0;
  LOBYTE(v399) = 1;
  if ((v392.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v157 = HIBYTE(v392.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v157 = v392.__r_.__value_.__l.__size_;
  }
  std::string::basic_string[abi:ne180100]((uint64_t)&v401, v157 + 1);
  if ((v401.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v158 = &v401;
  }
  else {
    v158 = (std::string *)v401.__r_.__value_.__r.__words[0];
  }
  if (v157)
  {
    if ((v392.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v159 = &v392;
    }
    else {
      uint64_t v159 = (std::string *)v392.__r_.__value_.__r.__words[0];
    }
    memmove(v158, v159, v157);
  }
  *(_WORD *)((char *)&v158->__r_.__value_.__l.__data_ + v157) = 95;
  if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v160 = &__s;
  }
  else {
    v160 = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v161 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v161 = __s.__r_.__value_.__l.__size_;
  }
  v162 = std::string::append(&v401, (const std::string::value_type *)v160, v161);
  long long v163 = *(_OWORD *)&v162->__r_.__value_.__l.__data_;
  v405.__r_.__value_.__r.__words[2] = v162->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v405.__r_.__value_.__l.__data_ = v163;
  v162->__r_.__value_.__l.__size_ = 0;
  v162->__r_.__value_.__r.__words[2] = 0;
  v162->__r_.__value_.__r.__words[0] = 0;
  uint64_t v164 = std::string::append(&v405, "_");
  long long v165 = *(_OWORD *)&v164->__r_.__value_.__l.__data_;
  v393[0].__r_.__value_.__r.__words[2] = v164->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v393[0].__r_.__value_.__l.__data_ = v165;
  v164->__r_.__value_.__l.__size_ = 0;
  v164->__r_.__value_.__r.__words[2] = 0;
  v164->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v396, *(_DWORD *)(*((void *)this + 2) + 4));
  if ((v396.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::vector<std::string> v166 = &v396;
  }
  else {
    std::vector<std::string> v166 = (std::string *)v396.__r_.__value_.__r.__words[0];
  }
  if ((v396.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v167 = HIBYTE(v396.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v167 = v396.__r_.__value_.__l.__size_;
  }
  id v168 = std::string::append(v393, (const std::string::value_type *)v166, v167);
  id v169 = (void *)v168->__r_.__value_.__r.__words[0];
  v397[0] = v168->__r_.__value_.__l.__size_;
  *(void *)((char *)v397 + 7) = *(std::string::size_type *)((char *)&v168->__r_.__value_.__r.__words[1] + 7);
  char v170 = HIBYTE(v168->__r_.__value_.__r.__words[2]);
  v168->__r_.__value_.__l.__size_ = 0;
  v168->__r_.__value_.__r.__words[2] = 0;
  v168->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v385) < 0) {
    operator delete(__p);
  }
  long long __p = v169;
  *(void *)&long long v385 = v397[0];
  *(void *)((char *)&v385 + 7) = *(void *)((char *)v397 + 7);
  HIBYTE(v385) = v170;
  if (SHIBYTE(v396.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v396.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v393[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v393[0].__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v405.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v405.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v401.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v401.__r_.__value_.__l.__data_);
  }
  v171 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(&v405, "elementwise");
  std::string::basic_string[abi:ne180100]<0>(v393, "numerator_div_denominator_mul_gamma");
  std::string::basic_string[abi:ne180100]<0>(v394, "beta");
  v190 = 0;
  v191 = 0;
  v192 = 0;
  v401.__r_.__value_.__r.__words[0] = (std::string::size_type)&v190;
  v401.__r_.__value_.__s.__data_[8] = 0;
  v190 = (long long *)operator new(0x30uLL);
  v191 = v190;
  v192 = v190 + 3;
  v191 = (long long *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v192, (long long *)v393, (long long *)&v395, (std::string *)v190);
  memset(&v189, 0, sizeof(v189));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v189, v389, v390, 0xAAAAAAAAAAAAAAABLL * (((char *)v390 - (char *)v389) >> 3));
  Espresso::sequential_builder::add<Espresso::elementwise_params>(&v193, v171, (uint64_t)&v405, (uint64_t)&__p, (uint64_t)&v398, v190, v191, (long long **)&v189);
  if (v194) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v194);
  }
  v401.__r_.__value_.__r.__words[0] = (std::string::size_type)&v189;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v401);
  v401.__r_.__value_.__r.__words[0] = (std::string::size_type)&v190;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v401);
  for (unint64_t n = 0; n != 0x1FFFFFFFFFFFFFFALL; n -= 3)
  {
    if (SHIBYTE(v394[n + 2]) < 0) {
      operator delete(v393[n / 3 + 1].__r_.__value_.__l.__data_);
    }
  }
  if (SHIBYTE(v405.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v405.__r_.__value_.__l.__data_);
  }
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v389);
  if (v140) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v140);
  }
  if (v187) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v187);
  }
  if (v214) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v214);
  }
  if (v121) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v121);
  }
  if (v188) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v188);
  }
  if (v226) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v226);
  }
  if (v96 && !*v96) {
    operator delete(v96);
  }
  CoreML::Specification::LayerNormalizationLayerParams::~LayerNormalizationLayerParams((CoreML::Specification::LayerNormalizationLayerParams *)&v374);
  if (SHIBYTE(v382.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v382.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v383.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v383.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v385) < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v387.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v387.__r_.__value_.__l.__data_);
  }
  v374 = __str;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v374);
  v374 = (std::string **)&v389;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v374);
  if (SHIBYTE(v392.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v392.__r_.__value_.__l.__data_);
  }
}

void sub_19EA726CC(_Unwind_Exception *a1)
{
  STACK[0x830] = (unint64_t)&STACK[0x288];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x830]);
  if (*(char *)(v1 - 217) < 0) {
    operator delete(*(void **)(v1 - 240));
  }
  if (*(char *)(v1 - 153) < 0) {
    operator delete(*(void **)(v1 - 176));
  }
  unint64_t v3 = (void *)STACK[0x610];
  if (STACK[0x610] && !*v3) {
    operator delete(v3);
  }
  CoreML::Specification::LayerNormalizationLayerParams::~LayerNormalizationLayerParams((CoreML::Specification::LayerNormalizationLayerParams *)&STACK[0x618]);
  if (SLOBYTE(STACK[0x66F]) < 0) {
    operator delete((void *)STACK[0x658]);
  }
  if (SLOBYTE(STACK[0x687]) < 0) {
    operator delete((void *)STACK[0x670]);
  }
  if (SLOBYTE(STACK[0x69F]) < 0) {
    operator delete((void *)STACK[0x688]);
  }
  if (SLOBYTE(STACK[0x6B7]) < 0) {
    operator delete((void *)STACK[0x6A0]);
  }
  if (SLOBYTE(STACK[0x6CF]) < 0) {
    operator delete((void *)STACK[0x6B8]);
  }
  STACK[0x618] = (unint64_t)&STACK[0x6D0];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x618]);
  STACK[0x618] = (unint64_t)&STACK[0x6E8];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x618]);
  if (SLOBYTE(STACK[0x717]) < 0) {
    operator delete((void *)STACK[0x700]);
  }
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::add<Espresso::reduce_params_t>(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, long long *a6, long long *a7, long long **a8)
{
  memset(&v13, 0, sizeof(v13));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v13, a6, a7, 0xAAAAAAAAAAAAAAABLL * (((char *)a7 - (char *)a6) >> 3));
  memset(&v12, 0, sizeof(v12));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v12, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a8[1] - (char *)*a8) >> 3));
  LODWORD(v15.__r_.__value_.__l.__data_) = (***(uint64_t (****)(void))(a2[14] + 8))(*(void *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  int v11 = (std::__shared_weak_count *)a1[1];
  uint64_t v16 = *a1;
  int v17 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(&v15, 0, sizeof(v15));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v15, (long long *)v13.__r_.__value_.__l.__data_, (long long *)v13.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13.__r_.__value_.__l.__size_ - v13.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v14, 0, sizeof(v14));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v14, (long long *)v12.__r_.__value_.__l.__data_, (long long *)v12.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12.__r_.__value_.__l.__size_ - v12.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  long long v18 = &v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  long long v18 = &v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (*a2) {
    Espresso::sequential_builder::add_shape_from_kernel();
  }
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
}

void sub_19EA736B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v16 = *(std::__shared_weak_count **)(v13 + 8);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  *(void *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(void *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::add<Espresso::load_constant_params>(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, long long *a6, long long *a7, long long **a8)
{
  memset(&v13, 0, sizeof(v13));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v13, a6, a7, 0xAAAAAAAAAAAAAAABLL * (((char *)a7 - (char *)a6) >> 3));
  memset(&v12, 0, sizeof(v12));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v12, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a8[1] - (char *)*a8) >> 3));
  LODWORD(v15.__r_.__value_.__l.__data_) = (***(uint64_t (****)(void))(a2[14] + 8))(*(void *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  int v11 = (std::__shared_weak_count *)a1[1];
  uint64_t v16 = *a1;
  int v17 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(&v15, 0, sizeof(v15));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v15, (long long *)v13.__r_.__value_.__l.__data_, (long long *)v13.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13.__r_.__value_.__l.__size_ - v13.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v14, 0, sizeof(v14));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v14, (long long *)v12.__r_.__value_.__l.__data_, (long long *)v12.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12.__r_.__value_.__l.__size_ - v12.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  long long v18 = &v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  long long v18 = &v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (*a2) {
    Espresso::sequential_builder::add_shape_from_kernel();
  }
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
}

void sub_19EA73920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v16 = *(std::__shared_weak_count **)(v13 + 8);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  *(void *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(void *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

uint64_t std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(void *a1, int a2, int a3, int a4, int a5)
{
  char v10 = operator new(0x60uLL);
  v10[1] = 0;
  v10[2] = 0;
  void *v10 = &unk_1EF0DDB20;
  v10[3] = &unk_1EF0DCF60;
  *((_OWORD *)v10 + 4) = 0u;
  *((_OWORD *)v10 + 5) = 0u;
  *((_DWORD *)v10 + 8) = a2;
  *((_DWORD *)v10 + 9) = a3;
  *((_DWORD *)v10 + 10) = a4;
  *((_DWORD *)v10 + 11) = a5;
  uint64_t result = Espresso::kern_alloc((Espresso *)(4 * a2 * (uint64_t)a3 * a4 * a5));
  v10[6] = result;
  *((unsigned char *)v10 + 5CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = 1;
  *a1 = v10 + 3;
  a1[1] = v10;
  return result;
}

void sub_19EA73A7C(_Unwind_Exception *a1)
{
  shared_weak_owners = (std::__shared_weak_count *)v1[3].__shared_weak_owners_;
  if (shared_weak_owners) {
    std::__shared_weak_count::__release_shared[abi:ne180100](shared_weak_owners);
  }
  long long v5 = (std::__shared_weak_count *)v1[3].__vftable;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  Espresso::blob_rtti_root::~blob_rtti_root(v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v6);
  _Unwind_Resume(a1);
}

void Espresso::blob<float,4>::~blob(Espresso::blob_rtti_root *this, void *a2)
{
  *(void *)this = &unk_1EF0DCF60;
  if (*((unsigned char *)this + 32))
  {
    unint64_t v3 = (Espresso *)*((void *)this + 3);
    if (v3) {
      Espresso::kern_dealloc(v3, a2);
    }
  }
  *((void *)this + 3) = 0;
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 8);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  long long v5 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  Espresso::blob_rtti_root::~blob_rtti_root(this);

  JUMPOUT(0x19F3C1920);
}

{
  Espresso *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t vars8;

  *(void *)this = &unk_1EF0DCF60;
  if (*((unsigned char *)this + 32))
  {
    unint64_t v3 = (Espresso *)*((void *)this + 3);
    if (v3) {
      Espresso::kern_dealloc(v3, a2);
    }
  }
  *((void *)this + 3) = 0;
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 8);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  long long v5 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }

  Espresso::blob_rtti_root::~blob_rtti_root(this);
}

uint64_t std::__shared_ptr_emplace<Espresso::blob<float,4>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::blob<float,4>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF0DDB20;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x19F3C1920);
}

void std::__shared_ptr_emplace<Espresso::blob<float,4>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF0DDB20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t LayerTranslator::addLoop(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  uint64_t v197 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (long long *)*((void *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v182, *(const std::string::value_type **)v4, *((void *)v4 + 1));
  }
  else
  {
    long long v5 = *v4;
    v182.__r_.__value_.__r.__words[2] = *((void *)v4 + 2);
    *(_OWORD *)&v182.__r_.__value_.__l.__data_ = v5;
  }
  memset(v181, 0, sizeof(v181));
  uint64_t v179 = 0;
  __str = 0;
  uint64_t v180 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, v181, (uint64_t *)&__str, *((void *)this + 1));
  if (*((_DWORD *)a2 + 35) == 615)
  {
    std::string v7 = (uint64_t *)*((void *)a2 + 16);
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    std::string v7 = &CoreML::Specification::_LoopLayerParams_default_instance_;
  }
  p_str = (std::string **)&unk_1EF0D0F90;
  unint64_t v172 = 0;
  int v177 = 0;
  uint64_t v8 = v7[1];
  if (v8) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&v172, v8 & 0xFFFFFFFFFFFFFFFELL);
  }
  v173 = &google::protobuf::internal::fixed_address_empty_string;
  uint64_t v9 = v7[2];
  if (*(char *)(v9 + 23) < 0) {
    uint64_t v10 = *(void *)(v9 + 8);
  }
  else {
    uint64_t v10 = *(unsigned __int8 *)(v9 + 23);
  }
  if ((long long *)v9 != &google::protobuf::internal::fixed_address_empty_string && v10) {
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
  }
  if (v7 == &CoreML::Specification::_LoopLayerParams_default_instance_)
  {
    int v11 = 0;
    uint64_t v174 = 0;
  }
  else
  {
    if (v7[3]) {
      operator new();
    }
    uint64_t v174 = 0;
    if (v7[4]) {
      operator new();
    }
    int v11 = 0;
  }
  unint64_t v12 = v7[5];
  size_t v175 = 0;
  unint64_t v176 = v12;
  int v13 = dword_1EB4DE7B8;
  if (*((char *)v173 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v170, *(const std::string::value_type **)v173, *((void *)v173 + 1));
    unint64_t v12 = v176;
    int v11 = v175;
  }
  else
  {
    long long v14 = *v173;
    v170.__r_.__value_.__r.__words[2] = *((void *)v173 + 2);
    *(_OWORD *)&v170.__r_.__value_.__l.__data_ = v14;
  }
  if (v11) {
    std::string v15 = v11;
  }
  else {
    std::string v15 = &CoreML::Specification::_NeuralNetwork_default_instance_;
  }
  uint64_t v101 = (uint64_t)v15;
  if (v13 <= 0)
  {
    memset(&v169, 0, sizeof(v169));
    uint64_t v16 = v179;
    int v17 = __str;
  }
  else
  {
    uint64_t v16 = v179;
    int v17 = __str;
    memset(&v169, 0, sizeof(v169));
    if (v179 == __str && !v12)
    {
      memset(&__p, 0, sizeof(__p));
      int v18 = 1;
      goto LABEL_102;
    }
  }
  if (v16 == v17)
  {
    std::to_string(&v187, *(_DWORD *)(*((void *)this + 2) + 4));
    int v19 = std::string::append(&v187, "_");
    long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v189.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v189.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    if ((v182.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v21 = &v182;
    }
    else {
      std::string::size_type v21 = (std::string *)v182.__r_.__value_.__r.__words[0];
    }
    if ((v182.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v182.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v182.__r_.__value_.__l.__size_;
    }
    char v23 = std::string::append(&v189, (const std::string::value_type *)v21, size);
    long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v144.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v144.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    long long v25 = std::string::append(&v144, "_max_loop_iters");
    std::string::size_type v26 = v25->__r_.__value_.__r.__words[0];
    v196.__r_.__value_.__r.__words[0] = v25->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v196.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v25->__r_.__value_.__r.__words[1] + 7);
    char v27 = HIBYTE(v25->__r_.__value_.__r.__words[2]);
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v169.__r_.__value_.__l.__data_);
    }
    v169.__r_.__value_.__r.__words[0] = v26;
    v169.__r_.__value_.__l.__size_ = v196.__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)&v169.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v196.__r_.__value_.__r.__words + 7);
    *((unsigned char *)&v169.__r_.__value_.__s + 23) = v27;
    if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v144.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v189.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v187.__r_.__value_.__l.__data_);
    }
    v144.__r_.__value_.__r.__words[2] = 0xFFFFFFFF00000001;
    *(void *)&long long v28 = 0x100000001;
    *((void *)&v28 + 1) = 0x100000001;
    *(_OWORD *)&v144.__r_.__value_.__l.__data_ = v28;
    int v29 = *(void **)this;
    std::string::basic_string[abi:ne180100]<0>(&v189, "load_constant");
    std::string::size_type v167 = 0;
    std::vector<std::string> v166 = 0;
    uint64_t v168 = 0;
    if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v187, v169.__r_.__value_.__l.__data_, v169.__r_.__value_.__l.__size_);
    }
    else {
      std::string v187 = v169;
    }
    uint64_t v164 = 0;
    long long v163 = 0;
    long long v165 = 0;
    v196.__r_.__value_.__r.__words[0] = (std::string::size_type)&v163;
    v196.__r_.__value_.__s.__data_[8] = 0;
    long long v163 = (std::string *)operator new(0x18uLL);
    uint64_t v164 = v163;
    long long v165 = v163 + 1;
    uint64_t v164 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v165, (long long *)&v187, (long long *)&v188, v163);
    Espresso::sequential_builder::add<Espresso::load_constant_params>((uint64_t *)&__p, v29, (uint64_t)&v189, (uint64_t)&v169, (uint64_t)&v144, v166, v167, (long long **)&v163);
    v196.__r_.__value_.__r.__words[0] = (std::string::size_type)&v163;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v196);
    if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v187.__r_.__value_.__l.__data_);
    }
    v187.__r_.__value_.__r.__words[0] = (std::string::size_type)&v166;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v187);
    if (SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v189.__r_.__value_.__l.__data_);
    }
    long long v30 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(__p.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
    }
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v189, 1, 1, 1, 1);
    std::string::size_type v31 = v189.__r_.__value_.__r.__words[0];
    **(float **)(v189.__r_.__value_.__r.__words[0] + 24) = (float)v12;
    uint64_t v32 = (std::__shared_weak_count *)v189.__r_.__value_.__l.__size_;
    unsigned long long v162 = __PAIR128__(v189.__r_.__value_.__l.__size_, v31);
    if (v189.__r_.__value_.__l.__size_) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v189.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
    }
    Espresso::generic_load_constant_kernel::set_constant_blob();
    if (*((void *)&v162 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v162 + 1));
    }
    if (v32) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v32);
    }
    if (v30) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v30);
    }
    if (__p.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
    }
  }
  else
  {
    std::string::operator=(&v169, v17);
  }
  memset(&__p, 0, sizeof(__p));
  v144.__r_.__value_.__r.__words[2] = 0xFFFFFFFF00000001;
  *(void *)&long long v33 = 0x100000001;
  *((void *)&v33 + 1) = 0x100000001;
  *(_OWORD *)&v144.__r_.__value_.__l.__data_ = v33;
  std::to_string(&v196, *(_DWORD *)(*((void *)this + 2) + 4));
  int v34 = std::string::append(&v196, "_");
  long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
  v187.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v187.__r_.__value_.__l.__data_ = v35;
  v34->__r_.__value_.__l.__size_ = 0;
  v34->__r_.__value_.__r.__words[2] = 0;
  v34->__r_.__value_.__r.__words[0] = 0;
  if ((v182.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v36 = &v182;
  }
  else {
    uint64_t v36 = (std::string *)v182.__r_.__value_.__r.__words[0];
  }
  if ((v182.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v37 = HIBYTE(v182.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v37 = v182.__r_.__value_.__l.__size_;
  }
  std::string v38 = std::string::append(&v187, (const std::string::value_type *)v36, v37);
  long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
  v189.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v189.__r_.__value_.__l.__data_ = v39;
  v38->__r_.__value_.__l.__size_ = 0;
  v38->__r_.__value_.__r.__words[2] = 0;
  v38->__r_.__value_.__r.__words[0] = 0;
  char v40 = std::string::append(&v189, "_load_iterator");
  std::string::size_type v41 = v40->__r_.__value_.__r.__words[0];
  v194.__r_.__value_.__r.__words[0] = v40->__r_.__value_.__l.__size_;
  *(std::string::size_type *)((char *)v194.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v40->__r_.__value_.__r.__words[1] + 7);
  char v42 = HIBYTE(v40->__r_.__value_.__r.__words[2]);
  v40->__r_.__value_.__l.__size_ = 0;
  v40->__r_.__value_.__r.__words[2] = 0;
  v40->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  __p.__r_.__value_.__r.__words[0] = v41;
  __p.__r_.__value_.__l.__size_ = v194.__r_.__value_.__r.__words[0];
  *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v194.__r_.__value_.__r.__words + 7);
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = v42;
  if (SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v189.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v187.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v196.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v196.__r_.__value_.__l.__data_);
  }
  std::string v43 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(&v189, "load_constant");
  uint64_t v159 = 0;
  v158 = 0;
  uint64_t v160 = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v187, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v187 = __p;
  }
  id v156 = 0;
  v155 = 0;
  std::string::size_type v157 = 0;
  v196.__r_.__value_.__r.__words[0] = (std::string::size_type)&v155;
  v196.__r_.__value_.__s.__data_[8] = 0;
  v155 = (std::string *)operator new(0x18uLL);
  id v156 = v155;
  std::string::size_type v157 = v155 + 1;
  id v156 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v157, (long long *)&v187, (long long *)&v188, v155);
  Espresso::sequential_builder::add<Espresso::load_constant_params>((uint64_t *)&v194, v43, (uint64_t)&v189, (uint64_t)&__p, (uint64_t)&v144, v158, v159, (long long **)&v155);
  v196.__r_.__value_.__r.__words[0] = (std::string::size_type)&v155;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v196);
  if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v187.__r_.__value_.__l.__data_);
  }
  v187.__r_.__value_.__r.__words[0] = (std::string::size_type)&v158;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v187);
  if (SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v189.__r_.__value_.__l.__data_);
  }
  std::string::size_type v44 = (std::__shared_weak_count *)v194.__r_.__value_.__l.__size_;
  if (v194.__r_.__value_.__l.__size_) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v194.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
  }
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v189, 1, 1, 1, 1);
  std::string::size_type v45 = v189.__r_.__value_.__r.__words[0];
  **(_DWORD **)(v189.__r_.__value_.__r.__words[0] + 24) = 0;
  std::string v46 = (std::__shared_weak_count *)v189.__r_.__value_.__l.__size_;
  unsigned long long v154 = __PAIR128__(v189.__r_.__value_.__l.__size_, v45);
  if (v189.__r_.__value_.__l.__size_) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v189.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
  }
  Espresso::generic_load_constant_kernel::set_constant_blob();
  if (*((void *)&v154 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v154 + 1));
  }
  if (v46) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v46);
  }
  if (v44) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v44);
  }
  if (v194.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v194.__r_.__value_.__l.__size_);
  }
  int v18 = 0;
LABEL_102:
  uint64_t v47 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(&v194, "cf_loop");
  if ((v182.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v48 = HIBYTE(v182.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v48 = v182.__r_.__value_.__l.__size_;
  }
  std::string::basic_string[abi:ne180100]((uint64_t)&v192, v48 + 11);
  if ((v192.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v49 = &v192;
  }
  else {
    uint64_t v49 = (std::string *)v192.__r_.__value_.__r.__words[0];
  }
  if (v48)
  {
    if ((v182.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string v50 = &v182;
    }
    else {
      std::string v50 = (std::string *)v182.__r_.__value_.__r.__words[0];
    }
    memmove(v49, v50, v48);
  }
  strcpy((char *)v49 + v48, "_loop_start");
  int v152 = 0;
  memset(v151, 0, sizeof(v151));
  uint64_t v150 = 0;
  long long v149 = 0;
  uint64_t v148 = 0;
  memset(&v187, 0, sizeof(v187));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v187, 0, 0, 0);
  memset(&v196, 0, sizeof(v196));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v196, v148, v149, 0xAAAAAAAAAAAAAAABLL * (((char *)v149 - (char *)v148) >> 3));
  LODWORD(v144.__r_.__value_.__l.__data_) = (***(uint64_t (****)(void))(v47[14] + 8))(*(void *)(v47[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  *(_OWORD *)&v185.__r_.__value_.__l.__data_ = v153;
  if (*((void *)&v153 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v153 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  memset(&v144, 0, sizeof(v144));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v144, (long long *)v187.__r_.__value_.__l.__data_, (long long *)v187.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v187.__r_.__value_.__l.__size_ - v187.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v189, 0, sizeof(v189));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v189, (long long *)v196.__r_.__value_.__l.__data_, (long long *)v196.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v196.__r_.__value_.__l.__size_ - v196.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  id v183 = &v189;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v183);
  id v183 = &v144;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v183);
  if (v185.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v185.__r_.__value_.__l.__size_);
  }
  if (*v47) {
    Espresso::sequential_builder::add_shape_from_kernel();
  }
  v144.__r_.__value_.__r.__words[0] = (std::string::size_type)&v196;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v144);
  v144.__r_.__value_.__r.__words[0] = (std::string::size_type)&v187;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v144);
  if (*((void *)&v153 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v153 + 1));
  }
  v144.__r_.__value_.__r.__words[0] = (std::string::size_type)&v148;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v144);
  v144.__r_.__value_.__r.__words[0] = (std::string::size_type)v151;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v144);
  if (SHIBYTE(v192.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v192.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v194.__r_.__value_.__l.__data_);
  }
  if (dword_1EB4DE7B8 < 1)
  {
    unsigned int v55 = 0;
  }
  else
  {
    char v51 = (void *)*((void *)this + 1);
    uint64_t v52 = *((void *)this + 2);
    std::string::value_type v53 = *(unsigned char *)v52;
    unsigned int v54 = *(_DWORD *)(v52 + 4);
    LODWORD(v52) = *(_DWORD *)(v52 + 12);
    v144.__r_.__value_.__s.__data_[0] = v53;
    *(std::string::size_type *)((char *)v144.__r_.__value_.__r.__words + 4) = v54;
    HIDWORD(v144.__r_.__value_.__r.__words[1]) = v52;
    unsigned int v55 = EspressoConverter::convertNeuralNetwork((uint64_t)&CoreML::Specification::_NeuralNetwork_default_instance_, *(void **)this, v51, (uint64_t)&v144);
    *(_DWORD *)(*((void *)this + 2) + 4) = HIDWORD(v144.__r_.__value_.__r.__words[0]);
  }
  memset(&v196, 0, sizeof(v196));
  if (v18)
  {
    std::string::operator=(&v196, &v170);
  }
  else
  {
    std::to_string(&v187, *(_DWORD *)(*((void *)this + 2) + 4));
    uint64_t v56 = std::string::append(&v187, "_");
    long long v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
    v189.__r_.__value_.__r.__words[2] = v56->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v189.__r_.__value_.__l.__data_ = v57;
    v56->__r_.__value_.__l.__size_ = 0;
    v56->__r_.__value_.__r.__words[2] = 0;
    v56->__r_.__value_.__r.__words[0] = 0;
    if ((v182.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v58 = &v182;
    }
    else {
      char v58 = (std::string *)v182.__r_.__value_.__r.__words[0];
    }
    if ((v182.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v59 = HIBYTE(v182.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v59 = v182.__r_.__value_.__l.__size_;
    }
    int v60 = std::string::append(&v189, (const std::string::value_type *)v58, v59);
    long long v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
    v144.__r_.__value_.__r.__words[2] = v60->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v144.__r_.__value_.__l.__data_ = v61;
    v60->__r_.__value_.__l.__size_ = 0;
    v60->__r_.__value_.__r.__words[2] = 0;
    v60->__r_.__value_.__r.__words[0] = 0;
    uint64_t v62 = std::string::append(&v144, "_loop_cond_check");
    std::string::size_type v63 = v62->__r_.__value_.__r.__words[0];
    v194.__r_.__value_.__r.__words[0] = v62->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v194.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v62->__r_.__value_.__r.__words[1] + 7);
    char v64 = HIBYTE(v62->__r_.__value_.__r.__words[2]);
    v62->__r_.__value_.__l.__size_ = 0;
    v62->__r_.__value_.__r.__words[2] = 0;
    v62->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v196.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v196.__r_.__value_.__l.__data_);
    }
    v196.__r_.__value_.__r.__words[0] = v63;
    v196.__r_.__value_.__l.__size_ = v194.__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)&v196.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v194.__r_.__value_.__r.__words + 7);
    *((unsigned char *)&v196.__r_.__value_.__s + 23) = v64;
    if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v144.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v189.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v187.__r_.__value_.__l.__data_);
    }
    v144.__r_.__value_.__r.__words[2] = 897988541;
    char v145 = 0;
    int v147 = 0;
    int v146 = 0;
    v144.__r_.__value_.__r.__words[0] = 103;
    v144.__r_.__value_.__l.__size_ = 1065353216;
    std::string::size_type v65 = *(void **)this;
    std::string::basic_string[abi:ne180100]<0>(&v187, "elementwise");
    if ((v182.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v66 = HIBYTE(v182.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v66 = v182.__r_.__value_.__l.__size_;
    }
    std::string::basic_string[abi:ne180100]((uint64_t)&v194, v66 + 17);
    if ((v194.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v67 = &v194;
    }
    else {
      uint64_t v67 = (std::string *)v194.__r_.__value_.__r.__words[0];
    }
    if (v66)
    {
      if ((v182.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        char v68 = &v182;
      }
      else {
        char v68 = (std::string *)v182.__r_.__value_.__r.__words[0];
      }
      memmove(v67, v68, v66);
    }
    strcpy((char *)v67 + v66, "_loop_count_check");
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v189, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else {
      std::string v189 = __p;
    }
    if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v190, v169.__r_.__value_.__l.__data_, v169.__r_.__value_.__l.__size_);
    }
    else {
      std::string v190 = v169;
    }
    id v139 = 0;
    v140 = 0;
    std::string::size_type v141 = 0;
    v192.__r_.__value_.__r.__words[0] = (std::string::size_type)&v139;
    v192.__r_.__value_.__s.__data_[8] = 0;
    id v139 = (long long *)operator new(0x30uLL);
    v140 = v139;
    std::string::size_type v141 = v139 + 3;
    v140 = (long long *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v141, (long long *)&v189, &v191, (std::string *)v139);
    if (SHIBYTE(v196.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v192, v196.__r_.__value_.__l.__data_, v196.__r_.__value_.__l.__size_);
    }
    else {
      std::string v192 = v196;
    }
    v136 = 0;
    v137 = 0;
    uint64_t v138 = 0;
    v185.__r_.__value_.__r.__words[0] = (std::string::size_type)&v136;
    v185.__r_.__value_.__s.__data_[8] = 0;
    v136 = (std::string *)operator new(0x18uLL);
    v137 = v136;
    uint64_t v138 = v136 + 1;
    v137 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v138, (long long *)&v192, (long long *)&v193, v136);
    Espresso::sequential_builder::add<Espresso::elementwise_params>(&v142, v65, (uint64_t)&v187, (uint64_t)&v194, (uint64_t)&v144, v139, v140, (long long **)&v136);
    if (v143) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v143);
    }
    v185.__r_.__value_.__r.__words[0] = (std::string::size_type)&v136;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v185);
    if (SHIBYTE(v192.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v192.__r_.__value_.__l.__data_);
    }
    v192.__r_.__value_.__r.__words[0] = (std::string::size_type)&v139;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v192);
    for (uint64_t i = 0; i != -6; i -= 3)
    {
      if (SHIBYTE(v190.__r_.__value_.__r.__words[i + 2]) < 0) {
        operator delete(*(void **)((char *)&v189 + i * 8 + 24));
      }
    }
    if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v194.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v187.__r_.__value_.__l.__data_);
    }
    if (v13 >= 1)
    {
      v189.__r_.__value_.__r.__words[2] = 897988541;
      v190.__r_.__value_.__s.__data_[0] = 0;
      LODWORD(v191) = 0;
      HIDWORD(v190.__r_.__value_.__r.__words[2]) = 0;
      v189.__r_.__value_.__l.__size_ = 1065353216;
      v189.__r_.__value_.__r.__words[0] = 110;
      uint64_t v70 = *(void **)this;
      std::string::basic_string[abi:ne180100]<0>(&v194, "elementwise");
      if ((v182.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v71 = HIBYTE(v182.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v71 = v182.__r_.__value_.__l.__size_;
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v192, v71 + 21);
      if ((v192.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v72 = &v192;
      }
      else {
        int v72 = (std::string *)v192.__r_.__value_.__r.__words[0];
      }
      if (v71)
      {
        if ((v182.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          char v73 = &v182;
        }
        else {
          char v73 = (std::string *)v182.__r_.__value_.__r.__words[0];
        }
        memmove(v72, v73, v71);
      }
      strcpy((char *)v72 + v71, "_loop_joint_condition");
      if (SHIBYTE(v196.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v187, v196.__r_.__value_.__l.__data_, v196.__r_.__value_.__l.__size_);
      }
      else {
        std::string v187 = v196;
      }
      if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v188, v170.__r_.__value_.__l.__data_, v170.__r_.__value_.__l.__size_);
      }
      else {
        std::string v188 = v170;
      }
      v131 = 0;
      std::string::size_type v132 = 0;
      uint64_t v133 = 0;
      v185.__r_.__value_.__r.__words[0] = (std::string::size_type)&v131;
      v185.__r_.__value_.__s.__data_[8] = 0;
      v131 = (long long *)operator new(0x30uLL);
      std::string::size_type v132 = v131;
      uint64_t v133 = v131 + 3;
      std::string::size_type v132 = (long long *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v133, (long long *)&v187, (long long *)&v189, (std::string *)v131);
      if (SHIBYTE(v196.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v185, v196.__r_.__value_.__l.__data_, v196.__r_.__value_.__l.__size_);
      }
      else {
        std::string v185 = v196;
      }
      long long v128 = 0;
      uint64_t v129 = 0;
      long long v130 = 0;
      id v183 = (std::string *)&v128;
      char v184 = 0;
      long long v128 = (std::string *)operator new(0x18uLL);
      uint64_t v129 = v128;
      long long v130 = v128 + 1;
      uint64_t v129 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v130, (long long *)&v185, (long long *)&v186, v128);
      Espresso::sequential_builder::add<Espresso::elementwise_params>(&v134, v70, (uint64_t)&v194, (uint64_t)&v192, (uint64_t)&v189, v131, v132, (long long **)&v128);
      if (v135) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v135);
      }
      id v183 = (std::string *)&v128;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v183);
      if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v185.__r_.__value_.__l.__data_);
      }
      v185.__r_.__value_.__r.__words[0] = (std::string::size_type)&v131;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v185);
      for (uint64_t j = 0; j != -6; j -= 3)
      {
        if (SHIBYTE(v188.__r_.__value_.__r.__words[j + 2]) < 0) {
          operator delete(*(void **)((char *)&v187 + j * 8 + 24));
        }
      }
      if (SHIBYTE(v192.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v192.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v194.__r_.__value_.__l.__data_);
      }
    }
  }
  std::string::size_type v75 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(&v144, "cf_if");
  if ((v182.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v76 = HIBYTE(v182.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v76 = v182.__r_.__value_.__l.__size_;
  }
  std::string::basic_string[abi:ne180100]((uint64_t)&v189, v76 + 3);
  if ((v189.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int64_t v77 = &v189;
  }
  else {
    int64_t v77 = (std::string *)v189.__r_.__value_.__r.__words[0];
  }
  if (v76)
  {
    if ((v182.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v78 = &v182;
    }
    else {
      char v78 = (std::string *)v182.__r_.__value_.__r.__words[0];
    }
    memmove(v77, v78, v76);
  }
  *(_DWORD *)((char *)&v77->__r_.__value_.__l.__data_ + v7CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = 6711647;
  if (SHIBYTE(v196.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v187, v196.__r_.__value_.__l.__data_, v196.__r_.__value_.__l.__size_);
  }
  else {
    std::string v187 = v196;
  }
  v123 = 0;
  uint64_t v124 = 0;
  uint64_t v125 = 0;
  v194.__r_.__value_.__r.__words[0] = (std::string::size_type)&v123;
  v194.__r_.__value_.__s.__data_[8] = 0;
  v123 = (long long *)operator new(0x18uLL);
  uint64_t v124 = v123;
  uint64_t v125 = (char *)v123 + 24;
  uint64_t v124 = (long long *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v125, (long long *)&v187, (long long *)&v188, (std::string *)v123);
  memset(v122, 0, sizeof(v122));
  Espresso::sequential_builder::add<Espresso::cf_if_params_t>(&v126, v75, (uint64_t)&v144, (uint64_t)&v189, (uint64_t)&v192, v123, v124, v122);
  if (v127) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v127);
  }
  v194.__r_.__value_.__r.__words[0] = (std::string::size_type)v122;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v194);
  v194.__r_.__value_.__r.__words[0] = (std::string::size_type)&v123;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v194);
  if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v187.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v189.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v144.__r_.__value_.__l.__data_);
    if (v18) {
      goto LABEL_260;
    }
  }
  else if (v18)
  {
    goto LABEL_260;
  }
  v144.__r_.__value_.__r.__words[2] = 897988541;
  char v145 = 0;
  int v147 = 0;
  int v146 = 0;
  v144.__r_.__value_.__r.__words[0] = 2;
  v144.__r_.__value_.__l.__size_ = 1065353216;
  std::string v79 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(&v189, "elementwise");
  if ((v182.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v80 = HIBYTE(v182.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v80 = v182.__r_.__value_.__l.__size_;
  }
  std::string::basic_string[abi:ne180100]((uint64_t)&v187, v80 + 19);
  if ((v187.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v81 = &v187;
  }
  else {
    unint64_t v81 = (std::string *)v187.__r_.__value_.__r.__words[0];
  }
  if (v80)
  {
    if ((v182.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v82 = &v182;
    }
    else {
      long long v82 = (std::string *)v182.__r_.__value_.__r.__words[0];
    }
    memmove(v81, v82, v80);
  }
  strcpy((char *)v81 + v80, "_increment_iterator");
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v194, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v194 = __p;
  }
  v117 = 0;
  uint64_t v118 = 0;
  v119 = 0;
  v192.__r_.__value_.__r.__words[0] = (std::string::size_type)&v117;
  v192.__r_.__value_.__s.__data_[8] = 0;
  v117 = (long long *)operator new(0x18uLL);
  uint64_t v118 = v117;
  v119 = (char *)v117 + 24;
  uint64_t v118 = (long long *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v119, (long long *)&v194, (long long *)&v195, (std::string *)v117);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v192, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v192 = __p;
  }
  id v114 = 0;
  char v115 = 0;
  id v116 = 0;
  v185.__r_.__value_.__r.__words[0] = (std::string::size_type)&v114;
  v185.__r_.__value_.__s.__data_[8] = 0;
  id v114 = (std::string *)operator new(0x18uLL);
  char v115 = v114;
  id v116 = v114 + 1;
  char v115 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v116, (long long *)&v192, (long long *)&v193, v114);
  Espresso::sequential_builder::add<Espresso::elementwise_params>(&v120, v79, (uint64_t)&v189, (uint64_t)&v187, (uint64_t)&v144, v117, v118, (long long **)&v114);
  if (v121) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v121);
  }
  v185.__r_.__value_.__r.__words[0] = (std::string::size_type)&v114;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v185);
  if (SHIBYTE(v192.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v192.__r_.__value_.__l.__data_);
  }
  v192.__r_.__value_.__r.__words[0] = (std::string::size_type)&v117;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v192);
  if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v194.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v187.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v189.__r_.__value_.__l.__data_);
  }
LABEL_260:
  uint64_t v83 = (void *)*((void *)this + 1);
  uint64_t v84 = *((void *)this + 2);
  std::string::value_type v85 = *(unsigned char *)v84;
  unsigned int v86 = *(_DWORD *)(v84 + 4);
  LODWORD(v84) = *(_DWORD *)(v84 + 12) + 1;
  v187.__r_.__value_.__s.__data_[0] = v85;
  *(std::string::size_type *)((char *)v187.__r_.__value_.__r.__words + 4) = v86;
  HIDWORD(v187.__r_.__value_.__r.__words[1]) = v84;
  char v87 = EspressoConverter::convertNeuralNetwork(v101, *(void **)this, v83, (uint64_t)&v187);
  *(_DWORD *)(*((void *)this + 2) + 4) = HIDWORD(v187.__r_.__value_.__r.__words[0]);
  LODWORD(v192.__r_.__value_.__l.__data_) = 1;
  long long v88 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(&v144, "cf_jump");
  if ((v182.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v89 = HIBYTE(v182.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v89 = v182.__r_.__value_.__l.__size_;
  }
  std::string::size_type v90 = &v189;
  std::string::basic_string[abi:ne180100]((uint64_t)&v189, v89 + 5);
  if ((v189.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v90 = (std::string *)v189.__r_.__value_.__r.__words[0];
  }
  if (v89)
  {
    if ((v182.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v91 = &v182;
    }
    else {
      uint64_t v91 = (std::string *)v182.__r_.__value_.__r.__words[0];
    }
    memmove(v90, v91, v89);
  }
  strcpy((char *)v90 + v89, "_jump");
  memset(v111, 0, sizeof(v111));
  memset(v110, 0, sizeof(v110));
  Espresso::sequential_builder::add<Espresso::cf_jump_params_t>(&v112, v88, (uint64_t)&v144, (uint64_t)&v189, (uint64_t)&v192, 0, 0, v110);
  if (v113) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v113);
  }
  v194.__r_.__value_.__r.__words[0] = (std::string::size_type)v110;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v194);
  v194.__r_.__value_.__r.__words[0] = (std::string::size_type)v111;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v194);
  if (SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v189.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v144.__r_.__value_.__l.__data_);
  }
  uint64_t v92 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(&v144, "cf_end");
  if ((v182.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v93 = HIBYTE(v182.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v93 = v182.__r_.__value_.__l.__size_;
  }
  int v94 = &v189;
  std::string::basic_string[abi:ne180100]((uint64_t)&v189, v93 + 12);
  if ((v189.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    int v94 = (std::string *)v189.__r_.__value_.__r.__words[0];
  }
  if (v93)
  {
    if ((v182.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v95 = &v182;
    }
    else {
      int v95 = (std::string *)v182.__r_.__value_.__r.__words[0];
    }
    memmove(v94, v95, v93);
  }
  strcpy((char *)v94 + v93, "_end_loop_if");
  memset(v107, 0, sizeof(v107));
  memset(v106, 0, sizeof(v106));
  Espresso::sequential_builder::add<Espresso::cf_end_params_t>(&v108, v92, (uint64_t)&v144, (uint64_t)&v189, (uint64_t)&v185, 0, 0, v106);
  if (v109) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v109);
  }
  v194.__r_.__value_.__r.__words[0] = (std::string::size_type)v106;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v194);
  v194.__r_.__value_.__r.__words[0] = (std::string::size_type)v107;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v194);
  if (SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v189.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v144.__r_.__value_.__l.__data_);
  }
  int v96 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(&v144, "cf_end");
  if ((v182.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v97 = HIBYTE(v182.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v97 = v182.__r_.__value_.__l.__size_;
  }
  int v98 = &v189;
  std::string::basic_string[abi:ne180100]((uint64_t)&v189, v97 + 9);
  if ((v189.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    int v98 = (std::string *)v189.__r_.__value_.__r.__words[0];
  }
  if (v97)
  {
    if ((v182.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v99 = &v182;
    }
    else {
      int v99 = (std::string *)v182.__r_.__value_.__r.__words[0];
    }
    memmove(v98, v99, v97);
  }
  strcpy((char *)v98 + v97, "_end_loop");
  memset(v103, 0, sizeof(v103));
  memset(v102, 0, sizeof(v102));
  Espresso::sequential_builder::add<Espresso::cf_end_params_t>(&v104, v96, (uint64_t)&v144, (uint64_t)&v189, (uint64_t)&v185, 0, 0, v102);
  if (v105) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v105);
  }
  v194.__r_.__value_.__r.__words[0] = (std::string::size_type)v102;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v194);
  v194.__r_.__value_.__r.__words[0] = (std::string::size_type)v103;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v194);
  if (SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v189.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v144.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v196.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v196.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v169.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v170.__r_.__value_.__l.__data_);
  }
  CoreML::Specification::LoopLayerParams::~LoopLayerParams((CoreML::Specification::LoopLayerParams *)&p_str);
  p_str = &__str;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_str);
  p_str = (std::string **)v181;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_str);
  if (SHIBYTE(v182.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v182.__r_.__value_.__l.__data_);
  }
  if (v87) {
    return 1;
  }
  else {
    return v55;
  }
}

void sub_19EA7550C(_Unwind_Exception *a1)
{
  STACK[0x3D0] = (unint64_t)&STACK[0x2D0];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x3D0]);
  if (SLOBYTE(STACK[0x417]) < 0) {
    operator delete((void *)STACK[0x400]);
  }
  if (SLOBYTE(STACK[0x2FF]) < 0) {
    operator delete((void *)STACK[0x2E8]);
  }
  if (SLOBYTE(STACK[0x317]) < 0) {
    operator delete((void *)STACK[0x300]);
  }
  CoreML::Specification::LoopLayerParams::~LoopLayerParams((CoreML::Specification::LoopLayerParams *)&STACK[0x318]);
  STACK[0x318] = (unint64_t)&STACK[0x350];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x318]);
  STACK[0x318] = (unint64_t)&STACK[0x368];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x318]);
  if (SLOBYTE(STACK[0x397]) < 0) {
    operator delete((void *)STACK[0x380]);
  }
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::add<Espresso::cf_if_params_t>(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, long long *a6, long long *a7, long long **a8)
{
  memset(&v13, 0, sizeof(v13));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v13, a6, a7, 0xAAAAAAAAAAAAAAABLL * (((char *)a7 - (char *)a6) >> 3));
  memset(&v12, 0, sizeof(v12));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v12, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a8[1] - (char *)*a8) >> 3));
  LODWORD(v15.__r_.__value_.__l.__data_) = (***(uint64_t (****)(void))(a2[14] + 8))(*(void *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  int v11 = (std::__shared_weak_count *)a1[1];
  uint64_t v16 = *a1;
  int v17 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(&v15, 0, sizeof(v15));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v15, (long long *)v13.__r_.__value_.__l.__data_, (long long *)v13.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13.__r_.__value_.__l.__size_ - v13.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v14, 0, sizeof(v14));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v14, (long long *)v12.__r_.__value_.__l.__data_, (long long *)v12.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12.__r_.__value_.__l.__size_ - v12.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  int v18 = &v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  int v18 = &v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (*a2) {
    Espresso::sequential_builder::add_shape_from_kernel();
  }
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
}

void sub_19EA75DD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v16 = *(std::__shared_weak_count **)(v13 + 8);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  *(void *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(void *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::add<Espresso::cf_jump_params_t>(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, long long *a6, long long *a7, long long **a8)
{
  memset(&v13, 0, sizeof(v13));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v13, a6, a7, 0xAAAAAAAAAAAAAAABLL * (((char *)a7 - (char *)a6) >> 3));
  memset(&v12, 0, sizeof(v12));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v12, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a8[1] - (char *)*a8) >> 3));
  LODWORD(v15.__r_.__value_.__l.__data_) = (***(uint64_t (****)(void))(a2[14] + 8))(*(void *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  int v11 = (std::__shared_weak_count *)a1[1];
  uint64_t v16 = *a1;
  int v17 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(&v15, 0, sizeof(v15));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v15, (long long *)v13.__r_.__value_.__l.__data_, (long long *)v13.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13.__r_.__value_.__l.__size_ - v13.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v14, 0, sizeof(v14));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v14, (long long *)v12.__r_.__value_.__l.__data_, (long long *)v12.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12.__r_.__value_.__l.__size_ - v12.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  int v18 = &v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  int v18 = &v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (*a2) {
    Espresso::sequential_builder::add_shape_from_kernel();
  }
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
}

void sub_19EA76040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v16 = *(std::__shared_weak_count **)(v13 + 8);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  *(void *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(void *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::add<Espresso::cf_end_params_t>(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, long long *a6, long long *a7, long long **a8)
{
  memset(&v13, 0, sizeof(v13));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v13, a6, a7, 0xAAAAAAAAAAAAAAABLL * (((char *)a7 - (char *)a6) >> 3));
  memset(&v12, 0, sizeof(v12));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v12, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a8[1] - (char *)*a8) >> 3));
  LODWORD(v15.__r_.__value_.__l.__data_) = (***(uint64_t (****)(void))(a2[14] + 8))(*(void *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  int v11 = (std::__shared_weak_count *)a1[1];
  uint64_t v16 = *a1;
  int v17 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(&v15, 0, sizeof(v15));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v15, (long long *)v13.__r_.__value_.__l.__data_, (long long *)v13.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13.__r_.__value_.__l.__size_ - v13.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v14, 0, sizeof(v14));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v14, (long long *)v12.__r_.__value_.__l.__data_, (long long *)v12.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12.__r_.__value_.__l.__size_ - v12.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  int v18 = &v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  int v18 = &v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (*a2) {
    Espresso::sequential_builder::add_shape_from_kernel();
  }
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
}

void sub_19EA762AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v16 = *(std::__shared_weak_count **)(v13 + 8);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  *(void *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(void *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void LayerTranslator::addConstantPad(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  uint64_t v4 = (long long *)*((void *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v79, *(const std::string::value_type **)v4, *((void *)v4 + 1));
  }
  else
  {
    long long v5 = *v4;
    v79.__r_.__value_.__r.__words[2] = *((void *)v4 + 2);
    *(_OWORD *)&v79.__r_.__value_.__l.__data_ = v5;
  }
  std::string::size_type v76 = 0;
  int64_t v77 = 0;
  uint64_t v78 = 0;
  char v73 = 0;
  std::string v74 = 0;
  uint64_t v75 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v76, (uint64_t *)&v73, *((void *)this + 1));
  memset(v72, 0, sizeof(v72));
  long long v71 = 0u;
  long long v70 = 0u;
  long long v69 = 0u;
  long long v68 = 0u;
  long long v67 = 0u;
  long long v66 = 0u;
  long long v65 = 0u;
  long long v64 = 0u;
  long long v63 = 0u;
  long long v62 = 0u;
  long long v61 = 0u;
  long long v60 = 0u;
  long long v59 = 0u;
  long long v58 = 0u;
  *(_OWORD *)&v57[4] = 0u;
  memset(v56, 0, 76);
  v57[0] = 1;
  if (*((_DWORD *)a2 + 35) == 1155)
  {
    std::string v7 = (uint64_t *)*((void *)a2 + 16);
    *(_DWORD *)&v57[4] = *((_DWORD *)v7 + 9);
LABEL_8:
    v72[20] = *((unsigned char *)v7 + 40);
    HIWORD(v56[0]) = 0;
    goto LABEL_9;
  }
  unint64_t inited = (unint64_t)CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
  int v8 = *((_DWORD *)a2 + 35);
  *(_DWORD *)&v57[4] = dword_1EB4E158C;
  if (v8 == 1155)
  {
    std::string v7 = (uint64_t *)*((void *)a2 + 16);
    goto LABEL_8;
  }
  unint64_t inited = (unint64_t)CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
  int v28 = *((_DWORD *)a2 + 35);
  v72[20] = byte_1EB4E1590;
  HIWORD(v56[0]) = 0;
  if (v28 == 1155)
  {
    std::string v7 = (uint64_t *)*((void *)a2 + 16);
  }
  else
  {
    unint64_t inited = (unint64_t)CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
    std::string v7 = &CoreML::Specification::_ConstantPaddingLayerParams_default_instance_;
  }
LABEL_9:
  v56[1] = *((_DWORD *)v7 + 9);
  if ((char *)v74 - (char *)v73 == 24)
  {
    if (*((_DWORD *)a2 + 35) == 1155)
    {
      uint64_t v9 = (uint64_t *)*((void *)a2 + 16);
    }
    else
    {
      unint64_t inited = (unint64_t)CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
      uint64_t v9 = &CoreML::Specification::_ConstantPaddingLayerParams_default_instance_;
    }
    std::string::size_type v41 = this;
    int v12 = *((_DWORD *)v9 + 4);
    if (v12 < 1)
    {
      uint64_t v13 = 0;
      uint64_t v22 = 0;
    }
    else
    {
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      unint64_t v15 = 0;
      uint64_t v16 = 0;
      if (v12 >= 64) {
        uint64_t v17 = 64;
      }
      else {
        uint64_t v17 = v12;
      }
      do
      {
        if (*((_DWORD *)a2 + 35) == 1155)
        {
          int v18 = (uint64_t *)*((void *)a2 + 16);
        }
        else
        {
          unint64_t inited = (unint64_t)CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
          int v18 = &CoreML::Specification::_ConstantPaddingLayerParams_default_instance_;
        }
        int v19 = *(_DWORD *)(v18[3] + 8 * v16 + 8);
        long long v20 = &v57[4 * v16];
        *((_DWORD *)v20 + 2) = v19;
        std::string::size_type v21 = (int *)(v20 + 8);
        if ((unint64_t)v14 >= v15)
        {
          uint64_t v23 = v14 - v13;
          unint64_t v24 = v23 + 1;
          if ((unint64_t)(v23 + 1) >> 62) {
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
          }
          if ((uint64_t)(v15 - (void)v13) >> 1 > v24) {
            unint64_t v24 = (uint64_t)(v15 - (void)v13) >> 1;
          }
          if (v15 - (unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t inited = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t inited = v24;
          }
          if (inited)
          {
            unint64_t inited = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(inited);
            int v19 = *v21;
          }
          else
          {
            uint64_t v25 = 0;
          }
          std::string::size_type v26 = (_DWORD *)(inited + 4 * v23);
          *std::string::size_type v26 = v19;
          uint64_t v22 = v26 + 1;
          while (v14 != v13)
          {
            int v27 = *--v14;
            *--std::string::size_type v26 = v27;
          }
          unint64_t v15 = inited + 4 * v25;
          if (v13) {
            operator delete(v13);
          }
          uint64_t v13 = v26;
        }
        else
        {
          *uint64_t v14 = v19;
          uint64_t v22 = v14 + 1;
        }
        ++v16;
        uint64_t v14 = v22;
      }
      while (v16 != v17);
    }
    if (*((_DWORD *)a2 + 35) == 1155)
    {
      int v29 = (uint64_t *)*((void *)a2 + 16);
    }
    else
    {
      CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
      int v29 = &CoreML::Specification::_ConstantPaddingLayerParams_default_instance_;
    }
    if (*((unsigned char *)v29 + 40))
    {
LABEL_50:
      this = v41;
      long long v30 = *(void **)v41;
      std::string::basic_string[abi:ne180100]<0>(__p, "tensor_zero_pad");
      memset(&v47, 0, sizeof(v47));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v47, v73, v74, 0xAAAAAAAAAAAAAAABLL * (((char *)v74 - (char *)v73) >> 3));
      memset(&v46, 0, sizeof(v46));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v46, v76, v77, 0xAAAAAAAAAAAAAAABLL * (((char *)v77 - (char *)v76) >> 3));
      Espresso::sequential_builder::add<Espresso::tensor_zero_pad_params_t>(&v48, v30, (uint64_t)__p, (uint64_t)&v79, (uint64_t)v57, (long long *)v47.__r_.__value_.__l.__data_, (long long *)v47.__r_.__value_.__l.__size_, (long long **)&v46);
      if (v49) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v49);
      }
      v80[0] = (void **)&v46;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v80);
      v80[0] = (void **)&v47;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v80);
      if (v53 < 0) {
        operator delete(__p[0]);
      }
      if (!v13) {
        goto LABEL_73;
      }
      goto LABEL_71;
    }
    uint64_t v31 = v22 - v13;
    unint64_t v32 = v31 - 4;
    if (v31 == 4)
    {
      int v36 = v13[2];
      int v37 = v13[3];
    }
    else
    {
      if (*v13) {
        goto LABEL_50;
      }
      unint64_t v33 = 0;
      while (v31 - 5 != v33)
      {
        if (v13[++v33])
        {
          if (v33 < v32) {
            goto LABEL_50;
          }
          break;
        }
      }
      long long v35 = &v13[v31];
      int v36 = *(v35 - 2);
      int v37 = *(v35 - 1);
      if ((unint64_t)((char *)v22 - (char *)v13) < 9)
      {
        LOWORD(v38) = 0;
        LOWORD(v39) = 0;
        this = v41;
LABEL_67:
        LOWORD(v56[2]) = v36;
        HIWORD(v56[2]) = v37;
        LOWORD(v56[3]) = v38;
        HIWORD(v56[3]) = v39;
        char v40 = *(void **)this;
        std::string::basic_string[abi:ne180100]<0>(__p, "general_padding");
        memset(&v51, 0, sizeof(v51));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v51, v73, v74, 0xAAAAAAAAAAAAAAABLL * (((char *)v74 - (char *)v73) >> 3));
        memset(&v50, 0, sizeof(v50));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v50, v76, v77, 0xAAAAAAAAAAAAAAABLL * (((char *)v77 - (char *)v76) >> 3));
        Espresso::sequential_builder::add<Espresso::general_padding_params>(&v54, v40, (uint64_t)__p, (uint64_t)&v79, (uint64_t)v56, (long long *)v51.__r_.__value_.__l.__data_, (long long *)v51.__r_.__value_.__l.__size_, (long long **)&v50);
        if (v55) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v55);
        }
        v80[0] = (void **)&v50;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v80);
        v80[0] = (void **)&v51;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v80);
        if (v53 < 0) {
          operator delete(__p[0]);
        }
LABEL_71:
        int v11 = v13;
        goto LABEL_72;
      }
    }
    this = v41;
    int v38 = v13[v32];
    int v39 = v13[v31 - 3];
    goto LABEL_67;
  }
  uint64_t v10 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "tensor_zero_pad");
  memset(&v43, 0, sizeof(v43));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v43, v73, v74, 0xAAAAAAAAAAAAAAABLL * (((char *)v74 - (char *)v73) >> 3));
  memset(&v42, 0, sizeof(v42));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v42, v76, v77, 0xAAAAAAAAAAAAAAABLL * (((char *)v77 - (char *)v76) >> 3));
  Espresso::sequential_builder::add<Espresso::tensor_zero_pad_params_t>(&v44, v10, (uint64_t)__p, (uint64_t)&v79, (uint64_t)v57, (long long *)v43.__r_.__value_.__l.__data_, (long long *)v43.__r_.__value_.__l.__size_, (long long **)&v42);
  if (v45) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v45);
  }
  v80[0] = (void **)&v42;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v80);
  v80[0] = (void **)&v43;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v80);
  if (v53 < 0)
  {
    int v11 = __p[0];
LABEL_72:
    operator delete(v11);
  }
LABEL_73:
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v76);
  *(void *)long long v57 = &v73;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v57);
  *(void *)long long v57 = &v76;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v57);
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v79.__r_.__value_.__l.__data_);
  }
}

void sub_19EA76948(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  *(void *)(v52 - 104) = v50;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v52 - 104));
  *(void *)(v52 - 104) = &a29;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v52 - 104));
  if (a37 < 0) {
    operator delete(__p);
  }
  operator delete(v51);
  a50 = v52 - 176;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a50);
  a50 = v52 - 152;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a50);
  if (*(char *)(v52 - 105) < 0) {
    operator delete(*(void **)(v52 - 128));
  }
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::add<Espresso::general_padding_params>(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, long long *a6, long long *a7, long long **a8)
{
  memset(&v13, 0, sizeof(v13));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v13, a6, a7, 0xAAAAAAAAAAAAAAABLL * (((char *)a7 - (char *)a6) >> 3));
  memset(&v12, 0, sizeof(v12));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v12, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a8[1] - (char *)*a8) >> 3));
  LODWORD(v15.__r_.__value_.__l.__data_) = (***(uint64_t (****)(void))(a2[14] + 8))(*(void *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  int v11 = (std::__shared_weak_count *)a1[1];
  uint64_t v16 = *a1;
  uint64_t v17 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(&v15, 0, sizeof(v15));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v15, (long long *)v13.__r_.__value_.__l.__data_, (long long *)v13.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13.__r_.__value_.__l.__size_ - v13.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v14, 0, sizeof(v14));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v14, (long long *)v12.__r_.__value_.__l.__data_, (long long *)v12.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12.__r_.__value_.__l.__size_ - v12.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  int v18 = &v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  int v18 = &v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (*a2) {
    Espresso::sequential_builder::add_shape_from_kernel();
  }
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
}

void sub_19EA76C60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v16 = *(std::__shared_weak_count **)(v13 + 8);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  *(void *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(void *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::add<Espresso::tensor_zero_pad_params_t>(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, long long *a6, long long *a7, long long **a8)
{
  memset(&v13, 0, sizeof(v13));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v13, a6, a7, 0xAAAAAAAAAAAAAAABLL * (((char *)a7 - (char *)a6) >> 3));
  memset(&v12, 0, sizeof(v12));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v12, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a8[1] - (char *)*a8) >> 3));
  LODWORD(v15.__r_.__value_.__l.__data_) = (***(uint64_t (****)(void))(a2[14] + 8))(*(void *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  int v11 = (std::__shared_weak_count *)a1[1];
  uint64_t v16 = *a1;
  uint64_t v17 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(&v15, 0, sizeof(v15));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v15, (long long *)v13.__r_.__value_.__l.__data_, (long long *)v13.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13.__r_.__value_.__l.__size_ - v13.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v14, 0, sizeof(v14));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v14, (long long *)v12.__r_.__value_.__l.__data_, (long long *)v12.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12.__r_.__value_.__l.__size_ - v12.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  int v18 = &v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  int v18 = &v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (*a2) {
    Espresso::sequential_builder::add_shape_from_kernel();
  }
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
}

void sub_19EA76ECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v16 = *(std::__shared_weak_count **)(v13 + 8);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  *(void *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(void *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void LayerTranslator::addCeil(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  uint64_t v4 = (long long *)*((void *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)v4, *((void *)v4 + 1));
  }
  else
  {
    long long v5 = *v4;
    v23.__r_.__value_.__r.__words[2] = *((void *)v4 + 2);
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v5;
  }
  long long v20 = 0;
  std::string::size_type v21 = 0;
  uint64_t v22 = 0;
  uint64_t v17 = 0;
  int v18 = 0;
  uint64_t v19 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v20, (uint64_t *)&v17, *((void *)this + 1));
  v13[2] = (void **)897988541;
  char v14 = 0;
  int v15 = 0;
  int v16 = 0;
  v13[0] = (void **)118;
  v13[1] = (void **)1065353216;
  uint64_t v6 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
  memset(&v8, 0, sizeof(v8));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v8, v17, v18, 0xAAAAAAAAAAAAAAABLL * (((char *)v18 - (char *)v17) >> 3));
  memset(&v7, 0, sizeof(v7));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v7, v20, v21, 0xAAAAAAAAAAAAAAABLL * (((char *)v21 - (char *)v20) >> 3));
  Espresso::sequential_builder::add<Espresso::elementwise_params>(&v11, v6, (uint64_t)__p, (uint64_t)&v23, (uint64_t)v13, (long long *)v8.__r_.__value_.__l.__data_, (long long *)v8.__r_.__value_.__l.__size_, (long long **)&v7);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  unint64_t v24 = &v7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  unint64_t v24 = &v8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v20);
  v13[0] = (void **)&v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v13);
  v13[0] = (void **)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v13);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
}

void sub_19EA77104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  a23 = v23 - 112;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  a23 = v23 - 88;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  if (*(char *)(v23 - 41) < 0) {
    operator delete(*(void **)(v23 - 64));
  }
  _Unwind_Resume(a1);
}

void LayerTranslator::addConcatND(LayerTranslator *this, uint64_t **a2)
{
  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  uint64_t v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v26, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    long long v5 = *(_OWORD *)v4;
    v26.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v5;
  }
  uint64_t v23 = 0;
  unint64_t v24 = 0;
  uint64_t v25 = 0;
  long long v20 = 0;
  std::string::size_type v21 = 0;
  uint64_t v22 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v23, (uint64_t *)&v20, *((void *)this + 1));
  if (*((_DWORD *)a2 + 35) == 980)
  {
    std::string v7 = a2[16];
    int v17 = v7[2];
    char v18 = 1;
  }
  else
  {
    unint64_t inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    int v9 = *((_DWORD *)a2 + 35);
    int v17 = qword_1EB4DFF98;
    char v18 = 1;
    if (v9 == 980)
    {
      std::string v7 = a2[16];
    }
    else
    {
      CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
      std::string v7 = &CoreML::Specification::_ConcatNDLayerParams_default_instance_;
    }
  }
  char v19 = *((unsigned char *)v7 + 24);
  char v10 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(&__p, "general_concat");
  memset(&v12, 0, sizeof(v12));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v12, v20, v21, 0xAAAAAAAAAAAAAAABLL * (((char *)v21 - (char *)v20) >> 3));
  memset(&v11, 0, sizeof(v11));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v11, v23, v24, 0xAAAAAAAAAAAAAAABLL * (((char *)v24 - (char *)v23) >> 3));
  memset(&v28, 0, sizeof(v28));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v28, (long long *)v12.__r_.__value_.__l.__data_, (long long *)v12.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12.__r_.__value_.__l.__size_ - v12.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v27, 0, sizeof(v27));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v27, (long long *)v11.__r_.__value_.__l.__data_, (long long *)v11.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11.__r_.__value_.__l.__size_ - v11.__r_.__value_.__r.__words[0]) >> 3));
  LODWORD(v30.__r_.__value_.__l.__data_) = (***(uint64_t (****)(void))(v10[14] + 8))(*(void *)(v10[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  uint64_t v31 = v15;
  unint64_t v32 = v16;
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(&v30, 0, sizeof(v30));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v30, (long long *)v28.__r_.__value_.__l.__data_, (long long *)v28.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v28.__r_.__value_.__l.__size_ - v28.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v29, 0, sizeof(v29));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v29, (long long *)v27.__r_.__value_.__l.__data_, (long long *)v27.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v27.__r_.__value_.__l.__size_ - v27.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  unint64_t v33 = &v29;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
  unint64_t v33 = &v30;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  if (*v10) {
    Espresso::sequential_builder::add_shape_from_kernel();
  }
  v30.__r_.__value_.__r.__words[0] = (std::string::size_type)&v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
  v30.__r_.__value_.__r.__words[0] = (std::string::size_type)&v28;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  v30.__r_.__value_.__r.__words[0] = (std::string::size_type)&v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
  v30.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
  if (v14 < 0) {
    operator delete(__p);
  }
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v23);
  v30.__r_.__value_.__r.__words[0] = (std::string::size_type)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
  v30.__r_.__value_.__r.__words[0] = (std::string::size_type)&v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
}

void sub_19EA774D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char **__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,std::__shared_weak_count *a22,uint64_t a23,char *a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36)
{
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }
  *(void *)(v36 - 5CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = &a36;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v36 - 56));
  *(void *)(v36 - 5CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = v36 - 144;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v36 - 56));
  *(void *)(v36 - 5CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = &a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v36 - 56));
  *(void *)(v36 - 5CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = &a12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v36 - 56));
  if (a20 < 0) {
    operator delete(__p);
  }
  std::string __p = &a24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  a24 = &a27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  if (a35 < 0) {
    operator delete(a30);
  }
  _Unwind_Resume(a1);
}

void LayerTranslator::addFloorDivBroadcastable(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  uint64_t v4 = (long long *)*((void *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)v4, *((void *)v4 + 1));
  }
  else
  {
    long long v5 = *v4;
    v23.__r_.__value_.__r.__words[2] = *((void *)v4 + 2);
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v5;
  }
  long long v20 = 0;
  std::string::size_type v21 = 0;
  uint64_t v22 = 0;
  int v17 = 0;
  char v18 = 0;
  uint64_t v19 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v20, (uint64_t *)&v17, *((void *)this + 1));
  v13[2] = (void **)897988541;
  int v15 = 0;
  int v16 = 0;
  v13[0] = (void **)1021;
  v13[1] = (void **)1065353216;
  char v14 = 1;
  uint64_t v6 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
  memset(&v8, 0, sizeof(v8));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v8, v17, v18, 0xAAAAAAAAAAAAAAABLL * (((char *)v18 - (char *)v17) >> 3));
  memset(&v7, 0, sizeof(v7));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v7, v20, v21, 0xAAAAAAAAAAAAAAABLL * (((char *)v21 - (char *)v20) >> 3));
  Espresso::sequential_builder::add<Espresso::elementwise_params>(&v11, v6, (uint64_t)__p, (uint64_t)&v23, (uint64_t)v13, (long long *)v8.__r_.__value_.__l.__data_, (long long *)v8.__r_.__value_.__l.__size_, (long long **)&v7);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  unint64_t v24 = &v7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  unint64_t v24 = &v8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v20);
  v13[0] = (void **)&v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v13);
  v13[0] = (void **)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v13);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
}

void sub_19EA7779C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  a23 = v23 - 112;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  a23 = v23 - 88;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  if (*(char *)(v23 - 41) < 0) {
    operator delete(*(void **)(v23 - 64));
  }
  _Unwind_Resume(a1);
}

void LayerTranslator::addFlatten(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  uint64_t v4 = (long long *)*((void *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v33, *(const std::string::value_type **)v4, *((void *)v4 + 1));
  }
  else
  {
    long long v5 = *v4;
    v33.__r_.__value_.__r.__words[2] = *((void *)v4 + 2);
    *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v5;
  }
  std::string v30 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  std::string v27 = 0;
  std::string v28 = 0;
  uint64_t v29 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v30, (uint64_t *)&v27, *((void *)this + 1));
  if (*((_DWORD *)a2 + 35) == 301)
  {
    std::string v7 = (const CoreML::Specification::FlattenLayerParams *)*((void *)a2 + 16);
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    std::string v7 = (const CoreML::Specification::FlattenLayerParams *)&CoreML::Specification::_FlattenLayerParams_default_instance_;
  }
  CoreML::Specification::FlattenLayerParams::FlattenLayerParams((CoreML::Specification::FlattenLayerParams *)&v24, v7);
  uint64_t v23 = 0;
  if (v26 == 1) {
    LODWORD(v23) = 1;
  }
  std::string v8 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(&v43, "flatten");
  memset(&v20, 0, sizeof(v20));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v20, v27, v28, 0xAAAAAAAAAAAAAAABLL * (((char *)v28 - (char *)v27) >> 3));
  memset(&v19, 0, sizeof(v19));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v19, v30, v31, 0xAAAAAAAAAAAAAAABLL * (((char *)v31 - (char *)v30) >> 3));
  Espresso::sequential_builder::add<Espresso::flatten_params>(&v21, v8, (uint64_t)&v43, (uint64_t)&v33, (uint64_t)&v23, (long long *)v20.__r_.__value_.__l.__data_, (long long *)v20.__r_.__value_.__l.__size_, (long long **)&v19);
  *(void *)&long long v37 = &v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
  *(void *)&long long v37 = &v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
  if (SBYTE7(v44) < 0) {
    operator delete((void *)v43);
  }
  if (**((unsigned char **)this + 2))
  {
    LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v30);
  }
  else
  {
    int v9 = (uint64_t **)*((void *)this + 1);
    uint64_t v10 = std::map<std::string,std::string>::at((uint64_t)v9, v27);
    long long v43 = *(_OWORD *)v10;
    long long v44 = *(_OWORD *)(v10 + 16);
    uint64_t v45 = *(void *)(v10 + 32);
    std::string v46 = 0;
    uint64_t v47 = 0;
    uint64_t v48 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v46, *(const void **)(v10 + 40), *(void *)(v10 + 48), (uint64_t)(*(void *)(v10 + 48) - *(void *)(v10 + 40)) >> 2);
    long long v37 = v43;
    long long v38 = v44;
    uint64_t v11 = v46;
    uint64_t v39 = v45;
    char v40 = 0;
    uint64_t v41 = 0;
    uint64_t v42 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v40, v46, v47, (v47 - (uint64_t)v46) >> 2);
    if (v43 == -1 || DWORD1(v43) == -1 || DWORD2(v43) == -1) {
      int v14 = -1;
    }
    else {
      int v14 = DWORD1(v43) * DWORD2(v43) * v43;
    }
    DWORD2(v37) = v14;
    *(void *)&long long v37 = 0x100000001;
    v34[0] = v37;
    v34[1] = v38;
    int v15 = v40;
    uint64_t v35 = v39;
    memset(__p, 0, sizeof(__p));
    uint64_t v16 = v41;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(__p, v40, v41, (v41 - (uint64_t)v40) >> 2);
    EspressoConverter::validateShape((int *)v34, *((void *)a2 + 14), (uint64_t)v30);
    if (__p[0]) {
      operator delete(__p[0]);
    }
    uint64_t v49 = v30;
    int v17 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v9, v30, &v49);
    long long v18 = v38;
    *(_OWORD *)(v17 + 5CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = v37;
    *(_OWORD *)(v17 + 72) = v18;
    *((void *)v17 + 11) = v39;
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v17 + 96, v15, v16, (v16 - (uint64_t)v15) >> 2);
    if (v15) {
      operator delete(v15);
    }
    if (v11) {
      operator delete(v11);
    }
  }
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  unint64_t v24 = &unk_1EF0D2F08;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(&v25);
  *(void *)&long long v43 = &v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v43);
  *(void *)&long long v43 = &v30;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v43);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
}

void sub_19EA77B78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p)
{
  if (__p)
  {
    operator delete(__p);
    if (!v40)
    {
LABEL_3:
      if (!v39)
      {
LABEL_8:
        if (a16) {
          std::__shared_weak_count::__release_shared[abi:ne180100](a16);
        }
        google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(&a19);
        *(void *)(v41 - 208) = &a21;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v41 - 208));
        *(void *)(v41 - 208) = &a24;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v41 - 208));
        if (a32 < 0) {
          operator delete(a27);
        }
        _Unwind_Resume(a1);
      }
LABEL_7:
      operator delete(v39);
      goto LABEL_8;
    }
  }
  else if (!v40)
  {
    goto LABEL_3;
  }
  operator delete(v40);
  if (!v39) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

void Espresso::sequential_builder::add<Espresso::flatten_params>(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, long long *a6, long long *a7, long long **a8)
{
  memset(&v13, 0, sizeof(v13));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v13, a6, a7, 0xAAAAAAAAAAAAAAABLL * (((char *)a7 - (char *)a6) >> 3));
  memset(&v12, 0, sizeof(v12));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v12, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a8[1] - (char *)*a8) >> 3));
  LODWORD(v15.__r_.__value_.__l.__data_) = (***(uint64_t (****)(void))(a2[14] + 8))(*(void *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  uint64_t v11 = (std::__shared_weak_count *)a1[1];
  uint64_t v16 = *a1;
  int v17 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(&v15, 0, sizeof(v15));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v15, (long long *)v13.__r_.__value_.__l.__data_, (long long *)v13.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13.__r_.__value_.__l.__size_ - v13.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v14, 0, sizeof(v14));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v14, (long long *)v12.__r_.__value_.__l.__data_, (long long *)v12.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12.__r_.__value_.__l.__size_ - v12.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  long long v18 = &v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  long long v18 = &v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (*a2) {
    Espresso::sequential_builder::add_shape_from_kernel();
  }
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
}

void sub_19EA77E70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v16 = *(std::__shared_weak_count **)(v13 + 8);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  *(void *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(void *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void LayerTranslator::addDivideBroadcastable(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  uint64_t v4 = (long long *)*((void *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)v4, *((void *)v4 + 1));
  }
  else
  {
    long long v5 = *v4;
    v23.__r_.__value_.__r.__words[2] = *((void *)v4 + 2);
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v5;
  }
  std::string v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  int v17 = 0;
  long long v18 = 0;
  uint64_t v19 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v20, (uint64_t *)&v17, *((void *)this + 1));
  v13[2] = (void **)897988541;
  int v15 = 0;
  int v16 = 0;
  v13[0] = (void **)102;
  v13[1] = (void **)1065353216;
  char v14 = 1;
  uint64_t v6 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
  memset(&v8, 0, sizeof(v8));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v8, v17, v18, 0xAAAAAAAAAAAAAAABLL * (((char *)v18 - (char *)v17) >> 3));
  memset(&v7, 0, sizeof(v7));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v7, v20, v21, 0xAAAAAAAAAAAAAAABLL * (((char *)v21 - (char *)v20) >> 3));
  Espresso::sequential_builder::add<Espresso::elementwise_params>(&v11, v6, (uint64_t)__p, (uint64_t)&v23, (uint64_t)v13, (long long *)v8.__r_.__value_.__l.__data_, (long long *)v8.__r_.__value_.__l.__size_, (long long **)&v7);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  unint64_t v24 = &v7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  unint64_t v24 = &v8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v20);
  v13[0] = (void **)&v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v13);
  v13[0] = (void **)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v13);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
}

void sub_19EA780AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  a23 = v23 - 112;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  a23 = v23 - 88;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  if (*(char *)(v23 - 41) < 0) {
    operator delete(*(void **)(v23 - 64));
  }
  _Unwind_Resume(a1);
}

void LayerTranslator::addSplitND(LayerTranslator *this, uint64_t **a2)
{
  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  uint64_t v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v30, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    long long v5 = *(_OWORD *)v4;
    v30.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v5;
  }
  std::string v27 = 0;
  std::string v28 = 0;
  uint64_t v29 = 0;
  unint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v27, (uint64_t *)&v24, *((void *)this + 1));
  memset(v23, 0, sizeof(v23));
  if (*((_DWORD *)a2 + 35) == 975)
  {
    std::string v7 = a2[16];
    LODWORD(v22) = v7[5];
  }
  else
  {
    unint64_t inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
    int v8 = *((_DWORD *)a2 + 35);
    LODWORD(v22) = qword_1EB4DFF10;
    if (v8 != 975)
    {
      unint64_t inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
      int v15 = *((_DWORD *)a2 + 35);
      HIDWORD(v22) = qword_1EB4DFF18;
      if (v15 == 975)
      {
        std::string v7 = a2[16];
      }
      else
      {
        unint64_t inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
        std::string v7 = &CoreML::Specification::_SplitNDLayerParams_default_instance_;
      }
      goto LABEL_9;
    }
    std::string v7 = a2[16];
  }
  HIDWORD(v22) = v7[6];
LABEL_9:
  int v9 = *((_DWORD *)v7 + 4);
  if (v9 >= 128) {
    int v10 = 128;
  }
  else {
    int v10 = v9;
  }
  if (v9 >= 1)
  {
    uint64_t v11 = 0;
    if (v10 <= 1) {
      uint64_t v12 = 1;
    }
    else {
      uint64_t v12 = v10;
    }
    do
    {
      if (*((_DWORD *)a2 + 35) == 975)
      {
        uint64_t v13 = a2[16];
      }
      else
      {
        unint64_t inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
        uint64_t v13 = &CoreML::Specification::_SplitNDLayerParams_default_instance_;
      }
      *((_DWORD *)v23 + v11) = *(void *)(v13[3] + 8 * v11 + 8);
      HIDWORD(v22) = v10;
      ++v11;
    }
    while (v12 != v11);
  }
  char v14 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(&__p, "split_nd");
  memset(&v17, 0, sizeof(v17));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v17, v24, v25, 0xAAAAAAAAAAAAAAABLL * (((char *)v25 - (char *)v24) >> 3));
  memset(&v16, 0, sizeof(v16));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v16, v27, v28, 0xAAAAAAAAAAAAAAABLL * (((char *)v28 - (char *)v27) >> 3));
  memset(&v32, 0, sizeof(v32));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v32, (long long *)v17.__r_.__value_.__l.__data_, (long long *)v17.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17.__r_.__value_.__l.__size_ - v17.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v31, 0, sizeof(v31));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v31, (long long *)v16.__r_.__value_.__l.__data_, (long long *)v16.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16.__r_.__value_.__l.__size_ - v16.__r_.__value_.__r.__words[0]) >> 3));
  LODWORD(v34.__r_.__value_.__l.__data_) = (***(uint64_t (****)(void))(v14[14] + 8))(*(void *)(v14[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  uint64_t v35 = v20;
  uint64_t v36 = v21;
  if (v21) {
    atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(&v34, 0, sizeof(v34));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v34, (long long *)v32.__r_.__value_.__l.__data_, (long long *)v32.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v32.__r_.__value_.__l.__size_ - v32.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v33, 0, sizeof(v33));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v33, (long long *)v31.__r_.__value_.__l.__data_, (long long *)v31.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v31.__r_.__value_.__l.__size_ - v31.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  long long v37 = &v33;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
  long long v37 = &v34;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  }
  if (*v14) {
    Espresso::sequential_builder::add_shape_from_kernel();
  }
  v34.__r_.__value_.__r.__words[0] = (std::string::size_type)&v31;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
  v34.__r_.__value_.__r.__words[0] = (std::string::size_type)&v32;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  v34.__r_.__value_.__r.__words[0] = (std::string::size_type)&v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
  v34.__r_.__value_.__r.__words[0] = (std::string::size_type)&v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
  if (v19 < 0) {
    operator delete(__p);
  }
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v27);
  uint64_t v22 = &v24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v22);
  uint64_t v22 = &v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v22);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
}

void sub_19EA78578(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  a23 = v23 - 256;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  a23 = v23 - 232;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  if (*(char *)(v23 - 185) < 0) {
    operator delete(*(void **)(v23 - 208));
  }
  _Unwind_Resume(a1);
}

void LayerTranslator::addDotProduct(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  uint64_t v4 = (long long *)*((void *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v59, *(const std::string::value_type **)v4, *((void *)v4 + 1));
  }
  else
  {
    long long v5 = *v4;
    v59.__r_.__value_.__r.__words[2] = *((void *)v4 + 2);
    *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v5;
  }
  uint64_t v56 = 0;
  long long v57 = 0;
  uint64_t v58 = 0;
  char v53 = 0;
  uint64_t v54 = 0;
  uint64_t v55 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v56, (uint64_t *)&v53, *((void *)this + 1));
  if (*((_DWORD *)a2 + 35) == 270)
  {
    std::string v7 = (uint64_t *)*((void *)a2 + 16);
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    std::string v7 = &CoreML::Specification::_DotProductLayerParams_default_instance_;
  }
  uint64_t v49 = &unk_1EF0D4A58;
  uint64_t v50 = 0;
  int v52 = 0;
  uint64_t v8 = v7[1];
  if (v8) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((unint64_t *)&v50, v8 & 0xFFFFFFFFFFFFFFFELL);
  }
  char v51 = *((unsigned char *)v7 + 16);
  uint64_t v45 = 1065353216;
  uint64_t v46 = 897988541;
  char v47 = 0;
  uint64_t v48 = 0;
  if (v51) {
    int v9 = 21;
  }
  else {
    int v9 = 28;
  }
  v44[0] = v9;
  v44[1] = 0;
  int v10 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
  memset(&v41, 0, sizeof(v41));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v41, v53, v54, 0xAAAAAAAAAAAAAAABLL * (((char *)v54 - (char *)v53) >> 3));
  memset(&v40, 0, sizeof(v40));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v40, v56, v57, 0xAAAAAAAAAAAAAAABLL * (((char *)v57 - (char *)v56) >> 3));
  Espresso::sequential_builder::add<Espresso::elementwise_params>(&v42, v10, (uint64_t)__p, (uint64_t)&v59, (uint64_t)v44, (long long *)v41.__r_.__value_.__l.__data_, (long long *)v41.__r_.__value_.__l.__size_, (long long **)&v40);
  *(void *)&long long v67 = &v40;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v67);
  *(void *)&long long v67 = &v41;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v67);
  if (SBYTE7(v62) < 0) {
    operator delete(__p[0]);
  }
  if (**((unsigned char **)this + 2))
  {
    LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v56);
  }
  else
  {
    uint64_t v11 = (uint64_t **)*((void *)this + 1);
    uint64_t v73 = 0;
    std::string v74 = 0;
    unint64_t v75 = 0;
    uint64_t v12 = v53;
    uint64_t v13 = v54;
    if (v53 == v54)
    {
      long long v18 = 0;
      std::string v17 = 0;
    }
    else
    {
      do
      {
        uint64_t v14 = std::map<std::string,std::string>::at((uint64_t)v11, v12);
        long long v67 = *(_OWORD *)v14;
        long long v68 = *(_OWORD *)(v14 + 16);
        uint64_t v69 = *(void *)(v14 + 32);
        uint64_t v71 = 0;
        uint64_t v72 = 0;
        long long v70 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v70, *(const void **)(v14 + 40), *(void *)(v14 + 48), (uint64_t)(*(void *)(v14 + 48) - *(void *)(v14 + 40)) >> 2);
        int v15 = v74;
        if ((unint64_t)v74 >= v75)
        {
          uint64_t v16 = std::vector<Espresso::layer_shape>::__push_back_slow_path<Espresso::layer_shape const&>(&v73, &v67);
        }
        else
        {
          *(_OWORD *)std::string v74 = v67;
          *((_OWORD *)v15 + 1) = v68;
          *((void *)v15 + 4) = v69;
          *((void *)v15 + CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = 0;
          *((void *)v15 + 7) = 0;
          *((void *)v15 + 5) = 0;
          std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((void *)v15 + 5, v70, v71, (v71 - (uint64_t)v70) >> 2);
          uint64_t v16 = (uint64_t)(v15 + 16);
        }
        std::string v74 = (int *)v16;
        if (DWORD1(v67) != -1 && DWORD1(v67) != 1)
        {
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
          std::string v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v62, (uint64_t)"Dot product layer: '", 20);
          uint64_t v33 = *((void *)a2 + 14);
          int v34 = *(char *)(v33 + 23);
          if (v34 >= 0) {
            uint64_t v35 = *((void *)a2 + 14);
          }
          else {
            uint64_t v35 = *(void *)v33;
          }
          if (v34 >= 0) {
            uint64_t v36 = *(unsigned __int8 *)(v33 + 23);
          }
          else {
            uint64_t v36 = *(void *)(v33 + 8);
          }
          long long v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, v35, v36);
          long long v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"': height dimension of the input blob must be 1.", 48);
          std::endl[abi:ne180100]<char,std::char_traits<char>>(v38);
          exceptiounint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::stringbuf::str();
          std::runtime_error::runtime_error(exception, &v60);
          __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        if (v67 != -1 && v67 != 1)
        {
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
          unint64_t v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v62, (uint64_t)"Dot product layer: '", 20);
          uint64_t v25 = *((void *)a2 + 14);
          int v26 = *(char *)(v25 + 23);
          if (v26 >= 0) {
            uint64_t v27 = *((void *)a2 + 14);
          }
          else {
            uint64_t v27 = *(void *)v25;
          }
          if (v26 >= 0) {
            uint64_t v28 = *(unsigned __int8 *)(v25 + 23);
          }
          else {
            uint64_t v28 = *(void *)(v25 + 8);
          }
          uint64_t v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, v27, v28);
          std::string v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"': width dimension of the input blob must be 1.", 47);
          std::endl[abi:ne180100]<char,std::char_traits<char>>(v30);
          std::string v31 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::stringbuf::str();
          std::runtime_error::runtime_error(v31, &v60);
          __cxa_throw(v31, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        if (v70) {
          operator delete(v70);
        }
        uint64_t v12 = (long long *)((char *)v12 + 24);
      }
      while (v12 != v13);
      std::string v17 = (int *)v73;
      long long v18 = v74;
    }
    EspressoConverter::validateEqualInputShapes((uint64_t)a2, v17, v18);
    *(_OWORD *)std::string __p = *(_OWORD *)v73;
    long long v62 = *(_OWORD *)(v73 + 16);
    uint64_t v63 = *(void *)(v73 + 32);
    long long v64 = 0;
    uint64_t v65 = 0;
    uint64_t v66 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v64, *(const void **)(v73 + 40), *(void *)(v73 + 48), (uint64_t)(*(void *)(v73 + 48) - *(void *)(v73 + 40)) >> 2);
    LODWORD(__p[1]) = 1;
    __p[0] = (void *)0x100000001;
    long long v67 = *(_OWORD *)__p;
    long long v68 = v62;
    char v19 = v64;
    uint64_t v69 = v63;
    long long v70 = 0;
    uint64_t v71 = 0;
    uint64_t v72 = 0;
    uint64_t v20 = v65;
    unint64_t v21 = (v65 - (uint64_t)v64) >> 2;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v70, v64, v65, v21);
    EspressoConverter::validateShape((int *)&v67, *((void *)a2 + 14), (uint64_t)v56);
    if (v70) {
      operator delete(v70);
    }
    v60.__r_.__value_.__r.__words[0] = (std::string::size_type)v56;
    uint64_t v22 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v11, v56, (long long **)&v60);
    long long v23 = v62;
    *(_OWORD *)(v22 + 5CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = *(_OWORD *)__p;
    *(_OWORD *)(v22 + 72) = v23;
    *((void *)v22 + 11) = v63;
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v22 + 96, v19, v20, v21);
    if (v19) {
      operator delete(v19);
    }
    __p[0] = &v73;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  }
  if (v43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v43);
  }
  uint64_t v49 = &unk_1EF0D4A58;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(&v50);
  __p[0] = &v53;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  __p[0] = &v56;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v59.__r_.__value_.__l.__data_);
  }
}

void sub_19EA78C3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,char *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a44 < 0)
  {
    operator delete(__p);
    if ((v52 & 1) == 0)
    {
LABEL_6:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a45);
      uint64_t v55 = *(void **)(v53 - 136);
      if (v55) {
        operator delete(v55);
      }
      a45 = (char *)(v53 - 104);
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a45);
      if (a16) {
        std::__shared_weak_count::__release_shared[abi:ne180100](a16);
      }
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v50);
      a45 = &a27;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a45);
      a45 = &a30;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a45);
      if (a38 < 0) {
        operator delete(a33);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v52)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v51);
  goto LABEL_6;
}

void LayerTranslator::addSubtractBroadcastable(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  uint64_t v4 = (long long *)*((void *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)v4, *((void *)v4 + 1));
  }
  else
  {
    long long v5 = *v4;
    v23.__r_.__value_.__r.__words[2] = *((void *)v4 + 2);
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v5;
  }
  uint64_t v20 = 0;
  unint64_t v21 = 0;
  uint64_t v22 = 0;
  std::string v17 = 0;
  long long v18 = 0;
  uint64_t v19 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v20, (uint64_t *)&v17, *((void *)this + 1));
  v13[2] = (void **)897988541;
  int v15 = 0;
  int v16 = 0;
  v13[0] = (void **)33;
  v13[1] = (void **)1065353216;
  char v14 = 1;
  uint64_t v6 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
  memset(&v8, 0, sizeof(v8));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v8, v17, v18, 0xAAAAAAAAAAAAAAABLL * (((char *)v18 - (char *)v17) >> 3));
  memset(&v7, 0, sizeof(v7));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v7, v20, v21, 0xAAAAAAAAAAAAAAABLL * (((char *)v21 - (char *)v20) >> 3));
  Espresso::sequential_builder::add<Espresso::elementwise_params>(&v11, v6, (uint64_t)__p, (uint64_t)&v23, (uint64_t)v13, (long long *)v8.__r_.__value_.__l.__data_, (long long *)v8.__r_.__value_.__l.__size_, (long long **)&v7);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  unint64_t v24 = &v7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  unint64_t v24 = &v8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v20);
  v13[0] = (void **)&v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v13);
  v13[0] = (void **)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v13);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
}

void sub_19EA78F5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  a23 = v23 - 112;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  a23 = v23 - 88;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  if (*(char *)(v23 - 41) < 0) {
    operator delete(*(void **)(v23 - 64));
  }
  _Unwind_Resume(a1);
}

void LayerTranslator::addArgsort(LayerTranslator *this, uint64_t **a2)
{
  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  uint64_t v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v25, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    long long v5 = *(_OWORD *)v4;
    v25.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v5;
  }
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v22, (uint64_t *)&v19, *((void *)this + 1));
  if (*((_DWORD *)a2 + 35) == 1461)
  {
    std::string v7 = a2[16];
    int v17 = v7[2];
  }
  else
  {
    unint64_t inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    int v9 = *((_DWORD *)a2 + 35);
    int v17 = qword_1EB4DF688;
    if (v9 == 1461)
    {
      std::string v7 = a2[16];
    }
    else
    {
      CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
      std::string v7 = &CoreML::Specification::_ArgSortLayerParams_default_instance_;
    }
  }
  char v18 = *((unsigned char *)v7 + 24) ^ 1;
  char v10 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(&__p, "argsort");
  memset(&v12, 0, sizeof(v12));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v12, v19, v20, 0xAAAAAAAAAAAAAAABLL * (((char *)v20 - (char *)v19) >> 3));
  memset(&v11, 0, sizeof(v11));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v11, v22, v23, 0xAAAAAAAAAAAAAAABLL * (((char *)v23 - (char *)v22) >> 3));
  memset(&v27, 0, sizeof(v27));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v27, (long long *)v12.__r_.__value_.__l.__data_, (long long *)v12.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12.__r_.__value_.__l.__size_ - v12.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v26, 0, sizeof(v26));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v26, (long long *)v11.__r_.__value_.__l.__data_, (long long *)v11.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11.__r_.__value_.__l.__size_ - v11.__r_.__value_.__r.__words[0]) >> 3));
  LODWORD(v29.__r_.__value_.__l.__data_) = (***(uint64_t (****)(void))(v10[14] + 8))(*(void *)(v10[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  uint64_t v30 = v15;
  std::string v31 = v16;
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(&v29, 0, sizeof(v29));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v29, (long long *)v27.__r_.__value_.__l.__data_, (long long *)v27.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v27.__r_.__value_.__l.__size_ - v27.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v28, 0, sizeof(v28));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v28, (long long *)v26.__r_.__value_.__l.__data_, (long long *)v26.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26.__r_.__value_.__l.__size_ - v26.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  std::string v32 = &v28;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
  std::string v32 = &v29;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  if (*v10) {
    Espresso::sequential_builder::add_shape_from_kernel();
  }
  v29.__r_.__value_.__r.__words[0] = (std::string::size_type)&v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  v29.__r_.__value_.__r.__words[0] = (std::string::size_type)&v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  v29.__r_.__value_.__r.__words[0] = (std::string::size_type)&v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  v29.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  if (v14 < 0) {
    operator delete(__p);
  }
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v22);
  v29.__r_.__value_.__r.__words[0] = (std::string::size_type)&v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  v29.__r_.__value_.__r.__words[0] = (std::string::size_type)&v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
}

void sub_19EA79324(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char **__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,std::__shared_weak_count *a22,uint64_t a23,char *a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36)
{
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }
  *(void *)(v36 - 5CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = &a36;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v36 - 56));
  *(void *)(v36 - 5CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = v36 - 144;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v36 - 56));
  *(void *)(v36 - 5CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = &a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v36 - 56));
  *(void *)(v36 - 5CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = &a12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v36 - 56));
  if (a20 < 0) {
    operator delete(__p);
  }
  std::string __p = &a24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  a24 = &a27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  if (a35 < 0) {
    operator delete(a30);
  }
  _Unwind_Resume(a1);
}

void LayerTranslator::addSplit(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  uint64_t v45 = a2;
  uint64_t v4 = (long long *)*((void *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v63, *(const std::string::value_type **)v4, *((void *)v4 + 1));
  }
  else
  {
    long long v5 = *v4;
    v63.__r_.__value_.__r.__words[2] = *((void *)v4 + 2);
    *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v5;
  }
  std::string v60 = 0;
  long long v61 = 0;
  uint64_t v62 = 0;
  long long v57 = 0;
  uint64_t v58 = 0;
  uint64_t v59 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v60, (uint64_t *)&v57, *((void *)this + 1));
  char v53 = 0;
  uint64_t v55 = 0;
  uint64_t v54 = 0;
  uint64_t v52 = 0x200000002;
  int v56 = 0;
  if (*((_DWORD *)a2 + 35) == 330)
  {
    std::string v7 = (uint64_t *)*((void *)a2 + 16);
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    std::string v7 = &CoreML::Specification::_SplitLayerParams_default_instance_;
  }
  LODWORD(v52) = v7[2];
  std::string v8 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(&__p, "split");
  memset(&v47, 0, sizeof(v47));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v47, v57, v58, 0xAAAAAAAAAAAAAAABLL * (((char *)v58 - (char *)v57) >> 3));
  memset(&v46, 0, sizeof(v46));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v46, v60, v61, 0xAAAAAAAAAAAAAAABLL * (((char *)v61 - (char *)v60) >> 3));
  memset(v64, 0, 24);
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v64, (long long *)v47.__r_.__value_.__l.__data_, (long long *)v47.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v47.__r_.__value_.__l.__size_ - v47.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v81, 0, sizeof(v81));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v81, (long long *)v46.__r_.__value_.__l.__data_, (long long *)v46.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v46.__r_.__value_.__l.__size_ - v46.__r_.__value_.__r.__words[0]) >> 3));
  LODWORD(v69) = (***(uint64_t (****)(void))(v8[14] + 8))(*(void *)(v8[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  uint64_t v82 = v50;
  uint64_t v83 = v51;
  if (v51) {
    atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v69 = 0uLL;
  *(void *)&long long v70 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&v69, *(long long **)v64, *(long long **)&v64[8], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&v64[8] - *(void *)v64) >> 3));
  long long v75 = 0uLL;
  *(void *)&long long v76 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&v75, (long long *)v81.__r_.__value_.__l.__data_, (long long *)v81.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v81.__r_.__value_.__l.__size_ - v81.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  v84[0] = (void **)&v75;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v84);
  v84[0] = (void **)&v69;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v84);
  if (v83) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v83);
  }
  if (*v8) {
    Espresso::sequential_builder::add_shape_from_kernel();
  }
  *(void *)&long long v69 = &v81;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v69);
  *(void *)&long long v69 = v64;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v69);
  *(void *)&long long v69 = &v46;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v69);
  *(void *)&long long v69 = &v47;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v69);
  if (v49 < 0) {
    operator delete(__p);
  }
  if (**((unsigned char **)this + 2))
  {
    LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v60);
  }
  else
  {
    uint64_t v42 = (uint64_t **)*((void *)this + 1);
    uint64_t v9 = std::map<std::string,std::string>::at((uint64_t)v42, v57);
    long long v75 = *(_OWORD *)v9;
    long long v76 = *(_OWORD *)(v9 + 16);
    uint64_t v77 = *(void *)(v9 + 32);
    uint64_t v78 = 0;
    uint64_t v79 = 0;
    uint64_t v80 = 0;
    char v10 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v78, *(const void **)(v9 + 40), *(void *)(v9 + 48), (uint64_t)(*(void *)(v9 + 48)- *(void *)(v9 + 40)) >> 2);
    if (*((_DWORD *)a2 + 35) == 330)
    {
      std::string v11 = (uint64_t *)*((void *)a2 + 16);
    }
    else
    {
      CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v10);
      std::string v11 = &CoreML::Specification::_SplitLayerParams_default_instance_;
    }
    int v12 = *((_DWORD *)v11 + 4);
    if (DWORD2(v75) != -1 && SDWORD2(v75) % v12)
    {
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v69);
      uint64_t v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v70, (uint64_t)"Split layer: '", 14);
      uint64_t v34 = *((void *)a2 + 14);
      int v35 = *(char *)(v34 + 23);
      if (v35 >= 0) {
        uint64_t v36 = *((void *)a2 + 14);
      }
      else {
        uint64_t v36 = *(void *)v34;
      }
      if (v35 >= 0) {
        uint64_t v37 = *(unsigned __int8 *)(v34 + 23);
      }
      else {
        uint64_t v37 = *(void *)(v34 + 8);
      }
      long long v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, v36, v37);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"' , number of outputs = ", 24);
      uint64_t v39 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)" do not divide the input dimensiounint64_t n = ", 37);
      std::string v40 = (void *)std::ostream::operator<<();
      std::endl[abi:ne180100]<char,std::char_traits<char>>(v40);
      exceptiounint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::runtime_error::runtime_error(exception, (const std::string *)v64);
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    int v43 = SDWORD2(v75) / v12;
    int v44 = DWORD2(v75);
    char v14 = v60;
    uint64_t v13 = v61;
    if (v12 != -1431655765 * ((unint64_t)((char *)v61 - (char *)v60) >> 3))
    {
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v69);
      uint64_t v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v70, (uint64_t)"Split layer :", 13);
      uint64_t v24 = *((void *)a2 + 14);
      int v25 = *(char *)(v24 + 23);
      if (v25 >= 0) {
        uint64_t v26 = *((void *)a2 + 14);
      }
      else {
        uint64_t v26 = *(void *)v24;
      }
      if (v25 >= 0) {
        uint64_t v27 = *(unsigned __int8 *)(v24 + 23);
      }
      else {
        uint64_t v27 = *(void *)(v24 + 8);
      }
      std::string v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, v26, v27);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" , number of outputs (", 22);
      std::string v29 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)") do not match the parameter nOutputs (", 39);
      uint64_t v30 = (void *)std::ostream::operator<<();
      std::string v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)")", 1);
      std::endl[abi:ne180100]<char,std::char_traits<char>>(v31);
      std::string v32 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::runtime_error::runtime_error(v32, (const std::string *)v64);
      __cxa_throw(v32, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    uint64_t v15 = v78;
    if (v60 != v61)
    {
      uint64_t v16 = v79;
      do
      {
        long long v69 = v75;
        long long v70 = v76;
        uint64_t v71 = v77;
        uint64_t v73 = 0;
        uint64_t v74 = 0;
        uint64_t v72 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v72, v15, v16, (v16 - (uint64_t)v15) >> 2);
        int v17 = v43;
        if (v44 == -1) {
          int v17 = -1;
        }
        DWORD2(v69) = v17;
        char v18 = v72;
        uint64_t v65 = v71;
        *(_OWORD *)long long v64 = v69;
        *(_OWORD *)&v64[16] = v70;
        long long v67 = 0;
        uint64_t v68 = 0;
        uint64_t v66 = 0;
        uint64_t v19 = v73;
        unint64_t v20 = (v73 - (uint64_t)v72) >> 2;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v66, v72, v73, v20);
        EspressoConverter::validateShape((int *)v64, *((void *)v45 + 14), (uint64_t)v14);
        if (v66)
        {
          long long v67 = v66;
          operator delete(v66);
        }
        v81.__r_.__value_.__r.__words[0] = (std::string::size_type)v14;
        uint64_t v21 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v42, v14, (long long **)&v81);
        long long v22 = v70;
        *(_OWORD *)(v21 + 5CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = v69;
        *(_OWORD *)(v21 + 72) = v22;
        *((void *)v21 + 11) = v71;
        std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v21 + 96, v18, v19, v20);
        if (v18) {
          operator delete(v18);
        }
        char v14 = (long long *)((char *)v14 + 24);
      }
      while (v14 != v13);
    }
    if (v15) {
      operator delete(v15);
    }
  }
  if (v51) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v51);
  }
  *(void *)&long long v69 = &v57;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v69);
  *(void *)&long long v69 = &v60;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v69);
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v63.__r_.__value_.__l.__data_);
  }
}

void sub_19EA79B14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,std::__shared_weak_count *a26,char *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,char a58)
{
  if (a52 < 0)
  {
    operator delete(__p);
    if ((v59 & 1) == 0)
    {
LABEL_6:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a58);
      uint64_t v62 = *(void **)(v60 - 168);
      if (v62) {
        operator delete(v62);
      }
      if (a26) {
        std::__shared_weak_count::__release_shared[abi:ne180100](a26);
      }
      a27 = &a34;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a27);
      a27 = &a37;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a27);
      if (a45 < 0) {
        operator delete(a40);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v59)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v58);
  goto LABEL_6;
}

BOOL LayerTranslator::addEmbedding(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  uint64_t v4 = (long long *)*((void *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v217, *(const std::string::value_type **)v4, *((void *)v4 + 1));
  }
  else
  {
    long long v5 = *v4;
    v217.__r_.__value_.__r.__words[2] = *((void *)v4 + 2);
    *(_OWORD *)&v217.__r_.__value_.__l.__data_ = v5;
  }
  uint64_t v215 = 0;
  v214 = 0;
  uint64_t v216 = 0;
  uint64_t v212 = 0;
  uint64_t v211 = 0;
  uint64_t v213 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v214, (uint64_t *)&v211, *((void *)this + 1));
  if (*((_DWORD *)a2 + 35) == 150)
  {
    std::string v7 = (const CoreML::Specification::EmbeddingLayerParams *)*((void *)a2 + 16);
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    std::string v7 = (const CoreML::Specification::EmbeddingLayerParams *)&CoreML::Specification::_EmbeddingLayerParams_default_instance_;
  }
  CoreML::Specification::EmbeddingLayerParams::EmbeddingLayerParams((CoreML::Specification::EmbeddingLayerParams *)v205, v7);
  unint64_t v8 = __val;
  if (!__val)
  {
    exceptiounint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string((std::string *)v218, __val);
    uint64_t v79 = std::string::insert((std::string *)v218, 0, "outputChannels = ");
    long long v80 = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
    *(void *)&v227[16] = *((void *)&v79->__r_.__value_.__l + 2);
    *(_OWORD *)v227 = v80;
    v79->__r_.__value_.__l.__size_ = 0;
    v79->__r_.__value_.__r.__words[2] = 0;
    v79->__r_.__value_.__r.__words[0] = 0;
    std::string v81 = std::string::append((std::string *)v227, " not allowed in layer ");
    long long v82 = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
    *(void *)&v193[16] = *((void *)&v81->__r_.__value_.__l + 2);
    *(_OWORD *)uint64_t v193 = v82;
    v81->__r_.__value_.__l.__size_ = 0;
    v81->__r_.__value_.__r.__words[2] = 0;
    v81->__r_.__value_.__r.__words[0] = 0;
    if ((v217.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v83 = &v217;
    }
    else {
      uint64_t v83 = (std::string *)v217.__r_.__value_.__r.__words[0];
    }
    if ((v217.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v217.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v217.__r_.__value_.__l.__size_;
    }
    std::string::value_type v85 = std::string::append((std::string *)v193, (const std::string::value_type *)v83, size);
    long long v86 = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
    *(void *)&long long v222 = *((void *)&v85->__r_.__value_.__l + 2);
    long long __p = v86;
    v85->__r_.__value_.__l.__size_ = 0;
    v85->__r_.__value_.__r.__words[2] = 0;
    v85->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, (const std::string *)&__p);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  unint64_t v9 = v208;
  if (!v208)
  {
    char v87 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string((std::string *)v218, v208);
    long long v88 = std::string::insert((std::string *)v218, 0, "inputDim = ");
    long long v89 = *(_OWORD *)&v88->__r_.__value_.__l.__data_;
    *(void *)&v227[16] = *((void *)&v88->__r_.__value_.__l + 2);
    *(_OWORD *)v227 = v89;
    v88->__r_.__value_.__l.__size_ = 0;
    v88->__r_.__value_.__r.__words[2] = 0;
    v88->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v90 = std::string::append((std::string *)v227, " not allowed in layer ");
    long long v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
    *(void *)&v193[16] = *((void *)&v90->__r_.__value_.__l + 2);
    *(_OWORD *)uint64_t v193 = v91;
    v90->__r_.__value_.__l.__size_ = 0;
    v90->__r_.__value_.__r.__words[2] = 0;
    v90->__r_.__value_.__r.__words[0] = 0;
    if ((v217.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v92 = &v217;
    }
    else {
      uint64_t v92 = (std::string *)v217.__r_.__value_.__r.__words[0];
    }
    if ((v217.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v93 = HIBYTE(v217.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v93 = v217.__r_.__value_.__l.__size_;
    }
    int v94 = std::string::append((std::string *)v193, (const std::string::value_type *)v92, v93);
    long long v95 = *(_OWORD *)&v94->__r_.__value_.__l.__data_;
    *(void *)&long long v222 = *((void *)&v94->__r_.__value_.__l + 2);
    long long __p = v95;
    v94->__r_.__value_.__l.__size_ = 0;
    v94->__r_.__value_.__r.__words[2] = 0;
    v94->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v87, (const std::string *)&__p);
    __cxa_throw(v87, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int v198 = -1;
  __asm { FMOV            V0.2S, #1.0 }
  uint64_t v199 = _D0;
  uint64_t v204 = 0;
  *(_DWORD *)&v193[16] = 0;
  *(void *)&v193[20] = _D0;
  uint64_t v200 = 0;
  uint64_t v197 = 0;
  uint64_t v201 = 0;
  uint64_t v203 = 0;
  uint64_t v202 = 0;
  uint64_t v194 = 0x100000000;
  *(void *)uint64_t v193 = __PAIR64__(v208, __val);
  int v195 = 0;
  *(void *)&v193[8] = v210;
  char v196 = 0;
  uint64_t v15 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(&__p, "inner_product");
  memset(&v190, 0, sizeof(v190));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v190, v211, v212, 0xAAAAAAAAAAAAAAABLL * (((char *)v212 - (char *)v211) >> 3));
  memset(&v189, 0, sizeof(v189));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v189, v214, v215, 0xAAAAAAAAAAAAAAABLL * (((char *)v215 - (char *)v214) >> 3));
  Espresso::sequential_builder::add<Espresso::inner_product_uniforms>(&v191, v15, (uint64_t)&__p, (uint64_t)&v217, (uint64_t)v193, (long long *)v190.__r_.__value_.__l.__data_, (long long *)v190.__r_.__value_.__l.__size_, (long long **)&v189);
  *(void *)v227 = &v189;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v227);
  *(void *)v227 = &v190;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v227);
  if (SBYTE7(v222) < 0) {
    operator delete((void *)__p);
  }
  uint64_t v16 = v191;
  int v17 = v192;
  if (v192) {
    atomic_fetch_add_explicit(&v192->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v206) {
    char v18 = v206;
  }
  else {
    char v18 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  uint64_t v19 = v18[5];
  if (*(char *)(v19 + 23) < 0) {
    uint64_t v20 = *(void *)(v19 + 8);
  }
  else {
    uint64_t v20 = *(unsigned __int8 *)(v19 + 23);
  }
  uint64_t v21 = v18[6];
  uint64_t v22 = *(unsigned __int8 *)(v21 + 23);
  if (*(char *)(v21 + 23) < 0) {
    uint64_t v23 = *(void *)(v21 + 8);
  }
  else {
    uint64_t v23 = *(unsigned __int8 *)(v21 + 23);
  }
  unint64_t v177 = __val * v208;
  int v24 = *((_DWORD *)v18 + 4);
  uint64_t v25 = v18[7];
  if (*(char *)(v25 + 23) < 0) {
    uint64_t v26 = *(void *)(v25 + 8);
  }
  else {
    uint64_t v26 = *(unsigned __int8 *)(v25 + 23);
  }
  if (v24 <= 0) {
    int v27 = 1;
  }
  else {
    int v27 = 2;
  }
  if (v20) {
    int v28 = v27;
  }
  else {
    int v28 = v24 > 0;
  }
  if (v23) {
    ++v28;
  }
  if (v26) {
    ++v28;
  }
  if (v24 > 0 || v28 != 1) {
    goto LABEL_64;
  }
  if ((*(unsigned char *)(v19 + 23) & 0x80) != 0)
  {
    if (*(void *)(v19 + 8)) {
      goto LABEL_64;
    }
  }
  else if (*(unsigned char *)(v19 + 23))
  {
    goto LABEL_64;
  }
  if ((v22 & 0x80) != 0) {
    uint64_t v22 = *(void *)(v21 + 8);
  }
  if (v18 != &CoreML::Specification::_WeightParams_default_instance_)
  {
    if (v22)
    {
      uint64_t v29 = v18[8];
      if (v29)
      {
        unint64_t v176 = v17;
        unint64_t v30 = *(void *)(v29 + 16);
        int WeightParamSizeInBytes = EspressoConverter::getWeightParamSizeInBytes(v18);
        if (!CoreML::hasSufficientBytesInQuantizedWeightParam(v18, v9 * v8))
        {
          v158 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::operator+<char>();
          uint64_t v159 = std::string::append(&v188, "' has insufficient bytes for ");
          long long v160 = *(_OWORD *)&v159->__r_.__value_.__l.__data_;
          *(void *)&v218[16] = *((void *)&v159->__r_.__value_.__l + 2);
          *(_OWORD *)uint64_t v218 = v160;
          v159->__r_.__value_.__l.__size_ = 0;
          v159->__r_.__value_.__r.__words[2] = 0;
          v159->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v187, v177);
          if ((v187.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v161 = &v187;
          }
          else {
            std::string::size_type v161 = (std::string *)v187.__r_.__value_.__r.__words[0];
          }
          if ((v187.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v162 = HIBYTE(v187.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v162 = v187.__r_.__value_.__l.__size_;
          }
          long long v163 = std::string::append((std::string *)v218, (const std::string::value_type *)v161, v162);
          long long v164 = *(_OWORD *)&v163->__r_.__value_.__l.__data_;
          *(void *)&v227[16] = *((void *)&v163->__r_.__value_.__l + 2);
          *(_OWORD *)v227 = v164;
          v163->__r_.__value_.__l.__size_ = 0;
          v163->__r_.__value_.__r.__words[2] = 0;
          v163->__r_.__value_.__r.__words[0] = 0;
          long long v165 = std::string::append((std::string *)v227, "units in weight");
          long long v166 = *(_OWORD *)&v165->__r_.__value_.__l.__data_;
          *(void *)&long long v222 = *((void *)&v165->__r_.__value_.__l + 2);
          long long __p = v166;
          v165->__r_.__value_.__l.__size_ = 0;
          v165->__r_.__value_.__r.__words[2] = 0;
          v165->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v158, (const std::string *)&__p);
          __cxa_throw(v158, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        uint64_t v32 = WeightParamSizeInBytes;
        CoreML::copySpecArrayStringToVector(&__p, (char *)v21, WeightParamSizeInBytes);
        int v17 = v176;
        std::to_string((std::string *)v218, v30);
        uint64_t v33 = std::string::insert((std::string *)v218, 0, "W_U");
        long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
        *(void *)&v227[16] = *((void *)&v33->__r_.__value_.__l + 2);
        *(_OWORD *)v227 = v34;
        v33->__r_.__value_.__l.__size_ = 0;
        v33->__r_.__value_.__r.__words[2] = 0;
        v33->__r_.__value_.__r.__words[0] = 0;
        if ((v218[23] & 0x80000000) != 0) {
          operator delete(*(void **)v218);
        }
        *(_OWORD *)uint64_t v218 = 0uLL;
        (*(void (**)(uint64_t, unsigned char *, unsigned char *, void, uint64_t, void))(*(void *)v16 + 168))(v16, v218, v227, __p, v32, 0);
        if (*(void *)&v218[8]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v218[8]);
        }
        if (v206) {
          int v35 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v206;
        }
        else {
          int v35 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)&CoreML::Specification::_WeightParams_default_instance_;
        }
        v180[0] = v16;
        v180[1] = (uint64_t)v176;
        if (v176) {
          atomic_fetch_add_explicit(&v176->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        unint64_t v36 = *(unsigned int *)v193;
        std::string::basic_string[abi:ne180100]<0>(v218, (char *)&unk_19EC86ACE);
        CoreML::setQuantizationParams(v35, v180, v36, (const void **)v218);
        if ((v218[23] & 0x80000000) != 0) {
          operator delete(*(void **)v218);
        }
        if (v176) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v176);
        }
        if ((v227[23] & 0x80000000) != 0) {
          operator delete(*(void **)v227);
        }
        if ((void)__p)
        {
          *((void *)&__p + 1) = __p;
          operator delete((void *)__p);
        }
        goto LABEL_74;
      }
    }
  }
LABEL_64:
  int WeightParamSize = EspressoConverter::getWeightParamSize((uint64_t)v18);
  if (v177 != WeightParamSize)
  {
    int v96 = WeightParamSize;
    std::string::size_type v97 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v184, v96);
    int v98 = std::string::insert(&v184, 0, "Size of weights = ");
    long long v99 = *(_OWORD *)&v98->__r_.__value_.__l.__data_;
    v185.__r_.__value_.__r.__words[2] = v98->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v185.__r_.__value_.__l.__data_ = v99;
    v98->__r_.__value_.__l.__size_ = 0;
    v98->__r_.__value_.__r.__words[2] = 0;
    v98->__r_.__value_.__r.__words[0] = 0;
    int v100 = std::string::append(&v185, " is not equal to size of the product of input dims and output channels = ");
    long long v101 = *(_OWORD *)&v100->__r_.__value_.__l.__data_;
    v186.__r_.__value_.__r.__words[2] = v100->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v186.__r_.__value_.__l.__data_ = v101;
    v100->__r_.__value_.__l.__size_ = 0;
    v100->__r_.__value_.__r.__words[2] = 0;
    v100->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v183, v208);
    if ((v183.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v102 = &v183;
    }
    else {
      std::string::size_type v102 = (std::string *)v183.__r_.__value_.__r.__words[0];
    }
    if ((v183.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v103 = HIBYTE(v183.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v103 = v183.__r_.__value_.__l.__size_;
    }
    uint64_t v104 = std::string::append(&v186, (const std::string::value_type *)v102, v103);
    long long v105 = *(_OWORD *)&v104->__r_.__value_.__l.__data_;
    v187.__r_.__value_.__r.__words[2] = v104->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v187.__r_.__value_.__l.__data_ = v105;
    v104->__r_.__value_.__l.__size_ = 0;
    v104->__r_.__value_.__r.__words[2] = 0;
    v104->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v106 = std::string::append(&v187, ",");
    long long v107 = *(_OWORD *)&v106->__r_.__value_.__l.__data_;
    v188.__r_.__value_.__r.__words[2] = v106->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v188.__r_.__value_.__l.__data_ = v107;
    v106->__r_.__value_.__l.__size_ = 0;
    v106->__r_.__value_.__r.__words[2] = 0;
    v106->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v182, __val);
    if ((v182.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v108 = &v182;
    }
    else {
      uint64_t v108 = (std::string *)v182.__r_.__value_.__r.__words[0];
    }
    if ((v182.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v109 = HIBYTE(v182.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v109 = v182.__r_.__value_.__l.__size_;
    }
    long long v110 = std::string::append(&v188, (const std::string::value_type *)v108, v109);
    long long v111 = *(_OWORD *)&v110->__r_.__value_.__l.__data_;
    *(void *)&v218[16] = *((void *)&v110->__r_.__value_.__l + 2);
    *(_OWORD *)uint64_t v218 = v111;
    v110->__r_.__value_.__l.__size_ = 0;
    v110->__r_.__value_.__r.__words[2] = 0;
    v110->__r_.__value_.__r.__words[0] = 0;
    uint64_t v112 = std::string::append((std::string *)v218, " in layer ");
    long long v113 = *(_OWORD *)&v112->__r_.__value_.__l.__data_;
    *(void *)&v227[16] = *((void *)&v112->__r_.__value_.__l + 2);
    *(_OWORD *)v227 = v113;
    v112->__r_.__value_.__l.__size_ = 0;
    v112->__r_.__value_.__r.__words[2] = 0;
    v112->__r_.__value_.__r.__words[0] = 0;
    if ((v217.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      id v114 = &v217;
    }
    else {
      id v114 = (std::string *)v217.__r_.__value_.__r.__words[0];
    }
    if ((v217.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v115 = HIBYTE(v217.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v115 = v217.__r_.__value_.__l.__size_;
    }
    id v116 = std::string::append((std::string *)v227, (const std::string::value_type *)v114, v115);
    long long v117 = *(_OWORD *)&v116->__r_.__value_.__l.__data_;
    *(void *)&long long v222 = *((void *)&v116->__r_.__value_.__l + 2);
    long long __p = v117;
    v116->__r_.__value_.__l.__size_ = 0;
    v116->__r_.__value_.__r.__words[2] = 0;
    v116->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v97, (const std::string *)&__p);
    __cxa_throw(v97, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)v16 + 424))(&__p, v16);
  if (v206) {
    long long v38 = v206;
  }
  else {
    long long v38 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  EspressoConverter::copyWeightsToDataBlob(*(EspressoConverter **)(__p + 16), v38, 4 * (*(_DWORD *)&v193[4] * *(_DWORD *)v193));
  long long v181 = __p;
  if (*((void *)&__p + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&__p + 1) + 8), 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, long long *))(*(void *)v16 + 400))(v16, &v181);
  if (*((void *)&v181 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v181 + 1));
  }
  if (*((void *)&__p + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&__p + 1));
  }
LABEL_74:
  if (!v210) {
    goto LABEL_119;
  }
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v184, 4 * *(_DWORD *)v193, 1, 1, 1);
  if (v207) {
    uint64_t v39 = v207;
  }
  else {
    uint64_t v39 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  uint64_t v40 = v39[5];
  if (*(char *)(v40 + 23) < 0) {
    uint64_t v41 = *(void *)(v40 + 8);
  }
  else {
    uint64_t v41 = *(unsigned __int8 *)(v40 + 23);
  }
  uint64_t v42 = v39[6];
  uint64_t v43 = *(unsigned __int8 *)(v42 + 23);
  if (*(char *)(v42 + 23) < 0) {
    uint64_t v44 = *(void *)(v42 + 8);
  }
  else {
    uint64_t v44 = *(unsigned __int8 *)(v42 + 23);
  }
  int v45 = *((_DWORD *)v39 + 4);
  uint64_t v46 = v39[7];
  if (*(char *)(v46 + 23) < 0) {
    uint64_t v47 = *(void *)(v46 + 8);
  }
  else {
    uint64_t v47 = *(unsigned __int8 *)(v46 + 23);
  }
  if (v45 <= 0) {
    int v48 = 1;
  }
  else {
    int v48 = 2;
  }
  if (v41) {
    int v49 = v48;
  }
  else {
    int v49 = v45 > 0;
  }
  if (v44) {
    ++v49;
  }
  if (v47) {
    ++v49;
  }
  if (v45 > 0 || v49 != 1) {
    goto LABEL_111;
  }
  if ((*(unsigned char *)(v40 + 23) & 0x80) != 0)
  {
    if (!*(void *)(v40 + 8)) {
      goto LABEL_103;
    }
LABEL_111:
    int v53 = EspressoConverter::getWeightParamSize((uint64_t)v39);
    if (v8 != v53)
    {
      int v118 = v53;
      v119 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v186, v118);
      uint64_t v120 = std::string::insert(&v186, 0, "Size of bias = ");
      long long v121 = *(_OWORD *)&v120->__r_.__value_.__l.__data_;
      v187.__r_.__value_.__r.__words[2] = v120->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v187.__r_.__value_.__l.__data_ = v121;
      v120->__r_.__value_.__l.__size_ = 0;
      v120->__r_.__value_.__r.__words[2] = 0;
      v120->__r_.__value_.__r.__words[0] = 0;
      std::string::size_type v122 = std::string::append(&v187, " is not equal to the output dims = ");
      long long v123 = *(_OWORD *)&v122->__r_.__value_.__l.__data_;
      v188.__r_.__value_.__r.__words[2] = v122->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v188.__r_.__value_.__l.__data_ = v123;
      v122->__r_.__value_.__l.__size_ = 0;
      v122->__r_.__value_.__r.__words[2] = 0;
      v122->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v185, __val);
      if ((v185.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v124 = &v185;
      }
      else {
        uint64_t v124 = (std::string *)v185.__r_.__value_.__r.__words[0];
      }
      if ((v185.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v125 = HIBYTE(v185.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v125 = v185.__r_.__value_.__l.__size_;
      }
      uint64_t v126 = std::string::append(&v188, (const std::string::value_type *)v124, v125);
      long long v127 = *(_OWORD *)&v126->__r_.__value_.__l.__data_;
      *(void *)&v218[16] = *((void *)&v126->__r_.__value_.__l + 2);
      *(_OWORD *)uint64_t v218 = v127;
      v126->__r_.__value_.__l.__size_ = 0;
      v126->__r_.__value_.__r.__words[2] = 0;
      v126->__r_.__value_.__r.__words[0] = 0;
      long long v128 = std::string::append((std::string *)v218, " in layer ");
      long long v129 = *(_OWORD *)&v128->__r_.__value_.__l.__data_;
      *(void *)&v227[16] = *((void *)&v128->__r_.__value_.__l + 2);
      *(_OWORD *)v227 = v129;
      v128->__r_.__value_.__l.__size_ = 0;
      v128->__r_.__value_.__r.__words[2] = 0;
      v128->__r_.__value_.__r.__words[0] = 0;
      if ((v217.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v130 = &v217;
      }
      else {
        long long v130 = (std::string *)v217.__r_.__value_.__r.__words[0];
      }
      if ((v217.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v131 = HIBYTE(v217.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v131 = v217.__r_.__value_.__l.__size_;
      }
      std::string::size_type v132 = std::string::append((std::string *)v227, (const std::string::value_type *)v130, v131);
      long long v133 = *(_OWORD *)&v132->__r_.__value_.__l.__data_;
      *(void *)&long long v222 = *((void *)&v132->__r_.__value_.__l + 2);
      long long __p = v133;
      v132->__r_.__value_.__l.__size_ = 0;
      v132->__r_.__value_.__r.__words[2] = 0;
      v132->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v119, (const std::string *)&__p);
      __cxa_throw(v119, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    std::string::size_type v51 = v184.__r_.__value_.__r.__words[0];
    EspressoConverter::copyWeightsToDataBlob(*(EspressoConverter **)(v184.__r_.__value_.__r.__words[0] + 16), v39, 4 * *(unsigned int *)v193);
    goto LABEL_113;
  }
  if (*(unsigned char *)(v40 + 23)) {
    goto LABEL_111;
  }
LABEL_103:
  if ((v43 & 0x80) != 0) {
    uint64_t v43 = *(void *)(v42 + 8);
  }
  if (v39 == &CoreML::Specification::_WeightParams_default_instance_) {
    goto LABEL_111;
  }
  if (!v43) {
    goto LABEL_111;
  }
  uint64_t v50 = v39[8];
  if (!v50) {
    goto LABEL_111;
  }
  if ((int)EspressoConverter::getWeightParamSizeInBytes(v39) > (*(void *)(v50 + 16) * v8 + 7) >> 3)
  {
    std::string::size_type v167 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    uint64_t v168 = std::string::append(&v188, "' has insufficient bytes for ");
    long long v169 = *(_OWORD *)&v168->__r_.__value_.__l.__data_;
    *(void *)&v218[16] = *((void *)&v168->__r_.__value_.__l + 2);
    *(_OWORD *)uint64_t v218 = v169;
    v168->__r_.__value_.__l.__size_ = 0;
    v168->__r_.__value_.__r.__words[2] = 0;
    v168->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v187, v177);
    if ((v187.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string v170 = &v187;
    }
    else {
      std::string v170 = (std::string *)v187.__r_.__value_.__r.__words[0];
    }
    if ((v187.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v171 = HIBYTE(v187.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v171 = v187.__r_.__value_.__l.__size_;
    }
    unint64_t v172 = std::string::append((std::string *)v218, (const std::string::value_type *)v170, v171);
    long long v173 = *(_OWORD *)&v172->__r_.__value_.__l.__data_;
    *(void *)&v227[16] = *((void *)&v172->__r_.__value_.__l + 2);
    *(_OWORD *)v227 = v173;
    v172->__r_.__value_.__l.__size_ = 0;
    v172->__r_.__value_.__r.__words[2] = 0;
    v172->__r_.__value_.__r.__words[0] = 0;
    uint64_t v174 = std::string::append((std::string *)v227, "units in bias");
    long long v175 = *(_OWORD *)&v174->__r_.__value_.__l.__data_;
    *(void *)&long long v222 = *((void *)&v174->__r_.__value_.__l + 2);
    long long __p = v175;
    v174->__r_.__value_.__l.__size_ = 0;
    v174->__r_.__value_.__r.__words[2] = 0;
    v174->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v167, (const std::string *)&__p);
    __cxa_throw(v167, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CoreML::dequantizeWeightParamSpec((CoreML *)&__p, (const CoreML::Specification::WeightParams *)v39, v8);
  std::string::size_type v51 = v184.__r_.__value_.__r.__words[0];
  uint64_t v52 = (void *)__p;
  memcpy(*(void **)(v184.__r_.__value_.__r.__words[0] + 16), (const void *)__p, 4 * v8);
  if (v52) {
    operator delete(v52);
  }
LABEL_113:
  uint64_t v54 = (std::__shared_weak_count *)v184.__r_.__value_.__l.__size_;
  std::string::size_type v178 = v51;
  uint64_t v179 = (std::__shared_weak_count *)v184.__r_.__value_.__l.__size_;
  if (v184.__r_.__value_.__l.__size_) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v184.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, std::string::size_type *))(*(void *)v16 + 392))(v16, &v178);
  if (v179) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v179);
  }
  if (v54) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v54);
  }
LABEL_119:
  if (**((unsigned char **)this + 2))
  {
    LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v214);
  }
  else
  {
    uint64_t v55 = (uint64_t **)*((void *)this + 1);
    uint64_t v56 = std::map<std::string,std::string>::at((uint64_t)v55, v211);
    *(_OWORD *)v227 = *(_OWORD *)v56;
    *(_OWORD *)&v227[16] = *(_OWORD *)(v56 + 16);
    uint64_t v228 = *(void *)(v56 + 32);
    v229 = 0;
    uint64_t v230 = 0;
    uint64_t v231 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v229, *(const void **)(v56 + 40), *(void *)(v56 + 48), (uint64_t)(*(void *)(v56 + 48) - *(void *)(v56 + 40)) >> 2);
    if (*(_DWORD *)&v227[4] != -1 && *(_DWORD *)&v227[4] != 1)
    {
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
      uint64_t v134 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v222, (uint64_t)"Embedding layer: '", 18);
      uint64_t v135 = *((void *)a2 + 14);
      int v136 = *(char *)(v135 + 23);
      if (v136 >= 0) {
        uint64_t v137 = *((void *)a2 + 14);
      }
      else {
        uint64_t v137 = *(void *)v135;
      }
      if (v136 >= 0) {
        uint64_t v138 = *(unsigned __int8 *)(v135 + 23);
      }
      else {
        uint64_t v138 = *(void *)(v135 + 8);
      }
      id v139 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v134, v137, v138);
      v140 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v139, (uint64_t)"': height dimension of the input blob must be 1.", 48);
      std::endl[abi:ne180100]<char,std::char_traits<char>>(v140);
      std::string::size_type v141 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::runtime_error::runtime_error(v141, (const std::string *)v218);
      __cxa_throw(v141, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    if (*(_DWORD *)v227 != -1 && *(_DWORD *)v227 != 1)
    {
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
      uint64_t v142 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v222, (uint64_t)"Embedding layer: '", 18);
      uint64_t v143 = *((void *)a2 + 14);
      int v144 = *(char *)(v143 + 23);
      if (v144 >= 0) {
        uint64_t v145 = *((void *)a2 + 14);
      }
      else {
        uint64_t v145 = *(void *)v143;
      }
      if (v144 >= 0) {
        uint64_t v146 = *(unsigned __int8 *)(v143 + 23);
      }
      else {
        uint64_t v146 = *(void *)(v143 + 8);
      }
      int v147 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v142, v145, v146);
      uint64_t v148 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v147, (uint64_t)"': width dimension of the input blob must be 1.", 47);
      std::endl[abi:ne180100]<char,std::char_traits<char>>(v148);
      long long v149 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::runtime_error::runtime_error(v149, (const std::string *)v218);
      __cxa_throw(v149, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    if (*(_DWORD *)&v227[8] != -1 && *(_DWORD *)&v227[8] != 1)
    {
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
      uint64_t v150 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v222, (uint64_t)"Embedding layer: '", 18);
      uint64_t v151 = *((void *)a2 + 14);
      int v152 = *(char *)(v151 + 23);
      if (v152 >= 0) {
        uint64_t v153 = *((void *)a2 + 14);
      }
      else {
        uint64_t v153 = *(void *)v151;
      }
      if (v152 >= 0) {
        uint64_t v154 = *(unsigned __int8 *)(v151 + 23);
      }
      else {
        uint64_t v154 = *(void *)(v151 + 8);
      }
      v155 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v150, v153, v154);
      id v156 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v155, (uint64_t)"': channel dimension of the input blob must be 1.", 49);
      std::endl[abi:ne180100]<char,std::char_traits<char>>(v156);
      std::string::size_type v157 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::runtime_error::runtime_error(v157, (const std::string *)v218);
      __cxa_throw(v157, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    long long __p = *(_OWORD *)v227;
    long long v222 = *(_OWORD *)&v227[16];
    long long v57 = v229;
    uint64_t v223 = v228;
    uint64_t v224 = 0;
    uint64_t v226 = 0;
    uint64_t v225 = 0;
    uint64_t v58 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v224, v229, v230, (v230 - (uint64_t)v229) >> 2);
    if (*((_DWORD *)a2 + 35) == 150)
    {
      int v59 = (uint64_t *)*((void *)a2 + 16);
    }
    else
    {
      CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v58);
      int v59 = &CoreML::Specification::_EmbeddingLayerParams_default_instance_;
    }
    DWORD2(__p) = v59[5];
    *(_OWORD *)uint64_t v218 = __p;
    *(_OWORD *)&v218[16] = v222;
    uint64_t v60 = v224;
    uint64_t v219 = v223;
    memset(v220, 0, sizeof(v220));
    uint64_t v61 = v225;
    unint64_t v62 = (v225 - (uint64_t)v224) >> 2;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v220, v224, v225, v62);
    EspressoConverter::validateShape((int *)v218, *((void *)a2 + 14), (uint64_t)v214);
    if (v220[0]) {
      operator delete(v220[0]);
    }
    v188.__r_.__value_.__r.__words[0] = (std::string::size_type)v214;
    std::string v63 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v55, v214, (long long **)&v188);
    long long v64 = v222;
    *(_OWORD *)(v63 + 5CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = __p;
    *(_OWORD *)(v63 + 72) = v64;
    *((void *)v63 + 11) = v223;
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v63 + 96, v60, v61, v62);
    if (v60) {
      operator delete(v60);
    }
    if (v57) {
      operator delete(v57);
    }
  }
  if (v206) {
    uint64_t v65 = v206;
  }
  else {
    uint64_t v65 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  uint64_t v66 = v65[5];
  uint64_t v67 = *(unsigned __int8 *)(v66 + 23);
  if (*(char *)(v66 + 23) < 0) {
    uint64_t v68 = *(void *)(v66 + 8);
  }
  else {
    uint64_t v68 = *(unsigned __int8 *)(v66 + 23);
  }
  uint64_t v69 = v65[6];
  if (*(char *)(v69 + 23) < 0) {
    uint64_t v70 = *(void *)(v69 + 8);
  }
  else {
    uint64_t v70 = *(unsigned __int8 *)(v69 + 23);
  }
  int v71 = *((_DWORD *)v65 + 4);
  uint64_t v72 = v65[7];
  if (*(char *)(v72 + 23) < 0) {
    uint64_t v73 = *(void *)(v72 + 8);
  }
  else {
    uint64_t v73 = *(unsigned __int8 *)(v72 + 23);
  }
  BOOL v74 = 0;
  if (v71 <= 0) {
    int v75 = 1;
  }
  else {
    int v75 = 2;
  }
  if (v68) {
    int v76 = v75;
  }
  else {
    int v76 = v71 > 0;
  }
  if (v70) {
    ++v76;
  }
  if (v73) {
    ++v76;
  }
  if (v71 <= 0 && v76 == 1)
  {
    if ((v67 & 0x80) != 0) {
      uint64_t v67 = *(void *)(v66 + 8);
    }
    BOOL v74 = v67 != 0;
  }
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (v192) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v192);
  }
  CoreML::Specification::EmbeddingLayerParams::~EmbeddingLayerParams((CoreML::Specification::EmbeddingLayerParams *)v205);
  *(void *)&long long __p = &v211;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  *(void *)&long long __p = &v214;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v217.__r_.__value_.__l.__data_);
  }
  return v74;
}

void sub_19EA7AF90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,uint64_t a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62,uint64_t a63)
{
  if (SLOBYTE(STACK[0x2B7]) < 0) {
    operator delete((void *)STACK[0x2A0]);
  }
  if (*(char *)(v74 - 137) < 0) {
    operator delete(*(void **)(v74 - 160));
  }
  if (SLOBYTE(STACK[0x277]) < 0) {
    operator delete((void *)STACK[0x260]);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a62 < 0) {
    operator delete(a57);
  }
  if (a55 < 0) {
    operator delete(a50);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  if (a48 < 0) {
    operator delete(a43);
  }
  if (a41 < 0) {
    operator delete(a36);
  }
  if (a35 < 0)
  {
    operator delete(a30);
    if ((v72 & 1) == 0)
    {
LABEL_24:
      if (a10) {
        std::__shared_weak_count::__release_shared[abi:ne180100](a10);
      }
      if (a71) {
        std::__shared_weak_count::__release_shared[abi:ne180100](a71);
      }
      CoreML::Specification::EmbeddingLayerParams::~EmbeddingLayerParams((CoreML::Specification::EmbeddingLayerParams *)&a72);
      STACK[0x2A0] = (unint64_t)&STACK[0x210];
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2A0]);
      STACK[0x2A0] = (unint64_t)&STACK[0x228];
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2A0]);
      if (SLOBYTE(STACK[0x257]) < 0) {
        operator delete((void *)STACK[0x240]);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v72)
  {
    goto LABEL_24;
  }
  __cxa_free_exception(v73);
  goto LABEL_24;
}

void Espresso::sequential_builder::add<Espresso::inner_product_uniforms>(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, long long *a6, long long *a7, long long **a8)
{
  memset(&v13, 0, sizeof(v13));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v13, a6, a7, 0xAAAAAAAAAAAAAAABLL * (((char *)a7 - (char *)a6) >> 3));
  memset(&v12, 0, sizeof(v12));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v12, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a8[1] - (char *)*a8) >> 3));
  LODWORD(v15.__r_.__value_.__l.__data_) = (***(uint64_t (****)(void))(a2[14] + 8))(*(void *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  std::string v11 = (std::__shared_weak_count *)a1[1];
  uint64_t v16 = *a1;
  int v17 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(&v15, 0, sizeof(v15));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v15, (long long *)v13.__r_.__value_.__l.__data_, (long long *)v13.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13.__r_.__value_.__l.__size_ - v13.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v14, 0, sizeof(v14));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v14, (long long *)v12.__r_.__value_.__l.__data_, (long long *)v12.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12.__r_.__value_.__l.__size_ - v12.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  char v18 = &v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  char v18 = &v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (*a2) {
    Espresso::sequential_builder::add_shape_from_kernel();
  }
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
}

void sub_19EA7B7B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v16 = *(std::__shared_weak_count **)(v13 + 8);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  *(void *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(void *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

uint64_t std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(void *a1, int a2, int a3, int a4, int a5)
{
  char v10 = (char *)operator new(0x58uLL);
  *((void *)v10 + 1) = 0;
  *((void *)v10 + 2) = 0;
  *(void *)char v10 = &unk_1EF0DDAE8;
  *((void *)v10 + 3) = &unk_1EF0DCF40;
  *(_OWORD *)(v10 + 5CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = 0u;
  *(_OWORD *)(v10 + 72) = 0u;
  *((_DWORD *)v10 + 8) = a2;
  uint64_t result = Espresso::kern_alloc((Espresso *)(4 * a2 * (uint64_t)a3 * a4 * a5));
  *((void *)v10 + 5) = result;
  v10[48] = 1;
  *a1 = v10 + 24;
  a1[1] = v10;
  return result;
}

void sub_19EA7B90C(_Unwind_Exception *a1)
{
  shared_owners = (std::__shared_weak_count *)v1[3].__shared_owners_;
  if (shared_owners) {
    std::__shared_weak_count::__release_shared[abi:ne180100](shared_owners);
  }
  shared_weak_owners = (std::__shared_weak_count *)v1[2].__shared_weak_owners_;
  if (shared_weak_owners) {
    std::__shared_weak_count::__release_shared[abi:ne180100](shared_weak_owners);
  }
  Espresso::blob_rtti_root::~blob_rtti_root(v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v6);
  _Unwind_Resume(a1);
}

void Espresso::blob<float,1>::~blob(Espresso::blob_rtti_root *this, void *a2)
{
  *(void *)this = &unk_1EF0DCF40;
  if (*((unsigned char *)this + 24))
  {
    unint64_t v3 = (Espresso *)*((void *)this + 2);
    if (v3) {
      Espresso::kern_dealloc(v3, a2);
    }
  }
  *((void *)this + 2) = 0;
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  long long v5 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  Espresso::blob_rtti_root::~blob_rtti_root(this);

  JUMPOUT(0x19F3C1920);
}

{
  Espresso *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t vars8;

  *(void *)this = &unk_1EF0DCF40;
  if (*((unsigned char *)this + 24))
  {
    unint64_t v3 = (Espresso *)*((void *)this + 2);
    if (v3) {
      Espresso::kern_dealloc(v3, a2);
    }
  }
  *((void *)this + 2) = 0;
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  long long v5 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }

  Espresso::blob_rtti_root::~blob_rtti_root(this);
}

uint64_t std::__shared_ptr_emplace<Espresso::blob<float,1>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::blob<float,1>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF0DDAE8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x19F3C1920);
}

void std::__shared_ptr_emplace<Espresso::blob<float,1>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF0DDAE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void LayerTranslator::addFloor(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  uint64_t v4 = (long long *)*((void *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)v4, *((void *)v4 + 1));
  }
  else
  {
    long long v5 = *v4;
    v23.__r_.__value_.__r.__words[2] = *((void *)v4 + 2);
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v5;
  }
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  int v17 = 0;
  char v18 = 0;
  uint64_t v19 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v20, (uint64_t *)&v17, *((void *)this + 1));
  v13[2] = (void **)897988541;
  char v14 = 0;
  int v15 = 0;
  int v16 = 0;
  v13[0] = (void **)117;
  v13[1] = (void **)1065353216;
  uint64_t v6 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
  memset(&v8, 0, sizeof(v8));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v8, v17, v18, 0xAAAAAAAAAAAAAAABLL * (((char *)v18 - (char *)v17) >> 3));
  memset(&v7, 0, sizeof(v7));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v7, v20, v21, 0xAAAAAAAAAAAAAAABLL * (((char *)v21 - (char *)v20) >> 3));
  Espresso::sequential_builder::add<Espresso::elementwise_params>(&v11, v6, (uint64_t)__p, (uint64_t)&v23, (uint64_t)v13, (long long *)v8.__r_.__value_.__l.__data_, (long long *)v8.__r_.__value_.__l.__size_, (long long **)&v7);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  int v24 = &v7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  int v24 = &v8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v20);
  v13[0] = (void **)&v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v13);
  v13[0] = (void **)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v13);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
}

void sub_19EA7BCA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  a23 = v23 - 112;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  a23 = v23 - 88;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  if (*(char *)(v23 - 41) < 0) {
    operator delete(*(void **)(v23 - 64));
  }
  _Unwind_Resume(a1);
}

void LayerTranslator::addFillLike(LayerTranslator *this, uint64_t **a2)
{
  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  uint64_t v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v23, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    long long v5 = *(_OWORD *)v4;
    v23.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v5;
  }
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  int v17 = 0;
  char v18 = 0;
  uint64_t v19 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v20, (uint64_t *)&v17, *((void *)this + 1));
  *(void *)&void v15[3] = 0;
  *(void *)&v15[1] = 0;
  *(void *)&v15[5] = 0xFFFFFFFF00000001;
  if (*((_DWORD *)a2 + 35) == 1080)
  {
    std::string v7 = a2[16];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    std::string v7 = &CoreML::Specification::_FillLikeLayerParams_default_instance_;
  }
  v15[0] = *((_DWORD *)v7 + 4);
  v15[7] = 1;
  char v16 = 0;
  std::string v8 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "fill");
  memset(&v10, 0, sizeof(v10));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v10, v17, v18, 0xAAAAAAAAAAAAAAABLL * (((char *)v18 - (char *)v17) >> 3));
  memset(&v9, 0, sizeof(v9));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v9, v20, v21, 0xAAAAAAAAAAAAAAABLL * (((char *)v21 - (char *)v20) >> 3));
  Espresso::sequential_builder::add<Espresso::fill_params_t>(&v13, v8, (uint64_t)__p, (uint64_t)&v23, (uint64_t)v15, (long long *)v10.__r_.__value_.__l.__data_, (long long *)v10.__r_.__value_.__l.__size_, (long long **)&v9);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  int v24 = &v9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  int v24 = &v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v20);
  *(void *)int v15 = &v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v15);
  *(void *)int v15 = &v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v15);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
}

void sub_19EA7BEFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  *(void *)(v24 - 40) = v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v24 - 40));
  *(void *)(v24 - 40) = &a12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v24 - 40));
  if (a20 < 0) {
    operator delete(__p);
  }
  a23 = v24 - 112;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  a23 = v24 - 88;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  if (*(char *)(v24 - 41) < 0) {
    operator delete(*(void **)(v24 - 64));
  }
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::add<Espresso::fill_params_t>(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, long long *a6, long long *a7, long long **a8)
{
  memset(&v13, 0, sizeof(v13));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v13, a6, a7, 0xAAAAAAAAAAAAAAABLL * (((char *)a7 - (char *)a6) >> 3));
  memset(&v12, 0, sizeof(v12));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v12, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a8[1] - (char *)*a8) >> 3));
  LODWORD(v15.__r_.__value_.__l.__data_) = (***(uint64_t (****)(void))(a2[14] + 8))(*(void *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  uint64_t v11 = (std::__shared_weak_count *)a1[1];
  uint64_t v16 = *a1;
  int v17 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(&v15, 0, sizeof(v15));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v15, (long long *)v13.__r_.__value_.__l.__data_, (long long *)v13.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13.__r_.__value_.__l.__size_ - v13.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v14, 0, sizeof(v14));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v14, (long long *)v12.__r_.__value_.__l.__data_, (long long *)v12.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12.__r_.__value_.__l.__size_ - v12.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  char v18 = &v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  char v18 = &v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (*a2) {
    Espresso::sequential_builder::add_shape_from_kernel();
  }
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
}

void sub_19EA7C164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v16 = *(std::__shared_weak_count **)(v13 + 8);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  *(void *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(void *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void LayerTranslator::addFillStatic(LayerTranslator *this, uint64_t **a2)
{
  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  uint64_t v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v40, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    long long v5 = *(_OWORD *)v4;
    v40.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v5;
  }
  uint64_t v37 = 0;
  long long v38 = 0;
  uint64_t v39 = 0;
  long long v34 = 0;
  int v35 = 0;
  uint64_t v36 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v37, (uint64_t *)&v34, *((void *)this + 1));
  if (*((_DWORD *)a2 + 35) == 1085)
  {
    std::string v7 = a2[16];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    std::string v7 = &CoreML::Specification::_FillStaticLayerParams_default_instance_;
  }
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  int v28 = (long long **)&unk_1EF0D4B88;
  unint64_t v29 = 0;
  int v8 = *((_DWORD *)v7 + 4);
  if (v8)
  {
    google::protobuf::RepeatedField<double>::Reserve((unsigned int *)&v30, v8);
    memcpy((void *)(v31 + 8), (const void *)(v7[3] + 8), 8 * *((int *)v7 + 4));
    int v9 = *((_DWORD *)v7 + 4);
    LODWORD(v30) = v9;
  }
  else
  {
    int v9 = 0;
  }
  int v33 = 0;
  uint64_t v10 = v7[1];
  if (v10)
  {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&v29, v10 & 0xFFFFFFFFFFFFFFFELL);
    int v9 = v30;
  }
  int v32 = *((_DWORD *)v7 + 9);
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  int v21 = v32;
  int v25 = v9;
  int v26 = 1;
  char v27 = 0;
  if (v9 <= 0)
  {
    LODWORD(v22) = 1;
    goto LABEL_20;
  }
  LODWORD(v22) = *(void *)(v31 + 8 * (v9 - 1) + 8);
  if (v9 == 1)
  {
LABEL_20:
    HIDWORD(v22) = 1;
    goto LABEL_21;
  }
  HIDWORD(v22) = *(void *)(v31 + 8 * (v9 - 2) + 8);
  if (v9 <= 2)
  {
LABEL_21:
    LODWORD(v23) = 1;
    goto LABEL_22;
  }
  LODWORD(v23) = *(void *)(v31 + 8 * (v9 - 3) + 8);
  if (v9 == 3)
  {
LABEL_22:
    int v14 = 1;
    HIDWORD(v23) = 1;
    goto LABEL_23;
  }
  HIDWORD(v23) = *(void *)(v31 + 8 * (v9 - 4) + 8);
  BOOL v11 = v9 >= 5;
  unsigned int v12 = v9 - 5;
  if (v11) {
    int v14 = *(_DWORD *)(v31 + 8 * v12 + 8);
  }
  else {
    int v14 = 1;
  }
LABEL_23:
  int v24 = v14;
  uint64_t v13 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "fill");
  memset(&v16, 0, sizeof(v16));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v16, v34, v35, 0xAAAAAAAAAAAAAAABLL * (((char *)v35 - (char *)v34) >> 3));
  memset(&v15, 0, sizeof(v15));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v15, v37, v38, 0xAAAAAAAAAAAAAAABLL * (((char *)v38 - (char *)v37) >> 3));
  Espresso::sequential_builder::add<Espresso::fill_params_t>(&v19, v13, (uint64_t)__p, (uint64_t)&v40, (uint64_t)&v21, (long long *)v16.__r_.__value_.__l.__data_, (long long *)v16.__r_.__value_.__l.__size_, (long long **)&v15);
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  uint64_t v41 = &v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v41);
  uint64_t v41 = &v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v41);
  if (v18 < 0) {
    operator delete(__p[0]);
  }
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v37);
  CoreML::Specification::FillStaticLayerParams::~FillStaticLayerParams((CoreML::Specification::FillStaticLayerParams *)&v28);
  int v28 = &v34;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
  int v28 = &v37;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v40.__r_.__value_.__l.__data_);
  }
}

void sub_19EA7C4CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p)
{
  if (__p && !*__p) {
    operator delete(__p);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v31);
  a28 = v32 - 112;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  a28 = v32 - 88;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  if (*(char *)(v32 - 41) < 0) {
    operator delete(*(void **)(v32 - 64));
  }
  _Unwind_Resume(a1);
}

void LayerTranslator::addFillDynamic(LayerTranslator *this, uint64_t **a2)
{
  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  uint64_t v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v23, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    long long v5 = *(_OWORD *)v4;
    v23.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v5;
  }
  uint64_t v20 = 0;
  int v21 = 0;
  uint64_t v22 = 0;
  int v17 = 0;
  char v18 = 0;
  uint64_t v19 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v20, (uint64_t *)&v17, *((void *)this + 1));
  *(void *)&void v15[3] = 0;
  *(void *)&v15[1] = 0;
  *(void *)&v15[5] = 0xFFFFFFFF00000001;
  if (*((_DWORD *)a2 + 35) == 1090)
  {
    std::string v7 = a2[16];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    std::string v7 = &CoreML::Specification::_FillDynamicLayerParams_default_instance_;
  }
  v15[0] = *((_DWORD *)v7 + 4);
  v15[7] = 1;
  char v16 = 1;
  int v8 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "fill");
  memset(&v10, 0, sizeof(v10));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v10, v17, v18, 0xAAAAAAAAAAAAAAABLL * (((char *)v18 - (char *)v17) >> 3));
  memset(&v9, 0, sizeof(v9));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v9, v20, v21, 0xAAAAAAAAAAAAAAABLL * (((char *)v21 - (char *)v20) >> 3));
  Espresso::sequential_builder::add<Espresso::fill_params_t>(&v13, v8, (uint64_t)__p, (uint64_t)&v23, (uint64_t)v15, (long long *)v10.__r_.__value_.__l.__data_, (long long *)v10.__r_.__value_.__l.__size_, (long long **)&v9);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  int v24 = &v9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  int v24 = &v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v20);
  *(void *)std::string v15 = &v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v15);
  *(void *)std::string v15 = &v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v15);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
}

void sub_19EA7C75C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  *(void *)(v24 - 40) = v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v24 - 40));
  *(void *)(v24 - 40) = &a12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v24 - 40));
  if (a20 < 0) {
    operator delete(__p);
  }
  a23 = v24 - 112;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  a23 = v24 - 88;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  if (*(char *)(v24 - 41) < 0) {
    operator delete(*(void **)(v24 - 64));
  }
  _Unwind_Resume(a1);
}

void LayerTranslator::addLRN(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  v82[2] = *MEMORY[0x1E4F143B8];
  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  uint64_t v4 = (long long *)*((void *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v72, *(const std::string::value_type **)v4, *((void *)v4 + 1));
  }
  else
  {
    long long v5 = *v4;
    v72.__r_.__value_.__r.__words[2] = *((void *)v4 + 2);
    *(_OWORD *)&v72.__r_.__value_.__l.__data_ = v5;
  }
  uint64_t v69 = 0;
  uint64_t v70 = 0;
  uint64_t v71 = 0;
  uint64_t v66 = 0;
  uint64_t v67 = 0;
  uint64_t v68 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v69, (uint64_t *)&v66, *((void *)this + 1));
  if (*((_DWORD *)a2 + 35) == 180)
  {
    std::string v7 = (uint64_t *)*((void *)a2 + 16);
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    std::string v7 = &CoreML::Specification::_LRNLayerParams_default_instance_;
  }
  uint64_t v61 = &unk_1EF0D0448;
  uint64_t v62 = 0;
  int v65 = 0;
  uint64_t v8 = v7[1];
  if (v8) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((unint64_t *)&v62, v8 & 0xFFFFFFFFFFFFFFFELL);
  }
  long long v9 = *((_OWORD *)v7 + 1);
  float v64 = *((float *)v7 + 8);
  long long v63 = v9;
  uint64_t v60 = 0;
  uint64_t v59 = 0;
  uint64_t v57 = v9;
  if (v64 >= 0.00001) {
    float v10 = v64;
  }
  else {
    float v10 = 1.0;
  }
  int v58 = DWORD2(v63);
  if (fabsf(v10 + -1.0) >= 0.00001)
  {
    *(float *)&uint64_t v57 = *(float *)&v63 / v10;
    memset(&v75, 0, 24);
    char v12 = v69;
    if (*((char *)v69 + 23) >= 0) {
      size_t v13 = *((unsigned __int8 *)v69 + 23);
    }
    else {
      size_t v13 = *((void *)v69 + 1);
    }
    int v14 = &v52;
    std::string::basic_string[abi:ne180100]((uint64_t)&v52, v13 + 1);
    if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      int v14 = (std::string *)v52.__r_.__value_.__r.__words[0];
    }
    if (v13)
    {
      if (*((char *)v12 + 23) >= 0) {
        std::string v15 = v12;
      }
      else {
        std::string v15 = *(long long **)v12;
      }
      memmove(v14, v15, v13);
    }
    *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + vCoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 13) = 95;
    std::to_string(&v51, *(_DWORD *)(*((void *)this + 2) + 4));
    if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v16 = &v51;
    }
    else {
      char v16 = (std::string *)v51.__r_.__value_.__r.__words[0];
    }
    if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v51.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v51.__r_.__value_.__l.__size_;
    }
    char v18 = std::string::append(&v52, (const std::string::value_type *)v16, size);
    long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v73.__end_ = (std::__split_buffer<std::string>::pointer)v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v73.__first_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    uint64_t v20 = std::string::append((std::string *)&v73, "_lrn_out");
    int v21 = (char *)v20->__r_.__value_.__r.__words[0];
    v82[0] = v20->__r_.__value_.__l.__size_;
    *(void *)((char *)v82 + 7) = *(std::string::size_type *)((char *)&v20->__r_.__value_.__r.__words[1] + 7);
    char v22 = HIBYTE(v20->__r_.__value_.__r.__words[2]);
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    begiunint64_t n = v75.__begin_;
    if (v75.__begin_ >= v75.__end_)
    {
      unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * (((char *)v75.__begin_ - (char *)v75.__first_) >> 3);
      unint64_t v27 = v26 + 1;
      if (v26 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
      }
      if (0x5555555555555556 * (((char *)v75.__end_ - (char *)v75.__first_) >> 3) > v27) {
        unint64_t v27 = 0x5555555555555556 * (((char *)v75.__end_ - (char *)v75.__first_) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v75.__end_ - (char *)v75.__first_) >> 3) >= 0x555555555555555) {
        unint64_t v28 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v28 = v27;
      }
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v75.__end_;
      if (v28) {
        unint64_t v29 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v75.__end_, v28);
      }
      else {
        unint64_t v29 = 0;
      }
      uint64_t v30 = v29 + v26;
      __v.__first_ = v29;
      __v.__begin_ = v30;
      __v.__end_cap_.__value_ = &v29[v28];
      std::string::size_type v31 = v82[0];
      v30->__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
      v30->__r_.__value_.__l.__size_ = v31;
      *(std::string::size_type *)((char *)&v30->__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v82 + 7);
      *((unsigned char *)&v30->__r_.__value_.__s + 23) = v22;
      v82[0] = 0;
      *(void *)((char *)v82 + 7) = 0;
      __v.__end_ = v30 + 1;
      std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)&v75, &__v);
      int v25 = v75.__begin_;
      std::__split_buffer<std::string>::~__split_buffer(&__v);
    }
    else
    {
      std::string::size_type v24 = v82[0];
      v75.__begin_->__r_.__value_.__l.__data_ = v21;
      begin->__r_.__value_.__l.__size_ = v24;
      *(std::string::size_type *)((char *)&begin->__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v82 + 7);
      *((unsigned char *)&begin->__r_.__value_.__s + 23) = v22;
      int v25 = begin + 1;
    }
    v75.__begin_ = v25;
    if (SHIBYTE(v73.__end_) < 0) {
      operator delete(v73.__first_);
    }
    if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v51.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v52.__r_.__value_.__l.__data_);
    }
    uint64_t v32 = *(void **)this;
    std::string::basic_string[abi:ne180100]<0>(&__v, "lrn");
    memset(&v48, 0, sizeof(v48));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v48, v66, v67, 0xAAAAAAAAAAAAAAABLL * (((char *)v67 - (char *)v66) >> 3));
    memset(&v47, 0, sizeof(v47));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v47, (long long *)v75.__first_, (long long *)v75.__begin_, 0xAAAAAAAAAAAAAAABLL * (((char *)v75.__begin_ - (char *)v75.__first_) >> 3));
    Espresso::sequential_builder::add<Espresso::lrn_params>(&v49, v32, (uint64_t)&__v, (uint64_t)&v72, (uint64_t)&v57, (long long *)v48.__r_.__value_.__l.__data_, (long long *)v48.__r_.__value_.__l.__size_, (long long **)&v47);
    if (v50) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v50);
    }
    v73.__first_ = &v47;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v73);
    v73.__first_ = &v48;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v73);
    if (SHIBYTE(__v.__end_) < 0) {
      operator delete(__v.__first_);
    }
    *(std::__split_buffer<std::string>::pointer *)((char *)&__v.__begin_ + 4) = (std::__split_buffer<std::string>::pointer)0x358637BD00000000;
    HIDWORD(__v.__end_) = 0;
    LOBYTE(__v.__end_cap_.__value_) = 0;
    *(void *)((char *)&v80 + 4) = 0;
    __v.__first_ = (std::__split_buffer<std::string>::pointer)1;
    LODWORD(__v.__begin_) = powf(v10, -*((float *)&v57 + 1));
    int v33 = *(void **)this;
    std::string::basic_string[abi:ne180100]<0>(&v73, "elementwise");
    if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v34 = HIBYTE(v72.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v34 = v72.__r_.__value_.__l.__size_;
    }
    int v35 = &v52;
    std::string::basic_string[abi:ne180100]((uint64_t)&v52, v34 + 4);
    if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      int v35 = (std::string *)v52.__r_.__value_.__r.__words[0];
    }
    if (v34)
    {
      if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v36 = &v72;
      }
      else {
        uint64_t v36 = (std::string *)v72.__r_.__value_.__r.__words[0];
      }
      memmove(v35, v36, v34);
    }
    strcpy((char *)v35 + v34, "_mul");
    memset(&v44, 0, sizeof(v44));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v44, (long long *)v75.__first_, (long long *)v75.__begin_, 0xAAAAAAAAAAAAAAABLL * (((char *)v75.__begin_ - (char *)v75.__first_) >> 3));
    memset(&v43, 0, sizeof(v43));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v43, v69, v70, 0xAAAAAAAAAAAAAAABLL * (((char *)v70 - (char *)v69) >> 3));
    Espresso::sequential_builder::add<Espresso::elementwise_params>(&v45, v33, (uint64_t)&v73, (uint64_t)&v52, (uint64_t)&__v, (long long *)v44.__r_.__value_.__l.__data_, (long long *)v44.__r_.__value_.__l.__size_, (long long **)&v43);
    if (v46) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v46);
    }
    v51.__r_.__value_.__r.__words[0] = (std::string::size_type)&v43;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v51);
    v51.__r_.__value_.__r.__words[0] = (std::string::size_type)&v44;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v51);
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v52.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v73.__end_) < 0) {
      operator delete(v73.__first_);
    }
    __v.__first_ = (std::__split_buffer<std::string>::pointer)&v75;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  }
  else
  {
    BOOL v11 = *(void **)this;
    std::string::basic_string[abi:ne180100]<0>(&__v, "lrn");
    memset(&v54, 0, sizeof(v54));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v54, v66, v67, 0xAAAAAAAAAAAAAAABLL * (((char *)v67 - (char *)v66) >> 3));
    memset(&v53, 0, sizeof(v53));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v53, v69, v70, 0xAAAAAAAAAAAAAAABLL * (((char *)v70 - (char *)v69) >> 3));
    Espresso::sequential_builder::add<Espresso::lrn_params>(&v55, v11, (uint64_t)&__v, (uint64_t)&v72, (uint64_t)&v57, (long long *)v54.__r_.__value_.__l.__data_, (long long *)v54.__r_.__value_.__l.__size_, (long long **)&v53);
    if (v56) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v56);
    }
    v75.__first_ = &v53;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v75);
    v75.__first_ = &v54;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v75);
    if (SHIBYTE(__v.__end_) < 0) {
      operator delete(__v.__first_);
    }
  }
  if (**((unsigned char **)this + 2))
  {
    LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v69);
  }
  else
  {
    uint64_t v37 = (uint64_t **)*((void *)this + 1);
    uint64_t v38 = std::map<std::string,std::string>::at((uint64_t)v37, v66);
    std::__split_buffer<std::string> __v = *(std::__split_buffer<std::string> *)v38;
    long long v80 = 0uLL;
    uint64_t v81 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v80, *(const void **)(v38 + 40), *(void *)(v38 + 48), (uint64_t)(*(void *)(v38 + 48) - *(void *)(v38 + 40)) >> 2);
    std::__split_buffer<std::string> v75 = __v;
    uint64_t v39 = (void *)v80;
    int v76 = 0;
    uint64_t v77 = 0;
    uint64_t v78 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v76, (const void *)v80, *((uint64_t *)&v80 + 1), (uint64_t)(*((void *)&v80 + 1) - v80) >> 2);
    std::__split_buffer<std::string> v73 = v75;
    std::string v40 = v76;
    memset(__p, 0, sizeof(__p));
    uint64_t v41 = v77;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(__p, v76, v77, (v77 - (uint64_t)v76) >> 2);
    EspressoConverter::validateShape((int *)&v73, *((void *)a2 + 14), (uint64_t)v69);
    if (__p[0]) {
      operator delete(__p[0]);
    }
    v52.__r_.__value_.__r.__words[0] = (std::string::size_type)v69;
    uint64_t v42 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v37, v69, (long long **)&v52);
    *(std::__split_buffer<std::string> *)(v42 + 5CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = v75;
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v42 + 96, v40, v41, (v41 - (uint64_t)v40) >> 2);
    if (v40) {
      operator delete(v40);
    }
    if (v39) {
      operator delete(v39);
    }
  }
  uint64_t v61 = &unk_1EF0D0448;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(&v62);
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v66;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v69;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v72.__r_.__value_.__l.__data_);
  }
}

void sub_19EA7D010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,char a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,int a63)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)(v73 - 192));
  if (a72 < 0) {
    operator delete(__p);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  if (a37 < 0) {
    operator delete(a32);
  }
  long long __p = (void *)(v73 - 256);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v72);
  *(void *)(v73 - 25CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = &a55;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v73 - 256));
  *(void *)(v73 - 25CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = &a58;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v73 - 256));
  if (a66 < 0) {
    operator delete(a61);
  }
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::add<Espresso::lrn_params>(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, long long *a6, long long *a7, long long **a8)
{
  memset(&v13, 0, sizeof(v13));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v13, a6, a7, 0xAAAAAAAAAAAAAAABLL * (((char *)a7 - (char *)a6) >> 3));
  memset(&v12, 0, sizeof(v12));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v12, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a8[1] - (char *)*a8) >> 3));
  LODWORD(v15.__r_.__value_.__l.__data_) = (***(uint64_t (****)(void))(a2[14] + 8))(*(void *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  BOOL v11 = (std::__shared_weak_count *)a1[1];
  uint64_t v16 = *a1;
  int v17 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(&v15, 0, sizeof(v15));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v15, (long long *)v13.__r_.__value_.__l.__data_, (long long *)v13.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13.__r_.__value_.__l.__size_ - v13.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v14, 0, sizeof(v14));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v14, (long long *)v12.__r_.__value_.__l.__data_, (long long *)v12.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12.__r_.__value_.__l.__size_ - v12.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  char v18 = &v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  char v18 = &v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (*a2) {
    Espresso::sequential_builder::add_shape_from_kernel();
  }
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
}

void sub_19EA7D40C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v16 = *(std::__shared_weak_count **)(v13 + 8);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  *(void *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(void *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void LayerTranslator::addAverage(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  uint64_t v4 = (long long *)*((void *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v88, *(const std::string::value_type **)v4, *((void *)v4 + 1));
  }
  else
  {
    long long v5 = *v4;
    v88.__r_.__value_.__r.__words[2] = *((void *)v4 + 2);
    *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v5;
  }
  std::string::value_type v85 = 0;
  long long v86 = 0;
  uint64_t v87 = 0;
  long long v82 = 0;
  uint64_t v83 = 0;
  uint64_t v84 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v85, (uint64_t *)&v82, *((void *)this + 1));
  if (v86 - v85 != 24)
  {
    exceptiounint64_t n = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3C1380](exception, "Average Layer must have exactly 1 output");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int v58 = a2;
  uint64_t v79 = 0;
  long long v80 = 0;
  unint64_t v81 = 0;
  if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v88.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v88.__r_.__value_.__l.__size_;
  }
  std::string::basic_string[abi:ne180100]((uint64_t)&v61, size + 1);
  if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string v7 = &v61;
  }
  else {
    std::string v7 = (std::string *)v61.__r_.__value_.__r.__words[0];
  }
  if (size)
  {
    if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v8 = &v88;
    }
    else {
      uint64_t v8 = (std::string *)v88.__r_.__value_.__r.__words[0];
    }
    memmove(v7, v8, size);
  }
  *(_WORD *)((char *)&v7->__r_.__value_.__l.__data_ + size) = 95;
  long long v9 = std::string::append(&v61, "sum_out");
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  *(void *)&v90[16] = *((void *)&v9->__r_.__value_.__l + 2);
  *(_OWORD *)std::string::size_type v90 = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  BOOL v11 = std::string::append((std::string *)v90, "_");
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  *(void *)&long long v94 = *((void *)&v11->__r_.__value_.__l + 2);
  long long v93 = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v97, *(_DWORD *)(*((void *)this + 2) + 4));
  if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v13 = &v97;
  }
  else {
    uint64_t v13 = (std::string *)v97.__r_.__value_.__r.__words[0];
  }
  if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v14 = HIBYTE(v97.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v14 = v97.__r_.__value_.__l.__size_;
  }
  std::string v15 = std::string::append((std::string *)&v93, (const std::string::value_type *)v13, v14);
  long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  std::string::size_type v78 = v15->__r_.__value_.__r.__words[2];
  long long v77 = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v97.__r_.__value_.__l.__data_);
  }
  if (SBYTE7(v94) < 0) {
    operator delete((void *)v93);
  }
  if ((v90[23] & 0x80000000) != 0) {
    operator delete(*(void **)v90);
  }
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v61.__r_.__value_.__l.__data_);
  }
  int v17 = v80;
  if ((unint64_t)v80 >= v81)
  {
    long long v19 = (long long *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v79, &v77);
  }
  else
  {
    if (SHIBYTE(v78) < 0)
    {
      std::string::__init_copy_ctor_external(v80, (const std::string::value_type *)v77, *((std::string::size_type *)&v77 + 1));
    }
    else
    {
      long long v18 = v77;
      v80->__r_.__value_.__r.__words[2] = v78;
      *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v18;
    }
    long long v19 = (long long *)&v17[1];
  }
  long long v80 = (std::string *)v19;
  EspressoConverter::splitElementwiseLayer((uint64_t)&v75, &v82, (uint64_t)v79);
  uint64_t v20 = v75;
  if (v76 != v75)
  {
    unint64_t v21 = 0;
    uint64_t v22 = 71;
    do
    {
      *(void *)&long long v94 = 897988541;
      BYTE8(v94) = 0;
      *(void *)((char *)&v96 + 4) = 0;
      *(void *)&long long v93 = 0;
      *((void *)&v93 + 1) = 1065353216;
      memset(v90, 0, 24);
      memset(&v61, 0, sizeof(v61));
      if ((char *)v83 - (char *)v82 == 24)
      {
        DWORD2(v93) = 0;
        *(void *)&v90[8] = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)v90, v82);
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v61, v79, (long long *)v80, 0xAAAAAAAAAAAAAAABLL * (((char *)v80 - (char *)v79) >> 3));
      }
      else
      {
        uint64_t v23 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)v90, (long long *)(v20 + v22 - 71));
        std::string::size_type v24 = v23;
        *(void *)&v90[8] = v23;
        int v25 = (long long *)(v75 + v22 - 47);
        if ((unint64_t)v23 >= *(void *)&v90[16])
        {
          uint64_t v27 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)v90, v25);
        }
        else
        {
          if (*(char *)(v75 + v22 - 24) < 0)
          {
            std::string::__init_copy_ctor_external(v23, *(const std::string::value_type **)v25, *(void *)(v75 + v22 - 39));
          }
          else
          {
            long long v26 = *v25;
            v23->__r_.__value_.__r.__words[2] = *(void *)(v75 + v22 - 31);
            *(_OWORD *)&v23->__r_.__value_.__l.__data_ = v26;
          }
          uint64_t v27 = (uint64_t)&v24[1];
        }
        *(void *)&v90[8] = v27;
        unint64_t v28 = (long long *)(v75 + v22 - 23);
        unint64_t v29 = (_OWORD *)v61.__r_.__value_.__l.__size_;
        if (v61.__r_.__value_.__l.__size_ >= v61.__r_.__value_.__r.__words[2])
        {
          std::string::size_type v31 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v61, v28);
        }
        else
        {
          if (*(char *)(v75 + v22) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)v61.__r_.__value_.__l.__size_, *(const std::string::value_type **)v28, *(void *)(v75 + v22 - 15));
          }
          else
          {
            long long v30 = *v28;
            *(void *)(v61.__r_.__value_.__l.__size_ + 1CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = *(void *)(v75 + v22 - 7);
            *unint64_t v29 = v30;
          }
          std::string::size_type v31 = (std::string::size_type)v29 + 24;
        }
        v61.__r_.__value_.__l.__size_ = v31;
      }
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v83 - (char *)v82) >> 3) > 2)
      {
        uint64_t v37 = *(void **)this;
        std::string::basic_string[abi:ne180100]<0>(&v97, "elementwise");
        if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v38 = HIBYTE(v88.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v38 = v88.__r_.__value_.__l.__size_;
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&v68, v38 + 5);
        if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v39 = &v68;
        }
        else {
          uint64_t v39 = (std::string *)v68.__r_.__value_.__r.__words[0];
        }
        if (v38)
        {
          if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string v40 = &v88;
          }
          else {
            std::string v40 = (std::string *)v88.__r_.__value_.__r.__words[0];
          }
          memmove(v39, v40, v38);
        }
        strcpy((char *)v39 + v38, "_sum_");
        std::to_string(&v67, v21);
        if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v41 = &v67;
        }
        else {
          uint64_t v41 = (std::string *)v67.__r_.__value_.__r.__words[0];
        }
        if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v42 = HIBYTE(v67.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v42 = v67.__r_.__value_.__l.__size_;
        }
        std::string v43 = std::string::append(&v68, (const std::string::value_type *)v41, v42);
        long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
        int64_t v74 = v43->__r_.__value_.__r.__words[2];
        long long __p = v44;
        v43->__r_.__value_.__l.__size_ = 0;
        v43->__r_.__value_.__r.__words[2] = 0;
        v43->__r_.__value_.__r.__words[0] = 0;
        memset(&v66, 0, sizeof(v66));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v66, *(long long **)v90, *(long long **)&v90[8], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&v90[8] - *(void *)v90) >> 3));
        memset(&v65, 0, sizeof(v65));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v65, (long long *)v61.__r_.__value_.__l.__data_, (long long *)v61.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v61.__r_.__value_.__l.__size_ - v61.__r_.__value_.__r.__words[0]) >> 3));
        Espresso::sequential_builder::add<Espresso::elementwise_params>(&v69, v37, (uint64_t)&v97, (uint64_t)&__p, (uint64_t)&v93, (long long *)v66.__r_.__value_.__l.__data_, (long long *)v66.__r_.__value_.__l.__size_, (long long **)&v65);
        long long v89 = &v65;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v89);
        long long v89 = &v66;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v89);
        if (SHIBYTE(v74) < 0) {
          operator delete((void *)__p);
        }
        if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v67.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v68.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v97.__r_.__value_.__l.__data_);
        }
        uint64_t v36 = v70;
        if (!v70) {
          goto LABEL_71;
        }
      }
      else
      {
        uint64_t v32 = *(void **)this;
        std::string::basic_string[abi:ne180100]<0>(&v97, "elementwise");
        if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v33 = HIBYTE(v88.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v33 = v88.__r_.__value_.__l.__size_;
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&__p, v33 + 4);
        if (v74 >= 0) {
          p_p = &__p;
        }
        else {
          p_p = (long long *)__p;
        }
        if (v33)
        {
          if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int v35 = &v88;
          }
          else {
            int v35 = (std::string *)v88.__r_.__value_.__r.__words[0];
          }
          memmove(p_p, v35, v33);
        }
        strcpy((char *)p_p + v33, "_sum");
        memset(&v72, 0, sizeof(v72));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v72, *(long long **)v90, *(long long **)&v90[8], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&v90[8] - *(void *)v90) >> 3));
        memset(&v71, 0, sizeof(v71));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v71, (long long *)v61.__r_.__value_.__l.__data_, (long long *)v61.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v61.__r_.__value_.__l.__size_ - v61.__r_.__value_.__r.__words[0]) >> 3));
        Espresso::sequential_builder::add<Espresso::elementwise_params>((uint64_t *)&v68, v32, (uint64_t)&v97, (uint64_t)&__p, (uint64_t)&v93, (long long *)v72.__r_.__value_.__l.__data_, (long long *)v72.__r_.__value_.__l.__size_, (long long **)&v71);
        v67.__r_.__value_.__r.__words[0] = (std::string::size_type)&v71;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v67);
        v67.__r_.__value_.__r.__words[0] = (std::string::size_type)&v72;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v67);
        if (SHIBYTE(v74) < 0) {
          operator delete((void *)__p);
        }
        if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v97.__r_.__value_.__l.__data_);
        }
        uint64_t v36 = (std::__shared_weak_count *)v68.__r_.__value_.__l.__size_;
        if (!v68.__r_.__value_.__l.__size_) {
          goto LABEL_71;
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v36);
LABEL_71:
      v97.__r_.__value_.__r.__words[0] = (std::string::size_type)&v61;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v97);
      v61.__r_.__value_.__r.__words[0] = (std::string::size_type)v90;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v61);
      ++v21;
      uint64_t v20 = v75;
      v22 += 72;
    }
    while (v21 < 0x8E38E38E38E38E39 * ((v76 - v75) >> 3));
  }
  *(std::string::size_type *)((char *)&v61.__r_.__value_.__r.__words[1] + 4) = 0x358637BD00000000;
  HIDWORD(v61.__r_.__value_.__r.__words[2]) = 0;
  char v62 = 0;
  int v63 = 0;
  int v64 = 0;
  v61.__r_.__value_.__r.__words[0] = 1;
  *(float *)&v61.__r_.__value_.__r.__words[1] = 1.0 / (float)(0xAAAAAAAAAAAAAAABLL * (((char *)v83 - (char *)v82) >> 3));
  uint64_t v45 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(&v93, "elementwise");
  memset(&v60, 0, sizeof(v60));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v60, (long long *)v79, (long long *)v80, 0xAAAAAAAAAAAAAAABLL * (((char *)v80 - (char *)v79) >> 3));
  memset(&v59, 0, sizeof(v59));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v59, (long long *)v85, (long long *)v86, 0xAAAAAAAAAAAAAAABLL * ((v86 - v85) >> 3));
  Espresso::sequential_builder::add<Espresso::elementwise_params>((uint64_t *)&__p, v45, (uint64_t)&v93, (uint64_t)&v88, (uint64_t)&v61, (long long *)v60.__r_.__value_.__l.__data_, (long long *)v60.__r_.__value_.__l.__size_, (long long **)&v59);
  *(void *)std::string::size_type v90 = &v59;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v90);
  *(void *)std::string::size_type v90 = &v60;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v90);
  if (SBYTE7(v94) < 0) {
    operator delete((void *)v93);
  }
  if (**((unsigned char **)this + 2))
  {
    LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v85);
  }
  else
  {
    uint64_t v46 = (uint64_t **)*((void *)this + 1);
    memset(&v97, 0, sizeof(v97));
    std::string v48 = v82;
    std::string v47 = v83;
    if (v82 == v83)
    {
      uint64_t v51 = 0;
      uint64_t v52 = 0;
    }
    else
    {
      do
      {
        uint64_t v49 = (long long *)std::map<std::string,std::string>::at((uint64_t)v46, v48);
        std::string::size_type v50 = v97.__r_.__value_.__l.__size_;
        if (v97.__r_.__value_.__l.__size_ >= v97.__r_.__value_.__r.__words[2])
        {
          uint64_t v51 = std::vector<Espresso::layer_shape>::__push_back_slow_path<Espresso::layer_shape const&>((uint64_t *)&v97, v49);
        }
        else
        {
          std::vector<Espresso::layer_shape>::__construct_one_at_end[abi:ne180100]<Espresso::layer_shape const&>((uint64_t)&v97, v49);
          uint64_t v51 = v50 + 64;
        }
        v97.__r_.__value_.__l.__size_ = v51;
        std::string v48 = (long long *)((char *)v48 + 24);
      }
      while (v48 != v47);
      uint64_t v52 = v97.__r_.__value_.__r.__words[0];
    }
    EspressoConverter::computeMaxShape((uint64_t)&v93, v52, v51);
    *(_OWORD *)std::string::size_type v90 = v93;
    *(_OWORD *)&v90[16] = v94;
    std::string v53 = (char *)v96;
    uint64_t v91 = v95;
    memset(v92, 0, sizeof(v92));
    uint64_t v54 = *((void *)&v96 + 1);
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v92, (const void *)v96, *((uint64_t *)&v96 + 1), (uint64_t)(*((void *)&v96 + 1) - v96) >> 2);
    EspressoConverter::validateShape((int *)v90, *((void *)v58 + 14), (uint64_t)v85);
    if (v92[0]) {
      operator delete(v92[0]);
    }
    v68.__r_.__value_.__r.__words[0] = (std::string::size_type)v85;
    uint64_t v55 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v46, v85, (long long **)&v68);
    long long v56 = v94;
    *(_OWORD *)(v55 + 5CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = v93;
    *(_OWORD *)(v55 + 72) = v56;
    *((void *)v55 + 11) = v95;
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v55 + 96, v53, v54, (v54 - (uint64_t)v53) >> 2);
    if (v53) {
      operator delete(v53);
    }
    *(void *)&long long v93 = &v97;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v93);
  }
  if (*((void *)&__p + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&__p + 1));
  }
  *(void *)&long long v93 = &v75;
  std::vector<std::pair<std::pair<std::string,std::string>,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v93);
  if (SHIBYTE(v78) < 0) {
    operator delete((void *)v77);
  }
  *(void *)&long long v93 = &v79;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v93);
  *(void *)&long long v93 = &v82;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v93);
  *(void *)&long long v93 = &v85;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v93);
  if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v88.__r_.__value_.__l.__data_);
  }
}

void sub_19EA7DE78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54,char a55,uint64_t a56,uint64_t a57,char a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,uint64_t a63)
{
  if (a54 < 0) {
    operator delete(__p);
  }
  *(void *)(v69 - 208) = &a55;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v69 - 208));
  *(void *)(v69 - 208) = &a58;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v69 - 208));
  *(void *)(v69 - 208) = &a61;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v69 - 208));
  if (a69 < 0) {
    operator delete(a64);
  }
  _Unwind_Resume(a1);
}

void LayerTranslator::addNMS(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  uint64_t v4 = (long long *)*((void *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v34, *(const std::string::value_type **)v4, *((void *)v4 + 1));
  }
  else
  {
    long long v5 = *v4;
    v34.__r_.__value_.__r.__words[2] = *((void *)v4 + 2);
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v5;
  }
  std::string::size_type v31 = 0;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  unint64_t v28 = 0;
  unint64_t v29 = 0;
  uint64_t v30 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v31, (uint64_t *)&v28, *((void *)this + 1));
  *(_DWORD *)unint64_t v21 = 1;
  *(void *)&v21[4] = 1056964608;
  char v22 = 0;
  uint64_t v23 = 0x300000000;
  long long v26 = 0;
  uint64_t v27 = 0;
  int v25 = 0;
  int v24 = 0;
  if (*((_DWORD *)a2 + 35) == 1400)
  {
    std::string v7 = (uint64_t *)*((void *)a2 + 16);
    *(_DWORD *)unint64_t v21 = v7[3];
LABEL_8:
    *(_DWORD *)&v21[4] = *((_DWORD *)v7 + 4);
LABEL_9:
    *(_DWORD *)&v21[8] = *((_DWORD *)v7 + 5);
    goto LABEL_10;
  }
  unint64_t inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
  int v9 = *((_DWORD *)a2 + 35);
  *(_DWORD *)unint64_t v21 = qword_1EB4E1DE0;
  if (v9 == 1400)
  {
    std::string v7 = (uint64_t *)*((void *)a2 + 16);
    goto LABEL_8;
  }
  BOOL v11 = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
  int v12 = *((_DWORD *)a2 + 35);
  *(_DWORD *)&v21[4] = qword_1EB4E1DD8;
  if (v12 == 1400)
  {
    std::string v7 = (uint64_t *)*((void *)a2 + 16);
    goto LABEL_9;
  }
  uint64_t v13 = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v11);
  int v14 = *((_DWORD *)a2 + 35);
  *(_DWORD *)&v21[8] = HIDWORD(qword_1EB4E1DD8);
  if (v14 == 1400)
  {
    std::string v7 = (uint64_t *)*((void *)a2 + 16);
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v13);
    std::string v7 = &CoreML::Specification::_NonMaximumSuppressionLayerParams_default_instance_;
  }
LABEL_10:
  char v22 = *((unsigned char *)v7 + 32);
  long long v10 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(&__p, "non_maximum_suppression");
  memset(&v16, 0, sizeof(v16));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v16, v28, v29, 0xAAAAAAAAAAAAAAABLL * (((char *)v29 - (char *)v28) >> 3));
  memset(&v15, 0, sizeof(v15));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v15, v31, v32, 0xAAAAAAAAAAAAAAABLL * (((char *)v32 - (char *)v31) >> 3));
  memset(&v36, 0, sizeof(v36));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v36, (long long *)v16.__r_.__value_.__l.__data_, (long long *)v16.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16.__r_.__value_.__l.__size_ - v16.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v35, 0, sizeof(v35));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v35, (long long *)v15.__r_.__value_.__l.__data_, (long long *)v15.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15.__r_.__value_.__l.__size_ - v15.__r_.__value_.__r.__words[0]) >> 3));
  LODWORD(v38.__r_.__value_.__l.__data_) = (***(uint64_t (****)(void))(v10[14] + 8))(*(void *)(v10[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  uint64_t v39 = v19;
  std::string v40 = v20;
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(&v38, 0, sizeof(v38));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v38, (long long *)v36.__r_.__value_.__l.__data_, (long long *)v36.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v36.__r_.__value_.__l.__size_ - v36.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v37, 0, sizeof(v37));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v37, (long long *)v35.__r_.__value_.__l.__data_, (long long *)v35.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35.__r_.__value_.__l.__size_ - v35.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  uint64_t v41 = &v37;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v41);
  uint64_t v41 = &v38;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v41);
  if (v40) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v40);
  }
  if (*v10) {
    Espresso::sequential_builder::add_shape_from_kernel();
  }
  v38.__r_.__value_.__r.__words[0] = (std::string::size_type)&v35;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v38);
  v38.__r_.__value_.__r.__words[0] = (std::string::size_type)&v36;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v38);
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  v38.__r_.__value_.__r.__words[0] = (std::string::size_type)&v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v38);
  v38.__r_.__value_.__r.__words[0] = (std::string::size_type)&v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v38);
  if (v18 < 0) {
    operator delete(__p);
  }
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v31);
  if (v25)
  {
    long long v26 = v25;
    operator delete(v25);
  }
  *(void *)unint64_t v21 = &v28;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v21);
  *(void *)unint64_t v21 = &v31;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v21);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v34.__r_.__value_.__l.__data_);
  }
}

void sub_19EA7E4FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,std::__shared_weak_count *a22,char *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }
  *(void *)(v41 - 5CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = v41 - 168;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v41 - 56));
  *(void *)(v41 - 5CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = v41 - 144;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v41 - 56));
  *(void *)(v41 - 5CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = &a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v41 - 56));
  *(void *)(v41 - 5CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = &a12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v41 - 56));
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a27)
  {
    a28 = (uint64_t)a27;
    operator delete(a27);
  }
  a23 = &a30;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  a23 = &a33;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  if (a41 < 0) {
    operator delete(a36);
  }
  _Unwind_Resume(a1);
}

void LayerTranslator::addSqueeze(LayerTranslator *this, uint64_t **a2)
{
  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  uint64_t v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v29, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    long long v5 = *(_OWORD *)v4;
    v29.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v5;
  }
  long long v26 = 0;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  uint64_t v23 = 0;
  int v24 = 0;
  uint64_t v25 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v26, (uint64_t *)&v23, *((void *)this + 1));
  memset(v21, 0, sizeof(v21));
  int v22 = 1;
  if (*((_DWORD *)a2 + 35) == 1120)
  {
    std::string v7 = a2[16];
  }
  else
  {
    unint64_t inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
    std::string v7 = &CoreML::Specification::_SqueezeLayerParams_default_instance_;
  }
  if (*((unsigned char *)v7 + 36))
  {
    v21[136] = 1;
  }
  else
  {
    if (*((_DWORD *)a2 + 35) == 1120)
    {
      uint64_t v8 = a2[16];
    }
    else
    {
      unint64_t inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
      uint64_t v8 = &CoreML::Specification::_SqueezeLayerParams_default_instance_;
    }
    int v9 = *((_DWORD *)v8 + 4);
    if (v9 >= 32) {
      int v10 = 32;
    }
    else {
      int v10 = *((_DWORD *)v8 + 4);
    }
    *(_DWORD *)&v21[4] = v10;
    if (v9 >= 1)
    {
      uint64_t v11 = 0;
      if (v10 <= 1) {
        uint64_t v12 = 1;
      }
      else {
        uint64_t v12 = v10;
      }
      do
      {
        if (*((_DWORD *)a2 + 35) == 1120)
        {
          uint64_t v13 = a2[16];
        }
        else
        {
          unint64_t inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
          uint64_t v13 = &CoreML::Specification::_SqueezeLayerParams_default_instance_;
        }
        *(_DWORD *)&v21[4 * v11 + 8] = *(void *)(v13[3] + 8 * v11 + 8);
        ++v11;
      }
      while (v12 != v11);
    }
  }
  int v14 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "squeeze");
  memset(&v16, 0, sizeof(v16));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v16, v23, v24, 0xAAAAAAAAAAAAAAABLL * (((char *)v24 - (char *)v23) >> 3));
  memset(&v15, 0, sizeof(v15));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v15, v26, v27, 0xAAAAAAAAAAAAAAABLL * (((char *)v27 - (char *)v26) >> 3));
  Espresso::sequential_builder::add<Espresso::squeeze_params_t>(&v19, v14, (uint64_t)__p, (uint64_t)&v29, (uint64_t)v21, (long long *)v16.__r_.__value_.__l.__data_, (long long *)v16.__r_.__value_.__l.__size_, (long long **)&v15);
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  uint64_t v30 = &v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
  uint64_t v30 = &v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
  if (v18 < 0) {
    operator delete(__p[0]);
  }
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v26);
  *(void *)unint64_t v21 = &v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v21);
  *(void *)unint64_t v21 = &v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v21);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
}

void sub_19EA7E8A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  a24 = v24 - 144;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  a24 = v24 - 120;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  if (*(char *)(v24 - 73) < 0) {
    operator delete(*(void **)(v24 - 96));
  }
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::add<Espresso::squeeze_params_t>(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, long long *a6, long long *a7, long long **a8)
{
  memset(&v13, 0, sizeof(v13));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v13, a6, a7, 0xAAAAAAAAAAAAAAABLL * (((char *)a7 - (char *)a6) >> 3));
  memset(&v12, 0, sizeof(v12));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v12, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a8[1] - (char *)*a8) >> 3));
  LODWORD(v15.__r_.__value_.__l.__data_) = (***(uint64_t (****)(void))(a2[14] + 8))(*(void *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  uint64_t v11 = (std::__shared_weak_count *)a1[1];
  uint64_t v16 = *a1;
  int v17 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(&v15, 0, sizeof(v15));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v15, (long long *)v13.__r_.__value_.__l.__data_, (long long *)v13.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13.__r_.__value_.__l.__size_ - v13.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v14, 0, sizeof(v14));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v14, (long long *)v12.__r_.__value_.__l.__data_, (long long *)v12.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12.__r_.__value_.__l.__size_ - v12.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  char v18 = &v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  char v18 = &v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (*a2) {
    Espresso::sequential_builder::add_shape_from_kernel();
  }
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
}

void sub_19EA7EB14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v16 = *(std::__shared_weak_count **)(v13 + 8);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  *(void *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(void *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void LayerTranslator::addSliceStatic(LayerTranslator *this, uint64_t **a2)
{
  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  uint64_t v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v44, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    long long v5 = *(_OWORD *)v4;
    v44.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v5;
  }
  uint64_t v41 = 0;
  std::string::size_type v42 = 0;
  uint64_t v43 = 0;
  std::string v38 = 0;
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v41, (uint64_t *)&v38, *((void *)this + 1));
  v30[0] = 0;
  v30[1] = 0;
  int v31 = 0;
  long long v32 = xmmword_19EC7F16C;
  int v33 = 1;
  int v35 = 1;
  long long v34 = xmmword_19EC7F16C;
  memset(v36, 0, sizeof(v36));
  unint64_t v37 = 0xFFFFFFFF00000000;
  if (*((_DWORD *)a2 + 35) == 995)
  {
    std::string v7 = a2[16];
    int v8 = *((_DWORD *)v7 + 4);
  }
  else
  {
    unint64_t inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
    int v8 = qword_1EB4E0AD0;
    if (*((_DWORD *)a2 + 35) == 995)
    {
      std::string v7 = a2[16];
    }
    else
    {
      unint64_t inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
      std::string v7 = &CoreML::Specification::_SliceStaticLayerParams_default_instance_;
    }
  }
  if (v8 != *((_DWORD *)v7 + 16)) {
    goto LABEL_64;
  }
  if (*((_DWORD *)a2 + 35) == 995)
  {
    int v9 = a2[16];
  }
  else
  {
    unint64_t inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
    int v9 = &CoreML::Specification::_SliceStaticLayerParams_default_instance_;
  }
  if (v8 != *((_DWORD *)v9 + 28)) {
    goto LABEL_64;
  }
  if (*((_DWORD *)a2 + 35) == 995)
  {
    int v10 = a2[16];
  }
  else
  {
    unint64_t inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
    int v10 = &CoreML::Specification::_SliceStaticLayerParams_default_instance_;
  }
  if (v8 != *((_DWORD *)v10 + 10)
    || (*((_DWORD *)a2 + 35) != 995
      ? (unint64_t inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited),
         uint64_t v11 = &CoreML::Specification::_SliceStaticLayerParams_default_instance_)
      : (uint64_t v11 = a2[16]),
        v8 != *((_DWORD *)v11 + 22)
     || (*((_DWORD *)a2 + 35) != 995
       ? (unint64_t inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited),
          std::string v12 = &CoreML::Specification::_SliceStaticLayerParams_default_instance_)
       : (std::string v12 = a2[16]),
         *((_DWORD *)v12 + 34)
      && (*((_DWORD *)a2 + 35) != 995
        ? (unint64_t inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited),
           uint64_t v13 = &CoreML::Specification::_SliceStaticLayerParams_default_instance_)
        : (uint64_t v13 = a2[16]),
          v8 != *((_DWORD *)v13 + 34)))))
  {
LABEL_64:
    exceptiounint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&__p, "Mismatched specLayer.slicestatic().*_size values.");
    std::runtime_error::runtime_error(exception, &__p);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (v8 > 5)
  {
    uint64_t v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&__p, "A params.* static array would be referenced out of bounds.");
    std::runtime_error::runtime_error(v24, &__p);
    __cxa_throw(v24, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (v8 >= 1)
  {
    uint64_t v14 = 0;
    uint64_t v15 = 20;
    while (*((_DWORD *)a2 + 35) != 995)
    {
      unint64_t inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
      int v17 = *((_DWORD *)a2 + 35);
      *(_DWORD *)((char *)__p.__r_.__value_.__r.__words + v15 + 4) = *(void *)(qword_1EB4E0AD8 + 8 * v14 + 8);
      if (v17 == 995)
      {
        uint64_t v16 = a2[16];
        goto LABEL_37;
      }
      unint64_t inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
      int v18 = *((_DWORD *)a2 + 35);
      *(_DWORD *)((char *)v30 + v15) = *(void *)(qword_1EB4E0B08 + 8 * v14 + 8);
      if (v18 == 995)
      {
        uint64_t v16 = a2[16];
        goto LABEL_38;
      }
      unint64_t inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
      int v19 = *((_DWORD *)a2 + 35);
      *(_DWORD *)((char *)&v32 + v15) = *(void *)(qword_1EB4E0B38 + 8 * v14 + 8);
      if (v19 == 995)
      {
        uint64_t v16 = a2[16];
        goto LABEL_39;
      }
      unint64_t inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
      int v20 = *((_DWORD *)a2 + 35);
      *((unsigned char *)v36 + v14) = *(unsigned char *)(qword_1EB4E0AF0 + v14 + 8);
      if (v20 != 995)
      {
        unint64_t inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
        int v21 = *((_DWORD *)a2 + 35);
        *((unsigned char *)v36 + v14 + 5) = *(unsigned char *)(qword_1EB4E0B20 + v14 + 8);
        if (v21 == 995)
        {
          uint64_t v16 = a2[16];
        }
        else
        {
          unint64_t inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
          uint64_t v16 = &CoreML::Specification::_SliceStaticLayerParams_default_instance_;
        }
        goto LABEL_41;
      }
      uint64_t v16 = a2[16];
LABEL_40:
      *((unsigned char *)v36 + v14 + 5) = *(unsigned char *)(v16[12] + v14 + 8);
LABEL_41:
      LODWORD(v1CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = *((_DWORD *)v16 + 34);
      if (v16)
      {
        if (*((_DWORD *)a2 + 35) == 995)
        {
          uint64_t v16 = a2[16];
        }
        else
        {
          unint64_t inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
          uint64_t v16 = &CoreML::Specification::_SliceStaticLayerParams_default_instance_;
        }
        LOBYTE(v1CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = *(unsigned char *)(v16[18] + v14 + 8);
      }
      *((unsigned char *)v36 + v14++ + 10) = (_BYTE)v16;
      v15 += 4;
      if (v8 == v14) {
        goto LABEL_57;
      }
    }
    uint64_t v16 = a2[16];
    *(_DWORD *)((char *)__p.__r_.__value_.__r.__words + v15 + 4) = *(void *)(v16[3] + 8 * v14 + 8);
LABEL_37:
    *(_DWORD *)((char *)v30 + v15) = *(void *)(v16[9] + 8 * v14 + 8);
LABEL_38:
    *(_DWORD *)((char *)&v32 + v15) = *(void *)(v16[15] + 8 * v14 + 8);
LABEL_39:
    *((unsigned char *)v36 + v14) = *(unsigned char *)(v16[6] + v14 + 8);
    goto LABEL_40;
  }
LABEL_57:
  int v22 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(&__p, "general_slice");
  memset(&v26, 0, sizeof(v26));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v26, v38, v39, 0xAAAAAAAAAAAAAAABLL * (((char *)v39 - (char *)v38) >> 3));
  memset(&v25, 0, sizeof(v25));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v25, v41, v42, 0xAAAAAAAAAAAAAAABLL * (((char *)v42 - (char *)v41) >> 3));
  Espresso::sequential_builder::add<Espresso::general_slice_params_t>(&v27, v22, (uint64_t)&__p, (uint64_t)&v44, (uint64_t)v30, (long long *)v26.__r_.__value_.__l.__data_, (long long *)v26.__r_.__value_.__l.__size_, (long long **)&v25);
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  v45[0] = (void **)&v25;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v45);
  v45[0] = (void **)&v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v45);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v41);
  v30[0] = (void **)&v38;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v30);
  v30[0] = (void **)&v41;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v30);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v44.__r_.__value_.__l.__data_);
  }
}

void sub_19EA7F128(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23)
{
  if (a22 < 0)
  {
    operator delete(__p);
    if ((v24 & 1) == 0)
    {
LABEL_6:
      a23 = v25 - 176;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
      a23 = v25 - 152;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
      if (*(char *)(v25 - 105) < 0) {
        operator delete(*(void **)(v25 - 128));
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v24)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v23);
  goto LABEL_6;
}

void Espresso::sequential_builder::add<Espresso::general_slice_params_t>(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, long long *a6, long long *a7, long long **a8)
{
  memset(&v13, 0, sizeof(v13));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v13, a6, a7, 0xAAAAAAAAAAAAAAABLL * (((char *)a7 - (char *)a6) >> 3));
  memset(&v12, 0, sizeof(v12));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v12, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a8[1] - (char *)*a8) >> 3));
  LODWORD(v15.__r_.__value_.__l.__data_) = (***(uint64_t (****)(void))(a2[14] + 8))(*(void *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  uint64_t v11 = (std::__shared_weak_count *)a1[1];
  uint64_t v16 = *a1;
  int v17 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(&v15, 0, sizeof(v15));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v15, (long long *)v13.__r_.__value_.__l.__data_, (long long *)v13.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13.__r_.__value_.__l.__size_ - v13.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v14, 0, sizeof(v14));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v14, (long long *)v12.__r_.__value_.__l.__data_, (long long *)v12.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12.__r_.__value_.__l.__size_ - v12.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  int v18 = &v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  int v18 = &v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (*a2) {
    Espresso::sequential_builder::add_shape_from_kernel();
  }
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
}

void sub_19EA7F3D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v16 = *(std::__shared_weak_count **)(v13 + 8);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  *(void *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(void *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void LayerTranslator::addSliceDynamic(LayerTranslator *this, uint64_t **a2)
{
  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  uint64_t v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v58, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    long long v5 = *(_OWORD *)v4;
    v58.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v5;
  }
  uint64_t v55 = 0;
  long long v56 = 0;
  uint64_t v57 = 0;
  uint64_t v52 = 0;
  std::string v53 = 0;
  uint64_t v54 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v55, (uint64_t *)&v52, *((void *)this + 1));
  v44[0] = 0;
  v44[1] = 0;
  int v45 = 0;
  long long v46 = xmmword_19EC7F16C;
  int v47 = 1;
  int v49 = 1;
  long long v48 = xmmword_19EC7F16C;
  memset(v50, 0, sizeof(v50));
  unint64_t v51 = 0xFFFFFFFF00000000;
  int64_t v7 = v53 - v52;
  if (0xAAAAAAAAAAAAAAABLL * ((v53 - v52) >> 3) <= 6)
  {
    if (*((_DWORD *)a2 + 35) == 1000)
    {
      int v8 = a2[16];
    }
    else
    {
      unint64_t inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
      int64_t v7 = v53 - v52;
      int v8 = &CoreML::Specification::_SliceDynamicLayerParams_default_instance_;
    }
    int v9 = *((_DWORD *)v8 + 16);
    if (v9 >= 5) {
      int v10 = 5;
    }
    else {
      int v10 = *((_DWORD *)v8 + 16);
    }
    switch(0xAAAAAAAAAAAAAAABLL * (v7 >> 3))
    {
      case 2uLL:
        if (v9 < 1) {
          goto LABEL_94;
        }
        uint64_t v11 = 0;
        if (v10 <= 1) {
          uint64_t v12 = 1;
        }
        else {
          uint64_t v12 = v10;
        }
        uint64_t v13 = 20;
        while (*((_DWORD *)a2 + 35) != 1000)
        {
          unint64_t inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
          int v15 = *((_DWORD *)a2 + 35);
          *(_DWORD *)((char *)v44 + vCoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 13) = *(void *)(qword_1EB4E0F00 + 8 * v11 + 8);
          if (v15 == 1000)
          {
            uint64_t v14 = a2[16];
            goto LABEL_21;
          }
          unint64_t inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
          int v16 = *((_DWORD *)a2 + 35);
          *(_DWORD *)((char *)&v46 + vCoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 13) = *(void *)(qword_1EB4E0F30 + 8 * v11 + 8);
          if (v16 == 1000)
          {
            uint64_t v14 = a2[16];
            goto LABEL_22;
          }
          unint64_t inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
          int v17 = *((_DWORD *)a2 + 35);
          v50[v11] = *(unsigned char *)(qword_1EB4E0EE8 + v11 + 8);
          if (v17 != 1000)
          {
            unint64_t inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
            int v18 = *((_DWORD *)a2 + 35);
            v50[v11 + 5] = *(unsigned char *)(qword_1EB4E0F18 + v11 + 8);
            if (v18 == 1000)
            {
              uint64_t v14 = a2[16];
            }
            else
            {
              unint64_t inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
              uint64_t v14 = &CoreML::Specification::_SliceDynamicLayerParams_default_instance_;
            }
            goto LABEL_24;
          }
          uint64_t v14 = a2[16];
LABEL_23:
          v50[v11 + 5] = *(unsigned char *)(v14[9] + v11 + 8);
LABEL_24:
          LODWORD(v14) = *((_DWORD *)v14 + 28);
          if (v14)
          {
            if (*((_DWORD *)a2 + 35) == 1000)
            {
              uint64_t v14 = a2[16];
            }
            else
            {
              unint64_t inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
              uint64_t v14 = &CoreML::Specification::_SliceDynamicLayerParams_default_instance_;
            }
            LOBYTE(v14) = *(unsigned char *)(v14[15] + v11 + 8);
          }
          v50[v11++ + 10] = (_BYTE)v14;
          v13 += 4;
          if (v12 == v11) {
            goto LABEL_94;
          }
        }
        uint64_t v14 = a2[16];
        *(_DWORD *)((char *)v44 + vCoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 13) = *(void *)(v14[6] + 8 * v11 + 8);
LABEL_21:
        *(_DWORD *)((char *)&v46 + vCoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 13) = *(void *)(v14[12] + 8 * v11 + 8);
LABEL_22:
        v50[v11] = *(unsigned char *)(v14[3] + v11 + 8);
        goto LABEL_23;
      case 3uLL:
        if (v9 < 1) {
          goto LABEL_94;
        }
        uint64_t v19 = 0;
        if (v10 <= 1) {
          uint64_t v20 = 1;
        }
        else {
          uint64_t v20 = v10;
        }
        while (*((_DWORD *)a2 + 35) != 1000)
        {
          unint64_t inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
          int v22 = *((_DWORD *)a2 + 35);
          *((_DWORD *)&v48 + v19) = *(void *)(qword_1EB4E0F30 + 8 * v19 + 8);
          if (v22 == 1000)
          {
            int v21 = a2[16];
            goto LABEL_46;
          }
          unint64_t inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
          int v23 = *((_DWORD *)a2 + 35);
          v50[v19] = *(unsigned char *)(qword_1EB4E0EE8 + v19 + 8);
          if (v23 != 1000)
          {
            unint64_t inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
            int v24 = *((_DWORD *)a2 + 35);
            v50[v19 + 5] = *(unsigned char *)(qword_1EB4E0F18 + v19 + 8);
            if (v24 == 1000)
            {
              int v21 = a2[16];
            }
            else
            {
              unint64_t inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
              int v21 = &CoreML::Specification::_SliceDynamicLayerParams_default_instance_;
            }
            goto LABEL_48;
          }
          int v21 = a2[16];
LABEL_47:
          v50[v19 + 5] = *(unsigned char *)(v21[9] + v19 + 8);
LABEL_48:
          LODWORD(v21) = *((_DWORD *)v21 + 28);
          if (v21)
          {
            if (*((_DWORD *)a2 + 35) == 1000)
            {
              int v21 = a2[16];
            }
            else
            {
              unint64_t inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
              int v21 = &CoreML::Specification::_SliceDynamicLayerParams_default_instance_;
            }
            LOBYTE(v21) = *(unsigned char *)(v21[15] + v19 + 8);
          }
          v50[v19++ + 10] = (_BYTE)v21;
          if (v20 == v19) {
            goto LABEL_94;
          }
        }
        int v21 = a2[16];
        *((_DWORD *)&v48 + v19) = *(void *)(v21[12] + 8 * v19 + 8);
LABEL_46:
        v50[v19] = *(unsigned char *)(v21[3] + v19 + 8);
        goto LABEL_47;
      case 4uLL:
        if (v9 < 1) {
          goto LABEL_94;
        }
        uint64_t v25 = 0;
        if (v10 <= 1) {
          uint64_t v26 = 1;
        }
        else {
          uint64_t v26 = v10;
        }
        break;
      case 5uLL:
        if (v9 >= 1)
        {
          uint64_t v30 = 0;
          if (v10 <= 1) {
            uint64_t v31 = 1;
          }
          else {
            uint64_t v31 = v10;
          }
          do
          {
            if (*((_DWORD *)a2 + 35) == 1000)
            {
              long long v32 = a2[16];
              v50[v30 + 5] = *(unsigned char *)(v32[9] + v30 + 8);
            }
            else
            {
              unint64_t inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
              int v33 = *((_DWORD *)a2 + 35);
              v50[v30 + 5] = *(unsigned char *)(qword_1EB4E0F18 + v30 + 8);
              if (v33 == 1000)
              {
                long long v32 = a2[16];
              }
              else
              {
                unint64_t inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
                long long v32 = &CoreML::Specification::_SliceDynamicLayerParams_default_instance_;
              }
            }
            LODWORD(v32) = *((_DWORD *)v32 + 28);
            if (v32)
            {
              if (*((_DWORD *)a2 + 35) == 1000)
              {
                long long v32 = a2[16];
              }
              else
              {
                unint64_t inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
                long long v32 = &CoreML::Specification::_SliceDynamicLayerParams_default_instance_;
              }
              LOBYTE(v32) = *(unsigned char *)(v32[15] + v30 + 8);
            }
            v50[v30++ + 10] = (_BYTE)v32;
          }
          while (v31 != v30);
        }
        goto LABEL_94;
      case 6uLL:
        for (uint64_t i = 0; ; ++i)
        {
          if (*((_DWORD *)a2 + 35) == 1000)
          {
            std::string v36 = a2[16];
          }
          else
          {
            unint64_t inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
            std::string v36 = &CoreML::Specification::_SliceDynamicLayerParams_default_instance_;
          }
          if (i >= *((int *)v36 + 28)) {
            break;
          }
          if (*((_DWORD *)a2 + 35) == 1000)
          {
            unint64_t v37 = a2[16];
          }
          else
          {
            unint64_t inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
            unint64_t v37 = &CoreML::Specification::_SliceDynamicLayerParams_default_instance_;
          }
          v50[i + 10] = *(unsigned char *)(v37[15] + i + 8);
        }
        goto LABEL_94;
      default:
        goto LABEL_94;
    }
    do
    {
      if (*((_DWORD *)a2 + 35) == 1000)
      {
        uint64_t v27 = a2[16];
        v50[v25] = *(unsigned char *)(v27[3] + v25 + 8);
      }
      else
      {
        unint64_t inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
        int v28 = *((_DWORD *)a2 + 35);
        v50[v25] = *(unsigned char *)(qword_1EB4E0EE8 + v25 + 8);
        if (v28 != 1000)
        {
          unint64_t inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
          int v29 = *((_DWORD *)a2 + 35);
          v50[v25 + 5] = *(unsigned char *)(qword_1EB4E0F18 + v25 + 8);
          if (v29 == 1000)
          {
            uint64_t v27 = a2[16];
          }
          else
          {
            unint64_t inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
            uint64_t v27 = &CoreML::Specification::_SliceDynamicLayerParams_default_instance_;
          }
          goto LABEL_69;
        }
        uint64_t v27 = a2[16];
      }
      v50[v25 + 5] = *(unsigned char *)(v27[9] + v25 + 8);
LABEL_69:
      LODWORD(v27) = *((_DWORD *)v27 + 28);
      if (v27)
      {
        if (*((_DWORD *)a2 + 35) == 1000)
        {
          uint64_t v27 = a2[16];
        }
        else
        {
          unint64_t inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
          uint64_t v27 = &CoreML::Specification::_SliceDynamicLayerParams_default_instance_;
        }
        LOBYTE(v27) = *(unsigned char *)(v27[15] + v25 + 8);
      }
      v50[v25++ + 10] = (_BYTE)v27;
    }
    while (v26 != v25);
  }
LABEL_94:
  long long v34 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "general_slice");
  memset(&v39, 0, sizeof(v39));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v39, (long long *)v52, (long long *)v53, 0xAAAAAAAAAAAAAAABLL * ((v53 - v52) >> 3));
  memset(&v38, 0, sizeof(v38));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v38, v55, v56, 0xAAAAAAAAAAAAAAABLL * (((char *)v56 - (char *)v55) >> 3));
  Espresso::sequential_builder::add<Espresso::general_slice_params_t>(&v42, v34, (uint64_t)__p, (uint64_t)&v58, (uint64_t)v44, (long long *)v39.__r_.__value_.__l.__data_, (long long *)v39.__r_.__value_.__l.__size_, (long long **)&v38);
  if (v43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v43);
  }
  v59[0] = (void **)&v38;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v59);
  v59[0] = (void **)&v39;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v59);
  if (v41 < 0) {
    operator delete(__p[0]);
  }
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v55);
  v44[0] = (void **)&v52;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v44);
  v44[0] = (void **)&v55;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v44);
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v58.__r_.__value_.__l.__data_);
  }
}

void sub_19EA7FBEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  a23 = v23 - 176;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  a23 = v23 - 152;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  if (*(char *)(v23 - 105) < 0) {
    operator delete(*(void **)(v23 - 128));
  }
  _Unwind_Resume(a1);
}

BOOL LayerTranslator::addBatchnorm(LayerTranslator *this, uint64_t **a2)
{
  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  uint64_t v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v143, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    long long v5 = *(_OWORD *)v4;
    v143.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v143.__r_.__value_.__l.__data_ = v5;
  }
  v140 = 0;
  std::string::size_type v141 = 0;
  uint64_t v142 = 0;
  uint64_t v137 = 0;
  uint64_t v138 = 0;
  uint64_t v139 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v140, (uint64_t *)&v137, *((void *)this + 1));
  if (*((_DWORD *)a2 + 35) == 160)
  {
    int64_t v7 = a2[16];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    int64_t v7 = &CoreML::Specification::_BatchnormLayerParams_default_instance_;
  }
  long long v129 = &unk_1EF0D3FA8;
  unint64_t v130 = 0;
  int v136 = 0;
  uint64_t v8 = v7[1];
  if (v8) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&v130, v8 & 0xFFFFFFFFFFFFFFFELL);
  }
  if (v7 == &CoreML::Specification::_BatchnormLayerParams_default_instance_)
  {
    std::string::size_type v131 = 0;
    std::string::size_type v132 = 0;
    long long v133 = 0;
  }
  else
  {
    if (v7[2]) {
      operator new();
    }
    std::string::size_type v131 = 0;
    if (v7[3]) {
      operator new();
    }
    std::string::size_type v132 = 0;
    if (v7[4]) {
      operator new();
    }
    long long v133 = 0;
    if (v7[5]) {
      operator new();
    }
  }
  uint64_t v134 = 0;
  long long v135 = *((_OWORD *)v7 + 3);
  *(void *)&v120[4] = 0;
  int v122 = 1063675494;
  __int16 v123 = 0;
  long long v124 = 0u;
  long long v125 = 0u;
  int v126 = 1065353216;
  uint64_t v127 = 0;
  uint64_t v128 = 0x200000000;
  *(_DWORD *)uint64_t v120 = v135;
  if (BYTE8(v135))
  {
    *(_DWORD *)&v120[4] = 1;
    if (BYTE9(v135)) {
      *(_DWORD *)&v120[8] = 1;
    }
  }
  if (fabsf(*((float *)&v135 + 3)) >= 0.000001) {
    float v9 = *((float *)&v135 + 3);
  }
  else {
    float v9 = 0.00001;
  }
  float v121 = v9;
  int v10 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "batchnorm");
  memset(&v115, 0, sizeof(v115));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v115, v137, v138, 0xAAAAAAAAAAAAAAABLL * (((char *)v138 - (char *)v137) >> 3));
  memset(&v114, 0, sizeof(v114));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v114, v140, v141, 0xAAAAAAAAAAAAAAABLL * (((char *)v141 - (char *)v140) >> 3));
  *(void *)&long long v145 = 0;
  long long v144 = 0uLL;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&v144, (long long *)v115.__r_.__value_.__l.__data_, (long long *)v115.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v115.__r_.__value_.__l.__size_ - v115.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v160, 0, sizeof(v160));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v160, (long long *)v114.__r_.__value_.__l.__data_, (long long *)v114.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v114.__r_.__value_.__l.__size_ - v114.__r_.__value_.__r.__words[0]) >> 3));
  LODWORD(v154) = (***(uint64_t (****)(void))(v10[14] + 8))(*(void *)(v10[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  uint64_t v161 = v118;
  std::string::size_type v162 = v119;
  if (v119) {
    atomic_fetch_add_explicit(&v119->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v154 = 0uLL;
  *(void *)&long long v155 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&v154, (long long *)v144, *((long long **)&v144 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v144 + 1) - v144) >> 3));
  long long v148 = 0uLL;
  *(void *)&long long v149 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&v148, (long long *)v160.__r_.__value_.__l.__data_, (long long *)v160.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v160.__r_.__value_.__l.__size_ - v160.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  v163[0] = (void **)&v148;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v163);
  v163[0] = (void **)&v154;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v163);
  if (v162) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v162);
  }
  if (*v10) {
    Espresso::sequential_builder::add_shape_from_kernel();
  }
  *(void *)&long long v154 = &v160;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v154);
  *(void *)&long long v154 = &v144;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v154);
  *(void *)&long long v154 = &v114;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v154);
  *(void *)&long long v154 = &v115;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v154);
  if (v117 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v12 = v118;
  uint64_t v11 = v119;
  if (v119) {
    atomic_fetch_add_explicit(&v119->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v110 = v11;
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v160, 16 * v135, 1, 1, 1);
  if (v131) {
    uint64_t v13 = v131;
  }
  else {
    uint64_t v13 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  uint64_t v14 = v13[5];
  if (*(char *)(v14 + 23) < 0) {
    uint64_t v15 = *(void *)(v14 + 8);
  }
  else {
    uint64_t v15 = *(unsigned __int8 *)(v14 + 23);
  }
  uint64_t v16 = v13[6];
  uint64_t v17 = *(unsigned __int8 *)(v16 + 23);
  if (*(char *)(v16 + 23) < 0) {
    uint64_t v18 = *(void *)(v16 + 8);
  }
  else {
    uint64_t v18 = *(unsigned __int8 *)(v16 + 23);
  }
  int v19 = *((_DWORD *)v13 + 4);
  uint64_t v20 = v13[7];
  uint64_t v21 = *(unsigned __int8 *)(v20 + 23);
  if (*(char *)(v20 + 23) < 0) {
    uint64_t v22 = *(void *)(v20 + 8);
  }
  else {
    uint64_t v22 = *(unsigned __int8 *)(v20 + 23);
  }
  if (v19 <= 0) {
    int v23 = 1;
  }
  else {
    int v23 = 2;
  }
  if (v15) {
    unsigned int v24 = v23;
  }
  else {
    unsigned int v24 = v19 > 0;
  }
  if (v18) {
    ++v24;
  }
  if (v22) {
    ++v24;
  }
  if (v24 > 1)
  {
    int v25 = 4;
LABEL_85:
    int v111 = v25;
    goto LABEL_86;
  }
  if (v24) {
    int v26 = 0;
  }
  else {
    int v26 = 5;
  }
  int v111 = v26;
  if (v19 <= 0 && v24)
  {
    if ((*(unsigned char *)(v14 + 23) & 0x80) != 0)
    {
      if (*(void *)(v14 + 8)) {
        goto LABEL_66;
      }
    }
    else if (*(unsigned char *)(v14 + 23))
    {
LABEL_66:
      int v25 = 1;
      goto LABEL_85;
    }
    if ((v17 & 0x80) != 0) {
      uint64_t v17 = *(void *)(v16 + 8);
    }
    uint64_t v27 = v13[8];
    if (v13 != &CoreML::Specification::_WeightParams_default_instance_ && v17 && v27)
    {
      int v25 = 2;
    }
    else
    {
      if ((v21 & 0x80) != 0) {
        uint64_t v21 = *(void *)(v20 + 8);
      }
      if (v27) {
        BOOL v28 = v21 == 0;
      }
      else {
        BOOL v28 = 1;
      }
      if (v28 || v13 == &CoreML::Specification::_WeightParams_default_instance_) {
        int v25 = 5;
      }
      else {
        int v25 = 3;
      }
    }
    goto LABEL_85;
  }
LABEL_86:
  uint64_t v30 = v132;
  if (!v132) {
    uint64_t v30 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  uint64_t v31 = v30[5];
  if (*(char *)(v31 + 23) < 0) {
    uint64_t v32 = *(void *)(v31 + 8);
  }
  else {
    uint64_t v32 = *(unsigned __int8 *)(v31 + 23);
  }
  uint64_t v33 = v30[6];
  uint64_t v34 = *(unsigned __int8 *)(v33 + 23);
  if (*(char *)(v33 + 23) < 0) {
    uint64_t v35 = *(void *)(v33 + 8);
  }
  else {
    uint64_t v35 = *(unsigned __int8 *)(v33 + 23);
  }
  int v36 = *((_DWORD *)v30 + 4);
  uint64_t v37 = v30[7];
  uint64_t v38 = *(unsigned __int8 *)(v37 + 23);
  if (*(char *)(v37 + 23) < 0) {
    uint64_t v39 = *(void *)(v37 + 8);
  }
  else {
    uint64_t v39 = *(unsigned __int8 *)(v37 + 23);
  }
  std::string::size_type v109 = (const CoreML::Specification::NeuralNetworkLayer *)a2;
  if (v36 <= 0) {
    int v40 = 1;
  }
  else {
    int v40 = 2;
  }
  if (v32) {
    unsigned int v41 = v40;
  }
  else {
    unsigned int v41 = v36 > 0;
  }
  if (v35) {
    ++v41;
  }
  if (v39) {
    ++v41;
  }
  if (v41 > 1)
  {
    int v42 = 4;
    goto LABEL_135;
  }
  if (v41) {
    int v42 = 0;
  }
  else {
    int v42 = 5;
  }
  if (v36 <= 0 && v41)
  {
    if ((*(unsigned char *)(v31 + 23) & 0x80) != 0)
    {
      if (*(void *)(v31 + 8)) {
        goto LABEL_116;
      }
    }
    else if (*(unsigned char *)(v31 + 23))
    {
LABEL_116:
      int v42 = 1;
      goto LABEL_135;
    }
    if ((v34 & 0x80) != 0) {
      uint64_t v34 = *(void *)(v33 + 8);
    }
    uint64_t v43 = v30[8];
    if (v30 != &CoreML::Specification::_WeightParams_default_instance_ && v34 && v43)
    {
      int v42 = 2;
    }
    else
    {
      if ((v38 & 0x80) != 0) {
        uint64_t v38 = *(void *)(v37 + 8);
      }
      if (v43) {
        BOOL v44 = v38 == 0;
      }
      else {
        BOOL v44 = 1;
      }
      if (v44 || v30 == &CoreML::Specification::_WeightParams_default_instance_) {
        int v42 = 5;
      }
      else {
        int v42 = 3;
      }
    }
  }
LABEL_135:
  long long v46 = v133;
  if (!v133) {
    long long v46 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  uint64_t v47 = v46[5];
  if (*(char *)(v47 + 23) < 0) {
    uint64_t v48 = *(void *)(v47 + 8);
  }
  else {
    uint64_t v48 = *(unsigned __int8 *)(v47 + 23);
  }
  uint64_t v49 = v46[6];
  uint64_t v50 = *(unsigned __int8 *)(v49 + 23);
  if (*(char *)(v49 + 23) < 0) {
    uint64_t v51 = *(void *)(v49 + 8);
  }
  else {
    uint64_t v51 = *(unsigned __int8 *)(v49 + 23);
  }
  int v52 = *((_DWORD *)v46 + 4);
  uint64_t v53 = v46[7];
  uint64_t v54 = *(unsigned __int8 *)(v53 + 23);
  if (*(char *)(v53 + 23) < 0) {
    uint64_t v55 = *(void *)(v53 + 8);
  }
  else {
    uint64_t v55 = *(unsigned __int8 *)(v53 + 23);
  }
  if (v52 <= 0) {
    int v56 = 1;
  }
  else {
    int v56 = 2;
  }
  if (v48) {
    unsigned int v57 = v56;
  }
  else {
    unsigned int v57 = v52 > 0;
  }
  if (v51) {
    ++v57;
  }
  if (v55) {
    ++v57;
  }
  if (v57 > 1)
  {
    int v58 = 4;
    goto LABEL_184;
  }
  if (v57) {
    int v58 = 0;
  }
  else {
    int v58 = 5;
  }
  if (v52 <= 0 && v57)
  {
    if ((*(unsigned char *)(v47 + 23) & 0x80) != 0)
    {
      if (*(void *)(v47 + 8)) {
        goto LABEL_165;
      }
    }
    else if (*(unsigned char *)(v47 + 23))
    {
LABEL_165:
      int v58 = 1;
      goto LABEL_184;
    }
    if ((v50 & 0x80) != 0) {
      uint64_t v50 = *(void *)(v49 + 8);
    }
    uint64_t v59 = v46[8];
    if (v46 != &CoreML::Specification::_WeightParams_default_instance_ && v50 && v59)
    {
      int v58 = 2;
    }
    else
    {
      if ((v54 & 0x80) != 0) {
        uint64_t v54 = *(void *)(v53 + 8);
      }
      if (v59) {
        BOOL v60 = v54 == 0;
      }
      else {
        BOOL v60 = 1;
      }
      if (v60 || v46 == &CoreML::Specification::_WeightParams_default_instance_) {
        int v58 = 5;
      }
      else {
        int v58 = 3;
      }
    }
  }
LABEL_184:
  char v62 = v134;
  if (!v134) {
    char v62 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  uint64_t v63 = v62[5];
  if (*(char *)(v63 + 23) < 0) {
    uint64_t v64 = *(void *)(v63 + 8);
  }
  else {
    uint64_t v64 = *(unsigned __int8 *)(v63 + 23);
  }
  uint64_t v65 = v62[6];
  uint64_t v66 = *(unsigned __int8 *)(v65 + 23);
  if (*(char *)(v65 + 23) < 0) {
    uint64_t v67 = *(void *)(v65 + 8);
  }
  else {
    uint64_t v67 = *(unsigned __int8 *)(v65 + 23);
  }
  int v68 = *((_DWORD *)v62 + 4);
  uint64_t v69 = v62[7];
  uint64_t v70 = *(unsigned __int8 *)(v69 + 23);
  if (*(char *)(v69 + 23) < 0) {
    uint64_t v71 = *(void *)(v69 + 8);
  }
  else {
    uint64_t v71 = *(unsigned __int8 *)(v69 + 23);
  }
  if (v68 <= 0) {
    int v72 = 1;
  }
  else {
    int v72 = 2;
  }
  if (v64) {
    unsigned int v73 = v72;
  }
  else {
    unsigned int v73 = v68 > 0;
  }
  if (v67) {
    ++v73;
  }
  if (v71) {
    ++v73;
  }
  if (v73 > 1)
  {
    int v74 = 4;
    goto LABEL_233;
  }
  if (v73) {
    int v74 = 0;
  }
  else {
    int v74 = 5;
  }
  if (v68 <= 0 && v73)
  {
    if ((*(unsigned char *)(v63 + 23) & 0x80) != 0)
    {
      if (*(void *)(v63 + 8)) {
        goto LABEL_214;
      }
    }
    else if (*(unsigned char *)(v63 + 23))
    {
LABEL_214:
      int v74 = 1;
      goto LABEL_233;
    }
    if ((v66 & 0x80) != 0) {
      uint64_t v66 = *(void *)(v65 + 8);
    }
    uint64_t v75 = v62[8];
    if (v62 != &CoreML::Specification::_WeightParams_default_instance_ && v66 && v75)
    {
      int v74 = 2;
    }
    else
    {
      if ((v70 & 0x80) != 0) {
        uint64_t v70 = *(void *)(v69 + 8);
      }
      if (v75) {
        BOOL v76 = v70 == 0;
      }
      else {
        BOOL v76 = 1;
      }
      if (v76 || v62 == &CoreML::Specification::_WeightParams_default_instance_) {
        int v74 = 5;
      }
      else {
        int v74 = 3;
      }
    }
  }
LABEL_233:
  std::string::size_type v78 = this;
  std::string::size_type v79 = v160.__r_.__value_.__r.__words[0];
  uint64_t v80 = *(void *)(v160.__r_.__value_.__r.__words[0] + 16);
  unint64_t v81 = v135;
  std::string::basic_string[abi:ne180100]<0>(&v154, "gamma");
  batchNormAssignWeightToFloatBlob(v80, (uint64_t)v13, v111, v81, (uint64_t)&v143, (uint64_t)&v154, v9);
  if (SBYTE7(v155) < 0) {
    operator delete((void *)v154);
  }
  long long v82 = v132;
  unint64_t v83 = v135;
  std::string::basic_string[abi:ne180100]<0>(&v154, "beta");
  if (v82) {
    uint64_t v84 = v82;
  }
  else {
    uint64_t v84 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  batchNormAssignWeightToFloatBlob(v80 + 4, (uint64_t)v84, v42, v83, (uint64_t)&v143, (uint64_t)&v154, v9);
  if (SBYTE7(v155) < 0) {
    operator delete((void *)v154);
  }
  if (BYTE8(v135))
  {
    unint64_t v85 = v135;
    if ((void)v135)
    {
      unsigned int v86 = 0;
      uint64_t v87 = *(void *)(v79 + 16) + 8;
      unsigned int v88 = 1;
      do
      {
        *(void *)(v87 + 4 * v8CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = 0x3F80000000000000;
        BOOL v89 = v85 > v88++;
        v86 += 4;
      }
      while (v89);
    }
  }
  else
  {
    std::string::size_type v90 = v133;
    unint64_t v91 = v135;
    std::string::basic_string[abi:ne180100]<0>(&v154, "mean");
    if (v90) {
      uint64_t v92 = v90;
    }
    else {
      uint64_t v92 = &CoreML::Specification::_WeightParams_default_instance_;
    }
    batchNormAssignWeightToFloatBlob(v80 + 8, (uint64_t)v92, v58, v91, (uint64_t)&v143, (uint64_t)&v154, v9);
    if (SBYTE7(v155) < 0) {
      operator delete((void *)v154);
    }
    long long v94 = v134;
    unint64_t v93 = v135;
    std::string::basic_string[abi:ne180100]<0>(&v154, "variance");
    if (v94) {
      uint64_t v95 = v94;
    }
    else {
      uint64_t v95 = &CoreML::Specification::_WeightParams_default_instance_;
    }
    batchNormAssignWeightToFloatBlob(v80 + 12, (uint64_t)v95, v74, v93, (uint64_t)&v143, (uint64_t)&v154, v9);
    if (SBYTE7(v155) < 0) {
      operator delete((void *)v154);
    }
  }
  std::string::size_type size = (std::__shared_weak_count *)v160.__r_.__value_.__l.__size_;
  std::string::size_type v112 = v79;
  long long v113 = (std::__shared_weak_count *)v160.__r_.__value_.__l.__size_;
  if (v160.__r_.__value_.__l.__size_) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v160.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, std::string::size_type *))(*(void *)v12 + 392))(v12, &v112);
  if (v113) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v113);
  }
  if (**((unsigned char **)v78 + 2))
  {
    LayerTranslator::defaultUnknownNdShape((char *)v78, (uint64_t *)&v140);
  }
  else
  {
    std::string v97 = (uint64_t **)*((void *)v78 + 1);
    uint64_t v98 = std::map<std::string,std::string>::at((uint64_t)v97, v137);
    long long v154 = *(_OWORD *)v98;
    long long v155 = *(_OWORD *)(v98 + 16);
    uint64_t v156 = *(void *)(v98 + 32);
    std::string::size_type v157 = 0;
    uint64_t v158 = 0;
    uint64_t v159 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v157, *(const void **)(v98 + 40), *(void *)(v98 + 48), (uint64_t)(*(void *)(v98 + 48) - *(void *)(v98 + 40)) >> 2);
    long long v148 = v154;
    long long v149 = v155;
    long long v99 = v157;
    uint64_t v150 = v156;
    uint64_t v151 = 0;
    uint64_t v152 = 0;
    uint64_t v153 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v151, v157, v158, (v158 - (uint64_t)v157) >> 2);
    long long v144 = v148;
    long long v145 = v149;
    int v100 = v151;
    uint64_t v146 = v150;
    memset(v147, 0, sizeof(v147));
    uint64_t v101 = v152;
    unint64_t v102 = (v152 - (uint64_t)v151) >> 2;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v147, v151, v152, v102);
    EspressoConverter::validateShape((int *)&v144, *((void *)v109 + 14), (uint64_t)v140);
    if (v147[0]) {
      operator delete(v147[0]);
    }
    __p[0] = v140;
    std::string::size_type v103 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v97, v140, (long long **)__p);
    long long v104 = v149;
    *(_OWORD *)(v103 + 5CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = v148;
    *(_OWORD *)(v103 + 72) = v104;
    *((void *)v103 + 11) = v150;
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v103 + 96, v100, v101, v102);
    if (v100) {
      operator delete(v100);
    }
    if (v99) {
      operator delete(v99);
    }
  }
  if (size) {
    std::__shared_weak_count::__release_shared[abi:ne180100](size);
  }
  if (v110) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v110);
  }
  if (v119) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v119);
  }
  CoreML::Specification::BatchnormLayerParams::~BatchnormLayerParams((CoreML::Specification::BatchnormLayerParams *)&v129);
  *(void *)uint64_t v120 = &v137;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v120);
  *(void *)uint64_t v120 = &v140;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v120);
  if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v143.__r_.__value_.__l.__data_);
  }
  return v111 == 1 || v42 == 1 || v58 == 1 || v74 == 1;
}

void sub_19EA8093C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *__p)
{
  if (__p)
  {
    operator delete(__p);
    if (!v64)
    {
LABEL_3:
      if (!v63)
      {
LABEL_8:
        uint64_t v67 = *(std::__shared_weak_count **)(v65 - 152);
        if (v67) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v67);
        }
        if (a11) {
          std::__shared_weak_count::__release_shared[abi:ne180100](a11);
        }
        if (a25) {
          std::__shared_weak_count::__release_shared[abi:ne180100](a25);
        }
        CoreML::Specification::BatchnormLayerParams::~BatchnormLayerParams((CoreML::Specification::BatchnormLayerParams *)&a36);
        a26 = (uint64_t)&a45;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a26);
        a26 = (uint64_t)&a48;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a26);
        if (a56 < 0) {
          operator delete(a51);
        }
        _Unwind_Resume(a1);
      }
LABEL_7:
      operator delete(v63);
      goto LABEL_8;
    }
  }
  else if (!v64)
  {
    goto LABEL_3;
  }
  operator delete(v64);
  if (!v63) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

void batchNormAssignWeightToFloatBlob(uint64_t a1, uint64_t a2, int a3, unint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  int v13 = *(char *)(a6 + 23);
  if ((v13 & 0x80000000) == 0)
  {
    uint64_t v14 = (const std::string::value_type *)a6;
    if (v13 != 8) {
      goto LABEL_7;
    }
LABEL_6:
    BOOL v15 = *(void *)v14 == 0x65636E6169726176;
    goto LABEL_8;
  }
  if (*(void *)(a6 + 8) == 8)
  {
    uint64_t v14 = *(const std::string::value_type **)a6;
    goto LABEL_6;
  }
LABEL_7:
  BOOL v15 = 0;
LABEL_8:
  if (a3 == 2)
  {
    if (!CoreML::hasSufficientBytesInQuantizedWeightParam((uint64_t *)a2, a4))
    {
      exceptiounint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      uint64_t v38 = std::string::append(&v50, "has insufficient bytes in quantized ");
      long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v39;
      v38->__r_.__value_.__l.__size_ = 0;
      v38->__r_.__value_.__r.__words[2] = 0;
      v38->__r_.__value_.__r.__words[0] = 0;
      int v40 = *(char *)(a6 + 23);
      if (v40 >= 0) {
        unsigned int v41 = (const std::string::value_type *)a6;
      }
      else {
        unsigned int v41 = *(const std::string::value_type **)a6;
      }
      if (v40 >= 0) {
        std::string::size_type v42 = *(unsigned __int8 *)(a6 + 23);
      }
      else {
        std::string::size_type v42 = *(void *)(a6 + 8);
      }
      uint64_t v43 = std::string::append(&v51, v41, v42);
      long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v44;
      v43->__r_.__value_.__l.__size_ = 0;
      v43->__r_.__value_.__r.__words[2] = 0;
      v43->__r_.__value_.__r.__words[0] = 0;
      int v45 = std::string::append(&v52, ".");
      long long v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v46;
      v45->__r_.__value_.__l.__size_ = 0;
      v45->__r_.__value_.__r.__words[2] = 0;
      v45->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &__p);
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    BOOL v28 = &CoreML::Specification::_QuantizationParams_default_instance_;
    if (*(void *)(a2 + 64)) {
      BOOL v28 = *(uint64_t **)(a2 + 64);
    }
    unint64_t v29 = v28[2];
    unint64_t WeightParamSizeInBytes = (int)EspressoConverter::getWeightParamSizeInBytes((uint64_t *)a2);
    if (WeightParamSizeInBytes > (v29 * a4 + 7) >> 3)
    {
      unint64_t v48 = WeightParamSizeInBytes;
      uint64_t v49 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      batchNormQuantizedWeightArrayTooShortErrorString(&__p, a5, a6, v48, v29);
      std::runtime_error::runtime_error(v49, &__p);
      __cxa_throw(v49, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    CoreML::dequantizeWeightParamSpec((CoreML *)&__p, (const CoreML::Specification::WeightParams *)a2, a4);
    uint64_t v22 = (char *)__p.__r_.__value_.__r.__words[0];
    if (a4)
    {
      uint64_t v31 = 0;
      unsigned int v32 = 1;
      do
      {
        float v33 = *(float *)&v22[v31];
        float v34 = sqrtf(v33 + a7);
        if (v15) {
          float v33 = v34;
        }
        *(float *)(a1 + 4 * v31) = v33;
        unint64_t v35 = v32;
        v31 += 4;
        ++v32;
      }
      while (v35 < a4);
      goto LABEL_35;
    }
LABEL_34:
    if (!v22) {
      return;
    }
    goto LABEL_35;
  }
  if (a3 == 1)
  {
    EspressoConverter::readHalfPrecisionWeightsFromByteStream((uint64_t)&__p, *(void ***)(a2 + 40));
    uint64_t v22 = (char *)__p.__r_.__value_.__r.__words[0];
    if (a4)
    {
      uint64_t v23 = 0;
      unsigned int v24 = 1;
      do
      {
        float v25 = *(float *)&v22[v23];
        float v26 = sqrtf(v25 + a7);
        if (v15) {
          float v25 = v26;
        }
        *(float *)(a1 + 4 * v23) = v25;
        unint64_t v27 = v24;
        v23 += 4;
        ++v24;
      }
      while (v27 < a4);
LABEL_35:
      operator delete(v22);
      return;
    }
    goto LABEL_34;
  }
  if (a3)
  {
    int v36 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    batchNormUncompilableWeightTypeErrorString(&__p, a5);
    std::runtime_error::runtime_error(v36, &__p);
    __cxa_throw(v36, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if ((int)EspressoConverter::getWeightParamSize(a2) != a4)
  {
    uint64_t v47 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    batchNormChannelMismatchErrorString(&__p, a5, a6);
    std::runtime_error::runtime_error(v47, &__p);
    __cxa_throw(v47, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (a4)
  {
    unsigned int v16 = 0;
    uint64_t v17 = *(void *)(a2 + 24);
    unsigned int v18 = 1;
    do
    {
      float v19 = *(float *)(v17 + 4 * (int)(v18 - 1) + 8);
      float v20 = sqrtf(v19 + a7);
      if (v15) {
        float v19 = v20;
      }
      *(float *)(a1 + 4 * v1CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = v19;
      unint64_t v21 = v18++;
      v16 += 4;
    }
    while (v21 < a4);
  }
}

void sub_19EA80F4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (v36) {
    __cxa_free_exception(v35);
  }
  _Unwind_Resume(exception_object);
}

void batchNormChannelMismatchErrorString(std::string *a1, uint64_t a2, uint64_t a3)
{
  std::operator+<char>();
  long long v5 = std::string::append(&v13, " ,size of ");
  long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v14.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  int v7 = *(char *)(a3 + 23);
  if (v7 >= 0) {
    uint64_t v8 = (const std::string::value_type *)a3;
  }
  else {
    uint64_t v8 = *(const std::string::value_type **)a3;
  }
  if (v7 >= 0) {
    std::string::size_type v9 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    std::string::size_type v9 = *(void *)(a3 + 8);
  }
  int v10 = std::string::append(&v14, v8, v9);
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v15.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  uint64_t v12 = std::string::append(&v15, " must be equal to the number of channels.");
  *a1 = *v12;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
}

void sub_19EA810F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (*(char *)(v21 - 25) < 0) {
    operator delete(*(void **)(v21 - 48));
  }
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void batchNormQuantizedWeightArrayTooShortErrorString(std::string *a1, uint64_t a2, uint64_t a3, unint64_t __val, unint64_t a5)
{
  std::to_string(&v33, __val);
  std::string::size_type v9 = std::string::insert(&v33, 0, "Size of quantized weights (in bytes) = ");
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v34.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  long long v11 = std::string::append(&v34, " is smaller than the total bytes required for ");
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v35.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  int v13 = *(char *)(a3 + 23);
  if (v13 >= 0) {
    std::string v14 = (const std::string::value_type *)a3;
  }
  else {
    std::string v14 = *(const std::string::value_type **)a3;
  }
  if (v13 >= 0) {
    std::string::size_type v15 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    std::string::size_type v15 = *(void *)(a3 + 8);
  }
  unsigned int v16 = std::string::append(&v35, v14, v15);
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v36.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  unsigned int v18 = std::string::append(&v36, "for ");
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v37.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, a5);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v22 = std::string::append(&v37, (const std::string::value_type *)p_p, size);
  long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  unsigned int v24 = std::string::append(&v38, "-bit quantization in layer ");
  long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v39.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  int v26 = *(char *)(a2 + 23);
  if (v26 >= 0) {
    unint64_t v27 = (const std::string::value_type *)a2;
  }
  else {
    unint64_t v27 = *(const std::string::value_type **)a2;
  }
  if (v26 >= 0) {
    std::string::size_type v28 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v28 = *(void *)(a2 + 8);
  }
  unint64_t v29 = std::string::append(&v39, v27, v28);
  long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  v40.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  uint64_t v31 = std::string::append(&v40, ".");
  *a1 = *v31;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v40.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v39.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v34.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
}

void sub_19EA813A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (*(char *)(v47 - 57) < 0) {
    operator delete(*(void **)(v47 - 80));
  }
  if (*(char *)(v47 - 89) < 0) {
    operator delete(*(void **)(v47 - 112));
  }
  if (*(char *)(v47 - 121) < 0) {
    operator delete(*(void **)(v47 - 144));
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a47 < 0) {
    operator delete(a42);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void batchNormUncompilableWeightTypeErrorString(std::string *a1, uint64_t a2)
{
  std::operator+<char>();
  uint64_t v4 = std::string::append(&v12, " of layer ");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v13.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  int v6 = *(char *)(a2 + 23);
  if (v6 >= 0) {
    int v7 = (const std::string::value_type *)a2;
  }
  else {
    int v7 = *(const std::string::value_type **)a2;
  }
  if (v6 >= 0) {
    std::string::size_type v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v8 = *(void *)(a2 + 8);
  }
  std::string::size_type v9 = std::string::append(&v13, v7, v8);
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v14.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  long long v11 = std::string::append(&v14, " cannot be compiled.");
  *a1 = *v11;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
}

void sub_19EA8157C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (*(char *)(v21 - 25) < 0) {
    operator delete(*(void **)(v21 - 48));
  }
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void LayerTranslator::addClip(LayerTranslator *this, uint64_t **a2)
{
  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  uint64_t v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v30, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    long long v5 = *(_OWORD *)v4;
    v30.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v5;
  }
  unint64_t v27 = 0;
  std::string::size_type v28 = 0;
  uint64_t v29 = 0;
  unsigned int v24 = 0;
  long long v25 = 0;
  uint64_t v26 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v27, (uint64_t *)&v24, *((void *)this + 1));
  uint64_t v20 = 897988541;
  char v21 = 0;
  int v22 = 0;
  int v23 = 0;
  long long v17 = (long long **)119;
  if (*((_DWORD *)a2 + 35) == 660)
  {
    int v7 = a2[16];
    int v18 = *((_DWORD *)v7 + 4);
  }
  else
  {
    unint64_t inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    int v9 = *((_DWORD *)a2 + 35);
    int v18 = qword_1EB4DEBC0;
    if (v9 == 660)
    {
      int v7 = a2[16];
    }
    else
    {
      CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
      int v7 = &CoreML::Specification::_ClipLayerParams_default_instance_;
    }
  }
  int v19 = *((_DWORD *)v7 + 5);
  long long v10 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
  memset(&v12, 0, sizeof(v12));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v12, v24, v25, 0xAAAAAAAAAAAAAAABLL * (((char *)v25 - (char *)v24) >> 3));
  memset(&v11, 0, sizeof(v11));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v11, v27, v28, 0xAAAAAAAAAAAAAAABLL * (((char *)v28 - (char *)v27) >> 3));
  Espresso::sequential_builder::add<Espresso::elementwise_params>(&v15, v10, (uint64_t)__p, (uint64_t)&v30, (uint64_t)&v17, (long long *)v12.__r_.__value_.__l.__data_, (long long *)v12.__r_.__value_.__l.__size_, (long long **)&v11);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  uint64_t v31 = &v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);
  uint64_t v31 = &v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v27);
  long long v17 = &v24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v17);
  long long v17 = &v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v17);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
}

void sub_19EA817C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  *(void *)(v24 - 40) = v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v24 - 40));
  *(void *)(v24 - 40) = &a12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v24 - 40));
  if (a20 < 0) {
    operator delete(__p);
  }
  a23 = v24 - 112;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  a23 = v24 - 88;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  if (*(char *)(v24 - 41) < 0) {
    operator delete(*(void **)(v24 - 64));
  }
  _Unwind_Resume(a1);
}

void LayerTranslator::addExp2(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  uint64_t v4 = (long long *)*((void *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)v4, *((void *)v4 + 1));
  }
  else
  {
    long long v5 = *v4;
    v23.__r_.__value_.__r.__words[2] = *((void *)v4 + 2);
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v5;
  }
  uint64_t v20 = 0;
  char v21 = 0;
  uint64_t v22 = 0;
  long long v17 = 0;
  int v18 = 0;
  uint64_t v19 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v20, (uint64_t *)&v17, *((void *)this + 1));
  v13[2] = (void **)897988541;
  char v14 = 0;
  int v15 = 0;
  int v16 = 0;
  v13[0] = (void **)35;
  v13[1] = (void **)1065353216;
  int v6 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
  memset(&v8, 0, sizeof(v8));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v8, v17, v18, 0xAAAAAAAAAAAAAAABLL * (((char *)v18 - (char *)v17) >> 3));
  memset(&v7, 0, sizeof(v7));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v7, v20, v21, 0xAAAAAAAAAAAAAAABLL * (((char *)v21 - (char *)v20) >> 3));
  Espresso::sequential_builder::add<Espresso::elementwise_params>(&v11, v6, (uint64_t)__p, (uint64_t)&v23, (uint64_t)v13, (long long *)v8.__r_.__value_.__l.__data_, (long long *)v8.__r_.__value_.__l.__size_, (long long **)&v7);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  uint64_t v24 = &v7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  uint64_t v24 = &v8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v20);
  v13[0] = (void **)&v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v13);
  v13[0] = (void **)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v13);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
}

void sub_19EA819F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  a23 = v23 - 112;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  a23 = v23 - 88;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  if (*(char *)(v23 - 41) < 0) {
    operator delete(*(void **)(v23 - 64));
  }
  _Unwind_Resume(a1);
}

void LayerTranslator::addPooling3d(LayerTranslator *this, const CoreML::Specification::Pooling3DLayerParams **a2)
{
  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  uint64_t v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v57, *(const std::string::value_type **)v4, *((void *)v4 + 1));
  }
  else
  {
    long long v5 = *(_OWORD *)v4;
    v57.__r_.__value_.__r.__words[2] = *((void *)v4 + 2);
    *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v5;
  }
  uint64_t v54 = 0;
  uint64_t v55 = 0;
  uint64_t v56 = 0;
  std::string v51 = 0;
  std::string v52 = 0;
  uint64_t v53 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v54, (uint64_t *)&v51, *((void *)this + 1));
  if (*((_DWORD *)a2 + 35) == 1465)
  {
    std::string v7 = a2[16];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    std::string v7 = (const CoreML::Specification::Pooling3DLayerParams *)&CoreML::Specification::_Pooling3DLayerParams_default_instance_;
  }
  CoreML::Specification::Pooling3DLayerParams::Pooling3DLayerParams((CoreML::Specification::Pooling3DLayerParams *)&v39, v7);
  v27[0] = 0;
  if (__val)
  {
    if (__val == 0x80000000 || __val == 0x7FFFFFFF)
    {
      exceptiounint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v25, __val);
      int v9 = std::string::insert(&v25, 0, "Unsupported Pooling Type: ");
      long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v26.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      std::logic_error::logic_error(exception, &v26);
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
      __cxa_throw(exception, (struct type_info *)off_1E59A3028, MEMORY[0x1E4FBA1E8]);
    }
  }
  else
  {
    v27[0] = 1;
  }
  __int16 v11 = 0;
  v27[1] = v43;
  *(int32x2_t *)&long long v12 = vrev64_s32(v42);
  *((int32x2_t *)&v12 + 1) = vrev64_s32(v45);
  long long v28 = v12;
  int v29 = v44;
  int v30 = v49;
  int8x8_t v13 = 0;
  __int16 v14 = 1;
  if (v50 > 0)
  {
    if (v50 == 1)
    {
      __int16 v11 = 0;
      __int16 v15 = 0;
      __int16 v14 = 2;
      goto LABEL_20;
    }
    unsigned int v16 = 0x7FFFFFFF;
  }
  else
  {
    if (!v50)
    {
      __int16 v14 = 0;
      __int16 v11 = v46;
      __int16 v15 = v47;
      int8x8_t v13 = (int8x8_t)vmovn_s32(v48);
      goto LABEL_20;
    }
    unsigned int v16 = 0x80000000;
  }
  __int16 v15 = 0;
  if (v50 == v16)
  {
    int v18 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v25, v50);
    uint64_t v19 = std::string::insert(&v25, 0, "Unsupported Padding Type: ");
    long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v26.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    std::logic_error::logic_error(v18, &v26);
    v18->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
    __cxa_throw(v18, (struct type_info *)off_1E59A3028, MEMORY[0x1E4FBA1E8]);
  }
LABEL_20:
  __int16 v32 = v14;
  __int16 v33 = 0;
  int v34 = 0;
  int8x8_t v35 = vext_s8(v13, v13, 4uLL);
  __int16 v36 = v11;
  __int16 v37 = v15;
  int v38 = 0;
  int v31 = 0;
  long long v17 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(&v26, "pool3d");
  memset(&v22, 0, sizeof(v22));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v22, v51, v52, 0xAAAAAAAAAAAAAAABLL * (((char *)v52 - (char *)v51) >> 3));
  memset(&v21, 0, sizeof(v21));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v21, v54, v55, 0xAAAAAAAAAAAAAAABLL * (((char *)v55 - (char *)v54) >> 3));
  Espresso::sequential_builder::add<Espresso::pool3d_params_t>(&v23, v17, (uint64_t)&v26, (uint64_t)&v57, (uint64_t)v27, (long long *)v22.__r_.__value_.__l.__data_, (long long *)v22.__r_.__value_.__l.__size_, (long long **)&v21);
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  v25.__r_.__value_.__r.__words[0] = (std::string::size_type)&v21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  v25.__r_.__value_.__r.__words[0] = (std::string::size_type)&v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v54);
  std::string v39 = (long long **)&unk_1EF0D42A0;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(&v40);
  std::string v39 = &v51;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v39);
  std::string v39 = &v54;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v39);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v57.__r_.__value_.__l.__data_);
  }
}

void sub_19EA81E5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  if (a23 < 0)
  {
    operator delete(a18);
    if ((v41 & 1) == 0)
    {
LABEL_8:
      a39 = &unk_1EF0D42A0;
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(&a40);
      a39 = (void *)(v42 - 112);
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a39);
      a39 = (void *)(v42 - 88);
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a39);
      if (*(char *)(v42 - 41) < 0) {
        operator delete(*(void **)(v42 - 64));
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v41)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v40);
  goto LABEL_8;
}

void LayerTranslator::addRandomNormalLike(LayerTranslator *this, uint64_t **a2)
{
  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  uint64_t v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v33, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    long long v5 = *(_OWORD *)v4;
    v33.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v5;
  }
  int v30 = 0;
  int v31 = 0;
  uint64_t v32 = 0;
  unint64_t v27 = 0;
  long long v28 = 0;
  uint64_t v29 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v30, (uint64_t *)&v27, *((void *)this + 1));
  if (*((_DWORD *)a2 + 35) == 1170)
  {
    std::string v7 = a2[16];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    std::string v7 = &CoreML::Specification::_RandomNormalLikeLayerParams_default_instance_;
  }
  uint64_t v23 = &unk_1EF0D7A70;
  uint64_t v24 = 0;
  int v26 = 0;
  uint64_t v8 = v7[1];
  if (v8) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((unint64_t *)&v24, v8 & 0xFFFFFFFFFFFFFFFELL);
  }
  long long v25 = *((_OWORD *)v7 + 1);
  *(void *)&long long v9 = 0x100000001;
  *((void *)&v9 + 1) = 0x100000001;
  long long v19 = v9;
  uint64_t v20 = 0x100000001;
  int v21 = -1;
  *(_DWORD *)long long v17 = 1;
  *(void *)&v17[4] = *((void *)&v25 + 1);
  int v18 = v25;
  __int16 v22 = 0;
  long long v10 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "load_random");
  memset(&v12, 0, sizeof(v12));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v12, v27, v28, 0xAAAAAAAAAAAAAAABLL * (((char *)v28 - (char *)v27) >> 3));
  memset(&v11, 0, sizeof(v11));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v11, v30, v31, 0xAAAAAAAAAAAAAAABLL * (((char *)v31 - (char *)v30) >> 3));
  Espresso::sequential_builder::add<Espresso::load_random_params_t>(&v15, v10, (uint64_t)__p, (uint64_t)&v33, (uint64_t)v17, (long long *)v12.__r_.__value_.__l.__data_, (long long *)v12.__r_.__value_.__l.__size_, (long long **)&v11);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  int v34 = &v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
  int v34 = &v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v30);
  uint64_t v23 = &unk_1EF0D7A70;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(&v24);
  *(void *)long long v17 = &v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v17);
  *(void *)long long v17 = &v30;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v17);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
}

void sub_19EA821B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v29);
  a23 = v30 - 128;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  a23 = v30 - 104;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  if (*(char *)(v30 - 57) < 0) {
    operator delete(*(void **)(v30 - 80));
  }
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::add<Espresso::load_random_params_t>(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, long long *a6, long long *a7, long long **a8)
{
  memset(&v13, 0, sizeof(v13));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v13, a6, a7, 0xAAAAAAAAAAAAAAABLL * (((char *)a7 - (char *)a6) >> 3));
  memset(&v12, 0, sizeof(v12));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v12, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a8[1] - (char *)*a8) >> 3));
  LODWORD(v15.__r_.__value_.__l.__data_) = (***(uint64_t (****)(void))(a2[14] + 8))(*(void *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  std::string v11 = (std::__shared_weak_count *)a1[1];
  uint64_t v16 = *a1;
  long long v17 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(&v15, 0, sizeof(v15));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v15, (long long *)v13.__r_.__value_.__l.__data_, (long long *)v13.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13.__r_.__value_.__l.__size_ - v13.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v14, 0, sizeof(v14));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v14, (long long *)v12.__r_.__value_.__l.__data_, (long long *)v12.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12.__r_.__value_.__l.__size_ - v12.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  int v18 = &v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  int v18 = &v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (*a2) {
    Espresso::sequential_builder::add_shape_from_kernel();
  }
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
}

void sub_19EA82434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v16 = *(std::__shared_weak_count **)(v13 + 8);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  *(void *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(void *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void LayerTranslator::addRandomNormalStatic(LayerTranslator *this, uint64_t **a2)
{
  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  uint64_t v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v44, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    long long v5 = *(_OWORD *)v4;
    v44.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v5;
  }
  int v41 = 0;
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  int v38 = 0;
  std::string v39 = 0;
  uint64_t v40 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v41, (uint64_t *)&v38, *((void *)this + 1));
  if (*((_DWORD *)a2 + 35) == 1175)
  {
    std::string v7 = a2[16];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    std::string v7 = &CoreML::Specification::_RandomNormalStaticLayerParams_default_instance_;
  }
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  uint64_t v32 = (long long **)&unk_1EF0D80F8;
  unint64_t v33 = 0;
  int v8 = *((_DWORD *)v7 + 4);
  if (v8)
  {
    google::protobuf::RepeatedField<double>::Reserve((unsigned int *)&v34, v8);
    memcpy((void *)(v35 + 8), (const void *)(v7[3] + 8), 8 * *((int *)v7 + 4));
    int v9 = *((_DWORD *)v7 + 4);
    LODWORD(v34) = v9;
  }
  else
  {
    int v9 = 0;
  }
  int v37 = 0;
  uint64_t v10 = v7[1];
  if (v10)
  {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&v33, v10 & 0xFFFFFFFFFFFFFFFELL);
    int v9 = v34;
  }
  long long v36 = *(_OWORD *)(v7 + 5);
  int v21 = 1;
  uint64_t v22 = *((void *)&v36 + 1);
  int v29 = 1;
  int v30 = v9;
  int v23 = v36;
  __int16 v31 = 0;
  if (v9 <= 0)
  {
    int v24 = 1;
    goto LABEL_20;
  }
  int v24 = *(void *)(v35 + 8 * (v9 - 1) + 8);
  if (v9 == 1)
  {
LABEL_20:
    int v25 = 1;
    goto LABEL_21;
  }
  int v25 = *(void *)(v35 + 8 * (v9 - 2) + 8);
  if (v9 <= 2)
  {
LABEL_21:
    int v26 = 1;
    goto LABEL_22;
  }
  int v26 = *(void *)(v35 + 8 * (v9 - 3) + 8);
  if (v9 == 3)
  {
LABEL_22:
    int v14 = 1;
    int v27 = 1;
    goto LABEL_23;
  }
  int v27 = *(void *)(v35 + 8 * (v9 - 4) + 8);
  BOOL v11 = v9 >= 5;
  unsigned int v12 = v9 - 5;
  if (v11) {
    int v14 = *(_DWORD *)(v35 + 8 * v12 + 8);
  }
  else {
    int v14 = 1;
  }
LABEL_23:
  int v28 = v14;
  uint64_t v13 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "load_random");
  memset(&v16, 0, sizeof(v16));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v16, v38, v39, 0xAAAAAAAAAAAAAAABLL * (((char *)v39 - (char *)v38) >> 3));
  memset(&v15, 0, sizeof(v15));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v15, v41, v42, 0xAAAAAAAAAAAAAAABLL * (((char *)v42 - (char *)v41) >> 3));
  Espresso::sequential_builder::add<Espresso::load_random_params_t>(&v19, v13, (uint64_t)__p, (uint64_t)&v44, (uint64_t)&v21, (long long *)v16.__r_.__value_.__l.__data_, (long long *)v16.__r_.__value_.__l.__size_, (long long **)&v15);
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  int32x2_t v45 = &v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
  int32x2_t v45 = &v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
  if (v18 < 0) {
    operator delete(__p[0]);
  }
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v41);
  CoreML::Specification::RandomNormalStaticLayerParams::~RandomNormalStaticLayerParams((CoreML::Specification::RandomNormalStaticLayerParams *)&v32);
  uint64_t v32 = &v38;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
  uint64_t v32 = &v41;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v44.__r_.__value_.__l.__data_);
  }
}

void sub_19EA827B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p)
{
  if (__p && !*__p) {
    operator delete(__p);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v33);
  a30 = v34 - 128;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = v34 - 104;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  if (*(char *)(v34 - 57) < 0) {
    operator delete(*(void **)(v34 - 80));
  }
  _Unwind_Resume(a1);
}

void LayerTranslator::addRandomNormalDynamic(LayerTranslator *this, uint64_t **a2)
{
  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  uint64_t v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v34, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    long long v5 = *(_OWORD *)v4;
    v34.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v5;
  }
  __int16 v31 = 0;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  int v28 = 0;
  int v29 = 0;
  uint64_t v30 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v31, (uint64_t *)&v28, *((void *)this + 1));
  *(void *)&long long v7 = 0x100000001;
  *((void *)&v7 + 1) = 0x100000001;
  long long v23 = v7;
  uint64_t v24 = 0x100000001;
  int v25 = -1;
  char v27 = 0;
  if (*((_DWORD *)a2 + 35) == 1180)
  {
    int v8 = a2[16];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    int v8 = &CoreML::Specification::_RandomNormalDynamicLayerParams_default_instance_;
  }
  long long v17 = &unk_1EF0D83F0;
  uint64_t v18 = 0;
  int v20 = 0;
  uint64_t v9 = v8[1];
  if (v9) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((unint64_t *)&v18, v9 & 0xFFFFFFFFFFFFFFFELL);
  }
  long long v19 = *((_OWORD *)v8 + 1);
  char v26 = 1;
  *(_DWORD *)int v21 = 1;
  *(void *)&v21[4] = *((void *)&v19 + 1);
  int v22 = v19;
  uint64_t v10 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "load_random");
  memset(&v12, 0, sizeof(v12));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v12, v28, v29, 0xAAAAAAAAAAAAAAABLL * (((char *)v29 - (char *)v28) >> 3));
  memset(&v11, 0, sizeof(v11));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v11, v31, v32, 0xAAAAAAAAAAAAAAABLL * (((char *)v32 - (char *)v31) >> 3));
  Espresso::sequential_builder::add<Espresso::load_random_params_t>(&v15, v10, (uint64_t)__p, (uint64_t)&v34, (uint64_t)v21, (long long *)v12.__r_.__value_.__l.__data_, (long long *)v12.__r_.__value_.__l.__size_, (long long **)&v11);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  uint64_t v35 = &v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
  uint64_t v35 = &v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v31);
  long long v17 = &unk_1EF0D83F0;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(&v18);
  *(void *)int v21 = &v28;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v21);
  *(void *)int v21 = &v31;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v21);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v34.__r_.__value_.__l.__data_);
  }
}

void sub_19EA82AB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v28);
  a28 = v29 - 128;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  a28 = v29 - 104;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  if (*(char *)(v29 - 57) < 0) {
    operator delete(*(void **)(v29 - 80));
  }
  _Unwind_Resume(a1);
}

void LayerTranslator::addRandomUniformLike(LayerTranslator *this, uint64_t **a2)
{
  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  uint64_t v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v33, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    long long v5 = *(_OWORD *)v4;
    v33.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v5;
  }
  uint64_t v30 = 0;
  __int16 v31 = 0;
  uint64_t v32 = 0;
  char v27 = 0;
  int v28 = 0;
  uint64_t v29 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v30, (uint64_t *)&v27, *((void *)this + 1));
  if (*((_DWORD *)a2 + 35) == 1190)
  {
    long long v7 = a2[16];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    long long v7 = &CoreML::Specification::_RandomUniformLikeLayerParams_default_instance_;
  }
  long long v23 = &unk_1EF0D7D68;
  uint64_t v24 = 0;
  int v26 = 0;
  uint64_t v8 = v7[1];
  if (v8) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((unint64_t *)&v24, v8 & 0xFFFFFFFFFFFFFFFELL);
  }
  long long v25 = *((_OWORD *)v7 + 1);
  *(void *)&long long v9 = 0x100000001;
  *((void *)&v9 + 1) = 0x100000001;
  long long v19 = v9;
  uint64_t v20 = 0x100000001;
  int v21 = -1;
  *(_DWORD *)long long v17 = 0;
  *(void *)&v17[4] = *((void *)&v25 + 1);
  int v18 = v25;
  __int16 v22 = 0;
  uint64_t v10 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "load_random");
  memset(&v12, 0, sizeof(v12));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v12, v27, v28, 0xAAAAAAAAAAAAAAABLL * (((char *)v28 - (char *)v27) >> 3));
  memset(&v11, 0, sizeof(v11));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v11, v30, v31, 0xAAAAAAAAAAAAAAABLL * (((char *)v31 - (char *)v30) >> 3));
  Espresso::sequential_builder::add<Espresso::load_random_params_t>(&v15, v10, (uint64_t)__p, (uint64_t)&v33, (uint64_t)v17, (long long *)v12.__r_.__value_.__l.__data_, (long long *)v12.__r_.__value_.__l.__size_, (long long **)&v11);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  std::string v34 = &v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
  std::string v34 = &v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v30);
  long long v23 = &unk_1EF0D7D68;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(&v24);
  *(void *)long long v17 = &v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v17);
  *(void *)long long v17 = &v30;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v17);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
}

void sub_19EA82D84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v29);
  a23 = v30 - 128;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  a23 = v30 - 104;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  if (*(char *)(v30 - 57) < 0) {
    operator delete(*(void **)(v30 - 80));
  }
  _Unwind_Resume(a1);
}

void LayerTranslator::addRandomUniformStatic(LayerTranslator *this, uint64_t **a2)
{
  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  uint64_t v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v44, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    long long v5 = *(_OWORD *)v4;
    v44.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v5;
  }
  int v41 = 0;
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  int v38 = 0;
  std::string v39 = 0;
  uint64_t v40 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v41, (uint64_t *)&v38, *((void *)this + 1));
  if (*((_DWORD *)a2 + 35) == 1195)
  {
    long long v7 = a2[16];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    long long v7 = &CoreML::Specification::_RandomUniformStaticLayerParams_default_instance_;
  }
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  uint64_t v32 = (long long **)&unk_1EF0D8488;
  unint64_t v33 = 0;
  int v8 = *((_DWORD *)v7 + 4);
  if (v8)
  {
    google::protobuf::RepeatedField<double>::Reserve((unsigned int *)&v34, v8);
    memcpy((void *)(v35 + 8), (const void *)(v7[3] + 8), 8 * *((int *)v7 + 4));
    int v9 = *((_DWORD *)v7 + 4);
    LODWORD(v34) = v9;
  }
  else
  {
    int v9 = 0;
  }
  int v37 = 0;
  uint64_t v10 = v7[1];
  if (v10)
  {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&v33, v10 & 0xFFFFFFFFFFFFFFFELL);
    int v9 = v34;
  }
  long long v36 = *(_OWORD *)(v7 + 5);
  int v21 = 0;
  uint64_t v22 = *((void *)&v36 + 1);
  int v29 = 1;
  int v30 = v9;
  int v23 = v36;
  __int16 v31 = 0;
  if (v9 <= 0)
  {
    int v24 = 1;
    goto LABEL_20;
  }
  int v24 = *(void *)(v35 + 8 * (v9 - 1) + 8);
  if (v9 == 1)
  {
LABEL_20:
    int v25 = 1;
    goto LABEL_21;
  }
  int v25 = *(void *)(v35 + 8 * (v9 - 2) + 8);
  if (v9 <= 2)
  {
LABEL_21:
    int v26 = 1;
    goto LABEL_22;
  }
  int v26 = *(void *)(v35 + 8 * (v9 - 3) + 8);
  if (v9 == 3)
  {
LABEL_22:
    int v14 = 1;
    int v27 = 1;
    goto LABEL_23;
  }
  int v27 = *(void *)(v35 + 8 * (v9 - 4) + 8);
  BOOL v11 = v9 >= 5;
  unsigned int v12 = v9 - 5;
  if (v11) {
    int v14 = *(_DWORD *)(v35 + 8 * v12 + 8);
  }
  else {
    int v14 = 1;
  }
LABEL_23:
  int v28 = v14;
  uint64_t v13 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "load_random");
  memset(&v16, 0, sizeof(v16));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v16, v38, v39, 0xAAAAAAAAAAAAAAABLL * (((char *)v39 - (char *)v38) >> 3));
  memset(&v15, 0, sizeof(v15));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v15, v41, v42, 0xAAAAAAAAAAAAAAABLL * (((char *)v42 - (char *)v41) >> 3));
  Espresso::sequential_builder::add<Espresso::load_random_params_t>(&v19, v13, (uint64_t)__p, (uint64_t)&v44, (uint64_t)&v21, (long long *)v16.__r_.__value_.__l.__data_, (long long *)v16.__r_.__value_.__l.__size_, (long long **)&v15);
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  int32x2_t v45 = &v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
  int32x2_t v45 = &v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
  if (v18 < 0) {
    operator delete(__p[0]);
  }
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v41);
  CoreML::Specification::RandomUniformStaticLayerParams::~RandomUniformStaticLayerParams((CoreML::Specification::RandomUniformStaticLayerParams *)&v32);
  uint64_t v32 = &v38;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
  uint64_t v32 = &v41;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v44.__r_.__value_.__l.__data_);
  }
}

void sub_19EA8311C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p)
{
  if (__p && !*__p) {
    operator delete(__p);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v33);
  a30 = v34 - 128;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = v34 - 104;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  if (*(char *)(v34 - 57) < 0) {
    operator delete(*(void **)(v34 - 80));
  }
  _Unwind_Resume(a1);
}

void LayerTranslator::addRandomUniformDynamic(LayerTranslator *this, uint64_t **a2)
{
  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  uint64_t v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v34, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    long long v5 = *(_OWORD *)v4;
    v34.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v5;
  }
  __int16 v31 = 0;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  int v28 = 0;
  int v29 = 0;
  uint64_t v30 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v31, (uint64_t *)&v28, *((void *)this + 1));
  *(void *)&long long v7 = 0x100000001;
  *((void *)&v7 + 1) = 0x100000001;
  long long v23 = v7;
  uint64_t v24 = 0x100000001;
  int v25 = -1;
  char v27 = 0;
  if (*((_DWORD *)a2 + 35) == 1200)
  {
    int v8 = a2[16];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    int v8 = &CoreML::Specification::_RandomUniformDynamicLayerParams_default_instance_;
  }
  long long v17 = &unk_1EF0D85B8;
  uint64_t v18 = 0;
  int v20 = 0;
  uint64_t v9 = v8[1];
  if (v9) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((unint64_t *)&v18, v9 & 0xFFFFFFFFFFFFFFFELL);
  }
  long long v19 = *((_OWORD *)v8 + 1);
  char v26 = 1;
  *(_DWORD *)int v21 = 0;
  *(void *)&v21[4] = *((void *)&v19 + 1);
  int v22 = v19;
  uint64_t v10 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "load_random");
  memset(&v12, 0, sizeof(v12));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v12, v28, v29, 0xAAAAAAAAAAAAAAABLL * (((char *)v29 - (char *)v28) >> 3));
  memset(&v11, 0, sizeof(v11));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v11, v31, v32, 0xAAAAAAAAAAAAAAABLL * (((char *)v32 - (char *)v31) >> 3));
  Espresso::sequential_builder::add<Espresso::load_random_params_t>(&v15, v10, (uint64_t)__p, (uint64_t)&v34, (uint64_t)v21, (long long *)v12.__r_.__value_.__l.__data_, (long long *)v12.__r_.__value_.__l.__size_, (long long **)&v11);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  uint64_t v35 = &v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
  uint64_t v35 = &v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v31);
  long long v17 = &unk_1EF0D85B8;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(&v18);
  *(void *)int v21 = &v28;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v21);
  *(void *)int v21 = &v31;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v21);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v34.__r_.__value_.__l.__data_);
  }
}

void sub_19EA83418(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v28);
  a28 = v29 - 128;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  a28 = v29 - 104;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  if (*(char *)(v29 - 57) < 0) {
    operator delete(*(void **)(v29 - 80));
  }
  _Unwind_Resume(a1);
}

void LayerTranslator::addRandomBernoulliLike(LayerTranslator *this, uint64_t **a2)
{
  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  uint64_t v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v35, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    long long v5 = *(_OWORD *)v4;
    v35.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v5;
  }
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v32, (uint64_t *)&v29, *((void *)this + 1));
  if (*((_DWORD *)a2 + 35) == 1210)
  {
    long long v7 = a2[16];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    long long v7 = &CoreML::Specification::_RandomBernoulliLikeLayerParams_default_instance_;
  }
  int v25 = &unk_1EF0D8358;
  v26[0] = 0;
  int v28 = 0;
  uint64_t v8 = v7[1];
  if (v8) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((unint64_t *)v26, v8 & 0xFFFFFFFFFFFFFFFELL);
  }
  uint64_t v9 = v7[2];
  int v27 = *((_DWORD *)v7 + 6);
  v26[1] = v9;
  *(void *)&long long v10 = 0x100000001;
  *((void *)&v10 + 1) = 0x100000001;
  long long v21 = v10;
  uint64_t v22 = 0x100000001;
  int v23 = -1;
  LODWORD(v18) = 2;
  HIDWORD(v18) = v27;
  int v19 = 0;
  int v20 = v9;
  __int16 v24 = 0;
  std::string v11 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "load_random");
  memset(&v13, 0, sizeof(v13));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v13, v29, v30, 0xAAAAAAAAAAAAAAABLL * (((char *)v30 - (char *)v29) >> 3));
  memset(&v12, 0, sizeof(v12));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v12, v32, v33, 0xAAAAAAAAAAAAAAABLL * (((char *)v33 - (char *)v32) >> 3));
  Espresso::sequential_builder::add<Espresso::load_random_params_t>(&v16, v11, (uint64_t)__p, (uint64_t)&v35, (uint64_t)&v18, (long long *)v13.__r_.__value_.__l.__data_, (long long *)v13.__r_.__value_.__l.__size_, (long long **)&v12);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  long long v36 = &v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v36);
  long long v36 = &v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v36);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v32);
  int v25 = &unk_1EF0D8358;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v26);
  uint64_t v18 = &v29;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  uint64_t v18 = &v32;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
}

void sub_19EA836F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v30);
  a24 = v31 - 128;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  a24 = v31 - 104;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  if (*(char *)(v31 - 57) < 0) {
    operator delete(*(void **)(v31 - 80));
  }
  _Unwind_Resume(a1);
}

void LayerTranslator::addRandomBernoulliStatic(LayerTranslator *this, uint64_t **a2)
{
  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  uint64_t v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v44, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    long long v5 = *(_OWORD *)v4;
    v44.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v5;
  }
  int v41 = 0;
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  int v38 = 0;
  std::string v39 = 0;
  uint64_t v40 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v41, (uint64_t *)&v38, *((void *)this + 1));
  if (*((_DWORD *)a2 + 35) == 1215)
  {
    long long v7 = a2[16];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    long long v7 = &CoreML::Specification::_RandomBernoulliStaticLayerParams_default_instance_;
  }
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  uint64_t v31 = (long long **)&unk_1EF0D8A78;
  unint64_t v32 = 0;
  int v8 = *((_DWORD *)v7 + 4);
  if (v8)
  {
    google::protobuf::RepeatedField<double>::Reserve((unsigned int *)&v33, v8);
    memcpy((void *)(v34 + 8), (const void *)(v7[3] + 8), 8 * *((int *)v7 + 4));
    int v9 = *((_DWORD *)v7 + 4);
    LODWORD(v33) = v9;
  }
  else
  {
    int v9 = 0;
  }
  int v37 = 0;
  uint64_t v10 = v7[1];
  if (v10)
  {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&v32, v10 & 0xFFFFFFFFFFFFFFFELL);
    int v9 = v33;
  }
  uint64_t v11 = v7[5];
  int v36 = *((_DWORD *)v7 + 12);
  uint64_t v35 = v11;
  v22[0] = 2;
  v22[1] = v36;
  void v22[2] = 0;
  v22[3] = v11;
  int v28 = 1;
  int v29 = v9;
  __int16 v30 = 0;
  if (v9 <= 0)
  {
    int v23 = 1;
    goto LABEL_20;
  }
  int v23 = *(void *)(v34 + 8 * (v9 - 1) + 8);
  if (v9 == 1)
  {
LABEL_20:
    int v24 = 1;
    goto LABEL_21;
  }
  int v24 = *(void *)(v34 + 8 * (v9 - 2) + 8);
  if (v9 <= 2)
  {
LABEL_21:
    int v25 = 1;
    goto LABEL_22;
  }
  int v25 = *(void *)(v34 + 8 * (v9 - 3) + 8);
  if (v9 == 3)
  {
LABEL_22:
    int v15 = 1;
    int v26 = 1;
    goto LABEL_23;
  }
  int v26 = *(void *)(v34 + 8 * (v9 - 4) + 8);
  BOOL v12 = v9 >= 5;
  unsigned int v13 = v9 - 5;
  if (v12) {
    int v15 = *(_DWORD *)(v34 + 8 * v13 + 8);
  }
  else {
    int v15 = 1;
  }
LABEL_23:
  int v27 = v15;
  char v14 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "load_random");
  memset(&v17, 0, sizeof(v17));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v17, v38, v39, 0xAAAAAAAAAAAAAAABLL * (((char *)v39 - (char *)v38) >> 3));
  memset(&v16, 0, sizeof(v16));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v16, v41, v42, 0xAAAAAAAAAAAAAAABLL * (((char *)v42 - (char *)v41) >> 3));
  Espresso::sequential_builder::add<Espresso::load_random_params_t>(&v20, v14, (uint64_t)__p, (uint64_t)&v44, (uint64_t)v22, (long long *)v17.__r_.__value_.__l.__data_, (long long *)v17.__r_.__value_.__l.__size_, (long long **)&v16);
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  int32x2_t v45 = &v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
  int32x2_t v45 = &v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
  if (v19 < 0) {
    operator delete(__p[0]);
  }
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v41);
  CoreML::Specification::RandomBernoulliStaticLayerParams::~RandomBernoulliStaticLayerParams((CoreML::Specification::RandomBernoulliStaticLayerParams *)&v31);
  uint64_t v31 = &v38;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);
  uint64_t v31 = &v41;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v44.__r_.__value_.__l.__data_);
  }
}

void sub_19EA83A88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p)
{
  if (__p && !*__p) {
    operator delete(__p);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v32);
  a29 = v33 - 112;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a29);
  a29 = v33 - 88;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a29);
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  _Unwind_Resume(a1);
}

void LayerTranslator::addRandomBernoulliDynamic(LayerTranslator *this, uint64_t **a2)
{
  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  uint64_t v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v36, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    long long v5 = *(_OWORD *)v4;
    v36.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v5;
  }
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  __int16 v30 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v33, (uint64_t *)&v30, *((void *)this + 1));
  int v23 = 0;
  *(void *)&long long v7 = 0x100000001;
  *((void *)&v7 + 1) = 0x100000001;
  long long v25 = v7;
  uint64_t v26 = 0x100000001;
  int v27 = -1;
  char v29 = 0;
  if (*((_DWORD *)a2 + 35) == 1220)
  {
    int v8 = a2[16];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    int v8 = &CoreML::Specification::_RandomBernoulliDynamicLayerParams_default_instance_;
  }
  uint64_t v18 = &unk_1EF0D8D70;
  v19[0] = 0;
  int v21 = 0;
  uint64_t v9 = v8[1];
  if (v9) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((unint64_t *)v19, v9 & 0xFFFFFFFFFFFFFFFELL);
  }
  uint64_t v10 = v8[2];
  int v20 = *((_DWORD *)v8 + 6);
  v19[1] = v10;
  char v28 = 1;
  LODWORD(v22) = 2;
  HIDWORD(v22) = v20;
  int v24 = v10;
  uint64_t v11 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "load_random");
  memset(&v13, 0, sizeof(v13));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v13, v30, v31, 0xAAAAAAAAAAAAAAABLL * (((char *)v31 - (char *)v30) >> 3));
  memset(&v12, 0, sizeof(v12));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v12, v33, v34, 0xAAAAAAAAAAAAAAABLL * (((char *)v34 - (char *)v33) >> 3));
  Espresso::sequential_builder::add<Espresso::load_random_params_t>(&v16, v11, (uint64_t)__p, (uint64_t)&v36, (uint64_t)&v22, (long long *)v13.__r_.__value_.__l.__data_, (long long *)v13.__r_.__value_.__l.__size_, (long long **)&v12);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  int v37 = &v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
  int v37 = &v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v33);
  uint64_t v18 = &unk_1EF0D8D70;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v19);
  uint64_t v22 = &v30;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v22);
  uint64_t v22 = &v33;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v22);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }
}

void sub_19EA83D94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v28);
  a28 = v29 - 128;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  a28 = v29 - 104;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  if (*(char *)(v29 - 57) < 0) {
    operator delete(*(void **)(v29 - 80));
  }
  _Unwind_Resume(a1);
}

void LayerTranslator::addCategoricalDistribution(LayerTranslator *this, uint64_t **a2)
{
  v71[2] = *(void ***)MEMORY[0x1E4F143B8];
  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  uint64_t v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v67, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    long long v5 = *(_OWORD *)v4;
    v67.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v5;
  }
  uint64_t v64 = 0;
  uint64_t v65 = 0;
  uint64_t v66 = 0;
  std::string v61 = 0;
  char v62 = 0;
  uint64_t v63 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v64, (uint64_t *)&v61, *((void *)this + 1));
  char v55 = 0;
  uint64_t v57 = 0x3F80000000000000;
  char v59 = 0;
  int v60 = 0;
  if (*((_DWORD *)a2 + 35) == 1230)
  {
    long long v7 = a2[16];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    long long v7 = &CoreML::Specification::_CategoricalDistributionLayerParams_default_instance_;
  }
  unsigned __int8 v49 = &unk_1EF0D8E08;
  uint64_t v50 = 0;
  int v52 = 0;
  uint64_t v8 = v7[1];
  if (v8) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((unint64_t *)&v50, v8 & 0xFFFFFFFFFFFFFFFELL);
  }
  long long v9 = *(_OWORD *)((char *)v7 + 28);
  *(_OWORD *)std::string v51 = *((_OWORD *)v7 + 1);
  *(_OWORD *)&v51[12] = v9;
  char v56 = 1;
  int v54 = *(_DWORD *)v51;
  int v53 = *(_DWORD *)&v51[8];
  uint64_t v58 = *((void *)&v9 + 1);
  if (!BYTE4(v9))
  {
    std::to_string((std::string *)&v44, *(_DWORD *)(*((void *)this + 2) + 4));
    uint64_t v10 = std::string::insert((std::string *)&v44, 0, "log_");
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v70.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v44.__end_) < 0) {
      operator delete(v44.__first_);
    }
    memset(&v69, 0, sizeof(v69));
    std::string v12 = v61;
    if (*((char *)v61 + 23) >= 0) {
      size_t v13 = *((unsigned __int8 *)v61 + 23);
    }
    else {
      size_t v13 = *((void *)v61 + 1);
    }
    char v14 = &v47;
    std::string::basic_string[abi:ne180100]((uint64_t)&v47, v13 + 1);
    if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      char v14 = (std::string *)v47.__r_.__value_.__r.__words[0];
    }
    if (v13)
    {
      if (*((char *)v12 + 23) >= 0) {
        char v15 = v12;
      }
      else {
        char v15 = *(long long **)v12;
      }
      memmove(v14, v15, v13);
    }
    *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + vCoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 13) = 95;
    if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v16 = &v70;
    }
    else {
      uint64_t v16 = (std::string *)v70.__r_.__value_.__r.__words[0];
    }
    if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v70.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v70.__r_.__value_.__l.__size_;
    }
    uint64_t v18 = std::string::append(&v47, (const std::string::value_type *)v16, size);
    long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v48.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    int v20 = std::string::append(&v48, "_");
    long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v68.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    int v22 = *((char *)v64 + 23);
    if (v22 >= 0) {
      int v23 = (const std::string::value_type *)v64;
    }
    else {
      int v23 = *(const std::string::value_type **)v64;
    }
    if (v22 >= 0) {
      std::string::size_type v24 = *((unsigned __int8 *)v64 + 23);
    }
    else {
      std::string::size_type v24 = *((void *)v64 + 1);
    }
    long long v25 = std::string::append(&v68, v23, v24);
    uint64_t v26 = (char *)v25->__r_.__value_.__r.__words[0];
    v71[0] = (void **)v25->__r_.__value_.__l.__size_;
    *(void ***)((char *)v71 + 7) = *(void ***)((char *)&v25->__r_.__value_.__r.__words[1] + 7);
    char v27 = HIBYTE(v25->__r_.__value_.__r.__words[2]);
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    std::vector<std::string>::pointer end = v69.__end_;
    if (v69.__end_ >= v69.__end_cap_.__value_)
    {
      unint64_t v30 = 0xAAAAAAAAAAAAAAABLL * (((char *)v69.__end_ - (char *)v69.__begin_) >> 3);
      unint64_t v31 = v30 + 1;
      if (v30 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
      }
      if (0x5555555555555556 * (((char *)v69.__end_cap_.__value_ - (char *)v69.__begin_) >> 3) > v31) {
        unint64_t v31 = 0x5555555555555556 * (((char *)v69.__end_cap_.__value_ - (char *)v69.__begin_) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v69.__end_cap_.__value_ - (char *)v69.__begin_) >> 3) >= 0x555555555555555) {
        unint64_t v32 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v32 = v31;
      }
      v44.__end_cap_.__value_ = (std::allocator<std::string> *)&v69.__end_cap_;
      if (v32) {
        uint64_t v33 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v69.__end_cap_, v32);
      }
      else {
        uint64_t v33 = 0;
      }
      uint64_t v34 = v33 + v30;
      v44.__first_ = v33;
      v44.__begin_ = v34;
      v44.__end_cap_.__value_ = &v33[v32];
      v34->__r_.__value_.__r.__words[0] = (std::string::size_type)v26;
      v34->__r_.__value_.__l.__size_ = (std::string::size_type)v71[0];
      *(std::string::size_type *)((char *)&v34->__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v71 + 7);
      *((unsigned char *)&v34->__r_.__value_.__s + 23) = v27;
      memset(v71, 0, 15);
      v44.__end_ = v34 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(&v69, &v44);
      uint64_t v29 = v69.__end_;
      std::__split_buffer<std::string>::~__split_buffer(&v44);
    }
    else
    {
      v69.__end_->__r_.__value_.__l.__data_ = v26;
      end->__r_.__value_.__l.__size_ = (std::string::size_type)v71[0];
      *(std::string::size_type *)((char *)&end->__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v71 + 7);
      *((unsigned char *)&end->__r_.__value_.__s + 23) = v27;
      uint64_t v29 = end + 1;
    }
    v69.__end_ = v29;
    if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v68.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v48.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v47.__r_.__value_.__l.__data_);
    }
    v44.__end_ = (std::__split_buffer<std::string>::pointer)897988541;
    LOBYTE(v44.__end_cap_.__value_) = 0;
    int v45 = 0;
    int v46 = 0;
    v44.__first_ = (std::__split_buffer<std::string>::pointer)26;
    v44.__begin_ = (std::__split_buffer<std::string>::pointer)1065353216;
    uint64_t v35 = *(void **)this;
    std::string::basic_string[abi:ne180100]<0>(&v68, "elementwise");
    memset(&v41, 0, sizeof(v41));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v41, v61, v62, 0xAAAAAAAAAAAAAAABLL * (((char *)v62 - (char *)v61) >> 3));
    memset(&v40, 0, sizeof(v40));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v40, (long long *)v69.__begin_, (long long *)v69.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v69.__end_ - (char *)v69.__begin_) >> 3));
    Espresso::sequential_builder::add<Espresso::elementwise_params>(&v42, v35, (uint64_t)&v68, (uint64_t)&v70, (uint64_t)&v44, (long long *)v41.__r_.__value_.__l.__data_, (long long *)v41.__r_.__value_.__l.__size_, (long long **)&v40);
    if (v43) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v43);
    }
    v48.__r_.__value_.__r.__words[0] = (std::string::size_type)&v40;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v48);
    v48.__r_.__value_.__r.__words[0] = (std::string::size_type)&v41;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v48);
    if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v68.__r_.__value_.__l.__data_);
    }
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v61, v69.__begin_, (long long *)v69.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v69.__end_ - (char *)v69.__begin_) >> 3));
    v44.__first_ = (std::__split_buffer<std::string>::pointer)&v69;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v44);
    if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v70.__r_.__value_.__l.__data_);
    }
  }
  std::string v36 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(&v48, "gumbel_max");
  memset(&v38, 0, sizeof(v38));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v38, v61, v62, 0xAAAAAAAAAAAAAAABLL * (((char *)v62 - (char *)v61) >> 3));
  memset(&v37, 0, sizeof(v37));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v37, v64, v65, 0xAAAAAAAAAAAAAAABLL * (((char *)v65 - (char *)v64) >> 3));
  memset(&v69, 0, sizeof(v69));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&v69, (long long *)v38.__r_.__value_.__l.__data_, (long long *)v38.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v38.__r_.__value_.__l.__size_ - v38.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v68, 0, sizeof(v68));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v68, (long long *)v37.__r_.__value_.__l.__data_, (long long *)v37.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v37.__r_.__value_.__l.__size_ - v37.__r_.__value_.__r.__words[0]) >> 3));
  LODWORD(v44.__first_) = (***(uint64_t (****)(void))(v36[14] + 8))(*(void *)(v36[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v39;
  if (*((void *)&v39 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v39 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  memset(&v44, 0, 24);
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&v44, (long long *)v69.__begin_, (long long *)v69.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v69.__end_ - (char *)v69.__begin_) >> 3));
  memset(&v70, 0, sizeof(v70));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v70, (long long *)v68.__r_.__value_.__l.__data_, (long long *)v68.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v68.__r_.__value_.__l.__size_ - v68.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  v71[0] = (void **)&v70;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v71);
  v71[0] = (void **)&v44;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v71);
  if (v47.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v47.__r_.__value_.__l.__size_);
  }
  if (*v36) {
    Espresso::sequential_builder::add_shape_from_kernel();
  }
  v44.__first_ = &v68;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v44);
  v44.__first_ = (std::__split_buffer<std::string>::pointer)&v69;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v44);
  if (*((void *)&v39 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v39 + 1));
  }
  v44.__first_ = &v37;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v44);
  v44.__first_ = &v38;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v44);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v64);
  unsigned __int8 v49 = &unk_1EF0D8E08;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(&v50);
  v44.__first_ = (std::__split_buffer<std::string>::pointer)&v61;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v44);
  v44.__first_ = (std::__split_buffer<std::string>::pointer)&v64;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v44);
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v67.__r_.__value_.__l.__data_);
  }
}

void sub_19EA845BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__split_buffer<std::string> *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *__pa,uint64_t a45,int a46,__int16 a47,char a48,char a49,void **a50)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a28);
  if (*(char *)(v52 - 137) < 0) {
    operator delete(*(void **)(v52 - 160));
  }
  if (a49 < 0) {
    operator delete(__pa);
  }
  if (a43 < 0) {
    operator delete(a38);
  }
  *(void *)(v52 - 160) = v52 - 136;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v52 - 160));
  if (*(char *)(v52 - 89) < 0) {
    operator delete(*(void **)(v52 - 112));
  }
  a50 = v51;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v50);
  a50 = (void **)(v52 - 240);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a50);
  a50 = (void **)(v52 - 216);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a50);
  if (*(char *)(v52 - 169) < 0) {
    operator delete(*(void **)(v52 - 192));
  }
  _Unwind_Resume(a1);
}

void LayerTranslator::addCrop(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  uint64_t v4 = (long long *)*((void *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v80, *(const std::string::value_type **)v4, *((void *)v4 + 1));
  }
  else
  {
    long long v5 = *v4;
    v80.__r_.__value_.__r.__words[2] = *((void *)v4 + 2);
    *(_OWORD *)&v80.__r_.__value_.__l.__data_ = v5;
  }
  long long v77 = 0;
  std::string::size_type v78 = 0;
  uint64_t v79 = 0;
  int v74 = 0;
  uint64_t v75 = 0;
  uint64_t v76 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v77, (uint64_t *)&v74, *((void *)this + 1));
  if (*((_DWORD *)a2 + 35) == 190)
  {
    long long v7 = (const CoreML::Specification::CropLayerParams *)*((void *)a2 + 16);
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    long long v7 = (const CoreML::Specification::CropLayerParams *)&CoreML::Specification::_CropLayerParams_default_instance_;
  }
  CoreML::Specification::CropLayerParams::CropLayerParams((CoreML::Specification::CropLayerParams *)v70, v7);
  int32x4_t v69 = 0uLL;
  uint64_t v8 = v73;
  if (!v73) {
    uint64_t v8 = &CoreML::Specification::_BorderAmounts_default_instance_;
  }
  int v9 = *((_DWORD *)v8 + 6);
  if (v9)
  {
    if (v9 != 2)
    {
      exceptiounint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      std::string v40 = std::string::append((std::string *)v85, " , crop border amounts must be specified for both height and width, if set");
      long long v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
      *(void *)&v64[16] = *((void *)&v40->__r_.__value_.__l + 2);
      *(_OWORD *)uint64_t v64 = v41;
      v40->__r_.__value_.__l.__size_ = 0;
      v40->__r_.__value_.__r.__words[2] = 0;
      v40->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, (const std::string *)v64);
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    uint64_t v10 = v74;
    if (v75 - v74 == 24)
    {
      int32x4_t v69 = vuzp1q_s32(*(int32x4_t *)(*(void *)(v8[4] + 16) + 16), *(int32x4_t *)(*(void *)(v8[4] + 8) + 16));
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t v10 = v74;
    if (v75 - v74 == 24) {
      goto LABEL_17;
    }
  }
  if (v71 != 2)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v64);
    uint64_t v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v64[16], (uint64_t)"Crop Layer: ", 12);
    uint64_t v43 = *((void *)a2 + 14);
    int v44 = *(char *)(v43 + 23);
    if (v44 >= 0) {
      uint64_t v45 = *((void *)a2 + 14);
    }
    else {
      uint64_t v45 = *(void *)v43;
    }
    if (v44 >= 0) {
      uint64_t v46 = *(unsigned __int8 *)(v43 + 23);
    }
    else {
      uint64_t v46 = *(void *)(v43 + 8);
    }
    std::string v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, v45, v46);
    std::string v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)" , must be provided exactly 2 offset values when it has 2 inputs", 64);
    std::endl[abi:ne180100]<char,std::char_traits<char>>(v48);
    unsigned __int8 v49 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(v49, (const std::string *)v85);
    __cxa_throw(v49, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  long long v11 = (uint64_t **)*((void *)this + 1);
  *(void *)uint64_t v64 = v10;
  int v12 = *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v11, v10, (long long **)v64)+ 15);
  size_t v13 = (uint64_t **)*((void *)this + 1);
  *(void *)uint64_t v64 = v74;
  int v14 = *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v13, v74, (long long **)v64)+ 14);
  char v15 = (uint64_t **)*((void *)this + 1);
  *(void *)uint64_t v64 = v74 + 24;
  int v16 = *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v15, (void *)v74 + 3, (long long **)v64)+ 15);
  std::string v17 = (uint64_t **)*((void *)this + 1);
  *(void *)uint64_t v64 = v74 + 24;
  int v18 = *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v17, (void *)v74 + 3, (long long **)v64)+ 14);
  __int32 v19 = *(_DWORD *)(v72 + 16);
  v69.i32[2] = *(_DWORD *)(v72 + 8);
  v69.i32[3] = v12 - v69.i32[2] - v16;
  v69.i32[0] = v19;
  v69.i32[1] = v14 - v19 - v18;
  if (v16 == -1 || v18 == -1)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v64);
    uint64_t v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v64[16], (uint64_t)"Crop Layer: '", 13);
    uint64_t v51 = *((void *)a2 + 14);
    int v52 = *(char *)(v51 + 23);
    if (v52 >= 0) {
      uint64_t v53 = *((void *)a2 + 14);
    }
    else {
      uint64_t v53 = *(void *)v51;
    }
    if (v52 >= 0) {
      uint64_t v54 = *(unsigned __int8 *)(v51 + 23);
    }
    else {
      uint64_t v54 = *(void *)(v51 + 8);
    }
    char v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, v53, v54);
    char v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"': unable to determine the spatial dimensions of the second input blob. ", 72);
    std::endl[abi:ne180100]<char,std::char_traits<char>>(v56);
    uint64_t v57 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(v57, (const std::string *)v85);
    __cxa_throw(v57, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
LABEL_17:
  int v20 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "crop");
  memset(&v59, 0, sizeof(v59));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v59, (long long *)v74, (long long *)v75, 0xAAAAAAAAAAAAAAABLL * ((v75 - v74) >> 3));
  memset(&v58, 0, sizeof(v58));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v58, v77, v78, 0xAAAAAAAAAAAAAAABLL * (((char *)v78 - (char *)v77) >> 3));
  *(void *)&long long v82 = 0;
  long long v81 = 0uLL;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&v81, (long long *)v59.__r_.__value_.__l.__data_, (long long *)v59.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v59.__r_.__value_.__l.__size_ - v59.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v90, 0, sizeof(v90));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v90, (long long *)v58.__r_.__value_.__l.__data_, (long long *)v58.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v58.__r_.__value_.__l.__size_ - v58.__r_.__value_.__r.__words[0]) >> 3));
  *(_DWORD *)uint64_t v64 = (***(uint64_t (****)(void))(v20[14] + 8))(*(void *)(v20[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  uint64_t v92 = v62;
  unint64_t v93 = v63;
  if (v63) {
    atomic_fetch_add_explicit(&v63->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(v64, 0, 24);
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v64, (long long *)v81, *((long long **)&v81 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v81 + 1) - v81) >> 3));
  memset(v85, 0, 24);
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v85, (long long *)v90.__r_.__value_.__l.__data_, (long long *)v90.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v90.__r_.__value_.__l.__size_ - v90.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  long long v94 = (void **)v85;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v94);
  long long v94 = (void **)v64;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v94);
  if (v93) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v93);
  }
  if (*v20) {
    Espresso::sequential_builder::add_shape_from_kernel();
  }
  *(void *)uint64_t v64 = &v90;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v64);
  *(void *)uint64_t v64 = &v81;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v64);
  *(void *)uint64_t v64 = &v58;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v64);
  *(void *)uint64_t v64 = &v59;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v64);
  if (v61 < 0) {
    operator delete(__p[0]);
  }
  if (**((unsigned char **)this + 2))
  {
    LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v77);
    goto LABEL_49;
  }
  int v22 = (uint64_t **)*((void *)this + 1);
  if (*((_DWORD *)a2 + 35) == 190)
  {
    int v23 = (const CoreML::Specification::CropLayerParams *)*((void *)a2 + 16);
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v21);
    int v23 = (const CoreML::Specification::CropLayerParams *)&CoreML::Specification::_CropLayerParams_default_instance_;
  }
  CoreML::Specification::CropLayerParams::CropLayerParams((CoreML::Specification::CropLayerParams *)&v90, v23);
  uint64_t v24 = std::map<std::string,std::string>::at((uint64_t)v22, v74);
  *(_OWORD *)uint64_t v64 = *(_OWORD *)v24;
  *(_OWORD *)&v64[16] = *(_OWORD *)(v24 + 16);
  uint64_t v65 = *(void *)(v24 + 32);
  uint64_t v66 = 0;
  uint64_t v67 = 0;
  uint64_t v68 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v66, *(const void **)(v24 + 40), *(void *)(v24 + 48), (uint64_t)(*(void *)(v24 + 48) - *(void *)(v24 + 40)) >> 2);
  *(_OWORD *)unint64_t v85 = *(_OWORD *)v64;
  *(_OWORD *)&v85[16] = *(_OWORD *)&v64[16];
  long long v25 = v66;
  uint64_t v86 = v65;
  uint64_t v87 = 0;
  uint64_t v88 = 0;
  uint64_t v89 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v87, v66, v67, (v67 - (uint64_t)v66) >> 2);
  if (v75 - v74 == 24)
  {
    uint64_t v26 = v91;
    if (!v91) {
      uint64_t v26 = &CoreML::Specification::_BorderAmounts_default_instance_;
    }
    int v27 = *((_DWORD *)v26 + 6);
    if (v27)
    {
      uint64_t v28 = v26[4];
      uint64_t v30 = *(void *)(v28 + 8);
      uint64_t v29 = *(void *)(v28 + 16);
      int v31 = *(_DWORD *)(v29 + 16);
      int v32 = *(_DWORD *)(v29 + 24);
      int v33 = *(_DWORD *)(v30 + 24) + *(_DWORD *)(v30 + 16);
      int v27 = v32 + v31;
    }
    else
    {
      int v33 = 0;
    }
    *(_DWORD *)unint64_t v85 = *(_DWORD *)v64 - v27;
    *(_DWORD *)&v85[4] = *(_DWORD *)&v64[4] - v33;
    if (*(_DWORD *)&v64[4] == -1) {
      *(_DWORD *)&v85[4] = -1;
    }
    if (*(_DWORD *)v64 != -1) {
      goto LABEL_42;
    }
    int v34 = -1;
  }
  else
  {
    *(void *)&long long v81 = v74 + 24;
    *(_DWORD *)&v85[4] = *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v22, (void *)v74 + 3, (long long **)&v81)+ 15);
    *(void *)&long long v81 = v74 + 24;
    int v34 = *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v22, (void *)v74 + 3, (long long **)&v81)+ 14);
  }
  *(_DWORD *)unint64_t v85 = v34;
LABEL_42:
  long long v81 = *(_OWORD *)v85;
  long long v82 = *(_OWORD *)&v85[16];
  uint64_t v35 = v87;
  uint64_t v83 = v86;
  memset(v84, 0, sizeof(v84));
  uint64_t v36 = v88;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v84, v87, v88, (v88 - (uint64_t)v87) >> 2);
  EspressoConverter::validateShape((int *)&v81, *((void *)a2 + 14), (uint64_t)v77);
  if (v84[0]) {
    operator delete(v84[0]);
  }
  __p[0] = v77;
  std::string v37 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v22, v77, (long long **)__p);
  long long v38 = *(_OWORD *)&v85[16];
  *(_OWORD *)(v37 + 5CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = *(_OWORD *)v85;
  *(_OWORD *)(v37 + 72) = v38;
  *((void *)v37 + 11) = v86;
  std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v37 + 96, v35, v36, (v36 - (uint64_t)v35) >> 2);
  if (v35) {
    operator delete(v35);
  }
  if (v25) {
    operator delete(v25);
  }
  CoreML::Specification::CropLayerParams::~CropLayerParams((CoreML::Specification::CropLayerParams *)&v90);
LABEL_49:
  if (v63) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v63);
  }
  CoreML::Specification::CropLayerParams::~CropLayerParams((CoreML::Specification::CropLayerParams *)v70);
  *(void *)uint64_t v64 = &v74;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v64);
  *(void *)uint64_t v64 = &v77;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v64);
  if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v80.__r_.__value_.__l.__data_);
  }
}

void sub_19EA85018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (*(char *)(v72 - 201) < 0)
  {
    operator delete(*(void **)(v72 - 224));
    if ((v71 & 1) == 0)
    {
LABEL_6:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a21);
      CoreML::Specification::CropLayerParams::~CropLayerParams((CoreML::Specification::CropLayerParams *)&a60);
      a60 = (uint64_t)&a67;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a60);
      a60 = (uint64_t)&a70;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a60);
      if (SLOBYTE(STACK[0x217]) < 0) {
        operator delete((void *)STACK[0x200]);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v71)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v70);
  goto LABEL_6;
}

void LayerTranslator::addRangeStatic(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  uint64_t v4 = (long long *)*((void *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v28, *(const std::string::value_type **)v4, *((void *)v4 + 1));
  }
  else
  {
    long long v5 = *v4;
    v28.__r_.__value_.__r.__words[2] = *((void *)v4 + 2);
    *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v5;
  }
  long long v25 = 0;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  int v22 = 0;
  int v23 = 0;
  uint64_t v24 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v25, (uint64_t *)&v22, *((void *)this + 1));
  if (*((_DWORD *)a2 + 35) == 635)
  {
    long long v7 = (uint64_t *)*((void *)a2 + 16);
    int v19 = *((_DWORD *)v7 + 4);
LABEL_8:
    int v20 = *((_DWORD *)v7 + 5);
    goto LABEL_9;
  }
  unint64_t inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
  int v9 = *((_DWORD *)a2 + 35);
  int v19 = qword_1EB4E0A58;
  if (v9 == 635)
  {
    long long v7 = (uint64_t *)*((void *)a2 + 16);
    goto LABEL_8;
  }
  long long v11 = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
  int v12 = *((_DWORD *)a2 + 35);
  int v20 = HIDWORD(qword_1EB4E0A58);
  if (v12 == 635)
  {
    long long v7 = (uint64_t *)*((void *)a2 + 16);
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v11);
    long long v7 = &CoreML::Specification::_RangeStaticLayerParams_default_instance_;
  }
LABEL_9:
  int v21 = *((_DWORD *)v7 + 6);
  uint64_t v10 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "range");
  memset(&v14, 0, sizeof(v14));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v14, (long long *)v22, v23, 0xAAAAAAAAAAAAAAABLL * (((char *)v23 - (char *)v22) >> 3));
  memset(&v13, 0, sizeof(v13));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v13, v25, v26, 0xAAAAAAAAAAAAAAABLL * (((char *)v26 - (char *)v25) >> 3));
  Espresso::sequential_builder::add<Espresso::range_params_t>(&v17, v10, (uint64_t)__p, (uint64_t)&v28, (uint64_t)&v19, (long long *)v14.__r_.__value_.__l.__data_, (long long *)v14.__r_.__value_.__l.__size_, (long long **)&v13);
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  uint64_t v29 = &v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  uint64_t v29 = &v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  if (v16 < 0) {
    operator delete(__p[0]);
  }
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v25);
  __p[0] = &v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  int v22 = (void **)&v25;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v22);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
}

void sub_19EA85470(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  *(void *)(v27 - 40) = v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v27 - 40));
  *(void *)(v27 - 40) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v27 - 40));
  if (a21 < 0) {
    operator delete(__p);
  }
  std::string __p = &a26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  a26 = v27 - 88;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a26);
  if (*(char *)(v27 - 41) < 0) {
    operator delete(*(void **)(v27 - 64));
  }
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::add<Espresso::range_params_t>(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, long long *a6, long long *a7, long long **a8)
{
  memset(&v13, 0, sizeof(v13));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v13, a6, a7, 0xAAAAAAAAAAAAAAABLL * (((char *)a7 - (char *)a6) >> 3));
  memset(&v12, 0, sizeof(v12));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v12, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a8[1] - (char *)*a8) >> 3));
  LODWORD(v15.__r_.__value_.__l.__data_) = (***(uint64_t (****)(void))(a2[14] + 8))(*(void *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  long long v11 = (std::__shared_weak_count *)a1[1];
  uint64_t v16 = *a1;
  uint64_t v17 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(&v15, 0, sizeof(v15));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v15, (long long *)v13.__r_.__value_.__l.__data_, (long long *)v13.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13.__r_.__value_.__l.__size_ - v13.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v14, 0, sizeof(v14));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v14, (long long *)v12.__r_.__value_.__l.__data_, (long long *)v12.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12.__r_.__value_.__l.__size_ - v12.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  int v18 = &v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  int v18 = &v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (*a2) {
    Espresso::sequential_builder::add_shape_from_kernel();
  }
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
}

void sub_19EA856D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v16 = *(std::__shared_weak_count **)(v13 + 8);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  *(void *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(void *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void LayerTranslator::addRangeDynamic(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  uint64_t v4 = (long long *)*((void *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)v4, *((void *)v4 + 1));
  }
  else
  {
    long long v5 = *v4;
    v25.__r_.__value_.__r.__words[2] = *((void *)v4 + 2);
    *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v5;
  }
  int v22 = 0;
  int v23 = 0;
  uint64_t v24 = 0;
  int v19 = 0;
  int v20 = 0;
  uint64_t v21 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v22, (uint64_t *)&v19, *((void *)this + 1));
  uint64_t v17 = 1065353216;
  int v18 = 1065353216;
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((v20 - (char *)v19) >> 3);
  if (v7 == 2)
  {
    int v9 = *((_DWORD *)a2 + 35);
    goto LABEL_10;
  }
  if (v7 != 1) {
    goto LABEL_14;
  }
  if (*((_DWORD *)a2 + 35) != 640)
  {
    unint64_t inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
    int v9 = *((_DWORD *)a2 + 35);
    HIDWORD(v17) = qword_1EB4E0E80;
LABEL_10:
    if (v9 == 640)
    {
      uint64_t v8 = (uint64_t *)*((void *)a2 + 16);
    }
    else
    {
      CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
      uint64_t v8 = &CoreML::Specification::_RangeDynamicLayerParams_default_instance_;
    }
    goto LABEL_13;
  }
  uint64_t v8 = (uint64_t *)*((void *)a2 + 16);
  HIDWORD(v17) = *((_DWORD *)v8 + 4);
LABEL_13:
  int v18 = *((_DWORD *)v8 + 5);
LABEL_14:
  uint64_t v10 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "range");
  memset(&v12, 0, sizeof(v12));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v12, (long long *)v19, (long long *)v20, 0xAAAAAAAAAAAAAAABLL * ((v20 - (char *)v19) >> 3));
  memset(&v11, 0, sizeof(v11));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v11, v22, v23, 0xAAAAAAAAAAAAAAABLL * (((char *)v23 - (char *)v22) >> 3));
  Espresso::sequential_builder::add<Espresso::range_params_t>(&v15, v10, (uint64_t)__p, (uint64_t)&v25, (uint64_t)&v17, (long long *)v12.__r_.__value_.__l.__data_, (long long *)v12.__r_.__value_.__l.__size_, (long long **)&v11);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  uint64_t v26 = &v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
  uint64_t v26 = &v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v22);
  __p[0] = &v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  int v19 = (void **)&v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
}

void sub_19EA85978(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  *(void *)(v27 - 40) = v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v27 - 40));
  *(void *)(v27 - 40) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v27 - 40));
  if (a21 < 0) {
    operator delete(__p);
  }
  std::string __p = &a26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  a26 = v27 - 88;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a26);
  if (*(char *)(v27 - 41) < 0) {
    operator delete(*(void **)(v27 - 64));
  }
  _Unwind_Resume(a1);
}

uint64_t LayerTranslator::addBranch(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  uint64_t v4 = (long long *)*((void *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v65, *(const std::string::value_type **)v4, *((void *)v4 + 1));
  }
  else
  {
    long long v5 = *v4;
    v65.__r_.__value_.__r.__words[2] = *((void *)v4 + 2);
    *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v5;
  }
  memset(v64, 0, sizeof(v64));
  char v61 = 0;
  uint64_t v62 = 0;
  uint64_t v63 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, v64, (uint64_t *)&v61, *((void *)this + 1));
  if (*((_DWORD *)a2 + 35) == 605)
  {
    unint64_t v7 = (uint64_t *)*((void *)a2 + 16);
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    unint64_t v7 = &CoreML::Specification::_BranchLayerParams_default_instance_;
  }
  char v56 = (void **)&unk_1EF0D2328;
  unint64_t v57 = 0;
  int v60 = 0;
  uint64_t v8 = v7[1];
  if (v8) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&v57, v8 & 0xFFFFFFFFFFFFFFFELL);
  }
  if (v7 == &CoreML::Specification::_BranchLayerParams_default_instance_)
  {
    std::string v58 = 0;
  }
  else
  {
    if (v7[2]) {
      operator new();
    }
    std::string v58 = 0;
    if (v7[3]) {
      operator new();
    }
  }
  std::string v59 = 0;
  int v9 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(&v69, "cf_if");
  if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v65.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v65.__r_.__value_.__l.__size_;
  }
  std::string v11 = &v68;
  std::string::basic_string[abi:ne180100]((uint64_t)&v68, size + 3);
  if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string v11 = (std::string *)v68.__r_.__value_.__r.__words[0];
  }
  if (size)
  {
    if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string v12 = &v65;
    }
    else {
      std::string v12 = (std::string *)v65.__r_.__value_.__r.__words[0];
    }
    memmove(v11, v12, size);
  }
  *(_DWORD *)((char *)&v11->__r_.__value_.__l.__data_ + size) = 6711647;
  memset(&v53, 0, sizeof(v53));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v53, v61, v62, 0xAAAAAAAAAAAAAAABLL * (((char *)v62 - (char *)v61) >> 3));
  memset(v52, 0, sizeof(v52));
  Espresso::sequential_builder::add<Espresso::cf_if_params_t>(&v54, v9, (uint64_t)&v69, (uint64_t)&v68, (uint64_t)&v66, (long long *)v53.__r_.__value_.__l.__data_, (long long *)v53.__r_.__value_.__l.__size_, v52);
  if (v55) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v55);
  }
  v67.__r_.__value_.__r.__words[0] = (std::string::size_type)v52;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v67);
  v67.__r_.__value_.__r.__words[0] = (std::string::size_type)&v53;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v67);
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v68.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v69.__r_.__value_.__l.__data_);
  }
  uint64_t v13 = &CoreML::Specification::_NeuralNetwork_default_instance_;
  if (v58) {
    char v14 = v58;
  }
  else {
    char v14 = &CoreML::Specification::_NeuralNetwork_default_instance_;
  }
  uint64_t v15 = (void *)*((void *)this + 1);
  uint64_t v16 = (char *)*((void *)this + 2);
  char v17 = *v16;
  int v18 = *((_DWORD *)v16 + 1);
  int v19 = *((_DWORD *)v16 + 2) + 1;
  LODWORD(v1CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = *((_DWORD *)v16 + 3);
  v48[0] = v17;
  int v49 = v18;
  int v50 = v19;
  int v51 = (int)v16;
  uint64_t v20 = EspressoConverter::convertNeuralNetwork((uint64_t)v14, *(void **)this, v15, (uint64_t)v48);
  *(_DWORD *)(*((void *)this + 2) + 4) = v49;
  if (v59) {
    uint64_t v13 = v59;
  }
  if (*((int *)v13 + 6) > 0)
  {
    uint64_t v21 = *(void **)this;
    std::string::basic_string[abi:ne180100]<0>(&v44, "cf_else");
    if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v22 = HIBYTE(v65.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v22 = v65.__r_.__value_.__l.__size_;
    }
    int v23 = __p;
    std::string::basic_string[abi:ne180100]((uint64_t)__p, v22 + 5);
    if (v43 < 0) {
      int v23 = (void **)__p[0];
    }
    if (v22)
    {
      if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v24 = &v65;
      }
      else {
        uint64_t v24 = (std::string *)v65.__r_.__value_.__r.__words[0];
      }
      memmove(v23, v24, v22);
    }
    strcpy((char *)v23 + v22, "_else");
    memset(v41, 0, sizeof(v41));
    memset(v40, 0, sizeof(v40));
    memset(&v67, 0, sizeof(v67));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v67, 0, 0, 0);
    memset(&v66, 0, sizeof(v66));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v66, 0, 0, 0);
    LODWORD(v69.__r_.__value_.__l.__data_) = (***(uint64_t (****)(void))(v21[14] + 8))(*(void *)(v21[14] + 8));
    Espresso::abstract_engine_factory::make_kernel_priv();
    uint64_t v70 = v46;
    int v71 = v47;
    if (v47) {
      atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    memset(&v69, 0, sizeof(v69));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v69, (long long *)v67.__r_.__value_.__l.__data_, (long long *)v67.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v67.__r_.__value_.__l.__size_ - v67.__r_.__value_.__r.__words[0]) >> 3));
    memset(&v68, 0, sizeof(v68));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v68, (long long *)v66.__r_.__value_.__l.__data_, (long long *)v66.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v66.__r_.__value_.__l.__size_ - v66.__r_.__value_.__r.__words[0]) >> 3));
    Espresso::sequential_builder::add_kernel_dbg();
    uint64_t v72 = &v68;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v72);
    uint64_t v72 = &v69;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v72);
    if (v71) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v71);
    }
    if (*v21) {
      Espresso::sequential_builder::add_shape_from_kernel();
    }
    v69.__r_.__value_.__r.__words[0] = (std::string::size_type)&v66;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v69);
    v69.__r_.__value_.__r.__words[0] = (std::string::size_type)&v67;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v69);
    if (v47) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v47);
    }
    v69.__r_.__value_.__r.__words[0] = (std::string::size_type)v40;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v69);
    v69.__r_.__value_.__r.__words[0] = (std::string::size_type)v41;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v69);
    if (v43 < 0) {
      operator delete(__p[0]);
    }
    if (v45 < 0) {
      operator delete(v44);
    }
    std::string v25 = (void *)*((void *)this + 1);
    uint64_t v26 = *((void *)this + 2);
    std::string::value_type v27 = *(unsigned char *)v26;
    unsigned int v28 = *(_DWORD *)(v26 + 4);
    int v29 = *(_DWORD *)(v26 + 8) + 1;
    LODWORD(v2CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = *(_DWORD *)(v26 + 12);
    v69.__r_.__value_.__s.__data_[0] = v27;
    *(std::string::size_type *)((char *)v69.__r_.__value_.__r.__words + 4) = __PAIR64__(v29, v28);
    HIDWORD(v69.__r_.__value_.__r.__words[1]) = v26;
    char v30 = EspressoConverter::convertNeuralNetwork((uint64_t)v13, *(void **)this, v25, (uint64_t)&v69);
    *(_DWORD *)(*((void *)this + 2) + 4) = HIDWORD(v69.__r_.__value_.__r.__words[0]);
    if (v30) {
      uint64_t v20 = 1;
    }
    else {
      uint64_t v20 = v20;
    }
  }
  int v31 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(&v69, "cf_end");
  if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v32 = HIBYTE(v65.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v32 = v65.__r_.__value_.__l.__size_;
  }
  int v33 = &v68;
  std::string::basic_string[abi:ne180100]((uint64_t)&v68, v32 + 4);
  if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    int v33 = (std::string *)v68.__r_.__value_.__r.__words[0];
  }
  if (v32)
  {
    if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v34 = &v65;
    }
    else {
      int v34 = (std::string *)v65.__r_.__value_.__r.__words[0];
    }
    memmove(v33, v34, v32);
  }
  strcpy((char *)v33 + v32, "_end");
  memset(v37, 0, sizeof(v37));
  memset(v36, 0, sizeof(v36));
  Espresso::sequential_builder::add<Espresso::cf_end_params_t>(&v38, v31, (uint64_t)&v69, (uint64_t)&v68, (uint64_t)&v66, 0, 0, v36);
  if (v39) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v39);
  }
  v67.__r_.__value_.__r.__words[0] = (std::string::size_type)v36;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v67);
  v67.__r_.__value_.__r.__words[0] = (std::string::size_type)v37;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v67);
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v68.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v69.__r_.__value_.__l.__data_);
  }
  CoreML::Specification::BranchLayerParams::~BranchLayerParams((CoreML::Specification::BranchLayerParams *)&v56);
  char v56 = (void **)&v61;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v56);
  char v56 = (void **)v64;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v56);
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v65.__r_.__value_.__l.__data_);
  }
  return v20;
}

void sub_19EA860DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,std::__shared_weak_count *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  if (a37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a37);
  }
  *(void *)(v48 - 72) = v48 - 184;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v48 - 72));
  *(void *)(v48 - 72) = v48 - 160;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v48 - 72));
  *(void *)(v48 - 72) = &a17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v48 - 72));
  *(void *)(v48 - 72) = &a20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v48 - 72));
  if (a29 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  CoreML::Specification::BranchLayerParams::~BranchLayerParams((CoreML::Specification::BranchLayerParams *)&a48);
  a48 = v48 - 256;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a48);
  a48 = v48 - 232;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a48);
  if (*(char *)(v48 - 185) < 0) {
    operator delete(*(void **)(v48 - 208));
  }
  _Unwind_Resume(a1);
}

void LayerTranslator::addPooling(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  uint64_t v4 = (long long *)*((void *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v112, *(const std::string::value_type **)v4, *((void *)v4 + 1));
  }
  else
  {
    long long v5 = *v4;
    v112.__r_.__value_.__r.__words[2] = *((void *)v4 + 2);
    *(_OWORD *)&v112.__r_.__value_.__l.__data_ = v5;
  }
  std::string::size_type v109 = 0;
  long long v110 = 0;
  uint64_t v111 = 0;
  std::string::size_type v106 = 0;
  long long v107 = 0;
  uint64_t v108 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v109, (uint64_t *)&v106, *((void *)this + 1));
  if (*((_DWORD *)a2 + 35) == 120)
  {
    unint64_t v7 = (const CoreML::Specification::PoolingLayerParams *)*((void *)a2 + 16);
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    unint64_t v7 = (const CoreML::Specification::PoolingLayerParams *)&CoreML::Specification::_PoolingLayerParams_default_instance_;
  }
  uint64_t v8 = CoreML::Specification::PoolingLayerParams::PoolingLayerParams((CoreML::Specification::PoolingLayerParams *)v96, v7);
  if (v97)
  {
    if (v97 != 2)
    {
      exceptiounint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      char v61 = std::string::append(&v123, " , if set, kernel size must be of length 2");
      long long v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
      v85.__r_.__value_.__r.__words[2] = v61->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v62;
      v61->__r_.__value_.__l.__size_ = 0;
      v61->__r_.__value_.__r.__words[2] = 0;
      v61->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v85);
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    if (!v103 && (!*(void *)(v98 + 8) || !*(void *)(v98 + 16)))
    {
      std::string v66 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      std::string v67 = std::string::append(&v123, " , kernel size cannot be 0");
      long long v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
      v85.__r_.__value_.__r.__words[2] = v67->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v68;
      v67->__r_.__value_.__l.__size_ = 0;
      v67->__r_.__value_.__r.__words[2] = 0;
      v67->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v66, &v85);
      __cxa_throw(v66, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  if (v99)
  {
    if (v99 != 2)
    {
      uint64_t v63 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      uint64_t v64 = std::string::append(&v123, " , if set, stride must be of length 2");
      long long v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
      v85.__r_.__value_.__r.__words[2] = v64->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v65;
      v64->__r_.__value_.__l.__size_ = 0;
      v64->__r_.__value_.__r.__words[2] = 0;
      v64->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v63, &v85);
      __cxa_throw(v63, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    if (!v103 && (!*(void *)(v100 + 8) || !*(void *)(v100 + 16)))
    {
      std::string v69 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      uint64_t v70 = std::string::append(&v123, " , stride cannot be 0");
      long long v71 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
      v85.__r_.__value_.__r.__words[2] = v70->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v71;
      v70->__r_.__value_.__l.__size_ = 0;
      v70->__r_.__value_.__r.__words[2] = 0;
      v70->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v69, &v85);
      __cxa_throw(v69, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  if (v105 == 32)
  {
    if ((*(_DWORD *)(v104 + 16) | 2) != 2)
    {
      uint64_t v75 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      uint64_t v76 = std::string::append(&v123, " , for include last pixel padding, padding amounts must be of length 2, if set");
      long long v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
      v85.__r_.__value_.__r.__words[2] = v76->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v77;
      v76->__r_.__value_.__l.__size_ = 0;
      v76->__r_.__value_.__r.__words[2] = 0;
      v76->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v75, &v85);
      __cxa_throw(v75, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    int v10 = 1;
  }
  else
  {
    if (v105 == 30)
    {
      int v9 = *(uint64_t **)(v104 + 16);
      if (!v9) {
        int v9 = &CoreML::Specification::_BorderAmounts_default_instance_;
      }
      if ((*((_DWORD *)v9 + 6) | 2) != 2)
      {
        uint64_t v72 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        unsigned int v73 = std::string::append(&v123, " , for valid padding, padding border amounts must be specified for both height and width, if set");
        long long v74 = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
        v85.__r_.__value_.__r.__words[2] = v73->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v74;
        v73->__r_.__value_.__l.__size_ = 0;
        v73->__r_.__value_.__r.__words[2] = 0;
        v73->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v72, &v85);
        __cxa_throw(v72, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
    }
    int v10 = 0;
  }
  LODWORD(v85.__r_.__value_.__l.__data_) = 0;
  HIDWORD(v85.__r_.__value_.__r.__words[1]) = 0;
  uint64_t v86 = 1;
  int v11 = 2;
  int v87 = 2;
  __int16 v88 = 1;
  long long v89 = 0u;
  long long v90 = 0u;
  uint64_t v91 = 0;
  uint64_t v92 = 0;
  uint64_t v93 = 0x100000001;
  uint64_t v94 = 0;
  uint64_t v95 = 0;
  if (v101 != 2)
  {
    if (v101) {
      goto LABEL_29;
    }
    int v11 = 1;
  }
  LODWORD(v85.__r_.__value_.__l.__data_) = v11;
LABEL_29:
  if (v97)
  {
    int64x2_t v12 = (int64x2_t)vextq_s8(*(int8x16_t *)(v98 + 8), *(int8x16_t *)(v98 + 8), 8uLL);
    std::string::size_type v13 = (std::string::size_type)vbsl_s8((int8x8_t)vmovn_s64(vceqzq_s64(v12)), (int8x8_t)0x300000003, (int8x8_t)vmovn_s64(v12));
  }
  else
  {
    std::string::size_type v13 = 0x300000003;
  }
  *(std::string::size_type *)((char *)v85.__r_.__value_.__r.__words + 4) = v13;
  if (v99)
  {
    int64x2_t v14 = (int64x2_t)vextq_s8(*(int8x16_t *)(v100 + 8), *(int8x16_t *)(v100 + 8), 8uLL);
    int8x8_t v15 = vbsl_s8((int8x8_t)vmovn_s64(vceqzq_s64(v14)), (int8x8_t)0x100000001, (int8x8_t)vmovn_s64(v14));
  }
  else
  {
    int8x8_t v15 = (int8x8_t)0x100000001;
  }
  v85.__r_.__value_.__r.__words[2] = (std::string::size_type)v15;
  if (v103) {
    *(_DWORD *)((char *)&v90 + 2) = 1;
  }
  if (v105 <= 30)
  {
    if (v105 != 30)
    {
      if (v105) {
        goto LABEL_68;
      }
      unsigned int v28 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x19F3C1380](v28, "Pooling padding type not set");
      goto LABEL_136;
    }
    int v87 = 0;
    int v18 = *(uint64_t **)(v104 + 16);
    if (!v18) {
      int v18 = &CoreML::Specification::_BorderAmounts_default_instance_;
    }
    if (*((_DWORD *)v18 + 6))
    {
      uint64_t v19 = v18[4];
      uint64_t v20 = *(void *)(v19 + 8);
      uint64_t v21 = *(void *)(v19 + 16);
      uint64_t v23 = *(void *)(v20 + 16);
      uint64_t v22 = *(void *)(v20 + 24);
      uint64_t v24 = *(void *)(v21 + 16);
      uint64_t v25 = *(void *)(v21 + 24);
      if (v24) {
        goto LABEL_62;
      }
    }
    else
    {
      LOWORD(v24) = 0;
      uint64_t v25 = 0;
      uint64_t v23 = 0;
      uint64_t v22 = 0;
    }
    if (!v25 && !v22 && !v23)
    {
      __int16 v27 = 2;
      goto LABEL_61;
    }
LABEL_62:
    __int16 v88 = 0;
    WORD3(v89) = v24;
    WORD4(v89) = v25;
    WORD5(v89) = v23;
    WORD6(v89) = v22;
    goto LABEL_68;
  }
  if (v105 == 31)
  {
    int v87 = 0;
    int v26 = *(_DWORD *)(v104 + 16);
    if (v26 == 1)
    {
      __int16 v27 = 4;
      goto LABEL_61;
    }
    if (!v26)
    {
      __int16 v27 = 1;
LABEL_61:
      __int16 v88 = v27;
      goto LABEL_68;
    }
    unsigned int v28 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3C1380](v28, "Same Padding Mode not recognized");
LABEL_136:
    __cxa_throw(v28, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (v105 == 32)
  {
    int v87 = 2;
    __int16 v88 = 0;
    uint64_t v16 = (uint64_t *)v104;
    if (*(_DWORD *)(v104 + 16))
    {
      if (v10)
      {
        uint64_t v17 = *(void *)(*(void *)(v104 + 24) + 8);
      }
      else
      {
        unint64_t inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v8);
        uint64_t v17 = *(void *)(qword_1EB4E20B0 + 8);
        if (v105 == 32)
        {
          uint64_t v16 = (uint64_t *)v104;
        }
        else
        {
          CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
          uint64_t v16 = &CoreML::Specification::_PoolingLayerParams_ValidCompletePadding_default_instance_;
        }
      }
      __int16 v29 = *(_WORD *)(v16[3] + 16);
    }
    else
    {
      __int16 v29 = 0;
      LOWORD(v17) = 0;
    }
    WORD3(v89) = v29;
    WORD4(v89) = v29;
    WORD5(v89) = v17;
    WORD6(v89) = v17;
  }
LABEL_68:
  if (v102) {
    HIDWORD(v8CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = 1;
  }
  int v31 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "pool");
  memset(&v80, 0, sizeof(v80));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v80, v106, v107, 0xAAAAAAAAAAAAAAABLL * (((char *)v107 - (char *)v106) >> 3));
  memset(&v79, 0, sizeof(v79));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v79, v109, v110, 0xAAAAAAAAAAAAAAABLL * (((char *)v110 - (char *)v109) >> 3));
  *(void *)&long long v118 = 0;
  long long v117 = 0uLL;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&v117, (long long *)v80.__r_.__value_.__l.__data_, (long long *)v80.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v80.__r_.__value_.__l.__size_ - v80.__r_.__value_.__r.__words[0]) >> 3));
  long long v113 = 0uLL;
  *(void *)&long long v114 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&v113, (long long *)v79.__r_.__value_.__l.__data_, (long long *)v79.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v79.__r_.__value_.__l.__size_ - v79.__r_.__value_.__r.__words[0]) >> 3));
  LODWORD(v123.__r_.__value_.__l.__data_) = (***(uint64_t (****)(void))(v31[14] + 8))(*(void *)(v31[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  uint64_t v136 = v83;
  uint64_t v137 = v84;
  if (v84) {
    atomic_fetch_add_explicit(&v84->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(&v123, 0, sizeof(v123));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v123, (long long *)v117, *((long long **)&v117 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v117 + 1) - v117) >> 3));
  long long v130 = 0uLL;
  *(void *)&long long v131 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&v130, (long long *)v113, *((long long **)&v113 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v113 + 1) - v113) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  uint64_t v138 = (std::string *)&v130;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v138);
  uint64_t v138 = &v123;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v138);
  if (v137) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v137);
  }
  if (*v31) {
    Espresso::sequential_builder::add_shape_from_kernel();
  }
  v123.__r_.__value_.__r.__words[0] = (std::string::size_type)&v113;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v123);
  v123.__r_.__value_.__r.__words[0] = (std::string::size_type)&v117;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v123);
  v123.__r_.__value_.__r.__words[0] = (std::string::size_type)&v79;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v123);
  v123.__r_.__value_.__r.__words[0] = (std::string::size_type)&v80;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v123);
  if (v82 < 0) {
    operator delete(__p[0]);
  }
  if (**((unsigned char **)this + 2))
  {
    LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v109);
    goto LABEL_102;
  }
  std::string::size_type v32 = (uint64_t **)*((void *)this + 1);
  uint64_t v33 = std::map<std::string,std::string>::at((uint64_t)v32, v106);
  long long v130 = *(_OWORD *)v33;
  long long v131 = *(_OWORD *)(v33 + 16);
  uint64_t v132 = *(void *)(v33 + 32);
  long long v133 = 0;
  uint64_t v134 = 0;
  uint64_t v135 = 0;
  int v34 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v133, *(const void **)(v33 + 40), *(void *)(v33 + 48), (uint64_t)(*(void *)(v33 + 48)- *(void *)(v33 + 40)) >> 2);
  if (*((_DWORD *)a2 + 35) == 120)
  {
    uint64_t v35 = (const CoreML::Specification::PoolingLayerParams *)*((void *)a2 + 16);
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v34);
    uint64_t v35 = (const CoreML::Specification::PoolingLayerParams *)&CoreML::Specification::_PoolingLayerParams_default_instance_;
  }
  CoreML::Specification::PoolingLayerParams::PoolingLayerParams((CoreML::Specification::PoolingLayerParams *)&v123, v35);
  if (LODWORD(v123.__r_.__value_.__r.__words[2]))
  {
    int v36 = *(_DWORD *)(v124 + 8);
    int v37 = *(_DWORD *)(v124 + 16);
  }
  else
  {
    int v36 = 3;
    int v37 = 3;
  }
  if (v125) {
    int32x2_t v38 = vmovn_s64(*(int64x2_t *)(v126 + 8));
  }
  else {
    int32x2_t v38 = (int32x2_t)0x100000001;
  }
  int32x2_t v78 = v38;
  long long v117 = v130;
  long long v118 = v131;
  long long v39 = v133;
  uint64_t v119 = v132;
  uint64_t v120 = 0;
  uint64_t v122 = 0;
  uint64_t v121 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v120, v133, v134, (v134 - (uint64_t)v133) >> 2);
  if (v127)
  {
    int32x2_t v40 = (int32x2_t)0x100000001;
  }
  else
  {
    if (v129 <= 30)
    {
      if (v129 == 30)
      {
        int v49 = *(uint64_t **)(v128 + 16);
        if (!v49) {
          int v49 = &CoreML::Specification::_BorderAmounts_default_instance_;
        }
        int v50 = *((_DWORD *)v49 + 6);
        if (v50)
        {
          uint64_t v51 = v49[4];
          uint64_t v52 = *(void *)(v51 + 8);
          uint64_t v53 = *(void *)(v51 + 16);
          int v54 = *(_DWORD *)(v52 + 16);
          int v55 = *(_DWORD *)(v52 + 24);
          int v56 = *(_DWORD *)(v53 + 16);
          int v50 = *(_DWORD *)(v53 + 24);
        }
        else
        {
          int v56 = 0;
          int v55 = 0;
          int v54 = 0;
        }
        DWORD1(v117) = (v55 - v36 + v54 + DWORD1(v130)) / v78.i32[0] + 1;
        LODWORD(v117) = (v56 - v37 + v50 + (int)v130) / v78.i32[1] + 1;
      }
      else if (!v129)
      {
        unint64_t v57 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x19F3C1380](v57, "Pooling padding type not set");
        __cxa_throw(v57, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      goto LABEL_92;
    }
    if (v129 != 31)
    {
      if (v129 == 32)
      {
        int v46 = *(_DWORD *)(v128 + 16);
        if (v46)
        {
          uint64_t v47 = *(void *)(v128 + 24);
          int v46 = *(_DWORD *)(v47 + 8);
          int v48 = *(_DWORD *)(v47 + 16);
        }
        else
        {
          int v48 = 0;
        }
        unsigned int v58 = vcvtps_s32_f32((float)(DWORD1(v130) - v36 + 2 * v46) / (float)v78.i32[0]);
        DWORD1(v117) = v58 + 1;
        if (v46 | v48 && (int)(v78.i32[0] * v58) >= DWORD1(v130) + v46) {
          DWORD1(v117) = v58;
        }
        unsigned int v59 = vcvtps_s32_f32((float)(v130 - v37 + 2 * v48) / (float)v78.i32[1]);
        LODWORD(v117) = v59 + 1;
        if (v46 | v48 && (int)(v78.i32[1] * v59) >= (int)v130 + v48) {
          LODWORD(v117) = v59;
        }
      }
      goto LABEL_92;
    }
    int32x2_t v40 = vcvt_s32_f32(vrndp_f32(vdiv_f32(vcvt_f32_s32(*(int32x2_t *)&v130), (float32x2_t)vrev64_s32((int32x2_t)vcvt_f32_s32(v78)))));
  }
  *(int32x2_t *)&long long v117 = v40;
LABEL_92:
  if (DWORD1(v130) == -1) {
    DWORD1(v117) = -1;
  }
  if (v130 == -1) {
    LODWORD(v117) = -1;
  }
  long long v113 = v117;
  long long v114 = v118;
  long long v41 = v120;
  uint64_t v115 = v119;
  memset(v116, 0, sizeof(v116));
  uint64_t v42 = v121;
  unint64_t v43 = (v121 - (uint64_t)v120) >> 2;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v116, v120, v121, v43);
  EspressoConverter::validateShape((int *)&v113, *((void *)a2 + 14), (uint64_t)v109);
  if (v116[0]) {
    operator delete(v116[0]);
  }
  __p[0] = v109;
  int v44 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v32, v109, (long long **)__p);
  long long v45 = v118;
  *(_OWORD *)(v44 + 5CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = v117;
  *(_OWORD *)(v44 + 72) = v45;
  *((void *)v44 + 11) = v119;
  std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v44 + 96, v41, v42, v43);
  if (v41) {
    operator delete(v41);
  }
  CoreML::Specification::PoolingLayerParams::~PoolingLayerParams((CoreML::Specification::PoolingLayerParams *)&v123);
  if (v39) {
    operator delete(v39);
  }
LABEL_102:
  if (v84) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v84);
  }
  CoreML::Specification::PoolingLayerParams::~PoolingLayerParams((CoreML::Specification::PoolingLayerParams *)v96);
  v85.__r_.__value_.__r.__words[0] = (std::string::size_type)&v106;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v85);
  v85.__r_.__value_.__r.__words[0] = (std::string::size_type)&v109;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v85);
  if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v112.__r_.__value_.__l.__data_);
  }
}

void sub_19EA86F9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  __cxa_free_exception(v73);
  if (__p) {
    operator delete(__p);
  }
  CoreML::Specification::PoolingLayerParams::~PoolingLayerParams((CoreML::Specification::PoolingLayerParams *)(v74 - 248));
  if (v72) {
    operator delete(v72);
  }
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }
  CoreML::Specification::PoolingLayerParams::~PoolingLayerParams((CoreML::Specification::PoolingLayerParams *)&a38);
  a23 = &a49;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  a23 = &a52;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  if (a60 < 0) {
    operator delete(a55);
  }
  _Unwind_Resume(a1);
}

void LayerTranslator::addModBroadcastable(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  uint64_t v4 = (long long *)*((void *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)v4, *((void *)v4 + 1));
  }
  else
  {
    long long v5 = *v4;
    v23.__r_.__value_.__r.__words[2] = *((void *)v4 + 2);
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v5;
  }
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v17 = 0;
  int v18 = 0;
  uint64_t v19 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v20, (uint64_t *)&v17, *((void *)this + 1));
  v13[2] = (void **)897988541;
  int v15 = 0;
  int v16 = 0;
  v13[0] = (void **)36;
  v13[1] = (void **)1065353216;
  char v14 = 1;
  int v6 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
  memset(&v8, 0, sizeof(v8));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v8, v17, v18, 0xAAAAAAAAAAAAAAABLL * (((char *)v18 - (char *)v17) >> 3));
  memset(&v7, 0, sizeof(v7));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v7, v20, v21, 0xAAAAAAAAAAAAAAABLL * (((char *)v21 - (char *)v20) >> 3));
  Espresso::sequential_builder::add<Espresso::elementwise_params>(&v11, v6, (uint64_t)__p, (uint64_t)&v23, (uint64_t)v13, (long long *)v8.__r_.__value_.__l.__data_, (long long *)v8.__r_.__value_.__l.__size_, (long long **)&v7);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  uint64_t v24 = &v7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  uint64_t v24 = &v8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v20);
  v13[0] = (void **)&v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v13);
  v13[0] = (void **)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v13);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
}

void sub_19EA87384(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  a23 = v23 - 112;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  a23 = v23 - 88;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  if (*(char *)(v23 - 41) < 0) {
    operator delete(*(void **)(v23 - 64));
  }
  _Unwind_Resume(a1);
}

void LayerTranslator::addActivationsIOS13(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  uint64_t v4 = (long long *)*((void *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v47, *(const std::string::value_type **)v4, *((void *)v4 + 1));
  }
  else
  {
    long long v5 = *v4;
    v47.__r_.__value_.__r.__words[2] = *((void *)v4 + 2);
    *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v5;
  }
  int v44 = 0;
  long long v45 = 0;
  uint64_t v46 = 0;
  long long v41 = 0;
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v44, (uint64_t *)&v41, *((void *)this + 1));
  int v36 = 0;
  __asm { FMOV            V0.2S, #1.0 }
  uint64_t v37 = _D0;
  uint64_t v38 = 0;
  uint64_t v40 = 0;
  uint64_t v39 = 0;
  int v11 = *((_DWORD *)a2 + 35);
  if (v11 == 790)
  {
    int v36 = 20;
    goto LABEL_21;
  }
  if (v11 != 795) {
    goto LABEL_21;
  }
  uint64_t v12 = *((void *)a2 + 16);
  std::string::size_type v32 = (std::string *)&unk_1EF0D0E60;
  uint64_t v33 = 0;
  int v35 = 0;
  uint64_t v13 = *(void *)(v12 + 8);
  if (v13) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((unint64_t *)&v33, v13 & 0xFFFFFFFFFFFFFFFELL);
  }
  int v14 = *(_DWORD *)(v12 + 16);
  int v34 = v14;
  if (v14 <= 0)
  {
    if (!v14)
    {
      int v15 = 19;
      goto LABEL_16;
    }
    unsigned int v16 = 0x80000000;
LABEL_19:
    if (v14 == v16)
    {
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
      int v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31, (uint64_t)"Gelu layer: '", 13);
      uint64_t v19 = *((void *)a2 + 14);
      int v20 = *(char *)(v19 + 23);
      if (v20 >= 0) {
        uint64_t v21 = *((void *)a2 + 14);
      }
      else {
        uint64_t v21 = *(void *)v19;
      }
      if (v20 >= 0) {
        uint64_t v22 = *(unsigned __int8 *)(v19 + 23);
      }
      else {
        uint64_t v22 = *(void *)(v19 + 8);
      }
      uint64_t v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v21, v22);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"': unknown value for parameter 'mode'.", 38);
      exceptiounint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::runtime_error::runtime_error(exception, &v29);
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    goto LABEL_20;
  }
  if (v14 == 1)
  {
    int v15 = 21;
    goto LABEL_16;
  }
  if (v14 != 2)
  {
    unsigned int v16 = 0x7FFFFFFF;
    goto LABEL_19;
  }
  int v15 = 22;
LABEL_16:
  int v36 = v15;
LABEL_20:
  std::string::size_type v32 = (std::string *)&unk_1EF0D0E60;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(&v33);
LABEL_21:
  uint64_t v17 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "activation");
  memset(&v26, 0, sizeof(v26));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v26, v41, v42, 0xAAAAAAAAAAAAAAABLL * (((char *)v42 - (char *)v41) >> 3));
  memset(&v25, 0, sizeof(v25));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v25, v44, v45, 0xAAAAAAAAAAAAAAABLL * (((char *)v45 - (char *)v44) >> 3));
  Espresso::sequential_builder::add<Espresso::activation_params>(&v27, v17, (uint64_t)__p, (uint64_t)&v47, (uint64_t)&v36, (long long *)v26.__r_.__value_.__l.__data_, (long long *)v26.__r_.__value_.__l.__size_, (long long **)&v25);
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  std::string::size_type v32 = &v25;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
  std::string::size_type v32 = &v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
  if (SHIBYTE(v31) < 0) {
    operator delete(__p[0]);
  }
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v44);
  __p[0] = &v41;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  __p[0] = &v44;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v47.__r_.__value_.__l.__data_);
  }
}

void sub_19EA8771C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a22 < 0)
  {
    operator delete(__p);
    if ((v31 & 1) == 0)
    {
LABEL_6:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a23);
      *(void *)(v32 - 192) = v29;
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v28);
      a23 = (void *)(v32 - 128);
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
      a23 = (void *)(v32 - 104);
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
      if (*(char *)(v32 - 57) < 0) {
        operator delete(*(void **)(v32 - 80));
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v31)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v30);
  goto LABEL_6;
}

uint64_t LayerTranslator::addActivation(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  uint64_t v4 = (long long *)*((void *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v242, *(const std::string::value_type **)v4, *((void *)v4 + 1));
  }
  else
  {
    long long v5 = *v4;
    v242.__r_.__value_.__r.__words[2] = *((void *)v4 + 2);
    *(_OWORD *)&v242.__r_.__value_.__l.__data_ = v5;
  }
  v239 = 0;
  v240 = 0;
  uint64_t v241 = 0;
  v236 = 0;
  v237 = 0;
  uint64_t v238 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v239, (uint64_t *)&v236, *((void *)this + 1));
  if (*((_DWORD *)a2 + 35) == 130)
  {
    std::string v7 = (uint64_t *)*((void *)a2 + 16);
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    std::string v7 = &CoreML::Specification::_ActivationParams_default_instance_;
  }
  int v231 = 0;
  __asm { FMOV            V0.2S, #1.0 }
  uint64_t v232 = _D0;
  uint64_t v235 = 0;
  uint64_t v233 = 0;
  uint64_t v234 = 0;
  int v12 = *((_DWORD *)v7 + 7);
  if (v12 > 39)
  {
    if (v12 > 59)
    {
      switch(v12)
      {
        case '<':
          int v15 = 12;
          break;
        case 'F':
          int v15 = 10;
          break;
        case 'G':
          int v15 = 11;
          break;
        default:
          goto LABEL_37;
      }
    }
    else
    {
      if (v12 != 40)
      {
        if (v12 != 41)
        {
          if (v12 != 50) {
            goto LABEL_37;
          }
          int v13 = 8;
          goto LABEL_31;
        }
        int v14 = 7;
        goto LABEL_33;
      }
      int v15 = 3;
    }
  }
  else
  {
    if (v12 <= 24)
    {
      if (v12 != 5)
      {
        if (v12 == 15)
        {
          int v13 = 2;
        }
        else
        {
          if (v12 != 20) {
            goto LABEL_37;
          }
          int v13 = 9;
        }
LABEL_31:
        int v231 = v13;
        LODWORD(v232) = *(_DWORD *)(v7[2] + 16);
        goto LABEL_37;
      }
      int v14 = 6;
      goto LABEL_33;
    }
    switch(v12)
    {
      case 25:
        int v15 = 4;
        break;
      case 30:
        int v15 = 1;
        break;
      case 31:
        int v14 = 5;
LABEL_33:
        int v231 = v14;
        uint64_t v232 = *(void *)(v7[2] + 16);
        goto LABEL_37;
      default:
        goto LABEL_37;
    }
  }
  int v231 = v15;
LABEL_37:
  unsigned int v16 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(v251, "activation");
  memset(&v228, 0, sizeof(v228));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v228, v236, v237, 0xAAAAAAAAAAAAAAABLL * (((char *)v237 - (char *)v236) >> 3));
  memset(&v227, 0, sizeof(v227));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v227, v239, v240, 0xAAAAAAAAAAAAAAABLL * (((char *)v240 - (char *)v239) >> 3));
  Espresso::sequential_builder::add<Espresso::activation_params>(&v229, v16, (uint64_t)v251, (uint64_t)&v242, (uint64_t)&v231, (long long *)v228.__r_.__value_.__l.__data_, (long long *)v228.__r_.__value_.__l.__size_, (long long **)&v227);
  *(void *)v246 = &v227;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v246);
  *(void *)v246 = &v228;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v246);
  if ((v251[23] & 0x80000000) != 0) {
    operator delete(*(void **)v251);
  }
  int v18 = *((_DWORD *)v7 + 7);
  if (v18 != 25)
  {
    unsigned int v221 = 0;
    goto LABEL_178;
  }
  uint64_t v19 = v229;
  uint64_t v219 = v230;
  if (v230
    && (atomic_fetch_add_explicit(&v230->__shared_owners_, 1uLL, memory_order_relaxed), *((_DWORD *)v7 + 7) != 25))
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v17);
    int v21 = *((_DWORD *)v7 + 7);
    int v20 = &CoreML::Specification::_ActivationPReLU_default_instance_;
  }
  else
  {
    int v20 = (uint64_t *)v7[2];
    int v21 = 25;
  }
  uint64_t v22 = (uint64_t *)v20[2];
  if (v22) {
    uint64_t v23 = v22;
  }
  else {
    uint64_t v23 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  int WeightParamSize = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)EspressoConverter::getWeightParamSize((uint64_t)v23);
  uint64_t v25 = (uint64_t)WeightParamSize;
  if (v21 == 25)
  {
    std::string v26 = (uint64_t *)v7[2];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(WeightParamSize);
    std::string v26 = &CoreML::Specification::_ActivationPReLU_default_instance_;
  }
  uint64_t v27 = (uint64_t *)v26[2];
  if (!v27) {
    uint64_t v27 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  uint64_t v28 = v27[5];
  uint64_t v29 = *(unsigned __int8 *)(v28 + 23);
  if (*(char *)(v28 + 23) < 0) {
    uint64_t v30 = *(void *)(v28 + 8);
  }
  else {
    uint64_t v30 = *(unsigned __int8 *)(v28 + 23);
  }
  uint64_t v31 = v27[6];
  uint64_t v32 = *(unsigned __int8 *)(v31 + 23);
  if (*(char *)(v31 + 23) < 0) {
    uint64_t v33 = *(void *)(v31 + 8);
  }
  else {
    uint64_t v33 = *(unsigned __int8 *)(v31 + 23);
  }
  int v34 = *((_DWORD *)v27 + 4);
  uint64_t v35 = v27[7];
  uint64_t v36 = *(unsigned __int8 *)(v35 + 23);
  if (*(char *)(v35 + 23) < 0) {
    uint64_t v37 = *(void *)(v35 + 8);
  }
  else {
    uint64_t v37 = *(unsigned __int8 *)(v35 + 23);
  }
  if (v34 <= 0) {
    int v38 = 1;
  }
  else {
    int v38 = 2;
  }
  if (v30) {
    unsigned int v39 = v38;
  }
  else {
    unsigned int v39 = v34 > 0;
  }
  if (v33) {
    ++v39;
  }
  if (v37) {
    ++v39;
  }
  if (v39 <= 1)
  {
    if (v39) {
      unsigned int v40 = 0;
    }
    else {
      unsigned int v40 = 5;
    }
    if (v34 <= 0 && v39)
    {
      if ((v29 & 0x80) != 0) {
        uint64_t v29 = *(void *)(v28 + 8);
      }
      if (v29)
      {
        unsigned int v40 = 1;
      }
      else
      {
        if ((v32 & 0x80) != 0) {
          uint64_t v32 = *(void *)(v31 + 8);
        }
        uint64_t v41 = v27[8];
        if (v27 != &CoreML::Specification::_WeightParams_default_instance_ && v32 && v41)
        {
          uint64_t v25 = 1;
          unsigned int v40 = 2;
        }
        else
        {
          if ((v36 & 0x80) != 0) {
            uint64_t v36 = *(void *)(v35 + 8);
          }
          if (v41) {
            _ZF = v36 == 0;
          }
          else {
            _ZF = 1;
          }
          if (_ZF || v27 == &CoreML::Specification::_WeightParams_default_instance_) {
            unsigned int v40 = 5;
          }
          else {
            unsigned int v40 = 3;
          }
        }
      }
    }
  }
  else
  {
    unsigned int v40 = 4;
  }
  std::string::basic_string[abi:ne180100]<0>(v251, "PReLU");
  uint64_t v44 = std::map<std::string,std::string>::at(*((void *)this + 1), v236);
  int v45 = inferNumChannels((const void **)v251, (uint64_t)&v242, *(unsigned int *)(v44 + 8), v25, *((_DWORD *)a2 + 18), *((void *)a2 + 10));
  if ((v251[23] & 0x80000000) != 0) {
    operator delete(*(void **)v251);
  }
  if (v25 != 1
    && *(_DWORD *)(std::map<std::string,std::string>::at(*((void *)this + 1), v236) + 8) != -1
    && v25 != *(_DWORD *)(std::map<std::string,std::string>::at(*((void *)this + 1), v236) + 8))
  {
    exceptiounint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    uint64_t v204 = std::string::append(&v224, " , number of alpha parameters (");
    long long v205 = *(_OWORD *)&v204->__r_.__value_.__l.__data_;
    v225.__r_.__value_.__r.__words[2] = v204->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v225.__r_.__value_.__l.__data_ = v205;
    v204->__r_.__value_.__l.__size_ = 0;
    v204->__r_.__value_.__r.__words[2] = 0;
    v204->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v223, v25);
    if ((v223.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v206 = &v223;
    }
    else {
      uint64_t v206 = (std::string *)v223.__r_.__value_.__r.__words[0];
    }
    if ((v223.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v223.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v223.__r_.__value_.__l.__size_;
    }
    unint64_t v208 = std::string::append(&v225, (const std::string::value_type *)v206, size);
    long long v209 = *(_OWORD *)&v208->__r_.__value_.__l.__data_;
    v226.__r_.__value_.__r.__words[2] = v208->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v226.__r_.__value_.__l.__data_ = v209;
    v208->__r_.__value_.__l.__size_ = 0;
    v208->__r_.__value_.__r.__words[2] = 0;
    v208->__r_.__value_.__r.__words[0] = 0;
    unsigned __int8 v210 = std::string::append(&v226, ") is not equal to the channel dimension (");
    long long v211 = *(_OWORD *)&v210->__r_.__value_.__l.__data_;
    *(void *)&v243[16] = *((void *)&v210->__r_.__value_.__l + 2);
    *(_OWORD *)v243 = v211;
    v210->__r_.__value_.__l.__size_ = 0;
    v210->__r_.__value_.__r.__words[2] = 0;
    v210->__r_.__value_.__r.__words[0] = 0;
    uint64_t v212 = std::map<std::string,std::string>::at(*((void *)this + 1), v236);
    std::to_string(&v222, *(_DWORD *)(v212 + 8));
    if ((v222.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v213 = &v222;
    }
    else {
      uint64_t v213 = (std::string *)v222.__r_.__value_.__r.__words[0];
    }
    if ((v222.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v214 = HIBYTE(v222.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v214 = v222.__r_.__value_.__l.__size_;
    }
    uint64_t v215 = std::string::append((std::string *)v243, (const std::string::value_type *)v213, v214);
    long long v216 = *(_OWORD *)&v215->__r_.__value_.__l.__data_;
    *(void *)&v246[16] = *((void *)&v215->__r_.__value_.__l + 2);
    *(_OWORD *)v246 = v216;
    v215->__r_.__value_.__l.__size_ = 0;
    v215->__r_.__value_.__r.__words[2] = 0;
    v215->__r_.__value_.__r.__words[0] = 0;
    std::string v217 = std::string::append((std::string *)v246, ") of the input");
    long long v218 = *(_OWORD *)&v217->__r_.__value_.__l.__data_;
    *(void *)&v251[16] = *((void *)&v217->__r_.__value_.__l + 2);
    *(_OWORD *)v251 = v218;
    v217->__r_.__value_.__l.__size_ = 0;
    v217->__r_.__value_.__r.__words[2] = 0;
    v217->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, (const std::string *)v251);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v46 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(v243, v45, 1, 1, 1);
  if (v40 > 1)
  {
    if (*((_DWORD *)v7 + 7) == 25)
    {
      int v48 = (uint64_t *)v7[2];
    }
    else
    {
      CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v46);
      int v48 = &CoreML::Specification::_ActivationPReLU_default_instance_;
    }
    uint64_t v52 = (uint64_t *)v48[2];
    if (v52) {
      uint64_t v53 = v52;
    }
    else {
      uint64_t v53 = &CoreML::Specification::_WeightParams_default_instance_;
    }
    hasSufficientBytesInQuantizedWeightParauint64_t m = CoreML::hasSufficientBytesInQuantizedWeightParam(v53, (int)v25);
    if (!hasSufficientBytesInQuantizedWeightParam)
    {
      uint64_t v197 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      int v198 = std::string::append((std::string *)v246, " has insufficent bytes for quantized alpha parameters");
      long long v199 = *(_OWORD *)&v198->__r_.__value_.__l.__data_;
      *(void *)&v251[16] = *((void *)&v198->__r_.__value_.__l + 2);
      *(_OWORD *)v251 = v199;
      v198->__r_.__value_.__l.__size_ = 0;
      v198->__r_.__value_.__r.__words[2] = 0;
      v198->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v197, (const std::string *)v251);
      __cxa_throw(v197, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    if (*((_DWORD *)v7 + 7) == 25)
    {
      int v55 = (uint64_t *)v7[2];
    }
    else
    {
      CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)hasSufficientBytesInQuantizedWeightParam);
      int v55 = &CoreML::Specification::_ActivationPReLU_default_instance_;
    }
    int v56 = (const CoreML::Specification::WeightParams *)v55[2];
    if (v56) {
      unint64_t v57 = v56;
    }
    else {
      unint64_t v57 = (const CoreML::Specification::WeightParams *)&CoreML::Specification::_WeightParams_default_instance_;
    }
    EspressoConverter::readFloatFromWeightParams((EspressoConverter *)v251, v57, (int)v25);
    uint64_t v49 = *(void *)v243;
    unsigned int v58 = *(_DWORD **)(*(void *)v243 + 16);
    unsigned int v59 = *(void **)v251;
    if (v25 == 1)
    {
      if (v45 < 1) {
        goto LABEL_135;
      }
      int v60 = **(_DWORD **)v251;
      uint64_t v61 = v45;
      do
      {
        *v58++ = v60;
        --v61;
      }
      while (v61);
    }
    else if (v45 == v25 && v45 >= 1)
    {
      uint64_t v62 = v25;
      uint64_t v63 = *(int **)v251;
      do
      {
        int v64 = *v63++;
        *v58++ = v64;
        --v62;
      }
      while (v62);
      goto LABEL_135;
    }
    if (!v59) {
      goto LABEL_136;
    }
LABEL_135:
    operator delete(v59);
    goto LABEL_136;
  }
  if (v40 == 1)
  {
    if (*((_DWORD *)v7 + 7) == 25)
    {
      std::string v47 = (uint64_t *)v7[2];
    }
    else
    {
      CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v46);
      std::string v47 = &CoreML::Specification::_ActivationPReLU_default_instance_;
    }
    long long v65 = (uint64_t *)v47[2];
    if (!v65) {
      long long v65 = &CoreML::Specification::_WeightParams_default_instance_;
    }
    EspressoConverter::readHalfPrecisionWeightsFromByteStream((uint64_t)v251, (void **)v65[5]);
    uint64_t v49 = *(void *)v243;
    std::string v66 = *(_DWORD **)(*(void *)v243 + 16);
    std::string v67 = *(void **)v251;
    if (v25 == 1)
    {
      if (v45 < 1) {
        goto LABEL_167;
      }
      int v68 = **(_DWORD **)v251;
      uint64_t v69 = v45;
      do
      {
        *v66++ = v68;
        --v69;
      }
      while (v69);
    }
    else if (v45 == v25 && v45 >= 1)
    {
      uint64_t v77 = v25;
      int32x2_t v78 = *(int **)v251;
      do
      {
        int v79 = *v78++;
        *v66++ = v79;
        --v77;
      }
      while (v77);
      goto LABEL_167;
    }
    if (!v67)
    {
LABEL_168:
      unsigned int v221 = 1;
      goto LABEL_169;
    }
LABEL_167:
    operator delete(v67);
    goto LABEL_168;
  }
  uint64_t v49 = *(void *)v243;
  int v50 = *(_DWORD **)(*(void *)v243 + 16);
  if (*((_DWORD *)v7 + 7) == 25)
  {
    uint64_t v51 = (uint64_t *)v7[2];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v46);
    uint64_t v51 = &CoreML::Specification::_ActivationPReLU_default_instance_;
  }
  uint64_t v70 = (uint64_t *)v51[2];
  if (!v70) {
    uint64_t v70 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  uint64_t v71 = v70[3];
  if (v71) {
    uint64_t v72 = (int *)(v71 + 8);
  }
  else {
    uint64_t v72 = 0;
  }
  if (v25 == 1)
  {
    if (v45 >= 1)
    {
      int v73 = *v72;
      uint64_t v74 = v45;
      do
      {
        *v50++ = v73;
        --v74;
      }
      while (v74);
    }
  }
  else
  {
    unsigned int v221 = 0;
    if (v45 != v25 || v45 < 1) {
      goto LABEL_169;
    }
    uint64_t v75 = v25;
    do
    {
      int v76 = *v72++;
      *v50++ = v76;
      --v75;
    }
    while (v75);
  }
LABEL_136:
  unsigned int v221 = 0;
LABEL_169:
  *(_OWORD *)v246 = 0uLL;
  std::string::basic_string[abi:ne180100]<0>(v251, "params_prelu");
  (*(void (**)(uint64_t, unsigned char *, unsigned char *, void, uint64_t, void))(*(void *)v19 + 168))(v19, v246, v251, *(void *)(v49 + 16), 4 * *(int *)(v49 + 8), 0);
  if ((v251[23] & 0x80000000) != 0) {
    operator delete(*(void **)v251);
  }
  if (*(void *)&v246[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v246[8]);
  }
  uint64_t v17 = *(CoreML::Specification::protobuf_NeuralNetwork_2eproto **)&v243[8];
  if (*(void *)&v243[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v243[8]);
  }
  if (v219) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v219);
  }
  int v18 = *((_DWORD *)v7 + 7);
LABEL_178:
  if (v18 != 71) {
    goto LABEL_417;
  }
  uint64_t v80 = v229;
  v220 = v230;
  if (v230
    && (atomic_fetch_add_explicit(&v230->__shared_owners_, 1uLL, memory_order_relaxed), *((_DWORD *)v7 + 7) != 71))
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v17);
    long long v81 = &CoreML::Specification::_ActivationParametricSoftplus_default_instance_;
  }
  else
  {
    long long v81 = (uint64_t *)v7[2];
  }
  char v82 = (uint64_t *)v81[2];
  if (!v82) {
    char v82 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  uint64_t v83 = v82[5];
  uint64_t v84 = *(unsigned __int8 *)(v83 + 23);
  if (*(char *)(v83 + 23) < 0) {
    uint64_t v85 = *(void *)(v83 + 8);
  }
  else {
    uint64_t v85 = *(unsigned __int8 *)(v83 + 23);
  }
  uint64_t v86 = v82[6];
  uint64_t v87 = *(unsigned __int8 *)(v86 + 23);
  if (*(char *)(v86 + 23) < 0) {
    uint64_t v88 = *(void *)(v86 + 8);
  }
  else {
    uint64_t v88 = *(unsigned __int8 *)(v86 + 23);
  }
  int v89 = *((_DWORD *)v82 + 4);
  uint64_t v90 = v82[7];
  uint64_t v91 = *(unsigned __int8 *)(v90 + 23);
  if (*(char *)(v90 + 23) < 0) {
    uint64_t v92 = *(CoreML::Specification::protobuf_NeuralNetwork_2eproto **)(v90 + 8);
  }
  else {
    uint64_t v92 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)*(unsigned __int8 *)(v90 + 23);
  }
  if (v89 <= 0) {
    int v93 = 1;
  }
  else {
    int v93 = 2;
  }
  if (v85) {
    unsigned int v94 = v93;
  }
  else {
    unsigned int v94 = v89 > 0;
  }
  if (v88) {
    ++v94;
  }
  if (v92) {
    ++v94;
  }
  if (v94 <= 1)
  {
    if (v94) {
      int v95 = 0;
    }
    else {
      int v95 = 5;
    }
    if (v89 <= 0 && v94)
    {
      if ((v84 & 0x80) != 0) {
        uint64_t v84 = *(void *)(v83 + 8);
      }
      if (v84)
      {
        int v95 = 1;
      }
      else
      {
        if ((v87 & 0x80) != 0) {
          uint64_t v87 = *(void *)(v86 + 8);
        }
        uint64_t v96 = v82[8];
        if (v82 != &CoreML::Specification::_WeightParams_default_instance_ && v87 && v96)
        {
          int v95 = 2;
        }
        else
        {
          if ((v91 & 0x80) != 0) {
            uint64_t v91 = *(void *)(v90 + 8);
          }
          if (v96) {
            BOOL v97 = v91 == 0;
          }
          else {
            BOOL v97 = 1;
          }
          if (v97 || v82 == &CoreML::Specification::_WeightParams_default_instance_) {
            int v95 = 5;
          }
          else {
            int v95 = 3;
          }
        }
      }
    }
  }
  else
  {
    int v95 = 4;
  }
  if (*((_DWORD *)v7 + 7) == 71)
  {
    int v99 = (uint64_t *)v7[2];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v92);
    int v99 = &CoreML::Specification::_ActivationParametricSoftplus_default_instance_;
  }
  uint64_t v100 = (uint64_t *)v99[2];
  if (v100) {
    int v101 = v100;
  }
  else {
    int v101 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  unint64_t v102 = EspressoConverter::getWeightParamSize((uint64_t)v101);
  std::string::basic_string[abi:ne180100]<0>(v251, "ParametricSoftplus");
  uint64_t v103 = std::map<std::string,std::string>::at(*((void *)this + 1), v236);
  int v104 = inferNumChannels((const void **)v251, (uint64_t)&v242, *(unsigned int *)(v103 + 8), v102, *((_DWORD *)a2 + 18), *((void *)a2 + 10));
  if ((v251[23] & 0x80000000) != 0) {
    operator delete(*(void **)v251);
  }
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(v243, v104, 1, 1, 1);
  int v105 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v226, v104, 1, 1, 1);
  int v106 = *((_DWORD *)v7 + 7);
  if (v95 != 2)
  {
    if (v106 == 71)
    {
      uint64_t v108 = (uint64_t *)v7[2];
      int v109 = 71;
    }
    else
    {
      CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v105);
      int v109 = *((_DWORD *)v7 + 7);
      uint64_t v108 = &CoreML::Specification::_ActivationParametricSoftplus_default_instance_;
    }
    std::string v112 = (uint64_t *)v108[2];
    if (v112) {
      long long v113 = v112;
    }
    else {
      long long v113 = &CoreML::Specification::_WeightParams_default_instance_;
    }
    long long v114 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)EspressoConverter::getWeightParamSize((uint64_t)v113);
    int v115 = (int)v114;
    if (v109 == 71)
    {
      id v116 = (uint64_t *)v7[2];
    }
    else
    {
      CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v114);
      id v116 = &CoreML::Specification::_ActivationParametricSoftplus_default_instance_;
    }
    long long v117 = (uint64_t *)v116[3];
    if (v117) {
      long long v118 = v117;
    }
    else {
      long long v118 = &CoreML::Specification::_WeightParams_default_instance_;
    }
    unint64_t inited = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)EspressoConverter::getWeightParamSize((uint64_t)v118);
    if (v115 == inited)
    {
      if (v102 != 1 && v102 != v104)
      {
        uint64_t v200 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        uint64_t v201 = std::string::append((std::string *)v246, "' has invalid alpha/beta size");
        long long v202 = *(_OWORD *)&v201->__r_.__value_.__l.__data_;
        *(void *)&v251[16] = *((void *)&v201->__r_.__value_.__l + 2);
        *(_OWORD *)v251 = v202;
        v201->__r_.__value_.__l.__size_ = 0;
        v201->__r_.__value_.__r.__words[2] = 0;
        v201->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v200, (const std::string *)v251);
        __cxa_throw(v200, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      uint64_t v120 = *(_DWORD **)(*(void *)v243 + 16);
      if (*((_DWORD *)v7 + 7) == 71)
      {
        uint64_t v121 = (uint64_t *)v7[2];
      }
      else
      {
        unint64_t inited = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(inited);
        uint64_t v121 = &CoreML::Specification::_ActivationParametricSoftplus_default_instance_;
      }
      uint64_t v122 = (uint64_t *)v121[2];
      if (!v122) {
        uint64_t v122 = &CoreML::Specification::_WeightParams_default_instance_;
      }
      uint64_t v123 = v122[3];
      if (v123) {
        uint64_t v124 = (int *)(v123 + 8);
      }
      else {
        uint64_t v124 = 0;
      }
      if (v102 == 1)
      {
        if (v104 >= 1)
        {
          int v125 = *v124;
          uint64_t v126 = v104;
          do
          {
            *v120++ = v125;
            --v126;
          }
          while (v126);
        }
      }
      else if (v102 == v104 && v104 >= 1)
      {
        uint64_t v127 = v102;
        do
        {
          int v128 = *v124++;
          *v120++ = v128;
          --v127;
        }
        while (v127);
      }
      int v129 = *(_DWORD **)(v226.__r_.__value_.__r.__words[0] + 16);
      if (*((_DWORD *)v7 + 7) == 71)
      {
        long long v130 = (uint64_t *)v7[2];
      }
      else
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(inited);
        long long v130 = &CoreML::Specification::_ActivationParametricSoftplus_default_instance_;
      }
      long long v131 = (uint64_t *)v130[3];
      if (!v131) {
        long long v131 = &CoreML::Specification::_WeightParams_default_instance_;
      }
      uint64_t v132 = v131[3];
      if (v132) {
        long long v133 = (int *)(v132 + 8);
      }
      else {
        long long v133 = 0;
      }
      if (v102 == 1)
      {
        if (v104 >= 1)
        {
          int v134 = *v133;
          uint64_t v135 = v104;
          do
          {
            *v129++ = v134;
            --v135;
          }
          while (v135);
        }
      }
      else if (v102 == v104 && v104 >= 1)
      {
        uint64_t v136 = v102;
        do
        {
          int v137 = *v133++;
          *v129++ = v137;
          --v136;
        }
        while (v136);
      }
      goto LABEL_371;
    }
LABEL_433:
    long long v145 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3C1380](v145, "Parametric Softplus: alpha and beta parameters must have the same size");
LABEL_434:
    __cxa_throw(v145, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (v106 == 71)
  {
    long long v107 = (uint64_t *)v7[2];
  }
  else
  {
    int v105 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v105);
    long long v107 = &CoreML::Specification::_ActivationParametricSoftplus_default_instance_;
  }
  long long v110 = (uint64_t *)v107[2];
  if (!v110) {
    long long v110 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  uint64_t v111 = v110[6];
  if (*(char *)(v111 + 23) < 0)
  {
    if (!*(void *)(v111 + 8)) {
      goto LABEL_315;
    }
  }
  else if (!*(unsigned char *)(v111 + 23))
  {
    goto LABEL_315;
  }
  if (*((_DWORD *)v7 + 7) == 71)
  {
    uint64_t v138 = (uint64_t *)v7[2];
  }
  else
  {
    int v105 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v105);
    uint64_t v138 = &CoreML::Specification::_ActivationParametricSoftplus_default_instance_;
  }
  uint64_t v139 = (uint64_t *)v138[3];
  if (!v139) {
    uint64_t v139 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  uint64_t v140 = v139[6];
  if ((*(char *)(v140 + 23) & 0x80000000) == 0)
  {
    if (*(unsigned char *)(v140 + 23)) {
      goto LABEL_307;
    }
LABEL_315:
    long long v145 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3C1380](v145, "Parametric Softplus: alpha and beta parameters are not provided");
    goto LABEL_434;
  }
  if (!*(void *)(v140 + 8)) {
    goto LABEL_315;
  }
LABEL_307:
  if (*((_DWORD *)v7 + 7) == 71)
  {
    std::string::size_type v141 = (uint64_t *)v7[2];
  }
  else
  {
    int v105 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v105);
    std::string::size_type v141 = &CoreML::Specification::_ActivationParametricSoftplus_default_instance_;
  }
  uint64_t v142 = (uint64_t *)v141[2];
  if (!v142) {
    uint64_t v142 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  uint64_t v143 = v142[6];
  if (*(char *)(v143 + 23) < 0) {
    uint64_t v144 = *(void *)(v143 + 8);
  }
  else {
    uint64_t v144 = *(unsigned __int8 *)(v143 + 23);
  }
  if (*((_DWORD *)v7 + 7) == 71)
  {
    uint64_t v146 = (uint64_t *)v7[2];
  }
  else
  {
    int v105 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v105);
    uint64_t v146 = &CoreML::Specification::_ActivationParametricSoftplus_default_instance_;
  }
  int v147 = (uint64_t *)v146[3];
  if (!v147) {
    int v147 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  uint64_t v148 = v147[6];
  if (*(char *)(v148 + 23) < 0) {
    uint64_t v149 = *(void *)(v148 + 8);
  }
  else {
    uint64_t v149 = *(unsigned __int8 *)(v148 + 23);
  }
  if (v144 != v149) {
    goto LABEL_433;
  }
  if (*((_DWORD *)v7 + 7) == 71)
  {
    uint64_t v150 = (uint64_t *)v7[2];
    int v151 = 71;
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v105);
    int v151 = *((_DWORD *)v7 + 7);
    uint64_t v150 = &CoreML::Specification::_ActivationParametricSoftplus_default_instance_;
  }
  uint64_t v152 = (uint64_t *)v150[2];
  if (v152) {
    uint64_t v153 = v152;
  }
  else {
    uint64_t v153 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  BOOL v154 = CoreML::hasSufficientBytesInQuantizedWeightParam(v153, (int)v102);
  if (v154) {
    int v155 = v102;
  }
  else {
    int v155 = 1;
  }
  if (v151 == 71)
  {
    uint64_t v156 = (uint64_t *)v7[2];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v154);
    uint64_t v156 = &CoreML::Specification::_ActivationParametricSoftplus_default_instance_;
  }
  std::string::size_type v157 = (const CoreML::Specification::WeightParams *)v156[2];
  if (v157) {
    uint64_t v158 = v157;
  }
  else {
    uint64_t v158 = (const CoreML::Specification::WeightParams *)&CoreML::Specification::_WeightParams_default_instance_;
  }
  EspressoConverter::readFloatFromWeightParams((EspressoConverter *)v251, v158, v155);
  if (*((_DWORD *)v7 + 7) == 71)
  {
    std::string v160 = (uint64_t *)v7[2];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v159);
    std::string v160 = &CoreML::Specification::_ActivationParametricSoftplus_default_instance_;
  }
  uint64_t v161 = (const CoreML::Specification::WeightParams *)v160[3];
  if (v161) {
    std::string::size_type v162 = v161;
  }
  else {
    std::string::size_type v162 = (const CoreML::Specification::WeightParams *)&CoreML::Specification::_WeightParams_default_instance_;
  }
  EspressoConverter::readFloatFromWeightParams((EspressoConverter *)v246, v162, v155);
  long long v163 = *(_DWORD **)(*(void *)v243 + 16);
  long long v164 = *(void **)v251;
  if (v155 == 1)
  {
    if (v104 <= 0)
    {
      std::string::size_type v171 = *(char **)v246;
      goto LABEL_367;
    }
    int v165 = **(_DWORD **)v251;
    uint64_t v166 = v104;
    do
    {
      *v163++ = v165;
      --v166;
    }
    while (v166);
  }
  else
  {
    if (v104 != v155 || v104 <= 0)
    {
      std::string v170 = *(_DWORD **)(v226.__r_.__value_.__r.__words[0] + 16);
      std::string::size_type v171 = *(char **)v246;
      goto LABEL_361;
    }
    uint64_t v167 = v104;
    uint64_t v168 = *(int **)v251;
    do
    {
      int v169 = *v168++;
      *v163++ = v169;
      --v167;
    }
    while (v167);
  }
  std::string v170 = *(_DWORD **)(v226.__r_.__value_.__r.__words[0] + 16);
  std::string::size_type v171 = *(char **)v246;
  if (v155 == 1)
  {
    int v172 = **(_DWORD **)v246;
    uint64_t v173 = v104;
    do
    {
      *v170++ = v172;
      --v173;
    }
    while (v173);
    goto LABEL_367;
  }
LABEL_361:
  if (v104 != v155 || v104 < 1)
  {
LABEL_367:
    if (!v171) {
      goto LABEL_369;
    }
    goto LABEL_368;
  }
  for (uint64_t i = 0; i != v104; ++i)
    v170[i] = *(_DWORD *)&v171[i * 4];
LABEL_368:
  *(void *)&v246[8] = v171;
  operator delete(v171);
  long long v164 = *(void **)v251;
LABEL_369:
  if (v164) {
    operator delete(v164);
  }
LABEL_371:
  *(_OWORD *)v246 = 0uLL;
  std::string::basic_string[abi:ne180100]<0>(v251, "softplus_alphas");
  (*(void (**)(uint64_t, unsigned char *, unsigned char *, void, uint64_t, void))(*(void *)v80 + 168))(v80, v246, v251, *(void *)(*(void *)v243 + 16), 4 * *(int *)(*(void *)v243 + 8), 0);
  if ((v251[23] & 0x80000000) != 0) {
    operator delete(*(void **)v251);
  }
  if (*(void *)&v246[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v246[8]);
  }
  *(_OWORD *)v246 = 0uLL;
  std::string::basic_string[abi:ne180100]<0>(v251, "softplus_betas");
  (*(void (**)(uint64_t, unsigned char *, unsigned char *, void, uint64_t, void))(*(void *)v80 + 168))(v80, v246, v251, *(void *)(v226.__r_.__value_.__r.__words[0] + 16), 4 * *(int *)(v226.__r_.__value_.__r.__words[0] + 8), 0);
  if ((v251[23] & 0x80000000) != 0) {
    operator delete(*(void **)v251);
  }
  long long v175 = *(CoreML::Specification::protobuf_NeuralNetwork_2eproto **)&v246[8];
  if (*(void *)&v246[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v246[8]);
  }
  if (*((_DWORD *)v7 + 7) == 71)
  {
    unint64_t v176 = (uint64_t *)v7[2];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v175);
    unint64_t v176 = &CoreML::Specification::_ActivationParametricSoftplus_default_instance_;
  }
  unint64_t v177 = (uint64_t *)v176[2];
  if (v177) {
    std::string::size_type v178 = v177;
  }
  else {
    std::string::size_type v178 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  uint64_t v179 = v178[5];
  uint64_t v180 = *(unsigned __int8 *)(v179 + 23);
  if (*(char *)(v179 + 23) < 0) {
    uint64_t v181 = *(void *)(v179 + 8);
  }
  else {
    uint64_t v181 = *(unsigned __int8 *)(v179 + 23);
  }
  uint64_t v182 = v178[6];
  if (*(char *)(v182 + 23) < 0) {
    uint64_t v183 = *(void *)(v182 + 8);
  }
  else {
    uint64_t v183 = *(unsigned __int8 *)(v182 + 23);
  }
  int v184 = *((_DWORD *)v178 + 4);
  uint64_t v185 = v178[7];
  if (*(char *)(v185 + 23) < 0) {
    uint64_t v186 = *(void *)(v185 + 8);
  }
  else {
    uint64_t v186 = *(unsigned __int8 *)(v185 + 23);
  }
  if (v184 <= 0) {
    int v187 = 1;
  }
  else {
    int v187 = 2;
  }
  if (v181) {
    int v188 = v187;
  }
  else {
    int v188 = v184 > 0;
  }
  if (v183) {
    ++v188;
  }
  if (v186) {
    ++v188;
  }
  if (v184 <= 0 && v188 == 1)
  {
    if ((v180 & 0x80) != 0) {
      uint64_t v180 = *(void *)(v179 + 8);
    }
    _ZF = v180 == 0;
    int v189 = v221;
    if (!_ZF) {
      int v189 = 1;
    }
    unsigned int v221 = v189;
  }
  if (v226.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v226.__r_.__value_.__l.__size_);
  }
  if (*(void *)&v243[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v243[8]);
  }
  if (v220) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v220);
  }
LABEL_417:
  if (**((unsigned char **)this + 2))
  {
    LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v239);
  }
  else
  {
    std::string v190 = (uint64_t **)*((void *)this + 1);
    uint64_t v191 = std::map<std::string,std::string>::at((uint64_t)v190, v236);
    *(_OWORD *)v251 = *(_OWORD *)v191;
    *(_OWORD *)&v251[16] = *(_OWORD *)(v191 + 16);
    uint64_t v252 = *(void *)(v191 + 32);
    v253 = 0;
    uint64_t v254 = 0;
    uint64_t v255 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v253, *(const void **)(v191 + 40), *(void *)(v191 + 48), (uint64_t)(*(void *)(v191 + 48) - *(void *)(v191 + 40)) >> 2);
    *(_OWORD *)v246 = *(_OWORD *)v251;
    *(_OWORD *)&v246[16] = *(_OWORD *)&v251[16];
    std::string v192 = v253;
    uint64_t v247 = v252;
    v248 = 0;
    uint64_t v249 = 0;
    uint64_t v250 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v248, v253, v254, (v254 - (uint64_t)v253) >> 2);
    *(_OWORD *)v243 = *(_OWORD *)v246;
    *(_OWORD *)&v243[16] = *(_OWORD *)&v246[16];
    uint64_t v193 = v248;
    uint64_t v244 = v247;
    memset(__p, 0, sizeof(__p));
    uint64_t v194 = v249;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(__p, v248, v249, (v249 - (uint64_t)v248) >> 2);
    EspressoConverter::validateShape((int *)v243, *((void *)a2 + 14), (uint64_t)v239);
    if (__p[0]) {
      operator delete(__p[0]);
    }
    v226.__r_.__value_.__r.__words[0] = (std::string::size_type)v239;
    int v195 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v190, v239, (long long **)&v226);
    *(_OWORD *)(v195 + 5CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = *(_OWORD *)v246;
    *(_OWORD *)(v195 + 72) = *(_OWORD *)&v246[16];
    *((void *)v195 + 11) = v247;
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v195 + 96, v193, v194, (v194 - (uint64_t)v193) >> 2);
    if (v193) {
      operator delete(v193);
    }
    if (v192) {
      operator delete(v192);
    }
  }
  if (v230) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v230);
  }
  *(void *)v251 = &v236;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v251);
  *(void *)v251 = &v239;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v251);
  if (SHIBYTE(v242.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v242.__r_.__value_.__l.__data_);
  }
  return v221;
}

void sub_19EA88C40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,std::__shared_weak_count *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  if (*(char *)(v74 - 137) < 0) {
    operator delete(*(void **)(v74 - 160));
  }
  if (*(char *)(v74 - 201) < 0) {
    operator delete(*(void **)(v74 - 224));
  }
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a72 < 0) {
    operator delete(a69);
  }
  if (a42 < 0) {
    operator delete(a37);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v72 & 1) == 0)
    {
LABEL_20:
      if (a10) {
        std::__shared_weak_count::__release_shared[abi:ne180100](a10);
      }
      if (a50) {
        std::__shared_weak_count::__release_shared[abi:ne180100](a50);
      }
      *(void *)(v74 - 224) = &a56;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v74 - 224));
      *(void *)(v74 - 224) = &a59;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v74 - 224));
      if (a67 < 0) {
        operator delete(a62);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v72)
  {
    goto LABEL_20;
  }
  __cxa_free_exception(v73);
  goto LABEL_20;
}

uint64_t inferNumChannels(const void **a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  if (a3 == -1)
  {
    a3 = a4;
    if (a4 == 1)
    {
      if (a5 < 1)
      {
        exceptiounint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void **)&v37.__r_.__value_.__l.__data_, a1, " layer '");
        int v12 = *(char *)(a2 + 23);
        if (v12 >= 0) {
          int v13 = (const std::string::value_type *)a2;
        }
        else {
          int v13 = *(const std::string::value_type **)a2;
        }
        if (v12 >= 0) {
          std::string::size_type v14 = *(unsigned __int8 *)(a2 + 23);
        }
        else {
          std::string::size_type v14 = *(void *)(a2 + 8);
        }
        int v15 = std::string::append(&v37, v13, v14);
        long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
        v38.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v16;
        v15->__r_.__value_.__l.__size_ = 0;
        v15->__r_.__value_.__r.__words[2] = 0;
        v15->__r_.__value_.__r.__words[0] = 0;
        uint64_t v17 = std::string::append(&v38, "' is unable to infer the size of the channels dimension (axis=-3) because inputtensor field is not set in this model. inputtensor describing the rank and shape of the layer input should be specified in the protobuf definition of the model.");
        long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
        v39.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v18;
        v17->__r_.__value_.__l.__size_ = 0;
        v17->__r_.__value_.__r.__words[2] = 0;
        v17->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, &v39);
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      uint64_t v7 = *(void *)(a6 + 8);
      int v8 = *(_DWORD *)(v7 + 16);
      if (v8 <= 2)
      {
        int v20 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void **)&v37.__r_.__value_.__l.__data_, a1, " layer '");
        int v21 = *(char *)(a2 + 23);
        if (v21 >= 0) {
          uint64_t v22 = (const std::string::value_type *)a2;
        }
        else {
          uint64_t v22 = *(const std::string::value_type **)a2;
        }
        if (v21 >= 0) {
          std::string::size_type v23 = *(unsigned __int8 *)(a2 + 23);
        }
        else {
          std::string::size_type v23 = *(void *)(a2 + 8);
        }
        uint64_t v24 = std::string::append(&v37, v22, v23);
        long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
        v38.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v25;
        v24->__r_.__value_.__l.__size_ = 0;
        v24->__r_.__value_.__r.__words[2] = 0;
        v24->__r_.__value_.__r.__words[0] = 0;
        std::string v26 = std::string::append(&v38, "' is unable to infer the size of channels dimension (axis=-3) in the input, which is required when the weight size is 1 or when weights are quantized to lower than equal to 8 bits.");
        long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
        v39.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v27;
        v26->__r_.__value_.__l.__size_ = 0;
        v26->__r_.__value_.__r.__words[2] = 0;
        v26->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v20, &v39);
        __cxa_throw(v20, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      a3 = *(unsigned int *)(*(void *)(v7 + 24) + 8 * (v8 - 3) + 8);
      if (a3 == -1)
      {
        uint64_t v29 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void **)&v37.__r_.__value_.__l.__data_, a1, " layer '");
        int v30 = *(char *)(a2 + 23);
        if (v30 >= 0) {
          uint64_t v31 = (const std::string::value_type *)a2;
        }
        else {
          uint64_t v31 = *(const std::string::value_type **)a2;
        }
        if (v30 >= 0) {
          std::string::size_type v32 = *(unsigned __int8 *)(a2 + 23);
        }
        else {
          std::string::size_type v32 = *(void *)(a2 + 8);
        }
        uint64_t v33 = std::string::append(&v37, v31, v32);
        long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
        v38.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v34;
        v33->__r_.__value_.__l.__size_ = 0;
        v33->__r_.__value_.__r.__words[2] = 0;
        v33->__r_.__value_.__r.__words[0] = 0;
        uint64_t v35 = std::string::append(&v38, "' is unable to infer the size of channels dimension (axis=-3) in the input, which is required when the weight size is 1 or when weights are quantized to lower than equal to 8 bits.");
        long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
        v39.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v36;
        v35->__r_.__value_.__l.__size_ = 0;
        v35->__r_.__value_.__r.__words[2] = 0;
        v35->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v29, &v39);
        __cxa_throw(v29, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
    }
  }
  return a3;
}

void sub_19EA892A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (v29) {
    __cxa_free_exception(v28);
  }
  _Unwind_Resume(exception_object);
}

void LayerTranslator::addWhere(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  uint64_t v4 = (long long *)*((void *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)v4, *((void *)v4 + 1));
  }
  else
  {
    long long v5 = *v4;
    v23.__r_.__value_.__r.__words[2] = *((void *)v4 + 2);
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v5;
  }
  int v20 = 0;
  int v21 = 0;
  uint64_t v22 = 0;
  uint64_t v17 = 0;
  long long v18 = 0;
  uint64_t v19 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v20, (uint64_t *)&v17, *((void *)this + 1));
  v13[2] = (void **)897988541;
  int v15 = 0;
  int v16 = 0;
  v13[0] = (void **)101;
  v13[1] = (void **)1065353216;
  char v14 = 1;
  int v6 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
  memset(&v8, 0, sizeof(v8));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v8, v17, v18, 0xAAAAAAAAAAAAAAABLL * (((char *)v18 - (char *)v17) >> 3));
  memset(&v7, 0, sizeof(v7));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v7, v20, v21, 0xAAAAAAAAAAAAAAABLL * (((char *)v21 - (char *)v20) >> 3));
  Espresso::sequential_builder::add<Espresso::elementwise_params>(&v11, v6, (uint64_t)__p, (uint64_t)&v23, (uint64_t)v13, (long long *)v8.__r_.__value_.__l.__data_, (long long *)v8.__r_.__value_.__l.__size_, (long long **)&v7);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  uint64_t v24 = &v7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  uint64_t v24 = &v8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v20);
  v13[0] = (void **)&v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v13);
  v13[0] = (void **)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v13);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
}

void sub_19EA894E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  a23 = v23 - 112;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  a23 = v23 - 88;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  if (*(char *)(v23 - 41) < 0) {
    operator delete(*(void **)(v23 - 64));
  }
  _Unwind_Resume(a1);
}

void LayerTranslator::addFlattenTo2D(LayerTranslator *this, const CoreML::Specification::FlattenLayerParams **a2)
{
  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  uint64_t v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)v4, *((void *)v4 + 1));
  }
  else
  {
    long long v5 = *(_OWORD *)v4;
    v26.__r_.__value_.__r.__words[2] = *((void *)v4 + 2);
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v5;
  }
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  int v20 = 0;
  int v21 = 0;
  uint64_t v22 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v23, (uint64_t *)&v20, *((void *)this + 1));
  if (*((_DWORD *)a2 + 35) == 301)
  {
    std::string v7 = a2[16];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    std::string v7 = (const CoreML::Specification::FlattenLayerParams *)&CoreML::Specification::_FlattenLayerParams_default_instance_;
  }
  std::string v8 = CoreML::Specification::FlattenLayerParams::FlattenLayerParams((CoreML::Specification::FlattenLayerParams *)&v18, v7);
  v17[0] = 2;
  if (*((_DWORD *)a2 + 35) == 1130)
  {
    int v9 = (uint64_t *)a2[16];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v8);
    int v9 = &CoreML::Specification::_FlattenTo2DLayerParams_default_instance_;
  }
  v17[1] = v9[2];
  char v10 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "flatten");
  memset(&v12, 0, sizeof(v12));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v12, (long long *)v20, v21, 0xAAAAAAAAAAAAAAABLL * (((char *)v21 - (char *)v20) >> 3));
  memset(&v11, 0, sizeof(v11));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v11, v23, v24, 0xAAAAAAAAAAAAAAABLL * (((char *)v24 - (char *)v23) >> 3));
  Espresso::sequential_builder::add<Espresso::flatten_params>(&v15, v10, (uint64_t)__p, (uint64_t)&v26, (uint64_t)v17, (long long *)v12.__r_.__value_.__l.__data_, (long long *)v12.__r_.__value_.__l.__size_, (long long **)&v11);
  long long v27 = &v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
  long long v27 = &v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v23);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  long long v18 = (void ***)&unk_1EF0D2F08;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(&v19);
  long long v18 = &v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  int v20 = (void **)&v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v20);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
}

void sub_19EA8976C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
  a25 = &unk_1EF0D2F08;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(&a26);
  a25 = (void *)(v26 - 112);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  *(void *)(v26 - 112) = v26 - 88;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v26 - 112));
  if (*(char *)(v26 - 41) < 0) {
    operator delete(*(void **)(v26 - 64));
  }
  _Unwind_Resume(a1);
}

void LayerTranslator::addArgMaxMin(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  *(void *)&long long v110 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (long long *)*((void *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v99, *(const std::string::value_type **)v4, *((void *)v4 + 1));
  }
  else
  {
    long long v5 = *v4;
    v99.__r_.__value_.__r.__words[2] = *((void *)v4 + 2);
    *(_OWORD *)&v99.__r_.__value_.__l.__data_ = v5;
  }
  uint64_t v96 = 0;
  BOOL v97 = 0;
  uint64_t v98 = 0;
  int v93 = 0;
  unsigned int v94 = 0;
  uint64_t v95 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v96, (uint64_t *)&v93, *((void *)this + 1));
  __int16 v89 = 256;
  __int16 v91 = 256;
  char v92 = 1;
  int v88 = 1;
  int v6 = *((_DWORD *)a2 + 35);
  if (v6 == 1020)
  {
    uint64_t v10 = *((void *)a2 + 16);
    int v8 = *(_DWORD *)(v10 + 16);
    LOBYTE(v91) = 1;
    int v9 = *(unsigned __int8 *)(v10 + 24);
  }
  else
  {
    if (v6 != 1025)
    {
      int v90 = 0;
      goto LABEL_72;
    }
    uint64_t v7 = *((void *)a2 + 16);
    int v8 = *(_DWORD *)(v7 + 16);
    int v9 = *(unsigned __int8 *)(v7 + 24);
  }
  int v90 = v8;
  if (v9)
  {
    std::string v11 = *(void **)this;
    std::string::basic_string[abi:ne180100]<0>(__p, "topk");
    memset(&v74, 0, sizeof(v74));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v74, v93, v94, 0xAAAAAAAAAAAAAAABLL * (((char *)v94 - (char *)v93) >> 3));
    std::to_string(&v77, *(_DWORD *)(*((void *)this + 2) + 4));
    std::string v12 = std::string::append(&v77, "_");
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v78.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    int v14 = *((char *)v96 + 23);
    if (v14 >= 0) {
      uint64_t v15 = (const std::string::value_type *)v96;
    }
    else {
      uint64_t v15 = *(const std::string::value_type **)v96;
    }
    if (v14 >= 0) {
      std::string::size_type v16 = *((unsigned __int8 *)v96 + 23);
    }
    else {
      std::string::size_type v16 = *((void *)v96 + 1);
    }
    uint64_t v17 = std::string::append(&v78, v15, v16);
    long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v79.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v79.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    uint64_t v19 = std::string::append(&v79, "_value");
    long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    *(void *)&v102[16] = *((void *)&v19->__r_.__value_.__l + 2);
    *(_OWORD *)unint64_t v102 = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v69, *(_DWORD *)(*((void *)this + 2) + 4));
    int v21 = std::string::append(&v69, "_");
    long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v109.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v109.__r_.__value_.__l.__data_ = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    int v23 = *((char *)v96 + 23);
    if (v23 >= 0) {
      uint64_t v24 = (const std::string::value_type *)v96;
    }
    else {
      uint64_t v24 = *(const std::string::value_type **)v96;
    }
    if (v23 >= 0) {
      std::string::size_type v25 = *((unsigned __int8 *)v96 + 23);
    }
    else {
      std::string::size_type v25 = *((void *)v96 + 1);
    }
    uint64_t v26 = std::string::append(&v109, v24, v25);
    long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    v70.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    uint64_t v28 = std::string::append(&v70, "_index_rank_preserved");
    long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    *(void *)&v102[40] = *((void *)&v28->__r_.__value_.__l + 2);
    *(_OWORD *)&v102[24] = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    uint64_t v71 = 0;
    int v72 = 0;
    int v73 = 0;
    v63.__r_.__value_.__r.__words[0] = (std::string::size_type)&v71;
    v63.__r_.__value_.__s.__data_[8] = 0;
    uint64_t v71 = (std::string *)operator new(0x30uLL);
    int v72 = v71;
    int v73 = (long long *)&v71[2];
    int v72 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v73, (long long *)v102, (long long *)&v102[48], v71);
    Espresso::sequential_builder::add<Espresso::topk_params_t>(&v75, v11, (uint64_t)__p, (uint64_t)&v99, (uint64_t)&v88, (long long *)v74.__r_.__value_.__l.__data_, (long long *)v74.__r_.__value_.__l.__size_, (long long **)&v71);
    if (v76) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v76);
    }
    v63.__r_.__value_.__r.__words[0] = (std::string::size_type)&v71;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v63);
    for (uint64_t i = 0; i != -48; i -= 24)
    {
      if ((char)v102[i + 47] < 0) {
        operator delete(*(void **)&v102[i + 24]);
      }
    }
    if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v70.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v109.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v69.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v79.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v78.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v77.__r_.__value_.__l.__data_);
    }
    *(void *)unint64_t v102 = &v74;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v102);
    if (v85 < 0) {
      operator delete(__p[0]);
    }
    memset(v107, 0, sizeof(v107));
    long long v106 = 0u;
    long long v105 = 0u;
    long long v104 = 0u;
    long long v103 = 0u;
    memset(&v102[4], 0, 48);
    int v108 = 1;
    *(_DWORD *)unint64_t v102 = v8;
    uint64_t v31 = *(void **)this;
    std::string::basic_string[abi:ne180100]<0>(__p, "squeeze");
    std::to_string(&v70, *(_DWORD *)(*((void *)this + 2) + 4));
    std::string::size_type v32 = std::string::append(&v70, "_");
    long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v77.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v33;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v34 = &v99;
    }
    else {
      long long v34 = (std::string *)v99.__r_.__value_.__r.__words[0];
    }
    if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v99.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v99.__r_.__value_.__l.__size_;
    }
    long long v36 = std::string::append(&v77, (const std::string::value_type *)v34, size);
    long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    v78.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v37;
    v36->__r_.__value_.__l.__size_ = 0;
    v36->__r_.__value_.__r.__words[2] = 0;
    v36->__r_.__value_.__r.__words[0] = 0;
    std::string v38 = std::string::append(&v78, "_squeeze_after_arg");
    long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
    v79.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v79.__r_.__value_.__l.__data_ = v39;
    v38->__r_.__value_.__l.__size_ = 0;
    v38->__r_.__value_.__r.__words[2] = 0;
    v38->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v62, *(_DWORD *)(*((void *)this + 2) + 4));
    unsigned int v40 = std::string::append(&v62, "_");
    long long v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
    v63.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v41;
    v40->__r_.__value_.__l.__size_ = 0;
    v40->__r_.__value_.__r.__words[2] = 0;
    v40->__r_.__value_.__r.__words[0] = 0;
    int v42 = *((char *)v96 + 23);
    if (v42 >= 0) {
      uint64_t v43 = (const std::string::value_type *)v96;
    }
    else {
      uint64_t v43 = *(const std::string::value_type **)v96;
    }
    if (v42 >= 0) {
      std::string::size_type v44 = *((unsigned __int8 *)v96 + 23);
    }
    else {
      std::string::size_type v44 = *((void *)v96 + 1);
    }
    int v45 = std::string::append(&v63, v43, v44);
    long long v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
    v69.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v69.__r_.__value_.__l.__data_ = v46;
    v45->__r_.__value_.__l.__size_ = 0;
    v45->__r_.__value_.__r.__words[2] = 0;
    v45->__r_.__value_.__r.__words[0] = 0;
    std::string v47 = std::string::append(&v69, "_index_rank_preserved");
    long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
    v109.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v109.__r_.__value_.__l.__data_ = v48;
    v47->__r_.__value_.__l.__size_ = 0;
    v47->__r_.__value_.__r.__words[2] = 0;
    v47->__r_.__value_.__r.__words[0] = 0;
    int v64 = 0;
    long long v65 = 0;
    std::string v66 = 0;
    uint64_t v100 = &v64;
    char v101 = 0;
    int v64 = (long long *)operator new(0x18uLL);
    long long v65 = v64;
    std::string v66 = (char *)v64 + 24;
    long long v65 = (long long *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v66, (long long *)&v109, &v110, (std::string *)v64);
    memset(&v61, 0, sizeof(v61));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v61, v96, v97, 0xAAAAAAAAAAAAAAABLL * (((char *)v97 - (char *)v96) >> 3));
    Espresso::sequential_builder::add<Espresso::squeeze_params_t>(&v67, v31, (uint64_t)__p, (uint64_t)&v79, (uint64_t)v102, v64, v65, (long long **)&v61);
    if (v68) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v68);
    }
    uint64_t v100 = (long long **)&v61;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v100);
    uint64_t v100 = &v64;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v100);
    if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v109.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v69.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v63.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v62.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v79.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v78.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v77.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v70.__r_.__value_.__l.__data_);
    }
    goto LABEL_94;
  }
LABEL_72:
  uint64_t v49 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "topk");
  memset(&v83, 0, sizeof(v83));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v83, v93, v94, 0xAAAAAAAAAAAAAAABLL * (((char *)v94 - (char *)v93) >> 3));
  std::to_string(&v77, *(_DWORD *)(*((void *)this + 2) + 4));
  int v50 = std::string::append(&v77, "_");
  long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
  v78.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v51;
  v50->__r_.__value_.__l.__size_ = 0;
  v50->__r_.__value_.__r.__words[2] = 0;
  v50->__r_.__value_.__r.__words[0] = 0;
  int v52 = *((char *)v96 + 23);
  if (v52 >= 0) {
    uint64_t v53 = (const std::string::value_type *)v96;
  }
  else {
    uint64_t v53 = *(const std::string::value_type **)v96;
  }
  if (v52 >= 0) {
    std::string::size_type v54 = *((unsigned __int8 *)v96 + 23);
  }
  else {
    std::string::size_type v54 = *((void *)v96 + 1);
  }
  int v55 = std::string::append(&v78, v53, v54);
  long long v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
  v79.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v79.__r_.__value_.__l.__data_ = v56;
  v55->__r_.__value_.__l.__size_ = 0;
  v55->__r_.__value_.__r.__words[2] = 0;
  v55->__r_.__value_.__r.__words[0] = 0;
  unint64_t v57 = std::string::append(&v79, "_value");
  long long v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
  *(void *)&v102[16] = *((void *)&v57->__r_.__value_.__l + 2);
  *(_OWORD *)unint64_t v102 = v58;
  v57->__r_.__value_.__l.__size_ = 0;
  v57->__r_.__value_.__r.__words[2] = 0;
  v57->__r_.__value_.__r.__words[0] = 0;
  if (*((char *)v96 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v102[24], *(const std::string::value_type **)v96, *((void *)v96 + 1));
  }
  else
  {
    long long v59 = *v96;
    *(void *)&v102[40] = *((void *)v96 + 2);
    *(_OWORD *)&v102[24] = v59;
  }
  uint64_t v80 = 0;
  long long v81 = 0;
  char v82 = 0;
  v70.__r_.__value_.__r.__words[0] = (std::string::size_type)&v80;
  v70.__r_.__value_.__s.__data_[8] = 0;
  uint64_t v80 = (std::string *)operator new(0x30uLL);
  long long v81 = v80;
  char v82 = (long long *)&v80[2];
  long long v81 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v82, (long long *)v102, (long long *)&v102[48], v80);
  Espresso::sequential_builder::add<Espresso::topk_params_t>(&v86, v49, (uint64_t)__p, (uint64_t)&v99, (uint64_t)&v88, (long long *)v83.__r_.__value_.__l.__data_, (long long *)v83.__r_.__value_.__l.__size_, (long long **)&v80);
  if (v87) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v87);
  }
  v70.__r_.__value_.__r.__words[0] = (std::string::size_type)&v80;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v70);
  for (uint64_t j = 0; j != -48; j -= 24)
  {
    if ((char)v102[j + 47] < 0) {
      operator delete(*(void **)&v102[j + 24]);
    }
  }
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v79.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v78.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v77.__r_.__value_.__l.__data_);
  }
  *(void *)unint64_t v102 = &v83;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v102);
LABEL_94:
  if (v85 < 0) {
    operator delete(__p[0]);
  }
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v96);
  *(void *)unint64_t v102 = &v93;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v102);
  *(void *)unint64_t v102 = &v96;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v102);
  if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v99.__r_.__value_.__l.__data_);
  }
}

void sub_19EA8A10C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  *(void *)(v78 - 25CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = v77;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v78 - 256));
  *(void *)(v78 - 25CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = &a24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v78 - 256));
  if (*(char *)(v78 - 73) < 0) {
    operator delete(*(void **)(v78 - 96));
  }
  if (a34 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a17 < 0) {
    operator delete(a12);
  }
  if (a70 < 0) {
    operator delete(a65);
  }
  if (a63 < 0) {
    operator delete(a58);
  }
  if (a56 < 0) {
    operator delete(a51);
  }
  if (a41 < 0) {
    operator delete(a36);
  }
  if (a73 < 0) {
    operator delete(a72);
  }
  *(void *)(v78 - 240) = &a74;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v78 - 240));
  *(void *)(v78 - 240) = &a75;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v78 - 240));
  if (a77 < 0) {
    operator delete(a76);
  }
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::add<Espresso::topk_params_t>(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, long long *a6, long long *a7, long long **a8)
{
  memset(&v13, 0, sizeof(v13));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v13, a6, a7, 0xAAAAAAAAAAAAAAABLL * (((char *)a7 - (char *)a6) >> 3));
  memset(&v12, 0, sizeof(v12));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v12, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a8[1] - (char *)*a8) >> 3));
  LODWORD(v15.__r_.__value_.__l.__data_) = (***(uint64_t (****)(void))(a2[14] + 8))(*(void *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  std::string v11 = (std::__shared_weak_count *)a1[1];
  uint64_t v16 = *a1;
  uint64_t v17 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(&v15, 0, sizeof(v15));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v15, (long long *)v13.__r_.__value_.__l.__data_, (long long *)v13.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13.__r_.__value_.__l.__size_ - v13.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v14, 0, sizeof(v14));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v14, (long long *)v12.__r_.__value_.__l.__data_, (long long *)v12.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12.__r_.__value_.__l.__size_ - v12.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  long long v18 = &v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  long long v18 = &v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (*a2) {
    Espresso::sequential_builder::add_shape_from_kernel();
  }
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
}

void sub_19EA8A6A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v16 = *(std::__shared_weak_count **)(v13 + 8);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  *(void *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(void *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

BOOL LayerTranslator::addConvolution3D(LayerTranslator *this, uint64_t **a2)
{
  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  uint64_t v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v157, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    long long v5 = *(_OWORD *)v4;
    v157.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v157.__r_.__value_.__l.__data_ = v5;
  }
  BOOL v154 = 0;
  int v155 = 0;
  uint64_t v156 = 0;
  int v151 = 0;
  uint64_t v152 = 0;
  uint64_t v153 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v154, (uint64_t *)&v151, *((void *)this + 1));
  if (v152 - v151 == 48)
  {
    exceptiounint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    uint64_t v87 = std::string::append(&v130, "', convolution3D does not support weight as input tensor.");
    long long v88 = *(_OWORD *)&v87->__r_.__value_.__l.__data_;
    v141.__r_.__value_.__r.__words[2] = v87->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v141.__r_.__value_.__l.__data_ = v88;
    v87->__r_.__value_.__l.__size_ = 0;
    v87->__r_.__value_.__r.__words[2] = 0;
    v87->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v141);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (*((_DWORD *)a2 + 35) == 1471)
  {
    uint64_t v7 = a2[16];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    uint64_t v7 = &CoreML::Specification::_Convolution3DLayerParams_default_instance_;
  }
  uint64_t v142 = 0;
  v141.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1EF0D63E0;
  *(_OWORD *)&v141.__r_.__value_.__r.__words[1] = 0uLL;
  int v8 = *((_DWORD *)v7 + 4);
  if (v8)
  {
    google::protobuf::RepeatedField<double>::Reserve((unsigned int *)&v141.__r_.__value_.__r.__words[2], v8);
    memcpy(v142 + 1, (const void *)(v7[3] + 8), 8 * *((int *)v7 + 4));
    LODWORD(v141.__r_.__value_.__r.__words[2]) = *((_DWORD *)v7 + 4);
  }
  int v150 = 0;
  uint64_t v9 = v7[1];
  if (v9) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&v141.__r_.__value_.__l.__size_, v9 & 0xFFFFFFFFFFFFFFFELL);
  }
  if (v7 == &CoreML::Specification::_Convolution3DLayerParams_default_instance_)
  {
    uint64_t v143 = 0;
  }
  else
  {
    if (v7[5]) {
      operator new();
    }
    uint64_t v143 = 0;
    if (v7[6]) {
      operator new();
    }
  }
  uint64_t v144 = 0;
  long long v145 = *(_OWORD *)(v7 + 7);
  long long v10 = *(_OWORD *)(v7 + 11);
  _Q1 = *(_OWORD *)(v7 + 13);
  int32x4_t v12 = *(int32x4_t *)(v7 + 15);
  long long v146 = *(_OWORD *)(v7 + 9);
  int32x4_t v149 = v12;
  long long v148 = _Q1;
  long long v147 = v10;
  v130.__r_.__value_.__r.__words[0] = 1;
  *(void *)&long long v10 = 0x100000001;
  *((void *)&v10 + 1) = 0x100000001;
  *(_OWORD *)&v130.__r_.__value_.__r.__words[1] = v10;
  __asm { FMOV            V1.2S, #1.0 }
  unint64_t v131 = 0xFFFFFFFF00000001;
  uint64_t v132 = _Q1;
  int v133 = 0;
  __int16 v134 = 1;
  long long v135 = 0uLL;
  __int16 v136 = 0;
  WORD1(v10) = 1;
  WORD3(v10) = 1;
  *(void *)&long long v137 = v10;
  *((void *)&v137 + 1) = 65537;
  uint64_t v140 = 0;
  unint64_t v139 = 0;
  int v17 = DWORD2(v145);
  if (DWORD2(v145) <= 1) {
    int v17 = 1;
  }
  int v138 = v17;
  uint64_t v18 = std::map<std::string,std::string>::at(*((void *)this + 1), v151);
  long long v19 = *(_OWORD *)(v18 + 16);
  long long v126 = *(_OWORD *)v18;
  long long v127 = v19;
  long long v20 = *(const void **)(v18 + 40);
  uint64_t v128 = *(void *)(v18 + 32);
  memset(v129, 0, 24);
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v129, v20, *(void *)(v18 + 48), (uint64_t)(*(void *)(v18 + 48) - (void)v20) >> 2);
  if (DWORD2(v126) != -1 && SDWORD2(v126) % v138)
  {
    uint64_t v98 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::string v99 = std::string::append(&v124, "', input channels must be divisible by the number of groups.");
    long long v100 = *(_OWORD *)&v99->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v99->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v100;
    v99->__r_.__value_.__l.__size_ = 0;
    v99->__r_.__value_.__r.__words[2] = 0;
    v99->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v98, &__p);
    __cxa_throw(v98, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int v21 = v145;
  if (!v145)
  {
    __int16 v89 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    int v90 = std::string::append(&v124, "', output channels cannot be 0");
    long long v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v90->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v91;
    v90->__r_.__value_.__l.__size_ = 0;
    v90->__r_.__value_.__r.__words[2] = 0;
    v90->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v89, &__p);
    __cxa_throw(v89, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int v22 = DWORD1(v145);
  if (!DWORD1(v145))
  {
    char v92 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    int v93 = std::string::append(&v124, "', input channels cannot be 0");
    long long v94 = *(_OWORD *)&v93->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v93->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v94;
    v93->__r_.__value_.__l.__size_ = 0;
    v93->__r_.__value_.__r.__words[2] = 0;
    v93->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v92, &__p);
    __cxa_throw(v92, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (BYTE1(v148) && LODWORD(v141.__r_.__value_.__r.__words[2]) && LODWORD(v141.__r_.__value_.__r.__words[2]) != 3)
  {
    long long v105 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    long long v106 = std::string::append(&v124, "' , if set, output shape must be of length 3");
    long long v107 = *(_OWORD *)&v106->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v106->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v107;
    v106->__r_.__value_.__l.__size_ = 0;
    v106->__r_.__value_.__r.__words[2] = 0;
    v106->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v105, &__p);
    __cxa_throw(v105, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  v130.__r_.__value_.__l.__size_ = v145;
  LODWORD(v130.__r_.__value_.__l.__data_) = v148;
  LODWORD(v131) = HIDWORD(v145);
  LOWORD(v137) = v147;
  v130.__r_.__value_.__r.__words[2] = (std::string::size_type)vrev64_s32(*(int32x2_t *)&v146);
  WORD5(v137) = WORD2(v147);
  *(int32x2_t *)v23.i8 = vrev64_s32(*(int32x2_t *)((char *)&v146 + 8));
  v23.u64[1] = (unint64_t)vrev64_s32(*(int32x2_t *)((char *)&v147 + 8));
  *(int16x4_t *)((char *)&v137 + 2) = vmovn_s32(v23);
  if (DWORD1(v148))
  {
    if (DWORD1(v148) == 1)
    {
      __int16 v24 = 0;
      __int16 v25 = 0;
      __int16 v134 = 0;
    }
    else
    {
      if (DWORD1(v148) != 2)
      {
        long long v104 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x19F3C1380](v104, "Convolution3D padding type not set");
        __cxa_throw(v104, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      __int16 v24 = 0;
      __int16 v25 = 0;
      __int16 v134 = 1;
    }
    int8x8_t v26 = 0;
  }
  else
  {
    __int16 v134 = 0;
    __int16 v24 = WORD4(v148);
    __int16 v25 = WORD6(v148);
    int8x8_t v26 = (int8x8_t)vmovn_s32(v149);
  }
  HIWORD(v135) = v24;
  __int16 v136 = v25;
  *(int8x8_t *)((char *)&v135 + CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = vext_s8(v26, v26, 4uLL);
  int v27 = v138;
  if (BYTE1(v148))
  {
    if (LODWORD(v141.__r_.__value_.__r.__words[2]))
    {
      uint64_t v29 = v142[1];
      uint64_t v28 = v142[2];
      uint64_t v30 = v142[3];
    }
    else
    {
      LODWORD(v29) = 0;
      LODWORD(v28) = 0;
      LODWORD(v30) = 0;
    }
    LODWORD(v140) = v29;
    unint64_t v139 = __PAIR64__(v28, v30);
    long long v34 = *(void **)this;
    std::string::basic_string[abi:ne180100]<0>(&__p, "deconv3d");
    memset(&v123, 0, sizeof(v123));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v123, (long long *)v151, (long long *)v152, 0xAAAAAAAAAAAAAAABLL * ((v152 - v151) >> 3));
    memset(&v122, 0, sizeof(v122));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v122, v154, v155, 0xAAAAAAAAAAAAAAABLL * (((char *)v155 - (char *)v154) >> 3));
    Espresso::sequential_builder::add<Espresso::conv3d_params_t>((uint64_t *)&v124, v34, (uint64_t)&__p, (uint64_t)&v157, (uint64_t)&v130, (long long *)v123.__r_.__value_.__l.__data_, (long long *)v123.__r_.__value_.__l.__size_, (long long **)&v122);
    long long v118 = &v122;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v118);
    long long v118 = &v123;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v118);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string::size_type size = (std::__shared_weak_count *)v124.__r_.__value_.__l.__size_;
    std::string::size_type v33 = v124.__r_.__value_.__r.__words[0];
    v21 /= v27;
    if (v124.__r_.__value_.__l.__size_)
    {
LABEL_45:
      atomic_fetch_add_explicit(&size->__shared_owners_, 1uLL, memory_order_relaxed);
      if (v124.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v124.__r_.__value_.__l.__size_);
      }
    }
  }
  else
  {
    uint64_t v31 = *(void **)this;
    std::string::basic_string[abi:ne180100]<0>(&__p, "conv3d");
    memset(&v121, 0, sizeof(v121));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v121, (long long *)v151, (long long *)v152, 0xAAAAAAAAAAAAAAABLL * ((v152 - v151) >> 3));
    memset(&v120, 0, sizeof(v120));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v120, v154, v155, 0xAAAAAAAAAAAAAAABLL * (((char *)v155 - (char *)v154) >> 3));
    Espresso::sequential_builder::add<Espresso::conv3d_params_t>((uint64_t *)&v124, v31, (uint64_t)&__p, (uint64_t)&v157, (uint64_t)&v130, (long long *)v121.__r_.__value_.__l.__data_, (long long *)v121.__r_.__value_.__l.__size_, (long long **)&v120);
    long long v118 = &v120;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v118);
    long long v118 = &v121;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v118);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string::size_type size = (std::__shared_weak_count *)v124.__r_.__value_.__l.__size_;
    std::string::size_type v33 = v124.__r_.__value_.__r.__words[0];
    v22 /= v27;
    if (v124.__r_.__value_.__l.__size_) {
      goto LABEL_45;
    }
  }
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v154);
  if (v143) {
    uint64_t v35 = v143;
  }
  else {
    uint64_t v35 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  int WeightParamSize = EspressoConverter::getWeightParamSize((uint64_t)v35);
  uint64_t v37 = v35[5];
  if (*(char *)(v37 + 23) < 0) {
    uint64_t v38 = *(void *)(v37 + 8);
  }
  else {
    uint64_t v38 = *(unsigned __int8 *)(v37 + 23);
  }
  uint64_t v39 = v35[6];
  uint64_t v40 = *(unsigned __int8 *)(v39 + 23);
  if (*(char *)(v39 + 23) < 0) {
    uint64_t v41 = *(void *)(v39 + 8);
  }
  else {
    uint64_t v41 = *(unsigned __int8 *)(v39 + 23);
  }
  int v42 = *((_DWORD *)v35 + 4);
  uint64_t v43 = v35[7];
  if (*(char *)(v43 + 23) < 0) {
    uint64_t v44 = *(void *)(v43 + 8);
  }
  else {
    uint64_t v44 = *(unsigned __int8 *)(v43 + 23);
  }
  if (v42 <= 0) {
    int v45 = 1;
  }
  else {
    int v45 = 2;
  }
  if (v38) {
    int v46 = v45;
  }
  else {
    int v46 = v42 > 0;
  }
  if (v41) {
    ++v46;
  }
  if (v44) {
    ++v46;
  }
  if (v42 <= 0 && v46 == 1)
  {
    if ((*(unsigned char *)(v37 + 23) & 0x80) != 0)
    {
      if (*(void *)(v37 + 8)) {
        goto LABEL_80;
      }
    }
    else if (*(unsigned char *)(v37 + 23))
    {
      goto LABEL_80;
    }
    if ((v40 & 0x80) != 0) {
      uint64_t v40 = *(void *)(v39 + 8);
    }
    if (v35 != &CoreML::Specification::_WeightParams_default_instance_ && v40 && v35[8])
    {
      int v108 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      std::string v109 = std::string::append(&v124, "' quantized weights are not currently supported");
      long long v110 = *(_OWORD *)&v109->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v109->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v110;
      v109->__r_.__value_.__l.__size_ = 0;
      v109->__r_.__value_.__r.__words[2] = 0;
      v109->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v108, &__p);
      __cxa_throw(v108, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
LABEL_80:
  (*(void (**)(std::string **__return_ptr, std::string::size_type))(*(void *)v33 + 456))(&v118, v33);
  if (WeightParamSize != v21
                        * v22
                        * v131
                        * HIDWORD(v130.__r_.__value_.__r.__words[2])
                        * LODWORD(v130.__r_.__value_.__r.__words[2]))
  {
    uint64_t v95 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    uint64_t v96 = std::string::append(&v124, "' , size of weight parameter not equal to the product of kernel sizes, number of kernels, and kernel channels");
    long long v97 = *(_OWORD *)&v96->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v96->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v97;
    v96->__r_.__value_.__l.__size_ = 0;
    v96->__r_.__value_.__r.__words[2] = 0;
    v96->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v95, &__p);
    __cxa_throw(v95, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (v143) {
    std::string v47 = v143;
  }
  else {
    std::string v47 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  EspressoConverter::copyWeightsToDataBlob((EspressoConverter *)v118[1].__r_.__value_.__l.__size_, v47, 4 * WeightParamSize);
  p_data = (void **)&v118->__r_.__value_.__l.__data_;
  long long v117 = v119;
  if (v119) {
    atomic_fetch_add_explicit(&v119->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(std::string::size_type, void ***))(*(void *)v33 + 400))(v33, &p_data);
  if (v117) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v117);
  }
  if (v119) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v119);
  }
  if (LODWORD(v130.__r_.__value_.__l.__data_))
  {
    int v48 = v130.__r_.__value_.__r.__words[1];
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v118, v130.__r_.__value_.__r.__words[1], 1, 1, 1);
    if (v144) {
      uint64_t v49 = v144;
    }
    else {
      uint64_t v49 = &CoreML::Specification::_WeightParams_default_instance_;
    }
    uint64_t v50 = v49[5];
    if (*(char *)(v50 + 23) < 0) {
      uint64_t v51 = *(void *)(v50 + 8);
    }
    else {
      uint64_t v51 = *(unsigned __int8 *)(v50 + 23);
    }
    uint64_t v52 = v49[6];
    uint64_t v53 = *(unsigned __int8 *)(v52 + 23);
    if (*(char *)(v52 + 23) < 0) {
      uint64_t v54 = *(void *)(v52 + 8);
    }
    else {
      uint64_t v54 = *(unsigned __int8 *)(v52 + 23);
    }
    int v55 = *((_DWORD *)v49 + 4);
    uint64_t v56 = v49[7];
    if (*(char *)(v56 + 23) < 0) {
      uint64_t v57 = *(void *)(v56 + 8);
    }
    else {
      uint64_t v57 = *(unsigned __int8 *)(v56 + 23);
    }
    if (v55 <= 0) {
      int v58 = 1;
    }
    else {
      int v58 = 2;
    }
    if (v51) {
      int v59 = v58;
    }
    else {
      int v59 = v55 > 0;
    }
    if (v54) {
      ++v59;
    }
    if (v57) {
      ++v59;
    }
    if (v55 > 0 || v59 != 1) {
      goto LABEL_124;
    }
    if ((*(unsigned char *)(v50 + 23) & 0x80) != 0)
    {
      if (!*(void *)(v50 + 8))
      {
LABEL_119:
        if ((v53 & 0x80) != 0) {
          uint64_t v53 = *(void *)(v52 + 8);
        }
        if (v49 != &CoreML::Specification::_WeightParams_default_instance_ && v53 && v49[8])
        {
          uint64_t v111 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::operator+<char>();
          std::string v112 = std::string::append(&v124, "' quantized bias is not currently supported");
          long long v113 = *(_OWORD *)&v112->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v112->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v113;
          v112->__r_.__value_.__l.__size_ = 0;
          v112->__r_.__value_.__r.__words[2] = 0;
          v112->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v111, &__p);
          __cxa_throw(v111, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
      }
    }
    else if (!*(unsigned char *)(v50 + 23))
    {
      goto LABEL_119;
    }
LABEL_124:
    int v60 = EspressoConverter::getWeightParamSize((uint64_t)v49);
    if (v60 != LODWORD(v130.__r_.__value_.__r.__words[1]))
    {
      char v101 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      unint64_t v102 = std::string::append(&v124, "' , size of bias parameter not equal to the number of output channels");
      long long v103 = *(_OWORD *)&v102->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v102->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v103;
      v102->__r_.__value_.__l.__size_ = 0;
      v102->__r_.__value_.__r.__words[2] = 0;
      v102->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v101, &__p);
      __cxa_throw(v101, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    std::string v61 = (void **)&v118->__r_.__value_.__l.__data_;
    EspressoConverter::copyWeightsToDataBlob((EspressoConverter *)v118->__r_.__value_.__r.__words[2], v49, 4 * v48);
    std::string v62 = v119;
    long long v114 = v61;
    int v115 = v119;
    if (v119) {
      atomic_fetch_add_explicit(&v119->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(std::string::size_type, void ***))(*(void *)v33 + 392))(v33, &v114);
    if (v115) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v115);
    }
    if (v62) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v62);
    }
  }
  if (v143) {
    std::string v63 = v143;
  }
  else {
    std::string v63 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  uint64_t v64 = v63[5];
  if (*(char *)(v64 + 23) < 0) {
    uint64_t v65 = *(void *)(v64 + 8);
  }
  else {
    uint64_t v65 = *(unsigned __int8 *)(v64 + 23);
  }
  uint64_t v66 = v63[6];
  if (*(char *)(v66 + 23) < 0) {
    uint64_t v67 = *(void *)(v66 + 8);
  }
  else {
    uint64_t v67 = *(unsigned __int8 *)(v66 + 23);
  }
  int v68 = *((_DWORD *)v63 + 4);
  uint64_t v69 = v63[7];
  if (*(char *)(v69 + 23) < 0) {
    uint64_t v70 = *(void *)(v69 + 8);
  }
  else {
    uint64_t v70 = *(unsigned __int8 *)(v69 + 23);
  }
  if (v68 <= 0) {
    int v71 = 1;
  }
  else {
    int v71 = 2;
  }
  if (v65) {
    int v72 = v71;
  }
  else {
    int v72 = v68 > 0;
  }
  if (v67) {
    ++v72;
  }
  if (v70) {
    ++v72;
  }
  if (v68 <= 0 && v72 == 1)
  {
    if ((*(unsigned char *)(v64 + 23) & 0x80) != 0)
    {
      if (*(void *)(v64 + 8)) {
        goto LABEL_157;
      }
    }
    else if (*(unsigned char *)(v64 + 23))
    {
LABEL_157:
      BOOL v73 = 1;
      goto LABEL_188;
    }
  }
  if ((_BYTE)v148)
  {
    if (v144) {
      std::string v74 = v144;
    }
    else {
      std::string v74 = &CoreML::Specification::_WeightParams_default_instance_;
    }
    uint64_t v75 = v74[5];
    uint64_t v76 = *(unsigned __int8 *)(v75 + 23);
    if (*(char *)(v75 + 23) < 0) {
      uint64_t v77 = *(void *)(v75 + 8);
    }
    else {
      uint64_t v77 = *(unsigned __int8 *)(v75 + 23);
    }
    uint64_t v78 = v74[6];
    if (*(char *)(v78 + 23) < 0) {
      uint64_t v79 = *(void *)(v78 + 8);
    }
    else {
      uint64_t v79 = *(unsigned __int8 *)(v78 + 23);
    }
    int v80 = *((_DWORD *)v74 + 4);
    uint64_t v81 = v74[7];
    if (*(char *)(v81 + 23) < 0) {
      uint64_t v82 = *(void *)(v81 + 8);
    }
    else {
      uint64_t v82 = *(unsigned __int8 *)(v81 + 23);
    }
    BOOL v73 = 0;
    if (v80 <= 0) {
      int v83 = 1;
    }
    else {
      int v83 = 2;
    }
    if (v77) {
      int v84 = v83;
    }
    else {
      int v84 = v80 > 0;
    }
    if (v79) {
      ++v84;
    }
    if (v82) {
      ++v84;
    }
    if (v80 <= 0 && v84 == 1)
    {
      if ((v76 & 0x80) != 0) {
        uint64_t v76 = *(void *)(v75 + 8);
      }
      BOOL v73 = v76 != 0;
    }
  }
  else
  {
    BOOL v73 = 0;
  }
LABEL_188:
  if (size) {
    std::__shared_weak_count::__release_shared[abi:ne180100](size);
  }
  if (v129[0]) {
    operator delete(v129[0]);
  }
  CoreML::Specification::Convolution3DLayerParams::~Convolution3DLayerParams((CoreML::Specification::Convolution3DLayerParams *)&v141);
  v141.__r_.__value_.__r.__words[0] = (std::string::size_type)&v151;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v141);
  v141.__r_.__value_.__r.__words[0] = (std::string::size_type)&v154;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v141);
  if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v157.__r_.__value_.__l.__data_);
  }
  return v73;
}

void sub_19EA8B630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  if (a39 < 0) {
    operator delete(__p);
  }
  if (a33 < 0)
  {
    operator delete(a28);
    if ((v65 & 1) == 0)
    {
LABEL_8:
      if (a15) {
        std::__shared_weak_count::__release_shared[abi:ne180100](a15);
      }
      if (v63) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v63);
      }
      if (a46) {
        operator delete(a46);
      }
      CoreML::Specification::Convolution3DLayerParams::~Convolution3DLayerParams((CoreML::Specification::Convolution3DLayerParams *)&a63);
      a63 = (void *)(v66 - 160);
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a63);
      a63 = (void *)(v66 - 136);
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a63);
      if (*(char *)(v66 - 89) < 0) {
        operator delete(*(void **)(v66 - 112));
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v65)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v64);
  goto LABEL_8;
}

void Espresso::sequential_builder::add<Espresso::conv3d_params_t>(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, long long *a6, long long *a7, long long **a8)
{
  memset(&v13, 0, sizeof(v13));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v13, a6, a7, 0xAAAAAAAAAAAAAAABLL * (((char *)a7 - (char *)a6) >> 3));
  memset(&v12, 0, sizeof(v12));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v12, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a8[1] - (char *)*a8) >> 3));
  LODWORD(v15.__r_.__value_.__l.__data_) = (***(uint64_t (****)(void))(a2[14] + 8))(*(void *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  std::string v11 = (std::__shared_weak_count *)a1[1];
  uint64_t v16 = *a1;
  int v17 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(&v15, 0, sizeof(v15));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v15, (long long *)v13.__r_.__value_.__l.__data_, (long long *)v13.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13.__r_.__value_.__l.__size_ - v13.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v14, 0, sizeof(v14));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v14, (long long *)v12.__r_.__value_.__l.__data_, (long long *)v12.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12.__r_.__value_.__l.__size_ - v12.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  uint64_t v18 = &v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  uint64_t v18 = &v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (*a2) {
    Espresso::sequential_builder::add_shape_from_kernel();
  }
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
}

void sub_19EA8BB3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v16 = *(std::__shared_weak_count **)(v13 + 8);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  *(void *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(void *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void LayerTranslator::addReduce(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  uint64_t v4 = (long long *)*((void *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v69, *(const std::string::value_type **)v4, *((void *)v4 + 1));
  }
  else
  {
    long long v5 = *v4;
    v69.__r_.__value_.__r.__words[2] = *((void *)v4 + 2);
    *(_OWORD *)&v69.__r_.__value_.__l.__data_ = v5;
  }
  uint64_t v66 = 0;
  uint64_t v67 = 0;
  uint64_t v68 = 0;
  std::string v63 = 0;
  uint64_t v64 = 0;
  uint64_t v65 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v66, (uint64_t *)&v63, *((void *)this + 1));
  if (*((_DWORD *)a2 + 35) == 280)
  {
    uint64_t v7 = (const CoreML::Specification::ReduceLayerParams *)*((void *)a2 + 16);
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    uint64_t v7 = (const CoreML::Specification::ReduceLayerParams *)&CoreML::Specification::_ReduceLayerParams_default_instance_;
  }
  CoreML::Specification::ReduceLayerParams::ReduceLayerParams((CoreML::Specification::ReduceLayerParams *)&v58, v7);
  uint64_t v52 = 0x358637BD00000000;
  uint64_t v53 = 0x100000007;
  uint64_t v54 = 0;
  uint64_t v55 = 0;
  unint64_t v56 = 0xFFFFFFFF00000000;
  char v57 = 0;
  switch(v60)
  {
    case 1:
      int v8 = 1;
      goto LABEL_27;
    case 2:
      int v8 = 2;
      goto LABEL_27;
    case 3:
      LODWORD(v52) = 3;
      if (v61 != 0.0) {
        *((float *)&v52 + 1) = v61;
      }
      break;
    case 4:
      int v8 = 4;
      goto LABEL_27;
    case 5:
      int v8 = 8;
      goto LABEL_27;
    case 6:
      int v8 = 5;
      goto LABEL_27;
    case 7:
      int v8 = 9;
      goto LABEL_27;
    case 8:
      int v8 = 10;
      goto LABEL_27;
    case 9:
      int v8 = 11;
LABEL_27:
      LODWORD(v52) = v8;
      break;
    default:
      if (v60 == 0x80000000 || v60 == 0x7FFFFFFF)
      {
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
        uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v47, (uint64_t)"Reduce layer: '", 15);
        uint64_t v10 = *((void *)a2 + 14);
        int v11 = *(char *)(v10 + 23);
        if (v11 >= 0) {
          uint64_t v12 = *((void *)a2 + 14);
        }
        else {
          uint64_t v12 = *(void *)v10;
        }
        if (v11 >= 0) {
          uint64_t v13 = *(unsigned __int8 *)(v10 + 23);
        }
        else {
          uint64_t v13 = *(void *)(v10 + 8);
        }
        uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v12, v13);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"': unknown value for parameter 'mode'.", 38);
        exceptiounint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::stringbuf::str();
        std::runtime_error::runtime_error(exception, (const std::string *)v73);
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      return;
  }
  int v16 = 2;
  switch(v62)
  {
    case 0:
      int v17 = 7;
      goto LABEL_43;
    case 1:
      int v17 = 3;
LABEL_43:
      LODWORD(v53) = v17;
      if (v60 == 9)
      {
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
        uint64_t v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v47, (uint64_t)"Reduce layer: '", 15);
        uint64_t v36 = *((void *)a2 + 14);
        int v37 = *(char *)(v36 + 23);
        if (v37 >= 0) {
          uint64_t v38 = *((void *)a2 + 14);
        }
        else {
          uint64_t v38 = *(void *)v36;
        }
        if (v37 >= 0) {
          uint64_t v39 = *(unsigned __int8 *)(v36 + 23);
        }
        else {
          uint64_t v39 = *(void *)(v36 + 8);
        }
        uint64_t v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, v38, v39);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"': argmax reduction operation is only supported along single dimensions C, H or W.", 82);
        uint64_t v41 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::stringbuf::str();
        std::runtime_error::runtime_error(v41, (const std::string *)v73);
        __cxa_throw(v41, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      break;
    case 2:
      int v16 = 4;
      goto LABEL_41;
    case 3:
      goto LABEL_41;
    case 4:
      int v16 = 1;
LABEL_41:
      LODWORD(v53) = v16;
      break;
    default:
      if (v62 == 0x80000000 || v62 == 0x7FFFFFFF)
      {
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
        uint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v47, (uint64_t)"Reduce layer: '", 15);
        uint64_t v19 = *((void *)a2 + 14);
        int v20 = *(char *)(v19 + 23);
        if (v20 >= 0) {
          uint64_t v21 = *((void *)a2 + 14);
        }
        else {
          uint64_t v21 = *(void *)v19;
        }
        if (v20 >= 0) {
          uint64_t v22 = *(unsigned __int8 *)(v19 + 23);
        }
        else {
          uint64_t v22 = *(void *)(v19 + 8);
        }
        int32x4_t v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v21, v22);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"': unknown value for parameter 'axis'.", 38);
        __int16 v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::stringbuf::str();
        std::runtime_error::runtime_error(v24, (const std::string *)v73);
        __cxa_throw(v24, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      return;
  }
  __int16 v25 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "reduce");
  memset(&v43, 0, sizeof(v43));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v43, v63, v64, 0xAAAAAAAAAAAAAAABLL * (((char *)v64 - (char *)v63) >> 3));
  memset(&v42, 0, sizeof(v42));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v42, v66, v67, 0xAAAAAAAAAAAAAAABLL * (((char *)v67 - (char *)v66) >> 3));
  Espresso::sequential_builder::add<Espresso::reduce_params_t>(&v44, v25, (uint64_t)__p, (uint64_t)&v69, (uint64_t)&v52, (long long *)v43.__r_.__value_.__l.__data_, (long long *)v43.__r_.__value_.__l.__size_, (long long **)&v42);
  *(void *)BOOL v73 = &v42;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v73);
  *(void *)BOOL v73 = &v43;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v73);
  if (SBYTE7(v47) < 0) {
    operator delete(__p[0]);
  }
  if (**((unsigned char **)this + 2))
  {
    LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v66);
  }
  else
  {
    int8x8_t v26 = (uint64_t **)*((void *)this + 1);
    uint64_t v27 = std::map<std::string,std::string>::at((uint64_t)v26, v63);
    *(_OWORD *)std::string __p = *(_OWORD *)v27;
    long long v47 = *(_OWORD *)(v27 + 16);
    uint64_t v48 = *(void *)(v27 + 32);
    uint64_t v49 = 0;
    uint64_t v50 = 0;
    uint64_t v51 = 0;
    uint64_t v28 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v49, *(const void **)(v27 + 40), *(void *)(v27 + 48), (uint64_t)(*(void *)(v27 + 48)- *(void *)(v27 + 40)) >> 2);
    if (*((_DWORD *)a2 + 35) == 280)
    {
      uint64_t v29 = (const CoreML::Specification::ReduceLayerParams *)*((void *)a2 + 16);
    }
    else
    {
      CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v28);
      uint64_t v29 = (const CoreML::Specification::ReduceLayerParams *)&CoreML::Specification::_ReduceLayerParams_default_instance_;
    }
    CoreML::Specification::ReduceLayerParams::ReduceLayerParams((CoreML::Specification::ReduceLayerParams *)&v78, v29);
    *(_OWORD *)BOOL v73 = *(_OWORD *)__p;
    *(_OWORD *)&v73[16] = v47;
    uint64_t v30 = v49;
    uint64_t v74 = v48;
    uint64_t v75 = 0;
    uint64_t v76 = 0;
    uint64_t v77 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v75, v49, v50, (v50 - (uint64_t)v49) >> 2);
    switch(v80)
    {
      case 0:
        *(_DWORD *)&v73[8] = 1;
        goto LABEL_53;
      case 1:
LABEL_53:
        *(void *)BOOL v73 = 0x100000001;
        break;
      case 2:
        *(_DWORD *)&v73[8] = 1;
        break;
      case 3:
        *(_DWORD *)&v73[4] = 1;
        break;
      case 4:
        *(_DWORD *)BOOL v73 = 1;
        break;
      default:
        break;
    }
    v70[0] = *(_OWORD *)v73;
    v70[1] = *(_OWORD *)&v73[16];
    uint64_t v31 = v75;
    uint64_t v71 = v74;
    memset(v72, 0, sizeof(v72));
    uint64_t v32 = v76;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v72, v75, v76, (v76 - (uint64_t)v75) >> 2);
    EspressoConverter::validateShape((int *)v70, *((void *)a2 + 14), (uint64_t)v66);
    if (v72[0]) {
      operator delete(v72[0]);
    }
    uint64_t v81 = v66;
    std::string::size_type v33 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v26, v66, &v81);
    long long v34 = *(_OWORD *)&v73[16];
    *(_OWORD *)(v33 + 5CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = *(_OWORD *)v73;
    *(_OWORD *)(v33 + 72) = v34;
    *((void *)v33 + 11) = v74;
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v33 + 96, v31, v32, (v32 - (uint64_t)v31) >> 2);
    if (v31) {
      operator delete(v31);
    }
    uint64_t v78 = &unk_1EF0D2880;
    google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(&v79);
    if (v30) {
      operator delete(v30);
    }
  }
  if (v45) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v45);
  }
  int v58 = &unk_1EF0D2880;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(&v59);
  __p[0] = &v63;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  __p[0] = &v66;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v69.__r_.__value_.__l.__data_);
  }
}

void sub_19EA8C2B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  if (*(char *)(v74 - 153) < 0)
  {
    operator delete(*(void **)(v74 - 176));
    if ((v73 & 1) == 0)
    {
LABEL_6:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a17);
      a59 = (uint64_t)&unk_1EF0D2880;
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(&a60);
      *(void *)(v74 - 17CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = &a63;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v74 - 176));
      *(void *)(v74 - 17CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = &a66;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v74 - 176));
      if (a72 < 0) {
        operator delete(__p);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v73)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v72);
  goto LABEL_6;
}

void LayerTranslator::addTopK(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  uint64_t v4 = (long long *)*((void *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)v4, *((void *)v4 + 1));
  }
  else
  {
    long long v5 = *v4;
    v31.__r_.__value_.__r.__words[2] = *((void *)v4 + 2);
    *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v5;
  }
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  __int16 v25 = 0;
  int8x8_t v26 = 0;
  uint64_t v27 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v28, (uint64_t *)&v25, *((void *)this + 1));
  char v20 = 0;
  __int16 v23 = 256;
  char v24 = 1;
  if (*((_DWORD *)a2 + 35) == 1015)
  {
    uint64_t v7 = (uint64_t *)*((void *)a2 + 16);
    if (!*((_DWORD *)v7 + 6))
    {
      int v19 = 1;
      char v21 = 1;
LABEL_16:
      int v22 = v7[2];
      goto LABEL_20;
    }
    int v8 = 1015;
  }
  else
  {
    unint64_t inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
    int v8 = *((_DWORD *)a2 + 35);
    if (!dword_1EB4DEE40)
    {
      int v9 = 1;
      goto LABEL_14;
    }
    if (v8 == 1015)
    {
      uint64_t v7 = (uint64_t *)*((void *)a2 + 16);
    }
    else
    {
      unint64_t inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
      int v8 = *((_DWORD *)a2 + 35);
      uint64_t v7 = &CoreML::Specification::_TopKLayerParams_default_instance_;
    }
  }
  int v9 = *((_DWORD *)v7 + 6);
LABEL_14:
  int v19 = v9;
  char v21 = 1;
  if (v8 == 1015)
  {
    uint64_t v7 = (uint64_t *)*((void *)a2 + 16);
    goto LABEL_16;
  }
  uint64_t v10 = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
  int v11 = *((_DWORD *)a2 + 35);
  int v22 = qword_1EB4DEE38;
  if (v11 == 1015)
  {
    uint64_t v7 = (uint64_t *)*((void *)a2 + 16);
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v10);
    uint64_t v7 = &CoreML::Specification::_TopKLayerParams_default_instance_;
  }
LABEL_20:
  LOBYTE(v23) = *((unsigned char *)v7 + 32);
  uint64_t v12 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "topk");
  memset(&v14, 0, sizeof(v14));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v14, (long long *)v25, v26, 0xAAAAAAAAAAAAAAABLL * (((char *)v26 - (char *)v25) >> 3));
  memset(&v13, 0, sizeof(v13));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v13, v28, v29, 0xAAAAAAAAAAAAAAABLL * (((char *)v29 - (char *)v28) >> 3));
  Espresso::sequential_builder::add<Espresso::topk_params_t>(&v17, v12, (uint64_t)__p, (uint64_t)&v31, (uint64_t)&v19, (long long *)v14.__r_.__value_.__l.__data_, (long long *)v14.__r_.__value_.__l.__size_, (long long **)&v13);
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  uint64_t v32 = &v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
  uint64_t v32 = &v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
  if (v16 < 0) {
    operator delete(__p[0]);
  }
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v28);
  __p[0] = &v25;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  __int16 v25 = (void **)&v28;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v25);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31.__r_.__value_.__l.__data_);
  }
}

void sub_19EA8C700(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  *(void *)(v27 - 40) = v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v27 - 40));
  *(void *)(v27 - 40) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v27 - 40));
  if (a21 < 0) {
    operator delete(__p);
  }
  std::string __p = &a26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  a26 = v27 - 88;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a26);
  if (*(char *)(v27 - 41) < 0) {
    operator delete(*(void **)(v27 - 64));
  }
  _Unwind_Resume(a1);
}

void LayerTranslator::addSoftmax(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  uint64_t v4 = (long long *)*((void *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v29, *(const std::string::value_type **)v4, *((void *)v4 + 1));
  }
  else
  {
    long long v5 = *v4;
    v29.__r_.__value_.__r.__words[2] = *((void *)v4 + 2);
    *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v5;
  }
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  __int16 v23 = 0;
  char v24 = 0;
  uint64_t v25 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v26, (uint64_t *)&v23, *((void *)this + 1));
  int v22 = 256;
  long long v20 = xmmword_19EC7B8C0;
  uint64_t v21 = 1;
  int v6 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(&__p, "softmax");
  memset(&v15, 0, sizeof(v15));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v15, v23, v24, 0xAAAAAAAAAAAAAAABLL * (((char *)v24 - (char *)v23) >> 3));
  memset(&v14, 0, sizeof(v14));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v14, v26, v27, 0xAAAAAAAAAAAAAAABLL * (((char *)v27 - (char *)v26) >> 3));
  *(void *)&long long v31 = 0;
  long long v30 = 0uLL;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&v30, (long long *)v15.__r_.__value_.__l.__data_, (long long *)v15.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15.__r_.__value_.__l.__size_ - v15.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v46, 0, sizeof(v46));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v46, (long long *)v14.__r_.__value_.__l.__data_, (long long *)v14.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14.__r_.__value_.__l.__size_ - v14.__r_.__value_.__r.__words[0]) >> 3));
  LODWORD(v40) = (***(uint64_t (****)(void))(v6[14] + 8))(*(void *)(v6[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  uint64_t v47 = v18;
  uint64_t v48 = v19;
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v40 = 0uLL;
  *(void *)&long long v41 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&v40, (long long *)v30, *((long long **)&v30 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v30 + 1) - v30) >> 3));
  long long v34 = 0uLL;
  *(void *)&long long v35 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&v34, (long long *)v46.__r_.__value_.__l.__data_, (long long *)v46.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v46.__r_.__value_.__l.__size_ - v46.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  uint64_t v49 = (void **)&v34;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v49);
  uint64_t v49 = (void **)&v40;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v49);
  if (v48) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v48);
  }
  if (*v6) {
    Espresso::sequential_builder::add_shape_from_kernel();
  }
  *(void *)&long long v40 = &v46;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
  *(void *)&long long v40 = &v30;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
  *(void *)&long long v40 = &v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
  *(void *)&long long v40 = &v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
  if (v17 < 0) {
    operator delete(__p);
  }
  if (**((unsigned char **)this + 2))
  {
    LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v26);
  }
  else
  {
    uint64_t v7 = (uint64_t **)*((void *)this + 1);
    uint64_t v8 = std::map<std::string,std::string>::at((uint64_t)v7, v23);
    long long v40 = *(_OWORD *)v8;
    long long v41 = *(_OWORD *)(v8 + 16);
    uint64_t v42 = *(void *)(v8 + 32);
    std::string v43 = 0;
    uint64_t v44 = 0;
    uint64_t v45 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v43, *(const void **)(v8 + 40), *(void *)(v8 + 48), (uint64_t)(*(void *)(v8 + 48) - *(void *)(v8 + 40)) >> 2);
    long long v34 = v40;
    long long v35 = v41;
    int v9 = v43;
    uint64_t v36 = v42;
    int v37 = 0;
    uint64_t v38 = 0;
    uint64_t v39 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v37, v43, v44, (v44 - (uint64_t)v43) >> 2);
    long long v30 = v34;
    long long v31 = v35;
    uint64_t v10 = v37;
    uint64_t v32 = v36;
    memset(v33, 0, sizeof(v33));
    uint64_t v11 = v38;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v33, v37, v38, (v38 - (uint64_t)v37) >> 2);
    EspressoConverter::validateShape((int *)&v30, *((void *)a2 + 14), (uint64_t)v26);
    if (v33[0]) {
      operator delete(v33[0]);
    }
    v46.__r_.__value_.__r.__words[0] = (std::string::size_type)v26;
    uint64_t v12 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7, v26, (long long **)&v46);
    long long v13 = v35;
    *(_OWORD *)(v12 + 5CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = v34;
    *(_OWORD *)(v12 + 72) = v13;
    *((void *)v12 + 11) = v36;
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v12 + 96, v10, v11, (v11 - (uint64_t)v10) >> 2);
    if (v10) {
      operator delete(v10);
    }
    if (v9) {
      operator delete(v9);
    }
  }
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  *(void *)&long long v40 = &v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
  *(void *)&long long v40 = &v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
}

void sub_19EA8CBCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,std::__shared_weak_count *a23,char *a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p)
{
  if (__p)
  {
    operator delete(__p);
    if (!v47)
    {
LABEL_3:
      if (!v46)
      {
LABEL_8:
        if (a23) {
          std::__shared_weak_count::__release_shared[abi:ne180100](a23);
        }
        a24 = &a28;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
        a24 = &a31;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
        if (a39 < 0) {
          operator delete(a34);
        }
        _Unwind_Resume(a1);
      }
LABEL_7:
      operator delete(v46);
      goto LABEL_8;
    }
  }
  else if (!v47)
  {
    goto LABEL_3;
  }
  operator delete(v47);
  if (!v46) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

uint64_t EspressoConverter::convertNeuralNetwork(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v8 = a3 + 1;
  int v9 = (void *)*a3;
  if ((void *)*a3 != a3 + 1)
  {
    do
    {
      *(void *)((char *)v9 + 68) = -1;
      long long v10 = *(_OWORD *)(v9 + 9);
      long long v18 = *(_OWORD *)(v9 + 7);
      long long v19 = v10;
      uint64_t v11 = (const void *)v9[12];
      uint64_t v20 = v9[11];
      uint64_t v21 = 0;
      uint64_t v22 = 0;
      uint64_t v23 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v21, v11, v9[13], (uint64_t)(v9[13] - (void)v11) >> 2);
      v26[0] = v18;
      v26[1] = v19;
      uint64_t v27 = v20;
      std::string v29 = 0;
      uint64_t v30 = 0;
      uint64_t v28 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v28, v21, v22, (v22 - (uint64_t)v21) >> 2);
      std::string::basic_string[abi:ne180100]<0>(__p, "Input");
      EspressoConverter::validateShape((int *)v26, (uint64_t)__p, (uint64_t)(v9 + 4));
      if (SHIBYTE(v25) < 0) {
        operator delete(__p[0]);
      }
      if (v28)
      {
        std::string v29 = v28;
        operator delete(v28);
      }
      if (v21) {
        operator delete(v21);
      }
      uint64_t v12 = (void *)v9[1];
      if (v12)
      {
        do
        {
          long long v13 = v12;
          uint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          long long v13 = (void *)v9[2];
          BOOL v14 = *v13 == (void)v9;
          int v9 = v13;
        }
        while (!v14);
      }
      int v9 = v13;
    }
    while (v13 != v8);
  }
  __p[0] = a2;
  __p[1] = a3;
  uint64_t v25 = a4;
  if (*(int *)(a1 + 24) < 1) {
    return 0;
  }
  uint64_t v15 = 0;
  LODWORD(v1CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = 0;
  do
  {
    ++*(_DWORD *)(a4 + 4);
    CoreML::Specification::NeuralNetworkLayer::NeuralNetworkLayer((CoreML::Specification::NeuralNetworkLayer *)&v18, *(const CoreML::Specification::NeuralNetworkLayer **)(*(void *)(a1 + 32) + 8 * v15 + 8));
    if (LayerTranslator::layerTranslateFn((LayerTranslator *)__p, (const CoreML::Specification::NeuralNetworkLayer *)&v18))uint64_t v16 = 1; {
    else
    }
      uint64_t v16 = v16;
    CoreML::Specification::NeuralNetworkLayer::~NeuralNetworkLayer((CoreML::Specification::NeuralNetworkLayer *)&v18);
    ++v15;
  }
  while (v15 < *(int *)(a1 + 24));
  return v16;
}

void sub_19EA8CF14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  long long v35 = *(void **)(v33 - 104);
  if (v35) {
    operator delete(v35);
  }
  if (a14) {
    operator delete(a14);
  }
  _Unwind_Resume(exception_object);
}

int *EspressoConverter::validateShape(int *result, uint64_t a2, uint64_t a3)
{
  if (result[4] != -1
    || result[3] != -1
    || ((int v4 = result[2], v4 <= 0) ? (v5 = v4 == -1) : (v5 = 1),
        !v5 || ((int v6 = result[1], v6 <= 0) ? (v7 = v6 == -1) : (v7 = 1), !v7 || *result <= 0 && *result != -1)))
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v25);
    uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"Invalid data blob: '", 20);
    int v9 = *(char *)(a3 + 23);
    if (v9 >= 0) {
      uint64_t v10 = a3;
    }
    else {
      uint64_t v10 = *(void *)a3;
    }
    if (v9 >= 0) {
      uint64_t v11 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v11 = *(void *)(a3 + 8);
    }
    uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v10, v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"' shape (C,H,W = ", 17);
    long long v13 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)",", 1);
    BOOL v14 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)",", 1);
    uint64_t v15 = (void *)std::ostream::operator<<();
    uint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)") for output of layer: '", 24);
    int v17 = *(char *)(a2 + 23);
    if (v17 >= 0) {
      uint64_t v18 = a2;
    }
    else {
      uint64_t v18 = *(void *)a2;
    }
    if (v17 >= 0) {
      uint64_t v19 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v19 = *(void *)(a2 + 8);
    }
    uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, v18, v19);
    uint64_t v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"'.", 2);
    std::endl[abi:ne180100]<char,std::char_traits<char>>(v21);
    exceptiounint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, &v24);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return result;
}

void sub_19EA8D118(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
    {
LABEL_6:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a17);
      _Unwind_Resume(a1);
    }
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  goto LABEL_6;
}

uint64_t EspressoConverter::convertToEspresso(const CoreML::Specification::NeuralNetwork *a1, int a2, void *a3, uint64_t **a4, char a5)
{
  BOOL v5 = a4;
  int v6 = a3;
  if (a2 != 303)
  {
    if (a2 != 403)
    {
      if (a2 != 500)
      {
        exceptiounint64_t n = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x19F3C1380](exception, "Unrecognizable Neural Network type.");
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      CoreML::Specification::NeuralNetwork::NeuralNetwork((CoreML::Specification::NeuralNetwork *)&v261, a1);
      uint64_t v8 = (uint64_t *)(v5 + 1);
      BOOL v7 = *v5;
      if (*v5 != (uint64_t *)(v5 + 1))
      {
        do
        {
          *(uint64_t *)((char *)v7 + 68) = -1;
          long long v9 = *(_OWORD *)(v7 + 9);
          *(_OWORD *)&__v.__first_ = *(_OWORD *)(v7 + 7);
          *(_OWORD *)&__v.__end_ = v9;
          uint64_t v10 = (const void *)v7[12];
          __v.__end_cap_.__value_ = (std::allocator<std::string> *)v7[11];
          long long v304 = 0uLL;
          uint64_t v305 = 0;
          std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v304, v10, v7[13], (v7[13] - (uint64_t)v10) >> 2);
          std::__split_buffer<std::string> v274 = __v;
          v276 = 0;
          uint64_t v277 = 0;
          v275 = 0;
          std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v275, (const void *)v304, *((uint64_t *)&v304 + 1), (uint64_t)(*((void *)&v304 + 1) - v304) >> 2);
          std::string::basic_string[abi:ne180100]<0>(&__p, "Input");
          EspressoConverter::validateShape((int *)&v274, (uint64_t)&__p, (uint64_t)(v7 + 4));
          if (SHIBYTE(v268) < 0) {
            operator delete(__p);
          }
          if (v275)
          {
            v276 = v275;
            operator delete(v275);
          }
          if ((void)v304) {
            operator delete((void *)v304);
          }
          uint64_t v11 = (uint64_t *)v7[1];
          if (v11)
          {
            do
            {
              uint64_t v12 = v11;
              uint64_t v11 = (uint64_t *)*v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              uint64_t v12 = (uint64_t *)v7[2];
              BOOL v13 = *v12 == (void)v7;
              BOOL v7 = v12;
            }
            while (!v13);
          }
          BOOL v7 = v12;
        }
        while (v12 != v8);
      }
      if (v264 < 1) {
        goto LABEL_155;
      }
      uint64_t v14 = 0;
      v246 = (uint64_t *)(v5 + 1);
      while (1)
      {
        CoreML::Specification::NeuralNetworkPreprocessing::NeuralNetworkPreprocessing((CoreML::Specification::NeuralNetworkPreprocessing *)v272, *(const CoreML::Specification::NeuralNetworkPreprocessing **)(v265 + 8 * v14 + 8));
        if (v273 != 11) {
          goto LABEL_154;
        }
        CoreML::Specification::NeuralNetwork::NeuralNetwork((CoreML::Specification::NeuralNetwork *)&__p, (const CoreML::Specification::NeuralNetwork *)&v261);
        CoreML::Specification::NeuralNetworkPreprocessing::NeuralNetworkPreprocessing((CoreML::Specification::NeuralNetworkPreprocessing *)v307, *(const CoreML::Specification::NeuralNetworkPreprocessing **)(v271 + 8 * v14 + 8));
        if (*((char *)v310 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v306, *(const std::string::value_type **)v310, *((void *)v310 + 1));
        }
        else
        {
          long long v15 = *v310;
          v306.__r_.__value_.__r.__words[2] = *((void *)v310 + 2);
          *(_OWORD *)&v306.__r_.__value_.__l.__data_ = v15;
        }
        if (v8 == std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>((uint64_t)v5, &v306))
        {
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__v);
          uint64_t v232 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__v.__end_, (uint64_t)"Mean image preprocessor input blob ('", 37);
          if ((v306.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v233 = &v306;
          }
          else {
            uint64_t v233 = (std::string *)v306.__r_.__value_.__r.__words[0];
          }
          if ((v306.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v306.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v306.__r_.__value_.__l.__size_;
          }
          uint64_t v235 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v232, (uint64_t)v233, size);
          v236 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v235, (uint64_t)"') not found. ", 14);
          std::endl[abi:ne180100]<char,std::char_traits<char>>(v236);
          v237 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::stringbuf::str();
          std::runtime_error::runtime_error(v237, &__s);
          __cxa_throw(v237, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        if ((v306.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v16 = HIBYTE(v306.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v16 = v306.__r_.__value_.__l.__size_;
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&__s, v16 + 13);
        if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_s = &__s;
        }
        else {
          p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
        }
        if (v16)
        {
          if ((v306.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int v18 = &v306;
          }
          else {
            int v18 = (std::string *)v306.__r_.__value_.__r.__words[0];
          }
          memmove(p_s, v18, v16);
        }
        strcpy((char *)p_s + v16, "_preprocessed");
        if (v269 < 1) {
          goto LABEL_81;
        }
        for (uint64_t i = 0; i < v269; ++i)
        {
          uint64_t v20 = *(void *)(v270 + 8 * i + 8);
          memset(&__v, 0, 24);
          if (*(int *)(v20 + 24) < 1) {
            goto LABEL_80;
          }
          uint64_t v21 = 0;
          char v22 = 0;
          do
          {
            uint64_t v23 = *(long long **)(*(void *)(v20 + 32) + 8 * v21 + 8);
            if (*((char *)v23 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v301, *(const std::string::value_type **)v23, *((void *)v23 + 1));
            }
            else
            {
              long long v24 = *v23;
              v301.__r_.__value_.__r.__words[2] = *((void *)v23 + 2);
              *(_OWORD *)&v301.__r_.__value_.__l.__data_ = v24;
            }
            std::string::size_type v25 = v301.__r_.__value_.__l.__size_;
            if ((v301.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v26 = HIBYTE(v301.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v26 = v301.__r_.__value_.__l.__size_;
            }
            std::string::size_type v27 = HIBYTE(v306.__r_.__value_.__r.__words[2]);
            if ((v306.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::string::size_type v27 = v306.__r_.__value_.__l.__size_;
            }
            if (v26 != v27) {
              goto LABEL_57;
            }
            if ((v306.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v28 = &v306;
            }
            else {
              uint64_t v28 = (std::string *)v306.__r_.__value_.__r.__words[0];
            }
            if ((*((unsigned char *)&v301.__r_.__value_.__s + 23) & 0x80) != 0)
            {
              uint64_t v33 = (const std::string::value_type *)v301.__r_.__value_.__r.__words[0];
              if (memcmp(v301.__r_.__value_.__l.__data_, v28, v301.__r_.__value_.__l.__size_))
              {
                begiunint64_t n = __v.__begin_;
                if (__v.__begin_ >= __v.__end_)
                {
LABEL_62:
                  long long v34 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&__v, (long long *)&v301);
                  goto LABEL_73;
                }
LABEL_68:
                std::string::__init_copy_ctor_external(begin, v33, v25);
                goto LABEL_69;
              }
            }
            else if (*((unsigned char *)&v301.__r_.__value_.__s + 23))
            {
              std::string v29 = &v301;
              uint64_t v30 = HIBYTE(v301.__r_.__value_.__r.__words[2]);
              while (v29->__r_.__value_.__s.__data_[0] == v28->__r_.__value_.__s.__data_[0])
              {
                std::string v29 = (std::string *)((char *)v29 + 1);
                uint64_t v28 = (std::string *)((char *)v28 + 1);
                if (!--v30) {
                  goto LABEL_63;
                }
              }
LABEL_57:
              begiunint64_t n = __v.__begin_;
              if (__v.__begin_ >= __v.__end_) {
                goto LABEL_62;
              }
              if ((*((unsigned char *)&v301.__r_.__value_.__s + 23) & 0x80) != 0)
              {
                uint64_t v33 = (const std::string::value_type *)v301.__r_.__value_.__r.__words[0];
                goto LABEL_68;
              }
              long long v32 = *(_OWORD *)&v301.__r_.__value_.__l.__data_;
              __v.__begin_->__r_.__value_.__r.__words[2] = v301.__r_.__value_.__r.__words[2];
              *(_OWORD *)&begin->__r_.__value_.__l.__data_ = v32;
LABEL_69:
              long long v34 = begin + 1;
              goto LABEL_73;
            }
LABEL_63:
            std::__split_buffer<std::string>::pointer v35 = __v.__begin_;
            if (__v.__begin_ >= __v.__end_)
            {
              long long v34 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&__v, (long long *)&__s);
            }
            else
            {
              if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external(__v.__begin_, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
              }
              else
              {
                long long v36 = *(_OWORD *)&__s.__r_.__value_.__l.__data_;
                __v.__begin_->__r_.__value_.__r.__words[2] = __s.__r_.__value_.__r.__words[2];
                *(_OWORD *)&v35->__r_.__value_.__l.__data_ = v36;
              }
              long long v34 = v35 + 1;
            }
            char v22 = 1;
LABEL_73:
            __v.__begin_ = v34;
            if (SHIBYTE(v301.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v301.__r_.__value_.__l.__data_);
            }
            ++v21;
          }
          while (v21 < *(int *)(v20 + 24));
          if (v22)
          {
            google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(v20 + 16);
            first = __v.__first_;
            std::__split_buffer<std::string>::pointer v38 = __v.__begin_;
            while (first != v38)
              CoreML::Specification::NeuralNetworkLayer::add_input(v20, first++);
          }
LABEL_80:
          v301.__r_.__value_.__r.__words[0] = (std::string::size_type)&__v;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v301);
        }
LABEL_81:
        memset(&v301, 0, sizeof(v301));
        v299 = 0;
        uint64_t v298 = 0;
        uint64_t v300 = 0;
        std::operator+<char>();
        uint64_t v39 = (_OWORD *)v301.__r_.__value_.__l.__size_;
        int v6 = a3;
        BOOL v5 = a4;
        if (v301.__r_.__value_.__l.__size_ >= v301.__r_.__value_.__r.__words[2])
        {
          unint64_t v41 = 0xAAAAAAAAAAAAAAABLL
              * ((uint64_t)(v301.__r_.__value_.__l.__size_ - v301.__r_.__value_.__r.__words[0]) >> 3);
          unint64_t v42 = v41 + 1;
          if (v41 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556
             * ((uint64_t)(v301.__r_.__value_.__r.__words[2] - v301.__r_.__value_.__r.__words[0]) >> 3) > v42)
            unint64_t v42 = 0x5555555555555556
                * ((uint64_t)(v301.__r_.__value_.__r.__words[2] - v301.__r_.__value_.__r.__words[0]) >> 3);
          if (0xAAAAAAAAAAAAAAABLL
             * ((uint64_t)(v301.__r_.__value_.__r.__words[2] - v301.__r_.__value_.__r.__words[0]) >> 3) >= 0x555555555555555)
            unint64_t v43 = 0xAAAAAAAAAAAAAAALL;
          else {
            unint64_t v43 = v42;
          }
          __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v301.__r_.__value_.__r.__words[2];
          if (v43) {
            uint64_t v44 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v301.__r_.__value_.__r.__words[2], v43);
          }
          else {
            uint64_t v44 = 0;
          }
          uint64_t v45 = v44 + v41;
          __v.__first_ = v44;
          __v.__begin_ = v45;
          __v.__end_cap_.__value_ = &v44[v43];
          long long v46 = v296;
          v45->__r_.__value_.__r.__words[2] = v297;
          *(_OWORD *)&v45->__r_.__value_.__l.__data_ = v46;
          unint64_t v297 = 0;
          long long v296 = 0uLL;
          __v.__end_ = v45 + 1;
          std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)&v301, &__v);
          std::string::size_type v47 = v301.__r_.__value_.__l.__size_;
          std::__split_buffer<std::string>::~__split_buffer(&__v);
          v301.__r_.__value_.__l.__size_ = v47;
          if (SHIBYTE(v297) < 0) {
            operator delete((void *)v296);
          }
        }
        else
        {
          long long v40 = v296;
          *(void *)(v301.__r_.__value_.__l.__size_ + 1CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = v297;
          *uint64_t v39 = v40;
          v301.__r_.__value_.__l.__size_ = (std::string::size_type)v39 + 24;
        }
        unint64_t v297 = 0xFFFFFFFF00000001;
        long long v296 = xmmword_19EC7B870;
        __v.__first_ = &v306;
        DWORD2(v29CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a4, &v306, (long long **)&__v)+ 16);
        __v.__first_ = &v306;
        DWORD1(v29CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a4, &v306, (long long **)&__v)+ 15);
        __v.__first_ = &v306;
        uint64_t v48 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a4, &v306, (long long **)&__v);
        int v49 = *((_DWORD *)v48 + 14);
        LODWORD(v29CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = v49;
        int v50 = DWORD2(v296);
        int v51 = DWORD1(v296);
        if (v312 == 11)
        {
          uint64_t v52 = v311;
        }
        else
        {
          CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v48);
          uint64_t v52 = &CoreML::Specification::_NeuralNetworkMeanImage_default_instance_;
        }
        int v53 = v50 * v49 * v51;
        if (*((_DWORD *)v52 + 4) != v53)
        {
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__v);
          std::string v242 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__v.__end_, (uint64_t)"Mean Image Preprocessing: mean image size must be same as input image size.", 75);
          std::endl[abi:ne180100]<char,std::char_traits<char>>(v242);
          v243 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::stringbuf::str();
          std::runtime_error::runtime_error(v243, &v295);
          __cxa_throw(v243, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        std::string::basic_string[abi:ne180100]<0>(&__v, "load_constant");
        std::operator+<char>();
        memset(&v292, 0, sizeof(v292));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v292, v298, v299, 0xAAAAAAAAAAAAAAABLL * (((char *)v299 - (char *)v298) >> 3));
        memset(&v291, 0, sizeof(v291));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v291, (long long *)v301.__r_.__value_.__l.__data_, (long long *)v301.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v301.__r_.__value_.__l.__size_ - v301.__r_.__value_.__r.__words[0]) >> 3));
        Espresso::sequential_builder::add<Espresso::load_constant_params>(&v293, a3, (uint64_t)&__v, (uint64_t)&v295, (uint64_t)&v296, (long long *)v292.__r_.__value_.__l.__data_, (long long *)v292.__r_.__value_.__l.__size_, (long long **)&v291);
        v286.__begin_ = &v291;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v286);
        v286.__begin_ = &v292;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v286);
        if (SHIBYTE(v295.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v295.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__v.__end_) < 0) {
          operator delete(__v.__first_);
        }
        uint64_t v54 = v294;
        if (v294) {
          atomic_fetch_add_explicit(&v294->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        unint64_t inited = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v289, v296, SDWORD1(v296), SDWORD2(v296), SHIDWORD(v296));
        if (v53 <= 0)
        {
          uint64_t v57 = v289;
        }
        else
        {
          uint64_t v56 = 0;
          uint64_t v57 = v289;
          uint64_t v58 = 4 * v53;
          do
          {
            if (v312 == 11)
            {
              uint64_t v59 = v311;
            }
            else
            {
              unint64_t inited = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(inited);
              uint64_t v59 = &CoreML::Specification::_NeuralNetworkMeanImage_default_instance_;
            }
            *(float *)(*(void *)(v57 + 24) + v5CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = -*(float *)(v59[3] + v56 + 8);
            v56 += 4;
          }
          while (v58 != v56);
        }
        int v60 = v290;
        uint64_t v287 = v57;
        v288 = v290;
        if (v290) {
          atomic_fetch_add_explicit(&v290->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        Espresso::generic_load_constant_kernel::set_constant_blob();
        if (v288) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v288);
        }
        memset(&v295, 0, sizeof(v295));
        memset(&v286, 0, sizeof(v286));
        v286.__end_ = (std::vector<std::string>::pointer)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v286, (long long *)&v306);
        std::operator+<char>();
        std::vector<std::string>::pointer end = v286.__end_;
        if (v286.__end_ >= v286.__end_cap_.__value_)
        {
          unint64_t v63 = 0xAAAAAAAAAAAAAAABLL * (((char *)v286.__end_ - (char *)v286.__begin_) >> 3);
          unint64_t v64 = v63 + 1;
          if (v63 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * (((char *)v286.__end_cap_.__value_ - (char *)v286.__begin_) >> 3) > v64) {
            unint64_t v64 = 0x5555555555555556 * (((char *)v286.__end_cap_.__value_ - (char *)v286.__begin_) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * (((char *)v286.__end_cap_.__value_ - (char *)v286.__begin_) >> 3) >= 0x555555555555555) {
            unint64_t v65 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v65 = v64;
          }
          __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v286.__end_cap_;
          if (v65) {
            uint64_t v66 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v286.__end_cap_, v65);
          }
          else {
            uint64_t v66 = 0;
          }
          uint64_t v67 = v66 + v63;
          __v.__first_ = v66;
          __v.__begin_ = v67;
          __v.__end_cap_.__value_ = &v66[v65];
          long long v68 = v284;
          v67->__r_.__value_.__r.__words[2] = v285;
          *(_OWORD *)&v67->__r_.__value_.__l.__data_ = v68;
          std::string::size_type v285 = 0;
          long long v284 = 0uLL;
          __v.__end_ = v67 + 1;
          std::vector<std::string>::__swap_out_circular_buffer(&v286, &__v);
          std::string v69 = v286.__end_;
          std::__split_buffer<std::string>::~__split_buffer(&__v);
          v286.__end_ = v69;
          if (SHIBYTE(v285) < 0) {
            operator delete((void *)v284);
          }
        }
        else
        {
          long long v62 = v284;
          v286.__end_->__r_.__value_.__r.__words[2] = v285;
          *(_OWORD *)&end->__r_.__value_.__l.__data_ = v62;
          v286.__end_ = end + 1;
        }
        uint64_t v70 = (_OWORD *)v295.__r_.__value_.__l.__size_;
        if (v295.__r_.__value_.__l.__size_ >= v295.__r_.__value_.__r.__words[2])
        {
          std::string::size_type v72 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v295, (long long *)&__s);
        }
        else
        {
          if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)v295.__r_.__value_.__l.__size_, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
          }
          else
          {
            long long v71 = *(_OWORD *)&__s.__r_.__value_.__l.__data_;
            *(void *)(v295.__r_.__value_.__l.__size_ + 1CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = *((void *)&__s.__r_.__value_.__l + 2);
            *uint64_t v70 = v71;
          }
          std::string::size_type v72 = (std::string::size_type)v70 + 24;
        }
        v295.__r_.__value_.__l.__size_ = v72;
        __v.__end_ = (std::__split_buffer<std::string>::pointer)897988541;
        LOBYTE(__v.__end_cap_.__value_) = 0;
        *(void *)((char *)&v304 + 4) = 0;
        __v.__begin_ = (std::__split_buffer<std::string>::pointer)1065353216;
        __v.__first_ = 0;
        std::string::basic_string[abi:ne180100]<0>(&v284, "elementwise");
        std::operator+<char>();
        memset(&v279, 0, sizeof(v279));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v279, (long long *)v286.__begin_, (long long *)v286.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v286.__end_ - (char *)v286.__begin_) >> 3));
        memset(&v278, 0, sizeof(v278));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v278, (long long *)v295.__r_.__value_.__l.__data_, (long long *)v295.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v295.__r_.__value_.__l.__size_ - v295.__r_.__value_.__r.__words[0]) >> 3));
        Espresso::sequential_builder::add<Espresso::elementwise_params>(&v282, a3, (uint64_t)&v284, (uint64_t)v280, (uint64_t)&__v, (long long *)v279.__r_.__value_.__l.__data_, (long long *)v279.__r_.__value_.__l.__size_, (long long **)&v278);
        v313[0] = (void **)&v278;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v313);
        v313[0] = (void **)&v279;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v313);
        if (v281 < 0) {
          operator delete(v280[0]);
        }
        if (SHIBYTE(v285) < 0) {
          operator delete((void *)v284);
        }
        uint64_t v73 = std::map<std::string,std::string>::at((uint64_t)a4, &v306);
        v280[0] = &__s;
        uint64_t v74 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a4, &__s, (long long **)v280);
        long long v75 = *(_OWORD *)v73;
        long long v76 = *(_OWORD *)(v73 + 16);
        *((void *)v74 + 11) = *(void *)(v73 + 32);
        *(_OWORD *)(v74 + 72) = v76;
        *(_OWORD *)(v74 + 5CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = v75;
        if (v74 + 56 != (char *)v73) {
          std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v74 + 96, *(char **)(v73 + 40), *(void *)(v73 + 48), (uint64_t)(*(void *)(v73 + 48) - *(void *)(v73 + 40)) >> 2);
        }
        if (v283) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v283);
        }
        __v.__first_ = (std::__split_buffer<std::string>::pointer)&v286;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
        __v.__first_ = &v295;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
        if (v60) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v60);
        }
        if (v54) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v54);
        }
        uint64_t v8 = v246;
        if (v294) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v294);
        }
        __v.__first_ = (std::__split_buffer<std::string>::pointer)&v298;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
        __v.__first_ = &v301;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__s.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v306.__r_.__value_.__l.__data_);
        }
        CoreML::Specification::NeuralNetworkPreprocessing::~NeuralNetworkPreprocessing((CoreML::Specification::NeuralNetworkPreprocessing *)v307);
        CoreML::Specification::NeuralNetwork::Clear((CoreML::Specification::NeuralNetwork *)&v261);
        CoreML::Specification::NeuralNetwork::MergeFrom(&v261, (const CoreML::Specification::NeuralNetwork *)&__p);
        CoreML::Specification::NeuralNetwork::~NeuralNetwork((CoreML::Specification::NeuralNetwork *)&__p);
LABEL_154:
        CoreML::Specification::NeuralNetworkPreprocessing::~NeuralNetworkPreprocessing((CoreML::Specification::NeuralNetworkPreprocessing *)v272);
        if (++v14 >= v264)
        {
LABEL_155:
          v307[0] = a5;
          uint64_t v308 = 0;
          int v309 = 0;
          std::string __p = v6;
          v267 = v5;
          v268 = v307;
          if (v262 < 1)
          {
            uint64_t v78 = 0;
          }
          else
          {
            uint64_t v77 = 0;
            LODWORD(v78) = 0;
            do
            {
              ++*((_DWORD *)v268 + 1);
              CoreML::Specification::NeuralNetworkLayer::NeuralNetworkLayer((CoreML::Specification::NeuralNetworkLayer *)&__v, *(const CoreML::Specification::NeuralNetworkLayer **)(v263 + 8 * v77 + 8));
              if (LayerTranslator::layerTranslateFn((LayerTranslator *)&__p, (const std::string **)&__v.__first_))uint64_t v78 = 1; {
              else
              }
                uint64_t v78 = v78;
              CoreML::Specification::NeuralNetworkLayer::~NeuralNetworkLayer((CoreML::Specification::NeuralNetworkLayer *)&__v);
              ++v77;
            }
            while (v77 < v262);
          }
          CoreML::Specification::NeuralNetwork::~NeuralNetwork((CoreML::Specification::NeuralNetwork *)&v261);
          return v78;
        }
      }
    }
    CoreML::Specification::NeuralNetworkClassifier::NeuralNetworkClassifier((CoreML::Specification::NeuralNetworkClassifier *)&v251, a1);
    int v80 = (uint64_t *)(v5 + 1);
    uint64_t v79 = *v5;
    if (*v5 != (uint64_t *)(v5 + 1))
    {
      do
      {
        *(uint64_t *)((char *)v79 + 68) = -1;
        long long v81 = *(_OWORD *)(v79 + 9);
        *(_OWORD *)&__v.__first_ = *(_OWORD *)(v79 + 7);
        *(_OWORD *)&__v.__end_ = v81;
        uint64_t v82 = (const void *)v79[12];
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)v79[11];
        long long v304 = 0uLL;
        uint64_t v305 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v304, v82, v79[13], (v79[13] - (uint64_t)v82) >> 2);
        std::__split_buffer<std::string> v274 = __v;
        v276 = 0;
        uint64_t v277 = 0;
        v275 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v275, (const void *)v304, *((uint64_t *)&v304 + 1), (uint64_t)(*((void *)&v304 + 1) - v304) >> 2);
        std::string::basic_string[abi:ne180100]<0>(&__p, "Input");
        EspressoConverter::validateShape((int *)&v274, (uint64_t)&__p, (uint64_t)(v79 + 4));
        if (SHIBYTE(v268) < 0) {
          operator delete(__p);
        }
        if (v275)
        {
          v276 = v275;
          operator delete(v275);
        }
        if ((void)v304) {
          operator delete((void *)v304);
        }
        int v83 = (uint64_t *)v79[1];
        if (v83)
        {
          do
          {
            int v84 = v83;
            int v83 = (uint64_t *)*v83;
          }
          while (v83);
        }
        else
        {
          do
          {
            int v84 = (uint64_t *)v79[2];
            BOOL v13 = *v84 == (void)v79;
            uint64_t v79 = v84;
          }
          while (!v13);
        }
        uint64_t v79 = v84;
      }
      while (v84 != v80);
    }
    if (v254 < 1) {
      goto LABEL_313;
    }
    uint64_t v85 = 0;
    uint64_t v247 = (uint64_t *)(v5 + 1);
LABEL_177:
    CoreML::Specification::NeuralNetworkPreprocessing::NeuralNetworkPreprocessing((CoreML::Specification::NeuralNetworkPreprocessing *)v272, *(const CoreML::Specification::NeuralNetworkPreprocessing **)(v255 + 8 * v85 + 8));
    if (v273 != 11) {
      goto LABEL_312;
    }
    CoreML::Specification::NeuralNetworkClassifier::NeuralNetworkClassifier((CoreML::Specification::NeuralNetworkClassifier *)&__p, (const CoreML::Specification::NeuralNetworkClassifier *)&v251);
    CoreML::Specification::NeuralNetworkPreprocessing::NeuralNetworkPreprocessing((CoreML::Specification::NeuralNetworkPreprocessing *)v307, *(const CoreML::Specification::NeuralNetworkPreprocessing **)(v271 + 8 * v85 + 8));
    if (*((char *)v310 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v306, *(const std::string::value_type **)v310, *((void *)v310 + 1));
    }
    else
    {
      long long v86 = *v310;
      v306.__r_.__value_.__r.__words[2] = *((void *)v310 + 2);
      *(_OWORD *)&v306.__r_.__value_.__l.__data_ = v86;
    }
    if (v80 == std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>((uint64_t)v5, &v306))
    {
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__v);
      v220 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__v.__end_, (uint64_t)"Mean image preprocessor input blob ('", 37);
      if ((v306.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unsigned int v221 = &v306;
      }
      else {
        unsigned int v221 = (std::string *)v306.__r_.__value_.__r.__words[0];
      }
      if ((v306.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v222 = HIBYTE(v306.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v222 = v306.__r_.__value_.__l.__size_;
      }
      std::string v223 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v220, (uint64_t)v221, v222);
      std::string v224 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v223, (uint64_t)"') not found. ", 14);
      std::endl[abi:ne180100]<char,std::char_traits<char>>(v224);
      std::string v225 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::runtime_error::runtime_error(v225, &__s);
      __cxa_throw(v225, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    if ((v306.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v87 = HIBYTE(v306.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v87 = v306.__r_.__value_.__l.__size_;
    }
    std::string::basic_string[abi:ne180100]((uint64_t)&__s, v87 + 13);
    if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v88 = &__s;
    }
    else {
      long long v88 = (std::string *)__s.__r_.__value_.__r.__words[0];
    }
    if (v87)
    {
      if ((v306.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        __int16 v89 = &v306;
      }
      else {
        __int16 v89 = (std::string *)v306.__r_.__value_.__r.__words[0];
      }
      memmove(v88, v89, v87);
    }
    strcpy((char *)v88 + v87, "_preprocessed");
    if (v269 < 1) {
      goto LABEL_239;
    }
    uint64_t v90 = 0;
LABEL_195:
    uint64_t v91 = *(void *)(v270 + 8 * v90 + 8);
    memset(&__v, 0, 24);
    if (*(int *)(v91 + 24) < 1) {
      goto LABEL_238;
    }
    uint64_t v92 = 0;
    char v93 = 0;
    while (1)
    {
      long long v94 = *(long long **)(*(void *)(v91 + 32) + 8 * v92 + 8);
      if (*((char *)v94 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v301, *(const std::string::value_type **)v94, *((void *)v94 + 1));
      }
      else
      {
        long long v95 = *v94;
        v301.__r_.__value_.__r.__words[2] = *((void *)v94 + 2);
        *(_OWORD *)&v301.__r_.__value_.__l.__data_ = v95;
      }
      std::string::size_type v96 = v301.__r_.__value_.__l.__size_;
      if ((v301.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v97 = HIBYTE(v301.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v97 = v301.__r_.__value_.__l.__size_;
      }
      std::string::size_type v98 = HIBYTE(v306.__r_.__value_.__r.__words[2]);
      if ((v306.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v98 = v306.__r_.__value_.__l.__size_;
      }
      if (v97 == v98)
      {
        if ((v306.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string v99 = &v306;
        }
        else {
          std::string v99 = (std::string *)v306.__r_.__value_.__r.__words[0];
        }
        if ((*((unsigned char *)&v301.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          long long v104 = (const std::string::value_type *)v301.__r_.__value_.__r.__words[0];
          if (!memcmp(v301.__r_.__value_.__l.__data_, v99, v301.__r_.__value_.__l.__size_))
          {
LABEL_221:
            std::__split_buffer<std::string>::pointer v106 = __v.__begin_;
            if (__v.__begin_ >= __v.__end_)
            {
              long long v105 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&__v, (long long *)&__s);
            }
            else
            {
              if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external(__v.__begin_, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
              }
              else
              {
                long long v107 = *(_OWORD *)&__s.__r_.__value_.__l.__data_;
                __v.__begin_->__r_.__value_.__r.__words[2] = __s.__r_.__value_.__r.__words[2];
                *(_OWORD *)&v106->__r_.__value_.__l.__data_ = v107;
              }
              long long v105 = v106 + 1;
            }
            char v93 = 1;
            goto LABEL_231;
          }
          unint64_t v102 = __v.__begin_;
          if (__v.__begin_ < __v.__end_) {
            goto LABEL_226;
          }
          goto LABEL_220;
        }
        if (!*((unsigned char *)&v301.__r_.__value_.__s + 23)) {
          goto LABEL_221;
        }
        long long v100 = &v301;
        uint64_t v101 = HIBYTE(v301.__r_.__value_.__r.__words[2]);
        while (v100->__r_.__value_.__s.__data_[0] == v99->__r_.__value_.__s.__data_[0])
        {
          long long v100 = (std::string *)((char *)v100 + 1);
          std::string v99 = (std::string *)((char *)v99 + 1);
          if (!--v101) {
            goto LABEL_221;
          }
        }
      }
      unint64_t v102 = __v.__begin_;
      if (__v.__begin_ < __v.__end_)
      {
        if ((*((unsigned char *)&v301.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          long long v104 = (const std::string::value_type *)v301.__r_.__value_.__r.__words[0];
LABEL_226:
          std::string::__init_copy_ctor_external(v102, v104, v96);
        }
        else
        {
          long long v103 = *(_OWORD *)&v301.__r_.__value_.__l.__data_;
          __v.__begin_->__r_.__value_.__r.__words[2] = v301.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v102->__r_.__value_.__l.__data_ = v103;
        }
        long long v105 = v102 + 1;
        goto LABEL_231;
      }
LABEL_220:
      long long v105 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&__v, (long long *)&v301);
LABEL_231:
      __v.__begin_ = v105;
      if (SHIBYTE(v301.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v301.__r_.__value_.__l.__data_);
      }
      if (++v92 >= *(int *)(v91 + 24))
      {
        if (v93)
        {
          google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(v91 + 16);
          int v108 = __v.__first_;
          std::__split_buffer<std::string>::pointer v109 = __v.__begin_;
          while (v108 != v109)
            CoreML::Specification::NeuralNetworkLayer::add_input(v91, v108++);
        }
LABEL_238:
        v301.__r_.__value_.__r.__words[0] = (std::string::size_type)&__v;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v301);
        if (++v90 >= v269)
        {
LABEL_239:
          memset(&v301, 0, sizeof(v301));
          v299 = 0;
          uint64_t v298 = 0;
          uint64_t v300 = 0;
          std::operator+<char>();
          long long v110 = (_OWORD *)v301.__r_.__value_.__l.__size_;
          int v6 = a3;
          BOOL v5 = a4;
          if (v301.__r_.__value_.__l.__size_ >= v301.__r_.__value_.__r.__words[2])
          {
            unint64_t v112 = 0xAAAAAAAAAAAAAAABLL
                 * ((uint64_t)(v301.__r_.__value_.__l.__size_ - v301.__r_.__value_.__r.__words[0]) >> 3);
            unint64_t v113 = v112 + 1;
            if (v112 + 1 > 0xAAAAAAAAAAAAAAALL) {
              std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
            }
            if (0x5555555555555556
               * ((uint64_t)(v301.__r_.__value_.__r.__words[2] - v301.__r_.__value_.__r.__words[0]) >> 3) > v113)
              unint64_t v113 = 0x5555555555555556
                   * ((uint64_t)(v301.__r_.__value_.__r.__words[2] - v301.__r_.__value_.__r.__words[0]) >> 3);
            if (0xAAAAAAAAAAAAAAABLL
               * ((uint64_t)(v301.__r_.__value_.__r.__words[2] - v301.__r_.__value_.__r.__words[0]) >> 3) >= 0x555555555555555)
              unint64_t v114 = 0xAAAAAAAAAAAAAAALL;
            else {
              unint64_t v114 = v113;
            }
            __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v301.__r_.__value_.__r.__words[2];
            if (v114) {
              int v115 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v301.__r_.__value_.__r.__words[2], v114);
            }
            else {
              int v115 = 0;
            }
            id v116 = v115 + v112;
            __v.__first_ = v115;
            __v.__begin_ = v116;
            __v.__end_cap_.__value_ = &v115[v114];
            long long v117 = v296;
            v116->__r_.__value_.__r.__words[2] = v297;
            *(_OWORD *)&v116->__r_.__value_.__l.__data_ = v117;
            unint64_t v297 = 0;
            long long v296 = 0uLL;
            __v.__end_ = v116 + 1;
            std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)&v301, &__v);
            std::string::size_type v118 = v301.__r_.__value_.__l.__size_;
            std::__split_buffer<std::string>::~__split_buffer(&__v);
            v301.__r_.__value_.__l.__size_ = v118;
            if (SHIBYTE(v297) < 0) {
              operator delete((void *)v296);
            }
          }
          else
          {
            long long v111 = v296;
            *(void *)(v301.__r_.__value_.__l.__size_ + 1CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = v297;
            *long long v110 = v111;
            v301.__r_.__value_.__l.__size_ = (std::string::size_type)v110 + 24;
          }
          unint64_t v297 = 0xFFFFFFFF00000001;
          long long v296 = xmmword_19EC7B870;
          __v.__first_ = &v306;
          DWORD2(v29CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a4, &v306, (long long **)&__v)+ 16);
          __v.__first_ = &v306;
          DWORD1(v29CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a4, &v306, (long long **)&__v)+ 15);
          __v.__first_ = &v306;
          uint64_t v119 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a4, &v306, (long long **)&__v);
          int v120 = *((_DWORD *)v119 + 14);
          LODWORD(v29CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = v120;
          int v121 = DWORD2(v296);
          int v122 = DWORD1(v296);
          if (v312 == 11)
          {
            std::string v123 = v311;
          }
          else
          {
            CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v119);
            std::string v123 = &CoreML::Specification::_NeuralNetworkMeanImage_default_instance_;
          }
          int v124 = v121 * v120 * v122;
          if (*((_DWORD *)v123 + 4) != v124)
          {
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__v);
            uint64_t v238 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__v.__end_, (uint64_t)"Mean Image Preprocessing: mean image size must be same as input image size.", 75);
            std::endl[abi:ne180100]<char,std::char_traits<char>>(v238);
            v239 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::stringbuf::str();
            std::runtime_error::runtime_error(v239, &v295);
            __cxa_throw(v239, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          std::string::basic_string[abi:ne180100]<0>(&__v, "load_constant");
          std::operator+<char>();
          memset(&v292, 0, sizeof(v292));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v292, v298, v299, 0xAAAAAAAAAAAAAAABLL * (((char *)v299 - (char *)v298) >> 3));
          memset(&v291, 0, sizeof(v291));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v291, (long long *)v301.__r_.__value_.__l.__data_, (long long *)v301.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v301.__r_.__value_.__l.__size_ - v301.__r_.__value_.__r.__words[0]) >> 3));
          Espresso::sequential_builder::add<Espresso::load_constant_params>(&v293, a3, (uint64_t)&__v, (uint64_t)&v295, (uint64_t)&v296, (long long *)v292.__r_.__value_.__l.__data_, (long long *)v292.__r_.__value_.__l.__size_, (long long **)&v291);
          v286.__begin_ = &v291;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v286);
          v286.__begin_ = &v292;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v286);
          if (SHIBYTE(v295.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v295.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(__v.__end_) < 0) {
            operator delete(__v.__first_);
          }
          int v125 = v294;
          if (v294) {
            atomic_fetch_add_explicit(&v294->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          long long v126 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v289, v296, SDWORD1(v296), SDWORD2(v296), SHIDWORD(v296));
          if (v124 <= 0)
          {
            uint64_t v128 = v289;
          }
          else
          {
            uint64_t v127 = 0;
            uint64_t v128 = v289;
            uint64_t v129 = 4 * v124;
            do
            {
              if (v312 == 11)
              {
                std::string v130 = v311;
              }
              else
              {
                long long v126 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v126);
                std::string v130 = &CoreML::Specification::_NeuralNetworkMeanImage_default_instance_;
              }
              *(float *)(*(void *)(v128 + 24) + v127) = -*(float *)(v130[3] + v127 + 8);
              v127 += 4;
            }
            while (v129 != v127);
          }
          unint64_t v131 = v290;
          uint64_t v287 = v128;
          v288 = v290;
          if (v290) {
            atomic_fetch_add_explicit(&v290->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          Espresso::generic_load_constant_kernel::set_constant_blob();
          if (v288) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v288);
          }
          memset(&v295, 0, sizeof(v295));
          memset(&v286, 0, sizeof(v286));
          v286.__end_ = (std::vector<std::string>::pointer)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v286, (long long *)&v306);
          std::operator+<char>();
          std::vector<std::string>::pointer v132 = v286.__end_;
          if (v286.__end_ >= v286.__end_cap_.__value_)
          {
            unint64_t v134 = 0xAAAAAAAAAAAAAAABLL * (((char *)v286.__end_ - (char *)v286.__begin_) >> 3);
            unint64_t v135 = v134 + 1;
            if (v134 + 1 > 0xAAAAAAAAAAAAAAALL) {
              std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
            }
            if (0x5555555555555556 * (((char *)v286.__end_cap_.__value_ - (char *)v286.__begin_) >> 3) > v135) {
              unint64_t v135 = 0x5555555555555556 * (((char *)v286.__end_cap_.__value_ - (char *)v286.__begin_) >> 3);
            }
            if (0xAAAAAAAAAAAAAAABLL * (((char *)v286.__end_cap_.__value_ - (char *)v286.__begin_) >> 3) >= 0x555555555555555) {
              unint64_t v136 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v136 = v135;
            }
            __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v286.__end_cap_;
            if (v136) {
              long long v137 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v286.__end_cap_, v136);
            }
            else {
              long long v137 = 0;
            }
            int v138 = v137 + v134;
            __v.__first_ = v137;
            __v.__begin_ = v138;
            __v.__end_cap_.__value_ = &v137[v136];
            long long v139 = v284;
            v138->__r_.__value_.__r.__words[2] = v285;
            *(_OWORD *)&v138->__r_.__value_.__l.__data_ = v139;
            std::string::size_type v285 = 0;
            long long v284 = 0uLL;
            __v.__end_ = v138 + 1;
            std::vector<std::string>::__swap_out_circular_buffer(&v286, &__v);
            uint64_t v140 = v286.__end_;
            std::__split_buffer<std::string>::~__split_buffer(&__v);
            v286.__end_ = v140;
            if (SHIBYTE(v285) < 0) {
              operator delete((void *)v284);
            }
          }
          else
          {
            long long v133 = v284;
            v286.__end_->__r_.__value_.__r.__words[2] = v285;
            *(_OWORD *)&v132->__r_.__value_.__l.__data_ = v133;
            v286.__end_ = v132 + 1;
          }
          std::string v141 = (_OWORD *)v295.__r_.__value_.__l.__size_;
          if (v295.__r_.__value_.__l.__size_ >= v295.__r_.__value_.__r.__words[2])
          {
            std::string::size_type v143 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v295, (long long *)&__s);
          }
          else
          {
            if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)v295.__r_.__value_.__l.__size_, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
            }
            else
            {
              long long v142 = *(_OWORD *)&__s.__r_.__value_.__l.__data_;
              *(void *)(v295.__r_.__value_.__l.__size_ + 1CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = *((void *)&__s.__r_.__value_.__l + 2);
              *std::string v141 = v142;
            }
            std::string::size_type v143 = (std::string::size_type)v141 + 24;
          }
          v295.__r_.__value_.__l.__size_ = v143;
          __v.__end_ = (std::__split_buffer<std::string>::pointer)897988541;
          LOBYTE(__v.__end_cap_.__value_) = 0;
          *(void *)((char *)&v304 + 4) = 0;
          __v.__begin_ = (std::__split_buffer<std::string>::pointer)1065353216;
          __v.__first_ = 0;
          std::string::basic_string[abi:ne180100]<0>(&v284, "elementwise");
          std::operator+<char>();
          memset(&v279, 0, sizeof(v279));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v279, (long long *)v286.__begin_, (long long *)v286.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v286.__end_ - (char *)v286.__begin_) >> 3));
          memset(&v278, 0, sizeof(v278));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v278, (long long *)v295.__r_.__value_.__l.__data_, (long long *)v295.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v295.__r_.__value_.__l.__size_ - v295.__r_.__value_.__r.__words[0]) >> 3));
          Espresso::sequential_builder::add<Espresso::elementwise_params>(&v282, a3, (uint64_t)&v284, (uint64_t)v280, (uint64_t)&__v, (long long *)v279.__r_.__value_.__l.__data_, (long long *)v279.__r_.__value_.__l.__size_, (long long **)&v278);
          v313[0] = (void **)&v278;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v313);
          v313[0] = (void **)&v279;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v313);
          if (v281 < 0) {
            operator delete(v280[0]);
          }
          if (SHIBYTE(v285) < 0) {
            operator delete((void *)v284);
          }
          uint64_t v144 = std::map<std::string,std::string>::at((uint64_t)a4, &v306);
          v280[0] = &__s;
          long long v145 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a4, &__s, (long long **)v280);
          long long v146 = *(_OWORD *)v144;
          long long v147 = *(_OWORD *)(v144 + 16);
          *((void *)v145 + 11) = *(void *)(v144 + 32);
          *(_OWORD *)(v145 + 72) = v147;
          *(_OWORD *)(v145 + 5CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = v146;
          if (v145 + 56 != (char *)v144) {
            std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v145 + 96, *(char **)(v144 + 40), *(void *)(v144 + 48), (uint64_t)(*(void *)(v144 + 48) - *(void *)(v144 + 40)) >> 2);
          }
          if (v283) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v283);
          }
          __v.__first_ = (std::__split_buffer<std::string>::pointer)&v286;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
          __v.__first_ = &v295;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
          if (v131) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v131);
          }
          if (v125) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v125);
          }
          int v80 = v247;
          if (v294) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v294);
          }
          __v.__first_ = (std::__split_buffer<std::string>::pointer)&v298;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
          __v.__first_ = &v301;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
          if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__s.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v306.__r_.__value_.__l.__data_);
          }
          CoreML::Specification::NeuralNetworkPreprocessing::~NeuralNetworkPreprocessing((CoreML::Specification::NeuralNetworkPreprocessing *)v307);
          CoreML::Specification::NeuralNetworkClassifier::Clear((CoreML::Specification::NeuralNetworkClassifier *)&v251);
          CoreML::Specification::NeuralNetworkClassifier::MergeFrom(&v251, (const CoreML::Specification::NeuralNetworkClassifier *)&__p);
          CoreML::Specification::NeuralNetworkClassifier::~NeuralNetworkClassifier((CoreML::Specification::NeuralNetworkClassifier *)&__p);
LABEL_312:
          CoreML::Specification::NeuralNetworkPreprocessing::~NeuralNetworkPreprocessing((CoreML::Specification::NeuralNetworkPreprocessing *)v272);
          if (++v85 >= v254)
          {
LABEL_313:
            v307[0] = a5;
            uint64_t v308 = 0;
            int v309 = 0;
            std::string __p = v6;
            v267 = v5;
            v268 = v307;
            if (v252 < 1)
            {
              uint64_t v78 = 0;
            }
            else
            {
              uint64_t v148 = 0;
              LODWORD(v78) = 0;
              do
              {
                ++*((_DWORD *)v268 + 1);
                CoreML::Specification::NeuralNetworkLayer::NeuralNetworkLayer((CoreML::Specification::NeuralNetworkLayer *)&__v, *(const CoreML::Specification::NeuralNetworkLayer **)(v253 + 8 * v148 + 8));
                if (LayerTranslator::layerTranslateFn((LayerTranslator *)&__p, (const std::string **)&__v.__first_))uint64_t v78 = 1; {
                else
                }
                  uint64_t v78 = v78;
                CoreML::Specification::NeuralNetworkLayer::~NeuralNetworkLayer((CoreML::Specification::NeuralNetworkLayer *)&__v);
                ++v148;
              }
              while (v148 < v252);
            }
            CoreML::Specification::NeuralNetworkClassifier::~NeuralNetworkClassifier((CoreML::Specification::NeuralNetworkClassifier *)&v251);
            return v78;
          }
          goto LABEL_177;
        }
        goto LABEL_195;
      }
    }
  }
  CoreML::Specification::NeuralNetworkRegressor::NeuralNetworkRegressor((CoreML::Specification::NeuralNetworkRegressor *)&v256, a1);
  int v150 = (uint64_t *)(v5 + 1);
  int32x4_t v149 = *v5;
  if (*v5 != (uint64_t *)(v5 + 1))
  {
    do
    {
      *(uint64_t *)((char *)v149 + 68) = -1;
      long long v151 = *(_OWORD *)(v149 + 9);
      *(_OWORD *)&__v.__first_ = *(_OWORD *)(v149 + 7);
      *(_OWORD *)&__v.__end_ = v151;
      uint64_t v152 = (const void *)v149[12];
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)v149[11];
      long long v304 = 0uLL;
      uint64_t v305 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v304, v152, v149[13], (v149[13] - (uint64_t)v152) >> 2);
      std::__split_buffer<std::string> v274 = __v;
      v276 = 0;
      uint64_t v277 = 0;
      v275 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v275, (const void *)v304, *((uint64_t *)&v304 + 1), (uint64_t)(*((void *)&v304 + 1) - v304) >> 2);
      std::string::basic_string[abi:ne180100]<0>(&__p, "Input");
      EspressoConverter::validateShape((int *)&v274, (uint64_t)&__p, (uint64_t)(v149 + 4));
      if (SHIBYTE(v268) < 0) {
        operator delete(__p);
      }
      if (v275)
      {
        v276 = v275;
        operator delete(v275);
      }
      if ((void)v304) {
        operator delete((void *)v304);
      }
      uint64_t v153 = (uint64_t *)v149[1];
      if (v153)
      {
        do
        {
          BOOL v154 = v153;
          uint64_t v153 = (uint64_t *)*v153;
        }
        while (v153);
      }
      else
      {
        do
        {
          BOOL v154 = (uint64_t *)v149[2];
          BOOL v13 = *v154 == (void)v149;
          int32x4_t v149 = v154;
        }
        while (!v13);
      }
      int32x4_t v149 = v154;
    }
    while (v154 != v150);
  }
  if (v259 < 1) {
    goto LABEL_471;
  }
  uint64_t v155 = 0;
  v248 = (uint64_t *)(v5 + 1);
  do
  {
    CoreML::Specification::NeuralNetworkPreprocessing::NeuralNetworkPreprocessing((CoreML::Specification::NeuralNetworkPreprocessing *)v272, *(const CoreML::Specification::NeuralNetworkPreprocessing **)(v260 + 8 * v155 + 8));
    if (v273 != 11) {
      goto LABEL_470;
    }
    CoreML::Specification::NeuralNetworkRegressor::NeuralNetworkRegressor((CoreML::Specification::NeuralNetworkRegressor *)&__p, (const CoreML::Specification::NeuralNetworkRegressor *)&v256);
    CoreML::Specification::NeuralNetworkPreprocessing::NeuralNetworkPreprocessing((CoreML::Specification::NeuralNetworkPreprocessing *)v307, *(const CoreML::Specification::NeuralNetworkPreprocessing **)(v271 + 8 * v155 + 8));
    if (*((char *)v310 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v306, *(const std::string::value_type **)v310, *((void *)v310 + 1));
    }
    else
    {
      long long v156 = *v310;
      v306.__r_.__value_.__r.__words[2] = *((void *)v310 + 2);
      *(_OWORD *)&v306.__r_.__value_.__l.__data_ = v156;
    }
    if (v150 == std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>((uint64_t)v5, &v306))
    {
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__v);
      std::string v226 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__v.__end_, (uint64_t)"Mean image preprocessor input blob ('", 37);
      if ((v306.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string v227 = &v306;
      }
      else {
        std::string v227 = (std::string *)v306.__r_.__value_.__r.__words[0];
      }
      if ((v306.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v228 = HIBYTE(v306.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v228 = v306.__r_.__value_.__l.__size_;
      }
      uint64_t v229 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v226, (uint64_t)v227, v228);
      uint64_t v230 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v229, (uint64_t)"') not found. ", 14);
      std::endl[abi:ne180100]<char,std::char_traits<char>>(v230);
      int v231 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::runtime_error::runtime_error(v231, &__s);
      __cxa_throw(v231, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    if ((v306.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v157 = HIBYTE(v306.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v157 = v306.__r_.__value_.__l.__size_;
    }
    std::string::basic_string[abi:ne180100]((uint64_t)&__s, v157 + 13);
    if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v158 = &__s;
    }
    else {
      uint64_t v158 = (std::string *)__s.__r_.__value_.__r.__words[0];
    }
    if (v157)
    {
      if ((v306.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v159 = &v306;
      }
      else {
        uint64_t v159 = (std::string *)v306.__r_.__value_.__r.__words[0];
      }
      memmove(v158, v159, v157);
    }
    strcpy((char *)v158 + v157, "_preprocessed");
    if (v269 < 1) {
      goto LABEL_397;
    }
    for (uint64_t j = 0; j < v269; ++j)
    {
      uint64_t v161 = *(void *)(v270 + 8 * j + 8);
      memset(&__v, 0, 24);
      if (*(int *)(v161 + 24) < 1) {
        goto LABEL_396;
      }
      uint64_t v162 = 0;
      char v163 = 0;
      do
      {
        long long v164 = *(long long **)(*(void *)(v161 + 32) + 8 * v162 + 8);
        if (*((char *)v164 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v301, *(const std::string::value_type **)v164, *((void *)v164 + 1));
        }
        else
        {
          long long v165 = *v164;
          v301.__r_.__value_.__r.__words[2] = *((void *)v164 + 2);
          *(_OWORD *)&v301.__r_.__value_.__l.__data_ = v165;
        }
        std::string::size_type v166 = v301.__r_.__value_.__l.__size_;
        if ((v301.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v167 = HIBYTE(v301.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v167 = v301.__r_.__value_.__l.__size_;
        }
        std::string::size_type v168 = HIBYTE(v306.__r_.__value_.__r.__words[2]);
        if ((v306.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v168 = v306.__r_.__value_.__l.__size_;
        }
        if (v167 != v168) {
          goto LABEL_373;
        }
        if ((v306.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v169 = &v306;
        }
        else {
          int v169 = (std::string *)v306.__r_.__value_.__r.__words[0];
        }
        if ((*((unsigned char *)&v301.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          uint64_t v174 = (const std::string::value_type *)v301.__r_.__value_.__r.__words[0];
          if (memcmp(v301.__r_.__value_.__l.__data_, v169, v301.__r_.__value_.__l.__size_))
          {
            std::__split_buffer<std::string>::pointer v172 = __v.__begin_;
            if (__v.__begin_ >= __v.__end_)
            {
LABEL_378:
              long long v175 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&__v, (long long *)&v301);
              goto LABEL_389;
            }
            goto LABEL_384;
          }
        }
        else if (*((unsigned char *)&v301.__r_.__value_.__s + 23))
        {
          std::string v170 = &v301;
          uint64_t v171 = HIBYTE(v301.__r_.__value_.__r.__words[2]);
          while (v170->__r_.__value_.__s.__data_[0] == v169->__r_.__value_.__s.__data_[0])
          {
            std::string v170 = (std::string *)((char *)v170 + 1);
            int v169 = (std::string *)((char *)v169 + 1);
            if (!--v171) {
              goto LABEL_379;
            }
          }
LABEL_373:
          std::__split_buffer<std::string>::pointer v172 = __v.__begin_;
          if (__v.__begin_ >= __v.__end_) {
            goto LABEL_378;
          }
          if ((*((unsigned char *)&v301.__r_.__value_.__s + 23) & 0x80) == 0)
          {
            long long v173 = *(_OWORD *)&v301.__r_.__value_.__l.__data_;
            __v.__begin_->__r_.__value_.__r.__words[2] = v301.__r_.__value_.__r.__words[2];
            *(_OWORD *)&v172->__r_.__value_.__l.__data_ = v173;
LABEL_385:
            long long v175 = v172 + 1;
            goto LABEL_389;
          }
          uint64_t v174 = (const std::string::value_type *)v301.__r_.__value_.__r.__words[0];
LABEL_384:
          std::string::__init_copy_ctor_external(v172, v174, v166);
          goto LABEL_385;
        }
LABEL_379:
        std::__split_buffer<std::string>::pointer v176 = __v.__begin_;
        if (__v.__begin_ >= __v.__end_)
        {
          long long v175 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&__v, (long long *)&__s);
        }
        else
        {
          if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(__v.__begin_, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
          }
          else
          {
            long long v177 = *(_OWORD *)&__s.__r_.__value_.__l.__data_;
            __v.__begin_->__r_.__value_.__r.__words[2] = __s.__r_.__value_.__r.__words[2];
            *(_OWORD *)&v176->__r_.__value_.__l.__data_ = v177;
          }
          long long v175 = v176 + 1;
        }
        char v163 = 1;
LABEL_389:
        __v.__begin_ = v175;
        if (SHIBYTE(v301.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v301.__r_.__value_.__l.__data_);
        }
        ++v162;
      }
      while (v162 < *(int *)(v161 + 24));
      if (v163)
      {
        google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(v161 + 16);
        std::string::size_type v178 = __v.__first_;
        std::__split_buffer<std::string>::pointer v179 = __v.__begin_;
        while (v178 != v179)
          CoreML::Specification::NeuralNetworkLayer::add_input(v161, v178++);
      }
LABEL_396:
      v301.__r_.__value_.__r.__words[0] = (std::string::size_type)&__v;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v301);
    }
LABEL_397:
    memset(&v301, 0, sizeof(v301));
    v299 = 0;
    uint64_t v298 = 0;
    uint64_t v300 = 0;
    std::operator+<char>();
    uint64_t v180 = (_OWORD *)v301.__r_.__value_.__l.__size_;
    int v6 = a3;
    BOOL v5 = a4;
    if (v301.__r_.__value_.__l.__size_ >= v301.__r_.__value_.__r.__words[2])
    {
      unint64_t v182 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v301.__r_.__value_.__l.__size_ - v301.__r_.__value_.__r.__words[0]) >> 3);
      unint64_t v183 = v182 + 1;
      if (v182 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
      }
      if (0x5555555555555556
         * ((uint64_t)(v301.__r_.__value_.__r.__words[2] - v301.__r_.__value_.__r.__words[0]) >> 3) > v183)
        unint64_t v183 = 0x5555555555555556
             * ((uint64_t)(v301.__r_.__value_.__r.__words[2] - v301.__r_.__value_.__r.__words[0]) >> 3);
      if (0xAAAAAAAAAAAAAAABLL
         * ((uint64_t)(v301.__r_.__value_.__r.__words[2] - v301.__r_.__value_.__r.__words[0]) >> 3) >= 0x555555555555555)
        unint64_t v184 = 0xAAAAAAAAAAAAAAALL;
      else {
        unint64_t v184 = v183;
      }
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v301.__r_.__value_.__r.__words[2];
      if (v184) {
        uint64_t v185 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v301.__r_.__value_.__r.__words[2], v184);
      }
      else {
        uint64_t v185 = 0;
      }
      uint64_t v186 = v185 + v182;
      __v.__first_ = v185;
      __v.__begin_ = v186;
      __v.__end_cap_.__value_ = &v185[v184];
      long long v187 = v296;
      v186->__r_.__value_.__r.__words[2] = v297;
      *(_OWORD *)&v186->__r_.__value_.__l.__data_ = v187;
      unint64_t v297 = 0;
      long long v296 = 0uLL;
      __v.__end_ = v186 + 1;
      std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)&v301, &__v);
      std::string::size_type v188 = v301.__r_.__value_.__l.__size_;
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      v301.__r_.__value_.__l.__size_ = v188;
      if (SHIBYTE(v297) < 0) {
        operator delete((void *)v296);
      }
    }
    else
    {
      long long v181 = v296;
      *(void *)(v301.__r_.__value_.__l.__size_ + 1CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = v297;
      _OWORD *v180 = v181;
      v301.__r_.__value_.__l.__size_ = (std::string::size_type)v180 + 24;
    }
    unint64_t v297 = 0xFFFFFFFF00000001;
    long long v296 = xmmword_19EC7B870;
    __v.__first_ = &v306;
    DWORD2(v29CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a4, &v306, (long long **)&__v)+ 16);
    __v.__first_ = &v306;
    DWORD1(v29CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a4, &v306, (long long **)&__v)+ 15);
    __v.__first_ = &v306;
    int v189 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a4, &v306, (long long **)&__v);
    int v190 = *((_DWORD *)v189 + 14);
    LODWORD(v29CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = v190;
    int v191 = DWORD2(v296);
    int v192 = DWORD1(v296);
    if (v312 == 11)
    {
      uint64_t v193 = v311;
    }
    else
    {
      CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v189);
      uint64_t v193 = &CoreML::Specification::_NeuralNetworkMeanImage_default_instance_;
    }
    int v194 = v191 * v190 * v192;
    if (*((_DWORD *)v193 + 4) != v194)
    {
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__v);
      v240 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__v.__end_, (uint64_t)"Mean Image Preprocessing: mean image size must be same as input image size.", 75);
      std::endl[abi:ne180100]<char,std::char_traits<char>>(v240);
      uint64_t v241 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::runtime_error::runtime_error(v241, &v295);
      __cxa_throw(v241, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    std::string::basic_string[abi:ne180100]<0>(&__v, "load_constant");
    std::operator+<char>();
    memset(&v292, 0, sizeof(v292));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v292, v298, v299, 0xAAAAAAAAAAAAAAABLL * (((char *)v299 - (char *)v298) >> 3));
    memset(&v291, 0, sizeof(v291));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v291, (long long *)v301.__r_.__value_.__l.__data_, (long long *)v301.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v301.__r_.__value_.__l.__size_ - v301.__r_.__value_.__r.__words[0]) >> 3));
    Espresso::sequential_builder::add<Espresso::load_constant_params>(&v293, a3, (uint64_t)&__v, (uint64_t)&v295, (uint64_t)&v296, (long long *)v292.__r_.__value_.__l.__data_, (long long *)v292.__r_.__value_.__l.__size_, (long long **)&v291);
    v286.__begin_ = &v291;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v286);
    v286.__begin_ = &v292;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v286);
    if (SHIBYTE(v295.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v295.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__v.__end_) < 0) {
      operator delete(__v.__first_);
    }
    int v195 = v294;
    if (v294) {
      atomic_fetch_add_explicit(&v294->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    char v196 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v289, v296, SDWORD1(v296), SDWORD2(v296), SHIDWORD(v296));
    if (v194 <= 0)
    {
      uint64_t v198 = v289;
    }
    else
    {
      uint64_t v197 = 0;
      uint64_t v198 = v289;
      uint64_t v199 = 4 * v194;
      do
      {
        if (v312 == 11)
        {
          uint64_t v200 = v311;
        }
        else
        {
          char v196 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v196);
          uint64_t v200 = &CoreML::Specification::_NeuralNetworkMeanImage_default_instance_;
        }
        *(float *)(*(void *)(v198 + 24) + v197) = -*(float *)(v200[3] + v197 + 8);
        v197 += 4;
      }
      while (v199 != v197);
    }
    uint64_t v201 = v290;
    uint64_t v287 = v198;
    v288 = v290;
    if (v290) {
      atomic_fetch_add_explicit(&v290->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::generic_load_constant_kernel::set_constant_blob();
    if (v288) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v288);
    }
    memset(&v295, 0, sizeof(v295));
    memset(&v286, 0, sizeof(v286));
    v286.__end_ = (std::vector<std::string>::pointer)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v286, (long long *)&v306);
    std::operator+<char>();
    std::vector<std::string>::pointer v202 = v286.__end_;
    if (v286.__end_ >= v286.__end_cap_.__value_)
    {
      unint64_t v204 = 0xAAAAAAAAAAAAAAABLL * (((char *)v286.__end_ - (char *)v286.__begin_) >> 3);
      unint64_t v205 = v204 + 1;
      if (v204 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
      }
      if (0x5555555555555556 * (((char *)v286.__end_cap_.__value_ - (char *)v286.__begin_) >> 3) > v205) {
        unint64_t v205 = 0x5555555555555556 * (((char *)v286.__end_cap_.__value_ - (char *)v286.__begin_) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v286.__end_cap_.__value_ - (char *)v286.__begin_) >> 3) >= 0x555555555555555) {
        unint64_t v206 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v206 = v205;
      }
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v286.__end_cap_;
      if (v206) {
        uint64_t v207 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v286.__end_cap_, v206);
      }
      else {
        uint64_t v207 = 0;
      }
      unint64_t v208 = v207 + v204;
      __v.__first_ = v207;
      __v.__begin_ = v208;
      __v.__end_cap_.__value_ = &v207[v206];
      long long v209 = v284;
      v208->__r_.__value_.__r.__words[2] = v285;
      *(_OWORD *)&v208->__r_.__value_.__l.__data_ = v209;
      std::string::size_type v285 = 0;
      long long v284 = 0uLL;
      __v.__end_ = v208 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(&v286, &__v);
      unsigned __int8 v210 = v286.__end_;
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      v286.__end_ = v210;
      if (SHIBYTE(v285) < 0) {
        operator delete((void *)v284);
      }
    }
    else
    {
      long long v203 = v284;
      v286.__end_->__r_.__value_.__r.__words[2] = v285;
      *(_OWORD *)&v202->__r_.__value_.__l.__data_ = v203;
      v286.__end_ = v202 + 1;
    }
    long long v211 = (_OWORD *)v295.__r_.__value_.__l.__size_;
    if (v295.__r_.__value_.__l.__size_ >= v295.__r_.__value_.__r.__words[2])
    {
      std::string::size_type v213 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v295, (long long *)&__s);
    }
    else
    {
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v295.__r_.__value_.__l.__size_, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
      }
      else
      {
        long long v212 = *(_OWORD *)&__s.__r_.__value_.__l.__data_;
        *(void *)(v295.__r_.__value_.__l.__size_ + 1CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = *((void *)&__s.__r_.__value_.__l + 2);
        *long long v211 = v212;
      }
      std::string::size_type v213 = (std::string::size_type)v211 + 24;
    }
    v295.__r_.__value_.__l.__size_ = v213;
    __v.__end_ = (std::__split_buffer<std::string>::pointer)897988541;
    LOBYTE(__v.__end_cap_.__value_) = 0;
    *(void *)((char *)&v304 + 4) = 0;
    __v.__begin_ = (std::__split_buffer<std::string>::pointer)1065353216;
    __v.__first_ = 0;
    std::string::basic_string[abi:ne180100]<0>(&v284, "elementwise");
    std::operator+<char>();
    memset(&v279, 0, sizeof(v279));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v279, (long long *)v286.__begin_, (long long *)v286.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v286.__end_ - (char *)v286.__begin_) >> 3));
    memset(&v278, 0, sizeof(v278));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v278, (long long *)v295.__r_.__value_.__l.__data_, (long long *)v295.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v295.__r_.__value_.__l.__size_ - v295.__r_.__value_.__r.__words[0]) >> 3));
    Espresso::sequential_builder::add<Espresso::elementwise_params>(&v282, a3, (uint64_t)&v284, (uint64_t)v280, (uint64_t)&__v, (long long *)v279.__r_.__value_.__l.__data_, (long long *)v279.__r_.__value_.__l.__size_, (long long **)&v278);
    v313[0] = (void **)&v278;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v313);
    v313[0] = (void **)&v279;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v313);
    if (v281 < 0) {
      operator delete(v280[0]);
    }
    if (SHIBYTE(v285) < 0) {
      operator delete((void *)v284);
    }
    uint64_t v214 = std::map<std::string,std::string>::at((uint64_t)a4, &v306);
    v280[0] = &__s;
    uint64_t v215 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a4, &__s, (long long **)v280);
    long long v216 = *(_OWORD *)v214;
    long long v217 = *(_OWORD *)(v214 + 16);
    *((void *)v215 + 11) = *(void *)(v214 + 32);
    *(_OWORD *)(v215 + 72) = v217;
    *(_OWORD *)(v215 + 5CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = v216;
    if (v215 + 56 != (char *)v214) {
      std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v215 + 96, *(char **)(v214 + 40), *(void *)(v214 + 48), (uint64_t)(*(void *)(v214 + 48) - *(void *)(v214 + 40)) >> 2);
    }
    if (v283) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v283);
    }
    __v.__first_ = (std::__split_buffer<std::string>::pointer)&v286;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
    __v.__first_ = &v295;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
    if (v201) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v201);
    }
    if (v195) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v195);
    }
    int v150 = v248;
    if (v294) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v294);
    }
    __v.__first_ = (std::__split_buffer<std::string>::pointer)&v298;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
    __v.__first_ = &v301;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__s.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v306.__r_.__value_.__l.__data_);
    }
    CoreML::Specification::NeuralNetworkPreprocessing::~NeuralNetworkPreprocessing((CoreML::Specification::NeuralNetworkPreprocessing *)v307);
    CoreML::Specification::NeuralNetworkRegressor::Clear((CoreML::Specification::NeuralNetworkRegressor *)&v256);
    CoreML::Specification::NeuralNetworkRegressor::MergeFrom(&v256, (const CoreML::Specification::NeuralNetworkRegressor *)&__p);
    CoreML::Specification::NeuralNetworkRegressor::~NeuralNetworkRegressor((CoreML::Specification::NeuralNetworkRegressor *)&__p);
LABEL_470:
    CoreML::Specification::NeuralNetworkPreprocessing::~NeuralNetworkPreprocessing((CoreML::Specification::NeuralNetworkPreprocessing *)v272);
    ++v155;
  }
  while (v155 < v259);
LABEL_471:
  v307[0] = a5;
  uint64_t v308 = 0;
  int v309 = 0;
  std::string __p = v6;
  v267 = v5;
  v268 = v307;
  if (v257 < 1)
  {
    uint64_t v78 = 0;
  }
  else
  {
    uint64_t v218 = 0;
    LODWORD(v78) = 0;
    do
    {
      ++*((_DWORD *)v268 + 1);
      CoreML::Specification::NeuralNetworkLayer::NeuralNetworkLayer((CoreML::Specification::NeuralNetworkLayer *)&__v, *(const CoreML::Specification::NeuralNetworkLayer **)(v258 + 8 * v218 + 8));
      if (LayerTranslator::layerTranslateFn((LayerTranslator *)&__p, (const std::string **)&__v.__first_))uint64_t v78 = 1; {
      else
      }
        uint64_t v78 = v78;
      CoreML::Specification::NeuralNetworkLayer::~NeuralNetworkLayer((CoreML::Specification::NeuralNetworkLayer *)&__v);
      ++v218;
    }
    while (v218 < v257);
  }
  CoreML::Specification::NeuralNetworkRegressor::~NeuralNetworkRegressor((CoreML::Specification::NeuralNetworkRegressor *)&v256);
  return v78;
}

void sub_19EA8FA8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (SLOBYTE(STACK[0x38F]) < 0)
  {
    operator delete((void *)STACK[0x378]);
    if ((v67 & 1) == 0)
    {
LABEL_6:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&STACK[0x390]);
      if (*(char *)(v68 - 169) < 0) {
        operator delete(*(void **)(v68 - 192));
      }
      CoreML::Specification::NeuralNetworkPreprocessing::~NeuralNetworkPreprocessing((CoreML::Specification::NeuralNetworkPreprocessing *)(v68 - 160));
      CoreML::Specification::NeuralNetwork::~NeuralNetwork((CoreML::Specification::NeuralNetwork *)&a53);
      CoreML::Specification::NeuralNetworkPreprocessing::~NeuralNetworkPreprocessing((CoreML::Specification::NeuralNetworkPreprocessing *)&a66);
      CoreML::Specification::NeuralNetwork::~NeuralNetwork((CoreML::Specification::NeuralNetwork *)&a42);
      _Unwind_Resume(a1);
    }
  }
  else if (!v67)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v66);
  goto LABEL_6;
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(uint64_t result)
{
  uint64_t v1 = *(unsigned int *)(result + 8);
  if ((int)v1 >= 1)
  {
    uint64_t v2 = *(void *)(result + 16) + 8;
    do
    {
      uint64_t v3 = *(void *)v2;
      if (*(char *)(*(void *)v2 + 23) < 0)
      {
        **(unsigned char **)uint64_t v3 = 0;
        *(void *)(v3 + 8) = 0;
      }
      else
      {
        *(unsigned char *)uint64_t v3 = 0;
        *(unsigned char *)(v3 + 23) = 0;
      }
      v2 += 8;
      --v1;
    }
    while (v1);
    *(_DWORD *)(result + 8) = 0;
  }
  return result;
}

std::string *CoreML::Specification::NeuralNetworkLayer::add_input(uint64_t a1, std::string *__str)
{
  int v4 = (google::protobuf::Arena **)(a1 + 16);
  BOOL v5 = *(int **)(a1 + 32);
  if (!v5)
  {
    int v6 = *(_DWORD *)(a1 + 24);
    int v7 = *(_DWORD *)(a1 + 28);
LABEL_6:
    if (v6 <= v7)
    {
      google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 16), v7 - v6 + 1);
      BOOL v5 = *(int **)(a1 + 32);
    }
    int v7 = *v5;
    goto LABEL_9;
  }
  int v6 = *(_DWORD *)(a1 + 24);
  int v7 = *v5;
  if (v6 < *v5)
  {
    *(_DWORD *)(a1 + 24) = v6 + 1;
    Aligned = *(std::string **)&v5[2 * v6 + 2];
    goto LABEL_14;
  }
  if (v7 == *(_DWORD *)(a1 + 28)) {
    goto LABEL_6;
  }
LABEL_9:
  int *v5 = v7 + 1;
  long long v9 = *v4;
  if (!*v4) {
    operator new();
  }
  Aligned->__r_.__value_.__l.__size_ = 0;
  Aligned->__r_.__value_.__r.__words[2] = 0;
  Aligned->__r_.__value_.__r.__words[0] = 0;
  uint64_t v10 = google::protobuf::Arena::AllocateAligned(v9, 0, 24);
  const void *v10 = (google::protobuf::Arena *)Aligned;
  v10[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<std::string>;
  uint64_t v11 = (unint64_t *)((char *)v9 + 32);
  do
    unint64_t v12 = __ldxr(v11);
  while (__stxr((unint64_t)v10, v11));
  v10[2] = (google::protobuf::Arena *)v12;
  uint64_t v13 = *(void *)(a1 + 32);
  uint64_t v14 = *(int *)(a1 + 24);
  *(_DWORD *)(a1 + 24) = v14 + 1;
  *(void *)(v13 + 8 * v14 + 8) = Aligned;
LABEL_14:

  return std::string::operator=(Aligned, __str);
}

double EspressoConverter::computeMaxShape(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 5CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)a1 = 0x100000001;
  *(_DWORD *)(a1 + 8) = 1;
  *(_DWORD *)(a1 + CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 20) = -1;
  if (a3 != a2)
  {
    unint64_t v3 = (a3 - a2) >> 6;
    if (v3 <= 1) {
      unint64_t v3 = 1;
    }
    int v4 = (int *)(a2 + 4);
    int v5 = 1;
    int v6 = 1;
    int v7 = 1;
    while (1)
    {
      int v8 = v4[1];
      if (v8 < 0) {
        break;
      }
      if (v5 >= 1 && v8 > v5) {
        goto LABEL_10;
      }
LABEL_11:
      int v9 = *v4;
      if (*v4 < 0)
      {
        int v9 = -1;
LABEL_16:
        *(_DWORD *)(a1 + 4) = v9;
        int v6 = v9;
        goto LABEL_17;
      }
      if (v6 >= 1 && v9 > v6) {
        goto LABEL_16;
      }
LABEL_17:
      int v10 = *(v4 - 1);
      if (v10 < 0)
      {
        int v10 = -1;
      }
      else if (v7 < 1 || v10 <= v7)
      {
        goto LABEL_23;
      }
      *(_DWORD *)a1 = v10;
      int v7 = v10;
LABEL_23:
      v4 += 16;
      if (!--v3) {
        goto LABEL_24;
      }
    }
    int v8 = -1;
LABEL_10:
    *(_DWORD *)(a1 + 8) = v8;
    int v5 = v8;
    goto LABEL_11;
  }
LABEL_24:
  double result = NAN;
  *(void *)(a1 + 12) = -1;
  return result;
}

void EspressoConverter::copyWeightsToDataBlob(EspressoConverter *this, void *a2, size_t __n)
{
  uint64_t v6 = a2[5];
  uint64_t v7 = *(unsigned __int8 *)(v6 + 23);
  if (*(char *)(v6 + 23) < 0) {
    uint64_t v8 = *(void *)(v6 + 8);
  }
  else {
    uint64_t v8 = *(unsigned __int8 *)(v6 + 23);
  }
  uint64_t v9 = a2[6];
  if (*(char *)(v9 + 23) < 0) {
    uint64_t v10 = *(void *)(v9 + 8);
  }
  else {
    uint64_t v10 = *(unsigned __int8 *)(v9 + 23);
  }
  int v11 = *((_DWORD *)a2 + 4);
  uint64_t v12 = a2[7];
  if (*(char *)(v12 + 23) < 0) {
    uint64_t v13 = *(void *)(v12 + 8);
  }
  else {
    uint64_t v13 = *(unsigned __int8 *)(v12 + 23);
  }
  if (v11 <= 0) {
    int v14 = 1;
  }
  else {
    int v14 = 2;
  }
  if (v8) {
    unsigned int v15 = v14;
  }
  else {
    unsigned int v15 = v11 > 0;
  }
  if (v10) {
    ++v15;
  }
  if (v13) {
    ++v15;
  }
  if (v15 > 1) {
    goto LABEL_38;
  }
  if (v11 <= 0 && v15)
  {
    if ((v7 & 0x80) != 0) {
      uint64_t v7 = *(void *)(v6 + 8);
    }
    if (v7)
    {
      EspressoConverter::readHalfPrecisionWeightsFromByteStream((uint64_t)&__src, (void **)v6);
      std::string::size_type v16 = (void *)__src.__r_.__value_.__r.__words[0];
      memcpy(this, __src.__r_.__value_.__l.__data_, __n);
      if (v16)
      {
        operator delete(v16);
      }
      return;
    }
LABEL_38:
    exceptiounint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&__src, "Failed to copy empty or invalid weights to kernel");
    std::runtime_error::runtime_error(exception, &__src);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (!v15) {
    goto LABEL_38;
  }
  uint64_t v17 = a2[3];
  if (v17) {
    int v18 = (const void *)(v17 + 8);
  }
  else {
    int v18 = 0;
  }

  memcpy(this, v18, __n);
}

void sub_19EA90950(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

vImage_Error EspressoConverter::readHalfPrecisionWeightsFromByteStream(uint64_t a1, void **a2)
{
  if (*((char *)a2 + 23) >= 0) {
    size_t v4 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v4 = (size_t)a2[1];
  }
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 1CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = 0;
  *(void *)a1 = 0;
  std::vector<float>::resize((char **)a1, v4 >> 1);
  src.width = v4 >> 1;
  src.rowBytes = v4;
  if (*((char *)a2 + 23) >= 0) {
    int v5 = a2;
  }
  else {
    int v5 = *a2;
  }
  src.data = v5;
  src.height = 1;
  dest.width = v4 >> 1;
  dest.rowBytes = 2 * v4;
  dest.data = *(void **)a1;
  dest.height = 1;
  vImage_Error result = vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
  if (result)
  {
    exceptiounint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v8, "Error converting float16 biases");
    std::runtime_error::runtime_error(exception, &v8);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return result;
}

void sub_19EA90A80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
    {
LABEL_6:
      if (v16)
      {
        *(void *)(v15 + 8) = v16;
        operator delete(v16);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  goto LABEL_6;
}

uint64_t EspressoConverter::CoreMLToEspressoRNNActivation(EspressoConverter *this, const CoreML::Specification::ActivationParams *a2)
{
  int v2 = (int)this;
  uint64_t result = 0;
  if (v2 > 24)
  {
    if ((v2 - 40) <= 0x1F)
    {
      if (v2 == 40) {
        return 2;
      }
      if (v2 == 41) {
        return 3;
      }
      if (((1 << (v2 - 40)) & 0xC0100400) != 0) {
        goto LABEL_22;
      }
    }
    if (v2 == 31)
    {
      return 4;
    }
    else if (v2 == 25)
    {
      goto LABEL_22;
    }
  }
  else if (v2 <= 9)
  {
    if (v2 == 5)
    {
      return 6;
    }
    else if (!v2)
    {
      goto LABEL_22;
    }
  }
  else
  {
    if (v2 == 10) {
      return 1;
    }
    if (v2 == 15 || v2 == 20)
    {
LABEL_22:
      exceptiounint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::string::basic_string[abi:ne180100]<0>(&v5, "Unsupported recurrent non-linearity type.");
      std::runtime_error::runtime_error(exception, &v5);
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  return result;
}

void sub_19EA90C08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void EspressoConverter::getInputAndOutputNames(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  std::string v8 = *(long long **)(a1 + 112);
  if (*((char *)v8 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v98, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    v98.__r_.__value_.__r.__words[2] = *((void *)v8 + 2);
    *(_OWORD *)&v98.__r_.__value_.__l.__data_ = v9;
  }
  uint64_t v10 = *(void *)(a1 + 56);
  if (v10) {
    int v11 = (long long **)(v10 + 8);
  }
  else {
    int v11 = 0;
  }
  uint64_t v12 = *(int *)(a1 + 48);
  if (v12)
  {
    unint64_t v13 = a2[1];
    uint64_t v14 = 8 * v12;
    do
    {
      uint64_t v15 = *v11;
      if (v13 >= a2[2])
      {
        unint64_t v13 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a2, v15);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a2, v15);
        v13 += 24;
      }
      a2[1] = v13;
      ++v11;
      v14 -= 8;
    }
    while (v14);
  }
  memset(v97, 0, sizeof(v97));
  uint64_t v16 = *(void *)(a1 + 32);
  if (v16) {
    uint64_t v17 = (long long **)(v16 + 8);
  }
  else {
    uint64_t v17 = 0;
  }
  uint64_t v18 = *(int *)(a1 + 24);
  if (v18)
  {
    unint64_t v19 = a3[1];
    uint64_t v20 = 8 * v18;
    do
    {
      uint64_t v21 = *v17;
      if (v19 >= a3[2])
      {
        unint64_t v19 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a3, v21);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a3, v21);
        v19 += 24;
      }
      a3[1] = v19;
      ++v17;
      v20 -= 8;
    }
    while (v20);
  }
  else
  {
    unint64_t v19 = a3[1];
  }
  uint64_t v22 = *a3;
  unint64_t v23 = v19 - *a3;
  int v24 = -1431655765 * (v23 >> 3);
  std::string::size_type v26 = (unsigned __int8 *)*a2;
  std::string::size_type v25 = (unsigned __int8 *)a2[1];
  std::string::size_type v27 = &v25[-*a2];
  int v28 = -1431655765 * ((unint64_t)v27 >> 3);
  int v29 = *(_DWORD *)(a1 + 140);
  if (v29 <= 869)
  {
    if (v29 <= 499)
    {
      if (v29 <= 244)
      {
        if (v29 <= 164)
        {
          if ((v29 - 100) <= 0x3C)
          {
            if (((1 << (v29 - 100)) & 0x1004010040100000) != 0) {
              goto LABEL_183;
            }
            if (v29 == 100) {
              goto LABEL_90;
            }
          }
          if (!v29)
          {
            exceptiounint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::string::basic_string[abi:ne180100]<0>(&v100, "Validate number of inputs and outputs: Unknown layer type");
            std::runtime_error::runtime_error(exception, &v100);
            __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          goto LABEL_224;
        }
        uint64_t v34 = (v29 - 165);
        if (v34 <= 0x37)
        {
          if (((1 << (v29 + 91)) & 0x80600800008421) != 0) {
            goto LABEL_183;
          }
          if (v34 == 25) {
            goto LABEL_90;
          }
          if (v34 == 47) {
            goto LABEL_162;
          }
        }
        if ((v29 - 230) < 2)
        {
          BOOL v35 = v24 < 1;
          goto LABEL_220;
        }
        if (v29 != 240) {
          goto LABEL_224;
        }
        goto LABEL_219;
      }
      if (v29 > 299)
      {
        if (v29 > 399)
        {
          if (v29 > 419)
          {
            if (v29 != 420)
            {
              if (v29 != 430 || (v24 - 6) < 0xFFFFFFFB || v28 < 1 || v28 > 5) {
                goto LABEL_224;
              }
              goto LABEL_189;
            }
            if ((v24 - 4) >= 0xFFFFFFFD && v28 >= 1 && v28 <= 3) {
              goto LABEL_189;
            }
          }
          else if (v29 == 400 || v29 == 410)
          {
            BOOL v49 = (v24 - 3) < 0xFFFFFFFE || v28 < 1;
            if (!v49 && v28 <= 2) {
              goto LABEL_189;
            }
          }
          goto LABEL_224;
        }
        uint64_t v36 = (v29 - 300);
        if (v36 > 0x32) {
          goto LABEL_224;
        }
        if (((1 << v36) & 0x4210000000403) != 0) {
          goto LABEL_183;
        }
        if (v36 != 20)
        {
          if (v36 != 30) {
            goto LABEL_224;
          }
          goto LABEL_127;
        }
        goto LABEL_219;
      }
      if (v29 <= 269)
      {
        if ((v29 - 260) >= 2)
        {
          if (v29 != 245 && v29 != 250) {
            goto LABEL_224;
          }
          goto LABEL_183;
        }
        goto LABEL_219;
      }
      if (v29 == 270) {
        goto LABEL_162;
      }
      if (v29 != 280)
      {
        if (v29 != 290) {
          goto LABEL_224;
        }
        goto LABEL_149;
      }
    }
    else
    {
      if (v29 <= 769)
      {
        if (v29 > 699)
        {
          unsigned int v43 = v29 - 700;
          if (v43 > 0x3C || ((1 << v43) & 0x1084010840108401) == 0) {
            goto LABEL_224;
          }
          goto LABEL_183;
        }
        if (v29 <= 619)
        {
          if (v29 <= 604)
          {
            if (v29 == 500)
            {
              if (v24 < 1 || v28 <= 0) {
                goto LABEL_224;
              }
              goto LABEL_189;
            }
            if (v29 != 600) {
              goto LABEL_224;
            }
            goto LABEL_183;
          }
          if (v29 == 605)
          {
            if (v24 != 1) {
              goto LABEL_224;
            }
          }
          else if (v29 != 615 || v24 > 1)
          {
            goto LABEL_224;
          }
          if (!v28) {
            goto LABEL_189;
          }
        }
        else
        {
          uint64_t v33 = (v29 - 635);
          if (v33 <= 0x32)
          {
            if (((1 << (v29 - 123)) & 0x4200842000000) != 0) {
              goto LABEL_183;
            }
            if (v29 == 635)
            {
LABEL_149:
              if (v28 != 1) {
                goto LABEL_224;
              }
              goto LABEL_189;
            }
            if (v33 == 5)
            {
              if ((v24 - 4) < 0xFFFFFFFD) {
                goto LABEL_224;
              }
              goto LABEL_149;
            }
          }
          if ((v29 == 620 || v29 == 625) && !(v24 | v28)) {
            goto LABEL_189;
          }
        }
        goto LABEL_224;
      }
      char v40 = v29 - 2;
      if ((v29 - 770) > 0x3E) {
        goto LABEL_131;
      }
      if (((1 << v40) & 0x5284200000000000) != 0) {
        goto LABEL_90;
      }
      if (((1 << v40) & 0x2100421) == 0)
      {
LABEL_131:
        unsigned int v48 = v29 - 840;
        if (v48 > 0x19) {
          goto LABEL_224;
        }
        if (((1 << v48) & 0x2008021) != 0) {
          goto LABEL_162;
        }
        if (v48 != 10) {
          goto LABEL_224;
        }
      }
    }
LABEL_183:
    BOOL v44 = v24 == 1;
LABEL_184:
    if (v44 && v28 == 1) {
      goto LABEL_189;
    }
    goto LABEL_224;
  }
  if (v29 <= 1109)
  {
    if (v29 > 964)
    {
      if (v29 <= 999)
      {
        if (v29 > 979)
        {
          if (v29 != 980)
          {
            if (v29 != 985 && v29 != 995) {
              goto LABEL_224;
            }
            goto LABEL_183;
          }
          goto LABEL_219;
        }
        if (v29 == 965) {
          goto LABEL_162;
        }
        if (v29 != 975) {
          goto LABEL_224;
        }
LABEL_127:
        if (v24 != 1 || v28 < 1) {
          goto LABEL_224;
        }
        goto LABEL_189;
      }
      uint64_t v46 = (v29 - 1005);
      if (v46 > 0x3C)
      {
LABEL_114:
        uint64_t v47 = (v29 - 1070);
        if (v47 <= 0x23)
        {
          if (((1 << (v29 - 46)) & 0x800100400) != 0) {
            goto LABEL_183;
          }
          if (((1 << (v29 - 46)) & 0x8001) != 0) {
            goto LABEL_149;
          }
          if (v47 == 30) {
            goto LABEL_162;
          }
        }
        if (v29 != 1000) {
          goto LABEL_224;
        }
        BOOL v41 = __CFADD__(v24 - 8, 6);
LABEL_91:
        if (v41 && v28 == 1) {
          goto LABEL_189;
        }
        goto LABEL_224;
      }
      if (((1 << (v29 + 19)) & 0x1000000800108001) != 0) {
        goto LABEL_183;
      }
      if (v46 != 10)
      {
        if (v46 == 40) {
          goto LABEL_90;
        }
        goto LABEL_114;
      }
      if ((v24 - 3) >= 0xFFFFFFFE && v28 == 2) {
        goto LABEL_189;
      }
LABEL_224:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v100);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v100.__r_.__value_.__r.__words[2], (uint64_t)"Invalid number of inputs (", 26);
      uint64_t v74 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)") and outputs (", 15);
      long long v75 = (void *)std::ostream::operator<<();
      long long v76 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)") to layer: '", 13);
      uint64_t v77 = *(void *)(a1 + 112);
      int v78 = *(char *)(v77 + 23);
      if (v78 >= 0) {
        uint64_t v79 = *(void *)(a1 + 112);
      }
      else {
        uint64_t v79 = *(void *)v77;
      }
      if (v78 >= 0) {
        uint64_t v80 = *(unsigned __int8 *)(v77 + 23);
      }
      else {
        uint64_t v80 = *(void *)(v77 + 8);
      }
      long long v81 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, v79, v80);
      uint64_t v82 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)"'. ", 3);
      std::endl[abi:ne180100]<char,std::char_traits<char>>(v82);
      int v83 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::runtime_error::runtime_error(v83, &v99);
      __cxa_throw(v83, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    if (v29 > 939)
    {
      switch(v29)
      {
        case 945:
        case 954:
          goto LABEL_105;
        case 946:
        case 947:
        case 948:
        case 949:
        case 951:
        case 953:
          goto LABEL_224;
        case 950:
          goto LABEL_183;
        case 952:
          goto LABEL_162;
        default:
          if (v29 == 940) {
            goto LABEL_162;
          }
          if (v29 == 960) {
            goto LABEL_183;
          }
          goto LABEL_224;
      }
    }
    uint64_t v39 = (v29 - 870);
    if (v39 > 0x3C) {
      goto LABEL_86;
    }
    if (((1 << (v29 - 102)) & 0x1000000842108421) != 0) {
      goto LABEL_162;
    }
    if (v39 == 50) {
      goto LABEL_90;
    }
    if (v39 != 55)
    {
LABEL_86:
      if (v29 != 935) {
        goto LABEL_224;
      }
LABEL_105:
      BOOL v44 = v24 == 3;
      goto LABEL_184;
    }
LABEL_219:
    BOOL v35 = v24 < 2;
LABEL_220:
    if (!v35 && v28 == 1) {
      goto LABEL_189;
    }
    goto LABEL_224;
  }
  if (v29 <= 1314)
  {
    if ((v29 - 1250) <= 0x3F && ((1 << (v29 + 30)) & 0x8000210842108421) != 0) {
      goto LABEL_183;
    }
    uint64_t v37 = (v29 - 1110);
    if (v37 <= 0x3C)
    {
      if (((1 << (v29 - 86)) & 0x1000010040108400) != 0) {
        goto LABEL_183;
      }
      if (((1 << (v29 - 86)) & 0x802000001) != 0) {
        goto LABEL_162;
      }
      if (v37 == 45) {
        goto LABEL_90;
      }
    }
    unsigned int v38 = v29 - 1175;
    if (v38 > 0x37) {
      goto LABEL_224;
    }
    if (((1 << v38) & 0x80200802008020) != 0) {
      goto LABEL_183;
    }
    if (((1 << v38) & 0x10000100001) == 0) {
      goto LABEL_224;
    }
    goto LABEL_149;
  }
  char v30 = v29 + 86;
  if ((v29 - 1450) > 0x15) {
    goto LABEL_31;
  }
  if (((1 << v30) & 0x218C00) != 0) {
    goto LABEL_183;
  }
  if (((1 << v30) & 0x21) != 0)
  {
LABEL_90:
    BOOL v41 = __CFADD__(v24 - 3, 2);
    goto LABEL_91;
  }
  if (v29 == 1470)
  {
LABEL_162:
    BOOL v44 = v24 == 2;
    goto LABEL_184;
  }
LABEL_31:
  uint64_t v31 = (v29 - 1315);
  if (v31 <= 0x23)
  {
    if (((1 << (v29 - 35)) & 0x800000421) == 0)
    {
      if (v31 != 15) {
        goto LABEL_34;
      }
      goto LABEL_105;
    }
    goto LABEL_183;
  }
LABEL_34:
  if (v29 != 1400) {
    goto LABEL_224;
  }
  if ((v24 - 6) < 0xFFFFFFFC || v28 != 4) {
    goto LABEL_224;
  }
LABEL_189:
  BOOL v55 = v25 == v26 && v19 == v22;
  if (!v55 && (unsigned __int8 *)v23 == v27)
  {
    if (v19 == v22)
    {
LABEL_198:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v100);
      uint64_t v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v100.__r_.__value_.__r.__words[2], (uint64_t)"Layer name: '", 13);
      uint64_t v58 = *(void *)(a1 + 112);
      int v59 = *(char *)(v58 + 23);
      if (v59 >= 0) {
        uint64_t v60 = *(void *)(a1 + 112);
      }
      else {
        uint64_t v60 = *(void *)v58;
      }
      if (v59 >= 0) {
        uint64_t v61 = *(unsigned __int8 *)(v58 + 23);
      }
      else {
        uint64_t v61 = *(void *)(v58 + 8);
      }
      long long v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, v60, v61);
      unint64_t v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)"'. Input and output data blob names cannot be the same.", 55);
      std::endl[abi:ne180100]<char,std::char_traits<char>>(v63);
      unint64_t v64 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::runtime_error::runtime_error(v64, &v99);
      __cxa_throw(v64, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    uint64_t v56 = (unsigned __int8 *)v22;
    while (std::equal_to<std::string>::operator()[abi:ne180100](v56, v26))
    {
      v56 += 24;
      v26 += 24;
      if (v56 == (unsigned __int8 *)v19) {
        goto LABEL_198;
      }
    }
  }
  if (v19 != v22)
  {
    int v67 = *(void **)(a4 + 8);
    unint64_t v65 = (void *)(a4 + 8);
    uint64_t v66 = v67;
    uint64_t v68 = (void *)v22;
    while (1)
    {
      if (!v66) {
        goto LABEL_239;
      }
      std::string v69 = v65;
      uint64_t v70 = v66;
      do
      {
        BOOL v71 = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v70 + 4, v68);
        std::string::size_type v72 = v70 + 1;
        if (!v71)
        {
          std::string::size_type v72 = v70;
          std::string v69 = v70;
        }
        uint64_t v70 = (void *)*v72;
      }
      while (*v72);
      if (v69 == v65 || google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v68, v69 + 4)) {
        break;
      }
      v68 += 3;
      if (v68 == (void *)v19) {
        goto LABEL_215;
      }
    }
    uint64_t v22 = (uint64_t)v68;
LABEL_239:
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v100);
    int v84 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v100.__r_.__value_.__r.__words[2], (uint64_t)"Input '", 7);
    int v85 = *(char *)(v22 + 23);
    if (v85 >= 0) {
      uint64_t v86 = v22;
    }
    else {
      uint64_t v86 = *(void *)v22;
    }
    if (v85 >= 0) {
      uint64_t v87 = *(unsigned __int8 *)(v22 + 23);
    }
    else {
      uint64_t v87 = *(void *)(v22 + 8);
    }
    long long v88 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, v86, v87);
    __int16 v89 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)"' of layer '", 12);
    uint64_t v90 = *(void *)(a1 + 112);
    int v91 = *(char *)(v90 + 23);
    if (v91 >= 0) {
      uint64_t v92 = *(void *)(a1 + 112);
    }
    else {
      uint64_t v92 = *(void *)v90;
    }
    if (v91 >= 0) {
      uint64_t v93 = *(unsigned __int8 *)(v90 + 23);
    }
    else {
      uint64_t v93 = *(void *)(v90 + 8);
    }
    long long v94 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, v92, v93);
    long long v95 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v94, (uint64_t)"' not found in any of the outputs of the preceeding layers.", 59);
    std::endl[abi:ne180100]<char,std::char_traits<char>>(v95);
    std::string::size_type v96 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(v96, &v99);
    __cxa_throw(v96, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
LABEL_215:
  v100.__r_.__value_.__r.__words[0] = (std::string::size_type)v97;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v100);
  if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v98.__r_.__value_.__l.__data_);
  }
}

void sub_19EA91770(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a25 < 0)
  {
    operator delete(__p);
    if ((v32 & 1) == 0)
    {
LABEL_6:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a26);
      std::string __p = &a10;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      if (a18 < 0) {
        operator delete(a13);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v32)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v31);
  goto LABEL_6;
}

unint64_t EspressoConverter::getWeightParamSize(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  unint64_t v2 = *(unsigned __int8 *)(v1 + 23);
  if (*(char *)(v1 + 23) < 0) {
    uint64_t v3 = *(void *)(v1 + 8);
  }
  else {
    uint64_t v3 = *(unsigned __int8 *)(v1 + 23);
  }
  uint64_t v4 = *(void *)(a1 + 48);
  if (*(char *)(v4 + 23) < 0) {
    uint64_t v5 = *(void *)(v4 + 8);
  }
  else {
    uint64_t v5 = *(unsigned __int8 *)(v4 + 23);
  }
  int v6 = *(_DWORD *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 56);
  if (*(char *)(v7 + 23) < 0) {
    uint64_t v8 = *(void *)(v7 + 8);
  }
  else {
    uint64_t v8 = *(unsigned __int8 *)(v7 + 23);
  }
  if (v6 <= 0) {
    int v9 = 1;
  }
  else {
    int v9 = 2;
  }
  if (v3) {
    unsigned int v10 = v9;
  }
  else {
    unsigned int v10 = v6 > 0;
  }
  if (v5) {
    ++v10;
  }
  if (v8) {
    ++v10;
  }
  if (v10 > 1) {
    return 0;
  }
  if (v6 <= 0 && v10)
  {
    if ((v2 & 0x80) != 0)
    {
      unint64_t v2 = *(void *)(v1 + 8);
      if (!v2) {
        return 0;
      }
    }
    else if (!*(unsigned char *)(v1 + 23))
    {
      return 0;
    }
    return v2 >> 1;
  }
  else if (v10)
  {
    return v6;
  }
  else
  {
    return 0;
  }
}

uint64_t EspressoConverter::getWeightParamSizeInBytes(uint64_t *a1)
{
  uint64_t v2 = a1[5];
  uint64_t result = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0) {
    uint64_t v4 = *(void *)(v2 + 8);
  }
  else {
    uint64_t v4 = *(unsigned __int8 *)(v2 + 23);
  }
  uint64_t v5 = a1[6];
  uint64_t v6 = *(unsigned __int8 *)(v5 + 23);
  if (*(char *)(v5 + 23) < 0) {
    uint64_t v7 = *(void *)(v5 + 8);
  }
  else {
    uint64_t v7 = *(unsigned __int8 *)(v5 + 23);
  }
  int v8 = *((_DWORD *)a1 + 4);
  uint64_t v9 = a1[7];
  uint64_t v10 = *(unsigned __int8 *)(v9 + 23);
  if (*(char *)(v9 + 23) < 0) {
    uint64_t v11 = *(void *)(v9 + 8);
  }
  else {
    uint64_t v11 = *(unsigned __int8 *)(v9 + 23);
  }
  if (v8 <= 0) {
    int v12 = 1;
  }
  else {
    int v12 = 2;
  }
  if (v4) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = v8 > 0;
  }
  if (v7) {
    ++v13;
  }
  if (v11) {
    ++v13;
  }
  if (v13 > 1) {
    return 0;
  }
  if (v8 <= 0 && v13)
  {
    if ((result & 0x80) != 0)
    {
      uint64_t result = *(void *)(v2 + 8);
      if (!result) {
        goto LABEL_32;
      }
    }
    else if (!*(unsigned char *)(v2 + 23))
    {
LABEL_32:
      if ((v6 & 0x80) != 0)
      {
        uint64_t v17 = a1[8];
        BOOL v15 = v17 != 0;
        BOOL v18 = a1 == &CoreML::Specification::_WeightParams_default_instance_;
        BOOL v16 = a1 != &CoreML::Specification::_WeightParams_default_instance_;
        if (v18) {
          goto LABEL_41;
        }
        uint64_t v6 = *(void *)(v5 + 8);
        if (!v6 || !v17) {
          goto LABEL_41;
        }
      }
      else
      {
        uint64_t v14 = a1[8];
        BOOL v15 = v14 != 0;
        BOOL v18 = a1 == &CoreML::Specification::_WeightParams_default_instance_;
        BOOL v16 = a1 != &CoreML::Specification::_WeightParams_default_instance_;
        if (v18 || !v6 || !v14)
        {
LABEL_41:
          if ((v10 & 0x80) != 0)
          {
            uint64_t v10 = *(void *)(v9 + 8);
            BOOL v18 = v10 == 0;
          }
          else
          {
            BOOL v18 = v10 == 0;
          }
          if (v18) {
            BOOL v16 = 0;
          }
          if (v16 && v15) {
            return v10;
          }
          return 0;
        }
      }
      return v6;
    }
  }
  else if (v13)
  {
    return (4 * v8);
  }
  else
  {
    return 0;
  }
  return result;
}

double EspressoConverter::readFloatFromWeightParams(EspressoConverter *this, const CoreML::Specification::WeightParams *a2, unint64_t a3)
{
  uint64_t v6 = *((void *)a2 + 5);
  if (*(char *)(v6 + 23) < 0) {
    uint64_t v7 = *(void *)(v6 + 8);
  }
  else {
    uint64_t v7 = *(unsigned __int8 *)(v6 + 23);
  }
  uint64_t v8 = *((void *)a2 + 6);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 23);
  if (*(char *)(v8 + 23) < 0) {
    uint64_t v10 = *(void *)(v8 + 8);
  }
  else {
    uint64_t v10 = *(unsigned __int8 *)(v8 + 23);
  }
  int v11 = *((_DWORD *)a2 + 4);
  uint64_t v12 = *((void *)a2 + 7);
  if (*(char *)(v12 + 23) < 0) {
    uint64_t v13 = *(void *)(v12 + 8);
  }
  else {
    uint64_t v13 = *(unsigned __int8 *)(v12 + 23);
  }
  if (v11 <= 0) {
    int v14 = 1;
  }
  else {
    int v14 = 2;
  }
  if (v7) {
    unsigned int v15 = v14;
  }
  else {
    unsigned int v15 = v11 > 0;
  }
  if (v10) {
    ++v15;
  }
  if (v13) {
    ++v15;
  }
  if (v15 > 1)
  {
LABEL_43:
    *(void *)this = 0;
    *((void *)this + 1) = 0;
    *((void *)this + 2) = 0;
LABEL_44:
    exceptiounint64_t n = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3C1380](exception, "Unrecognizable weight parameter type.");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (v11 <= 0 && v15)
  {
    if ((*(unsigned char *)(v6 + 23) & 0x80) != 0)
    {
      if (*(void *)(v6 + 8)) {
        goto LABEL_25;
      }
    }
    else if (*(unsigned char *)(v6 + 23))
    {
LABEL_25:
      *(void *)this = 0;
      *((void *)this + 1) = 0;
      *((void *)this + 2) = 0;
      EspressoConverter::readHalfPrecisionWeightsFromByteStream((uint64_t)&v34, (void **)v6);
LABEL_42:
      std::string::size_type v20 = v34.__r_.__value_.__r.__words[2];
      double result = *(double *)&v34.__r_.__value_.__l.__data_;
      *(_OWORD *)this = *(_OWORD *)&v34.__r_.__value_.__l.__data_;
      *((void *)this + 2) = v20;
      return result;
    }
    if ((v9 & 0x80) != 0) {
      uint64_t v9 = *(void *)(v8 + 8);
    }
    if (a2 != (const CoreML::Specification::WeightParams *)&CoreML::Specification::_WeightParams_default_instance_
      && v9
      && *((void *)a2 + 8))
    {
      *(void *)this = 0;
      *((void *)this + 1) = 0;
      *((void *)this + 2) = 0;
      if (!CoreML::hasSufficientBytesInQuantizedWeightParam((uint64_t *)a2, a3))
      {
        std::string::size_type v27 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::to_string(&v32, a3);
        int v28 = std::string::insert(&v32, 0, "Unable to read ");
        long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
        v33.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v29;
        v28->__r_.__value_.__l.__size_ = 0;
        v28->__r_.__value_.__r.__words[2] = 0;
        v28->__r_.__value_.__r.__words[0] = 0;
        char v30 = std::string::append(&v33, "quantized weight elements from byte stream.");
        long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
        v34.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v31;
        v30->__r_.__value_.__l.__size_ = 0;
        v30->__r_.__value_.__r.__words[2] = 0;
        v30->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v27, &v34);
        __cxa_throw(v27, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      CoreML::dequantizeWeightParamSpec((CoreML *)&v34, a2, a3);
      goto LABEL_42;
    }
    goto LABEL_43;
  }
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  if (!v15) {
    goto LABEL_44;
  }
  if ((int)EspressoConverter::getWeightParamSize((uint64_t)a2) != a3)
  {
    uint64_t v22 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v32, a3);
    unint64_t v23 = std::string::insert(&v32, 0, "Unable to read ");
    long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v33.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v25 = std::string::append(&v33, "weight elements.");
    long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    v34.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v22, &v34);
    __cxa_throw(v22, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  std::vector<float>::resize((char **)this, a3);
  BOOL v16 = *(void **)this;
  uint64_t v17 = *((void *)a2 + 3);
  if (v17) {
    BOOL v18 = (const void *)(v17 + 8);
  }
  else {
    BOOL v18 = 0;
  }

  memcpy(v16, v18, 4 * a3);
  return result;
}

void sub_19EA91DA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v29 & 1) == 0) {
LABEL_10:
    }
      _Unwind_Resume(a1);
  }
  else if (!v29)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v28);
  goto LABEL_10;
}

void EspressoConverter::splitElementwiseLayer(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = (void **)a1;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 1CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = 0;
  uint64_t v6 = (long long *)*a2;
  if (*(char *)(*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v27, *(const std::string::value_type **)v6, *((void *)v6 + 1));
    uint64_t v6 = (long long *)*a2;
  }
  else
  {
    long long v7 = *v6;
    v27.__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
    *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v7;
  }
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - (void)v6) >> 3) - 1;
  if (v8 >= 2)
  {
    unint64_t v9 = 1;
    uint64_t v10 = 24;
    do
    {
      std::pair<std::string,std::string>::pair[abi:ne180100]<std::string&,std::string const&,0>(&v25, (long long *)&v27, (long long *)((char *)v6 + v10));
      if (*(char *)(a3 + 23) >= 0) {
        size_t v11 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        size_t v11 = *(void *)(a3 + 8);
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v20, v11 + 5);
      if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v12 = &v20;
      }
      else {
        uint64_t v12 = (std::string *)v20.__r_.__value_.__r.__words[0];
      }
      if (v11)
      {
        if (*(char *)(a3 + 23) >= 0) {
          uint64_t v13 = (const std::string::value_type *)a3;
        }
        else {
          uint64_t v13 = *(const std::string::value_type **)a3;
        }
        memmove(v12, v13, v11);
      }
      strcpy((char *)v12 + v11, "_tmp_");
      std::to_string(&v23, v9);
      if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v14 = &v23;
      }
      else {
        int v14 = (std::string *)v23.__r_.__value_.__r.__words[0];
      }
      if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v23.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v23.__r_.__value_.__l.__size_;
      }
      uint64_t v5 = (void **)a1;
      BOOL v16 = std::string::append(&v20, (const std::string::value_type *)v14, size);
      long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      __str.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v23.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v20.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v20, v25.__r_.__value_.__l.__data_, v25.__r_.__value_.__l.__size_);
      }
      else {
        std::string v20 = v25;
      }
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v21, v26.__r_.__value_.__l.__data_, v26.__r_.__value_.__l.__size_);
      }
      else {
        std::string v21 = v26;
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&__p, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
      }
      else {
        std::string __p = __str;
      }
      std::vector<std::pair<std::pair<std::string,std::string>,std::string>>::push_back[abi:ne180100]((void **)a1, (long long *)&v20);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v21.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v20.__r_.__value_.__l.__data_);
      }
      std::string::operator=(&v27, &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v26.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v25.__r_.__value_.__l.__data_);
      }
      ++v9;
      uint64_t v6 = (long long *)*a2;
      unint64_t v8 = -1 - 0x5555555555555555 * ((uint64_t)(a2[1] - *a2) >> 3);
      v10 += 24;
    }
    while (v9 < v8);
  }
  std::pair<std::string,std::string>::pair[abi:ne180100]<std::string&,std::string const&,0>(&v25, (long long *)&v27, (long long *)((char *)v6 + 24 * v8));
  std::string v20 = v25;
  memset(&v25, 0, sizeof(v25));
  long long v18 = *(_OWORD *)&v26.__r_.__value_.__l.__data_;
  memset(&v26, 0, sizeof(v26));
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v18;
  v21.__r_.__value_.__r.__words[2] = v26.__r_.__value_.__r.__words[2];
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string __p = *(std::string *)a3;
  }
  std::vector<std::pair<std::pair<std::string,std::string>,std::string>>::push_back[abi:ne180100](v5, (long long *)&v20);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
}

void sub_19EA921F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,char a36)
{
  std::pair<std::string,std::string>::~pair((uint64_t)&a11);
  std::pair<std::string,std::string>::~pair((uint64_t)&a36);
  if (*(char *)(v36 - 89) < 0) {
    operator delete(*(void **)(v36 - 112));
  }
  a11 = a10;
  std::vector<std::pair<std::pair<std::string,std::string>,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a11);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string,std::string>::pair[abi:ne180100]<std::string&,std::string const&,0>(std::string *this, long long *a2, long long *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  uint64_t v6 = this + 1;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v7 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  return this;
}

void sub_19EA92354(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::pair<std::pair<std::string,std::string>,std::string>>::push_back[abi:ne180100](void **a1, long long *a2)
{
  uint64_t v4 = (char *)a1[1];
  long long v5 = (char *)a1[2];
  if (v4 >= v5)
  {
    unint64_t v10 = 0x8E38E38E38E38E39 * ((v4 - (unsigned char *)*a1) >> 3);
    unint64_t v11 = v10 + 1;
    if (v10 + 1 > 0x38E38E38E38E38ELL) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v12 = 0x8E38E38E38E38E39 * ((v5 - (unsigned char *)*a1) >> 3);
    if (2 * v12 > v11) {
      unint64_t v11 = 2 * v12;
    }
    if (v12 >= 0x1C71C71C71C71C7) {
      unint64_t v13 = 0x38E38E38E38E38ELL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13)
    {
      if (v13 > 0x38E38E38E38E38ELL) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      int v14 = (char *)operator new(72 * v13);
    }
    else
    {
      int v14 = 0;
    }
    unsigned int v15 = &v14[72 * v10];
    *((void *)v15 + 2) = *((void *)a2 + 2);
    *(_OWORD *)unsigned int v15 = *a2;
    BOOL v16 = &v14[72 * v13];
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    long long v17 = *(long long *)((char *)a2 + 24);
    *((void *)a2 + 2) = 0;
    *((void *)a2 + 3) = 0;
    *(_OWORD *)(v15 + 24) = v17;
    *((void *)v15 + 5) = *((void *)a2 + 5);
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    *((void *)v15 + 8) = *((void *)a2 + 8);
    *((_OWORD *)v15 + 3) = a2[3];
    *((void *)a2 + 7) = 0;
    *((void *)a2 + 8) = 0;
    *((void *)a2 + CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = 0;
    unint64_t v9 = v15 + 72;
    long long v18 = (char *)*a1;
    unint64_t v19 = (char *)a1[1];
    if (v19 == *a1)
    {
      *a1 = v15;
      a1[1] = v9;
      a1[2] = v16;
    }
    else
    {
      do
      {
        long long v20 = *(_OWORD *)(v19 - 72);
        *((void *)v15 - 7) = *((void *)v19 - 7);
        *(_OWORD *)(v15 - 72) = v20;
        *((void *)v19 - 8) = 0;
        *((void *)v19 - 7) = 0;
        *((void *)v19 - 9) = 0;
        long long v21 = *((_OWORD *)v19 - 3);
        *((void *)v15 - 4) = *((void *)v19 - 4);
        *((_OWORD *)v15 - 3) = v21;
        *((void *)v19 - 5) = 0;
        *((void *)v19 - 4) = 0;
        *((void *)v19 - CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = 0;
        long long v22 = *(_OWORD *)(v19 - 24);
        *((void *)v15 - 1) = *((void *)v19 - 1);
        *(_OWORD *)(v15 - 24) = v22;
        v15 -= 72;
        *((void *)v19 - 2) = 0;
        *((void *)v19 - 1) = 0;
        *((void *)v19 - 3) = 0;
        v19 -= 72;
      }
      while (v19 != v18);
      unint64_t v19 = (char *)*a1;
      uint64_t v23 = (uint64_t)a1[1];
      *a1 = v15;
      a1[1] = v9;
      a1[2] = v16;
      while ((char *)v23 != v19)
      {
        v23 -= 72;
        std::allocator<std::pair<std::pair<std::string,std::string>,std::string>>::destroy[abi:ne180100](v23);
      }
    }
    if (v19) {
      operator delete(v19);
    }
  }
  else
  {
    long long v6 = *a2;
    *((void *)v4 + 2) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v4 = v6;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    long long v7 = *(long long *)((char *)a2 + 24);
    *((void *)v4 + 5) = *((void *)a2 + 5);
    *(_OWORD *)(v4 + 24) = v7;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 3) = 0;
    long long v8 = a2[3];
    *((void *)v4 + 8) = *((void *)a2 + 8);
    *((_OWORD *)v4 + 3) = v8;
    *((void *)a2 + 7) = 0;
    *((void *)a2 + 8) = 0;
    *((void *)a2 + CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = 0;
    unint64_t v9 = v4 + 72;
  }
  a1[1] = v9;
}

uint64_t std::pair<std::pair<std::string,std::string>,std::string>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t EspressoConverter::validateCommonNeuralNetworkLayerUtils(EspressoConverter *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v30);
  uint64_t v3 = *((void *)this + 14);
  if ((*(char *)(v3 + 23) & 0x80000000) == 0)
  {
    if (*(unsigned char *)(v3 + 23)) {
      goto LABEL_3;
    }
LABEL_16:
    unint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"Invalid network: Layer name missing.", 36);
    std::endl[abi:ne180100]<char,std::char_traits<char>>(v13);
    exceptiounint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, &v29);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (!*(void *)(v3 + 8)) {
    goto LABEL_16;
  }
LABEL_3:
  if (!*((_DWORD *)this + 6))
  {
    int v4 = *((_DWORD *)this + 35);
    if (v4 > 1174)
    {
      unsigned int v15 = v4 - 1175;
      BOOL v16 = v15 > 0x28;
      uint64_t v17 = (1 << v15) & 0x10000100001;
      if (v16 || v17 == 0)
      {
LABEL_8:
        long long v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"Invalid network: Expected at least one input for layer: '", 57);
        uint64_t v6 = *((void *)this + 14);
        int v7 = *(char *)(v6 + 23);
        if (v7 >= 0) {
          uint64_t v8 = *((void *)this + 14);
        }
        else {
          uint64_t v8 = *(void *)v6;
        }
        if (v7 >= 0) {
          uint64_t v9 = *(unsigned __int8 *)(v6 + 23);
        }
        else {
          uint64_t v9 = *(void *)(v6 + 8);
        }
        unint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, v8, v9);
        unint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"'.", 2);
        std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
        unint64_t v12 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::stringbuf::str();
        std::runtime_error::runtime_error(v12, &v29);
        __cxa_throw(v12, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
    }
    else if (v4 != 290 && v4 != 1070 && v4 != 1085)
    {
      goto LABEL_8;
    }
  }
  if (!*((_DWORD *)this + 12))
  {
    long long v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"Invalid network: Expected at least one output for layer: '", 58);
    uint64_t v22 = *((void *)this + 14);
    int v23 = *(char *)(v22 + 23);
    if (v23 >= 0) {
      uint64_t v24 = *((void *)this + 14);
    }
    else {
      uint64_t v24 = *(void *)v22;
    }
    if (v23 >= 0) {
      uint64_t v25 = *(unsigned __int8 *)(v22 + 23);
    }
    else {
      uint64_t v25 = *(void *)(v22 + 8);
    }
    std::string v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, v24, v25);
    std::string v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"'.", 2);
    std::endl[abi:ne180100]<char,std::char_traits<char>>(v27);
    int v28 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(v28, &v29);
    __cxa_throw(v28, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  v30[0] = *MEMORY[0x1E4FBA408];
  uint64_t v19 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v30 + *(void *)(v30[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v31[0] = v19;
  v31[1] = MEMORY[0x1E4FBA470] + 16;
  if (v32 < 0) {
    operator delete((void *)v31[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x19F3C1850](&v33);
}

void sub_19EA92944(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t EspressoConverter::validateEqualInputShapes(uint64_t result, int *a2, int *a3)
{
  if (a2 != a3)
  {
    int v4 = a2[3];
    int v3 = a2[4];
    int v6 = a2[1];
    int v5 = a2[2];
    int v7 = *a2;
    do
    {
      int v8 = a2[3];
      BOOL v10 = v8 == v4 || v8 == -1 || v4 == -1;
      if (!v10
        || ((int v11 = a2[4], v11 != v3) ? (v12 = v11 == -1) : (v12 = 1),
            !v12 ? (BOOL v13 = v3 == -1) : (BOOL v13 = 1),
            !v13
         || ((int v14 = a2[2], v14 != v5) ? (v15 = v14 == -1) : (v15 = 1),
             !v15 ? (BOOL v16 = v5 == -1) : (BOOL v16 = 1),
             !v16 || (int v17 = a2[1], v17 != v6) && v17 != -1 && v6 != -1 || *a2 != v7 && *a2 != -1 && v7 != -1)))
      {
        uint64_t v18 = result;
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v28);
        uint64_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Input shapes must be equal for layer: '", 39);
        uint64_t v20 = *(void *)(v18 + 112);
        int v21 = *(char *)(v20 + 23);
        if (v21 >= 0) {
          uint64_t v22 = *(void *)(v18 + 112);
        }
        else {
          uint64_t v22 = *(void *)v20;
        }
        if (v21 >= 0) {
          uint64_t v23 = *(unsigned __int8 *)(v20 + 23);
        }
        else {
          uint64_t v23 = *(void *)(v20 + 8);
        }
        uint64_t v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, v22, v23);
        uint64_t v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"'.", 2);
        std::endl[abi:ne180100]<char,std::char_traits<char>>(v25);
        exceptiounint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::stringbuf::str();
        std::runtime_error::runtime_error(exception, &v27);
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      a2 += 16;
    }
    while (a2 != a3);
  }
  return result;
}

void sub_19EA92B08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

BOOL LayerTranslator::addGRU(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  int v4 = (long long *)*((void *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v187, *(const std::string::value_type **)v4, *((void *)v4 + 1));
  }
  else
  {
    long long v5 = *v4;
    v187.__r_.__value_.__r.__words[2] = *((void *)v4 + 2);
    *(_OWORD *)&v187.__r_.__value_.__l.__data_ = v5;
  }
  uint64_t v185 = 0;
  unint64_t v184 = 0;
  uint64_t v186 = 0;
  unint64_t v182 = 0;
  long long v181 = 0;
  uint64_t v183 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v184, (uint64_t *)&v181, *((void *)this + 1));
  if (*((_DWORD *)a2 + 35) == 410)
  {
    int v7 = (const CoreML::Specification::GRULayerParams *)*((void *)a2 + 16);
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    int v7 = (const CoreML::Specification::GRULayerParams *)&CoreML::Specification::_GRULayerParams_default_instance_;
  }
  CoreML::Specification::GRULayerParams::GRULayerParams((CoreML::Specification::GRULayerParams *)v164, v7);
  __asm { FMOV            V8.2S, #1.0 }
  uint64_t v144 = _D8;
  uint64_t v146 = _D8;
  int v143 = 2;
  int v145 = 0;
  uint64_t v148 = _D8;
  uint64_t v150 = _D8;
  int v147 = 0;
  int v149 = 2;
  uint64_t v152 = _D8;
  unint64_t v153 = 512;
  int v151 = 0;
  int v154 = 1065353216;
  long long v155 = xmmword_19EC35D70;
  uint64_t v157 = 0x100000000;
  uint64_t v158 = 1065353216;
  int v156 = 1112014848;
  int v159 = 1065353216;
  uint64_t v160 = 0;
  __int16 v163 = 0;
  uint64_t v161 = 1;
  uint64_t v141 = 2;
  uint64_t v142 = _D8;
  uint64_t v162 = v178;
  unsigned int v14 = v177;
  if ((int)v177 < 1)
  {
    exceptiounint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v189, v14);
    v94 = std::string::insert(&v189, 0, "output std::string::size_type size = ");
    long long v95 = *(_OWORD *)&v94->__r_.__value_.__l.__data_;
    *(void *)&v194[16] = *((void *)&v94->__r_.__value_.__l + 2);
    *(_OWORD *)int v194 = v95;
    v94->__r_.__value_.__l.__size_ = 0;
    v94->__r_.__value_.__r.__words[2] = 0;
    v94->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v96 = std::string::append((std::string *)v194, " not allowed in layer ");
    long long v97 = *(_OWORD *)&v96->__r_.__value_.__l.__data_;
    v197.__r_.__value_.__r.__words[2] = v96->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v197.__r_.__value_.__l.__data_ = v97;
    v96->__r_.__value_.__l.__size_ = 0;
    v96->__r_.__value_.__r.__words[2] = 0;
    v96->__r_.__value_.__r.__words[0] = 0;
    if ((v187.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string v98 = &v187;
    }
    else {
      std::string v98 = (std::string *)v187.__r_.__value_.__r.__words[0];
    }
    if ((v187.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v187.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v187.__r_.__value_.__l.__size_;
    }
    std::string v100 = std::string::append(&v197, (const std::string::value_type *)v98, size);
    long long v101 = *(_OWORD *)&v100->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v100->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v101;
    v100->__r_.__value_.__l.__size_ = 0;
    v100->__r_.__value_.__r.__words[2] = 0;
    v100->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &__str);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  unsigned int v15 = v176;
  if ((int)v176 <= 0)
  {
    unint64_t v102 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v189, v15);
    v103 = std::string::insert(&v189, 0, "input std::string::size_type size = ");
    long long v104 = *(_OWORD *)&v103->__r_.__value_.__l.__data_;
    *(void *)&v194[16] = *((void *)&v103->__r_.__value_.__l + 2);
    *(_OWORD *)int v194 = v104;
    v103->__r_.__value_.__l.__size_ = 0;
    v103->__r_.__value_.__r.__words[2] = 0;
    v103->__r_.__value_.__r.__words[0] = 0;
    long long v105 = std::string::append((std::string *)v194, " not allowed in layer ");
    long long v106 = *(_OWORD *)&v105->__r_.__value_.__l.__data_;
    v197.__r_.__value_.__r.__words[2] = v105->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v197.__r_.__value_.__l.__data_ = v106;
    v105->__r_.__value_.__l.__size_ = 0;
    v105->__r_.__value_.__r.__words[2] = 0;
    v105->__r_.__value_.__r.__words[0] = 0;
    if ((v187.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v107 = &v187;
    }
    else {
      long long v107 = (std::string *)v187.__r_.__value_.__r.__words[0];
    }
    if ((v187.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v108 = HIBYTE(v187.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v108 = v187.__r_.__value_.__l.__size_;
    }
    std::__split_buffer<std::string>::pointer v109 = std::string::append(&v197, (const std::string::value_type *)v107, v108);
    long long v110 = *(_OWORD *)&v109->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v109->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v110;
    v109->__r_.__value_.__l.__size_ = 0;
    v109->__r_.__value_.__r.__words[2] = 0;
    v109->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v102, &__str);
    __cxa_throw(v102, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  unint64_t v153 = __PAIR64__(v176, v177);
  if (0xAAAAAAAAAAAAAAABLL * ((v185 - v184) >> 3) >= 3)
  {
    long long v111 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3C1380](v111, "Recurrent layer: too many output blobs.");
    goto LABEL_275;
  }
  if (v185 - v184 != 48)
  {
    long long v111 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3C1380](v111, "Recurrent layer: too few output blobs.");
LABEL_275:
    __cxa_throw(v111, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((char *)v182 - (char *)v181) >> 3) >= 3)
  {
    unint64_t v112 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3C1380](v112, "Recurrent layer: too many input blobs.");
    __cxa_throw(v112, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int v16 = v179;
  if (!v179) {
    DWORD2(v155) = 0;
  }
  if (v165 != 2)
  {
    unint64_t v113 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3C1380](v113, "GRU layer: must provide 2 activations");
    __cxa_throw(v113, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int v143 = EspressoConverter::CoreMLToEspressoRNNActivation((EspressoConverter *)*(unsigned int *)(*(void *)(v166 + 8) + 28), v8);
  uint64_t v144 = _D8;
  HIDWORD(v141) = EspressoConverter::CoreMLToEspressoRNNActivation((EspressoConverter *)*(unsigned int *)(*(void *)(v166 + 16) + 28), v17);
  uint64_t v142 = _D8;
  if (v180)
  {
    uint64_t v18 = v181;
    if ((v181->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v19 = HIBYTE(v181->__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v19 = v181->__r_.__value_.__l.__size_;
    }
    p_str = &__str;
    std::string::basic_string[abi:ne180100]((uint64_t)&__str, v19 + 11);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    if (v19)
    {
      if ((v18->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v21 = v18;
      }
      else {
        int v21 = (std::string *)v18->__r_.__value_.__r.__words[0];
      }
      memmove(p_str, v21, v19);
    }
    strcpy((char *)p_str + v19, "_prereverse");
    memset(&v197, 0, sizeof(v197));
    v197.__r_.__value_.__l.__size_ = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v197, (long long *)&__str);
    uint64_t v22 = (uint64_t **)*((void *)this + 1);
    v189.__r_.__value_.__r.__words[0] = (std::string::size_type)v181;
    uint64_t v23 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v22, v181, (long long **)&v189);
    uint64_t v24 = (uint64_t **)*((void *)this + 1);
    v189.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
    uint64_t v25 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v24, &__str, (long long **)&v189);
    long long v26 = *(_OWORD *)(v23 + 56);
    long long v27 = *(_OWORD *)(v23 + 72);
    *((void *)v25 + 11) = *((void *)v23 + 11);
    *(_OWORD *)(v25 + 72) = v27;
    *(_OWORD *)(v25 + 5CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = v26;
    if (v25 != v23) {
      std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v25 + 96, *((char **)v23 + 12), *((void *)v23 + 13), (uint64_t)(*((void *)v23 + 13) - *((void *)v23 + 12)) >> 2);
    }
    memset(v194, 0, 24);
    *(void *)&v194[8] = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)v194, (long long *)v181);
    int v28 = *(void **)this;
    std::string::basic_string[abi:ne180100]<0>(&v189, "sequence_reverse");
    if ((v187.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v29 = HIBYTE(v187.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v29 = v187.__r_.__value_.__l.__size_;
    }
    p_p = &__p;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v29 + 11);
    if (v137 < 0) {
      p_p = __p;
    }
    if (v29)
    {
      if ((v187.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v31 = &v187;
      }
      else {
        long long v31 = (std::string *)v187.__r_.__value_.__r.__words[0];
      }
      memmove(p_p, v31, v29);
    }
    strcpy((char *)p_p + v29, "_prereverse");
    memset(&v134, 0, sizeof(v134));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v134, *(long long **)v194, *(long long **)&v194[8], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&v194[8] - *(void *)v194) >> 3));
    memset(&v133, 0, sizeof(v133));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v133, (long long *)v197.__r_.__value_.__l.__data_, (long long *)v197.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v197.__r_.__value_.__l.__size_ - v197.__r_.__value_.__r.__words[0]) >> 3));
    Espresso::sequential_builder::add<Espresso::sequence_reverse_params>(&v138, v28, (uint64_t)&v189, (uint64_t)&__p, (uint64_t)&v140, (long long *)v134.__r_.__value_.__l.__data_, (long long *)v134.__r_.__value_.__l.__size_, (long long **)&v133);
    std::string::size_type v188 = &v133;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v188);
    std::string::size_type v188 = &v134;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v188);
    if (v137 < 0) {
      operator delete(__p);
    }
    if (SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v189.__r_.__value_.__l.__data_);
    }
    std::string::operator=(v181, &__str);
    if (v139) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v139);
    }
    v189.__r_.__value_.__r.__words[0] = (std::string::size_type)v194;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v189);
    *(void *)int v194 = &v197;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v194);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
  char v32 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(&__str, "rnn_arch");
  memset(&v132, 0, sizeof(v132));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v132, (long long *)v181, (long long *)v182, 0xAAAAAAAAAAAAAAABLL * (((char *)v182 - (char *)v181) >> 3));
  memset(&v131, 0, sizeof(v131));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v131, (long long *)v184, (long long *)v185, 0xAAAAAAAAAAAAAAABLL * ((v185 - v184) >> 3));
  Espresso::sequential_builder::add<Espresso::rnn_arch_params>((uint64_t *)&__p, v32, (uint64_t)&__str, (uint64_t)&v187, (uint64_t)&v141, (long long *)v132.__r_.__value_.__l.__data_, (long long *)v132.__r_.__value_.__l.__size_, (long long **)&v131);
  v197.__r_.__value_.__r.__words[0] = (std::string::size_type)&v131;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v197);
  v197.__r_.__value_.__r.__words[0] = (std::string::size_type)&v132;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v197);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  std::string v34 = __p;
  uint64_t v33 = v136;
  if (v136)
  {
    atomic_fetch_add_explicit(&v136->__shared_owners_, 1uLL, memory_order_relaxed);
    if (v167) {
      BOOL v35 = v167;
    }
    else {
      BOOL v35 = &CoreML::Specification::_WeightParams_default_instance_;
    }
    std::string v130 = v33;
    atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    if (v167) {
      BOOL v35 = v167;
    }
    else {
      BOOL v35 = &CoreML::Specification::_WeightParams_default_instance_;
    }
    std::string v130 = 0;
  }
  uint64_t v129 = v34;
  std::string::basic_string[abi:ne180100]<0>(&__str, "GRU");
  std::string::basic_string[abi:ne180100]<0>(&v197, "W_z");
  EspressoConverter::setRecurrentWeightBlob((uint64_t)v35, (uint64_t *)&v129, v15, v14, (const void **)&__str.__r_.__value_.__l.__data_, (const void **)&v197.__r_.__value_.__l.__data_);
  if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v197.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v130) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v130);
  }
  if (v168) {
    uint64_t v36 = v168;
  }
  else {
    uint64_t v36 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  v128[0] = (uint64_t)v34;
  v128[1] = (uint64_t)v33;
  if (v33) {
    atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(&__str, "GRU");
  std::string::basic_string[abi:ne180100]<0>(&v197, "W_r");
  EspressoConverter::setRecurrentWeightBlob((uint64_t)v36, v128, v15, v14, (const void **)&__str.__r_.__value_.__l.__data_, (const void **)&v197.__r_.__value_.__l.__data_);
  if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v197.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    if (v33) {
      goto LABEL_72;
    }
  }
  else if (v33)
  {
LABEL_72:
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
    if (v169) {
      uint64_t v37 = v169;
    }
    else {
      uint64_t v37 = &CoreML::Specification::_WeightParams_default_instance_;
    }
    long long v126 = v34;
    uint64_t v127 = v33;
    atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
    goto LABEL_81;
  }
  if (v169) {
    uint64_t v37 = v169;
  }
  else {
    uint64_t v37 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  long long v126 = v34;
  uint64_t v127 = v33;
LABEL_81:
  std::string::basic_string[abi:ne180100]<0>(&__str, "GRU");
  std::string::basic_string[abi:ne180100]<0>(&v197, "W_o");
  EspressoConverter::setRecurrentWeightBlob((uint64_t)v37, (uint64_t *)&v126, v15, v14, (const void **)&__str.__r_.__value_.__l.__data_, (const void **)&v197.__r_.__value_.__l.__data_);
  if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v197.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    if (v33) {
      goto LABEL_85;
    }
  }
  else if (v33)
  {
LABEL_85:
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
    if (v170) {
      unsigned int v38 = v170;
    }
    else {
      unsigned int v38 = &CoreML::Specification::_WeightParams_default_instance_;
    }
    int v124 = v34;
    int v125 = v33;
    atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
    goto LABEL_94;
  }
  if (v170) {
    unsigned int v38 = v170;
  }
  else {
    unsigned int v38 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  int v124 = v34;
  int v125 = v33;
LABEL_94:
  std::string::basic_string[abi:ne180100]<0>(&__str, "GRU");
  std::string::basic_string[abi:ne180100]<0>(&v197, "R_z");
  EspressoConverter::setRecurrentWeightBlob((uint64_t)v38, (uint64_t *)&v124, v14, v14, (const void **)&__str.__r_.__value_.__l.__data_, (const void **)&v197.__r_.__value_.__l.__data_);
  if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v197.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    if (v33) {
      goto LABEL_98;
    }
  }
  else if (v33)
  {
LABEL_98:
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
    if (v171) {
      uint64_t v39 = v171;
    }
    else {
      uint64_t v39 = &CoreML::Specification::_WeightParams_default_instance_;
    }
    int v122 = v34;
    std::string v123 = v33;
    atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
    goto LABEL_107;
  }
  if (v171) {
    uint64_t v39 = v171;
  }
  else {
    uint64_t v39 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  int v122 = v34;
  std::string v123 = v33;
LABEL_107:
  std::string::basic_string[abi:ne180100]<0>(&__str, "GRU");
  std::string::basic_string[abi:ne180100]<0>(&v197, "R_r");
  EspressoConverter::setRecurrentWeightBlob((uint64_t)v39, (uint64_t *)&v122, v14, v14, (const void **)&__str.__r_.__value_.__l.__data_, (const void **)&v197.__r_.__value_.__l.__data_);
  if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v197.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    if (v33) {
      goto LABEL_111;
    }
  }
  else if (v33)
  {
LABEL_111:
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
    if (v172) {
      char v40 = v172;
    }
    else {
      char v40 = &CoreML::Specification::_WeightParams_default_instance_;
    }
    int v120 = v34;
    int v121 = v33;
    atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
    goto LABEL_120;
  }
  if (v172) {
    char v40 = v172;
  }
  else {
    char v40 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  int v120 = v34;
  int v121 = v33;
LABEL_120:
  std::string::basic_string[abi:ne180100]<0>(&__str, "GRU");
  std::string::basic_string[abi:ne180100]<0>(&v197, "R_o");
  EspressoConverter::setRecurrentWeightBlob((uint64_t)v40, (uint64_t *)&v120, v14, v14, (const void **)&__str.__r_.__value_.__l.__data_, (const void **)&v197.__r_.__value_.__l.__data_);
  if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v197.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    if (v33) {
      goto LABEL_124;
    }
  }
  else if (v33)
  {
LABEL_124:
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
    if (!v16) {
      goto LABEL_167;
    }
    if (v173) {
      unint64_t v42 = v173;
    }
    else {
      unint64_t v42 = &CoreML::Specification::_WeightParams_default_instance_;
    }
    std::string::size_type v118 = v34;
    uint64_t v119 = v33;
    atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
    goto LABEL_135;
  }
  if (!v16) {
    goto LABEL_167;
  }
  if (v173) {
    unint64_t v42 = v173;
  }
  else {
    unint64_t v42 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  std::string::size_type v118 = v34;
  uint64_t v119 = v33;
LABEL_135:
  std::string::basic_string[abi:ne180100]<0>(&__str, "GRU");
  std::string::basic_string[abi:ne180100]<0>(&v197, "B_z");
  EspressoConverter::setRecurrentBiasBlob((uint64_t)v42, (uint64_t *)&v118, v14, (const void **)&__str.__r_.__value_.__l.__data_, (uint64_t)&v197);
  if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v197.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    if (v33) {
      goto LABEL_139;
    }
  }
  else if (v33)
  {
LABEL_139:
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
    if (v174) {
      unsigned int v43 = v174;
    }
    else {
      unsigned int v43 = &CoreML::Specification::_WeightParams_default_instance_;
    }
    id v116 = v34;
    long long v117 = v33;
    atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
    goto LABEL_148;
  }
  if (v174) {
    unsigned int v43 = v174;
  }
  else {
    unsigned int v43 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  id v116 = v34;
  long long v117 = v33;
LABEL_148:
  std::string::basic_string[abi:ne180100]<0>(&__str, "GRU");
  std::string::basic_string[abi:ne180100]<0>(&v197, "B_r");
  EspressoConverter::setRecurrentBiasBlob((uint64_t)v43, (uint64_t *)&v116, v14, (const void **)&__str.__r_.__value_.__l.__data_, (uint64_t)&v197);
  if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v197.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    if (v33) {
      goto LABEL_152;
    }
LABEL_157:
    if (v175) {
      BOOL v44 = v175;
    }
    else {
      BOOL v44 = &CoreML::Specification::_WeightParams_default_instance_;
    }
    unint64_t v114 = v34;
    int v115 = v33;
    goto LABEL_161;
  }
  if (!v33) {
    goto LABEL_157;
  }
LABEL_152:
  std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  if (v175) {
    BOOL v44 = v175;
  }
  else {
    BOOL v44 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  unint64_t v114 = v34;
  int v115 = v33;
  atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_161:
  std::string::basic_string[abi:ne180100]<0>(&__str, "GRU");
  std::string::basic_string[abi:ne180100]<0>(&v197, "B_o");
  EspressoConverter::setRecurrentBiasBlob((uint64_t)v44, (uint64_t *)&v114, v14, (const void **)&__str.__r_.__value_.__l.__data_, (uint64_t)&v197);
  if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v197.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
LABEL_167:
  if (v167) {
    uint64_t v45 = v167;
  }
  else {
    uint64_t v45 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  uint64_t v46 = v45[5];
  if (*(char *)(v46 + 23) < 0) {
    uint64_t v47 = *(void *)(v46 + 8);
  }
  else {
    uint64_t v47 = *(unsigned __int8 *)(v46 + 23);
  }
  uint64_t v48 = v45[6];
  if (*(char *)(v48 + 23) < 0) {
    uint64_t v49 = *(void *)(v48 + 8);
  }
  else {
    uint64_t v49 = *(unsigned __int8 *)(v48 + 23);
  }
  int v50 = *((_DWORD *)v45 + 4);
  uint64_t v51 = v45[7];
  if (*(char *)(v51 + 23) < 0) {
    uint64_t v52 = *(void *)(v51 + 8);
  }
  else {
    uint64_t v52 = *(unsigned __int8 *)(v51 + 23);
  }
  if (v50 <= 0) {
    int v53 = 1;
  }
  else {
    int v53 = 2;
  }
  if (v47) {
    int v54 = v53;
  }
  else {
    int v54 = v50 > 0;
  }
  if (v49) {
    ++v54;
  }
  if (v52) {
    ++v54;
  }
  if (v50 <= 0 && v54 == 1)
  {
    if ((*(unsigned char *)(v46 + 23) & 0x80) != 0)
    {
      if (*(void *)(v46 + 8)) {
        goto LABEL_193;
      }
    }
    else if (*(unsigned char *)(v46 + 23))
    {
LABEL_193:
      BOOL v55 = 1;
      goto LABEL_222;
    }
  }
  if (v170) {
    uint64_t v56 = v170;
  }
  else {
    uint64_t v56 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  uint64_t v57 = v56[5];
  uint64_t v58 = *(unsigned __int8 *)(v57 + 23);
  if (*(char *)(v57 + 23) < 0) {
    uint64_t v59 = *(void *)(v57 + 8);
  }
  else {
    uint64_t v59 = *(unsigned __int8 *)(v57 + 23);
  }
  uint64_t v60 = v56[6];
  if (*(char *)(v60 + 23) < 0) {
    uint64_t v61 = *(void *)(v60 + 8);
  }
  else {
    uint64_t v61 = *(unsigned __int8 *)(v60 + 23);
  }
  int v62 = *((_DWORD *)v56 + 4);
  uint64_t v63 = v56[7];
  if (*(char *)(v63 + 23) < 0) {
    uint64_t v64 = *(void *)(v63 + 8);
  }
  else {
    uint64_t v64 = *(unsigned __int8 *)(v63 + 23);
  }
  BOOL v55 = 0;
  if (v62 <= 0) {
    int v65 = 1;
  }
  else {
    int v65 = 2;
  }
  if (v59) {
    int v66 = v65;
  }
  else {
    int v66 = v62 > 0;
  }
  if (v61) {
    ++v66;
  }
  if (v64) {
    ++v66;
  }
  if (v62 <= 0 && v66 == 1)
  {
    if ((v58 & 0x80) != 0) {
      uint64_t v58 = *(void *)(v57 + 8);
    }
    BOOL v55 = v58 != 0;
  }
LABEL_222:
  if (**((unsigned char **)this + 2))
  {
    LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v184);
    if (!v33) {
      goto LABEL_225;
    }
    goto LABEL_224;
  }
  uint64_t v68 = (uint64_t **)*((void *)this + 1);
  if (*((_DWORD *)a2 + 35) == 410)
  {
    std::string v69 = (const CoreML::Specification::GRULayerParams *)*((void *)a2 + 16);
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v41);
    std::string v69 = (const CoreML::Specification::GRULayerParams *)&CoreML::Specification::_GRULayerParams_default_instance_;
  }
  CoreML::Specification::GRULayerParams::GRULayerParams((CoreML::Specification::GRULayerParams *)&v197, v69);
  int v70 = v198;
  BOOL v71 = v181;
  for (uint64_t i = v182; v71 != i; ++v71)
  {
    uint64_t v73 = std::map<std::string,std::string>::at((uint64_t)v68, v71);
    *(_OWORD *)int v194 = *(_OWORD *)v73;
    *(_OWORD *)&v194[16] = *(_OWORD *)(v73 + 16);
    uint64_t v195 = *(void *)(v73 + 32);
    memset(v196, 0, sizeof(v196));
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v196, *(const void **)(v73 + 40), *(void *)(v73 + 48), (uint64_t)(*(void *)(v73 + 48) - *(void *)(v73 + 40)) >> 2);
    if (*(_DWORD *)&v194[4] != -1 && *(_DWORD *)&v194[4] != 1)
    {
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__str);
      int v85 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str.__r_.__value_.__r.__words[2], (uint64_t)"GRU layer: '", 12);
      uint64_t v86 = *((void *)a2 + 14);
      int v87 = *(char *)(v86 + 23);
      if (v87 >= 0) {
        uint64_t v88 = *((void *)a2 + 14);
      }
      else {
        uint64_t v88 = *(void *)v86;
      }
      if (v87 >= 0) {
        uint64_t v89 = *(unsigned __int8 *)(v86 + 23);
      }
      else {
        uint64_t v89 = *(void *)(v86 + 8);
      }
      uint64_t v90 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, v88, v89);
      int v91 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v90, (uint64_t)"': height dimension of the input blob must be 1.", 48);
      std::endl[abi:ne180100]<char,std::char_traits<char>>(v91);
      uint64_t v92 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::runtime_error::runtime_error(v92, &v189);
      __cxa_throw(v92, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    if (*(_DWORD *)v194 != -1 && *(_DWORD *)v194 != 1)
    {
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__str);
      uint64_t v77 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str.__r_.__value_.__r.__words[2], (uint64_t)"GRU layer: '", 12);
      uint64_t v78 = *((void *)a2 + 14);
      int v79 = *(char *)(v78 + 23);
      if (v79 >= 0) {
        uint64_t v80 = *((void *)a2 + 14);
      }
      else {
        uint64_t v80 = *(void *)v78;
      }
      if (v79 >= 0) {
        uint64_t v81 = *(unsigned __int8 *)(v78 + 23);
      }
      else {
        uint64_t v81 = *(void *)(v78 + 8);
      }
      uint64_t v82 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, v80, v81);
      int v83 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)"': width dimension of the input blob must be 1.", 47);
      std::endl[abi:ne180100]<char,std::char_traits<char>>(v83);
      int v84 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::runtime_error::runtime_error(v84, &v189);
      __cxa_throw(v84, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    if (v196[0]) {
      operator delete(v196[0]);
    }
  }
  uint64_t v74 = v184;
  for (uint64_t j = v185; v74 != j; v74 += 24)
  {
    __str.__r_.__value_.__r.__words[0] = 0x100000001;
    *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 4) = -1;
    LODWORD(__str.__r_.__value_.__r.__words[1]) = v70;
    HIDWORD(__str.__r_.__value_.__r.__words[2]) = -1;
    long long v191 = 0u;
    long long v192 = 0u;
    uint64_t v193 = 0;
    EspressoConverter::validateShape((int *)&__str, *((void *)a2 + 14), (uint64_t)v184);
    *(void *)int v194 = v74;
    long long v76 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v68, v74, (long long **)v194);
    *((void *)v76 + 7) = 0x100000001;
    *((_DWORD *)v76 + 1CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = v70;
    *(void *)(v76 + 68) = -1;
    *((_DWORD *)v76 + 19) = -1;
    *((void *)v76 + 10) = 0;
    *((void *)v76 + 11) = 0;
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v76 + 96, 0, 0, 0);
  }
  CoreML::Specification::GRULayerParams::~GRULayerParams((CoreML::Specification::GRULayerParams *)&v197);
  if (v33) {
LABEL_224:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
LABEL_225:
  if (v136) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v136);
  }
  CoreML::Specification::GRULayerParams::~GRULayerParams((CoreML::Specification::GRULayerParams *)v164);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v181;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v184;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v187.__r_.__value_.__l.__data_);
  }
  return v55;
}

void sub_19EA93D70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,std::__shared_weak_count *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (SLOBYTE(STACK[0x2BF]) < 0)
  {
    operator delete((void *)STACK[0x2A8]);
    if ((v68 & 1) == 0)
    {
LABEL_6:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&STACK[0x2C0]);
      if (STACK[0x408]) {
        operator delete((void *)STACK[0x408]);
      }
      CoreML::Specification::GRULayerParams::~GRULayerParams((CoreML::Specification::GRULayerParams *)(v69 - 256));
      if (v66) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v66);
      }
      if (a41) {
        std::__shared_weak_count::__release_shared[abi:ne180100](a41);
      }
      CoreML::Specification::GRULayerParams::~GRULayerParams((CoreML::Specification::GRULayerParams *)&a66);
      a46 = (uint64_t)&STACK[0x250];
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a46);
      a46 = (uint64_t)&STACK[0x268];
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a46);
      if (SLOBYTE(STACK[0x297]) < 0) {
        operator delete((void *)STACK[0x280]);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v68)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v67);
  goto LABEL_6;
}

void Espresso::sequential_builder::add<Espresso::sequence_reverse_params>(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, long long *a6, long long *a7, long long **a8)
{
  memset(&v13, 0, sizeof(v13));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v13, a6, a7, 0xAAAAAAAAAAAAAAABLL * (((char *)a7 - (char *)a6) >> 3));
  memset(&v12, 0, sizeof(v12));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v12, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a8[1] - (char *)*a8) >> 3));
  LODWORD(v15.__r_.__value_.__l.__data_) = (***(uint64_t (****)(void))(a2[14] + 8))(*(void *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  int v11 = (std::__shared_weak_count *)a1[1];
  uint64_t v16 = *a1;
  int v17 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(&v15, 0, sizeof(v15));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v15, (long long *)v13.__r_.__value_.__l.__data_, (long long *)v13.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13.__r_.__value_.__l.__size_ - v13.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v14, 0, sizeof(v14));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v14, (long long *)v12.__r_.__value_.__l.__data_, (long long *)v12.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12.__r_.__value_.__l.__size_ - v12.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  uint64_t v18 = &v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  uint64_t v18 = &v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (*a2) {
    Espresso::sequential_builder::add_shape_from_kernel();
  }
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
}

void sub_19EA942D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v16 = *(std::__shared_weak_count **)(v13 + 8);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  *(void *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(void *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::add<Espresso::rnn_arch_params>(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, long long *a6, long long *a7, long long **a8)
{
  memset(&v13, 0, sizeof(v13));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v13, a6, a7, 0xAAAAAAAAAAAAAAABLL * (((char *)a7 - (char *)a6) >> 3));
  memset(&v12, 0, sizeof(v12));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v12, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a8[1] - (char *)*a8) >> 3));
  LODWORD(v15.__r_.__value_.__l.__data_) = (***(uint64_t (****)(void))(a2[14] + 8))(*(void *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  int v11 = (std::__shared_weak_count *)a1[1];
  uint64_t v16 = *a1;
  int v17 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(&v15, 0, sizeof(v15));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v15, (long long *)v13.__r_.__value_.__l.__data_, (long long *)v13.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13.__r_.__value_.__l.__size_ - v13.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v14, 0, sizeof(v14));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v14, (long long *)v12.__r_.__value_.__l.__data_, (long long *)v12.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12.__r_.__value_.__l.__size_ - v12.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  uint64_t v18 = &v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  uint64_t v18 = &v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (*a2) {
    Espresso::sequential_builder::add_shape_from_kernel();
  }
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
}

void sub_19EA94540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v16 = *(std::__shared_weak_count **)(v13 + 8);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  *(void *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(void *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

BOOL LayerTranslator::addBias(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  int v4 = (long long *)*((void *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v114, *(const std::string::value_type **)v4, *((void *)v4 + 1));
  }
  else
  {
    long long v5 = *v4;
    v114.__r_.__value_.__r.__words[2] = *((void *)v4 + 2);
    *(_OWORD *)&v114.__r_.__value_.__l.__data_ = v5;
  }
  long long v111 = 0;
  unint64_t v112 = 0;
  uint64_t v113 = 0;
  std::string::size_type v108 = 0;
  std::__split_buffer<std::string>::pointer v109 = 0;
  unint64_t v110 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v111, (uint64_t *)&v108, *((void *)this + 1));
  if (*((_DWORD *)a2 + 35) == 250)
  {
    int v7 = (uint64_t *)*((void *)a2 + 16);
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    int v7 = &CoreML::Specification::_BiasLayerParams_default_instance_;
  }
  uint64_t v104 = 0;
  long long v105 = 0;
  unint64_t v102 = &unk_1EF0D09A0;
  unint64_t v103 = 0;
  int v8 = *((_DWORD *)v7 + 4);
  if (v8)
  {
    google::protobuf::RepeatedField<double>::Reserve((unsigned int *)&v104, v8);
    memcpy(v105 + 1, (const void *)(v7[3] + 8), 8 * *((int *)v7 + 4));
    LODWORD(v104) = *((_DWORD *)v7 + 4);
  }
  int v107 = 0;
  uint64_t v9 = v7[1];
  if (v9) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&v103, v9 & 0xFFFFFFFFFFFFFFFELL);
  }
  if (v7 != &CoreML::Specification::_BiasLayerParams_default_instance_ && v7[5]) {
    operator new();
  }
  long long v106 = 0;
  long long v100 = xmmword_19EC7B870;
  unint64_t v101 = 0xFFFFFFFF00000001;
  if (v104 == 1)
  {
    BOOL v10 = v105;
    uint64_t v11 = 1;
    uint64_t v12 = 1;
  }
  else
  {
    if (v104 != 3)
    {
      if (v104)
      {
        exceptiounint64_t n = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x19F3C1380](exception, "Bias Layer: shape must be of size 1 or 3");
      }
      else
      {
        exceptiounint64_t n = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x19F3C1380](exception, "Bias Layer: shape cannot be of size 0");
      }
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    BOOL v10 = v105;
    uint64_t v11 = v105[2];
    uint64_t v12 = v105[3];
  }
  uint64_t v13 = v10[1];
  *(void *)((char *)&v100 + 4) = __PAIR64__(v13, v11);
  LODWORD(v100) = v12;
  long long v97 = 0;
  std::string v98 = 0;
  unint64_t v99 = 0;
  long long v94 = 0;
  long long v95 = 0;
  uint64_t v96 = 0;
  if ((v114.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v114.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v114.__r_.__value_.__l.__size_;
  }
  std::string v15 = v126;
  std::string::basic_string[abi:ne180100]((uint64_t)v126, size + 1);
  if (v126[23] < 0) {
    std::string v15 = *(unsigned char **)v126;
  }
  if (size)
  {
    if ((v114.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v16 = &v114;
    }
    else {
      uint64_t v16 = (std::string *)v114.__r_.__value_.__r.__words[0];
    }
    memmove(v15, v16, size);
  }
  *(_WORD *)&v15[size] = 95;
  int v17 = std::string::append((std::string *)v126, "constant_in");
  long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  std::string::size_type v93 = v17->__r_.__value_.__r.__words[2];
  long long v92 = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  if ((v126[23] & 0x80000000) != 0) {
    operator delete(*(void **)v126);
  }
  std::string::size_type v19 = v98;
  if ((unint64_t)v98 >= v99)
  {
    int v21 = (long long *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v97, &v92);
  }
  else
  {
    if (SHIBYTE(v93) < 0)
    {
      std::string::__init_copy_ctor_external(v98, (const std::string::value_type *)v92, *((std::string::size_type *)&v92 + 1));
    }
    else
    {
      long long v20 = v92;
      v98->__r_.__value_.__r.__words[2] = v93;
      *(_OWORD *)&v19->__r_.__value_.__l.__data_ = v20;
    }
    int v21 = (long long *)&v19[1];
  }
  std::string v98 = (std::string *)v21;
  uint64_t v22 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(v126, "load_constant");
  memset(&v89, 0, sizeof(v89));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v89, v94, v95, 0xAAAAAAAAAAAAAAABLL * (((char *)v95 - (char *)v94) >> 3));
  memset(&v88, 0, sizeof(v88));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v88, v97, (long long *)v98, 0xAAAAAAAAAAAAAAABLL * (((char *)v98 - (char *)v97) >> 3));
  Espresso::sequential_builder::add<Espresso::load_constant_params>(&v90, v22, (uint64_t)v126, (uint64_t)&v92, (uint64_t)&v100, (long long *)v89.__r_.__value_.__l.__data_, (long long *)v89.__r_.__value_.__l.__size_, (long long **)&v88);
  *(void *)&long long v120 = &v88;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v120);
  *(void *)&long long v120 = &v89;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v120);
  if ((v126[23] & 0x80000000) != 0) {
    operator delete(*(void **)v126);
  }
  uint64_t v23 = v91;
  if (v91) {
    atomic_fetch_add_explicit(&v91->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v86, v100, SDWORD1(v100), SDWORD2(v100), SHIDWORD(v100));
  if (v106) {
    uint64_t v24 = v106;
  }
  else {
    uint64_t v24 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  uint64_t v25 = v24[5];
  if (*(char *)(v25 + 23) < 0) {
    uint64_t v26 = *(void *)(v25 + 8);
  }
  else {
    uint64_t v26 = *(unsigned __int8 *)(v25 + 23);
  }
  uint64_t v27 = v24[6];
  uint64_t v28 = *(unsigned __int8 *)(v27 + 23);
  if (*(char *)(v27 + 23) < 0) {
    uint64_t v29 = *(void *)(v27 + 8);
  }
  else {
    uint64_t v29 = *(unsigned __int8 *)(v27 + 23);
  }
  int v30 = *((_DWORD *)v24 + 4);
  uint64_t v31 = v24[7];
  if (*(char *)(v31 + 23) < 0) {
    uint64_t v32 = *(void *)(v31 + 8);
  }
  else {
    uint64_t v32 = *(unsigned __int8 *)(v31 + 23);
  }
  unint64_t v33 = v12 * v11 * v13;
  if (v30 <= 0) {
    int v34 = 1;
  }
  else {
    int v34 = 2;
  }
  if (v26) {
    int v35 = v34;
  }
  else {
    int v35 = v30 > 0;
  }
  if (v29) {
    ++v35;
  }
  if (v32) {
    ++v35;
  }
  if (v30 > 0 || v35 != 1) {
    goto LABEL_75;
  }
  if ((*(unsigned char *)(v25 + 23) & 0x80) != 0)
  {
    if (*(void *)(v25 + 8)) {
      goto LABEL_75;
    }
  }
  else if (*(unsigned char *)(v25 + 23))
  {
    goto LABEL_75;
  }
  if ((v28 & 0x80) != 0) {
    uint64_t v28 = *(void *)(v27 + 8);
  }
  if (v24 != &CoreML::Specification::_WeightParams_default_instance_ && v28 && v24[8])
  {
    EspressoConverter::readFloatFromWeightParams((EspressoConverter *)v126, (const CoreML::Specification::WeightParams *)v24, v33);
    uint64_t v36 = v86;
    uint64_t v37 = *(void **)v126;
    memcpy(*(void **)(v86 + 24), *(const void **)v126, 4 * v33);
    if (v37) {
      operator delete(v37);
    }
    goto LABEL_77;
  }
LABEL_75:
  if (v33 != (int)EspressoConverter::getWeightParamSize((uint64_t)v24))
  {
    long long v75 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3C1380](v75, "Bias Layer: bias size does not match provided shape");
    __cxa_throw(v75, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v36 = v86;
  EspressoConverter::copyWeightsToDataBlob(*(EspressoConverter **)(v86 + 24), v24, 4 * v33);
LABEL_77:
  unsigned int v38 = v87;
  uint64_t v84 = v36;
  int v85 = v87;
  if (v87) {
    atomic_fetch_add_explicit(&v87->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::generic_load_constant_kernel::set_constant_blob();
  if (v85) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v85);
  }
  uint64_t v39 = v109;
  if ((char *)v109 - v108 != 24 || v112 - v111 != 24)
  {
    uint64_t v73 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3C1380](v73, "Bias Layer: Must accept exactly 1 input and produce 1 output");
    __cxa_throw(v73, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if ((unint64_t)v109 >= v110)
  {
    BOOL v41 = (long long *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v108, &v92);
  }
  else
  {
    if (SHIBYTE(v93) < 0)
    {
      std::string::__init_copy_ctor_external(v109, (const std::string::value_type *)v92, *((std::string::size_type *)&v92 + 1));
    }
    else
    {
      long long v40 = v92;
      v109->__r_.__value_.__r.__words[2] = v93;
      *(_OWORD *)&v39->__r_.__value_.__l.__data_ = v40;
    }
    BOOL v41 = (long long *)&v39[1];
  }
  std::__split_buffer<std::string>::pointer v109 = (std::string *)v41;
  v81[2] = 897988541;
  char v82 = 0;
  uint64_t v83 = 0;
  v81[0] = 0;
  v81[1] = 1065353216;
  unint64_t v42 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(v126, "elementwise");
  memset(&v78, 0, sizeof(v78));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v78, (long long *)v108, (long long *)v109, 0xAAAAAAAAAAAAAAABLL * (((char *)v109 - v108) >> 3));
  memset(&v77, 0, sizeof(v77));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v77, (long long *)v111, (long long *)v112, 0xAAAAAAAAAAAAAAABLL * ((v112 - v111) >> 3));
  Espresso::sequential_builder::add<Espresso::elementwise_params>(&v79, v42, (uint64_t)v126, (uint64_t)&v114, (uint64_t)v81, (long long *)v78.__r_.__value_.__l.__data_, (long long *)v78.__r_.__value_.__l.__size_, (long long **)&v77);
  *(void *)&long long v120 = &v77;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v120);
  *(void *)&long long v120 = &v78;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v120);
  if ((v126[23] & 0x80000000) != 0) {
    operator delete(*(void **)v126);
  }
  if (**((unsigned char **)this + 2))
  {
    LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v111);
  }
  else
  {
    unsigned int v43 = (uint64_t **)*((void *)this + 1);
    uint64_t v44 = std::map<std::string,std::string>::at((uint64_t)v43, v108);
    *(_OWORD *)long long v126 = *(_OWORD *)v44;
    *(_OWORD *)&v126[16] = *(_OWORD *)(v44 + 16);
    uint64_t v127 = *(void *)(v44 + 32);
    uint64_t v128 = 0;
    uint64_t v129 = 0;
    uint64_t v130 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v128, *(const void **)(v44 + 40), *(void *)(v44 + 48), (uint64_t)(*(void *)(v44 + 48) - *(void *)(v44 + 40)) >> 2);
    std::vector<Espresso::layer_shape>::vector(v125);
    uint64_t v45 = v125[0];
    *(_OWORD *)v125[0] = *(_OWORD *)v126;
    *(_OWORD *)(v45 + 1CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = *(_OWORD *)&v126[16];
    *(void *)(v45 + 32) = v127;
    uint64_t v46 = v128;
    uint64_t v47 = v129;
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)(v45 + 40), v128, v129, (v129 - (uint64_t)v128) >> 2);
    uint64_t v48 = v125[0];
    long long v49 = *(_OWORD *)&v126[16];
    *(_OWORD *)(v125[0] + 64) = *(_OWORD *)v126;
    *(_OWORD *)(v48 + 80) = v49;
    *(void *)(v48 + 9CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = v127;
    int v50 = std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)(v48 + 104), v46, v47, (v47 - (uint64_t)v46) >> 2);
    if (*((_DWORD *)a2 + 35) == 250)
    {
      uint64_t v51 = (uint64_t *)*((void *)a2 + 16);
    }
    else
    {
      CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v50);
      uint64_t v51 = &CoreML::Specification::_BiasLayerParams_default_instance_;
    }
    int v52 = *((_DWORD *)v51 + 4);
    if (v52 == 3)
    {
      int v54 = (void *)v51[3];
      uint64_t v53 = v125[0];
      *(_DWORD *)(v125[0] + 72) = v54[1];
      *(_DWORD *)(v53 + 68) = v54[2];
      *(_DWORD *)(v53 + 64) = v54[3];
    }
    else
    {
      if (v52 != 1)
      {
        long long v76 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x19F3C1380](v76, "Bias Layer: shape must be of size 1 or 3");
        __cxa_throw(v76, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      uint64_t v53 = v125[0];
      *(_DWORD *)(v125[0] + 72) = *(void *)(v51[3] + 8);
      *(void *)(v53 + 64) = 0x100000001;
    }
    EspressoConverter::computeMaxShape((uint64_t)&v120, v53, v125[1]);
    v115[0] = v120;
    v115[1] = v121;
    BOOL v55 = v123;
    uint64_t v116 = v122;
    std::string __p = 0;
    uint64_t v119 = 0;
    std::string::size_type v118 = 0;
    uint64_t v56 = v124;
    unint64_t v57 = (v124 - (uint64_t)v123) >> 2;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v123, v124, v57);
    EspressoConverter::validateShape((int *)v115, *((void *)a2 + 14), (uint64_t)v111);
    if (__p)
    {
      std::string::size_type v118 = __p;
      operator delete(__p);
    }
    std::string v131 = v111;
    uint64_t v58 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v43, v111, (long long **)&v131);
    long long v59 = v121;
    *(_OWORD *)(v58 + 5CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = v120;
    *(_OWORD *)(v58 + 72) = v59;
    *((void *)v58 + 11) = v122;
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v58 + 96, v55, v56, v57);
    if (v55) {
      operator delete(v55);
    }
    *(void *)&long long v120 = v125;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v120);
    if (v46) {
      operator delete(v46);
    }
  }
  if (v106) {
    uint64_t v60 = v106;
  }
  else {
    uint64_t v60 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  uint64_t v61 = v60[5];
  uint64_t v62 = *(unsigned __int8 *)(v61 + 23);
  if (*(char *)(v61 + 23) < 0) {
    uint64_t v63 = *(void *)(v61 + 8);
  }
  else {
    uint64_t v63 = *(unsigned __int8 *)(v61 + 23);
  }
  uint64_t v64 = v60[6];
  if (*(char *)(v64 + 23) < 0) {
    uint64_t v65 = *(void *)(v64 + 8);
  }
  else {
    uint64_t v65 = *(unsigned __int8 *)(v64 + 23);
  }
  int v66 = *((_DWORD *)v60 + 4);
  uint64_t v67 = v60[7];
  if (*(char *)(v67 + 23) < 0) {
    uint64_t v68 = *(void *)(v67 + 8);
  }
  else {
    uint64_t v68 = *(unsigned __int8 *)(v67 + 23);
  }
  BOOL v69 = 0;
  if (v66 <= 0) {
    int v70 = 1;
  }
  else {
    int v70 = 2;
  }
  if (v63) {
    int v71 = v70;
  }
  else {
    int v71 = v66 > 0;
  }
  if (v65) {
    ++v71;
  }
  if (v68) {
    ++v71;
  }
  if (v66 <= 0 && v71 == 1)
  {
    if ((v62 & 0x80) != 0) {
      uint64_t v62 = *(void *)(v61 + 8);
    }
    BOOL v69 = v62 != 0;
  }
  if (v80) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v80);
  }
  if (v38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
  }
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  if (v91) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v91);
  }
  if (SHIBYTE(v93) < 0) {
    operator delete((void *)v92);
  }
  *(void *)long long v126 = &v94;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v126);
  *(void *)long long v126 = &v97;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v126);
  CoreML::Specification::BiasLayerParams::~BiasLayerParams((CoreML::Specification::BiasLayerParams *)&v102);
  *(void *)long long v126 = &v108;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v126);
  *(void *)long long v126 = &v111;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v126);
  if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v114.__r_.__value_.__l.__data_);
  }
  return v69;
}

void sub_19EA95084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,std::__shared_weak_count *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,std::__shared_weak_count *a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60,uint64_t a61,uint64_t a62,char a63)
{
  __cxa_free_exception(v73);
  STACK[0x218] = v74 - 200;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x218]);
  if (v72) {
    operator delete(v72);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  if (a28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a28);
  }
  if (v71) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v71);
  }
  if (a36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a36);
  }
  if (a42 < 0) {
    operator delete(__p);
  }
  STACK[0x218] = (unint64_t)&a44;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x218]);
  STACK[0x218] = (unint64_t)&a47;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x218]);
  CoreML::Specification::BiasLayerParams::~BiasLayerParams((CoreML::Specification::BiasLayerParams *)&a53);
  STACK[0x218] = (unint64_t)&a60;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x218]);
  STACK[0x218] = (unint64_t)&a63;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x218]);
  if (a71 < 0) {
    operator delete(a66);
  }
  _Unwind_Resume(a1);
}

void *std::vector<Espresso::layer_shape>::vector(void *a1)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v2 = (char *)operator new(0x80uLL);
  uint64_t v3 = 0;
  *a1 = v2;
  a1[1] = v2;
  a1[2] = v2 + 128;
  do
  {
    int v4 = &v2[v3];
    *((void *)v4 + 7) = 0;
    *(_OWORD *)(v4 + 40) = 0uLL;
    *(_OWORD *)(v4 + 24) = 0uLL;
    *(_OWORD *)int v4 = xmmword_19EC7B870;
    v3 += 64;
    *((void *)v4 + 2) = 0xFFFFFFFF00000001;
  }
  while (v3 != 128);
  a1[1] = v2 + 128;
  return a1;
}

void sub_19EA953A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void LayerTranslator::addUpsample(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  int v4 = (long long *)*((void *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v78, *(const std::string::value_type **)v4, *((void *)v4 + 1));
  }
  else
  {
    long long v5 = *v4;
    v78.__r_.__value_.__r.__words[2] = *((void *)v4 + 2);
    *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v5;
  }
  long long v76 = 0;
  long long v75 = 0;
  uint64_t v77 = 0;
  uint64_t v73 = 0;
  std::string::size_type v72 = 0;
  uint64_t v74 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v75, (uint64_t *)&v72, *((void *)this + 1));
  if (*((_DWORD *)a2 + 35) == 210)
  {
    int v7 = (const CoreML::Specification::UpsampleLayerParams *)*((void *)a2 + 16);
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    int v7 = (const CoreML::Specification::UpsampleLayerParams *)&CoreML::Specification::_UpsampleLayerParams_default_instance_;
  }
  CoreML::Specification::UpsampleLayerParams::UpsampleLayerParams((CoreML::Specification::UpsampleLayerParams *)v65, v7);
  long long v56 = xmmword_19EC7B8D0;
  uint64_t v57 = 0x100000000;
  char v58 = 0;
  __asm { FMOV            V0.2S, #1.0 }
  uint64_t v59 = _D0;
  char v60 = 1;
  uint64_t v62 = 0;
  uint64_t v63 = 0;
  uint64_t v61 = 0;
  uint64_t v64 = _D0;
  if (v66 == 2)
  {
    if (v68) {
      goto LABEL_63;
    }
    uint64_t v13 = *(void *)(v67 + 16);
    DWORD2(v5CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = *(void *)(v67 + 8);
    DWORD1(v5CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = v13;
  }
  else
  {
    if (v66) {
      goto LABEL_63;
    }
    if (v68 != 2)
    {
      if (!v68)
      {
        *(void *)((char *)&v56 + 4) = 0x100000001;
        goto LABEL_17;
      }
LABEL_63:
      exceptiounint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      int v30 = std::string::append((std::string *)v89, " , Only one of scalingFactor and fractionalScalingFactor can be set, and if set, must be of size 2.");
      long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
      v55.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v31;
      v30->__r_.__value_.__l.__size_ = 0;
      v30->__r_.__value_.__r.__words[2] = 0;
      v30->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v55);
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    if (v70 != 1 || !v71)
    {
      uint64_t v46 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      uint64_t v47 = std::string::append((std::string *)v89, " , Fractional scaling only compatible with align_corners=true or align_corners=false bilinear mode.");
      long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
      v55.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v48;
      v47->__r_.__value_.__l.__size_ = 0;
      v47->__r_.__value_.__r.__words[2] = 0;
      v47->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v46, &v55);
      __cxa_throw(v46, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    char v58 = 1;
    HIDWORD(v59) = *(_DWORD *)(v69 + 8);
    LODWORD(v59) = *(_DWORD *)(v69 + 12);
  }
LABEL_17:
  if (v70 >= 2)
  {
    if (v70 == 0x7FFFFFFF || v70 == 0x80000000)
    {
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v55);
      uint64_t v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v55.__r_.__value_.__r.__words[2], (uint64_t)"Upsample layer: '", 17);
      uint64_t v33 = *((void *)a2 + 14);
      int v34 = *(char *)(v33 + 23);
      if (v34 >= 0) {
        uint64_t v35 = *((void *)a2 + 14);
      }
      else {
        uint64_t v35 = *(void *)v33;
      }
      if (v34 >= 0) {
        uint64_t v36 = *(unsigned __int8 *)(v33 + 23);
      }
      else {
        uint64_t v36 = *(void *)(v33 + 8);
      }
      uint64_t v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, v35, v36);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"': unknown value for parameter 'mode'.", 38);
      unsigned int v38 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::runtime_error::runtime_error(v38, (const std::string *)v89);
      __cxa_throw(v38, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  else
  {
    HIDWORD(v5CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = v70;
  }
  if (v71 <= 0)
  {
    if (!v71)
    {
      HIDWORD(v57) = 1;
      goto LABEL_31;
    }
    unsigned int v14 = 0x80000000;
  }
  else
  {
    if (v71 == 1)
    {
      uint64_t v57 = 1;
      goto LABEL_31;
    }
    if (v71 == 2)
    {
      uint64_t v57 = 0;
      goto LABEL_31;
    }
    unsigned int v14 = 0x7FFFFFFF;
  }
  if (v71 == v14)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v55);
    uint64_t v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v55.__r_.__value_.__r.__words[2], (uint64_t)"Upsample layer: '", 17);
    uint64_t v40 = *((void *)a2 + 14);
    int v41 = *(char *)(v40 + 23);
    if (v41 >= 0) {
      uint64_t v42 = *((void *)a2 + 14);
    }
    else {
      uint64_t v42 = *(void *)v40;
    }
    if (v41 >= 0) {
      uint64_t v43 = *(unsigned __int8 *)(v40 + 23);
    }
    else {
      uint64_t v43 = *(void *)(v40 + 8);
    }
    uint64_t v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, v42, v43);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"': unknown value for parameter 'linearupsamplemode'.", 52);
    uint64_t v45 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(v45, (const std::string *)v89);
    __cxa_throw(v45, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
LABEL_31:
  std::string v15 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "upsample");
  memset(&v50, 0, sizeof(v50));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v50, v72, v73, 0xAAAAAAAAAAAAAAABLL * (((char *)v73 - (char *)v72) >> 3));
  memset(&v49, 0, sizeof(v49));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v49, v75, v76, 0xAAAAAAAAAAAAAAABLL * (((char *)v76 - (char *)v75) >> 3));
  *(void *)&long long v84 = 0;
  long long v83 = 0uLL;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&v83, (long long *)v50.__r_.__value_.__l.__data_, (long long *)v50.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v50.__r_.__value_.__l.__size_ - v50.__r_.__value_.__r.__words[0]) >> 3));
  long long v79 = 0uLL;
  *(void *)&long long v80 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&v79, (long long *)v49.__r_.__value_.__l.__data_, (long long *)v49.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v49.__r_.__value_.__l.__size_ - v49.__r_.__value_.__r.__words[0]) >> 3));
  LODWORD(v55.__r_.__value_.__l.__data_) = (***(uint64_t (****)(void))(v15[14] + 8))(*(void *)(v15[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  uint64_t v94 = v53;
  long long v95 = v54;
  if (v54) {
    atomic_fetch_add_explicit(&v54->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(&v55, 0, sizeof(v55));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v55, (long long *)v83, *((long long **)&v83 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v83 + 1) - v83) >> 3));
  memset(v89, 0, 24);
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v89, (long long *)v79, *((long long **)&v79 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v79 + 1) - v79) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  uint64_t v96 = (std::string *)v89;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v96);
  uint64_t v96 = &v55;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v96);
  if (v95) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v95);
  }
  if (*v15) {
    Espresso::sequential_builder::add_shape_from_kernel();
  }
  v55.__r_.__value_.__r.__words[0] = (std::string::size_type)&v79;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v55);
  v55.__r_.__value_.__r.__words[0] = (std::string::size_type)&v83;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v55);
  v55.__r_.__value_.__r.__words[0] = (std::string::size_type)&v49;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v55);
  v55.__r_.__value_.__r.__words[0] = (std::string::size_type)&v50;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v55);
  if (v52 < 0) {
    operator delete(__p[0]);
  }
  if (**((unsigned char **)this + 2))
  {
    LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v75);
  }
  else
  {
    uint64_t v16 = (uint64_t **)*((void *)this + 1);
    uint64_t v17 = std::map<std::string,std::string>::at((uint64_t)v16, v72);
    *(_OWORD *)std::string v89 = *(_OWORD *)v17;
    *(_OWORD *)&v89[16] = *(_OWORD *)(v17 + 16);
    uint64_t v90 = *(void *)(v17 + 32);
    int v91 = 0;
    uint64_t v92 = 0;
    uint64_t v93 = 0;
    long long v18 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v91, *(const void **)(v17 + 40), *(void *)(v17 + 48), (uint64_t)(*(void *)(v17 + 48)- *(void *)(v17 + 40)) >> 2);
    if (*((_DWORD *)a2 + 35) == 210)
    {
      std::string::size_type v19 = (const CoreML::Specification::UpsampleLayerParams *)*((void *)a2 + 16);
    }
    else
    {
      CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v18);
      std::string::size_type v19 = (const CoreML::Specification::UpsampleLayerParams *)&CoreML::Specification::_UpsampleLayerParams_default_instance_;
    }
    CoreML::Specification::UpsampleLayerParams::UpsampleLayerParams((CoreML::Specification::UpsampleLayerParams *)&v55, v19);
    long long v83 = *(_OWORD *)v89;
    long long v84 = *(_OWORD *)&v89[16];
    long long v20 = v91;
    uint64_t v85 = v90;
    uint64_t v86 = 0;
    uint64_t v87 = 0;
    uint64_t v88 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v86, v91, v92, (v92 - (uint64_t)v91) >> 2);
    if (v58)
    {
      int v21 = vcvtms_s32_f32(*(float *)&v59 * (float)*(int *)v89);
      int v22 = *(_DWORD *)&v89[4];
      int v23 = vcvtms_s32_f32(*((float *)&v59 + 1) * (float)*(int *)&v89[4]);
    }
    else
    {
      int v21 = DWORD1(v56) * *(_DWORD *)v89;
      int v22 = *(_DWORD *)&v89[4];
      int v23 = DWORD2(v56) * *(_DWORD *)&v89[4];
    }
    if (v22 == -1) {
      int v24 = -1;
    }
    else {
      int v24 = v23;
    }
    *(void *)&long long v83 = __PAIR64__(v24, v21);
    if (*(_DWORD *)v89 == -1) {
      LODWORD(v83) = -1;
    }
    long long v79 = v83;
    long long v80 = v84;
    uint64_t v25 = v86;
    uint64_t v81 = v85;
    memset(v82, 0, sizeof(v82));
    uint64_t v26 = v87;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v82, v86, v87, (v87 - (uint64_t)v86) >> 2);
    EspressoConverter::validateShape((int *)&v79, *((void *)a2 + 14), (uint64_t)v75);
    if (v82[0]) {
      operator delete(v82[0]);
    }
    __p[0] = v75;
    uint64_t v27 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v16, v75, (long long **)__p);
    long long v28 = v84;
    *(_OWORD *)(v27 + 5CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = v83;
    *(_OWORD *)(v27 + 72) = v28;
    *((void *)v27 + 11) = v85;
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v27 + 96, v25, v26, (v26 - (uint64_t)v25) >> 2);
    if (v25) {
      operator delete(v25);
    }
    CoreML::Specification::UpsampleLayerParams::~UpsampleLayerParams((CoreML::Specification::UpsampleLayerParams *)&v55);
    if (v20) {
      operator delete(v20);
    }
  }
  if (v54) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v54);
  }
  CoreML::Specification::UpsampleLayerParams::~UpsampleLayerParams((CoreML::Specification::UpsampleLayerParams *)v65);
  v55.__r_.__value_.__r.__words[0] = (std::string::size_type)&v72;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v55);
  v55.__r_.__value_.__r.__words[0] = (std::string::size_type)&v75;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v55);
  if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v78.__r_.__value_.__l.__data_);
  }
}

void sub_19EA95C34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (*(char *)(v68 - 137) < 0)
  {
    operator delete(*(void **)(v68 - 160));
    if ((v67 & 1) == 0)
    {
LABEL_6:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a21);
      CoreML::Specification::UpsampleLayerParams::~UpsampleLayerParams((CoreML::Specification::UpsampleLayerParams *)&a66);
      a66 = (uint64_t)&STACK[0x210];
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a66);
      a66 = (uint64_t)&STACK[0x228];
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a66);
      if (SLOBYTE(STACK[0x257]) < 0) {
        operator delete((void *)STACK[0x240]);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v67)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v66);
  goto LABEL_6;
}

BOOL LayerTranslator::addEmbeddingND(LayerTranslator *this, uint64_t **a2)
{
  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  int v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v191, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    long long v5 = *(_OWORD *)v4;
    v191.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v191.__r_.__value_.__l.__data_ = v5;
  }
  std::string::size_type v188 = 0;
  std::string v189 = 0;
  uint64_t v190 = 0;
  uint64_t v185 = 0;
  uint64_t v186 = 0;
  uint64_t v187 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v188, (uint64_t *)&v185, *((void *)this + 1));
  if (*((_DWORD *)a2 + 35) == 1040)
  {
    int v7 = a2[16];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    int v7 = &CoreML::Specification::_EmbeddingNDLayerParams_default_instance_;
  }
  unsigned __int8 v178 = &unk_1EF0D5340;
  unint64_t v179 = 0;
  int v184 = 0;
  uint64_t v8 = v7[1];
  if (v8) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&v179, v8 & 0xFFFFFFFFFFFFFFFELL);
  }
  if (v7 == &CoreML::Specification::_EmbeddingNDLayerParams_default_instance_)
  {
    char v180 = 0;
  }
  else
  {
    if (v7[2]) {
      operator new();
    }
    char v180 = 0;
    if (v7[3]) {
      operator new();
    }
  }
  long long v181 = 0;
  unsigned __int8 v9 = *((unsigned char *)v7 + 48);
  long long v182 = *((_OWORD *)v7 + 2);
  unsigned __int8 v183 = v9;
  unint64_t v10 = *((void *)&v182 + 1);
  if (!*((void *)&v182 + 1))
  {
    exceptiounint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v175, *((unint64_t *)&v182 + 1));
    uint64_t v73 = std::string::insert(&v175, 0, "embedding size = ");
    long long v74 = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v73->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v74;
    v73->__r_.__value_.__l.__size_ = 0;
    v73->__r_.__value_.__r.__words[2] = 0;
    v73->__r_.__value_.__r.__words[0] = 0;
    long long v75 = std::string::append(&__p, " not allowed in layer ");
    long long v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
    v177.__r_.__value_.__r.__words[2] = v75->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v177.__r_.__value_.__l.__data_ = v76;
    v75->__r_.__value_.__l.__size_ = 0;
    v75->__r_.__value_.__r.__words[2] = 0;
    v75->__r_.__value_.__r.__words[0] = 0;
    if ((v191.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v77 = &v191;
    }
    else {
      uint64_t v77 = (std::string *)v191.__r_.__value_.__r.__words[0];
    }
    if ((v191.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v191.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v191.__r_.__value_.__l.__size_;
    }
    long long v79 = std::string::append(&v177, (const std::string::value_type *)v77, size);
    long long v80 = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
    *(void *)&v163[16] = *((void *)&v79->__r_.__value_.__l + 2);
    *(_OWORD *)__int16 v163 = v80;
    v79->__r_.__value_.__l.__size_ = 0;
    v79->__r_.__value_.__r.__words[2] = 0;
    v79->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, (const std::string *)v163);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v11 = v182;
  if (!(void)v182)
  {
    uint64_t v81 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v175, v182);
    char v82 = std::string::insert(&v175, 0, "vocab size = ");
    long long v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v82->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v83;
    v82->__r_.__value_.__l.__size_ = 0;
    v82->__r_.__value_.__r.__words[2] = 0;
    v82->__r_.__value_.__r.__words[0] = 0;
    long long v84 = std::string::append(&__p, " not allowed in layer ");
    long long v85 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
    v177.__r_.__value_.__r.__words[2] = v84->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v177.__r_.__value_.__l.__data_ = v85;
    v84->__r_.__value_.__l.__size_ = 0;
    v84->__r_.__value_.__r.__words[2] = 0;
    v84->__r_.__value_.__r.__words[0] = 0;
    if ((v191.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v86 = &v191;
    }
    else {
      uint64_t v86 = (std::string *)v191.__r_.__value_.__r.__words[0];
    }
    if ((v191.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v87 = HIBYTE(v191.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v87 = v191.__r_.__value_.__l.__size_;
    }
    uint64_t v88 = std::string::append(&v177, (const std::string::value_type *)v86, v87);
    long long v89 = *(_OWORD *)&v88->__r_.__value_.__l.__data_;
    *(void *)&v163[16] = *((void *)&v88->__r_.__value_.__l + 2);
    *(_OWORD *)__int16 v163 = v89;
    v88->__r_.__value_.__l.__size_ = 0;
    v88->__r_.__value_.__r.__words[2] = 0;
    v88->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v81, (const std::string *)v163);
    __cxa_throw(v81, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int v168 = -1;
  __asm { FMOV            V0.2S, #1.0 }
  uint64_t v169 = _D0;
  uint64_t v174 = 0;
  *(_DWORD *)&v163[16] = 0;
  *(void *)&v163[20] = _D0;
  uint64_t v170 = 0;
  uint64_t v167 = 0;
  uint64_t v171 = 0;
  uint64_t v173 = 0;
  uint64_t v172 = 0;
  uint64_t v164 = 0x100000000;
  *(void *)__int16 v163 = __PAIR64__(v182, DWORD2(v182));
  int v165 = 0;
  *(void *)&v163[8] = v183;
  char v166 = 1;
  uint64_t v17 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(&v177, "inner_product");
  memset(&v160, 0, sizeof(v160));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v160, v185, v186, 0xAAAAAAAAAAAAAAABLL * (((char *)v186 - (char *)v185) >> 3));
  memset(&v159, 0, sizeof(v159));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v159, v188, v189, 0xAAAAAAAAAAAAAAABLL * (((char *)v189 - (char *)v188) >> 3));
  Espresso::sequential_builder::add<Espresso::inner_product_uniforms>(&v161, v17, (uint64_t)&v177, (uint64_t)&v191, (uint64_t)v163, (long long *)v160.__r_.__value_.__l.__data_, (long long *)v160.__r_.__value_.__l.__size_, (long long **)&v159);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v159;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v160;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v177.__r_.__value_.__l.__data_);
  }
  uint64_t v18 = v161;
  std::string::size_type v19 = v162;
  if (v162) {
    atomic_fetch_add_explicit(&v162->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v180) {
    long long v20 = v180;
  }
  else {
    long long v20 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  uint64_t v21 = v20[5];
  if (*(char *)(v21 + 23) < 0) {
    uint64_t v22 = *(void *)(v21 + 8);
  }
  else {
    uint64_t v22 = *(unsigned __int8 *)(v21 + 23);
  }
  uint64_t v23 = v20[6];
  uint64_t v24 = *(unsigned __int8 *)(v23 + 23);
  if (*(char *)(v23 + 23) < 0) {
    uint64_t v25 = *(void *)(v23 + 8);
  }
  else {
    uint64_t v25 = *(unsigned __int8 *)(v23 + 23);
  }
  unint64_t v26 = *((void *)&v182 + 1) * v182;
  int v27 = *((_DWORD *)v20 + 4);
  uint64_t v28 = v20[7];
  if (*(char *)(v28 + 23) < 0) {
    uint64_t v29 = *(void *)(v28 + 8);
  }
  else {
    uint64_t v29 = *(unsigned __int8 *)(v28 + 23);
  }
  if (v27 <= 0) {
    int v30 = 1;
  }
  else {
    int v30 = 2;
  }
  if (v22) {
    int v31 = v30;
  }
  else {
    int v31 = v27 > 0;
  }
  if (v25) {
    ++v31;
  }
  if (v29) {
    ++v31;
  }
  if (v27 > 0 || v31 != 1) {
    goto LABEL_72;
  }
  if ((*(unsigned char *)(v21 + 23) & 0x80) != 0)
  {
    if (*(void *)(v21 + 8)) {
      goto LABEL_72;
    }
  }
  else if (*(unsigned char *)(v21 + 23))
  {
    goto LABEL_72;
  }
  if ((v24 & 0x80) != 0) {
    uint64_t v24 = *(void *)(v23 + 8);
  }
  if (v20 != &CoreML::Specification::_WeightParams_default_instance_)
  {
    if (v24)
    {
      uint64_t v32 = v20[8];
      if (v32)
      {
        unint64_t __val = *((void *)&v182 + 1) * v182;
        int v147 = v19;
        unint64_t v33 = *(void *)(v32 + 16);
        int WeightParamSizeInBytes = EspressoConverter::getWeightParamSizeInBytes(v20);
        if (!CoreML::hasSufficientBytesInQuantizedWeightParam(v20, v11 * v10))
        {
          uint64_t v128 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::operator+<char>();
          uint64_t v129 = std::string::append(&v158, "' has insufficient bytes for ");
          long long v130 = *(_OWORD *)&v129->__r_.__value_.__l.__data_;
          v175.__r_.__value_.__r.__words[2] = v129->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v175.__r_.__value_.__l.__data_ = v130;
          v129->__r_.__value_.__l.__size_ = 0;
          v129->__r_.__value_.__r.__words[2] = 0;
          v129->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v157, __val);
          if ((v157.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string v131 = &v157;
          }
          else {
            std::string v131 = (std::string *)v157.__r_.__value_.__r.__words[0];
          }
          if ((v157.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v132 = HIBYTE(v157.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v132 = v157.__r_.__value_.__l.__size_;
          }
          std::string v133 = std::string::append(&v175, (const std::string::value_type *)v131, v132);
          long long v134 = *(_OWORD *)&v133->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v133->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v134;
          v133->__r_.__value_.__l.__size_ = 0;
          v133->__r_.__value_.__r.__words[2] = 0;
          v133->__r_.__value_.__r.__words[0] = 0;
          unint64_t v135 = std::string::append(&__p, "units in weight");
          long long v136 = *(_OWORD *)&v135->__r_.__value_.__l.__data_;
          v177.__r_.__value_.__r.__words[2] = v135->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v177.__r_.__value_.__l.__data_ = v136;
          v135->__r_.__value_.__l.__size_ = 0;
          v135->__r_.__value_.__r.__words[2] = 0;
          v135->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v128, &v177);
          __cxa_throw(v128, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        uint64_t v35 = WeightParamSizeInBytes;
        CoreML::copySpecArrayStringToVector(&v177, (char *)v23, WeightParamSizeInBytes);
        unint64_t v36 = v33;
        std::string::size_type v19 = v147;
        std::to_string(&v175, v36);
        unint64_t v26 = __val;
        uint64_t v37 = std::string::insert(&v175, 0, "W_U");
        long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v38;
        v37->__r_.__value_.__l.__size_ = 0;
        v37->__r_.__value_.__r.__words[2] = 0;
        v37->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v175.__r_.__value_.__l.__data_);
        }
        *(_OWORD *)&v175.__r_.__value_.__l.__data_ = 0uLL;
        (*(void (**)(uint64_t, std::string *, std::string *, std::string::size_type, uint64_t, void))(*(void *)v18 + 168))(v18, &v175, &__p, v177.__r_.__value_.__r.__words[0], v35, 0);
        if (v175.__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v175.__r_.__value_.__l.__size_);
        }
        if (v180) {
          uint64_t v39 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v180;
        }
        else {
          uint64_t v39 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)&CoreML::Specification::_WeightParams_default_instance_;
        }
        v150[0] = v18;
        v150[1] = (uint64_t)v147;
        if (v147) {
          atomic_fetch_add_explicit(&v147->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        unint64_t v40 = *(unsigned int *)v163;
        std::string::basic_string[abi:ne180100]<0>(&v175, (char *)&unk_19EC86ACE);
        CoreML::setQuantizationParams(v39, v150, v40, (const void **)&v175.__r_.__value_.__l.__data_);
        if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v175.__r_.__value_.__l.__data_);
        }
        if (v147) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v147);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (v177.__r_.__value_.__r.__words[0])
        {
          v177.__r_.__value_.__l.__size_ = v177.__r_.__value_.__r.__words[0];
          operator delete(v177.__r_.__value_.__l.__data_);
        }
        goto LABEL_82;
      }
    }
  }
LABEL_72:
  int WeightParamSize = EspressoConverter::getWeightParamSize((uint64_t)v20);
  if (v26 != WeightParamSize)
  {
    int v90 = WeightParamSize;
    int v91 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v154, v90);
    uint64_t v92 = std::string::insert(&v154, 0, "Size of weights = ");
    long long v93 = *(_OWORD *)&v92->__r_.__value_.__l.__data_;
    v155.__r_.__value_.__r.__words[2] = v92->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v155.__r_.__value_.__l.__data_ = v93;
    v92->__r_.__value_.__l.__size_ = 0;
    v92->__r_.__value_.__r.__words[2] = 0;
    v92->__r_.__value_.__r.__words[0] = 0;
    uint64_t v94 = std::string::append(&v155, " is not equal to size of the product of input dims and output channels = ");
    long long v95 = *(_OWORD *)&v94->__r_.__value_.__l.__data_;
    v156.__r_.__value_.__r.__words[2] = v94->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v156.__r_.__value_.__l.__data_ = v95;
    v94->__r_.__value_.__l.__size_ = 0;
    v94->__r_.__value_.__r.__words[2] = 0;
    v94->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v153, v182);
    if ((v153.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v96 = &v153;
    }
    else {
      uint64_t v96 = (std::string *)v153.__r_.__value_.__r.__words[0];
    }
    if ((v153.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v97 = HIBYTE(v153.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v97 = v153.__r_.__value_.__l.__size_;
    }
    std::string v98 = std::string::append(&v156, (const std::string::value_type *)v96, v97);
    long long v99 = *(_OWORD *)&v98->__r_.__value_.__l.__data_;
    v157.__r_.__value_.__r.__words[2] = v98->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v157.__r_.__value_.__l.__data_ = v99;
    v98->__r_.__value_.__l.__size_ = 0;
    v98->__r_.__value_.__r.__words[2] = 0;
    v98->__r_.__value_.__r.__words[0] = 0;
    long long v100 = std::string::append(&v157, ",");
    long long v101 = *(_OWORD *)&v100->__r_.__value_.__l.__data_;
    v158.__r_.__value_.__r.__words[2] = v100->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v158.__r_.__value_.__l.__data_ = v101;
    v100->__r_.__value_.__l.__size_ = 0;
    v100->__r_.__value_.__r.__words[2] = 0;
    v100->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v152, *((unint64_t *)&v182 + 1));
    if ((v152.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v102 = &v152;
    }
    else {
      unint64_t v102 = (std::string *)v152.__r_.__value_.__r.__words[0];
    }
    if ((v152.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v103 = HIBYTE(v152.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v103 = v152.__r_.__value_.__l.__size_;
    }
    uint64_t v104 = std::string::append(&v158, (const std::string::value_type *)v102, v103);
    long long v105 = *(_OWORD *)&v104->__r_.__value_.__l.__data_;
    v175.__r_.__value_.__r.__words[2] = v104->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v175.__r_.__value_.__l.__data_ = v105;
    v104->__r_.__value_.__l.__size_ = 0;
    v104->__r_.__value_.__r.__words[2] = 0;
    v104->__r_.__value_.__r.__words[0] = 0;
    long long v106 = std::string::append(&v175, " in layer ");
    long long v107 = *(_OWORD *)&v106->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v106->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v107;
    v106->__r_.__value_.__l.__size_ = 0;
    v106->__r_.__value_.__r.__words[2] = 0;
    v106->__r_.__value_.__r.__words[0] = 0;
    if ((v191.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v108 = &v191;
    }
    else {
      std::string::size_type v108 = (std::string *)v191.__r_.__value_.__r.__words[0];
    }
    if ((v191.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v109 = HIBYTE(v191.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v109 = v191.__r_.__value_.__l.__size_;
    }
    unint64_t v110 = std::string::append(&__p, (const std::string::value_type *)v108, v109);
    long long v111 = *(_OWORD *)&v110->__r_.__value_.__l.__data_;
    v177.__r_.__value_.__r.__words[2] = v110->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v177.__r_.__value_.__l.__data_ = v111;
    v110->__r_.__value_.__l.__size_ = 0;
    v110->__r_.__value_.__r.__words[2] = 0;
    v110->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v91, &v177);
    __cxa_throw(v91, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v18 + 424))(&v177, v18);
  if (v180) {
    uint64_t v42 = v180;
  }
  else {
    uint64_t v42 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  EspressoConverter::copyWeightsToDataBlob(*(EspressoConverter **)(v177.__r_.__value_.__r.__words[0] + 16), v42, 4 * (*(_DWORD *)&v163[4] * *(_DWORD *)v163));
  long long v151 = *(_OWORD *)&v177.__r_.__value_.__l.__data_;
  if (v177.__r_.__value_.__l.__size_) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v177.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, long long *))(*(void *)v18 + 400))(v18, &v151);
  if (*((void *)&v151 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v151 + 1));
  }
  if (v177.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v177.__r_.__value_.__l.__size_);
  }
LABEL_82:
  if (!v183) {
    goto LABEL_127;
  }
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v154, 4 * *(_DWORD *)v163, 1, 1, 1);
  if (v181) {
    uint64_t v43 = v181;
  }
  else {
    uint64_t v43 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  uint64_t v44 = v43[5];
  if (*(char *)(v44 + 23) < 0) {
    uint64_t v45 = *(void *)(v44 + 8);
  }
  else {
    uint64_t v45 = *(unsigned __int8 *)(v44 + 23);
  }
  uint64_t v46 = v43[6];
  uint64_t v47 = *(unsigned __int8 *)(v46 + 23);
  if (*(char *)(v46 + 23) < 0) {
    uint64_t v48 = *(void *)(v46 + 8);
  }
  else {
    uint64_t v48 = *(unsigned __int8 *)(v46 + 23);
  }
  int v49 = *((_DWORD *)v43 + 4);
  uint64_t v50 = v43[7];
  if (*(char *)(v50 + 23) < 0) {
    uint64_t v51 = *(void *)(v50 + 8);
  }
  else {
    uint64_t v51 = *(unsigned __int8 *)(v50 + 23);
  }
  if (v49 <= 0) {
    int v52 = 1;
  }
  else {
    int v52 = 2;
  }
  if (v45) {
    int v53 = v52;
  }
  else {
    int v53 = v49 > 0;
  }
  if (v48) {
    ++v53;
  }
  if (v51) {
    ++v53;
  }
  if (v49 > 0 || v53 != 1) {
    goto LABEL_119;
  }
  if ((*(unsigned char *)(v44 + 23) & 0x80) != 0)
  {
    if (!*(void *)(v44 + 8)) {
      goto LABEL_111;
    }
LABEL_119:
    int v57 = EspressoConverter::getWeightParamSize((uint64_t)v43);
    if (v10 != v57)
    {
      int v112 = v57;
      uint64_t v113 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v156, v112);
      std::string v114 = std::string::insert(&v156, 0, "Size of bias = ");
      long long v115 = *(_OWORD *)&v114->__r_.__value_.__l.__data_;
      v157.__r_.__value_.__r.__words[2] = v114->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v157.__r_.__value_.__l.__data_ = v115;
      v114->__r_.__value_.__l.__size_ = 0;
      v114->__r_.__value_.__r.__words[2] = 0;
      v114->__r_.__value_.__r.__words[0] = 0;
      uint64_t v116 = std::string::append(&v157, " is not equal to the output dims = ");
      long long v117 = *(_OWORD *)&v116->__r_.__value_.__l.__data_;
      v158.__r_.__value_.__r.__words[2] = v116->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v158.__r_.__value_.__l.__data_ = v117;
      v116->__r_.__value_.__l.__size_ = 0;
      v116->__r_.__value_.__r.__words[2] = 0;
      v116->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v155, *((unint64_t *)&v182 + 1));
      if ((v155.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v118 = &v155;
      }
      else {
        std::string::size_type v118 = (std::string *)v155.__r_.__value_.__r.__words[0];
      }
      if ((v155.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v119 = HIBYTE(v155.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v119 = v155.__r_.__value_.__l.__size_;
      }
      long long v120 = std::string::append(&v158, (const std::string::value_type *)v118, v119);
      long long v121 = *(_OWORD *)&v120->__r_.__value_.__l.__data_;
      v175.__r_.__value_.__r.__words[2] = v120->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v175.__r_.__value_.__l.__data_ = v121;
      v120->__r_.__value_.__l.__size_ = 0;
      v120->__r_.__value_.__r.__words[2] = 0;
      v120->__r_.__value_.__r.__words[0] = 0;
      uint64_t v122 = std::string::append(&v175, " in layer ");
      long long v123 = *(_OWORD *)&v122->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v122->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v123;
      v122->__r_.__value_.__l.__size_ = 0;
      v122->__r_.__value_.__r.__words[2] = 0;
      v122->__r_.__value_.__r.__words[0] = 0;
      if ((v191.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v124 = &v191;
      }
      else {
        uint64_t v124 = (std::string *)v191.__r_.__value_.__r.__words[0];
      }
      if ((v191.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v125 = HIBYTE(v191.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v125 = v191.__r_.__value_.__l.__size_;
      }
      long long v126 = std::string::append(&__p, (const std::string::value_type *)v124, v125);
      long long v127 = *(_OWORD *)&v126->__r_.__value_.__l.__data_;
      v177.__r_.__value_.__r.__words[2] = v126->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v177.__r_.__value_.__l.__data_ = v127;
      v126->__r_.__value_.__l.__size_ = 0;
      v126->__r_.__value_.__r.__words[2] = 0;
      v126->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v113, &v177);
      __cxa_throw(v113, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    std::string::size_type v55 = v154.__r_.__value_.__r.__words[0];
    EspressoConverter::copyWeightsToDataBlob(*(EspressoConverter **)(v154.__r_.__value_.__r.__words[0] + 16), v43, 4 * *(unsigned int *)v163);
    goto LABEL_121;
  }
  if (*(unsigned char *)(v44 + 23)) {
    goto LABEL_119;
  }
LABEL_111:
  if ((v47 & 0x80) != 0) {
    uint64_t v47 = *(void *)(v46 + 8);
  }
  if (v43 == &CoreML::Specification::_WeightParams_default_instance_) {
    goto LABEL_119;
  }
  if (!v47) {
    goto LABEL_119;
  }
  uint64_t v54 = v43[8];
  if (!v54) {
    goto LABEL_119;
  }
  if ((int)EspressoConverter::getWeightParamSizeInBytes(v43) > (*(void *)(v54 + 16) * v10 + 7) >> 3)
  {
    char v137 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    uint64_t v138 = std::string::append(&v158, "' has insufficient bytes for ");
    long long v139 = *(_OWORD *)&v138->__r_.__value_.__l.__data_;
    v175.__r_.__value_.__r.__words[2] = v138->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v175.__r_.__value_.__l.__data_ = v139;
    v138->__r_.__value_.__l.__size_ = 0;
    v138->__r_.__value_.__r.__words[2] = 0;
    v138->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v157, v26);
    if ((v157.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v140 = &v157;
    }
    else {
      char v140 = (std::string *)v157.__r_.__value_.__r.__words[0];
    }
    if ((v157.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v141 = HIBYTE(v157.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v141 = v157.__r_.__value_.__l.__size_;
    }
    uint64_t v142 = std::string::append(&v175, (const std::string::value_type *)v140, v141);
    long long v143 = *(_OWORD *)&v142->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v142->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v143;
    v142->__r_.__value_.__l.__size_ = 0;
    v142->__r_.__value_.__r.__words[2] = 0;
    v142->__r_.__value_.__r.__words[0] = 0;
    uint64_t v144 = std::string::append(&__p, "units in bias");
    long long v145 = *(_OWORD *)&v144->__r_.__value_.__l.__data_;
    v177.__r_.__value_.__r.__words[2] = v144->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v177.__r_.__value_.__l.__data_ = v145;
    v144->__r_.__value_.__l.__size_ = 0;
    v144->__r_.__value_.__r.__words[2] = 0;
    v144->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v137, &v177);
    __cxa_throw(v137, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CoreML::dequantizeWeightParamSpec((CoreML *)&v177, (const CoreML::Specification::WeightParams *)v43, v10);
  std::string::size_type v55 = v154.__r_.__value_.__r.__words[0];
  long long v56 = (void *)v177.__r_.__value_.__r.__words[0];
  memcpy(*(void **)(v154.__r_.__value_.__r.__words[0] + 16), v177.__r_.__value_.__l.__data_, 4 * v10);
  if (v56) {
    operator delete(v56);
  }
LABEL_121:
  char v58 = (std::__shared_weak_count *)v154.__r_.__value_.__l.__size_;
  std::string::size_type v148 = v55;
  int v149 = (std::__shared_weak_count *)v154.__r_.__value_.__l.__size_;
  if (v154.__r_.__value_.__l.__size_) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v154.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, std::string::size_type *))(*(void *)v18 + 392))(v18, &v148);
  if (v149) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v149);
  }
  if (v58) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v58);
  }
LABEL_127:
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v188);
  if (v180) {
    uint64_t v59 = v180;
  }
  else {
    uint64_t v59 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  uint64_t v60 = v59[5];
  uint64_t v61 = *(unsigned __int8 *)(v60 + 23);
  if (*(char *)(v60 + 23) < 0) {
    uint64_t v62 = *(void *)(v60 + 8);
  }
  else {
    uint64_t v62 = *(unsigned __int8 *)(v60 + 23);
  }
  uint64_t v63 = v59[6];
  if (*(char *)(v63 + 23) < 0) {
    uint64_t v64 = *(void *)(v63 + 8);
  }
  else {
    uint64_t v64 = *(unsigned __int8 *)(v63 + 23);
  }
  int v65 = *((_DWORD *)v59 + 4);
  uint64_t v66 = v59[7];
  if (*(char *)(v66 + 23) < 0) {
    uint64_t v67 = *(void *)(v66 + 8);
  }
  else {
    uint64_t v67 = *(unsigned __int8 *)(v66 + 23);
  }
  BOOL v68 = 0;
  if (v65 <= 0) {
    int v69 = 1;
  }
  else {
    int v69 = 2;
  }
  if (v62) {
    int v70 = v69;
  }
  else {
    int v70 = v65 > 0;
  }
  if (v64) {
    ++v70;
  }
  if (v67) {
    ++v70;
  }
  if (v65 <= 0 && v70 == 1)
  {
    if ((v61 & 0x80) != 0) {
      uint64_t v61 = *(void *)(v60 + 8);
    }
    BOOL v68 = v61 != 0;
  }
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  if (v162) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v162);
  }
  CoreML::Specification::EmbeddingNDLayerParams::~EmbeddingNDLayerParams((CoreML::Specification::EmbeddingNDLayerParams *)&v178);
  *(void *)__int16 v163 = &v185;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v163);
  *(void *)__int16 v163 = &v188;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v163);
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v191.__r_.__value_.__l.__data_);
  }
  return v68;
}

void sub_19EA96DF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,uint64_t a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62,uint64_t a63)
{
  if (*(char *)(v76 - 233) < 0) {
    operator delete(*(void **)(v76 - 256));
  }
  if (SLOBYTE(STACK[0x217]) < 0) {
    operator delete((void *)STACK[0x200]);
  }
  if (a74 < 0) {
    operator delete(a73);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a62 < 0) {
    operator delete(a57);
  }
  if (a55 < 0) {
    operator delete(a50);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  if (a48 < 0) {
    operator delete(a43);
  }
  if (a41 < 0) {
    operator delete(a36);
  }
  if (a35 < 0)
  {
    operator delete(a30);
    if ((v74 & 1) == 0)
    {
LABEL_24:
      if (a11) {
        std::__shared_weak_count::__release_shared[abi:ne180100](a11);
      }
      if (a71) {
        std::__shared_weak_count::__release_shared[abi:ne180100](a71);
      }
      CoreML::Specification::EmbeddingNDLayerParams::~EmbeddingNDLayerParams((CoreML::Specification::EmbeddingNDLayerParams *)(v76 - 232));
      a72 = (void *)(v76 - 176);
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a72);
      a72 = (void *)(v76 - 152);
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a72);
      if (*(char *)(v76 - 105) < 0) {
        operator delete(*(void **)(v76 - 128));
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v74)
  {
    goto LABEL_24;
  }
  __cxa_free_exception(v75);
  goto LABEL_24;
}

void LayerTranslator::addReorganizeData(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  int v4 = (long long *)*((void *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v75, *(const std::string::value_type **)v4, *((void *)v4 + 1));
  }
  else
  {
    long long v5 = *v4;
    v75.__r_.__value_.__r.__words[2] = *((void *)v4 + 2);
    *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v5;
  }
  std::string::size_type v72 = 0;
  uint64_t v73 = 0;
  uint64_t v74 = 0;
  int v69 = 0;
  int v70 = 0;
  uint64_t v71 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v72, (uint64_t *)&v69, *((void *)this + 1));
  if (*((_DWORD *)a2 + 35) == 345)
  {
    int v7 = (const CoreML::Specification::ReorganizeDataLayerParams *)*((void *)a2 + 16);
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    int v7 = (const CoreML::Specification::ReorganizeDataLayerParams *)&CoreML::Specification::_ReorganizeDataLayerParams_default_instance_;
  }
  CoreML::Specification::ReorganizeDataLayerParams::ReorganizeDataLayerParams((CoreML::Specification::ReorganizeDataLayerParams *)&v65, v7);
  uint64_t v64 = 0;
  int v63 = v67;
  if (v68 <= 1)
  {
    if (v68 != 1)
    {
      unsigned int v9 = 0x80000000;
      goto LABEL_15;
    }
    uint64_t v8 = &v64;
LABEL_13:
    *(_DWORD *)uint64_t v8 = 1;
    goto LABEL_16;
  }
  if (v68 == 2)
  {
    uint64_t v8 = (uint64_t *)((char *)&v64 + 4);
    LODWORD(v64) = 1;
    goto LABEL_13;
  }
  unsigned int v9 = 0x7FFFFFFF;
LABEL_15:
  if (v68 == v9)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v79);
    int v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v80, (uint64_t)"Reorganize Data layer: '", 24);
    uint64_t v35 = *((void *)a2 + 14);
    int v36 = *(char *)(v35 + 23);
    if (v36 >= 0) {
      uint64_t v37 = *((void *)a2 + 14);
    }
    else {
      uint64_t v37 = *(void *)v35;
    }
    if (v36 >= 0) {
      uint64_t v38 = *(unsigned __int8 *)(v35 + 23);
    }
    else {
      uint64_t v38 = *(void *)(v35 + 8);
    }
    uint64_t v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, v37, v38);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"' unknown value for parameter 'mode'.", 37);
    exceptiounint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, (const std::string *)v87);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
LABEL_16:
  unint64_t v10 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "space_to_depth");
  memset(&v58, 0, sizeof(v58));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v58, v69, v70, 0xAAAAAAAAAAAAAAABLL * (((char *)v70 - (char *)v69) >> 3));
  memset(&v57, 0, sizeof(v57));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v57, v72, v73, 0xAAAAAAAAAAAAAAABLL * (((char *)v73 - (char *)v72) >> 3));
  memset(v76, 0, 24);
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v76, (long long *)v58.__r_.__value_.__l.__data_, (long long *)v58.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v58.__r_.__value_.__l.__size_ - v58.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v85, 0, sizeof(v85));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v85, (long long *)v57.__r_.__value_.__l.__data_, (long long *)v57.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v57.__r_.__value_.__l.__size_ - v57.__r_.__value_.__r.__words[0]) >> 3));
  LODWORD(v79) = (***(uint64_t (****)(void))(v10[14] + 8))(*(void *)(v10[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  uint64_t v92 = v61;
  long long v93 = v62;
  if (v62) {
    atomic_fetch_add_explicit(&v62->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v79 = 0uLL;
  *(void *)&long long v80 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&v79, *(long long **)v76, *(long long **)&v76[8], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&v76[8] - *(void *)v76) >> 3));
  memset(v87, 0, 24);
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v87, (long long *)v85.__r_.__value_.__l.__data_, (long long *)v85.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v85.__r_.__value_.__l.__size_ - v85.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  uint64_t v94 = (void **)v87;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v94);
  uint64_t v94 = (void **)&v79;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v94);
  if (v93) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v93);
  }
  if (*v10) {
    Espresso::sequential_builder::add_shape_from_kernel();
  }
  *(void *)&long long v79 = &v85;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v79);
  *(void *)&long long v79 = v76;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v79);
  *(void *)&long long v79 = &v57;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v79);
  *(void *)&long long v79 = &v58;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v79);
  if (v60 < 0) {
    operator delete(__p[0]);
  }
  if (**((unsigned char **)this + 2))
  {
    LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v72);
  }
  else
  {
    uint64_t v11 = (uint64_t **)*((void *)this + 1);
    uint64_t v12 = std::map<std::string,std::string>::at((uint64_t)v11, v69);
    *(_OWORD *)std::string::size_type v87 = *(_OWORD *)v12;
    *(_OWORD *)&v87[16] = *(_OWORD *)(v12 + 16);
    uint64_t v88 = *(void *)(v12 + 32);
    long long v89 = 0;
    uint64_t v90 = 0;
    uint64_t v91 = 0;
    uint64_t v13 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v89, *(const void **)(v12 + 40), *(void *)(v12 + 48), (uint64_t)(*(void *)(v12 + 48)- *(void *)(v12 + 40)) >> 2);
    if (*((_DWORD *)a2 + 35) == 345)
    {
      unsigned int v14 = (const CoreML::Specification::ReorganizeDataLayerParams *)*((void *)a2 + 16);
    }
    else
    {
      CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v13);
      unsigned int v14 = (const CoreML::Specification::ReorganizeDataLayerParams *)&CoreML::Specification::_ReorganizeDataLayerParams_default_instance_;
    }
    CoreML::Specification::ReorganizeDataLayerParams::ReorganizeDataLayerParams((CoreML::Specification::ReorganizeDataLayerParams *)&v85, v14);
    int v15 = v85.__r_.__value_.__r.__words[2];
    if (v86)
    {
      if (*(_DWORD *)&v87[8] != -1
        && *(_DWORD *)&v87[8] % (LODWORD(v85.__r_.__value_.__r.__words[2]) * LODWORD(v85.__r_.__value_.__r.__words[2])))
      {
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v79);
        uint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v80, (uint64_t)"Reorganize data layer: '", 24);
        uint64_t v17 = *((void *)a2 + 14);
        int v18 = *(char *)(v17 + 23);
        if (v18 >= 0) {
          uint64_t v19 = *((void *)a2 + 14);
        }
        else {
          uint64_t v19 = *(void *)v17;
        }
        if (v18 >= 0) {
          uint64_t v20 = *(unsigned __int8 *)(v17 + 23);
        }
        else {
          uint64_t v20 = *(void *)(v17 + 8);
        }
        uint64_t v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, v19, v20);
        uint64_t v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"': 'blockSize' square must divide channel dimension of the input.", 65);
        std::endl[abi:ne180100]<char,std::char_traits<char>>(v22);
        uint64_t v23 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::stringbuf::str();
        std::runtime_error::runtime_error(v23, (const std::string *)v76);
        __cxa_throw(v23, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
    }
    else
    {
      if (*(_DWORD *)&v87[4] != -1 && *(_DWORD *)&v87[4] % SLODWORD(v85.__r_.__value_.__r.__words[2]))
      {
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v79);
        int v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v80, (uint64_t)"Reorganize data layer: '", 24);
        uint64_t v42 = *((void *)a2 + 14);
        int v43 = *(char *)(v42 + 23);
        if (v43 >= 0) {
          uint64_t v44 = *((void *)a2 + 14);
        }
        else {
          uint64_t v44 = *(void *)v42;
        }
        if (v43 >= 0) {
          uint64_t v45 = *(unsigned __int8 *)(v42 + 23);
        }
        else {
          uint64_t v45 = *(void *)(v42 + 8);
        }
        uint64_t v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, v44, v45);
        uint64_t v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"': 'blockSize' must divide height dimension of the input.", 57);
        std::endl[abi:ne180100]<char,std::char_traits<char>>(v47);
        uint64_t v48 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::stringbuf::str();
        std::runtime_error::runtime_error(v48, (const std::string *)v76);
        __cxa_throw(v48, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      if (*(_DWORD *)v87 != -1 && *(_DWORD *)v87 % SLODWORD(v85.__r_.__value_.__r.__words[2]))
      {
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v79);
        int v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v80, (uint64_t)"Reorganize data layer: '", 24);
        uint64_t v50 = *((void *)a2 + 14);
        int v51 = *(char *)(v50 + 23);
        if (v51 >= 0) {
          uint64_t v52 = *((void *)a2 + 14);
        }
        else {
          uint64_t v52 = *(void *)v50;
        }
        if (v51 >= 0) {
          uint64_t v53 = *(unsigned __int8 *)(v50 + 23);
        }
        else {
          uint64_t v53 = *(void *)(v50 + 8);
        }
        uint64_t v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, v52, v53);
        std::string::size_type v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"': 'blockSize' must divide width dimension of the input.", 56);
        std::endl[abi:ne180100]<char,std::char_traits<char>>(v55);
        long long v56 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::stringbuf::str();
        std::runtime_error::runtime_error(v56, (const std::string *)v76);
        __cxa_throw(v56, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
    }
    long long v79 = *(_OWORD *)v87;
    long long v80 = *(_OWORD *)&v87[16];
    uint64_t v24 = v89;
    uint64_t v81 = v88;
    char v82 = 0;
    uint64_t v83 = 0;
    uint64_t v84 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v82, v89, v90, (v90 - (uint64_t)v89) >> 2);
    int v25 = v15 * v15;
    if (v86)
    {
      int v26 = *(_DWORD *)&v87[4] * v15;
      int v27 = *(_DWORD *)v87 * v15;
      int v28 = *(_DWORD *)&v87[8] / v25;
    }
    else
    {
      int v28 = *(_DWORD *)&v87[8] * v25;
      int v26 = *(_DWORD *)&v87[4] / v15;
      int v27 = *(_DWORD *)v87 / v15;
    }
    *(void *)((char *)&v79 + 4) = __PAIR64__(v28, v26);
    LODWORD(v79) = v27;
    if (*(_DWORD *)&v87[8] == -1) {
      DWORD2(v79) = -1;
    }
    if (*(_DWORD *)&v87[4] == -1) {
      DWORD1(v79) = -1;
    }
    if (*(_DWORD *)v87 == -1) {
      LODWORD(v79) = -1;
    }
    *(_OWORD *)uint64_t v76 = v79;
    *(_OWORD *)&v76[16] = v80;
    uint64_t v29 = v82;
    uint64_t v77 = v81;
    memset(v78, 0, sizeof(v78));
    uint64_t v30 = v83;
    unint64_t v31 = (v83 - (uint64_t)v82) >> 2;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v78, v82, v83, v31);
    EspressoConverter::validateShape((int *)v76, *((void *)a2 + 14), (uint64_t)v72);
    if (v78[0]) {
      operator delete(v78[0]);
    }
    __p[0] = v72;
    uint64_t v32 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v11, v72, (long long **)__p);
    long long v33 = v80;
    *(_OWORD *)(v32 + 5CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = v79;
    *(_OWORD *)(v32 + 72) = v33;
    *((void *)v32 + 11) = v81;
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v32 + 96, v29, v30, v31);
    if (v29) {
      operator delete(v29);
    }
    v85.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1EF0D6C30;
    google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)&v85.__r_.__value_.__l.__size_);
    if (v24) {
      operator delete(v24);
    }
  }
  if (v62) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v62);
  }
  int v65 = &unk_1EF0D6C30;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(&v66);
  *(void *)&long long v79 = &v69;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v79);
  *(void *)&long long v79 = &v72;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v79);
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v75.__r_.__value_.__l.__data_);
  }
}

void sub_19EA97C34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,std::__shared_weak_count *a23,uint64_t a24,uint64_t a25,char *a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,char a54)
{
  if (a48 < 0)
  {
    operator delete(__p);
    if ((v55 & 1) == 0)
    {
LABEL_6:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a54);
      *(void *)(v56 - 192) = &unk_1EF0D6C30;
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)(v56 - 184));
      std::string v58 = *(void **)(v56 - 120);
      if (v58) {
        operator delete(v58);
      }
      if (a23) {
        std::__shared_weak_count::__release_shared[abi:ne180100](a23);
      }
      a26 = (char *)&unk_1EF0D6C30;
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(&a27);
      a26 = &a30;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a26);
      a26 = &a33;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a26);
      if (a41 < 0) {
        operator delete(a36);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v55)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v54);
  goto LABEL_6;
}

void LayerTranslator::addTile(LayerTranslator *this, uint64_t **a2)
{
  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  int v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v35, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    long long v5 = *(_OWORD *)v4;
    v35.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v5;
  }
  uint64_t v32 = 0;
  long long v33 = 0;
  uint64_t v34 = 0;
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v32, (uint64_t *)&v29, *((void *)this + 1));
  if (*((_DWORD *)a2 + 35) == 920)
  {
    int v7 = a2[16];
  }
  else
  {
    unint64_t inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
    int v7 = &CoreML::Specification::_TileLayerParams_default_instance_;
  }
  unsigned int v8 = *((_DWORD *)v7 + 4);
  if ((int)v8 <= 0)
  {
    int v24 = 1;
LABEL_15:
    int v25 = 1;
LABEL_16:
    int v26 = 1;
LABEL_17:
    int v11 = 1;
    int v27 = 1;
    goto LABEL_18;
  }
  if (*((_DWORD *)a2 + 35) == 920)
  {
    unsigned int v9 = a2[16];
  }
  else
  {
    unint64_t inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
    unsigned int v9 = &CoreML::Specification::_TileLayerParams_default_instance_;
  }
  int v24 = *(void *)(v9[3] + 8 * (v8 - 1) + 8);
  if (v8 < 2) {
    goto LABEL_15;
  }
  if (*((_DWORD *)a2 + 35) == 920)
  {
    unint64_t v10 = a2[16];
  }
  else
  {
    unint64_t inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
    unint64_t v10 = &CoreML::Specification::_TileLayerParams_default_instance_;
  }
  int v25 = *(void *)(v10[3] + 8 * (v8 - 2) + 8);
  if (v8 < 3) {
    goto LABEL_16;
  }
  if (*((_DWORD *)a2 + 35) == 920)
  {
    uint64_t v13 = a2[16];
  }
  else
  {
    unint64_t inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
    uint64_t v13 = &CoreML::Specification::_TileLayerParams_default_instance_;
  }
  int v26 = *(void *)(v13[3] + 8 * (v8 - 3) + 8);
  if (v8 < 4) {
    goto LABEL_17;
  }
  if (*((_DWORD *)a2 + 35) == 920)
  {
    unsigned int v14 = a2[16];
  }
  else
  {
    unint64_t inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
    unsigned int v14 = &CoreML::Specification::_TileLayerParams_default_instance_;
  }
  int v27 = *(void *)(v14[3] + 8 * (v8 - 4) + 8);
  BOOL v15 = v8 >= 5;
  unsigned int v16 = v8 - 5;
  if (v15)
  {
    if (*((_DWORD *)a2 + 35) == 920)
    {
      uint64_t v17 = a2[16];
    }
    else
    {
      CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
      uint64_t v17 = &CoreML::Specification::_TileLayerParams_default_instance_;
    }
    int v11 = *(_DWORD *)(v17[3] + 8 * v16 + 8);
  }
  else
  {
    int v11 = 1;
  }
LABEL_18:
  int v28 = v11;
  uint64_t v12 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(&__p, "tile");
  memset(&v19, 0, sizeof(v19));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v19, v29, v30, 0xAAAAAAAAAAAAAAABLL * (((char *)v30 - (char *)v29) >> 3));
  memset(&v18, 0, sizeof(v18));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v18, v32, v33, 0xAAAAAAAAAAAAAAABLL * (((char *)v33 - (char *)v32) >> 3));
  memset(&v37, 0, sizeof(v37));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v37, (long long *)v19.__r_.__value_.__l.__data_, (long long *)v19.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19.__r_.__value_.__l.__size_ - v19.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v36, 0, sizeof(v36));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v36, (long long *)v18.__r_.__value_.__l.__data_, (long long *)v18.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18.__r_.__value_.__l.__size_ - v18.__r_.__value_.__r.__words[0]) >> 3));
  LODWORD(v39.__r_.__value_.__l.__data_) = (***(uint64_t (****)(void))(v12[14] + 8))(*(void *)(v12[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  uint64_t v40 = v22;
  int v41 = v23;
  if (v23) {
    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(&v39, 0, sizeof(v39));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v39, (long long *)v37.__r_.__value_.__l.__data_, (long long *)v37.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v37.__r_.__value_.__l.__size_ - v37.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v38, 0, sizeof(v38));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v38, (long long *)v36.__r_.__value_.__l.__data_, (long long *)v36.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v36.__r_.__value_.__l.__size_ - v36.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  uint64_t v42 = &v38;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
  uint64_t v42 = &v39;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
  if (v41) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v41);
  }
  if (*v12) {
    Espresso::sequential_builder::add_shape_from_kernel();
  }
  v39.__r_.__value_.__r.__words[0] = (std::string::size_type)&v36;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v39);
  v39.__r_.__value_.__r.__words[0] = (std::string::size_type)&v37;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v39);
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  v39.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v39);
  v39.__r_.__value_.__r.__words[0] = (std::string::size_type)&v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v39);
  if (v21 < 0) {
    operator delete(__p);
  }
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v32);
  v39.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v39);
  v39.__r_.__value_.__r.__words[0] = (std::string::size_type)&v32;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v39);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
}

void sub_19EA982FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char **a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char *a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  a15 = &a26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  a26 = &a29;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a26);
  if (a37 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void LayerTranslator::addMinBroadcastable(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  int v4 = (long long *)*((void *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)v4, *((void *)v4 + 1));
  }
  else
  {
    long long v5 = *v4;
    v23.__r_.__value_.__r.__words[2] = *((void *)v4 + 2);
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v5;
  }
  uint64_t v20 = 0;
  char v21 = 0;
  uint64_t v22 = 0;
  uint64_t v17 = 0;
  std::string v18 = 0;
  uint64_t v19 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v20, (uint64_t *)&v17, *((void *)this + 1));
  v13[2] = (void **)897988541;
  int v15 = 0;
  int v16 = 0;
  v13[0] = (void **)22;
  v13[1] = (void **)1065353216;
  char v14 = 1;
  int v6 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
  memset(&v8, 0, sizeof(v8));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v8, v17, v18, 0xAAAAAAAAAAAAAAABLL * (((char *)v18 - (char *)v17) >> 3));
  memset(&v7, 0, sizeof(v7));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v7, v20, v21, 0xAAAAAAAAAAAAAAABLL * (((char *)v21 - (char *)v20) >> 3));
  Espresso::sequential_builder::add<Espresso::elementwise_params>(&v11, v6, (uint64_t)__p, (uint64_t)&v23, (uint64_t)v13, (long long *)v8.__r_.__value_.__l.__data_, (long long *)v8.__r_.__value_.__l.__size_, (long long **)&v7);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  int v24 = &v7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  int v24 = &v8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v20);
  v13[0] = (void **)&v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v13);
  v13[0] = (void **)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v13);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
}

void sub_19EA985C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  a23 = v23 - 112;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  a23 = v23 - 88;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  if (*(char *)(v23 - 41) < 0) {
    operator delete(*(void **)(v23 - 64));
  }
  _Unwind_Resume(a1);
}

void LayerTranslator::addUpperTriangular(LayerTranslator *this, uint64_t **a2)
{
  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  int v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v29, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    long long v5 = *(_OWORD *)v4;
    v29.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v5;
  }
  int v26 = 0;
  int v27 = 0;
  uint64_t v28 = 0;
  uint64_t v23 = 0;
  int v24 = 0;
  uint64_t v25 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v26, (uint64_t *)&v23, *((void *)this + 1));
  int v22 = 0;
  if (*((_DWORD *)a2 + 35) == 1325)
  {
    std::string v7 = a2[16];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    std::string v7 = &CoreML::Specification::_UpperTriangularLayerParams_default_instance_;
  }
  int v8 = *((_DWORD *)v7 + 4);
  int v9 = v8 - 1;
  BOOL v10 = v8 <= 0;
  BOOL v11 = v8 > 0;
  if (v8 <= 0) {
    int v12 = -v8;
  }
  else {
    int v12 = -1;
  }
  if (v10) {
    int v9 = -1;
  }
  BOOL v21 = v11;
  v20[0] = v12;
  v20[1] = v9;
  _OWORD v20[2] = 1;
  uint64_t v13 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "matrix_band_part");
  memset(&v15, 0, sizeof(v15));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v15, (long long *)v23, v24, 0xAAAAAAAAAAAAAAABLL * (((char *)v24 - (char *)v23) >> 3));
  memset(&v14, 0, sizeof(v14));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v14, v26, v27, 0xAAAAAAAAAAAAAAABLL * (((char *)v27 - (char *)v26) >> 3));
  Espresso::sequential_builder::add<Espresso::matrix_band_part_params_t>(&v18, v13, (uint64_t)__p, (uint64_t)&v29, (uint64_t)v20, (long long *)v15.__r_.__value_.__l.__data_, (long long *)v15.__r_.__value_.__l.__size_, (long long **)&v14);
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  uint64_t v30 = &v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
  uint64_t v30 = &v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v26);
  __p[0] = &v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  uint64_t v23 = (void **)&v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v23);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
}

void sub_19EA98820(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  *(void *)(v27 - 40) = v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v27 - 40));
  *(void *)(v27 - 40) = &a12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v27 - 40));
  if (a20 < 0) {
    operator delete(__p);
  }
  std::string __p = &a26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  a26 = v27 - 88;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a26);
  if (*(char *)(v27 - 41) < 0) {
    operator delete(*(void **)(v27 - 64));
  }
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::add<Espresso::matrix_band_part_params_t>(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, long long *a6, long long *a7, long long **a8)
{
  memset(&v13, 0, sizeof(v13));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v13, a6, a7, 0xAAAAAAAAAAAAAAABLL * (((char *)a7 - (char *)a6) >> 3));
  memset(&v12, 0, sizeof(v12));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v12, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a8[1] - (char *)*a8) >> 3));
  LODWORD(v15.__r_.__value_.__l.__data_) = (***(uint64_t (****)(void))(a2[14] + 8))(*(void *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  BOOL v11 = (std::__shared_weak_count *)a1[1];
  uint64_t v16 = *a1;
  char v17 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(&v15, 0, sizeof(v15));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v15, (long long *)v13.__r_.__value_.__l.__data_, (long long *)v13.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13.__r_.__value_.__l.__size_ - v13.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v14, 0, sizeof(v14));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v14, (long long *)v12.__r_.__value_.__l.__data_, (long long *)v12.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12.__r_.__value_.__l.__size_ - v12.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  uint64_t v18 = &v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  uint64_t v18 = &v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (*a2) {
    Espresso::sequential_builder::add_shape_from_kernel();
  }
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
}

void sub_19EA98A88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v16 = *(std::__shared_weak_count **)(v13 + 8);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  *(void *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(void *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void LayerTranslator::addCopy(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  int v4 = (long long *)*((void *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v28, *(const std::string::value_type **)v4, *((void *)v4 + 1));
  }
  else
  {
    long long v5 = *v4;
    v28.__r_.__value_.__r.__words[2] = *((void *)v4 + 2);
    *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v5;
  }
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  int v22 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v25, (uint64_t *)&v22, *((void *)this + 1));
  int v6 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(&__p, "copy");
  int v17 = 0;
  memset(&v16, 0, sizeof(v16));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v16, v22, v23, 0xAAAAAAAAAAAAAAABLL * (((char *)v23 - (char *)v22) >> 3));
  memset(&v15, 0, sizeof(v15));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v15, v25, v26, 0xAAAAAAAAAAAAAAABLL * (((char *)v26 - (char *)v25) >> 3));
  *(void *)&long long v30 = 0;
  long long v29 = 0uLL;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&v29, (long long *)v16.__r_.__value_.__l.__data_, (long long *)v16.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16.__r_.__value_.__l.__size_ - v16.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v45, 0, sizeof(v45));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v45, (long long *)v15.__r_.__value_.__l.__data_, (long long *)v15.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15.__r_.__value_.__l.__size_ - v15.__r_.__value_.__r.__words[0]) >> 3));
  LODWORD(v39) = (***(uint64_t (****)(void))(v6[14] + 8))(*(void *)(v6[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  uint64_t v46 = v20;
  uint64_t v47 = v21;
  if (v21) {
    atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v39 = 0uLL;
  *(void *)&long long v40 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&v39, (long long *)v29, *((long long **)&v29 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v29 + 1) - v29) >> 3));
  long long v33 = 0uLL;
  *(void *)&long long v34 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&v33, (long long *)v45.__r_.__value_.__l.__data_, (long long *)v45.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v45.__r_.__value_.__l.__size_ - v45.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  uint64_t v48 = (void **)&v33;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v48);
  uint64_t v48 = (void **)&v39;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v48);
  if (v47) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v47);
  }
  if (*v6) {
    Espresso::sequential_builder::add_shape_from_kernel();
  }
  *(void *)&long long v39 = &v45;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v39);
  *(void *)&long long v39 = &v29;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v39);
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  *(void *)&long long v39 = &v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v39);
  *(void *)&long long v39 = &v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v39);
  if (v19 < 0) {
    operator delete(__p);
  }
  if (**((unsigned char **)this + 2))
  {
    LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v25);
  }
  else
  {
    std::string v7 = (uint64_t **)*((void *)this + 1);
    uint64_t v8 = std::map<std::string,std::string>::at((uint64_t)v7, v22);
    long long v39 = *(_OWORD *)v8;
    long long v40 = *(_OWORD *)(v8 + 16);
    uint64_t v41 = *(void *)(v8 + 32);
    uint64_t v42 = 0;
    uint64_t v43 = 0;
    uint64_t v44 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v42, *(const void **)(v8 + 40), *(void *)(v8 + 48), (uint64_t)(*(void *)(v8 + 48) - *(void *)(v8 + 40)) >> 2);
    long long v33 = v39;
    long long v34 = v40;
    int v9 = v42;
    uint64_t v35 = v41;
    std::string v36 = 0;
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v36, v42, v43, (v43 - (uint64_t)v42) >> 2);
    long long v29 = v33;
    long long v30 = v34;
    BOOL v10 = v36;
    uint64_t v31 = v35;
    memset(v32, 0, sizeof(v32));
    uint64_t v11 = v37;
    unint64_t v12 = (v37 - (uint64_t)v36) >> 2;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v32, v36, v37, v12);
    EspressoConverter::validateShape((int *)&v29, *((void *)a2 + 14), (uint64_t)v25);
    if (v32[0]) {
      operator delete(v32[0]);
    }
    v45.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
    uint64_t v13 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7, v25, (long long **)&v45);
    long long v14 = v34;
    *(_OWORD *)(v13 + 5CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = v33;
    *(_OWORD *)(v13 + 72) = v14;
    *((void *)v13 + 11) = v35;
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v13 + 96, v10, v11, v12);
    if (v10) {
      operator delete(v10);
    }
    if (v9) {
      operator delete(v9);
    }
  }
  *(void *)&long long v39 = &v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v39);
  *(void *)&long long v39 = &v25;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v39);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
}

void sub_19EA98F38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char **a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,char *a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p)
{
  if (__p)
  {
    operator delete(__p);
    if (!v43)
    {
LABEL_3:
      if (!v42)
      {
LABEL_8:
        a16 = &a24;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
        a24 = &a27;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
        if (a35 < 0) {
          operator delete(a30);
        }
        _Unwind_Resume(a1);
      }
LABEL_7:
      operator delete(v42);
      goto LABEL_8;
    }
  }
  else if (!v43)
  {
    goto LABEL_3;
  }
  operator delete(v43);
  if (!v42) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

void LayerTranslator::addSoftmaxND(LayerTranslator *this, uint64_t **a2)
{
  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  int v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v22, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    long long v5 = *(_OWORD *)v4;
    v22.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v5;
  }
  char v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  std::string v16 = 0;
  int v17 = 0;
  uint64_t v18 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v19, (uint64_t *)&v16, *((void *)this + 1));
  if (*((_DWORD *)a2 + 35) == 950)
  {
    std::string v7 = a2[16];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    std::string v7 = &CoreML::Specification::_SoftmaxNDLayerParams_default_instance_;
  }
  int v15 = v7[2];
  uint64_t v8 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(&__p, "softmax_nd");
  memset(&v10, 0, sizeof(v10));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v10, v16, v17, 0xAAAAAAAAAAAAAAABLL * (((char *)v17 - (char *)v16) >> 3));
  memset(&v9, 0, sizeof(v9));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v9, v19, v20, 0xAAAAAAAAAAAAAAABLL * (((char *)v20 - (char *)v19) >> 3));
  memset(&v24, 0, sizeof(v24));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v24, (long long *)v10.__r_.__value_.__l.__data_, (long long *)v10.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10.__r_.__value_.__l.__size_ - v10.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v23, 0, sizeof(v23));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v23, (long long *)v9.__r_.__value_.__l.__data_, (long long *)v9.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9.__r_.__value_.__l.__size_ - v9.__r_.__value_.__r.__words[0]) >> 3));
  LODWORD(v26.__r_.__value_.__l.__data_) = (***(uint64_t (****)(void))(v8[14] + 8))(*(void *)(v8[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  uint64_t v27 = v13;
  std::string v28 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(&v26, 0, sizeof(v26));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v26, (long long *)v24.__r_.__value_.__l.__data_, (long long *)v24.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24.__r_.__value_.__l.__size_ - v24.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v25, 0, sizeof(v25));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v25, (long long *)v23.__r_.__value_.__l.__data_, (long long *)v23.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23.__r_.__value_.__l.__size_ - v23.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  long long v29 = &v25;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  long long v29 = &v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  if (*v8) {
    Espresso::sequential_builder::add_shape_from_kernel();
  }
  v26.__r_.__value_.__r.__words[0] = (std::string::size_type)&v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
  v26.__r_.__value_.__r.__words[0] = (std::string::size_type)&v24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  v26.__r_.__value_.__r.__words[0] = (std::string::size_type)&v9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
  v26.__r_.__value_.__r.__words[0] = (std::string::size_type)&v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
  if (v12 < 0) {
    operator delete(__p);
  }
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v19);
  v26.__r_.__value_.__r.__words[0] = (std::string::size_type)&v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
  v26.__r_.__value_.__r.__words[0] = (std::string::size_type)&v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
}

void sub_19EA993A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char **__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,std::__shared_weak_count *a22,uint64_t a23,char *a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36)
{
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }
  *(void *)(v36 - 5CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = &a36;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v36 - 56));
  *(void *)(v36 - 5CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = v36 - 144;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v36 - 56));
  *(void *)(v36 - 5CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = &a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v36 - 56));
  *(void *)(v36 - 5CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = &a12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v36 - 56));
  if (a20 < 0) {
    operator delete(__p);
  }
  std::string __p = &a24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  a24 = &a27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  if (a35 < 0) {
    operator delete(a30);
  }
  _Unwind_Resume(a1);
}

void LayerTranslator::addMatrixBandPart(LayerTranslator *this, uint64_t **a2)
{
  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  int v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v26, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    long long v5 = *(_OWORD *)v4;
    v26.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v5;
  }
  std::string v23 = 0;
  std::string v24 = 0;
  uint64_t v25 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v23, (uint64_t *)&v20, *((void *)this + 1));
  int v19 = 0;
  _DWORD v17[2] = 1;
  char v18 = 0;
  if (*((_DWORD *)a2 + 35) == 1315)
  {
    std::string v7 = a2[16];
    v17[0] = v7[2];
  }
  else
  {
    unint64_t inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    int v9 = *((_DWORD *)a2 + 35);
    v17[0] = qword_1EB4E13A0;
    if (v9 == 1315)
    {
      std::string v7 = a2[16];
    }
    else
    {
      CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
      std::string v7 = &CoreML::Specification::_MatrixBandPartLayerParams_default_instance_;
    }
  }
  v17[1] = v7[3];
  std::string v10 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "matrix_band_part");
  memset(&v12, 0, sizeof(v12));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v12, (long long *)v20, v21, 0xAAAAAAAAAAAAAAABLL * (((char *)v21 - (char *)v20) >> 3));
  memset(&v11, 0, sizeof(v11));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v11, v23, v24, 0xAAAAAAAAAAAAAAABLL * (((char *)v24 - (char *)v23) >> 3));
  Espresso::sequential_builder::add<Espresso::matrix_band_part_params_t>(&v15, v10, (uint64_t)__p, (uint64_t)&v26, (uint64_t)v17, (long long *)v12.__r_.__value_.__l.__data_, (long long *)v12.__r_.__value_.__l.__size_, (long long **)&v11);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  uint64_t v27 = &v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
  uint64_t v27 = &v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v23);
  __p[0] = &v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  uint64_t v20 = (void **)&v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v20);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
}

void sub_19EA996A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  *(void *)(v27 - 40) = v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v27 - 40));
  *(void *)(v27 - 40) = &a12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v27 - 40));
  if (a20 < 0) {
    operator delete(__p);
  }
  std::string __p = &a26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  a26 = v27 - 88;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a26);
  if (*(char *)(v27 - 41) < 0) {
    operator delete(*(void **)(v27 - 64));
  }
  _Unwind_Resume(a1);
}

void LayerTranslator::addAdd(LayerTranslator *this, uint64_t **a2)
{
  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  int v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v63, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    long long v5 = *(_OWORD *)v4;
    v63.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v5;
  }
  char v60 = 0;
  uint64_t v61 = 0;
  uint64_t v62 = 0;
  std::string v57 = 0;
  std::string v58 = 0;
  uint64_t v59 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v60, (uint64_t *)&v57, *((void *)this + 1));
  EspressoConverter::splitElementwiseLayer((uint64_t)&v55, &v57, (uint64_t)v60);
  if (*((_DWORD *)a2 + 35) == 230)
  {
    std::string v7 = a2[16];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    std::string v7 = &CoreML::Specification::_AddLayerParams_default_instance_;
  }
  long long v39 = (const CoreML::Specification::NeuralNetworkLayer *)a2;
  int v51 = &unk_1EF0D00B8;
  uint64_t v52 = 0;
  int v54 = 0;
  uint64_t v8 = v7[1];
  if (v8) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((unint64_t *)&v52, v8 & 0xFFFFFFFFFFFFFFFELL);
  }
  int v53 = *((_DWORD *)v7 + 4);
  uint64_t v9 = v55;
  if (v56 != v55)
  {
    unint64_t v10 = 0;
    uint64_t v11 = 71;
    do
    {
      *(void *)&long long v70 = 897988541;
      BYTE8(v70) = 0;
      *(void *)((char *)&v72 + 4) = 0;
      *(void *)&long long v69 = 0;
      *((void *)&v69 + 1) = 1065353216;
      long long v65 = 0uLL;
      *(void *)&long long v66 = 0;
      uint64_t v73 = 0;
      uint64_t v74 = 0;
      unint64_t v75 = 0;
      if ((char *)v58 - (char *)v57 == 24)
      {
        DWORD2(v69) = v53;
        *((void *)&v65 + 1) = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v65, v57);
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v73, v60, v61, 0xAAAAAAAAAAAAAAABLL * (((char *)v61 - (char *)v60) >> 3));
      }
      else
      {
        std::string v12 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v65, (long long *)(v9 + v11 - 71));
        uint64_t v13 = v12;
        *((void *)&v65 + 1) = v12;
        char v14 = (long long *)(v55 + v11 - 47);
        if ((unint64_t)v12 >= (unint64_t)v66)
        {
          uint64_t v16 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v65, v14);
        }
        else
        {
          if (*(char *)(v55 + v11 - 24) < 0)
          {
            std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)v14, *(void *)(v55 + v11 - 39));
          }
          else
          {
            long long v15 = *v14;
            v12->__r_.__value_.__r.__words[2] = *(void *)(v55 + v11 - 31);
            *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v15;
          }
          uint64_t v16 = (uint64_t)&v13[1];
        }
        *((void *)&v65 + 1) = v16;
        int v17 = (long long *)(v55 + v11 - 23);
        char v18 = v74;
        if ((unint64_t)v74 >= v75)
        {
          uint64_t v20 = (long long *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v73, v17);
        }
        else
        {
          if (*(char *)(v55 + v11) < 0)
          {
            std::string::__init_copy_ctor_external(v74, *(const std::string::value_type **)v17, *(void *)(v55 + v11 - 15));
          }
          else
          {
            long long v19 = *v17;
            v74->__r_.__value_.__r.__words[2] = *(void *)(v55 + v11 - 7);
            *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v19;
          }
          uint64_t v20 = (long long *)&v18[1];
        }
        uint64_t v74 = (std::string *)v20;
      }
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v58 - (char *)v57) >> 3) > 2)
      {
        std::string v23 = *(void **)this;
        std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
        std::to_string(&v42, v10);
        if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string v24 = &v63;
        }
        else {
          std::string v24 = (std::string *)v63.__r_.__value_.__r.__words[0];
        }
        if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v63.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v63.__r_.__value_.__l.__size_;
        }
        uint64_t v26 = std::string::insert(&v42, 0, (const std::string::value_type *)v24, size);
        long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
        std::string::size_type v44 = v26->__r_.__value_.__r.__words[2];
        *(_OWORD *)uint64_t v43 = v27;
        v26->__r_.__value_.__l.__size_ = 0;
        v26->__r_.__value_.__r.__words[2] = 0;
        v26->__r_.__value_.__r.__words[0] = 0;
        memset(&v41, 0, sizeof(v41));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v41, (long long *)v65, *((long long **)&v65 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v65 + 1) - v65) >> 3));
        memset(&v40, 0, sizeof(v40));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v40, (long long *)v73, (long long *)v74, 0xAAAAAAAAAAAAAAABLL * (((char *)v74 - (char *)v73) >> 3));
        Espresso::sequential_builder::add<Espresso::elementwise_params>(&v45, v23, (uint64_t)__p, (uint64_t)v43, (uint64_t)&v69, (long long *)v41.__r_.__value_.__l.__data_, (long long *)v41.__r_.__value_.__l.__size_, (long long **)&v40);
        uint64_t v64 = &v40;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v64);
        uint64_t v64 = &v41;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v64);
        if (SHIBYTE(v44) < 0) {
          operator delete(v43[0]);
        }
        if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v42.__r_.__value_.__l.__data_);
        }
        if (v50 < 0) {
          operator delete(__p[0]);
        }
        uint64_t v22 = v46;
        if (!v46) {
          goto LABEL_31;
        }
      }
      else
      {
        uint64_t v21 = *(void **)this;
        std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
        memset(&v48, 0, sizeof(v48));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v48, (long long *)v65, *((long long **)&v65 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v65 + 1) - v65) >> 3));
        memset(&v47, 0, sizeof(v47));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v47, (long long *)v73, (long long *)v74, 0xAAAAAAAAAAAAAAABLL * (((char *)v74 - (char *)v73) >> 3));
        Espresso::sequential_builder::add<Espresso::elementwise_params>((uint64_t *)v43, v21, (uint64_t)__p, (uint64_t)&v63, (uint64_t)&v69, (long long *)v48.__r_.__value_.__l.__data_, (long long *)v48.__r_.__value_.__l.__size_, (long long **)&v47);
        v42.__r_.__value_.__r.__words[0] = (std::string::size_type)&v47;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
        v42.__r_.__value_.__r.__words[0] = (std::string::size_type)&v48;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
        if (v50 < 0) {
          operator delete(__p[0]);
        }
        uint64_t v22 = (std::__shared_weak_count *)v43[1];
        if (!v43[1]) {
          goto LABEL_31;
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v22);
LABEL_31:
      __p[0] = &v73;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      uint64_t v73 = (void **)&v65;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v73);
      ++v10;
      uint64_t v9 = v55;
      v11 += 72;
    }
    while (v10 < 0x8E38E38E38E38E39 * ((v56 - v55) >> 3));
  }
  if (**((unsigned char **)this + 2))
  {
    LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v60);
  }
  else
  {
    std::string v28 = (uint64_t **)*((void *)this + 1);
    uint64_t v73 = 0;
    uint64_t v74 = 0;
    unint64_t v75 = 0;
    long long v30 = v57;
    long long v29 = v58;
    if (v57 == v58)
    {
      long long v33 = 0;
      long long v34 = 0;
    }
    else
    {
      do
      {
        uint64_t v31 = (long long *)std::map<std::string,std::string>::at((uint64_t)v28, v30);
        uint64_t v32 = v74;
        if ((unint64_t)v74 >= v75)
        {
          long long v33 = (long long *)std::vector<Espresso::layer_shape>::__push_back_slow_path<Espresso::layer_shape const&>((uint64_t *)&v73, v31);
        }
        else
        {
          std::vector<Espresso::layer_shape>::__construct_one_at_end[abi:ne180100]<Espresso::layer_shape const&>((uint64_t)&v73, v31);
          long long v33 = (long long *)&v32[2].__r_.__value_.__r.__words[2];
        }
        uint64_t v74 = (std::string *)v33;
        long long v30 = (long long *)((char *)v30 + 24);
      }
      while (v30 != v29);
      long long v34 = v73;
    }
    EspressoConverter::computeMaxShape((uint64_t)&v69, (uint64_t)v34, (uint64_t)v33);
    long long v65 = v69;
    long long v66 = v70;
    uint64_t v35 = (char *)v72;
    uint64_t v67 = v71;
    memset(v68, 0, 24);
    uint64_t v36 = *((void *)&v72 + 1);
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v68, (const void *)v72, *((uint64_t *)&v72 + 1), (uint64_t)(*((void *)&v72 + 1) - v72) >> 2);
    EspressoConverter::validateShape((int *)&v65, *((void *)v39 + 14), (uint64_t)v60);
    if (v68[0]) {
      operator delete(v68[0]);
    }
    __p[0] = v60;
    uint64_t v37 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v28, v60, (long long **)__p);
    long long v38 = v70;
    *(_OWORD *)(v37 + 5CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = v69;
    *(_OWORD *)(v37 + 72) = v38;
    *((void *)v37 + 11) = v71;
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v37 + 96, v35, v36, (v36 - (uint64_t)v35) >> 2);
    if (v35) {
      operator delete(v35);
    }
    *(void *)&long long v69 = &v73;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v69);
  }
  int v51 = &unk_1EF0D00B8;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(&v52);
  *(void *)&long long v69 = &v55;
  std::vector<std::pair<std::pair<std::string,std::string>,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v69);
  *(void *)&long long v69 = &v57;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v69);
  *(void *)&long long v69 = &v60;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v69);
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v63.__r_.__value_.__l.__data_);
  }
}

void sub_19EA99D90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  if (v59) {
    operator delete(v59);
  }
  *(void *)(v60 - 200) = v60 - 136;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)(v60 - 200));
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(a10);
  *(void *)(v60 - 200) = &a38;
  std::vector<std::pair<std::pair<std::string,std::string>,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v60 - 200));
  *(void *)(v60 - 200) = &a41;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v60 - 200));
  *(void *)(v60 - 200) = &a44;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v60 - 200));
  if (a52 < 0) {
    operator delete(a47);
  }
  _Unwind_Resume(a1);
}

void LayerTranslator::addTranspose(LayerTranslator *this, uint64_t **a2)
{
  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  int v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v32, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    long long v5 = *(_OWORD *)v4;
    v32.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v5;
  }
  long long v29 = 0;
  long long v30 = 0;
  uint64_t v31 = 0;
  uint64_t v26 = 0;
  long long v27 = 0;
  uint64_t v28 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v29, (uint64_t *)&v26, *((void *)this + 1));
  if (*((_DWORD *)a2 + 35) == 985)
  {
    std::string v7 = a2[16];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    std::string v7 = &CoreML::Specification::_TransposeLayerParams_default_instance_;
  }
  int v8 = *((_DWORD *)v7 + 4);
  unint64_t inited = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)operator new(0x14uLL);
  unint64_t v10 = inited;
  uint64_t v11 = 0;
  int v12 = 5 - v8;
  do
  {
    *(_DWORD *)((char *)inited + v11) = 0;
    v11 += 4;
  }
  while (v11 != 20);
  for (uint64_t i = 0; i != 5; ++i)
  {
    if (i >= v12)
    {
      if (*((_DWORD *)a2 + 35) == 985)
      {
        long long v15 = a2[16];
      }
      else
      {
        unint64_t inited = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(inited);
        long long v15 = &CoreML::Specification::_TransposeLayerParams_default_instance_;
      }
      int v14 = v12 + *(void *)(v15[3] + 8 - 8 * v12 + 8 * i);
    }
    else
    {
      int v14 = i;
    }
    *((_DWORD *)v10 + i) = v14;
  }
  int32x2_t v16 = vrev64_s32(vsub_s32((int32x2_t)0x400000004, *(int32x2_t *)((char *)v10 + 4)));
  v24[0] = vrev64_s32(vsub_s32((int32x2_t)0x400000004, *(int32x2_t *)((char *)v10 + 12)));
  v24[1] = v16;
  int v25 = 4 - *(_DWORD *)v10;
  int v17 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "transpose");
  memset(&v19, 0, sizeof(v19));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v19, (long long *)v26, v27, 0xAAAAAAAAAAAAAAABLL * (((char *)v27 - (char *)v26) >> 3));
  memset(&v18, 0, sizeof(v18));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v18, v29, v30, 0xAAAAAAAAAAAAAAABLL * (((char *)v30 - (char *)v29) >> 3));
  Espresso::sequential_builder::add<Espresso::transpose_params_t>(&v22, v17, (uint64_t)__p, (uint64_t)&v32, (uint64_t)v24, (long long *)v19.__r_.__value_.__l.__data_, (long long *)v19.__r_.__value_.__l.__size_, (long long **)&v18);
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  long long v33 = &v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
  long long v33 = &v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
  if (v21 < 0) {
    operator delete(__p[0]);
  }
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v29);
  operator delete(v10);
  __p[0] = &v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  uint64_t v26 = (void **)&v29;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v26);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
}

void sub_19EA9A1C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char **__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char *a26,uint64_t a27,uint64_t a28,char a29)
{
  std::string __p = &a26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  a26 = &a29;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a26);
  if (*(char *)(v29 - 89) < 0) {
    operator delete(*(void **)(v29 - 112));
  }
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::add<Espresso::transpose_params_t>(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, long long *a6, long long *a7, long long **a8)
{
  memset(&v13, 0, sizeof(v13));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v13, a6, a7, 0xAAAAAAAAAAAAAAABLL * (((char *)a7 - (char *)a6) >> 3));
  memset(&v12, 0, sizeof(v12));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v12, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a8[1] - (char *)*a8) >> 3));
  LODWORD(v15.__r_.__value_.__l.__data_) = (***(uint64_t (****)(void))(a2[14] + 8))(*(void *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  uint64_t v11 = (std::__shared_weak_count *)a1[1];
  uint64_t v16 = *a1;
  int v17 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(&v15, 0, sizeof(v15));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v15, (long long *)v13.__r_.__value_.__l.__data_, (long long *)v13.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13.__r_.__value_.__l.__size_ - v13.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v14, 0, sizeof(v14));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v14, (long long *)v12.__r_.__value_.__l.__data_, (long long *)v12.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12.__r_.__value_.__l.__size_ - v12.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  std::string v18 = &v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  std::string v18 = &v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (*a2) {
    Espresso::sequential_builder::add_shape_from_kernel();
  }
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
}

void sub_19EA9A448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v16 = *(std::__shared_weak_count **)(v13 + 8);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  *(void *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(void *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void EspressoConverter::setRecurrentWeightBlob(uint64_t a1, uint64_t *a2, uint64_t a3, unint64_t a4, const void **a5, const void **a6)
{
  int v9 = a3;
  uint64_t v12 = *(void *)(a1 + 40);
  if (*(char *)(v12 + 23) < 0) {
    uint64_t v13 = *(void *)(v12 + 8);
  }
  else {
    uint64_t v13 = *(unsigned __int8 *)(v12 + 23);
  }
  uint64_t v14 = *(void *)(a1 + 48);
  uint64_t v15 = *(unsigned __int8 *)(v14 + 23);
  if (*(char *)(v14 + 23) < 0) {
    uint64_t v16 = *(void *)(v14 + 8);
  }
  else {
    uint64_t v16 = *(unsigned __int8 *)(v14 + 23);
  }
  int v17 = *(_DWORD *)(a1 + 16);
  uint64_t v18 = *(void *)(a1 + 56);
  if (*(char *)(v18 + 23) < 0) {
    uint64_t v19 = *(void *)(v18 + 8);
  }
  else {
    uint64_t v19 = *(unsigned __int8 *)(v18 + 23);
  }
  if (v17 <= 0) {
    int v20 = 1;
  }
  else {
    int v20 = 2;
  }
  if (v13) {
    int v21 = v20;
  }
  else {
    int v21 = v17 > 0;
  }
  if (v16) {
    ++v21;
  }
  if (v19) {
    ++v21;
  }
  if (v17 > 0 || v21 != 1) {
    goto LABEL_74;
  }
  if ((*(unsigned char *)(v12 + 23) & 0x80) != 0)
  {
    if (*(void *)(v12 + 8)) {
      goto LABEL_74;
    }
  }
  else if (*(unsigned char *)(v12 + 23))
  {
    goto LABEL_74;
  }
  if ((v15 & 0x80) != 0) {
    uint64_t v15 = *(void *)(v14 + 8);
  }
  if ((uint64_t *)a1 != &CoreML::Specification::_WeightParams_default_instance_)
  {
    if (v15)
    {
      uint64_t v22 = *(void *)(a1 + 64);
      if (v22)
      {
        uint64_t v23 = a4 * a3;
        unint64_t v24 = *(void *)(v22 + 16);
        int WeightParamSizeInBytes = EspressoConverter::getWeightParamSizeInBytes((uint64_t *)a1);
        if (!CoreML::hasSufficientBytesInQuantizedWeightParam((uint64_t *)a1, v23))
        {
          exceptiounint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void **)&v52.__r_.__value_.__l.__data_, a5, " layer : insufficient units in quantized weight byte stream");
          std::runtime_error::runtime_error(exception, &v52);
          __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        uint64_t v26 = WeightParamSizeInBytes;
        CoreML::copySpecArrayStringToVector(&v52, (char *)v14, WeightParamSizeInBytes);
        if (*((char *)a6 + 23) >= 0) {
          size_t v27 = *((unsigned __int8 *)a6 + 23);
        }
        else {
          size_t v27 = (size_t)a6[1];
        }
        uint64_t v28 = &v49;
        std::string::basic_string[abi:ne180100]((uint64_t)&v49, v27 + 2);
        if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v28 = (std::string *)v49.__r_.__value_.__r.__words[0];
        }
        if (v27)
        {
          if (*((char *)a6 + 23) >= 0) {
            uint64_t v29 = a6;
          }
          else {
            uint64_t v29 = *a6;
          }
          memmove(v28, v29, v27);
        }
        strcpy((char *)v28 + v27, "_U");
        std::to_string(&v48, v24);
        if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v30 = &v48;
        }
        else {
          long long v30 = (std::string *)v48.__r_.__value_.__r.__words[0];
        }
        if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v48.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v48.__r_.__value_.__l.__size_;
        }
        std::string v32 = std::string::append(&v49, (const std::string::value_type *)v30, size);
        long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
        std::string::size_type v51 = v32->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v33;
        v32->__r_.__value_.__l.__size_ = 0;
        v32->__r_.__value_.__r.__words[2] = 0;
        v32->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v48.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v49.__r_.__value_.__l.__data_);
        }
        uint64_t v34 = *a2;
        *(_OWORD *)&v49.__r_.__value_.__l.__data_ = 0uLL;
        (*(void (**)(uint64_t, std::string *, void **, std::string::size_type, uint64_t, void))(*(void *)v34 + 168))(v34, &v49, __p, v52.__r_.__value_.__r.__words[0], v26, 0);
        if (v49.__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v49.__r_.__value_.__l.__size_);
        }
        uint64_t v35 = *a2;
        uint64_t v36 = (std::__shared_weak_count *)a2[1];
        v47[0] = v35;
        v47[1] = (uint64_t)v36;
        if (v36) {
          atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (*((char *)a6 + 23) >= 0) {
          size_t v37 = *((unsigned __int8 *)a6 + 23);
        }
        else {
          size_t v37 = (size_t)a6[1];
        }
        long long v38 = &v49;
        std::string::basic_string[abi:ne180100]((uint64_t)&v49, v37 + 1);
        if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          long long v38 = (std::string *)v49.__r_.__value_.__r.__words[0];
        }
        if (v37)
        {
          if (*((char *)a6 + 23) >= 0) {
            long long v39 = a6;
          }
          else {
            long long v39 = *a6;
          }
          memmove(v38, v39, v37);
        }
        *(_WORD *)((char *)&v38->__r_.__value_.__l.__data_ + v37) = 95;
        CoreML::setQuantizationParams((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)a1, v47, a4, (const void **)&v49.__r_.__value_.__l.__data_);
        if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v49.__r_.__value_.__l.__data_);
        }
        if (v36) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v36);
        }
        if (SHIBYTE(v51) < 0) {
          operator delete(__p[0]);
        }
        if (v52.__r_.__value_.__r.__words[0])
        {
          v52.__r_.__value_.__l.__size_ = v52.__r_.__value_.__r.__words[0];
          operator delete(v52.__r_.__value_.__l.__data_);
        }
        return;
      }
    }
  }
LABEL_74:
  unint64_t v40 = a4 * a3;
  if (a4 * a3 != (int)EspressoConverter::getWeightParamSize(a1))
  {
    uint64_t v45 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void **)&v52.__r_.__value_.__l.__data_, a5, " layer: weight size incorrect");
    std::runtime_error::runtime_error(v45, &v52);
    __cxa_throw(v45, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v52, v9, a4, 1, 1);
  std::string::size_type v41 = v52.__r_.__value_.__r.__words[0];
  EspressoConverter::copyWeightsToDataBlob(*(EspressoConverter **)(v52.__r_.__value_.__r.__words[0] + 24), (void *)a1, 4 * v40);
  uint64_t v42 = 0;
  uint64_t v43 = *a2;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v44 = *(int *)(v41 + 8);
  do
  {
    v44 *= *(int *)(v41 + 12 + v42);
    v42 += 4;
  }
  while (v42 != 12);
  (*(void (**)(uint64_t, void **, const void **, void, uint64_t, void))(*(void *)v43 + 168))(v43, __p, a6, *(void *)(v41 + 24), 4 * v44, 0);
  if (__p[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
  }
  if (v52.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v52.__r_.__value_.__l.__size_);
  }
}

void sub_19EA9A974(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a34 < 0)
  {
    operator delete(__p);
    if ((v35 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v35)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v34);
  goto LABEL_6;
}

void EspressoConverter::setFourRecurrentWeightBlobs(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6, unint64_t a7, const void **a8, const void **a9)
{
  uint64_t v16 = a1[5];
  if (*(char *)(v16 + 23) < 0) {
    uint64_t v17 = *(void *)(v16 + 8);
  }
  else {
    uint64_t v17 = *(unsigned __int8 *)(v16 + 23);
  }
  uint64_t v18 = a1[6];
  uint64_t v19 = *(unsigned __int8 *)(v18 + 23);
  if (*(char *)(v18 + 23) < 0) {
    uint64_t v20 = *(void *)(v18 + 8);
  }
  else {
    uint64_t v20 = *(unsigned __int8 *)(v18 + 23);
  }
  int v21 = *((_DWORD *)a1 + 4);
  uint64_t v22 = a1[7];
  uint64_t v23 = *(unsigned __int8 *)(v22 + 23);
  if (*(char *)(v22 + 23) < 0) {
    uint64_t v24 = *(void *)(v22 + 8);
  }
  else {
    uint64_t v24 = *(unsigned __int8 *)(v22 + 23);
  }
  if (v21 <= 0) {
    int v25 = 1;
  }
  else {
    int v25 = 2;
  }
  if (v17) {
    unsigned int v26 = v25;
  }
  else {
    unsigned int v26 = v21 > 0;
  }
  if (v20) {
    ++v26;
  }
  if (v24) {
    unsigned int v27 = v26 + 1;
  }
  else {
    unsigned int v27 = v26;
  }
  if (v27 > 1)
  {
    int v28 = 4;
    goto LABEL_49;
  }
  if (v27) {
    int v28 = 0;
  }
  else {
    int v28 = 5;
  }
  if (v21 <= 0 && v27)
  {
    if ((*(unsigned char *)(v16 + 23) & 0x80) != 0)
    {
      if (*(void *)(v16 + 8)) {
        goto LABEL_30;
      }
    }
    else if (*(unsigned char *)(v16 + 23))
    {
LABEL_30:
      int v28 = 1;
      goto LABEL_49;
    }
    if ((v19 & 0x80) != 0) {
      uint64_t v19 = *(void *)(v18 + 8);
    }
    uint64_t v29 = a1[8];
    if (a1 != &CoreML::Specification::_WeightParams_default_instance_ && v19 && v29)
    {
      int v28 = 2;
    }
    else
    {
      if ((v23 & 0x80) != 0) {
        uint64_t v23 = *(void *)(v22 + 8);
      }
      if (v29) {
        BOOL v30 = v23 == 0;
      }
      else {
        BOOL v30 = 1;
      }
      if (v30 || a1 == &CoreML::Specification::_WeightParams_default_instance_) {
        int v28 = 5;
      }
      else {
        int v28 = 3;
      }
    }
  }
LABEL_49:
  uint64_t v32 = a2[5];
  if (*(char *)(v32 + 23) < 0) {
    uint64_t v33 = *(void *)(v32 + 8);
  }
  else {
    uint64_t v33 = *(unsigned __int8 *)(v32 + 23);
  }
  uint64_t v34 = a2[6];
  uint64_t v35 = *(unsigned __int8 *)(v34 + 23);
  if (*(char *)(v34 + 23) < 0) {
    uint64_t v36 = *(void *)(v34 + 8);
  }
  else {
    uint64_t v36 = *(unsigned __int8 *)(v34 + 23);
  }
  int v37 = *((_DWORD *)a2 + 4);
  uint64_t v38 = a2[7];
  uint64_t v39 = *(unsigned __int8 *)(v38 + 23);
  if (*(char *)(v38 + 23) < 0) {
    uint64_t v40 = *(void *)(v38 + 8);
  }
  else {
    uint64_t v40 = *(unsigned __int8 *)(v38 + 23);
  }
  if (v37 <= 0) {
    int v41 = 1;
  }
  else {
    int v41 = 2;
  }
  if (v33) {
    unsigned int v42 = v41;
  }
  else {
    unsigned int v42 = v37 > 0;
  }
  if (v36) {
    ++v42;
  }
  if (v40) {
    unsigned int v43 = v42 + 1;
  }
  else {
    unsigned int v43 = v42;
  }
  if (v43 > 1)
  {
    int v44 = 4;
    goto LABEL_97;
  }
  if (v43) {
    int v44 = 0;
  }
  else {
    int v44 = 5;
  }
  if (v37 <= 0 && v43)
  {
    if ((*(unsigned char *)(v32 + 23) & 0x80) != 0)
    {
      if (*(void *)(v32 + 8)) {
        goto LABEL_78;
      }
    }
    else if (*(unsigned char *)(v32 + 23))
    {
LABEL_78:
      int v44 = 1;
      goto LABEL_97;
    }
    if ((v35 & 0x80) != 0) {
      uint64_t v35 = *(void *)(v34 + 8);
    }
    uint64_t v45 = a2[8];
    if (a2 != &CoreML::Specification::_WeightParams_default_instance_ && v35 && v45)
    {
      int v44 = 2;
    }
    else
    {
      if ((v39 & 0x80) != 0) {
        uint64_t v39 = *(void *)(v38 + 8);
      }
      if (v45) {
        BOOL v46 = v39 == 0;
      }
      else {
        BOOL v46 = 1;
      }
      if (v46 || a2 == &CoreML::Specification::_WeightParams_default_instance_) {
        int v44 = 5;
      }
      else {
        int v44 = 3;
      }
    }
  }
LABEL_97:
  if (v28 != v44) {
    goto LABEL_343;
  }
  uint64_t v48 = a3[5];
  if (*(char *)(v48 + 23) < 0) {
    uint64_t v49 = *(void *)(v48 + 8);
  }
  else {
    uint64_t v49 = *(unsigned __int8 *)(v48 + 23);
  }
  uint64_t v50 = a3[6];
  uint64_t v51 = *(unsigned __int8 *)(v50 + 23);
  if (*(char *)(v50 + 23) < 0) {
    uint64_t v52 = *(void *)(v50 + 8);
  }
  else {
    uint64_t v52 = *(unsigned __int8 *)(v50 + 23);
  }
  int v53 = *((_DWORD *)a3 + 4);
  uint64_t v54 = a3[7];
  uint64_t v55 = *(unsigned __int8 *)(v54 + 23);
  if (*(char *)(v54 + 23) < 0) {
    uint64_t v56 = *(void *)(v54 + 8);
  }
  else {
    uint64_t v56 = *(unsigned __int8 *)(v54 + 23);
  }
  if (v53 <= 0) {
    int v57 = 1;
  }
  else {
    int v57 = 2;
  }
  if (v49) {
    unsigned int v58 = v57;
  }
  else {
    unsigned int v58 = v53 > 0;
  }
  if (v52) {
    ++v58;
  }
  if (v56) {
    unsigned int v59 = v58 + 1;
  }
  else {
    unsigned int v59 = v58;
  }
  if (v59 > 1)
  {
    int v60 = 4;
    goto LABEL_146;
  }
  if (v59) {
    int v60 = 0;
  }
  else {
    int v60 = 5;
  }
  if (v53 <= 0 && v59)
  {
    if ((*(unsigned char *)(v48 + 23) & 0x80) != 0)
    {
      if (*(void *)(v48 + 8)) {
        goto LABEL_127;
      }
    }
    else if (*(unsigned char *)(v48 + 23))
    {
LABEL_127:
      int v60 = 1;
      goto LABEL_146;
    }
    if ((v51 & 0x80) != 0) {
      uint64_t v51 = *(void *)(v50 + 8);
    }
    uint64_t v61 = a3[8];
    if (a3 != &CoreML::Specification::_WeightParams_default_instance_ && v51 && v61)
    {
      int v60 = 2;
    }
    else
    {
      if ((v55 & 0x80) != 0) {
        uint64_t v55 = *(void *)(v54 + 8);
      }
      if (v61) {
        BOOL v62 = v55 == 0;
      }
      else {
        BOOL v62 = 1;
      }
      if (v62 || a3 == &CoreML::Specification::_WeightParams_default_instance_) {
        int v60 = 5;
      }
      else {
        int v60 = 3;
      }
    }
  }
LABEL_146:
  if (v28 != v60) {
    goto LABEL_343;
  }
  uint64_t v64 = a4[5];
  if (*(char *)(v64 + 23) < 0) {
    uint64_t v65 = *(void *)(v64 + 8);
  }
  else {
    uint64_t v65 = *(unsigned __int8 *)(v64 + 23);
  }
  uint64_t v66 = a4[6];
  uint64_t v67 = *(unsigned __int8 *)(v66 + 23);
  if (*(char *)(v66 + 23) < 0) {
    uint64_t v68 = *(void *)(v66 + 8);
  }
  else {
    uint64_t v68 = *(unsigned __int8 *)(v66 + 23);
  }
  int v69 = *((_DWORD *)a4 + 4);
  uint64_t v70 = a4[7];
  uint64_t v71 = *(unsigned __int8 *)(v70 + 23);
  if (*(char *)(v70 + 23) < 0) {
    uint64_t v72 = *(void *)(v70 + 8);
  }
  else {
    uint64_t v72 = *(unsigned __int8 *)(v70 + 23);
  }
  if (v69 <= 0) {
    int v73 = 1;
  }
  else {
    int v73 = 2;
  }
  if (v65) {
    unsigned int v74 = v73;
  }
  else {
    unsigned int v74 = v69 > 0;
  }
  if (v68) {
    ++v74;
  }
  if (v72) {
    unsigned int v75 = v74 + 1;
  }
  else {
    unsigned int v75 = v74;
  }
  if (v75 > 1)
  {
    int v76 = 4;
    goto LABEL_195;
  }
  if (v75) {
    int v76 = 0;
  }
  else {
    int v76 = 5;
  }
  if (v69 <= 0 && v75)
  {
    if ((*(unsigned char *)(v64 + 23) & 0x80) != 0)
    {
      if (*(void *)(v64 + 8)) {
        goto LABEL_176;
      }
    }
    else if (*(unsigned char *)(v64 + 23))
    {
LABEL_176:
      int v76 = 1;
      goto LABEL_195;
    }
    if ((v67 & 0x80) != 0) {
      uint64_t v67 = *(void *)(v66 + 8);
    }
    uint64_t v77 = a4[8];
    if (a4 != &CoreML::Specification::_WeightParams_default_instance_ && v67 && v77)
    {
      int v76 = 2;
    }
    else
    {
      if ((v71 & 0x80) != 0) {
        uint64_t v71 = *(void *)(v70 + 8);
      }
      if (v77) {
        BOOL v78 = v71 == 0;
      }
      else {
        BOOL v78 = 1;
      }
      if (v78 || a4 == &CoreML::Specification::_WeightParams_default_instance_) {
        int v76 = 5;
      }
      else {
        int v76 = 3;
      }
    }
  }
LABEL_195:
  if (v28 != v76)
  {
LABEL_343:
    exceptiounint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void **)&v177.__r_.__value_.__l.__data_, a8, " layer : all the weight matrices must have same type");
    std::runtime_error::runtime_error(exception, &v177);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (v28 == 2)
  {
    long long v80 = (uint64_t *)a1[8];
    if (!v80) {
      long long v80 = &CoreML::Specification::_QuantizationParams_default_instance_;
    }
    unint64_t v81 = v80[2];
    char v82 = (uint64_t *)a2[8];
    if (!v82) {
      char v82 = &CoreML::Specification::_QuantizationParams_default_instance_;
    }
    if (v81 != v82[2]) {
      goto LABEL_345;
    }
    uint64_t v83 = (uint64_t *)a3[8];
    if (!v83) {
      uint64_t v83 = &CoreML::Specification::_QuantizationParams_default_instance_;
    }
    if (v81 != v83[2]) {
      goto LABEL_345;
    }
    uint64_t v84 = (uint64_t *)a4[8];
    if (!v84) {
      uint64_t v84 = &CoreML::Specification::_QuantizationParams_default_instance_;
    }
    if (v81 != v84[2])
    {
LABEL_345:
      std::string v157 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void **)&v177.__r_.__value_.__l.__data_, a8, " layer : all the weight matrices must have same quantization level");
      std::runtime_error::runtime_error(v157, &v177);
      __cxa_throw(v157, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    unint64_t __val = v81;
    int v86 = a1;
    int WeightParamSizeInBytes = EspressoConverter::getWeightParamSizeInBytes(a1);
    uint64_t v164 = a2;
    if (WeightParamSizeInBytes != EspressoConverter::getWeightParamSizeInBytes(a2)
      || WeightParamSizeInBytes != EspressoConverter::getWeightParamSizeInBytes(a3)
      || WeightParamSizeInBytes != EspressoConverter::getWeightParamSizeInBytes(a4))
    {
      std::string v158 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void **)&v177.__r_.__value_.__l.__data_, a8, " layer : all quantized weight matrices must have same number of bytes");
      std::runtime_error::runtime_error(v158, &v177);
      __cxa_throw(v158, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    uint64_t v88 = a3;
    long long v89 = a4;
    uint64_t v90 = a5;
    if (!CoreML::hasSufficientBytesInQuantizedWeightParam(v86, a7 * a6))
    {
      std::string v160 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void **)&v177.__r_.__value_.__l.__data_, a8, " layer : insufficient units in quantized weight byte stream");
      std::runtime_error::runtime_error(v160, &v177);
      __cxa_throw(v160, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    unint64_t v91 = (__val * a7 * a6 + 7) >> 3;
    uint64_t v92 = (char *)operator new(0x58uLL);
    *((void *)v92 + 1) = 0;
    *((void *)v92 + 2) = 0;
    *(void *)uint64_t v92 = &unk_1EF0DDAB0;
    *((void *)v92 + 3) = &unk_1EF0DCF20;
    *(_OWORD *)(v92 + 5CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = 0u;
    *(_OWORD *)(v92 + 72) = 0u;
    *((_DWORD *)v92 + 8) = 4 * v91;
    uint64_t v162 = (std::__shared_weak_count *)v92;
    long long v93 = (void *)Espresso::kern_alloc((Espresso *)(4 * (int)v91));
    *((void *)v92 + 5) = v93;
    v92[48] = 1;
    uint64_t v94 = (const void **)v86[6];
    if (*((char *)v94 + 23) < 0) {
      uint64_t v94 = (const void **)*v94;
    }
    long long v95 = v90;
    memcpy(v93, v94, WeightParamSizeInBytes);
    uint64_t v96 = (const void **)v164[6];
    std::string::size_type v97 = v89;
    if (*((char *)v96 + 23) < 0) {
      uint64_t v96 = (const void **)*v96;
    }
    unint64_t v98 = a7;
    memcpy((void *)(*((void *)v92 + 5) + v91), v96, WeightParamSizeInBytes);
    long long v99 = (const void **)v88[6];
    if (*((char *)v99 + 23) < 0) {
      long long v99 = (const void **)*v99;
    }
    memcpy((void *)(*((void *)v92 + 5) + 2 * v91), v99, WeightParamSizeInBytes);
    long long v100 = (const void **)v97[6];
    if (*((char *)v100 + 23) < 0) {
      long long v100 = (const void **)*v100;
    }
    long long v101 = v88;
    memcpy((void *)(*((void *)v92 + 5) + 3 * v91), v100, WeightParamSizeInBytes);
    if (*((char *)a9 + 23) >= 0) {
      size_t v102 = *((unsigned __int8 *)a9 + 23);
    }
    else {
      size_t v102 = (size_t)a9[1];
    }
    std::string::basic_string[abi:ne180100]((uint64_t)&v176, v102 + 2);
    if ((v176.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v103 = &v176;
    }
    else {
      std::string::size_type v103 = (std::string *)v176.__r_.__value_.__r.__words[0];
    }
    if (v102)
    {
      if (*((char *)a9 + 23) >= 0) {
        uint64_t v104 = a9;
      }
      else {
        uint64_t v104 = *a9;
      }
      memmove(v103, v104, v102);
    }
    strcpy((char *)v103 + v102, "_U");
    std::to_string(&v175, __val);
    if ((v175.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v105 = &v175;
    }
    else {
      long long v105 = (std::string *)v175.__r_.__value_.__r.__words[0];
    }
    if ((v175.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v175.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v175.__r_.__value_.__l.__size_;
    }
    long long v107 = std::string::append(&v176, (const std::string::value_type *)v105, size);
    long long v108 = *(_OWORD *)&v107->__r_.__value_.__l.__data_;
    v177.__r_.__value_.__r.__words[2] = v107->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v177.__r_.__value_.__l.__data_ = v108;
    v107->__r_.__value_.__l.__size_ = 0;
    v107->__r_.__value_.__r.__words[2] = 0;
    v107->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v175.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v176.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v176.__r_.__value_.__l.__data_);
    }
    uint64_t v109 = *v95;
    *(_OWORD *)&v176.__r_.__value_.__l.__data_ = 0uLL;
    (*(void (**)(uint64_t, std::string *, std::string *, void, void, void))(*(void *)v109 + 168))(v109, &v176, &v177, *((void *)v92 + 5), *((int *)v92 + 8), 0);
    if (v176.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v176.__r_.__value_.__l.__size_);
    }
    unint64_t v110 = (uint64_t *)v86[8];
    if (!v110) {
      unint64_t v110 = &CoreML::Specification::_QuantizationParams_default_instance_;
    }
    int v111 = *((_DWORD *)v110 + 9);
    int v112 = (uint64_t *)v164[8];
    if (!v112) {
      int v112 = &CoreML::Specification::_QuantizationParams_default_instance_;
    }
    if ((v111 == 101) != (*((_DWORD *)v112 + 9) == 101)) {
      goto LABEL_347;
    }
    uint64_t v113 = (uint64_t *)v88[8];
    if (!v113) {
      uint64_t v113 = &CoreML::Specification::_QuantizationParams_default_instance_;
    }
    if ((v111 == 101) != (*((_DWORD *)v113 + 9) == 101)) {
      goto LABEL_347;
    }
    std::string v114 = (uint64_t *)v97[8];
    if (!v114) {
      std::string v114 = &CoreML::Specification::_QuantizationParams_default_instance_;
    }
    if ((v111 == 101) != (*((_DWORD *)v114 + 9) == 101))
    {
LABEL_347:
      std::string v159 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void **)&v176.__r_.__value_.__l.__data_, a8, " layer : all weight matrices must have either linear quantization or LUT");
      std::runtime_error::runtime_error(v159, &v176);
      __cxa_throw(v159, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    if (v111 == 101)
    {
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v173, 4 * v98, 1, 1, 1);
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v171, 4 * v98, 1, 1, 1);
      LODWORD(v175.__r_.__value_.__l.__data_) = 1065353216;
      std::vector<float>::vector(&v176, v98, &v175);
      LODWORD(__p) = 0;
      long long v115 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)std::vector<float>::vector(&v175, v98, &__p);
      uint64_t v116 = (uint64_t *)v86[8];
      if (!v116) {
        uint64_t v116 = &CoreML::Specification::_QuantizationParams_default_instance_;
      }
      if (*((_DWORD *)v116 + 9) == 101)
      {
        long long v117 = (uint64_t *)v116[3];
      }
      else
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v115);
        long long v117 = &CoreML::Specification::_LinearQuantizationParams_default_instance_;
      }
      CoreML::setLinearQuantizationScaleBias((uint64_t)v117, (uint64_t)&v176, (uint64_t)&v175, v98);
      uint64_t v136 = v173;
      memcpy(*(void **)(v173 + 16), v176.__r_.__value_.__l.__data_, 4 * v98);
      uint64_t v137 = v171;
      uint64_t v138 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)memcpy(*(void **)(v171 + 16), v175.__r_.__value_.__l.__data_, 4 * v98);
      long long v139 = (uint64_t *)v164[8];
      if (!v139) {
        long long v139 = &CoreML::Specification::_QuantizationParams_default_instance_;
      }
      if (*((_DWORD *)v139 + 9) == 101)
      {
        char v140 = (uint64_t *)v139[3];
      }
      else
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v138);
        char v140 = &CoreML::Specification::_LinearQuantizationParams_default_instance_;
      }
      CoreML::setLinearQuantizationScaleBias((uint64_t)v140, (uint64_t)&v176, (uint64_t)&v175, v98);
      memcpy((void *)(*(void *)(v136 + 16) + 4 * v98), v176.__r_.__value_.__l.__data_, 4 * v98);
      std::string::size_type v141 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)memcpy((void *)(*(void *)(v137 + 16) + 4 * v98), v175.__r_.__value_.__l.__data_, 4 * v98);
      uint64_t v142 = (uint64_t *)v88[8];
      if (!v142) {
        uint64_t v142 = &CoreML::Specification::_QuantizationParams_default_instance_;
      }
      if (*((_DWORD *)v142 + 9) == 101)
      {
        long long v143 = (uint64_t *)v142[3];
      }
      else
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v141);
        long long v143 = &CoreML::Specification::_LinearQuantizationParams_default_instance_;
      }
      CoreML::setLinearQuantizationScaleBias((uint64_t)v143, (uint64_t)&v176, (uint64_t)&v175, v98);
      memcpy((void *)(*(void *)(v136 + 16) + 8 * v98), v176.__r_.__value_.__l.__data_, 4 * v98);
      uint64_t v144 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)memcpy((void *)(*(void *)(v137 + 16) + 8 * v98), v175.__r_.__value_.__l.__data_, 4 * v98);
      long long v145 = (uint64_t *)v97[8];
      if (!v145) {
        long long v145 = &CoreML::Specification::_QuantizationParams_default_instance_;
      }
      if (*((_DWORD *)v145 + 9) == 101)
      {
        uint64_t v146 = (uint64_t *)v145[3];
      }
      else
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v144);
        uint64_t v146 = &CoreML::Specification::_LinearQuantizationParams_default_instance_;
      }
      CoreML::setLinearQuantizationScaleBias((uint64_t)v146, (uint64_t)&v176, (uint64_t)&v175, v98);
      memcpy((void *)(*(void *)(v136 + 16) + 12 * v98), v176.__r_.__value_.__l.__data_, 4 * v98);
      memcpy((void *)(*(void *)(v137 + 16) + 12 * v98), v175.__r_.__value_.__l.__data_, 4 * v98);
      uint64_t v147 = *v95;
      uint64_t v169 = 0;
      uint64_t v170 = 0;
      if (*((char *)a9 + 23) >= 0) {
        size_t v148 = *((unsigned __int8 *)a9 + 23);
      }
      else {
        size_t v148 = (size_t)a9[1];
      }
      p_p = &__p;
      std::string::basic_string[abi:ne180100]((uint64_t)&__p, v148 + 14);
      if (v168 < 0) {
        p_p = __p;
      }
      if (v148)
      {
        if (*((char *)a9 + 23) >= 0) {
          uint64_t v150 = a9;
        }
        else {
          uint64_t v150 = *a9;
        }
        memmove(p_p, v150, v148);
      }
      strcpy((char *)p_p + v148, "_per_ch_qscale");
      (*(void (**)(uint64_t, uint64_t *, void **, void, uint64_t, void))(*(void *)v147 + 168))(v147, &v169, &__p, *(void *)(v136 + 16), 4 * *(int *)(v136 + 8), 0);
      if (v168 < 0) {
        operator delete(__p);
      }
      if (v170) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v170);
      }
      uint64_t v151 = *v95;
      uint64_t v169 = 0;
      uint64_t v170 = 0;
      if (*((char *)a9 + 23) >= 0) {
        size_t v152 = *((unsigned __int8 *)a9 + 23);
      }
      else {
        size_t v152 = (size_t)a9[1];
      }
      std::string v153 = &__p;
      std::string::basic_string[abi:ne180100]((uint64_t)&__p, v152 + 13);
      if (v168 < 0) {
        std::string v153 = __p;
      }
      if (v152)
      {
        if (*((char *)a9 + 23) >= 0) {
          std::string v154 = a9;
        }
        else {
          std::string v154 = *a9;
        }
        memmove(v153, v154, v152);
      }
      strcpy((char *)v153 + v152, "_per_ch_qbias");
      (*(void (**)(uint64_t, uint64_t *, void **, void, uint64_t, void))(*(void *)v151 + 168))(v151, &v169, &__p, *(void *)(v137 + 16), 4 * *(int *)(v137 + 8), 0);
      long long v134 = v162;
      if (v168 < 0) {
        operator delete(__p);
      }
      if (v170) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v170);
      }
      if (v175.__r_.__value_.__r.__words[0])
      {
        v175.__r_.__value_.__l.__size_ = v175.__r_.__value_.__r.__words[0];
        operator delete(v175.__r_.__value_.__l.__data_);
      }
      if (v176.__r_.__value_.__r.__words[0])
      {
        v176.__r_.__value_.__l.__size_ = v176.__r_.__value_.__r.__words[0];
        operator delete(v176.__r_.__value_.__l.__data_);
      }
      if (v172) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v172);
      }
      unint64_t v135 = v174;
      if (!v174) {
        goto LABEL_287;
      }
    }
    else
    {
      char v127 = __val - 1;
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&__p, 4 * (2 << (__val - 1)), 1, 1, 1);
      memset(&v176, 0, sizeof(v176));
      CoreML::setLUTQuantizationParams(v86, (uint64_t)&v176);
      uint64_t v128 = __p;
      memcpy(*((void **)__p + 2), v176.__r_.__value_.__l.__data_, 8 << (__val - 1));
      CoreML::setLUTQuantizationParams(v164, (uint64_t)&v176);
      memcpy((void *)(v128[2] + 4 * (2 << v127)), v176.__r_.__value_.__l.__data_, 8 << v127);
      CoreML::setLUTQuantizationParams(v101, (uint64_t)&v176);
      memcpy((void *)(v128[2] + 4 * (4 << v127)), v176.__r_.__value_.__l.__data_, 8 << v127);
      CoreML::setLUTQuantizationParams(v97, (uint64_t)&v176);
      uint64_t v129 = (void *)v176.__r_.__value_.__r.__words[0];
      memcpy((void *)(v128[2] + 12 * (2 << v127)), v176.__r_.__value_.__l.__data_, 8 << v127);
      uint64_t v130 = *v95;
      uint64_t v173 = 0;
      uint64_t v174 = 0;
      if (*((char *)a9 + 23) >= 0) {
        size_t v131 = *((unsigned __int8 *)a9 + 23);
      }
      else {
        size_t v131 = (size_t)a9[1];
      }
      std::string::size_type v132 = &v175;
      std::string::basic_string[abi:ne180100]((uint64_t)&v175, v131 + 15);
      if ((v175.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v132 = (std::string *)v175.__r_.__value_.__r.__words[0];
      }
      if (v131)
      {
        if (*((char *)a9 + 23) >= 0) {
          std::string v133 = a9;
        }
        else {
          std::string v133 = *a9;
        }
        memmove(v132, v133, v131);
      }
      strcpy((char *)v132 + v131, "_lut_to_float32");
      (*(void (**)(uint64_t, uint64_t *, std::string *, void, uint64_t, void))(*(void *)v130 + 168))(v130, &v173, &v175, v128[2], 32 << v127, 0);
      long long v134 = v162;
      if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v175.__r_.__value_.__l.__data_);
      }
      if (v174) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v174);
      }
      if (v129) {
        operator delete(v129);
      }
      unint64_t v135 = v167;
      if (!v167) {
        goto LABEL_287;
      }
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v135);
LABEL_287:
    if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v177.__r_.__value_.__l.__data_);
    }
    long long v126 = v134;
LABEL_290:
    std::__shared_weak_count::__release_shared[abi:ne180100](v126);
    return;
  }
  int WeightParamSize = EspressoConverter::getWeightParamSize((uint64_t)a1);
  unint64_t v120 = a7 * a6;
  if (WeightParamSize != a7 * a6
    || (int v121 = WeightParamSize, EspressoConverter::getWeightParamSize((uint64_t)a2) != WeightParamSize)
    || EspressoConverter::getWeightParamSize((uint64_t)a3) != v121
    || EspressoConverter::getWeightParamSize((uint64_t)a4) != v121)
  {
    std::string v156 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void **)&v177.__r_.__value_.__l.__data_, a8, " layer: weight matrix size incorrect");
    std::runtime_error::runtime_error(v156, &v177);
    __cxa_throw(v156, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v177, a6, 4 * a7, 1, 1);
  std::string::size_type v122 = v177.__r_.__value_.__r.__words[0];
  EspressoConverter::copyWeightsToDataBlob(*(EspressoConverter **)(v177.__r_.__value_.__r.__words[0] + 24), a1, 4 * v120);
  EspressoConverter::copyWeightsToDataBlob((EspressoConverter *)(*(void *)(v122 + 24) + 4 * v120), a2, 4 * v120);
  EspressoConverter::copyWeightsToDataBlob((EspressoConverter *)(*(void *)(v122 + 24) + 8 * v120), a3, 4 * v120);
  EspressoConverter::copyWeightsToDataBlob((EspressoConverter *)(*(void *)(v122 + 24) + 12 * v120), a4, 4 * v120);
  uint64_t v123 = 0;
  uint64_t v124 = *a5;
  *(_OWORD *)&v176.__r_.__value_.__l.__data_ = 0uLL;
  uint64_t v125 = *(int *)(v122 + 8);
  do
  {
    v125 *= *(int *)(v122 + 12 + v123);
    v123 += 4;
  }
  while (v123 != 12);
  (*(void (**)(uint64_t, std::string *, const void **, void, uint64_t, void))(*(void *)v124 + 168))(v124, &v176, a9, *(void *)(v122 + 24), 4 * v125, 0);
  if (v176.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v176.__r_.__value_.__l.__size_);
  }
  long long v126 = (std::__shared_weak_count *)v177.__r_.__value_.__l.__size_;
  if (v177.__r_.__value_.__l.__size_) {
    goto LABEL_290;
  }
}

void sub_19EA9BC04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,std::__shared_weak_count *a21,uint64_t a22,std::__shared_weak_count *a23,uint64_t a24,std::__shared_weak_count *a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a21);
  }
  if (a26) {
    operator delete(a26);
  }
  if (a32) {
    operator delete(a32);
  }
  if (a23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a23);
  }
  if (a25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a25);
  }
  if (*(char *)(v37 - 89) < 0) {
    operator delete(*(void **)(v37 - 112));
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  _Unwind_Resume(a1);
}

void Espresso::blob<char,1>::~blob(Espresso::blob_rtti_root *this, void *a2)
{
  *(void *)this = &unk_1EF0DCF20;
  if (*((unsigned char *)this + 24))
  {
    uint64_t v3 = (Espresso *)*((void *)this + 2);
    if (v3) {
      Espresso::kern_dealloc(v3, a2);
    }
  }
  *((void *)this + 2) = 0;
  int v4 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  long long v5 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  Espresso::blob_rtti_root::~blob_rtti_root(this);

  JUMPOUT(0x19F3C1920);
}

{
  Espresso *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t vars8;

  *(void *)this = &unk_1EF0DCF20;
  if (*((unsigned char *)this + 24))
  {
    uint64_t v3 = (Espresso *)*((void *)this + 2);
    if (v3) {
      Espresso::kern_dealloc(v3, a2);
    }
  }
  *((void *)this + 2) = 0;
  int v4 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  long long v5 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }

  Espresso::blob_rtti_root::~blob_rtti_root(this);
}

uint64_t std::__shared_ptr_emplace<Espresso::blob<char,1>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::blob<char,1>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF0DDAB0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x19F3C1920);
}

void std::__shared_ptr_emplace<Espresso::blob<char,1>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF0DDAB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void EspressoConverter::setRecurrentBiasBlob(uint64_t a1, uint64_t *a2, unint64_t a3, const void **a4, uint64_t a5)
{
  uint64_t v10 = *(void *)(a1 + 40);
  if (*(char *)(v10 + 23) < 0) {
    uint64_t v11 = *(void *)(v10 + 8);
  }
  else {
    uint64_t v11 = *(unsigned __int8 *)(v10 + 23);
  }
  uint64_t v12 = *(void *)(a1 + 48);
  uint64_t v13 = *(unsigned __int8 *)(v12 + 23);
  if (*(char *)(v12 + 23) < 0) {
    uint64_t v14 = *(void *)(v12 + 8);
  }
  else {
    uint64_t v14 = *(unsigned __int8 *)(v12 + 23);
  }
  int v15 = *(_DWORD *)(a1 + 16);
  uint64_t v16 = *(void *)(a1 + 56);
  if (*(char *)(v16 + 23) < 0) {
    uint64_t v17 = *(void *)(v16 + 8);
  }
  else {
    uint64_t v17 = *(unsigned __int8 *)(v16 + 23);
  }
  if (v15 <= 0) {
    int v18 = 1;
  }
  else {
    int v18 = 2;
  }
  if (v11) {
    int v19 = v18;
  }
  else {
    int v19 = v15 > 0;
  }
  if (v14) {
    ++v19;
  }
  if (v17) {
    ++v19;
  }
  if (v15 > 0 || v19 != 1) {
    goto LABEL_24;
  }
  if ((*(unsigned char *)(v10 + 23) & 0x80) != 0)
  {
    if (*(void *)(v10 + 8)) {
      goto LABEL_24;
    }
  }
  else if (*(unsigned char *)(v10 + 23))
  {
LABEL_24:
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v29, 1, 1, a3, 1);
LABEL_25:
    if (EspressoConverter::getWeightParamSize(a1) != a3)
    {
      exceptiounint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void **)&__src.__r_.__value_.__l.__data_, a4, " layer: bias size incorrect");
      std::runtime_error::runtime_error(exception, &__src);
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    uint64_t v20 = v29;
    EspressoConverter::copyWeightsToDataBlob(*(EspressoConverter **)(v29 + 24), (void *)a1, 4 * a3);
    goto LABEL_27;
  }
  if ((v13 & 0x80) != 0) {
    uint64_t v13 = *(void *)(v12 + 8);
  }
  uint64_t v24 = *(void *)(a1 + 64);
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v29, 1, 1, a3, 1);
  if ((uint64_t *)a1 == &CoreML::Specification::_WeightParams_default_instance_ || !v13 || !v24) {
    goto LABEL_25;
  }
  if (!CoreML::hasSufficientBytesInQuantizedWeightParam((uint64_t *)a1, a3))
  {
    unsigned int v27 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void **)&__src.__r_.__value_.__l.__data_, a4, " layer: insufficient units in quantized bias byte stream");
    std::runtime_error::runtime_error(v27, &__src);
    __cxa_throw(v27, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CoreML::dequantizeWeightParamSpec((CoreML *)&__src, (const CoreML::Specification::WeightParams *)a1, a3);
  uint64_t v20 = v29;
  int v25 = (void *)__src.__r_.__value_.__r.__words[0];
  memcpy(*(void **)(v29 + 24), __src.__r_.__value_.__l.__data_, 4 * a3);
  if (v25) {
    operator delete(v25);
  }
LABEL_27:
  uint64_t v21 = 0;
  uint64_t v22 = *a2;
  *(_OWORD *)&__src.__r_.__value_.__l.__data_ = 0uLL;
  uint64_t v23 = *(int *)(v20 + 8);
  do
  {
    v23 *= *(int *)(v20 + 12 + v21);
    v21 += 4;
  }
  while (v21 != 12);
  (*(void (**)(uint64_t, std::string *, uint64_t, void, uint64_t, void))(*(void *)v22 + 168))(v22, &__src, a5, *(void *)(v20 + 24), 4 * v23, 0);
  if (__src.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__src.__r_.__value_.__l.__size_);
  }
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
}

void sub_19EA9C2B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
    {
LABEL_6:
      if (a17) {
        std::__shared_weak_count::__release_shared[abi:ne180100](a17);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  goto LABEL_6;
}

void EspressoConverter::setRecurrentBiasBlobToExternalPtr(uint64_t a1, void *a2, unint64_t a3, const void **a4)
{
  uint64_t v8 = *(void *)(a1 + 40);
  if (*(char *)(v8 + 23) < 0) {
    uint64_t v9 = *(void *)(v8 + 8);
  }
  else {
    uint64_t v9 = *(unsigned __int8 *)(v8 + 23);
  }
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = *(unsigned __int8 *)(v10 + 23);
  if (*(char *)(v10 + 23) < 0) {
    uint64_t v12 = *(void *)(v10 + 8);
  }
  else {
    uint64_t v12 = *(unsigned __int8 *)(v10 + 23);
  }
  int v13 = *(_DWORD *)(a1 + 16);
  uint64_t v14 = *(void *)(a1 + 56);
  if (*(char *)(v14 + 23) < 0) {
    uint64_t v15 = *(void *)(v14 + 8);
  }
  else {
    uint64_t v15 = *(unsigned __int8 *)(v14 + 23);
  }
  if (v13 <= 0) {
    int v16 = 1;
  }
  else {
    int v16 = 2;
  }
  if (v9) {
    int v17 = v16;
  }
  else {
    int v17 = v13 > 0;
  }
  if (v12) {
    ++v17;
  }
  if (v15) {
    ++v17;
  }
  if (v13 > 0 || v17 != 1) {
    goto LABEL_36;
  }
  if ((*(unsigned char *)(v8 + 23) & 0x80) != 0)
  {
    if (*(void *)(v8 + 8)) {
      goto LABEL_36;
    }
  }
  else if (*(unsigned char *)(v8 + 23))
  {
    goto LABEL_36;
  }
  if ((v11 & 0x80) != 0) {
    uint64_t v11 = *(void *)(v10 + 8);
  }
  if ((uint64_t *)a1 != &CoreML::Specification::_WeightParams_default_instance_ && v11 && *(void *)(a1 + 64))
  {
    if (!CoreML::hasSufficientBytesInQuantizedWeightParam((uint64_t *)a1, a3))
    {
      exceptiounint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void **)&__src.__r_.__value_.__l.__data_, a4, " layer: insufficient units in quantized bias byte stream");
      std::runtime_error::runtime_error(exception, &__src);
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    CoreML::dequantizeWeightParamSpec((CoreML *)&__src, (const CoreML::Specification::WeightParams *)a1, a3);
    int v18 = (void *)__src.__r_.__value_.__r.__words[0];
    memcpy(a2, __src.__r_.__value_.__l.__data_, 4 * a3);
    if (v18)
    {
      operator delete(v18);
    }
    return;
  }
LABEL_36:
  if (EspressoConverter::getWeightParamSize(a1) != a3)
  {
    int v19 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void **)&__src.__r_.__value_.__l.__data_, a4, " layer: bias size incorrect");
    std::runtime_error::runtime_error(v19, &__src);
    __cxa_throw(v19, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }

  EspressoConverter::copyWeightsToDataBlob((EspressoConverter *)a2, (void *)a1, 4 * a3);
}

void sub_19EA9C574(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (v16) {
    __cxa_free_exception(v15);
  }
  _Unwind_Resume(exception_object);
}

void LayerTranslator::addReshape(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  int v4 = (long long *)*((void *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v57, *(const std::string::value_type **)v4, *((void *)v4 + 1));
  }
  else
  {
    long long v5 = *v4;
    v57.__r_.__value_.__r.__words[2] = *((void *)v4 + 2);
    *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v5;
  }
  uint64_t v54 = 0;
  uint64_t v55 = 0;
  uint64_t v56 = 0;
  uint64_t v51 = 0;
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v54, (uint64_t *)&v51, *((void *)this + 1));
  if (*((_DWORD *)a2 + 35) == 300)
  {
    std::string v7 = (const CoreML::Specification::ReshapeLayerParams *)*((void *)a2 + 16);
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    std::string v7 = (const CoreML::Specification::ReshapeLayerParams *)&CoreML::Specification::_ReshapeLayerParams_default_instance_;
  }
  CoreML::Specification::ReshapeLayerParams::ReshapeLayerParams((CoreML::Specification::ReshapeLayerParams *)v47, v7);
  unint64_t v42 = 0;
  uint64_t v43 = 0;
  long long v44 = xmmword_19EC7B8E0;
  __int16 v45 = 1;
  int v46 = 1;
  if (v50 == 1) {
    DWORD2(v44) = 1;
  }
  if (v48 == 3)
  {
    int v8 = 0;
    uint64_t v9 = v49 + 1;
    uint64_t v10 = v49 + 2;
    uint64_t v11 = v49 + 3;
  }
  else
  {
    if (v48 != 4)
    {
      exceptiounint64_t n = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x19F3C1380](exception, "Reshape Layer: target shape must of length 3 or 4");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    int v8 = *((_DWORD *)v49 + 2);
    uint64_t v9 = v49 + 2;
    uint64_t v10 = v49 + 3;
    uint64_t v11 = v49 + 4;
  }
  uint64_t v12 = *v11;
  uint64_t v13 = *v10;
  uint64_t v14 = *v9;
  LODWORD(v44) = v8;
  uint64_t v43 = v14;
  unint64_t v42 = __PAIR64__(v13, v12);
  uint64_t v15 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(&__p, "reshape");
  memset(&v39, 0, sizeof(v39));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v39, v51, v52, 0xAAAAAAAAAAAAAAABLL * (((char *)v52 - (char *)v51) >> 3));
  memset(&v38, 0, sizeof(v38));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v38, v54, v55, 0xAAAAAAAAAAAAAAABLL * (((char *)v55 - (char *)v54) >> 3));
  Espresso::sequential_builder::add<Espresso::reshape_params>(&v40, v15, (uint64_t)&__p, (uint64_t)&v57, (uint64_t)&v42, (long long *)v39.__r_.__value_.__l.__data_, (long long *)v39.__r_.__value_.__l.__size_, (long long **)&v38);
  *(void *)&long long v70 = &v38;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v70);
  *(void *)&long long v70 = &v39;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v70);
  if (SBYTE7(v62) < 0) {
    operator delete((void *)__p);
  }
  if (**((unsigned char **)this + 2))
  {
    LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v54);
  }
  else
  {
    char v16 = (uint64_t **)*((void *)this + 1);
    uint64_t v17 = std::map<std::string,std::string>::at((uint64_t)v16, v51);
    long long v70 = *(_OWORD *)v17;
    long long v71 = *(_OWORD *)(v17 + 16);
    uint64_t v72 = *(void *)(v17 + 32);
    int v73 = 0;
    uint64_t v74 = 0;
    uint64_t v75 = 0;
    int v18 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v73, *(const void **)(v17 + 40), *(void *)(v17 + 48), (uint64_t)(*(void *)(v17 + 48)- *(void *)(v17 + 40)) >> 2);
    if (*((_DWORD *)a2 + 35) == 300)
    {
      int v19 = (const CoreML::Specification::ReshapeLayerParams *)*((void *)a2 + 16);
    }
    else
    {
      CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v18);
      int v19 = (const CoreML::Specification::ReshapeLayerParams *)&CoreML::Specification::_ReshapeLayerParams_default_instance_;
    }
    CoreML::Specification::ReshapeLayerParams::ReshapeLayerParams((CoreML::Specification::ReshapeLayerParams *)v67, v19);
    if (v68 == 3)
    {
      unsigned int v20 = v69[2];
      unsigned int v21 = v69[4];
      int v22 = v69[6];
      if (DWORD2(v70) != -1
        && DWORD1(v70) != -1
        && v70 != -1
        && v21 * v20 * v22 != DWORD1(v70) * DWORD2(v70) * v70)
      {
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
        uint64_t v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v62, (uint64_t)"Reshape layer: '", 16);
        uint64_t v24 = *((void *)a2 + 14);
        int v25 = *(char *)(v24 + 23);
        if (v25 >= 0) {
          uint64_t v26 = *((void *)a2 + 14);
        }
        else {
          uint64_t v26 = *(void *)v24;
        }
        if (v25 >= 0) {
          uint64_t v27 = *(unsigned __int8 *)(v24 + 23);
        }
        else {
          uint64_t v27 = *(void *)(v24 + 8);
        }
        int v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, v26, v27);
        uint64_t v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"': product of new shape must equal the product of input blob dimensions.", 72);
        std::endl[abi:ne180100]<char,std::char_traits<char>>(v29);
        BOOL v30 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::stringbuf::str();
        std::runtime_error::runtime_error(v30, (const std::string *)v58);
        __cxa_throw(v30, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
    }
    else
    {
      unsigned int v20 = v69[4];
      unsigned int v21 = v69[6];
      int v22 = v69[8];
    }
    long long __p = v70;
    long long v62 = v71;
    uint64_t v31 = v73;
    uint64_t v63 = v72;
    uint64_t v64 = 0;
    uint64_t v65 = 0;
    uint64_t v66 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v64, v73, v74, (v74 - (uint64_t)v73) >> 2);
    *(void *)((char *)&__p + 4) = __PAIR64__(v20, v21);
    LODWORD(__p) = v22;
    v58[0] = __p;
    v58[1] = v62;
    uint64_t v32 = v64;
    uint64_t v59 = v63;
    memset(v60, 0, sizeof(v60));
    uint64_t v33 = v65;
    unint64_t v34 = (v65 - (uint64_t)v64) >> 2;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v60, v64, v65, v34);
    EspressoConverter::validateShape((int *)v58, *((void *)a2 + 14), (uint64_t)v54);
    if (v60[0]) {
      operator delete(v60[0]);
    }
    int v76 = v54;
    uint64_t v35 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v16, v54, &v76);
    long long v36 = v62;
    *(_OWORD *)(v35 + 5CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = __p;
    *(_OWORD *)(v35 + 72) = v36;
    *((void *)v35 + 11) = v63;
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v35 + 96, v32, v33, v34);
    if (v32) {
      operator delete(v32);
    }
    CoreML::Specification::ReshapeLayerParams::~ReshapeLayerParams((CoreML::Specification::ReshapeLayerParams *)v67);
    if (v31) {
      operator delete(v31);
    }
  }
  if (v41) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v41);
  }
  CoreML::Specification::ReshapeLayerParams::~ReshapeLayerParams((CoreML::Specification::ReshapeLayerParams *)v47);
  *(void *)&long long __p = &v51;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  *(void *)&long long __p = &v54;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v57.__r_.__value_.__l.__data_);
  }
}

void sub_19EA9CAA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,char *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  if (a47 < 0)
  {
    operator delete(__p);
    if ((v59 & 1) == 0)
    {
LABEL_6:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a53);
      CoreML::Specification::ReshapeLayerParams::~ReshapeLayerParams((CoreML::Specification::ReshapeLayerParams *)(v60 - 192));
      long long v62 = *(void **)(v60 - 104);
      if (v62) {
        operator delete(v62);
      }
      if (a17) {
        std::__shared_weak_count::__release_shared[abi:ne180100](a17);
      }
      CoreML::Specification::ReshapeLayerParams::~ReshapeLayerParams((CoreML::Specification::ReshapeLayerParams *)&a23);
      a53 = &a29;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a53);
      a53 = &a32;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a53);
      if (a40 < 0) {
        operator delete(a35);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v59)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v58);
  goto LABEL_6;
}

void Espresso::sequential_builder::add<Espresso::reshape_params>(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, long long *a6, long long *a7, long long **a8)
{
  memset(&v13, 0, sizeof(v13));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v13, a6, a7, 0xAAAAAAAAAAAAAAABLL * (((char *)a7 - (char *)a6) >> 3));
  memset(&v12, 0, sizeof(v12));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v12, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a8[1] - (char *)*a8) >> 3));
  LODWORD(v15.__r_.__value_.__l.__data_) = (***(uint64_t (****)(void))(a2[14] + 8))(*(void *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  uint64_t v11 = (std::__shared_weak_count *)a1[1];
  uint64_t v16 = *a1;
  uint64_t v17 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(&v15, 0, sizeof(v15));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v15, (long long *)v13.__r_.__value_.__l.__data_, (long long *)v13.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13.__r_.__value_.__l.__size_ - v13.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v14, 0, sizeof(v14));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v14, (long long *)v12.__r_.__value_.__l.__data_, (long long *)v12.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12.__r_.__value_.__l.__size_ - v12.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  int v18 = &v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  int v18 = &v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (*a2) {
    Espresso::sequential_builder::add_shape_from_kernel();
  }
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
}

void sub_19EA9CDD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v16 = *(std::__shared_weak_count **)(v13 + 8);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  *(void *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(void *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void LayerTranslator::addMin(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  int v4 = (long long *)*((void *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v57, *(const std::string::value_type **)v4, *((void *)v4 + 1));
  }
  else
  {
    long long v5 = *v4;
    v57.__r_.__value_.__r.__words[2] = *((void *)v4 + 2);
    *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v5;
  }
  uint64_t v54 = 0;
  uint64_t v55 = 0;
  uint64_t v56 = 0;
  uint64_t v51 = 0;
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v54, (uint64_t *)&v51, *((void *)this + 1));
  uint64_t v37 = a2;
  EspressoConverter::splitElementwiseLayer((uint64_t)&v49, &v51, (uint64_t)v54);
  uint64_t v6 = v49;
  if (v50 != v49)
  {
    unint64_t v7 = 0;
    uint64_t v8 = 71;
    do
    {
      *(void *)&long long v64 = 897988541;
      BYTE8(v64) = 0;
      *(void *)((char *)&v66 + 4) = 0;
      *(void *)&long long v63 = 22;
      *((void *)&v63 + 1) = 1065353216;
      long long v59 = 0uLL;
      *(void *)&long long v60 = 0;
      int v68 = 0;
      int v69 = 0;
      unint64_t v70 = 0;
      if ((char *)v52 - (char *)v51 == 24)
      {
        *((void *)&v59 + 1) = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v59, v51);
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v68, v54, v55, 0xAAAAAAAAAAAAAAABLL * (((char *)v55 - (char *)v54) >> 3));
      }
      else
      {
        uint64_t v9 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v59, (long long *)(v6 + v8 - 71));
        uint64_t v10 = v9;
        *((void *)&v59 + 1) = v9;
        uint64_t v11 = (long long *)(v49 + v8 - 47);
        if ((unint64_t)v9 >= (unint64_t)v60)
        {
          uint64_t v13 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v59, v11);
        }
        else
        {
          if (*(char *)(v49 + v8 - 24) < 0)
          {
            std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v11, *(void *)(v49 + v8 - 39));
          }
          else
          {
            long long v12 = *v11;
            v9->__r_.__value_.__r.__words[2] = *(void *)(v49 + v8 - 31);
            *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v12;
          }
          uint64_t v13 = (uint64_t)&v10[1];
        }
        *((void *)&v59 + 1) = v13;
        uint64_t v14 = (long long *)(v49 + v8 - 23);
        std::string v15 = v69;
        if ((unint64_t)v69 >= v70)
        {
          uint64_t v17 = (long long *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v68, v14);
        }
        else
        {
          if (*(char *)(v49 + v8) < 0)
          {
            std::string::__init_copy_ctor_external(v69, *(const std::string::value_type **)v14, *(void *)(v49 + v8 - 15));
          }
          else
          {
            long long v16 = *v14;
            v69->__r_.__value_.__r.__words[2] = *(void *)(v49 + v8 - 7);
            *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
          }
          uint64_t v17 = (long long *)&v15[1];
        }
        int v69 = (std::string *)v17;
      }
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v52 - (char *)v51) >> 3) > 2)
      {
        unsigned int v20 = *(void **)this;
        std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
        std::to_string(&v40, v7);
        if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unsigned int v21 = &v57;
        }
        else {
          unsigned int v21 = (std::string *)v57.__r_.__value_.__r.__words[0];
        }
        if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v57.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v57.__r_.__value_.__l.__size_;
        }
        uint64_t v23 = std::string::insert(&v40, 0, (const std::string::value_type *)v21, size);
        long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
        std::string::size_type v42 = v23->__r_.__value_.__r.__words[2];
        *(_OWORD *)int v41 = v24;
        v23->__r_.__value_.__l.__size_ = 0;
        v23->__r_.__value_.__r.__words[2] = 0;
        v23->__r_.__value_.__r.__words[0] = 0;
        memset(&v39, 0, sizeof(v39));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v39, (long long *)v59, *((long long **)&v59 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v59 + 1) - v59) >> 3));
        memset(&v38, 0, sizeof(v38));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v38, (long long *)v68, (long long *)v69, 0xAAAAAAAAAAAAAAABLL * (((char *)v69 - (char *)v68) >> 3));
        Espresso::sequential_builder::add<Espresso::elementwise_params>(&v43, v20, (uint64_t)__p, (uint64_t)v41, (uint64_t)&v63, (long long *)v39.__r_.__value_.__l.__data_, (long long *)v39.__r_.__value_.__l.__size_, (long long **)&v38);
        unsigned int v58 = &v38;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
        unsigned int v58 = &v39;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
        if (SHIBYTE(v42) < 0) {
          operator delete(v41[0]);
        }
        if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v40.__r_.__value_.__l.__data_);
        }
        if (v48 < 0) {
          operator delete(__p[0]);
        }
        int v19 = v44;
        if (!v44) {
          goto LABEL_26;
        }
      }
      else
      {
        int v18 = *(void **)this;
        std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
        memset(&v46, 0, sizeof(v46));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v46, (long long *)v59, *((long long **)&v59 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v59 + 1) - v59) >> 3));
        memset(&v45, 0, sizeof(v45));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v45, (long long *)v68, (long long *)v69, 0xAAAAAAAAAAAAAAABLL * (((char *)v69 - (char *)v68) >> 3));
        Espresso::sequential_builder::add<Espresso::elementwise_params>((uint64_t *)v41, v18, (uint64_t)__p, (uint64_t)&v57, (uint64_t)&v63, (long long *)v46.__r_.__value_.__l.__data_, (long long *)v46.__r_.__value_.__l.__size_, (long long **)&v45);
        v40.__r_.__value_.__r.__words[0] = (std::string::size_type)&v45;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
        v40.__r_.__value_.__r.__words[0] = (std::string::size_type)&v46;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
        if (v48 < 0) {
          operator delete(__p[0]);
        }
        int v19 = (std::__shared_weak_count *)v41[1];
        if (!v41[1]) {
          goto LABEL_26;
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v19);
LABEL_26:
      __p[0] = &v68;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      int v68 = (void **)&v59;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v68);
      ++v7;
      uint64_t v6 = v49;
      v8 += 72;
    }
    while (v7 < 0x8E38E38E38E38E39 * ((v50 - v49) >> 3));
  }
  if (**((unsigned char **)this + 2))
  {
    LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v54);
  }
  else
  {
    int v25 = (uint64_t **)*((void *)this + 1);
    int v68 = 0;
    int v69 = 0;
    unint64_t v70 = 0;
    uint64_t v27 = v51;
    uint64_t v26 = v52;
    if (v51 == v52)
    {
      uint64_t v31 = 0;
      uint64_t v32 = 0;
      uint64_t v28 = (uint64_t)v37;
    }
    else
    {
      uint64_t v28 = (uint64_t)v37;
      do
      {
        uint64_t v29 = (long long *)std::map<std::string,std::string>::at((uint64_t)v25, v27);
        BOOL v30 = v69;
        if ((unint64_t)v69 >= v70)
        {
          uint64_t v31 = (long long *)std::vector<Espresso::layer_shape>::__push_back_slow_path<Espresso::layer_shape const&>((uint64_t *)&v68, v29);
        }
        else
        {
          std::vector<Espresso::layer_shape>::__construct_one_at_end[abi:ne180100]<Espresso::layer_shape const&>((uint64_t)&v68, v29);
          uint64_t v31 = (long long *)&v30[2].__r_.__value_.__r.__words[2];
        }
        int v69 = (std::string *)v31;
        uint64_t v27 = (long long *)((char *)v27 + 24);
      }
      while (v27 != v26);
      uint64_t v32 = (int *)v68;
    }
    EspressoConverter::validateEqualInputShapes(v28, v32, (int *)v31);
    long long v63 = *(_OWORD *)v68;
    long long v64 = *((_OWORD *)v68 + 1);
    uint64_t v65 = v68[4];
    long long v66 = 0uLL;
    uint64_t v67 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v66, v68[5], (uint64_t)v68[6], ((unsigned char *)v68[6] - (unsigned char *)v68[5]) >> 2);
    long long v59 = v63;
    long long v60 = v64;
    uint64_t v33 = (char *)v66;
    uint64_t v61 = v65;
    memset(v62, 0, sizeof(v62));
    uint64_t v34 = *((void *)&v66 + 1);
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v62, (const void *)v66, *((uint64_t *)&v66 + 1), (uint64_t)(*((void *)&v66 + 1) - v66) >> 2);
    EspressoConverter::validateShape((int *)&v59, *(void *)(v28 + 112), (uint64_t)v54);
    if (v62[0]) {
      operator delete(v62[0]);
    }
    __p[0] = v54;
    uint64_t v35 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v25, v54, (long long **)__p);
    long long v36 = v64;
    *(_OWORD *)(v35 + 5CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = v63;
    *(_OWORD *)(v35 + 72) = v36;
    *((void *)v35 + 11) = v65;
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v35 + 96, v33, v34, (v34 - (uint64_t)v33) >> 2);
    if (v33) {
      operator delete(v33);
    }
    *(void *)&long long v63 = &v68;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v63);
  }
  *(void *)&long long v63 = &v49;
  std::vector<std::pair<std::pair<std::string,std::string>,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v63);
  *(void *)&long long v63 = &v51;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v63);
  *(void *)&long long v63 = &v54;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v63);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v57.__r_.__value_.__l.__data_);
  }
}

void sub_19EA9D484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  if (v55) {
    operator delete(v55);
  }
  *(void *)(v56 - 208) = v56 - 136;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)(v56 - 208));
  *(void *)(v56 - 208) = &a34;
  std::vector<std::pair<std::pair<std::string,std::string>,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v56 - 208));
  *(void *)(v56 - 208) = &a37;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v56 - 208));
  *(void *)(v56 - 208) = &a40;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v56 - 208));
  if (a48 < 0) {
    operator delete(a43);
  }
  _Unwind_Resume(a1);
}

BOOL LayerTranslator::addUniLSTM(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  int v4 = (long long *)*((void *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v204, *(const std::string::value_type **)v4, *((void *)v4 + 1));
  }
  else
  {
    long long v5 = *v4;
    v204.__r_.__value_.__r.__words[2] = *((void *)v4 + 2);
    *(_OWORD *)&v204.__r_.__value_.__l.__data_ = v5;
  }
  std::vector<std::string>::pointer v202 = 0;
  uint64_t v201 = 0;
  uint64_t v203 = 0;
  int v198 = 0;
  uint64_t v199 = 0;
  uint64_t v200 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v201, (uint64_t *)&v198, *((void *)this + 1));
  if (*((_DWORD *)a2 + 35) == 420)
  {
    unint64_t v7 = (const CoreML::Specification::UniDirectionalLSTMLayerParams *)*((void *)a2 + 16);
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    unint64_t v7 = (const CoreML::Specification::UniDirectionalLSTMLayerParams *)&CoreML::Specification::_UniDirectionalLSTMLayerParams_default_instance_;
  }
  CoreML::Specification::UniDirectionalLSTMLayerParams::UniDirectionalLSTMLayerParams((CoreML::Specification::UniDirectionalLSTMLayerParams *)v190, v7);
  if (v193) {
    uint64_t v8 = v193;
  }
  else {
    uint64_t v8 = (const CoreML::Specification::LSTMParams *)&CoreML::Specification::_LSTMParams_default_instance_;
  }
  CoreML::Specification::LSTMParams::LSTMParams((CoreML::Specification::LSTMParams *)&v182, v8);
  __asm { FMOV            V8.2S, #1.0 }
  uint64_t v160 = _D8;
  if (_ZF) {
    std::string v15 = &CoreML::Specification::_LSTMWeightParams_default_instance_;
  }
  else {
    std::string v15 = v194;
  }
  uint64_t v162 = _D8;
  uint64_t v164 = _D8;
  int v161 = 2;
  int v163 = 0;
  uint64_t v166 = _D8;
  uint64_t v168 = _D8;
  int v165 = 0;
  int v167 = 2;
  uint64_t v170 = _D8;
  unint64_t v171 = 512;
  int v169 = 0;
  int v172 = 1065353216;
  long long v173 = xmmword_19EC35D70;
  uint64_t v175 = 0x100000000;
  uint64_t v176 = 1065353216;
  int v174 = 1112014848;
  int v177 = 1065353216;
  uint64_t v178 = 0;
  __int16 v181 = 0;
  uint64_t v179 = 1;
  uint64_t v159 = 0;
  uint64_t v180 = v185;
  unsigned int __val = v196;
  if ((int)v196 < 1)
  {
    exceptiounint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v206, __val);
    v123 = std::string::insert(&v206, 0, "output std::string::size_type size = ");
    long long v124 = *(_OWORD *)&v123->__r_.__value_.__l.__data_;
    v212.__r_.__value_.__r.__words[0] = v123->__r_.__value_.__r.__words[2];
    long long v211 = v124;
    v123->__r_.__value_.__l.__size_ = 0;
    v123->__r_.__value_.__r.__words[2] = 0;
    v123->__r_.__value_.__r.__words[0] = 0;
    uint64_t v125 = std::string::append((std::string *)&v211, " not allowed in layer ");
    long long v126 = *(_OWORD *)&v125->__r_.__value_.__l.__data_;
    v215.__r_.__value_.__r.__words[2] = v125->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v215.__r_.__value_.__l.__data_ = v126;
    v125->__r_.__value_.__l.__size_ = 0;
    v125->__r_.__value_.__r.__words[2] = 0;
    v125->__r_.__value_.__r.__words[0] = 0;
    if ((v204.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v127 = &v204;
    }
    else {
      char v127 = (std::string *)v204.__r_.__value_.__r.__words[0];
    }
    if ((v204.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v204.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v204.__r_.__value_.__l.__size_;
    }
    uint64_t v129 = std::string::append(&v215, (const std::string::value_type *)v127, size);
    long long v130 = *(_OWORD *)&v129->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v129->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v130;
    v129->__r_.__value_.__l.__size_ = 0;
    v129->__r_.__value_.__r.__words[2] = 0;
    v129->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &__str);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  unsigned int v16 = v195;
  if ((int)v195 <= 0)
  {
    size_t v131 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v206, v16);
    v132 = std::string::insert(&v206, 0, "input std::string::size_type size = ");
    long long v133 = *(_OWORD *)&v132->__r_.__value_.__l.__data_;
    v212.__r_.__value_.__r.__words[0] = v132->__r_.__value_.__r.__words[2];
    long long v211 = v133;
    v132->__r_.__value_.__l.__size_ = 0;
    v132->__r_.__value_.__r.__words[2] = 0;
    v132->__r_.__value_.__r.__words[0] = 0;
    long long v134 = std::string::append((std::string *)&v211, " not allowed in layer ");
    long long v135 = *(_OWORD *)&v134->__r_.__value_.__l.__data_;
    v215.__r_.__value_.__r.__words[2] = v134->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v215.__r_.__value_.__l.__data_ = v135;
    v134->__r_.__value_.__l.__size_ = 0;
    v134->__r_.__value_.__r.__words[2] = 0;
    v134->__r_.__value_.__r.__words[0] = 0;
    if ((v204.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v136 = &v204;
    }
    else {
      uint64_t v136 = (std::string *)v204.__r_.__value_.__r.__words[0];
    }
    if ((v204.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v137 = HIBYTE(v204.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v137 = v204.__r_.__value_.__l.__size_;
    }
    uint64_t v138 = std::string::append(&v215, (const std::string::value_type *)v136, v137);
    long long v139 = *(_OWORD *)&v138->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v138->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v139;
    v138->__r_.__value_.__l.__size_ = 0;
    v138->__r_.__value_.__r.__words[2] = 0;
    v138->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v131, &__str);
    __cxa_throw(v131, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  unint64_t v171 = __PAIR64__(v195, v196);
  if (0xAAAAAAAAAAAAAAABLL * ((v202 - v201) >> 3) >= 4)
  {
    char v140 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3C1380](v140, "Recurrent layer: too many output blobs.");
    goto LABEL_265;
  }
  if (v202 - v201 != 72)
  {
    char v140 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3C1380](v140, "Recurrent layer: too few output blobs.");
LABEL_265:
    __cxa_throw(v140, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((char *)v199 - (char *)v198) >> 3) >= 4)
  {
    std::string::size_type v141 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3C1380](v141, "Recurrent layer: too many input blobs.");
    __cxa_throw(v141, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int v143 = v186;
  if (!v186) {
    DWORD2(v173) = 0;
  }
  float v17 = 1.0;
  if (!v187) {
    float v17 = 0.0;
  }
  int v172 = LODWORD(v17);
  if (v188) {
    LODWORD(v173) = 1;
  }
  if (v189) {
    LODWORD(v175) = 1;
  }
  float v18 = v184;
  if (v184 < 0.00001) {
    float v18 = 50.0;
  }
  int v174 = LODWORD(v18);
  if (v191 != 3)
  {
    uint64_t v142 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3C1380](v142, "LSTM layer: must provide 3 activations");
    __cxa_throw(v142, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int v161 = EspressoConverter::CoreMLToEspressoRNNActivation((EspressoConverter *)*(unsigned int *)(v192[1] + 28), v9);
  uint64_t v162 = _D8;
  int v163 = EspressoConverter::CoreMLToEspressoRNNActivation((EspressoConverter *)*(unsigned int *)(v192[2] + 28), v19);
  uint64_t v164 = _D8;
  HIDWORD(v159) = EspressoConverter::CoreMLToEspressoRNNActivation((EspressoConverter *)*(unsigned int *)(v192[3] + 28), v20);
  uint64_t v160 = _D8;
  uint64_t v144 = this;
  if (v197)
  {
    unsigned int v21 = v198;
    if ((v198->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v22 = HIBYTE(v198->__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v22 = v198->__r_.__value_.__l.__size_;
    }
    p_str = &__str;
    std::string::basic_string[abi:ne180100]((uint64_t)&__str, v22 + 11);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    if (v22)
    {
      if ((v21->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v24 = v21;
      }
      else {
        long long v24 = (std::string *)v21->__r_.__value_.__r.__words[0];
      }
      memmove(p_str, v24, v22);
    }
    strcpy((char *)p_str + v22, "_prereverse");
    memset(&v215, 0, sizeof(v215));
    v215.__r_.__value_.__l.__size_ = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v215, (long long *)&__str);
    int v25 = (uint64_t **)*((void *)v144 + 1);
    v206.__r_.__value_.__r.__words[0] = (std::string::size_type)v198;
    uint64_t v26 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v25, v198, (long long **)&v206);
    uint64_t v27 = (uint64_t **)*((void *)v144 + 1);
    v206.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
    uint64_t v28 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v27, &__str, (long long **)&v206);
    long long v29 = *(_OWORD *)(v26 + 56);
    long long v30 = *(_OWORD *)(v26 + 72);
    *((void *)v28 + 11) = *((void *)v26 + 11);
    *(_OWORD *)(v28 + 72) = v30;
    *(_OWORD *)(v28 + 5CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = v29;
    if (v28 != v26) {
      std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v28 + 96, *((char **)v26 + 12), *((void *)v26 + 13), (uint64_t)(*((void *)v26 + 13) - *((void *)v26 + 12)) >> 2);
    }
    long long v211 = 0uLL;
    v212.__r_.__value_.__r.__words[0] = 0;
    *((void *)&v211 + 1) = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v211, (long long *)v198);
    uint64_t v31 = *(void **)v144;
    std::string::basic_string[abi:ne180100]<0>(&v206, "sequence_reverse");
    if ((v204.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v32 = HIBYTE(v204.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v32 = v204.__r_.__value_.__l.__size_;
    }
    p_p = &__p;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v32 + 11);
    if (v155 < 0) {
      p_p = __p;
    }
    if (v32)
    {
      if ((v204.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v34 = &v204;
      }
      else {
        uint64_t v34 = (std::string *)v204.__r_.__value_.__r.__words[0];
      }
      memmove(p_p, v34, v32);
    }
    strcpy((char *)p_p + v32, "_prereverse");
    memset(&v152, 0, sizeof(v152));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v152, (long long *)v211, *((long long **)&v211 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v211 + 1) - v211) >> 3));
    memset(&v151, 0, sizeof(v151));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v151, (long long *)v215.__r_.__value_.__l.__data_, (long long *)v215.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v215.__r_.__value_.__l.__size_ - v215.__r_.__value_.__r.__words[0]) >> 3));
    this = v144;
    Espresso::sequential_builder::add<Espresso::sequence_reverse_params>(&v156, v31, (uint64_t)&v206, (uint64_t)&__p, (uint64_t)&v158, (long long *)v152.__r_.__value_.__l.__data_, (long long *)v152.__r_.__value_.__l.__size_, (long long **)&v151);
    unint64_t v205 = &v151;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v205);
    unint64_t v205 = &v152;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v205);
    if (v155 < 0) {
      operator delete(__p);
    }
    if (SHIBYTE(v206.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v206.__r_.__value_.__l.__data_);
    }
    std::string::operator=(v198, &__str);
    if (v157) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v157);
    }
    v206.__r_.__value_.__r.__words[0] = (std::string::size_type)&v211;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v206);
    *(void *)&long long v211 = &v215;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v211);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
  uint64_t v35 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(&__str, "rnn_arch");
  memset(&v150, 0, sizeof(v150));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v150, (long long *)v198, (long long *)v199, 0xAAAAAAAAAAAAAAABLL * (((char *)v199 - (char *)v198) >> 3));
  memset(&v149, 0, sizeof(v149));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v149, (long long *)v201, (long long *)v202, 0xAAAAAAAAAAAAAAABLL * ((v202 - v201) >> 3));
  Espresso::sequential_builder::add<Espresso::rnn_arch_params>((uint64_t *)&__p, v35, (uint64_t)&__str, (uint64_t)&v204, (uint64_t)&v159, (long long *)v150.__r_.__value_.__l.__data_, (long long *)v150.__r_.__value_.__l.__size_, (long long **)&v149);
  v215.__r_.__value_.__r.__words[0] = (std::string::size_type)&v149;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v215);
  v215.__r_.__value_.__r.__words[0] = (std::string::size_type)&v150;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v215);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  uint64_t v37 = __p;
  long long v36 = v154;
  if (v154) {
    atomic_fetch_add_explicit(&v154->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v15[2]) {
    std::string v38 = (uint64_t *)v15[2];
  }
  else {
    std::string v38 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  if (v15[3]) {
    std::string v39 = (uint64_t *)v15[3];
  }
  else {
    std::string v39 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  if (v15[5]) {
    std::string v40 = (uint64_t *)v15[5];
  }
  else {
    std::string v40 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  if (v15[4]) {
    int v41 = (uint64_t *)v15[4];
  }
  else {
    int v41 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  v148[0] = (uint64_t)v37;
  v148[1] = (uint64_t)v36;
  if (v36) {
    atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v145 = v36;
  std::string::basic_string[abi:ne180100]<0>(&__str, "Uni-directional LSTM");
  std::string::basic_string[abi:ne180100]<0>(&v215, "W_x");
  EspressoConverter::setFourRecurrentWeightBlobs(v38, v39, v40, v41, v148, v16, __val, (const void **)&__str.__r_.__value_.__l.__data_, (const void **)&v215.__r_.__value_.__l.__data_);
  if (SHIBYTE(v215.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v215.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v145) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v145);
  }
  if (v15[6]) {
    std::string::size_type v42 = (uint64_t *)v15[6];
  }
  else {
    std::string::size_type v42 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  if (v15[7]) {
    uint64_t v43 = (uint64_t *)v15[7];
  }
  else {
    uint64_t v43 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  if (v15[9]) {
    long long v44 = (uint64_t *)v15[9];
  }
  else {
    long long v44 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  if (v15[8]) {
    std::string v45 = (uint64_t *)v15[8];
  }
  else {
    std::string v45 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  v147[0] = (uint64_t)v37;
  v147[1] = (uint64_t)v145;
  if (v145) {
    atomic_fetch_add_explicit(&v145->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(&__str, "Uni-directional LSTM");
  std::string::basic_string[abi:ne180100]<0>(&v215, "W_h");
  EspressoConverter::setFourRecurrentWeightBlobs(v42, v43, v44, v45, v147, __val, __val, (const void **)&__str.__r_.__value_.__l.__data_, (const void **)&v215.__r_.__value_.__l.__data_);
  if (SHIBYTE(v215.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v215.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v145) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v145);
  }
  if (v143)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v215, 1, 1, 4 * __val, 1);
    std::string v46 = (uint64_t *)v15[10];
    std::string::size_type v47 = v215.__r_.__value_.__r.__words[0];
    char v48 = *(void **)(v215.__r_.__value_.__r.__words[0] + 24);
    std::string::basic_string[abi:ne180100]<0>(&__str, "Uni-directional LSTM");
    if (v46) {
      uint64_t v49 = v46;
    }
    else {
      uint64_t v49 = &CoreML::Specification::_WeightParams_default_instance_;
    }
    EspressoConverter::setRecurrentBiasBlobToExternalPtr((uint64_t)v49, v48, __val, (const void **)&__str.__r_.__value_.__l.__data_);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    uint64_t v50 = (uint64_t *)v15[11];
    uint64_t v51 = *(void *)(v47 + 24);
    std::string::basic_string[abi:ne180100]<0>(&__str, "Uni-directional LSTM");
    if (v50) {
      uint64_t v52 = v50;
    }
    else {
      uint64_t v52 = &CoreML::Specification::_WeightParams_default_instance_;
    }
    EspressoConverter::setRecurrentBiasBlobToExternalPtr((uint64_t)v52, (void *)(v51 + 4 * __val), __val, (const void **)&__str.__r_.__value_.__l.__data_);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    uint64_t v53 = (uint64_t *)v15[13];
    uint64_t v54 = *(void *)(v47 + 24);
    std::string::basic_string[abi:ne180100]<0>(&__str, "Uni-directional LSTM");
    if (v53) {
      uint64_t v55 = v53;
    }
    else {
      uint64_t v55 = &CoreML::Specification::_WeightParams_default_instance_;
    }
    EspressoConverter::setRecurrentBiasBlobToExternalPtr((uint64_t)v55, (void *)(v54 + 8 * __val), __val, (const void **)&__str.__r_.__value_.__l.__data_);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    uint64_t v56 = (uint64_t *)v15[12];
    uint64_t v57 = *(void *)(v47 + 24);
    std::string::basic_string[abi:ne180100]<0>(&__str, "Uni-directional LSTM");
    if (v56) {
      unsigned int v58 = v56;
    }
    else {
      unsigned int v58 = &CoreML::Specification::_WeightParams_default_instance_;
    }
    EspressoConverter::setRecurrentBiasBlobToExternalPtr((uint64_t)v58, (void *)(v57 + 4 * (int)(3 * __val)), __val, (const void **)&__str.__r_.__value_.__l.__data_);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    long long v211 = 0uLL;
    std::string::basic_string[abi:ne180100]<0>(&__str, "b");
    uint64_t v59 = 0;
    uint64_t v60 = *(int *)(v47 + 8);
    do
    {
      v60 *= *(int *)(v47 + 12 + v59);
      v59 += 4;
    }
    while (v59 != 12);
    (*(void (**)(void *, long long *, std::string *, void, uint64_t, void))(*(void *)v37 + 168))(v37, &v211, &__str, *(void *)(v47 + 24), 4 * v60, 0);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    if (*((void *)&v211 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v211 + 1));
    }
    if (v215.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v215.__r_.__value_.__l.__size_);
    }
  }
  if (v188)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v215, 1, 1, 3 * __val, 1);
    uint64_t v61 = (uint64_t *)v15[14];
    std::string::size_type v62 = v215.__r_.__value_.__r.__words[0];
    long long v63 = *(void **)(v215.__r_.__value_.__r.__words[0] + 24);
    std::string::basic_string[abi:ne180100]<0>(&__str, "Uni-directional LSTM");
    if (v61) {
      long long v64 = v61;
    }
    else {
      long long v64 = &CoreML::Specification::_WeightParams_default_instance_;
    }
    EspressoConverter::setRecurrentBiasBlobToExternalPtr((uint64_t)v64, v63, __val, (const void **)&__str.__r_.__value_.__l.__data_);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    uint64_t v65 = (uint64_t *)v15[15];
    uint64_t v66 = *(void *)(v62 + 24);
    std::string::basic_string[abi:ne180100]<0>(&__str, "Uni-directional LSTM");
    if (v65) {
      uint64_t v67 = v65;
    }
    else {
      uint64_t v67 = &CoreML::Specification::_WeightParams_default_instance_;
    }
    EspressoConverter::setRecurrentBiasBlobToExternalPtr((uint64_t)v67, (void *)(v66 + 4 * __val), __val, (const void **)&__str.__r_.__value_.__l.__data_);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    int v68 = (uint64_t *)v15[16];
    uint64_t v69 = *(void *)(v62 + 24);
    std::string::basic_string[abi:ne180100]<0>(&__str, "Uni-directional LSTM");
    if (v68) {
      unint64_t v70 = v68;
    }
    else {
      unint64_t v70 = &CoreML::Specification::_WeightParams_default_instance_;
    }
    EspressoConverter::setRecurrentBiasBlobToExternalPtr((uint64_t)v70, (void *)(v69 + 8 * __val), __val, (const void **)&__str.__r_.__value_.__l.__data_);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    long long v211 = 0uLL;
    std::string::basic_string[abi:ne180100]<0>(&__str, "p");
    uint64_t v71 = 0;
    uint64_t v72 = *(int *)(v62 + 8);
    do
    {
      v72 *= *(int *)(v62 + 12 + v71);
      v71 += 4;
    }
    while (v71 != 12);
    (*(void (**)(void *, long long *, std::string *, void, uint64_t, void))(*(void *)v37 + 168))(v37, &v211, &__str, *(void *)(v62 + 24), 4 * v72, 0);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    if (*((void *)&v211 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v211 + 1));
    }
    if (v215.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v215.__r_.__value_.__l.__size_);
    }
  }
  if (v15[10]) {
    int v73 = (uint64_t *)v15[10];
  }
  else {
    int v73 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  uint64_t v74 = v73[5];
  if (*(char *)(v74 + 23) < 0) {
    uint64_t v75 = *(void *)(v74 + 8);
  }
  else {
    uint64_t v75 = *(unsigned __int8 *)(v74 + 23);
  }
  uint64_t v76 = v73[6];
  if (*(char *)(v76 + 23) < 0) {
    uint64_t v77 = *(void *)(v76 + 8);
  }
  else {
    uint64_t v77 = *(unsigned __int8 *)(v76 + 23);
  }
  int v78 = *((_DWORD *)v73 + 4);
  uint64_t v79 = v73[7];
  if (*(char *)(v79 + 23) < 0) {
    uint64_t v80 = *(void *)(v79 + 8);
  }
  else {
    uint64_t v80 = *(unsigned __int8 *)(v79 + 23);
  }
  if (v78 <= 0) {
    int v81 = 1;
  }
  else {
    int v81 = 2;
  }
  if (v75) {
    int v82 = v81;
  }
  else {
    int v82 = v78 > 0;
  }
  if (v77) {
    ++v82;
  }
  if (v80) {
    ++v82;
  }
  if (v78 <= 0 && v82 == 1)
  {
    if ((*(unsigned char *)(v74 + 23) & 0x80) != 0)
    {
      if (*(void *)(v74 + 8)) {
        goto LABEL_183;
      }
    }
    else if (*(unsigned char *)(v74 + 23))
    {
LABEL_183:
      BOOL v83 = 1;
      goto LABEL_212;
    }
  }
  if (v15[6]) {
    uint64_t v84 = (uint64_t *)v15[6];
  }
  else {
    uint64_t v84 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  uint64_t v85 = v84[5];
  uint64_t v86 = *(unsigned __int8 *)(v85 + 23);
  if (*(char *)(v85 + 23) < 0) {
    uint64_t v87 = *(void *)(v85 + 8);
  }
  else {
    uint64_t v87 = *(unsigned __int8 *)(v85 + 23);
  }
  uint64_t v88 = v84[6];
  if (*(char *)(v88 + 23) < 0) {
    uint64_t v89 = *(void *)(v88 + 8);
  }
  else {
    uint64_t v89 = *(unsigned __int8 *)(v88 + 23);
  }
  int v90 = *((_DWORD *)v84 + 4);
  uint64_t v91 = v84[7];
  if (*(char *)(v91 + 23) < 0) {
    uint64_t v92 = *(void *)(v91 + 8);
  }
  else {
    uint64_t v92 = *(unsigned __int8 *)(v91 + 23);
  }
  BOOL v83 = 0;
  if (v90 <= 0) {
    int v93 = 1;
  }
  else {
    int v93 = 2;
  }
  if (v87) {
    int v94 = v93;
  }
  else {
    int v94 = v90 > 0;
  }
  if (v89) {
    ++v94;
  }
  if (v92) {
    ++v94;
  }
  if (v90 <= 0 && v94 == 1)
  {
    if ((v86 & 0x80) != 0) {
      uint64_t v86 = *(void *)(v85 + 8);
    }
    BOOL v83 = v86 != 0;
  }
LABEL_212:
  if (**((unsigned char **)v144 + 2))
  {
    LayerTranslator::defaultUnknownNdShape((char *)v144, (uint64_t *)&v201);
  }
  else
  {
    long long v95 = (uint64_t **)*((void *)v144 + 1);
    if (*((_DWORD *)a2 + 35) == 420)
    {
      uint64_t v96 = (const CoreML::Specification::UniDirectionalLSTMLayerParams *)*((void *)a2 + 16);
    }
    else
    {
      CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v144);
      uint64_t v96 = (const CoreML::Specification::UniDirectionalLSTMLayerParams *)&CoreML::Specification::_UniDirectionalLSTMLayerParams_default_instance_;
    }
    CoreML::Specification::UniDirectionalLSTMLayerParams::UniDirectionalLSTMLayerParams((CoreML::Specification::UniDirectionalLSTMLayerParams *)&v215, v96);
    int v97 = v216;
    unint64_t v98 = v198;
    for (uint64_t i = v199; v98 != i; ++v98)
    {
      uint64_t v214 = 0;
      *(_OWORD *)&v212.__r_.__value_.__r.__words[1] = 0u;
      long long v213 = 0u;
      long long v211 = xmmword_19EC7B870;
      v212.__r_.__value_.__r.__words[0] = 0xFFFFFFFF00000001;
      uint64_t v100 = std::map<std::string,std::string>::at((uint64_t)v95, v98);
      long long v211 = *(_OWORD *)v100;
      *(_OWORD *)&v212.__r_.__value_.__l.__data_ = *(_OWORD *)(v100 + 16);
      long long v101 = *(char **)(v100 + 40);
      v212.__r_.__value_.__r.__words[2] = *(void *)(v100 + 32);
      std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)&v213, v101, *(void *)(v100 + 48), (uint64_t)(*(void *)(v100 + 48) - (void)v101) >> 2);
      if (DWORD1(v211) != -1 && DWORD1(v211) != 1)
      {
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__str);
        std::string v114 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str.__r_.__value_.__r.__words[2], (uint64_t)"LSTM layer: '", 13);
        uint64_t v115 = *((void *)a2 + 14);
        int v116 = *(char *)(v115 + 23);
        if (v116 >= 0) {
          uint64_t v117 = *((void *)a2 + 14);
        }
        else {
          uint64_t v117 = *(void *)v115;
        }
        if (v116 >= 0) {
          uint64_t v118 = *(unsigned __int8 *)(v115 + 23);
        }
        else {
          uint64_t v118 = *(void *)(v115 + 8);
        }
        std::string::size_type v119 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v114, v117, v118);
        unint64_t v120 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v119, (uint64_t)"': height dimension of the input blob must be 1.", 48);
        std::endl[abi:ne180100]<char,std::char_traits<char>>(v120);
        int v121 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::stringbuf::str();
        std::runtime_error::runtime_error(v121, &v206);
        __cxa_throw(v121, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      if (v211 != -1 && v211 != 1)
      {
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__str);
        long long v106 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str.__r_.__value_.__r.__words[2], (uint64_t)"LSTM layer: '", 13);
        uint64_t v107 = *((void *)a2 + 14);
        int v108 = *(char *)(v107 + 23);
        if (v108 >= 0) {
          uint64_t v109 = *((void *)a2 + 14);
        }
        else {
          uint64_t v109 = *(void *)v107;
        }
        if (v108 >= 0) {
          uint64_t v110 = *(unsigned __int8 *)(v107 + 23);
        }
        else {
          uint64_t v110 = *(void *)(v107 + 8);
        }
        int v111 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v106, v109, v110);
        int v112 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v111, (uint64_t)"': width dimension of the input blob must be 1.", 47);
        std::endl[abi:ne180100]<char,std::char_traits<char>>(v112);
        uint64_t v113 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::stringbuf::str();
        std::runtime_error::runtime_error(v113, &v206);
        __cxa_throw(v113, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      if ((void)v213) {
        operator delete((void *)v213);
      }
    }
    size_t v102 = v201;
    for (uint64_t j = v202; v102 != j; v102 += 24)
    {
      __str.__r_.__value_.__r.__words[0] = 0x100000001;
      LODWORD(__str.__r_.__value_.__r.__words[1]) = v97;
      *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 4) = -1;
      HIDWORD(__str.__r_.__value_.__r.__words[2]) = -1;
      long long v208 = 0u;
      long long v209 = 0u;
      uint64_t v210 = 0;
      EspressoConverter::validateShape((int *)&__str, *((void *)a2 + 14), (uint64_t)v201);
      *(void *)&long long v211 = v102;
      uint64_t v104 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v95, v102, (long long **)&v211);
      *((void *)v104 + 7) = 0x100000001;
      *((_DWORD *)v104 + 1CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = v97;
      *(void *)(v104 + 68) = -1;
      *((_DWORD *)v104 + 19) = -1;
      *((void *)v104 + 10) = 0;
      *((void *)v104 + 11) = 0;
      std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v104 + 96, 0, 0, 0);
    }
    CoreML::Specification::UniDirectionalLSTMLayerParams::~UniDirectionalLSTMLayerParams((CoreML::Specification::UniDirectionalLSTMLayerParams *)&v215);
  }
  if (v145) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v145);
  }
  if (v154) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v154);
  }
  long long v182 = &unk_1EF0CE698;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(&v183);
  CoreML::Specification::UniDirectionalLSTMLayerParams::~UniDirectionalLSTMLayerParams((CoreML::Specification::UniDirectionalLSTMLayerParams *)v190);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v198;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v201;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  if (SHIBYTE(v204.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v204.__r_.__value_.__l.__data_);
  }
  return v83;
}

void sub_19EA9E890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,std::__shared_weak_count *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,uint64_t a63)
{
  if (SLOBYTE(STACK[0x25F]) < 0)
  {
    operator delete((void *)STACK[0x248]);
    if ((v72 & 1) == 0)
    {
LABEL_6:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&STACK[0x260]);
      uint64_t v75 = *(void **)(v73 - 216);
      if (v75) {
        operator delete(v75);
      }
      CoreML::Specification::UniDirectionalLSTMLayerParams::~UniDirectionalLSTMLayerParams((CoreML::Specification::UniDirectionalLSTMLayerParams *)(v73 - 192));
      if (a12) {
        std::__shared_weak_count::__release_shared[abi:ne180100](a12);
      }
      if (a32) {
        std::__shared_weak_count::__release_shared[abi:ne180100](a32);
      }
      a57 = (uint64_t)&unk_1EF0CE698;
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(&a58);
      CoreML::Specification::UniDirectionalLSTMLayerParams::~UniDirectionalLSTMLayerParams((CoreML::Specification::UniDirectionalLSTMLayerParams *)&a61);
      a37 = (uint64_t)&a71;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a37);
      a37 = (uint64_t)&STACK[0x208];
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a37);
      if (SLOBYTE(STACK[0x237]) < 0) {
        operator delete((void *)STACK[0x220]);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v72)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v71);
  goto LABEL_6;
}

void sub_19EA9EB80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,unint64_t *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t v73 = *(void **)(v71 - 216);
  if (v73) {
    operator delete(v73);
  }
  CoreML::Specification::UniDirectionalLSTMLayerParams::~UniDirectionalLSTMLayerParams((CoreML::Specification::UniDirectionalLSTMLayerParams *)(v71 - 192));
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (a32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a32);
  }
  a57 = &unk_1EF0CE698;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(&a58);
  CoreML::Specification::UniDirectionalLSTMLayerParams::~UniDirectionalLSTMLayerParams((CoreML::Specification::UniDirectionalLSTMLayerParams *)&a61);
  a37 = (unint64_t *)&a71;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a37);
  a37 = &STACK[0x208];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a37);
  if (SLOBYTE(STACK[0x237]) < 0) {
    operator delete((void *)STACK[0x220]);
  }
  _Unwind_Resume(a1);
}

void sub_19EA9EBB4()
{
}

void sub_19EA9EBC0(void *a1)
{
}

void sub_19EA9EBCC()
{
}

void LayerTranslator::addWhereNonZero(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  int v4 = (long long *)*((void *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v19, *(const std::string::value_type **)v4, *((void *)v4 + 1));
  }
  else
  {
    long long v5 = *v4;
    v19.__r_.__value_.__r.__words[2] = *((void *)v4 + 2);
    *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v5;
  }
  unsigned int v16 = 0;
  float v17 = 0;
  uint64_t v18 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v16, (uint64_t *)&v13, *((void *)this + 1));
  uint64_t v6 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(&__p, "nonzero");
  memset(&v8, 0, sizeof(v8));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v8, v13, v14, 0xAAAAAAAAAAAAAAABLL * (((char *)v14 - (char *)v13) >> 3));
  memset(&v7, 0, sizeof(v7));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v7, v16, v17, 0xAAAAAAAAAAAAAAABLL * (((char *)v17 - (char *)v16) >> 3));
  memset(&v21, 0, sizeof(v21));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v21, (long long *)v8.__r_.__value_.__l.__data_, (long long *)v8.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8.__r_.__value_.__l.__size_ - v8.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v20, 0, sizeof(v20));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v20, (long long *)v7.__r_.__value_.__l.__data_, (long long *)v7.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7.__r_.__value_.__l.__size_ - v7.__r_.__value_.__r.__words[0]) >> 3));
  LODWORD(v23.__r_.__value_.__l.__data_) = (***(uint64_t (****)(void))(v6[14] + 8))(*(void *)(v6[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  uint64_t v24 = v11;
  int v25 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(&v23, 0, sizeof(v23));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v23, (long long *)v21.__r_.__value_.__l.__data_, (long long *)v21.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21.__r_.__value_.__l.__size_ - v21.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v22, 0, sizeof(v22));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v22, (long long *)v20.__r_.__value_.__l.__data_, (long long *)v20.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20.__r_.__value_.__l.__size_ - v20.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  uint64_t v26 = &v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
  uint64_t v26 = &v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  if (*v6) {
    Espresso::sequential_builder::add_shape_from_kernel();
  }
  v23.__r_.__value_.__r.__words[0] = (std::string::size_type)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v23.__r_.__value_.__r.__words[0] = (std::string::size_type)&v21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  v23.__r_.__value_.__r.__words[0] = (std::string::size_type)&v7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v23.__r_.__value_.__r.__words[0] = (std::string::size_type)&v8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  if (v10 < 0) {
    operator delete(__p);
  }
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v16);
  v23.__r_.__value_.__r.__words[0] = (std::string::size_type)&v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v23.__r_.__value_.__r.__words[0] = (std::string::size_type)&v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
}

void sub_19EA9EF58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char **__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,std::__shared_weak_count *a22,uint64_t a23,char *a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36)
{
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }
  *(void *)(v36 - 5CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = &a36;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v36 - 56));
  *(void *)(v36 - 5CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = v36 - 144;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v36 - 56));
  *(void *)(v36 - 5CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = &a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v36 - 56));
  *(void *)(v36 - 5CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = &a12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v36 - 56));
  if (a20 < 0) {
    operator delete(__p);
  }
  long long __p = &a24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  a24 = &a27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  if (a35 < 0) {
    operator delete(a30);
  }
  _Unwind_Resume(a1);
}

void LayerTranslator::addCustomLayer(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  v98[1] = *MEMORY[0x1E4F143B8];
  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  uint64_t v3 = (long long *)*((void *)a2 + 14);
  if (*((char *)v3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v88, *(const std::string::value_type **)v3, *((void *)v3 + 1));
  }
  else
  {
    long long v4 = *v3;
    v88.__r_.__value_.__r.__words[2] = *((void *)v3 + 2);
    *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v4;
  }
  uint64_t v85 = 0;
  uint64_t v86 = 0;
  uint64_t v87 = 0;
  int v82 = 0;
  BOOL v83 = 0;
  uint64_t v84 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v85, (uint64_t *)&v82, *((void *)this + 1));
  if (*((_DWORD *)a2 + 35) == 500)
  {
    uint64_t v6 = (void *)*((void *)a2 + 16);
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v5);
    uint64_t v6 = &CoreML::Specification::_CustomLayerParams_default_instance_;
  }
  std::string v7 = (long long *)v6[9];
  if (*((char *)v7 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v81, *(const std::string::value_type **)v7, *((void *)v7 + 1));
  }
  else
  {
    long long v8 = *v7;
    v81.__r_.__value_.__r.__words[2] = *((void *)v7 + 2);
    *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v8;
  }
  if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v9 = &v81;
  }
  else {
    uint64_t v9 = (std::string *)v81.__r_.__value_.__r.__words[0];
  }
  unint64_t v70 = [NSString stringWithUTF8String:v9];
  [MEMORY[0x1E4F611E0] registerBrickClass:NSClassFromString(&cfstr_Mlcustomlayerw.isa)];
  memset(v79, 0, sizeof(v79));
  *(_OWORD *)int v78 = 0u;
  MEMORY[0x19F3C1430](v78, "MLCustomLayerWrapper");
  id v10 = objc_alloc(MEMORY[0x1E4F1CA60]);
  int v97 = @"engineName";
  v98[0] = v70;
  uint64_t v11 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v98 forKeys:&v97 count:1];
  int v72 = (void *)[v10 initWithDictionary:v11];

  if (*((_DWORD *)a2 + 35) == 500)
  {
    uint64_t v13 = (void **)*((void *)a2 + 16);
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v12);
    uint64_t v13 = (void **)&CoreML::Specification::_CustomLayerParams_default_instance_;
  }
  google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::begin(&v95, v13[8]);
  while (v95.__r_.__value_.__r.__words[0])
  {
    uint64_t v14 = *(long long **)(v95.__r_.__value_.__r.__words[0] + 24);
    if (*((char *)v14 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v89, *(const std::string::value_type **)v14, *((void *)v14 + 1));
    }
    else
    {
      long long v15 = *v14;
      v89.__r_.__value_.__r.__words[2] = *((void *)v14 + 2);
      *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v15;
    }
    *(void *)&long long v90 = &unk_1EF0D9230;
    *((void *)&v90 + 1) = 0;
    DWORD2(v91) = 0;
    uint64_t v16 = *((void *)v14 + 4);
    if (v16) {
      google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((unint64_t *)&v90 + 1, v16 & 0xFFFFFFFFFFFFFFFELL);
    }
    HIDWORD(v91) = 0;
    int v17 = *((_DWORD *)v14 + 13);
    if (v17 <= 29)
    {
      if (v17 == 10)
      {
        uint64_t v21 = *((void *)v14 + 5);
        CoreML::Specification::CustomLayerParams_CustomLayerParamValue::clear_value((uint64_t)&v90);
        HIDWORD(v91) = 10;
        *(void *)&long long v91 = v21;
      }
      else if (v17 == 20)
      {
        CoreML::Specification::CustomLayerParams_CustomLayerParamValue::clear_value((uint64_t)&v90);
        HIDWORD(v91) = 20;
        *(void *)&long long v91 = &google::protobuf::internal::fixed_address_empty_string;
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
      }
    }
    else
    {
      switch(v17)
      {
        case 30:
          int v19 = *((_DWORD *)v14 + 10);
          CoreML::Specification::CustomLayerParams_CustomLayerParamValue::clear_value((uint64_t)&v90);
          HIDWORD(v91) = 30;
          LODWORD(v91) = v19;
          break;
        case 40:
          uint64_t v20 = *((void *)v14 + 5);
          CoreML::Specification::CustomLayerParams_CustomLayerParamValue::clear_value((uint64_t)&v90);
          HIDWORD(v91) = 40;
          *(void *)&long long v91 = v20;
          break;
        case 50:
          char v18 = *((unsigned char *)v14 + 40);
          CoreML::Specification::CustomLayerParams_CustomLayerParamValue::clear_value((uint64_t)&v90);
          HIDWORD(v91) = 50;
          LOBYTE(v91) = v18;
          break;
      }
    }
    if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string v22 = &v89;
    }
    else {
      std::string v22 = (std::string *)v89.__r_.__value_.__r.__words[0];
    }
    std::string v23 = [NSString stringWithUTF8String:v22];
    uint64_t v24 = 0;
    if (SHIDWORD(v91) > 29)
    {
      switch(HIDWORD(v91))
      {
        case 0x1E:
          uint64_t v25 = [NSNumber numberWithInt:v91];
          break;
        case 0x28:
          uint64_t v25 = [NSNumber numberWithLongLong:(void)v91];
          break;
        case 0x32:
          uint64_t v25 = [NSNumber numberWithBool:v91];
          break;
        default:
          goto LABEL_49;
      }
      goto LABEL_48;
    }
    switch(HIDWORD(v91))
    {
      case 0xA:
        uint64_t v25 = [NSNumber numberWithDouble:*(double *)&v91];
        goto LABEL_48;
      case 0x14:
        uint64_t v25 = objc_msgSend(NSString, "stringWithUTF8String:");
LABEL_48:
        uint64_t v24 = (void *)v25;
        break;
      case 0:
        exceptiounint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        uint64_t v27 = std::string::append(&v76, ", parameter key ");
        long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
        v77.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v28;
        v27->__r_.__value_.__l.__size_ = 0;
        v27->__r_.__value_.__r.__words[2] = 0;
        v27->__r_.__value_.__r.__words[0] = 0;
        if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v29 = &v89;
        }
        else {
          long long v29 = (std::string *)v89.__r_.__value_.__r.__words[0];
        }
        if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v89.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v89.__r_.__value_.__l.__size_;
        }
        uint64_t v31 = std::string::append(&v77, (const std::string::value_type *)v29, size);
        long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
        v93.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v32;
        v31->__r_.__value_.__l.__size_ = 0;
        v31->__r_.__value_.__r.__words[2] = 0;
        v31->__r_.__value_.__r.__words[0] = 0;
        uint64_t v33 = std::string::append(&v93, " has no value.");
        long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
        v94.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v94.__r_.__value_.__l.__data_ = v34;
        v33->__r_.__value_.__l.__size_ = 0;
        v33->__r_.__value_.__r.__words[2] = 0;
        v33->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, &v94);
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
LABEL_49:
    [v72 setValue:v24 forKey:v23];

    google::protobuf::MapPair<std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue>::~MapPair((uint64_t)&v89);
    google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::KeyValuePair const>::operator++((unsigned __int8 **)&v95);
  }
  if (**((unsigned char **)this + 2)) {
    [v72 setValue:MEMORY[0x1E4F1CC38] forKey:@"_internal_NDMode"];
  }
  uint64_t v35 = [MEMORY[0x1E4F28D90] dataWithJSONObject:v72 options:0 error:0];
  id v36 = (id) [[NSString alloc] initWithData:v35 encoding:4];
  std::string::basic_string[abi:ne180100]<0>(&v89, (char *)[v36 UTF8String]);
  if (SHIBYTE(v79[3]) < 0) {
    operator delete((void *)v79[1]);
  }
  *(std::string *)&v79[1] = v89;
  int v80 = -1431655765 * ((unint64_t)(v86 - v85) >> 3);
  uint64_t v37 = *(void **)this;
  uint64_t v69 = (void *)v35;
  std::string::basic_string[abi:ne180100]<0>(&v77, "brick");
  memset(&v74, 0, sizeof(v74));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v74, v82, v83, 0xAAAAAAAAAAAAAAABLL * (((char *)v83 - (char *)v82) >> 3));
  memset(&v73, 0, sizeof(v73));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v73, (long long *)v85, (long long *)v86, 0xAAAAAAAAAAAAAAABLL * ((v86 - v85) >> 3));
  memset(&v94, 0, sizeof(v94));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v94, (long long *)v74.__r_.__value_.__l.__data_, (long long *)v74.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v74.__r_.__value_.__l.__size_ - v74.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v93, 0, sizeof(v93));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v93, (long long *)v73.__r_.__value_.__l.__data_, (long long *)v73.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v73.__r_.__value_.__l.__size_ - v73.__r_.__value_.__r.__words[0]) >> 3));
  LODWORD(v89.__r_.__value_.__l.__data_) = (***(uint64_t (****)(void))(v37[14] + 8))(*(void *)(v37[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  *(_OWORD *)&v76.__r_.__value_.__l.__data_ = v75;
  if (*((void *)&v75 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v75 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  memset(&v89, 0, sizeof(v89));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v89, (long long *)v94.__r_.__value_.__l.__data_, (long long *)v94.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v94.__r_.__value_.__l.__size_ - v94.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v95, 0, sizeof(v95));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v95, (long long *)v93.__r_.__value_.__l.__data_, (long long *)v93.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v93.__r_.__value_.__l.__size_ - v93.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  uint64_t v96 = &v95;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v96);
  uint64_t v96 = &v89;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v96);
  if (v76.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v76.__r_.__value_.__l.__size_);
  }
  if (*v37) {
    Espresso::sequential_builder::add_shape_from_kernel();
  }
  v89.__r_.__value_.__r.__words[0] = (std::string::size_type)&v93;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v89);
  v89.__r_.__value_.__r.__words[0] = (std::string::size_type)&v94;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v89);
  v89.__r_.__value_.__r.__words[0] = (std::string::size_type)&v73;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v89);
  v89.__r_.__value_.__r.__words[0] = (std::string::size_type)&v74;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v89);
  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v77.__r_.__value_.__l.__data_);
  }
  if (*((_DWORD *)a2 + 35) == 500)
  {
    std::string v39 = (int *)*((void *)a2 + 16);
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v38);
    std::string v39 = (int *)&CoreML::Specification::_CustomLayerParams_default_instance_;
  }
  std::vector<int>::size_type v40 = v39[6];
  int v41 = (std::__shared_weak_count *)*((void *)&v75 + 1);
  if (*((void *)&v75 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v75 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  std::vector<unsigned char>::vector(&v95, 4uLL);
  *v95.__r_.__value_.__l.__data_ = BYTE3(v40);
  *(unsigned char *)(v95.__r_.__value_.__r.__words[0] + 1) = BYTE2(v40);
  *(unsigned char *)(v95.__r_.__value_.__r.__words[0] + 2) = BYTE1(v40);
  *(unsigned char *)(v95.__r_.__value_.__r.__words[0] + 3) = v40;
  std::vector<int>::vector((std::vector<int> *)&v94, v40);
  if (v40)
  {
    if ((v40 & 0x80000000) != 0) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v42 = operator new(8 * v40);
    bzero(v42, 8 * v40);
    uint64_t v43 = 0;
    for (unint64_t i = 0; i != v40; ++i)
    {
      unint64_t inited = std::to_string(&v89, i);
      int v46 = *((_DWORD *)a2 + 35);
      if (v46 == 500)
      {
        std::string::size_type v47 = (void *)*((void *)a2 + 16);
      }
      else
      {
        unint64_t inited = (std::string *)CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
        int v46 = *((_DWORD *)a2 + 35);
        std::string::size_type v47 = &CoreML::Specification::_CustomLayerParams_default_instance_;
      }
      uint64_t v48 = v43 >> 32;
      if (*(int *)(*(void *)(v47[4] + (v43 >> 29) + 8) + 16) < 1)
      {
        if (v46 == 500)
        {
          uint64_t v50 = (void *)*((void *)a2 + 16);
        }
        else
        {
          unint64_t inited = (std::string *)CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
          uint64_t v50 = &CoreML::Specification::_CustomLayerParams_default_instance_;
        }
        uint64_t v54 = *(void *)(*(void *)(v50[4] + 8 * v48 + 8) + 40);
        if (*(char *)(v54 + 23) < 0) {
          uint64_t v55 = *(void *)(v54 + 8);
        }
        else {
          uint64_t v55 = *(unsigned __int8 *)(v54 + 23);
        }
        int v56 = *((_DWORD *)a2 + 35);
        if (v55)
        {
          if (v56 == 500)
          {
            uint64_t v57 = (void *)*((void *)a2 + 16);
          }
          else
          {
            CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
            uint64_t v57 = &CoreML::Specification::_CustomLayerParams_default_instance_;
          }
          uint64_t v53 = *(uint64_t **)(*(void *)(v57[4] + 8 * v48 + 8) + 40);
        }
        else
        {
          if (v56 == 500)
          {
            unsigned int v58 = (void *)*((void *)a2 + 16);
          }
          else
          {
            CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
            unsigned int v58 = &CoreML::Specification::_CustomLayerParams_default_instance_;
          }
          uint64_t v53 = *(uint64_t **)(*(void *)(v58[4] + 8 * v48 + 8) + 48);
        }
        if (*((char *)v53 + 23) < 0)
        {
          uint64_t v60 = v53;
          uint64_t v53 = (uint64_t *)*v53;
          uint64_t v59 = v60[1];
        }
        else
        {
          LODWORD(v59) = *((unsigned __int8 *)v53 + 23);
        }
        *(_DWORD *)(v94.__r_.__value_.__r.__words[0] + 4 * i) = v59;
      }
      else
      {
        if (v46 == 500)
        {
          uint64_t v49 = (void *)*((void *)a2 + 16);
        }
        else
        {
          unint64_t inited = (std::string *)CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
          uint64_t v49 = &CoreML::Specification::_CustomLayerParams_default_instance_;
        }
        *(_DWORD *)(v94.__r_.__value_.__r.__words[0] + 4 * i) = 4
                                                              * *(_DWORD *)(*(void *)(v49[4] + 8 * v48 + 8) + 16);
        if (*((_DWORD *)a2 + 35) == 500)
        {
          uint64_t v51 = (void *)*((void *)a2 + 16);
        }
        else
        {
          CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
          uint64_t v51 = &CoreML::Specification::_CustomLayerParams_default_instance_;
        }
        uint64_t v52 = *(void *)(*(void *)(v51[4] + 8 * v48 + 8) + 24);
        if (v52) {
          uint64_t v53 = (uint64_t *)(v52 + 8);
        }
        else {
          uint64_t v53 = 0;
        }
      }
      *((void *)v42 + i) = v53;
      if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v89.__r_.__value_.__l.__data_);
      }
      v43 += 0x100000000;
    }
    for (uint64_t j = 0; j != v40; ++j)
    {
      int v62 = *(_DWORD *)(v94.__r_.__value_.__r.__words[0] + 4 * j);
      std::vector<unsigned char>::vector(&v89, 4uLL);
      *v89.__r_.__value_.__l.__data_ = HIBYTE(v62);
      *(unsigned char *)(v89.__r_.__value_.__r.__words[0] + 1) = BYTE2(v62);
      *(unsigned char *)(v89.__r_.__value_.__r.__words[0] + 2) = BYTE1(v62);
      *(unsigned char *)(v89.__r_.__value_.__r.__words[0] + 3) = v62;
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned char *>,std::__wrap_iter<unsigned char *>>((uint64_t)&v95, (char *)v95.__r_.__value_.__l.__size_, v89.__r_.__value_.__l.__data_, (char *)v89.__r_.__value_.__l.__size_, v89.__r_.__value_.__l.__size_ - v89.__r_.__value_.__r.__words[0]);
      if (v89.__r_.__value_.__r.__words[0])
      {
        v89.__r_.__value_.__l.__size_ = v89.__r_.__value_.__r.__words[0];
        operator delete(v89.__r_.__value_.__l.__data_);
      }
    }
    for (uint64_t k = 0; k != v40; ++k)
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>((uint64_t)&v95, (char *)v95.__r_.__value_.__l.__size_, *((char **)v42 + k), (char *)(*((void *)v42 + k) + *(int *)(v94.__r_.__value_.__r.__words[0] + 4 * k)), *(int *)(v94.__r_.__value_.__r.__words[0] + 4 * k));
  }
  else
  {
    std::string::size_type v42 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&v93, "MLCustomLayerWeights");
  Espresso::brick_kernel::set_weight_blob();
  if (**((unsigned char **)this + 2))
  {
    LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v85);
  }
  else
  {
    long long v64 = v85;
    if (v86 != v85)
    {
      uint64_t v65 = 0;
      unint64_t v66 = 0;
      uint64_t v67 = (uint64_t **)*((void *)this + 1);
      do
      {
        memset(&v89, 255, sizeof(v89));
        long long v90 = 0u;
        long long v91 = 0u;
        uint64_t v92 = 0;
        EspressoConverter::validateShape((int *)&v89, *((void *)a2 + 14), (uint64_t)&v64[v65]);
        if ((void)v91)
        {
          *((void *)&v91 + 1) = v91;
          operator delete((void *)v91);
        }
        v77.__r_.__value_.__r.__words[0] = (std::string::size_type)&v85[v65];
        int v68 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v67, &v85[v65], (long long **)&v77);
        *((void *)v68 + 7) = -1;
        *((void *)v68 + 8) = -1;
        *((void *)v68 + 9) = -1;
        *((void *)v68 + 10) = 0;
        *((void *)v68 + 11) = 0;
        std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v68 + 96, 0, 0, 0);
        long long v64 = v85;
        ++v66;
        v65 += 24;
      }
      while (v66 < 0xAAAAAAAAAAAAAAABLL * ((v86 - v85) >> 3));
    }
  }
  if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v93.__r_.__value_.__l.__data_);
  }
  if (v42) {
    operator delete(v42);
  }
  if (v94.__r_.__value_.__r.__words[0])
  {
    v94.__r_.__value_.__l.__size_ = v94.__r_.__value_.__r.__words[0];
    operator delete(v94.__r_.__value_.__l.__data_);
  }
  if (v95.__r_.__value_.__r.__words[0])
  {
    v95.__r_.__value_.__l.__size_ = v95.__r_.__value_.__r.__words[0];
    operator delete(v95.__r_.__value_.__l.__data_);
  }
  if (v41) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v41);
  }
  if (*((void *)&v75 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v75 + 1));
  }

  if (SHIBYTE(v79[3]) < 0) {
    operator delete((void *)v79[1]);
  }
  if (SHIBYTE(v79[0]) < 0) {
    operator delete(v78[0]);
  }

  if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v81.__r_.__value_.__l.__data_);
  }
  v89.__r_.__value_.__r.__words[0] = (std::string::size_type)&v82;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v89);
  v89.__r_.__value_.__r.__words[0] = (std::string::size_type)&v85;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v89);
  if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v88.__r_.__value_.__l.__data_);
  }
}

void sub_19EA9FD38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,char *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61,uint64_t a62,char a63)
{
  if (*(char *)(v66 - 169) < 0) {
    operator delete(*(void **)(v66 - 192));
  }
  if (*(char *)(v66 - 201) < 0) {
    operator delete(*(void **)(v66 - 224));
  }
  if (a33 < 0) {
    operator delete(__p);
  }
  if (a27 < 0)
  {
    operator delete(a22);
    if ((v64 & 1) == 0)
    {
LABEL_12:

      google::protobuf::MapPair<std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue>::~MapPair((uint64_t)&a63);
      std::pair<std::string,std::string>::~pair((uint64_t)&a35);

      if (a48 < 0) {
        operator delete(a43);
      }
      a35 = &a50;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a35);
      a35 = &a53;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a35);
      if (a61 < 0) {
        operator delete(a56);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v64)
  {
    goto LABEL_12;
  }
  __cxa_free_exception(v63);
  goto LABEL_12;
}

void sub_19EA9FDB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21)
{
  if (v22) {
    operator delete(v22);
  }
  uint64_t v24 = *(void **)(v23 - 192);
  if (v24)
  {
    *(void *)(v23 - 184) = v24;
    operator delete(v24);
  }
  uint64_t v25 = *(void **)(v23 - 168);
  if (v25)
  {
    *(void *)(v23 - 160) = v25;
    operator delete(v25);
  }
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  if (a21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a21);
  }

  JUMPOUT(0x19EAA0060);
}

void sub_19EA9FDC0()
{
}

void sub_19EA9FDC8()
{
}

void sub_19EA9FDD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21,uint64_t a22,std::__shared_weak_count *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  *(void *)(v52 - 144) = v51;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v52 - 144));
  *(void *)(v52 - 144) = &a51;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v52 - 144));
  if (a23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a23);
  }
  if (a21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a21);
  }
  JUMPOUT(0x19EA9FED8);
}

void sub_19EA9FE20()
{
}

void sub_19EA9FE28()
{
}

void sub_19EA9FE30()
{
}

void sub_19EA9FE38()
{
}

void sub_19EA9FE40()
{
}

void sub_19EA9FE4C()
{
  JUMPOUT(0x19EAA0068);
}

void sub_19EA9FE5C(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_19EA9FE74()
{
}

void sub_19EA9FE80(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void sub_19EA9FE90()
{
}

void sub_19EA9FE98()
{
}

void sub_19EA9FEA0()
{
}

void sub_19EA9FEAC()
{
}

void sub_19EA9FEB4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  __cxa_free_exception(v27);
  JUMPOUT(0x19EAA0054);
}

void sub_19EA9FF30()
{
}

void sub_19EA9FF38()
{
}

void sub_19EA9FF40()
{
}

void sub_19EA9FF5C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *__p,uint64_t a57)
{
  if (__p) {
    operator delete(__p);
  }
  JUMPOUT(0x19EA9FF98);
}

void sub_19EA9FF74()
{
}

void sub_19EA9FF80(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  if (a56 < 0) {
    operator delete(__p);
  }
  operator delete(v57);
  uint64_t v59 = *(void **)(v58 - 192);
  if (v59)
  {
    *(void *)(v58 - 184) = v59;
    operator delete(v59);
  }
  uint64_t v60 = *(void **)(v58 - 168);
  if (v60)
  {
    *(void *)(v58 - 160) = v60;
    operator delete(v60);
  }
  if (v56) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v56);
  }
  JUMPOUT(0x19EAA0008);
}

void sub_19EA9FF94()
{
  if (*(char *)(v1 - 201) < 0) {
    operator delete(*(void **)(v1 - 224));
  }
  if (!v0) {
    JUMPOUT(0x19EA9FFDCLL);
  }
  JUMPOUT(0x19EA9FFD4);
}

void sub_19EA9FFB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51)
{
  if (a51) {
    JUMPOUT(0x19EA9FFC8);
  }
  operator delete(v52);
  uint64_t v54 = *(void **)(v53 - 192);
  if (v54)
  {
    *(void *)(v53 - 184) = v54;
    operator delete(v54);
  }
  uint64_t v55 = *(void **)(v53 - 168);
  if (v55)
  {
    *(void *)(v53 - 160) = v55;
    operator delete(v55);
  }
  if (v51) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v51);
  }
  JUMPOUT(0x19EAA0008);
}

void sub_19EAA0024(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v56);
  if (a56 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x19EAA0060);
}

void sub_19EAA0044()
{
}

void sub_19EAA004C()
{
  JUMPOUT(0x19EAA0054);
}

uint64_t google::protobuf::MapPair<std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue>::~MapPair(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void LayerTranslator::addLowerTriangular(LayerTranslator *this, uint64_t **a2)
{
  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  long long v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v27, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    long long v5 = *(_OWORD *)v4;
    v27.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v5;
  }
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v21 = 0;
  std::string v22 = 0;
  uint64_t v23 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v24, (uint64_t *)&v21, *((void *)this + 1));
  int v20 = 0;
  if (*((_DWORD *)a2 + 35) == 1320)
  {
    std::string v7 = a2[16];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    std::string v7 = &CoreML::Specification::_LowerTriangularLayerParams_default_instance_;
  }
  int v8 = *((_DWORD *)v7 + 4);
  unsigned int v9 = v8 >> 31;
  int v10 = ~(v8 & (v8 >> 31));
  if (v8 < 0) {
    int v8 = -1;
  }
  char v19 = v9;
  v18[0] = v10;
  v18[1] = v8;
  v18[2] = 1;
  uint64_t v11 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "matrix_band_part");
  memset(&v13, 0, sizeof(v13));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v13, (long long *)v21, v22, 0xAAAAAAAAAAAAAAABLL * (((char *)v22 - (char *)v21) >> 3));
  memset(&v12, 0, sizeof(v12));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v12, v24, v25, 0xAAAAAAAAAAAAAAABLL * (((char *)v25 - (char *)v24) >> 3));
  Espresso::sequential_builder::add<Espresso::matrix_band_part_params_t>(&v16, v11, (uint64_t)__p, (uint64_t)&v27, (uint64_t)v18, (long long *)v13.__r_.__value_.__l.__data_, (long long *)v13.__r_.__value_.__l.__size_, (long long **)&v12);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  long long v28 = &v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
  long long v28 = &v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v24);
  __p[0] = &v21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  uint64_t v21 = (void **)&v24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v21);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
}

void sub_19EAA02D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  *(void *)(v27 - 40) = v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v27 - 40));
  *(void *)(v27 - 40) = &a12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v27 - 40));
  if (a20 < 0) {
    operator delete(__p);
  }
  long long __p = &a26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  a26 = v27 - 88;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a26);
  if (*(char *)(v27 - 41) < 0) {
    operator delete(*(void **)(v27 - 64));
  }
  _Unwind_Resume(a1);
}

void LayerTranslator::addScatterND(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  long long v4 = (long long *)*((void *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v38, *(const std::string::value_type **)v4, *((void *)v4 + 1));
  }
  else
  {
    long long v5 = *v4;
    v38.__r_.__value_.__r.__words[2] = *((void *)v4 + 2);
    *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v5;
  }
  uint64_t v35 = 0;
  id v36 = 0;
  uint64_t v37 = 0;
  long long v32 = 0;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v35, (uint64_t *)&v32, *((void *)this + 1));
  unsigned int v30 = 0;
  __int16 v31 = 257;
  uint64_t v29 = 1;
  if (*((_DWORD *)a2 + 35) == 945)
  {
    std::string v7 = (uint64_t *)*((void *)a2 + 16);
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    std::string v7 = &CoreML::Specification::_ScatterNDLayerParams_default_instance_;
  }
  uint64_t v25 = &unk_1EF0D4598;
  uint64_t v26 = 0;
  int v28 = 0;
  uint64_t v8 = v7[1];
  if (v8) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((unint64_t *)&v26, v8 & 0xFFFFFFFFFFFFFFFELL);
  }
  unsigned int v9 = *((_DWORD *)v7 + 4);
  unsigned int v27 = v9;
  if (v9 >= 7)
  {
    if (v9 == 0x80000000 || v9 == 0x7FFFFFFF)
    {
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
      uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v24, (uint64_t)"ScatterND layer: '", 18);
      uint64_t v12 = *((void *)a2 + 14);
      int v13 = *(char *)(v12 + 23);
      if (v13 >= 0) {
        uint64_t v14 = *((void *)a2 + 14);
      }
      else {
        uint64_t v14 = *(void *)v12;
      }
      if (v13 >= 0) {
        uint64_t v15 = *(unsigned __int8 *)(v12 + 23);
      }
      else {
        uint64_t v15 = *(void *)(v12 + 8);
      }
      uint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, v14, v15);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"': unknown value for parameter 'mode'.", 38);
      exceptiounint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::runtime_error::runtime_error(exception, &v22);
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  else
  {
    unsigned int v30 = v9;
  }
  int v10 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "scatter_nd");
  memset(&v19, 0, sizeof(v19));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v19, v32, v33, 0xAAAAAAAAAAAAAAABLL * (((char *)v33 - (char *)v32) >> 3));
  memset(&v18, 0, sizeof(v18));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v18, v35, v36, 0xAAAAAAAAAAAAAAABLL * (((char *)v36 - (char *)v35) >> 3));
  Espresso::sequential_builder::add<Espresso::scatter_nd_params_t>(&v20, v10, (uint64_t)__p, (uint64_t)&v38, (uint64_t)&v29, (long long *)v19.__r_.__value_.__l.__data_, (long long *)v19.__r_.__value_.__l.__size_, (long long **)&v18);
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  v22.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v22);
  v22.__r_.__value_.__r.__words[0] = (std::string::size_type)&v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v22);
  if (SHIBYTE(v24) < 0) {
    operator delete(__p[0]);
  }
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v35);
  uint64_t v25 = &unk_1EF0D4598;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(&v26);
  __p[0] = &v32;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  __p[0] = &v35;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
}

void sub_19EAA063C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a23 < 0)
  {
    operator delete(__p);
    if ((v32 & 1) == 0)
    {
LABEL_6:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a24);
      *(void *)(v33 - 168) = v30;
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v29);
      a24 = (void *)(v33 - 128);
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
      a24 = (void *)(v33 - 104);
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
      if (*(char *)(v33 - 57) < 0) {
        operator delete(*(void **)(v33 - 80));
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v32)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v31);
  goto LABEL_6;
}

BOOL LayerTranslator::addLoadConstant(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  long long v4 = (long long *)*((void *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v69, *(const std::string::value_type **)v4, *((void *)v4 + 1));
  }
  else
  {
    long long v5 = *v4;
    v69.__r_.__value_.__r.__words[2] = *((void *)v4 + 2);
    *(_OWORD *)&v69.__r_.__value_.__l.__data_ = v5;
  }
  uint64_t v66 = 0;
  uint64_t v67 = 0;
  uint64_t v68 = 0;
  memset(&v65, 0, sizeof(v65));
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v66, (uint64_t *)&v65, *((void *)this + 1));
  v6.__i_ = v65.__begin_;
  v7.__i_ = v65.__end_;
  v8.__i_ = std::vector<std::string>::erase(&v65, v6, v7).__i_;
  if (*((_DWORD *)a2 + 35) == 290)
  {
    unsigned int v9 = (const CoreML::Specification::LoadConstantLayerParams *)*((void *)a2 + 16);
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v8.__i_);
    unsigned int v9 = (const CoreML::Specification::LoadConstantLayerParams *)&CoreML::Specification::_LoadConstantLayerParams_default_instance_;
  }
  CoreML::Specification::LoadConstantLayerParams::LoadConstantLayerParams((CoreML::Specification::LoadConstantLayerParams *)v61, v9);
  long long v59 = xmmword_19EC7B870;
  unint64_t v60 = 0xFFFFFFFF00000001;
  if (v62 != 3)
  {
    exceptiounint64_t n = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3C1380](exception, "Load Constant: shape must be of size 3");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v10 = v63[1];
  uint64_t v11 = v63[2];
  uint64_t v12 = v63[3];
  DWORD2(v59) = v10;
  *(void *)&long long v59 = __PAIR64__(v11, v12);
  int v13 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(&v70, "load_constant");
  memset(&v56, 0, sizeof(v56));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v56, (long long *)v65.__begin_, (long long *)v65.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v65.__end_ - (char *)v65.__begin_) >> 3));
  memset(&v55, 0, sizeof(v55));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v55, v66, v67, 0xAAAAAAAAAAAAAAABLL * (((char *)v67 - (char *)v66) >> 3));
  Espresso::sequential_builder::add<Espresso::load_constant_params>(&v57, v13, (uint64_t)&v70, (uint64_t)&v69, (uint64_t)&v59, (long long *)v56.__r_.__value_.__l.__data_, (long long *)v56.__r_.__value_.__l.__size_, (long long **)&v55);
  v77[0] = (void **)&v55;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v77);
  v77[0] = (void **)&v56;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v77);
  if (SHIBYTE(v73) < 0) {
    operator delete(v70);
  }
  uint64_t v14 = v58;
  if (v58) {
    atomic_fetch_add_explicit(&v58->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v53, v59, SDWORD1(v59), SDWORD2(v59), SHIDWORD(v59));
  if (v64) {
    uint64_t v15 = v64;
  }
  else {
    uint64_t v15 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  uint64_t v16 = v15[5];
  if (*(char *)(v16 + 23) < 0) {
    uint64_t v17 = *(void *)(v16 + 8);
  }
  else {
    uint64_t v17 = *(unsigned __int8 *)(v16 + 23);
  }
  uint64_t v18 = v15[6];
  uint64_t v19 = *(unsigned __int8 *)(v18 + 23);
  if (*(char *)(v18 + 23) < 0) {
    uint64_t v20 = *(void *)(v18 + 8);
  }
  else {
    uint64_t v20 = *(unsigned __int8 *)(v18 + 23);
  }
  int v21 = *((_DWORD *)v15 + 4);
  uint64_t v22 = v15[7];
  if (*(char *)(v22 + 23) < 0) {
    uint64_t v23 = *(void *)(v22 + 8);
  }
  else {
    uint64_t v23 = *(unsigned __int8 *)(v22 + 23);
  }
  if (v21 <= 0) {
    int v24 = 1;
  }
  else {
    int v24 = 2;
  }
  if (v17) {
    int v25 = v24;
  }
  else {
    int v25 = v21 > 0;
  }
  if (v20) {
    ++v25;
  }
  if (v23) {
    ++v25;
  }
  if (v21 > 0 || v25 != 1) {
    goto LABEL_47;
  }
  if ((*(unsigned char *)(v16 + 23) & 0x80) != 0)
  {
    if (*(void *)(v16 + 8)) {
      goto LABEL_47;
    }
  }
  else if (*(unsigned char *)(v16 + 23))
  {
    goto LABEL_47;
  }
  if ((v19 & 0x80) != 0) {
    uint64_t v19 = *(void *)(v18 + 8);
  }
  if (v15 != &CoreML::Specification::_WeightParams_default_instance_ && v19 && v15[8])
  {
    unint64_t v26 = v11 * v10 * v12;
    EspressoConverter::readFloatFromWeightParams((EspressoConverter *)&v70, (const CoreML::Specification::WeightParams *)v15, v26);
    p_begiunint64_t n = (void **)&v70->__begin_;
    memcpy(*(void **)(v53 + 24), v70, 4 * v26);
    if (p_begin) {
      operator delete(p_begin);
    }
    goto LABEL_49;
  }
LABEL_47:
  int WeightParamSize = EspressoConverter::getWeightParamSize((uint64_t)v15);
  if (WeightParamSize != DWORD1(v59) * DWORD2(v59) * v59)
  {
    uint64_t v51 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3C1380](v51, "Load Constant: data size does not match provided shape");
    __cxa_throw(v51, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  EspressoConverter::copyWeightsToDataBlob(*(EspressoConverter **)(v53 + 24), v15, 4 * HIDWORD(v59) * WeightParamSize);
LABEL_49:
  uint64_t v29 = v54;
  uint64_t v52 = v54;
  if (v54) {
    atomic_fetch_add_explicit(&v54->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::generic_load_constant_kernel::set_constant_blob();
  uint64_t v30 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v52;
  if (v52) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v52);
  }
  if (**((unsigned char **)this + 2))
  {
    LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v66);
  }
  else
  {
    __int16 v31 = (uint64_t **)*((void *)this + 1);
    if (*((_DWORD *)a2 + 35) == 290)
    {
      int v32 = (const CoreML::Specification::LoadConstantLayerParams *)*((void *)a2 + 16);
    }
    else
    {
      CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v30);
      int v32 = (const CoreML::Specification::LoadConstantLayerParams *)&CoreML::Specification::_LoadConstantLayerParams_default_instance_;
    }
    CoreML::Specification::LoadConstantLayerParams::LoadConstantLayerParams((CoreML::Specification::LoadConstantLayerParams *)v77, v32);
    int v34 = v78[4];
    int v35 = v78[2];
    LODWORD(v70) = v78[6];
    int v33 = (int)v70;
    HIDWORD(v70) = v34;
    uint64_t v72 = -1;
    int v71 = v35;
    int v73 = -1;
    long long v74 = 0u;
    long long v75 = 0u;
    uint64_t v76 = 0;
    EspressoConverter::validateShape((int *)&v70, *((void *)a2 + 14), (uint64_t)v66);
    uint64_t v79 = v66;
    id v36 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v31, v66, &v79);
    *((_DWORD *)v36 + 14) = v33;
    *((_DWORD *)v36 + 15) = v34;
    *((_DWORD *)v36 + 1CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = v35;
    *(void *)(v36 + 68) = -1;
    *((_DWORD *)v36 + 19) = -1;
    *((void *)v36 + 10) = 0;
    *((void *)v36 + 11) = 0;
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v36 + 96, 0, 0, 0);
    CoreML::Specification::LoadConstantLayerParams::~LoadConstantLayerParams((CoreML::Specification::LoadConstantLayerParams *)v77);
  }
  if (v64) {
    uint64_t v37 = v64;
  }
  else {
    uint64_t v37 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  uint64_t v38 = v37[5];
  uint64_t v39 = *(unsigned __int8 *)(v38 + 23);
  if (*(char *)(v38 + 23) < 0) {
    uint64_t v40 = *(void *)(v38 + 8);
  }
  else {
    uint64_t v40 = *(unsigned __int8 *)(v38 + 23);
  }
  uint64_t v41 = v37[6];
  if (*(char *)(v41 + 23) < 0) {
    uint64_t v42 = *(void *)(v41 + 8);
  }
  else {
    uint64_t v42 = *(unsigned __int8 *)(v41 + 23);
  }
  int v43 = *((_DWORD *)v37 + 4);
  uint64_t v44 = v37[7];
  if (*(char *)(v44 + 23) < 0) {
    uint64_t v45 = *(void *)(v44 + 8);
  }
  else {
    uint64_t v45 = *(unsigned __int8 *)(v44 + 23);
  }
  BOOL v46 = 0;
  if (v43 <= 0) {
    int v47 = 1;
  }
  else {
    int v47 = 2;
  }
  if (v40) {
    int v48 = v47;
  }
  else {
    int v48 = v43 > 0;
  }
  if (v42) {
    ++v48;
  }
  if (v45) {
    ++v48;
  }
  if (v43 <= 0 && v48 == 1)
  {
    if ((v39 & 0x80) != 0) {
      uint64_t v39 = *(void *)(v38 + 8);
    }
    BOOL v46 = v39 != 0;
  }
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  if (v58) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v58);
  }
  CoreML::Specification::LoadConstantLayerParams::~LoadConstantLayerParams((CoreML::Specification::LoadConstantLayerParams *)v61);
  unint64_t v70 = &v65;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v70);
  unint64_t v70 = (std::vector<std::string> *)&v66;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v70);
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v69.__r_.__value_.__l.__data_);
  }
  return v46;
}

void sub_19EAA0CEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,uint64_t a21,uint64_t a22,uint64_t a23,char *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (v42) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v42);
  }
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }
  CoreML::Specification::LoadConstantLayerParams::~LoadConstantLayerParams((CoreML::Specification::LoadConstantLayerParams *)&a24);
  a24 = &a31;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  a24 = &a34;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  if (a42 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

std::vector<std::string>::iterator std::vector<std::string>::erase(std::vector<std::string> *this, std::vector<std::string>::const_iterator __first, std::vector<std::string>::const_iterator __last)
{
  if (__first.__i_ != __last.__i_)
  {
    std::__wrap_iter<const std::string *>::iterator_type i = __last.__i_;
    long long v4 = (std::string *)__first.__i_;
    std::vector<std::string>::pointer end = this->__end_;
    if (__last.__i_ != end)
    {
      int64_t v7 = 8 * (((char *)__last.__i_ - (char *)__first.__i_) >> 3);
      do
      {
        if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v4->__r_.__value_.__l.__data_);
        }
        std::vector<std::string>::iterator v8 = (char *)v4 + v7;
        long long v9 = *(_OWORD *)((char *)&v4->__r_.__value_.__l.__data_ + v7);
        v4->__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[(unint64_t)v7 / 8 + 2];
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v9;
        ++v4;
        v8[23] = 0;
        *std::vector<std::string>::iterator v8 = 0;
      }
      while ((std::string *)((char *)v4 + v7) != end);
      std::__wrap_iter<const std::string *>::iterator_type i = this->__end_;
    }
    while (i != v4)
    {
      if (SHIBYTE(i[-1].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(i[-1].__r_.__value_.__l.__data_);
      }
      --i;
    }
    this->__end_ = v4;
  }
  return (std::vector<std::string>::iterator)this;
}

void LayerTranslator::addL2Norm(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  long long v4 = (long long *)*((void *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v34, *(const std::string::value_type **)v4, *((void *)v4 + 1));
  }
  else
  {
    long long v5 = *v4;
    v34.__r_.__value_.__r.__words[2] = *((void *)v4 + 2);
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v5;
  }
  __int16 v31 = 0;
  int v32 = 0;
  uint64_t v33 = 0;
  int v28 = 0;
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v31, (uint64_t *)&v28, *((void *)this + 1));
  if (*((_DWORD *)a2 + 35) == 170)
  {
    int64_t v7 = (uint64_t *)*((void *)a2 + 16);
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    int64_t v7 = &CoreML::Specification::_L2NormalizeLayerParams_default_instance_;
  }
  int v24 = &unk_1EF0D55A0;
  uint64_t v25 = 0;
  int v27 = 0;
  uint64_t v8 = v7[1];
  if (v8) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((unint64_t *)&v25, v8 & 0xFFFFFFFFFFFFFFFELL);
  }
  float v9 = *((float *)v7 + 4);
  float v26 = v9;
  int v22 = 897988541;
  uint64_t v23 = 0x200000003;
  if (v9 != 0.0) {
    int v22 = LODWORD(v9);
  }
  uint64_t v10 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(&v44, "l2_normalize");
  memset(&v19, 0, sizeof(v19));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v19, v28, v29, 0xAAAAAAAAAAAAAAABLL * (((char *)v29 - (char *)v28) >> 3));
  memset(&v18, 0, sizeof(v18));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v18, v31, v32, 0xAAAAAAAAAAAAAAABLL * (((char *)v32 - (char *)v31) >> 3));
  Espresso::sequential_builder::add<Espresso::l2_norm_params>(&v20, v10, (uint64_t)&v44, (uint64_t)&v34, (uint64_t)&v22, (long long *)v19.__r_.__value_.__l.__data_, (long long *)v19.__r_.__value_.__l.__size_, (long long **)&v18);
  *(void *)&long long v38 = &v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v38);
  *(void *)&long long v38 = &v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v38);
  if (SBYTE7(v45) < 0) {
    operator delete((void *)v44);
  }
  if (**((unsigned char **)this + 2))
  {
    LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v31);
  }
  else
  {
    uint64_t v11 = (uint64_t **)*((void *)this + 1);
    uint64_t v12 = std::map<std::string,std::string>::at((uint64_t)v11, v28);
    long long v44 = *(_OWORD *)v12;
    long long v45 = *(_OWORD *)(v12 + 16);
    uint64_t v46 = *(void *)(v12 + 32);
    int v47 = 0;
    uint64_t v48 = 0;
    uint64_t v49 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v47, *(const void **)(v12 + 40), *(void *)(v12 + 48), (uint64_t)(*(void *)(v12 + 48) - *(void *)(v12 + 40)) >> 2);
    long long v38 = v44;
    long long v39 = v45;
    int v13 = v47;
    uint64_t v40 = v46;
    uint64_t v41 = 0;
    uint64_t v42 = 0;
    uint64_t v43 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v41, v47, v48, (v48 - (uint64_t)v47) >> 2);
    v35[0] = v38;
    v35[1] = v39;
    uint64_t v14 = v41;
    uint64_t v36 = v40;
    memset(__p, 0, sizeof(__p));
    uint64_t v15 = v42;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(__p, v41, v42, (v42 - (uint64_t)v41) >> 2);
    EspressoConverter::validateShape((int *)v35, *((void *)a2 + 14), (uint64_t)v31);
    if (__p[0]) {
      operator delete(__p[0]);
    }
    uint64_t v50 = v31;
    uint64_t v16 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v11, v31, &v50);
    long long v17 = v39;
    *(_OWORD *)(v16 + 5CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = v38;
    *(_OWORD *)(v16 + 72) = v17;
    *((void *)v16 + 11) = v40;
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v16 + 96, v14, v15, (v15 - (uint64_t)v14) >> 2);
    if (v14) {
      operator delete(v14);
    }
    if (v13) {
      operator delete(v13);
    }
  }
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  int v24 = &unk_1EF0D55A0;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(&v25);
  *(void *)&long long v44 = &v28;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v44);
  *(void *)&long long v44 = &v31;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v44);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v34.__r_.__value_.__l.__data_);
  }
}

void sub_19EAA1230(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p)
{
  if (__p)
  {
    operator delete(__p);
    if (!v43)
    {
LABEL_3:
      if (!v42)
      {
LABEL_8:
        if (a17) {
          std::__shared_weak_count::__release_shared[abi:ne180100](a17);
        }
        google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v41);
        *(void *)(v44 - 224) = &a23;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v44 - 224));
        *(void *)(v44 - 224) = &a26;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v44 - 224));
        if (a34 < 0) {
          operator delete(a29);
        }
        _Unwind_Resume(a1);
      }
LABEL_7:
      operator delete(v42);
      goto LABEL_8;
    }
  }
  else if (!v43)
  {
    goto LABEL_3;
  }
  operator delete(v43);
  if (!v42) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

void Espresso::sequential_builder::add<Espresso::l2_norm_params>(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, long long *a6, long long *a7, long long **a8)
{
  memset(&v13, 0, sizeof(v13));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v13, a6, a7, 0xAAAAAAAAAAAAAAABLL * (((char *)a7 - (char *)a6) >> 3));
  memset(&v12, 0, sizeof(v12));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v12, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a8[1] - (char *)*a8) >> 3));
  LODWORD(v15.__r_.__value_.__l.__data_) = (***(uint64_t (****)(void))(a2[14] + 8))(*(void *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  uint64_t v11 = (std::__shared_weak_count *)a1[1];
  uint64_t v16 = *a1;
  long long v17 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(&v15, 0, sizeof(v15));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v15, (long long *)v13.__r_.__value_.__l.__data_, (long long *)v13.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13.__r_.__value_.__l.__size_ - v13.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v14, 0, sizeof(v14));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v14, (long long *)v12.__r_.__value_.__l.__data_, (long long *)v12.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12.__r_.__value_.__l.__size_ - v12.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  std::string v18 = &v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  std::string v18 = &v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (*a2) {
    Espresso::sequential_builder::add_shape_from_kernel();
  }
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
}

void sub_19EAA1514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v16 = *(std::__shared_weak_count **)(v13 + 8);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  *(void *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(void *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void LayerTranslator::addGetShape(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  long long v4 = (long long *)*((void *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)v4, *((void *)v4 + 1));
  }
  else
  {
    long long v5 = *v4;
    v20.__r_.__value_.__r.__words[2] = *((void *)v4 + 2);
    *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v5;
  }
  long long v17 = 0;
  std::string v18 = 0;
  uint64_t v19 = 0;
  uint64_t v14 = 0;
  std::string v15 = 0;
  uint64_t v16 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v17, (uint64_t *)&v14, *((void *)this + 1));
  uint64_t v13 = 0x1FFFFFFFFLL;
  std::vector<std::string>::const_iterator v6 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(&__p, "get_shape");
  memset(&v8, 0, sizeof(v8));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v8, v14, v15, 0xAAAAAAAAAAAAAAABLL * (((char *)v15 - (char *)v14) >> 3));
  memset(&v7, 0, sizeof(v7));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v7, v17, v18, 0xAAAAAAAAAAAAAAABLL * (((char *)v18 - (char *)v17) >> 3));
  memset(&v22, 0, sizeof(v22));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v22, (long long *)v8.__r_.__value_.__l.__data_, (long long *)v8.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8.__r_.__value_.__l.__size_ - v8.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v21, 0, sizeof(v21));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v21, (long long *)v7.__r_.__value_.__l.__data_, (long long *)v7.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7.__r_.__value_.__l.__size_ - v7.__r_.__value_.__r.__words[0]) >> 3));
  LODWORD(v24.__r_.__value_.__l.__data_) = (***(uint64_t (****)(void))(v6[14] + 8))(*(void *)(v6[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  uint64_t v25 = v11;
  float v26 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(&v24, 0, sizeof(v24));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v24, (long long *)v22.__r_.__value_.__l.__data_, (long long *)v22.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22.__r_.__value_.__l.__size_ - v22.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v23, 0, sizeof(v23));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v23, (long long *)v21.__r_.__value_.__l.__data_, (long long *)v21.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21.__r_.__value_.__l.__size_ - v21.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  int v27 = &v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
  int v27 = &v24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  if (*v6) {
    Espresso::sequential_builder::add_shape_from_kernel();
  }
  v24.__r_.__value_.__r.__words[0] = (std::string::size_type)&v21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  v24.__r_.__value_.__r.__words[0] = (std::string::size_type)&v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  v24.__r_.__value_.__r.__words[0] = (std::string::size_type)&v7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  v24.__r_.__value_.__r.__words[0] = (std::string::size_type)&v8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  if (v10 < 0) {
    operator delete(__p);
  }
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v17);
  v24.__r_.__value_.__r.__words[0] = (std::string::size_type)&v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  v24.__r_.__value_.__r.__words[0] = (std::string::size_type)&v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
}

void sub_19EAA1894(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char **__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,std::__shared_weak_count *a22,uint64_t a23,char *a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36)
{
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }
  *(void *)(v36 - 5CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = &a36;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v36 - 56));
  *(void *)(v36 - 5CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = v36 - 144;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v36 - 56));
  *(void *)(v36 - 5CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = &a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v36 - 56));
  *(void *)(v36 - 5CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = &a12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v36 - 56));
  if (a20 < 0) {
    operator delete(__p);
  }
  long long __p = &a24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  a24 = &a27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  if (a35 < 0) {
    operator delete(a30);
  }
  _Unwind_Resume(a1);
}

BOOL LayerTranslator::addBiLSTM(LayerTranslator *this, const CoreML::Specification::BiDirectionalLSTMLayerParams **a2)
{
  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  long long v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v253, *(const std::string::value_type **)v4, *((void *)v4 + 1));
  }
  else
  {
    long long v5 = *(_OWORD *)v4;
    v253.__r_.__value_.__r.__words[2] = *((void *)v4 + 2);
    *(_OWORD *)&v253.__r_.__value_.__l.__data_ = v5;
  }
  std::string v251 = 0;
  uint64_t v250 = 0;
  uint64_t v252 = 0;
  uint64_t v247 = 0;
  v248 = 0;
  uint64_t v249 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v250, (uint64_t *)&v247, *((void *)this + 1));
  if (*((_DWORD *)a2 + 35) == 430)
  {
    std::string v7 = a2[16];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    std::string v7 = (const CoreML::Specification::BiDirectionalLSTMLayerParams *)&CoreML::Specification::_BiDirectionalLSTMLayerParams_default_instance_;
  }
  CoreML::Specification::BiDirectionalLSTMLayerParams::BiDirectionalLSTMLayerParams((CoreML::Specification::BiDirectionalLSTMLayerParams *)v238, v7);
  if (v244) {
    std::string v8 = v244;
  }
  else {
    std::string v8 = (const CoreML::Specification::LSTMParams *)&CoreML::Specification::_LSTMParams_default_instance_;
  }
  CoreML::Specification::LSTMParams::LSTMParams((CoreML::Specification::LSTMParams *)&v230, v8);
  if (v242 != 2)
  {
    exceptiounint64_t n = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3C1380](exception, "Bi dir LSTM layer: must have two weight params");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  char v10 = *(void **)(v243 + 8);
  uint64_t v196 = *(void **)(v243 + 16);
  __asm { FMOV            V8.2S, #1.0 }
  uint64_t v207 = _D8;
  uint64_t v209 = _D8;
  uint64_t v211 = _D8;
  int v208 = 2;
  int v210 = 0;
  uint64_t v213 = _D8;
  uint64_t v215 = _D8;
  int v212 = 0;
  int v214 = 2;
  uint64_t v217 = _D8;
  unint64_t v218 = 512;
  int v216 = 0;
  int v219 = 1065353216;
  long long v220 = xmmword_19EC35D70;
  uint64_t v222 = 0x100000000;
  uint64_t v223 = 1065353216;
  int v221 = 1112014848;
  int v224 = 1065353216;
  uint64_t v225 = 0;
  __int16 v229 = 0;
  uint64_t v226 = 1;
  uint64_t v206 = 0;
  int v228 = 1;
  int v227 = v233;
  unsigned int __val = v246;
  if ((int)v246 <= 0)
  {
    unint64_t v171 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v254, __val);
    v172 = std::string::insert(&v254, 0, "output std::string::size_type size = ");
    long long v173 = *(_OWORD *)&v172->__r_.__value_.__l.__data_;
    *(void *)&v259[16] = *((void *)&v172->__r_.__value_.__l + 2);
    *(_OWORD *)int v259 = v173;
    v172->__r_.__value_.__l.__size_ = 0;
    v172->__r_.__value_.__r.__words[2] = 0;
    v172->__r_.__value_.__r.__words[0] = 0;
    int v174 = std::string::append((std::string *)v259, " not allowed in layer ");
    long long v175 = *(_OWORD *)&v174->__r_.__value_.__l.__data_;
    v262.__r_.__value_.__r.__words[2] = v174->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v262.__r_.__value_.__l.__data_ = v175;
    v174->__r_.__value_.__l.__size_ = 0;
    v174->__r_.__value_.__r.__words[2] = 0;
    v174->__r_.__value_.__r.__words[0] = 0;
    if ((v253.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v176 = &v253;
    }
    else {
      uint64_t v176 = (std::string *)v253.__r_.__value_.__r.__words[0];
    }
    if ((v253.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v253.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v253.__r_.__value_.__l.__size_;
    }
    uint64_t v178 = std::string::append(&v262, (const std::string::value_type *)v176, size);
    long long v179 = *(_OWORD *)&v178->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v178->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v179;
    v178->__r_.__value_.__l.__size_ = 0;
    v178->__r_.__value_.__r.__words[2] = 0;
    v178->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v171, &__p);
    __cxa_throw(v171, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  unsigned int v16 = v245;
  if ((int)v245 <= 0)
  {
    uint64_t v180 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v254, v16);
    v181 = std::string::insert(&v254, 0, "input std::string::size_type size = ");
    long long v182 = *(_OWORD *)&v181->__r_.__value_.__l.__data_;
    *(void *)&v259[16] = *((void *)&v181->__r_.__value_.__l + 2);
    *(_OWORD *)int v259 = v182;
    v181->__r_.__value_.__l.__size_ = 0;
    v181->__r_.__value_.__r.__words[2] = 0;
    v181->__r_.__value_.__r.__words[0] = 0;
    uint64_t v183 = std::string::append((std::string *)v259, " not allowed in layer ");
    long long v184 = *(_OWORD *)&v183->__r_.__value_.__l.__data_;
    v262.__r_.__value_.__r.__words[2] = v183->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v262.__r_.__value_.__l.__data_ = v184;
    v183->__r_.__value_.__l.__size_ = 0;
    v183->__r_.__value_.__r.__words[2] = 0;
    v183->__r_.__value_.__r.__words[0] = 0;
    if ((v253.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unsigned __int8 v185 = &v253;
    }
    else {
      unsigned __int8 v185 = (std::string *)v253.__r_.__value_.__r.__words[0];
    }
    if ((v253.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v186 = HIBYTE(v253.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v186 = v253.__r_.__value_.__l.__size_;
    }
    char v187 = std::string::append(&v262, (const std::string::value_type *)v185, v186);
    long long v188 = *(_OWORD *)&v187->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v187->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v188;
    v187->__r_.__value_.__l.__size_ = 0;
    v187->__r_.__value_.__r.__words[2] = 0;
    v187->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v180, &__p);
    __cxa_throw(v180, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  unint64_t v218 = __PAIR64__(v245, v246);
  if (0xAAAAAAAAAAAAAAABLL * ((v251 - v250) >> 3) >= 6)
  {
    char v189 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3C1380](v189, "Recurrent layer: too many output blobs.");
    goto LABEL_382;
  }
  if (v251 - v250 != 120)
  {
    char v189 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3C1380](v189, "Recurrent layer: too few output blobs.");
LABEL_382:
    __cxa_throw(v189, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((v248 - v247) >> 3) >= 6)
  {
    uint64_t v190 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3C1380](v190, "Recurrent layer: too many input blobs.");
    __cxa_throw(v190, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int v17 = v234;
  if (!v234) {
    DWORD2(v2CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 20) = 0;
  }
  float v18 = 1.0;
  if (!v235) {
    float v18 = 0.0;
  }
  int v219 = LODWORD(v18);
  if (v236) {
    LODWORD(v2CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 20) = 1;
  }
  if (v237) {
    LODWORD(v222) = 1;
  }
  float v19 = v232;
  if (v232 < 0.00001) {
    float v19 = 50.0;
  }
  int v221 = LODWORD(v19);
  if (v239 != 3)
  {
    int v191 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3C1380](v191, "Bi dir LSTM layer (forward lstm): must provide 3 activations");
    goto LABEL_386;
  }
  int v208 = EspressoConverter::CoreMLToEspressoRNNActivation((EspressoConverter *)*(unsigned int *)(v240[1] + 28), v9);
  uint64_t v209 = _D8;
  int v210 = EspressoConverter::CoreMLToEspressoRNNActivation((EspressoConverter *)*(unsigned int *)(v240[2] + 28), v20);
  uint64_t v211 = _D8;
  HIDWORD(v20CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = EspressoConverter::CoreMLToEspressoRNNActivation((EspressoConverter *)*(unsigned int *)(v240[3] + 28), v21);
  uint64_t v207 = _D8;
  if (v241 != 3)
  {
    int v191 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3C1380](v191, "Bi dir LSTM layer (backward lstm): must provide 3 activations");
LABEL_386:
    __cxa_throw(v191, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int v214 = EspressoConverter::CoreMLToEspressoRNNActivation((EspressoConverter *)*(unsigned int *)(v240[1] + 28), v22);
  uint64_t v215 = _D8;
  int v216 = EspressoConverter::CoreMLToEspressoRNNActivation((EspressoConverter *)*(unsigned int *)(v240[2] + 28), v23);
  uint64_t v217 = _D8;
  char v197 = (const CoreML::Specification::NeuralNetworkLayer *)a2;
  int v212 = EspressoConverter::CoreMLToEspressoRNNActivation((EspressoConverter *)*(unsigned int *)(v240[3] + 28), v24);
  uint64_t v213 = _D8;
  uint64_t v25 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(&__p, "rnn_arch");
  memset(&v203, 0, sizeof(v203));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v203, (long long *)v247, (long long *)v248, 0xAAAAAAAAAAAAAAABLL * ((v248 - v247) >> 3));
  memset(&v202, 0, sizeof(v202));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v202, (long long *)v250, (long long *)v251, 0xAAAAAAAAAAAAAAABLL * ((v251 - v250) >> 3));
  Espresso::sequential_builder::add<Espresso::rnn_arch_params>(&v204, v25, (uint64_t)&__p, (uint64_t)&v253, (uint64_t)&v206, (long long *)v203.__r_.__value_.__l.__data_, (long long *)v203.__r_.__value_.__l.__size_, (long long **)&v202);
  int v193 = v17;
  long long v192 = this;
  v262.__r_.__value_.__r.__words[0] = (std::string::size_type)&v202;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v262);
  v262.__r_.__value_.__r.__words[0] = (std::string::size_type)&v203;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v262);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v27 = v204;
  float v26 = v205;
  if (v205) {
    atomic_fetch_add_explicit(&v205->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v10[2]) {
    int v28 = (uint64_t *)v10[2];
  }
  else {
    int v28 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  if (v10[3]) {
    uint64_t v29 = (uint64_t *)v10[3];
  }
  else {
    uint64_t v29 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  if (v10[5]) {
    uint64_t v30 = (uint64_t *)v10[5];
  }
  else {
    uint64_t v30 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  if (v10[4]) {
    __int16 v31 = (uint64_t *)v10[4];
  }
  else {
    __int16 v31 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  v201[0] = v27;
  v201[1] = (uint64_t)v26;
  if (v26) {
    atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v195 = v26;
  std::string::basic_string[abi:ne180100]<0>(&__p, "Uni-directional LSTM");
  std::string::basic_string[abi:ne180100]<0>(&v262, "W_x");
  EspressoConverter::setFourRecurrentWeightBlobs(v28, v29, v30, v31, v201, v16, __val, (const void **)&__p.__r_.__value_.__l.__data_, (const void **)&v262.__r_.__value_.__l.__data_);
  if (SHIBYTE(v262.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v262.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v195) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v195);
  }
  if (v196[2]) {
    int v32 = (uint64_t *)v196[2];
  }
  else {
    int v32 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  if (v196[3]) {
    uint64_t v33 = (uint64_t *)v196[3];
  }
  else {
    uint64_t v33 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  if (v196[5]) {
    std::string v34 = (uint64_t *)v196[5];
  }
  else {
    std::string v34 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  if (v196[4]) {
    int v35 = (uint64_t *)v196[4];
  }
  else {
    int v35 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  v200[0] = v27;
  v200[1] = (uint64_t)v195;
  if (v195) {
    atomic_fetch_add_explicit(&v195->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "Uni-directional LSTM");
  std::string::basic_string[abi:ne180100]<0>(&v262, "W_x_reverse");
  EspressoConverter::setFourRecurrentWeightBlobs(v32, v33, v34, v35, v200, v16, __val, (const void **)&__p.__r_.__value_.__l.__data_, (const void **)&v262.__r_.__value_.__l.__data_);
  if (SHIBYTE(v262.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v262.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v195) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v195);
  }
  if (v10[6]) {
    uint64_t v36 = (uint64_t *)v10[6];
  }
  else {
    uint64_t v36 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  if (v10[7]) {
    uint64_t v37 = (uint64_t *)v10[7];
  }
  else {
    uint64_t v37 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  if (v10[9]) {
    long long v38 = (uint64_t *)v10[9];
  }
  else {
    long long v38 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  if (v10[8]) {
    long long v39 = (uint64_t *)v10[8];
  }
  else {
    long long v39 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  v199[0] = v27;
  v199[1] = (uint64_t)v195;
  if (v195) {
    atomic_fetch_add_explicit(&v195->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "Uni-directional LSTM");
  std::string::basic_string[abi:ne180100]<0>(&v262, "W_h");
  EspressoConverter::setFourRecurrentWeightBlobs(v36, v37, v38, v39, v199, __val, __val, (const void **)&__p.__r_.__value_.__l.__data_, (const void **)&v262.__r_.__value_.__l.__data_);
  if (SHIBYTE(v262.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v262.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v195) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v195);
  }
  if (v196[6]) {
    uint64_t v40 = (uint64_t *)v196[6];
  }
  else {
    uint64_t v40 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  if (v196[7]) {
    uint64_t v41 = (uint64_t *)v196[7];
  }
  else {
    uint64_t v41 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  if (v196[9]) {
    uint64_t v42 = (uint64_t *)v196[9];
  }
  else {
    uint64_t v42 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  if (v196[8]) {
    uint64_t v43 = (uint64_t *)v196[8];
  }
  else {
    uint64_t v43 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  v198[0] = v27;
  v198[1] = (uint64_t)v195;
  if (v195) {
    atomic_fetch_add_explicit(&v195->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "Uni-directional LSTM");
  std::string::basic_string[abi:ne180100]<0>(&v262, "W_h_reverse");
  EspressoConverter::setFourRecurrentWeightBlobs(v40, v41, v42, v43, v198, __val, __val, (const void **)&__p.__r_.__value_.__l.__data_, (const void **)&v262.__r_.__value_.__l.__data_);
  if (SHIBYTE(v262.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v262.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v195) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v195);
  }
  if (v193)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v262, 1, 1, 4 * __val, 1);
    uint64_t v44 = (uint64_t *)v10[10];
    std::string::size_type v45 = v262.__r_.__value_.__r.__words[0];
    uint64_t v46 = *(void **)(v262.__r_.__value_.__r.__words[0] + 24);
    std::string::basic_string[abi:ne180100]<0>(&__p, "Bi-directional LSTM");
    if (v44) {
      int v47 = v44;
    }
    else {
      int v47 = &CoreML::Specification::_WeightParams_default_instance_;
    }
    EspressoConverter::setRecurrentBiasBlobToExternalPtr((uint64_t)v47, v46, __val, (const void **)&__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    uint64_t v48 = (uint64_t *)v10[11];
    uint64_t v49 = *(void *)(v45 + 24);
    std::string::basic_string[abi:ne180100]<0>(&__p, "Bi-directional LSTM");
    if (v48) {
      uint64_t v50 = v48;
    }
    else {
      uint64_t v50 = &CoreML::Specification::_WeightParams_default_instance_;
    }
    EspressoConverter::setRecurrentBiasBlobToExternalPtr((uint64_t)v50, (void *)(v49 + 4 * __val), __val, (const void **)&__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    uint64_t v51 = (uint64_t *)v10[13];
    uint64_t v52 = *(void *)(v45 + 24);
    std::string::basic_string[abi:ne180100]<0>(&__p, "Bi-directional LSTM");
    uint64_t v53 = 2 * __val;
    if (v51) {
      uint64_t v54 = v51;
    }
    else {
      uint64_t v54 = &CoreML::Specification::_WeightParams_default_instance_;
    }
    EspressoConverter::setRecurrentBiasBlobToExternalPtr((uint64_t)v54, (void *)(v52 + 4 * v53), __val, (const void **)&__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string v55 = (uint64_t *)v10[12];
    uint64_t v56 = *(void *)(v45 + 24);
    std::string::basic_string[abi:ne180100]<0>(&__p, "Bi-directional LSTM");
    if (v55) {
      uint64_t v57 = v55;
    }
    else {
      uint64_t v57 = &CoreML::Specification::_WeightParams_default_instance_;
    }
    EspressoConverter::setRecurrentBiasBlobToExternalPtr((uint64_t)v57, (void *)(v56 + 4 * (int)(3 * __val)), __val, (const void **)&__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    *(_OWORD *)int v259 = 0uLL;
    std::string::basic_string[abi:ne180100]<0>(&__p, "b");
    uint64_t v58 = 0;
    uint64_t v59 = *(int *)(v45 + 8);
    do
    {
      v59 *= *(int *)(v45 + 12 + v58);
      v58 += 4;
    }
    while (v58 != 12);
    (*(void (**)(uint64_t, unsigned char *, std::string *, void, uint64_t, void))(*(void *)v27 + 168))(v27, v259, &__p, *(void *)(v45 + 24), 4 * v59, 0);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (*(void *)&v259[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v259[8]);
    }
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(v259, 1, 1, 4 * __val, 1);
    unint64_t v60 = (uint64_t *)v196[10];
    uint64_t v61 = *(void *)v259;
    int v62 = *(void **)(*(void *)v259 + 24);
    std::string::basic_string[abi:ne180100]<0>(&__p, "Bi-directional LSTM");
    if (v60) {
      long long v63 = v60;
    }
    else {
      long long v63 = &CoreML::Specification::_WeightParams_default_instance_;
    }
    EspressoConverter::setRecurrentBiasBlobToExternalPtr((uint64_t)v63, v62, __val, (const void **)&__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    int v64 = (uint64_t *)v196[11];
    uint64_t v65 = *(void *)(v61 + 24);
    std::string::basic_string[abi:ne180100]<0>(&__p, "Bi-directional LSTM");
    if (v64) {
      uint64_t v66 = v64;
    }
    else {
      uint64_t v66 = &CoreML::Specification::_WeightParams_default_instance_;
    }
    EspressoConverter::setRecurrentBiasBlobToExternalPtr((uint64_t)v66, (void *)(v65 + 4 * __val), __val, (const void **)&__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    uint64_t v67 = (uint64_t *)v196[13];
    uint64_t v68 = *(void *)(v61 + 24);
    std::string::basic_string[abi:ne180100]<0>(&__p, "Bi-directional LSTM");
    if (v67) {
      std::string v69 = v67;
    }
    else {
      std::string v69 = &CoreML::Specification::_WeightParams_default_instance_;
    }
    EspressoConverter::setRecurrentBiasBlobToExternalPtr((uint64_t)v69, (void *)(v68 + 4 * v53), __val, (const void **)&__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    unint64_t v70 = (uint64_t *)v196[12];
    uint64_t v71 = *(void *)(v61 + 24);
    std::string::basic_string[abi:ne180100]<0>(&__p, "Bi-directional LSTM");
    if (v70) {
      uint64_t v72 = v70;
    }
    else {
      uint64_t v72 = &CoreML::Specification::_WeightParams_default_instance_;
    }
    EspressoConverter::setRecurrentBiasBlobToExternalPtr((uint64_t)v72, (void *)(v71 + 4 * (int)(3 * __val)), __val, (const void **)&__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    *(_OWORD *)&v254.__r_.__value_.__l.__data_ = 0uLL;
    std::string::basic_string[abi:ne180100]<0>(&__p, "b_reverse");
    uint64_t v73 = 0;
    uint64_t v74 = *(int *)(v61 + 8);
    do
    {
      v74 *= *(int *)(v61 + 12 + v73);
      v73 += 4;
    }
    while (v73 != 12);
    (*(void (**)(uint64_t, std::string *, std::string *, void, uint64_t, void))(*(void *)v27 + 168))(v27, &v254, &__p, *(void *)(v61 + 24), 4 * v74, 0);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v254.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v254.__r_.__value_.__l.__size_);
    }
    if (*(void *)&v259[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v259[8]);
    }
    if (v262.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v262.__r_.__value_.__l.__size_);
    }
  }
  if (v236)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v262, 1, 1, 3 * __val, 1);
    long long v75 = (uint64_t *)v10[14];
    std::string::size_type v76 = v262.__r_.__value_.__r.__words[0];
    std::string v77 = *(void **)(v262.__r_.__value_.__r.__words[0] + 24);
    std::string::basic_string[abi:ne180100]<0>(&__p, "Bi-directional LSTM");
    if (v75) {
      int v78 = v75;
    }
    else {
      int v78 = &CoreML::Specification::_WeightParams_default_instance_;
    }
    EspressoConverter::setRecurrentBiasBlobToExternalPtr((uint64_t)v78, v77, __val, (const void **)&__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    uint64_t v79 = (uint64_t *)v10[15];
    uint64_t v80 = *(void *)(v76 + 24);
    std::string::basic_string[abi:ne180100]<0>(&__p, "Bi-directional LSTM");
    if (v79) {
      std::string v81 = v79;
    }
    else {
      std::string v81 = &CoreML::Specification::_WeightParams_default_instance_;
    }
    EspressoConverter::setRecurrentBiasBlobToExternalPtr((uint64_t)v81, (void *)(v80 + 4 * __val), __val, (const void **)&__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    int v82 = (uint64_t *)v10[16];
    uint64_t v83 = *(void *)(v76 + 24);
    std::string::basic_string[abi:ne180100]<0>(&__p, "Bi-directional LSTM");
    uint64_t v84 = 2 * __val;
    if (v82) {
      uint64_t v85 = v82;
    }
    else {
      uint64_t v85 = &CoreML::Specification::_WeightParams_default_instance_;
    }
    EspressoConverter::setRecurrentBiasBlobToExternalPtr((uint64_t)v85, (void *)(v83 + 4 * v84), __val, (const void **)&__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    *(_OWORD *)int v259 = 0uLL;
    std::string::basic_string[abi:ne180100]<0>(&__p, "p");
    uint64_t v86 = 0;
    uint64_t v87 = *(int *)(v76 + 8);
    do
    {
      v87 *= *(int *)(v76 + 12 + v86);
      v86 += 4;
    }
    while (v86 != 12);
    (*(void (**)(uint64_t, unsigned char *, std::string *, void, uint64_t, void))(*(void *)v27 + 168))(v27, v259, &__p, *(void *)(v76 + 24), 4 * v87, 0);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (*(void *)&v259[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v259[8]);
    }
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(v259, 1, 1, 3 * __val, 1);
    std::string v88 = (uint64_t *)v196[14];
    uint64_t v89 = *(void *)v259;
    long long v90 = *(void **)(*(void *)v259 + 24);
    std::string::basic_string[abi:ne180100]<0>(&__p, "Bi-directional LSTM");
    if (v88) {
      long long v91 = v88;
    }
    else {
      long long v91 = &CoreML::Specification::_WeightParams_default_instance_;
    }
    EspressoConverter::setRecurrentBiasBlobToExternalPtr((uint64_t)v91, v90, __val, (const void **)&__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    uint64_t v92 = (uint64_t *)v196[15];
    uint64_t v93 = *(void *)(v89 + 24);
    std::string::basic_string[abi:ne180100]<0>(&__p, "Bi-directional LSTM");
    if (v92) {
      std::string v94 = v92;
    }
    else {
      std::string v94 = &CoreML::Specification::_WeightParams_default_instance_;
    }
    EspressoConverter::setRecurrentBiasBlobToExternalPtr((uint64_t)v94, (void *)(v93 + 4 * __val), __val, (const void **)&__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string v95 = (uint64_t *)v196[16];
    uint64_t v96 = *(void *)(v89 + 24);
    std::string::basic_string[abi:ne180100]<0>(&__p, "Bi-directional LSTM");
    if (v95) {
      int v97 = v95;
    }
    else {
      int v97 = &CoreML::Specification::_WeightParams_default_instance_;
    }
    EspressoConverter::setRecurrentBiasBlobToExternalPtr((uint64_t)v97, (void *)(v96 + 4 * v84), __val, (const void **)&__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    *(_OWORD *)&v254.__r_.__value_.__l.__data_ = 0uLL;
    std::string::basic_string[abi:ne180100]<0>(&__p, "p_reverse");
    uint64_t v98 = 0;
    uint64_t v99 = *(int *)(v89 + 8);
    do
    {
      v99 *= *(int *)(v89 + 12 + v98);
      v98 += 4;
    }
    while (v98 != 12);
    (*(void (**)(uint64_t, std::string *, std::string *, void, uint64_t, void))(*(void *)v27 + 168))(v27, &v254, &__p, *(void *)(v89 + 24), 4 * v99, 0);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v254.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v254.__r_.__value_.__l.__size_);
    }
    if (*(void *)&v259[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v259[8]);
    }
    if (v262.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v262.__r_.__value_.__l.__size_);
    }
  }
  if (v10[2]) {
    uint64_t v100 = (uint64_t *)v10[2];
  }
  else {
    uint64_t v100 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  uint64_t v101 = v100[5];
  if (*(char *)(v101 + 23) < 0) {
    uint64_t v102 = *(void *)(v101 + 8);
  }
  else {
    uint64_t v102 = *(unsigned __int8 *)(v101 + 23);
  }
  uint64_t v103 = v100[6];
  if (*(char *)(v103 + 23) < 0) {
    uint64_t v104 = *(void *)(v103 + 8);
  }
  else {
    uint64_t v104 = *(unsigned __int8 *)(v103 + 23);
  }
  int v105 = *((_DWORD *)v100 + 4);
  uint64_t v106 = v100[7];
  if (*(char *)(v106 + 23) < 0) {
    uint64_t v107 = *(void *)(v106 + 8);
  }
  else {
    uint64_t v107 = *(unsigned __int8 *)(v106 + 23);
  }
  if (v105 <= 0) {
    int v108 = 1;
  }
  else {
    int v108 = 2;
  }
  if (v102) {
    int v109 = v108;
  }
  else {
    int v109 = v105 > 0;
  }
  if (v104) {
    ++v109;
  }
  if (v107) {
    ++v109;
  }
  if (v105 <= 0 && v109 == 1)
  {
    if ((*(unsigned char *)(v101 + 23) & 0x80) != 0)
    {
      if (*(void *)(v101 + 8)) {
        goto LABEL_298;
      }
    }
    else if (*(unsigned char *)(v101 + 23))
    {
      goto LABEL_298;
    }
  }
  if (v10[6]) {
    uint64_t v110 = (uint64_t *)v10[6];
  }
  else {
    uint64_t v110 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  uint64_t v111 = v110[5];
  if (*(char *)(v111 + 23) < 0) {
    uint64_t v112 = *(void *)(v111 + 8);
  }
  else {
    uint64_t v112 = *(unsigned __int8 *)(v111 + 23);
  }
  uint64_t v113 = v110[6];
  if (*(char *)(v113 + 23) < 0) {
    uint64_t v114 = *(void *)(v113 + 8);
  }
  else {
    uint64_t v114 = *(unsigned __int8 *)(v113 + 23);
  }
  int v115 = *((_DWORD *)v110 + 4);
  uint64_t v116 = v110[7];
  if (*(char *)(v116 + 23) < 0) {
    uint64_t v117 = *(void *)(v116 + 8);
  }
  else {
    uint64_t v117 = *(unsigned __int8 *)(v116 + 23);
  }
  if (v115 <= 0) {
    int v118 = 1;
  }
  else {
    int v118 = 2;
  }
  if (v112) {
    int v119 = v118;
  }
  else {
    int v119 = v115 > 0;
  }
  if (v114) {
    ++v119;
  }
  if (v117) {
    ++v119;
  }
  if (v115 <= 0 && v119 == 1)
  {
    if ((*(unsigned char *)(v111 + 23) & 0x80) != 0)
    {
      if (!*(void *)(v111 + 8)) {
        goto LABEL_272;
      }
    }
    else if (!*(unsigned char *)(v111 + 23))
    {
      goto LABEL_272;
    }
LABEL_298:
    BOOL v130 = 1;
    size_t v131 = v195;
    goto LABEL_299;
  }
LABEL_272:
  if (v196[2]) {
    unint64_t v120 = (uint64_t *)v196[2];
  }
  else {
    unint64_t v120 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  uint64_t v121 = v120[5];
  if (*(char *)(v121 + 23) < 0) {
    uint64_t v122 = *(void *)(v121 + 8);
  }
  else {
    uint64_t v122 = *(unsigned __int8 *)(v121 + 23);
  }
  uint64_t v123 = v120[6];
  if (*(char *)(v123 + 23) < 0) {
    uint64_t v124 = *(void *)(v123 + 8);
  }
  else {
    uint64_t v124 = *(unsigned __int8 *)(v123 + 23);
  }
  int v125 = *((_DWORD *)v120 + 4);
  uint64_t v126 = v120[7];
  if (*(char *)(v126 + 23) < 0) {
    uint64_t v127 = *(void *)(v126 + 8);
  }
  else {
    uint64_t v127 = *(unsigned __int8 *)(v126 + 23);
  }
  if (v125 <= 0) {
    int v128 = 1;
  }
  else {
    int v128 = 2;
  }
  if (v122) {
    int v129 = v128;
  }
  else {
    int v129 = v125 > 0;
  }
  if (v124) {
    ++v129;
  }
  if (v127) {
    ++v129;
  }
  if (v125 <= 0 && v129 == 1)
  {
    if ((*(unsigned char *)(v121 + 23) & 0x80) != 0)
    {
      if (*(void *)(v121 + 8)) {
        goto LABEL_298;
      }
    }
    else if (*(unsigned char *)(v121 + 23))
    {
      goto LABEL_298;
    }
  }
  if (v196[6]) {
    int v143 = (uint64_t *)v196[6];
  }
  else {
    int v143 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  uint64_t v144 = v143[5];
  uint64_t v145 = *(unsigned __int8 *)(v144 + 23);
  if (*(char *)(v144 + 23) < 0) {
    uint64_t v146 = *(void *)(v144 + 8);
  }
  else {
    uint64_t v146 = *(unsigned __int8 *)(v144 + 23);
  }
  uint64_t v147 = v143[6];
  size_t v131 = v195;
  if (*(char *)(v147 + 23) < 0) {
    uint64_t v148 = *(void *)(v147 + 8);
  }
  else {
    uint64_t v148 = *(unsigned __int8 *)(v147 + 23);
  }
  int v149 = *((_DWORD *)v143 + 4);
  uint64_t v150 = v143[7];
  if (*(char *)(v150 + 23) < 0) {
    uint64_t v151 = *(void *)(v150 + 8);
  }
  else {
    uint64_t v151 = *(unsigned __int8 *)(v150 + 23);
  }
  BOOL v130 = 0;
  if (v149 <= 0) {
    int v152 = 1;
  }
  else {
    int v152 = 2;
  }
  if (v146) {
    int v153 = v152;
  }
  else {
    int v153 = v149 > 0;
  }
  if (v148) {
    ++v153;
  }
  if (v151) {
    ++v153;
  }
  if (v149 <= 0 && v153 == 1)
  {
    if ((v145 & 0x80) != 0) {
      uint64_t v145 = *(void *)(v144 + 8);
    }
    BOOL v130 = v145 != 0;
  }
LABEL_299:
  if (**((unsigned char **)v192 + 2))
  {
    LayerTranslator::defaultUnknownNdShape((char *)v192, (uint64_t *)&v250);
    if (!v131) {
      goto LABEL_302;
    }
    goto LABEL_301;
  }
  long long v133 = (uint64_t **)*((void *)v192 + 1);
  if (*((_DWORD *)v197 + 35) == 430)
  {
    long long v134 = (const CoreML::Specification::BiDirectionalLSTMLayerParams *)*((void *)v197 + 16);
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v192);
    long long v134 = (const CoreML::Specification::BiDirectionalLSTMLayerParams *)&CoreML::Specification::_BiDirectionalLSTMLayerParams_default_instance_;
  }
  CoreML::Specification::BiDirectionalLSTMLayerParams::BiDirectionalLSTMLayerParams((CoreML::Specification::BiDirectionalLSTMLayerParams *)&v262, v134);
  int v135 = v263;
  std::string::size_type v137 = v247;
  for (std::__wrap_iter<const std::string *>::iterator_type i = v248; v137 != i; v137 += 24)
  {
    uint64_t v138 = std::map<std::string,std::string>::at((uint64_t)v133, v137);
    *(_OWORD *)int v259 = *(_OWORD *)v138;
    *(_OWORD *)&v259[16] = *(_OWORD *)(v138 + 16);
    uint64_t v260 = *(void *)(v138 + 32);
    memset(v261, 0, sizeof(v261));
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v261, *(const void **)(v138 + 40), *(void *)(v138 + 48), (uint64_t)(*(void *)(v138 + 48) - *(void *)(v138 + 40)) >> 2);
    if (*(_DWORD *)&v259[4] != -1 && *(_DWORD *)&v259[4] != 1)
    {
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
      uint64_t v162 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p.__r_.__value_.__r.__words[2], (uint64_t)"BLSTM layer: '", 14);
      uint64_t v163 = *((void *)v197 + 14);
      int v164 = *(char *)(v163 + 23);
      if (v164 >= 0) {
        uint64_t v165 = *((void *)v197 + 14);
      }
      else {
        uint64_t v165 = *(void *)v163;
      }
      if (v164 >= 0) {
        uint64_t v166 = *(unsigned __int8 *)(v163 + 23);
      }
      else {
        uint64_t v166 = *(void *)(v163 + 8);
      }
      int v167 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v162, v165, v166);
      uint64_t v168 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v167, (uint64_t)"': height dimension of the input blob must be 1.", 48);
      std::endl[abi:ne180100]<char,std::char_traits<char>>(v168);
      int v169 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::runtime_error::runtime_error(v169, &v254);
      __cxa_throw(v169, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    if (*(_DWORD *)v259 != -1 && *(_DWORD *)v259 != 1)
    {
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
      std::string v154 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p.__r_.__value_.__r.__words[2], (uint64_t)"BLSTM layer: '", 14);
      uint64_t v155 = *((void *)v197 + 14);
      int v156 = *(char *)(v155 + 23);
      if (v156 >= 0) {
        uint64_t v157 = *((void *)v197 + 14);
      }
      else {
        uint64_t v157 = *(void *)v155;
      }
      if (v156 >= 0) {
        uint64_t v158 = *(unsigned __int8 *)(v155 + 23);
      }
      else {
        uint64_t v158 = *(void *)(v155 + 8);
      }
      uint64_t v159 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v154, v157, v158);
      uint64_t v160 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v159, (uint64_t)"': width dimension of the input blob must be 1.", 47);
      std::endl[abi:ne180100]<char,std::char_traits<char>>(v160);
      int v161 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::runtime_error::runtime_error(v161, &v254);
      __cxa_throw(v161, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    if (v261[0]) {
      operator delete(v261[0]);
    }
  }
  long long v139 = v250;
  char v140 = v251;
  if (v250 != v251)
  {
    int v141 = 2 * v135;
    do
    {
      __p.__r_.__value_.__r.__words[0] = 0x100000001;
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 4) = -1;
      LODWORD(__p.__r_.__value_.__r.__words[1]) = v141;
      HIDWORD(__p.__r_.__value_.__r.__words[2]) = -1;
      long long v256 = 0u;
      long long v257 = 0u;
      uint64_t v258 = 0;
      EspressoConverter::validateShape((int *)&__p, *((void *)v197 + 14), (uint64_t)v250);
      *(void *)int v259 = v139;
      uint64_t v142 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v133, v139, (long long **)v259);
      *((void *)v142 + 7) = 0x100000001;
      *((_DWORD *)v142 + 1CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = v141;
      *(void *)(v142 + 68) = -1;
      *((_DWORD *)v142 + 19) = -1;
      *((void *)v142 + 10) = 0;
      *((void *)v142 + 11) = 0;
      std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v142 + 96, 0, 0, 0);
      v139 += 24;
    }
    while (v139 != v140);
  }
  CoreML::Specification::BiDirectionalLSTMLayerParams::~BiDirectionalLSTMLayerParams((CoreML::Specification::BiDirectionalLSTMLayerParams *)&v262);
  size_t v131 = v195;
  if (v195) {
LABEL_301:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v131);
LABEL_302:
  if (v205) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v205);
  }
  uint64_t v230 = &unk_1EF0CE698;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(&v231);
  CoreML::Specification::BiDirectionalLSTMLayerParams::~BiDirectionalLSTMLayerParams((CoreML::Specification::BiDirectionalLSTMLayerParams *)v238);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v247;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v250;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v253.__r_.__value_.__l.__data_);
  }
  return v130;
}

void sub_19EAA3080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::__shared_weak_count *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (SLOBYTE(STACK[0x24F]) < 0)
  {
    operator delete((void *)STACK[0x238]);
    if ((v71 & 1) == 0)
    {
LABEL_6:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&STACK[0x250]);
      if (STACK[0x398]) {
        operator delete((void *)STACK[0x398]);
      }
      CoreML::Specification::BiDirectionalLSTMLayerParams::~BiDirectionalLSTMLayerParams((CoreML::Specification::BiDirectionalLSTMLayerParams *)(v73 - 240));
      if (a13) {
        std::__shared_weak_count::__release_shared[abi:ne180100](a13);
      }
      if (a31) {
        std::__shared_weak_count::__release_shared[abi:ne180100](a31);
      }
      a52 = (uint64_t)&unk_1EF0CE698;
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(&a53);
      CoreML::Specification::BiDirectionalLSTMLayerParams::~BiDirectionalLSTMLayerParams((CoreML::Specification::BiDirectionalLSTMLayerParams *)&a56);
      a32 = (uint64_t)&a71;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a32);
      a32 = (uint64_t)&STACK[0x208];
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a32);
      if (SLOBYTE(STACK[0x237]) < 0) {
        operator delete((void *)STACK[0x220]);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v71)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v72);
  goto LABEL_6;
}

BOOL LayerTranslator::addSimpleRecurrent(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  long long v4 = (long long *)*((void *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v151, *(const std::string::value_type **)v4, *((void *)v4 + 1));
  }
  else
  {
    long long v5 = *v4;
    v151.__r_.__value_.__r.__words[2] = *((void *)v4 + 2);
    *(_OWORD *)&v151.__r_.__value_.__l.__data_ = v5;
  }
  uint64_t v148 = 0;
  int v149 = 0;
  uint64_t v150 = 0;
  uint64_t v145 = 0;
  uint64_t v146 = 0;
  uint64_t v147 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v148, (uint64_t *)&v145, *((void *)this + 1));
  if (*((_DWORD *)a2 + 35) == 400)
  {
    std::string v7 = (const CoreML::Specification::SimpleRecurrentLayerParams *)*((void *)a2 + 16);
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    std::string v7 = (const CoreML::Specification::SimpleRecurrentLayerParams *)&CoreML::Specification::_SimpleRecurrentLayerParams_default_instance_;
  }
  CoreML::Specification::SimpleRecurrentLayerParams::SimpleRecurrentLayerParams((CoreML::Specification::SimpleRecurrentLayerParams *)v135, v7);
  __asm { FMOV            V8.2S, #1.0 }
  uint64_t v115 = _D8;
  uint64_t v117 = _D8;
  int v114 = 2;
  int v116 = 0;
  uint64_t v119 = _D8;
  uint64_t v121 = _D8;
  int v118 = 0;
  int v120 = 2;
  uint64_t v123 = _D8;
  unint64_t v124 = 512;
  int v122 = 0;
  int v125 = 1065353216;
  long long v126 = xmmword_19EC35D70;
  uint64_t v128 = 0x100000000;
  uint64_t v129 = 1065353216;
  int v127 = 1112014848;
  int v130 = 1065353216;
  uint64_t v131 = 0;
  __int16 v134 = 0;
  uint64_t v132 = 1;
  uint64_t v112 = 1;
  uint64_t v113 = _D8;
  uint64_t v133 = v142;
  unsigned int v14 = v141;
  if ((int)v141 < 1)
  {
    exceptiounint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v153, v14);
    int v78 = std::string::insert(&v153, 0, "output size = ");
    long long v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
    *(void *)&v158[16] = *((void *)&v78->__r_.__value_.__l + 2);
    *(_OWORD *)uint64_t v158 = v79;
    v78->__r_.__value_.__l.__size_ = 0;
    v78->__r_.__value_.__r.__words[2] = 0;
    v78->__r_.__value_.__r.__words[0] = 0;
    uint64_t v80 = std::string::append((std::string *)v158, " not allowed in layer ");
    long long v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
    v161.__r_.__value_.__r.__words[2] = v80->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v161.__r_.__value_.__l.__data_ = v81;
    v80->__r_.__value_.__l.__size_ = 0;
    v80->__r_.__value_.__r.__words[2] = 0;
    v80->__r_.__value_.__r.__words[0] = 0;
    if ((v151.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v82 = &v151;
    }
    else {
      int v82 = (std::string *)v151.__r_.__value_.__r.__words[0];
    }
    if ((v151.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v151.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v151.__r_.__value_.__l.__size_;
    }
    uint64_t v84 = std::string::append(&v161, (const std::string::value_type *)v82, size);
    long long v85 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v84->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v85;
    v84->__r_.__value_.__l.__size_ = 0;
    v84->__r_.__value_.__r.__words[2] = 0;
    v84->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &__str);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  unsigned int v15 = v140;
  if ((int)v140 <= 0)
  {
    uint64_t v86 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v153, v15);
    uint64_t v87 = std::string::insert(&v153, 0, "input size = ");
    long long v88 = *(_OWORD *)&v87->__r_.__value_.__l.__data_;
    *(void *)&v158[16] = *((void *)&v87->__r_.__value_.__l + 2);
    *(_OWORD *)uint64_t v158 = v88;
    v87->__r_.__value_.__l.__size_ = 0;
    v87->__r_.__value_.__r.__words[2] = 0;
    v87->__r_.__value_.__r.__words[0] = 0;
    uint64_t v89 = std::string::append((std::string *)v158, " not allowed in layer ");
    long long v90 = *(_OWORD *)&v89->__r_.__value_.__l.__data_;
    v161.__r_.__value_.__r.__words[2] = v89->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v161.__r_.__value_.__l.__data_ = v90;
    v89->__r_.__value_.__l.__size_ = 0;
    v89->__r_.__value_.__r.__words[2] = 0;
    v89->__r_.__value_.__r.__words[0] = 0;
    if ((v151.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v91 = &v151;
    }
    else {
      long long v91 = (std::string *)v151.__r_.__value_.__r.__words[0];
    }
    if ((v151.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v92 = HIBYTE(v151.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v92 = v151.__r_.__value_.__l.__size_;
    }
    uint64_t v93 = std::string::append(&v161, (const std::string::value_type *)v91, v92);
    long long v94 = *(_OWORD *)&v93->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v93->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v94;
    v93->__r_.__value_.__l.__size_ = 0;
    v93->__r_.__value_.__r.__words[2] = 0;
    v93->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v86, &__str);
    __cxa_throw(v86, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  unint64_t v124 = __PAIR64__(v140, v141);
  if (0xAAAAAAAAAAAAAAABLL * ((v149 - v148) >> 3) >= 3)
  {
    std::string v95 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3C1380](v95, "Recurrent layer: too many output blobs.");
    goto LABEL_171;
  }
  if (v149 - v148 != 48)
  {
    std::string v95 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3C1380](v95, "Recurrent layer: too few output blobs.");
LABEL_171:
    __cxa_throw(v95, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((char *)v146 - (char *)v145) >> 3) >= 3)
  {
    uint64_t v96 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3C1380](v96, "Recurrent layer: too many input blobs.");
    goto LABEL_174;
  }
  if ((char *)v146 - (char *)v145 != 48)
  {
    uint64_t v96 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3C1380](v96, "Recurrent layer: too few input blobs.");
LABEL_174:
    __cxa_throw(v96, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int v16 = v143;
  if (!v143) {
    DWORD2(v12CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = 0;
  }
  int v17 = v136;
  if (!v136) {
    int v17 = &CoreML::Specification::_ActivationParams_default_instance_;
  }
  HIDWORD(v112) = EspressoConverter::CoreMLToEspressoRNNActivation((EspressoConverter *)*((unsigned int *)v17 + 7), v8);
  uint64_t v113 = _D8;
  if (v144)
  {
    float v18 = v145;
    if ((v145->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v19 = HIBYTE(v145->__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v19 = v145->__r_.__value_.__l.__size_;
    }
    p_str = &__str;
    std::string::basic_string[abi:ne180100]((uint64_t)&__str, v19 + 11);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    if (v19)
    {
      if ((v18->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string v21 = v18;
      }
      else {
        std::string v21 = (std::string *)v18->__r_.__value_.__r.__words[0];
      }
      memmove(p_str, v21, v19);
    }
    strcpy((char *)p_str + v19, "_prereverse");
    memset(&v161, 0, sizeof(v161));
    v161.__r_.__value_.__l.__size_ = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v161, (long long *)&__str);
    std::string v22 = (uint64_t **)*((void *)this + 1);
    v153.__r_.__value_.__r.__words[0] = (std::string::size_type)v145;
    std::string v23 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v22, v145, (long long **)&v153);
    std::string v24 = (uint64_t **)*((void *)this + 1);
    v153.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
    uint64_t v25 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v24, &__str, (long long **)&v153);
    long long v26 = *(_OWORD *)(v23 + 56);
    long long v27 = *(_OWORD *)(v23 + 72);
    *((void *)v25 + 11) = *((void *)v23 + 11);
    *(_OWORD *)(v25 + 72) = v27;
    *(_OWORD *)(v25 + 5CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = v26;
    if (v25 != v23) {
      std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v25 + 96, *((char **)v23 + 12), *((void *)v23 + 13), (uint64_t)(*((void *)v23 + 13) - *((void *)v23 + 12)) >> 2);
    }
    memset(v158, 0, 24);
    *(void *)&v158[8] = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)v158, (long long *)v145);
    int v28 = *(void **)this;
    std::string::basic_string[abi:ne180100]<0>(&v153, "sequence_reverse");
    if ((v151.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v29 = HIBYTE(v151.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v29 = v151.__r_.__value_.__l.__size_;
    }
    p_p = &__p;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v29 + 11);
    if (v108 < 0) {
      p_p = __p;
    }
    if (v29)
    {
      if ((v151.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        __int16 v31 = &v151;
      }
      else {
        __int16 v31 = (std::string *)v151.__r_.__value_.__r.__words[0];
      }
      memmove(p_p, v31, v29);
    }
    strcpy((char *)p_p + v29, "_prereverse");
    memset(&v105, 0, sizeof(v105));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v105, *(long long **)v158, *(long long **)&v158[8], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&v158[8] - *(void *)v158) >> 3));
    memset(&v104, 0, sizeof(v104));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v104, (long long *)v161.__r_.__value_.__l.__data_, (long long *)v161.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v161.__r_.__value_.__l.__size_ - v161.__r_.__value_.__r.__words[0]) >> 3));
    Espresso::sequential_builder::add<Espresso::sequence_reverse_params>(&v109, v28, (uint64_t)&v153, (uint64_t)&__p, (uint64_t)&v111, (long long *)v105.__r_.__value_.__l.__data_, (long long *)v105.__r_.__value_.__l.__size_, (long long **)&v104);
    int v152 = &v104;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v152);
    int v152 = &v105;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v152);
    if (v108 < 0) {
      operator delete(__p);
    }
    if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v153.__r_.__value_.__l.__data_);
    }
    std::string::operator=(v145, &__str);
    if (v110) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v110);
    }
    v153.__r_.__value_.__r.__words[0] = (std::string::size_type)v158;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v153);
    *(void *)uint64_t v158 = &v161;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v158);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
  int v32 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(&__str, "rnn_arch");
  memset(&v103, 0, sizeof(v103));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v103, (long long *)v145, (long long *)v146, 0xAAAAAAAAAAAAAAABLL * (((char *)v146 - (char *)v145) >> 3));
  memset(&v102, 0, sizeof(v102));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v102, (long long *)v148, (long long *)v149, 0xAAAAAAAAAAAAAAABLL * ((v149 - v148) >> 3));
  Espresso::sequential_builder::add<Espresso::rnn_arch_params>((uint64_t *)&__p, v32, (uint64_t)&__str, (uint64_t)&v151, (uint64_t)&v112, (long long *)v103.__r_.__value_.__l.__data_, (long long *)v103.__r_.__value_.__l.__size_, (long long **)&v102);
  v161.__r_.__value_.__r.__words[0] = (std::string::size_type)&v102;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v161);
  v161.__r_.__value_.__r.__words[0] = (std::string::size_type)&v103;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v161);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  std::string v34 = __p;
  uint64_t v33 = v107;
  if (v107)
  {
    atomic_fetch_add_explicit(&v107->__shared_owners_, 1uLL, memory_order_relaxed);
    if (v137) {
      int v35 = v137;
    }
    else {
      int v35 = &CoreML::Specification::_WeightParams_default_instance_;
    }
    uint64_t v101 = v33;
    atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    if (v137) {
      int v35 = v137;
    }
    else {
      int v35 = &CoreML::Specification::_WeightParams_default_instance_;
    }
    uint64_t v101 = 0;
  }
  uint64_t v100 = v34;
  std::string::basic_string[abi:ne180100]<0>(&__str, "SimpleRecurrent");
  std::string::basic_string[abi:ne180100]<0>(&v161, "W_x");
  EspressoConverter::setRecurrentWeightBlob((uint64_t)v35, (uint64_t *)&v100, v15, v14, (const void **)&__str.__r_.__value_.__l.__data_, (const void **)&v161.__r_.__value_.__l.__data_);
  if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v161.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v101) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v101);
  }
  if (v138) {
    uint64_t v36 = v138;
  }
  else {
    uint64_t v36 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  v99[0] = (uint64_t)v34;
  v99[1] = (uint64_t)v33;
  if (v33) {
    atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(&__str, "SimpleRecurrent");
  std::string::basic_string[abi:ne180100]<0>(&v161, "W_h");
  EspressoConverter::setRecurrentWeightBlob((uint64_t)v36, v99, v14, v14, (const void **)&__str.__r_.__value_.__l.__data_, (const void **)&v161.__r_.__value_.__l.__data_);
  if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v161.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    if (v33) {
      goto LABEL_74;
    }
  }
  else if (v33)
  {
LABEL_74:
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
    if (!v16) {
      goto LABEL_91;
    }
    if (v139) {
      long long v38 = v139;
    }
    else {
      long long v38 = &CoreML::Specification::_WeightParams_default_instance_;
    }
    int v97 = v34;
    uint64_t v98 = v33;
    atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
    goto LABEL_85;
  }
  if (!v16) {
    goto LABEL_91;
  }
  if (v139) {
    long long v38 = v139;
  }
  else {
    long long v38 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  int v97 = v34;
  uint64_t v98 = v33;
LABEL_85:
  std::string::basic_string[abi:ne180100]<0>(&__str, "SimpleRecurrent");
  std::string::basic_string[abi:ne180100]<0>(&v161, "b");
  EspressoConverter::setRecurrentBiasBlob((uint64_t)v38, (uint64_t *)&v97, v14, (const void **)&__str.__r_.__value_.__l.__data_, (uint64_t)&v161);
  if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v161.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
LABEL_91:
  if (v138) {
    long long v39 = v138;
  }
  else {
    long long v39 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  uint64_t v40 = v39[5];
  uint64_t v41 = *(unsigned __int8 *)(v40 + 23);
  if (*(char *)(v40 + 23) < 0) {
    uint64_t v42 = *(void *)(v40 + 8);
  }
  else {
    uint64_t v42 = *(unsigned __int8 *)(v40 + 23);
  }
  uint64_t v43 = v39[6];
  if (*(char *)(v43 + 23) < 0) {
    uint64_t v44 = *(void *)(v43 + 8);
  }
  else {
    uint64_t v44 = *(unsigned __int8 *)(v43 + 23);
  }
  int v45 = *((_DWORD *)v39 + 4);
  uint64_t v46 = v39[7];
  if (*(char *)(v46 + 23) < 0) {
    uint64_t v47 = *(void *)(v46 + 8);
  }
  else {
    uint64_t v47 = *(unsigned __int8 *)(v46 + 23);
  }
  BOOL v48 = 0;
  if (v45 <= 0) {
    int v49 = 1;
  }
  else {
    int v49 = 2;
  }
  if (v42) {
    int v50 = v49;
  }
  else {
    int v50 = v45 > 0;
  }
  if (v44) {
    ++v50;
  }
  if (v47) {
    ++v50;
  }
  if (v45 <= 0 && v50 == 1)
  {
    if ((v41 & 0x80) != 0) {
      uint64_t v41 = *(void *)(v40 + 8);
    }
    BOOL v48 = v41 != 0;
  }
  if (**((unsigned char **)this + 2))
  {
    LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v148);
    if (!v33) {
      goto LABEL_121;
    }
    goto LABEL_120;
  }
  uint64_t v52 = (uint64_t **)*((void *)this + 1);
  if (*((_DWORD *)a2 + 35) == 400)
  {
    uint64_t v53 = (const CoreML::Specification::SimpleRecurrentLayerParams *)*((void *)a2 + 16);
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v37);
    uint64_t v53 = (const CoreML::Specification::SimpleRecurrentLayerParams *)&CoreML::Specification::_SimpleRecurrentLayerParams_default_instance_;
  }
  CoreML::Specification::SimpleRecurrentLayerParams::SimpleRecurrentLayerParams((CoreML::Specification::SimpleRecurrentLayerParams *)&v161, v53);
  int v54 = v162;
  std::string v55 = v145;
  for (std::__wrap_iter<const std::string *>::iterator_type i = v146; v55 != i; ++v55)
  {
    uint64_t v57 = std::map<std::string,std::string>::at((uint64_t)v52, v55);
    *(_OWORD *)uint64_t v158 = *(_OWORD *)v57;
    *(_OWORD *)&v158[16] = *(_OWORD *)(v57 + 16);
    uint64_t v159 = *(void *)(v57 + 32);
    memset(v160, 0, sizeof(v160));
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v160, *(const void **)(v57 + 40), *(void *)(v57 + 48), (uint64_t)(*(void *)(v57 + 48) - *(void *)(v57 + 40)) >> 2);
    if (*(_DWORD *)&v158[4] != -1 && *(_DWORD *)&v158[4] != 1)
    {
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__str);
      std::string v69 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str.__r_.__value_.__r.__words[2], (uint64_t)"Recurrent layer: '", 18);
      uint64_t v70 = *((void *)a2 + 14);
      int v71 = *(char *)(v70 + 23);
      if (v71 >= 0) {
        uint64_t v72 = *((void *)a2 + 14);
      }
      else {
        uint64_t v72 = *(void *)v70;
      }
      if (v71 >= 0) {
        uint64_t v73 = *(unsigned __int8 *)(v70 + 23);
      }
      else {
        uint64_t v73 = *(void *)(v70 + 8);
      }
      uint64_t v74 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, v72, v73);
      long long v75 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)"': height dimension of the input blob must be 1.", 48);
      std::endl[abi:ne180100]<char,std::char_traits<char>>(v75);
      std::string::size_type v76 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::runtime_error::runtime_error(v76, &v153);
      __cxa_throw(v76, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    if (*(_DWORD *)v158 != -1 && *(_DWORD *)v158 != 1)
    {
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__str);
      uint64_t v61 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str.__r_.__value_.__r.__words[2], (uint64_t)"Recurrent layer: '", 18);
      uint64_t v62 = *((void *)a2 + 14);
      int v63 = *(char *)(v62 + 23);
      if (v63 >= 0) {
        uint64_t v64 = *((void *)a2 + 14);
      }
      else {
        uint64_t v64 = *(void *)v62;
      }
      if (v63 >= 0) {
        uint64_t v65 = *(unsigned __int8 *)(v62 + 23);
      }
      else {
        uint64_t v65 = *(void *)(v62 + 8);
      }
      uint64_t v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, v64, v65);
      uint64_t v67 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"': width dimension of the input blob must be 1.", 47);
      std::endl[abi:ne180100]<char,std::char_traits<char>>(v67);
      uint64_t v68 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::runtime_error::runtime_error(v68, &v153);
      __cxa_throw(v68, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    if (v160[0]) {
      operator delete(v160[0]);
    }
  }
  uint64_t v58 = v148;
  for (uint64_t j = v149; v58 != j; v58 += 24)
  {
    __str.__r_.__value_.__r.__words[0] = 0x100000001;
    *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 4) = -1;
    LODWORD(__str.__r_.__value_.__r.__words[1]) = v54;
    HIDWORD(__str.__r_.__value_.__r.__words[2]) = -1;
    long long v155 = 0u;
    long long v156 = 0u;
    uint64_t v157 = 0;
    EspressoConverter::validateShape((int *)&__str, *((void *)a2 + 14), (uint64_t)v148);
    *(void *)uint64_t v158 = v58;
    unint64_t v60 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v52, v58, (long long **)v158);
    *((void *)v60 + 7) = 0x100000001;
    *((_DWORD *)v60 + 1CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = v54;
    *(void *)(v60 + 68) = -1;
    *((_DWORD *)v60 + 19) = -1;
    *((void *)v60 + 10) = 0;
    *((void *)v60 + 11) = 0;
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v60 + 96, 0, 0, 0);
  }
  CoreML::Specification::SimpleRecurrentLayerParams::~SimpleRecurrentLayerParams((CoreML::Specification::SimpleRecurrentLayerParams *)&v161);
  if (v33) {
LABEL_120:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
LABEL_121:
  if (v107) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v107);
  }
  CoreML::Specification::SimpleRecurrentLayerParams::~SimpleRecurrentLayerParams((CoreML::Specification::SimpleRecurrentLayerParams *)v135);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v145;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v148;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v151.__r_.__value_.__l.__data_);
  }
  return v48;
}

void sub_19EAA41B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,std::__shared_weak_count *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  if (SLOBYTE(STACK[0x21F]) < 0)
  {
    operator delete((void *)STACK[0x208]);
    if ((v74 & 1) == 0)
    {
LABEL_6:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&STACK[0x220]);
      std::string v77 = *(void **)(v75 - 216);
      if (v77) {
        operator delete(v77);
      }
      CoreML::Specification::SimpleRecurrentLayerParams::~SimpleRecurrentLayerParams((CoreML::Specification::SimpleRecurrentLayerParams *)(v75 - 192));
      if (v72) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v72);
      }
      if (a29) {
        std::__shared_weak_count::__release_shared[abi:ne180100](a29);
      }
      CoreML::Specification::SimpleRecurrentLayerParams::~SimpleRecurrentLayerParams((CoreML::Specification::SimpleRecurrentLayerParams *)&a54);
      a34 = (uint64_t)&a63;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a34);
      a34 = (uint64_t)&a66;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a34);
      if (a72 < 0) {
        operator delete(a69);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v74)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v73);
  goto LABEL_6;
}

void LayerTranslator::addUnaryFunction(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  v113[2] = *(void ***)MEMORY[0x1E4F143B8];
  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  long long v4 = (long long *)*((void *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v103, *(const std::string::value_type **)v4, *((void *)v4 + 1));
  }
  else
  {
    long long v5 = *v4;
    v103.__r_.__value_.__r.__words[2] = *((void *)v4 + 2);
    *(_OWORD *)&v103.__r_.__value_.__l.__data_ = v5;
  }
  uint64_t v100 = 0;
  uint64_t v101 = 0;
  uint64_t v102 = 0;
  int v97 = 0;
  uint64_t v98 = 0;
  uint64_t v99 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v100, (uint64_t *)&v97, *((void *)this + 1));
  if (*((_DWORD *)a2 + 35) == 220)
  {
    std::string v7 = (uint64_t *)*((void *)a2 + 16);
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    std::string v7 = &CoreML::Specification::_UnaryFunctionLayerParams_default_instance_;
  }
  std::string::size_type v92 = &unk_1EF0D6808;
  uint64_t v93 = 0;
  int v96 = 0;
  uint64_t v8 = v7[1];
  if (v8) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((unint64_t *)&v93, v8 & 0xFFFFFFFFFFFFFFFELL);
  }
  long long v9 = *((_OWORD *)v7 + 1);
  float v95 = *((float *)v7 + 8);
  long long v94 = v9;
  uint64_t v86 = 0;
  uint64_t v87 = 1065353216;
  int v89 = 0;
  char v90 = 0;
  uint64_t v91 = 0;
  float v10 = *((float *)&v9 + 2);
  if (*((float *)&v94 + 2) == 0.0) {
    float v10 = 0.000001;
  }
  float v88 = v10;
  switch((int)v94)
  {
    case 0:
      int v11 = 11;
      goto LABEL_21;
    case 1:
      int v11 = 12;
      goto LABEL_21;
    case 2:
      int v11 = 10;
      goto LABEL_21;
    case 3:
      int v12 = 13;
      goto LABEL_17;
    case 4:
      int v11 = 27;
      goto LABEL_21;
    case 5:
      int v11 = 26;
      goto LABEL_21;
    case 6:
      int v11 = 24;
LABEL_21:
      LODWORD(v8CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = v11;
      break;
    case 7:
      int v12 = 25;
LABEL_17:
      LODWORD(v8CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = v12;
      LODWORD(v87) = DWORD1(v94);
      break;
    default:
      break;
  }
  if (fabsf(v95) >= 0.00001) {
    float v13 = v95;
  }
  else {
    float v13 = 1.0;
  }
  if (fabsf(*((float *)&v94 + 3)) >= 0.00001 || fabsf(v13 + -1.0) >= 0.00001)
  {
    memset(&v104, 0, 24);
    unsigned int v15 = v97;
    if (*((char *)v97 + 23) >= 0) {
      size_t v16 = *((unsigned __int8 *)v97 + 23);
    }
    else {
      size_t v16 = *((void *)v97 + 1);
    }
    int v17 = &v81;
    std::string::basic_string[abi:ne180100]((uint64_t)&v81, v16 + 1);
    if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      int v17 = (std::string *)v81.__r_.__value_.__r.__words[0];
    }
    if (v16)
    {
      if (*((char *)v15 + 23) >= 0) {
        float v18 = v15;
      }
      else {
        float v18 = *(long long **)v15;
      }
      memmove(v17, v18, v16);
    }
    *(_WORD *)((char *)&v17->__r_.__value_.__l.__data_ + v1CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = 95;
    std::to_string(&v80, *(_DWORD *)(*((void *)this + 2) + 4));
    if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v19 = &v80;
    }
    else {
      std::string::size_type v19 = (std::string *)v80.__r_.__value_.__r.__words[0];
    }
    if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v80.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v80.__r_.__value_.__l.__size_;
    }
    std::string v21 = std::string::append(&v81, (const std::string::value_type *)v19, size);
    long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v106.__end_ = (std::__split_buffer<std::string>::pointer)v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v106.__first_ = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    std::string v23 = std::string::append((std::string *)&v106, "_post_scale");
    std::string v24 = (char *)v23->__r_.__value_.__r.__words[0];
    v112.__r_.__value_.__r.__words[0] = v23->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v112.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v23->__r_.__value_.__r.__words[1] + 7);
    char v25 = HIBYTE(v23->__r_.__value_.__r.__words[2]);
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    begiunint64_t n = v104.__begin_;
    if (v104.__begin_ >= v104.__end_)
    {
      unint64_t v28 = 0xAAAAAAAAAAAAAAABLL * (((char *)v104.__begin_ - (char *)v104.__first_) >> 3);
      unint64_t v29 = v28 + 1;
      if (v28 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
      }
      if (0x5555555555555556 * (((char *)v104.__end_ - (char *)v104.__first_) >> 3) > v29) {
        unint64_t v29 = 0x5555555555555556 * (((char *)v104.__end_ - (char *)v104.__first_) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v104.__end_ - (char *)v104.__first_) >> 3) >= 0x555555555555555) {
        unint64_t v30 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v30 = v29;
      }
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v104.__end_;
      if (v30) {
        __int16 v31 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v104.__end_, v30);
      }
      else {
        __int16 v31 = 0;
      }
      int v32 = v31 + v28;
      __v.__first_ = v31;
      __v.__begin_ = v32;
      __v.__end_cap_.__value_ = &v31[v30];
      v32->__r_.__value_.__r.__words[0] = (std::string::size_type)v24;
      v32->__r_.__value_.__l.__size_ = v112.__r_.__value_.__r.__words[0];
      *(std::string::size_type *)((char *)&v32->__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v112.__r_.__value_.__r.__words + 7);
      *((unsigned char *)&v32->__r_.__value_.__s + 23) = v25;
      v112.__r_.__value_.__r.__words[0] = 0;
      *(std::string::size_type *)((char *)v112.__r_.__value_.__r.__words + 7) = 0;
      __v.__end_ = v32 + 1;
      std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)&v104, &__v);
      long long v27 = v104.__begin_;
      std::__split_buffer<std::string>::~__split_buffer(&__v);
    }
    else
    {
      v104.__begin_->__r_.__value_.__l.__data_ = v24;
      begin->__r_.__value_.__l.__size_ = v112.__r_.__value_.__r.__words[0];
      *(std::string::size_type *)((char *)&begin->__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v112.__r_.__value_.__r.__words + 7);
      *((unsigned char *)&begin->__r_.__value_.__s + 23) = v25;
      long long v27 = begin + 1;
    }
    v104.__begin_ = v27;
    if (SHIBYTE(v106.__end_) < 0) {
      operator delete(v106.__first_);
    }
    if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v80.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v81.__r_.__value_.__l.__data_);
    }
    memset(&v81, 0, sizeof(v81));
    uint64_t v33 = v97;
    if (*((char *)v97 + 23) >= 0) {
      size_t v34 = *((unsigned __int8 *)v97 + 23);
    }
    else {
      size_t v34 = *((void *)v97 + 1);
    }
    int v35 = &v80;
    std::string::basic_string[abi:ne180100]((uint64_t)&v80, v34 + 1);
    if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      int v35 = (std::string *)v80.__r_.__value_.__r.__words[0];
    }
    if (v34)
    {
      if (*((char *)v33 + 23) >= 0) {
        uint64_t v36 = v33;
      }
      else {
        uint64_t v36 = *(long long **)v33;
      }
      memmove(v35, v36, v34);
    }
    *(_WORD *)((char *)&v35->__r_.__value_.__l.__data_ + v34) = 95;
    std::to_string(&v112, *(_DWORD *)(*((void *)this + 2) + 4));
    if ((v112.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v37 = &v112;
    }
    else {
      uint64_t v37 = (std::string *)v112.__r_.__value_.__r.__words[0];
    }
    if ((v112.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v38 = HIBYTE(v112.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v38 = v112.__r_.__value_.__l.__size_;
    }
    long long v39 = std::string::append(&v80, (const std::string::value_type *)v37, v38);
    long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
    v106.__end_ = (std::__split_buffer<std::string>::pointer)v39->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v106.__first_ = v40;
    v39->__r_.__value_.__l.__size_ = 0;
    v39->__r_.__value_.__r.__words[2] = 0;
    v39->__r_.__value_.__r.__words[0] = 0;
    uint64_t v41 = std::string::append((std::string *)&v106, "_post_scale_shift");
    std::string::size_type v42 = v41->__r_.__value_.__r.__words[0];
    v113[0] = (void **)v41->__r_.__value_.__l.__size_;
    *(void ***)((char *)v113 + 7) = *(void ***)((char *)&v41->__r_.__value_.__r.__words[1] + 7);
    char v43 = HIBYTE(v41->__r_.__value_.__r.__words[2]);
    v41->__r_.__value_.__l.__size_ = 0;
    v41->__r_.__value_.__r.__words[2] = 0;
    v41->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v44 = v81.__r_.__value_.__l.__size_;
    if (v81.__r_.__value_.__l.__size_ >= v81.__r_.__value_.__r.__words[2])
    {
      unint64_t v46 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v81.__r_.__value_.__l.__size_ - v81.__r_.__value_.__r.__words[0]) >> 3);
      unint64_t v47 = v46 + 1;
      if (v46 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
      }
      if (0x5555555555555556 * ((uint64_t)(v81.__r_.__value_.__r.__words[2] - v81.__r_.__value_.__r.__words[0]) >> 3) > v47) {
        unint64_t v47 = 0x5555555555555556
      }
            * ((uint64_t)(v81.__r_.__value_.__r.__words[2] - v81.__r_.__value_.__r.__words[0]) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v81.__r_.__value_.__r.__words[2] - v81.__r_.__value_.__r.__words[0]) >> 3) >= 0x555555555555555) {
        unint64_t v48 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v48 = v47;
      }
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v81.__r_.__value_.__r.__words[2];
      if (v48) {
        int v49 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v81.__r_.__value_.__r.__words[2], v48);
      }
      else {
        int v49 = 0;
      }
      int v50 = v49 + v46;
      __v.__first_ = v49;
      __v.__begin_ = v50;
      __v.__end_cap_.__value_ = &v49[v48];
      v50->__r_.__value_.__r.__words[0] = v42;
      v50->__r_.__value_.__l.__size_ = (std::string::size_type)v113[0];
      *(std::string::size_type *)((char *)&v50->__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v113 + 7);
      *((unsigned char *)&v50->__r_.__value_.__s + 23) = v43;
      memset(v113, 0, 15);
      __v.__end_ = v50 + 1;
      std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)&v81, &__v);
      std::string::size_type v45 = v81.__r_.__value_.__l.__size_;
      std::__split_buffer<std::string>::~__split_buffer(&__v);
    }
    else
    {
      *(void *)v81.__r_.__value_.__l.__size_ = v42;
      *(void ***)(v44 + 8) = v113[0];
      *(void ***)(v44 + 15) = *(void ***)((char *)v113 + 7);
      *(unsigned char *)(v44 + 23) = v43;
      std::string::size_type v45 = v44 + 24;
    }
    v81.__r_.__value_.__l.__size_ = v45;
    if (SHIBYTE(v106.__end_) < 0) {
      operator delete(v106.__first_);
    }
    if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v112.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v80.__r_.__value_.__l.__data_);
    }
    *(std::__split_buffer<std::string>::pointer *)((char *)&__v.__begin_ + 4) = (std::__split_buffer<std::string>::pointer)0x358637BD00000000;
    HIDWORD(__v.__end_) = 0;
    LOBYTE(__v.__end_cap_.__value_) = 0;
    *(void *)((char *)&v110 + 4) = 0;
    __v.__first_ = (std::__split_buffer<std::string>::pointer)1;
    *(float *)&__v.__begin_ = v13;
    uint64_t v51 = *(void **)this;
    std::string::basic_string[abi:ne180100]<0>(&v106, "elementwise");
    if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v52 = HIBYTE(v103.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v52 = v103.__r_.__value_.__l.__size_;
    }
    uint64_t v53 = &v80;
    std::string::basic_string[abi:ne180100]((uint64_t)&v80, v52 + 6);
    if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v53 = (std::string *)v80.__r_.__value_.__r.__words[0];
    }
    if (v52)
    {
      if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v54 = &v103;
      }
      else {
        int v54 = (std::string *)v103.__r_.__value_.__r.__words[0];
      }
      memmove(v53, v54, v52);
    }
    strcpy((char *)v53 + v52, "_scale");
    memset(&v77, 0, sizeof(v77));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v77, v97, v98, 0xAAAAAAAAAAAAAAABLL * (((char *)v98 - (char *)v97) >> 3));
    memset(&v76, 0, sizeof(v76));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v76, (long long *)v104.__first_, (long long *)v104.__begin_, 0xAAAAAAAAAAAAAAABLL * (((char *)v104.__begin_ - (char *)v104.__first_) >> 3));
    Espresso::sequential_builder::add<Espresso::elementwise_params>(&v78, v51, (uint64_t)&v106, (uint64_t)&v80, (uint64_t)&__v, (long long *)v77.__r_.__value_.__l.__data_, (long long *)v77.__r_.__value_.__l.__size_, (long long **)&v76);
    if (v79) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v79);
    }
    v112.__r_.__value_.__r.__words[0] = (std::string::size_type)&v76;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v112);
    v112.__r_.__value_.__r.__words[0] = (std::string::size_type)&v77;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v112);
    if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v80.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v106.__end_) < 0) {
      operator delete(v106.__first_);
    }
    *(std::__split_buffer<std::string>::pointer *)((char *)&v106.__begin_ + 4) = (std::__split_buffer<std::string>::pointer)0x358637BD00000000;
    HIDWORD(v106.__end_) = 0;
    LOBYTE(v106.__end_cap_.__value_) = 0;
    *(void *)((char *)&v107 + 4) = 0;
    v106.__first_ = 0;
    LODWORD(v106.__begin_) = HIDWORD(v94);
    std::string v55 = *(void **)this;
    std::string::basic_string[abi:ne180100]<0>(&v80, "elementwise");
    if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v56 = HIBYTE(v103.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v56 = v103.__r_.__value_.__l.__size_;
    }
    uint64_t v57 = &v112;
    std::string::basic_string[abi:ne180100]((uint64_t)&v112, v56 + 6);
    if ((v112.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v57 = (std::string *)v112.__r_.__value_.__r.__words[0];
    }
    if (v56)
    {
      if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v58 = &v103;
      }
      else {
        uint64_t v58 = (std::string *)v103.__r_.__value_.__r.__words[0];
      }
      memmove(v57, v58, v56);
    }
    strcpy((char *)v57 + v56, "_shift");
    memset(&v73, 0, sizeof(v73));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v73, (long long *)v104.__first_, (long long *)v104.__begin_, 0xAAAAAAAAAAAAAAABLL * (((char *)v104.__begin_ - (char *)v104.__first_) >> 3));
    memset(&v72, 0, sizeof(v72));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v72, (long long *)v81.__r_.__value_.__l.__data_, (long long *)v81.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v81.__r_.__value_.__l.__size_ - v81.__r_.__value_.__r.__words[0]) >> 3));
    Espresso::sequential_builder::add<Espresso::elementwise_params>(&v74, v55, (uint64_t)&v80, (uint64_t)&v112, (uint64_t)&v106, (long long *)v73.__r_.__value_.__l.__data_, (long long *)v73.__r_.__value_.__l.__size_, (long long **)&v72);
    if (v75) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v75);
    }
    v113[0] = (void **)&v72;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v113);
    v113[0] = (void **)&v73;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v113);
    if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v112.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v80.__r_.__value_.__l.__data_);
    }
    uint64_t v59 = *(void **)this;
    std::string::basic_string[abi:ne180100]<0>(&v80, "elementwise");
    memset(&v69, 0, sizeof(v69));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v69, (long long *)v81.__r_.__value_.__l.__data_, (long long *)v81.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v81.__r_.__value_.__l.__size_ - v81.__r_.__value_.__r.__words[0]) >> 3));
    memset(&v68, 0, sizeof(v68));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v68, v100, v101, 0xAAAAAAAAAAAAAAABLL * (((char *)v101 - (char *)v100) >> 3));
    Espresso::sequential_builder::add<Espresso::elementwise_params>(&v70, v59, (uint64_t)&v80, (uint64_t)&v103, (uint64_t)&v86, (long long *)v69.__r_.__value_.__l.__data_, (long long *)v69.__r_.__value_.__l.__size_, (long long **)&v68);
    if (v71) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v71);
    }
    v112.__r_.__value_.__r.__words[0] = (std::string::size_type)&v68;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v112);
    v112.__r_.__value_.__r.__words[0] = (std::string::size_type)&v69;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v112);
    if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v80.__r_.__value_.__l.__data_);
    }
    __v.__first_ = &v81;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
    __v.__first_ = (std::__split_buffer<std::string>::pointer)&v104;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  }
  else
  {
    unsigned int v14 = *(void **)this;
    std::string::basic_string[abi:ne180100]<0>(&__v, "elementwise");
    memset(&v83, 0, sizeof(v83));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v83, v97, v98, 0xAAAAAAAAAAAAAAABLL * (((char *)v98 - (char *)v97) >> 3));
    memset(&v82, 0, sizeof(v82));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v82, v100, v101, 0xAAAAAAAAAAAAAAABLL * (((char *)v101 - (char *)v100) >> 3));
    Espresso::sequential_builder::add<Espresso::elementwise_params>(&v84, v14, (uint64_t)&__v, (uint64_t)&v103, (uint64_t)&v86, (long long *)v83.__r_.__value_.__l.__data_, (long long *)v83.__r_.__value_.__l.__size_, (long long **)&v82);
    if (v85) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v85);
    }
    v106.__first_ = &v82;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v106);
    v106.__first_ = &v83;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v106);
    if (SHIBYTE(__v.__end_) < 0) {
      operator delete(__v.__first_);
    }
  }
  if (**((unsigned char **)this + 2))
  {
    LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v100);
  }
  else
  {
    unint64_t v60 = (uint64_t **)*((void *)this + 1);
    uint64_t v61 = std::map<std::string,std::string>::at((uint64_t)v60, v97);
    std::__split_buffer<std::string> __v = *(std::__split_buffer<std::string> *)v61;
    long long v110 = 0uLL;
    uint64_t v111 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v110, *(const void **)(v61 + 40), *(void *)(v61 + 48), (uint64_t)(*(void *)(v61 + 48) - *(void *)(v61 + 40)) >> 2);
    std::__split_buffer<std::string> v106 = __v;
    uint64_t v62 = (void *)v110;
    long long v107 = 0uLL;
    uint64_t v108 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v107, (const void *)v110, *((uint64_t *)&v110 + 1), (uint64_t)(*((void *)&v110 + 1) - v110) >> 2);
    std::__split_buffer<std::string> v104 = v106;
    int v63 = (char *)v107;
    memset(__p, 0, sizeof(__p));
    uint64_t v64 = *((void *)&v107 + 1);
    unint64_t v65 = (uint64_t)(*((void *)&v107 + 1) - v107) >> 2;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(__p, (const void *)v107, *((uint64_t *)&v107 + 1), v65);
    EspressoConverter::validateShape((int *)&v104, *((void *)a2 + 14), (uint64_t)v100);
    if (__p[0]) {
      operator delete(__p[0]);
    }
    v81.__r_.__value_.__r.__words[0] = (std::string::size_type)v100;
    uint64_t v66 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v60, v100, (long long **)&v81);
    long long v67 = *(_OWORD *)&v106.__end_;
    *(_OWORD *)(v66 + 5CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = *(_OWORD *)&v106.__first_;
    *(_OWORD *)(v66 + 72) = v67;
    *((void *)v66 + 11) = v106.__end_cap_.__value_;
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v66 + 96, v63, v64, v65);
    if (v63) {
      operator delete(v63);
    }
    if (v62) {
      operator delete(v62);
    }
  }
  std::string::size_type v92 = &unk_1EF0D6808;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(&v93);
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v97;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v100;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v103.__r_.__value_.__l.__data_);
  }
}

void sub_19EAA512C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,char a62,uint64_t a63)
{
  STACK[0x220] = v71;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x220]);
  STACK[0x220] = (unint64_t)&a42;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x220]);
  if (*(char *)(v72 - 185) < 0) {
    operator delete(*(void **)(v72 - 208));
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v70);
  STACK[0x220] = (unint64_t)&a59;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x220]);
  STACK[0x220] = (unint64_t)&a62;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x220]);
  if (a70 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *CoreML::copySpecArrayStringToVector(void *result, char *a2, size_t __sz)
{
  if (a2[23] >= 0) {
    uint64_t v3 = a2;
  }
  else {
    uint64_t v3 = *(char **)a2;
  }
  result[1] = 0;
  result[2] = 0;
  void *result = 0;
  if (__sz)
  {
    long long v5 = result;
    if ((__sz & 0x8000000000000000) != 0) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
    std::vector<std::string>::const_iterator v6 = (char *)operator new(__sz);
    void *v5 = v6;
    std::string v7 = &v6[__sz];
    uint64_t v5[2] = &v6[__sz];
    double result = memmove(v6, v3, __sz);
    v5[1] = v7;
  }
  return result;
}

void sub_19EAA5490(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void CoreML::dequantizeWeightParamSpec(CoreML *this, const CoreML::Specification::WeightParams *a2, unint64_t a3)
{
  std::vector<std::string>::const_iterator v6 = (uint64_t *)*((void *)a2 + 8);
  if (!v6) {
    std::vector<std::string>::const_iterator v6 = &CoreML::Specification::_QuantizationParams_default_instance_;
  }
  uint64_t v7 = *((unsigned int *)v6 + 4);
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = 0;
  int v8 = *((_DWORD *)v6 + 9);
  if (v8 != 102)
  {
    if (v8 != 101)
    {
      exceptiounint64_t n = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x19F3C1380](exception, "Unrecognizable quantization parameters");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    uint64_t v9 = v6[3];
    uint64_t v69 = 0;
    uint64_t v70 = 0;
    long long v67 = &unk_1EF0D65A8;
    unint64_t v68 = 0;
    int v10 = *(_DWORD *)(v9 + 16);
    if (v10)
    {
      google::protobuf::RepeatedField<float>::Reserve((unsigned int *)&v69, v10);
      memcpy((void *)(v70 + 8), (const void *)(*(void *)(v9 + 24) + 8), 4 * *(int *)(v9 + 16));
      LODWORD(v69) = *(_DWORD *)(v9 + 16);
    }
    uint64_t v71 = 0;
    uint64_t v72 = 0;
    int v11 = *(_DWORD *)(v9 + 40);
    if (v11)
    {
      google::protobuf::RepeatedField<float>::Reserve((unsigned int *)&v71, v11);
      memcpy((void *)(v72 + 8), (const void *)(*(void *)(v9 + 48) + 8), 4 * *(int *)(v9 + 40));
      int v12 = *(_DWORD *)(v9 + 40);
      LODWORD(v71) = v12;
    }
    else
    {
      int v12 = 0;
    }
    int v73 = 0;
    uint64_t v31 = *(void *)(v9 + 8);
    if (v31)
    {
      google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&v68, v31 & 0xFFFFFFFFFFFFFFFELL);
      int v12 = v71;
    }
    int v32 = v69;
    LODWORD(v63[0]) = 0;
    std::vector<float>::vector(&__p, (int)v69, v63);
    if (v32)
    {
      uint64_t v33 = 0;
      uint64_t v34 = v70;
      int v35 = __p;
      do
      {
        v35[v33] = *(_DWORD *)(v34 + 4 * (int)v33 + 8);
        ++v33;
      }
      while (v32 != v33);
    }
    LODWORD(v61) = 0;
    std::vector<float>::vector(v63, (int)v71, &v61);
    if (v12)
    {
      uint64_t v36 = 0;
      uint64_t v37 = v72;
      std::string::size_type v38 = v63[0];
      do
      {
        v38[v36] = *(_DWORD *)(v37 + 4 * (int)v36 + 8);
        ++v36;
      }
      while (v12 != v36);
    }
    long long v39 = (unsigned __int8 *)*((void *)a2 + 6);
    int v74 = 0;
    std::vector<float>::vector(&v61, a3, &v74);
    if ((v39[23] & 0x80u) == 0) {
      long long v40 = v39;
    }
    else {
      long long v40 = *(unsigned __int8 **)v39;
    }
    if (v7 == 8)
    {
      if (a3 <= 1) {
        uint64_t v41 = 1;
      }
      else {
        uint64_t v41 = a3;
      }
      std::string::size_type v42 = v63[0];
      if (!a3)
      {
        uint64_t v58 = v62;
        *(_OWORD *)this = v61;
        *((void *)this + 2) = v58;
LABEL_61:
        v63[1] = v42;
        operator delete(v42);
LABEL_62:
        if (__p)
        {
          uint64_t v66 = __p;
          operator delete(__p);
        }
        CoreML::Specification::LinearQuantizationParams::~LinearQuantizationParams((CoreML::Specification::LinearQuantizationParams *)&v67);
        return;
      }
      char v43 = (float *)v61;
      float v44 = *(float *)__p;
      float v45 = *(float *)v63[0];
      do
      {
        unsigned int v46 = *v40++;
        *v43++ = v45 + (float)(v44 * (float)v46);
        --v41;
      }
      while (v41);
    }
    else if (a3)
    {
      unint64_t v47 = 0;
      unint64_t v48 = 0;
      int v49 = (float *)__p;
      int v50 = (float *)v63[0];
      unint64_t v51 = 8 - v7;
      uint64_t v52 = v61;
      do
      {
        unint64_t v53 = v47 >> 3;
        unint64_t v54 = v47 & 7;
        std::string v55 = *(unsigned __int8 **)v39;
        if ((v39[23] & 0x80u) == 0) {
          std::string v55 = v39;
        }
        unsigned int v56 = (v55[v53] << v54) >> v51;
        if (v51 <= v54) {
          v56 |= v55[v53 + 1] >> (v51 - v54 + 8);
        }
        *(float *)(v52 + 4 * v48) = v50[v48 / a3] + (float)((float)v56 * v49[v48 / a3]);
        ++v48;
        v47 += v7;
      }
      while (a3 != v48);
    }
    std::string::size_type v42 = v63[0];
    uint64_t v57 = v62;
    *(_OWORD *)this = v61;
    *((void *)this + 2) = v57;
    if (!v42) {
      goto LABEL_62;
    }
    goto LABEL_61;
  }
  CoreML::Specification::LookUpTableQuantizationParams::LookUpTableQuantizationParams((CoreML::Specification::LookUpTableQuantizationParams *)&v67, (const CoreML::Specification::LookUpTableQuantizationParams *)v6[3]);
  uint64_t v13 = v69;
  std::vector<float>::vector(&__p, v69);
  if ((int)v13 >= 1)
  {
    unsigned int v14 = __p;
    unsigned int v15 = (int *)(v70 + 8);
    do
    {
      int v16 = *v15++;
      *v14++ = v16;
      --v13;
    }
    while (v13);
  }
  int v17 = (uint64_t *)*((void *)a2 + 6);
  LODWORD(v61) = 0;
  std::vector<float>::vector(v63, a3, &v61);
  float v18 = __p;
  if (2 << (v7 - 1) != (v66 - (unsigned char *)__p) >> 2)
  {
    unint64_t v60 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3C1380](v60, "Lookup table size incorrect.");
    __cxa_throw(v60, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (v7 == 8)
  {
    if (a3)
    {
      uint64_t v19 = 0;
      std::string v20 = v63[0];
      do
      {
        if (*((char *)v17 + 23) >= 0) {
          std::string v21 = v17;
        }
        else {
          std::string v21 = (uint64_t *)*v17;
        }
        v20[v19] = v18[*((unsigned __int8 *)v21 + v19)];
        ++v19;
      }
      while (a3 != v19);
    }
  }
  else if (a3)
  {
    unint64_t v22 = 0;
    unint64_t v23 = 8 - v7;
    std::string v24 = v63[0];
    do
    {
      unint64_t v25 = v22 >> 3;
      unint64_t v26 = v22 & 7;
      long long v27 = (uint64_t *)*v17;
      if (*((char *)v17 + 23) >= 0) {
        long long v27 = v17;
      }
      unsigned int v28 = (*((unsigned __int8 *)v27 + v25) << v26) >> v23;
      if (v23 <= v26) {
        v28 |= *((unsigned __int8 *)v27 + v25 + 1) >> (v23 - v26 + 8);
      }
      *v24++ = v18[v28];
      v22 += v7;
      --a3;
    }
    while (a3);
  }
  unint64_t v29 = __p;
  uint64_t v30 = v64;
  *(_OWORD *)this = *(_OWORD *)v63;
  *((void *)this + 2) = v30;
  if (v29)
  {
    uint64_t v66 = v29;
    operator delete(v29);
  }
  CoreML::Specification::LookUpTableQuantizationParams::~LookUpTableQuantizationParams((CoreML::Specification::LookUpTableQuantizationParams *)&v67);
}

void sub_19EAA5974(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26)
{
  if (__p) {
    operator delete(__p);
  }
  if (a17) {
    operator delete(a17);
  }
  CoreML::Specification::LookUpTableQuantizationParams::~LookUpTableQuantizationParams((CoreML::Specification::LookUpTableQuantizationParams *)&a20);
  _Unwind_Resume(a1);
}

void CoreML::setLUTQuantizationParams(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = a1[8];
  BOOL v3 = a1 == &CoreML::Specification::_WeightParams_default_instance_ || v2 == 0;
  if (!v3 && *(_DWORD *)(v2 + 36) == 102)
  {
    CoreML::Specification::LookUpTableQuantizationParams::LookUpTableQuantizationParams((CoreML::Specification::LookUpTableQuantizationParams *)v14, *(const CoreML::Specification::LookUpTableQuantizationParams **)(v2 + 24));
    std::vector<std::string>::const_iterator v6 = (uint64_t *)a1[8];
    if (!v6) {
      std::vector<std::string>::const_iterator v6 = &CoreML::Specification::_QuantizationParams_default_instance_;
    }
    unsigned int v7 = *((_DWORD *)v6 + 4) - 1;
    unint64_t v8 = 2 << (*((unsigned char *)v6 + 16) - 1);
    *(void *)(a2 + 8) = *(void *)a2;
    int v13 = 0;
    std::vector<float>::resize((char **)a2, v8, &v13);
    if (v7 <= 0x1E)
    {
      uint64_t v9 = 0;
      uint64_t v10 = v15;
      int v11 = *(char **)a2;
      if (v8 <= 1) {
        uint64_t v12 = 1;
      }
      else {
        uint64_t v12 = v8;
      }
      do
      {
        *(_DWORD *)int v11 = *(_DWORD *)(v10 + (v9 >> 30) + 8);
        v11 += 4;
        v9 += 0x100000000;
        --v12;
      }
      while (v12);
    }
    CoreML::Specification::LookUpTableQuantizationParams::~LookUpTableQuantizationParams((CoreML::Specification::LookUpTableQuantizationParams *)v14);
  }
}

void sub_19EAA5B50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  CoreML::Specification::LookUpTableQuantizationParams::~LookUpTableQuantizationParams((CoreML::Specification::LookUpTableQuantizationParams *)va);
  _Unwind_Resume(a1);
}

float CoreML::setLinearQuantizationScaleBias(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  *(void *)(a2 + 8) = *(void *)a2;
  int v23 = 1065353216;
  std::vector<float>::resize((char **)a2, a4, &v23);
  if (*(_DWORD *)(a1 + 16) == 1)
  {
    if (a4)
    {
      uint64_t v8 = 0;
      int v9 = *(_DWORD *)(*(void *)(a1 + 24) + 8);
      uint64_t v10 = *(char **)a2;
      do
        *(_DWORD *)&v10[4 * v8++] = v9;
      while (a4 > v8);
    }
  }
  else
  {
    if (*(_DWORD *)(a1 + 40) != a4)
    {
      exceptiounint64_t n = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x19F3C1380](exception, "Unrecognizable linear quantization scale parameter length.");
LABEL_23:
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    if (a4)
    {
      uint64_t v11 = 0;
      uint64_t v12 = *(void *)(a1 + 24);
      int v13 = *(char **)a2;
      do
      {
        *(_DWORD *)&v13[4 * v11] = *(_DWORD *)(v12 + 4 * (int)v11 + 8);
        ++v11;
      }
      while (a4 > v11);
    }
  }
  *(void *)(a3 + 8) = *(void *)a3;
  int v22 = 0;
  std::vector<float>::resize((char **)a3, a4, &v22);
  int v15 = *(_DWORD *)(a1 + 40);
  if (!v15) {
    return result;
  }
  if (*(_DWORD *)(a1 + 16) != v15)
  {
    exceptiounint64_t n = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3C1380](exception, "Quantization bias should have the same length as scale if it exists\n");
    goto LABEL_23;
  }
  if (v15 == 1)
  {
    if (a4)
    {
      uint64_t v16 = 0;
      float result = *(float *)(*(void *)(a1 + 48) + 8);
      int v17 = *(char **)a3;
      do
        *(float *)&v17[4 * v16++] = result;
      while (a4 > v16);
    }
  }
  else if (a4)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *(void *)(a1 + 48);
    std::string v20 = *(char **)a3;
    do
    {
      float result = *(float *)(v19 + 4 * (int)v18 + 8);
      *(float *)&v20[4 * v18++] = result;
    }
    while (a4 > v18);
  }
  return result;
}

void sub_19EAA5D04(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void CoreML::setQuantizationParams(CoreML::Specification::protobuf_NeuralNetwork_2eproto *a1, uint64_t *a2, unint64_t a3, const void **a4)
{
  unsigned int v7 = (uint64_t *)*((void *)a1 + 8);
  if (!v7) {
    unsigned int v7 = &CoreML::Specification::_QuantizationParams_default_instance_;
  }
  int v8 = *((_DWORD *)v7 + 9);
  if (v8 == 101)
  {
    LODWORD(v3CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = 1065353216;
    std::vector<float>::vector(v31, a3, &v36);
    LODWORD(__p[0]) = 0;
    uint64_t v10 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)std::vector<float>::vector(&v36, a3, __p);
    uint64_t v11 = (uint64_t *)*((void *)a1 + 8);
    if (!v11) {
      uint64_t v11 = &CoreML::Specification::_QuantizationParams_default_instance_;
    }
    if (*((_DWORD *)v11 + 9) == 101)
    {
      uint64_t v12 = (uint64_t *)v11[3];
    }
    else
    {
      CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v10);
      uint64_t v12 = &CoreML::Specification::_LinearQuantizationParams_default_instance_;
    }
    CoreML::setLinearQuantizationScaleBias((uint64_t)v12, (uint64_t)v31, (uint64_t)&v36, a3);
    uint64_t v22 = *a2;
    uint64_t v34 = 0;
    int v35 = 0;
    if (*((char *)a4 + 23) >= 0) {
      size_t v23 = *((unsigned __int8 *)a4 + 23);
    }
    else {
      size_t v23 = (size_t)a4[1];
    }
    std::string v24 = __p;
    std::string::basic_string[abi:ne180100]((uint64_t)__p, v23 + 13);
    if (v33 < 0) {
      std::string v24 = (void **)__p[0];
    }
    if (v23)
    {
      if (*((char *)a4 + 23) >= 0) {
        unint64_t v25 = a4;
      }
      else {
        unint64_t v25 = *a4;
      }
      memmove(v24, v25, v23);
    }
    strcpy((char *)v24 + v23, "per_ch_qscale");
    uint64_t v26 = 4 * a3;
    (*(void (**)(uint64_t, uint64_t *, void **, void *, uint64_t, void))(*(void *)v22 + 168))(v22, &v34, __p, v31[0], v26, 0);
    if (v33 < 0) {
      operator delete(__p[0]);
    }
    if (v35) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v35);
    }
    uint64_t v27 = *a2;
    uint64_t v34 = 0;
    int v35 = 0;
    if (*((char *)a4 + 23) >= 0) {
      size_t v28 = *((unsigned __int8 *)a4 + 23);
    }
    else {
      size_t v28 = (size_t)a4[1];
    }
    unint64_t v29 = __p;
    std::string::basic_string[abi:ne180100]((uint64_t)__p, v28 + 12);
    if (v33 < 0) {
      unint64_t v29 = (void **)__p[0];
    }
    if (v28)
    {
      if (*((char *)a4 + 23) >= 0) {
        uint64_t v30 = a4;
      }
      else {
        uint64_t v30 = *a4;
      }
      memmove(v29, v30, v28);
    }
    strcpy((char *)v29 + v28, "per_ch_qbias");
    (*(void (**)(uint64_t, uint64_t *, void **, void *, uint64_t, void))(*(void *)v27 + 168))(v27, &v34, __p, v36, v26, 0);
    if (v33 < 0) {
      operator delete(__p[0]);
    }
    if (v35) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v35);
    }
    if (v36)
    {
      uint64_t v37 = v36;
      operator delete(v36);
    }
    std::string v21 = v31[0];
    if (v31[0])
    {
      v31[1] = v31[0];
      goto LABEL_62;
    }
  }
  else
  {
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    if (v8 == 102)
    {
      int v13 = (const CoreML::Specification::LookUpTableQuantizationParams *)v7[3];
    }
    else
    {
      CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(a1);
      int v13 = (const CoreML::Specification::LookUpTableQuantizationParams *)&CoreML::Specification::_LookUpTableQuantizationParams_default_instance_;
    }
    CoreML::Specification::LookUpTableQuantizationParams::LookUpTableQuantizationParams((CoreML::Specification::LookUpTableQuantizationParams *)v31, v13);
    unsigned int v14 = (uint64_t *)*((void *)a1 + 8);
    if (!v14) {
      unsigned int v14 = &CoreML::Specification::_QuantizationParams_default_instance_;
    }
    uint64_t v15 = v14[2];
    CoreML::setLUTQuantizationParams((uint64_t *)a1, (uint64_t)&v36);
    uint64_t v16 = *a2;
    uint64_t v34 = 0;
    int v35 = 0;
    if (*((char *)a4 + 23) >= 0) {
      size_t v17 = *((unsigned __int8 *)a4 + 23);
    }
    else {
      size_t v17 = (size_t)a4[1];
    }
    uint64_t v18 = __p;
    std::string::basic_string[abi:ne180100]((uint64_t)__p, v17 + 14);
    if (v33 < 0) {
      uint64_t v18 = (void **)__p[0];
    }
    if (v17)
    {
      if (*((char *)a4 + 23) >= 0) {
        uint64_t v19 = a4;
      }
      else {
        uint64_t v19 = *a4;
      }
      memmove(v18, v19, v17);
    }
    strcpy((char *)v18 + v17, "lut_to_float32");
    std::string v20 = v36;
    (*(void (**)(uint64_t, uint64_t *, void **, void *, uint64_t, void))(*(void *)v16 + 168))(v16, &v34, __p, v36, 4 * (2 << (v15 - 1)), 0);
    if (v33 < 0) {
      operator delete(__p[0]);
    }
    if (v35) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v35);
    }
    CoreML::Specification::LookUpTableQuantizationParams::~LookUpTableQuantizationParams((CoreML::Specification::LookUpTableQuantizationParams *)v31);
    if (v20)
    {
      std::string v21 = v20;
LABEL_62:
      operator delete(v21);
    }
  }
}

void sub_19EAA60F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,std::__shared_weak_count *a22)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }
  std::string v24 = *(void **)(v22 - 72);
  if (v24)
  {
    *(void *)(v22 - 64) = v24;
    operator delete(v24);
  }
  if (a10) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void LayerTranslator::addStack(LayerTranslator *this, uint64_t **a2)
{
  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  long long v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v22, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    long long v5 = *(_OWORD *)v4;
    v22.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v5;
  }
  uint64_t v19 = 0;
  std::string v20 = 0;
  uint64_t v21 = 0;
  uint64_t v16 = 0;
  size_t v17 = 0;
  uint64_t v18 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v19, (uint64_t *)&v16, *((void *)this + 1));
  if (*((_DWORD *)a2 + 35) == 925)
  {
    unsigned int v7 = a2[16];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    unsigned int v7 = &CoreML::Specification::_StackLayerParams_default_instance_;
  }
  int v15 = v7[2];
  int v8 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(&__p, "stack_nd");
  memset(&v10, 0, sizeof(v10));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v10, v16, v17, 0xAAAAAAAAAAAAAAABLL * (((char *)v17 - (char *)v16) >> 3));
  memset(&v9, 0, sizeof(v9));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v9, v19, v20, 0xAAAAAAAAAAAAAAABLL * (((char *)v20 - (char *)v19) >> 3));
  memset(&v24, 0, sizeof(v24));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v24, (long long *)v10.__r_.__value_.__l.__data_, (long long *)v10.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10.__r_.__value_.__l.__size_ - v10.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v23, 0, sizeof(v23));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v23, (long long *)v9.__r_.__value_.__l.__data_, (long long *)v9.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9.__r_.__value_.__l.__size_ - v9.__r_.__value_.__r.__words[0]) >> 3));
  LODWORD(v26.__r_.__value_.__l.__data_) = (***(uint64_t (****)(void))(v8[14] + 8))(*(void *)(v8[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  uint64_t v27 = v13;
  size_t v28 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(&v26, 0, sizeof(v26));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v26, (long long *)v24.__r_.__value_.__l.__data_, (long long *)v24.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24.__r_.__value_.__l.__size_ - v24.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v25, 0, sizeof(v25));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v25, (long long *)v23.__r_.__value_.__l.__data_, (long long *)v23.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23.__r_.__value_.__l.__size_ - v23.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  unint64_t v29 = &v25;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  unint64_t v29 = &v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  if (*v8) {
    Espresso::sequential_builder::add_shape_from_kernel();
  }
  v26.__r_.__value_.__r.__words[0] = (std::string::size_type)&v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
  v26.__r_.__value_.__r.__words[0] = (std::string::size_type)&v24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  v26.__r_.__value_.__r.__words[0] = (std::string::size_type)&v9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
  v26.__r_.__value_.__r.__words[0] = (std::string::size_type)&v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
  if (v12 < 0) {
    operator delete(__p);
  }
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v19);
  v26.__r_.__value_.__r.__words[0] = (std::string::size_type)&v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
  v26.__r_.__value_.__r.__words[0] = (std::string::size_type)&v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
}

void sub_19EAA64BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char **__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,std::__shared_weak_count *a22,uint64_t a23,char *a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36)
{
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }
  *(void *)(v36 - 5CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = &a36;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v36 - 56));
  *(void *)(v36 - 5CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = v36 - 144;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v36 - 56));
  *(void *)(v36 - 5CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = &a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v36 - 56));
  *(void *)(v36 - 5CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = &a12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v36 - 56));
  if (a20 < 0) {
    operator delete(__p);
  }
  std::string __p = &a24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  a24 = &a27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  if (a35 < 0) {
    operator delete(a30);
  }
  _Unwind_Resume(a1);
}

void LayerTranslator::addMVN(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  long long v4 = (long long *)*((void *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v35, *(const std::string::value_type **)v4, *((void *)v4 + 1));
  }
  else
  {
    long long v5 = *v4;
    v35.__r_.__value_.__r.__words[2] = *((void *)v4 + 2);
    *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v5;
  }
  int v32 = 0;
  char v33 = 0;
  uint64_t v34 = 0;
  unint64_t v29 = 0;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v32, (uint64_t *)&v29, *((void *)this + 1));
  if (*((_DWORD *)a2 + 35) == 165)
  {
    unsigned int v7 = (uint64_t *)*((void *)a2 + 16);
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    unsigned int v7 = &CoreML::Specification::_MeanVarianceNormalizeLayerParams_default_instance_;
  }
  std::string v26 = &unk_1EF0D88B0;
  v27[0] = 0;
  int v28 = 0;
  uint64_t v8 = v7[1];
  if (v8) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((unint64_t *)v27, v8 & 0xFFFFFFFFFFFFFFFELL);
  }
  uint64_t v9 = v7[2];
  v27[1] = v9;
  if ((v9 & 0xFF00) != 0) {
    int v10 = 1;
  }
  else {
    int v10 = 2;
  }
  v24[1] = v10;
  int v25 = 2;
  float v11 = *((float *)&v9 + 1);
  if (!(_BYTE)v9) {
    int v25 = 1;
  }
  if (*((float *)&v9 + 1) == 0.0) {
    float v11 = 0.000001;
  }
  *(float *)std::string v24 = v11;
  char v12 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(&v45, "l2_normalize");
  memset(&v21, 0, sizeof(v21));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v21, v29, v30, 0xAAAAAAAAAAAAAAABLL * (((char *)v30 - (char *)v29) >> 3));
  memset(&v20, 0, sizeof(v20));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v20, v32, v33, 0xAAAAAAAAAAAAAAABLL * (((char *)v33 - (char *)v32) >> 3));
  Espresso::sequential_builder::add<Espresso::l2_norm_params>(&v22, v12, (uint64_t)&v45, (uint64_t)&v35, (uint64_t)v24, (long long *)v21.__r_.__value_.__l.__data_, (long long *)v21.__r_.__value_.__l.__size_, (long long **)&v20);
  *(void *)&long long v39 = &v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v39);
  *(void *)&long long v39 = &v21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v39);
  if (SBYTE7(v46) < 0) {
    operator delete((void *)v45);
  }
  if (**((unsigned char **)this + 2))
  {
    LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v32);
  }
  else
  {
    uint64_t v13 = (uint64_t **)*((void *)this + 1);
    uint64_t v14 = std::map<std::string,std::string>::at((uint64_t)v13, v29);
    long long v45 = *(_OWORD *)v14;
    long long v46 = *(_OWORD *)(v14 + 16);
    uint64_t v47 = *(void *)(v14 + 32);
    unint64_t v48 = 0;
    uint64_t v49 = 0;
    uint64_t v50 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v48, *(const void **)(v14 + 40), *(void *)(v14 + 48), (uint64_t)(*(void *)(v14 + 48) - *(void *)(v14 + 40)) >> 2);
    long long v39 = v45;
    long long v40 = v46;
    int v15 = v48;
    uint64_t v41 = v47;
    std::string::size_type v42 = 0;
    uint64_t v43 = 0;
    uint64_t v44 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v42, v48, v49, (v49 - (uint64_t)v48) >> 2);
    v36[0] = v39;
    v36[1] = v40;
    uint64_t v16 = v42;
    uint64_t v37 = v41;
    memset(__p, 0, sizeof(__p));
    uint64_t v17 = v43;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(__p, v42, v43, (v43 - (uint64_t)v42) >> 2);
    EspressoConverter::validateShape((int *)v36, *((void *)a2 + 14), (uint64_t)v32);
    if (__p[0]) {
      operator delete(__p[0]);
    }
    unint64_t v51 = v32;
    uint64_t v18 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v13, v32, &v51);
    long long v19 = v40;
    *(_OWORD *)(v18 + 5CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = v39;
    *(_OWORD *)(v18 + 72) = v19;
    *((void *)v18 + 11) = v41;
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v18 + 96, v16, v17, (v17 - (uint64_t)v16) >> 2);
    if (v16) {
      operator delete(v16);
    }
    if (v15) {
      operator delete(v15);
    }
  }
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  std::string v26 = &unk_1EF0D88B0;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v27);
  *(void *)&long long v45 = &v29;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
  *(void *)&long long v45 = &v32;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
}

void sub_19EAA6948(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p)
{
  if (__p)
  {
    operator delete(__p);
    if (!v43)
    {
LABEL_3:
      if (!v42)
      {
LABEL_8:
        if (a16) {
          std::__shared_weak_count::__release_shared[abi:ne180100](a16);
        }
        google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v41);
        *(void *)(v44 - 224) = &a23;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v44 - 224));
        *(void *)(v44 - 224) = &a26;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v44 - 224));
        if (a34 < 0) {
          operator delete(a29);
        }
        _Unwind_Resume(a1);
      }
LABEL_7:
      operator delete(v42);
      goto LABEL_8;
    }
  }
  else if (!v43)
  {
    goto LABEL_3;
  }
  operator delete(v43);
  if (!v42) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

void LayerTranslator::addRound(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  long long v4 = (long long *)*((void *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)v4, *((void *)v4 + 1));
  }
  else
  {
    long long v5 = *v4;
    v23.__r_.__value_.__r.__words[2] = *((void *)v4 + 2);
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v5;
  }
  std::string v20 = 0;
  std::string v21 = 0;
  uint64_t v22 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v20, (uint64_t *)&v17, *((void *)this + 1));
  v13[2] = (void **)897988541;
  char v14 = 0;
  int v15 = 0;
  int v16 = 0;
  v13[0] = (void **)37;
  v13[1] = (void **)1065353216;
  std::vector<std::string>::const_iterator v6 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
  memset(&v8, 0, sizeof(v8));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v8, v17, v18, 0xAAAAAAAAAAAAAAABLL * (((char *)v18 - (char *)v17) >> 3));
  memset(&v7, 0, sizeof(v7));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v7, v20, v21, 0xAAAAAAAAAAAAAAABLL * (((char *)v21 - (char *)v20) >> 3));
  Espresso::sequential_builder::add<Espresso::elementwise_params>(&v11, v6, (uint64_t)__p, (uint64_t)&v23, (uint64_t)v13, (long long *)v8.__r_.__value_.__l.__data_, (long long *)v8.__r_.__value_.__l.__size_, (long long **)&v7);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  std::string v24 = &v7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  std::string v24 = &v8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v20);
  v13[0] = (void **)&v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v13);
  v13[0] = (void **)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v13);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
}

void sub_19EAA6BF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  a23 = v23 - 112;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  a23 = v23 - 88;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  if (*(char *)(v23 - 41) < 0) {
    operator delete(*(void **)(v23 - 64));
  }
  _Unwind_Resume(a1);
}

void LayerTranslator::addOneHot(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  long long v4 = (long long *)*((void *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)v4, *((void *)v4 + 1));
  }
  else
  {
    long long v5 = *v4;
    v31.__r_.__value_.__r.__words[2] = *((void *)v4 + 2);
    *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v5;
  }
  int v28 = 0;
  unint64_t v29 = 0;
  uint64_t v30 = 0;
  int v25 = 0;
  std::string v26 = 0;
  uint64_t v27 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v28, (uint64_t *)&v25, *((void *)this + 1));
  if (*((_DWORD *)a2 + 35) == 1450)
  {
    std::string v7 = (uint64_t *)*((void *)a2 + 16);
    int v21 = v7[2];
LABEL_8:
    int v22 = *((_DWORD *)v7 + 8);
LABEL_9:
    int v23 = *((_DWORD *)v7 + 9);
    goto LABEL_10;
  }
  unint64_t inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
  int v9 = *((_DWORD *)a2 + 35);
  int v21 = qword_1EB4DF540;
  if (v9 == 1450)
  {
    std::string v7 = (uint64_t *)*((void *)a2 + 16);
    goto LABEL_8;
  }
  uint64_t v11 = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
  int v12 = *((_DWORD *)a2 + 35);
  int v22 = dword_1EB4DF550;
  if (v12 == 1450)
  {
    std::string v7 = (uint64_t *)*((void *)a2 + 16);
    goto LABEL_9;
  }
  uint64_t v13 = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v11);
  int v14 = *((_DWORD *)a2 + 35);
  int v23 = dword_1EB4DF554;
  if (v14 == 1450)
  {
    std::string v7 = (uint64_t *)*((void *)a2 + 16);
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v13);
    std::string v7 = &CoreML::Specification::_OneHotLayerParams_default_instance_;
  }
LABEL_10:
  int v24 = v7[3];
  char v10 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(&__p, "one_hot");
  memset(&v16, 0, sizeof(v16));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v16, v25, v26, 0xAAAAAAAAAAAAAAABLL * (((char *)v26 - (char *)v25) >> 3));
  memset(&v15, 0, sizeof(v15));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v15, v28, v29, 0xAAAAAAAAAAAAAAABLL * (((char *)v29 - (char *)v28) >> 3));
  memset(&v33, 0, sizeof(v33));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v33, (long long *)v16.__r_.__value_.__l.__data_, (long long *)v16.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16.__r_.__value_.__l.__size_ - v16.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v32, 0, sizeof(v32));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v32, (long long *)v15.__r_.__value_.__l.__data_, (long long *)v15.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15.__r_.__value_.__l.__size_ - v15.__r_.__value_.__r.__words[0]) >> 3));
  LODWORD(v35.__r_.__value_.__l.__data_) = (***(uint64_t (****)(void))(v10[14] + 8))(*(void *)(v10[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  uint64_t v36 = v19;
  uint64_t v37 = v20;
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(&v35, 0, sizeof(v35));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v35, (long long *)v33.__r_.__value_.__l.__data_, (long long *)v33.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v33.__r_.__value_.__l.__size_ - v33.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v34, 0, sizeof(v34));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v34, (long long *)v32.__r_.__value_.__l.__data_, (long long *)v32.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v32.__r_.__value_.__l.__size_ - v32.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  uint64_t v38 = &v34;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v38);
  uint64_t v38 = &v35;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v38);
  if (v37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  }
  if (*v10) {
    Espresso::sequential_builder::add_shape_from_kernel();
  }
  v35.__r_.__value_.__r.__words[0] = (std::string::size_type)&v32;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
  v35.__r_.__value_.__r.__words[0] = (std::string::size_type)&v33;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  v35.__r_.__value_.__r.__words[0] = (std::string::size_type)&v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
  v35.__r_.__value_.__r.__words[0] = (std::string::size_type)&v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
  if (v18 < 0) {
    operator delete(__p);
  }
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v28);
  v35.__r_.__value_.__r.__words[0] = (std::string::size_type)&v25;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
  v35.__r_.__value_.__r.__words[0] = (std::string::size_type)&v28;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31.__r_.__value_.__l.__data_);
  }
}

void sub_19EAA700C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char **__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,std::__shared_weak_count *a23,uint64_t a24,uint64_t a25,char *a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a23);
  }
  *(void *)(v37 - 5CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = v37 - 168;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v37 - 56));
  *(void *)(v37 - 5CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = v37 - 144;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v37 - 56));
  *(void *)(v37 - 5CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v37 - 56));
  *(void *)(v37 - 5CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v37 - 56));
  if (a21 < 0) {
    operator delete(__p);
  }
  std::string __p = &a26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  a26 = &a29;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a26);
  if (a37 < 0) {
    operator delete(a32);
  }
  _Unwind_Resume(a1);
}

void LayerTranslator::addLoopContinueBreak(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  long long v4 = (long long *)*((void *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v28, *(const std::string::value_type **)v4, *((void *)v4 + 1));
  }
  else
  {
    long long v5 = *v4;
    v28.__r_.__value_.__r.__words[2] = *((void *)v4 + 2);
    *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v5;
  }
  if (*((_DWORD *)a2 + 35) == 620)
  {
    int v27 = *(_DWORD *)(*((void *)this + 2) + 8);
    std::vector<std::string>::const_iterator v6 = *(void **)this;
    std::string::basic_string[abi:ne180100]<0>(v23, "cf_jump");
    if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v28.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v28.__r_.__value_.__l.__size_;
    }
    std::string v8 = __p;
    std::string::basic_string[abi:ne180100]((uint64_t)__p, size + 6);
    if (v22 < 0) {
      std::string v8 = (void **)__p[0];
    }
    if (size)
    {
      if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v9 = &v28;
      }
      else {
        int v9 = (std::string *)v28.__r_.__value_.__r.__words[0];
      }
      memmove(v8, v9, size);
    }
    strcpy((char *)v8 + size, "_break");
    memset(v20, 0, sizeof(v20));
    memset(v19, 0, sizeof(v19));
    Espresso::sequential_builder::add<Espresso::cf_jump_params_t>(&v25, v6, (uint64_t)v23, (uint64_t)__p, (uint64_t)&v27, 0, 0, v19);
    if (v26) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v26);
    }
    unint64_t v29 = v19;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
    char v10 = v20;
  }
  else
  {
    int v27 = *(_DWORD *)(*((void *)this + 2) + 8) + 1;
    uint64_t v11 = *(void **)this;
    std::string::basic_string[abi:ne180100]<0>(v23, "cf_jump");
    if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v12 = HIBYTE(v28.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v12 = v28.__r_.__value_.__l.__size_;
    }
    uint64_t v13 = __p;
    std::string::basic_string[abi:ne180100]((uint64_t)__p, v12 + 9);
    if (v22 < 0) {
      uint64_t v13 = (void **)__p[0];
    }
    if (v12)
    {
      if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v14 = &v28;
      }
      else {
        int v14 = (std::string *)v28.__r_.__value_.__r.__words[0];
      }
      memmove(v13, v14, v12);
    }
    strcpy((char *)v13 + v12, "_continue");
    memset(v16, 0, sizeof(v16));
    memset(v15, 0, sizeof(v15));
    Espresso::sequential_builder::add<Espresso::cf_jump_params_t>(&v17, v11, (uint64_t)v23, (uint64_t)__p, (uint64_t)&v27, 0, 0, v15);
    if (v18) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
    }
    unint64_t v29 = v15;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
    char v10 = (void **)v16;
  }
  unint64_t v29 = (long long **)v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  if (v22 < 0) {
    operator delete(__p[0]);
  }
  if (v24 < 0) {
    operator delete(v23[0]);
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
}

void sub_19EAA73A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  *(void *)(v30 - 40) = v29;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 40));
  *(void *)(v30 - 40) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 40));
  if (a29 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v30 - 89) < 0) {
    operator delete(*(void **)(v30 - 112));
  }
  if (*(char *)(v30 - 41) < 0) {
    operator delete(*(void **)(v30 - 64));
  }
  _Unwind_Resume(a1);
}

BOOL LayerTranslator::addBatchedMatMul(LayerTranslator *this, uint64_t **a2)
{
  uint64_t v221 = *MEMORY[0x1E4F143B8];
  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  long long v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v204, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    long long v5 = *(_OWORD *)v4;
    v204.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v204.__r_.__value_.__l.__data_ = v5;
  }
  std::string v202 = 0;
  uint64_t v201 = 0;
  uint64_t v203 = 0;
  uint64_t v199 = 0;
  int v198 = 0;
  uint64_t v200 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v201, (uint64_t *)&v198, *((void *)this + 1));
  if (0xAAAAAAAAAAAAAAABLL * (((char *)v199 - (char *)v198) >> 3) >= 2)
  {
    v163.__r_.__value_.__s.__data_[0] = 0;
    if (*((_DWORD *)a2 + 35) == 1045)
    {
      std::string v7 = a2[16];
      v163.__r_.__value_.__s.__data_[1] = *((unsigned char *)v7 + 48);
    }
    else
    {
      unint64_t inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
      int v11 = *((_DWORD *)a2 + 35);
      v163.__r_.__value_.__s.__data_[1] = dword_1EB4E1088;
      if (v11 != 1045)
      {
        std::string v15 = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
        int v16 = *((_DWORD *)a2 + 35);
        v163.__r_.__value_.__s.__data_[2] = BYTE1(dword_1EB4E1088);
        if (v16 == 1045)
        {
          std::string v7 = a2[16];
        }
        else
        {
          CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v15);
          std::string v7 = &CoreML::Specification::_BatchedMatMulLayerParams_default_instance_;
        }
        goto LABEL_12;
      }
      std::string v7 = a2[16];
    }
    v163.__r_.__value_.__s.__data_[2] = *((unsigned char *)v7 + 49);
LABEL_12:
    if (*((unsigned char *)v7 + 51))
    {
      exceptiounint64_t n = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x19F3C1380](exception, "int8 dynamic quantization not valid with >1 input");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    std::string::size_type v12 = *(void **)this;
    std::string::basic_string[abi:ne180100]<0>(__p, "batch_matmul");
    memset(&v193, 0, sizeof(v193));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v193, v198, v199, 0xAAAAAAAAAAAAAAABLL * (((char *)v199 - (char *)v198) >> 3));
    memset(&v192, 0, sizeof(v192));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v192, v201, v202, 0xAAAAAAAAAAAAAAABLL * (((char *)v202 - (char *)v201) >> 3));
    memset(&v207, 0, sizeof(v207));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v207, (long long *)v193.__r_.__value_.__l.__data_, (long long *)v193.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v193.__r_.__value_.__l.__size_ - v193.__r_.__value_.__r.__words[0]) >> 3));
    memset(v209, 0, 24);
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v209, (long long *)v192.__r_.__value_.__l.__data_, (long long *)v192.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v192.__r_.__value_.__l.__size_ - v192.__r_.__value_.__r.__words[0]) >> 3));
    LODWORD(v211) = (***(uint64_t (****)(void))(v12[14] + 8))(*(void *)(v12[14] + 8));
    Espresso::abstract_engine_factory::make_kernel_priv();
    v185[0] = v196;
    v185[1] = v197;
    if (v197) {
      atomic_fetch_add_explicit(&v197->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v211 = 0uLL;
    v212.__r_.__value_.__r.__words[0] = 0;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&v211, (long long *)v207.__r_.__value_.__l.__data_, (long long *)v207.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v207.__r_.__value_.__l.__size_ - v207.__r_.__value_.__r.__words[0]) >> 3));
    memset(&v187, 0, sizeof(v187));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v187, *(long long **)v209, *(long long **)&v209[8], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&v209[8] - *(void *)v209) >> 3));
    Espresso::sequential_builder::add_kernel_dbg();
    v181[0] = &v187;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v181);
    v181[0] = &v211;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v181);
    if (v185[1]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v185[1]);
    }
    if (*v12) {
      Espresso::sequential_builder::add_shape_from_kernel();
    }
    *(void *)&long long v211 = v209;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v211);
    *(void *)&long long v211 = &v207;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v211);
    if (v197) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v197);
    }
    *(void *)&long long v211 = &v192;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v211);
    *(void *)&long long v211 = &v193;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v211);
    if (v195 < 0) {
      operator delete(__p[0]);
    }
    BOOL v13 = 0;
    goto LABEL_387;
  }
  std::string v8 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)std::string::basic_string[abi:ne180100]<0>(__p, "inner_product");
  if (*((_DWORD *)a2 + 35) == 1045)
  {
    int v9 = a2[16];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v8);
    int v9 = &CoreML::Specification::_BatchedMatMulLayerParams_default_instance_;
  }
  v187.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1EF0D6348;
  v187.__r_.__value_.__l.__size_ = 0;
  int v191 = 0;
  uint64_t v14 = v9[1];
  if (v14) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&v187.__r_.__value_.__l.__size_, v14 & 0xFFFFFFFFFFFFFFFELL);
  }
  if (v9 == &CoreML::Specification::_BatchedMatMulLayerParams_default_instance_)
  {
    v187.__r_.__value_.__r.__words[2] = 0;
  }
  else
  {
    if (v9[2]) {
      operator new();
    }
    v187.__r_.__value_.__r.__words[2] = 0;
    if (v9[3]) {
      operator new();
    }
  }
  long long v188 = 0;
  int v17 = *((_DWORD *)v9 + 12);
  long long v189 = *((_OWORD *)v9 + 2);
  int v190 = v17;
  unint64_t v18 = *((void *)&v189 + 1);
  unint64_t v19 = v189;
  if ((v204.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v204.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v204.__r_.__value_.__l.__size_;
  }
  int v21 = &v211;
  std::string::basic_string[abi:ne180100]((uint64_t)&v211, size + 18);
  if (v212.__r_.__value_.__s.__data_[7] < 0) {
    int v21 = (long long *)v211;
  }
  if (size)
  {
    if ((v204.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v22 = &v204;
    }
    else {
      char v22 = (std::string *)v204.__r_.__value_.__r.__words[0];
    }
    memmove(v21, v22, size);
  }
  strcpy((char *)v21 + size, "_dynamic_quantize_");
  std::to_string(&v207, *(_DWORD *)(*((void *)this + 2) + 4));
  if ((v207.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v23 = &v207;
  }
  else {
    int v23 = (std::string *)v207.__r_.__value_.__r.__words[0];
  }
  if ((v207.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v24 = HIBYTE(v207.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v24 = v207.__r_.__value_.__l.__size_;
  }
  uint64_t v25 = std::string::append((std::string *)&v211, (const std::string::value_type *)v23, v24);
  long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  std::string::size_type v186 = v25->__r_.__value_.__r.__words[2];
  *(_OWORD *)unsigned __int8 v185 = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v207.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v207.__r_.__value_.__l.__data_);
  }
  if (v212.__r_.__value_.__s.__data_[7] < 0) {
    operator delete((void *)v211);
  }
  if ((v204.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v27 = HIBYTE(v204.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v27 = v204.__r_.__value_.__l.__size_;
  }
  std::string v28 = &v211;
  std::string::basic_string[abi:ne180100]((uint64_t)&v211, v27 + 24);
  if (v212.__r_.__value_.__s.__data_[7] < 0) {
    std::string v28 = (long long *)v211;
  }
  if (v27)
  {
    if ((v204.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v29 = &v204;
    }
    else {
      uint64_t v29 = (std::string *)v204.__r_.__value_.__r.__words[0];
    }
    memmove(v28, v29, v27);
  }
  strcpy((char *)v28 + v27, "_post_quantization_blob_");
  std::to_string(&v207, *(_DWORD *)(*((void *)this + 2) + 4));
  unint64_t v152 = v18;
  if ((v207.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v30 = &v207;
  }
  else {
    uint64_t v30 = (std::string *)v207.__r_.__value_.__r.__words[0];
  }
  if ((v207.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v31 = HIBYTE(v207.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v31 = v207.__r_.__value_.__l.__size_;
  }
  std::string v32 = std::string::append((std::string *)&v211, (const std::string::value_type *)v30, v31);
  std::string v34 = (const std::string::value_type *)v32->__r_.__value_.__r.__words[0];
  std::string::size_type v33 = v32->__r_.__value_.__l.__size_;
  v184[0] = v32->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v184 + 3) = *(_DWORD *)((char *)&v32->__r_.__value_.__r.__words[2] + 3);
  int v35 = SHIBYTE(v32->__r_.__value_.__r.__words[2]);
  v32->__r_.__value_.__l.__size_ = 0;
  v32->__r_.__value_.__r.__words[2] = 0;
  v32->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v207.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v207.__r_.__value_.__l.__data_);
  }
  if (v212.__r_.__value_.__s.__data_[7] < 0) {
    operator delete((void *)v211);
  }
  if ((v204.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v36 = HIBYTE(v204.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v36 = v204.__r_.__value_.__l.__size_;
  }
  uint64_t v37 = &v211;
  uint64_t v147 = (std::string::value_type *)v34;
  std::string::basic_string[abi:ne180100]((uint64_t)&v211, v36 + 31);
  if (v212.__r_.__value_.__s.__data_[7] < 0) {
    uint64_t v37 = (long long *)v211;
  }
  if (v36)
  {
    if ((v204.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v38 = &v204;
    }
    else {
      uint64_t v38 = (std::string *)v204.__r_.__value_.__r.__words[0];
    }
    memmove(v37, v38, v36);
  }
  strcpy((char *)v37 + v36, "_activation_quantization_scale_");
  std::to_string(&v207, *(_DWORD *)(*((void *)this + 2) + 4));
  if ((v207.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v39 = &v207;
  }
  else {
    long long v39 = (std::string *)v207.__r_.__value_.__r.__words[0];
  }
  if ((v207.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v40 = HIBYTE(v207.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v40 = v207.__r_.__value_.__l.__size_;
  }
  uint64_t v41 = std::string::append((std::string *)&v211, (const std::string::value_type *)v39, v40);
  std::string __s = (std::string::value_type *)v41->__r_.__value_.__r.__words[0];
  std::string::size_type __sz = v41->__r_.__value_.__l.__size_;
  v183[0] = v41->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v183 + 3) = *(_DWORD *)((char *)&v41->__r_.__value_.__r.__words[2] + 3);
  int v154 = SHIBYTE(v41->__r_.__value_.__r.__words[2]);
  v41->__r_.__value_.__l.__size_ = 0;
  v41->__r_.__value_.__r.__words[2] = 0;
  v41->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v207.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v207.__r_.__value_.__l.__data_);
  }
  if (v212.__r_.__value_.__s.__data_[7] < 0) {
    operator delete((void *)v211);
  }
  if ((v204.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v42 = HIBYTE(v204.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v42 = v204.__r_.__value_.__l.__size_;
  }
  uint64_t v43 = &v211;
  std::string::basic_string[abi:ne180100]((uint64_t)&v211, v42 + 20);
  if (v212.__r_.__value_.__s.__data_[7] < 0) {
    uint64_t v43 = (long long *)v211;
  }
  if (v42)
  {
    if ((v204.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v44 = &v204;
    }
    else {
      uint64_t v44 = (std::string *)v204.__r_.__value_.__r.__words[0];
    }
    memmove(v43, v44, v42);
  }
  strcpy((char *)v43 + v42, "_dynamic_dequantize_");
  std::to_string(&v207, *(_DWORD *)(*((void *)this + 2) + 4));
  if ((v207.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v45 = &v207;
  }
  else {
    long long v45 = (std::string *)v207.__r_.__value_.__r.__words[0];
  }
  if ((v207.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v46 = HIBYTE(v207.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v46 = v207.__r_.__value_.__l.__size_;
  }
  uint64_t v47 = std::string::append((std::string *)&v211, (const std::string::value_type *)v45, v46);
  long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
  std::string::size_type v182 = v47->__r_.__value_.__r.__words[2];
  *(_OWORD *)__int16 v181 = v48;
  v47->__r_.__value_.__l.__size_ = 0;
  v47->__r_.__value_.__r.__words[2] = 0;
  v47->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v207.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v207.__r_.__value_.__l.__data_);
  }
  if (v212.__r_.__value_.__s.__data_[7] < 0) {
    operator delete((void *)v211);
  }
  if ((v204.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v49 = HIBYTE(v204.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v49 = v204.__r_.__value_.__l.__size_;
  }
  uint64_t v50 = &v211;
  std::string::basic_string[abi:ne180100]((uint64_t)&v211, v49 + 25);
  if (v212.__r_.__value_.__s.__data_[7] < 0) {
    uint64_t v50 = (long long *)v211;
  }
  if (v49)
  {
    if ((v204.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v51 = &v204;
    }
    else {
      unint64_t v51 = (std::string *)v204.__r_.__value_.__r.__words[0];
    }
    memmove(v50, v51, v49);
  }
  strcpy((char *)v50 + v49, "_pre_dequantization_blob_");
  std::to_string(&v207, *(_DWORD *)(*((void *)this + 2) + 4));
  if ((v207.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v52 = &v207;
  }
  else {
    uint64_t v52 = (std::string *)v207.__r_.__value_.__r.__words[0];
  }
  if ((v207.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v53 = HIBYTE(v207.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v53 = v207.__r_.__value_.__l.__size_;
  }
  unint64_t v54 = std::string::append((std::string *)&v211, (const std::string::value_type *)v52, v53);
  std::string::size_type v55 = v54->__r_.__value_.__l.__size_;
  uint64_t v150 = (std::string::value_type *)v54->__r_.__value_.__r.__words[0];
  v180[0] = v54->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v180 + 3) = *(_DWORD *)((char *)&v54->__r_.__value_.__r.__words[2] + 3);
  int v153 = SHIBYTE(v54->__r_.__value_.__r.__words[2]);
  v54->__r_.__value_.__l.__size_ = 0;
  v54->__r_.__value_.__r.__words[2] = 0;
  v54->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v207.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v207.__r_.__value_.__l.__data_);
  }
  unint64_t v149 = v19;
  if (v212.__r_.__value_.__s.__data_[7] < 0) {
    operator delete((void *)v211);
  }
  int v56 = HIBYTE(v190);
  if (HIBYTE(v190))
  {
    v163.__r_.__value_.__r.__words[0] = 0x1FFFFFFFFLL;
    uint64_t v57 = *(void **)this;
    std::string::basic_string[abi:ne180100]<0>(&v207, "dynamic_quantize");
    memset(&v177, 0, sizeof(v177));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v177, v198, v199, 0xAAAAAAAAAAAAAAABLL * (((char *)v199 - (char *)v198) >> 3));
    if (v35 < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v211, v34, v33);
    }
    else
    {
      *(void *)&long long v211 = v34;
      *((void *)&v211 + 1) = v33;
      LODWORD(v212.__r_.__value_.__l.__data_) = v184[0];
      *(_DWORD *)((char *)v212.__r_.__value_.__r.__words + 3) = *(_DWORD *)((char *)v184 + 3);
      v212.__r_.__value_.__s.__data_[7] = v35;
    }
    if (v154 < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v212.__r_.__value_.__r.__words[1], __s, __sz);
    }
    else
    {
      v212.__r_.__value_.__l.__size_ = (std::string::size_type)__s;
      v212.__r_.__value_.__r.__words[2] = __sz;
      *(_DWORD *)uint64_t v213 = v183[0];
      *(_DWORD *)&v213[3] = *(_DWORD *)((char *)v183 + 3);
      v213[7] = v154;
    }
    int v174 = 0;
    long long v175 = 0;
    uint64_t v176 = 0;
    *(void *)uint64_t v209 = &v174;
    v209[8] = 0;
    int v174 = (std::string *)operator new(0x30uLL);
    long long v175 = v174;
    uint64_t v176 = (long long *)&v174[2];
    long long v175 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v176, &v211, (long long *)&v213[8], v174);
    Espresso::sequential_builder::add<Espresso::dynamic_quantize_params_t>(&v178, v57, (uint64_t)&v207, (uint64_t)v185, (uint64_t)&v163, (long long *)v177.__r_.__value_.__l.__data_, (long long *)v177.__r_.__value_.__l.__size_, (long long **)&v174);
    if (v179) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v179);
    }
    *(void *)uint64_t v209 = &v174;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v209);
    for (uint64_t i = 0; i != -6; i -= 3)
    {
      if ((char)v213[i * 8 + 7] < 0) {
        operator delete((void *)v212.__r_.__value_.__r.__words[i + 1]);
      }
    }
    *(void *)&long long v211 = &v177;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v211);
    if (SHIBYTE(v207.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v207.__r_.__value_.__l.__data_);
    }
    int v56 = HIBYTE(v190);
  }
  v213[0] = 0;
  int v214 = -1;
  __asm { FMOV            V0.2S, #1.0 }
  unint64_t v215 = _D0;
  uint64_t v220 = 0;
  LODWORD(v212.__r_.__value_.__l.__data_) = 0;
  *(_OWORD *)((char *)v212.__r_.__value_.__r.__words + 4) = _D0;
  uint64_t v216 = 0;
  *(void *)&v213[4] = 0;
  uint64_t v217 = 0;
  uint64_t v219 = 0;
  uint64_t v218 = 0;
  *(void *)&long long v211 = __PAIR64__(v19, v18);
  HIDWORD(v212.__r_.__value_.__r.__words[2]) = 0;
  *((void *)&v211 + 1) = BYTE2(v190);
  if (v56) {
    HIDWORD(v212.__r_.__value_.__r.__words[2]) = 5;
  }
  BOOL v63 = *((_DWORD *)a2 + 18) != 1 || *(int *)(a2[10][1] + 36) >= 4;
  v213[0] = v63;
  if (v56)
  {
    uint64_t v64 = *(void **)this;
    if (v35 < 0)
    {
      std::string::__init_copy_ctor_external(&v207, v34, v33);
    }
    else
    {
      v207.__r_.__value_.__r.__words[0] = (std::string::size_type)v34;
      v207.__r_.__value_.__l.__size_ = v33;
      LODWORD(v207.__r_.__value_.__r.__words[2]) = v184[0];
      *(_DWORD *)((char *)&v207.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v184 + 3);
      *((unsigned char *)&v207.__r_.__value_.__s + 23) = v35;
    }
    unint64_t v171 = 0;
    int v172 = 0;
    long long v173 = 0;
    *(void *)uint64_t v209 = &v171;
    v209[8] = 0;
    unint64_t v171 = (long long *)operator new(0x18uLL);
    int v172 = v171;
    long long v173 = (char *)v171 + 24;
    int v172 = (long long *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v173, (long long *)&v207, (long long *)&v208, (std::string *)v171);
    if (v153 < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v209, v150, v55);
    }
    else
    {
      *(void *)uint64_t v209 = v150;
      *(void *)&v209[8] = v55;
      *(_DWORD *)&v209[16] = v180[0];
      *(_DWORD *)&v209[19] = *(_DWORD *)((char *)v180 + 3);
      v209[23] = v153;
    }
    uint64_t v168 = 0;
    int v169 = 0;
    uint64_t v170 = 0;
    v163.__r_.__value_.__r.__words[0] = (std::string::size_type)&v168;
    v163.__r_.__value_.__s.__data_[8] = 0;
    uint64_t v168 = (std::string *)operator new(0x18uLL);
    int v169 = v168;
    uint64_t v170 = v168 + 1;
    int v169 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v170, (long long *)v209, (long long *)&v209[24], v168);
    Espresso::sequential_builder::add<Espresso::inner_product_uniforms>((uint64_t *)&v205, v64, (uint64_t)__p, (uint64_t)&v204, (uint64_t)&v211, v171, v172, (long long **)&v168);
    long long v67 = (void **)v205;
    uint64_t v66 = v206;
    uint64_t v206 = 0;
    unint64_t v205 = 0;
    v163.__r_.__value_.__r.__words[0] = (std::string::size_type)&v168;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v163);
    if ((v209[23] & 0x80000000) != 0) {
      operator delete(*(void **)v209);
    }
    *(void *)uint64_t v209 = &v171;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v209);
    if (SHIBYTE(v207.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v207.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    unint64_t v65 = *(void **)this;
    memset(&v167, 0, sizeof(v167));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v167, v198, v199, 0xAAAAAAAAAAAAAAABLL * (((char *)v199 - (char *)v198) >> 3));
    memset(&v166, 0, sizeof(v166));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v166, v201, v202, 0xAAAAAAAAAAAAAAABLL * (((char *)v202 - (char *)v201) >> 3));
    Espresso::sequential_builder::add<Espresso::inner_product_uniforms>((uint64_t *)&v207, v65, (uint64_t)__p, (uint64_t)&v204, (uint64_t)&v211, (long long *)v167.__r_.__value_.__l.__data_, (long long *)v167.__r_.__value_.__l.__size_, (long long **)&v166);
    uint64_t v66 = (std::__shared_weak_count *)v207.__r_.__value_.__l.__size_;
    long long v67 = (void **)v207.__r_.__value_.__r.__words[0];
    *(_OWORD *)&v207.__r_.__value_.__l.__data_ = 0uLL;
    *(void *)uint64_t v209 = &v166;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v209);
    *(void *)uint64_t v209 = &v167;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v209);
  }
  unint64_t v68 = (uint64_t *)v187.__r_.__value_.__r.__words[2];
  if (!v187.__r_.__value_.__r.__words[2]) {
    unint64_t v68 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  uint64_t v69 = v68[5];
  uint64_t v70 = *(unsigned __int8 *)(v69 + 23);
  if (*(char *)(v69 + 23) < 0) {
    uint64_t v71 = *(void *)(v69 + 8);
  }
  else {
    uint64_t v71 = *(unsigned __int8 *)(v69 + 23);
  }
  uint64_t v72 = v68[6];
  uint64_t v73 = *(unsigned __int8 *)(v72 + 23);
  if (*(char *)(v72 + 23) < 0) {
    uint64_t v74 = *(void *)(v72 + 8);
  }
  else {
    uint64_t v74 = *(unsigned __int8 *)(v72 + 23);
  }
  int v75 = *((_DWORD *)v68 + 4);
  uint64_t v76 = v68[7];
  uint64_t v77 = *(unsigned __int8 *)(v76 + 23);
  if (*(char *)(v76 + 23) < 0) {
    uint64_t v78 = *(unint64_t **)(v76 + 8);
  }
  else {
    uint64_t v78 = (unint64_t *)*(unsigned __int8 *)(v76 + 23);
  }
  if (v75 <= 0) {
    int v79 = 1;
  }
  else {
    int v79 = 2;
  }
  if (v71) {
    unsigned int v80 = v79;
  }
  else {
    unsigned int v80 = v75 > 0;
  }
  if (v74) {
    ++v80;
  }
  if (v78) {
    ++v80;
  }
  if (v80 <= 1)
  {
    if (v80) {
      int v81 = 0;
    }
    else {
      int v81 = 5;
    }
    if (v75 <= 0 && v80)
    {
      if ((v70 & 0x80) != 0) {
        uint64_t v70 = *(void *)(v69 + 8);
      }
      if (v70)
      {
        int v81 = 1;
      }
      else
      {
        if ((v73 & 0x80) != 0) {
          uint64_t v73 = *(void *)(v72 + 8);
        }
        uint64_t v82 = v68[8];
        if (v68 != &CoreML::Specification::_WeightParams_default_instance_ && v73 && v82)
        {
          int v81 = 2;
        }
        else
        {
          if ((v77 & 0x80) != 0) {
            uint64_t v77 = *(void *)(v76 + 8);
          }
          if (v82) {
            _ZF = v77 == 0;
          }
          else {
            _ZF = 1;
          }
          if (_ZF || v68 == &CoreML::Specification::_WeightParams_default_instance_) {
            int v81 = 5;
          }
          else {
            int v81 = 3;
          }
        }
      }
    }
  }
  else
  {
    int v81 = 4;
  }
  if (HIBYTE(v190))
  {
    *(void *)&v209[12] = 1065353216;
    *(void *)uint64_t v209 = 0xFFFFFFFFLL;
    float v210 = 1.0;
    *(_DWORD *)&v209[8] = 0;
    *(void *)&v209[20] = 0x100000000;
    if (v81 != 3)
    {
      std::string::size_type v137 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      batchedMatMulIncorrectWeightType(&v207, v81, (uint64_t)&v204);
      std::runtime_error::runtime_error(v137, &v207);
      __cxa_throw(v137, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    if (*((_DWORD *)a2 + 35) == 1045)
    {
      long long v85 = a2[16];
    }
    else
    {
      uint64_t v78 = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v78);
      long long v85 = &CoreML::Specification::_BatchedMatMulLayerParams_default_instance_;
    }
    float v88 = (uint64_t *)v85[2];
    if (!v88) {
      float v88 = &CoreML::Specification::_WeightParams_default_instance_;
    }
    int v89 = (uint64_t *)v88[8];
    if (!v89) {
      int v89 = &CoreML::Specification::_QuantizationParams_default_instance_;
    }
    if (*((_DWORD *)v89 + 9) == 101)
    {
      char v90 = (uint64_t *)v89[3];
    }
    else
    {
      CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v78);
      char v90 = &CoreML::Specification::_LinearQuantizationParams_default_instance_;
    }
    float v210 = 1.0 / *(float *)(v90[3] + 8);
    uint64_t v91 = *(void **)this;
    std::string::basic_string[abi:ne180100]<0>(&v163, "dynamic_dequantize");
    if (v153 < 0)
    {
      std::string::__init_copy_ctor_external(&v207, v150, v55);
    }
    else
    {
      v207.__r_.__value_.__r.__words[0] = (std::string::size_type)v150;
      v207.__r_.__value_.__l.__size_ = v55;
      LODWORD(v207.__r_.__value_.__r.__words[2]) = v180[0];
      *(_DWORD *)((char *)&v207.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v180 + 3);
      *((unsigned char *)&v207.__r_.__value_.__s + 23) = v153;
    }
    if (v154 < 0)
    {
      std::string::__init_copy_ctor_external(&v208, __s, __sz);
    }
    else
    {
      v208.__r_.__value_.__r.__words[0] = (std::string::size_type)__s;
      v208.__r_.__value_.__l.__size_ = __sz;
      LODWORD(v208.__r_.__value_.__r.__words[2]) = v183[0];
      *(_DWORD *)((char *)&v208.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v183 + 3);
      *((unsigned char *)&v208.__r_.__value_.__s + 23) = v154;
    }
    uint64_t v160 = 0;
    std::string v161 = 0;
    int v162 = 0;
    unint64_t v205 = &v160;
    LOBYTE(v20CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = 0;
    uint64_t v160 = (long long *)operator new(0x30uLL);
    std::string v161 = v160;
    int v162 = v160 + 3;
    std::string v161 = (long long *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v162, (long long *)&v207, (long long *)v209, (std::string *)v160);
    memset(&v159, 0, sizeof(v159));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v159, v201, v202, 0xAAAAAAAAAAAAAAABLL * (((char *)v202 - (char *)v201) >> 3));
    Espresso::sequential_builder::add<Espresso::dynamic_dequantize_params_t>(&v164, v91, (uint64_t)&v163, (uint64_t)v181, (uint64_t)v209, v160, v161, (long long **)&v159);
    uint64_t v87 = v164;
    uint64_t v86 = v165;
    uint64_t v164 = 0;
    uint64_t v165 = 0;
    unint64_t v205 = (long long **)&v159;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v205);
    unint64_t v205 = &v160;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v205);
    for (uint64_t j = 0; j != -6; j -= 3)
    {
      if (SHIBYTE(v208.__r_.__value_.__r.__words[j + 2]) < 0) {
        operator delete(*(void **)((char *)&v207 + j * 8 + 24));
      }
    }
    if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v163.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    uint64_t v86 = 0;
    uint64_t v87 = 0;
  }
  if (v66) {
    atomic_fetch_add_explicit(&v66->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (HIBYTE(v190))
  {
    uint64_t v93 = (uint64_t *)v187.__r_.__value_.__r.__words[2];
    std::string::basic_string[abi:ne180100]<0>(v209, "BatchedMatMul");
    if (v93) {
      long long v94 = v93;
    }
    else {
      long long v94 = &CoreML::Specification::_WeightParams_default_instance_;
    }
    CoreML::validateInt8Requirements((CoreML::Result *)&v207, (uint64_t)v94, (uint64_t)v209);
    unsigned int v95 = (uint64_t)v207.__r_.__value_.__l.__data_ & 0xFFFFFFEF;
    if (v208.__r_.__value_.__s.__data_[7] < 0) {
      operator delete((void *)v207.__r_.__value_.__l.__size_);
    }
    if ((v209[23] & 0x80000000) != 0) {
      operator delete(*(void **)v209);
    }
    if (v95)
    {
      uint64_t v138 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      long long v139 = std::string::append((std::string *)v209, " does not satisfy int8 quantization requirements.");
      long long v140 = *(_OWORD *)&v139->__r_.__value_.__l.__data_;
      v207.__r_.__value_.__r.__words[2] = v139->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v207.__r_.__value_.__l.__data_ = v140;
      v139->__r_.__value_.__l.__size_ = 0;
      v139->__r_.__value_.__r.__words[2] = 0;
      v139->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v138, &v207);
      __cxa_throw(v138, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    if (v187.__r_.__value_.__r.__words[2]) {
      int v96 = (uint64_t *)v187.__r_.__value_.__r.__words[2];
    }
    else {
      int v96 = &CoreML::Specification::_WeightParams_default_instance_;
    }
    size_t WeightParamSizeInBytes = (int)EspressoConverter::getWeightParamSizeInBytes(v96);
    CoreML::copySpecArrayStringToVector(&v207, (char *)v96[7], WeightParamSizeInBytes);
    std::string::basic_string[abi:ne180100]<0>(v209, "W_int8");
    *(_OWORD *)&v163.__r_.__value_.__l.__data_ = 0uLL;
    (*((void (**)(void **, std::string *, unsigned char *, std::string::size_type, size_t, void))*v67 + 21))(v67, &v163, v209, v207.__r_.__value_.__r.__words[0], WeightParamSizeInBytes, 0);
    uint64_t v98 = (std::__shared_weak_count *)v163.__r_.__value_.__l.__size_;
    if (!v163.__r_.__value_.__l.__size_) {
      goto LABEL_281;
    }
    goto LABEL_280;
  }
  if (v187.__r_.__value_.__r.__words[2]) {
    uint64_t v99 = (uint64_t *)v187.__r_.__value_.__r.__words[2];
  }
  else {
    uint64_t v99 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  if (v81 == 2)
  {
    uint64_t v100 = (uint64_t *)v99[8];
    if (!v100) {
      uint64_t v100 = &CoreML::Specification::_QuantizationParams_default_instance_;
    }
    unint64_t v101 = v100[2];
    unint64_t v102 = (int)EspressoConverter::getWeightParamSizeInBytes(v99);
    if (!CoreML::hasSufficientBytesInQuantizedWeightParam(v99, v152 * v149))
    {
      unsigned __int8 v143 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      batchedMatMulQuantizedWeightArraySizeErrorString(&v207, v102, v149, v152, v101, (uint64_t)&v204);
      std::runtime_error::runtime_error(v143, &v207);
      __cxa_throw(v143, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    CoreML::copySpecArrayStringToVector(&v207, (char *)v99[6], v102);
    std::to_string(&v163, v101);
    std::string v103 = std::string::insert(&v163, 0, "W_U");
    long long v104 = *(_OWORD *)&v103->__r_.__value_.__l.__data_;
    *(void *)&v209[16] = *((void *)&v103->__r_.__value_.__l + 2);
    *(_OWORD *)uint64_t v209 = v104;
    v103->__r_.__value_.__l.__size_ = 0;
    v103->__r_.__value_.__r.__words[2] = 0;
    v103->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v163.__r_.__value_.__l.__data_);
    }
    *(_OWORD *)&v163.__r_.__value_.__l.__data_ = 0uLL;
    (*((void (**)(void **, std::string *, unsigned char *, std::string::size_type, unint64_t, void))*v67 + 21))(v67, &v163, v209, v207.__r_.__value_.__r.__words[0], v102, 0);
    if (v163.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v163.__r_.__value_.__l.__size_);
    }
    if (v187.__r_.__value_.__r.__words[2]) {
      std::string v105 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v187.__r_.__value_.__r.__words[2];
    }
    else {
      std::string v105 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)&CoreML::Specification::_WeightParams_default_instance_;
    }
    v157[0] = (uint64_t)v67;
    v157[1] = (uint64_t)v66;
    if (v66) {
      atomic_fetch_add_explicit(&v66->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unint64_t v106 = v211;
    std::string::basic_string[abi:ne180100]<0>(&v163, (char *)&unk_19EC86ACE);
    CoreML::setQuantizationParams(v105, v157, v106, (const void **)&v163.__r_.__value_.__l.__data_);
    if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v163.__r_.__value_.__l.__data_);
    }
    if (!v66) {
      goto LABEL_281;
    }
    uint64_t v98 = v66;
LABEL_280:
    std::__shared_weak_count::__release_shared[abi:ne180100](v98);
LABEL_281:
    if ((v209[23] & 0x80000000) != 0) {
      operator delete(*(void **)v209);
    }
    if (v207.__r_.__value_.__r.__words[0])
    {
      v207.__r_.__value_.__l.__size_ = v207.__r_.__value_.__r.__words[0];
      operator delete(v207.__r_.__value_.__l.__data_);
    }
    goto LABEL_285;
  }
  int WeightParamSize = EspressoConverter::getWeightParamSize((uint64_t)v99);
  if (v152 * v19 != WeightParamSize)
  {
    unint64_t v144 = WeightParamSize;
    uint64_t v145 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    batchedMatMulWeightArraySizeErrorString(&v207, v144, v19, v152, (uint64_t)&v204);
    std::runtime_error::runtime_error(v145, &v207);
    __cxa_throw(v145, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  (*((void (**)(std::string *__return_ptr, void **))*v67 + 53))(&v207, v67);
  if (v187.__r_.__value_.__r.__words[2]) {
    uint64_t v119 = (uint64_t *)v187.__r_.__value_.__r.__words[2];
  }
  else {
    uint64_t v119 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  EspressoConverter::copyWeightsToDataBlob(*(EspressoConverter **)(v207.__r_.__value_.__r.__words[0] + 16), v119, 4 * (DWORD1(v211) * v211));
  long long v158 = *(_OWORD *)&v207.__r_.__value_.__l.__data_;
  if (v207.__r_.__value_.__l.__size_) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v207.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
  }
  (*((void (**)(void **, long long *))*v67 + 50))(v67, &v158);
  if (*((void *)&v158 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v158 + 1));
  }
  if (v207.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v207.__r_.__value_.__l.__size_);
  }
LABEL_285:
  if (!BYTE2(v190)) {
    goto LABEL_345;
  }
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(v209, 4 * v211, 1, 1, 1);
  if (v188) {
    long long v107 = v188;
  }
  else {
    long long v107 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  uint64_t v108 = v107[5];
  if (*(char *)(v108 + 23) < 0) {
    uint64_t v109 = *(void *)(v108 + 8);
  }
  else {
    uint64_t v109 = *(unsigned __int8 *)(v108 + 23);
  }
  uint64_t v110 = v107[6];
  uint64_t v111 = *(unsigned __int8 *)(v110 + 23);
  if (*(char *)(v110 + 23) < 0) {
    uint64_t v112 = *(void *)(v110 + 8);
  }
  else {
    uint64_t v112 = *(unsigned __int8 *)(v110 + 23);
  }
  int v113 = *((_DWORD *)v107 + 4);
  uint64_t v114 = v107[7];
  if (*(char *)(v114 + 23) < 0) {
    uint64_t v115 = *(void *)(v114 + 8);
  }
  else {
    uint64_t v115 = *(unsigned __int8 *)(v114 + 23);
  }
  if (v113 <= 0) {
    int v116 = 1;
  }
  else {
    int v116 = 2;
  }
  if (v109) {
    int v117 = v116;
  }
  else {
    int v117 = v113 > 0;
  }
  if (v112) {
    ++v117;
  }
  if (v115) {
    ++v117;
  }
  if (v113 > 0 || v117 != 1) {
    goto LABEL_332;
  }
  if ((*(unsigned char *)(v108 + 23) & 0x80) != 0)
  {
    if (*(void *)(v108 + 8)) {
      goto LABEL_332;
    }
  }
  else if (*(unsigned char *)(v108 + 23))
  {
    goto LABEL_332;
  }
  if ((v111 & 0x80) != 0) {
    uint64_t v111 = *(void *)(v110 + 8);
  }
  if (v107 != &CoreML::Specification::_WeightParams_default_instance_ && v111 && v107[8])
  {
    if (!CoreML::hasSufficientBytesInQuantizedWeightParam(v107, v152))
    {
      uint64_t v146 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      std::runtime_error::runtime_error(v146, &v207);
      __cxa_throw(v146, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    CoreML::dequantizeWeightParamSpec((CoreML *)&v207, (const CoreML::Specification::WeightParams *)v107, v152);
    uint64_t v120 = *(void *)v209;
    uint64_t v121 = (void *)v207.__r_.__value_.__r.__words[0];
    memcpy(*(void **)(*(void *)v209 + 16), v207.__r_.__value_.__l.__data_, 4 * v152);
    if (v121) {
      operator delete(v121);
    }
    goto LABEL_334;
  }
LABEL_332:
  int v122 = EspressoConverter::getWeightParamSize((uint64_t)v107);
  if (v152 != v122)
  {
    unint64_t v141 = v122;
    unsigned __int8 v142 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    batchedMatMulBiasArraySizeErrorString(&v207, v141, v152, (uint64_t)&v204);
    std::runtime_error::runtime_error(v142, &v207);
    __cxa_throw(v142, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v120 = *(void *)v209;
  EspressoConverter::copyWeightsToDataBlob(*(EspressoConverter **)(*(void *)v209 + 16), v107, 4 * v211);
LABEL_334:
  if (HIBYTE(v190))
  {
    if (v86) {
      atomic_fetch_add_explicit(&v86->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&v207, "biases");
    *(_OWORD *)&v163.__r_.__value_.__l.__data_ = 0uLL;
    (*(void (**)(uint64_t, std::string *, std::string *, void, unint64_t, void))(*(void *)v87 + 168))(v87, &v163, &v207, *(void *)(v120 + 16), 4 * v152, 0);
    if (v163.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v163.__r_.__value_.__l.__size_);
    }
    if (SHIBYTE(v207.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v207.__r_.__value_.__l.__data_);
    }
    uint64_t v123 = v86;
    if (!v86) {
      goto LABEL_343;
    }
  }
  else
  {
    uint64_t v155 = v120;
    long long v156 = *(std::__shared_weak_count **)&v209[8];
    if (*(void *)&v209[8]) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v209[8] + 8), 1uLL, memory_order_relaxed);
    }
    (*((void (**)(void **, uint64_t *))*v67 + 49))(v67, &v155);
    uint64_t v123 = v156;
    if (!v156) {
      goto LABEL_343;
    }
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v123);
LABEL_343:
  if (*(void *)&v209[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v209[8]);
  }
LABEL_345:
  if (v187.__r_.__value_.__r.__words[2]) {
    unint64_t v124 = (uint64_t *)v187.__r_.__value_.__r.__words[2];
  }
  else {
    unint64_t v124 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  uint64_t v125 = v124[5];
  uint64_t v126 = *(unsigned __int8 *)(v125 + 23);
  if (*(char *)(v125 + 23) < 0) {
    uint64_t v127 = *(void *)(v125 + 8);
  }
  else {
    uint64_t v127 = *(unsigned __int8 *)(v125 + 23);
  }
  uint64_t v128 = v124[6];
  if (*(char *)(v128 + 23) < 0) {
    uint64_t v129 = *(void *)(v128 + 8);
  }
  else {
    uint64_t v129 = *(unsigned __int8 *)(v128 + 23);
  }
  int v130 = *((_DWORD *)v124 + 4);
  uint64_t v131 = v124[7];
  if (*(char *)(v131 + 23) < 0) {
    uint64_t v132 = *(void *)(v131 + 8);
  }
  else {
    uint64_t v132 = *(unsigned __int8 *)(v131 + 23);
  }
  BOOL v13 = 0;
  if (v130 <= 0) {
    int v133 = 1;
  }
  else {
    int v133 = 2;
  }
  if (v127) {
    int v134 = v133;
  }
  else {
    int v134 = v130 > 0;
  }
  if (v129) {
    ++v134;
  }
  if (v132) {
    ++v134;
  }
  if (v130 <= 0 && v134 == 1)
  {
    if ((v126 & 0x80) != 0) {
      uint64_t v126 = *(void *)(v125 + 8);
    }
    BOOL v13 = v126 != 0;
  }
  if (v66) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v66);
  }
  if (v86) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v86);
  }
  if (v66) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v66);
  }
  if (v153 < 0) {
    operator delete(v150);
  }
  if ((SHIBYTE(v182) & 0x80000000) == 0)
  {
    if ((v154 & 0x80000000) == 0) {
      goto LABEL_382;
    }
LABEL_391:
    operator delete(__s);
    if ((v35 & 0x80000000) == 0) {
      goto LABEL_383;
    }
LABEL_392:
    operator delete(v147);
    goto LABEL_383;
  }
  operator delete(v181[0]);
  if (v154 < 0) {
    goto LABEL_391;
  }
LABEL_382:
  if (v35 < 0) {
    goto LABEL_392;
  }
LABEL_383:
  if (SHIBYTE(v186) < 0) {
    operator delete(v185[0]);
  }
  CoreML::Specification::BatchedMatMulLayerParams::~BatchedMatMulLayerParams((CoreML::Specification::BatchedMatMulLayerParams *)&v187);
  if (v195 < 0) {
    operator delete(__p[0]);
  }
LABEL_387:
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v201);
  *(void *)&long long v211 = &v198;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v211);
  *(void *)&long long v211 = &v201;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v211);
  if (SHIBYTE(v204.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v204.__r_.__value_.__l.__data_);
  }
  return v13;
}

void sub_19EAA8F28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12, void *a13, int a14, int a15, std::__shared_weak_count *a16, int a17, int a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62,uint64_t a63)
{
  if (SLOBYTE(STACK[0x2C7]) < 0)
  {
    operator delete((void *)STACK[0x2B0]);
    if ((v73 & 1) == 0)
    {
LABEL_6:
      if (STACK[0x2E8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x2E8]);
      }
      if (v74) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v74);
      }
      if (a16) {
        std::__shared_weak_count::__release_shared[abi:ne180100](a16);
      }
      if (v74) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v74);
      }
      if (a17 < 0) {
        operator delete(a12);
      }
      if (a62 < 0) {
        operator delete(a57);
      }
      if (a18 < 0) {
        operator delete(a13);
      }
      if (a15 < 0) {
        operator delete(a9);
      }
      if (a71 < 0) {
        operator delete(a66);
      }
      CoreML::Specification::BatchedMatMulLayerParams::~BatchedMatMulLayerParams((CoreML::Specification::BatchedMatMulLayerParams *)&a72);
      if (SLOBYTE(STACK[0x23F]) < 0) {
        operator delete((void *)STACK[0x228]);
      }
      STACK[0x228] = (unint64_t)&STACK[0x250];
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x228]);
      STACK[0x250] = (unint64_t)&STACK[0x268];
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x250]);
      if (SLOBYTE(STACK[0x297]) < 0) {
        operator delete((void *)STACK[0x280]);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v73)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v72);
  goto LABEL_6;
}

void Espresso::sequential_builder::add<Espresso::dynamic_quantize_params_t>(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, long long *a6, long long *a7, long long **a8)
{
  memset(&v13, 0, sizeof(v13));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v13, a6, a7, 0xAAAAAAAAAAAAAAABLL * (((char *)a7 - (char *)a6) >> 3));
  memset(&v12, 0, sizeof(v12));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v12, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a8[1] - (char *)*a8) >> 3));
  LODWORD(v15.__r_.__value_.__l.__data_) = (***(uint64_t (****)(void))(a2[14] + 8))(*(void *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  int v11 = (std::__shared_weak_count *)a1[1];
  uint64_t v16 = *a1;
  int v17 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(&v15, 0, sizeof(v15));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v15, (long long *)v13.__r_.__value_.__l.__data_, (long long *)v13.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13.__r_.__value_.__l.__size_ - v13.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v14, 0, sizeof(v14));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v14, (long long *)v12.__r_.__value_.__l.__data_, (long long *)v12.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12.__r_.__value_.__l.__size_ - v12.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  unint64_t v18 = &v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  unint64_t v18 = &v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (*a2) {
    Espresso::sequential_builder::add_shape_from_kernel();
  }
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
}

void sub_19EAA9814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v16 = *(std::__shared_weak_count **)(v13 + 8);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  *(void *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(void *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void batchedMatMulIncorrectWeightType(std::string *a1, int __val, uint64_t a3)
{
  std::to_string(&v13, __val);
  long long v5 = std::string::insert(&v13, 0, "Incorrect weight type ");
  long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v14.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  std::string v7 = std::string::append(&v14, " in layer ");
  long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v15.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  int v9 = *(char *)(a3 + 23);
  if (v9 >= 0) {
    char v10 = (const std::string::value_type *)a3;
  }
  else {
    char v10 = *(const std::string::value_type **)a3;
  }
  if (v9 >= 0) {
    std::string::size_type v11 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    std::string::size_type v11 = *(void *)(a3 + 8);
  }
  std::string v12 = std::string::append(&v15, v10, v11);
  *a1 = *v12;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
}

void sub_19EAA9994(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (*(char *)(v21 - 25) < 0) {
    operator delete(*(void **)(v21 - 48));
  }
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::sequential_builder::add<Espresso::dynamic_dequantize_params_t>(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, long long *a6, long long *a7, long long **a8)
{
  memset(&v13, 0, sizeof(v13));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v13, a6, a7, 0xAAAAAAAAAAAAAAABLL * (((char *)a7 - (char *)a6) >> 3));
  memset(&v12, 0, sizeof(v12));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v12, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a8[1] - (char *)*a8) >> 3));
  LODWORD(v15.__r_.__value_.__l.__data_) = (***(uint64_t (****)(void))(a2[14] + 8))(*(void *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  std::string::size_type v11 = (std::__shared_weak_count *)a1[1];
  uint64_t v16 = *a1;
  int v17 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(&v15, 0, sizeof(v15));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v15, (long long *)v13.__r_.__value_.__l.__data_, (long long *)v13.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13.__r_.__value_.__l.__size_ - v13.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v14, 0, sizeof(v14));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v14, (long long *)v12.__r_.__value_.__l.__data_, (long long *)v12.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12.__r_.__value_.__l.__size_ - v12.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  unint64_t v18 = &v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  unint64_t v18 = &v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (*a2) {
    Espresso::sequential_builder::add_shape_from_kernel();
  }
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
}

void sub_19EAA9BC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v16 = *(std::__shared_weak_count **)(v13 + 8);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  *(void *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(void *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void CoreML::validateInt8Requirements(CoreML::Result *this, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a2 + 40);
  if (*(char *)(v5 + 23) < 0) {
    uint64_t v6 = *(void *)(v5 + 8);
  }
  else {
    uint64_t v6 = *(unsigned __int8 *)(v5 + 23);
  }
  uint64_t v7 = *(void *)(a2 + 48);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 23);
  if (*(char *)(v7 + 23) < 0) {
    uint64_t v9 = *(void *)(v7 + 8);
  }
  else {
    uint64_t v9 = *(unsigned __int8 *)(v7 + 23);
  }
  int v10 = *(_DWORD *)(a2 + 16);
  uint64_t v11 = *(void *)(a2 + 56);
  uint64_t v12 = *(unsigned __int8 *)(v11 + 23);
  if (*(char *)(v11 + 23) < 0) {
    uint64_t v13 = *(void *)(v11 + 8);
  }
  else {
    uint64_t v13 = *(unsigned __int8 *)(v11 + 23);
  }
  if (v10 <= 0) {
    int v14 = 1;
  }
  else {
    int v14 = 2;
  }
  if (v6) {
    int v15 = v14;
  }
  else {
    int v15 = v10 > 0;
  }
  if (v9) {
    ++v15;
  }
  if (v13) {
    ++v15;
  }
  if (v10 > 0 || v15 != 1) {
    goto LABEL_47;
  }
  if ((*(unsigned char *)(v5 + 23) & 0x80) != 0)
  {
    if (!*(void *)(v5 + 8)) {
      goto LABEL_26;
    }
LABEL_47:
    std::operator+<char>();
    std::string::size_type v27 = std::string::append(&v63, "' of type '");
    long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    v64.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v28;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    int v29 = *(char *)(a3 + 23);
    if (v29 >= 0) {
      uint64_t v30 = (const std::string::value_type *)a3;
    }
    else {
      uint64_t v30 = *(const std::string::value_type **)a3;
    }
    if (v29 >= 0) {
      std::string::size_type v31 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      std::string::size_type v31 = *(void *)(a3 + 8);
    }
    std::string v32 = std::string::append(&v64, v30, v31);
    long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v65.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v33;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    std::string v34 = std::string::append(&v65, " :                            when flag 'int8DynamicQuantize' is set to true, weights must be stored in the int8 format.");
    long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
    std::string::size_type v67 = v34->__r_.__value_.__r.__words[2];
    long long v66 = v35;
    v34->__r_.__value_.__l.__size_ = 0;
    v34->__r_.__value_.__r.__words[2] = 0;
    v34->__r_.__value_.__r.__words[0] = 0;
    *(void *)this = 13;
    std::operator+<char>();
    goto LABEL_54;
  }
  if (*(unsigned char *)(v5 + 23)) {
    goto LABEL_47;
  }
LABEL_26:
  if ((v8 & 0x80) != 0) {
    uint64_t v8 = *(void *)(v7 + 8);
  }
  uint64_t v16 = *(void *)(a2 + 64);
  if ((uint64_t *)a2 != &CoreML::Specification::_WeightParams_default_instance_ && v8 && v16) {
    goto LABEL_47;
  }
  if ((v12 & 0x80) != 0) {
    uint64_t v12 = *(void *)(v11 + 8);
  }
  if ((uint64_t *)a2 == &CoreML::Specification::_WeightParams_default_instance_ || !v12 || !v16) {
    goto LABEL_47;
  }
  if (*(void *)(v16 + 16) != 8)
  {
    std::operator+<char>();
    std::string::size_type v36 = std::string::append(&v63, "' of type '");
    long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    v64.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v37;
    v36->__r_.__value_.__l.__size_ = 0;
    v36->__r_.__value_.__r.__words[2] = 0;
    v36->__r_.__value_.__r.__words[0] = 0;
    int v38 = *(char *)(a3 + 23);
    if (v38 >= 0) {
      long long v39 = (const std::string::value_type *)a3;
    }
    else {
      long long v39 = *(const std::string::value_type **)a3;
    }
    if (v38 >= 0) {
      std::string::size_type v40 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      std::string::size_type v40 = *(void *)(a3 + 8);
    }
    uint64_t v41 = std::string::append(&v64, v39, v40);
    long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
    v65.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v42;
    v41->__r_.__value_.__l.__size_ = 0;
    v41->__r_.__value_.__r.__words[2] = 0;
    v41->__r_.__value_.__r.__words[0] = 0;
    uint64_t v43 = std::string::append(&v65, " :                           Number of bits must equal 8 when flag 'int8DynamicQuantize' is set to true.");
    long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
    std::string::size_type v67 = v43->__r_.__value_.__r.__words[2];
    long long v66 = v44;
    v43->__r_.__value_.__l.__size_ = 0;
    v43->__r_.__value_.__r.__words[2] = 0;
    v43->__r_.__value_.__r.__words[0] = 0;
    *(void *)this = 13;
    std::operator+<char>();
    goto LABEL_54;
  }
  if (*(_DWORD *)(v16 + 36) != 101)
  {
    std::operator+<char>();
    long long v45 = std::string::append(&v63, "' of type '");
    long long v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
    v64.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v46;
    v45->__r_.__value_.__l.__size_ = 0;
    v45->__r_.__value_.__r.__words[2] = 0;
    v45->__r_.__value_.__r.__words[0] = 0;
    int v47 = *(char *)(a3 + 23);
    if (v47 >= 0) {
      long long v48 = (const std::string::value_type *)a3;
    }
    else {
      long long v48 = *(const std::string::value_type **)a3;
    }
    if (v47 >= 0) {
      std::string::size_type v49 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      std::string::size_type v49 = *(void *)(a3 + 8);
    }
    uint64_t v50 = std::string::append(&v64, v48, v49);
    long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
    v65.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v51;
    v50->__r_.__value_.__l.__size_ = 0;
    v50->__r_.__value_.__r.__words[2] = 0;
    v50->__r_.__value_.__r.__words[0] = 0;
    uint64_t v52 = std::string::append(&v65, " :                           Linear quantization must be used when flag 'int8DynamicQuantize' is set to true.");
    long long v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
    std::string::size_type v67 = v52->__r_.__value_.__r.__words[2];
    long long v66 = v53;
    v52->__r_.__value_.__l.__size_ = 0;
    v52->__r_.__value_.__r.__words[2] = 0;
    v52->__r_.__value_.__r.__words[0] = 0;
    *(void *)this = 13;
    std::operator+<char>();
    goto LABEL_54;
  }
  uint64_t v17 = *(void *)(v16 + 24);
  if (*(_DWORD *)(v17 + 16) != 1)
  {
    std::operator+<char>();
    unint64_t v54 = std::string::append(&v63, "' of type '");
    long long v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
    v64.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v55;
    v54->__r_.__value_.__l.__size_ = 0;
    v54->__r_.__value_.__r.__words[2] = 0;
    v54->__r_.__value_.__r.__words[0] = 0;
    int v56 = *(char *)(a3 + 23);
    if (v56 >= 0) {
      uint64_t v57 = (const std::string::value_type *)a3;
    }
    else {
      uint64_t v57 = *(const std::string::value_type **)a3;
    }
    if (v56 >= 0) {
      std::string::size_type v58 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      std::string::size_type v58 = *(void *)(a3 + 8);
    }
    uint64_t v59 = std::string::append(&v64, v57, v58);
    long long v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
    v65.__r_.__value_.__r.__words[2] = v59->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v60;
    v59->__r_.__value_.__l.__size_ = 0;
    v59->__r_.__value_.__r.__words[2] = 0;
    v59->__r_.__value_.__r.__words[0] = 0;
    long long v61 = std::string::append(&v65, " :                           Linear quantization scale must be size 1 when flag 'int8DynamicQuantize' is set to true.");
    long long v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
    std::string::size_type v67 = v61->__r_.__value_.__r.__words[2];
    long long v66 = v62;
    v61->__r_.__value_.__l.__size_ = 0;
    v61->__r_.__value_.__r.__words[2] = 0;
    v61->__r_.__value_.__r.__words[0] = 0;
    *(void *)this = 13;
    std::operator+<char>();
    goto LABEL_54;
  }
  if (*(_DWORD *)(v17 + 40))
  {
    std::operator+<char>();
    unint64_t v18 = std::string::append(&v63, "' of type '");
    long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v64.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    int v20 = *(char *)(a3 + 23);
    if (v20 >= 0) {
      uint64_t v21 = (const std::string::value_type *)a3;
    }
    else {
      uint64_t v21 = *(const std::string::value_type **)a3;
    }
    if (v20 >= 0) {
      std::string::size_type v22 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      std::string::size_type v22 = *(void *)(a3 + 8);
    }
    int v23 = std::string::append(&v64, v21, v22);
    long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v65.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    uint64_t v25 = std::string::append(&v65, " :                           Linear quantization bias must be empty when flag 'int8DynamicQuantize' is set to true.");
    long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    std::string::size_type v67 = v25->__r_.__value_.__r.__words[2];
    long long v66 = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    *(void *)this = 13;
    std::operator+<char>();
LABEL_54:
    if (SHIBYTE(v67) < 0) {
      operator delete((void *)v66);
    }
    if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v65.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v64.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v63.__r_.__value_.__l.__data_);
    }
    return;
  }

  CoreML::Result::Result(this);
}

void sub_19EAAA1A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (*(char *)(v28 - 25) < 0) {
    operator delete(*(void **)(v28 - 48));
  }
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void batchedMatMulWeightArraySizeErrorString(std::string *a1, unint64_t __val, unint64_t a3, unint64_t a4, uint64_t a5)
{
  std::to_string(&v31, __val);
  uint64_t v9 = std::string::insert(&v31, 0, "Size of weights = ");
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v32.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  uint64_t v11 = std::string::append(&v32, " is not equal to size of the product of the first and second dimensions provided as layer parameters = ");
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v33.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v30, a3);
  if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v13 = &v30;
  }
  else {
    uint64_t v13 = (std::string *)v30.__r_.__value_.__r.__words[0];
  }
  if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v30.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v30.__r_.__value_.__l.__size_;
  }
  int v15 = std::string::append(&v33, (const std::string::value_type *)v13, size);
  long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v34.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  uint64_t v17 = std::string::append(&v34, ",");
  long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v35.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v29, a4);
  if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v19 = &v29;
  }
  else {
    long long v19 = (std::string *)v29.__r_.__value_.__r.__words[0];
  }
  if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v20 = HIBYTE(v29.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v20 = v29.__r_.__value_.__l.__size_;
  }
  uint64_t v21 = std::string::append(&v35, (const std::string::value_type *)v19, v20);
  long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v36.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  int v23 = std::string::append(&v36, " in Batched-MatMul layer ");
  long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v37.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  int v25 = *(char *)(a5 + 23);
  if (v25 >= 0) {
    long long v26 = (const std::string::value_type *)a5;
  }
  else {
    long long v26 = *(const std::string::value_type **)a5;
  }
  if (v25 >= 0) {
    std::string::size_type v27 = *(unsigned __int8 *)(a5 + 23);
  }
  else {
    std::string::size_type v27 = *(void *)(a5 + 8);
  }
  uint64_t v28 = std::string::append(&v37, v26, v27);
  *a1 = *v28;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v34.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31.__r_.__value_.__l.__data_);
  }
}

void sub_19EAAA49C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (*(char *)(v47 - 57) < 0) {
    operator delete(*(void **)(v47 - 80));
  }
  if (*(char *)(v47 - 89) < 0) {
    operator delete(*(void **)(v47 - 112));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v47 - 121) < 0) {
    operator delete(*(void **)(v47 - 144));
  }
  if (a47 < 0) {
    operator delete(a42);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

void batchedMatMulQuantizedWeightArraySizeErrorString(std::string *a1, unint64_t __val, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  std::to_string(&v40, __val);
  uint64_t v11 = std::string::insert(&v40, 0, "Size of quantized weights (in bytes) = ");
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v41.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  uint64_t v13 = std::string::append(&v41, " is smaller than the total bytes required for the product of the first and second dimensions provided as layer parameters = ");
  long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v42.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v39, a3);
  if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v15 = &v39;
  }
  else {
    int v15 = (std::string *)v39.__r_.__value_.__r.__words[0];
  }
  if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v39.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v39.__r_.__value_.__l.__size_;
  }
  uint64_t v17 = std::string::append(&v42, (const std::string::value_type *)v15, size);
  long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v43.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  long long v19 = std::string::append(&v43, ",");
  long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v38, a4);
  if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v21 = &v38;
  }
  else {
    uint64_t v21 = (std::string *)v38.__r_.__value_.__r.__words[0];
  }
  if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v22 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v22 = v38.__r_.__value_.__l.__size_;
  }
  int v23 = std::string::append(&v44, (const std::string::value_type *)v21, v22);
  long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v45.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  int v25 = std::string::append(&v45, "for ");
  long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, a5);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v28 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v28 = __p.__r_.__value_.__l.__size_;
  }
  std::string v29 = std::string::append(&v46, (const std::string::value_type *)p_p, v28);
  long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  v47.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  std::string v31 = std::string::append(&v47, "-bit quantization in Batched-MatMul layer ");
  long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  v48.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  int v33 = *(char *)(a6 + 23);
  if (v33 >= 0) {
    std::string v34 = (const std::string::value_type *)a6;
  }
  else {
    std::string v34 = *(const std::string::value_type **)a6;
  }
  if (v33 >= 0) {
    std::string::size_type v35 = *(unsigned __int8 *)(a6 + 23);
  }
  else {
    std::string::size_type v35 = *(void *)(a6 + 8);
  }
  std::string v36 = std::string::append(&v48, v34, v35);
  *a1 = *v36;
  v36->__r_.__value_.__l.__size_ = 0;
  v36->__r_.__value_.__r.__words[2] = 0;
  v36->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v47.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v45.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v44.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v39.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v42.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v41.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v40.__r_.__value_.__l.__data_);
  }
}

void sub_19EAAA870(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v59 - 73) < 0) {
    operator delete(*(void **)(v59 - 96));
  }
  if (*(char *)(v59 - 105) < 0) {
    operator delete(*(void **)(v59 - 128));
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v59 - 137) < 0) {
    operator delete(*(void **)(v59 - 160));
  }
  if (*(char *)(v59 - 169) < 0) {
    operator delete(*(void **)(v59 - 192));
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  _Unwind_Resume(exception_object);
}

void sub_19EAAA97C()
{
}

void sub_19EAAA984()
{
}

void sub_19EAAA98C()
{
}

void batchedMatMulBiasArraySizeErrorString(std::string *a1, unint64_t __val, unint64_t a3, uint64_t a4)
{
  std::to_string(&v22, __val);
  uint64_t v7 = std::string::insert(&v22, 0, "Size of bias = ");
  long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  uint64_t v9 = std::string::append(&v23, " is not equal to the second dimension of the matrix = ");
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v24.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, a3);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v13 = std::string::append(&v24, (const std::string::value_type *)p_p, size);
  long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v25.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  int v15 = std::string::append(&v25, " in Batched-MatMul layer ");
  long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v26.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  int v17 = *(char *)(a4 + 23);
  if (v17 >= 0) {
    long long v18 = (const std::string::value_type *)a4;
  }
  else {
    long long v18 = *(const std::string::value_type **)a4;
  }
  if (v17 >= 0) {
    std::string::size_type v19 = *(unsigned __int8 *)(a4 + 23);
  }
  else {
    std::string::size_type v19 = *(void *)(a4 + 8);
  }
  long long v20 = std::string::append(&v26, v18, v19);
  *a1 = *v20;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
}

void sub_19EAAAB34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (*(char *)(v33 - 73) < 0) {
    operator delete(*(void **)(v33 - 96));
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void LayerTranslator::addRankPreservingReshape(LayerTranslator *this, uint64_t **a2)
{
  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  long long v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v39, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    long long v5 = *(_OWORD *)v4;
    v39.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v5;
  }
  std::string v36 = 0;
  std::string v37 = 0;
  uint64_t v38 = 0;
  uint64_t v33 = 0;
  std::string v34 = 0;
  uint64_t v35 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v36, (uint64_t *)&v33, *((void *)this + 1));
  if (*((_DWORD *)a2 + 35) == 1150)
  {
    uint64_t v7 = a2[16];
  }
  else
  {
    unint64_t inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
    uint64_t v7 = &CoreML::Specification::_RankPreservingReshapeLayerParams_default_instance_;
  }
  int v8 = *((_DWORD *)v7 + 4);
  if (v8 >= 6)
  {
    exceptiounint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    long long v20 = std::string::append(&__p, "': input/output rank greater than 5 not supported currently");
    long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v28.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v28);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v29 = 0;
  __int16 v30 = 257;
  int v31 = 1;
  memset(&v28, 0, 20);
  HIDWORD(v28.__r_.__value_.__r.__words[2]) = v8;
  uint64_t v9 = (v8 - 1);
  if (v8 >= 1)
  {
    uint64_t v10 = 0;
    uint64_t v11 = (v8 - 4);
    uint64_t v12 = (v8 - 5);
    uint64_t v22 = (v8 - 3);
    uint64_t v23 = (v8 - 2);
    do
    {
      if (!v10)
      {
        if (*((_DWORD *)a2 + 35) == 1150)
        {
          uint64_t v13 = a2[16];
        }
        else
        {
          unint64_t inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
          uint64_t v13 = &CoreML::Specification::_RankPreservingReshapeLayerParams_default_instance_;
        }
        LODWORD(v28.__r_.__value_.__l.__data_) = *(void *)(v13[3] + 8 * v9 + 8);
      }
      if (!(v9 - v23 + v10))
      {
        if (*((_DWORD *)a2 + 35) == 1150)
        {
          long long v14 = a2[16];
        }
        else
        {
          unint64_t inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
          long long v14 = &CoreML::Specification::_RankPreservingReshapeLayerParams_default_instance_;
        }
        HIDWORD(v28.__r_.__value_.__r.__words[0]) = *(void *)(v14[3] + 8 * v23 + 8);
      }
      if (!(v9 - v22 + v10))
      {
        if (*((_DWORD *)a2 + 35) == 1150)
        {
          int v15 = a2[16];
        }
        else
        {
          unint64_t inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
          int v15 = &CoreML::Specification::_RankPreservingReshapeLayerParams_default_instance_;
        }
        LODWORD(v28.__r_.__value_.__r.__words[1]) = *(void *)(v15[3] + 8 * v22 + 8);
      }
      if (!(v9 - v11 + v10))
      {
        if (*((_DWORD *)a2 + 35) == 1150)
        {
          long long v16 = a2[16];
        }
        else
        {
          unint64_t inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
          long long v16 = &CoreML::Specification::_RankPreservingReshapeLayerParams_default_instance_;
        }
        HIDWORD(v28.__r_.__value_.__r.__words[1]) = *(void *)(v16[3] + 8 * v11 + 8);
      }
      if (!(v9 - v12 + v10))
      {
        if (*((_DWORD *)a2 + 35) == 1150)
        {
          int v17 = a2[16];
        }
        else
        {
          unint64_t inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
          int v17 = &CoreML::Specification::_RankPreservingReshapeLayerParams_default_instance_;
        }
        LODWORD(v28.__r_.__value_.__r.__words[2]) = *(void *)(v17[3] + 8 * v12 + 8);
      }
      --v10;
    }
    while (v9 + v10 + 1 > 0);
  }
  long long v18 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(&__p, "reshape");
  memset(&v25, 0, sizeof(v25));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v25, v33, v34, 0xAAAAAAAAAAAAAAABLL * (((char *)v34 - (char *)v33) >> 3));
  memset(&v24, 0, sizeof(v24));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v24, v36, v37, 0xAAAAAAAAAAAAAAABLL * (((char *)v37 - (char *)v36) >> 3));
  Espresso::sequential_builder::add<Espresso::reshape_params>(&v26, v18, (uint64_t)&__p, (uint64_t)&v39, (uint64_t)&v28, (long long *)v25.__r_.__value_.__l.__data_, (long long *)v25.__r_.__value_.__l.__size_, (long long **)&v24);
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  v40[0] = (void **)&v24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v40);
  v40[0] = (void **)&v25;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v40);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v36);
  v28.__r_.__value_.__r.__words[0] = (std::string::size_type)&v33;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
  v28.__r_.__value_.__r.__words[0] = (std::string::size_type)&v36;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v39.__r_.__value_.__l.__data_);
  }
}

void sub_19EAAAF88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a34 < 0)
  {
    operator delete(a29);
    if ((v36 & 1) == 0)
    {
LABEL_8:
      std::string __p = &a35;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      std::string __p = (char *)(v37 - 152);
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      if (*(char *)(v37 - 105) < 0) {
        operator delete(*(void **)(v37 - 128));
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v36)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v35);
  goto LABEL_8;
}

void LayerTranslator::addReduceL1(LayerTranslator *this, uint64_t **a2)
{
  *(void *)&long long v132 = *MEMORY[0x1E4F143B8];
  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  long long v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v104, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    long long v5 = *(_OWORD *)v4;
    v104.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v5;
  }
  unint64_t v101 = 0;
  unint64_t v102 = 0;
  uint64_t v103 = 0;
  uint64_t v98 = 0;
  uint64_t v99 = 0;
  uint64_t v100 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v101, (uint64_t *)&v98, *((void *)this + 1));
  uint64_t v86 = *(void **)this;
  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v97, v104.__r_.__value_.__l.__data_, v104.__r_.__value_.__l.__size_);
  }
  else {
    std::string v97 = v104;
  }
  memset(&v96, 0, sizeof(v96));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v96, v98, v99, 0xAAAAAAAAAAAAAAABLL * (((char *)v99 - (char *)v98) >> 3));
  memset(&__str, 0, sizeof(__str));
  uint64_t v6 = std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&__str, v101, v102, 0xAAAAAAAAAAAAAAABLL * (((char *)v102 - (char *)v101) >> 3));
  if (*((_DWORD *)a2 + 35) == 1250)
  {
    uint64_t v7 = a2[16];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v6);
    uint64_t v7 = &CoreML::Specification::_ReduceL1LayerParams_default_instance_;
  }
  uint64_t v91 = 0;
  uint64_t v92 = 0;
  int v89 = &unk_1EF0D3CB0;
  unint64_t v90 = 0;
  int v8 = *((_DWORD *)v7 + 4);
  if (v8)
  {
    google::protobuf::RepeatedField<double>::Reserve((unsigned int *)&v91, v8);
    memcpy((void *)(v92 + 8), (const void *)(v7[3] + 8), 8 * *((int *)v7 + 4));
    LODWORD(v91) = *((_DWORD *)v7 + 4);
  }
  int v94 = 0;
  uint64_t v9 = v7[1];
  if (v9) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&v90, v9 & 0xFFFFFFFFFFFFFFFELL);
  }
  __int16 v93 = *((_WORD *)v7 + 18);
  uint64_t v10 = (uint64_t **)*((void *)this + 1);
  v125.__r_.__value_.__r.__words[0] = (std::string::size_type)v98;
  uint64_t v11 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v10, v98, (long long **)&v125);
  long long v87 = *(_OWORD *)(v11 + 72);
  uint64_t v12 = (const void *)*((void *)v11 + 12);
  memset(__p, 0, sizeof(__p));
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(__p, v12, *((void *)v11 + 13), (uint64_t)(*((void *)v11 + 13) - (void)v12) >> 2);
  std::string v83 = (char *)this;
  int v84 = v93;
  uint64_t v13 = v91;
  int v85 = HIBYTE(v93);
  BOOL v14 = HIBYTE(v93) != 0;
  if ((int)v91 >= 1)
  {
    int v15 = 0;
    long long v16 = 0;
    unint64_t v17 = 0;
    uint64_t v18 = 0;
    while (1)
    {
      int v19 = *(_DWORD *)(v92 + 8 * v18 + 8);
      if (v19 < 0)
      {
        if ((unint64_t)v16 >= v17)
        {
          uint64_t v27 = v16 - v15;
          unint64_t v28 = v27 + 1;
          if ((unint64_t)(v27 + 1) >> 62) {
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
          }
          if ((uint64_t)(v17 - (void)v15) >> 1 > v28) {
            unint64_t v28 = (uint64_t)(v17 - (void)v15) >> 1;
          }
          if (v17 - (unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v24 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v24 = v28;
          }
          if (v24) {
            unint64_t v24 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v24);
          }
          else {
            uint64_t v25 = 0;
          }
          uint64_t v29 = (_DWORD *)(v24 + 4 * v27);
          *uint64_t v29 = v19;
          uint64_t v26 = v29 + 1;
          while (v16 != v15)
          {
            int v31 = *--v16;
            *--uint64_t v29 = v31;
          }
          goto LABEL_49;
        }
      }
      else
      {
        int v20 = DWORD1(v87);
        if (v87 == 1) {
          int v21 = 4;
        }
        else {
          int v21 = 5;
        }
        if (DWORD1(v87) == -1) {
          int v20 = v21;
        }
        v19 -= v20;
        if ((unint64_t)v16 >= v17)
        {
          uint64_t v22 = v16 - v15;
          unint64_t v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 62) {
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
          }
          if ((uint64_t)(v17 - (void)v15) >> 1 > v23) {
            unint64_t v23 = (uint64_t)(v17 - (void)v15) >> 1;
          }
          if (v17 - (unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v24 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v24 = v23;
          }
          if (v24) {
            unint64_t v24 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v24);
          }
          else {
            uint64_t v25 = 0;
          }
          uint64_t v29 = (_DWORD *)(v24 + 4 * v22);
          *uint64_t v29 = v19;
          uint64_t v26 = v29 + 1;
          while (v16 != v15)
          {
            int v30 = *--v16;
            *--uint64_t v29 = v30;
          }
LABEL_49:
          unint64_t v17 = v24 + 4 * v25;
          if (v15) {
            operator delete(v15);
          }
          int v15 = v29;
          goto LABEL_52;
        }
      }
      _DWORD *v16 = v19;
      uint64_t v26 = v16 + 1;
LABEL_52:
      ++v18;
      long long v16 = v26;
      if (v18 == v13) {
        goto LABEL_55;
      }
    }
  }
  int v15 = 0;
  uint64_t v26 = 0;
LABEL_55:
  std::__sort<std::__less<int,int> &,int *>();
  unint64_t v32 = v26 - v15;
  int v33 = DWORD1(v87);
  if (v87 == 1) {
    int v34 = 4;
  }
  else {
    int v34 = 5;
  }
  if (DWORD1(v87) == -1) {
    int v33 = v34;
  }
  if (!v85 && v33 == v32)
  {
    if (v26 == v15)
    {
      BOOL v14 = 1;
    }
    else
    {
      if (v32 <= 1) {
        uint64_t v35 = 1;
      }
      else {
        uint64_t v35 = v26 - v15;
      }
      uint64_t v36 = v35 - 1;
      int v37 = -(int)v32;
      uint64_t v38 = v15;
      do
      {
        int v40 = *v38++;
        int v39 = v40;
        BOOL v42 = v36-- != 0;
        BOOL v14 = v37 == v39;
        if (v37 != v39) {
          break;
        }
        ++v37;
      }
      while (v42);
    }
  }
  if (v32 == 3)
  {
    if (*v15 == -3 && v15[1] == -2)
    {
      BOOL v44 = 0;
      BOOL v43 = v15[2] == -1;
      goto LABEL_82;
    }
  }
  else if (v32 == 2 && *v15 == -2)
  {
    BOOL v43 = 0;
    BOOL v44 = v15[1] == -1;
    goto LABEL_82;
  }
  BOOL v44 = 0;
  BOOL v43 = 0;
LABEL_82:
  if (*(char *)(v96.__r_.__value_.__r.__words[0] + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v125, *(const std::string::value_type **)v96.__r_.__value_.__l.__data_, *(void *)(v96.__r_.__value_.__r.__words[0] + 8));
  }
  else
  {
    long long v45 = *(_OWORD *)v96.__r_.__value_.__l.__data_;
    v125.__r_.__value_.__r.__words[2] = *(void *)(v96.__r_.__value_.__r.__words[0] + 16);
    *(_OWORD *)&v125.__r_.__value_.__l.__data_ = v45;
  }
  if (*(char *)(__str.__r_.__value_.__r.__words[0] + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v124, *(const std::string::value_type **)__str.__r_.__value_.__l.__data_, *(void *)(__str.__r_.__value_.__r.__words[0] + 8));
  }
  else
  {
    long long v46 = *(_OWORD *)__str.__r_.__value_.__l.__data_;
    v124.__r_.__value_.__r.__words[2] = *(void *)(__str.__r_.__value_.__r.__words[0] + 16);
    *(_OWORD *)&v124.__r_.__value_.__l.__data_ = v46;
  }
  if (v14 || v44 || v43)
  {
    *((void *)&v108 + 1) = 0x100000007;
    long long v109 = 0uLL;
    *(void *)&long long v110 = 0xFFFFFFFF00000000;
    *(void *)&long long v108 = 0x358637BD00000008;
    BYTE8(v110) = 0;
    if (v14 || v44)
    {
      if (v14) {
        int v47 = 31;
      }
      else {
        int v47 = 3;
      }
      DWORD2(v108) = v47;
    }
    memset(&v123, 0, sizeof(v123));
    std::string::operator=(&v124, (const std::string *)__str.__r_.__value_.__l.__data_);
    if (v84)
    {
      std::string::operator=(&v123, &v97);
    }
    else
    {
      if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v124.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v124.__r_.__value_.__l.__size_;
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v122, size + 11);
      if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v74 = &v122;
      }
      else {
        uint64_t v74 = (std::string *)v122.__r_.__value_.__r.__words[0];
      }
      if (size)
      {
        if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v75 = &v124;
        }
        else {
          int v75 = (std::string *)v124.__r_.__value_.__r.__words[0];
        }
        memmove(v74, v75, size);
      }
      strcpy((char *)v74 + size, "_presqueeze");
      if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v124.__r_.__value_.__l.__data_);
      }
      std::string v124 = v122;
      if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v76 = HIBYTE(v97.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v76 = v97.__r_.__value_.__l.__size_;
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v122, v76 + 11);
      if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v77 = &v122;
      }
      else {
        uint64_t v77 = (std::string *)v122.__r_.__value_.__r.__words[0];
      }
      if (v76)
      {
        if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v78 = &v97;
        }
        else {
          uint64_t v78 = (std::string *)v97.__r_.__value_.__r.__words[0];
        }
        memmove(v77, v78, v76);
      }
      strcpy((char *)v77 + v76, "_presqueeze");
      if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v123.__r_.__value_.__l.__data_);
      }
      std::string v123 = v122;
    }
    std::string::basic_string[abi:ne180100]<0>(&v122, "reduce");
    memset(&v131, 0, sizeof(v131));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v131, (long long *)v96.__r_.__value_.__l.__data_, (long long *)v96.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v96.__r_.__value_.__l.__size_ - v96.__r_.__value_.__r.__words[0]) >> 3));
    if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v129, v124.__r_.__value_.__l.__data_, v124.__r_.__value_.__l.__size_);
    }
    else {
      std::string v129 = v124;
    }
    int v118 = 0;
    int v117 = 0;
    uint64_t v119 = 0;
    v127.__r_.__value_.__r.__words[0] = (std::string::size_type)&v117;
    v127.__r_.__value_.__s.__data_[8] = 0;
    int v117 = (long long *)operator new(0x18uLL);
    int v118 = v117;
    uint64_t v119 = (char *)v117 + 24;
    int v118 = (long long *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v119, (long long *)&v129, (long long *)&v130, (std::string *)v117);
    Espresso::sequential_builder::add<Espresso::reduce_params_t>(&v120, v86, (uint64_t)&v122, (uint64_t)&v123, (uint64_t)&v108, (long long *)v131.__r_.__value_.__l.__data_, (long long *)v131.__r_.__value_.__l.__size_, &v117);
    if (v121) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v121);
    }
    v127.__r_.__value_.__r.__words[0] = (std::string::size_type)&v117;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v127);
    if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v129.__r_.__value_.__l.__data_);
    }
    v129.__r_.__value_.__r.__words[0] = (std::string::size_type)&v131;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v129);
    if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v122.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v123.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    if ((int)v13 < 1)
    {
      if (v84) {
        goto LABEL_253;
      }
      long long v114 = 0u;
      memset(v115, 0, sizeof(v115));
      long long v112 = 0u;
      long long v113 = 0u;
      long long v110 = 0u;
      long long v111 = 0u;
      long long v108 = 0u;
      long long v109 = 0u;
      int v116 = 1;
      DWORD1(v108) = v13;
      goto LABEL_242;
    }
    for (unint64_t i = 0; i != v13; ++i)
    {
      *((void *)&v108 + 1) = 0x100000007;
      long long v109 = 0uLL;
      LODWORD(v110) = 0;
      *(void *)&long long v108 = 0x358637BD00000008;
      BYTE8(v110) = 1;
      DWORD1(v110) = *(void *)(v92 + 8 * i + 8);
      memset(&v123, 0, sizeof(v123));
      if (i >= (v13 - 1))
      {
        if (v84)
        {
          std::string::operator=(&v124, (const std::string *)__str.__r_.__value_.__l.__data_);
          std::string::operator=(&v123, &v97);
        }
        else
        {
          std::string::size_type v66 = __str.__r_.__value_.__r.__words[0];
          if (*(char *)(__str.__r_.__value_.__r.__words[0] + 23) >= 0) {
            size_t v67 = *(unsigned __int8 *)(__str.__r_.__value_.__r.__words[0] + 23);
          }
          else {
            size_t v67 = *(void *)(__str.__r_.__value_.__r.__words[0] + 8);
          }
          std::string::basic_string[abi:ne180100]((uint64_t)&v122, v67 + 11);
          if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unint64_t v68 = &v122;
          }
          else {
            unint64_t v68 = (std::string *)v122.__r_.__value_.__r.__words[0];
          }
          if (v67)
          {
            if (*(char *)(v66 + 23) >= 0) {
              uint64_t v69 = (const void *)v66;
            }
            else {
              uint64_t v69 = *(const void **)v66;
            }
            memmove(v68, v69, v67);
          }
          strcpy((char *)v68 + v67, "_presqueeze");
          if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v124.__r_.__value_.__l.__data_);
          }
          std::string v124 = v122;
          if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v70 = HIBYTE(v97.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v70 = v97.__r_.__value_.__l.__size_;
          }
          std::string::basic_string[abi:ne180100]((uint64_t)&v122, v70 + 11);
          if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v71 = &v122;
          }
          else {
            uint64_t v71 = (std::string *)v122.__r_.__value_.__r.__words[0];
          }
          if (v70)
          {
            if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v72 = &v97;
            }
            else {
              uint64_t v72 = (std::string *)v97.__r_.__value_.__r.__words[0];
            }
            memmove(v71, v72, v70);
          }
          strcpy((char *)v71 + v70, "_presqueeze");
          if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v123.__r_.__value_.__l.__data_);
          }
          std::string v123 = v122;
        }
      }
      else
      {
        std::string::size_type v49 = v96.__r_.__value_.__r.__words[0];
        if (*(char *)(v96.__r_.__value_.__r.__words[0] + 23) >= 0) {
          size_t v50 = *(unsigned __int8 *)(v96.__r_.__value_.__r.__words[0] + 23);
        }
        else {
          size_t v50 = *(void *)(v96.__r_.__value_.__r.__words[0] + 8);
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&v122, v50 + 18);
        if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v51 = &v122;
        }
        else {
          long long v51 = (std::string *)v122.__r_.__value_.__r.__words[0];
        }
        if (v50)
        {
          if (*(char *)(v49 + 23) >= 0) {
            uint64_t v52 = (const void *)v49;
          }
          else {
            uint64_t v52 = *(const void **)v49;
          }
          memmove(v51, v52, v50);
        }
        strcpy((char *)v51 + v50, "__reduction_axis__");
        std::to_string(&v131, i + 1);
        if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v53 = &v131;
        }
        else {
          long long v53 = (std::string *)v131.__r_.__value_.__r.__words[0];
        }
        if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v54 = HIBYTE(v131.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v54 = v131.__r_.__value_.__l.__size_;
        }
        long long v55 = std::string::append(&v122, (const std::string::value_type *)v53, v54);
        std::string::size_type v56 = v55->__r_.__value_.__r.__words[0];
        v127.__r_.__value_.__r.__words[0] = v55->__r_.__value_.__l.__size_;
        *(std::string::size_type *)((char *)v127.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v55->__r_.__value_.__r.__words[1] + 7);
        char v57 = HIBYTE(v55->__r_.__value_.__r.__words[2]);
        v55->__r_.__value_.__l.__size_ = 0;
        v55->__r_.__value_.__r.__words[2] = 0;
        v55->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v124.__r_.__value_.__l.__data_);
        }
        v124.__r_.__value_.__r.__words[0] = v56;
        v124.__r_.__value_.__l.__size_ = v127.__r_.__value_.__r.__words[0];
        *(std::string::size_type *)((char *)&v124.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v127.__r_.__value_.__r.__words + 7);
        *((unsigned char *)&v124.__r_.__value_.__s + 23) = v57;
        if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v131.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v122.__r_.__value_.__l.__data_);
        }
        if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v58 = HIBYTE(v97.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v58 = v97.__r_.__value_.__l.__size_;
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&v122, v58 + 18);
        if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v59 = &v122;
        }
        else {
          uint64_t v59 = (std::string *)v122.__r_.__value_.__r.__words[0];
        }
        if (v58)
        {
          if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            long long v60 = &v97;
          }
          else {
            long long v60 = (std::string *)v97.__r_.__value_.__r.__words[0];
          }
          memmove(v59, v60, v58);
        }
        strcpy((char *)v59 + v58, "__reduction_axis__");
        std::to_string(&v131, i);
        if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v61 = &v131;
        }
        else {
          long long v61 = (std::string *)v131.__r_.__value_.__r.__words[0];
        }
        if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v62 = HIBYTE(v131.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v62 = v131.__r_.__value_.__l.__size_;
        }
        std::string v63 = std::string::append(&v122, (const std::string::value_type *)v61, v62);
        std::string::size_type v64 = v63->__r_.__value_.__r.__words[0];
        v127.__r_.__value_.__r.__words[0] = v63->__r_.__value_.__l.__size_;
        *(std::string::size_type *)((char *)v127.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v63->__r_.__value_.__r.__words[1] + 7);
        char v65 = HIBYTE(v63->__r_.__value_.__r.__words[2]);
        v63->__r_.__value_.__l.__size_ = 0;
        v63->__r_.__value_.__r.__words[2] = 0;
        v63->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v123.__r_.__value_.__l.__data_);
        }
        v123.__r_.__value_.__r.__words[0] = v64;
        v123.__r_.__value_.__l.__size_ = v127.__r_.__value_.__r.__words[0];
        *(std::string::size_type *)((char *)&v123.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v127.__r_.__value_.__r.__words + 7);
        *((unsigned char *)&v123.__r_.__value_.__s + 23) = v65;
        if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v131.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v122.__r_.__value_.__l.__data_);
        }
      }
      std::string::basic_string[abi:ne180100]<0>(&v122, "reduce");
      if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v131, v125.__r_.__value_.__l.__data_, v125.__r_.__value_.__l.__size_);
      }
      else {
        std::string v131 = v125;
      }
      int v118 = 0;
      int v117 = 0;
      uint64_t v119 = 0;
      v127.__r_.__value_.__r.__words[0] = (std::string::size_type)&v117;
      v127.__r_.__value_.__s.__data_[8] = 0;
      int v117 = (long long *)operator new(0x18uLL);
      int v118 = v117;
      uint64_t v119 = (char *)v117 + 24;
      int v118 = (long long *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v119, (long long *)&v131, &v132, (std::string *)v117);
      if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v127, v124.__r_.__value_.__l.__data_, v124.__r_.__value_.__l.__size_);
      }
      else {
        std::string v127 = v124;
      }
      memset(&v129, 0, sizeof(v129));
      v105.__r_.__value_.__r.__words[0] = (std::string::size_type)&v129;
      v105.__r_.__value_.__s.__data_[8] = 0;
      v129.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
      v129.__r_.__value_.__l.__size_ = v129.__r_.__value_.__r.__words[0];
      v129.__r_.__value_.__r.__words[2] = v129.__r_.__value_.__r.__words[0] + 24;
      v129.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v129.__r_.__value_.__r.__words[2], (long long *)&v127, (long long *)&v128, (std::string *)v129.__r_.__value_.__l.__data_);
      Espresso::sequential_builder::add<Espresso::reduce_params_t>(&v120, v86, (uint64_t)&v122, (uint64_t)&v123, (uint64_t)&v108, v117, v118, (long long **)&v129);
      if (v121) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v121);
      }
      v105.__r_.__value_.__r.__words[0] = (std::string::size_type)&v129;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v105);
      if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v127.__r_.__value_.__l.__data_);
      }
      v127.__r_.__value_.__r.__words[0] = (std::string::size_type)&v117;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v127);
      if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v131.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v122.__r_.__value_.__l.__data_);
      }
      std::string::operator=(&v125, &v124);
      if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v123.__r_.__value_.__l.__data_);
      }
    }
  }
  if (v84) {
    goto LABEL_253;
  }
  long long v114 = 0u;
  memset(v115, 0, sizeof(v115));
  long long v112 = 0u;
  long long v113 = 0u;
  long long v110 = 0u;
  long long v111 = 0u;
  long long v108 = 0u;
  long long v109 = 0u;
  int v116 = 1;
  if ((int)v13 >= 32) {
    LODWORD(v79) = 32;
  }
  else {
    LODWORD(v79) = v13;
  }
  DWORD1(v108) = v79;
  if ((int)v13 >= 1)
  {
    if ((int)v79 <= 1) {
      uint64_t v79 = 1;
    }
    else {
      uint64_t v79 = v79;
    }
    unsigned int v80 = (_DWORD *)&v108 + 2;
    int v81 = (uint64_t *)(v92 + 8);
    do
    {
      uint64_t v82 = *v81++;
      *v80++ = v82;
      --v79;
    }
    while (v79);
  }
LABEL_242:
  if (HIBYTE(v93)) {
    v115[24] = 1;
  }
  std::string::basic_string[abi:ne180100]<0>(&v123, "squeeze");
  if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v127, v124.__r_.__value_.__l.__data_, v124.__r_.__value_.__l.__size_);
  }
  else {
    std::string v127 = v124;
  }
  memset(&v122, 0, sizeof(v122));
  v105.__r_.__value_.__r.__words[0] = (std::string::size_type)&v122;
  v105.__r_.__value_.__s.__data_[8] = 0;
  v122.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
  v122.__r_.__value_.__l.__size_ = v122.__r_.__value_.__r.__words[0];
  v122.__r_.__value_.__r.__words[2] = v122.__r_.__value_.__r.__words[0] + 24;
  v122.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v122.__r_.__value_.__r.__words[2], (long long *)&v127, (long long *)&v128, (std::string *)v122.__r_.__value_.__l.__data_);
  memset(&v105, 0, sizeof(v105));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v105, (long long *)__str.__r_.__value_.__l.__data_, (long long *)__str.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(__str.__r_.__value_.__l.__size_ - __str.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add<Espresso::squeeze_params_t>(&v106, v86, (uint64_t)&v123, (uint64_t)&v97, (uint64_t)&v108, (long long *)v122.__r_.__value_.__l.__data_, (long long *)v122.__r_.__value_.__l.__size_, (long long **)&v105);
  if (v107) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v107);
  }
  uint64_t v126 = &v105;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v126);
  uint64_t v126 = &v122;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v126);
  if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v127.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v123.__r_.__value_.__l.__data_);
  }
LABEL_253:
  if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v124.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v125.__r_.__value_.__l.__data_);
  }
  if (v15) {
    operator delete(v15);
  }
  if (__p[0]) {
    operator delete(__p[0]);
  }
  CoreML::Specification::ReduceL1LayerParams::~ReduceL1LayerParams((CoreML::Specification::ReduceL1LayerParams *)&v89);
  *(void *)&long long v108 = &__str;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v108);
  *(void *)&long long v108 = &v96;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v108);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v97.__r_.__value_.__l.__data_);
  }
  LayerTranslator::defaultUnknownNdShape(v83, (uint64_t *)&v101);
  *(void *)&long long v108 = &v98;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v108);
  *(void *)&long long v108 = &v101;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v108);
  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v104.__r_.__value_.__l.__data_);
  }
}

void sub_19EAAC0A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (SLOBYTE(STACK[0x267]) < 0) {
    operator delete((void *)STACK[0x250]);
  }
  if (SLOBYTE(STACK[0x287]) < 0) {
    operator delete((void *)STACK[0x270]);
  }
  if (*(char *)(v64 - 217) < 0) {
    operator delete(*(void **)(v64 - 240));
  }
  if (v63) {
    operator delete(v63);
  }
  if (a24) {
    operator delete(a24);
  }
  CoreML::Specification::ReduceL1LayerParams::~ReduceL1LayerParams((CoreML::Specification::ReduceL1LayerParams *)&a27);
  a63 = (uint64_t)&a33;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a63);
  a63 = (uint64_t)&a36;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a63);
  if (a44 < 0) {
    operator delete(a39);
  }
  a63 = (uint64_t)&a46;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a63);
  a63 = (uint64_t)&a49;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a63);
  if (a57 < 0) {
    operator delete(a52);
  }
  _Unwind_Resume(a1);
}

void LayerTranslator::addReduceL2(LayerTranslator *this, uint64_t **a2)
{
  *(void *)&long long v132 = *MEMORY[0x1E4F143B8];
  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  long long v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v104, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    long long v5 = *(_OWORD *)v4;
    v104.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v5;
  }
  unint64_t v101 = 0;
  unint64_t v102 = 0;
  uint64_t v103 = 0;
  uint64_t v98 = 0;
  uint64_t v99 = 0;
  uint64_t v100 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v101, (uint64_t *)&v98, *((void *)this + 1));
  uint64_t v86 = *(void **)this;
  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v97, v104.__r_.__value_.__l.__data_, v104.__r_.__value_.__l.__size_);
  }
  else {
    std::string v97 = v104;
  }
  memset(&v96, 0, sizeof(v96));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v96, v98, v99, 0xAAAAAAAAAAAAAAABLL * (((char *)v99 - (char *)v98) >> 3));
  memset(&__str, 0, sizeof(__str));
  uint64_t v6 = std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&__str, v101, v102, 0xAAAAAAAAAAAAAAABLL * (((char *)v102 - (char *)v101) >> 3));
  if (*((_DWORD *)a2 + 35) == 1255)
  {
    uint64_t v7 = a2[16];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v6);
    uint64_t v7 = &CoreML::Specification::_ReduceL2LayerParams_default_instance_;
  }
  uint64_t v91 = 0;
  uint64_t v92 = 0;
  int v89 = &unk_1EF0D3D48;
  unint64_t v90 = 0;
  int v8 = *((_DWORD *)v7 + 4);
  if (v8)
  {
    google::protobuf::RepeatedField<double>::Reserve((unsigned int *)&v91, v8);
    memcpy((void *)(v92 + 8), (const void *)(v7[3] + 8), 8 * *((int *)v7 + 4));
    LODWORD(v91) = *((_DWORD *)v7 + 4);
  }
  int v94 = 0;
  uint64_t v9 = v7[1];
  if (v9) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&v90, v9 & 0xFFFFFFFFFFFFFFFELL);
  }
  __int16 v93 = *((_WORD *)v7 + 18);
  uint64_t v10 = (uint64_t **)*((void *)this + 1);
  v125.__r_.__value_.__r.__words[0] = (std::string::size_type)v98;
  uint64_t v11 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v10, v98, (long long **)&v125);
  long long v87 = *(_OWORD *)(v11 + 72);
  uint64_t v12 = (const void *)*((void *)v11 + 12);
  memset(__p, 0, sizeof(__p));
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(__p, v12, *((void *)v11 + 13), (uint64_t)(*((void *)v11 + 13) - (void)v12) >> 2);
  std::string v83 = (char *)this;
  int v84 = v93;
  uint64_t v13 = v91;
  int v85 = HIBYTE(v93);
  BOOL v14 = HIBYTE(v93) != 0;
  if ((int)v91 >= 1)
  {
    int v15 = 0;
    long long v16 = 0;
    unint64_t v17 = 0;
    uint64_t v18 = 0;
    while (1)
    {
      int v19 = *(_DWORD *)(v92 + 8 * v18 + 8);
      if (v19 < 0)
      {
        if ((unint64_t)v16 >= v17)
        {
          uint64_t v27 = v16 - v15;
          unint64_t v28 = v27 + 1;
          if ((unint64_t)(v27 + 1) >> 62) {
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
          }
          if ((uint64_t)(v17 - (void)v15) >> 1 > v28) {
            unint64_t v28 = (uint64_t)(v17 - (void)v15) >> 1;
          }
          if (v17 - (unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v24 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v24 = v28;
          }
          if (v24) {
            unint64_t v24 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v24);
          }
          else {
            uint64_t v25 = 0;
          }
          uint64_t v29 = (_DWORD *)(v24 + 4 * v27);
          *uint64_t v29 = v19;
          uint64_t v26 = v29 + 1;
          while (v16 != v15)
          {
            int v31 = *--v16;
            *--uint64_t v29 = v31;
          }
          goto LABEL_49;
        }
      }
      else
      {
        int v20 = DWORD1(v87);
        if (v87 == 1) {
          int v21 = 4;
        }
        else {
          int v21 = 5;
        }
        if (DWORD1(v87) == -1) {
          int v20 = v21;
        }
        v19 -= v20;
        if ((unint64_t)v16 >= v17)
        {
          uint64_t v22 = v16 - v15;
          unint64_t v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 62) {
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
          }
          if ((uint64_t)(v17 - (void)v15) >> 1 > v23) {
            unint64_t v23 = (uint64_t)(v17 - (void)v15) >> 1;
          }
          if (v17 - (unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v24 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v24 = v23;
          }
          if (v24) {
            unint64_t v24 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v24);
          }
          else {
            uint64_t v25 = 0;
          }
          uint64_t v29 = (_DWORD *)(v24 + 4 * v22);
          *uint64_t v29 = v19;
          uint64_t v26 = v29 + 1;
          while (v16 != v15)
          {
            int v30 = *--v16;
            *--uint64_t v29 = v30;
          }
LABEL_49:
          unint64_t v17 = v24 + 4 * v25;
          if (v15) {
            operator delete(v15);
          }
          int v15 = v29;
          goto LABEL_52;
        }
      }
      _DWORD *v16 = v19;
      uint64_t v26 = v16 + 1;
LABEL_52:
      ++v18;
      long long v16 = v26;
      if (v18 == v13) {
        goto LABEL_55;
      }
    }
  }
  int v15 = 0;
  uint64_t v26 = 0;
LABEL_55:
  std::__sort<std::__less<int,int> &,int *>();
  unint64_t v32 = v26 - v15;
  int v33 = DWORD1(v87);
  if (v87 == 1) {
    int v34 = 4;
  }
  else {
    int v34 = 5;
  }
  if (DWORD1(v87) == -1) {
    int v33 = v34;
  }
  if (!v85 && v33 == v32)
  {
    if (v26 == v15)
    {
      BOOL v14 = 1;
    }
    else
    {
      if (v32 <= 1) {
        uint64_t v35 = 1;
      }
      else {
        uint64_t v35 = v26 - v15;
      }
      uint64_t v36 = v35 - 1;
      int v37 = -(int)v32;
      uint64_t v38 = v15;
      do
      {
        int v40 = *v38++;
        int v39 = v40;
        BOOL v42 = v36-- != 0;
        BOOL v14 = v37 == v39;
        if (v37 != v39) {
          break;
        }
        ++v37;
      }
      while (v42);
    }
  }
  if (v32 == 3)
  {
    if (*v15 == -3 && v15[1] == -2)
    {
      BOOL v44 = 0;
      BOOL v43 = v15[2] == -1;
      goto LABEL_82;
    }
  }
  else if (v32 == 2 && *v15 == -2)
  {
    BOOL v43 = 0;
    BOOL v44 = v15[1] == -1;
    goto LABEL_82;
  }
  BOOL v44 = 0;
  BOOL v43 = 0;
LABEL_82:
  if (*(char *)(v96.__r_.__value_.__r.__words[0] + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v125, *(const std::string::value_type **)v96.__r_.__value_.__l.__data_, *(void *)(v96.__r_.__value_.__r.__words[0] + 8));
  }
  else
  {
    long long v45 = *(_OWORD *)v96.__r_.__value_.__l.__data_;
    v125.__r_.__value_.__r.__words[2] = *(void *)(v96.__r_.__value_.__r.__words[0] + 16);
    *(_OWORD *)&v125.__r_.__value_.__l.__data_ = v45;
  }
  if (*(char *)(__str.__r_.__value_.__r.__words[0] + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v124, *(const std::string::value_type **)__str.__r_.__value_.__l.__data_, *(void *)(__str.__r_.__value_.__r.__words[0] + 8));
  }
  else
  {
    long long v46 = *(_OWORD *)__str.__r_.__value_.__l.__data_;
    v124.__r_.__value_.__r.__words[2] = *(void *)(__str.__r_.__value_.__r.__words[0] + 16);
    *(_OWORD *)&v124.__r_.__value_.__l.__data_ = v46;
  }
  if (v14 || v44 || v43)
  {
    *((void *)&v108 + 1) = 0x100000007;
    long long v109 = 0uLL;
    *(void *)&long long v110 = 0xFFFFFFFF00000000;
    *(void *)&long long v108 = 0x358637BD00000005;
    BYTE8(v110) = 0;
    if (v14 || v44)
    {
      if (v14) {
        int v47 = 31;
      }
      else {
        int v47 = 3;
      }
      DWORD2(v108) = v47;
    }
    memset(&v123, 0, sizeof(v123));
    std::string::operator=(&v124, (const std::string *)__str.__r_.__value_.__l.__data_);
    if (v84)
    {
      std::string::operator=(&v123, &v97);
    }
    else
    {
      if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v124.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v124.__r_.__value_.__l.__size_;
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v122, size + 11);
      if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v74 = &v122;
      }
      else {
        uint64_t v74 = (std::string *)v122.__r_.__value_.__r.__words[0];
      }
      if (size)
      {
        if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v75 = &v124;
        }
        else {
          int v75 = (std::string *)v124.__r_.__value_.__r.__words[0];
        }
        memmove(v74, v75, size);
      }
      strcpy((char *)v74 + size, "_presqueeze");
      if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v124.__r_.__value_.__l.__data_);
      }
      std::string v124 = v122;
      if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v76 = HIBYTE(v97.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v76 = v97.__r_.__value_.__l.__size_;
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v122, v76 + 11);
      if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v77 = &v122;
      }
      else {
        uint64_t v77 = (std::string *)v122.__r_.__value_.__r.__words[0];
      }
      if (v76)
      {
        if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v78 = &v97;
        }
        else {
          uint64_t v78 = (std::string *)v97.__r_.__value_.__r.__words[0];
        }
        memmove(v77, v78, v76);
      }
      strcpy((char *)v77 + v76, "_presqueeze");
      if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v123.__r_.__value_.__l.__data_);
      }
      std::string v123 = v122;
    }
    std::string::basic_string[abi:ne180100]<0>(&v122, "reduce");
    memset(&v131, 0, sizeof(v131));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v131, (long long *)v96.__r_.__value_.__l.__data_, (long long *)v96.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v96.__r_.__value_.__l.__size_ - v96.__r_.__value_.__r.__words[0]) >> 3));
    if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v129, v124.__r_.__value_.__l.__data_, v124.__r_.__value_.__l.__size_);
    }
    else {
      std::string v129 = v124;
    }
    int v118 = 0;
    int v117 = 0;
    uint64_t v119 = 0;
    v127.__r_.__value_.__r.__words[0] = (std::string::size_type)&v117;
    v127.__r_.__value_.__s.__data_[8] = 0;
    int v117 = (long long *)operator new(0x18uLL);
    int v118 = v117;
    uint64_t v119 = (char *)v117 + 24;
    int v118 = (long long *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v119, (long long *)&v129, (long long *)&v130, (std::string *)v117);
    Espresso::sequential_builder::add<Espresso::reduce_params_t>(&v120, v86, (uint64_t)&v122, (uint64_t)&v123, (uint64_t)&v108, (long long *)v131.__r_.__value_.__l.__data_, (long long *)v131.__r_.__value_.__l.__size_, &v117);
    if (v121) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v121);
    }
    v127.__r_.__value_.__r.__words[0] = (std::string::size_type)&v117;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v127);
    if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v129.__r_.__value_.__l.__data_);
    }
    v129.__r_.__value_.__r.__words[0] = (std::string::size_type)&v131;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v129);
    if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v122.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v123.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    if ((int)v13 < 1)
    {
      if (v84) {
        goto LABEL_253;
      }
      long long v114 = 0u;
      memset(v115, 0, sizeof(v115));
      long long v112 = 0u;
      long long v113 = 0u;
      long long v110 = 0u;
      long long v111 = 0u;
      long long v108 = 0u;
      long long v109 = 0u;
      int v116 = 1;
      DWORD1(v108) = v13;
      goto LABEL_242;
    }
    for (unint64_t i = 0; i != v13; ++i)
    {
      *((void *)&v108 + 1) = 0x100000007;
      long long v109 = 0uLL;
      LODWORD(v110) = 0;
      *(void *)&long long v108 = 0x358637BD00000005;
      BYTE8(v110) = 1;
      DWORD1(v110) = *(void *)(v92 + 8 * i + 8);
      memset(&v123, 0, sizeof(v123));
      if (i >= (v13 - 1))
      {
        if (v84)
        {
          std::string::operator=(&v124, (const std::string *)__str.__r_.__value_.__l.__data_);
          std::string::operator=(&v123, &v97);
        }
        else
        {
          std::string::size_type v66 = __str.__r_.__value_.__r.__words[0];
          if (*(char *)(__str.__r_.__value_.__r.__words[0] + 23) >= 0) {
            size_t v67 = *(unsigned __int8 *)(__str.__r_.__value_.__r.__words[0] + 23);
          }
          else {
            size_t v67 = *(void *)(__str.__r_.__value_.__r.__words[0] + 8);
          }
          std::string::basic_string[abi:ne180100]((uint64_t)&v122, v67 + 11);
          if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unint64_t v68 = &v122;
          }
          else {
            unint64_t v68 = (std::string *)v122.__r_.__value_.__r.__words[0];
          }
          if (v67)
          {
            if (*(char *)(v66 + 23) >= 0) {
              uint64_t v69 = (const void *)v66;
            }
            else {
              uint64_t v69 = *(const void **)v66;
            }
            memmove(v68, v69, v67);
          }
          strcpy((char *)v68 + v67, "_presqueeze");
          if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v124.__r_.__value_.__l.__data_);
          }
          std::string v124 = v122;
          if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v70 = HIBYTE(v97.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v70 = v97.__r_.__value_.__l.__size_;
          }
          std::string::basic_string[abi:ne180100]((uint64_t)&v122, v70 + 11);
          if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v71 = &v122;
          }
          else {
            uint64_t v71 = (std::string *)v122.__r_.__value_.__r.__words[0];
          }
          if (v70)
          {
            if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v72 = &v97;
            }
            else {
              uint64_t v72 = (std::string *)v97.__r_.__value_.__r.__words[0];
            }
            memmove(v71, v72, v70);
          }
          strcpy((char *)v71 + v70, "_presqueeze");
          if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v123.__r_.__value_.__l.__data_);
          }
          std::string v123 = v122;
        }
      }
      else
      {
        std::string::size_type v49 = v96.__r_.__value_.__r.__words[0];
        if (*(char *)(v96.__r_.__value_.__r.__words[0] + 23) >= 0) {
          size_t v50 = *(unsigned __int8 *)(v96.__r_.__value_.__r.__words[0] + 23);
        }
        else {
          size_t v50 = *(void *)(v96.__r_.__value_.__r.__words[0] + 8);
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&v122, v50 + 18);
        if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v51 = &v122;
        }
        else {
          long long v51 = (std::string *)v122.__r_.__value_.__r.__words[0];
        }
        if (v50)
        {
          if (*(char *)(v49 + 23) >= 0) {
            uint64_t v52 = (const void *)v49;
          }
          else {
            uint64_t v52 = *(const void **)v49;
          }
          memmove(v51, v52, v50);
        }
        strcpy((char *)v51 + v50, "__reduction_axis__");
        std::to_string(&v131, i + 1);
        if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v53 = &v131;
        }
        else {
          long long v53 = (std::string *)v131.__r_.__value_.__r.__words[0];
        }
        if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v54 = HIBYTE(v131.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v54 = v131.__r_.__value_.__l.__size_;
        }
        long long v55 = std::string::append(&v122, (const std::string::value_type *)v53, v54);
        std::string::size_type v56 = v55->__r_.__value_.__r.__words[0];
        v127.__r_.__value_.__r.__words[0] = v55->__r_.__value_.__l.__size_;
        *(std::string::size_type *)((char *)v127.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v55->__r_.__value_.__r.__words[1] + 7);
        char v57 = HIBYTE(v55->__r_.__value_.__r.__words[2]);
        v55->__r_.__value_.__l.__size_ = 0;
        v55->__r_.__value_.__r.__words[2] = 0;
        v55->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v124.__r_.__value_.__l.__data_);
        }
        v124.__r_.__value_.__r.__words[0] = v56;
        v124.__r_.__value_.__l.__size_ = v127.__r_.__value_.__r.__words[0];
        *(std::string::size_type *)((char *)&v124.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v127.__r_.__value_.__r.__words + 7);
        *((unsigned char *)&v124.__r_.__value_.__s + 23) = v57;
        if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v131.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v122.__r_.__value_.__l.__data_);
        }
        if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v58 = HIBYTE(v97.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v58 = v97.__r_.__value_.__l.__size_;
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&v122, v58 + 18);
        if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v59 = &v122;
        }
        else {
          uint64_t v59 = (std::string *)v122.__r_.__value_.__r.__words[0];
        }
        if (v58)
        {
          if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            long long v60 = &v97;
          }
          else {
            long long v60 = (std::string *)v97.__r_.__value_.__r.__words[0];
          }
          memmove(v59, v60, v58);
        }
        strcpy((char *)v59 + v58, "__reduction_axis__");
        std::to_string(&v131, i);
        if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v61 = &v131;
        }
        else {
          long long v61 = (std::string *)v131.__r_.__value_.__r.__words[0];
        }
        if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v62 = HIBYTE(v131.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v62 = v131.__r_.__value_.__l.__size_;
        }
        std::string v63 = std::string::append(&v122, (const std::string::value_type *)v61, v62);
        std::string::size_type v64 = v63->__r_.__value_.__r.__words[0];
        v127.__r_.__value_.__r.__words[0] = v63->__r_.__value_.__l.__size_;
        *(std::string::size_type *)((char *)v127.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v63->__r_.__value_.__r.__words[1] + 7);
        char v65 = HIBYTE(v63->__r_.__value_.__r.__words[2]);
        v63->__r_.__value_.__l.__size_ = 0;
        v63->__r_.__value_.__r.__words[2] = 0;
        v63->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v123.__r_.__value_.__l.__data_);
        }
        v123.__r_.__value_.__r.__words[0] = v64;
        v123.__r_.__value_.__l.__size_ = v127.__r_.__value_.__r.__words[0];
        *(std::string::size_type *)((char *)&v123.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v127.__r_.__value_.__r.__words + 7);
        *((unsigned char *)&v123.__r_.__value_.__s + 23) = v65;
        if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v131.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v122.__r_.__value_.__l.__data_);
        }
      }
      std::string::basic_string[abi:ne180100]<0>(&v122, "reduce");
      if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v131, v125.__r_.__value_.__l.__data_, v125.__r_.__value_.__l.__size_);
      }
      else {
        std::string v131 = v125;
      }
      int v118 = 0;
      int v117 = 0;
      uint64_t v119 = 0;
      v127.__r_.__value_.__r.__words[0] = (std::string::size_type)&v117;
      v127.__r_.__value_.__s.__data_[8] = 0;
      int v117 = (long long *)operator new(0x18uLL);
      int v118 = v117;
      uint64_t v119 = (char *)v117 + 24;
      int v118 = (long long *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v119, (long long *)&v131, &v132, (std::string *)v117);
      if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v127, v124.__r_.__value_.__l.__data_, v124.__r_.__value_.__l.__size_);
      }
      else {
        std::string v127 = v124;
      }
      memset(&v129, 0, sizeof(v129));
      v105.__r_.__value_.__r.__words[0] = (std::string::size_type)&v129;
      v105.__r_.__value_.__s.__data_[8] = 0;
      v129.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
      v129.__r_.__value_.__l.__size_ = v129.__r_.__value_.__r.__words[0];
      v129.__r_.__value_.__r.__words[2] = v129.__r_.__value_.__r.__words[0] + 24;
      v129.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v129.__r_.__value_.__r.__words[2], (long long *)&v127, (long long *)&v128, (std::string *)v129.__r_.__value_.__l.__data_);
      Espresso::sequential_builder::add<Espresso::reduce_params_t>(&v120, v86, (uint64_t)&v122, (uint64_t)&v123, (uint64_t)&v108, v117, v118, (long long **)&v129);
      if (v121) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v121);
      }
      v105.__r_.__value_.__r.__words[0] = (std::string::size_type)&v129;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v105);
      if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v127.__r_.__value_.__l.__data_);
      }
      v127.__r_.__value_.__r.__words[0] = (std::string::size_type)&v117;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v127);
      if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v131.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v122.__r_.__value_.__l.__data_);
      }
      std::string::operator=(&v125, &v124);
      if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v123.__r_.__value_.__l.__data_);
      }
    }
  }
  if (v84) {
    goto LABEL_253;
  }
  long long v114 = 0u;
  memset(v115, 0, sizeof(v115));
  long long v112 = 0u;
  long long v113 = 0u;
  long long v110 = 0u;
  long long v111 = 0u;
  long long v108 = 0u;
  long long v109 = 0u;
  int v116 = 1;
  if ((int)v13 >= 32) {
    LODWORD(v79) = 32;
  }
  else {
    LODWORD(v79) = v13;
  }
  DWORD1(v108) = v79;
  if ((int)v13 >= 1)
  {
    if ((int)v79 <= 1) {
      uint64_t v79 = 1;
    }
    else {
      uint64_t v79 = v79;
    }
    unsigned int v80 = (_DWORD *)&v108 + 2;
    int v81 = (uint64_t *)(v92 + 8);
    do
    {
      uint64_t v82 = *v81++;
      *v80++ = v82;
      --v79;
    }
    while (v79);
  }
LABEL_242:
  if (HIBYTE(v93)) {
    v115[24] = 1;
  }
  std::string::basic_string[abi:ne180100]<0>(&v123, "squeeze");
  if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v127, v124.__r_.__value_.__l.__data_, v124.__r_.__value_.__l.__size_);
  }
  else {
    std::string v127 = v124;
  }
  memset(&v122, 0, sizeof(v122));
  v105.__r_.__value_.__r.__words[0] = (std::string::size_type)&v122;
  v105.__r_.__value_.__s.__data_[8] = 0;
  v122.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
  v122.__r_.__value_.__l.__size_ = v122.__r_.__value_.__r.__words[0];
  v122.__r_.__value_.__r.__words[2] = v122.__r_.__value_.__r.__words[0] + 24;
  v122.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v122.__r_.__value_.__r.__words[2], (long long *)&v127, (long long *)&v128, (std::string *)v122.__r_.__value_.__l.__data_);
  memset(&v105, 0, sizeof(v105));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v105, (long long *)__str.__r_.__value_.__l.__data_, (long long *)__str.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(__str.__r_.__value_.__l.__size_ - __str.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add<Espresso::squeeze_params_t>(&v106, v86, (uint64_t)&v123, (uint64_t)&v97, (uint64_t)&v108, (long long *)v122.__r_.__value_.__l.__data_, (long long *)v122.__r_.__value_.__l.__size_, (long long **)&v105);
  if (v107) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v107);
  }
  uint64_t v126 = &v105;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v126);
  uint64_t v126 = &v122;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v126);
  if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v127.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v123.__r_.__value_.__l.__data_);
  }
LABEL_253:
  if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v124.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v125.__r_.__value_.__l.__data_);
  }
  if (v15) {
    operator delete(v15);
  }
  if (__p[0]) {
    operator delete(__p[0]);
  }
  CoreML::Specification::ReduceL2LayerParams::~ReduceL2LayerParams((CoreML::Specification::ReduceL2LayerParams *)&v89);
  *(void *)&long long v108 = &__str;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v108);
  *(void *)&long long v108 = &v96;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v108);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v97.__r_.__value_.__l.__data_);
  }
  LayerTranslator::defaultUnknownNdShape(v83, (uint64_t *)&v101);
  *(void *)&long long v108 = &v98;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v108);
  *(void *)&long long v108 = &v101;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v108);
  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v104.__r_.__value_.__l.__data_);
  }
}

void sub_19EAAD390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (SLOBYTE(STACK[0x267]) < 0) {
    operator delete((void *)STACK[0x250]);
  }
  if (SLOBYTE(STACK[0x287]) < 0) {
    operator delete((void *)STACK[0x270]);
  }
  if (*(char *)(v64 - 217) < 0) {
    operator delete(*(void **)(v64 - 240));
  }
  if (v63) {
    operator delete(v63);
  }
  if (a24) {
    operator delete(a24);
  }
  CoreML::Specification::ReduceL2LayerParams::~ReduceL2LayerParams((CoreML::Specification::ReduceL2LayerParams *)&a27);
  a63 = (uint64_t)&a33;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a63);
  a63 = (uint64_t)&a36;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a63);
  if (a44 < 0) {
    operator delete(a39);
  }
  a63 = (uint64_t)&a46;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a63);
  a63 = (uint64_t)&a49;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a63);
  if (a57 < 0) {
    operator delete(a52);
  }
  _Unwind_Resume(a1);
}

void LayerTranslator::addReduceMax(LayerTranslator *this, uint64_t **a2)
{
  *(void *)&long long v132 = *MEMORY[0x1E4F143B8];
  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  long long v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v104, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    long long v5 = *(_OWORD *)v4;
    v104.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v5;
  }
  unint64_t v101 = 0;
  unint64_t v102 = 0;
  uint64_t v103 = 0;
  uint64_t v98 = 0;
  uint64_t v99 = 0;
  uint64_t v100 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v101, (uint64_t *)&v98, *((void *)this + 1));
  uint64_t v86 = *(void **)this;
  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v97, v104.__r_.__value_.__l.__data_, v104.__r_.__value_.__l.__size_);
  }
  else {
    std::string v97 = v104;
  }
  memset(&v96, 0, sizeof(v96));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v96, v98, v99, 0xAAAAAAAAAAAAAAABLL * (((char *)v99 - (char *)v98) >> 3));
  memset(&__str, 0, sizeof(__str));
  uint64_t v6 = std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&__str, v101, v102, 0xAAAAAAAAAAAAAAABLL * (((char *)v102 - (char *)v101) >> 3));
  if (*((_DWORD *)a2 + 35) == 1260)
  {
    uint64_t v7 = a2[16];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v6);
    uint64_t v7 = &CoreML::Specification::_ReduceMaxLayerParams_default_instance_;
  }
  uint64_t v91 = 0;
  uint64_t v92 = 0;
  int v89 = &unk_1EF0D43D0;
  unint64_t v90 = 0;
  int v8 = *((_DWORD *)v7 + 4);
  if (v8)
  {
    google::protobuf::RepeatedField<double>::Reserve((unsigned int *)&v91, v8);
    memcpy((void *)(v92 + 8), (const void *)(v7[3] + 8), 8 * *((int *)v7 + 4));
    LODWORD(v91) = *((_DWORD *)v7 + 4);
  }
  int v94 = 0;
  uint64_t v9 = v7[1];
  if (v9) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&v90, v9 & 0xFFFFFFFFFFFFFFFELL);
  }
  __int16 v93 = *((_WORD *)v7 + 18);
  uint64_t v10 = (uint64_t **)*((void *)this + 1);
  v125.__r_.__value_.__r.__words[0] = (std::string::size_type)v98;
  uint64_t v11 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v10, v98, (long long **)&v125);
  long long v87 = *(_OWORD *)(v11 + 72);
  uint64_t v12 = (const void *)*((void *)v11 + 12);
  memset(__p, 0, sizeof(__p));
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(__p, v12, *((void *)v11 + 13), (uint64_t)(*((void *)v11 + 13) - (void)v12) >> 2);
  std::string v83 = (char *)this;
  int v84 = v93;
  uint64_t v13 = v91;
  int v85 = HIBYTE(v93);
  BOOL v14 = HIBYTE(v93) != 0;
  if ((int)v91 >= 1)
  {
    int v15 = 0;
    long long v16 = 0;
    unint64_t v17 = 0;
    uint64_t v18 = 0;
    while (1)
    {
      int v19 = *(_DWORD *)(v92 + 8 * v18 + 8);
      if (v19 < 0)
      {
        if ((unint64_t)v16 >= v17)
        {
          uint64_t v27 = v16 - v15;
          unint64_t v28 = v27 + 1;
          if ((unint64_t)(v27 + 1) >> 62) {
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
          }
          if ((uint64_t)(v17 - (void)v15) >> 1 > v28) {
            unint64_t v28 = (uint64_t)(v17 - (void)v15) >> 1;
          }
          if (v17 - (unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v24 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v24 = v28;
          }
          if (v24) {
            unint64_t v24 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v24);
          }
          else {
            uint64_t v25 = 0;
          }
          uint64_t v29 = (_DWORD *)(v24 + 4 * v27);
          *uint64_t v29 = v19;
          uint64_t v26 = v29 + 1;
          while (v16 != v15)
          {
            int v31 = *--v16;
            *--uint64_t v29 = v31;
          }
          goto LABEL_49;
        }
      }
      else
      {
        int v20 = DWORD1(v87);
        if (v87 == 1) {
          int v21 = 4;
        }
        else {
          int v21 = 5;
        }
        if (DWORD1(v87) == -1) {
          int v20 = v21;
        }
        v19 -= v20;
        if ((unint64_t)v16 >= v17)
        {
          uint64_t v22 = v16 - v15;
          unint64_t v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 62) {
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
          }
          if ((uint64_t)(v17 - (void)v15) >> 1 > v23) {
            unint64_t v23 = (uint64_t)(v17 - (void)v15) >> 1;
          }
          if (v17 - (unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v24 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v24 = v23;
          }
          if (v24) {
            unint64_t v24 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v24);
          }
          else {
            uint64_t v25 = 0;
          }
          uint64_t v29 = (_DWORD *)(v24 + 4 * v22);
          *uint64_t v29 = v19;
          uint64_t v26 = v29 + 1;
          while (v16 != v15)
          {
            int v30 = *--v16;
            *--uint64_t v29 = v30;
          }
LABEL_49:
          unint64_t v17 = v24 + 4 * v25;
          if (v15) {
            operator delete(v15);
          }
          int v15 = v29;
          goto LABEL_52;
        }
      }
      _DWORD *v16 = v19;
      uint64_t v26 = v16 + 1;
LABEL_52:
      ++v18;
      long long v16 = v26;
      if (v18 == v13) {
        goto LABEL_55;
      }
    }
  }
  int v15 = 0;
  uint64_t v26 = 0;
LABEL_55:
  std::__sort<std::__less<int,int> &,int *>();
  unint64_t v32 = v26 - v15;
  int v33 = DWORD1(v87);
  if (v87 == 1) {
    int v34 = 4;
  }
  else {
    int v34 = 5;
  }
  if (DWORD1(v87) == -1) {
    int v33 = v34;
  }
  if (!v85 && v33 == v32)
  {
    if (v26 == v15)
    {
      BOOL v14 = 1;
    }
    else
    {
      if (v32 <= 1) {
        uint64_t v35 = 1;
      }
      else {
        uint64_t v35 = v26 - v15;
      }
      uint64_t v36 = v35 - 1;
      int v37 = -(int)v32;
      uint64_t v38 = v15;
      do
      {
        int v40 = *v38++;
        int v39 = v40;
        BOOL v42 = v36-- != 0;
        BOOL v14 = v37 == v39;
        if (v37 != v39) {
          break;
        }
        ++v37;
      }
      while (v42);
    }
  }
  if (v32 == 3)
  {
    if (*v15 == -3 && v15[1] == -2)
    {
      BOOL v44 = 0;
      BOOL v43 = v15[2] == -1;
      goto LABEL_82;
    }
  }
  else if (v32 == 2 && *v15 == -2)
  {
    BOOL v43 = 0;
    BOOL v44 = v15[1] == -1;
    goto LABEL_82;
  }
  BOOL v44 = 0;
  BOOL v43 = 0;
LABEL_82:
  if (*(char *)(v96.__r_.__value_.__r.__words[0] + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v125, *(const std::string::value_type **)v96.__r_.__value_.__l.__data_, *(void *)(v96.__r_.__value_.__r.__words[0] + 8));
  }
  else
  {
    long long v45 = *(_OWORD *)v96.__r_.__value_.__l.__data_;
    v125.__r_.__value_.__r.__words[2] = *(void *)(v96.__r_.__value_.__r.__words[0] + 16);
    *(_OWORD *)&v125.__r_.__value_.__l.__data_ = v45;
  }
  if (*(char *)(__str.__r_.__value_.__r.__words[0] + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v124, *(const std::string::value_type **)__str.__r_.__value_.__l.__data_, *(void *)(__str.__r_.__value_.__r.__words[0] + 8));
  }
  else
  {
    long long v46 = *(_OWORD *)__str.__r_.__value_.__l.__data_;
    v124.__r_.__value_.__r.__words[2] = *(void *)(__str.__r_.__value_.__r.__words[0] + 16);
    *(_OWORD *)&v124.__r_.__value_.__l.__data_ = v46;
  }
  if (v14 || v44 || v43)
  {
    *((void *)&v108 + 1) = 0x100000007;
    long long v109 = 0uLL;
    *(void *)&long long v110 = 0xFFFFFFFF00000000;
    *(void *)&long long v108 = 0x358637BD00000009;
    BYTE8(v110) = 0;
    if (v14 || v44)
    {
      if (v14) {
        int v47 = 31;
      }
      else {
        int v47 = 3;
      }
      DWORD2(v108) = v47;
    }
    memset(&v123, 0, sizeof(v123));
    std::string::operator=(&v124, (const std::string *)__str.__r_.__value_.__l.__data_);
    if (v84)
    {
      std::string::operator=(&v123, &v97);
    }
    else
    {
      if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v124.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v124.__r_.__value_.__l.__size_;
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v122, size + 11);
      if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v74 = &v122;
      }
      else {
        uint64_t v74 = (std::string *)v122.__r_.__value_.__r.__words[0];
      }
      if (size)
      {
        if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v75 = &v124;
        }
        else {
          int v75 = (std::string *)v124.__r_.__value_.__r.__words[0];
        }
        memmove(v74, v75, size);
      }
      strcpy((char *)v74 + size, "_presqueeze");
      if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v124.__r_.__value_.__l.__data_);
      }
      std::string v124 = v122;
      if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v76 = HIBYTE(v97.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v76 = v97.__r_.__value_.__l.__size_;
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v122, v76 + 11);
      if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v77 = &v122;
      }
      else {
        uint64_t v77 = (std::string *)v122.__r_.__value_.__r.__words[0];
      }
      if (v76)
      {
        if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v78 = &v97;
        }
        else {
          uint64_t v78 = (std::string *)v97.__r_.__value_.__r.__words[0];
        }
        memmove(v77, v78, v76);
      }
      strcpy((char *)v77 + v76, "_presqueeze");
      if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v123.__r_.__value_.__l.__data_);
      }
      std::string v123 = v122;
    }
    std::string::basic_string[abi:ne180100]<0>(&v122, "reduce");
    memset(&v131, 0, sizeof(v131));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v131, (long long *)v96.__r_.__value_.__l.__data_, (long long *)v96.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v96.__r_.__value_.__l.__size_ - v96.__r_.__value_.__r.__words[0]) >> 3));
    if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v129, v124.__r_.__value_.__l.__data_, v124.__r_.__value_.__l.__size_);
    }
    else {
      std::string v129 = v124;
    }
    int v118 = 0;
    int v117 = 0;
    uint64_t v119 = 0;
    v127.__r_.__value_.__r.__words[0] = (std::string::size_type)&v117;
    v127.__r_.__value_.__s.__data_[8] = 0;
    int v117 = (long long *)operator new(0x18uLL);
    int v118 = v117;
    uint64_t v119 = (char *)v117 + 24;
    int v118 = (long long *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v119, (long long *)&v129, (long long *)&v130, (std::string *)v117);
    Espresso::sequential_builder::add<Espresso::reduce_params_t>(&v120, v86, (uint64_t)&v122, (uint64_t)&v123, (uint64_t)&v108, (long long *)v131.__r_.__value_.__l.__data_, (long long *)v131.__r_.__value_.__l.__size_, &v117);
    if (v121) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v121);
    }
    v127.__r_.__value_.__r.__words[0] = (std::string::size_type)&v117;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v127);
    if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v129.__r_.__value_.__l.__data_);
    }
    v129.__r_.__value_.__r.__words[0] = (std::string::size_type)&v131;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v129);
    if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v122.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v123.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    if ((int)v13 < 1)
    {
      if (v84) {
        goto LABEL_253;
      }
      long long v114 = 0u;
      memset(v115, 0, sizeof(v115));
      long long v112 = 0u;
      long long v113 = 0u;
      long long v110 = 0u;
      long long v111 = 0u;
      long long v108 = 0u;
      long long v109 = 0u;
      int v116 = 1;
      DWORD1(v108) = v13;
      goto LABEL_242;
    }
    for (unint64_t i = 0; i != v13; ++i)
    {
      *((void *)&v108 + 1) = 0x100000007;
      long long v109 = 0uLL;
      LODWORD(v110) = 0;
      *(void *)&long long v108 = 0x358637BD00000009;
      BYTE8(v110) = 1;
      DWORD1(v110) = *(void *)(v92 + 8 * i + 8);
      memset(&v123, 0, sizeof(v123));
      if (i >= (v13 - 1))
      {
        if (v84)
        {
          std::string::operator=(&v124, (const std::string *)__str.__r_.__value_.__l.__data_);
          std::string::operator=(&v123, &v97);
        }
        else
        {
          std::string::size_type v66 = __str.__r_.__value_.__r.__words[0];
          if (*(char *)(__str.__r_.__value_.__r.__words[0] + 23) >= 0) {
            size_t v67 = *(unsigned __int8 *)(__str.__r_.__value_.__r.__words[0] + 23);
          }
          else {
            size_t v67 = *(void *)(__str.__r_.__value_.__r.__words[0] + 8);
          }
          std::string::basic_string[abi:ne180100]((uint64_t)&v122, v67 + 11);
          if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unint64_t v68 = &v122;
          }
          else {
            unint64_t v68 = (std::string *)v122.__r_.__value_.__r.__words[0];
          }
          if (v67)
          {
            if (*(char *)(v66 + 23) >= 0) {
              uint64_t v69 = (const void *)v66;
            }
            else {
              uint64_t v69 = *(const void **)v66;
            }
            memmove(v68, v69, v67);
          }
          strcpy((char *)v68 + v67, "_presqueeze");
          if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v124.__r_.__value_.__l.__data_);
          }
          std::string v124 = v122;
          if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v70 = HIBYTE(v97.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v70 = v97.__r_.__value_.__l.__size_;
          }
          std::string::basic_string[abi:ne180100]((uint64_t)&v122, v70 + 11);
          if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v71 = &v122;
          }
          else {
            uint64_t v71 = (std::string *)v122.__r_.__value_.__r.__words[0];
          }
          if (v70)
          {
            if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v72 = &v97;
            }
            else {
              uint64_t v72 = (std::string *)v97.__r_.__value_.__r.__words[0];
            }
            memmove(v71, v72, v70);
          }
          strcpy((char *)v71 + v70, "_presqueeze");
          if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v123.__r_.__value_.__l.__data_);
          }
          std::string v123 = v122;
        }
      }
      else
      {
        std::string::size_type v49 = v96.__r_.__value_.__r.__words[0];
        if (*(char *)(v96.__r_.__value_.__r.__words[0] + 23) >= 0) {
          size_t v50 = *(unsigned __int8 *)(v96.__r_.__value_.__r.__words[0] + 23);
        }
        else {
          size_t v50 = *(void *)(v96.__r_.__value_.__r.__words[0] + 8);
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&v122, v50 + 18);
        if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v51 = &v122;
        }
        else {
          long long v51 = (std::string *)v122.__r_.__value_.__r.__words[0];
        }
        if (v50)
        {
          if (*(char *)(v49 + 23) >= 0) {
            uint64_t v52 = (const void *)v49;
          }
          else {
            uint64_t v52 = *(const void **)v49;
          }
          memmove(v51, v52, v50);
        }
        strcpy((char *)v51 + v50, "__reduction_axis__");
        std::to_string(&v131, i + 1);
        if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v53 = &v131;
        }
        else {
          long long v53 = (std::string *)v131.__r_.__value_.__r.__words[0];
        }
        if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v54 = HIBYTE(v131.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v54 = v131.__r_.__value_.__l.__size_;
        }
        long long v55 = std::string::append(&v122, (const std::string::value_type *)v53, v54);
        std::string::size_type v56 = v55->__r_.__value_.__r.__words[0];
        v127.__r_.__value_.__r.__words[0] = v55->__r_.__value_.__l.__size_;
        *(std::string::size_type *)((char *)v127.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v55->__r_.__value_.__r.__words[1] + 7);
        char v57 = HIBYTE(v55->__r_.__value_.__r.__words[2]);
        v55->__r_.__value_.__l.__size_ = 0;
        v55->__r_.__value_.__r.__words[2] = 0;
        v55->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v124.__r_.__value_.__l.__data_);
        }
        v124.__r_.__value_.__r.__words[0] = v56;
        v124.__r_.__value_.__l.__size_ = v127.__r_.__value_.__r.__words[0];
        *(std::string::size_type *)((char *)&v124.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v127.__r_.__value_.__r.__words + 7);
        *((unsigned char *)&v124.__r_.__value_.__s + 23) = v57;
        if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v131.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v122.__r_.__value_.__l.__data_);
        }
        if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v58 = HIBYTE(v97.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v58 = v97.__r_.__value_.__l.__size_;
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&v122, v58 + 18);
        if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v59 = &v122;
        }
        else {
          uint64_t v59 = (std::string *)v122.__r_.__value_.__r.__words[0];
        }
        if (v58)
        {
          if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            long long v60 = &v97;
          }
          else {
            long long v60 = (std::string *)v97.__r_.__value_.__r.__words[0];
          }
          memmove(v59, v60, v58);
        }
        strcpy((char *)v59 + v58, "__reduction_axis__");
        std::to_string(&v131, i);
        if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v61 = &v131;
        }
        else {
          long long v61 = (std::string *)v131.__r_.__value_.__r.__words[0];
        }
        if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v62 = HIBYTE(v131.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v62 = v131.__r_.__value_.__l.__size_;
        }
        std::string v63 = std::string::append(&v122, (const std::string::value_type *)v61, v62);
        std::string::size_type v64 = v63->__r_.__value_.__r.__words[0];
        v127.__r_.__value_.__r.__words[0] = v63->__r_.__value_.__l.__size_;
        *(std::string::size_type *)((char *)v127.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v63->__r_.__value_.__r.__words[1] + 7);
        char v65 = HIBYTE(v63->__r_.__value_.__r.__words[2]);
        v63->__r_.__value_.__l.__size_ = 0;
        v63->__r_.__value_.__r.__words[2] = 0;
        v63->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v123.__r_.__value_.__l.__data_);
        }
        v123.__r_.__value_.__r.__words[0] = v64;
        v123.__r_.__value_.__l.__size_ = v127.__r_.__value_.__r.__words[0];
        *(std::string::size_type *)((char *)&v123.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v127.__r_.__value_.__r.__words + 7);
        *((unsigned char *)&v123.__r_.__value_.__s + 23) = v65;
        if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v131.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v122.__r_.__value_.__l.__data_);
        }
      }
      std::string::basic_string[abi:ne180100]<0>(&v122, "reduce");
      if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v131, v125.__r_.__value_.__l.__data_, v125.__r_.__value_.__l.__size_);
      }
      else {
        std::string v131 = v125;
      }
      int v118 = 0;
      int v117 = 0;
      uint64_t v119 = 0;
      v127.__r_.__value_.__r.__words[0] = (std::string::size_type)&v117;
      v127.__r_.__value_.__s.__data_[8] = 0;
      int v117 = (long long *)operator new(0x18uLL);
      int v118 = v117;
      uint64_t v119 = (char *)v117 + 24;
      int v118 = (long long *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v119, (long long *)&v131, &v132, (std::string *)v117);
      if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v127, v124.__r_.__value_.__l.__data_, v124.__r_.__value_.__l.__size_);
      }
      else {
        std::string v127 = v124;
      }
      memset(&v129, 0, sizeof(v129));
      v105.__r_.__value_.__r.__words[0] = (std::string::size_type)&v129;
      v105.__r_.__value_.__s.__data_[8] = 0;
      v129.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
      v129.__r_.__value_.__l.__size_ = v129.__r_.__value_.__r.__words[0];
      v129.__r_.__value_.__r.__words[2] = v129.__r_.__value_.__r.__words[0] + 24;
      v129.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v129.__r_.__value_.__r.__words[2], (long long *)&v127, (long long *)&v128, (std::string *)v129.__r_.__value_.__l.__data_);
      Espresso::sequential_builder::add<Espresso::reduce_params_t>(&v120, v86, (uint64_t)&v122, (uint64_t)&v123, (uint64_t)&v108, v117, v118, (long long **)&v129);
      if (v121) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v121);
      }
      v105.__r_.__value_.__r.__words[0] = (std::string::size_type)&v129;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v105);
      if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v127.__r_.__value_.__l.__data_);
      }
      v127.__r_.__value_.__r.__words[0] = (std::string::size_type)&v117;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v127);
      if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v131.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v122.__r_.__value_.__l.__data_);
      }
      std::string::operator=(&v125, &v124);
      if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v123.__r_.__value_.__l.__data_);
      }
    }
  }
  if (v84) {
    goto LABEL_253;
  }
  long long v114 = 0u;
  memset(v115, 0, sizeof(v115));
  long long v112 = 0u;
  long long v113 = 0u;
  long long v110 = 0u;
  long long v111 = 0u;
  long long v108 = 0u;
  long long v109 = 0u;
  int v116 = 1;
  if ((int)v13 >= 32) {
    LODWORD(v79) = 32;
  }
  else {
    LODWORD(v79) = v13;
  }
  DWORD1(v108) = v79;
  if ((int)v13 >= 1)
  {
    if ((int)v79 <= 1) {
      uint64_t v79 = 1;
    }
    else {
      uint64_t v79 = v79;
    }
    unsigned int v80 = (_DWORD *)&v108 + 2;
    int v81 = (uint64_t *)(v92 + 8);
    do
    {
      uint64_t v82 = *v81++;
      *v80++ = v82;
      --v79;
    }
    while (v79);
  }
LABEL_242:
  if (HIBYTE(v93)) {
    v115[24] = 1;
  }
  std::string::basic_string[abi:ne180100]<0>(&v123, "squeeze");
  if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v127, v124.__r_.__value_.__l.__data_, v124.__r_.__value_.__l.__size_);
  }
  else {
    std::string v127 = v124;
  }
  memset(&v122, 0, sizeof(v122));
  v105.__r_.__value_.__r.__words[0] = (std::string::size_type)&v122;
  v105.__r_.__value_.__s.__data_[8] = 0;
  v122.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
  v122.__r_.__value_.__l.__size_ = v122.__r_.__value_.__r.__words[0];
  v122.__r_.__value_.__r.__words[2] = v122.__r_.__value_.__r.__words[0] + 24;
  v122.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v122.__r_.__value_.__r.__words[2], (long long *)&v127, (long long *)&v128, (std::string *)v122.__r_.__value_.__l.__data_);
  memset(&v105, 0, sizeof(v105));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v105, (long long *)__str.__r_.__value_.__l.__data_, (long long *)__str.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(__str.__r_.__value_.__l.__size_ - __str.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add<Espresso::squeeze_params_t>(&v106, v86, (uint64_t)&v123, (uint64_t)&v97, (uint64_t)&v108, (long long *)v122.__r_.__value_.__l.__data_, (long long *)v122.__r_.__value_.__l.__size_, (long long **)&v105);
  if (v107) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v107);
  }
  uint64_t v126 = &v105;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v126);
  uint64_t v126 = &v122;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v126);
  if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v127.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v123.__r_.__value_.__l.__data_);
  }
LABEL_253:
  if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v124.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v125.__r_.__value_.__l.__data_);
  }
  if (v15) {
    operator delete(v15);
  }
  if (__p[0]) {
    operator delete(__p[0]);
  }
  CoreML::Specification::ReduceMaxLayerParams::~ReduceMaxLayerParams((CoreML::Specification::ReduceMaxLayerParams *)&v89);
  *(void *)&long long v108 = &__str;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v108);
  *(void *)&long long v108 = &v96;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v108);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v97.__r_.__value_.__l.__data_);
  }
  LayerTranslator::defaultUnknownNdShape(v83, (uint64_t *)&v101);
  *(void *)&long long v108 = &v98;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v108);
  *(void *)&long long v108 = &v101;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v108);
  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v104.__r_.__value_.__l.__data_);
  }
}

void sub_19EAAE678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (SLOBYTE(STACK[0x267]) < 0) {
    operator delete((void *)STACK[0x250]);
  }
  if (SLOBYTE(STACK[0x287]) < 0) {
    operator delete((void *)STACK[0x270]);
  }
  if (*(char *)(v64 - 217) < 0) {
    operator delete(*(void **)(v64 - 240));
  }
  if (v63) {
    operator delete(v63);
  }
  if (a24) {
    operator delete(a24);
  }
  CoreML::Specification::ReduceMaxLayerParams::~ReduceMaxLayerParams((CoreML::Specification::ReduceMaxLayerParams *)&a27);
  a63 = (uint64_t)&a33;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a63);
  a63 = (uint64_t)&a36;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a63);
  if (a44 < 0) {
    operator delete(a39);
  }
  a63 = (uint64_t)&a46;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a63);
  a63 = (uint64_t)&a49;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a63);
  if (a57 < 0) {
    operator delete(a52);
  }
  _Unwind_Resume(a1);
}

void LayerTranslator::addReduceMin(LayerTranslator *this, uint64_t **a2)
{
  *(void *)&long long v132 = *MEMORY[0x1E4F143B8];
  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  long long v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v104, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    long long v5 = *(_OWORD *)v4;
    v104.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v5;
  }
  unint64_t v101 = 0;
  unint64_t v102 = 0;
  uint64_t v103 = 0;
  uint64_t v98 = 0;
  uint64_t v99 = 0;
  uint64_t v100 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v101, (uint64_t *)&v98, *((void *)this + 1));
  uint64_t v86 = *(void **)this;
  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v97, v104.__r_.__value_.__l.__data_, v104.__r_.__value_.__l.__size_);
  }
  else {
    std::string v97 = v104;
  }
  memset(&v96, 0, sizeof(v96));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v96, v98, v99, 0xAAAAAAAAAAAAAAABLL * (((char *)v99 - (char *)v98) >> 3));
  memset(&__str, 0, sizeof(__str));
  uint64_t v6 = std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&__str, v101, v102, 0xAAAAAAAAAAAAAAABLL * (((char *)v102 - (char *)v101) >> 3));
  if (*((_DWORD *)a2 + 35) == 1265)
  {
    uint64_t v7 = a2[16];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v6);
    uint64_t v7 = &CoreML::Specification::_ReduceMinLayerParams_default_instance_;
  }
  uint64_t v91 = 0;
  uint64_t v92 = 0;
  int v89 = &unk_1EF0D4468;
  unint64_t v90 = 0;
  int v8 = *((_DWORD *)v7 + 4);
  if (v8)
  {
    google::protobuf::RepeatedField<double>::Reserve((unsigned int *)&v91, v8);
    memcpy((void *)(v92 + 8), (const void *)(v7[3] + 8), 8 * *((int *)v7 + 4));
    LODWORD(v91) = *((_DWORD *)v7 + 4);
  }
  int v94 = 0;
  uint64_t v9 = v7[1];
  if (v9) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&v90, v9 & 0xFFFFFFFFFFFFFFFELL);
  }
  __int16 v93 = *((_WORD *)v7 + 18);
  uint64_t v10 = (uint64_t **)*((void *)this + 1);
  v125.__r_.__value_.__r.__words[0] = (std::string::size_type)v98;
  uint64_t v11 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v10, v98, (long long **)&v125);
  long long v87 = *(_OWORD *)(v11 + 72);
  uint64_t v12 = (const void *)*((void *)v11 + 12);
  memset(__p, 0, sizeof(__p));
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(__p, v12, *((void *)v11 + 13), (uint64_t)(*((void *)v11 + 13) - (void)v12) >> 2);
  std::string v83 = (char *)this;
  int v84 = v93;
  uint64_t v13 = v91;
  int v85 = HIBYTE(v93);
  BOOL v14 = HIBYTE(v93) != 0;
  if ((int)v91 >= 1)
  {
    int v15 = 0;
    long long v16 = 0;
    unint64_t v17 = 0;
    uint64_t v18 = 0;
    while (1)
    {
      int v19 = *(_DWORD *)(v92 + 8 * v18 + 8);
      if (v19 < 0)
      {
        if ((unint64_t)v16 >= v17)
        {
          uint64_t v27 = v16 - v15;
          unint64_t v28 = v27 + 1;
          if ((unint64_t)(v27 + 1) >> 62) {
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
          }
          if ((uint64_t)(v17 - (void)v15) >> 1 > v28) {
            unint64_t v28 = (uint64_t)(v17 - (void)v15) >> 1;
          }
          if (v17 - (unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v24 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v24 = v28;
          }
          if (v24) {
            unint64_t v24 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v24);
          }
          else {
            uint64_t v25 = 0;
          }
          uint64_t v29 = (_DWORD *)(v24 + 4 * v27);
          *uint64_t v29 = v19;
          uint64_t v26 = v29 + 1;
          while (v16 != v15)
          {
            int v31 = *--v16;
            *--uint64_t v29 = v31;
          }
          goto LABEL_49;
        }
      }
      else
      {
        int v20 = DWORD1(v87);
        if (v87 == 1) {
          int v21 = 4;
        }
        else {
          int v21 = 5;
        }
        if (DWORD1(v87) == -1) {
          int v20 = v21;
        }
        v19 -= v20;
        if ((unint64_t)v16 >= v17)
        {
          uint64_t v22 = v16 - v15;
          unint64_t v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 62) {
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
          }
          if ((uint64_t)(v17 - (void)v15) >> 1 > v23) {
            unint64_t v23 = (uint64_t)(v17 - (void)v15) >> 1;
          }
          if (v17 - (unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v24 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v24 = v23;
          }
          if (v24) {
            unint64_t v24 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v24);
          }
          else {
            uint64_t v25 = 0;
          }
          uint64_t v29 = (_DWORD *)(v24 + 4 * v22);
          *uint64_t v29 = v19;
          uint64_t v26 = v29 + 1;
          while (v16 != v15)
          {
            int v30 = *--v16;
            *--uint64_t v29 = v30;
          }
LABEL_49:
          unint64_t v17 = v24 + 4 * v25;
          if (v15) {
            operator delete(v15);
          }
          int v15 = v29;
          goto LABEL_52;
        }
      }
      _DWORD *v16 = v19;
      uint64_t v26 = v16 + 1;
LABEL_52:
      ++v18;
      long long v16 = v26;
      if (v18 == v13) {
        goto LABEL_55;
      }
    }
  }
  int v15 = 0;
  uint64_t v26 = 0;
LABEL_55:
  std::__sort<std::__less<int,int> &,int *>();
  unint64_t v32 = v26 - v15;
  int v33 = DWORD1(v87);
  if (v87 == 1) {
    int v34 = 4;
  }
  else {
    int v34 = 5;
  }
  if (DWORD1(v87) == -1) {
    int v33 = v34;
  }
  if (!v85 && v33 == v32)
  {
    if (v26 == v15)
    {
      BOOL v14 = 1;
    }
    else
    {
      if (v32 <= 1) {
        uint64_t v35 = 1;
      }
      else {
        uint64_t v35 = v26 - v15;
      }
      uint64_t v36 = v35 - 1;
      int v37 = -(int)v32;
      uint64_t v38 = v15;
      do
      {
        int v40 = *v38++;
        int v39 = v40;
        BOOL v42 = v36-- != 0;
        BOOL v14 = v37 == v39;
        if (v37 != v39) {
          break;
        }
        ++v37;
      }
      while (v42);
    }
  }
  if (v32 == 3)
  {
    if (*v15 == -3 && v15[1] == -2)
    {
      BOOL v44 = 0;
      BOOL v43 = v15[2] == -1;
      goto LABEL_82;
    }
  }
  else if (v32 == 2 && *v15 == -2)
  {
    BOOL v43 = 0;
    BOOL v44 = v15[1] == -1;
    goto LABEL_82;
  }
  BOOL v44 = 0;
  BOOL v43 = 0;
LABEL_82:
  if (*(char *)(v96.__r_.__value_.__r.__words[0] + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v125, *(const std::string::value_type **)v96.__r_.__value_.__l.__data_, *(void *)(v96.__r_.__value_.__r.__words[0] + 8));
  }
  else
  {
    long long v45 = *(_OWORD *)v96.__r_.__value_.__l.__data_;
    v125.__r_.__value_.__r.__words[2] = *(void *)(v96.__r_.__value_.__r.__words[0] + 16);
    *(_OWORD *)&v125.__r_.__value_.__l.__data_ = v45;
  }
  if (*(char *)(__str.__r_.__value_.__r.__words[0] + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v124, *(const std::string::value_type **)__str.__r_.__value_.__l.__data_, *(void *)(__str.__r_.__value_.__r.__words[0] + 8));
  }
  else
  {
    long long v46 = *(_OWORD *)__str.__r_.__value_.__l.__data_;
    v124.__r_.__value_.__r.__words[2] = *(void *)(__str.__r_.__value_.__r.__words[0] + 16);
    *(_OWORD *)&v124.__r_.__value_.__l.__data_ = v46;
  }
  if (v14 || v44 || v43)
  {
    *((void *)&v108 + 1) = 0x100000007;
    long long v109 = 0uLL;
    *(void *)&long long v110 = 0xFFFFFFFF00000000;
    *(void *)&long long v108 = 0x358637BD0000000ALL;
    BYTE8(v110) = 0;
    if (v14 || v44)
    {
      if (v14) {
        int v47 = 31;
      }
      else {
        int v47 = 3;
      }
      DWORD2(v108) = v47;
    }
    memset(&v123, 0, sizeof(v123));
    std::string::operator=(&v124, (const std::string *)__str.__r_.__value_.__l.__data_);
    if (v84)
    {
      std::string::operator=(&v123, &v97);
    }
    else
    {
      if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v124.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v124.__r_.__value_.__l.__size_;
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v122, size + 11);
      if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v74 = &v122;
      }
      else {
        uint64_t v74 = (std::string *)v122.__r_.__value_.__r.__words[0];
      }
      if (size)
      {
        if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v75 = &v124;
        }
        else {
          int v75 = (std::string *)v124.__r_.__value_.__r.__words[0];
        }
        memmove(v74, v75, size);
      }
      strcpy((char *)v74 + size, "_presqueeze");
      if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v124.__r_.__value_.__l.__data_);
      }
      std::string v124 = v122;
      if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v76 = HIBYTE(v97.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v76 = v97.__r_.__value_.__l.__size_;
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v122, v76 + 11);
      if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v77 = &v122;
      }
      else {
        uint64_t v77 = (std::string *)v122.__r_.__value_.__r.__words[0];
      }
      if (v76)
      {
        if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v78 = &v97;
        }
        else {
          uint64_t v78 = (std::string *)v97.__r_.__value_.__r.__words[0];
        }
        memmove(v77, v78, v76);
      }
      strcpy((char *)v77 + v76, "_presqueeze");
      if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v123.__r_.__value_.__l.__data_);
      }
      std::string v123 = v122;
    }
    std::string::basic_string[abi:ne180100]<0>(&v122, "reduce");
    memset(&v131, 0, sizeof(v131));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v131, (long long *)v96.__r_.__value_.__l.__data_, (long long *)v96.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v96.__r_.__value_.__l.__size_ - v96.__r_.__value_.__r.__words[0]) >> 3));
    if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v129, v124.__r_.__value_.__l.__data_, v124.__r_.__value_.__l.__size_);
    }
    else {
      std::string v129 = v124;
    }
    int v118 = 0;
    int v117 = 0;
    uint64_t v119 = 0;
    v127.__r_.__value_.__r.__words[0] = (std::string::size_type)&v117;
    v127.__r_.__value_.__s.__data_[8] = 0;
    int v117 = (long long *)operator new(0x18uLL);
    int v118 = v117;
    uint64_t v119 = (char *)v117 + 24;
    int v118 = (long long *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v119, (long long *)&v129, (long long *)&v130, (std::string *)v117);
    Espresso::sequential_builder::add<Espresso::reduce_params_t>(&v120, v86, (uint64_t)&v122, (uint64_t)&v123, (uint64_t)&v108, (long long *)v131.__r_.__value_.__l.__data_, (long long *)v131.__r_.__value_.__l.__size_, &v117);
    if (v121) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v121);
    }
    v127.__r_.__value_.__r.__words[0] = (std::string::size_type)&v117;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v127);
    if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v129.__r_.__value_.__l.__data_);
    }
    v129.__r_.__value_.__r.__words[0] = (std::string::size_type)&v131;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v129);
    if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v122.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v123.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    if ((int)v13 < 1)
    {
      if (v84) {
        goto LABEL_253;
      }
      long long v114 = 0u;
      memset(v115, 0, sizeof(v115));
      long long v112 = 0u;
      long long v113 = 0u;
      long long v110 = 0u;
      long long v111 = 0u;
      long long v108 = 0u;
      long long v109 = 0u;
      int v116 = 1;
      DWORD1(v108) = v13;
      goto LABEL_242;
    }
    for (unint64_t i = 0; i != v13; ++i)
    {
      *((void *)&v108 + 1) = 0x100000007;
      long long v109 = 0uLL;
      LODWORD(v110) = 0;
      *(void *)&long long v108 = 0x358637BD0000000ALL;
      BYTE8(v110) = 1;
      DWORD1(v110) = *(void *)(v92 + 8 * i + 8);
      memset(&v123, 0, sizeof(v123));
      if (i >= (v13 - 1))
      {
        if (v84)
        {
          std::string::operator=(&v124, (const std::string *)__str.__r_.__value_.__l.__data_);
          std::string::operator=(&v123, &v97);
        }
        else
        {
          std::string::size_type v66 = __str.__r_.__value_.__r.__words[0];
          if (*(char *)(__str.__r_.__value_.__r.__words[0] + 23) >= 0) {
            size_t v67 = *(unsigned __int8 *)(__str.__r_.__value_.__r.__words[0] + 23);
          }
          else {
            size_t v67 = *(void *)(__str.__r_.__value_.__r.__words[0] + 8);
          }
          std::string::basic_string[abi:ne180100]((uint64_t)&v122, v67 + 11);
          if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unint64_t v68 = &v122;
          }
          else {
            unint64_t v68 = (std::string *)v122.__r_.__value_.__r.__words[0];
          }
          if (v67)
          {
            if (*(char *)(v66 + 23) >= 0) {
              uint64_t v69 = (const void *)v66;
            }
            else {
              uint64_t v69 = *(const void **)v66;
            }
            memmove(v68, v69, v67);
          }
          strcpy((char *)v68 + v67, "_presqueeze");
          if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v124.__r_.__value_.__l.__data_);
          }
          std::string v124 = v122;
          if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v70 = HIBYTE(v97.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v70 = v97.__r_.__value_.__l.__size_;
          }
          std::string::basic_string[abi:ne180100]((uint64_t)&v122, v70 + 11);
          if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v71 = &v122;
          }
          else {
            uint64_t v71 = (std::string *)v122.__r_.__value_.__r.__words[0];
          }
          if (v70)
          {
            if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v72 = &v97;
            }
            else {
              uint64_t v72 = (std::string *)v97.__r_.__value_.__r.__words[0];
            }
            memmove(v71, v72, v70);
          }
          strcpy((char *)v71 + v70, "_presqueeze");
          if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v123.__r_.__value_.__l.__data_);
          }
          std::string v123 = v122;
        }
      }
      else
      {
        std::string::size_type v49 = v96.__r_.__value_.__r.__words[0];
        if (*(char *)(v96.__r_.__value_.__r.__words[0] + 23) >= 0) {
          size_t v50 = *(unsigned __int8 *)(v96.__r_.__value_.__r.__words[0] + 23);
        }
        else {
          size_t v50 = *(void *)(v96.__r_.__value_.__r.__words[0] + 8);
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&v122, v50 + 18);
        if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v51 = &v122;
        }
        else {
          long long v51 = (std::string *)v122.__r_.__value_.__r.__words[0];
        }
        if (v50)
        {
          if (*(char *)(v49 + 23) >= 0) {
            uint64_t v52 = (const void *)v49;
          }
          else {
            uint64_t v52 = *(const void **)v49;
          }
          memmove(v51, v52, v50);
        }
        strcpy((char *)v51 + v50, "__reduction_axis__");
        std::to_string(&v131, i + 1);
        if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v53 = &v131;
        }
        else {
          long long v53 = (std::string *)v131.__r_.__value_.__r.__words[0];
        }
        if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v54 = HIBYTE(v131.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v54 = v131.__r_.__value_.__l.__size_;
        }
        long long v55 = std::string::append(&v122, (const std::string::value_type *)v53, v54);
        std::string::size_type v56 = v55->__r_.__value_.__r.__words[0];
        v127.__r_.__value_.__r.__words[0] = v55->__r_.__value_.__l.__size_;
        *(std::string::size_type *)((char *)v127.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v55->__r_.__value_.__r.__words[1] + 7);
        char v57 = HIBYTE(v55->__r_.__value_.__r.__words[2]);
        v55->__r_.__value_.__l.__size_ = 0;
        v55->__r_.__value_.__r.__words[2] = 0;
        v55->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v124.__r_.__value_.__l.__data_);
        }
        v124.__r_.__value_.__r.__words[0] = v56;
        v124.__r_.__value_.__l.__size_ = v127.__r_.__value_.__r.__words[0];
        *(std::string::size_type *)((char *)&v124.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v127.__r_.__value_.__r.__words + 7);
        *((unsigned char *)&v124.__r_.__value_.__s + 23) = v57;
        if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v131.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v122.__r_.__value_.__l.__data_);
        }
        if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v58 = HIBYTE(v97.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v58 = v97.__r_.__value_.__l.__size_;
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&v122, v58 + 18);
        if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v59 = &v122;
        }
        else {
          uint64_t v59 = (std::string *)v122.__r_.__value_.__r.__words[0];
        }
        if (v58)
        {
          if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            long long v60 = &v97;
          }
          else {
            long long v60 = (std::string *)v97.__r_.__value_.__r.__words[0];
          }
          memmove(v59, v60, v58);
        }
        strcpy((char *)v59 + v58, "__reduction_axis__");
        std::to_string(&v131, i);
        if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v61 = &v131;
        }
        else {
          long long v61 = (std::string *)v131.__r_.__value_.__r.__words[0];
        }
        if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v62 = HIBYTE(v131.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v62 = v131.__r_.__value_.__l.__size_;
        }
        std::string v63 = std::string::append(&v122, (const std::string::value_type *)v61, v62);
        std::string::size_type v64 = v63->__r_.__value_.__r.__words[0];
        v127.__r_.__value_.__r.__words[0] = v63->__r_.__value_.__l.__size_;
        *(std::string::size_type *)((char *)v127.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v63->__r_.__value_.__r.__words[1] + 7);
        char v65 = HIBYTE(v63->__r_.__value_.__r.__words[2]);
        v63->__r_.__value_.__l.__size_ = 0;
        v63->__r_.__value_.__r.__words[2] = 0;
        v63->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v123.__r_.__value_.__l.__data_);
        }
        v123.__r_.__value_.__r.__words[0] = v64;
        v123.__r_.__value_.__l.__size_ = v127.__r_.__value_.__r.__words[0];
        *(std::string::size_type *)((char *)&v123.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v127.__r_.__value_.__r.__words + 7);
        *((unsigned char *)&v123.__r_.__value_.__s + 23) = v65;
        if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v131.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v122.__r_.__value_.__l.__data_);
        }
      }
      std::string::basic_string[abi:ne180100]<0>(&v122, "reduce");
      if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v131, v125.__r_.__value_.__l.__data_, v125.__r_.__value_.__l.__size_);
      }
      else {
        std::string v131 = v125;
      }
      int v118 = 0;
      int v117 = 0;
      uint64_t v119 = 0;
      v127.__r_.__value_.__r.__words[0] = (std::string::size_type)&v117;
      v127.__r_.__value_.__s.__data_[8] = 0;
      int v117 = (long long *)operator new(0x18uLL);
      int v118 = v117;
      uint64_t v119 = (char *)v117 + 24;
      int v118 = (long long *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v119, (long long *)&v131, &v132, (std::string *)v117);
      if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v127, v124.__r_.__value_.__l.__data_, v124.__r_.__value_.__l.__size_);
      }
      else {
        std::string v127 = v124;
      }
      memset(&v129, 0, sizeof(v129));
      v105.__r_.__value_.__r.__words[0] = (std::string::size_type)&v129;
      v105.__r_.__value_.__s.__data_[8] = 0;
      v129.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
      v129.__r_.__value_.__l.__size_ = v129.__r_.__value_.__r.__words[0];
      v129.__r_.__value_.__r.__words[2] = v129.__r_.__value_.__r.__words[0] + 24;
      v129.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v129.__r_.__value_.__r.__words[2], (long long *)&v127, (long long *)&v128, (std::string *)v129.__r_.__value_.__l.__data_);
      Espresso::sequential_builder::add<Espresso::reduce_params_t>(&v120, v86, (uint64_t)&v122, (uint64_t)&v123, (uint64_t)&v108, v117, v118, (long long **)&v129);
      if (v121) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v121);
      }
      v105.__r_.__value_.__r.__words[0] = (std::string::size_type)&v129;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v105);
      if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v127.__r_.__value_.__l.__data_);
      }
      v127.__r_.__value_.__r.__words[0] = (std::string::size_type)&v117;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v127);
      if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v131.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v122.__r_.__value_.__l.__data_);
      }
      std::string::operator=(&v125, &v124);
      if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v123.__r_.__value_.__l.__data_);
      }
    }
  }
  if (v84) {
    goto LABEL_253;
  }
  long long v114 = 0u;
  memset(v115, 0, sizeof(v115));
  long long v112 = 0u;
  long long v113 = 0u;
  long long v110 = 0u;
  long long v111 = 0u;
  long long v108 = 0u;
  long long v109 = 0u;
  int v116 = 1;
  if ((int)v13 >= 32) {
    LODWORD(v79) = 32;
  }
  else {
    LODWORD(v79) = v13;
  }
  DWORD1(v108) = v79;
  if ((int)v13 >= 1)
  {
    if ((int)v79 <= 1) {
      uint64_t v79 = 1;
    }
    else {
      uint64_t v79 = v79;
    }
    unsigned int v80 = (_DWORD *)&v108 + 2;
    int v81 = (uint64_t *)(v92 + 8);
    do
    {
      uint64_t v82 = *v81++;
      *v80++ = v82;
      --v79;
    }
    while (v79);
  }
LABEL_242:
  if (HIBYTE(v93)) {
    v115[24] = 1;
  }
  std::string::basic_string[abi:ne180100]<0>(&v123, "squeeze");
  if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v127, v124.__r_.__value_.__l.__data_, v124.__r_.__value_.__l.__size_);
  }
  else {
    std::string v127 = v124;
  }
  memset(&v122, 0, sizeof(v122));
  v105.__r_.__value_.__r.__words[0] = (std::string::size_type)&v122;
  v105.__r_.__value_.__s.__data_[8] = 0;
  v122.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
  v122.__r_.__value_.__l.__size_ = v122.__r_.__value_.__r.__words[0];
  v122.__r_.__value_.__r.__words[2] = v122.__r_.__value_.__r.__words[0] + 24;
  v122.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v122.__r_.__value_.__r.__words[2], (long long *)&v127, (long long *)&v128, (std::string *)v122.__r_.__value_.__l.__data_);
  memset(&v105, 0, sizeof(v105));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v105, (long long *)__str.__r_.__value_.__l.__data_, (long long *)__str.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(__str.__r_.__value_.__l.__size_ - __str.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add<Espresso::squeeze_params_t>(&v106, v86, (uint64_t)&v123, (uint64_t)&v97, (uint64_t)&v108, (long long *)v122.__r_.__value_.__l.__data_, (long long *)v122.__r_.__value_.__l.__size_, (long long **)&v105);
  if (v107) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v107);
  }
  uint64_t v126 = &v105;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v126);
  uint64_t v126 = &v122;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v126);
  if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v127.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v123.__r_.__value_.__l.__data_);
  }
LABEL_253:
  if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v124.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v125.__r_.__value_.__l.__data_);
  }
  if (v15) {
    operator delete(v15);
  }
  if (__p[0]) {
    operator delete(__p[0]);
  }
  CoreML::Specification::ReduceMinLayerParams::~ReduceMinLayerParams((CoreML::Specification::ReduceMinLayerParams *)&v89);
  *(void *)&long long v108 = &__str;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v108);
  *(void *)&long long v108 = &v96;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v108);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v97.__r_.__value_.__l.__data_);
  }
  LayerTranslator::defaultUnknownNdShape(v83, (uint64_t *)&v101);
  *(void *)&long long v108 = &v98;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v108);
  *(void *)&long long v108 = &v101;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v108);
  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v104.__r_.__value_.__l.__data_);
  }
}

void sub_19EAAF960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (SLOBYTE(STACK[0x267]) < 0) {
    operator delete((void *)STACK[0x250]);
  }
  if (SLOBYTE(STACK[0x287]) < 0) {
    operator delete((void *)STACK[0x270]);
  }
  if (*(char *)(v64 - 217) < 0) {
    operator delete(*(void **)(v64 - 240));
  }
  if (v63) {
    operator delete(v63);
  }
  if (a24) {
    operator delete(a24);
  }
  CoreML::Specification::ReduceMinLayerParams::~ReduceMinLayerParams((CoreML::Specification::ReduceMinLayerParams *)&a27);
  a63 = (uint64_t)&a33;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a63);
  a63 = (uint64_t)&a36;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a63);
  if (a44 < 0) {
    operator delete(a39);
  }
  a63 = (uint64_t)&a46;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a63);
  a63 = (uint64_t)&a49;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a63);
  if (a57 < 0) {
    operator delete(a52);
  }
  _Unwind_Resume(a1);
}

void LayerTranslator::addReduceSum(LayerTranslator *this, uint64_t **a2)
{
  *(void *)&long long v132 = *MEMORY[0x1E4F143B8];
  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  long long v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v104, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    long long v5 = *(_OWORD *)v4;
    v104.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v5;
  }
  unint64_t v101 = 0;
  unint64_t v102 = 0;
  uint64_t v103 = 0;
  uint64_t v98 = 0;
  uint64_t v99 = 0;
  uint64_t v100 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v101, (uint64_t *)&v98, *((void *)this + 1));
  uint64_t v86 = *(void **)this;
  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v97, v104.__r_.__value_.__l.__data_, v104.__r_.__value_.__l.__size_);
  }
  else {
    std::string v97 = v104;
  }
  memset(&v96, 0, sizeof(v96));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v96, v98, v99, 0xAAAAAAAAAAAAAAABLL * (((char *)v99 - (char *)v98) >> 3));
  memset(&__str, 0, sizeof(__str));
  uint64_t v6 = std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&__str, v101, v102, 0xAAAAAAAAAAAAAAABLL * (((char *)v102 - (char *)v101) >> 3));
  if (*((_DWORD *)a2 + 35) == 1270)
  {
    uint64_t v7 = a2[16];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v6);
    uint64_t v7 = &CoreML::Specification::_ReduceSumLayerParams_default_instance_;
  }
  uint64_t v91 = 0;
  uint64_t v92 = 0;
  int v89 = &unk_1EF0D4500;
  unint64_t v90 = 0;
  int v8 = *((_DWORD *)v7 + 4);
  if (v8)
  {
    google::protobuf::RepeatedField<double>::Reserve((unsigned int *)&v91, v8);
    memcpy((void *)(v92 + 8), (const void *)(v7[3] + 8), 8 * *((int *)v7 + 4));
    LODWORD(v91) = *((_DWORD *)v7 + 4);
  }
  int v94 = 0;
  uint64_t v9 = v7[1];
  if (v9) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&v90, v9 & 0xFFFFFFFFFFFFFFFELL);
  }
  __int16 v93 = *((_WORD *)v7 + 18);
  uint64_t v10 = (uint64_t **)*((void *)this + 1);
  v125.__r_.__value_.__r.__words[0] = (std::string::size_type)v98;
  uint64_t v11 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v10, v98, (long long **)&v125);
  long long v87 = *(_OWORD *)(v11 + 72);
  uint64_t v12 = (const void *)*((void *)v11 + 12);
  memset(__p, 0, sizeof(__p));
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(__p, v12, *((void *)v11 + 13), (uint64_t)(*((void *)v11 + 13) - (void)v12) >> 2);
  std::string v83 = (char *)this;
  int v84 = v93;
  uint64_t v13 = v91;
  int v85 = HIBYTE(v93);
  BOOL v14 = HIBYTE(v93) != 0;
  if ((int)v91 >= 1)
  {
    int v15 = 0;
    long long v16 = 0;
    unint64_t v17 = 0;
    uint64_t v18 = 0;
    while (1)
    {
      int v19 = *(_DWORD *)(v92 + 8 * v18 + 8);
      if (v19 < 0)
      {
        if ((unint64_t)v16 >= v17)
        {
          uint64_t v27 = v16 - v15;
          unint64_t v28 = v27 + 1;
          if ((unint64_t)(v27 + 1) >> 62) {
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
          }
          if ((uint64_t)(v17 - (void)v15) >> 1 > v28) {
            unint64_t v28 = (uint64_t)(v17 - (void)v15) >> 1;
          }
          if (v17 - (unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v24 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v24 = v28;
          }
          if (v24) {
            unint64_t v24 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v24);
          }
          else {
            uint64_t v25 = 0;
          }
          uint64_t v29 = (_DWORD *)(v24 + 4 * v27);
          *uint64_t v29 = v19;
          uint64_t v26 = v29 + 1;
          while (v16 != v15)
          {
            int v31 = *--v16;
            *--uint64_t v29 = v31;
          }
          goto LABEL_49;
        }
      }
      else
      {
        int v20 = DWORD1(v87);
        if (v87 == 1) {
          int v21 = 4;
        }
        else {
          int v21 = 5;
        }
        if (DWORD1(v87) == -1) {
          int v20 = v21;
        }
        v19 -= v20;
        if ((unint64_t)v16 >= v17)
        {
          uint64_t v22 = v16 - v15;
          unint64_t v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 62) {
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
          }
          if ((uint64_t)(v17 - (void)v15) >> 1 > v23) {
            unint64_t v23 = (uint64_t)(v17 - (void)v15) >> 1;
          }
          if (v17 - (unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v24 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v24 = v23;
          }
          if (v24) {
            unint64_t v24 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v24);
          }
          else {
            uint64_t v25 = 0;
          }
          uint64_t v29 = (_DWORD *)(v24 + 4 * v22);
          *uint64_t v29 = v19;
          uint64_t v26 = v29 + 1;
          while (v16 != v15)
          {
            int v30 = *--v16;
            *--uint64_t v29 = v30;
          }
LABEL_49:
          unint64_t v17 = v24 + 4 * v25;
          if (v15) {
            operator delete(v15);
          }
          int v15 = v29;
          goto LABEL_52;
        }
      }
      _DWORD *v16 = v19;
      uint64_t v26 = v16 + 1;
LABEL_52:
      ++v18;
      long long v16 = v26;
      if (v18 == v13) {
        goto LABEL_55;
      }
    }
  }
  int v15 = 0;
  uint64_t v26 = 0;
LABEL_55:
  std::__sort<std::__less<int,int> &,int *>();
  unint64_t v32 = v26 - v15;
  int v33 = DWORD1(v87);
  if (v87 == 1) {
    int v34 = 4;
  }
  else {
    int v34 = 5;
  }
  if (DWORD1(v87) == -1) {
    int v33 = v34;
  }
  if (!v85 && v33 == v32)
  {
    if (v26 == v15)
    {
      BOOL v14 = 1;
    }
    else
    {
      if (v32 <= 1) {
        uint64_t v35 = 1;
      }
      else {
        uint64_t v35 = v26 - v15;
      }
      uint64_t v36 = v35 - 1;
      int v37 = -(int)v32;
      uint64_t v38 = v15;
      do
      {
        int v40 = *v38++;
        int v39 = v40;
        BOOL v42 = v36-- != 0;
        BOOL v14 = v37 == v39;
        if (v37 != v39) {
          break;
        }
        ++v37;
      }
      while (v42);
    }
  }
  if (v32 == 3)
  {
    if (*v15 == -3 && v15[1] == -2)
    {
      BOOL v44 = 0;
      BOOL v43 = v15[2] == -1;
      goto LABEL_82;
    }
  }
  else if (v32 == 2 && *v15 == -2)
  {
    BOOL v43 = 0;
    BOOL v44 = v15[1] == -1;
    goto LABEL_82;
  }
  BOOL v44 = 0;
  BOOL v43 = 0;
LABEL_82:
  if (*(char *)(v96.__r_.__value_.__r.__words[0] + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v125, *(const std::string::value_type **)v96.__r_.__value_.__l.__data_, *(void *)(v96.__r_.__value_.__r.__words[0] + 8));
  }
  else
  {
    long long v45 = *(_OWORD *)v96.__r_.__value_.__l.__data_;
    v125.__r_.__value_.__r.__words[2] = *(void *)(v96.__r_.__value_.__r.__words[0] + 16);
    *(_OWORD *)&v125.__r_.__value_.__l.__data_ = v45;
  }
  if (*(char *)(__str.__r_.__value_.__r.__words[0] + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v124, *(const std::string::value_type **)__str.__r_.__value_.__l.__data_, *(void *)(__str.__r_.__value_.__r.__words[0] + 8));
  }
  else
  {
    long long v46 = *(_OWORD *)__str.__r_.__value_.__l.__data_;
    v124.__r_.__value_.__r.__words[2] = *(void *)(__str.__r_.__value_.__r.__words[0] + 16);
    *(_OWORD *)&v124.__r_.__value_.__l.__data_ = v46;
  }
  if (v14 || v44 || v43)
  {
    *((void *)&v108 + 1) = 0x100000007;
    long long v109 = 0uLL;
    *(void *)&long long v110 = 0xFFFFFFFF00000000;
    *(void *)&long long v108 = 0x358637BD00000000;
    BYTE8(v110) = 0;
    if (v14 || v44)
    {
      if (v14) {
        int v47 = 31;
      }
      else {
        int v47 = 3;
      }
      DWORD2(v108) = v47;
    }
    memset(&v123, 0, sizeof(v123));
    std::string::operator=(&v124, (const std::string *)__str.__r_.__value_.__l.__data_);
    if (v84)
    {
      std::string::operator=(&v123, &v97);
    }
    else
    {
      if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v124.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v124.__r_.__value_.__l.__size_;
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v122, size + 11);
      if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v74 = &v122;
      }
      else {
        uint64_t v74 = (std::string *)v122.__r_.__value_.__r.__words[0];
      }
      if (size)
      {
        if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v75 = &v124;
        }
        else {
          int v75 = (std::string *)v124.__r_.__value_.__r.__words[0];
        }
        memmove(v74, v75, size);
      }
      strcpy((char *)v74 + size, "_presqueeze");
      if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v124.__r_.__value_.__l.__data_);
      }
      std::string v124 = v122;
      if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v76 = HIBYTE(v97.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v76 = v97.__r_.__value_.__l.__size_;
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v122, v76 + 11);
      if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v77 = &v122;
      }
      else {
        uint64_t v77 = (std::string *)v122.__r_.__value_.__r.__words[0];
      }
      if (v76)
      {
        if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v78 = &v97;
        }
        else {
          uint64_t v78 = (std::string *)v97.__r_.__value_.__r.__words[0];
        }
        memmove(v77, v78, v76);
      }
      strcpy((char *)v77 + v76, "_presqueeze");
      if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v123.__r_.__value_.__l.__data_);
      }
      std::string v123 = v122;
    }
    std::string::basic_string[abi:ne180100]<0>(&v122, "reduce");
    memset(&v131, 0, sizeof(v131));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v131, (long long *)v96.__r_.__value_.__l.__data_, (long long *)v96.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v96.__r_.__value_.__l.__size_ - v96.__r_.__value_.__r.__words[0]) >> 3));
    if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v129, v124.__r_.__value_.__l.__data_, v124.__r_.__value_.__l.__size_);
    }
    else {
      std::string v129 = v124;
    }
    int v118 = 0;
    int v117 = 0;
    uint64_t v119 = 0;
    v127.__r_.__value_.__r.__words[0] = (std::string::size_type)&v117;
    v127.__r_.__value_.__s.__data_[8] = 0;
    int v117 = (long long *)operator new(0x18uLL);
    int v118 = v117;
    uint64_t v119 = (char *)v117 + 24;
    int v118 = (long long *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v119, (long long *)&v129, (long long *)&v130, (std::string *)v117);
    Espresso::sequential_builder::add<Espresso::reduce_params_t>(&v120, v86, (uint64_t)&v122, (uint64_t)&v123, (uint64_t)&v108, (long long *)v131.__r_.__value_.__l.__data_, (long long *)v131.__r_.__value_.__l.__size_, &v117);
    if (v121) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v121);
    }
    v127.__r_.__value_.__r.__words[0] = (std::string::size_type)&v117;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v127);
    if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v129.__r_.__value_.__l.__data_);
    }
    v129.__r_.__value_.__r.__words[0] = (std::string::size_type)&v131;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v129);
    if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v122.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v123.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    if ((int)v13 < 1)
    {
      if (v84) {
        goto LABEL_253;
      }
      long long v114 = 0u;
      memset(v115, 0, sizeof(v115));
      long long v112 = 0u;
      long long v113 = 0u;
      long long v110 = 0u;
      long long v111 = 0u;
      long long v108 = 0u;
      long long v109 = 0u;
      int v116 = 1;
      DWORD1(v108) = v13;
      goto LABEL_242;
    }
    for (unint64_t i = 0; i != v13; ++i)
    {
      *((void *)&v108 + 1) = 0x100000007;
      long long v109 = 0uLL;
      LODWORD(v110) = 0;
      *(void *)&long long v108 = 0x358637BD00000000;
      BYTE8(v110) = 1;
      DWORD1(v110) = *(void *)(v92 + 8 * i + 8);
      memset(&v123, 0, sizeof(v123));
      if (i >= (v13 - 1))
      {
        if (v84)
        {
          std::string::operator=(&v124, (const std::string *)__str.__r_.__value_.__l.__data_);
          std::string::operator=(&v123, &v97);
        }
        else
        {
          std::string::size_type v66 = __str.__r_.__value_.__r.__words[0];
          if (*(char *)(__str.__r_.__value_.__r.__words[0] + 23) >= 0) {
            size_t v67 = *(unsigned __int8 *)(__str.__r_.__value_.__r.__words[0] + 23);
          }
          else {
            size_t v67 = *(void *)(__str.__r_.__value_.__r.__words[0] + 8);
          }
          std::string::basic_string[abi:ne180100]((uint64_t)&v122, v67 + 11);
          if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unint64_t v68 = &v122;
          }
          else {
            unint64_t v68 = (std::string *)v122.__r_.__value_.__r.__words[0];
          }
          if (v67)
          {
            if (*(char *)(v66 + 23) >= 0) {
              uint64_t v69 = (const void *)v66;
            }
            else {
              uint64_t v69 = *(const void **)v66;
            }
            memmove(v68, v69, v67);
          }
          strcpy((char *)v68 + v67, "_presqueeze");
          if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v124.__r_.__value_.__l.__data_);
          }
          std::string v124 = v122;
          if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v70 = HIBYTE(v97.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v70 = v97.__r_.__value_.__l.__size_;
          }
          std::string::basic_string[abi:ne180100]((uint64_t)&v122, v70 + 11);
          if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v71 = &v122;
          }
          else {
            uint64_t v71 = (std::string *)v122.__r_.__value_.__r.__words[0];
          }
          if (v70)
          {
            if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v72 = &v97;
            }
            else {
              uint64_t v72 = (std::string *)v97.__r_.__value_.__r.__words[0];
            }
            memmove(v71, v72, v70);
          }
          strcpy((char *)v71 + v70, "_presqueeze");
          if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v123.__r_.__value_.__l.__data_);
          }
          std::string v123 = v122;
        }
      }
      else
      {
        std::string::size_type v49 = v96.__r_.__value_.__r.__words[0];
        if (*(char *)(v96.__r_.__value_.__r.__words[0] + 23) >= 0) {
          size_t v50 = *(unsigned __int8 *)(v96.__r_.__value_.__r.__words[0] + 23);
        }
        else {
          size_t v50 = *(void *)(v96.__r_.__value_.__r.__words[0] + 8);
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&v122, v50 + 18);
        if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v51 = &v122;
        }
        else {
          long long v51 = (std::string *)v122.__r_.__value_.__r.__words[0];
        }
        if (v50)
        {
          if (*(char *)(v49 + 23) >= 0) {
            uint64_t v52 = (const void *)v49;
          }
          else {
            uint64_t v52 = *(const void **)v49;
          }
          memmove(v51, v52, v50);
        }
        strcpy((char *)v51 + v50, "__reduction_axis__");
        std::to_string(&v131, i + 1);
        if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v53 = &v131;
        }
        else {
          long long v53 = (std::string *)v131.__r_.__value_.__r.__words[0];
        }
        if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v54 = HIBYTE(v131.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v54 = v131.__r_.__value_.__l.__size_;
        }
        long long v55 = std::string::append(&v122, (const std::string::value_type *)v53, v54);
        std::string::size_type v56 = v55->__r_.__value_.__r.__words[0];
        v127.__r_.__value_.__r.__words[0] = v55->__r_.__value_.__l.__size_;
        *(std::string::size_type *)((char *)v127.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v55->__r_.__value_.__r.__words[1] + 7);
        char v57 = HIBYTE(v55->__r_.__value_.__r.__words[2]);
        v55->__r_.__value_.__l.__size_ = 0;
        v55->__r_.__value_.__r.__words[2] = 0;
        v55->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v124.__r_.__value_.__l.__data_);
        }
        v124.__r_.__value_.__r.__words[0] = v56;
        v124.__r_.__value_.__l.__size_ = v127.__r_.__value_.__r.__words[0];
        *(std::string::size_type *)((char *)&v124.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v127.__r_.__value_.__r.__words + 7);
        *((unsigned char *)&v124.__r_.__value_.__s + 23) = v57;
        if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v131.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v122.__r_.__value_.__l.__data_);
        }
        if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v58 = HIBYTE(v97.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v58 = v97.__r_.__value_.__l.__size_;
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&v122, v58 + 18);
        if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v59 = &v122;
        }
        else {
          uint64_t v59 = (std::string *)v122.__r_.__value_.__r.__words[0];
        }
        if (v58)
        {
          if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            long long v60 = &v97;
          }
          else {
            long long v60 = (std::string *)v97.__r_.__value_.__r.__words[0];
          }
          memmove(v59, v60, v58);
        }
        strcpy((char *)v59 + v58, "__reduction_axis__");
        std::to_string(&v131, i);
        if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v61 = &v131;
        }
        else {
          long long v61 = (std::string *)v131.__r_.__value_.__r.__words[0];
        }
        if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v62 = HIBYTE(v131.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v62 = v131.__r_.__value_.__l.__size_;
        }
        std::string v63 = std::string::append(&v122, (const std::string::value_type *)v61, v62);
        std::string::size_type v64 = v63->__r_.__value_.__r.__words[0];
        v127.__r_.__value_.__r.__words[0] = v63->__r_.__value_.__l.__size_;
        *(std::string::size_type *)((char *)v127.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v63->__r_.__value_.__r.__words[1] + 7);
        char v65 = HIBYTE(v63->__r_.__value_.__r.__words[2]);
        v63->__r_.__value_.__l.__size_ = 0;
        v63->__r_.__value_.__r.__words[2] = 0;
        v63->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v123.__r_.__value_.__l.__data_);
        }
        v123.__r_.__value_.__r.__words[0] = v64;
        v123.__r_.__value_.__l.__size_ = v127.__r_.__value_.__r.__words[0];
        *(std::string::size_type *)((char *)&v123.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v127.__r_.__value_.__r.__words + 7);
        *((unsigned char *)&v123.__r_.__value_.__s + 23) = v65;
        if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v131.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v122.__r_.__value_.__l.__data_);
        }
      }
      std::string::basic_string[abi:ne180100]<0>(&v122, "reduce");
      if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v131, v125.__r_.__value_.__l.__data_, v125.__r_.__value_.__l.__size_);
      }
      else {
        std::string v131 = v125;
      }
      int v118 = 0;
      int v117 = 0;
      uint64_t v119 = 0;
      v127.__r_.__value_.__r.__words[0] = (std::string::size_type)&v117;
      v127.__r_.__value_.__s.__data_[8] = 0;
      int v117 = (long long *)operator new(0x18uLL);
      int v118 = v117;
      uint64_t v119 = (char *)v117 + 24;
      int v118 = (long long *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v119, (long long *)&v131, &v132, (std::string *)v117);
      if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v127, v124.__r_.__value_.__l.__data_, v124.__r_.__value_.__l.__size_);
      }
      else {
        std::string v127 = v124;
      }
      memset(&v129, 0, sizeof(v129));
      v105.__r_.__value_.__r.__words[0] = (std::string::size_type)&v129;
      v105.__r_.__value_.__s.__data_[8] = 0;
      v129.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
      v129.__r_.__value_.__l.__size_ = v129.__r_.__value_.__r.__words[0];
      v129.__r_.__value_.__r.__words[2] = v129.__r_.__value_.__r.__words[0] + 24;
      v129.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v129.__r_.__value_.__r.__words[2], (long long *)&v127, (long long *)&v128, (std::string *)v129.__r_.__value_.__l.__data_);
      Espresso::sequential_builder::add<Espresso::reduce_params_t>(&v120, v86, (uint64_t)&v122, (uint64_t)&v123, (uint64_t)&v108, v117, v118, (long long **)&v129);
      if (v121) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v121);
      }
      v105.__r_.__value_.__r.__words[0] = (std::string::size_type)&v129;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v105);
      if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v127.__r_.__value_.__l.__data_);
      }
      v127.__r_.__value_.__r.__words[0] = (std::string::size_type)&v117;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v127);
      if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v131.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v122.__r_.__value_.__l.__data_);
      }
      std::string::operator=(&v125, &v124);
      if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v123.__r_.__value_.__l.__data_);
      }
    }
  }
  if (v84) {
    goto LABEL_253;
  }
  long long v114 = 0u;
  memset(v115, 0, sizeof(v115));
  long long v112 = 0u;
  long long v113 = 0u;
  long long v110 = 0u;
  long long v111 = 0u;
  long long v108 = 0u;
  long long v109 = 0u;
  int v116 = 1;
  if ((int)v13 >= 32) {
    LODWORD(v79) = 32;
  }
  else {
    LODWORD(v79) = v13;
  }
  DWORD1(v108) = v79;
  if ((int)v13 >= 1)
  {
    if ((int)v79 <= 1) {
      uint64_t v79 = 1;
    }
    else {
      uint64_t v79 = v79;
    }
    unsigned int v80 = (_DWORD *)&v108 + 2;
    int v81 = (uint64_t *)(v92 + 8);
    do
    {
      uint64_t v82 = *v81++;
      *v80++ = v82;
      --v79;
    }
    while (v79);
  }
LABEL_242:
  if (HIBYTE(v93)) {
    v115[24] = 1;
  }
  std::string::basic_string[abi:ne180100]<0>(&v123, "squeeze");
  if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v127, v124.__r_.__value_.__l.__data_, v124.__r_.__value_.__l.__size_);
  }
  else {
    std::string v127 = v124;
  }
  memset(&v122, 0, sizeof(v122));
  v105.__r_.__value_.__r.__words[0] = (std::string::size_type)&v122;
  v105.__r_.__value_.__s.__data_[8] = 0;
  v122.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
  v122.__r_.__value_.__l.__size_ = v122.__r_.__value_.__r.__words[0];
  v122.__r_.__value_.__r.__words[2] = v122.__r_.__value_.__r.__words[0] + 24;
  v122.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v122.__r_.__value_.__r.__words[2], (long long *)&v127, (long long *)&v128, (std::string *)v122.__r_.__value_.__l.__data_);
  memset(&v105, 0, sizeof(v105));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v105, (long long *)__str.__r_.__value_.__l.__data_, (long long *)__str.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(__str.__r_.__value_.__l.__size_ - __str.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add<Espresso::squeeze_params_t>(&v106, v86, (uint64_t)&v123, (uint64_t)&v97, (uint64_t)&v108, (long long *)v122.__r_.__value_.__l.__data_, (long long *)v122.__r_.__value_.__l.__size_, (long long **)&v105);
  if (v107) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v107);
  }
  uint64_t v126 = &v105;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v126);
  uint64_t v126 = &v122;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v126);
  if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v127.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v123.__r_.__value_.__l.__data_);
  }
LABEL_253:
  if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v124.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v125.__r_.__value_.__l.__data_);
  }
  if (v15) {
    operator delete(v15);
  }
  if (__p[0]) {
    operator delete(__p[0]);
  }
  CoreML::Specification::ReduceSumLayerParams::~ReduceSumLayerParams((CoreML::Specification::ReduceSumLayerParams *)&v89);
  *(void *)&long long v108 = &__str;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v108);
  *(void *)&long long v108 = &v96;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v108);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v97.__r_.__value_.__l.__data_);
  }
  LayerTranslator::defaultUnknownNdShape(v83, (uint64_t *)&v101);
  *(void *)&long long v108 = &v98;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v108);
  *(void *)&long long v108 = &v101;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v108);
  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v104.__r_.__value_.__l.__data_);
  }
}

void sub_19EAB0C40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (SLOBYTE(STACK[0x267]) < 0) {
    operator delete((void *)STACK[0x250]);
  }
  if (SLOBYTE(STACK[0x287]) < 0) {
    operator delete((void *)STACK[0x270]);
  }
  if (*(char *)(v64 - 217) < 0) {
    operator delete(*(void **)(v64 - 240));
  }
  if (v63) {
    operator delete(v63);
  }
  if (a24) {
    operator delete(a24);
  }
  CoreML::Specification::ReduceSumLayerParams::~ReduceSumLayerParams((CoreML::Specification::ReduceSumLayerParams *)&a27);
  a63 = (uint64_t)&a33;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a63);
  a63 = (uint64_t)&a36;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a63);
  if (a44 < 0) {
    operator delete(a39);
  }
  a63 = (uint64_t)&a46;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a63);
  a63 = (uint64_t)&a49;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a63);
  if (a57 < 0) {
    operator delete(a52);
  }
  _Unwind_Resume(a1);
}

void LayerTranslator::addReduceProd(LayerTranslator *this, uint64_t **a2)
{
  *(void *)&long long v132 = *MEMORY[0x1E4F143B8];
  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  long long v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v104, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    long long v5 = *(_OWORD *)v4;
    v104.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v5;
  }
  unint64_t v101 = 0;
  unint64_t v102 = 0;
  uint64_t v103 = 0;
  uint64_t v98 = 0;
  uint64_t v99 = 0;
  uint64_t v100 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v101, (uint64_t *)&v98, *((void *)this + 1));
  uint64_t v86 = *(void **)this;
  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v97, v104.__r_.__value_.__l.__data_, v104.__r_.__value_.__l.__size_);
  }
  else {
    std::string v97 = v104;
  }
  memset(&v96, 0, sizeof(v96));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v96, v98, v99, 0xAAAAAAAAAAAAAAABLL * (((char *)v99 - (char *)v98) >> 3));
  memset(&__str, 0, sizeof(__str));
  uint64_t v6 = std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&__str, v101, v102, 0xAAAAAAAAAAAAAAABLL * (((char *)v102 - (char *)v101) >> 3));
  if (*((_DWORD *)a2 + 35) == 1275)
  {
    uint64_t v7 = a2[16];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v6);
    uint64_t v7 = &CoreML::Specification::_ReduceProdLayerParams_default_instance_;
  }
  uint64_t v91 = 0;
  uint64_t v92 = 0;
  int v89 = &unk_1EF0D4FB0;
  unint64_t v90 = 0;
  int v8 = *((_DWORD *)v7 + 4);
  if (v8)
  {
    google::protobuf::RepeatedField<double>::Reserve((unsigned int *)&v91, v8);
    memcpy((void *)(v92 + 8), (const void *)(v7[3] + 8), 8 * *((int *)v7 + 4));
    LODWORD(v91) = *((_DWORD *)v7 + 4);
  }
  int v94 = 0;
  uint64_t v9 = v7[1];
  if (v9) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&v90, v9 & 0xFFFFFFFFFFFFFFFELL);
  }
  __int16 v93 = *((_WORD *)v7 + 18);
  uint64_t v10 = (uint64_t **)*((void *)this + 1);
  v125.__r_.__value_.__r.__words[0] = (std::string::size_type)v98;
  uint64_t v11 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v10, v98, (long long **)&v125);
  long long v87 = *(_OWORD *)(v11 + 72);
  uint64_t v12 = (const void *)*((void *)v11 + 12);
  memset(__p, 0, sizeof(__p));
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(__p, v12, *((void *)v11 + 13), (uint64_t)(*((void *)v11 + 13) - (void)v12) >> 2);
  std::string v83 = (char *)this;
  int v84 = v93;
  uint64_t v13 = v91;
  int v85 = HIBYTE(v93);
  BOOL v14 = HIBYTE(v93) != 0;
  if ((int)v91 >= 1)
  {
    int v15 = 0;
    long long v16 = 0;
    unint64_t v17 = 0;
    uint64_t v18 = 0;
    while (1)
    {
      int v19 = *(_DWORD *)(v92 + 8 * v18 + 8);
      if (v19 < 0)
      {
        if ((unint64_t)v16 >= v17)
        {
          uint64_t v27 = v16 - v15;
          unint64_t v28 = v27 + 1;
          if ((unint64_t)(v27 + 1) >> 62) {
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
          }
          if ((uint64_t)(v17 - (void)v15) >> 1 > v28) {
            unint64_t v28 = (uint64_t)(v17 - (void)v15) >> 1;
          }
          if (v17 - (unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v24 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v24 = v28;
          }
          if (v24) {
            unint64_t v24 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v24);
          }
          else {
            uint64_t v25 = 0;
          }
          uint64_t v29 = (_DWORD *)(v24 + 4 * v27);
          *uint64_t v29 = v19;
          uint64_t v26 = v29 + 1;
          while (v16 != v15)
          {
            int v31 = *--v16;
            *--uint64_t v29 = v31;
          }
          goto LABEL_49;
        }
      }
      else
      {
        int v20 = DWORD1(v87);
        if (v87 == 1) {
          int v21 = 4;
        }
        else {
          int v21 = 5;
        }
        if (DWORD1(v87) == -1) {
          int v20 = v21;
        }
        v19 -= v20;
        if ((unint64_t)v16 >= v17)
        {
          uint64_t v22 = v16 - v15;
          unint64_t v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 62) {
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
          }
          if ((uint64_t)(v17 - (void)v15) >> 1 > v23) {
            unint64_t v23 = (uint64_t)(v17 - (void)v15) >> 1;
          }
          if (v17 - (unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v24 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v24 = v23;
          }
          if (v24) {
            unint64_t v24 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v24);
          }
          else {
            uint64_t v25 = 0;
          }
          uint64_t v29 = (_DWORD *)(v24 + 4 * v22);
          *uint64_t v29 = v19;
          uint64_t v26 = v29 + 1;
          while (v16 != v15)
          {
            int v30 = *--v16;
            *--uint64_t v29 = v30;
          }
LABEL_49:
          unint64_t v17 = v24 + 4 * v25;
          if (v15) {
            operator delete(v15);
          }
          int v15 = v29;
          goto LABEL_52;
        }
      }
      _DWORD *v16 = v19;
      uint64_t v26 = v16 + 1;
LABEL_52:
      ++v18;
      long long v16 = v26;
      if (v18 == v13) {
        goto LABEL_55;
      }
    }
  }
  int v15 = 0;
  uint64_t v26 = 0;
LABEL_55:
  std::__sort<std::__less<int,int> &,int *>();
  unint64_t v32 = v26 - v15;
  int v33 = DWORD1(v87);
  if (v87 == 1) {
    int v34 = 4;
  }
  else {
    int v34 = 5;
  }
  if (DWORD1(v87) == -1) {
    int v33 = v34;
  }
  if (!v85 && v33 == v32)
  {
    if (v26 == v15)
    {
      BOOL v14 = 1;
    }
    else
    {
      if (v32 <= 1) {
        uint64_t v35 = 1;
      }
      else {
        uint64_t v35 = v26 - v15;
      }
      uint64_t v36 = v35 - 1;
      int v37 = -(int)v32;
      uint64_t v38 = v15;
      do
      {
        int v40 = *v38++;
        int v39 = v40;
        BOOL v42 = v36-- != 0;
        BOOL v14 = v37 == v39;
        if (v37 != v39) {
          break;
        }
        ++v37;
      }
      while (v42);
    }
  }
  if (v32 == 3)
  {
    if (*v15 == -3 && v15[1] == -2)
    {
      BOOL v44 = 0;
      BOOL v43 = v15[2] == -1;
      goto LABEL_82;
    }
  }
  else if (v32 == 2 && *v15 == -2)
  {
    BOOL v43 = 0;
    BOOL v44 = v15[1] == -1;
    goto LABEL_82;
  }
  BOOL v44 = 0;
  BOOL v43 = 0;
LABEL_82:
  if (*(char *)(v96.__r_.__value_.__r.__words[0] + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v125, *(const std::string::value_type **)v96.__r_.__value_.__l.__data_, *(void *)(v96.__r_.__value_.__r.__words[0] + 8));
  }
  else
  {
    long long v45 = *(_OWORD *)v96.__r_.__value_.__l.__data_;
    v125.__r_.__value_.__r.__words[2] = *(void *)(v96.__r_.__value_.__r.__words[0] + 16);
    *(_OWORD *)&v125.__r_.__value_.__l.__data_ = v45;
  }
  if (*(char *)(__str.__r_.__value_.__r.__words[0] + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v124, *(const std::string::value_type **)__str.__r_.__value_.__l.__data_, *(void *)(__str.__r_.__value_.__r.__words[0] + 8));
  }
  else
  {
    long long v46 = *(_OWORD *)__str.__r_.__value_.__l.__data_;
    v124.__r_.__value_.__r.__words[2] = *(void *)(__str.__r_.__value_.__r.__words[0] + 16);
    *(_OWORD *)&v124.__r_.__value_.__l.__data_ = v46;
  }
  if (v14 || v44 || v43)
  {
    *((void *)&v108 + 1) = 0x100000007;
    long long v109 = 0uLL;
    *(void *)&long long v110 = 0xFFFFFFFF00000000;
    *(void *)&long long v108 = 0x358637BD00000002;
    BYTE8(v110) = 0;
    if (v14 || v44)
    {
      if (v14) {
        int v47 = 31;
      }
      else {
        int v47 = 3;
      }
      DWORD2(v108) = v47;
    }
    memset(&v123, 0, sizeof(v123));
    std::string::operator=(&v124, (const std::string *)__str.__r_.__value_.__l.__data_);
    if (v84)
    {
      std::string::operator=(&v123, &v97);
    }
    else
    {
      if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v124.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v124.__r_.__value_.__l.__size_;
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v122, size + 11);
      if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v74 = &v122;
      }
      else {
        uint64_t v74 = (std::string *)v122.__r_.__value_.__r.__words[0];
      }
      if (size)
      {
        if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v75 = &v124;
        }
        else {
          int v75 = (std::string *)v124.__r_.__value_.__r.__words[0];
        }
        memmove(v74, v75, size);
      }
      strcpy((char *)v74 + size, "_presqueeze");
      if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v124.__r_.__value_.__l.__data_);
      }
      std::string v124 = v122;
      if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v76 = HIBYTE(v97.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v76 = v97.__r_.__value_.__l.__size_;
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v122, v76 + 11);
      if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v77 = &v122;
      }
      else {
        uint64_t v77 = (std::string *)v122.__r_.__value_.__r.__words[0];
      }
      if (v76)
      {
        if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v78 = &v97;
        }
        else {
          uint64_t v78 = (std::string *)v97.__r_.__value_.__r.__words[0];
        }
        memmove(v77, v78, v76);
      }
      strcpy((char *)v77 + v76, "_presqueeze");
      if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v123.__r_.__value_.__l.__data_);
      }
      std::string v123 = v122;
    }
    std::string::basic_string[abi:ne180100]<0>(&v122, "reduce");
    memset(&v131, 0, sizeof(v131));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v131, (long long *)v96.__r_.__value_.__l.__data_, (long long *)v96.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v96.__r_.__value_.__l.__size_ - v96.__r_.__value_.__r.__words[0]) >> 3));
    if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v129, v124.__r_.__value_.__l.__data_, v124.__r_.__value_.__l.__size_);
    }
    else {
      std::string v129 = v124;
    }
    int v118 = 0;
    int v117 = 0;
    uint64_t v119 = 0;
    v127.__r_.__value_.__r.__words[0] = (std::string::size_type)&v117;
    v127.__r_.__value_.__s.__data_[8] = 0;
    int v117 = (long long *)operator new(0x18uLL);
    int v118 = v117;
    uint64_t v119 = (char *)v117 + 24;
    int v118 = (long long *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v119, (long long *)&v129, (long long *)&v130, (std::string *)v117);
    Espresso::sequential_builder::add<Espresso::reduce_params_t>(&v120, v86, (uint64_t)&v122, (uint64_t)&v123, (uint64_t)&v108, (long long *)v131.__r_.__value_.__l.__data_, (long long *)v131.__r_.__value_.__l.__size_, &v117);
    if (v121) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v121);
    }
    v127.__r_.__value_.__r.__words[0] = (std::string::size_type)&v117;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v127);
    if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v129.__r_.__value_.__l.__data_);
    }
    v129.__r_.__value_.__r.__words[0] = (std::string::size_type)&v131;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v129);
    if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v122.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v123.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    if ((int)v13 < 1)
    {
      if (v84) {
        goto LABEL_253;
      }
      long long v114 = 0u;
      memset(v115, 0, sizeof(v115));
      long long v112 = 0u;
      long long v113 = 0u;
      long long v110 = 0u;
      long long v111 = 0u;
      long long v108 = 0u;
      long long v109 = 0u;
      int v116 = 1;
      DWORD1(v108) = v13;
      goto LABEL_242;
    }
    for (unint64_t i = 0; i != v13; ++i)
    {
      *((void *)&v108 + 1) = 0x100000007;
      long long v109 = 0uLL;
      LODWORD(v110) = 0;
      *(void *)&long long v108 = 0x358637BD00000002;
      BYTE8(v110) = 1;
      DWORD1(v110) = *(void *)(v92 + 8 * i + 8);
      memset(&v123, 0, sizeof(v123));
      if (i >= (v13 - 1))
      {
        if (v84)
        {
          std::string::operator=(&v124, (const std::string *)__str.__r_.__value_.__l.__data_);
          std::string::operator=(&v123, &v97);
        }
        else
        {
          std::string::size_type v66 = __str.__r_.__value_.__r.__words[0];
          if (*(char *)(__str.__r_.__value_.__r.__words[0] + 23) >= 0) {
            size_t v67 = *(unsigned __int8 *)(__str.__r_.__value_.__r.__words[0] + 23);
          }
          else {
            size_t v67 = *(void *)(__str.__r_.__value_.__r.__words[0] + 8);
          }
          std::string::basic_string[abi:ne180100]((uint64_t)&v122, v67 + 11);
          if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unint64_t v68 = &v122;
          }
          else {
            unint64_t v68 = (std::string *)v122.__r_.__value_.__r.__words[0];
          }
          if (v67)
          {
            if (*(char *)(v66 + 23) >= 0) {
              uint64_t v69 = (const void *)v66;
            }
            else {
              uint64_t v69 = *(const void **)v66;
            }
            memmove(v68, v69, v67);
          }
          strcpy((char *)v68 + v67, "_presqueeze");
          if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v124.__r_.__value_.__l.__data_);
          }
          std::string v124 = v122;
          if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v70 = HIBYTE(v97.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v70 = v97.__r_.__value_.__l.__size_;
          }
          std::string::basic_string[abi:ne180100]((uint64_t)&v122, v70 + 11);
          if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v71 = &v122;
          }
          else {
            uint64_t v71 = (std::string *)v122.__r_.__value_.__r.__words[0];
          }
          if (v70)
          {
            if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v72 = &v97;
            }
            else {
              uint64_t v72 = (std::string *)v97.__r_.__value_.__r.__words[0];
            }
            memmove(v71, v72, v70);
          }
          strcpy((char *)v71 + v70, "_presqueeze");
          if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v123.__r_.__value_.__l.__data_);
          }
          std::string v123 = v122;
        }
      }
      else
      {
        std::string::size_type v49 = v96.__r_.__value_.__r.__words[0];
        if (*(char *)(v96.__r_.__value_.__r.__words[0] + 23) >= 0) {
          size_t v50 = *(unsigned __int8 *)(v96.__r_.__value_.__r.__words[0] + 23);
        }
        else {
          size_t v50 = *(void *)(v96.__r_.__value_.__r.__words[0] + 8);
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&v122, v50 + 18);
        if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v51 = &v122;
        }
        else {
          long long v51 = (std::string *)v122.__r_.__value_.__r.__words[0];
        }
        if (v50)
        {
          if (*(char *)(v49 + 23) >= 0) {
            uint64_t v52 = (const void *)v49;
          }
          else {
            uint64_t v52 = *(const void **)v49;
          }
          memmove(v51, v52, v50);
        }
        strcpy((char *)v51 + v50, "__reduction_axis__");
        std::to_string(&v131, i + 1);
        if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v53 = &v131;
        }
        else {
          long long v53 = (std::string *)v131.__r_.__value_.__r.__words[0];
        }
        if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v54 = HIBYTE(v131.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v54 = v131.__r_.__value_.__l.__size_;
        }
        long long v55 = std::string::append(&v122, (const std::string::value_type *)v53, v54);
        std::string::size_type v56 = v55->__r_.__value_.__r.__words[0];
        v127.__r_.__value_.__r.__words[0] = v55->__r_.__value_.__l.__size_;
        *(std::string::size_type *)((char *)v127.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v55->__r_.__value_.__r.__words[1] + 7);
        char v57 = HIBYTE(v55->__r_.__value_.__r.__words[2]);
        v55->__r_.__value_.__l.__size_ = 0;
        v55->__r_.__value_.__r.__words[2] = 0;
        v55->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v124.__r_.__value_.__l.__data_);
        }
        v124.__r_.__value_.__r.__words[0] = v56;
        v124.__r_.__value_.__l.__size_ = v127.__r_.__value_.__r.__words[0];
        *(std::string::size_type *)((char *)&v124.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v127.__r_.__value_.__r.__words + 7);
        *((unsigned char *)&v124.__r_.__value_.__s + 23) = v57;
        if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v131.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v122.__r_.__value_.__l.__data_);
        }
        if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v58 = HIBYTE(v97.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v58 = v97.__r_.__value_.__l.__size_;
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&v122, v58 + 18);
        if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v59 = &v122;
        }
        else {
          uint64_t v59 = (std::string *)v122.__r_.__value_.__r.__words[0];
        }
        if (v58)
        {
          if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            long long v60 = &v97;
          }
          else {
            long long v60 = (std::string *)v97.__r_.__value_.__r.__words[0];
          }
          memmove(v59, v60, v58);
        }
        strcpy((char *)v59 + v58, "__reduction_axis__");
        std::to_string(&v131, i);
        if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v61 = &v131;
        }
        else {
          long long v61 = (std::string *)v131.__r_.__value_.__r.__words[0];
        }
        if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v62 = HIBYTE(v131.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v62 = v131.__r_.__value_.__l.__size_;
        }
        std::string v63 = std::string::append(&v122, (const std::string::value_type *)v61, v62);
        std::string::size_type v64 = v63->__r_.__value_.__r.__words[0];
        v127.__r_.__value_.__r.__words[0] = v63->__r_.__value_.__l.__size_;
        *(std::string::size_type *)((char *)v127.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v63->__r_.__value_.__r.__words[1] + 7);
        char v65 = HIBYTE(v63->__r_.__value_.__r.__words[2]);
        v63->__r_.__value_.__l.__size_ = 0;
        v63->__r_.__value_.__r.__words[2] = 0;
        v63->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v123.__r_.__value_.__l.__data_);
        }
        v123.__r_.__value_.__r.__words[0] = v64;
        v123.__r_.__value_.__l.__size_ = v127.__r_.__value_.__r.__words[0];
        *(std::string::size_type *)((char *)&v123.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v127.__r_.__value_.__r.__words + 7);
        *((unsigned char *)&v123.__r_.__value_.__s + 23) = v65;
        if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v131.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v122.__r_.__value_.__l.__data_);
        }
      }
      std::string::basic_string[abi:ne180100]<0>(&v122, "reduce");
      if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v131, v125.__r_.__value_.__l.__data_, v125.__r_.__value_.__l.__size_);
      }
      else {
        std::string v131 = v125;
      }
      int v118 = 0;
      int v117 = 0;
      uint64_t v119 = 0;
      v127.__r_.__value_.__r.__words[0] = (std::string::size_type)&v117;
      v127.__r_.__value_.__s.__data_[8] = 0;
      int v117 = (long long *)operator new(0x18uLL);
      int v118 = v117;
      uint64_t v119 = (char *)v117 + 24;
      int v118 = (long long *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v119, (long long *)&v131, &v132, (std::string *)v117);
      if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v127, v124.__r_.__value_.__l.__data_, v124.__r_.__value_.__l.__size_);
      }
      else {
        std::string v127 = v124;
      }
      memset(&v129, 0, sizeof(v129));
      v105.__r_.__value_.__r.__words[0] = (std::string::size_type)&v129;
      v105.__r_.__value_.__s.__data_[8] = 0;
      v129.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
      v129.__r_.__value_.__l.__size_ = v129.__r_.__value_.__r.__words[0];
      v129.__r_.__value_.__r.__words[2] = v129.__r_.__value_.__r.__words[0] + 24;
      v129.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v129.__r_.__value_.__r.__words[2], (long long *)&v127, (long long *)&v128, (std::string *)v129.__r_.__value_.__l.__data_);
      Espresso::sequential_builder::add<Espresso::reduce_params_t>(&v120, v86, (uint64_t)&v122, (uint64_t)&v123, (uint64_t)&v108, v117, v118, (long long **)&v129);
      if (v121) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v121);
      }
      v105.__r_.__value_.__r.__words[0] = (std::string::size_type)&v129;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v105);
      if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v127.__r_.__value_.__l.__data_);
      }
      v127.__r_.__value_.__r.__words[0] = (std::string::size_type)&v117;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v127);
      if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v131.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v122.__r_.__value_.__l.__data_);
      }
      std::string::operator=(&v125, &v124);
      if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v123.__r_.__value_.__l.__data_);
      }
    }
  }
  if (v84) {
    goto LABEL_253;
  }
  long long v114 = 0u;
  memset(v115, 0, sizeof(v115));
  long long v112 = 0u;
  long long v113 = 0u;
  long long v110 = 0u;
  long long v111 = 0u;
  long long v108 = 0u;
  long long v109 = 0u;
  int v116 = 1;
  if ((int)v13 >= 32) {
    LODWORD(v79) = 32;
  }
  else {
    LODWORD(v79) = v13;
  }
  DWORD1(v108) = v79;
  if ((int)v13 >= 1)
  {
    if ((int)v79 <= 1) {
      uint64_t v79 = 1;
    }
    else {
      uint64_t v79 = v79;
    }
    unsigned int v80 = (_DWORD *)&v108 + 2;
    int v81 = (uint64_t *)(v92 + 8);
    do
    {
      uint64_t v82 = *v81++;
      *v80++ = v82;
      --v79;
    }
    while (v79);
  }
LABEL_242:
  if (HIBYTE(v93)) {
    v115[24] = 1;
  }
  std::string::basic_string[abi:ne180100]<0>(&v123, "squeeze");
  if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v127, v124.__r_.__value_.__l.__data_, v124.__r_.__value_.__l.__size_);
  }
  else {
    std::string v127 = v124;
  }
  memset(&v122, 0, sizeof(v122));
  v105.__r_.__value_.__r.__words[0] = (std::string::size_type)&v122;
  v105.__r_.__value_.__s.__data_[8] = 0;
  v122.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
  v122.__r_.__value_.__l.__size_ = v122.__r_.__value_.__r.__words[0];
  v122.__r_.__value_.__r.__words[2] = v122.__r_.__value_.__r.__words[0] + 24;
  v122.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v122.__r_.__value_.__r.__words[2], (long long *)&v127, (long long *)&v128, (std::string *)v122.__r_.__value_.__l.__data_);
  memset(&v105, 0, sizeof(v105));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v105, (long long *)__str.__r_.__value_.__l.__data_, (long long *)__str.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(__str.__r_.__value_.__l.__size_ - __str.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add<Espresso::squeeze_params_t>(&v106, v86, (uint64_t)&v123, (uint64_t)&v97, (uint64_t)&v108, (long long *)v122.__r_.__value_.__l.__data_, (long long *)v122.__r_.__value_.__l.__size_, (long long **)&v105);
  if (v107) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v107);
  }
  uint64_t v126 = &v105;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v126);
  uint64_t v126 = &v122;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v126);
  if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v127.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v123.__r_.__value_.__l.__data_);
  }
LABEL_253:
  if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v124.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v125.__r_.__value_.__l.__data_);
  }
  if (v15) {
    operator delete(v15);
  }
  if (__p[0]) {
    operator delete(__p[0]);
  }
  CoreML::Specification::ReduceProdLayerParams::~ReduceProdLayerParams((CoreML::Specification::ReduceProdLayerParams *)&v89);
  *(void *)&long long v108 = &__str;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v108);
  *(void *)&long long v108 = &v96;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v108);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v97.__r_.__value_.__l.__data_);
  }
  LayerTranslator::defaultUnknownNdShape(v83, (uint64_t *)&v101);
  *(void *)&long long v108 = &v98;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v108);
  *(void *)&long long v108 = &v101;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v108);
  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v104.__r_.__value_.__l.__data_);
  }
}

void sub_19EAB1F28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (SLOBYTE(STACK[0x267]) < 0) {
    operator delete((void *)STACK[0x250]);
  }
  if (SLOBYTE(STACK[0x287]) < 0) {
    operator delete((void *)STACK[0x270]);
  }
  if (*(char *)(v64 - 217) < 0) {
    operator delete(*(void **)(v64 - 240));
  }
  if (v63) {
    operator delete(v63);
  }
  if (a24) {
    operator delete(a24);
  }
  CoreML::Specification::ReduceProdLayerParams::~ReduceProdLayerParams((CoreML::Specification::ReduceProdLayerParams *)&a27);
  a63 = (uint64_t)&a33;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a63);
  a63 = (uint64_t)&a36;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a63);
  if (a44 < 0) {
    operator delete(a39);
  }
  a63 = (uint64_t)&a46;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a63);
  a63 = (uint64_t)&a49;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a63);
  if (a57 < 0) {
    operator delete(a52);
  }
  _Unwind_Resume(a1);
}

void LayerTranslator::addReduceMean(LayerTranslator *this, uint64_t **a2)
{
  *(void *)&long long v132 = *MEMORY[0x1E4F143B8];
  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  long long v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v104, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    long long v5 = *(_OWORD *)v4;
    v104.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v5;
  }
  unint64_t v101 = 0;
  unint64_t v102 = 0;
  uint64_t v103 = 0;
  uint64_t v98 = 0;
  uint64_t v99 = 0;
  uint64_t v100 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v101, (uint64_t *)&v98, *((void *)this + 1));
  uint64_t v86 = *(void **)this;
  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v97, v104.__r_.__value_.__l.__data_, v104.__r_.__value_.__l.__size_);
  }
  else {
    std::string v97 = v104;
  }
  memset(&v96, 0, sizeof(v96));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v96, v98, v99, 0xAAAAAAAAAAAAAAABLL * (((char *)v99 - (char *)v98) >> 3));
  memset(&__str, 0, sizeof(__str));
  uint64_t v6 = std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&__str, v101, v102, 0xAAAAAAAAAAAAAAABLL * (((char *)v102 - (char *)v101) >> 3));
  if (*((_DWORD *)a2 + 35) == 1280)
  {
    uint64_t v7 = a2[16];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v6);
    uint64_t v7 = &CoreML::Specification::_ReduceMeanLayerParams_default_instance_;
  }
  uint64_t v91 = 0;
  uint64_t v92 = 0;
  int v89 = &unk_1EF0D4F18;
  unint64_t v90 = 0;
  int v8 = *((_DWORD *)v7 + 4);
  if (v8)
  {
    google::protobuf::RepeatedField<double>::Reserve((unsigned int *)&v91, v8);
    memcpy((void *)(v92 + 8), (const void *)(v7[3] + 8), 8 * *((int *)v7 + 4));
    LODWORD(v91) = *((_DWORD *)v7 + 4);
  }
  int v94 = 0;
  uint64_t v9 = v7[1];
  if (v9) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&v90, v9 & 0xFFFFFFFFFFFFFFFELL);
  }
  __int16 v93 = *((_WORD *)v7 + 18);
  uint64_t v10 = (uint64_t **)*((void *)this + 1);
  v125.__r_.__value_.__r.__words[0] = (std::string::size_type)v98;
  uint64_t v11 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v10, v98, (long long **)&v125);
  long long v87 = *(_OWORD *)(v11 + 72);
  uint64_t v12 = (const void *)*((void *)v11 + 12);
  memset(__p, 0, sizeof(__p));
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(__p, v12, *((void *)v11 + 13), (uint64_t)(*((void *)v11 + 13) - (void)v12) >> 2);
  std::string v83 = (char *)this;
  int v84 = v93;
  uint64_t v13 = v91;
  int v85 = HIBYTE(v93);
  BOOL v14 = HIBYTE(v93) != 0;
  if ((int)v91 >= 1)
  {
    int v15 = 0;
    long long v16 = 0;
    unint64_t v17 = 0;
    uint64_t v18 = 0;
    while (1)
    {
      int v19 = *(_DWORD *)(v92 + 8 * v18 + 8);
      if (v19 < 0)
      {
        if ((unint64_t)v16 >= v17)
        {
          uint64_t v27 = v16 - v15;
          unint64_t v28 = v27 + 1;
          if ((unint64_t)(v27 + 1) >> 62) {
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
          }
          if ((uint64_t)(v17 - (void)v15) >> 1 > v28) {
            unint64_t v28 = (uint64_t)(v17 - (void)v15) >> 1;
          }
          if (v17 - (unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v24 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v24 = v28;
          }
          if (v24) {
            unint64_t v24 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v24);
          }
          else {
            uint64_t v25 = 0;
          }
          uint64_t v29 = (_DWORD *)(v24 + 4 * v27);
          *uint64_t v29 = v19;
          uint64_t v26 = v29 + 1;
          while (v16 != v15)
          {
            int v31 = *--v16;
            *--uint64_t v29 = v31;
          }
          goto LABEL_49;
        }
      }
      else
      {
        int v20 = DWORD1(v87);
        if (v87 == 1) {
          int v21 = 4;
        }
        else {
          int v21 = 5;
        }
        if (DWORD1(v87) == -1) {
          int v20 = v21;
        }
        v19 -= v20;
        if ((unint64_t)v16 >= v17)
        {
          uint64_t v22 = v16 - v15;
          unint64_t v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 62) {
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
          }
          if ((uint64_t)(v17 - (void)v15) >> 1 > v23) {
            unint64_t v23 = (uint64_t)(v17 - (void)v15) >> 1;
          }
          if (v17 - (unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v24 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v24 = v23;
          }
          if (v24) {
            unint64_t v24 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v24);
          }
          else {
            uint64_t v25 = 0;
          }
          uint64_t v29 = (_DWORD *)(v24 + 4 * v22);
          *uint64_t v29 = v19;
          uint64_t v26 = v29 + 1;
          while (v16 != v15)
          {
            int v30 = *--v16;
            *--uint64_t v29 = v30;
          }
LABEL_49:
          unint64_t v17 = v24 + 4 * v25;
          if (v15) {
            operator delete(v15);
          }
          int v15 = v29;
          goto LABEL_52;
        }
      }
      _DWORD *v16 = v19;
      uint64_t v26 = v16 + 1;
LABEL_52:
      ++v18;
      long long v16 = v26;
      if (v18 == v13) {
        goto LABEL_55;
      }
    }
  }
  int v15 = 0;
  uint64_t v26 = 0;
LABEL_55:
  std::__sort<std::__less<int,int> &,int *>();
  unint64_t v32 = v26 - v15;
  int v33 = DWORD1(v87);
  if (v87 == 1) {
    int v34 = 4;
  }
  else {
    int v34 = 5;
  }
  if (DWORD1(v87) == -1) {
    int v33 = v34;
  }
  if (!v85 && v33 == v32)
  {
    if (v26 == v15)
    {
      BOOL v14 = 1;
    }
    else
    {
      if (v32 <= 1) {
        uint64_t v35 = 1;
      }
      else {
        uint64_t v35 = v26 - v15;
      }
      uint64_t v36 = v35 - 1;
      int v37 = -(int)v32;
      uint64_t v38 = v15;
      do
      {
        int v40 = *v38++;
        int v39 = v40;
        BOOL v42 = v36-- != 0;
        BOOL v14 = v37 == v39;
        if (v37 != v39) {
          break;
        }
        ++v37;
      }
      while (v42);
    }
  }
  if (v32 == 3)
  {
    if (*v15 == -3 && v15[1] == -2)
    {
      BOOL v44 = 0;
      BOOL v43 = v15[2] == -1;
      goto LABEL_82;
    }
  }
  else if (v32 == 2 && *v15 == -2)
  {
    BOOL v43 = 0;
    BOOL v44 = v15[1] == -1;
    goto LABEL_82;
  }
  BOOL v44 = 0;
  BOOL v43 = 0;
LABEL_82:
  if (*(char *)(v96.__r_.__value_.__r.__words[0] + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v125, *(const std::string::value_type **)v96.__r_.__value_.__l.__data_, *(void *)(v96.__r_.__value_.__r.__words[0] + 8));
  }
  else
  {
    long long v45 = *(_OWORD *)v96.__r_.__value_.__l.__data_;
    v125.__r_.__value_.__r.__words[2] = *(void *)(v96.__r_.__value_.__r.__words[0] + 16);
    *(_OWORD *)&v125.__r_.__value_.__l.__data_ = v45;
  }
  if (*(char *)(__str.__r_.__value_.__r.__words[0] + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v124, *(const std::string::value_type **)__str.__r_.__value_.__l.__data_, *(void *)(__str.__r_.__value_.__r.__words[0] + 8));
  }
  else
  {
    long long v46 = *(_OWORD *)__str.__r_.__value_.__l.__data_;
    v124.__r_.__value_.__r.__words[2] = *(void *)(__str.__r_.__value_.__r.__words[0] + 16);
    *(_OWORD *)&v124.__r_.__value_.__l.__data_ = v46;
  }
  if (v14 || v44 || v43)
  {
    *((void *)&v108 + 1) = 0x100000007;
    long long v109 = 0uLL;
    *(void *)&long long v110 = 0xFFFFFFFF00000000;
    *(void *)&long long v108 = 0x358637BD00000001;
    BYTE8(v110) = 0;
    if (v14 || v44)
    {
      if (v14) {
        int v47 = 31;
      }
      else {
        int v47 = 3;
      }
      DWORD2(v108) = v47;
    }
    memset(&v123, 0, sizeof(v123));
    std::string::operator=(&v124, (const std::string *)__str.__r_.__value_.__l.__data_);
    if (v84)
    {
      std::string::operator=(&v123, &v97);
    }
    else
    {
      if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v124.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v124.__r_.__value_.__l.__size_;
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v122, size + 11);
      if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v74 = &v122;
      }
      else {
        uint64_t v74 = (std::string *)v122.__r_.__value_.__r.__words[0];
      }
      if (size)
      {
        if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v75 = &v124;
        }
        else {
          int v75 = (std::string *)v124.__r_.__value_.__r.__words[0];
        }
        memmove(v74, v75, size);
      }
      strcpy((char *)v74 + size, "_presqueeze");
      if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v124.__r_.__value_.__l.__data_);
      }
      std::string v124 = v122;
      if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v76 = HIBYTE(v97.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v76 = v97.__r_.__value_.__l.__size_;
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v122, v76 + 11);
      if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v77 = &v122;
      }
      else {
        uint64_t v77 = (std::string *)v122.__r_.__value_.__r.__words[0];
      }
      if (v76)
      {
        if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v78 = &v97;
        }
        else {
          uint64_t v78 = (std::string *)v97.__r_.__value_.__r.__words[0];
        }
        memmove(v77, v78, v76);
      }
      strcpy((char *)v77 + v76, "_presqueeze");
      if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v123.__r_.__value_.__l.__data_);
      }
      std::string v123 = v122;
    }
    std::string::basic_string[abi:ne180100]<0>(&v122, "reduce");
    memset(&v131, 0, sizeof(v131));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v131, (long long *)v96.__r_.__value_.__l.__data_, (long long *)v96.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v96.__r_.__value_.__l.__size_ - v96.__r_.__value_.__r.__words[0]) >> 3));
    if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v129, v124.__r_.__value_.__l.__data_, v124.__r_.__value_.__l.__size_);
    }
    else {
      std::string v129 = v124;
    }
    int v118 = 0;
    int v117 = 0;
    uint64_t v119 = 0;
    v127.__r_.__value_.__r.__words[0] = (std::string::size_type)&v117;
    v127.__r_.__value_.__s.__data_[8] = 0;
    int v117 = (long long *)operator new(0x18uLL);
    int v118 = v117;
    uint64_t v119 = (char *)v117 + 24;
    int v118 = (long long *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v119, (long long *)&v129, (long long *)&v130, (std::string *)v117);
    Espresso::sequential_builder::add<Espresso::reduce_params_t>(&v120, v86, (uint64_t)&v122, (uint64_t)&v123, (uint64_t)&v108, (long long *)v131.__r_.__value_.__l.__data_, (long long *)v131.__r_.__value_.__l.__size_, &v117);
    if (v121) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v121);
    }
    v127.__r_.__value_.__r.__words[0] = (std::string::size_type)&v117;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v127);
    if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v129.__r_.__value_.__l.__data_);
    }
    v129.__r_.__value_.__r.__words[0] = (std::string::size_type)&v131;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v129);
    if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v122.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v123.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    if ((int)v13 < 1)
    {
      if (v84) {
        goto LABEL_253;
      }
      long long v114 = 0u;
      memset(v115, 0, sizeof(v115));
      long long v112 = 0u;
      long long v113 = 0u;
      long long v110 = 0u;
      long long v111 = 0u;
      long long v108 = 0u;
      long long v109 = 0u;
      int v116 = 1;
      DWORD1(v108) = v13;
      goto LABEL_242;
    }
    for (unint64_t i = 0; i != v13; ++i)
    {
      *((void *)&v108 + 1) = 0x100000007;
      long long v109 = 0uLL;
      LODWORD(v110) = 0;
      *(void *)&long long v108 = 0x358637BD00000001;
      BYTE8(v110) = 1;
      DWORD1(v110) = *(void *)(v92 + 8 * i + 8);
      memset(&v123, 0, sizeof(v123));
      if (i >= (v13 - 1))
      {
        if (v84)
        {
          std::string::operator=(&v124, (const std::string *)__str.__r_.__value_.__l.__data_);
          std::string::operator=(&v123, &v97);
        }
        else
        {
          std::string::size_type v66 = __str.__r_.__value_.__r.__words[0];
          if (*(char *)(__str.__r_.__value_.__r.__words[0] + 23) >= 0) {
            size_t v67 = *(unsigned __int8 *)(__str.__r_.__value_.__r.__words[0] + 23);
          }
          else {
            size_t v67 = *(void *)(__str.__r_.__value_.__r.__words[0] + 8);
          }
          std::string::basic_string[abi:ne180100]((uint64_t)&v122, v67 + 11);
          if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unint64_t v68 = &v122;
          }
          else {
            unint64_t v68 = (std::string *)v122.__r_.__value_.__r.__words[0];
          }
          if (v67)
          {
            if (*(char *)(v66 + 23) >= 0) {
              uint64_t v69 = (const void *)v66;
            }
            else {
              uint64_t v69 = *(const void **)v66;
            }
            memmove(v68, v69, v67);
          }
          strcpy((char *)v68 + v67, "_presqueeze");
          if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v124.__r_.__value_.__l.__data_);
          }
          std::string v124 = v122;
          if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v70 = HIBYTE(v97.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v70 = v97.__r_.__value_.__l.__size_;
          }
          std::string::basic_string[abi:ne180100]((uint64_t)&v122, v70 + 11);
          if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v71 = &v122;
          }
          else {
            uint64_t v71 = (std::string *)v122.__r_.__value_.__r.__words[0];
          }
          if (v70)
          {
            if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v72 = &v97;
            }
            else {
              uint64_t v72 = (std::string *)v97.__r_.__value_.__r.__words[0];
            }
            memmove(v71, v72, v70);
          }
          strcpy((char *)v71 + v70, "_presqueeze");
          if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v123.__r_.__value_.__l.__data_);
          }
          std::string v123 = v122;
        }
      }
      else
      {
        std::string::size_type v49 = v96.__r_.__value_.__r.__words[0];
        if (*(char *)(v96.__r_.__value_.__r.__words[0] + 23) >= 0) {
          size_t v50 = *(unsigned __int8 *)(v96.__r_.__value_.__r.__words[0] + 23);
        }
        else {
          size_t v50 = *(void *)(v96.__r_.__value_.__r.__words[0] + 8);
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&v122, v50 + 18);
        if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v51 = &v122;
        }
        else {
          long long v51 = (std::string *)v122.__r_.__value_.__r.__words[0];
        }
        if (v50)
        {
          if (*(char *)(v49 + 23) >= 0) {
            uint64_t v52 = (const void *)v49;
          }
          else {
            uint64_t v52 = *(const void **)v49;
          }
          memmove(v51, v52, v50);
        }
        strcpy((char *)v51 + v50, "__reduction_axis__");
        std::to_string(&v131, i + 1);
        if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v53 = &v131;
        }
        else {
          long long v53 = (std::string *)v131.__r_.__value_.__r.__words[0];
        }
        if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v54 = HIBYTE(v131.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v54 = v131.__r_.__value_.__l.__size_;
        }
        long long v55 = std::string::append(&v122, (const std::string::value_type *)v53, v54);
        std::string::size_type v56 = v55->__r_.__value_.__r.__words[0];
        v127.__r_.__value_.__r.__words[0] = v55->__r_.__value_.__l.__size_;
        *(std::string::size_type *)((char *)v127.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v55->__r_.__value_.__r.__words[1] + 7);
        char v57 = HIBYTE(v55->__r_.__value_.__r.__words[2]);
        v55->__r_.__value_.__l.__size_ = 0;
        v55->__r_.__value_.__r.__words[2] = 0;
        v55->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v124.__r_.__value_.__l.__data_);
        }
        v124.__r_.__value_.__r.__words[0] = v56;
        v124.__r_.__value_.__l.__size_ = v127.__r_.__value_.__r.__words[0];
        *(std::string::size_type *)((char *)&v124.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v127.__r_.__value_.__r.__words + 7);
        *((unsigned char *)&v124.__r_.__value_.__s + 23) = v57;
        if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v131.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v122.__r_.__value_.__l.__data_);
        }
        if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v58 = HIBYTE(v97.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v58 = v97.__r_.__value_.__l.__size_;
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&v122, v58 + 18);
        if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v59 = &v122;
        }
        else {
          uint64_t v59 = (std::string *)v122.__r_.__value_.__r.__words[0];
        }
        if (v58)
        {
          if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            long long v60 = &v97;
          }
          else {
            long long v60 = (std::string *)v97.__r_.__value_.__r.__words[0];
          }
          memmove(v59, v60, v58);
        }
        strcpy((char *)v59 + v58, "__reduction_axis__");
        std::to_string(&v131, i);
        if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v61 = &v131;
        }
        else {
          long long v61 = (std::string *)v131.__r_.__value_.__r.__words[0];
        }
        if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v62 = HIBYTE(v131.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v62 = v131.__r_.__value_.__l.__size_;
        }
        std::string v63 = std::string::append(&v122, (const std::string::value_type *)v61, v62);
        std::string::size_type v64 = v63->__r_.__value_.__r.__words[0];
        v127.__r_.__value_.__r.__words[0] = v63->__r_.__value_.__l.__size_;
        *(std::string::size_type *)((char *)v127.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v63->__r_.__value_.__r.__words[1] + 7);
        char v65 = HIBYTE(v63->__r_.__value_.__r.__words[2]);
        v63->__r_.__value_.__l.__size_ = 0;
        v63->__r_.__value_.__r.__words[2] = 0;
        v63->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v123.__r_.__value_.__l.__data_);
        }
        v123.__r_.__value_.__r.__words[0] = v64;
        v123.__r_.__value_.__l.__size_ = v127.__r_.__value_.__r.__words[0];
        *(std::string::size_type *)((char *)&v123.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v127.__r_.__value_.__r.__words + 7);
        *((unsigned char *)&v123.__r_.__value_.__s + 23) = v65;
        if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v131.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v122.__r_.__value_.__l.__data_);
        }
      }
      std::string::basic_string[abi:ne180100]<0>(&v122, "reduce");
      if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v131, v125.__r_.__value_.__l.__data_, v125.__r_.__value_.__l.__size_);
      }
      else {
        std::string v131 = v125;
      }
      int v118 = 0;
      int v117 = 0;
      uint64_t v119 = 0;
      v127.__r_.__value_.__r.__words[0] = (std::string::size_type)&v117;
      v127.__r_.__value_.__s.__data_[8] = 0;
      int v117 = (long long *)operator new(0x18uLL);
      int v118 = v117;
      uint64_t v119 = (char *)v117 + 24;
      int v118 = (long long *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v119, (long long *)&v131, &v132, (std::string *)v117);
      if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v127, v124.__r_.__value_.__l.__data_, v124.__r_.__value_.__l.__size_);
      }
      else {
        std::string v127 = v124;
      }
      memset(&v129, 0, sizeof(v129));
      v105.__r_.__value_.__r.__words[0] = (std::string::size_type)&v129;
      v105.__r_.__value_.__s.__data_[8] = 0;
      v129.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
      v129.__r_.__value_.__l.__size_ = v129.__r_.__value_.__r.__words[0];
      v129.__r_.__value_.__r.__words[2] = v129.__r_.__value_.__r.__words[0] + 24;
      v129.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v129.__r_.__value_.__r.__words[2], (long long *)&v127, (long long *)&v128, (std::string *)v129.__r_.__value_.__l.__data_);
      Espresso::sequential_builder::add<Espresso::reduce_params_t>(&v120, v86, (uint64_t)&v122, (uint64_t)&v123, (uint64_t)&v108, v117, v118, (long long **)&v129);
      if (v121) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v121);
      }
      v105.__r_.__value_.__r.__words[0] = (std::string::size_type)&v129;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v105);
      if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v127.__r_.__value_.__l.__data_);
      }
      v127.__r_.__value_.__r.__words[0] = (std::string::size_type)&v117;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v127);
      if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v131.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v122.__r_.__value_.__l.__data_);
      }
      std::string::operator=(&v125, &v124);
      if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v123.__r_.__value_.__l.__data_);
      }
    }
  }
  if (v84) {
    goto LABEL_253;
  }
  long long v114 = 0u;
  memset(v115, 0, sizeof(v115));
  long long v112 = 0u;
  long long v113 = 0u;
  long long v110 = 0u;
  long long v111 = 0u;
  long long v108 = 0u;
  long long v109 = 0u;
  int v116 = 1;
  if ((int)v13 >= 32) {
    LODWORD(v79) = 32;
  }
  else {
    LODWORD(v79) = v13;
  }
  DWORD1(v108) = v79;
  if ((int)v13 >= 1)
  {
    if ((int)v79 <= 1) {
      uint64_t v79 = 1;
    }
    else {
      uint64_t v79 = v79;
    }
    unsigned int v80 = (_DWORD *)&v108 + 2;
    int v81 = (uint64_t *)(v92 + 8);
    do
    {
      uint64_t v82 = *v81++;
      *v80++ = v82;
      --v79;
    }
    while (v79);
  }
LABEL_242:
  if (HIBYTE(v93)) {
    v115[24] = 1;
  }
  std::string::basic_string[abi:ne180100]<0>(&v123, "squeeze");
  if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v127, v124.__r_.__value_.__l.__data_, v124.__r_.__value_.__l.__size_);
  }
  else {
    std::string v127 = v124;
  }
  memset(&v122, 0, sizeof(v122));
  v105.__r_.__value_.__r.__words[0] = (std::string::size_type)&v122;
  v105.__r_.__value_.__s.__data_[8] = 0;
  v122.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
  v122.__r_.__value_.__l.__size_ = v122.__r_.__value_.__r.__words[0];
  v122.__r_.__value_.__r.__words[2] = v122.__r_.__value_.__r.__words[0] + 24;
  v122.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v122.__r_.__value_.__r.__words[2], (long long *)&v127, (long long *)&v128, (std::string *)v122.__r_.__value_.__l.__data_);
  memset(&v105, 0, sizeof(v105));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v105, (long long *)__str.__r_.__value_.__l.__data_, (long long *)__str.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(__str.__r_.__value_.__l.__size_ - __str.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add<Espresso::squeeze_params_t>(&v106, v86, (uint64_t)&v123, (uint64_t)&v97, (uint64_t)&v108, (long long *)v122.__r_.__value_.__l.__data_, (long long *)v122.__r_.__value_.__l.__size_, (long long **)&v105);
  if (v107) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v107);
  }
  uint64_t v126 = &v105;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v126);
  uint64_t v126 = &v122;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v126);
  if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v127.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v123.__r_.__value_.__l.__data_);
  }
LABEL_253:
  if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v124.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v125.__r_.__value_.__l.__data_);
  }
  if (v15) {
    operator delete(v15);
  }
  if (__p[0]) {
    operator delete(__p[0]);
  }
  CoreML::Specification::ReduceMeanLayerParams::~ReduceMeanLayerParams((CoreML::Specification::ReduceMeanLayerParams *)&v89);
  *(void *)&long long v108 = &__str;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v108);
  *(void *)&long long v108 = &v96;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v108);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v97.__r_.__value_.__l.__data_);
  }
  LayerTranslator::defaultUnknownNdShape(v83, (uint64_t *)&v101);
  *(void *)&long long v108 = &v98;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v108);
  *(void *)&long long v108 = &v101;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v108);
  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v104.__r_.__value_.__l.__data_);
  }
}

void sub_19EAB3210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (SLOBYTE(STACK[0x267]) < 0) {
    operator delete((void *)STACK[0x250]);
  }
  if (SLOBYTE(STACK[0x287]) < 0) {
    operator delete((void *)STACK[0x270]);
  }
  if (*(char *)(v64 - 217) < 0) {
    operator delete(*(void **)(v64 - 240));
  }
  if (v63) {
    operator delete(v63);
  }
  if (a24) {
    operator delete(a24);
  }
  CoreML::Specification::ReduceMeanLayerParams::~ReduceMeanLayerParams((CoreML::Specification::ReduceMeanLayerParams *)&a27);
  a63 = (uint64_t)&a33;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a63);
  a63 = (uint64_t)&a36;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a63);
  if (a44 < 0) {
    operator delete(a39);
  }
  a63 = (uint64_t)&a46;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a63);
  a63 = (uint64_t)&a49;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a63);
  if (a57 < 0) {
    operator delete(a52);
  }
  _Unwind_Resume(a1);
}

void LayerTranslator::addReduceLogSum(LayerTranslator *this, uint64_t **a2)
{
  *(void *)&long long v154 = *MEMORY[0x1E4F143B8];
  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  long long v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v123, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    long long v5 = *(_OWORD *)v4;
    v123.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v123.__r_.__value_.__l.__data_ = v5;
  }
  uint64_t v120 = 0;
  uint64_t v121 = 0;
  uint64_t v122 = 0;
  int v117 = 0;
  int v118 = 0;
  uint64_t v119 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v120, (uint64_t *)&v117, *((void *)this + 1));
  uint64_t v6 = v120;
  if (*((char *)v120 + 23) >= 0) {
    size_t v7 = *((unsigned __int8 *)v120 + 23);
  }
  else {
    size_t v7 = *((void *)v120 + 1);
  }
  int v8 = &v116;
  std::string::basic_string[abi:ne180100]((uint64_t)&v116, v7 + 8);
  if ((v116.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    int v8 = (std::string *)v116.__r_.__value_.__r.__words[0];
  }
  if (v7)
  {
    if (*((char *)v6 + 23) >= 0) {
      uint64_t v9 = v6;
    }
    else {
      uint64_t v9 = *(long long **)v6;
    }
    memmove(v8, v9, v7);
  }
  strcpy((char *)v8 + v7, "__prelog");
  uint64_t v92 = *(void **)this;
  if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v115, v123.__r_.__value_.__l.__data_, v123.__r_.__value_.__l.__size_);
  }
  else {
    std::string v115 = v123;
  }
  memset(&v114, 0, sizeof(v114));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v114, v117, v118, 0xAAAAAAAAAAAAAAABLL * (((char *)v118 - (char *)v117) >> 3));
  if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v145, v116.__r_.__value_.__l.__data_, v116.__r_.__value_.__l.__size_);
  }
  else {
    std::string v145 = v116;
  }
  std::string __str = 0;
  long long v112 = 0;
  long long v113 = 0;
  *(void *)&long long v127 = &__str;
  BYTE8(v127) = 0;
  std::string __str = (std::string *)operator new(0x18uLL);
  long long v112 = (long long *)__str;
  long long v113 = __str + 1;
  uint64_t v10 = (long long *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v113, (long long *)&v145, (long long *)&v146, __str);
  long long v112 = v10;
  if (*((_DWORD *)a2 + 35) == 1285)
  {
    uint64_t v11 = a2[16];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v10);
    uint64_t v11 = &CoreML::Specification::_ReduceLogSumLayerParams_default_instance_;
  }
  uint64_t v107 = 0;
  uint64_t v108 = 0;
  std::string v105 = &unk_1EF0D60E8;
  unint64_t v106 = 0;
  int v12 = *((_DWORD *)v11 + 4);
  if (v12)
  {
    google::protobuf::RepeatedField<double>::Reserve((unsigned int *)&v107, v12);
    memcpy((void *)(v108 + 8), (const void *)(v11[3] + 8), 8 * *((int *)v11 + 4));
    LODWORD(v107) = *((_DWORD *)v11 + 4);
  }
  int v110 = 0;
  uint64_t v13 = v11[1];
  if (v13) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&v106, v13 & 0xFFFFFFFFFFFFFFFELL);
  }
  __int16 v109 = *((_WORD *)v11 + 18);
  BOOL v14 = (uint64_t **)*((void *)this + 1);
  v143.__r_.__value_.__r.__words[0] = (std::string::size_type)v117;
  int v15 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v14, v117, (long long **)&v143);
  long long v16 = *(_OWORD *)(v15 + 72);
  long long v99 = *(_OWORD *)(v15 + 56);
  long long v100 = v16;
  unint64_t v17 = (const void *)*((void *)v15 + 12);
  uint64_t v101 = *((void *)v15 + 11);
  std::string __p = 0;
  uint64_t v103 = 0;
  uint64_t v104 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v17, *((void *)v15 + 13), (uint64_t)(*((void *)v15 + 13) - (void)v17) >> 2);
  int v89 = (char *)this;
  int v90 = v109;
  uint64_t v18 = v107;
  int v91 = HIBYTE(v109);
  BOOL v19 = HIBYTE(v109) != 0;
  if ((int)v107 >= 1)
  {
    int v20 = 0;
    int v21 = 0;
    unint64_t v22 = 0;
    uint64_t v23 = 0;
    while (1)
    {
      int v24 = *(_DWORD *)(v108 + 8 * v23 + 8);
      if (v24 < 0)
      {
        if ((unint64_t)v21 >= v22)
        {
          uint64_t v32 = v21 - v20;
          unint64_t v33 = v32 + 1;
          if ((unint64_t)(v32 + 1) >> 62) {
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
          }
          if ((uint64_t)(v22 - (void)v20) >> 1 > v33) {
            unint64_t v33 = (uint64_t)(v22 - (void)v20) >> 1;
          }
          if (v22 - (unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v29 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v29 = v33;
          }
          if (v29) {
            unint64_t v29 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v29);
          }
          else {
            uint64_t v30 = 0;
          }
          int v34 = (_DWORD *)(v29 + 4 * v32);
          _DWORD *v34 = v24;
          int v31 = v34 + 1;
          while (v21 != v20)
          {
            int v36 = *--v21;
            *--int v34 = v36;
          }
          goto LABEL_62;
        }
      }
      else
      {
        int v25 = DWORD1(v100);
        if (v100 == 1) {
          int v26 = 4;
        }
        else {
          int v26 = 5;
        }
        if (DWORD1(v100) == -1) {
          int v25 = v26;
        }
        v24 -= v25;
        if ((unint64_t)v21 >= v22)
        {
          uint64_t v27 = v21 - v20;
          unint64_t v28 = v27 + 1;
          if ((unint64_t)(v27 + 1) >> 62) {
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
          }
          if ((uint64_t)(v22 - (void)v20) >> 1 > v28) {
            unint64_t v28 = (uint64_t)(v22 - (void)v20) >> 1;
          }
          if (v22 - (unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v29 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v29 = v28;
          }
          if (v29) {
            unint64_t v29 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v29);
          }
          else {
            uint64_t v30 = 0;
          }
          int v34 = (_DWORD *)(v29 + 4 * v27);
          _DWORD *v34 = v24;
          int v31 = v34 + 1;
          while (v21 != v20)
          {
            int v35 = *--v21;
            *--int v34 = v35;
          }
LABEL_62:
          unint64_t v22 = v29 + 4 * v30;
          if (v20) {
            operator delete(v20);
          }
          int v20 = v34;
          goto LABEL_65;
        }
      }
      _DWORD *v21 = v24;
      int v31 = v21 + 1;
LABEL_65:
      ++v23;
      int v21 = v31;
      if (v23 == v18) {
        goto LABEL_68;
      }
    }
  }
  int v20 = 0;
  int v31 = 0;
LABEL_68:
  std::__sort<std::__less<int,int> &,int *>();
  unint64_t v37 = v31 - v20;
  int v38 = DWORD1(v100);
  if (v100 == 1) {
    int v39 = 4;
  }
  else {
    int v39 = 5;
  }
  if (DWORD1(v100) == -1) {
    int v38 = v39;
  }
  if (!v91 && v38 == v37)
  {
    if (v31 == v20)
    {
      BOOL v19 = 1;
    }
    else
    {
      if (v37 <= 1) {
        uint64_t v40 = 1;
      }
      else {
        uint64_t v40 = v31 - v20;
      }
      uint64_t v41 = v40 - 1;
      int v42 = -(int)v37;
      BOOL v43 = v20;
      do
      {
        int v45 = *v43++;
        int v44 = v45;
        BOOL v47 = v41-- != 0;
        BOOL v19 = v42 == v44;
        if (v42 != v44) {
          break;
        }
        ++v42;
      }
      while (v47);
    }
  }
  if (v37 == 3)
  {
    if (*v20 == -3 && v20[1] == -2)
    {
      BOOL v49 = 0;
      BOOL v48 = v20[2] == -1;
      goto LABEL_95;
    }
  }
  else if (v37 == 2 && *v20 == -2)
  {
    BOOL v48 = 0;
    BOOL v49 = v20[1] == -1;
    goto LABEL_95;
  }
  BOOL v49 = 0;
  BOOL v48 = 0;
LABEL_95:
  if (*(char *)(v114.__r_.__value_.__r.__words[0] + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v143, *(const std::string::value_type **)v114.__r_.__value_.__l.__data_, *(void *)(v114.__r_.__value_.__r.__words[0] + 8));
  }
  else
  {
    long long v50 = *(_OWORD *)v114.__r_.__value_.__l.__data_;
    v143.__r_.__value_.__r.__words[2] = *(void *)(v114.__r_.__value_.__r.__words[0] + 16);
    *(_OWORD *)&v143.__r_.__value_.__l.__data_ = v50;
  }
  if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v153, __str->__r_.__value_.__l.__data_, __str->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v51 = *(_OWORD *)&__str->__r_.__value_.__l.__data_;
    v153.__r_.__value_.__r.__words[2] = __str->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v153.__r_.__value_.__l.__data_ = v51;
  }
  if (v19 || v49 || v48)
  {
    *((void *)&v127 + 1) = 0x100000007;
    long long v128 = 0uLL;
    *(void *)&long long v129 = 0xFFFFFFFF00000000;
    *(void *)&long long v127 = 0x358637BD00000000;
    BYTE8(v129) = 0;
    if (v19 || v49)
    {
      if (v19) {
        int v52 = 31;
      }
      else {
        int v52 = 3;
      }
      DWORD2(v127) = v52;
    }
    memset(&v142, 0, sizeof(v142));
    std::string::operator=(&v153, __str);
    if (v90)
    {
      std::string::operator=(&v142, &v115);
    }
    else
    {
      if ((v153.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v153.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v153.__r_.__value_.__l.__size_;
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v141, size + 11);
      if ((v141.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v79 = &v141;
      }
      else {
        uint64_t v79 = (std::string *)v141.__r_.__value_.__r.__words[0];
      }
      if (size)
      {
        if ((v153.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unsigned int v80 = &v153;
        }
        else {
          unsigned int v80 = (std::string *)v153.__r_.__value_.__r.__words[0];
        }
        memmove(v79, v80, size);
      }
      strcpy((char *)v79 + size, "_presqueeze");
      if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v153.__r_.__value_.__l.__data_);
      }
      std::string v153 = v141;
      if ((v115.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v81 = HIBYTE(v115.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v81 = v115.__r_.__value_.__l.__size_;
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v141, v81 + 11);
      if ((v141.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v82 = &v141;
      }
      else {
        uint64_t v82 = (std::string *)v141.__r_.__value_.__r.__words[0];
      }
      if (v81)
      {
        if ((v115.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string v83 = &v115;
        }
        else {
          std::string v83 = (std::string *)v115.__r_.__value_.__r.__words[0];
        }
        memmove(v82, v83, v81);
      }
      strcpy((char *)v82 + v81, "_presqueeze");
      if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v142.__r_.__value_.__l.__data_);
      }
      std::string v142 = v141;
    }
    std::string::basic_string[abi:ne180100]<0>(&v141, "reduce");
    memset(&v151, 0, sizeof(v151));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v151, (long long *)v114.__r_.__value_.__l.__data_, (long long *)v114.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v114.__r_.__value_.__l.__size_ - v114.__r_.__value_.__r.__words[0]) >> 3));
    if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v149, v153.__r_.__value_.__l.__data_, v153.__r_.__value_.__l.__size_);
    }
    else {
      std::string v149 = v153;
    }
    std::string::size_type v137 = 0;
    uint64_t v136 = 0;
    uint64_t v138 = 0;
    v147.__r_.__value_.__r.__words[0] = (std::string::size_type)&v136;
    v147.__r_.__value_.__s.__data_[8] = 0;
    uint64_t v136 = (long long *)operator new(0x18uLL);
    std::string::size_type v137 = v136;
    uint64_t v138 = (char *)v136 + 24;
    std::string::size_type v137 = (long long *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v138, (long long *)&v149, (long long *)&v150, (std::string *)v136);
    Espresso::sequential_builder::add<Espresso::reduce_params_t>(&v139, v92, (uint64_t)&v141, (uint64_t)&v142, (uint64_t)&v127, (long long *)v151.__r_.__value_.__l.__data_, (long long *)v151.__r_.__value_.__l.__size_, &v136);
    if (v140) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v140);
    }
    v147.__r_.__value_.__r.__words[0] = (std::string::size_type)&v136;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v147);
    if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v149.__r_.__value_.__l.__data_);
    }
    v149.__r_.__value_.__r.__words[0] = (std::string::size_type)&v151;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v149);
    if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v141.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v142.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    if ((int)v18 < 1)
    {
      if (v90) {
        goto LABEL_266;
      }
      long long v133 = 0u;
      memset(v134, 0, sizeof(v134));
      long long v131 = 0u;
      long long v132 = 0u;
      long long v129 = 0u;
      long long v130 = 0u;
      long long v127 = 0u;
      long long v128 = 0u;
      int v135 = 1;
      DWORD1(v127) = v18;
      goto LABEL_255;
    }
    for (unint64_t i = 0; i != v18; ++i)
    {
      *((void *)&v127 + 1) = 0x100000007;
      long long v128 = 0uLL;
      LODWORD(v129) = 0;
      *(void *)&long long v127 = 0x358637BD00000000;
      BYTE8(v129) = 1;
      DWORD1(v129) = *(void *)(v108 + 8 * i + 8);
      memset(&v142, 0, sizeof(v142));
      if (i >= (v18 - 1))
      {
        if (v90)
        {
          std::string::operator=(&v153, __str);
          std::string::operator=(&v142, &v115);
        }
        else
        {
          uint64_t v71 = __str;
          if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v72 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v72 = __str->__r_.__value_.__l.__size_;
          }
          std::string::basic_string[abi:ne180100]((uint64_t)&v141, v72 + 11);
          if ((v141.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int v73 = &v141;
          }
          else {
            int v73 = (std::string *)v141.__r_.__value_.__r.__words[0];
          }
          if (v72)
          {
            if ((v71->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v74 = v71;
            }
            else {
              uint64_t v74 = (std::string *)v71->__r_.__value_.__r.__words[0];
            }
            memmove(v73, v74, v72);
          }
          strcpy((char *)v73 + v72, "_presqueeze");
          if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v153.__r_.__value_.__l.__data_);
          }
          std::string v153 = v141;
          if ((v115.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v75 = HIBYTE(v115.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v75 = v115.__r_.__value_.__l.__size_;
          }
          std::string::basic_string[abi:ne180100]((uint64_t)&v141, v75 + 11);
          if ((v141.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v76 = &v141;
          }
          else {
            std::string::size_type v76 = (std::string *)v141.__r_.__value_.__r.__words[0];
          }
          if (v75)
          {
            if ((v115.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v77 = &v115;
            }
            else {
              uint64_t v77 = (std::string *)v115.__r_.__value_.__r.__words[0];
            }
            memmove(v76, v77, v75);
          }
          strcpy((char *)v76 + v75, "_presqueeze");
          if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v142.__r_.__value_.__l.__data_);
          }
          std::string v142 = v141;
        }
      }
      else
      {
        std::string::size_type v54 = v114.__r_.__value_.__r.__words[0];
        if (*(char *)(v114.__r_.__value_.__r.__words[0] + 23) >= 0) {
          size_t v55 = *(unsigned __int8 *)(v114.__r_.__value_.__r.__words[0] + 23);
        }
        else {
          size_t v55 = *(void *)(v114.__r_.__value_.__r.__words[0] + 8);
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&v141, v55 + 18);
        if ((v141.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v56 = &v141;
        }
        else {
          std::string::size_type v56 = (std::string *)v141.__r_.__value_.__r.__words[0];
        }
        if (v55)
        {
          if (*(char *)(v54 + 23) >= 0) {
            char v57 = (const void *)v54;
          }
          else {
            char v57 = *(const void **)v54;
          }
          memmove(v56, v57, v55);
        }
        strcpy((char *)v56 + v55, "__reduction_axis__");
        std::to_string(&v151, i + 1);
        if ((v151.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v58 = &v151;
        }
        else {
          std::string::size_type v58 = (std::string *)v151.__r_.__value_.__r.__words[0];
        }
        if ((v151.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v59 = HIBYTE(v151.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v59 = v151.__r_.__value_.__l.__size_;
        }
        long long v60 = std::string::append(&v141, (const std::string::value_type *)v58, v59);
        std::string::size_type v61 = v60->__r_.__value_.__r.__words[0];
        v147.__r_.__value_.__r.__words[0] = v60->__r_.__value_.__l.__size_;
        *(std::string::size_type *)((char *)v147.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v60->__r_.__value_.__r.__words[1] + 7);
        char v62 = HIBYTE(v60->__r_.__value_.__r.__words[2]);
        v60->__r_.__value_.__l.__size_ = 0;
        v60->__r_.__value_.__r.__words[2] = 0;
        v60->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v153.__r_.__value_.__l.__data_);
        }
        v153.__r_.__value_.__r.__words[0] = v61;
        v153.__r_.__value_.__l.__size_ = v147.__r_.__value_.__r.__words[0];
        *(std::string::size_type *)((char *)&v153.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v147.__r_.__value_.__r.__words + 7);
        *((unsigned char *)&v153.__r_.__value_.__s + 23) = v62;
        if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v151.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v141.__r_.__value_.__l.__data_);
        }
        if ((v115.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v63 = HIBYTE(v115.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v63 = v115.__r_.__value_.__l.__size_;
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&v141, v63 + 18);
        if ((v141.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v64 = &v141;
        }
        else {
          uint64_t v64 = (std::string *)v141.__r_.__value_.__r.__words[0];
        }
        if (v63)
        {
          if ((v115.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            char v65 = &v115;
          }
          else {
            char v65 = (std::string *)v115.__r_.__value_.__r.__words[0];
          }
          memmove(v64, v65, v63);
        }
        strcpy((char *)v64 + v63, "__reduction_axis__");
        std::to_string(&v151, i);
        if ((v151.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v66 = &v151;
        }
        else {
          std::string::size_type v66 = (std::string *)v151.__r_.__value_.__r.__words[0];
        }
        if ((v151.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v67 = HIBYTE(v151.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v67 = v151.__r_.__value_.__l.__size_;
        }
        unint64_t v68 = std::string::append(&v141, (const std::string::value_type *)v66, v67);
        std::string::size_type v69 = v68->__r_.__value_.__r.__words[0];
        v147.__r_.__value_.__r.__words[0] = v68->__r_.__value_.__l.__size_;
        *(std::string::size_type *)((char *)v147.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v68->__r_.__value_.__r.__words[1] + 7);
        char v70 = HIBYTE(v68->__r_.__value_.__r.__words[2]);
        v68->__r_.__value_.__l.__size_ = 0;
        v68->__r_.__value_.__r.__words[2] = 0;
        v68->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v142.__r_.__value_.__l.__data_);
        }
        v142.__r_.__value_.__r.__words[0] = v69;
        v142.__r_.__value_.__l.__size_ = v147.__r_.__value_.__r.__words[0];
        *(std::string::size_type *)((char *)&v142.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v147.__r_.__value_.__r.__words + 7);
        *((unsigned char *)&v142.__r_.__value_.__s + 23) = v70;
        if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v151.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v141.__r_.__value_.__l.__data_);
        }
      }
      std::string::basic_string[abi:ne180100]<0>(&v141, "reduce");
      if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v151, v143.__r_.__value_.__l.__data_, v143.__r_.__value_.__l.__size_);
      }
      else {
        std::string v151 = v143;
      }
      std::string::size_type v137 = 0;
      uint64_t v136 = 0;
      uint64_t v138 = 0;
      v147.__r_.__value_.__r.__words[0] = (std::string::size_type)&v136;
      v147.__r_.__value_.__s.__data_[8] = 0;
      uint64_t v136 = (long long *)operator new(0x18uLL);
      std::string::size_type v137 = v136;
      uint64_t v138 = (char *)v136 + 24;
      std::string::size_type v137 = (long long *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v138, (long long *)&v151, (long long *)&v152, (std::string *)v136);
      if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v147, v153.__r_.__value_.__l.__data_, v153.__r_.__value_.__l.__size_);
      }
      else {
        std::string v147 = v153;
      }
      memset(&v149, 0, sizeof(v149));
      v124.__r_.__value_.__r.__words[0] = (std::string::size_type)&v149;
      v124.__r_.__value_.__s.__data_[8] = 0;
      v149.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
      v149.__r_.__value_.__l.__size_ = v149.__r_.__value_.__r.__words[0];
      v149.__r_.__value_.__r.__words[2] = v149.__r_.__value_.__r.__words[0] + 24;
      v149.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v149.__r_.__value_.__r.__words[2], (long long *)&v147, (long long *)&v148, (std::string *)v149.__r_.__value_.__l.__data_);
      Espresso::sequential_builder::add<Espresso::reduce_params_t>(&v139, v92, (uint64_t)&v141, (uint64_t)&v142, (uint64_t)&v127, v136, v137, (long long **)&v149);
      if (v140) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v140);
      }
      v124.__r_.__value_.__r.__words[0] = (std::string::size_type)&v149;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v124);
      if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v147.__r_.__value_.__l.__data_);
      }
      v147.__r_.__value_.__r.__words[0] = (std::string::size_type)&v136;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v147);
      if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v151.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v141.__r_.__value_.__l.__data_);
      }
      std::string::operator=(&v143, &v153);
      if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v142.__r_.__value_.__l.__data_);
      }
    }
  }
  if (v90) {
    goto LABEL_266;
  }
  long long v133 = 0u;
  memset(v134, 0, sizeof(v134));
  long long v131 = 0u;
  long long v132 = 0u;
  long long v129 = 0u;
  long long v130 = 0u;
  long long v127 = 0u;
  long long v128 = 0u;
  int v135 = 1;
  if ((int)v18 >= 32) {
    LODWORD(v84) = 32;
  }
  else {
    LODWORD(v84) = v18;
  }
  DWORD1(v127) = v84;
  if ((int)v18 >= 1)
  {
    if ((int)v84 <= 1) {
      uint64_t v84 = 1;
    }
    else {
      uint64_t v84 = v84;
    }
    int v85 = (_DWORD *)&v127 + 2;
    uint64_t v86 = (uint64_t *)(v108 + 8);
    do
    {
      uint64_t v87 = *v86++;
      *v85++ = v87;
      --v84;
    }
    while (v84);
  }
LABEL_255:
  if (HIBYTE(v109)) {
    v134[24] = 1;
  }
  std::string::basic_string[abi:ne180100]<0>(&v142, "squeeze");
  if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v147, v153.__r_.__value_.__l.__data_, v153.__r_.__value_.__l.__size_);
  }
  else {
    std::string v147 = v153;
  }
  memset(&v141, 0, sizeof(v141));
  v124.__r_.__value_.__r.__words[0] = (std::string::size_type)&v141;
  v124.__r_.__value_.__s.__data_[8] = 0;
  v141.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
  v141.__r_.__value_.__l.__size_ = v141.__r_.__value_.__r.__words[0];
  v141.__r_.__value_.__r.__words[2] = v141.__r_.__value_.__r.__words[0] + 24;
  v141.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v141.__r_.__value_.__r.__words[2], (long long *)&v147, (long long *)&v148, (std::string *)v141.__r_.__value_.__l.__data_);
  memset(&v124, 0, sizeof(v124));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v124, (long long *)__str, v112, 0xAAAAAAAAAAAAAAABLL * (((char *)v112 - (char *)__str) >> 3));
  Espresso::sequential_builder::add<Espresso::squeeze_params_t>(&v125, v92, (uint64_t)&v142, (uint64_t)&v115, (uint64_t)&v127, (long long *)v141.__r_.__value_.__l.__data_, (long long *)v141.__r_.__value_.__l.__size_, (long long **)&v124);
  if (v126) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v126);
  }
  unint64_t v144 = &v124;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v144);
  unint64_t v144 = &v141;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v144);
  if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v147.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v142.__r_.__value_.__l.__data_);
  }
LABEL_266:
  if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v153.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v143.__r_.__value_.__l.__data_);
  }
  if (v20) {
    operator delete(v20);
  }
  if (__p)
  {
    uint64_t v103 = __p;
    operator delete(__p);
  }
  CoreML::Specification::ReduceLogSumLayerParams::~ReduceLogSumLayerParams((CoreML::Specification::ReduceLogSumLayerParams *)&v105);
  *(void *)&long long v127 = &__str;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v127);
  if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v145.__r_.__value_.__l.__data_);
  }
  *(void *)&long long v127 = &v114;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v127);
  if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v115.__r_.__value_.__l.__data_);
  }
  *(void *)&long long v128 = 897988541;
  BYTE8(v128) = 0;
  LODWORD(v130) = 0;
  HIDWORD(v129) = 0;
  *(void *)&long long v127 = 26;
  *((void *)&v127 + 1) = 1065353216;
  float v88 = *(void **)v89;
  std::string::basic_string[abi:ne180100]<0>(&v143, "elementwise");
  if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v153, v116.__r_.__value_.__l.__data_, v116.__r_.__value_.__l.__size_);
  }
  else {
    std::string v153 = v116;
  }
  int v94 = 0;
  unsigned int v95 = 0;
  std::string v96 = 0;
  v142.__r_.__value_.__r.__words[0] = (std::string::size_type)&v94;
  v142.__r_.__value_.__s.__data_[8] = 0;
  int v94 = (long long *)operator new(0x18uLL);
  unsigned int v95 = v94;
  std::string v96 = (char *)v94 + 24;
  unsigned int v95 = (long long *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v96, (long long *)&v153, &v154, (std::string *)v94);
  memset(&v93, 0, sizeof(v93));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v93, v120, v121, 0xAAAAAAAAAAAAAAABLL * (((char *)v121 - (char *)v120) >> 3));
  Espresso::sequential_builder::add<Espresso::elementwise_params>(&v97, v88, (uint64_t)&v143, (uint64_t)&v123, (uint64_t)&v127, v94, v95, (long long **)&v93);
  if (v98) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v98);
  }
  v142.__r_.__value_.__r.__words[0] = (std::string::size_type)&v93;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v142);
  v142.__r_.__value_.__r.__words[0] = (std::string::size_type)&v94;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v142);
  if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v153.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v143.__r_.__value_.__l.__data_);
  }
  LayerTranslator::defaultUnknownNdShape(v89, (uint64_t *)&v120);
  if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v116.__r_.__value_.__l.__data_);
  }
  *(void *)&long long v127 = &v117;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v127);
  *(void *)&long long v127 = &v120;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v127);
  if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v123.__r_.__value_.__l.__data_);
  }
}

void sub_19EAB4720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58,char a59,uint64_t a60,uint64_t a61,char a62,uint64_t a63)
{
  if (SLOBYTE(STACK[0x2B7]) < 0) {
    operator delete((void *)STACK[0x2A0]);
  }
  if (*(char *)(v73 - 121) < 0) {
    operator delete(*(void **)(v73 - 144));
  }
  if (SLOBYTE(STACK[0x2D7]) < 0) {
    operator delete((void *)STACK[0x2C0]);
  }
  if (v72) {
    operator delete(v72);
  }
  if (a32) {
    operator delete(a32);
  }
  CoreML::Specification::ReduceLogSumLayerParams::~ReduceLogSumLayerParams((CoreML::Specification::ReduceLogSumLayerParams *)&a35);
  a72 = (uint64_t)&a41;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a72);
  if (SLOBYTE(STACK[0x2F7]) < 0) {
    operator delete((void *)STACK[0x2E0]);
  }
  a72 = (uint64_t)&a44;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a72);
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a58 < 0) {
    operator delete(a53);
  }
  a72 = (uint64_t)&a59;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a72);
  a72 = (uint64_t)&a62;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a72);
  if (a70 < 0) {
    operator delete(a65);
  }
  _Unwind_Resume(a1);
}

void LayerTranslator::addReduceSumSquare(LayerTranslator *this, uint64_t **a2)
{
  *(void *)&long long v156 = *MEMORY[0x1E4F143B8];
  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  long long v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v125, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    long long v5 = *(_OWORD *)v4;
    v125.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v125.__r_.__value_.__l.__data_ = v5;
  }
  uint64_t v122 = 0;
  std::string v123 = 0;
  uint64_t v124 = 0;
  uint64_t v119 = 0;
  uint64_t v120 = 0;
  uint64_t v121 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v122, (uint64_t *)&v119, *((void *)this + 1));
  _OWORD v115[2] = 897988541;
  char v116 = 0;
  int v118 = 0;
  int v117 = 0;
  v115[0] = 13;
  v115[1] = 0x40000000;
  uint64_t v6 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
  memset(&v112, 0, sizeof(v112));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v112, v119, v120, 0xAAAAAAAAAAAAAAABLL * (((char *)v120 - (char *)v119) >> 3));
  if ((v125.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v125.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v125.__r_.__value_.__l.__size_;
  }
  std::string::basic_string[abi:ne180100]((uint64_t)&v155, size + 9);
  if ((v155.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v8 = &v155;
  }
  else {
    int v8 = (std::string *)v155.__r_.__value_.__r.__words[0];
  }
  if (size)
  {
    if ((v125.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v9 = &v125;
    }
    else {
      uint64_t v9 = (std::string *)v125.__r_.__value_.__r.__words[0];
    }
    memmove(v8, v9, size);
  }
  strcpy((char *)v8 + size, "__squared");
  __int16 v109 = 0;
  int v110 = 0;
  long long v111 = 0;
  v145.__r_.__value_.__r.__words[0] = (std::string::size_type)&v109;
  v145.__r_.__value_.__s.__data_[8] = 0;
  __int16 v109 = (std::string *)operator new(0x18uLL);
  int v110 = v109;
  long long v111 = v109 + 1;
  int v110 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v111, (long long *)&v155, &v156, v109);
  Espresso::sequential_builder::add<Espresso::elementwise_params>(&v113, v6, (uint64_t)__p, (uint64_t)&v125, (uint64_t)v115, (long long *)v112.__r_.__value_.__l.__data_, (long long *)v112.__r_.__value_.__l.__size_, (long long **)&v109);
  if (v114) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v114);
  }
  v145.__r_.__value_.__r.__words[0] = (std::string::size_type)&v109;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v145);
  if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v155.__r_.__value_.__l.__data_);
  }
  v155.__r_.__value_.__r.__words[0] = (std::string::size_type)&v112;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v155);
  if (SBYTE7(v130) < 0) {
    operator delete(__p[0]);
  }
  if ((v125.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v10 = HIBYTE(v125.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v10 = v125.__r_.__value_.__l.__size_;
  }
  uint64_t v11 = &v108;
  std::string::basic_string[abi:ne180100]((uint64_t)&v108, v10 + 9);
  if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v11 = (std::string *)v108.__r_.__value_.__r.__words[0];
  }
  if (v10)
  {
    if ((v125.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v12 = &v125;
    }
    else {
      int v12 = (std::string *)v125.__r_.__value_.__r.__words[0];
    }
    memmove(v11, v12, v10);
  }
  strcpy((char *)v11 + v10, "__squared");
  int v94 = *(void **)this;
  if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v107, v125.__r_.__value_.__l.__data_, v125.__r_.__value_.__l.__size_);
  }
  else {
    std::string v107 = v125;
  }
  if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v147, v108.__r_.__value_.__l.__data_, v108.__r_.__value_.__l.__size_);
  }
  else {
    std::string v147 = v108;
  }
  uint64_t v104 = 0;
  std::string v105 = 0;
  unint64_t v106 = 0;
  __p[0] = &v104;
  LOBYTE(__p[1]) = 0;
  uint64_t v104 = (long long *)operator new(0x18uLL);
  std::string v105 = v104;
  unint64_t v106 = (char *)v104 + 24;
  std::string v105 = (long long *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v106, (long long *)&v147, (long long *)&v148, (std::string *)v104);
  memset(&__str, 0, sizeof(__str));
  uint64_t v13 = std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&__str, v122, v123, 0xAAAAAAAAAAAAAAABLL * (((char *)v123 - (char *)v122) >> 3));
  if (*((_DWORD *)a2 + 35) == 1290)
  {
    BOOL v14 = a2[16];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v13);
    BOOL v14 = &CoreML::Specification::_ReduceSumSquareLayerParams_default_instance_;
  }
  uint64_t v99 = 0;
  uint64_t v100 = 0;
  uint64_t v97 = &unk_1EF0D73E8;
  unint64_t v98 = 0;
  int v15 = *((_DWORD *)v14 + 4);
  if (v15)
  {
    google::protobuf::RepeatedField<double>::Reserve((unsigned int *)&v99, v15);
    memcpy((void *)(v100 + 8), (const void *)(v14[3] + 8), 8 * *((int *)v14 + 4));
    LODWORD(v99) = *((_DWORD *)v14 + 4);
  }
  int v102 = 0;
  uint64_t v16 = v14[1];
  if (v16) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&v98, v16 & 0xFFFFFFFFFFFFFFFELL);
  }
  __int16 v101 = *((_WORD *)v14 + 18);
  unint64_t v17 = (uint64_t **)*((void *)this + 1);
  v155.__r_.__value_.__r.__words[0] = (std::string::size_type)v119;
  uint64_t v18 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v17, v119, (long long **)&v155);
  long long v95 = *(_OWORD *)(v18 + 72);
  BOOL v19 = (const void *)*((void *)v18 + 12);
  memset(v96, 0, sizeof(v96));
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v96, v19, *((void *)v18 + 13), (uint64_t)(*((void *)v18 + 13) - (void)v19) >> 2);
  int v91 = this;
  int v92 = v101;
  uint64_t v20 = v99;
  int v93 = HIBYTE(v101);
  BOOL v21 = HIBYTE(v101) != 0;
  if ((int)v99 >= 1)
  {
    unint64_t v22 = 0;
    uint64_t v23 = 0;
    unint64_t v24 = 0;
    uint64_t v25 = 0;
    while (1)
    {
      int v26 = *(_DWORD *)(v100 + 8 * v25 + 8);
      if (v26 < 0)
      {
        if ((unint64_t)v23 >= v24)
        {
          uint64_t v34 = v23 - v22;
          unint64_t v35 = v34 + 1;
          if ((unint64_t)(v34 + 1) >> 62) {
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
          }
          if ((uint64_t)(v24 - (void)v22) >> 1 > v35) {
            unint64_t v35 = (uint64_t)(v24 - (void)v22) >> 1;
          }
          if (v24 - (unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v31 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v31 = v35;
          }
          if (v31) {
            unint64_t v31 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v31);
          }
          else {
            uint64_t v32 = 0;
          }
          int v36 = (_DWORD *)(v31 + 4 * v34);
          *int v36 = v26;
          unint64_t v33 = v36 + 1;
          while (v23 != v22)
          {
            int v38 = *--v23;
            *--int v36 = v38;
          }
          goto LABEL_79;
        }
      }
      else
      {
        int v27 = DWORD1(v95);
        if (v95 == 1) {
          int v28 = 4;
        }
        else {
          int v28 = 5;
        }
        if (DWORD1(v95) == -1) {
          int v27 = v28;
        }
        v26 -= v27;
        if ((unint64_t)v23 >= v24)
        {
          uint64_t v29 = v23 - v22;
          unint64_t v30 = v29 + 1;
          if ((unint64_t)(v29 + 1) >> 62) {
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
          }
          if ((uint64_t)(v24 - (void)v22) >> 1 > v30) {
            unint64_t v30 = (uint64_t)(v24 - (void)v22) >> 1;
          }
          if (v24 - (unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v31 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v31 = v30;
          }
          if (v31) {
            unint64_t v31 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v31);
          }
          else {
            uint64_t v32 = 0;
          }
          int v36 = (_DWORD *)(v31 + 4 * v29);
          *int v36 = v26;
          unint64_t v33 = v36 + 1;
          while (v23 != v22)
          {
            int v37 = *--v23;
            *--int v36 = v37;
          }
LABEL_79:
          unint64_t v24 = v31 + 4 * v32;
          if (v22) {
            operator delete(v22);
          }
          unint64_t v22 = v36;
          goto LABEL_82;
        }
      }
      _DWORD *v23 = v26;
      unint64_t v33 = v23 + 1;
LABEL_82:
      ++v25;
      uint64_t v23 = v33;
      if (v25 == v20) {
        goto LABEL_85;
      }
    }
  }
  unint64_t v22 = 0;
  unint64_t v33 = 0;
LABEL_85:
  std::__sort<std::__less<int,int> &,int *>();
  unint64_t v39 = v33 - v22;
  int v40 = DWORD1(v95);
  if (v95 == 1) {
    int v41 = 4;
  }
  else {
    int v41 = 5;
  }
  if (DWORD1(v95) == -1) {
    int v40 = v41;
  }
  int v42 = (char *)v91;
  if (!v93 && v40 == v39)
  {
    if (v33 == v22)
    {
      BOOL v21 = 1;
    }
    else
    {
      if (v39 <= 1) {
        uint64_t v43 = 1;
      }
      else {
        uint64_t v43 = v33 - v22;
      }
      uint64_t v44 = v43 - 1;
      int v45 = -(int)v39;
      long long v46 = v22;
      do
      {
        int v48 = *v46++;
        int v47 = v48;
        BOOL v50 = v44-- != 0;
        BOOL v21 = v45 == v47;
        if (v45 != v47) {
          break;
        }
        ++v45;
      }
      while (v50);
    }
  }
  if (v39 == 3)
  {
    if (*v22 == -3 && v22[1] == -2)
    {
      BOOL v52 = 0;
      BOOL v51 = v22[2] == -1;
      goto LABEL_112;
    }
  }
  else if (v39 == 2 && *v22 == -2)
  {
    BOOL v51 = 0;
    BOOL v52 = v22[1] == -1;
    goto LABEL_112;
  }
  BOOL v52 = 0;
  BOOL v51 = 0;
LABEL_112:
  if (*((char *)v104 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v155, *(const std::string::value_type **)v104, *((void *)v104 + 1));
  }
  else
  {
    long long v53 = *v104;
    v155.__r_.__value_.__r.__words[2] = *((void *)v104 + 2);
    *(_OWORD *)&v155.__r_.__value_.__l.__data_ = v53;
  }
  if (*(char *)(__str.__r_.__value_.__r.__words[0] + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v145, *(const std::string::value_type **)__str.__r_.__value_.__l.__data_, *(void *)(__str.__r_.__value_.__r.__words[0] + 8));
  }
  else
  {
    long long v54 = *(_OWORD *)__str.__r_.__value_.__l.__data_;
    v145.__r_.__value_.__r.__words[2] = *(void *)(__str.__r_.__value_.__r.__words[0] + 16);
    *(_OWORD *)&v145.__r_.__value_.__l.__data_ = v54;
  }
  if (v21 || v52 || v51)
  {
    __p[1] = (void *)0x100000007;
    long long v130 = 0uLL;
    *(void *)&long long v131 = 0xFFFFFFFF00000000;
    __p[0] = (void *)0x358637BD00000000;
    BYTE8(v131) = 0;
    if (v21 || v52)
    {
      if (v21) {
        int v55 = 31;
      }
      else {
        int v55 = 3;
      }
      LODWORD(__p[1]) = v55;
    }
    memset(&v144, 0, sizeof(v144));
    std::string::operator=(&v145, (const std::string *)__str.__r_.__value_.__l.__data_);
    if (v92)
    {
      std::string::operator=(&v144, &v107);
    }
    else
    {
      if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v81 = HIBYTE(v145.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v81 = v145.__r_.__value_.__l.__size_;
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v143, v81 + 11);
      if ((v143.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v82 = &v143;
      }
      else {
        uint64_t v82 = (std::string *)v143.__r_.__value_.__r.__words[0];
      }
      if (v81)
      {
        if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string v83 = &v145;
        }
        else {
          std::string v83 = (std::string *)v145.__r_.__value_.__r.__words[0];
        }
        memmove(v82, v83, v81);
      }
      strcpy((char *)v82 + v81, "_presqueeze");
      if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v145.__r_.__value_.__l.__data_);
      }
      std::string v145 = v143;
      if ((v107.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v84 = HIBYTE(v107.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v84 = v107.__r_.__value_.__l.__size_;
      }
      int v85 = &v143;
      std::string::basic_string[abi:ne180100]((uint64_t)&v143, v84 + 11);
      if ((v143.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        int v85 = (std::string *)v143.__r_.__value_.__r.__words[0];
      }
      if (v84)
      {
        if ((v107.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v86 = &v107;
        }
        else {
          uint64_t v86 = (std::string *)v107.__r_.__value_.__r.__words[0];
        }
        memmove(v85, v86, v84);
      }
      strcpy((char *)v85 + v84, "_presqueeze");
      if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v144.__r_.__value_.__l.__data_);
      }
      std::string v144 = v143;
    }
    std::string::basic_string[abi:ne180100]<0>(&v143, "reduce");
    memset(&v153, 0, sizeof(v153));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v153, v104, v105, 0xAAAAAAAAAAAAAAABLL * (((char *)v105 - (char *)v104) >> 3));
    if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v151, v145.__r_.__value_.__l.__data_, v145.__r_.__value_.__l.__size_);
    }
    else {
      std::string v151 = v145;
    }
    uint64_t v139 = 0;
    uint64_t v138 = 0;
    long long v140 = 0;
    v149.__r_.__value_.__r.__words[0] = (std::string::size_type)&v138;
    v149.__r_.__value_.__s.__data_[8] = 0;
    uint64_t v138 = (long long *)operator new(0x18uLL);
    uint64_t v139 = v138;
    long long v140 = (char *)v138 + 24;
    uint64_t v139 = (long long *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v140, (long long *)&v151, (long long *)&v152, (std::string *)v138);
    Espresso::sequential_builder::add<Espresso::reduce_params_t>(&v141, v94, (uint64_t)&v143, (uint64_t)&v144, (uint64_t)__p, (long long *)v153.__r_.__value_.__l.__data_, (long long *)v153.__r_.__value_.__l.__size_, &v138);
    if (v142) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v142);
    }
    v149.__r_.__value_.__r.__words[0] = (std::string::size_type)&v138;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v149);
    if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v151.__r_.__value_.__l.__data_);
    }
    v151.__r_.__value_.__r.__words[0] = (std::string::size_type)&v153;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v151);
    if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v143.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v144.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    if ((int)v20 < 1)
    {
      if (v92) {
        goto LABEL_282;
      }
      long long v135 = 0u;
      memset(v136, 0, sizeof(v136));
      long long v133 = 0u;
      long long v134 = 0u;
      long long v131 = 0u;
      long long v132 = 0u;
      *(_OWORD *)std::string __p = 0u;
      long long v130 = 0u;
      int v137 = 1;
      HIDWORD(__p[0]) = v20;
      goto LABEL_271;
    }
    for (unint64_t i = 0; i != v20; ++i)
    {
      __p[1] = (void *)0x100000007;
      long long v130 = 0uLL;
      LODWORD(v131) = 0;
      __p[0] = (void *)0x358637BD00000000;
      BYTE8(v131) = 1;
      DWORD1(v131) = *(void *)(v100 + 8 * i + 8);
      memset(&v144, 0, sizeof(v144));
      if (i >= (v20 - 1))
      {
        if (v92)
        {
          std::string::operator=(&v145, (const std::string *)__str.__r_.__value_.__l.__data_);
          std::string::operator=(&v144, &v107);
        }
        else
        {
          std::string::size_type v74 = __str.__r_.__value_.__r.__words[0];
          if (*(char *)(__str.__r_.__value_.__r.__words[0] + 23) >= 0) {
            size_t v75 = *(unsigned __int8 *)(__str.__r_.__value_.__r.__words[0] + 23);
          }
          else {
            size_t v75 = *(void *)(__str.__r_.__value_.__r.__words[0] + 8);
          }
          std::string::basic_string[abi:ne180100]((uint64_t)&v143, v75 + 11);
          if ((v143.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v76 = &v143;
          }
          else {
            std::string::size_type v76 = (std::string *)v143.__r_.__value_.__r.__words[0];
          }
          if (v75)
          {
            if (*(char *)(v74 + 23) >= 0) {
              uint64_t v77 = (const void *)v74;
            }
            else {
              uint64_t v77 = *(const void **)v74;
            }
            memmove(v76, v77, v75);
          }
          strcpy((char *)v76 + v75, "_presqueeze");
          if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v145.__r_.__value_.__l.__data_);
          }
          std::string v145 = v143;
          if ((v107.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v78 = HIBYTE(v107.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v78 = v107.__r_.__value_.__l.__size_;
          }
          std::string::basic_string[abi:ne180100]((uint64_t)&v143, v78 + 11);
          if ((v143.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v79 = &v143;
          }
          else {
            uint64_t v79 = (std::string *)v143.__r_.__value_.__r.__words[0];
          }
          if (v78)
          {
            if ((v107.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              unsigned int v80 = &v107;
            }
            else {
              unsigned int v80 = (std::string *)v107.__r_.__value_.__r.__words[0];
            }
            memmove(v79, v80, v78);
          }
          strcpy((char *)v79 + v78, "_presqueeze");
          if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v144.__r_.__value_.__l.__data_);
          }
          std::string v144 = v143;
        }
      }
      else
      {
        char v57 = v104;
        if (*((char *)v104 + 23) >= 0) {
          size_t v58 = *((unsigned __int8 *)v104 + 23);
        }
        else {
          size_t v58 = *((void *)v104 + 1);
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&v143, v58 + 18);
        if ((v143.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v59 = &v143;
        }
        else {
          std::string::size_type v59 = (std::string *)v143.__r_.__value_.__r.__words[0];
        }
        if (v58)
        {
          if (*((char *)v57 + 23) >= 0) {
            long long v60 = v57;
          }
          else {
            long long v60 = *(long long **)v57;
          }
          memmove(v59, v60, v58);
        }
        strcpy((char *)v59 + v58, "__reduction_axis__");
        std::to_string(&v153, i + 1);
        if ((v153.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v61 = &v153;
        }
        else {
          std::string::size_type v61 = (std::string *)v153.__r_.__value_.__r.__words[0];
        }
        if ((v153.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v62 = HIBYTE(v153.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v62 = v153.__r_.__value_.__l.__size_;
        }
        std::string::size_type v63 = std::string::append(&v143, (const std::string::value_type *)v61, v62);
        std::string::size_type v64 = v63->__r_.__value_.__r.__words[0];
        v149.__r_.__value_.__r.__words[0] = v63->__r_.__value_.__l.__size_;
        *(std::string::size_type *)((char *)v149.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v63->__r_.__value_.__r.__words[1] + 7);
        char v65 = HIBYTE(v63->__r_.__value_.__r.__words[2]);
        v63->__r_.__value_.__l.__size_ = 0;
        v63->__r_.__value_.__r.__words[2] = 0;
        v63->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v145.__r_.__value_.__l.__data_);
        }
        v145.__r_.__value_.__r.__words[0] = v64;
        v145.__r_.__value_.__l.__size_ = v149.__r_.__value_.__r.__words[0];
        *(std::string::size_type *)((char *)&v145.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v149.__r_.__value_.__r.__words + 7);
        *((unsigned char *)&v145.__r_.__value_.__s + 23) = v65;
        if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v153.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v143.__r_.__value_.__l.__data_);
        }
        if ((v107.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v66 = HIBYTE(v107.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v66 = v107.__r_.__value_.__l.__size_;
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&v143, v66 + 18);
        if ((v143.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v67 = &v143;
        }
        else {
          std::string::size_type v67 = (std::string *)v143.__r_.__value_.__r.__words[0];
        }
        if (v66)
        {
          if ((v107.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unint64_t v68 = &v107;
          }
          else {
            unint64_t v68 = (std::string *)v107.__r_.__value_.__r.__words[0];
          }
          memmove(v67, v68, v66);
        }
        strcpy((char *)v67 + v66, "__reduction_axis__");
        std::to_string(&v153, i);
        if ((v153.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v69 = &v153;
        }
        else {
          std::string::size_type v69 = (std::string *)v153.__r_.__value_.__r.__words[0];
        }
        if ((v153.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v70 = HIBYTE(v153.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v70 = v153.__r_.__value_.__l.__size_;
        }
        uint64_t v71 = std::string::append(&v143, (const std::string::value_type *)v69, v70);
        std::string::size_type v72 = v71->__r_.__value_.__r.__words[0];
        v149.__r_.__value_.__r.__words[0] = v71->__r_.__value_.__l.__size_;
        *(std::string::size_type *)((char *)v149.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v71->__r_.__value_.__r.__words[1] + 7);
        char v73 = HIBYTE(v71->__r_.__value_.__r.__words[2]);
        v71->__r_.__value_.__l.__size_ = 0;
        v71->__r_.__value_.__r.__words[2] = 0;
        v71->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v144.__r_.__value_.__l.__data_);
        }
        v144.__r_.__value_.__r.__words[0] = v72;
        v144.__r_.__value_.__l.__size_ = v149.__r_.__value_.__r.__words[0];
        *(std::string::size_type *)((char *)&v144.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v149.__r_.__value_.__r.__words + 7);
        *((unsigned char *)&v144.__r_.__value_.__s + 23) = v73;
        if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v153.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v143.__r_.__value_.__l.__data_);
        }
      }
      std::string::basic_string[abi:ne180100]<0>(&v143, "reduce");
      if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v153, v155.__r_.__value_.__l.__data_, v155.__r_.__value_.__l.__size_);
      }
      else {
        std::string v153 = v155;
      }
      uint64_t v139 = 0;
      uint64_t v138 = 0;
      long long v140 = 0;
      v149.__r_.__value_.__r.__words[0] = (std::string::size_type)&v138;
      v149.__r_.__value_.__s.__data_[8] = 0;
      uint64_t v138 = (long long *)operator new(0x18uLL);
      uint64_t v139 = v138;
      long long v140 = (char *)v138 + 24;
      uint64_t v139 = (long long *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v140, (long long *)&v153, (long long *)&v154, (std::string *)v138);
      if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v149, v145.__r_.__value_.__l.__data_, v145.__r_.__value_.__l.__size_);
      }
      else {
        std::string v149 = v145;
      }
      memset(&v151, 0, sizeof(v151));
      v126.__r_.__value_.__r.__words[0] = (std::string::size_type)&v151;
      v126.__r_.__value_.__s.__data_[8] = 0;
      v151.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
      v151.__r_.__value_.__l.__size_ = v151.__r_.__value_.__r.__words[0];
      v151.__r_.__value_.__r.__words[2] = v151.__r_.__value_.__r.__words[0] + 24;
      v151.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v151.__r_.__value_.__r.__words[2], (long long *)&v149, (long long *)&v150, (std::string *)v151.__r_.__value_.__l.__data_);
      Espresso::sequential_builder::add<Espresso::reduce_params_t>(&v141, v94, (uint64_t)&v143, (uint64_t)&v144, (uint64_t)__p, v138, v139, (long long **)&v151);
      if (v142) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v142);
      }
      v126.__r_.__value_.__r.__words[0] = (std::string::size_type)&v151;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v126);
      if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v149.__r_.__value_.__l.__data_);
      }
      v149.__r_.__value_.__r.__words[0] = (std::string::size_type)&v138;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v149);
      if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v153.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v143.__r_.__value_.__l.__data_);
      }
      std::string::operator=(&v155, &v145);
      if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v144.__r_.__value_.__l.__data_);
      }
    }
  }
  int v42 = (char *)v91;
  if (v92) {
    goto LABEL_282;
  }
  long long v135 = 0u;
  memset(v136, 0, sizeof(v136));
  long long v133 = 0u;
  long long v134 = 0u;
  long long v131 = 0u;
  long long v132 = 0u;
  *(_OWORD *)std::string __p = 0u;
  long long v130 = 0u;
  int v137 = 1;
  if ((int)v20 >= 32) {
    LODWORD(v87) = 32;
  }
  else {
    LODWORD(v87) = v20;
  }
  HIDWORD(__p[0]) = v87;
  if ((int)v20 >= 1)
  {
    if ((int)v87 <= 1) {
      uint64_t v87 = 1;
    }
    else {
      uint64_t v87 = v87;
    }
    float v88 = &__p[1];
    int v89 = (uint64_t *)(v100 + 8);
    do
    {
      uint64_t v90 = *v89++;
      *(_DWORD *)float v88 = v90;
      float v88 = (void **)((char *)v88 + 4);
      --v87;
    }
    while (v87);
  }
LABEL_271:
  if (HIBYTE(v101)) {
    v136[24] = 1;
  }
  std::string::basic_string[abi:ne180100]<0>(&v144, "squeeze");
  if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v149, v145.__r_.__value_.__l.__data_, v145.__r_.__value_.__l.__size_);
  }
  else {
    std::string v149 = v145;
  }
  memset(&v143, 0, sizeof(v143));
  v126.__r_.__value_.__r.__words[0] = (std::string::size_type)&v143;
  v126.__r_.__value_.__s.__data_[8] = 0;
  v143.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
  v143.__r_.__value_.__l.__size_ = v143.__r_.__value_.__r.__words[0];
  v143.__r_.__value_.__r.__words[2] = v143.__r_.__value_.__r.__words[0] + 24;
  v143.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v143.__r_.__value_.__r.__words[2], (long long *)&v149, (long long *)&v150, (std::string *)v143.__r_.__value_.__l.__data_);
  memset(&v126, 0, sizeof(v126));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v126, (long long *)__str.__r_.__value_.__l.__data_, (long long *)__str.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(__str.__r_.__value_.__l.__size_ - __str.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add<Espresso::squeeze_params_t>(&v127, v94, (uint64_t)&v144, (uint64_t)&v107, (uint64_t)__p, (long long *)v143.__r_.__value_.__l.__data_, (long long *)v143.__r_.__value_.__l.__size_, (long long **)&v126);
  if (v128) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v128);
  }
  uint64_t v146 = &v126;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v146);
  uint64_t v146 = &v143;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v146);
  if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v149.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v144.__r_.__value_.__l.__data_);
  }
LABEL_282:
  if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v145.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v155.__r_.__value_.__l.__data_);
  }
  if (v22) {
    operator delete(v22);
  }
  if (v96[0]) {
    operator delete(v96[0]);
  }
  CoreML::Specification::ReduceSumSquareLayerParams::~ReduceSumSquareLayerParams((CoreML::Specification::ReduceSumSquareLayerParams *)&v97);
  __p[0] = &__str;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  __p[0] = &v104;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v147.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v107.__r_.__value_.__l.__data_);
  }
  LayerTranslator::defaultUnknownNdShape(v42, (uint64_t *)&v122);
  if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v108.__r_.__value_.__l.__data_);
  }
  __p[0] = &v119;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  __p[0] = &v122;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v125.__r_.__value_.__l.__data_);
  }
}

void sub_19EAB5D20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (SLOBYTE(STACK[0x2F7]) < 0) {
    operator delete((void *)STACK[0x2E0]);
  }
  if (SLOBYTE(STACK[0x317]) < 0) {
    operator delete((void *)STACK[0x300]);
  }
  if (*(char *)(v74 - 121) < 0) {
    operator delete(*(void **)(v74 - 144));
  }
  if (v73) {
    operator delete(v73);
  }
  if (a24) {
    operator delete(a24);
  }
  CoreML::Specification::ReduceSumSquareLayerParams::~ReduceSumSquareLayerParams((CoreML::Specification::ReduceSumSquareLayerParams *)&a27);
  STACK[0x210] = (unint64_t)&a33;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x210]);
  STACK[0x210] = (unint64_t)&a36;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x210]);
  if (SLOBYTE(STACK[0x337]) < 0) {
    operator delete((void *)STACK[0x320]);
  }
  if (a44 < 0) {
    operator delete(a39);
  }
  if (a51 < 0) {
    operator delete(a46);
  }
  STACK[0x210] = (unint64_t)&a67;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x210]);
  STACK[0x210] = (unint64_t)&a70;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x210]);
  if (a73 < 0) {
    operator delete(a72);
  }
  _Unwind_Resume(a1);
}

void LayerTranslator::addReduceLogSumExp(LayerTranslator *this, uint64_t **a2)
{
  *(void *)&long long v177 = *MEMORY[0x1E4F143B8];
  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  long long v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v143, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    long long v5 = *(_OWORD *)v4;
    v143.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v143.__r_.__value_.__l.__data_ = v5;
  }
  uint64_t v141 = 0;
  long long v140 = 0;
  uint64_t v142 = 0;
  int v137 = 0;
  uint64_t v138 = 0;
  uint64_t v139 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v140, (uint64_t *)&v137, *((void *)this + 1));
  v133[2] = 897988541;
  char v134 = 0;
  int v136 = 0;
  int v135 = 0;
  v133[0] = 27;
  v133[1] = 1065353216;
  uint64_t v6 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
  memset(&v130, 0, sizeof(v130));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v130, v137, v138, 0xAAAAAAAAAAAAAAABLL * (((char *)v138 - (char *)v137) >> 3));
  if ((v143.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v143.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v143.__r_.__value_.__l.__size_;
  }
  std::string::basic_string[abi:ne180100]((uint64_t)&v176, size + 5);
  if ((v176.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v8 = &v176;
  }
  else {
    int v8 = (std::string *)v176.__r_.__value_.__r.__words[0];
  }
  if (size)
  {
    if ((v143.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v9 = &v143;
    }
    else {
      uint64_t v9 = (std::string *)v143.__r_.__value_.__r.__words[0];
    }
    memmove(v8, v9, size);
  }
  strcpy((char *)v8 + size, "__exp");
  uint64_t v127 = 0;
  long long v128 = 0;
  long long v129 = 0;
  v174.__r_.__value_.__r.__words[0] = (std::string::size_type)&v127;
  v174.__r_.__value_.__s.__data_[8] = 0;
  uint64_t v127 = (std::string *)operator new(0x18uLL);
  long long v128 = v127;
  long long v129 = v127 + 1;
  long long v128 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v129, (long long *)&v176, &v177, v127);
  Espresso::sequential_builder::add<Espresso::elementwise_params>(&v131, v6, (uint64_t)__p, (uint64_t)&v143, (uint64_t)v133, (long long *)v130.__r_.__value_.__l.__data_, (long long *)v130.__r_.__value_.__l.__size_, (long long **)&v127);
  if (v132) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v132);
  }
  v174.__r_.__value_.__r.__words[0] = (std::string::size_type)&v127;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v174);
  if (SHIBYTE(v176.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v176.__r_.__value_.__l.__data_);
  }
  v176.__r_.__value_.__r.__words[0] = (std::string::size_type)&v130;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v176);
  if (SBYTE7(v148) < 0) {
    operator delete(__p[0]);
  }
  if ((v143.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v10 = HIBYTE(v143.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v10 = v143.__r_.__value_.__l.__size_;
  }
  std::string::basic_string[abi:ne180100]((uint64_t)&v126, v10 + 5);
  if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v11 = &v126;
  }
  else {
    uint64_t v11 = (std::string *)v126.__r_.__value_.__r.__words[0];
  }
  if (v10)
  {
    if ((v143.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v12 = &v143;
    }
    else {
      int v12 = (std::string *)v143.__r_.__value_.__r.__words[0];
    }
    memmove(v11, v12, v10);
  }
  strcpy((char *)v11 + v10, "__exp");
  uint64_t v13 = v140;
  if (*((char *)v140 + 23) >= 0) {
    size_t v14 = *((unsigned __int8 *)v140 + 23);
  }
  else {
    size_t v14 = *((void *)v140 + 1);
  }
  int v15 = &v125;
  std::string::basic_string[abi:ne180100]((uint64_t)&v125, v14 + 8);
  if ((v125.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    int v15 = (std::string *)v125.__r_.__value_.__r.__words[0];
  }
  if (v14)
  {
    if (*((char *)v13 + 23) >= 0) {
      uint64_t v16 = v13;
    }
    else {
      uint64_t v16 = *(long long **)v13;
    }
    memmove(v15, v16, v14);
  }
  strcpy((char *)v15 + v14, "__prelog");
  uint64_t v99 = *(void **)this;
  if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v124, v143.__r_.__value_.__l.__data_, v143.__r_.__value_.__l.__size_);
  }
  else {
    std::string v124 = v143;
  }
  if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v166, v126.__r_.__value_.__l.__data_, v126.__r_.__value_.__l.__size_);
  }
  else {
    std::string v166 = v126;
  }
  uint64_t v121 = 0;
  uint64_t v122 = 0;
  std::string v123 = 0;
  __p[0] = &v121;
  LOBYTE(__p[1]) = 0;
  uint64_t v121 = (long long *)operator new(0x18uLL);
  uint64_t v122 = v121;
  std::string v123 = (char *)v121 + 24;
  uint64_t v122 = (long long *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v123, (long long *)&v166, (long long *)&v167, (std::string *)v121);
  if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v164, v125.__r_.__value_.__l.__data_, v125.__r_.__value_.__l.__size_);
  }
  else {
    std::string v164 = v125;
  }
  std::string __str = 0;
  uint64_t v119 = 0;
  uint64_t v120 = 0;
  __p[0] = &__str;
  LOBYTE(__p[1]) = 0;
  std::string __str = (std::string *)operator new(0x18uLL);
  uint64_t v119 = (long long *)__str;
  uint64_t v120 = __str + 1;
  unint64_t v17 = (long long *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v120, (long long *)&v164, (long long *)&v165, __str);
  uint64_t v119 = v17;
  if (*((_DWORD *)a2 + 35) == 1295)
  {
    uint64_t v18 = a2[16];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v17);
    uint64_t v18 = &CoreML::Specification::_ReduceLogSumExpLayerParams_default_instance_;
  }
  uint64_t v114 = 0;
  uint64_t v115 = 0;
  std::string v112 = &unk_1EF0D7350;
  unint64_t v113 = 0;
  int v19 = *((_DWORD *)v18 + 4);
  if (v19)
  {
    google::protobuf::RepeatedField<double>::Reserve((unsigned int *)&v114, v19);
    memcpy((void *)(v115 + 8), (const void *)(v18[3] + 8), 8 * *((int *)v18 + 4));
    LODWORD(v114) = *((_DWORD *)v18 + 4);
  }
  int v117 = 0;
  uint64_t v20 = v18[1];
  if (v20) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&v113, v20 & 0xFFFFFFFFFFFFFFFELL);
  }
  __int16 v116 = *((_WORD *)v18 + 18);
  BOOL v21 = (uint64_t **)*((void *)this + 1);
  v176.__r_.__value_.__r.__words[0] = (std::string::size_type)v137;
  unint64_t v22 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v21, v137, (long long **)&v176);
  long long v23 = *(_OWORD *)(v22 + 72);
  long long v106 = *(_OWORD *)(v22 + 56);
  long long v107 = v23;
  unint64_t v24 = (const void *)*((void *)v22 + 12);
  uint64_t v108 = *((void *)v22 + 11);
  __int16 v109 = 0;
  int v110 = 0;
  uint64_t v111 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v109, v24, *((void *)v22 + 13), (uint64_t)(*((void *)v22 + 13) - (void)v24) >> 2);
  std::string v96 = (char *)this;
  int v97 = v116;
  uint64_t v25 = v114;
  int v98 = HIBYTE(v116);
  BOOL v26 = HIBYTE(v116) != 0;
  if ((int)v114 >= 1)
  {
    int v27 = 0;
    int v28 = 0;
    unint64_t v29 = 0;
    uint64_t v30 = 0;
    while (1)
    {
      int v31 = *(_DWORD *)(v115 + 8 * v30 + 8);
      if (v31 < 0)
      {
        if ((unint64_t)v28 >= v29)
        {
          uint64_t v39 = v28 - v27;
          unint64_t v40 = v39 + 1;
          if ((unint64_t)(v39 + 1) >> 62) {
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
          }
          if ((uint64_t)(v29 - (void)v27) >> 1 > v40) {
            unint64_t v40 = (uint64_t)(v29 - (void)v27) >> 1;
          }
          if (v29 - (unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v36 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v36 = v40;
          }
          if (v36) {
            unint64_t v36 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v36);
          }
          else {
            uint64_t v37 = 0;
          }
          int v41 = (_DWORD *)(v36 + 4 * v39);
          *int v41 = v31;
          int v38 = v41 + 1;
          while (v28 != v27)
          {
            int v43 = *--v28;
            *--int v41 = v43;
          }
          goto LABEL_93;
        }
      }
      else
      {
        int v32 = DWORD1(v107);
        if (v107 == 1) {
          int v33 = 4;
        }
        else {
          int v33 = 5;
        }
        if (DWORD1(v107) == -1) {
          int v32 = v33;
        }
        v31 -= v32;
        if ((unint64_t)v28 >= v29)
        {
          uint64_t v34 = v28 - v27;
          unint64_t v35 = v34 + 1;
          if ((unint64_t)(v34 + 1) >> 62) {
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
          }
          if ((uint64_t)(v29 - (void)v27) >> 1 > v35) {
            unint64_t v35 = (uint64_t)(v29 - (void)v27) >> 1;
          }
          if (v29 - (unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v36 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v36 = v35;
          }
          if (v36) {
            unint64_t v36 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v36);
          }
          else {
            uint64_t v37 = 0;
          }
          int v41 = (_DWORD *)(v36 + 4 * v34);
          *int v41 = v31;
          int v38 = v41 + 1;
          while (v28 != v27)
          {
            int v42 = *--v28;
            *--int v41 = v42;
          }
LABEL_93:
          unint64_t v29 = v36 + 4 * v37;
          if (v27) {
            operator delete(v27);
          }
          int v27 = v41;
          goto LABEL_96;
        }
      }
      *int v28 = v31;
      int v38 = v28 + 1;
LABEL_96:
      ++v30;
      int v28 = v38;
      if (v30 == v25) {
        goto LABEL_99;
      }
    }
  }
  int v27 = 0;
  int v38 = 0;
LABEL_99:
  std::__sort<std::__less<int,int> &,int *>();
  unint64_t v44 = v38 - v27;
  int v45 = DWORD1(v107);
  if (v107 == 1) {
    int v46 = 4;
  }
  else {
    int v46 = 5;
  }
  if (DWORD1(v107) == -1) {
    int v45 = v46;
  }
  if (!v98 && v45 == v44)
  {
    if (v38 == v27)
    {
      BOOL v26 = 1;
    }
    else
    {
      if (v44 <= 1) {
        uint64_t v47 = 1;
      }
      else {
        uint64_t v47 = v38 - v27;
      }
      uint64_t v48 = v47 - 1;
      int v49 = -(int)v44;
      BOOL v50 = v27;
      do
      {
        int v52 = *v50++;
        int v51 = v52;
        BOOL v54 = v48-- != 0;
        BOOL v26 = v49 == v51;
        if (v49 != v51) {
          break;
        }
        ++v49;
      }
      while (v54);
    }
  }
  if (v44 == 3)
  {
    if (*v27 == -3 && v27[1] == -2)
    {
      BOOL v56 = 0;
      BOOL v55 = v27[2] == -1;
      goto LABEL_126;
    }
  }
  else if (v44 == 2 && *v27 == -2)
  {
    BOOL v55 = 0;
    BOOL v56 = v27[1] == -1;
    goto LABEL_126;
  }
  BOOL v56 = 0;
  BOOL v55 = 0;
LABEL_126:
  if (*((char *)v121 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v176, *(const std::string::value_type **)v121, *((void *)v121 + 1));
  }
  else
  {
    long long v57 = *v121;
    v176.__r_.__value_.__r.__words[2] = *((void *)v121 + 2);
    *(_OWORD *)&v176.__r_.__value_.__l.__data_ = v57;
  }
  if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v174, __str->__r_.__value_.__l.__data_, __str->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v58 = *(_OWORD *)&__str->__r_.__value_.__l.__data_;
    v174.__r_.__value_.__r.__words[2] = __str->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v174.__r_.__value_.__l.__data_ = v58;
  }
  if (v26 || v56 || v55)
  {
    __p[1] = (void *)0x100000007;
    long long v148 = 0uLL;
    *(void *)&long long v149 = 0xFFFFFFFF00000000;
    __p[0] = (void *)0x358637BD00000000;
    BYTE8(v149) = 0;
    if (v26 || v56)
    {
      if (v26) {
        int v59 = 31;
      }
      else {
        int v59 = 3;
      }
      LODWORD(__p[1]) = v59;
    }
    memset(&v162, 0, sizeof(v162));
    std::string::operator=(&v174, __str);
    if (v97)
    {
      std::string::operator=(&v162, &v124);
    }
    else
    {
      if ((v174.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v85 = HIBYTE(v174.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v85 = v174.__r_.__value_.__l.__size_;
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v161, v85 + 11);
      if ((v161.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v86 = &v161;
      }
      else {
        uint64_t v86 = (std::string *)v161.__r_.__value_.__r.__words[0];
      }
      if (v85)
      {
        if ((v174.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v87 = &v174;
        }
        else {
          uint64_t v87 = (std::string *)v174.__r_.__value_.__r.__words[0];
        }
        memmove(v86, v87, v85);
      }
      strcpy((char *)v86 + v85, "_presqueeze");
      if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v174.__r_.__value_.__l.__data_);
      }
      std::string v174 = v161;
      if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v88 = HIBYTE(v124.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v88 = v124.__r_.__value_.__l.__size_;
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v161, v88 + 11);
      if ((v161.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v89 = &v161;
      }
      else {
        int v89 = (std::string *)v161.__r_.__value_.__r.__words[0];
      }
      if (v88)
      {
        if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v90 = &v124;
        }
        else {
          uint64_t v90 = (std::string *)v124.__r_.__value_.__r.__words[0];
        }
        memmove(v89, v90, v88);
      }
      strcpy((char *)v89 + v88, "_presqueeze");
      if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v162.__r_.__value_.__l.__data_);
      }
      std::string v162 = v161;
    }
    std::string::basic_string[abi:ne180100]<0>(&v161, "reduce");
    memset(&v172, 0, sizeof(v172));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v172, v121, v122, 0xAAAAAAAAAAAAAAABLL * (((char *)v122 - (char *)v121) >> 3));
    if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v170, v174.__r_.__value_.__l.__data_, v174.__r_.__value_.__l.__size_);
    }
    else {
      std::string v170 = v174;
    }
    uint64_t v157 = 0;
    long long v156 = 0;
    long long v158 = 0;
    v168.__r_.__value_.__r.__words[0] = (std::string::size_type)&v156;
    v168.__r_.__value_.__s.__data_[8] = 0;
    long long v156 = (long long *)operator new(0x18uLL);
    uint64_t v157 = v156;
    long long v158 = (char *)v156 + 24;
    uint64_t v157 = (long long *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v158, (long long *)&v170, (long long *)&v171, (std::string *)v156);
    Espresso::sequential_builder::add<Espresso::reduce_params_t>(&v159, v99, (uint64_t)&v161, (uint64_t)&v162, (uint64_t)__p, (long long *)v172.__r_.__value_.__l.__data_, (long long *)v172.__r_.__value_.__l.__size_, &v156);
    if (v160) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v160);
    }
    v168.__r_.__value_.__r.__words[0] = (std::string::size_type)&v156;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v168);
    if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v170.__r_.__value_.__l.__data_);
    }
    v170.__r_.__value_.__r.__words[0] = (std::string::size_type)&v172;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v170);
    if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v161.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v162.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    if ((int)v25 < 1)
    {
      if (v97) {
        goto LABEL_297;
      }
      long long v153 = 0u;
      memset(v154, 0, sizeof(v154));
      long long v151 = 0u;
      long long v152 = 0u;
      long long v149 = 0u;
      long long v150 = 0u;
      *(_OWORD *)std::string __p = 0u;
      long long v148 = 0u;
      int v155 = 1;
      HIDWORD(__p[0]) = v25;
      goto LABEL_286;
    }
    for (unint64_t i = 0; i != v25; ++i)
    {
      __p[1] = (void *)0x100000007;
      long long v148 = 0uLL;
      LODWORD(v149) = 0;
      __p[0] = (void *)0x358637BD00000000;
      BYTE8(v149) = 1;
      DWORD1(v149) = *(void *)(v115 + 8 * i + 8);
      memset(&v162, 0, sizeof(v162));
      if (i >= (v25 - 1))
      {
        if (v97)
        {
          std::string::operator=(&v174, __str);
          std::string::operator=(&v162, &v124);
        }
        else
        {
          std::string::size_type v78 = __str;
          if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v79 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v79 = __str->__r_.__value_.__l.__size_;
          }
          std::string::basic_string[abi:ne180100]((uint64_t)&v161, v79 + 11);
          if ((v161.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unsigned int v80 = &v161;
          }
          else {
            unsigned int v80 = (std::string *)v161.__r_.__value_.__r.__words[0];
          }
          if (v79)
          {
            if ((v78->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v81 = v78;
            }
            else {
              std::string::size_type v81 = (std::string *)v78->__r_.__value_.__r.__words[0];
            }
            memmove(v80, v81, v79);
          }
          strcpy((char *)v80 + v79, "_presqueeze");
          if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v174.__r_.__value_.__l.__data_);
          }
          std::string v174 = v161;
          if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v82 = HIBYTE(v124.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v82 = v124.__r_.__value_.__l.__size_;
          }
          std::string::basic_string[abi:ne180100]((uint64_t)&v161, v82 + 11);
          if ((v161.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string v83 = &v161;
          }
          else {
            std::string v83 = (std::string *)v161.__r_.__value_.__r.__words[0];
          }
          if (v82)
          {
            if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v84 = &v124;
            }
            else {
              std::string::size_type v84 = (std::string *)v124.__r_.__value_.__r.__words[0];
            }
            memmove(v83, v84, v82);
          }
          strcpy((char *)v83 + v82, "_presqueeze");
          if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v162.__r_.__value_.__l.__data_);
          }
          std::string v162 = v161;
        }
      }
      else
      {
        std::string::size_type v61 = v121;
        if (*((char *)v121 + 23) >= 0) {
          size_t v62 = *((unsigned __int8 *)v121 + 23);
        }
        else {
          size_t v62 = *((void *)v121 + 1);
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&v161, v62 + 18);
        if ((v161.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v63 = &v161;
        }
        else {
          std::string::size_type v63 = (std::string *)v161.__r_.__value_.__r.__words[0];
        }
        if (v62)
        {
          if (*((char *)v61 + 23) >= 0) {
            std::string::size_type v64 = v61;
          }
          else {
            std::string::size_type v64 = *(long long **)v61;
          }
          memmove(v63, v64, v62);
        }
        strcpy((char *)v63 + v62, "__reduction_axis__");
        std::to_string(&v172, i + 1);
        if ((v172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          char v65 = &v172;
        }
        else {
          char v65 = (std::string *)v172.__r_.__value_.__r.__words[0];
        }
        if ((v172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v66 = HIBYTE(v172.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v66 = v172.__r_.__value_.__l.__size_;
        }
        std::string::size_type v67 = std::string::append(&v161, (const std::string::value_type *)v65, v66);
        std::string::size_type v68 = v67->__r_.__value_.__r.__words[0];
        v168.__r_.__value_.__r.__words[0] = v67->__r_.__value_.__l.__size_;
        *(std::string::size_type *)((char *)v168.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v67->__r_.__value_.__r.__words[1] + 7);
        char v69 = HIBYTE(v67->__r_.__value_.__r.__words[2]);
        v67->__r_.__value_.__l.__size_ = 0;
        v67->__r_.__value_.__r.__words[2] = 0;
        v67->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v174.__r_.__value_.__l.__data_);
        }
        v174.__r_.__value_.__r.__words[0] = v68;
        v174.__r_.__value_.__l.__size_ = v168.__r_.__value_.__r.__words[0];
        *(std::string::size_type *)((char *)&v174.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v168.__r_.__value_.__r.__words + 7);
        *((unsigned char *)&v174.__r_.__value_.__s + 23) = v69;
        if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v172.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v161.__r_.__value_.__l.__data_);
        }
        if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v70 = HIBYTE(v124.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v70 = v124.__r_.__value_.__l.__size_;
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&v161, v70 + 18);
        if ((v161.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v71 = &v161;
        }
        else {
          uint64_t v71 = (std::string *)v161.__r_.__value_.__r.__words[0];
        }
        if (v70)
        {
          if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v72 = &v124;
          }
          else {
            std::string::size_type v72 = (std::string *)v124.__r_.__value_.__r.__words[0];
          }
          memmove(v71, v72, v70);
        }
        strcpy((char *)v71 + v70, "__reduction_axis__");
        std::to_string(&v172, i);
        if ((v172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          char v73 = &v172;
        }
        else {
          char v73 = (std::string *)v172.__r_.__value_.__r.__words[0];
        }
        if ((v172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v74 = HIBYTE(v172.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v74 = v172.__r_.__value_.__l.__size_;
        }
        size_t v75 = std::string::append(&v161, (const std::string::value_type *)v73, v74);
        std::string::size_type v76 = v75->__r_.__value_.__r.__words[0];
        v168.__r_.__value_.__r.__words[0] = v75->__r_.__value_.__l.__size_;
        *(std::string::size_type *)((char *)v168.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v75->__r_.__value_.__r.__words[1] + 7);
        char v77 = HIBYTE(v75->__r_.__value_.__r.__words[2]);
        v75->__r_.__value_.__l.__size_ = 0;
        v75->__r_.__value_.__r.__words[2] = 0;
        v75->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v162.__r_.__value_.__l.__data_);
        }
        v162.__r_.__value_.__r.__words[0] = v76;
        v162.__r_.__value_.__l.__size_ = v168.__r_.__value_.__r.__words[0];
        *(std::string::size_type *)((char *)&v162.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v168.__r_.__value_.__r.__words + 7);
        *((unsigned char *)&v162.__r_.__value_.__s + 23) = v77;
        if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v172.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v161.__r_.__value_.__l.__data_);
        }
      }
      std::string::basic_string[abi:ne180100]<0>(&v161, "reduce");
      if (SHIBYTE(v176.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v172, v176.__r_.__value_.__l.__data_, v176.__r_.__value_.__l.__size_);
      }
      else {
        std::string v172 = v176;
      }
      uint64_t v157 = 0;
      long long v156 = 0;
      long long v158 = 0;
      v168.__r_.__value_.__r.__words[0] = (std::string::size_type)&v156;
      v168.__r_.__value_.__s.__data_[8] = 0;
      long long v156 = (long long *)operator new(0x18uLL);
      uint64_t v157 = v156;
      long long v158 = (char *)v156 + 24;
      uint64_t v157 = (long long *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v158, (long long *)&v172, (long long *)&v173, (std::string *)v156);
      if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v168, v174.__r_.__value_.__l.__data_, v174.__r_.__value_.__l.__size_);
      }
      else {
        std::string v168 = v174;
      }
      memset(&v170, 0, sizeof(v170));
      v144.__r_.__value_.__r.__words[0] = (std::string::size_type)&v170;
      v144.__r_.__value_.__s.__data_[8] = 0;
      v170.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
      v170.__r_.__value_.__l.__size_ = v170.__r_.__value_.__r.__words[0];
      v170.__r_.__value_.__r.__words[2] = v170.__r_.__value_.__r.__words[0] + 24;
      v170.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v170.__r_.__value_.__r.__words[2], (long long *)&v168, (long long *)&v169, (std::string *)v170.__r_.__value_.__l.__data_);
      Espresso::sequential_builder::add<Espresso::reduce_params_t>(&v159, v99, (uint64_t)&v161, (uint64_t)&v162, (uint64_t)__p, v156, v157, (long long **)&v170);
      if (v160) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v160);
      }
      v144.__r_.__value_.__r.__words[0] = (std::string::size_type)&v170;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v144);
      if (SHIBYTE(v168.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v168.__r_.__value_.__l.__data_);
      }
      v168.__r_.__value_.__r.__words[0] = (std::string::size_type)&v156;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v168);
      if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v172.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v161.__r_.__value_.__l.__data_);
      }
      std::string::operator=(&v176, &v174);
      if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v162.__r_.__value_.__l.__data_);
      }
    }
  }
  if (v97) {
    goto LABEL_297;
  }
  long long v153 = 0u;
  memset(v154, 0, sizeof(v154));
  long long v151 = 0u;
  long long v152 = 0u;
  long long v149 = 0u;
  long long v150 = 0u;
  *(_OWORD *)std::string __p = 0u;
  long long v148 = 0u;
  int v155 = 1;
  if ((int)v25 >= 32) {
    LODWORD(v91) = 32;
  }
  else {
    LODWORD(v91) = v25;
  }
  HIDWORD(__p[0]) = v91;
  if ((int)v25 >= 1)
  {
    if ((int)v91 <= 1) {
      uint64_t v91 = 1;
    }
    else {
      uint64_t v91 = v91;
    }
    int v92 = &__p[1];
    int v93 = (uint64_t *)(v115 + 8);
    do
    {
      uint64_t v94 = *v93++;
      *(_DWORD *)int v92 = v94;
      int v92 = (void **)((char *)v92 + 4);
      --v91;
    }
    while (v91);
  }
LABEL_286:
  if (HIBYTE(v116)) {
    v154[24] = 1;
  }
  std::string::basic_string[abi:ne180100]<0>(&v162, "squeeze");
  if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v168, v174.__r_.__value_.__l.__data_, v174.__r_.__value_.__l.__size_);
  }
  else {
    std::string v168 = v174;
  }
  memset(&v161, 0, sizeof(v161));
  v144.__r_.__value_.__r.__words[0] = (std::string::size_type)&v161;
  v144.__r_.__value_.__s.__data_[8] = 0;
  v161.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
  v161.__r_.__value_.__l.__size_ = v161.__r_.__value_.__r.__words[0];
  v161.__r_.__value_.__r.__words[2] = v161.__r_.__value_.__r.__words[0] + 24;
  v161.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v161.__r_.__value_.__r.__words[2], (long long *)&v168, (long long *)&v169, (std::string *)v161.__r_.__value_.__l.__data_);
  memset(&v144, 0, sizeof(v144));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v144, (long long *)__str, v119, 0xAAAAAAAAAAAAAAABLL * (((char *)v119 - (char *)__str) >> 3));
  Espresso::sequential_builder::add<Espresso::squeeze_params_t>(&v145, v99, (uint64_t)&v162, (uint64_t)&v124, (uint64_t)__p, (long long *)v161.__r_.__value_.__l.__data_, (long long *)v161.__r_.__value_.__l.__size_, (long long **)&v144);
  if (v146) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v146);
  }
  std::string v163 = &v144;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v163);
  std::string v163 = &v161;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v163);
  if (SHIBYTE(v168.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v168.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v162.__r_.__value_.__l.__data_);
  }
LABEL_297:
  if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v174.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v176.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v176.__r_.__value_.__l.__data_);
  }
  if (v27) {
    operator delete(v27);
  }
  if (v109)
  {
    int v110 = v109;
    operator delete(v109);
  }
  CoreML::Specification::ReduceLogSumExpLayerParams::~ReduceLogSumExpLayerParams((CoreML::Specification::ReduceLogSumExpLayerParams *)&v112);
  __p[0] = &__str;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (SHIBYTE(v164.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v164.__r_.__value_.__l.__data_);
  }
  __p[0] = &v121;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v166.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v124.__r_.__value_.__l.__data_);
  }
  *(void *)&long long v148 = 897988541;
  BYTE8(v148) = 0;
  LODWORD(v150) = 0;
  HIDWORD(v149) = 0;
  __p[1] = (void *)1065353216;
  __p[0] = (void *)26;
  long long v95 = *(void **)v96;
  std::string::basic_string[abi:ne180100]<0>(&v176, "elementwise");
  if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v174, v125.__r_.__value_.__l.__data_, v125.__r_.__value_.__l.__size_);
  }
  else {
    std::string v174 = v125;
  }
  __int16 v101 = 0;
  int v102 = 0;
  uint64_t v103 = 0;
  v162.__r_.__value_.__r.__words[0] = (std::string::size_type)&v101;
  v162.__r_.__value_.__s.__data_[8] = 0;
  __int16 v101 = (long long *)operator new(0x18uLL);
  int v102 = v101;
  uint64_t v103 = (char *)v101 + 24;
  int v102 = (long long *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v103, (long long *)&v174, (long long *)&v175, (std::string *)v101);
  memset(&v100, 0, sizeof(v100));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v100, v140, v141, 0xAAAAAAAAAAAAAAABLL * (((char *)v141 - (char *)v140) >> 3));
  Espresso::sequential_builder::add<Espresso::elementwise_params>(&v104, v95, (uint64_t)&v176, (uint64_t)&v143, (uint64_t)__p, v101, v102, (long long **)&v100);
  if (v105) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v105);
  }
  v162.__r_.__value_.__r.__words[0] = (std::string::size_type)&v100;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v162);
  v162.__r_.__value_.__r.__words[0] = (std::string::size_type)&v101;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v162);
  if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v174.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v176.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v176.__r_.__value_.__l.__data_);
  }
  LayerTranslator::defaultUnknownNdShape(v96, (uint64_t *)&v140);
  if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v125.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v126.__r_.__value_.__l.__data_);
  }
  __p[0] = &v137;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  __p[0] = &v140;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v143.__r_.__value_.__l.__data_);
  }
}

void sub_19EAB754C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58,void *a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  if (SLOBYTE(STACK[0x347]) < 0) {
    operator delete((void *)STACK[0x330]);
  }
  if (*(char *)(v73 - 153) < 0) {
    operator delete(*(void **)(v73 - 176));
  }
  if (*(char *)(v73 - 121) < 0) {
    operator delete(*(void **)(v73 - 144));
  }
  if (v72) {
    operator delete(v72);
  }
  if (a32) {
    operator delete(a32);
  }
  CoreML::Specification::ReduceLogSumExpLayerParams::~ReduceLogSumExpLayerParams((CoreML::Specification::ReduceLogSumExpLayerParams *)&a35);
  STACK[0x260] = (unint64_t)&a41;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x260]);
  if (SLOBYTE(STACK[0x367]) < 0) {
    operator delete((void *)STACK[0x350]);
  }
  STACK[0x260] = (unint64_t)&a44;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x260]);
  if (SLOBYTE(STACK[0x387]) < 0) {
    operator delete((void *)STACK[0x370]);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a58 < 0) {
    operator delete(a53);
  }
  if (a64 < 0) {
    operator delete(a59);
  }
  STACK[0x260] = (unint64_t)&a72;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x260]);
  STACK[0x260] = (unint64_t)&STACK[0x208];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x260]);
  if (SLOBYTE(STACK[0x237]) < 0) {
    operator delete((void *)STACK[0x220]);
  }
  _Unwind_Resume(a1);
}

void LayerTranslator::addReverseSeq(LayerTranslator *this, uint64_t **a2)
{
  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  long long v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v25, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    long long v5 = *(_OWORD *)v4;
    v25.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v5;
  }
  unint64_t v22 = 0;
  long long v23 = 0;
  uint64_t v24 = 0;
  int v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v22, (uint64_t *)&v19, *((void *)this + 1));
  if (*((_DWORD *)a2 + 35) == 965)
  {
    size_t v7 = a2[16];
    int v17 = v7[2];
  }
  else
  {
    unint64_t inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    int v9 = *((_DWORD *)a2 + 35);
    int v17 = qword_1EB4E07B8;
    if (v9 == 965)
    {
      size_t v7 = a2[16];
    }
    else
    {
      CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
      size_t v7 = &CoreML::Specification::_ReverseSeqLayerParams_default_instance_;
    }
  }
  int v18 = v7[3];
  std::string::size_type v10 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(&__p, "reverse_seq");
  memset(&v12, 0, sizeof(v12));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v12, v19, v20, 0xAAAAAAAAAAAAAAABLL * (((char *)v20 - (char *)v19) >> 3));
  memset(&v11, 0, sizeof(v11));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v11, v22, v23, 0xAAAAAAAAAAAAAAABLL * (((char *)v23 - (char *)v22) >> 3));
  memset(&v27, 0, sizeof(v27));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v27, (long long *)v12.__r_.__value_.__l.__data_, (long long *)v12.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12.__r_.__value_.__l.__size_ - v12.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v26, 0, sizeof(v26));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v26, (long long *)v11.__r_.__value_.__l.__data_, (long long *)v11.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11.__r_.__value_.__l.__size_ - v11.__r_.__value_.__r.__words[0]) >> 3));
  LODWORD(v29.__r_.__value_.__l.__data_) = (***(uint64_t (****)(void))(v10[14] + 8))(*(void *)(v10[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  uint64_t v30 = v15;
  int v31 = v16;
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(&v29, 0, sizeof(v29));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v29, (long long *)v27.__r_.__value_.__l.__data_, (long long *)v27.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v27.__r_.__value_.__l.__size_ - v27.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v28, 0, sizeof(v28));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v28, (long long *)v26.__r_.__value_.__l.__data_, (long long *)v26.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26.__r_.__value_.__l.__size_ - v26.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  int v32 = &v28;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
  int v32 = &v29;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  if (*v10) {
    Espresso::sequential_builder::add_shape_from_kernel();
  }
  v29.__r_.__value_.__r.__words[0] = (std::string::size_type)&v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  v29.__r_.__value_.__r.__words[0] = (std::string::size_type)&v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  v29.__r_.__value_.__r.__words[0] = (std::string::size_type)&v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  v29.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  if (v14 < 0) {
    operator delete(__p);
  }
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v22);
  v29.__r_.__value_.__r.__words[0] = (std::string::size_type)&v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  v29.__r_.__value_.__r.__words[0] = (std::string::size_type)&v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
}

void sub_19EAB7C8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char **__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,std::__shared_weak_count *a22,uint64_t a23,char *a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36)
{
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }
  *(void *)(v36 - 5CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = &a36;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v36 - 56));
  *(void *)(v36 - 5CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = v36 - 144;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v36 - 56));
  *(void *)(v36 - 5CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = &a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v36 - 56));
  *(void *)(v36 - 5CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = &a12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v36 - 56));
  if (a20 < 0) {
    operator delete(__p);
  }
  std::string __p = &a24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  a24 = &a27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  if (a35 < 0) {
    operator delete(a30);
  }
  _Unwind_Resume(a1);
}

void LayerTranslator::addMaxBroadcastable(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  long long v4 = (long long *)*((void *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)v4, *((void *)v4 + 1));
  }
  else
  {
    long long v5 = *v4;
    v23.__r_.__value_.__r.__words[2] = *((void *)v4 + 2);
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v5;
  }
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  int v17 = 0;
  int v18 = 0;
  uint64_t v19 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v20, (uint64_t *)&v17, *((void *)this + 1));
  v13[2] = (void **)897988541;
  int v15 = 0;
  int v16 = 0;
  v13[0] = (void **)23;
  v13[1] = (void **)1065353216;
  char v14 = 1;
  uint64_t v6 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
  memset(&v8, 0, sizeof(v8));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v8, v17, v18, 0xAAAAAAAAAAAAAAABLL * (((char *)v18 - (char *)v17) >> 3));
  memset(&v7, 0, sizeof(v7));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v7, v20, v21, 0xAAAAAAAAAAAAAAABLL * (((char *)v21 - (char *)v20) >> 3));
  Espresso::sequential_builder::add<Espresso::elementwise_params>(&v11, v6, (uint64_t)__p, (uint64_t)&v23, (uint64_t)v13, (long long *)v8.__r_.__value_.__l.__data_, (long long *)v8.__r_.__value_.__l.__size_, (long long **)&v7);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  uint64_t v24 = &v7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  uint64_t v24 = &v8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v20);
  v13[0] = (void **)&v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v13);
  v13[0] = (void **)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v13);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
}

void sub_19EAB7F50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  a23 = v23 - 112;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  a23 = v23 - 88;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  if (*(char *)(v23 - 41) < 0) {
    operator delete(*(void **)(v23 - 64));
  }
  _Unwind_Resume(a1);
}

BOOL LayerTranslator::addLoadConstantND(LayerTranslator *this, uint64_t **a2)
{
  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  long long v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v70, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    long long v5 = *(_OWORD *)v4;
    v70.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v5;
  }
  std::string::size_type v67 = 0;
  std::string::size_type v68 = 0;
  uint64_t v69 = 0;
  memset(&v66, 0, sizeof(v66));
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v67, (uint64_t *)&v66, *((void *)this + 1));
  v6.__i_ = v66.__begin_;
  v7.__i_ = v66.__end_;
  v8.__i_ = std::vector<std::string>::erase(&v66, v6, v7).__i_;
  if (*((_DWORD *)a2 + 35) == 1070)
  {
    int v9 = a2[16];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v8.__i_);
    int v9 = &CoreML::Specification::_LoadConstantNDLayerParams_default_instance_;
  }
  uint64_t v62 = 0;
  uint64_t v63 = 0;
  long long v60 = (std::vector<std::string> *)&unk_1EF0D6A68;
  unint64_t v61 = 0;
  int v10 = *((_DWORD *)v9 + 4);
  if (v10)
  {
    google::protobuf::RepeatedField<double>::Reserve((unsigned int *)&v62, v10);
    memcpy((void *)(v63 + 8), (const void *)(v9[3] + 8), 8 * *((int *)v9 + 4));
    LODWORD(v62) = *((_DWORD *)v9 + 4);
  }
  int v65 = 0;
  uint64_t v11 = v9[1];
  if (v11) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&v61, v11 & 0xFFFFFFFFFFFFFFFELL);
  }
  if (v9 != &CoreML::Specification::_LoadConstantNDLayerParams_default_instance_ && v9[5]) {
    operator new();
  }
  std::string::size_type v64 = 0;
  long long v58 = xmmword_19EC7B870;
  unint64_t v59 = 0xFFFFFFFF00000001;
  if (!v62)
  {
    exceptiounint64_t n = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3C1380](exception, "Load Constant: shape must be of non empty");
    goto LABEL_109;
  }
  if ((int)v62 >= 6)
  {
    exceptiounint64_t n = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3C1380](exception, "Load Constant: can only handle rank 1 to 5");
LABEL_109:
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int v12 = *(_DWORD *)(v63 + 8 * ((int)v62 - 1) + 8);
  if ((int)v62 < 2)
  {
    int v14 = 1;
    int v13 = 1;
    goto LABEL_20;
  }
  int v13 = *(_DWORD *)(v63 + 8 * (v62 - 2) + 8);
  if (v62 == 2)
  {
    int v14 = 1;
LABEL_20:
    int v15 = 1;
    goto LABEL_21;
  }
  int v15 = *(_DWORD *)(v63 + 8 * (v62 - 3) + 8);
  if (v62 < 4)
  {
    int v14 = 1;
    goto LABEL_21;
  }
  int v14 = *(_DWORD *)(v63 + 8 * (v62 - 4) + 8);
  if (v62 == 4)
  {
LABEL_21:
    int v16 = 1;
    goto LABEL_22;
  }
  int v16 = *(_DWORD *)(v63 + 8 * (v62 - 5) + 8);
LABEL_22:
  HIDWORD(v58) = v14;
  LODWORD(v58) = v12;
  *(void *)((char *)&v58 + 4) = __PAIR64__(v15, v13);
  unint64_t v59 = __PAIR64__(v62, v16);
  int v17 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "load_constant");
  memset(&v53, 0, sizeof(v53));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v53, (long long *)v66.__begin_, (long long *)v66.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v66.__end_ - (char *)v66.__begin_) >> 3));
  memset(&v52, 0, sizeof(v52));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v52, v67, v68, 0xAAAAAAAAAAAAAAABLL * (((char *)v68 - (char *)v67) >> 3));
  Espresso::sequential_builder::add<Espresso::load_constant_params>(&v56, v17, (uint64_t)__p, (uint64_t)&v70, (uint64_t)&v58, (long long *)v53.__r_.__value_.__l.__data_, (long long *)v53.__r_.__value_.__l.__size_, (long long **)&v52);
  BOOL v50 = &v52;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v50);
  BOOL v50 = &v53;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v50);
  if (v55 < 0) {
    operator delete(__p[0]);
  }
  int v18 = v57;
  if (v57) {
    atomic_fetch_add_explicit(&v57->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v50, v58, SDWORD1(v58), SDWORD2(v58), v59 * HIDWORD(v58));
  if (v64) {
    uint64_t v19 = v64;
  }
  else {
    uint64_t v19 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  uint64_t v20 = v19[5];
  if (*(char *)(v20 + 23) < 0) {
    uint64_t v21 = *(void *)(v20 + 8);
  }
  else {
    uint64_t v21 = *(unsigned __int8 *)(v20 + 23);
  }
  uint64_t v22 = v19[6];
  uint64_t v23 = *(unsigned __int8 *)(v22 + 23);
  if (*(char *)(v22 + 23) < 0) {
    uint64_t v24 = *(void *)(v22 + 8);
  }
  else {
    uint64_t v24 = *(unsigned __int8 *)(v22 + 23);
  }
  int v25 = *((_DWORD *)v19 + 4);
  uint64_t v26 = v19[7];
  if (*(char *)(v26 + 23) < 0) {
    uint64_t v27 = *(void *)(v26 + 8);
  }
  else {
    uint64_t v27 = *(unsigned __int8 *)(v26 + 23);
  }
  if (v25 <= 0) {
    int v28 = 1;
  }
  else {
    int v28 = 2;
  }
  if (v21) {
    int v29 = v28;
  }
  else {
    int v29 = v25 > 0;
  }
  if (v24) {
    ++v29;
  }
  if (v27) {
    ++v29;
  }
  if (v25 > 0 || v29 != 1) {
    goto LABEL_64;
  }
  if ((*(unsigned char *)(v20 + 23) & 0x80) != 0)
  {
    if (*(void *)(v20 + 8)) {
      goto LABEL_64;
    }
  }
  else if (*(unsigned char *)(v20 + 23))
  {
    goto LABEL_64;
  }
  if ((v23 & 0x80) != 0) {
    uint64_t v23 = *(void *)(v22 + 8);
  }
  if (v19 != &CoreML::Specification::_WeightParams_default_instance_ && v23 && v19[8])
  {
    unint64_t v30 = v14 * v12 * v13 * v15 * v16;
    EspressoConverter::readFloatFromWeightParams((EspressoConverter *)__p, (const CoreML::Specification::WeightParams *)v19, v30);
    int v31 = __p[0];
    memcpy(v50[1].__r_.__value_.__l.__data_, __p[0], 4 * v30);
    if (v31) {
      operator delete(v31);
    }
    goto LABEL_66;
  }
LABEL_64:
  int WeightParamSize = EspressoConverter::getWeightParamSize((uint64_t)v19);
  if (WeightParamSize != DWORD1(v58) * DWORD2(v58) * v58 * HIDWORD(v58) * v59)
  {
    uint64_t v48 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3C1380](v48, "Load Constant: data size does not match provided shape");
    __cxa_throw(v48, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  EspressoConverter::copyWeightsToDataBlob((EspressoConverter *)v50[1].__r_.__value_.__l.__data_, v19, 4 * WeightParamSize);
LABEL_66:
  int v33 = v51;
  int v49 = v51;
  if (v51) {
    atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::generic_load_constant_kernel::set_constant_blob();
  if (v49) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v49);
  }
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v67);
  if (v64) {
    uint64_t v34 = v64;
  }
  else {
    uint64_t v34 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  uint64_t v35 = v34[5];
  uint64_t v36 = *(unsigned __int8 *)(v35 + 23);
  if (*(char *)(v35 + 23) < 0) {
    uint64_t v37 = *(void *)(v35 + 8);
  }
  else {
    uint64_t v37 = *(unsigned __int8 *)(v35 + 23);
  }
  uint64_t v38 = v34[6];
  if (*(char *)(v38 + 23) < 0) {
    uint64_t v39 = *(void *)(v38 + 8);
  }
  else {
    uint64_t v39 = *(unsigned __int8 *)(v38 + 23);
  }
  int v40 = *((_DWORD *)v34 + 4);
  uint64_t v41 = v34[7];
  if (*(char *)(v41 + 23) < 0) {
    uint64_t v42 = *(void *)(v41 + 8);
  }
  else {
    uint64_t v42 = *(unsigned __int8 *)(v41 + 23);
  }
  BOOL v43 = 0;
  if (v40 <= 0) {
    int v44 = 1;
  }
  else {
    int v44 = 2;
  }
  if (v37) {
    int v45 = v44;
  }
  else {
    int v45 = v40 > 0;
  }
  if (v39) {
    ++v45;
  }
  if (v42) {
    ++v45;
  }
  if (v40 <= 0 && v45 == 1)
  {
    if ((v36 & 0x80) != 0) {
      uint64_t v36 = *(void *)(v35 + 8);
    }
    BOOL v43 = v36 != 0;
  }
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  if (v57) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v57);
  }
  CoreML::Specification::LoadConstantNDLayerParams::~LoadConstantNDLayerParams((CoreML::Specification::LoadConstantNDLayerParams *)&v60);
  long long v60 = &v66;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v60);
  long long v60 = (std::vector<std::string> *)&v67;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v60);
  if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v70.__r_.__value_.__l.__data_);
  }
  return v43;
}

void sub_19EAB8618(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,std::__shared_weak_count *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p)
{
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  if (a27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a27);
  }
  CoreML::Specification::LoadConstantNDLayerParams::~LoadConstantNDLayerParams((CoreML::Specification::LoadConstantNDLayerParams *)&a31);
  a31 = v35 - 160;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a31);
  a31 = v35 - 136;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a31);
  if (*(char *)(v35 - 89) < 0) {
    operator delete(*(void **)(v35 - 112));
  }
  _Unwind_Resume(a1);
}

void LayerTranslator::addScatterAlongAxis(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  long long v4 = (long long *)*((void *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v43, *(const std::string::value_type **)v4, *((void *)v4 + 1));
  }
  else
  {
    long long v5 = *v4;
    v43.__r_.__value_.__r.__words[2] = *((void *)v4 + 2);
    *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v5;
  }
  int v40 = 0;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v40, (uint64_t *)&v37, *((void *)this + 1));
  unsigned int v35 = 0;
  __int16 v36 = 257;
  if (*((_DWORD *)a2 + 35) == 954)
  {
    std::vector<std::string>::const_iterator v7 = (uint64_t *)*((void *)a2 + 16);
    uint64_t v8 = v7[2];
    int v33 = 2;
    int v34 = v8;
  }
  else
  {
    unint64_t inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    int v10 = *((_DWORD *)a2 + 35);
    int v33 = 2;
    int v34 = qword_1EB4E1940;
    if (v10 == 954)
    {
      std::vector<std::string>::const_iterator v7 = (uint64_t *)*((void *)a2 + 16);
    }
    else
    {
      CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
      std::vector<std::string>::const_iterator v7 = &CoreML::Specification::_ScatterAlongAxisLayerParams_default_instance_;
    }
  }
  int v29 = &unk_1EF0D7B08;
  v30[0] = 0;
  int v32 = 0;
  uint64_t v11 = v7[1];
  if (v11) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((unint64_t *)v30, v11 & 0xFFFFFFFFFFFFFFFELL);
  }
  uint64_t v12 = v7[2];
  unsigned int v13 = *((_DWORD *)v7 + 6);
  unsigned int v31 = v13;
  v30[1] = v12;
  if (v13 >= 7)
  {
    if (v13 == 0x80000000 || v13 == 0x7FFFFFFF)
    {
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
      int v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"ScatterAlongAxis layer: '", 25);
      uint64_t v16 = *((void *)a2 + 14);
      int v17 = *(char *)(v16 + 23);
      if (v17 >= 0) {
        uint64_t v18 = *((void *)a2 + 14);
      }
      else {
        uint64_t v18 = *(void *)v16;
      }
      if (v17 >= 0) {
        uint64_t v19 = *(unsigned __int8 *)(v16 + 23);
      }
      else {
        uint64_t v19 = *(void *)(v16 + 8);
      }
      uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, v18, v19);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"': unknown value for parameter 'mode'.", 38);
      exceptiounint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::runtime_error::runtime_error(exception, &v26);
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  else
  {
    unsigned int v35 = v13;
  }
  int v14 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "scatter_nd");
  memset(&v23, 0, sizeof(v23));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v23, v37, v38, 0xAAAAAAAAAAAAAAABLL * (((char *)v38 - (char *)v37) >> 3));
  memset(&v22, 0, sizeof(v22));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v22, v40, v41, 0xAAAAAAAAAAAAAAABLL * (((char *)v41 - (char *)v40) >> 3));
  Espresso::sequential_builder::add<Espresso::scatter_nd_params_t>(&v24, v14, (uint64_t)__p, (uint64_t)&v43, (uint64_t)&v33, (long long *)v23.__r_.__value_.__l.__data_, (long long *)v23.__r_.__value_.__l.__size_, (long long **)&v22);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  v26.__r_.__value_.__r.__words[0] = (std::string::size_type)&v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
  v26.__r_.__value_.__r.__words[0] = (std::string::size_type)&v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
  if (SHIBYTE(v28) < 0) {
    operator delete(__p[0]);
  }
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v40);
  int v29 = &unk_1EF0D7B08;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v30);
  __p[0] = &v37;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  __p[0] = &v40;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
}

void sub_19EAB8A80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a22 < 0)
  {
    operator delete(__p);
    if ((v31 & 1) == 0)
    {
LABEL_6:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a23);
      *(void *)(v32 - 17CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = v29;
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v28);
      a23 = (void *)(v32 - 128);
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
      a23 = (void *)(v32 - 104);
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
      if (*(char *)(v32 - 57) < 0) {
        operator delete(*(void **)(v32 - 80));
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v31)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v30);
  goto LABEL_6;
}

void LayerTranslator::addBroadcastToLike(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  long long v4 = (long long *)*((void *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)v4, *((void *)v4 + 1));
  }
  else
  {
    long long v5 = *v4;
    v23.__r_.__value_.__r.__words[2] = *((void *)v4 + 2);
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v5;
  }
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  int v17 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v20, (uint64_t *)&v17, *((void *)this + 1));
  v13[0] = (void **)-1;
  v13[1] = (void **)-1;
  v13[2] = (void **)0xFFFFFFFF00000001;
  int v15 = 1;
  char v14 = 1;
  char v16 = 0;
  std::vector<std::string>::const_iterator v6 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "broadcast");
  memset(&v8, 0, sizeof(v8));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v8, v17, v18, 0xAAAAAAAAAAAAAAABLL * (((char *)v18 - (char *)v17) >> 3));
  memset(&v7, 0, sizeof(v7));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v7, v20, v21, 0xAAAAAAAAAAAAAAABLL * (((char *)v21 - (char *)v20) >> 3));
  Espresso::sequential_builder::add<Espresso::broadcast_params_t>(&v11, v6, (uint64_t)__p, (uint64_t)&v23, (uint64_t)v13, (long long *)v8.__r_.__value_.__l.__data_, (long long *)v8.__r_.__value_.__l.__size_, (long long **)&v7);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  uint64_t v24 = &v7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  uint64_t v24 = &v8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v20);
  v13[0] = (void **)&v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v13);
  v13[0] = (void **)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v13);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
}

void sub_19EAB8D18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  a23 = v23 - 112;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  a23 = v23 - 88;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  if (*(char *)(v23 - 41) < 0) {
    operator delete(*(void **)(v23 - 64));
  }
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::add<Espresso::broadcast_params_t>(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, long long *a6, long long *a7, long long **a8)
{
  memset(&v13, 0, sizeof(v13));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v13, a6, a7, 0xAAAAAAAAAAAAAAABLL * (((char *)a7 - (char *)a6) >> 3));
  memset(&v12, 0, sizeof(v12));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v12, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a8[1] - (char *)*a8) >> 3));
  LODWORD(v15.__r_.__value_.__l.__data_) = (***(uint64_t (****)(void))(a2[14] + 8))(*(void *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  uint64_t v11 = (std::__shared_weak_count *)a1[1];
  uint64_t v16 = *a1;
  int v17 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(&v15, 0, sizeof(v15));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v15, (long long *)v13.__r_.__value_.__l.__data_, (long long *)v13.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13.__r_.__value_.__l.__size_ - v13.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v14, 0, sizeof(v14));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v14, (long long *)v12.__r_.__value_.__l.__data_, (long long *)v12.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12.__r_.__value_.__l.__size_ - v12.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  uint64_t v18 = &v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  uint64_t v18 = &v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (*a2) {
    Espresso::sequential_builder::add_shape_from_kernel();
  }
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
}

void sub_19EAB8F80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v16 = *(std::__shared_weak_count **)(v13 + 8);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  *(void *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(void *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void LayerTranslator::addBroadcastToStatic(LayerTranslator *this, uint64_t **a2)
{
  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  long long v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v39, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    long long v5 = *(_OWORD *)v4;
    v39.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v5;
  }
  __int16 v36 = 0;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  int v33 = 0;
  int v34 = 0;
  uint64_t v35 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v36, (uint64_t *)&v33, *((void *)this + 1));
  if (*((_DWORD *)a2 + 35) == 1105)
  {
    std::string v7 = a2[16];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    std::string v7 = &CoreML::Specification::_BroadcastToStaticLayerParams_default_instance_;
  }
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  uint64_t v28 = (long long **)&unk_1EF0D7CD0;
  unint64_t v29 = 0;
  int v8 = *((_DWORD *)v7 + 4);
  if (v8)
  {
    google::protobuf::RepeatedField<double>::Reserve((unsigned int *)&v30, v8);
    memcpy((void *)(v31 + 8), (const void *)(v7[3] + 8), 8 * *((int *)v7 + 4));
    int v9 = *((_DWORD *)v7 + 4);
    LODWORD(v30) = v9;
  }
  else
  {
    int v9 = 0;
  }
  int v32 = 0;
  uint64_t v10 = v7[1];
  if (v10)
  {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&v29, v10 & 0xFFFFFFFFFFFFFFFELL);
    int v9 = v30;
  }
  uint64_t v21 = -1;
  uint64_t v22 = -1;
  int v26 = 1;
  char v25 = 1;
  char v27 = 0;
  int v24 = v9;
  if (v9 <= 0)
  {
    LODWORD(v21) = 1;
    goto LABEL_20;
  }
  LODWORD(v21) = *(void *)(v31 + 8 * (v9 - 1) + 8);
  if (v9 == 1)
  {
LABEL_20:
    HIDWORD(v21) = 1;
    goto LABEL_21;
  }
  HIDWORD(v21) = *(void *)(v31 + 8 * (v9 - 2) + 8);
  if (v9 <= 2)
  {
LABEL_21:
    LODWORD(v22) = 1;
    goto LABEL_22;
  }
  LODWORD(v22) = *(void *)(v31 + 8 * (v9 - 3) + 8);
  if (v9 == 3)
  {
LABEL_22:
    int v14 = 1;
    HIDWORD(v22) = 1;
    goto LABEL_23;
  }
  HIDWORD(v22) = *(void *)(v31 + 8 * (v9 - 4) + 8);
  BOOL v11 = v9 >= 5;
  unsigned int v12 = v9 - 5;
  if (v11) {
    int v14 = *(_DWORD *)(v31 + 8 * v12 + 8);
  }
  else {
    int v14 = 1;
  }
LABEL_23:
  int v23 = v14;
  uint64_t v13 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "broadcast");
  memset(&v16, 0, sizeof(v16));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v16, v33, v34, 0xAAAAAAAAAAAAAAABLL * (((char *)v34 - (char *)v33) >> 3));
  memset(&v15, 0, sizeof(v15));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v15, v36, v37, 0xAAAAAAAAAAAAAAABLL * (((char *)v37 - (char *)v36) >> 3));
  Espresso::sequential_builder::add<Espresso::broadcast_params_t>(&v19, v13, (uint64_t)__p, (uint64_t)&v39, (uint64_t)&v21, (long long *)v16.__r_.__value_.__l.__data_, (long long *)v16.__r_.__value_.__l.__size_, (long long **)&v15);
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  int v40 = &v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
  int v40 = &v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
  if (v18 < 0) {
    operator delete(__p[0]);
  }
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v36);
  CoreML::Specification::BroadcastToStaticLayerParams::~BroadcastToStaticLayerParams((CoreML::Specification::BroadcastToStaticLayerParams *)&v28);
  uint64_t v28 = &v33;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
  uint64_t v28 = &v36;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v39.__r_.__value_.__l.__data_);
  }
}

void sub_19EAB92E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p)
{
  if (__p && !*__p) {
    operator delete(__p);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v32);
  a29 = v33 - 112;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a29);
  a29 = v33 - 88;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a29);
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  _Unwind_Resume(a1);
}

void LayerTranslator::addBroadcastToDynamic(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  long long v4 = (long long *)*((void *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)v4, *((void *)v4 + 1));
  }
  else
  {
    long long v5 = *v4;
    v23.__r_.__value_.__r.__words[2] = *((void *)v4 + 2);
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v5;
  }
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  int v17 = 0;
  char v18 = 0;
  uint64_t v19 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v20, (uint64_t *)&v17, *((void *)this + 1));
  v13[0] = (void **)-1;
  v13[1] = (void **)-1;
  v13[2] = (void **)0xFFFFFFFF00000001;
  int v15 = 1;
  char v14 = 1;
  char v16 = 1;
  std::vector<std::string>::const_iterator v6 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "broadcast");
  memset(&v8, 0, sizeof(v8));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v8, v17, v18, 0xAAAAAAAAAAAAAAABLL * (((char *)v18 - (char *)v17) >> 3));
  memset(&v7, 0, sizeof(v7));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v7, v20, v21, 0xAAAAAAAAAAAAAAABLL * (((char *)v21 - (char *)v20) >> 3));
  Espresso::sequential_builder::add<Espresso::broadcast_params_t>(&v11, v6, (uint64_t)__p, (uint64_t)&v23, (uint64_t)v13, (long long *)v8.__r_.__value_.__l.__data_, (long long *)v8.__r_.__value_.__l.__size_, (long long **)&v7);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  int v24 = &v7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  int v24 = &v8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v20);
  v13[0] = (void **)&v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v13);
  v13[0] = (void **)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v13);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
}

void sub_19EAB9554(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  a23 = v23 - 112;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  a23 = v23 - 88;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  if (*(char *)(v23 - 41) < 0) {
    operator delete(*(void **)(v23 - 64));
  }
  _Unwind_Resume(a1);
}

void LayerTranslator::addGatherAlongAxis(LayerTranslator *this, uint64_t **a2)
{
  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  long long v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v24, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    long long v5 = *(_OWORD *)v4;
    v24.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v5;
  }
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  char v18 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v21, (uint64_t *)&v18, *((void *)this + 1));
  v16[2] = 0;
  __int16 v17 = 257;
  if (*((_DWORD *)a2 + 35) == 952)
  {
    std::string v7 = a2[16];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    std::string v7 = &CoreML::Specification::_GatherAlongAxisLayerParams_default_instance_;
  }
  uint64_t v8 = v7[2];
  v16[0] = 2;
  v16[1] = v8;
  int v9 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "gather_nd");
  memset(&v11, 0, sizeof(v11));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v11, (long long *)v18, v19, 0xAAAAAAAAAAAAAAABLL * (((char *)v19 - (char *)v18) >> 3));
  memset(&v10, 0, sizeof(v10));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v10, v21, v22, 0xAAAAAAAAAAAAAAABLL * (((char *)v22 - (char *)v21) >> 3));
  Espresso::sequential_builder::add<Espresso::gather_nd_params_t>(&v14, v9, (uint64_t)__p, (uint64_t)&v24, (uint64_t)v16, (long long *)v11.__r_.__value_.__l.__data_, (long long *)v11.__r_.__value_.__l.__size_, (long long **)&v10);
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  char v25 = &v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  char v25 = &v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v21);
  __p[0] = &v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  char v18 = (void **)&v21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v18);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
}

void sub_19EAB9798(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  *(void *)(v27 - 40) = v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v27 - 40));
  *(void *)(v27 - 40) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v27 - 40));
  if (a21 < 0) {
    operator delete(__p);
  }
  std::string __p = &a26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  a26 = v27 - 88;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a26);
  if (*(char *)(v27 - 41) < 0) {
    operator delete(*(void **)(v27 - 64));
  }
  _Unwind_Resume(a1);
}

void LayerTranslator::addGather(LayerTranslator *this, uint64_t **a2)
{
  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  long long v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v24, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    long long v5 = *(_OWORD *)v4;
    v24.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v5;
  }
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  char v18 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v21, (uint64_t *)&v18, *((void *)this + 1));
  v16[2] = 0;
  __int16 v17 = 257;
  if (*((_DWORD *)a2 + 35) == 930)
  {
    std::string v7 = a2[16];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    std::string v7 = &CoreML::Specification::_GatherLayerParams_default_instance_;
  }
  uint64_t v8 = v7[2];
  v16[0] = 0;
  v16[1] = v8;
  int v9 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "gather_nd");
  memset(&v11, 0, sizeof(v11));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v11, (long long *)v18, v19, 0xAAAAAAAAAAAAAAABLL * (((char *)v19 - (char *)v18) >> 3));
  memset(&v10, 0, sizeof(v10));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v10, v21, v22, 0xAAAAAAAAAAAAAAABLL * (((char *)v22 - (char *)v21) >> 3));
  Espresso::sequential_builder::add<Espresso::gather_nd_params_t>(&v14, v9, (uint64_t)__p, (uint64_t)&v24, (uint64_t)v16, (long long *)v11.__r_.__value_.__l.__data_, (long long *)v11.__r_.__value_.__l.__size_, (long long **)&v10);
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  char v25 = &v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  char v25 = &v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v21);
  __p[0] = &v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  char v18 = (void **)&v21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v18);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
}

void sub_19EAB99D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  *(void *)(v27 - 40) = v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v27 - 40));
  *(void *)(v27 - 40) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v27 - 40));
  if (a21 < 0) {
    operator delete(__p);
  }
  std::string __p = &a26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  a26 = v27 - 88;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a26);
  if (*(char *)(v27 - 41) < 0) {
    operator delete(*(void **)(v27 - 64));
  }
  _Unwind_Resume(a1);
}

void LayerTranslator::addPowBroadcastable(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  long long v4 = (long long *)*((void *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)v4, *((void *)v4 + 1));
  }
  else
  {
    long long v5 = *v4;
    v23.__r_.__value_.__r.__words[2] = *((void *)v4 + 2);
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v5;
  }
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  __int16 v17 = 0;
  char v18 = 0;
  uint64_t v19 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v20, (uint64_t *)&v17, *((void *)this + 1));
  v13[2] = (void **)897988541;
  int v15 = 0;
  int v16 = 0;
  v13[0] = (void **)13;
  v13[1] = (void **)1065353216;
  char v14 = 1;
  std::vector<std::string>::const_iterator v6 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
  memset(&v8, 0, sizeof(v8));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v8, v17, v18, 0xAAAAAAAAAAAAAAABLL * (((char *)v18 - (char *)v17) >> 3));
  memset(&v7, 0, sizeof(v7));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v7, v20, v21, 0xAAAAAAAAAAAAAAABLL * (((char *)v21 - (char *)v20) >> 3));
  Espresso::sequential_builder::add<Espresso::elementwise_params>(&v11, v6, (uint64_t)__p, (uint64_t)&v23, (uint64_t)v13, (long long *)v8.__r_.__value_.__l.__data_, (long long *)v8.__r_.__value_.__l.__size_, (long long **)&v7);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  std::string v24 = &v7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  std::string v24 = &v8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v20);
  v13[0] = (void **)&v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v13);
  v13[0] = (void **)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v13);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
}

void sub_19EAB9C10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  a23 = v23 - 112;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  a23 = v23 - 88;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  if (*(char *)(v23 - 41) < 0) {
    operator delete(*(void **)(v23 - 64));
  }
  _Unwind_Resume(a1);
}

BOOL LayerTranslator::addInnerProduct(LayerTranslator *this, uint64_t **a2)
{
  uint64_t v277 = *MEMORY[0x1E4F143B8];
  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  std::string::basic_string[abi:ne180100]<0>(v258, "inner_product");
  long long v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v257, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    long long v5 = *(_OWORD *)v4;
    v257.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v257.__r_.__value_.__l.__data_ = v5;
  }
  uint64_t v255 = 0;
  std::string v254 = 0;
  uint64_t v256 = 0;
  uint64_t v252 = 0;
  std::string v251 = 0;
  uint64_t v253 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v254, (uint64_t *)&v251, *((void *)this + 1));
  if (*((_DWORD *)a2 + 35) == 140)
  {
    std::string v7 = a2[16];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    std::string v7 = &CoreML::Specification::_InnerProductLayerParams_default_instance_;
  }
  uint64_t v244 = &unk_1EF0D5D58;
  unint64_t v245 = 0;
  int v250 = 0;
  uint64_t v8 = v7[1];
  if (v8) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&v245, v8 & 0xFFFFFFFFFFFFFFFELL);
  }
  if (v7 == &CoreML::Specification::_InnerProductLayerParams_default_instance_)
  {
    uint64_t v246 = 0;
  }
  else
  {
    if (v7[2]) {
      operator new();
    }
    uint64_t v246 = 0;
    if (v7[3]) {
      operator new();
    }
  }
  uint64_t v247 = 0;
  __int16 v9 = *((_WORD *)v7 + 24);
  long long v248 = *((_OWORD *)v7 + 2);
  __int16 v249 = v9;
  unint64_t v191 = *((void *)&v248 + 1);
  if (!*((void *)&v248 + 1))
  {
    exceptiounint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string((std::string *)__p, 0);
    long long v149 = std::string::insert((std::string *)__p, 0, "number of output channels = ");
    long long v150 = *(_OWORD *)&v149->__r_.__value_.__l.__data_;
    *(void *)&v272[16] = *((void *)&v149->__r_.__value_.__l + 2);
    *(_OWORD *)v272 = v150;
    v149->__r_.__value_.__l.__size_ = 0;
    v149->__r_.__value_.__r.__words[2] = 0;
    v149->__r_.__value_.__r.__words[0] = 0;
    long long v151 = std::string::append((std::string *)v272, " not allowed in layer ");
    long long v152 = *(_OWORD *)&v151->__r_.__value_.__l.__data_;
    *(void *)&v219[16] = *((void *)&v151->__r_.__value_.__l + 2);
    *(_OWORD *)uint64_t v219 = v152;
    v151->__r_.__value_.__l.__size_ = 0;
    v151->__r_.__value_.__r.__words[2] = 0;
    v151->__r_.__value_.__r.__words[0] = 0;
    if ((v257.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v153 = &v257;
    }
    else {
      long long v153 = (std::string *)v257.__r_.__value_.__r.__words[0];
    }
    if ((v257.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v257.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v257.__r_.__value_.__l.__size_;
    }
    int v155 = std::string::append((std::string *)v219, (const std::string::value_type *)v153, size);
    long long v156 = *(_OWORD *)&v155->__r_.__value_.__l.__data_;
    *(void *)&v268[16] = *((void *)&v155->__r_.__value_.__l + 2);
    *(_OWORD *)v268 = v156;
    v155->__r_.__value_.__l.__size_ = 0;
    v155->__r_.__value_.__r.__words[2] = 0;
    v155->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, (const std::string *)v268);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  unint64_t v189 = v248;
  if (!(void)v248)
  {
    uint64_t v157 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string((std::string *)__p, 0);
    long long v158 = std::string::insert((std::string *)__p, 0, "number of input channels = ");
    long long v159 = *(_OWORD *)&v158->__r_.__value_.__l.__data_;
    *(void *)&v272[16] = *((void *)&v158->__r_.__value_.__l + 2);
    *(_OWORD *)v272 = v159;
    v158->__r_.__value_.__l.__size_ = 0;
    v158->__r_.__value_.__r.__words[2] = 0;
    v158->__r_.__value_.__r.__words[0] = 0;
    uint64_t v160 = std::string::append((std::string *)v272, " not allowed in layer ");
    long long v161 = *(_OWORD *)&v160->__r_.__value_.__l.__data_;
    *(void *)&v219[16] = *((void *)&v160->__r_.__value_.__l + 2);
    *(_OWORD *)uint64_t v219 = v161;
    v160->__r_.__value_.__l.__size_ = 0;
    v160->__r_.__value_.__r.__words[2] = 0;
    v160->__r_.__value_.__r.__words[0] = 0;
    if ((v257.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string v162 = &v257;
    }
    else {
      std::string v162 = (std::string *)v257.__r_.__value_.__r.__words[0];
    }
    if ((v257.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v163 = HIBYTE(v257.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v163 = v257.__r_.__value_.__l.__size_;
    }
    std::string v164 = std::string::append((std::string *)v219, (const std::string::value_type *)v162, v163);
    long long v165 = *(_OWORD *)&v164->__r_.__value_.__l.__data_;
    *(void *)&v268[16] = *((void *)&v164->__r_.__value_.__l + 2);
    *(_OWORD *)v268 = v165;
    v164->__r_.__value_.__l.__size_ = 0;
    v164->__r_.__value_.__r.__words[2] = 0;
    v164->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v157, (const std::string *)v268);
    __cxa_throw(v157, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if ((v257.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v10 = HIBYTE(v257.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v10 = v257.__r_.__value_.__l.__size_;
  }
  uint64_t v11 = v268;
  std::string::basic_string[abi:ne180100]((uint64_t)v268, v10 + 18);
  if (v268[23] < 0) {
    uint64_t v11 = *(unsigned char **)v268;
  }
  if (v10)
  {
    if ((v257.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unsigned int v12 = &v257;
    }
    else {
      unsigned int v12 = (std::string *)v257.__r_.__value_.__r.__words[0];
    }
    memmove(v11, v12, v10);
  }
  strcpy(&v11[v10], "_dynamic_quantize_");
  std::to_string((std::string *)v219, *(_DWORD *)(*((void *)this + 2) + 4));
  if (v219[23] >= 0) {
    char v13 = v219;
  }
  else {
    char v13 = *(const std::string::value_type **)v219;
  }
  if (v219[23] >= 0) {
    std::string::size_type v14 = v219[23];
  }
  else {
    std::string::size_type v14 = *(void *)&v219[8];
  }
  int v15 = std::string::append((std::string *)v268, v13, v14);
  long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  std::string::size_type v243 = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)int v242 = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if ((v219[23] & 0x80000000) != 0) {
    operator delete(*(void **)v219);
  }
  if ((v268[23] & 0x80000000) != 0) {
    operator delete(*(void **)v268);
  }
  if ((v257.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v17 = HIBYTE(v257.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v17 = v257.__r_.__value_.__l.__size_;
  }
  char v18 = v268;
  std::string::basic_string[abi:ne180100]((uint64_t)v268, v17 + 24);
  if (v268[23] < 0) {
    char v18 = *(unsigned char **)v268;
  }
  if (v17)
  {
    if ((v257.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v19 = &v257;
    }
    else {
      uint64_t v19 = (std::string *)v257.__r_.__value_.__r.__words[0];
    }
    memmove(v18, v19, v17);
  }
  strcpy(&v18[v17], "_post_quantization_blob_");
  std::to_string((std::string *)v219, *(_DWORD *)(*((void *)this + 2) + 4));
  int v190 = (const CoreML::Specification::NeuralNetworkLayer *)a2;
  if (v219[23] >= 0) {
    uint64_t v20 = v219;
  }
  else {
    uint64_t v20 = *(const std::string::value_type **)v219;
  }
  if (v219[23] >= 0) {
    std::string::size_type v21 = v219[23];
  }
  else {
    std::string::size_type v21 = *(void *)&v219[8];
  }
  uint64_t v22 = std::string::append((std::string *)v268, v20, v21);
  std::string v24 = (const std::string::value_type *)v22->__r_.__value_.__r.__words[0];
  std::string::size_type v23 = v22->__r_.__value_.__l.__size_;
  v241[0] = v22->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v241 + 3) = *(_DWORD *)((char *)&v22->__r_.__value_.__r.__words[2] + 3);
  int v25 = SHIBYTE(v22->__r_.__value_.__r.__words[2]);
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if ((v219[23] & 0x80000000) != 0) {
    operator delete(*(void **)v219);
  }
  if ((v268[23] & 0x80000000) != 0) {
    operator delete(*(void **)v268);
  }
  if ((v257.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v26 = HIBYTE(v257.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v26 = v257.__r_.__value_.__l.__size_;
  }
  uint64_t v27 = v268;
  std::string v192 = v24;
  int v199 = v25;
  std::string::basic_string[abi:ne180100]((uint64_t)v268, v26 + 31);
  if (v268[23] < 0) {
    uint64_t v27 = *(unsigned char **)v268;
  }
  if (v26)
  {
    if ((v257.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v28 = &v257;
    }
    else {
      uint64_t v28 = (std::string *)v257.__r_.__value_.__r.__words[0];
    }
    memmove(v27, v28, v26);
  }
  strcpy(&v27[v26], "_activation_quantization_scale_");
  std::to_string((std::string *)v219, *(_DWORD *)(*((void *)this + 2) + 4));
  if (v219[23] >= 0) {
    unint64_t v29 = v219;
  }
  else {
    unint64_t v29 = *(const std::string::value_type **)v219;
  }
  if (v219[23] >= 0) {
    std::string::size_type v30 = v219[23];
  }
  else {
    std::string::size_type v30 = *(void *)&v219[8];
  }
  uint64_t v31 = std::string::append((std::string *)v268, v29, v30);
  int v32 = (const std::string::value_type *)v31->__r_.__value_.__r.__words[0];
  std::string::size_type __sz = v31->__r_.__value_.__l.__size_;
  v240[0] = v31->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v240 + 3) = *(_DWORD *)((char *)&v31->__r_.__value_.__r.__words[2] + 3);
  int v33 = SHIBYTE(v31->__r_.__value_.__r.__words[2]);
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  if ((v219[23] & 0x80000000) != 0) {
    operator delete(*(void **)v219);
  }
  if ((v268[23] & 0x80000000) != 0) {
    operator delete(*(void **)v268);
  }
  if ((v257.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v34 = HIBYTE(v257.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v34 = v257.__r_.__value_.__l.__size_;
  }
  uint64_t v35 = v268;
  std::string v193 = v32;
  int v198 = v33;
  std::string::basic_string[abi:ne180100]((uint64_t)v268, v34 + 20);
  if (v268[23] < 0) {
    uint64_t v35 = *(unsigned char **)v268;
  }
  if (v34)
  {
    if ((v257.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      __int16 v36 = &v257;
    }
    else {
      __int16 v36 = (std::string *)v257.__r_.__value_.__r.__words[0];
    }
    memmove(v35, v36, v34);
  }
  strcpy(&v35[v34], "_dynamic_dequantize_");
  std::to_string((std::string *)v219, *(_DWORD *)(*((void *)this + 2) + 4));
  if (v219[23] >= 0) {
    uint64_t v37 = v219;
  }
  else {
    uint64_t v37 = *(const std::string::value_type **)v219;
  }
  if (v219[23] >= 0) {
    std::string::size_type v38 = v219[23];
  }
  else {
    std::string::size_type v38 = *(void *)&v219[8];
  }
  std::string v39 = std::string::append((std::string *)v268, v37, v38);
  long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
  std::string::size_type v239 = v39->__r_.__value_.__r.__words[2];
  *(_OWORD *)uint64_t v238 = v40;
  v39->__r_.__value_.__l.__size_ = 0;
  v39->__r_.__value_.__r.__words[2] = 0;
  v39->__r_.__value_.__r.__words[0] = 0;
  if ((v219[23] & 0x80000000) != 0) {
    operator delete(*(void **)v219);
  }
  if ((v268[23] & 0x80000000) != 0) {
    operator delete(*(void **)v268);
  }
  if ((v257.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v41 = HIBYTE(v257.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v41 = v257.__r_.__value_.__l.__size_;
  }
  uint64_t v42 = v268;
  std::string::basic_string[abi:ne180100]((uint64_t)v268, v41 + 25);
  if (v268[23] < 0) {
    uint64_t v42 = *(unsigned char **)v268;
  }
  if (v41)
  {
    if ((v257.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string v43 = &v257;
    }
    else {
      std::string v43 = (std::string *)v257.__r_.__value_.__r.__words[0];
    }
    memmove(v42, v43, v41);
  }
  strcpy(&v42[v41], "_pre_dequantization_blob_");
  std::to_string((std::string *)v219, *(_DWORD *)(*((void *)this + 2) + 4));
  if (v219[23] >= 0) {
    int v44 = v219;
  }
  else {
    int v44 = *(const std::string::value_type **)v219;
  }
  if (v219[23] >= 0) {
    std::string::size_type v45 = v219[23];
  }
  else {
    std::string::size_type v45 = *(void *)&v219[8];
  }
  int v46 = std::string::append((std::string *)v268, v44, v45);
  std::string::size_type v47 = v46->__r_.__value_.__l.__size_;
  std::string __s = (std::string::value_type *)v46->__r_.__value_.__r.__words[0];
  v237[0] = v46->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v237 + 3) = *(_DWORD *)((char *)&v46->__r_.__value_.__r.__words[2] + 3);
  int v200 = SHIBYTE(v46->__r_.__value_.__r.__words[2]);
  v46->__r_.__value_.__l.__size_ = 0;
  v46->__r_.__value_.__r.__words[2] = 0;
  v46->__r_.__value_.__r.__words[0] = 0;
  if ((v219[23] & 0x80000000) != 0) {
    operator delete(*(void **)v219);
  }
  if ((v268[23] & 0x80000000) != 0) {
    operator delete(*(void **)v268);
  }
  int v48 = HIBYTE(v249);
  if (HIBYTE(v249))
  {
    __p[0] = (void *)0x1FFFFFFFFLL;
    int v49 = *(void **)this;
    std::string::basic_string[abi:ne180100]<0>(v219, "dynamic_quantize");
    memset(&v234, 0, sizeof(v234));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v234, v251, v252, 0xAAAAAAAAAAAAAAABLL * (((char *)v252 - (char *)v251) >> 3));
    if (v25 < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v268, v24, v23);
    }
    else
    {
      *(void *)v268 = v24;
      *(void *)&v268[8] = v23;
      *(_DWORD *)&v268[16] = v241[0];
      *(_DWORD *)&v268[19] = *(_DWORD *)((char *)v241 + 3);
      v268[23] = v25;
    }
    if (v33 < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v268[24], v32, __sz);
    }
    else
    {
      *(void *)&v268[24] = v32;
      std::string::size_type v269 = __sz;
      LODWORD(v270) = v240[0];
      *(_DWORD *)((char *)&v270 + 3) = *(_DWORD *)((char *)v240 + 3);
      HIBYTE(v270) = v33;
    }
    uint64_t v231 = 0;
    float v232 = 0;
    unsigned __int8 v233 = 0;
    *(void *)v272 = &v231;
    v272[8] = 0;
    uint64_t v231 = (std::string *)operator new(0x30uLL);
    float v232 = v231;
    unsigned __int8 v233 = (long long *)&v231[2];
    float v232 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v233, (long long *)v268, v271, v231);
    Espresso::sequential_builder::add<Espresso::dynamic_quantize_params_t>(&v235, v49, (uint64_t)v219, (uint64_t)v242, (uint64_t)__p, (long long *)v234.__r_.__value_.__l.__data_, (long long *)v234.__r_.__value_.__l.__size_, (long long **)&v231);
    if (v236) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v236);
    }
    *(void *)v272 = &v231;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v272);
    for (uint64_t i = 0; i != -48; i -= 24)
    {
      if (*((char *)&v270 + i + 7) < 0) {
        operator delete(*(void **)&v268[i + 24]);
      }
    }
    *(void *)v268 = &v234;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v268);
    if ((v219[23] & 0x80000000) != 0) {
      operator delete(*(void **)v219);
    }
    int v48 = HIBYTE(v249);
  }
  int v224 = -1;
  __asm { FMOV            V0.2S, #1.0 }
  uint64_t v225 = _D0;
  uint64_t v230 = 0;
  *(_DWORD *)&v219[16] = 0;
  *(void *)&v219[20] = _D0;
  uint64_t v226 = 0;
  uint64_t v220 = 0;
  uint64_t v223 = 0;
  uint64_t v227 = 0;
  uint64_t v229 = 0;
  uint64_t v228 = 0;
  uint64_t v55 = *((void *)&v248 + 1);
  uint64_t v56 = v248;
  *(void *)uint64_t v219 = __PAIR64__(v248, DWORD2(v248));
  int v221 = 0;
  *(void *)&v219[8] = v249;
  char v222 = 0;
  if (v48)
  {
    int v221 = 5;
    long long v57 = *(void **)this;
    if (v199 < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v268, v24, v23);
    }
    else
    {
      *(void *)v268 = v24;
      *(void *)&v268[8] = v23;
      *(_DWORD *)&v268[16] = v241[0];
      *(_DWORD *)&v268[19] = *(_DWORD *)((char *)v241 + 3);
      v268[23] = v199;
    }
    uint64_t v216 = 0;
    uint64_t v217 = 0;
    uint64_t v218 = 0;
    *(void *)v272 = &v216;
    v272[8] = 0;
    uint64_t v216 = (long long *)operator new(0x18uLL);
    uint64_t v217 = v216;
    uint64_t v218 = (char *)v216 + 24;
    uint64_t v217 = (long long *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v218, (long long *)v268, (long long *)&v268[24], (std::string *)v216);
    if (v200 < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v272, __s, v47);
    }
    else
    {
      *(void *)v272 = __s;
      *(void *)&v272[8] = v47;
      *(_DWORD *)&v272[16] = v237[0];
      *(_DWORD *)&v272[19] = *(_DWORD *)((char *)v237 + 3);
      v272[23] = v200;
    }
    uint64_t v213 = 0;
    int v214 = 0;
    unint64_t v215 = 0;
    __p[0] = &v213;
    LOBYTE(__p[1]) = 0;
    uint64_t v213 = (std::string *)operator new(0x18uLL);
    int v214 = v213;
    unint64_t v215 = v213 + 1;
    int v214 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v215, (long long *)v272, (long long *)&v272[24], v213);
    Espresso::sequential_builder::add<Espresso::inner_product_uniforms>((uint64_t *)&v260, v57, (uint64_t)v258, (uint64_t)&v257, (uint64_t)v219, v216, v217, (long long **)&v213);
    unint64_t v59 = (long long *)v260;
    uint64_t v194 = v261;
    uint64_t v261 = 0;
    uint64_t v260 = 0;
    __p[0] = &v213;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    if ((v272[23] & 0x80000000) != 0) {
      operator delete(*(void **)v272);
    }
    *(void *)v272 = &v216;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v272);
    if ((v268[23] & 0x80000000) != 0) {
      operator delete(*(void **)v268);
    }
  }
  else
  {
    long long v58 = *(void **)this;
    memset(&v212, 0, sizeof(v212));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v212, v251, v252, 0xAAAAAAAAAAAAAAABLL * (((char *)v252 - (char *)v251) >> 3));
    memset(&v211, 0, sizeof(v211));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v211, v254, v255, 0xAAAAAAAAAAAAAAABLL * (((char *)v255 - (char *)v254) >> 3));
    Espresso::sequential_builder::add<Espresso::inner_product_uniforms>((uint64_t *)v268, v58, (uint64_t)v258, (uint64_t)&v257, (uint64_t)v219, (long long *)v212.__r_.__value_.__l.__data_, (long long *)v212.__r_.__value_.__l.__size_, (long long **)&v211);
    uint64_t v194 = *(void *)&v268[8];
    unint64_t v59 = *(long long **)v268;
    *(_OWORD *)v268 = 0uLL;
    *(void *)v272 = &v211;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v272);
    *(void *)v272 = &v212;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v272);
  }
  long long v60 = v246;
  if (!v246) {
    long long v60 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  uint64_t v61 = v60[5];
  if (*(char *)(v61 + 23) < 0) {
    uint64_t v62 = *(void *)(v61 + 8);
  }
  else {
    uint64_t v62 = *(unsigned __int8 *)(v61 + 23);
  }
  uint64_t v63 = v60[6];
  uint64_t v64 = *(unsigned __int8 *)(v63 + 23);
  if (*(char *)(v63 + 23) < 0) {
    uint64_t v65 = *(void *)(v63 + 8);
  }
  else {
    uint64_t v65 = *(unsigned __int8 *)(v63 + 23);
  }
  int v66 = *((_DWORD *)v60 + 4);
  uint64_t v67 = v60[7];
  uint64_t v68 = *(unsigned __int8 *)(v67 + 23);
  if (*(char *)(v67 + 23) < 0) {
    unint64_t inited = *(unint64_t **)(v67 + 8);
  }
  else {
    unint64_t inited = (unint64_t *)*(unsigned __int8 *)(v67 + 23);
  }
  if (v66 <= 0) {
    int v70 = 1;
  }
  else {
    int v70 = 2;
  }
  if (v62) {
    unsigned int v71 = v70;
  }
  else {
    unsigned int v71 = v66 > 0;
  }
  if (v65) {
    ++v71;
  }
  if (inited) {
    ++v71;
  }
  if (v71 > 1)
  {
    int v72 = 4;
    goto LABEL_194;
  }
  if (v71) {
    int v72 = 0;
  }
  else {
    int v72 = 5;
  }
  if (v66 <= 0 && v71)
  {
    if ((*(unsigned char *)(v61 + 23) & 0x80) != 0)
    {
      if (*(void *)(v61 + 8)) {
        goto LABEL_175;
      }
    }
    else if (*(unsigned char *)(v61 + 23))
    {
LABEL_175:
      int v72 = 1;
      goto LABEL_194;
    }
    if ((v64 & 0x80) != 0) {
      uint64_t v64 = *(void *)(v63 + 8);
    }
    uint64_t v73 = v60[8];
    if (v60 != &CoreML::Specification::_WeightParams_default_instance_ && v64 && v73)
    {
      int v72 = 2;
    }
    else
    {
      if ((v68 & 0x80) != 0) {
        uint64_t v68 = *(void *)(v67 + 8);
      }
      if (v73) {
        _ZF = v68 == 0;
      }
      else {
        _ZF = 1;
      }
      if (_ZF || v60 == &CoreML::Specification::_WeightParams_default_instance_) {
        int v72 = 5;
      }
      else {
        int v72 = 3;
      }
    }
  }
LABEL_194:
  if (HIBYTE(v249))
  {
    *(void *)&v272[12] = 1065353216;
    *(void *)v272 = 0xFFFFFFFFLL;
    *(_DWORD *)&v272[28] = 1065353216;
    *(_DWORD *)&v272[8] = 0;
    *(void *)&v272[20] = 0x100000000;
    if (v72 != 3)
    {
      std::string v166 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      innerProductIncorrectWeightType((std::string *)v268, v72, (uint64_t)&v257);
      std::runtime_error::runtime_error(v166, (const std::string *)v268);
      __cxa_throw(v166, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    std::string::size_type v76 = (std::string::value_type *)v193;
    if (*((_DWORD *)v190 + 35) == 140)
    {
      char v77 = (uint64_t *)*((void *)v190 + 16);
    }
    else
    {
      unint64_t inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
      char v77 = &CoreML::Specification::_InnerProductLayerParams_default_instance_;
    }
    std::string::size_type v79 = (uint64_t *)v77[2];
    if (!v79) {
      std::string::size_type v79 = &CoreML::Specification::_WeightParams_default_instance_;
    }
    unsigned int v80 = (uint64_t *)v79[8];
    if (!v80) {
      unsigned int v80 = &CoreML::Specification::_QuantizationParams_default_instance_;
    }
    if (*((_DWORD *)v80 + 9) == 101)
    {
      std::string::size_type v81 = (uint64_t *)v80[3];
    }
    else
    {
      CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
      std::string::size_type v81 = &CoreML::Specification::_LinearQuantizationParams_default_instance_;
    }
    *(float *)&v272[28] = 1.0 / *(float *)(v81[3] + 8);
    std::string::size_type v82 = *(void **)this;
    std::string::basic_string[abi:ne180100]<0>(__p, "dynamic_dequantize");
    if (v200 < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v268, __s, v47);
    }
    else
    {
      *(void *)v268 = __s;
      *(void *)&v268[8] = v47;
      *(_DWORD *)&v268[16] = v237[0];
      *(_DWORD *)&v268[19] = *(_DWORD *)((char *)v237 + 3);
      v268[23] = v200;
    }
    if (v198 < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v268[24], v193, __sz);
    }
    else
    {
      *(void *)&v268[24] = v193;
      std::string::size_type v269 = __sz;
      LODWORD(v270) = v240[0];
      *(_DWORD *)((char *)&v270 + 3) = *(_DWORD *)((char *)v240 + 3);
      HIBYTE(v270) = v198;
    }
    uint64_t v206 = 0;
    std::string v207 = 0;
    std::string v208 = 0;
    uint64_t v260 = &v206;
    LOBYTE(v261) = 0;
    uint64_t v206 = (long long *)operator new(0x30uLL);
    std::string v207 = v206;
    std::string v208 = v206 + 3;
    std::string v207 = (long long *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v208, (long long *)v268, v271, (std::string *)v206);
    memset(&v205, 0, sizeof(v205));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v205, v254, v255, 0xAAAAAAAAAAAAAAABLL * (((char *)v255 - (char *)v254) >> 3));
    Espresso::sequential_builder::add<Espresso::dynamic_dequantize_params_t>(&v209, v82, (uint64_t)__p, (uint64_t)v238, (uint64_t)v272, v206, v207, (long long **)&v205);
    uint64_t v78 = v209;
    __sza = v210;
    uint64_t v209 = 0;
    float v210 = 0;
    uint64_t v260 = (long long **)&v205;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v260);
    uint64_t v260 = &v206;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v260);
    for (uint64_t j = 0; j != -48; j -= 24)
    {
      if (*((char *)&v270 + j + 7) < 0) {
        operator delete(*(void **)&v268[j + 24]);
      }
    }
    if (SBYTE7(v263) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    __sza = 0;
    uint64_t v78 = 0;
    std::string::size_type v76 = (std::string::value_type *)v193;
  }
  std::string::size_type v84 = (std::__shared_weak_count *)v194;
  if (v194) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v194 + 8), 1uLL, memory_order_relaxed);
  }
  if (HIBYTE(v249))
  {
    std::string::size_type v85 = v246;
    std::string::basic_string[abi:ne180100]<0>(v272, "InnerProduct");
    if (v85) {
      uint64_t v86 = v85;
    }
    else {
      uint64_t v86 = &CoreML::Specification::_WeightParams_default_instance_;
    }
    int v87 = v199;
    CoreML::validateInt8Requirements((CoreML::Result *)v268, (uint64_t)v86, (uint64_t)v272);
    unint64_t v88 = v191;
    unsigned int v89 = *(_DWORD *)v268 & 0xFFFFFFEF;
    if ((v268[31] & 0x80000000) != 0) {
      operator delete(*(void **)&v268[8]);
    }
    if ((v272[23] & 0x80000000) != 0) {
      operator delete(*(void **)v272);
    }
    if (v89)
    {
      uint64_t v167 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      std::string v168 = std::string::append((std::string *)v272, " does not satisfy int8 quantization requirements.");
      long long v169 = *(_OWORD *)&v168->__r_.__value_.__l.__data_;
      *(void *)&v268[16] = *((void *)&v168->__r_.__value_.__l + 2);
      *(_OWORD *)v268 = v169;
      v168->__r_.__value_.__l.__size_ = 0;
      v168->__r_.__value_.__r.__words[2] = 0;
      v168->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v167, (const std::string *)v268);
      __cxa_throw(v167, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    if (v246) {
      uint64_t v90 = v246;
    }
    else {
      uint64_t v90 = &CoreML::Specification::_WeightParams_default_instance_;
    }
    size_t WeightParamSizeInBytes = (int)EspressoConverter::getWeightParamSizeInBytes(v90);
    CoreML::copySpecArrayStringToVector(v268, (char *)v90[7], WeightParamSizeInBytes);
    std::string::basic_string[abi:ne180100]<0>(v272, "W_int8");
    __p[1] = 0;
    __p[0] = 0;
    (*(void (**)(long long *, void **, unsigned char *, void, size_t, void))(*(void *)v59 + 168))(v59, __p, v272, *(void *)v268, WeightParamSizeInBytes, 0);
    int v92 = (std::__shared_weak_count *)__p[1];
    if (!__p[1]) {
      goto LABEL_270;
    }
    goto LABEL_269;
  }
  if (v72 == 2)
  {
    if (v246) {
      std::string v96 = v246;
    }
    else {
      std::string v96 = &CoreML::Specification::_WeightParams_default_instance_;
    }
    int v97 = (uint64_t *)v96[8];
    if (!v97) {
      int v97 = &CoreML::Specification::_QuantizationParams_default_instance_;
    }
    unint64_t v98 = v97[2];
    unint64_t v99 = (int)EspressoConverter::getWeightParamSizeInBytes(v96);
    if (!CoreML::hasSufficientBytesInQuantizedWeightParam(v96, v56 * v55))
    {
      uint64_t v175 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      innerProductQuantizedWeightArraySizeErrorString((std::string *)v268, v99, v189, v191, v98, (uint64_t)&v257);
      std::runtime_error::runtime_error(v175, (const std::string *)v268);
      __cxa_throw(v175, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    CoreML::copySpecArrayStringToVector(v268, (char *)v96[6], v99);
    int v87 = v199;
    std::string::size_type v76 = (std::string::value_type *)v193;
    std::to_string((std::string *)__p, v98);
    unint64_t v88 = v191;
    std::string v100 = std::string::insert((std::string *)__p, 0, "W_U");
    long long v101 = *(_OWORD *)&v100->__r_.__value_.__l.__data_;
    *(void *)&v272[16] = *((void *)&v100->__r_.__value_.__l + 2);
    *(_OWORD *)v272 = v101;
    v100->__r_.__value_.__l.__size_ = 0;
    v100->__r_.__value_.__r.__words[2] = 0;
    v100->__r_.__value_.__r.__words[0] = 0;
    if (SBYTE7(v263) < 0) {
      operator delete(__p[0]);
    }
    __p[1] = 0;
    __p[0] = 0;
    (*(void (**)(long long *, void **, unsigned char *, void, unint64_t, void))(*(void *)v59 + 168))(v59, __p, v272, *(void *)v268, v99, 0);
    if (__p[1]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
    }
    if (v246) {
      int v102 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v246;
    }
    else {
      int v102 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)&CoreML::Specification::_WeightParams_default_instance_;
    }
    v203[0] = (uint64_t)v59;
    v203[1] = v194;
    if (v194) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v194 + 8), 1uLL, memory_order_relaxed);
    }
    unint64_t v103 = *(unsigned int *)v219;
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)&unk_19EC86ACE);
    CoreML::setQuantizationParams(v102, v203, v103, (const void **)__p);
    if (SBYTE7(v263) < 0) {
      operator delete(__p[0]);
    }
    if (!v194) {
      goto LABEL_270;
    }
    int v92 = (std::__shared_weak_count *)v194;
LABEL_269:
    std::__shared_weak_count::__release_shared[abi:ne180100](v92);
LABEL_270:
    if ((v272[23] & 0x80000000) != 0) {
      operator delete(*(void **)v272);
    }
    if (*(void *)v268)
    {
      *(void *)&v268[8] = *(void *)v268;
      operator delete(*(void **)v268);
    }
    goto LABEL_274;
  }
  if (v72 == 3)
  {
    std::string v172 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    innerProductIncorrectWeightType((std::string *)v268, 3, (uint64_t)&v257);
    std::runtime_error::runtime_error(v172, (const std::string *)v268);
    __cxa_throw(v172, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (v246) {
    int v93 = v246;
  }
  else {
    int v93 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  int WeightParamSize = EspressoConverter::getWeightParamSize((uint64_t)v93);
  unint64_t v88 = v191;
  int v87 = v199;
  if (v191 * v189 != WeightParamSize)
  {
    unint64_t v173 = WeightParamSize;
    std::string v174 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    innerProductWeightArraySizeErrorString((std::string *)v268, v173, v189, v191, (uint64_t)&v257);
    std::runtime_error::runtime_error(v174, (const std::string *)v268);
    __cxa_throw(v174, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  (*(void (**)(unsigned char *__return_ptr, long long *))(*(void *)v59 + 424))(v268, v59);
  if (v246) {
    long long v95 = v246;
  }
  else {
    long long v95 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  EspressoConverter::copyWeightsToDataBlob(*(EspressoConverter **)(*(void *)v268 + 16), v95, 4 * (*(_DWORD *)&v219[4] * *(_DWORD *)v219));
  long long v204 = *(_OWORD *)v268;
  if (*(void *)&v268[8]) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v268[8] + 8), 1uLL, memory_order_relaxed);
  }
  (*(void (**)(long long *, long long *))(*(void *)v59 + 400))(v59, &v204);
  if (*((void *)&v204 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v204 + 1));
  }
  if (*(void *)&v268[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v268[8]);
  }
LABEL_274:
  if (!(_BYTE)v249) {
    goto LABEL_324;
  }
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(v272, 4 * *(_DWORD *)v219, 1, 1, 1);
  if (v247) {
    uint64_t v104 = v247;
  }
  else {
    uint64_t v104 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  uint64_t v105 = v104[5];
  if (*(char *)(v105 + 23) < 0) {
    uint64_t v106 = *(void *)(v105 + 8);
  }
  else {
    uint64_t v106 = *(unsigned __int8 *)(v105 + 23);
  }
  uint64_t v107 = v104[6];
  uint64_t v108 = *(unsigned __int8 *)(v107 + 23);
  if (*(char *)(v107 + 23) < 0) {
    uint64_t v109 = *(void *)(v107 + 8);
  }
  else {
    uint64_t v109 = *(unsigned __int8 *)(v107 + 23);
  }
  int v110 = *((_DWORD *)v104 + 4);
  uint64_t v111 = v104[7];
  if (*(char *)(v111 + 23) < 0) {
    uint64_t v112 = *(void *)(v111 + 8);
  }
  else {
    uint64_t v112 = *(unsigned __int8 *)(v111 + 23);
  }
  if (v110 <= 0) {
    int v113 = 1;
  }
  else {
    int v113 = 2;
  }
  if (v106) {
    int v114 = v113;
  }
  else {
    int v114 = v110 > 0;
  }
  if (v109) {
    ++v114;
  }
  if (v112) {
    ++v114;
  }
  if (v110 > 0 || v114 != 1) {
    goto LABEL_311;
  }
  if ((*(unsigned char *)(v105 + 23) & 0x80) != 0)
  {
    if (*(void *)(v105 + 8)) {
      goto LABEL_311;
    }
  }
  else if (*(unsigned char *)(v105 + 23))
  {
    goto LABEL_311;
  }
  if ((v108 & 0x80) != 0) {
    uint64_t v108 = *(void *)(v107 + 8);
  }
  if (v104 != &CoreML::Specification::_WeightParams_default_instance_ && v108 && v104[8])
  {
    if (!CoreML::hasSufficientBytesInQuantizedWeightParam(v104, v88))
    {
      unsigned __int8 v185 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      std::runtime_error::runtime_error(v185, (const std::string *)v268);
      __cxa_throw(v185, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    CoreML::dequantizeWeightParamSpec((CoreML *)v268, (const CoreML::Specification::WeightParams *)v104, v88);
    uint64_t v115 = *(void *)v272;
    __int16 v116 = *(void **)v268;
    memcpy(*(void **)(*(void *)v272 + 16), *(const void **)v268, 4 * v88);
    if (v116) {
      operator delete(v116);
    }
    goto LABEL_313;
  }
LABEL_311:
  int v117 = EspressoConverter::getWeightParamSize((uint64_t)v104);
  if (v88 != v117)
  {
    unint64_t v170 = v117;
    uint64_t v171 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    innerProductBiasArraySizeErrorString((std::string *)v268, v170, v88, (uint64_t)&v257);
    std::runtime_error::runtime_error(v171, (const std::string *)v268);
    __cxa_throw(v171, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v115 = *(void *)v272;
  EspressoConverter::copyWeightsToDataBlob(*(EspressoConverter **)(*(void *)v272 + 16), v104, 4 * *(unsigned int *)v219);
LABEL_313:
  if (HIBYTE(v249))
  {
    if (__sza) {
      atomic_fetch_add_explicit(&__sza->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v268, "biases");
    __p[1] = 0;
    __p[0] = 0;
    (*(void (**)(uint64_t, void **, unsigned char *, void, unint64_t, void))(*(void *)v78 + 168))(v78, __p, v268, *(void *)(v115 + 16), 4 * v88, 0);
    if (__p[1]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
    }
    if ((v268[23] & 0x80000000) != 0) {
      operator delete(*(void **)v268);
    }
    int v118 = __sza;
    if (!__sza) {
      goto LABEL_322;
    }
  }
  else
  {
    uint64_t v201 = v115;
    std::string v202 = *(std::__shared_weak_count **)&v272[8];
    if (*(void *)&v272[8]) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v272[8] + 8), 1uLL, memory_order_relaxed);
    }
    (*(void (**)(long long *, uint64_t *))(*(void *)v59 + 392))(v59, &v201);
    int v118 = v202;
    if (!v202) {
      goto LABEL_322;
    }
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v118);
LABEL_322:
  if (*(void *)&v272[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v272[8]);
  }
LABEL_324:
  if (**((unsigned char **)this + 2))
  {
    uint64_t v119 = (std::string::value_type *)v192;
    LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v254);
  }
  else
  {
    uint64_t v120 = (uint64_t **)*((void *)this + 1);
    uint64_t v119 = (std::string::value_type *)v192;
    uint64_t v121 = std::map<std::string,std::string>::at((uint64_t)v120, v251);
    *(_OWORD *)v272 = *(_OWORD *)v121;
    *(_OWORD *)&v272[16] = *(_OWORD *)(v121 + 16);
    std::string::size_type v273 = *(void *)(v121 + 32);
    std::__split_buffer<std::string> v274 = 0;
    uint64_t v275 = 0;
    uint64_t v276 = 0;
    uint64_t v122 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v274, *(const void **)(v121 + 40), *(void *)(v121 + 48), (uint64_t)(*(void *)(v121 + 48)- *(void *)(v121 + 40)) >> 2);
    int v123 = *(_DWORD *)&v272[8];
    if (*(_DWORD *)&v272[8] != -1)
    {
      int v124 = *(_DWORD *)v272;
      if (*(_DWORD *)v272 != -1)
      {
        int v125 = *(_DWORD *)&v272[4];
        if (*(_DWORD *)&v272[4] != -1)
        {
          if (*((_DWORD *)v190 + 35) == 140)
          {
            std::string v126 = (uint64_t *)*((void *)v190 + 16);
          }
          else
          {
            CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v122);
            std::string v126 = &CoreML::Specification::_InnerProductLayerParams_default_instance_;
          }
          if (v124 * v123 * v125 != *((_DWORD *)v126 + 8))
          {
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v268);
            std::string v176 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v268[16], (uint64_t)"Inner product layer: '", 22);
            uint64_t v177 = *((void *)v190 + 14);
            int v178 = *(char *)(v177 + 23);
            if (v178 >= 0) {
              uint64_t v179 = *((void *)v190 + 14);
            }
            else {
              uint64_t v179 = *(void *)v177;
            }
            if (v178 >= 0) {
              uint64_t v180 = *(unsigned __int8 *)(v177 + 23);
            }
            else {
              uint64_t v180 = *(void *)(v177 + 8);
            }
            __int16 v181 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v176, v179, v180);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v181, (uint64_t)"' : Product of input blob dimensions C,H,W (", 44);
            std::string::size_type v182 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v182, (uint64_t)",", 1);
            uint64_t v183 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v183, (uint64_t)",", 1);
            std::ostream::operator<<();
            long long v184 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v268[16], (uint64_t)") must be equal to the parameter 'inputChannels' (", 50);
            if (*((_DWORD *)v190 + 35) != 140) {
              CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v184);
            }
            std::string::size_type v186 = (void *)std::ostream::operator<<();
            std::string v187 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v186, (uint64_t)")", 1);
            std::endl[abi:ne180100]<char,std::char_traits<char>>(v187);
            long long v188 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::stringbuf::str();
            std::runtime_error::runtime_error(v188, (const std::string *)__p);
            __cxa_throw(v188, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
        }
      }
    }
    *(_OWORD *)v268 = *(_OWORD *)v272;
    *(_OWORD *)&v268[16] = *(_OWORD *)&v272[16];
    uint64_t v127 = v274;
    std::string::size_type v269 = v273;
    uint64_t v270 = 0;
    v271[0] = 0uLL;
    long long v128 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v270, v274, v275, (v275 - (uint64_t)v274) >> 2);
    if (*((_DWORD *)v190 + 35) == 140)
    {
      long long v129 = (uint64_t *)*((void *)v190 + 16);
    }
    else
    {
      CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v128);
      long long v129 = &CoreML::Specification::_InnerProductLayerParams_default_instance_;
    }
    *(_DWORD *)&v268[8] = v129[5];
    *(void *)v268 = 0x100000001;
    *(_OWORD *)std::string __p = *(_OWORD *)v268;
    long long v263 = *(_OWORD *)&v268[16];
    std::string v130 = v270;
    std::string::size_type v264 = v269;
    uint64_t v265 = 0;
    uint64_t v267 = 0;
    uint64_t v266 = 0;
    uint64_t v131 = *(void *)&v271[0];
    unint64_t v132 = (uint64_t)(*(void *)&v271[0] - (void)v270) >> 2;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v265, v270, *(uint64_t *)&v271[0], v132);
    EspressoConverter::validateShape((int *)__p, *((void *)v190 + 14), (uint64_t)v254);
    if (v265)
    {
      uint64_t v266 = v265;
      operator delete(v265);
    }
    uint64_t v260 = (long long **)v254;
    long long v133 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v120, v254, (long long **)&v260);
    long long v134 = *(_OWORD *)&v268[16];
    *(_OWORD *)(v133 + 5CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = *(_OWORD *)v268;
    *(_OWORD *)(v133 + 72) = v134;
    *((void *)v133 + 11) = v269;
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v133 + 96, v130, v131, v132);
    if (v130) {
      operator delete(v130);
    }
    std::string::size_type v84 = (std::__shared_weak_count *)v194;
    if (v127) {
      operator delete(v127);
    }
  }
  if (v246) {
    int v135 = v246;
  }
  else {
    int v135 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  uint64_t v136 = v135[5];
  uint64_t v137 = *(unsigned __int8 *)(v136 + 23);
  if (*(char *)(v136 + 23) < 0) {
    uint64_t v138 = *(void *)(v136 + 8);
  }
  else {
    uint64_t v138 = *(unsigned __int8 *)(v136 + 23);
  }
  uint64_t v139 = v135[6];
  if (*(char *)(v139 + 23) < 0) {
    uint64_t v140 = *(void *)(v139 + 8);
  }
  else {
    uint64_t v140 = *(unsigned __int8 *)(v139 + 23);
  }
  int v141 = *((_DWORD *)v135 + 4);
  uint64_t v142 = v135[7];
  if (*(char *)(v142 + 23) < 0) {
    uint64_t v143 = *(void *)(v142 + 8);
  }
  else {
    uint64_t v143 = *(unsigned __int8 *)(v142 + 23);
  }
  BOOL v144 = 0;
  if (v141 <= 0) {
    int v145 = 1;
  }
  else {
    int v145 = 2;
  }
  if (v138) {
    int v146 = v145;
  }
  else {
    int v146 = v141 > 0;
  }
  if (v140) {
    ++v146;
  }
  if (v143) {
    ++v146;
  }
  if (v141 <= 0 && v146 == 1)
  {
    if ((v137 & 0x80) != 0) {
      uint64_t v137 = *(void *)(v136 + 8);
    }
    BOOL v144 = v137 != 0;
  }
  if (v84) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v84);
  }
  if (__sza) {
    std::__shared_weak_count::__release_shared[abi:ne180100](__sza);
  }
  if (v84) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v84);
  }
  if (v200 < 0) {
    operator delete(__s);
  }
  if (SHIBYTE(v239) < 0) {
    operator delete(v238[0]);
  }
  if (v198 < 0)
  {
    operator delete(v76);
    if ((v87 & 0x80000000) == 0) {
      goto LABEL_385;
    }
  }
  else if ((v87 & 0x80000000) == 0)
  {
    goto LABEL_385;
  }
  operator delete(v119);
LABEL_385:
  if (SHIBYTE(v243) < 0) {
    operator delete(v242[0]);
  }
  CoreML::Specification::InnerProductLayerParams::~InnerProductLayerParams((CoreML::Specification::InnerProductLayerParams *)&v244);
  *(void *)v268 = &v251;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v268);
  *(void *)v268 = &v254;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v268);
  if (SHIBYTE(v257.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v257.__r_.__value_.__l.__data_);
  }
  if (v259 < 0) {
    operator delete(v258[0]);
  }
  return v144;
}

void sub_19EABB9C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, std::__shared_weak_count *a14, std::__shared_weak_count *a15, void *a16, int a17, int a18, int a19, int a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (SLOBYTE(STACK[0x2F7]) < 0)
  {
    operator delete((void *)STACK[0x2E0]);
    if ((v73 & 1) == 0)
    {
LABEL_6:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&STACK[0x320]);
      std::string::size_type v76 = *(void **)(v74 - 136);
      if (v76) {
        operator delete(v76);
      }
      if (a14) {
        std::__shared_weak_count::__release_shared[abi:ne180100](a14);
      }
      if (a15) {
        std::__shared_weak_count::__release_shared[abi:ne180100](a15);
      }
      if (a14) {
        std::__shared_weak_count::__release_shared[abi:ne180100](a14);
      }
      if (a20 < 0) {
        operator delete(a16);
      }
      if (SLOBYTE(STACK[0x207]) < 0) {
        operator delete(a72);
      }
      if (a18 < 0) {
        operator delete(a13);
      }
      if (a19 < 0) {
        operator delete(a12);
      }
      if (SLOBYTE(STACK[0x237]) < 0) {
        operator delete((void *)STACK[0x220]);
      }
      CoreML::Specification::InnerProductLayerParams::~InnerProductLayerParams((CoreML::Specification::InnerProductLayerParams *)&STACK[0x238]);
      STACK[0x320] = (unint64_t)&STACK[0x270];
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x320]);
      STACK[0x320] = (unint64_t)&STACK[0x288];
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x320]);
      if (SLOBYTE(STACK[0x2B7]) < 0) {
        operator delete((void *)STACK[0x2A0]);
      }
      if (SLOBYTE(STACK[0x2CF]) < 0) {
        operator delete((void *)STACK[0x2B8]);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v73)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v72);
  goto LABEL_6;
}

void innerProductIncorrectWeightType(std::string *a1, int __val, uint64_t a3)
{
  std::to_string(&v13, __val);
  long long v5 = std::string::insert(&v13, 0, "Incorrect weight type ");
  long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v14.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  std::string v7 = std::string::append(&v14, " in layer ");
  long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v15.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  int v9 = *(char *)(a3 + 23);
  if (v9 >= 0) {
    std::string::size_type v10 = (const std::string::value_type *)a3;
  }
  else {
    std::string::size_type v10 = *(const std::string::value_type **)a3;
  }
  if (v9 >= 0) {
    std::string::size_type v11 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    std::string::size_type v11 = *(void *)(a3 + 8);
  }
  unsigned int v12 = std::string::append(&v15, v10, v11);
  *a1 = *v12;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
}

void sub_19EABC21C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (*(char *)(v21 - 25) < 0) {
    operator delete(*(void **)(v21 - 48));
  }
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void innerProductWeightArraySizeErrorString(std::string *a1, unint64_t __val, unint64_t a3, unint64_t a4, uint64_t a5)
{
  std::to_string(&v31, __val);
  int v9 = std::string::insert(&v31, 0, "Size of weights = ");
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v32.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  std::string::size_type v11 = std::string::append(&v32, " is not equal to size of the product of input and output channels = ");
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v33.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v30, a3);
  if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string v13 = &v30;
  }
  else {
    std::string v13 = (std::string *)v30.__r_.__value_.__r.__words[0];
  }
  if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v30.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v30.__r_.__value_.__l.__size_;
  }
  std::string v15 = std::string::append(&v33, (const std::string::value_type *)v13, size);
  long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v34.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  std::string::size_type v17 = std::string::append(&v34, ",");
  long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v35.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v29, a4);
  if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v19 = &v29;
  }
  else {
    uint64_t v19 = (std::string *)v29.__r_.__value_.__r.__words[0];
  }
  if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v20 = HIBYTE(v29.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v20 = v29.__r_.__value_.__l.__size_;
  }
  uint64_t v21 = std::string::append(&v35, (const std::string::value_type *)v19, v20);
  long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v36.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  std::string::size_type v23 = std::string::append(&v36, " in layer ");
  long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v37.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  int v25 = *(char *)(a5 + 23);
  if (v25 >= 0) {
    std::string::size_type v26 = (const std::string::value_type *)a5;
  }
  else {
    std::string::size_type v26 = *(const std::string::value_type **)a5;
  }
  if (v25 >= 0) {
    std::string::size_type v27 = *(unsigned __int8 *)(a5 + 23);
  }
  else {
    std::string::size_type v27 = *(void *)(a5 + 8);
  }
  uint64_t v28 = std::string::append(&v37, v26, v27);
  *a1 = *v28;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v34.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31.__r_.__value_.__l.__data_);
  }
}

void sub_19EABC4B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (*(char *)(v47 - 57) < 0) {
    operator delete(*(void **)(v47 - 80));
  }
  if (*(char *)(v47 - 89) < 0) {
    operator delete(*(void **)(v47 - 112));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v47 - 121) < 0) {
    operator delete(*(void **)(v47 - 144));
  }
  if (a47 < 0) {
    operator delete(a42);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

void innerProductQuantizedWeightArraySizeErrorString(std::string *a1, unint64_t __val, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  std::to_string(&v40, __val);
  std::string::size_type v11 = std::string::insert(&v40, 0, "Size of quantized weights (in bytes) = ");
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v41.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  std::string v13 = std::string::append(&v41, " is smaller than the total bytes required for the product of input and output channels = ");
  long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v42.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v39, a3);
  if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string v15 = &v39;
  }
  else {
    std::string v15 = (std::string *)v39.__r_.__value_.__r.__words[0];
  }
  if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v39.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v39.__r_.__value_.__l.__size_;
  }
  std::string::size_type v17 = std::string::append(&v42, (const std::string::value_type *)v15, size);
  long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v43.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  uint64_t v19 = std::string::append(&v43, ",");
  long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v38, a4);
  if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v21 = &v38;
  }
  else {
    uint64_t v21 = (std::string *)v38.__r_.__value_.__r.__words[0];
  }
  if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v22 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v22 = v38.__r_.__value_.__l.__size_;
  }
  std::string::size_type v23 = std::string::append(&v44, (const std::string::value_type *)v21, v22);
  long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v45.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  int v25 = std::string::append(&v45, "for ");
  long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, a5);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v28 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v28 = __p.__r_.__value_.__l.__size_;
  }
  std::string v29 = std::string::append(&v46, (const std::string::value_type *)p_p, v28);
  long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  v47.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  std::string v31 = std::string::append(&v47, "-bit quantization in layer ");
  long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  v48.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  int v33 = *(char *)(a6 + 23);
  if (v33 >= 0) {
    std::string v34 = (const std::string::value_type *)a6;
  }
  else {
    std::string v34 = *(const std::string::value_type **)a6;
  }
  if (v33 >= 0) {
    std::string::size_type v35 = *(unsigned __int8 *)(a6 + 23);
  }
  else {
    std::string::size_type v35 = *(void *)(a6 + 8);
  }
  std::string v36 = std::string::append(&v48, v34, v35);
  *a1 = *v36;
  v36->__r_.__value_.__l.__size_ = 0;
  v36->__r_.__value_.__r.__words[2] = 0;
  v36->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v47.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v45.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v44.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v39.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v42.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v41.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v40.__r_.__value_.__l.__data_);
  }
}

void sub_19EABC88C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v59 - 73) < 0) {
    operator delete(*(void **)(v59 - 96));
  }
  if (*(char *)(v59 - 105) < 0) {
    operator delete(*(void **)(v59 - 128));
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v59 - 137) < 0) {
    operator delete(*(void **)(v59 - 160));
  }
  if (*(char *)(v59 - 169) < 0) {
    operator delete(*(void **)(v59 - 192));
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  _Unwind_Resume(exception_object);
}

void sub_19EABC998()
{
}

void sub_19EABC9A0()
{
}

void sub_19EABC9A8()
{
}

void innerProductBiasArraySizeErrorString(std::string *a1, unint64_t __val, unint64_t a3, uint64_t a4)
{
  std::to_string(&v22, __val);
  std::string v7 = std::string::insert(&v22, 0, "Size of bias = ");
  long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  int v9 = std::string::append(&v23, " is not equal to the output channels = ");
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v24.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, a3);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::string v13 = std::string::append(&v24, (const std::string::value_type *)p_p, size);
  long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v25.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  std::string v15 = std::string::append(&v25, " in layer ");
  long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v26.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  int v17 = *(char *)(a4 + 23);
  if (v17 >= 0) {
    long long v18 = (const std::string::value_type *)a4;
  }
  else {
    long long v18 = *(const std::string::value_type **)a4;
  }
  if (v17 >= 0) {
    std::string::size_type v19 = *(unsigned __int8 *)(a4 + 23);
  }
  else {
    std::string::size_type v19 = *(void *)(a4 + 8);
  }
  long long v20 = std::string::append(&v26, v18, v19);
  *a1 = *v20;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
}

void sub_19EABCB50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (*(char *)(v33 - 73) < 0) {
    operator delete(*(void **)(v33 - 96));
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void LayerTranslator::addReshapeLike(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  long long v4 = (long long *)*((void *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)v4, *((void *)v4 + 1));
  }
  else
  {
    long long v5 = *v4;
    v23.__r_.__value_.__r.__words[2] = *((void *)v4 + 2);
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v5;
  }
  long long v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  int v17 = 0;
  long long v18 = 0;
  uint64_t v19 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v20, (uint64_t *)&v17, *((void *)this + 1));
  v13[0] = 0;
  v13[1] = 0;
  int v16 = 1;
  long long v14 = xmmword_19EC7B8F0;
  __int16 v15 = 0;
  long long v6 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "reshape");
  memset(&v8, 0, sizeof(v8));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v8, v17, v18, 0xAAAAAAAAAAAAAAABLL * (((char *)v18 - (char *)v17) >> 3));
  memset(&v7, 0, sizeof(v7));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v7, v20, v21, 0xAAAAAAAAAAAAAAABLL * (((char *)v21 - (char *)v20) >> 3));
  Espresso::sequential_builder::add<Espresso::reshape_params>(&v11, v6, (uint64_t)__p, (uint64_t)&v23, (uint64_t)v13, (long long *)v8.__r_.__value_.__l.__data_, (long long *)v8.__r_.__value_.__l.__size_, (long long **)&v7);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  std::string v24 = &v7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  std::string v24 = &v8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v20);
  v13[0] = (void **)&v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v13);
  v13[0] = (void **)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v13);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
}

void sub_19EABCD84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  a23 = v23 - 112;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  a23 = v23 - 88;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  if (*(char *)(v23 - 41) < 0) {
    operator delete(*(void **)(v23 - 64));
  }
  _Unwind_Resume(a1);
}

void LayerTranslator::addReshapeStatic(LayerTranslator *this, uint64_t **a2)
{
  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  long long v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v40, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    long long v5 = *(_OWORD *)v4;
    v40.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v5;
  }
  std::string v37 = 0;
  std::string v38 = 0;
  uint64_t v39 = 0;
  std::string v34 = 0;
  std::string::size_type v35 = 0;
  uint64_t v36 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v37, (uint64_t *)&v34, *((void *)this + 1));
  if (*((_DWORD *)a2 + 35) == 1140)
  {
    std::string v7 = a2[16];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    std::string v7 = &CoreML::Specification::_ReshapeStaticLayerParams_default_instance_;
  }
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  std::string v29 = (long long **)&unk_1EF0D66D8;
  unint64_t v30 = 0;
  int v8 = *((_DWORD *)v7 + 4);
  if (v8)
  {
    google::protobuf::RepeatedField<double>::Reserve((unsigned int *)&v31, v8);
    memcpy((void *)(v32 + 8), (const void *)(v7[3] + 8), 8 * *((int *)v7 + 4));
    int v9 = *((_DWORD *)v7 + 4);
    LODWORD(v31) = v9;
  }
  else
  {
    int v9 = 0;
  }
  int v33 = 0;
  uint64_t v10 = v7[1];
  if (v10)
  {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&v30, v10 & 0xFFFFFFFFFFFFFFFELL);
    int v9 = v31;
  }
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v25 = 0;
  char v27 = 0;
  int v28 = 1;
  int v24 = v9;
  if (v9 <= 0)
  {
    LODWORD(v21) = 1;
    goto LABEL_20;
  }
  LODWORD(v21) = *(void *)(v32 + 8 * (v9 - 1) + 8);
  if (v9 == 1)
  {
LABEL_20:
    HIDWORD(v21) = 1;
    goto LABEL_21;
  }
  HIDWORD(v21) = *(void *)(v32 + 8 * (v9 - 2) + 8);
  if (v9 <= 2)
  {
LABEL_21:
    LODWORD(v22) = 1;
    goto LABEL_22;
  }
  LODWORD(v22) = *(void *)(v32 + 8 * (v9 - 3) + 8);
  if (v9 == 3)
  {
LABEL_22:
    int v14 = 1;
    HIDWORD(v22) = 1;
    goto LABEL_23;
  }
  HIDWORD(v22) = *(void *)(v32 + 8 * (v9 - 4) + 8);
  BOOL v11 = v9 >= 5;
  unsigned int v12 = v9 - 5;
  if (v11) {
    int v14 = *(_DWORD *)(v32 + 8 * v12 + 8);
  }
  else {
    int v14 = 1;
  }
LABEL_23:
  int v23 = v14;
  char v26 = 0;
  std::string v13 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "reshape");
  memset(&v16, 0, sizeof(v16));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v16, v34, v35, 0xAAAAAAAAAAAAAAABLL * (((char *)v35 - (char *)v34) >> 3));
  memset(&v15, 0, sizeof(v15));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v15, v37, v38, 0xAAAAAAAAAAAAAAABLL * (((char *)v38 - (char *)v37) >> 3));
  Espresso::sequential_builder::add<Espresso::reshape_params>(&v19, v13, (uint64_t)__p, (uint64_t)&v40, (uint64_t)&v21, (long long *)v16.__r_.__value_.__l.__data_, (long long *)v16.__r_.__value_.__l.__size_, (long long **)&v15);
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  std::string v41 = &v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v41);
  std::string v41 = &v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v41);
  if (v18 < 0) {
    operator delete(__p[0]);
  }
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v37);
  CoreML::Specification::ReshapeStaticLayerParams::~ReshapeStaticLayerParams((CoreML::Specification::ReshapeStaticLayerParams *)&v29);
  std::string v29 = &v34;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  std::string v29 = &v37;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v40.__r_.__value_.__l.__data_);
  }
}

void sub_19EABD0E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p)
{
  if (__p && !*__p) {
    operator delete(__p);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v32);
  a29 = v33 - 112;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a29);
  a29 = v33 - 88;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a29);
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  _Unwind_Resume(a1);
}

void LayerTranslator::addReshapeDynamic(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  long long v4 = (long long *)*((void *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)v4, *((void *)v4 + 1));
  }
  else
  {
    long long v5 = *v4;
    v23.__r_.__value_.__r.__words[2] = *((void *)v4 + 2);
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v5;
  }
  long long v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  int v17 = 0;
  char v18 = 0;
  uint64_t v19 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v20, (uint64_t *)&v17, *((void *)this + 1));
  v13[0] = 0;
  v13[1] = 0;
  int v16 = 1;
  long long v14 = xmmword_19EC7B8F0;
  __int16 v15 = 1;
  long long v6 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "reshape");
  memset(&v8, 0, sizeof(v8));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v8, v17, v18, 0xAAAAAAAAAAAAAAABLL * (((char *)v18 - (char *)v17) >> 3));
  memset(&v7, 0, sizeof(v7));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v7, v20, v21, 0xAAAAAAAAAAAAAAABLL * (((char *)v21 - (char *)v20) >> 3));
  Espresso::sequential_builder::add<Espresso::reshape_params>(&v11, v6, (uint64_t)__p, (uint64_t)&v23, (uint64_t)v13, (long long *)v8.__r_.__value_.__l.__data_, (long long *)v8.__r_.__value_.__l.__size_, (long long **)&v7);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  int v24 = &v7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  int v24 = &v8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v20);
  v13[0] = (void **)&v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v13);
  v13[0] = (void **)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v13);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
}

void sub_19EABD34C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  a23 = v23 - 112;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  a23 = v23 - 88;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  if (*(char *)(v23 - 41) < 0) {
    operator delete(*(void **)(v23 - 64));
  }
  _Unwind_Resume(a1);
}

void LayerTranslator::addResizeBilinear(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  long long v4 = (long long *)*((void *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v51, *(const std::string::value_type **)v4, *((void *)v4 + 1));
  }
  else
  {
    long long v5 = *v4;
    v51.__r_.__value_.__r.__words[2] = *((void *)v4 + 2);
    *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v5;
  }
  std::string v48 = 0;
  int v49 = 0;
  uint64_t v50 = 0;
  std::string v45 = 0;
  std::string v46 = 0;
  uint64_t v47 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v48, (uint64_t *)&v45, *((void *)this + 1));
  if (*((_DWORD *)a2 + 35) == 211)
  {
    std::string v7 = (const CoreML::Specification::ResizeBilinearLayerParams *)*((void *)a2 + 16);
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    std::string v7 = (const CoreML::Specification::ResizeBilinearLayerParams *)&CoreML::Specification::_ResizeBilinearLayerParams_default_instance_;
  }
  CoreML::Specification::ResizeBilinearLayerParams::ResizeBilinearLayerParams((CoreML::Specification::ResizeBilinearLayerParams *)v41, v7);
  int v32 = 0;
  int v33 = 0;
  long long v30 = 0uLL;
  char v31 = 0;
  int v34 = 1065353216;
  char v35 = 0;
  int v36 = 2;
  long long v37 = 0u;
  long long v38 = 0u;
  LODWORD(v8) = 1;
  int v39 = 1;
  char v40 = 0;
  if (v42)
  {
    if (v42 != 2)
    {
      exceptiounint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      int v24 = std::string::append((std::string *)v55, " , target size must be of length 2, if set");
      long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
      *(void *)&v60[16] = *((void *)&v24->__r_.__value_.__l + 2);
      *(_OWORD *)long long v60 = v25;
      v24->__r_.__value_.__l.__size_ = 0;
      v24->__r_.__value_.__r.__words[2] = 0;
      v24->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, (const std::string *)v60);
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    uint64_t v9 = *(void *)(v43 + 8);
    uint64_t v8 = *(void *)(v43 + 16);
    if (!v9) {
      LODWORD(v9) = 1;
    }
    DWORD2(v30) = v9;
    if (!v8) {
      LODWORD(v8) = 1;
    }
  }
  else
  {
    DWORD2(v30) = 1;
  }
  DWORD1(v30) = v8;
  int v34 = 1065353216;
  char v10 = v44;
  if (!v44) {
    char v10 = &CoreML::Specification::_SamplingMode_default_instance_;
  }
  int v11 = *((_DWORD *)v10 + 4);
  int v12 = 0;
  switch(v11)
  {
    case 0:
      int v12 = 1;
      goto LABEL_22;
    case 1:
      goto LABEL_22;
    case 2:
    case 3:
      int v12 = v11;
LABEL_22:
      int v32 = v12;
      break;
    default:
      if (v11 == 0x80000000 || v11 == 0x7FFFFFFF)
      {
        std::string v13 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x19F3C1380](v13, "Sampling mode not set in resize bilinear layer.");
        __cxa_throw(v13, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      return;
  }
  long long v14 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(v60, "crop_and_resize");
  memset(&v27, 0, sizeof(v27));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v27, v45, v46, 0xAAAAAAAAAAAAAAABLL * (((char *)v46 - (char *)v45) >> 3));
  memset(&v26, 0, sizeof(v26));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v26, v48, v49, 0xAAAAAAAAAAAAAAABLL * (((char *)v49 - (char *)v48) >> 3));
  Espresso::sequential_builder::add<Espresso::crop_and_resize_params_t>(&v28, v14, (uint64_t)v60, (uint64_t)&v51, (uint64_t)&v30, (long long *)v27.__r_.__value_.__l.__data_, (long long *)v27.__r_.__value_.__l.__size_, (long long **)&v26);
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  *(void *)uint64_t v55 = &v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v55);
  *(void *)uint64_t v55 = &v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v55);
  if ((v60[23] & 0x80000000) != 0) {
    operator delete(*(void **)v60);
  }
  if (**((unsigned char **)this + 2))
  {
    LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v48);
  }
  else
  {
    __int16 v15 = (uint64_t **)*((void *)this + 1);
    uint64_t v16 = *(void *)((char *)&v30 + 4);
    uint64_t v17 = std::map<std::string,std::string>::at((uint64_t)v15, v45);
    *(_OWORD *)long long v60 = *(_OWORD *)v17;
    *(_OWORD *)&v60[16] = *(_OWORD *)(v17 + 16);
    uint64_t v61 = *(void *)(v17 + 32);
    uint64_t v62 = 0;
    uint64_t v63 = 0;
    uint64_t v64 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v62, *(const void **)(v17 + 40), *(void *)(v17 + 48), (uint64_t)(*(void *)(v17 + 48) - *(void *)(v17 + 40)) >> 2);
    *(_OWORD *)uint64_t v55 = *(_OWORD *)v60;
    *(_OWORD *)&v55[16] = *(_OWORD *)&v60[16];
    char v18 = v62;
    uint64_t v56 = v61;
    long long v57 = 0;
    uint64_t v58 = 0;
    uint64_t v59 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v57, v62, v63, (v63 - (uint64_t)v62) >> 2);
    *(void *)uint64_t v55 = v16;
    v52[0] = *(_OWORD *)v55;
    v52[1] = *(_OWORD *)&v55[16];
    uint64_t v19 = v57;
    uint64_t v53 = v56;
    memset(__p, 0, sizeof(__p));
    uint64_t v20 = v58;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(__p, v57, v58, (v58 - (uint64_t)v57) >> 2);
    EspressoConverter::validateShape((int *)v52, *((void *)a2 + 14), (uint64_t)v48);
    if (__p[0]) {
      operator delete(__p[0]);
    }
    uint64_t v65 = v48;
    uint64_t v21 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v15, v48, &v65);
    long long v22 = *(_OWORD *)&v55[16];
    *(_OWORD *)(v21 + 5CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = *(_OWORD *)v55;
    *(_OWORD *)(v21 + 72) = v22;
    *((void *)v21 + 11) = v56;
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v21 + 96, v19, v20, (v20 - (uint64_t)v19) >> 2);
    if (v19) {
      operator delete(v19);
    }
    if (v18) {
      operator delete(v18);
    }
  }
  CoreML::Specification::ResizeBilinearLayerParams::~ResizeBilinearLayerParams((CoreML::Specification::ResizeBilinearLayerParams *)v41);
  *(void *)&long long v30 = &v45;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
  *(void *)&long long v30 = &v48;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v51.__r_.__value_.__l.__data_);
  }
}

void sub_19EABD87C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53)
{
  if (*(char *)(v55 - 137) < 0) {
    operator delete(*(void **)(v55 - 160));
  }
  if (*(char *)(v55 - 201) < 0)
  {
    operator delete(*(void **)(v55 - 224));
    if ((v54 & 1) == 0)
    {
LABEL_8:
      CoreML::Specification::ResizeBilinearLayerParams::~ResizeBilinearLayerParams((CoreML::Specification::ResizeBilinearLayerParams *)&a28);
      a18 = &a35;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
      a18 = &a38;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
      if (a46 < 0) {
        operator delete(__p);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v54)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v53);
  goto LABEL_8;
}

void Espresso::sequential_builder::add<Espresso::crop_and_resize_params_t>(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, long long *a6, long long *a7, long long **a8)
{
  memset(&v13, 0, sizeof(v13));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v13, a6, a7, 0xAAAAAAAAAAAAAAABLL * (((char *)a7 - (char *)a6) >> 3));
  memset(&v12, 0, sizeof(v12));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v12, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a8[1] - (char *)*a8) >> 3));
  LODWORD(v15.__r_.__value_.__l.__data_) = (***(uint64_t (****)(void))(a2[14] + 8))(*(void *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  int v11 = (std::__shared_weak_count *)a1[1];
  uint64_t v16 = *a1;
  uint64_t v17 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(&v15, 0, sizeof(v15));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v15, (long long *)v13.__r_.__value_.__l.__data_, (long long *)v13.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13.__r_.__value_.__l.__size_ - v13.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v14, 0, sizeof(v14));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v14, (long long *)v12.__r_.__value_.__l.__data_, (long long *)v12.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12.__r_.__value_.__l.__size_ - v12.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  char v18 = &v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  char v18 = &v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (*a2) {
    Espresso::sequential_builder::add_shape_from_kernel();
  }
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
}

void sub_19EABDBB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v16 = *(std::__shared_weak_count **)(v13 + 8);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  *(void *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(void *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void LayerTranslator::addSequenceRepeat(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  long long v4 = (long long *)*((void *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v34, *(const std::string::value_type **)v4, *((void *)v4 + 1));
  }
  else
  {
    long long v5 = *v4;
    v34.__r_.__value_.__r.__words[2] = *((void *)v4 + 2);
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v5;
  }
  char v31 = 0;
  int v32 = 0;
  uint64_t v33 = 0;
  uint64_t v28 = 0;
  std::string v29 = 0;
  uint64_t v30 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v31, (uint64_t *)&v28, *((void *)this + 1));
  if (*((_DWORD *)a2 + 35) == 340)
  {
    std::string v7 = (uint64_t *)*((void *)a2 + 16);
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    std::string v7 = &CoreML::Specification::_SequenceRepeatLayerParams_default_instance_;
  }
  long long v25 = &unk_1EF0D6DF8;
  v26[0] = 0;
  int v27 = 0;
  uint64_t v8 = v7[1];
  if (v8) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((unint64_t *)v26, v8 & 0xFFFFFFFFFFFFFFFELL);
  }
  uint64_t v9 = v7[2];
  v26[1] = v9;
  if (!v9) {
    LODWORD(v9) = 1;
  }
  int v24 = v9;
  char v10 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(&__p, "sequence_repeat");
  memset(&v19, 0, sizeof(v19));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v19, v28, v29, 0xAAAAAAAAAAAAAAABLL * (((char *)v29 - (char *)v28) >> 3));
  memset(&v18, 0, sizeof(v18));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v18, v31, v32, 0xAAAAAAAAAAAAAAABLL * (((char *)v32 - (char *)v31) >> 3));
  *(void *)&long long v36 = 0;
  long long v35 = 0uLL;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&v35, (long long *)v19.__r_.__value_.__l.__data_, (long long *)v19.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19.__r_.__value_.__l.__size_ - v19.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v51, 0, sizeof(v51));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v51, (long long *)v18.__r_.__value_.__l.__data_, (long long *)v18.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18.__r_.__value_.__l.__size_ - v18.__r_.__value_.__r.__words[0]) >> 3));
  LODWORD(v45) = (***(uint64_t (****)(void))(v10[14] + 8))(*(void *)(v10[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  uint64_t v52 = v22;
  uint64_t v53 = v23;
  if (v23) {
    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v45 = 0uLL;
  *(void *)&long long v46 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&v45, (long long *)v35, *((long long **)&v35 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v35 + 1) - v35) >> 3));
  long long v39 = 0uLL;
  *(void *)&long long v40 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&v39, (long long *)v51.__r_.__value_.__l.__data_, (long long *)v51.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v51.__r_.__value_.__l.__size_ - v51.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  int v54 = (void **)&v39;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v54);
  int v54 = (void **)&v45;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v54);
  if (v53) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v53);
  }
  if (*v10) {
    Espresso::sequential_builder::add_shape_from_kernel();
  }
  *(void *)&long long v45 = &v51;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
  *(void *)&long long v45 = &v35;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
  *(void *)&long long v45 = &v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
  *(void *)&long long v45 = &v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
  if (v21 < 0) {
    operator delete(__p);
  }
  if (**((unsigned char **)this + 2))
  {
    LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v31);
  }
  else
  {
    int v11 = (uint64_t **)*((void *)this + 1);
    uint64_t v12 = std::map<std::string,std::string>::at((uint64_t)v11, v28);
    long long v45 = *(_OWORD *)v12;
    long long v46 = *(_OWORD *)(v12 + 16);
    uint64_t v47 = *(void *)(v12 + 32);
    std::string v48 = 0;
    uint64_t v49 = 0;
    uint64_t v50 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v48, *(const void **)(v12 + 40), *(void *)(v12 + 48), (uint64_t)(*(void *)(v12 + 48) - *(void *)(v12 + 40)) >> 2);
    long long v39 = v45;
    long long v40 = v46;
    uint64_t v13 = v48;
    uint64_t v41 = v47;
    int v42 = 0;
    uint64_t v43 = 0;
    uint64_t v44 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v42, v48, v49, (v49 - (uint64_t)v48) >> 2);
    long long v35 = v39;
    long long v36 = v40;
    uint64_t v14 = v42;
    uint64_t v37 = v41;
    memset(v38, 0, sizeof(v38));
    uint64_t v15 = v43;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v38, v42, v43, (v43 - (uint64_t)v42) >> 2);
    EspressoConverter::validateShape((int *)&v35, *((void *)a2 + 14), (uint64_t)v31);
    if (v38[0]) {
      operator delete(v38[0]);
    }
    v51.__r_.__value_.__r.__words[0] = (std::string::size_type)v31;
    uint64_t v16 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v11, v31, (long long **)&v51);
    long long v17 = v40;
    *(_OWORD *)(v16 + 5CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = v39;
    *(_OWORD *)(v16 + 72) = v17;
    *((void *)v16 + 11) = v41;
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v16 + 96, v14, v15, (v15 - (uint64_t)v14) >> 2);
    if (v14) {
      operator delete(v14);
    }
    if (v13) {
      operator delete(v13);
    }
  }
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  long long v25 = &unk_1EF0D6DF8;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v26);
  *(void *)&long long v45 = &v28;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
  *(void *)&long long v45 = &v31;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v34.__r_.__value_.__l.__data_);
  }
}

void sub_19EABE0E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,std::__shared_weak_count *a22,uint64_t a23,char *a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p)
{
  if (__p)
  {
    operator delete(__p);
    if (!v49)
    {
LABEL_3:
      if (!v48)
      {
LABEL_8:
        if (a22) {
          std::__shared_weak_count::__release_shared[abi:ne180100](a22);
        }
        a24 = (char *)v47;
        google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v46);
        a24 = &a28;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
        a24 = &a31;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
        if (a39 < 0) {
          operator delete(a34);
        }
        _Unwind_Resume(a1);
      }
LABEL_7:
      operator delete(v48);
      goto LABEL_8;
    }
  }
  else if (!v49)
  {
    goto LABEL_3;
  }
  operator delete(v49);
  if (!v48) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

void LayerTranslator::addSlidingWindows(LayerTranslator *this, uint64_t **a2)
{
  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  long long v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v28, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    long long v5 = *(_OWORD *)v4;
    v28.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v5;
  }
  long long v25 = 0;
  std::string v26 = 0;
  uint64_t v27 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v25, (uint64_t *)&v22, *((void *)this + 1));
  if (*((_DWORD *)a2 + 35) == 1005)
  {
    std::string v7 = a2[16];
    int v19 = v7[2];
LABEL_8:
    int v20 = v7[3];
    goto LABEL_9;
  }
  unint64_t inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
  int v9 = *((_DWORD *)a2 + 35);
  int v19 = qword_1EB4E14E8;
  if (v9 == 1005)
  {
    std::string v7 = a2[16];
    goto LABEL_8;
  }
  int v11 = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
  int v12 = *((_DWORD *)a2 + 35);
  int v20 = qword_1EB4E14F0;
  if (v12 == 1005)
  {
    std::string v7 = a2[16];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v11);
    std::string v7 = &CoreML::Specification::_SlidingWindowsLayerParams_default_instance_;
  }
LABEL_9:
  int v21 = v7[4];
  char v10 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(&__p, "sliding_windows");
  memset(&v14, 0, sizeof(v14));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v14, v22, v23, 0xAAAAAAAAAAAAAAABLL * (((char *)v23 - (char *)v22) >> 3));
  memset(&v13, 0, sizeof(v13));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v13, v25, v26, 0xAAAAAAAAAAAAAAABLL * (((char *)v26 - (char *)v25) >> 3));
  memset(&v30, 0, sizeof(v30));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v30, (long long *)v14.__r_.__value_.__l.__data_, (long long *)v14.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14.__r_.__value_.__l.__size_ - v14.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v29, 0, sizeof(v29));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v29, (long long *)v13.__r_.__value_.__l.__data_, (long long *)v13.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13.__r_.__value_.__l.__size_ - v13.__r_.__value_.__r.__words[0]) >> 3));
  LODWORD(v32.__r_.__value_.__l.__data_) = (***(uint64_t (****)(void))(v10[14] + 8))(*(void *)(v10[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  uint64_t v33 = v17;
  std::string v34 = v18;
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(&v32, 0, sizeof(v32));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v32, (long long *)v30.__r_.__value_.__l.__data_, (long long *)v30.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v30.__r_.__value_.__l.__size_ - v30.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v31, 0, sizeof(v31));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v31, (long long *)v29.__r_.__value_.__l.__data_, (long long *)v29.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29.__r_.__value_.__l.__size_ - v29.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  long long v35 = &v31;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
  long long v35 = &v32;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  if (*v10) {
    Espresso::sequential_builder::add_shape_from_kernel();
  }
  v32.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
  v32.__r_.__value_.__r.__words[0] = (std::string::size_type)&v30;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  v32.__r_.__value_.__r.__words[0] = (std::string::size_type)&v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
  v32.__r_.__value_.__r.__words[0] = (std::string::size_type)&v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
  if (v16 < 0) {
    operator delete(__p);
  }
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v25);
  v32.__r_.__value_.__r.__words[0] = (std::string::size_type)&v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
  v32.__r_.__value_.__r.__words[0] = (std::string::size_type)&v25;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
}

void sub_19EABE5DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char **__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,std::__shared_weak_count *a23,uint64_t a24,uint64_t a25,char *a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a23);
  }
  *(void *)(v37 - 5CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = v37 - 168;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v37 - 56));
  *(void *)(v37 - 5CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = v37 - 144;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v37 - 56));
  *(void *)(v37 - 5CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v37 - 56));
  *(void *)(v37 - 5CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v37 - 56));
  if (a21 < 0) {
    operator delete(__p);
  }
  std::string __p = &a26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  a26 = &a29;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a26);
  if (a37 < 0) {
    operator delete(a32);
  }
  _Unwind_Resume(a1);
}

BOOL LayerTranslator::addScale(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  long long v4 = (long long *)*((void *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v201, *(const std::string::value_type **)v4, *((void *)v4 + 1));
  }
  else
  {
    long long v5 = *v4;
    v201.__r_.__value_.__r.__words[2] = *((void *)v4 + 2);
    *(_OWORD *)&v201.__r_.__value_.__l.__data_ = v5;
  }
  int v199 = 0;
  int v198 = 0;
  uint64_t v200 = 0;
  uint64_t v196 = 0;
  char v195 = 0;
  unint64_t v197 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v198, (uint64_t *)&v195, *((void *)this + 1));
  if (*((_DWORD *)a2 + 35) == 245)
  {
    std::string v7 = (uint64_t *)*((void *)a2 + 16);
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    std::string v7 = &CoreML::Specification::_ScaleLayerParams_default_instance_;
  }
  long long v188 = 0;
  uint64_t v187 = 0;
  unsigned __int8 v185 = (char **)&unk_1EF0D1D38;
  unint64_t v186 = 0;
  int v8 = *((_DWORD *)v7 + 4);
  if (v8)
  {
    google::protobuf::RepeatedField<double>::Reserve((unsigned int *)&v187, v8);
    memcpy(v188 + 1, (const void *)(v7[3] + 8), 8 * *((int *)v7 + 4));
    LODWORD(v187) = *((_DWORD *)v7 + 4);
  }
  int v190 = 0;
  uint64_t v189 = 0;
  int v9 = *((_DWORD *)v7 + 10);
  if (v9)
  {
    google::protobuf::RepeatedField<double>::Reserve((unsigned int *)&v189, v9);
    memcpy(v190 + 1, (const void *)(v7[6] + 8), 8 * *((int *)v7 + 10));
    LODWORD(v189) = *((_DWORD *)v7 + 10);
  }
  int v194 = 0;
  uint64_t v10 = v7[1];
  if (v10) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&v186, v10 & 0xFFFFFFFFFFFFFFFELL);
  }
  if (v7 == &CoreML::Specification::_ScaleLayerParams_default_instance_)
  {
    unint64_t v191 = 0;
  }
  else
  {
    if (v7[8]) {
      operator new();
    }
    unint64_t v191 = 0;
    if (v7[9]) {
      operator new();
    }
  }
  std::string v192 = 0;
  char v193 = *((unsigned char *)v7 + 80);
  switch((int)v187)
  {
    case 0:
      exceptiounint64_t n = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x19F3C1380](exception, "Scale Layer: Scale shape cannot be of size 0");
      goto LABEL_305;
    case 1:
      uint64_t v11 = v188[1];
      uint64_t v12 = 1;
      uint64_t v13 = 1;
      goto LABEL_23;
    case 2:
      uint64_t v12 = v188[1];
      uint64_t v13 = v188[2];
      uint64_t v11 = 1;
      goto LABEL_23;
    case 3:
      uint64_t v11 = v188[1];
      uint64_t v12 = v188[2];
      uint64_t v13 = v188[3];
LABEL_23:
      if (v12 * v11 * v13 != (int)EspressoConverter::getWeightParamSize((uint64_t)&CoreML::Specification::_WeightParams_default_instance_))
      {
        uint64_t v131 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x19F3C1380](v131, "Scale Layer: Scale size does not match provided shape");
        __cxa_throw(v131, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      int v184 = -1;
      uint64_t v183 = 0x100000001;
      int v182 = v11;
      int v181 = v12;
      int v180 = v13;
      int v178 = 0;
      uint64_t v177 = 0;
      unint64_t v179 = 0;
      uint64_t v175 = 0;
      std::string v174 = 0;
      uint64_t v176 = 0;
      if ((v201.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v201.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v201.__r_.__value_.__l.__size_;
      }
      uint64_t v15 = &v215;
      std::string::basic_string[abi:ne180100]((uint64_t)&v215, size + 1);
      if (SBYTE7(v216) < 0) {
        uint64_t v15 = (long long *)v215;
      }
      if (size)
      {
        if ((v201.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          char v16 = &v201;
        }
        else {
          char v16 = (std::string *)v201.__r_.__value_.__r.__words[0];
        }
        memmove(v15, v16, size);
      }
      *(_WORD *)((char *)v15 + size) = 95;
      uint64_t v17 = std::string::append((std::string *)&v215, "constant_in_scale");
      long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      std::string::size_type v173 = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string::size_type __sz = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      if (SBYTE7(v216) < 0) {
        operator delete((void *)v215);
      }
      int v19 = v178;
      if ((unint64_t)v178 >= v179)
      {
        int v21 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v177, (long long *)__sz);
      }
      else
      {
        if (SHIBYTE(v173) < 0)
        {
          std::string::__init_copy_ctor_external(v178, (const std::string::value_type *)__sz[0], __sz[1]);
        }
        else
        {
          long long v20 = *(_OWORD *)__sz;
          v178->__r_.__value_.__r.__words[2] = v173;
          *(_OWORD *)&v19->__r_.__value_.__l.__data_ = v20;
        }
        int v21 = v19 + 1;
      }
      int v178 = v21;
      uint64_t v22 = *(void **)this;
      std::string::basic_string[abi:ne180100]<0>(&v215, "load_constant");
      memset(&v169, 0, sizeof(v169));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v169, v174, v175, 0xAAAAAAAAAAAAAAABLL * (((char *)v175 - (char *)v174) >> 3));
      memset(&v168, 0, sizeof(v168));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v168, v177, (long long *)v178, 0xAAAAAAAAAAAAAAABLL * (((char *)v178 - (char *)v177) >> 3));
      Espresso::sequential_builder::add<Espresso::load_constant_params>(&v170, v22, (uint64_t)&v215, (uint64_t)__sz, (uint64_t)&v180, (long long *)v169.__r_.__value_.__l.__data_, (long long *)v169.__r_.__value_.__l.__size_, (long long **)&v168);
      *(void *)std::string __p = &v168;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      *(void *)std::string __p = &v169;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      if (SBYTE7(v216) < 0) {
        operator delete((void *)v215);
      }
      uint64_t v23 = v171;
      if (v171) {
        atomic_fetch_add_explicit(&v171->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v166, v180, v181, v182, v183);
      uint64_t v24 = v12 * v11 * v13;
      uint64_t v25 = v166;
      if (v191) {
        std::string v26 = v191;
      }
      else {
        std::string v26 = &CoreML::Specification::_WeightParams_default_instance_;
      }
      EspressoConverter::copyWeightsToDataBlob(*(EspressoConverter **)(v166 + 24), v26, 4 * v24);
      uint64_t v164 = v25;
      long long v165 = v167;
      if (v167) {
        atomic_fetch_add_explicit(&v167->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Espresso::generic_load_constant_kernel::set_constant_blob();
      if (v165) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v165);
      }
      uint64_t v27 = v196;
      if ((char *)v196 - v195 != 24 || v199 - v198 != 24)
      {
        std::string v130 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x19F3C1380](v130, "Scale Layer: Must accept exactly 1 input and produce 1 output");
LABEL_300:
        __cxa_throw(v130, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      if (!v193)
      {
        if ((unint64_t)v196 >= v197)
        {
          uint64_t v43 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v195, (long long *)__sz);
        }
        else
        {
          if (SHIBYTE(v173) < 0)
          {
            std::string::__init_copy_ctor_external(v196, (const std::string::value_type *)__sz[0], __sz[1]);
          }
          else
          {
            long long v31 = *(_OWORD *)__sz;
            v196->__r_.__value_.__r.__words[2] = v173;
            *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v31;
          }
          uint64_t v43 = v27 + 1;
        }
        uint64_t v196 = v43;
        *(void *)&long long v216 = 897988541;
        BYTE8(v21CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = 0;
        *(void *)((char *)&v218 + 4) = 0;
        *(void *)&long long v215 = 1;
        *((void *)&v215 + 1) = 1065353216;
        uint64_t v68 = *(void **)this;
        std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
        memset(&v163, 0, sizeof(v163));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v163, (long long *)v195, (long long *)v196, 0xAAAAAAAAAAAAAAABLL * (((char *)v196 - v195) >> 3));
        memset(&v162, 0, sizeof(v162));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v162, (long long *)v198, (long long *)v199, 0xAAAAAAAAAAAAAAABLL * ((v199 - v198) >> 3));
        Espresso::sequential_builder::add<Espresso::elementwise_params>((uint64_t *)v203, v68, (uint64_t)__p, (uint64_t)&v201, (uint64_t)&v215, (long long *)v163.__r_.__value_.__l.__data_, (long long *)v163.__r_.__value_.__l.__size_, (long long **)&v162);
        std::string v212 = &v162;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v212);
        std::string v212 = &v163;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v212);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        if (v203[1]) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v203[1]);
        }
        goto LABEL_238;
      }
      break;
    default:
      exceptiounint64_t n = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x19F3C1380](exception, "Scale Layer: Scale shape must be of size less than or equal to 3");
LABEL_305:
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  switch((int)v189)
  {
    case 0:
      std::string v130 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x19F3C1380](v130, "Scale Layer: Bias shape cannot be of size 0");
      goto LABEL_300;
    case 1:
      uint64_t v28 = v190[1];
      uint64_t v29 = 1;
      uint64_t v30 = 1;
      goto LABEL_63;
    case 2:
      uint64_t v29 = v190[1];
      uint64_t v30 = v190[2];
      uint64_t v28 = 1;
      goto LABEL_63;
    case 3:
      uint64_t v28 = v190[1];
      uint64_t v29 = v190[2];
      uint64_t v30 = v190[3];
LABEL_63:
      if (v192) {
        std::string v32 = v192;
      }
      else {
        std::string v32 = &CoreML::Specification::_WeightParams_default_instance_;
      }
      uint64_t v33 = v32[5];
      if (*(char *)(v33 + 23) < 0) {
        uint64_t v34 = *(void *)(v33 + 8);
      }
      else {
        uint64_t v34 = *(unsigned __int8 *)(v33 + 23);
      }
      uint64_t v35 = v32[6];
      uint64_t v36 = *(unsigned __int8 *)(v35 + 23);
      if (*(char *)(v35 + 23) < 0) {
        uint64_t v37 = *(void *)(v35 + 8);
      }
      else {
        uint64_t v37 = *(unsigned __int8 *)(v35 + 23);
      }
      int v38 = *((_DWORD *)v32 + 4);
      uint64_t v39 = v32[7];
      if (*(char *)(v39 + 23) < 0) {
        uint64_t v40 = *(void *)(v39 + 8);
      }
      else {
        uint64_t v40 = *(unsigned __int8 *)(v39 + 23);
      }
      if (v38 <= 0) {
        int v41 = 1;
      }
      else {
        int v41 = 2;
      }
      if (v34) {
        int v42 = v41;
      }
      else {
        int v42 = v38 > 0;
      }
      if (v37) {
        ++v42;
      }
      if (v40) {
        ++v42;
      }
      if (v38 > 0 || v42 != 1) {
        goto LABEL_97;
      }
      if ((*(unsigned char *)(v33 + 23) & 0x80) == 0)
      {
        if (!*(unsigned char *)(v33 + 23)) {
          goto LABEL_92;
        }
LABEL_97:
        if (v29 * v28 * v30 != (int)EspressoConverter::getWeightParamSize((uint64_t)v32))
        {
          unint64_t v132 = __cxa_allocate_exception(0x10uLL);
          MEMORY[0x19F3C1380](v132, "Scale Layer: Bias size does not match provided shape");
          __cxa_throw(v132, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        goto LABEL_98;
      }
      if (*(void *)(v33 + 8)) {
        goto LABEL_97;
      }
LABEL_92:
      if ((v36 & 0x80) != 0) {
        uint64_t v36 = *(void *)(v35 + 8);
      }
      if (v32 == &CoreML::Specification::_WeightParams_default_instance_ || !v36 || !v32[8]) {
        goto LABEL_97;
      }
LABEL_98:
      LODWORD(v183) = 1;
      int v182 = v28;
      int v181 = v29;
      int v180 = v30;
      v203[1] = 0;
      v203[0] = 0;
      *(void *)&long long v204 = 0;
      std::string v212 = 0;
      uint64_t v213 = 0;
      unint64_t v214 = 0;
      if ((v201.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v44 = HIBYTE(v201.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v44 = v201.__r_.__value_.__l.__size_;
      }
      long long v45 = &v215;
      std::string::basic_string[abi:ne180100]((uint64_t)&v215, v44 + 1);
      if (SBYTE7(v216) < 0) {
        long long v45 = (long long *)v215;
      }
      if (v44)
      {
        if ((v201.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v46 = &v201;
        }
        else {
          long long v46 = (std::string *)v201.__r_.__value_.__r.__words[0];
        }
        memmove(v45, v46, v44);
      }
      *(_WORD *)((char *)v45 + v44) = 95;
      uint64_t v47 = std::string::append((std::string *)&v215, "constant_in_bias");
      long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
      std::string::size_type v161 = v47->__r_.__value_.__r.__words[2];
      *(_OWORD *)uint64_t v160 = v48;
      v47->__r_.__value_.__l.__size_ = 0;
      v47->__r_.__value_.__r.__words[2] = 0;
      v47->__r_.__value_.__r.__words[0] = 0;
      if (SBYTE7(v216) < 0) {
        operator delete((void *)v215);
      }
      uint64_t v49 = v203[1];
      if (v203[1] >= (std::string *)v204)
      {
        std::string v51 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)v203, (long long *)v160);
      }
      else
      {
        if (SHIBYTE(v161) < 0)
        {
          std::string::__init_copy_ctor_external(v203[1], (const std::string::value_type *)v160[0], (std::string::size_type)v160[1]);
        }
        else
        {
          long long v50 = *(_OWORD *)v160;
          v203[1]->__r_.__value_.__r.__words[2] = v161;
          *(_OWORD *)&v49->__r_.__value_.__l.__data_ = v50;
        }
        std::string v51 = v49 + 1;
      }
      v203[1] = v51;
      uint64_t v52 = *(void **)this;
      std::string::basic_string[abi:ne180100]<0>(&v215, "load_constant");
      memset(&v157, 0, sizeof(v157));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v157, (long long *)v212, v213, 0xAAAAAAAAAAAAAAABLL * (((char *)v213 - (char *)v212) >> 3));
      memset(&v156, 0, sizeof(v156));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v156, (long long *)v203[0], (long long *)v203[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v203[1] - (char *)v203[0]) >> 3));
      Espresso::sequential_builder::add<Espresso::load_constant_params>(&v158, v52, (uint64_t)&v215, (uint64_t)v160, (uint64_t)&v180, (long long *)v157.__r_.__value_.__l.__data_, (long long *)v157.__r_.__value_.__l.__size_, (long long **)&v156);
      *(void *)std::string __p = &v156;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      *(void *)std::string __p = &v157;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      if (SBYTE7(v216) < 0) {
        operator delete((void *)v215);
      }
      uint64_t v53 = v159;
      if (v159) {
        atomic_fetch_add_explicit(&v159->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v54 = v192;
      if (!v192) {
        int v54 = &CoreML::Specification::_WeightParams_default_instance_;
      }
      uint64_t v55 = v54[5];
      uint64_t v56 = *(unsigned __int8 *)(v55 + 23);
      if (*(char *)(v55 + 23) < 0) {
        uint64_t v57 = *(void *)(v55 + 8);
      }
      else {
        uint64_t v57 = *(unsigned __int8 *)(v55 + 23);
      }
      uint64_t v58 = v54[6];
      uint64_t v59 = *(unsigned __int8 *)(v58 + 23);
      if (*(char *)(v58 + 23) < 0) {
        uint64_t v60 = *(void *)(v58 + 8);
      }
      else {
        uint64_t v60 = *(unsigned __int8 *)(v58 + 23);
      }
      int v61 = *((_DWORD *)v54 + 4);
      uint64_t v62 = v54[7];
      uint64_t v63 = *(unsigned __int8 *)(v62 + 23);
      if (*(char *)(v62 + 23) < 0) {
        uint64_t v64 = *(void *)(v62 + 8);
      }
      else {
        uint64_t v64 = *(unsigned __int8 *)(v62 + 23);
      }
      if (v61 <= 0) {
        int v65 = 1;
      }
      else {
        int v65 = 2;
      }
      if (v57) {
        unsigned int v66 = v65;
      }
      else {
        unsigned int v66 = v61 > 0;
      }
      if (v60) {
        ++v66;
      }
      if (v64) {
        ++v66;
      }
      if (v66 <= 1)
      {
        if (v66) {
          int v67 = 0;
        }
        else {
          int v67 = 5;
        }
        if (v61 <= 0 && v66)
        {
          if ((v56 & 0x80) != 0) {
            uint64_t v56 = *(void *)(v55 + 8);
          }
          if (v56)
          {
            int v67 = 1;
          }
          else
          {
            if ((v59 & 0x80) != 0) {
              uint64_t v59 = *(void *)(v58 + 8);
            }
            uint64_t v69 = v54[8];
            if (v54 != &CoreML::Specification::_WeightParams_default_instance_ && v59 && v69)
            {
              int v67 = 2;
            }
            else
            {
              if ((v63 & 0x80) != 0) {
                uint64_t v63 = *(void *)(v62 + 8);
              }
              if (v69) {
                BOOL v70 = v63 == 0;
              }
              else {
                BOOL v70 = 1;
              }
              if (v70 || v54 == &CoreML::Specification::_WeightParams_default_instance_) {
                int v67 = 5;
              }
              else {
                int v67 = 3;
              }
            }
          }
        }
      }
      else
      {
        int v67 = 4;
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v154, v180, v181, v182, v183);
      uint64_t v72 = v29 * v28 * v30;
      if (v67 == 2)
      {
        if (v192) {
          int v73 = (const CoreML::Specification::WeightParams *)v192;
        }
        else {
          int v73 = (const CoreML::Specification::WeightParams *)&CoreML::Specification::_WeightParams_default_instance_;
        }
        EspressoConverter::readFloatFromWeightParams((EspressoConverter *)&v215, v73, v29 * v28 * v30);
        uint64_t v74 = v154;
        size_t v75 = (void *)v215;
        memcpy(*(void **)(v154 + 24), (const void *)v215, 4 * v72);
        if (v75) {
          operator delete(v75);
        }
      }
      else
      {
        uint64_t v74 = v154;
        if (v192) {
          std::string::size_type v76 = v192;
        }
        else {
          std::string::size_type v76 = &CoreML::Specification::_WeightParams_default_instance_;
        }
        EspressoConverter::copyWeightsToDataBlob(*(EspressoConverter **)(v154 + 24), v76, 4 * v72);
      }
      char v77 = v155;
      uint64_t v152 = v74;
      long long v153 = v155;
      if (v155) {
        atomic_fetch_add_explicit(&v155->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Espresso::generic_load_constant_kernel::set_constant_blob();
      if (v153) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v153);
      }
      uint64_t v78 = v196;
      if ((unint64_t)v196 >= v197)
      {
        unsigned int v80 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v195, (long long *)__sz);
      }
      else
      {
        if (SHIBYTE(v173) < 0)
        {
          std::string::__init_copy_ctor_external(v196, (const std::string::value_type *)__sz[0], __sz[1]);
        }
        else
        {
          long long v79 = *(_OWORD *)__sz;
          v196->__r_.__value_.__r.__words[2] = v173;
          *(_OWORD *)&v78->__r_.__value_.__l.__data_ = v79;
        }
        unsigned int v80 = v78 + 1;
      }
      uint64_t v196 = v80;
      *(void *)&long long v216 = 897988541;
      BYTE8(v21CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = 0;
      *(void *)((char *)&v218 + 4) = 0;
      *(void *)&long long v215 = 1;
      *((void *)&v215 + 1) = 1065353216;
      long long v149 = 0;
      long long v150 = 0;
      unint64_t v151 = 0;
      if ((v201.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v81 = HIBYTE(v201.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v81 = v201.__r_.__value_.__l.__size_;
      }
      std::string::size_type v82 = __p;
      std::string::basic_string[abi:ne180100]((uint64_t)__p, v81 + 1);
      if (__p[23] < 0) {
        std::string::size_type v82 = *(unsigned char **)__p;
      }
      if (v81)
      {
        if ((v201.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string v83 = &v201;
        }
        else {
          std::string v83 = (std::string *)v201.__r_.__value_.__r.__words[0];
        }
        memmove(v82, v83, v81);
      }
      *(_WORD *)&v82[v81] = 95;
      std::string::size_type v84 = std::string::append((std::string *)__p, "mul_out");
      long long v85 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
      std::string::size_type v148 = v84->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string v147 = v85;
      v84->__r_.__value_.__l.__size_ = 0;
      v84->__r_.__value_.__r.__words[2] = 0;
      v84->__r_.__value_.__r.__words[0] = 0;
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      uint64_t v86 = v150;
      if ((unint64_t)v150 >= v151)
      {
        unint64_t v88 = (long long *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v149, (long long *)v147);
      }
      else
      {
        if (SHIBYTE(v148) < 0)
        {
          std::string::__init_copy_ctor_external(v150, (const std::string::value_type *)v147[0], (std::string::size_type)v147[1]);
        }
        else
        {
          long long v87 = *(_OWORD *)v147;
          v150->__r_.__value_.__r.__words[2] = v148;
          *(_OWORD *)&v86->__r_.__value_.__l.__data_ = v87;
        }
        unint64_t v88 = (long long *)&v86[1];
      }
      long long v150 = (std::string *)v88;
      unsigned int v89 = *(void **)this;
      std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
      memset(&v144, 0, sizeof(v144));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v144, (long long *)v195, (long long *)v196, 0xAAAAAAAAAAAAAAABLL * (((char *)v196 - v195) >> 3));
      memset(&v143, 0, sizeof(v143));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v143, v149, (long long *)v150, 0xAAAAAAAAAAAAAAABLL * (((char *)v150 - (char *)v149) >> 3));
      Espresso::sequential_builder::add<Espresso::elementwise_params>(&v145, v89, (uint64_t)__p, (uint64_t)v147, (uint64_t)&v215, (long long *)v144.__r_.__value_.__l.__data_, (long long *)v144.__r_.__value_.__l.__size_, (long long **)&v143);
      uint64_t v140 = &v143;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v140);
      uint64_t v140 = &v144;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v140);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      uint64_t v140 = 0;
      int v141 = 0;
      unint64_t v142 = 0;
      unint64_t v90 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v140, (long long *)v147);
      unint64_t v91 = v90;
      int v141 = (long long *)v90;
      if (v90 >= v142)
      {
        int v93 = (long long *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v140, (long long *)v160);
      }
      else
      {
        if (SHIBYTE(v161) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v90, (const std::string::value_type *)v160[0], (std::string::size_type)v160[1]);
        }
        else
        {
          long long v92 = *(_OWORD *)v160;
          *(void *)(v90 + 1CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = v161;
          *(_OWORD *)unint64_t v90 = v92;
        }
        int v93 = (long long *)(v91 + 24);
      }
      int v141 = v93;
      *(void *)&__p[16] = 897988541;
      __p[24] = 0;
      *(void *)((char *)&v210 + 4) = 0;
      *(void *)&__p[8] = 1065353216;
      *(void *)std::string __p = 0;
      uint64_t v94 = *(void **)this;
      std::string::basic_string[abi:ne180100]<0>(v136, "elementwise");
      memset(&v135, 0, sizeof(v135));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v135, (long long *)v140, v141, 0xAAAAAAAAAAAAAAABLL * (((char *)v141 - (char *)v140) >> 3));
      memset(&v134, 0, sizeof(v134));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v134, (long long *)v198, (long long *)v199, 0xAAAAAAAAAAAAAAABLL * ((v199 - v198) >> 3));
      Espresso::sequential_builder::add<Espresso::elementwise_params>(&v138, v94, (uint64_t)v136, (uint64_t)&v201, (uint64_t)__p, (long long *)v135.__r_.__value_.__l.__data_, (long long *)v135.__r_.__value_.__l.__size_, (long long **)&v134);
      std::string v202 = &v134;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v202);
      std::string v202 = &v135;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v202);
      if (v137 < 0) {
        operator delete(v136[0]);
      }
      if (v139) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v139);
      }
      *(void *)std::string __p = &v140;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      if (v146) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v146);
      }
      if (SHIBYTE(v148) < 0) {
        operator delete(v147[0]);
      }
      *(void *)std::string __p = &v149;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      if (v77) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v77);
      }
      if (v53) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v53);
      }
      if (v159) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v159);
      }
      if (SHIBYTE(v161) < 0) {
        operator delete(v160[0]);
      }
      *(void *)&long long v215 = &v212;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v215);
      *(void *)&long long v215 = v203;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v215);
LABEL_238:
      if (**((unsigned char **)this + 2))
      {
        LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v198);
      }
      else
      {
        long long v95 = (uint64_t **)*((void *)this + 1);
        uint64_t v96 = std::map<std::string,std::string>::at((uint64_t)v95, v195);
        long long v215 = *(_OWORD *)v96;
        long long v216 = *(_OWORD *)(v96 + 16);
        uint64_t v217 = *(void **)(v96 + 32);
        long long v218 = 0uLL;
        uint64_t v219 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v218, *(const void **)(v96 + 40), *(void *)(v96 + 48), (uint64_t)(*(void *)(v96 + 48) - *(void *)(v96 + 40)) >> 2);
        std::vector<Espresso::layer_shape>::vector(&v212);
        p_data = (void **)&v212->__r_.__value_.__l.__data_;
        *(_OWORD *)&v212->__r_.__value_.__l.__data_ = v215;
        *((_OWORD *)p_data + 1) = v216;
        p_data[4] = v217;
        long long v98 = v218;
        std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)p_data + 40, (char *)v218, *((uint64_t *)&v218 + 1), (uint64_t)(*((void *)&v218 + 1) - v218) >> 2);
        unint64_t v99 = (void **)&v212->__r_.__value_.__l.__data_;
        long long v100 = v216;
        *(_OWORD *)&v212[2].__r_.__value_.__r.__words[2] = v215;
        *((_OWORD *)v99 + 5) = v100;
        v99[12] = v217;
        long long v101 = std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)v99 + 104, (char *)v98, *((uint64_t *)&v98 + 1), (uint64_t)(*((void *)&v98 + 1) - v98) >> 2);
        if (*((_DWORD *)a2 + 35) == 245)
        {
          int v102 = (uint64_t *)*((void *)a2 + 16);
        }
        else
        {
          CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v101);
          int v102 = &CoreML::Specification::_ScaleLayerParams_default_instance_;
        }
        int v103 = *((_DWORD *)v102 + 4);
        uint64_t v104 = v102[3];
        uint64_t v105 = (void **)&v212->__r_.__value_.__l.__data_;
        LODWORD(v212[3].__r_.__value_.__l.__data_) = *(void *)(v104 + 8);
        if (v103 == 1)
        {
          int v106 = 1;
        }
        else
        {
          int v103 = *(_DWORD *)(v104 + 16);
          int v106 = *(_DWORD *)(v104 + 24);
        }
        *((_DWORD *)v105 + 1CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = v106;
        *((_DWORD *)v105 + 17) = v103;
        if (*((unsigned char *)v102 + 80))
        {
          uint64_t v211 = 0;
          long long v210 = 0u;
          *(_OWORD *)&__p[24] = 0u;
          *(void *)&__p[12] = 0x100000001;
          *(_DWORD *)&__p[20] = -1;
          int v107 = *((_DWORD *)v102 + 10);
          uint64_t v108 = v102[6];
          if (v107 == 1)
          {
            int v109 = 1;
          }
          else
          {
            int v107 = *(_DWORD *)(v108 + 16);
            int v109 = *(_DWORD *)(v108 + 24);
          }
          *(_DWORD *)&__p[8] = *(void *)(v108 + 8);
          *(_DWORD *)&__p[4] = v107;
          *(_DWORD *)std::string __p = v109;
          uint64_t v111 = v213;
          if ((unint64_t)v213 >= v214)
          {
            int v110 = (long long *)std::vector<Espresso::layer_shape>::__push_back_slow_path<Espresso::layer_shape const&>((uint64_t *)&v212, (long long *)__p);
          }
          else
          {
            long long *v213 = *(_OWORD *)__p;
            v111[1] = *(_OWORD *)&__p[16];
            *((void *)v111 + 4) = *(void *)&__p[32];
            *((void *)v111 + CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = 0;
            *((void *)v111 + 7) = 0;
            *((void *)v111 + 5) = 0;
            std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((void *)v111 + 5, 0, 0, 0);
            int v110 = v111 + 4;
          }
          uint64_t v213 = v110;
          uint64_t v105 = (void **)&v212->__r_.__value_.__l.__data_;
        }
        else
        {
          int v110 = v213;
        }
        EspressoConverter::computeMaxShape((uint64_t)__p, (uint64_t)v105, (uint64_t)v110);
        *(_OWORD *)uint64_t v203 = *(_OWORD *)__p;
        long long v204 = *(_OWORD *)&__p[16];
        uint64_t v112 = (char *)v210;
        uint64_t v205 = *(void *)&__p[32];
        uint64_t v206 = 0;
        uint64_t v208 = 0;
        std::string v207 = 0;
        uint64_t v113 = *((void *)&v210 + 1);
        unint64_t v114 = (uint64_t)(*((void *)&v210 + 1) - v210) >> 2;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v206, (const void *)v210, *((uint64_t *)&v210 + 1), v114);
        EspressoConverter::validateShape((int *)v203, *((void *)a2 + 14), (uint64_t)v198);
        if (v206)
        {
          std::string v207 = v206;
          operator delete(v206);
        }
        v160[0] = v198;
        uint64_t v115 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v95, v198, (long long **)v160);
        long long v116 = *(_OWORD *)&__p[16];
        *(_OWORD *)(v115 + 5CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = *(_OWORD *)__p;
        *(_OWORD *)(v115 + 72) = v116;
        *((void *)v115 + 11) = *(void *)&__p[32];
        std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v115 + 96, v112, v113, v114);
        if (v112) {
          operator delete(v112);
        }
        *(void *)std::string __p = &v212;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        if ((void)v218) {
          operator delete((void *)v218);
        }
      }
      if (v191) {
        int v117 = v191;
      }
      else {
        int v117 = &CoreML::Specification::_WeightParams_default_instance_;
      }
      uint64_t v118 = v117[5];
      uint64_t v119 = *(unsigned __int8 *)(v118 + 23);
      if (*(char *)(v118 + 23) < 0) {
        uint64_t v120 = *(void *)(v118 + 8);
      }
      else {
        uint64_t v120 = *(unsigned __int8 *)(v118 + 23);
      }
      uint64_t v121 = v117[6];
      if (*(char *)(v121 + 23) < 0) {
        uint64_t v122 = *(void *)(v121 + 8);
      }
      else {
        uint64_t v122 = *(unsigned __int8 *)(v121 + 23);
      }
      int v123 = *((_DWORD *)v117 + 4);
      uint64_t v124 = v117[7];
      if (*(char *)(v124 + 23) < 0) {
        uint64_t v125 = *(void *)(v124 + 8);
      }
      else {
        uint64_t v125 = *(unsigned __int8 *)(v124 + 23);
      }
      BOOL v126 = 0;
      if (v123 <= 0) {
        int v127 = 1;
      }
      else {
        int v127 = 2;
      }
      if (v120) {
        int v128 = v127;
      }
      else {
        int v128 = v123 > 0;
      }
      if (v122) {
        ++v128;
      }
      if (v125) {
        ++v128;
      }
      if (v123 <= 0 && v128 == 1)
      {
        if ((v119 & 0x80) != 0) {
          uint64_t v119 = *(void *)(v118 + 8);
        }
        BOOL v126 = v119 != 0;
      }
      if (v167) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v167);
      }
      if (v23) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v23);
      }
      if (v171) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v171);
      }
      if (SHIBYTE(v173) < 0) {
        operator delete((void *)__sz[0]);
      }
      *(void *)&long long v215 = &v174;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v215);
      *(void *)&long long v215 = &v177;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v215);
      CoreML::Specification::ScaleLayerParams::~ScaleLayerParams((CoreML::Specification::ScaleLayerParams *)&v185);
      unsigned __int8 v185 = &v195;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v185);
      unsigned __int8 v185 = &v198;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v185);
      if (SHIBYTE(v201.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v201.__r_.__value_.__l.__data_);
      }
      return v126;
    default:
      std::string v130 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x19F3C1380](v130, "Scale Layer: Bias shape must be of size less than or equal to 3");
      goto LABEL_300;
  }
}

void sub_19EABFC7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  STACK[0x2C8] = v73;
  if (a64) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a64);
  }
  if (v72) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v72);
  }
  if (a72) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a72);
  }
  if (SLOBYTE(STACK[0x217]) < 0) {
    operator delete((void *)STACK[0x200]);
  }
  STACK[0x358] = (unint64_t)&STACK[0x220];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x358]);
  STACK[0x358] = (unint64_t)&STACK[0x238];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x358]);
  CoreML::Specification::ScaleLayerParams::~ScaleLayerParams((CoreML::Specification::ScaleLayerParams *)&STACK[0x268]);
  STACK[0x268] = (unint64_t)&STACK[0x2C0];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x268]);
  STACK[0x268] = (unint64_t)&STACK[0x2D8];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x268]);
  if (SLOBYTE(STACK[0x307]) < 0) {
    operator delete((void *)STACK[0x2F0]);
  }
  _Unwind_Resume(a1);
}

void LayerTranslator::addConcat(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  long long v4 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  if (*((_DWORD *)a2 + 35) == 320)
  {
    long long v5 = (uint64_t *)*((void *)a2 + 16);
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v4);
    long long v5 = &CoreML::Specification::_ConcatLayerParams_default_instance_;
  }
  long long v6 = (long long *)*((void *)a2 + 14);
  if (*((char *)v6 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v71, *(const std::string::value_type **)v6, *((void *)v6 + 1));
  }
  else
  {
    long long v7 = *v6;
    v71.__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
    *(_OWORD *)&v71.__r_.__value_.__l.__data_ = v7;
  }
  uint64_t v68 = 0;
  uint64_t v69 = 0;
  uint64_t v70 = 0;
  int v65 = 0;
  unsigned int v66 = 0;
  uint64_t v67 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v68, (uint64_t *)&v65, *((void *)this + 1));
  if (*((unsigned char *)v5 + 16))
  {
    LODWORD(v80) = 1;
    int v8 = *(void **)this;
    std::string::basic_string[abi:ne180100]<0>(&v75, "sequence_concat");
    memset(&v62, 0, sizeof(v62));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v62, v65, v66, 0xAAAAAAAAAAAAAAABLL * (((char *)v66 - (char *)v65) >> 3));
    memset(&v61, 0, sizeof(v61));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v61, v68, v69, 0xAAAAAAAAAAAAAAABLL * (((char *)v69 - (char *)v68) >> 3));
    memset(&v77, 0, sizeof(v77));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v77, (long long *)v62.__r_.__value_.__l.__data_, (long long *)v62.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v62.__r_.__value_.__l.__size_ - v62.__r_.__value_.__r.__words[0]) >> 3));
    memset(&v76, 0, sizeof(v76));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v76, (long long *)v61.__r_.__value_.__l.__data_, (long long *)v61.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v61.__r_.__value_.__l.__size_ - v61.__r_.__value_.__r.__words[0]) >> 3));
    LODWORD(v81) = (***(uint64_t (****)(void))(v8[14] + 8))(*(void *)(v8[14] + 8));
    Espresso::abstract_engine_factory::make_kernel_priv();
    std::string __p = v63;
    uint64_t v57 = v64;
    if (v64) {
      atomic_fetch_add_explicit(&v64->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v81 = 0uLL;
    *(void *)&long long v82 = 0;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&v81, (long long *)v77.__r_.__value_.__l.__data_, (long long *)v77.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v77.__r_.__value_.__l.__size_ - v77.__r_.__value_.__r.__words[0]) >> 3));
    memset(v72, 0, 24);
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v72, (long long *)v76.__r_.__value_.__l.__data_, (long long *)v76.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v76.__r_.__value_.__l.__size_ - v76.__r_.__value_.__r.__words[0]) >> 3));
    Espresso::sequential_builder::add_kernel_dbg();
    uint64_t v78 = (void **)v72;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v78);
    uint64_t v78 = (void **)&v81;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v78);
    if (v57) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v57);
    }
    if (*v8) {
      Espresso::sequential_builder::add_shape_from_kernel();
    }
    *(void *)&long long v81 = &v76;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v81);
    *(void *)&long long v81 = &v77;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v81);
    if (v64) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v64);
    }
    *(void *)&long long v81 = &v61;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v81);
    *(void *)&long long v81 = &v62;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v81);
    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
    {
      uint64_t v10 = (void *)v75.__r_.__value_.__r.__words[0];
LABEL_28:
      operator delete(v10);
    }
  }
  else
  {
    BYTE4(v8CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = 0;
    LOWORD(v84) = 0;
    LODWORD(v81) = 0;
    LODWORD(v83) = 0;
    uint64_t v11 = *(void **)this;
    std::string::basic_string[abi:ne180100]<0>(&__p, "concat");
    memset(&v55, 0, sizeof(v55));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v55, v65, v66, 0xAAAAAAAAAAAAAAABLL * (((char *)v66 - (char *)v65) >> 3));
    memset(&v54, 0, sizeof(v54));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v54, v68, v69, 0xAAAAAAAAAAAAAAABLL * (((char *)v69 - (char *)v68) >> 3));
    memset(&v76, 0, sizeof(v76));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v76, (long long *)v55.__r_.__value_.__l.__data_, (long long *)v55.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v55.__r_.__value_.__l.__size_ - v55.__r_.__value_.__r.__words[0]) >> 3));
    memset(&v75, 0, sizeof(v75));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v75, (long long *)v54.__r_.__value_.__l.__data_, (long long *)v54.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v54.__r_.__value_.__l.__size_ - v54.__r_.__value_.__r.__words[0]) >> 3));
    *(_DWORD *)uint64_t v72 = (***(uint64_t (****)(void))(v11[14] + 8))(*(void *)(v11[14] + 8));
    Espresso::abstract_engine_factory::make_kernel_priv();
    uint64_t v78 = v59;
    long long v79 = v60;
    if (v60) {
      atomic_fetch_add_explicit(&v60->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    memset(v72, 0, 24);
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v72, (long long *)v76.__r_.__value_.__l.__data_, (long long *)v76.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v76.__r_.__value_.__l.__size_ - v76.__r_.__value_.__r.__words[0]) >> 3));
    memset(&v77, 0, sizeof(v77));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v77, (long long *)v75.__r_.__value_.__l.__data_, (long long *)v75.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v75.__r_.__value_.__l.__size_ - v75.__r_.__value_.__r.__words[0]) >> 3));
    Espresso::sequential_builder::add_kernel_dbg();
    unsigned int v80 = &v77;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v80);
    unsigned int v80 = (std::string *)v72;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v80);
    if (v79) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v79);
    }
    if (*v11) {
      Espresso::sequential_builder::add_shape_from_kernel();
    }
    *(void *)uint64_t v72 = &v75;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v72);
    *(void *)uint64_t v72 = &v76;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v72);
    if (v60) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v60);
    }
    *(void *)uint64_t v72 = &v54;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v72);
    *(void *)uint64_t v72 = &v55;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v72);
    if (v58 < 0)
    {
      uint64_t v10 = __p;
      goto LABEL_28;
    }
  }
  if (**((unsigned char **)this + 2))
  {
    LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v68);
    goto LABEL_81;
  }
  uint64_t v12 = (uint64_t **)*((void *)this + 1);
  if (*((_DWORD *)a2 + 35) == 320)
  {
    uint64_t v13 = (uint64_t *)*((void *)a2 + 16);
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v9);
    uint64_t v13 = &CoreML::Specification::_ConcatLayerParams_default_instance_;
  }
  memset(&v77, 0, sizeof(v77));
  std::string v14 = v65;
  for (i = v66; v14 != i; std::string v14 = (long long *)((char *)v14 + 24))
  {
    uint64_t v16 = std::map<std::string,std::string>::at((uint64_t)v12, v14);
    long long v81 = *(_OWORD *)v16;
    long long v82 = *(_OWORD *)(v16 + 16);
    uint64_t v83 = *(void *)(v16 + 32);
    uint64_t v85 = 0;
    uint64_t v86 = 0;
    std::string::size_type v84 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v84, *(const void **)(v16 + 40), *(void *)(v16 + 48), (uint64_t)(*(void *)(v16 + 48) - *(void *)(v16 + 40)) >> 2);
    std::string::size_type size = v77.__r_.__value_.__l.__size_;
    if (v77.__r_.__value_.__l.__size_ >= v77.__r_.__value_.__r.__words[2])
    {
      std::string::size_type v19 = std::vector<Espresso::layer_shape>::__push_back_slow_path<Espresso::layer_shape const&>((uint64_t *)&v77, &v81);
      long long v18 = v84;
    }
    else
    {
      *(_OWORD *)v77.__r_.__value_.__l.__size_ = v81;
      *(_OWORD *)(size + 1CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = v82;
      *(void *)(size + 32) = v83;
      *(void *)(size + 48) = 0;
      *(void *)(size + 5CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = 0;
      *(void *)(size + 40) = 0;
      long long v18 = v84;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((void *)(size + 40), v84, v85, (v85 - (uint64_t)v84) >> 2);
      std::string::size_type v19 = size + 64;
    }
    v77.__r_.__value_.__l.__size_ = v19;
    if (v18) {
      operator delete(v18);
    }
  }
  std::string::size_type v20 = v77.__r_.__value_.__r.__words[0];
  if (*((unsigned char *)v13 + 16))
  {
    EspressoConverter::validateEqualInputShapes((uint64_t)a2, (int *)v77.__r_.__value_.__l.__data_, (int *)v77.__r_.__value_.__l.__size_);
    std::string::size_type v20 = v77.__r_.__value_.__r.__words[0];
  }
  else if (v77.__r_.__value_.__r.__words[0] != v77.__r_.__value_.__l.__size_)
  {
    int v21 = *(_DWORD *)(v77.__r_.__value_.__r.__words[0] + 12);
    int v22 = *(_DWORD *)(v77.__r_.__value_.__r.__words[0] + 16);
    uint64_t v23 = (_DWORD *)v77.__r_.__value_.__r.__words[0];
    int v25 = *(_DWORD *)v77.__r_.__value_.__l.__data_;
    int v24 = *(_DWORD *)(v77.__r_.__value_.__r.__words[0] + 4);
    do
    {
      int v26 = v23[3];
      BOOL v28 = v26 == v21 || v26 == -1 || v21 == -1;
      if (!v28
        || ((int v29 = v23[4], v29 != v22) ? (v30 = v29 == -1) : (v30 = 1),
            !v30 ? (BOOL v31 = v22 == -1) : (BOOL v31 = 1),
            !v31
         || ((v32 = v23[1], v32 != v24) ? (BOOL v33 = v32 == -1) : (BOOL v33 = 1),
             !v33 ? (BOOL v34 = v24 == -1) : (BOOL v34 = 1),
             !v34 || *v23 != v25 && *v23 != -1 && v25 != -1)))
      {
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v81);
        long long v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v82, (uint64_t)"Input shapes (height and width dimensions) must be equal for layer: '", 69);
        uint64_t v47 = *((void *)a2 + 14);
        int v48 = *(char *)(v47 + 23);
        if (v48 >= 0) {
          uint64_t v49 = *((void *)a2 + 14);
        }
        else {
          uint64_t v49 = *(void *)v47;
        }
        if (v48 >= 0) {
          uint64_t v50 = *(unsigned __int8 *)(v47 + 23);
        }
        else {
          uint64_t v50 = *(void *)(v47 + 8);
        }
        std::string v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, v49, v50);
        uint64_t v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)"'.", 2);
        std::endl[abi:ne180100]<char,std::char_traits<char>>(v52);
        exceptiounint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::stringbuf::str();
        std::runtime_error::runtime_error(exception, (const std::string *)v72);
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      v23 += 16;
    }
    while (v23 != (_DWORD *)v77.__r_.__value_.__l.__size_);
  }
  long long v81 = *(_OWORD *)v20;
  long long v82 = *(_OWORD *)(v20 + 16);
  uint64_t v83 = *(void *)(v20 + 32);
  std::string::size_type v84 = 0;
  uint64_t v85 = 0;
  uint64_t v86 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v84, *(const void **)(v20 + 40), *(void *)(v20 + 48), (uint64_t)(*(void *)(v20 + 48) - *(void *)(v20 + 40)) >> 2);
  if (*((unsigned char *)v13 + 16))
  {
    uint64_t v35 = &v82;
  }
  else
  {
    DWORD2(v81) = 0;
    if (v77.__r_.__value_.__l.__size_ == v77.__r_.__value_.__r.__words[0]) {
      goto LABEL_76;
    }
    int v41 = 0;
    uint64_t v35 = (long long *)((char *)&v81 + 8);
    unint64_t v42 = (uint64_t)(v77.__r_.__value_.__l.__size_ - v77.__r_.__value_.__r.__words[0]) >> 6;
    if (v42 <= 1) {
      unint64_t v42 = 1;
    }
    uint64_t v43 = (int *)(v77.__r_.__value_.__r.__words[0] + 8);
    while (1)
    {
      int v45 = *v43;
      v43 += 16;
      int v44 = v45;
      if (v45 == -1) {
        break;
      }
      v41 += v44;
      if (!--v42)
      {
        DWORD2(v81) = v41;
        goto LABEL_76;
      }
    }
    DWORD2(v81) = v41;
  }
  *(_DWORD *)uint64_t v35 = -1;
LABEL_76:
  *(_OWORD *)uint64_t v72 = v81;
  *(_OWORD *)&v72[16] = v82;
  uint64_t v36 = (char *)v84;
  uint64_t v73 = v83;
  memset(v74, 0, sizeof(v74));
  uint64_t v37 = v85;
  unint64_t v38 = (v85 - (uint64_t)v84) >> 2;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v74, v84, v85, v38);
  EspressoConverter::validateShape((int *)v72, *((void *)a2 + 14), (uint64_t)v68);
  if (v74[0]) {
    operator delete(v74[0]);
  }
  v75.__r_.__value_.__r.__words[0] = (std::string::size_type)v68;
  uint64_t v39 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v12, v68, (long long **)&v75);
  long long v40 = v82;
  *(_OWORD *)(v39 + 5CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = v81;
  *(_OWORD *)(v39 + 72) = v40;
  *((void *)v39 + 11) = v83;
  std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v39 + 96, v36, v37, v38);
  if (v36) {
    operator delete(v36);
  }
  *(void *)&long long v81 = &v77;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v81);
LABEL_81:
  *(void *)&long long v81 = &v65;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v81);
  *(void *)&long long v81 = &v68;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v81);
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v71.__r_.__value_.__l.__data_);
  }
}

void sub_19EAC0A74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a47 < 0)
  {
    operator delete(__p);
    if ((v66 & 1) == 0)
    {
LABEL_6:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a65);
      a56 = (uint64_t)&a59;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a56);
      a64 = (uint64_t)&a29;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a64);
      a29 = (uint64_t)&a32;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a29);
      if (a40 < 0) {
        operator delete(a35);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v66)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v65);
  goto LABEL_6;
}

void LayerTranslator::addAddBroadcastable(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  long long v4 = (long long *)*((void *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)v4, *((void *)v4 + 1));
  }
  else
  {
    long long v5 = *v4;
    v22.__r_.__value_.__r.__words[2] = *((void *)v4 + 2);
    *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v5;
  }
  std::string::size_type v19 = 0;
  std::string::size_type v20 = 0;
  uint64_t v21 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v19, (uint64_t *)&v16, *((void *)this + 1));
  v13[2] = (void **)897988541;
  uint64_t v15 = 0;
  v13[0] = 0;
  v13[1] = (void **)1065353216;
  char v14 = 1;
  long long v6 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
  memset(&v8, 0, sizeof(v8));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v8, v16, v17, 0xAAAAAAAAAAAAAAABLL * (((char *)v17 - (char *)v16) >> 3));
  memset(&v7, 0, sizeof(v7));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v7, v19, v20, 0xAAAAAAAAAAAAAAABLL * (((char *)v20 - (char *)v19) >> 3));
  Espresso::sequential_builder::add<Espresso::elementwise_params>(&v11, v6, (uint64_t)__p, (uint64_t)&v22, (uint64_t)v13, (long long *)v8.__r_.__value_.__l.__data_, (long long *)v8.__r_.__value_.__l.__size_, (long long **)&v7);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  uint64_t v23 = &v7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  uint64_t v23 = &v8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v19);
  v13[0] = (void **)&v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v13);
  v13[0] = (void **)&v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v13);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
}

void sub_19EAC0EAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  a23 = v23 - 112;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  a23 = v23 - 88;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  if (*(char *)(v23 - 41) < 0) {
    operator delete(*(void **)(v23 - 64));
  }
  _Unwind_Resume(a1);
}

BOOL LayerTranslator::addConvolution(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  long long v4 = (long long *)*((void *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v255, *(const std::string::value_type **)v4, *((void *)v4 + 1));
  }
  else
  {
    long long v5 = *v4;
    v255.__r_.__value_.__r.__words[2] = *((void *)v4 + 2);
    *(_OWORD *)&v255.__r_.__value_.__l.__data_ = v5;
  }
  uint64_t v253 = 0;
  uint64_t v252 = 0;
  uint64_t v254 = 0;
  int v250 = 0;
  __int16 v249 = 0;
  uint64_t v251 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v252, (uint64_t *)&v249, *((void *)this + 1));
  std::string v7 = v250;
  std::string v8 = v249;
  if (*((_DWORD *)a2 + 35) == 100)
  {
    int v9 = (const CoreML::Specification::ConvolutionLayerParams *)*((void *)a2 + 16);
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    int v9 = (const CoreML::Specification::ConvolutionLayerParams *)&CoreML::Specification::_ConvolutionLayerParams_default_instance_;
  }
  CoreML::Specification::ConvolutionLayerParams::ConvolutionLayerParams((CoreML::Specification::ConvolutionLayerParams *)v231, v9);
  if ((char *)v7 - (char *)v8 == 48)
  {
    if (v245)
    {
      exceptiounint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      long long v149 = std::string::append(&v267, "' , deconvolution does not support weight as input tensor.");
      long long v150 = *(_OWORD *)&v149->__r_.__value_.__l.__data_;
      *(void *)&long long v262 = *((void *)&v149->__r_.__value_.__l + 2);
      *(_OWORD *)std::string __p = v150;
      v149->__r_.__value_.__l.__size_ = 0;
      v149->__r_.__value_.__r.__words[2] = 0;
      v149->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, (const std::string *)__p);
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    if (v236 >= 1 && (*(void *)(v237 + 8) > 1uLL || v236 >= 2 && *(void *)(v237 + 16) >= 2uLL))
    {
      uint64_t v160 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      std::string::size_type v161 = std::string::append(&v267, "' , dilated convolution does not support weight as input tensor.");
      long long v162 = *(_OWORD *)&v161->__r_.__value_.__l.__data_;
      *(void *)&long long v262 = *((void *)&v161->__r_.__value_.__l + 2);
      *(_OWORD *)std::string __p = v162;
      v161->__r_.__value_.__l.__size_ = 0;
      v161->__r_.__value_.__r.__words[2] = 0;
      v161->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v160, (const std::string *)__p);
      __cxa_throw(v160, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  __int16 v213 = 1;
  __asm { FMOV            V0.2S, #1.0 }
  long long v214 = 0uLL;
  __int16 v215 = 0;
  uint64_t v216 = 0x1000100010001;
  int v229 = 0;
  char v230 = 0;
  unint64_t v225 = 0;
  uint64_t v226 = 0;
  long long v210 = xmmword_19EC7B900;
  memset(v208, 0, sizeof(v208));
  uint64_t v209 = 1;
  int v217 = 0;
  uint64_t v218 = 0;
  int v219 = 0;
  uint64_t v222 = 0;
  __int16 v224 = 1;
  unint64_t v211 = 0xFFFFFFFF00000000;
  uint64_t v212 = _D0;
  __int16 v223 = 0;
  int v227 = 0;
  __int16 v228 = 1;
  if (v244) {
    int v15 = v244;
  }
  else {
    int v15 = 1;
  }
  int v221 = 1;
  int v220 = v15;
  uint64_t v16 = std::map<std::string,std::string>::at(*((void *)this + 1), v249);
  long long v17 = *(_OWORD *)(v16 + 16);
  long long v204 = *(_OWORD *)v16;
  long long v205 = v17;
  uint64_t v18 = *(const void **)(v16 + 40);
  uint64_t v206 = *(void *)(v16 + 32);
  memset(v207, 0, 24);
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v207, v18, *(void *)(v16 + 48), (uint64_t)(*(void *)(v16 + 48) - (void)v18) >> 2);
  if (DWORD2(v204) != -1 && SDWORD2(v204) % v220)
  {
    uint64_t v145 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    int v146 = std::string::append(&v267, "' , input channels must be divisible by the number of groups.");
    long long v147 = *(_OWORD *)&v146->__r_.__value_.__l.__data_;
    *(void *)&long long v262 = *((void *)&v146->__r_.__value_.__l + 2);
    *(_OWORD *)std::string __p = v147;
    v146->__r_.__value_.__l.__size_ = 0;
    v146->__r_.__value_.__r.__words[2] = 0;
    v146->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v145, (const std::string *)__p);
    __cxa_throw(v145, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (!v242)
  {
    std::string v130 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    uint64_t v131 = std::string::append(&v267, "' , output channels cannot be 0");
    long long v132 = *(_OWORD *)&v131->__r_.__value_.__l.__data_;
    *(void *)&long long v262 = *((void *)&v131->__r_.__value_.__l + 2);
    *(_OWORD *)std::string __p = v132;
    v131->__r_.__value_.__l.__size_ = 0;
    v131->__r_.__value_.__r.__words[2] = 0;
    v131->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v130, (const std::string *)__p);
    __cxa_throw(v130, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (!v243)
  {
    long long v133 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::string v134 = std::string::append(&v267, "' , kernel channels cannot be 0");
    long long v135 = *(_OWORD *)&v134->__r_.__value_.__l.__data_;
    *(void *)&long long v262 = *((void *)&v134->__r_.__value_.__l + 2);
    *(_OWORD *)std::string __p = v135;
    v134->__r_.__value_.__l.__size_ = 0;
    v134->__r_.__value_.__r.__words[2] = 0;
    v134->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v133, (const std::string *)__p);
    __cxa_throw(v133, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (v232)
  {
    if (v232 != 2)
    {
      unint64_t v151 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      uint64_t v152 = std::string::append(&v267, "' , if set, kernel size must be of length 2");
      long long v153 = *(_OWORD *)&v152->__r_.__value_.__l.__data_;
      *(void *)&long long v262 = *((void *)&v152->__r_.__value_.__l + 2);
      *(_OWORD *)std::string __p = v153;
      v152->__r_.__value_.__l.__size_ = 0;
      v152->__r_.__value_.__r.__words[2] = 0;
      v152->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v151, (const std::string *)__p);
      __cxa_throw(v151, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    if (!*(void *)(v233 + 8) || !*(void *)(v233 + 16))
    {
      uint64_t v136 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      char v137 = std::string::append(&v267, "' , kernel size cannot be 0");
      long long v138 = *(_OWORD *)&v137->__r_.__value_.__l.__data_;
      *(void *)&long long v262 = *((void *)&v137->__r_.__value_.__l + 2);
      *(_OWORD *)std::string __p = v138;
      v137->__r_.__value_.__l.__size_ = 0;
      v137->__r_.__value_.__r.__words[2] = 0;
      v137->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v136, (const std::string *)__p);
      __cxa_throw(v136, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  if (v234)
  {
    if (v234 != 2)
    {
      uint64_t v154 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      int v155 = std::string::append(&v267, "' , if set, stride must be of length 2");
      long long v156 = *(_OWORD *)&v155->__r_.__value_.__l.__data_;
      *(void *)&long long v262 = *((void *)&v155->__r_.__value_.__l + 2);
      *(_OWORD *)std::string __p = v156;
      v155->__r_.__value_.__l.__size_ = 0;
      v155->__r_.__value_.__r.__words[2] = 0;
      v155->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v154, (const std::string *)__p);
      __cxa_throw(v154, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    if (!*(void *)(v235 + 8) || !*(void *)(v235 + 16))
    {
      uint64_t v139 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      uint64_t v140 = std::string::append(&v267, "' , stride cannot be 0");
      long long v141 = *(_OWORD *)&v140->__r_.__value_.__l.__data_;
      *(void *)&long long v262 = *((void *)&v140->__r_.__value_.__l + 2);
      *(_OWORD *)std::string __p = v141;
      v140->__r_.__value_.__l.__size_ = 0;
      v140->__r_.__value_.__r.__words[2] = 0;
      v140->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v139, (const std::string *)__p);
      __cxa_throw(v139, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  if (v236)
  {
    if (v236 != 2)
    {
      std::string v157 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      uint64_t v158 = std::string::append(&v267, "' , if set, dilation factor must be of length 2");
      long long v159 = *(_OWORD *)&v158->__r_.__value_.__l.__data_;
      *(void *)&long long v262 = *((void *)&v158->__r_.__value_.__l + 2);
      *(_OWORD *)std::string __p = v159;
      v158->__r_.__value_.__l.__size_ = 0;
      v158->__r_.__value_.__r.__words[2] = 0;
      v158->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v157, (const std::string *)__p);
      __cxa_throw(v157, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    if (!*(void *)(v237 + 8) || !*(void *)(v237 + 16))
    {
      unint64_t v142 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      std::string v143 = std::string::append(&v267, "' , dilation factor cannot be 0");
      long long v144 = *(_OWORD *)&v143->__r_.__value_.__l.__data_;
      *(void *)&long long v262 = *((void *)&v143->__r_.__value_.__l + 2);
      *(_OWORD *)std::string __p = v144;
      v143->__r_.__value_.__l.__size_ = 0;
      v143->__r_.__value_.__r.__words[2] = 0;
      v143->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v142, (const std::string *)__p);
      __cxa_throw(v142, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  if (v245 && (v238 | 2) != 2)
  {
    uint64_t v176 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    uint64_t v177 = std::string::append(&v267, "' , if set, output shape must be of length 2");
    long long v178 = *(_OWORD *)&v177->__r_.__value_.__l.__data_;
    *(void *)&long long v262 = *((void *)&v177->__r_.__value_.__l + 2);
    *(_OWORD *)std::string __p = v178;
    v177->__r_.__value_.__l.__size_ = 0;
    v177->__r_.__value_.__r.__words[2] = 0;
    v177->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v176, (const std::string *)__p);
    __cxa_throw(v176, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (v248 == 50)
  {
    std::string::size_type v19 = *(uint64_t **)(v247 + 16);
    if (!v19) {
      std::string::size_type v19 = &CoreML::Specification::_BorderAmounts_default_instance_;
    }
    if ((*((_DWORD *)v19 + 6) | 2) != 2)
    {
      int v182 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      uint64_t v183 = std::string::append(&v267, "' , for valid padding, padding border amounts must be specified for both height and width, if set");
      long long v184 = *(_OWORD *)&v183->__r_.__value_.__l.__data_;
      *(void *)&long long v262 = *((void *)&v183->__r_.__value_.__l + 2);
      *(_OWORD *)std::string __p = v184;
      v183->__r_.__value_.__l.__size_ = 0;
      v183->__r_.__value_.__r.__words[2] = 0;
      v183->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v182, (const std::string *)__p);
      __cxa_throw(v182, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  unint64_t v20 = v220;
  if (v245) {
    int v21 = 1;
  }
  else {
    int v21 = v220;
  }
  DWORD1(v210) = v21 * v243;
  LODWORD(v210) = v242;
  LODWORD(v209) = v246;
  if (v232)
  {
    int v22 = *(_DWORD *)(v233 + 8);
    int v23 = *(_DWORD *)(v233 + 16);
  }
  else
  {
    int v22 = 3;
    int v23 = 3;
  }
  *((void *)&v210 + 1) = __PAIR64__(v22, v23);
  if (v234)
  {
    __int16 v24 = *(_WORD *)(v235 + 8);
    __int16 v25 = *(_WORD *)(v235 + 16);
  }
  else
  {
    __int16 v24 = 1;
    __int16 v25 = 1;
  }
  WORD1(v21CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = v24;
  LOWORD(v21CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = v25;
  if (v236)
  {
    __int16 v26 = *(_WORD *)(v237 + 8);
    __int16 v27 = *(_WORD *)(v237 + 16);
  }
  else
  {
    __int16 v26 = 1;
    __int16 v27 = 1;
  }
  HIWORD(v21CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = v26;
  WORD2(v21CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = v27;
  switch(v248)
  {
    case 50:
      BOOL v31 = *(uint64_t **)(v247 + 16);
      if (!v31) {
        BOOL v31 = &CoreML::Specification::_BorderAmounts_default_instance_;
      }
      if (*((_DWORD *)v31 + 6))
      {
        uint64_t v32 = v31[4];
        int32x4_t v33 = *(int32x4_t *)(*(void *)(v32 + 8) + 16);
        int32x4_t v34 = *(int32x4_t *)(*(void *)(v32 + 16) + 16);
      }
      else
      {
        int32x4_t v34 = 0uLL;
        int32x4_t v33 = 0uLL;
      }
      __int16 v213 = 0;
      *(int16x4_t *)((char *)&v214 + CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = vmovn_s32(vuzp1q_s32(v34, v33));
      break;
    case 51:
      int v29 = *(_DWORD *)(v247 + 16);
      if (v29 == 1)
      {
        __int16 v30 = 4;
      }
      else
      {
        if (v29)
        {
          BOOL v28 = __cxa_allocate_exception(0x10uLL);
          MEMORY[0x19F3C1380](v28, "Same Padding Mode not recognized");
LABEL_326:
          __cxa_throw(v28, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        __int16 v30 = 1;
      }
      __int16 v213 = v30;
      break;
    case 0:
      BOOL v28 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x19F3C1380](v28, "Convolution padding type not set");
      goto LABEL_326;
  }
  int64_t v194 = (char *)v7 - (char *)v8;
  unint64_t v195 = v242;
  int v193 = v243;
  if (v245)
  {
    if (v238)
    {
      uint64_t v36 = *(void *)(v239 + 8);
      uint64_t v35 = *(void *)(v239 + 16);
    }
    else
    {
      uint64_t v36 = 0;
      uint64_t v35 = 0;
    }
    unint64_t v225 = __PAIR64__(v36, v35);
    long long v40 = *(void **)this;
    std::string::basic_string[abi:ne180100]<0>(__p, "deconvolution");
    memset(&v203, 0, sizeof(v203));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v203, v249, v250, 0xAAAAAAAAAAAAAAABLL * (((char *)v250 - (char *)v249) >> 3));
    memset(&v202, 0, sizeof(v202));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v202, v252, v253, 0xAAAAAAAAAAAAAAABLL * (((char *)v253 - (char *)v252) >> 3));
    Espresso::sequential_builder::add<Espresso::convolution_uniforms>((uint64_t *)&v267, v40, (uint64_t)__p, (uint64_t)&v255, (uint64_t)v208, (long long *)v203.__r_.__value_.__l.__data_, (long long *)v203.__r_.__value_.__l.__size_, (long long **)&v202);
    *(void *)std::string v279 = &v202;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v279);
    *(void *)std::string v279 = &v203;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v279);
    if (SBYTE7(v262) < 0) {
      operator delete(__p[0]);
    }
    std::string::size_type size = (std::__shared_weak_count *)v267.__r_.__value_.__l.__size_;
    uint64_t v38 = v267.__r_.__value_.__r.__words[0];
    v195 /= v20;
    if (v267.__r_.__value_.__l.__size_)
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v267.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
      if (v267.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v267.__r_.__value_.__l.__size_);
      }
    }
  }
  else
  {
    uint64_t v37 = *(void **)this;
    std::string::basic_string[abi:ne180100]<0>(__p, "convolution");
    memset(&v201, 0, sizeof(v201));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v201, v249, v250, 0xAAAAAAAAAAAAAAABLL * (((char *)v250 - (char *)v249) >> 3));
    memset(&v200, 0, sizeof(v200));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v200, v252, v253, 0xAAAAAAAAAAAAAAABLL * (((char *)v253 - (char *)v252) >> 3));
    Espresso::sequential_builder::add<Espresso::convolution_uniforms>((uint64_t *)&v267, v37, (uint64_t)__p, (uint64_t)&v255, (uint64_t)v208, (long long *)v201.__r_.__value_.__l.__data_, (long long *)v201.__r_.__value_.__l.__size_, (long long **)&v200);
    *(void *)std::string v279 = &v200;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v279);
    *(void *)std::string v279 = &v201;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v279);
    if (SBYTE7(v262) < 0) {
      operator delete(__p[0]);
    }
    std::string::size_type size = (std::__shared_weak_count *)v267.__r_.__value_.__l.__size_;
    uint64_t v38 = v267.__r_.__value_.__r.__words[0];
    if (v267.__r_.__value_.__l.__size_)
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v267.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
      if (v267.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v267.__r_.__value_.__l.__size_);
      }
    }
    uint64_t v35 = 0;
    uint64_t v36 = 0;
  }
  if (**((unsigned char **)this + 2))
  {
    LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v252);
    goto LABEL_130;
  }
  uint64_t v41 = *((void *)this + 1);
  uint64_t v42 = std::map<std::string,std::string>::at(v41, v249);
  *(_OWORD *)std::string v279 = *(_OWORD *)v42;
  *(_OWORD *)&v279[16] = *(_OWORD *)(v42 + 16);
  uint64_t v280 = *(void *)(v42 + 32);
  char v281 = 0;
  uint64_t v282 = 0;
  uint64_t v283 = 0;
  uint64_t v43 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v281, *(const void **)(v42 + 40), *(void *)(v42 + 48), (uint64_t)(*(void *)(v42 + 48)- *(void *)(v42 + 40)) >> 2);
  std::string v192 = size;
  if (*((_DWORD *)a2 + 35) == 100)
  {
    int v44 = (const CoreML::Specification::ConvolutionLayerParams *)*((void *)a2 + 16);
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v43);
    int v44 = (const CoreML::Specification::ConvolutionLayerParams *)&CoreML::Specification::_ConvolutionLayerParams_default_instance_;
  }
  CoreML::Specification::ConvolutionLayerParams::ConvolutionLayerParams((CoreML::Specification::ConvolutionLayerParams *)&v267, v44);
  unint64_t v191 = (uint64_t **)v41;
  if (v275) {
    int v45 = v275;
  }
  else {
    int v45 = 1;
  }
  if (v276) {
    int v45 = 1;
  }
  if (*(_DWORD *)&v279[8] != -1 && v45 * v274 != *(_DWORD *)&v279[8])
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
    uint64_t v166 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v262, (uint64_t)"Convolution layer '", 19);
    uint64_t v167 = *((void *)a2 + 14);
    int v168 = *(char *)(v167 + 23);
    if (v168 >= 0) {
      uint64_t v169 = *((void *)a2 + 14);
    }
    else {
      uint64_t v169 = *(void *)v167;
    }
    if (v168 >= 0) {
      uint64_t v170 = *(unsigned __int8 *)(v167 + 23);
    }
    else {
      uint64_t v170 = *(void *)(v167 + 8);
    }
    uint64_t v171 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v166, v169, v170);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v171, (uint64_t)"' input's channel dimension (", 29);
    std::string v172 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v172, (uint64_t)") is not equal to the number of layer parameters  (", 51);
    std::string::size_type v173 = (void *)std::ostream::operator<<();
    std::string v174 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v173, (uint64_t)")", 1);
    std::endl[abi:ne180100]<char,std::char_traits<char>>(v174);
    uint64_t v175 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(v175, (const std::string *)v256);
    __cxa_throw(v175, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (LODWORD(v267.__r_.__value_.__r.__words[2]))
  {
    int v46 = *(_DWORD *)(v268 + 8);
    int v47 = *(_DWORD *)(v268 + 16);
  }
  else
  {
    int v46 = 3;
    int v47 = 3;
  }
  if (v269)
  {
    int v48 = *(_DWORD *)(v270 + 8);
    int v49 = *(_DWORD *)(v270 + 16);
  }
  else
  {
    int v48 = 1;
    int v49 = 1;
  }
  int v190 = v49;
  if (v271)
  {
    int v50 = *(__int16 *)(v272 + 8);
    int v51 = *(__int16 *)(v272 + 16);
  }
  else
  {
    int v50 = 1;
    int v51 = 1;
  }
  *(_OWORD *)std::string __p = *(_OWORD *)v279;
  long long v262 = *(_OWORD *)&v279[16];
  uint64_t v52 = v281;
  uint64_t v263 = v280;
  std::string::size_type v264 = 0;
  uint64_t v266 = 0;
  uint64_t v265 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v264, v281, v282, (v282 - (uint64_t)v281) >> 2);
  LODWORD(__p[1]) = v273;
  if (v278 == 50)
  {
    std::string v54 = *(uint64_t **)(v277 + 16);
    if (!v54) {
      std::string v54 = &CoreML::Specification::_BorderAmounts_default_instance_;
    }
    int v55 = *((_DWORD *)v54 + 6);
    if (v55)
    {
      uint64_t v56 = v54[4];
      uint64_t v57 = *(void *)(v56 + 8);
      uint64_t v58 = *(void *)(v56 + 16);
      int v59 = *(_DWORD *)(v57 + 16);
      int v60 = *(_DWORD *)(v57 + 24);
      int v61 = *(_DWORD *)(v58 + 16);
      int v55 = *(_DWORD *)(v58 + 24);
    }
    else
    {
      int v61 = 0;
      int v60 = 0;
      int v59 = 0;
    }
    int v62 = v50 * (v46 - 1);
    int v63 = v51 * (v47 - 1);
    if (v276)
    {
      HIDWORD(__p[0]) = v62 - (v60 + v59) + (*(_DWORD *)&v279[4] - 1) * v48 + 1;
      LODWORD(__p[0]) = v63 - (v61 + v55) + (*(_DWORD *)v279 - 1) * v190 + 1;
      BOOL v53 = 1;
      std::string::size_type size = v192;
      goto LABEL_115;
    }
    HIDWORD(__p[0]) = (v59 + v60 + *(_DWORD *)&v279[4] + ~v62) / v48 + 1;
    LODWORD(__p[0]) = (v55 + v61 + *(_DWORD *)v279 + ~v63) / v190 + 1;
    std::string::size_type size = v192;
  }
  else
  {
    if (v278 != 51)
    {
      std::string::size_type size = v192;
      if (!v278)
      {
        unsigned __int8 v185 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x19F3C1380](v185, "Convolution padding type not set");
        __cxa_throw(v185, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      BOOL v53 = v276 != 0;
      goto LABEL_115;
    }
    std::string::size_type size = v192;
    if (v276)
    {
      HIDWORD(__p[0]) = *(_DWORD *)&v279[4] * v48;
      LODWORD(__p[0]) = *(_DWORD *)v279 * v190;
      BOOL v53 = 1;
LABEL_115:
      if (v35 && v36 && v53) {
        __p[0] = (void *)__PAIR64__(v36, v35);
      }
      goto LABEL_120;
    }
    HIDWORD(__p[0]) = (*(_DWORD *)&v279[4] - 1) / v48 + 1;
    LODWORD(__p[0]) = (*(_DWORD *)v279 - 1) / v190 + 1;
  }
LABEL_120:
  if (*(_DWORD *)&v279[4] == -1) {
    HIDWORD(__p[0]) = -1;
  }
  if (*(_DWORD *)v279 == -1) {
    LODWORD(__p[0]) = -1;
  }
  v256[0] = *(_OWORD *)__p;
  v256[1] = v262;
  uint64_t v64 = v264;
  uint64_t v257 = v263;
  uint64_t v258 = 0;
  uint64_t v260 = 0;
  char v259 = 0;
  uint64_t v65 = v265;
  unint64_t v66 = (v265 - (uint64_t)v264) >> 2;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v258, v264, v265, v66);
  EspressoConverter::validateShape((int *)v256, *((void *)a2 + 14), (uint64_t)v252);
  if (v258)
  {
    char v259 = v258;
    operator delete(v258);
  }
  long long v284 = v252;
  uint64_t v67 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v191, v252, &v284);
  long long v68 = v262;
  *(_OWORD *)(v67 + 5CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = *(_OWORD *)__p;
  *(_OWORD *)(v67 + 72) = v68;
  *((void *)v67 + 11) = v263;
  std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v67 + 96, v64, v65, v66);
  if (v64) {
    operator delete(v64);
  }
  CoreML::Specification::ConvolutionLayerParams::~ConvolutionLayerParams((CoreML::Specification::ConvolutionLayerParams *)&v267);
  if (v52) {
    operator delete(v52);
  }
LABEL_130:
  if (v194 == 48)
  {
    if (v209)
    {
      uint64_t v69 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      uint64_t v70 = std::string::append(&v267, "' with dynamic weight does not support static bias.");
      long long v71 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
      *(void *)&long long v262 = *((void *)&v70->__r_.__value_.__l + 2);
      *(_OWORD *)std::string __p = v71;
      v70->__r_.__value_.__l.__size_ = 0;
      v70->__r_.__value_.__r.__words[2] = 0;
      v70->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v69, (const std::string *)__p);
      __cxa_throw(v69, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    goto LABEL_273;
  }
  if (v240) {
    uint64_t v72 = v240;
  }
  else {
    uint64_t v72 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  int WeightParamSize = EspressoConverter::getWeightParamSize((uint64_t)v72);
  uint64_t v74 = v72[5];
  if (*(char *)(v74 + 23) < 0) {
    uint64_t v75 = *(void *)(v74 + 8);
  }
  else {
    uint64_t v75 = *(unsigned __int8 *)(v74 + 23);
  }
  uint64_t v76 = v72[6];
  uint64_t v77 = *(unsigned __int8 *)(v76 + 23);
  if (*(char *)(v76 + 23) < 0) {
    uint64_t v78 = *(void *)(v76 + 8);
  }
  else {
    uint64_t v78 = *(unsigned __int8 *)(v76 + 23);
  }
  int v79 = *((_DWORD *)v72 + 4);
  uint64_t v80 = v72[7];
  if (*(char *)(v80 + 23) < 0) {
    uint64_t v81 = *(void *)(v80 + 8);
  }
  else {
    uint64_t v81 = *(unsigned __int8 *)(v80 + 23);
  }
  if (v79 <= 0) {
    int v82 = 1;
  }
  else {
    int v82 = 2;
  }
  if (v75) {
    int v83 = v82;
  }
  else {
    int v83 = v79 > 0;
  }
  if (v78) {
    ++v83;
  }
  if (v81) {
    ++v83;
  }
  if (v79 > 0 || v83 != 1) {
    goto LABEL_184;
  }
  if ((*(unsigned char *)(v74 + 23) & 0x80) != 0)
  {
    if (*(void *)(v74 + 8)) {
      goto LABEL_184;
    }
  }
  else if (*(unsigned char *)(v74 + 23))
  {
    goto LABEL_184;
  }
  if ((v77 & 0x80) != 0) {
    uint64_t v77 = *(void *)(v76 + 8);
  }
  if (v72 != &CoreML::Specification::_WeightParams_default_instance_)
  {
    if (v77)
    {
      uint64_t v84 = v72[8];
      if (v84)
      {
        unint64_t v85 = *(void *)(v84 + 16);
        int WeightParamSizeInBytes = EspressoConverter::getWeightParamSizeInBytes(v72);
        if (!CoreML::hasSufficientBytesInQuantizedWeightParam(v72, WeightParamSize))
        {
          unint64_t v186 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::operator+<char>();
          uint64_t v187 = std::string::append(&v267, "' has insufficient convolution weights");
          long long v188 = *(_OWORD *)&v187->__r_.__value_.__l.__data_;
          *(void *)&long long v262 = *((void *)&v187->__r_.__value_.__l + 2);
          *(_OWORD *)std::string __p = v188;
          v187->__r_.__value_.__l.__size_ = 0;
          v187->__r_.__value_.__r.__words[2] = 0;
          v187->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v186, (const std::string *)__p);
          __cxa_throw(v186, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        CoreML::copySpecArrayStringToVector(__p, (char *)v76, WeightParamSizeInBytes);
        std::to_string((std::string *)v279, v85);
        long long v87 = std::string::insert((std::string *)v279, 0, "W_U");
        long long v88 = *(_OWORD *)&v87->__r_.__value_.__l.__data_;
        v267.__r_.__value_.__r.__words[2] = v87->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v267.__r_.__value_.__l.__data_ = v88;
        v87->__r_.__value_.__l.__size_ = 0;
        v87->__r_.__value_.__r.__words[2] = 0;
        v87->__r_.__value_.__r.__words[0] = 0;
        if ((v279[23] & 0x80000000) != 0) {
          operator delete(*(void **)v279);
        }
        *(_OWORD *)std::string v279 = 0uLL;
        (*(void (**)(uint64_t, unsigned char *, std::string *, void *, void, void))(*(void *)v38 + 168))(v38, v279, &v267, __p[0], WeightParamSizeInBytes, 0);
        if (*(void *)&v279[8]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v279[8]);
        }
        if (v240) {
          unsigned int v89 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v240;
        }
        else {
          unsigned int v89 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)&CoreML::Specification::_WeightParams_default_instance_;
        }
        v198[0] = v38;
        v198[1] = (uint64_t)size;
        if (size) {
          atomic_fetch_add_explicit(&size->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::string::basic_string[abi:ne180100]<0>(v279, (char *)&unk_19EC86ACE);
        CoreML::setQuantizationParams(v89, v198, v195, (const void **)v279);
        if ((v279[23] & 0x80000000) != 0) {
          operator delete(*(void **)v279);
        }
        if (size) {
          std::__shared_weak_count::__release_shared[abi:ne180100](size);
        }
        if (SHIBYTE(v267.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v267.__r_.__value_.__l.__data_);
        }
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        goto LABEL_194;
      }
    }
  }
LABEL_184:
  (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)v38 + 472))(v279, v38);
  if (WeightParamSize != v193 * v195 * HIDWORD(v210) * DWORD2(v210))
  {
    std::string v163 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    uint64_t v164 = std::string::append(&v267, "' , size of weight parameter not equal to the product of kernel sizes, number of kernels and kernel channels");
    long long v165 = *(_OWORD *)&v164->__r_.__value_.__l.__data_;
    *(void *)&long long v262 = *((void *)&v164->__r_.__value_.__l + 2);
    *(_OWORD *)std::string __p = v165;
    v164->__r_.__value_.__l.__size_ = 0;
    v164->__r_.__value_.__r.__words[2] = 0;
    v164->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v163, (const std::string *)__p);
    __cxa_throw(v163, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (v240) {
    unint64_t v90 = v240;
  }
  else {
    unint64_t v90 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  EspressoConverter::copyWeightsToDataBlob(*(EspressoConverter **)(*(void *)v279 + 24), v90, 4 * WeightParamSize);
  long long v199 = *(_OWORD *)v279;
  if (*(void *)&v279[8]) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v279[8] + 8), 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, long long *))(*(void *)v38 + 400))(v38, &v199);
  if (*((void *)&v199 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v199 + 1));
  }
  if (*(void *)&v279[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v279[8]);
  }
LABEL_194:
  if (!v209) {
    goto LABEL_239;
  }
  int v91 = v210;
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(v279, v210, 1, 1, 1);
  if (v241) {
    long long v92 = v241;
  }
  else {
    long long v92 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  uint64_t v93 = v92[5];
  if (*(char *)(v93 + 23) < 0) {
    uint64_t v94 = *(void *)(v93 + 8);
  }
  else {
    uint64_t v94 = *(unsigned __int8 *)(v93 + 23);
  }
  uint64_t v95 = v92[6];
  uint64_t v96 = *(unsigned __int8 *)(v95 + 23);
  if (*(char *)(v95 + 23) < 0) {
    uint64_t v97 = *(void *)(v95 + 8);
  }
  else {
    uint64_t v97 = *(unsigned __int8 *)(v95 + 23);
  }
  int v98 = *((_DWORD *)v92 + 4);
  uint64_t v99 = v92[7];
  if (*(char *)(v99 + 23) < 0) {
    uint64_t v100 = *(void *)(v99 + 8);
  }
  else {
    uint64_t v100 = *(unsigned __int8 *)(v99 + 23);
  }
  if (v98 <= 0) {
    int v101 = 1;
  }
  else {
    int v101 = 2;
  }
  if (v94) {
    int v102 = v101;
  }
  else {
    int v102 = v98 > 0;
  }
  if (v97) {
    ++v102;
  }
  if (v100) {
    ++v102;
  }
  if (v98 > 0 || v102 != 1) {
    goto LABEL_231;
  }
  if ((*(unsigned char *)(v93 + 23) & 0x80) != 0)
  {
    if (!*(void *)(v93 + 8)) {
      goto LABEL_223;
    }
LABEL_231:
    int v105 = EspressoConverter::getWeightParamSize((uint64_t)v92);
    if (v105 != v210)
    {
      unint64_t v179 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      int v180 = std::string::append(&v267, "' , size of bias parameter not equal to the number of output channels");
      long long v181 = *(_OWORD *)&v180->__r_.__value_.__l.__data_;
      *(void *)&long long v262 = *((void *)&v180->__r_.__value_.__l + 2);
      *(_OWORD *)std::string __p = v181;
      v180->__r_.__value_.__l.__size_ = 0;
      v180->__r_.__value_.__r.__words[2] = 0;
      v180->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v179, (const std::string *)__p);
      __cxa_throw(v179, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    uint64_t v103 = *(void *)v279;
    EspressoConverter::copyWeightsToDataBlob(*(EspressoConverter **)(*(void *)v279 + 16), v92, 4 * v105);
    goto LABEL_233;
  }
  if (*(unsigned char *)(v93 + 23)) {
    goto LABEL_231;
  }
LABEL_223:
  if ((v96 & 0x80) != 0) {
    uint64_t v96 = *(void *)(v95 + 8);
  }
  if (v92 == &CoreML::Specification::_WeightParams_default_instance_ || !v96 || !v92[8]) {
    goto LABEL_231;
  }
  if (!CoreML::hasSufficientBytesInQuantizedWeightParam(v92, v91))
  {
    uint64_t v189 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(v189, (const std::string *)__p);
    __cxa_throw(v189, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CoreML::dequantizeWeightParamSpec((CoreML *)__p, (const CoreML::Specification::WeightParams *)v92, v91);
  uint64_t v103 = *(void *)v279;
  uint64_t v104 = __p[0];
  memcpy(*(void **)(*(void *)v279 + 16), __p[0], 4 * v91);
  if (v104) {
    operator delete(v104);
  }
LABEL_233:
  int v106 = *(std::__shared_weak_count **)&v279[8];
  uint64_t v196 = v103;
  unint64_t v197 = *(std::__shared_weak_count **)&v279[8];
  if (*(void *)&v279[8]) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v279[8] + 8), 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v38 + 392))(v38, &v196);
  if (v197) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v197);
  }
  if (v106) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v106);
  }
LABEL_239:
  if (v240) {
    int v107 = v240;
  }
  else {
    int v107 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  uint64_t v108 = v107[5];
  if (*(char *)(v108 + 23) < 0) {
    uint64_t v109 = *(void *)(v108 + 8);
  }
  else {
    uint64_t v109 = *(unsigned __int8 *)(v108 + 23);
  }
  uint64_t v110 = v107[6];
  if (*(char *)(v110 + 23) < 0) {
    uint64_t v111 = *(void *)(v110 + 8);
  }
  else {
    uint64_t v111 = *(unsigned __int8 *)(v110 + 23);
  }
  int v112 = *((_DWORD *)v107 + 4);
  uint64_t v113 = v107[7];
  if (*(char *)(v113 + 23) < 0) {
    uint64_t v114 = *(void *)(v113 + 8);
  }
  else {
    uint64_t v114 = *(unsigned __int8 *)(v113 + 23);
  }
  if (v112 <= 0) {
    int v115 = 1;
  }
  else {
    int v115 = 2;
  }
  if (v109) {
    int v116 = v115;
  }
  else {
    int v116 = v112 > 0;
  }
  if (v111) {
    ++v116;
  }
  if (v114) {
    ++v116;
  }
  if (v112 <= 0 && v116 == 1)
  {
    if ((*(unsigned char *)(v108 + 23) & 0x80) != 0)
    {
      if (*(void *)(v108 + 8)) {
        goto LABEL_265;
      }
    }
    else if (*(unsigned char *)(v108 + 23))
    {
LABEL_265:
      BOOL v117 = 1;
      goto LABEL_274;
    }
  }
  if (!v246)
  {
LABEL_273:
    BOOL v117 = 0;
    goto LABEL_274;
  }
  if (v241) {
    uint64_t v118 = v241;
  }
  else {
    uint64_t v118 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  uint64_t v119 = v118[5];
  uint64_t v120 = *(unsigned __int8 *)(v119 + 23);
  if (*(char *)(v119 + 23) < 0) {
    uint64_t v121 = *(void *)(v119 + 8);
  }
  else {
    uint64_t v121 = *(unsigned __int8 *)(v119 + 23);
  }
  uint64_t v123 = v118[6];
  if (*(char *)(v123 + 23) < 0) {
    uint64_t v124 = *(void *)(v123 + 8);
  }
  else {
    uint64_t v124 = *(unsigned __int8 *)(v123 + 23);
  }
  int v125 = *((_DWORD *)v118 + 4);
  uint64_t v126 = v118[7];
  if (*(char *)(v126 + 23) < 0) {
    uint64_t v127 = *(void *)(v126 + 8);
  }
  else {
    uint64_t v127 = *(unsigned __int8 *)(v126 + 23);
  }
  BOOL v117 = 0;
  if (v125 <= 0) {
    int v128 = 1;
  }
  else {
    int v128 = 2;
  }
  if (v121) {
    int v129 = v128;
  }
  else {
    int v129 = v125 > 0;
  }
  if (v124) {
    ++v129;
  }
  if (v127) {
    ++v129;
  }
  if (v125 <= 0 && v129 == 1)
  {
    if ((v120 & 0x80) != 0) {
      uint64_t v120 = *(void *)(v119 + 8);
    }
    BOOL v117 = v120 != 0;
  }
LABEL_274:
  if (size) {
    std::__shared_weak_count::__release_shared[abi:ne180100](size);
  }
  if (v207[0]) {
    operator delete(v207[0]);
  }
  CoreML::Specification::ConvolutionLayerParams::~ConvolutionLayerParams((CoreML::Specification::ConvolutionLayerParams *)v231);
  __p[0] = &v249;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  __p[0] = &v252;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (SHIBYTE(v255.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v255.__r_.__value_.__l.__data_);
  }
  return v117;
}

void sub_19EAC29C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  if (SLOBYTE(STACK[0x2C7]) < 0)
  {
    operator delete((void *)STACK[0x2B0]);
    if ((v63 & 1) == 0)
    {
LABEL_6:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&STACK[0x2F0]);
      CoreML::Specification::ConvolutionLayerParams::~ConvolutionLayerParams((CoreML::Specification::ConvolutionLayerParams *)&STACK[0x410]);
      uint64_t v67 = *(void **)(v65 - 136);
      if (v67) {
        operator delete(v67);
      }
      if (a11) {
        std::__shared_weak_count::__release_shared[abi:ne180100](a11);
      }
      if (a38) {
        operator delete(a38);
      }
      CoreML::Specification::ConvolutionLayerParams::~ConvolutionLayerParams((CoreML::Specification::ConvolutionLayerParams *)&a63);
      STACK[0x2F0] = (unint64_t)&STACK[0x260];
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2F0]);
      STACK[0x2F0] = (unint64_t)&STACK[0x278];
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2F0]);
      if (SLOBYTE(STACK[0x2A7]) < 0) {
        operator delete((void *)STACK[0x290]);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v63)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v64);
  goto LABEL_6;
}

void sub_19EAC2E60()
{
}

void Espresso::sequential_builder::add<Espresso::convolution_uniforms>(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, long long *a6, long long *a7, long long **a8)
{
  memset(&v13, 0, sizeof(v13));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v13, a6, a7, 0xAAAAAAAAAAAAAAABLL * (((char *)a7 - (char *)a6) >> 3));
  memset(&v12, 0, sizeof(v12));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v12, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a8[1] - (char *)*a8) >> 3));
  LODWORD(v15.__r_.__value_.__l.__data_) = (***(uint64_t (****)(void))(a2[14] + 8))(*(void *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  uint64_t v11 = (std::__shared_weak_count *)a1[1];
  uint64_t v16 = *a1;
  long long v17 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(&v15, 0, sizeof(v15));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v15, (long long *)v13.__r_.__value_.__l.__data_, (long long *)v13.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13.__r_.__value_.__l.__size_ - v13.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v14, 0, sizeof(v14));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v14, (long long *)v12.__r_.__value_.__l.__data_, (long long *)v12.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12.__r_.__value_.__l.__size_ - v12.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  uint64_t v18 = &v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  uint64_t v18 = &v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (*a2) {
    Espresso::sequential_builder::add_shape_from_kernel();
  }
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
}

void sub_19EAC3048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v16 = *(std::__shared_weak_count **)(v13 + 8);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  *(void *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(void *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void LayerTranslator::addPermute(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  long long v4 = (long long *)*((void *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v63, *(const std::string::value_type **)v4, *((void *)v4 + 1));
  }
  else
  {
    long long v5 = *v4;
    v63.__r_.__value_.__r.__words[2] = *((void *)v4 + 2);
    *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v5;
  }
  int v60 = 0;
  int v61 = 0;
  uint64_t v62 = 0;
  uint64_t v57 = 0;
  uint64_t v58 = 0;
  uint64_t v59 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v60, (uint64_t *)&v57, *((void *)this + 1));
  if (*((_DWORD *)a2 + 35) == 310)
  {
    std::string v7 = (const CoreML::Specification::PermuteLayerParams *)*((void *)a2 + 16);
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    std::string v7 = (const CoreML::Specification::PermuteLayerParams *)&CoreML::Specification::_PermuteLayerParams_default_instance_;
  }
  CoreML::Specification::PermuteLayerParams::PermuteLayerParams((CoreML::Specification::PermuteLayerParams *)v54, v7);
  long long v52 = xmmword_19EC7B910;
  int v53 = 4;
  if (v55 != 4)
  {
    exceptiounint64_t n = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3C1380](exception, "Permute Layer: axis parameter must of length 4");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v8 = *(void *)(v56 + 8);
  uint64_t v9 = *(void *)(v56 + 16);
  if (v8) {
    int v10 = 3 - v8;
  }
  else {
    int v10 = 4;
  }
  if (v9) {
    unsigned int v11 = 3 - v9;
  }
  else {
    unsigned int v11 = 4;
  }
  int v53 = v10;
  *((void *)&v52 + 1) = v11 | 0x300000000;
  int64x2_t v12 = (int64x2_t)vextq_s8(*(int8x16_t *)(v56 + 24), *(int8x16_t *)(v56 + 24), 8uLL);
  *(int8x8_t *)&long long v52 = vbsl_s8((int8x8_t)vmovn_s64(vceqzq_s64(v12)), (int8x8_t)0x400000004, (int8x8_t)vsub_s32((int32x2_t)0x300000003, vmovn_s64(v12)));
  uint64_t v13 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(&v73, "transpose");
  memset(&v49, 0, sizeof(v49));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v49, v57, v58, 0xAAAAAAAAAAAAAAABLL * (((char *)v58 - (char *)v57) >> 3));
  memset(&v48, 0, sizeof(v48));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v48, v60, v61, 0xAAAAAAAAAAAAAAABLL * (((char *)v61 - (char *)v60) >> 3));
  Espresso::sequential_builder::add<Espresso::transpose_params_t>(&v50, v13, (uint64_t)&v73, (uint64_t)&v63, (uint64_t)&v52, (long long *)v49.__r_.__value_.__l.__data_, (long long *)v49.__r_.__value_.__l.__size_, (long long **)&v48);
  uint64_t v64 = &v48;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v64);
  uint64_t v64 = &v49;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v64);
  if (SBYTE7(v74) < 0) {
    operator delete((void *)v73);
  }
  if (**((unsigned char **)this + 2))
  {
    LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v60);
  }
  else
  {
    uint64_t v14 = *((void *)this + 1);
    uint64_t v15 = std::map<std::string,std::string>::at(v14, v57);
    long long v73 = *(_OWORD *)v15;
    long long v74 = *(_OWORD *)(v15 + 16);
    uint64_t v75 = *(void *)(v15 + 32);
    memset(v76, 0, 24);
    uint64_t v16 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v76, *(const void **)(v15 + 40), *(void *)(v15 + 48), (uint64_t)(*(void *)(v15 + 48)- *(void *)(v15 + 40)) >> 2);
    if (*((_DWORD *)a2 + 35) == 310)
    {
      long long v17 = (const CoreML::Specification::PermuteLayerParams *)*((void *)a2 + 16);
    }
    else
    {
      CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v16);
      long long v17 = (const CoreML::Specification::PermuteLayerParams *)&CoreML::Specification::_PermuteLayerParams_default_instance_;
    }
    CoreML::Specification::PermuteLayerParams::PermuteLayerParams((CoreML::Specification::PermuteLayerParams *)v71, v17);
    uint64_t v18 = v72[2];
    uint64_t v19 = v72[3];
    uint64_t v20 = v72[4];
    int v21 = operator new(4uLL);
    int v46 = (uint64_t **)v14;
    uint64_t v47 = v20;
    _DWORD *v21 = v74;
    int v22 = operator new(8uLL);
    int v23 = DWORD2(v73);
    *int v22 = *v21;
    v22[1] = v23;
    operator delete(v21);
    __int16 v24 = std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(4uLL);
    __int16 v25 = v24;
    uint64_t v27 = v26;
    BOOL v28 = (char *)&v24[v26];
    _DWORD v24[2] = DWORD1(v73);
    uint64_t v29 = 2;
    for (uint64_t i = 1; i != -1; --i)
    {
      --v29;
      v24[i] = v22[i];
    }
    BOOL v31 = (char *)&v24[v29];
    operator delete(v22);
    if (v27 < 4)
    {
      uint64_t v33 = (12 - 4 * v29) >> 2;
      unint64_t v34 = v33 + 1;
      if ((unint64_t)(v33 + 1) >> 62) {
        std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
      }
      if ((v28 - v31) >> 1 > v34) {
        unint64_t v34 = (v28 - v31) >> 1;
      }
      if ((unint64_t)(v28 - v31) >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v35 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v35 = v34;
      }
      if (v35) {
        unint64_t v35 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v35);
      }
      uint64_t v36 = (char *)(v35 + 4 * v33);
      *(_DWORD *)uint64_t v36 = v73;
      if (v29 == 3)
      {
        uint64_t v32 = v47;
      }
      else
      {
        uint64_t v37 = -12;
        uint64_t v38 = v25 + 2;
        uint64_t v32 = v47;
        do
        {
          int v39 = *v38--;
          *((_DWORD *)v36 - 1) = v39;
          v36 -= 4;
          v37 += 4;
        }
        while (v37);
      }
      operator delete(&v25[v29]);
      BOOL v31 = v36;
    }
    else
    {
      void v25[3] = v73;
      uint64_t v32 = v47;
    }
    int v40 = HIDWORD(v73);
    int v41 = *(_DWORD *)&v31[4 * v18];
    unsigned int v42 = *(_DWORD *)&v31[4 * v19];
    unsigned int v43 = *(_DWORD *)&v31[4 * v32];
    uint64_t v64 = (std::string *)__PAIR64__(v42, v43);
    int v65 = v41;
    int v66 = HIDWORD(v73);
    uint64_t v67 = -1;
    long long v68 = 0u;
    long long v69 = 0u;
    uint64_t v70 = 0;
    EspressoConverter::validateShape((int *)&v64, *((void *)a2 + 14), (uint64_t)v60);
    uint64_t v77 = v60;
    int v44 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v46, v60, &v77);
    *((_DWORD *)v44 + 14) = v43;
    *((_DWORD *)v44 + 15) = v42;
    *((_DWORD *)v44 + 1CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = v41;
    *((_DWORD *)v44 + 17) = v40;
    *((void *)v44 + 9) = -1;
    *((void *)v44 + 10) = 0;
    *((void *)v44 + 11) = 0;
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v44 + 96, 0, 0, 0);
    operator delete(v31);
    CoreML::Specification::PermuteLayerParams::~PermuteLayerParams((CoreML::Specification::PermuteLayerParams *)v71);
    if (v76[0]) {
      operator delete(v76[0]);
    }
  }
  if (v51) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v51);
  }
  CoreML::Specification::PermuteLayerParams::~PermuteLayerParams((CoreML::Specification::PermuteLayerParams *)v54);
  *(void *)&long long v73 = &v57;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v73);
  *(void *)&long long v73 = &v60;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v73);
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v63.__r_.__value_.__l.__data_);
  }
}

void sub_19EAC35A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39)
{
  if (v39) {
    operator delete(v39);
  }
  CoreML::Specification::PermuteLayerParams::~PermuteLayerParams((CoreML::Specification::PermuteLayerParams *)(v40 - 216));
  unsigned int v42 = *(void **)(v40 - 136);
  if (v42) {
    operator delete(v42);
  }
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  CoreML::Specification::PermuteLayerParams::~PermuteLayerParams((CoreML::Specification::PermuteLayerParams *)&a22);
  *(void *)(v40 - 21CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = &a27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v40 - 216));
  *(void *)(v40 - 21CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = &a30;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v40 - 216));
  if (a38 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void LayerTranslator::addCropResize(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  long long v4 = (long long *)*((void *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v58, *(const std::string::value_type **)v4, *((void *)v4 + 1));
  }
  else
  {
    long long v5 = *v4;
    v58.__r_.__value_.__r.__words[2] = *((void *)v4 + 2);
    *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v5;
  }
  int v55 = 0;
  uint64_t v56 = 0;
  uint64_t v57 = 0;
  long long v52 = 0;
  int v53 = 0;
  uint64_t v54 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v55, (uint64_t *)&v52, *((void *)this + 1));
  if (*((_DWORD *)a2 + 35) == 212)
  {
    std::string v7 = (const CoreML::Specification::CropResizeLayerParams *)*((void *)a2 + 16);
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    std::string v7 = (const CoreML::Specification::CropResizeLayerParams *)&CoreML::Specification::_CropResizeLayerParams_default_instance_;
  }
  CoreML::Specification::CropResizeLayerParams::CropResizeLayerParams((CoreML::Specification::CropResizeLayerParams *)v45, v7);
  int v36 = 0;
  unsigned int v37 = 0;
  long long v34 = 0uLL;
  char v35 = 0;
  int v38 = 1065353216;
  char v39 = 0;
  int v40 = 2;
  long long v41 = 0u;
  long long v42 = 0u;
  LODWORD(v8) = 1;
  int v43 = 1;
  char v44 = 0;
  if (v46)
  {
    if (v46 != 2)
    {
      exceptiounint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      BOOL v28 = std::string::append((std::string *)v68, " , target size must be of length 2, if set");
      long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
      *(void *)&v71[16] = *((void *)&v28->__r_.__value_.__l + 2);
      *(_OWORD *)long long v71 = v29;
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, (const std::string *)v71);
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    uint64_t v9 = *(void *)(v47 + 8);
    uint64_t v8 = *(void *)(v47 + 16);
    if (!v9) {
      LODWORD(v9) = 1;
    }
    DWORD2(v34) = v9;
    if (!v8) {
      LODWORD(v8) = 1;
    }
  }
  else
  {
    DWORD2(v34) = 1;
  }
  DWORD1(v34) = v8;
  int v38 = v51;
  char v35 = v50;
  int v10 = v48;
  if (!v48) {
    int v10 = &CoreML::Specification::_SamplingMode_default_instance_;
  }
  int v11 = *((_DWORD *)v10 + 4);
  int v12 = 0;
  switch(v11)
  {
    case 0:
      int v12 = 1;
      goto LABEL_22;
    case 1:
      goto LABEL_22;
    case 2:
    case 3:
      int v12 = v11;
LABEL_22:
      int v36 = v12;
      goto LABEL_23;
    default:
      if (v11 == 0x80000000 || v11 == 0x7FFFFFFF)
      {
        uint64_t v13 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x19F3C1380](v13, "Sampling mode not set in crop resize layer.");
        goto LABEL_47;
      }
LABEL_23:
      uint64_t v14 = v49;
      if (!v49) {
        uint64_t v14 = &CoreML::Specification::_BoxCoordinatesMode_default_instance_;
      }
      unsigned int v15 = *((_DWORD *)v14 + 4);
      if (v15 >= 4)
      {
        if (v15 == 0x7FFFFFFF || v15 == 0x80000000)
        {
          uint64_t v13 = __cxa_allocate_exception(0x10uLL);
          MEMORY[0x19F3C1380](v13, "Box coordinates mode not set in crop resize layer.");
LABEL_47:
          __cxa_throw(v13, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
      }
      else
      {
        unsigned int v37 = v15;
      }
      uint64_t v16 = *(void **)this;
      std::string::basic_string[abi:ne180100]<0>(v71, "crop_and_resize");
      memset(&v31, 0, sizeof(v31));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v31, v52, v53, 0xAAAAAAAAAAAAAAABLL * (((char *)v53 - (char *)v52) >> 3));
      memset(&v30, 0, sizeof(v30));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v30, v55, v56, 0xAAAAAAAAAAAAAAABLL * (((char *)v56 - (char *)v55) >> 3));
      Espresso::sequential_builder::add<Espresso::crop_and_resize_params_t>(&v32, v16, (uint64_t)v71, (uint64_t)&v58, (uint64_t)&v34, (long long *)v31.__r_.__value_.__l.__data_, (long long *)v31.__r_.__value_.__l.__size_, (long long **)&v30);
      if (v33) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v33);
      }
      *(void *)long long v68 = &v30;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v68);
      *(void *)long long v68 = &v31;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v68);
      if ((v71[23] & 0x80000000) != 0) {
        operator delete(*(void **)v71);
      }
      if (**((unsigned char **)this + 2))
      {
        LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v55);
      }
      else
      {
        long long v17 = (uint64_t **)*((void *)this + 1);
        uint64_t v18 = *(void *)((char *)&v34 + 4);
        uint64_t v19 = std::map<std::string,std::string>::at((uint64_t)v17, v52);
        *(_OWORD *)long long v71 = *(_OWORD *)v19;
        *(_OWORD *)&v71[16] = *(_OWORD *)(v19 + 16);
        uint64_t v72 = *(void *)(v19 + 32);
        long long v73 = 0;
        uint64_t v74 = 0;
        uint64_t v75 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v73, *(const void **)(v19 + 40), *(void *)(v19 + 48), (uint64_t)(*(void *)(v19 + 48) - *(void *)(v19 + 40)) >> 2);
        uint64_t v20 = std::map<std::string,std::string>::at((uint64_t)v17, (void *)v52 + 3);
        *(_OWORD *)long long v68 = *(_OWORD *)v20;
        *(_OWORD *)&v68[16] = *(_OWORD *)(v20 + 16);
        uint64_t v69 = *(void *)(v20 + 32);
        memset(v70, 0, sizeof(v70));
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v70, *(const void **)(v20 + 40), *(void *)(v20 + 48), (uint64_t)(*(void *)(v20 + 48) - *(void *)(v20 + 40)) >> 2);
        long long v62 = *(_OWORD *)v71;
        long long v63 = *(_OWORD *)&v71[16];
        int v21 = v73;
        uint64_t v64 = v72;
        int v65 = 0;
        uint64_t v66 = 0;
        uint64_t v67 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v65, v73, v74, (v74 - (uint64_t)v73) >> 2);
        *(void *)&long long v62 = v18;
        LODWORD(v63) = *(_DWORD *)&v68[16];
        v59[0] = v62;
        v59[1] = v63;
        int v22 = v65;
        uint64_t v60 = v64;
        memset(__p, 0, sizeof(__p));
        uint64_t v23 = v66;
        unint64_t v24 = (v66 - (uint64_t)v65) >> 2;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(__p, v65, v66, v24);
        EspressoConverter::validateShape((int *)v59, *((void *)a2 + 14), (uint64_t)v55);
        if (__p[0]) {
          operator delete(__p[0]);
        }
        uint64_t v76 = v55;
        __int16 v25 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v17, v55, &v76);
        long long v26 = v63;
        *(_OWORD *)(v25 + 5CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = v62;
        *(_OWORD *)(v25 + 72) = v26;
        *((void *)v25 + 11) = v64;
        std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v25 + 96, v22, v23, v24);
        if (v22) {
          operator delete(v22);
        }
        if (v70[0]) {
          operator delete(v70[0]);
        }
        if (v21) {
          operator delete(v21);
        }
      }
      CoreML::Specification::CropResizeLayerParams::~CropResizeLayerParams((CoreML::Specification::CropResizeLayerParams *)v45);
      *(void *)&long long v34 = &v52;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
      *(void *)&long long v34 = &v55;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
      if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v58.__r_.__value_.__l.__data_);
      }
      return;
  }
}

void sub_19EAC3C08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55)
{
  if (*(char *)(v57 - 137) < 0) {
    operator delete(*(void **)(v57 - 160));
  }
  if (*(char *)(v57 - 201) < 0)
  {
    operator delete(*(void **)(v57 - 224));
    if ((v56 & 1) == 0)
    {
LABEL_8:
      CoreML::Specification::CropResizeLayerParams::~CropResizeLayerParams((CoreML::Specification::CropResizeLayerParams *)&a28);
      a18 = &a37;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
      a18 = &a40;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
      if (a48 < 0) {
        operator delete(__p);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v56)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v55);
  goto LABEL_8;
}

void LayerTranslator::addExpandDims(LayerTranslator *this, uint64_t **a2)
{
  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  long long v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v28, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    long long v5 = *(_OWORD *)v4;
    v28.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v5;
  }
  __int16 v25 = 0;
  long long v26 = 0;
  uint64_t v27 = 0;
  int v22 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v25, (uint64_t *)&v22, *((void *)this + 1));
  uint64_t v21 = 0;
  memset(v20, 0, sizeof(v20));
  if (*((_DWORD *)a2 + 35) == 1125)
  {
    std::string v7 = a2[16];
  }
  else
  {
    unint64_t inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
    std::string v7 = &CoreML::Specification::_ExpandDimsLayerParams_default_instance_;
  }
  int v8 = *((_DWORD *)v7 + 4);
  if (v8 >= 32) {
    int v9 = 32;
  }
  else {
    int v9 = *((_DWORD *)v7 + 4);
  }
  DWORD1(v20[0]) = v9;
  if (v8 >= 1)
  {
    uint64_t v10 = 0;
    if (v9 <= 1) {
      uint64_t v11 = 1;
    }
    else {
      uint64_t v11 = v9;
    }
    do
    {
      if (*((_DWORD *)a2 + 35) == 1125)
      {
        int v12 = a2[16];
      }
      else
      {
        unint64_t inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
        int v12 = &CoreML::Specification::_ExpandDimsLayerParams_default_instance_;
      }
      *((_DWORD *)v20 + v10 + 2) = *(void *)(v12[3] + 8 * v10 + 8);
      ++v10;
    }
    while (v11 != v10);
  }
  uint64_t v13 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(&__p, "expand_dims");
  memset(&v15, 0, sizeof(v15));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v15, v22, v23, 0xAAAAAAAAAAAAAAABLL * (((char *)v23 - (char *)v22) >> 3));
  memset(&v14, 0, sizeof(v14));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v14, v25, v26, 0xAAAAAAAAAAAAAAABLL * (((char *)v26 - (char *)v25) >> 3));
  memset(&v30, 0, sizeof(v30));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v30, (long long *)v15.__r_.__value_.__l.__data_, (long long *)v15.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15.__r_.__value_.__l.__size_ - v15.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v29, 0, sizeof(v29));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v29, (long long *)v14.__r_.__value_.__l.__data_, (long long *)v14.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14.__r_.__value_.__l.__size_ - v14.__r_.__value_.__r.__words[0]) >> 3));
  LODWORD(v32.__r_.__value_.__l.__data_) = (***(uint64_t (****)(void))(v13[14] + 8))(*(void *)(v13[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  uint64_t v33 = v18;
  long long v34 = v19;
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(&v32, 0, sizeof(v32));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v32, (long long *)v30.__r_.__value_.__l.__data_, (long long *)v30.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v30.__r_.__value_.__l.__size_ - v30.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v31, 0, sizeof(v31));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v31, (long long *)v29.__r_.__value_.__l.__data_, (long long *)v29.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29.__r_.__value_.__l.__size_ - v29.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  char v35 = &v31;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
  char v35 = &v32;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  if (*v13) {
    Espresso::sequential_builder::add_shape_from_kernel();
  }
  v32.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
  v32.__r_.__value_.__r.__words[0] = (std::string::size_type)&v30;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  v32.__r_.__value_.__r.__words[0] = (std::string::size_type)&v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
  v32.__r_.__value_.__r.__words[0] = (std::string::size_type)&v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
  if (v17 < 0) {
    operator delete(__p);
  }
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v25);
  *(void *)&v20[0] = &v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v20);
  *(void *)&v20[0] = &v25;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v20);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
}

void sub_19EAC4104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,std::__shared_weak_count *a23,char *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  if (a23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a23);
  }
  *(void *)(v42 - 72) = v42 - 184;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v42 - 72));
  *(void *)(v42 - 72) = v42 - 160;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v42 - 72));
  *(void *)(v42 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v42 - 72));
  *(void *)(v42 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v42 - 72));
  if (a21 < 0) {
    operator delete(__p);
  }
  a24 = &a42;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  a24 = (char *)(v42 - 232);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  if (*(char *)(v42 - 185) < 0) {
    operator delete(*(void **)(v42 - 208));
  }
  _Unwind_Resume(a1);
}

void LayerTranslator::addPadding(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  EspressoConverter::validateCommonNeuralNetworkLayerUtils(a2, a2);
  long long v4 = (long long *)*((void *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v50, *(const std::string::value_type **)v4, *((void *)v4 + 1));
  }
  else
  {
    long long v5 = *v4;
    v50.__r_.__value_.__r.__words[2] = *((void *)v4 + 2);
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v5;
  }
  uint64_t v47 = 0;
  std::string v48 = 0;
  uint64_t v49 = 0;
  char v44 = 0;
  int v45 = 0;
  uint64_t v46 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v47, (uint64_t *)&v44, *((void *)this + 1));
  if (*((_DWORD *)a2 + 35) == 200)
  {
    std::string v7 = (const CoreML::Specification::PaddingLayerParams *)*((void *)a2 + 16);
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    std::string v7 = (const CoreML::Specification::PaddingLayerParams *)&CoreML::Specification::_PaddingLayerParams_default_instance_;
  }
  CoreML::Specification::PaddingLayerParams::PaddingLayerParams((CoreML::Specification::PaddingLayerParams *)v40, v7);
  int v8 = v41;
  if (!v41) {
    int v8 = &CoreML::Specification::_BorderAmounts_default_instance_;
  }
  if ((*((_DWORD *)v8 + 6) | 2) != 2)
  {
    exceptiounint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::string v30 = std::string::append((std::string *)v62, " , pad amounts must be specified for both height and width, if set");
    long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    *(void *)&v37[16] = *((void *)&v30->__r_.__value_.__l + 2);
    *(_OWORD *)unsigned int v37 = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, (const std::string *)v37);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  long long v38 = 0u;
  memset(v39, 0, sizeof(v39));
  memset(v37, 0, sizeof(v37));
  switch(v43)
  {
    case 0:
      std::string v32 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::string::basic_string[abi:ne180100]<0>(v62, "Padding Type not set");
      std::runtime_error::runtime_error(v32, (const std::string *)v62);
      __cxa_throw(v32, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    case 1:
      *(_DWORD *)&v37[4] = *(_DWORD *)(v42 + 16);
      break;
    case 2:
      __int16 v9 = 2;
      goto LABEL_14;
    case 3:
      __int16 v9 = 1;
LABEL_14:
      *(_WORD *)&v37[2] = v9;
      break;
    default:
      break;
  }
  if (*((_DWORD *)v8 + 6)) {
    int16x4_t v10 = vmovn_s32(vuzp1q_s32(*(int32x4_t *)(*(void *)(v8[4] + 16) + 16), *(int32x4_t *)(*(void *)(v8[4] + 8)
  }
                                                                                            + 16)));
  else {
    int16x4_t v10 = 0;
  }
  *(int16x4_t *)&v37[8] = v10;
  uint64_t v11 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(v62, "general_padding");
  memset(&v34, 0, sizeof(v34));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v34, v44, v45, 0xAAAAAAAAAAAAAAABLL * (((char *)v45 - (char *)v44) >> 3));
  memset(&v33, 0, sizeof(v33));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v33, v47, v48, 0xAAAAAAAAAAAAAAABLL * (((char *)v48 - (char *)v47) >> 3));
  Espresso::sequential_builder::add<Espresso::general_padding_params>(&v35, v11, (uint64_t)v62, (uint64_t)&v50, (uint64_t)v37, (long long *)v34.__r_.__value_.__l.__data_, (long long *)v34.__r_.__value_.__l.__size_, (long long **)&v33);
  *(void *)&long long v54 = &v33;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v54);
  *(void *)&long long v54 = &v34;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v54);
  if ((v62[23] & 0x80000000) != 0) {
    operator delete(*(void **)v62);
  }
  if (**((unsigned char **)this + 2))
  {
    LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v47);
  }
  else
  {
    int v12 = (uint64_t **)*((void *)this + 1);
    uint64_t v13 = std::map<std::string,std::string>::at((uint64_t)v12, v44);
    *(_OWORD *)long long v62 = *(_OWORD *)v13;
    *(_OWORD *)&v62[16] = *(_OWORD *)(v13 + 16);
    uint64_t v63 = *(void *)(v13 + 32);
    uint64_t v64 = 0;
    uint64_t v65 = 0;
    uint64_t v66 = 0;
    std::string v14 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v64, *(const void **)(v13 + 40), *(void *)(v13 + 48), (uint64_t)(*(void *)(v13 + 48)- *(void *)(v13 + 40)) >> 2);
    if (*((_DWORD *)a2 + 35) == 200)
    {
      std::string v15 = (const CoreML::Specification::PaddingLayerParams *)*((void *)a2 + 16);
    }
    else
    {
      CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v14);
      std::string v15 = (const CoreML::Specification::PaddingLayerParams *)&CoreML::Specification::_PaddingLayerParams_default_instance_;
    }
    CoreML::Specification::PaddingLayerParams::PaddingLayerParams((CoreML::Specification::PaddingLayerParams *)v60, v15);
    long long v54 = *(_OWORD *)v62;
    long long v55 = *(_OWORD *)&v62[16];
    uint64_t v16 = v64;
    uint64_t v56 = v63;
    uint64_t v57 = 0;
    uint64_t v58 = 0;
    uint64_t v59 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v57, v64, v65, (v65 - (uint64_t)v64) >> 2);
    char v17 = v61;
    if (!v61) {
      char v17 = &CoreML::Specification::_BorderAmounts_default_instance_;
    }
    int v18 = *((_DWORD *)v17 + 6);
    if (v18)
    {
      uint64_t v19 = v17[4];
      uint64_t v21 = *(void *)(v19 + 8);
      uint64_t v20 = *(void *)(v19 + 16);
      int v22 = *(_DWORD *)(v20 + 16);
      int v23 = *(_DWORD *)(v20 + 24);
      int v24 = *(_DWORD *)(v21 + 24) + *(_DWORD *)(v21 + 16);
      int v18 = v23 + v22;
    }
    else
    {
      int v24 = 0;
    }
    LODWORD(v54) = *(_DWORD *)v62 + v18;
    DWORD1(v54) = *(_DWORD *)&v62[4] + v24;
    if (*(_DWORD *)&v62[4] == -1) {
      DWORD1(v54) = -1;
    }
    if (*(_DWORD *)v62 == -1) {
      LODWORD(v54) = -1;
    }
    v51[0] = v54;
    v51[1] = v55;
    __int16 v25 = v57;
    uint64_t v52 = v56;
    memset(__p, 0, sizeof(__p));
    uint64_t v26 = v58;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(__p, v57, v58, (v58 - (uint64_t)v57) >> 2);
    EspressoConverter::validateShape((int *)v51, *((void *)a2 + 14), (uint64_t)v47);
    if (__p[0]) {
      operator delete(__p[0]);
    }
    uint64_t v67 = v47;
    uint64_t v27 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v12, v47, &v67);
    long long v28 = v55;
    *(_OWORD *)(v27 + 5CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = v54;
    *(_OWORD *)(v27 + 72) = v28;
    *((void *)v27 + 11) = v56;
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v27 + 96, v25, v26, (v26 - (uint64_t)v25) >> 2);
    if (v25) {
      operator delete(v25);
    }
    CoreML::Specification::PaddingLayerParams::~PaddingLayerParams((CoreML::Specification::PaddingLayerParams *)v60);
    if (v16) {
      operator delete(v16);
    }
  }
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  }
  CoreML::Specification::PaddingLayerParams::~PaddingLayerParams((CoreML::Specification::PaddingLayerParams *)v40);
  *(void *)unsigned int v37 = &v44;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v37);
  *(void *)unsigned int v37 = &v47;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v37);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v50.__r_.__value_.__l.__data_);
  }
}

void sub_19EAC4728(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v56 - 121) < 0)
  {
    operator delete(*(void **)(v56 - 144));
    if ((v55 & 1) == 0)
    {
LABEL_8:
      CoreML::Specification::PaddingLayerParams::~PaddingLayerParams((CoreML::Specification::PaddingLayerParams *)&a31);
      std::string __p = &a36;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      std::string __p = &a39;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      if (a47 < 0) {
        operator delete(a42);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v55)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v54);
  goto LABEL_8;
}

std::string *LayerTranslator::layerTranslateFn(LayerTranslator *this, const std::string **a2)
{
  *(void *)&long long v81 = *MEMORY[0x1E4F143B8];
  float result = std::string::operator=((std::string *)(*(void *)this + 56), a2[14]);
  int v6 = *((_DWORD *)a2 + 35);
  if (v6 > 879)
  {
    if (v6 > 1139)
    {
      if (v6 <= 1274)
      {
        if (v6 <= 1199)
        {
          if (v6 <= 1169)
          {
            if (v6 > 1149)
            {
              if (v6 == 1150)
              {
                LayerTranslator::addRankPreservingReshape(this, (uint64_t **)a2);
              }
              else
              {
                if (v6 != 1155) {
                  goto LABEL_466;
                }
                LayerTranslator::addConstantPad(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
              }
            }
            else if (v6 == 1140)
            {
              LayerTranslator::addReshapeStatic(this, (uint64_t **)a2);
            }
            else
            {
              if (v6 != 1145) {
                goto LABEL_466;
              }
              LayerTranslator::addReshapeDynamic(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
            }
          }
          else if (v6 <= 1179)
          {
            if (v6 == 1170)
            {
              LayerTranslator::addRandomNormalLike(this, (uint64_t **)a2);
            }
            else
            {
              if (v6 != 1175) {
                goto LABEL_466;
              }
              LayerTranslator::addRandomNormalStatic(this, (uint64_t **)a2);
            }
          }
          else
          {
            switch(v6)
            {
              case 1180:
                LayerTranslator::addRandomNormalDynamic(this, (uint64_t **)a2);
                break;
              case 1190:
                LayerTranslator::addRandomUniformLike(this, (uint64_t **)a2);
                break;
              case 1195:
                LayerTranslator::addRandomUniformStatic(this, (uint64_t **)a2);
                break;
              default:
                goto LABEL_466;
            }
          }
        }
        else if (v6 > 1249)
        {
          if (v6 <= 1259)
          {
            if (v6 == 1250)
            {
              LayerTranslator::addReduceL1(this, (uint64_t **)a2);
            }
            else
            {
              if (v6 != 1255) {
                goto LABEL_466;
              }
              LayerTranslator::addReduceL2(this, (uint64_t **)a2);
            }
          }
          else
          {
            switch(v6)
            {
              case 1260:
                LayerTranslator::addReduceMax(this, (uint64_t **)a2);
                break;
              case 1265:
                LayerTranslator::addReduceMin(this, (uint64_t **)a2);
                break;
              case 1270:
                LayerTranslator::addReduceSum(this, (uint64_t **)a2);
                break;
              default:
                goto LABEL_466;
            }
          }
        }
        else if (v6 <= 1214)
        {
          if (v6 == 1200)
          {
            LayerTranslator::addRandomUniformDynamic(this, (uint64_t **)a2);
          }
          else
          {
            if (v6 != 1210) {
              goto LABEL_466;
            }
            LayerTranslator::addRandomBernoulliLike(this, (uint64_t **)a2);
          }
        }
        else
        {
          switch(v6)
          {
            case 1215:
              LayerTranslator::addRandomBernoulliStatic(this, (uint64_t **)a2);
              break;
            case 1220:
              LayerTranslator::addRandomBernoulliDynamic(this, (uint64_t **)a2);
              break;
            case 1230:
              LayerTranslator::addCategoricalDistribution(this, (uint64_t **)a2);
              break;
            default:
              goto LABEL_466;
          }
        }
        goto LABEL_465;
      }
      if (v6 <= 1349)
      {
        if (v6 > 1312)
        {
          if (v6 <= 1319)
          {
            if (v6 == 1313)
            {
              LayerTranslator::addWhereNonZero(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
            }
            else
            {
              if (v6 != 1315) {
                goto LABEL_466;
              }
              LayerTranslator::addMatrixBandPart(this, (uint64_t **)a2);
            }
          }
          else
          {
            switch(v6)
            {
              case 1320:
                LayerTranslator::addLowerTriangular(this, (uint64_t **)a2);
                break;
              case 1325:
                LayerTranslator::addUpperTriangular(this, (uint64_t **)a2);
                break;
              case 1330:
                LayerTranslator::addWhere(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
                break;
              default:
                goto LABEL_466;
            }
          }
        }
        else if (v6 <= 1284)
        {
          if (v6 == 1275)
          {
            LayerTranslator::addReduceProd(this, (uint64_t **)a2);
          }
          else
          {
            if (v6 != 1280) {
              goto LABEL_466;
            }
            LayerTranslator::addReduceMean(this, (uint64_t **)a2);
          }
        }
        else
        {
          switch(v6)
          {
            case 1285:
              LayerTranslator::addReduceLogSum(this, (uint64_t **)a2);
              break;
            case 1290:
              LayerTranslator::addReduceSumSquare(this, (uint64_t **)a2);
              break;
            case 1295:
              LayerTranslator::addReduceLogSumExp(this, (uint64_t **)a2);
              break;
            default:
              goto LABEL_466;
          }
        }
        goto LABEL_465;
      }
      if (v6 <= 1454)
      {
        switch(v6)
        {
          case 1350:
            LayerTranslator::addLayerNormalization(this, (uint64_t **)a2);
            break;
          case 1400:
            LayerTranslator::addNMS(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
            break;
          case 1450:
            LayerTranslator::addOneHot(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
            break;
          default:
            goto LABEL_466;
        }
        goto LABEL_465;
      }
      switch(v6)
      {
        case 1455:
          LayerTranslator::addCumSum(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
          goto LABEL_465;
        case 1460:
          LayerTranslator::addClampedRelu(this, (uint64_t **)a2);
          goto LABEL_465;
        case 1461:
          LayerTranslator::addArgsort(this, (uint64_t **)a2);
          goto LABEL_465;
        case 1465:
          LayerTranslator::addPooling3d(this, (const CoreML::Specification::Pooling3DLayerParams **)a2);
          goto LABEL_465;
        case 1466:
          LayerTranslator::addGlobalPooling3d(this, (uint64_t **)a2);
          goto LABEL_465;
        case 1470:
          LayerTranslator::addSliceBySize(this, (uint64_t **)a2);
          goto LABEL_465;
        case 1471:
          float result = (std::string *)LayerTranslator::addConvolution3D(this, (uint64_t **)a2);
          break;
        default:
          goto LABEL_466;
      }
      goto LABEL_466;
    }
    if (v6 <= 994)
    {
      if (v6 > 939)
      {
        if (v6 > 959)
        {
          if (v6 <= 974)
          {
            if (v6 == 960)
            {
              LayerTranslator::addReverse(this, (uint64_t **)a2);
            }
            else
            {
              if (v6 != 965) {
                goto LABEL_466;
              }
              LayerTranslator::addReverseSeq(this, (uint64_t **)a2);
            }
          }
          else
          {
            switch(v6)
            {
              case 975:
                LayerTranslator::addSplitND(this, (uint64_t **)a2);
                break;
              case 980:
                LayerTranslator::addConcatND(this, (uint64_t **)a2);
                break;
              case 985:
                LayerTranslator::addTranspose(this, (uint64_t **)a2);
                break;
              default:
                goto LABEL_466;
            }
          }
        }
        else
        {
          switch(v6)
          {
            case 945:
              LayerTranslator::addScatterND(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
              goto LABEL_465;
            case 946:
            case 947:
            case 948:
            case 949:
            case 951:
            case 953:
              goto LABEL_466;
            case 950:
              LayerTranslator::addSoftmaxND(this, (uint64_t **)a2);
              goto LABEL_465;
            case 952:
              LayerTranslator::addGatherAlongAxis(this, (uint64_t **)a2);
              goto LABEL_465;
            case 954:
              LayerTranslator::addScatterAlongAxis(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
              goto LABEL_465;
            default:
              if (v6 != 940) {
                goto LABEL_466;
              }
              LayerTranslator::addGatherND(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
              break;
          }
        }
      }
      else if (v6 > 904)
      {
        if (v6 <= 924)
        {
          if (v6 == 905)
          {
            LayerTranslator::addSubtractBroadcastable(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
          }
          else
          {
            if (v6 != 920) {
              goto LABEL_466;
            }
            LayerTranslator::addTile(this, (uint64_t **)a2);
          }
        }
        else
        {
          switch(v6)
          {
            case 925:
              LayerTranslator::addStack(this, (uint64_t **)a2);
              break;
            case 930:
              LayerTranslator::addGather(this, (uint64_t **)a2);
              break;
            case 935:
              LayerTranslator::addScatter(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
              break;
            default:
              goto LABEL_466;
          }
        }
      }
      else if (v6 <= 889)
      {
        if (v6 == 880)
        {
          LayerTranslator::addAddBroadcastable(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
        }
        else
        {
          if (v6 != 885) {
            goto LABEL_466;
          }
          LayerTranslator::addPowBroadcastable(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
        }
      }
      else
      {
        switch(v6)
        {
          case 890:
            LayerTranslator::addDivideBroadcastable(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
            break;
          case 895:
            LayerTranslator::addFloorDivBroadcastable(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
            break;
          case 900:
            LayerTranslator::addMultiplyBroadcastable(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
            break;
          default:
            goto LABEL_466;
        }
      }
      goto LABEL_465;
    }
    if (v6 > 1079)
    {
      if (v6 > 1109)
      {
        if (v6 <= 1124)
        {
          if (v6 == 1110)
          {
            LayerTranslator::addBroadcastToDynamic(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
          }
          else
          {
            if (v6 != 1120) {
              goto LABEL_466;
            }
            LayerTranslator::addSqueeze(this, (uint64_t **)a2);
          }
        }
        else
        {
          switch(v6)
          {
            case 1125:
              LayerTranslator::addExpandDims(this, (uint64_t **)a2);
              break;
            case 1130:
              LayerTranslator::addFlattenTo2D(this, (const CoreML::Specification::FlattenLayerParams **)a2);
              break;
            case 1135:
              LayerTranslator::addReshapeLike(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
              break;
            default:
              goto LABEL_466;
          }
        }
      }
      else if (v6 <= 1089)
      {
        if (v6 == 1080)
        {
          LayerTranslator::addFillLike(this, (uint64_t **)a2);
        }
        else
        {
          if (v6 != 1085) {
            goto LABEL_466;
          }
          LayerTranslator::addFillStatic(this, (uint64_t **)a2);
        }
      }
      else
      {
        switch(v6)
        {
          case 1090:
            LayerTranslator::addFillDynamic(this, (uint64_t **)a2);
            break;
          case 1100:
            LayerTranslator::addBroadcastToLike(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
            break;
          case 1105:
            LayerTranslator::addBroadcastToStatic(this, (uint64_t **)a2);
            break;
          default:
            goto LABEL_466;
        }
      }
      goto LABEL_465;
    }
    if (v6 > 1024)
    {
      if (v6 > 1044)
      {
        if (v6 == 1045)
        {
          float result = (std::string *)LayerTranslator::addBatchedMatMul(this, (uint64_t **)a2);
          goto LABEL_466;
        }
        if (v6 != 1065)
        {
          if (v6 == 1070) {
            float result = (std::string *)LayerTranslator::addLoadConstantND(this, (uint64_t **)a2);
          }
          goto LABEL_466;
        }
        LayerTranslator::addGetShape(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
        goto LABEL_465;
      }
      if (v6 != 1025)
      {
        if (v6 == 1040) {
          float result = (std::string *)LayerTranslator::addEmbeddingND(this, (uint64_t **)a2);
        }
        goto LABEL_466;
      }
    }
    else
    {
      if (v6 <= 1004)
      {
        if (v6 == 995)
        {
          LayerTranslator::addSliceStatic(this, (uint64_t **)a2);
        }
        else
        {
          if (v6 != 1000) {
            goto LABEL_466;
          }
          LayerTranslator::addSliceDynamic(this, (uint64_t **)a2);
        }
        goto LABEL_465;
      }
      if (v6 == 1005)
      {
        LayerTranslator::addSlidingWindows(this, (uint64_t **)a2);
        goto LABEL_465;
      }
      if (v6 == 1015)
      {
        LayerTranslator::addTopK(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
        goto LABEL_465;
      }
      if (v6 != 1020) {
        goto LABEL_466;
      }
    }
    LayerTranslator::addArgMaxMin(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
    goto LABEL_465;
  }
  if (v6 <= 599)
  {
    if (v6 <= 244)
    {
      if (v6 > 179)
      {
        if (v6 > 211)
        {
          if (v6 <= 229)
          {
            if (v6 == 212)
            {
              LayerTranslator::addCropResize(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
            }
            else
            {
              if (v6 != 220) {
                goto LABEL_466;
              }
              LayerTranslator::addUnaryFunction(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
            }
          }
          else
          {
            switch(v6)
            {
              case 230:
                LayerTranslator::addAdd(this, (uint64_t **)a2);
                break;
              case 231:
                LayerTranslator::addMultiply(this, (uint64_t **)a2);
                break;
              case 240:
                LayerTranslator::addAverage(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
                break;
              default:
                goto LABEL_466;
            }
          }
        }
        else if (v6 <= 199)
        {
          if (v6 == 180)
          {
            LayerTranslator::addLRN(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
          }
          else
          {
            if (v6 != 190) {
              goto LABEL_466;
            }
            LayerTranslator::addCrop(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
          }
        }
        else
        {
          switch(v6)
          {
            case 200:
              LayerTranslator::addPadding(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
              break;
            case 210:
              LayerTranslator::addUpsample(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
              break;
            case 211:
              LayerTranslator::addResizeBilinear(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
              break;
            default:
              goto LABEL_466;
          }
        }
        goto LABEL_465;
      }
      if (v6 > 149)
      {
        if (v6 > 164)
        {
          switch(v6)
          {
            case 165:
              LayerTranslator::addMVN(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
              break;
            case 170:
              LayerTranslator::addL2Norm(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
              break;
            case 175:
              LayerTranslator::addSoftmax(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
              break;
            default:
              goto LABEL_466;
          }
          goto LABEL_465;
        }
        if (v6 == 150)
        {
          float result = (std::string *)LayerTranslator::addEmbedding(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
        }
        else if (v6 == 160)
        {
          float result = (std::string *)LayerTranslator::addBatchnorm(this, (uint64_t **)a2);
        }
        goto LABEL_466;
      }
      if (v6 > 129)
      {
        if (v6 == 130)
        {
          float result = (std::string *)LayerTranslator::addActivation(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
        }
        else if (v6 == 140)
        {
          float result = (std::string *)LayerTranslator::addInnerProduct(this, (uint64_t **)a2);
        }
        goto LABEL_466;
      }
      if (v6 == 100)
      {
        float result = (std::string *)LayerTranslator::addConvolution(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
        goto LABEL_466;
      }
      if (v6 != 120)
      {
        if (!v6)
        {
          exceptiounint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::string::basic_string[abi:ne180100]<0>(&v74, "Unknown layer type");
          std::runtime_error::runtime_error(exception, (const std::string *)&v74);
          __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        goto LABEL_466;
      }
      LayerTranslator::addPooling(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
    }
    else
    {
      if (v6 > 319)
      {
        if (v6 <= 399)
        {
          if (v6 <= 339)
          {
            if (v6 == 320)
            {
              LayerTranslator::addConcat(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
            }
            else
            {
              if (v6 != 330) {
                goto LABEL_466;
              }
              LayerTranslator::addSplit(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
            }
          }
          else
          {
            switch(v6)
            {
              case 340:
                LayerTranslator::addSequenceRepeat(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
                break;
              case 345:
                LayerTranslator::addReorganizeData(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
                break;
              case 350:
                LayerTranslator::addSlice(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
                break;
              default:
                goto LABEL_466;
            }
          }
          goto LABEL_465;
        }
        if (v6 > 419)
        {
          if (v6 == 420)
          {
            float result = (std::string *)LayerTranslator::addUniLSTM(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
            goto LABEL_466;
          }
          if (v6 == 430)
          {
            float result = (std::string *)LayerTranslator::addBiLSTM(this, (const CoreML::Specification::BiDirectionalLSTMLayerParams **)a2);
            goto LABEL_466;
          }
          if (v6 != 500) {
            goto LABEL_466;
          }
          LayerTranslator::addCustomLayer(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
          goto LABEL_465;
        }
        if (v6 == 400)
        {
          float result = (std::string *)LayerTranslator::addSimpleRecurrent(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
        }
        else if (v6 == 410)
        {
          float result = (std::string *)LayerTranslator::addGRU(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
        }
        goto LABEL_466;
      }
      if (v6 <= 279)
      {
        if (v6 > 259)
        {
          switch(v6)
          {
            case 260:
              LayerTranslator::addMax(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
              break;
            case 261:
              LayerTranslator::addMin(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
              break;
            case 270:
              LayerTranslator::addDotProduct(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
              break;
            default:
              goto LABEL_466;
          }
          goto LABEL_465;
        }
        if (v6 == 245)
        {
          float result = (std::string *)LayerTranslator::addScale(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
        }
        else if (v6 == 250)
        {
          float result = (std::string *)LayerTranslator::addBias(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
        }
        goto LABEL_466;
      }
      if (v6 > 299)
      {
        switch(v6)
        {
          case 300:
            LayerTranslator::addReshape(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
            break;
          case 301:
            LayerTranslator::addFlatten(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
            break;
          case 310:
            LayerTranslator::addPermute(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
            break;
          default:
            goto LABEL_466;
        }
        goto LABEL_465;
      }
      if (v6 != 280)
      {
        if (v6 == 290) {
          float result = (std::string *)LayerTranslator::addLoadConstant(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
        }
        goto LABEL_466;
      }
      LayerTranslator::addReduce(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
    }
    goto LABEL_465;
  }
  if (v6 <= 749)
  {
    if (v6 > 669)
    {
      uint64_t v7 = (v6 - 685);
      if (v7 > 0x37) {
        goto LABEL_235;
      }
      if (((1 << (v6 + 83)) & 0x84200842000000) != 0) {
        goto LABEL_334;
      }
      if (v6 == 685)
      {
        LayerTranslator::addRound(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
        goto LABEL_465;
      }
      if (v7 != 15)
      {
LABEL_235:
        if (v6 == 670)
        {
          LayerTranslator::addFloor(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
        }
        else
        {
          if (v6 != 680) {
            goto LABEL_466;
          }
          LayerTranslator::addSign(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
        }
        goto LABEL_465;
      }
      LayerTranslator::addExp2(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
    }
    else
    {
      if (v6 > 624)
      {
        if (v6 > 639)
        {
          switch(v6)
          {
            case 640:
              LayerTranslator::addRangeDynamic(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
              break;
            case 660:
              LayerTranslator::addClip(this, (uint64_t **)a2);
              break;
            case 665:
              LayerTranslator::addCeil(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
              break;
            default:
              goto LABEL_466;
          }
          goto LABEL_465;
        }
        if (v6 != 625)
        {
          if (v6 != 635) {
            goto LABEL_466;
          }
          LayerTranslator::addRangeStatic(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
          goto LABEL_465;
        }
LABEL_170:
        LayerTranslator::addLoopContinueBreak(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
        goto LABEL_465;
      }
      if (v6 > 614)
      {
        if (v6 == 615)
        {
          float result = (std::string *)LayerTranslator::addLoop(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
          goto LABEL_466;
        }
        if (v6 != 620) {
          goto LABEL_466;
        }
        goto LABEL_170;
      }
      if (v6 != 600)
      {
        if (v6 == 605) {
          float result = (std::string *)LayerTranslator::addBranch(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
        }
        goto LABEL_466;
      }
      LayerTranslator::addCopy(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
    }
LABEL_465:
    float result = 0;
    goto LABEL_466;
  }
  if (v6 > 864)
  {
    switch(v6)
    {
      case 865:
        LayerTranslator::addModBroadcastable(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
        break;
      case 870:
        LayerTranslator::addMinBroadcastable(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
        break;
      case 875:
        LayerTranslator::addMaxBroadcastable(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
        break;
      default:
        goto LABEL_466;
    }
    goto LABEL_465;
  }
  if ((v6 - 795) <= 0x3C)
  {
    if (((1 << (v6 - 27)) & 0x1084202942100000) != 0)
    {
      EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, v5);
      int v8 = a2[14];
      if (SHIBYTE(v8->__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&v69, v8->__r_.__value_.__l.__data_, v8->__r_.__value_.__l.__size_);
      }
      else
      {
        long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
        v69.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v69.__r_.__value_.__l.__data_ = v9;
      }
      memset(&v68, 0, sizeof(v68));
      memset(&v67, 0, sizeof(v67));
      EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v68, (uint64_t *)&v67, *((void *)this + 1));
      int v10 = 0;
      v64.__r_.__value_.__r.__words[0] = 0;
      v64.__r_.__value_.__l.__size_ = 1065353216;
      v64.__r_.__value_.__r.__words[2] = 897988541;
      char v65 = 0;
      uint64_t v66 = 0;
      int v11 = *((_DWORD *)a2 + 35);
      if (v11 <= 839)
      {
        switch(v11)
        {
          case 825:
            int v12 = 103;
            goto LABEL_387;
          case 826:
          case 828:
          case 829:
          case 831:
            goto LABEL_437;
          case 827:
            int v12 = 104;
            goto LABEL_387;
          case 830:
            int v12 = 105;
            goto LABEL_387;
          case 832:
            int v12 = 106;
            goto LABEL_387;
          default:
            if (v11 == 815)
            {
              int v12 = 100;
            }
            else
            {
              if (v11 != 820) {
                goto LABEL_437;
              }
              int v12 = 107;
            }
LABEL_387:
            LODWORD(v64.__r_.__value_.__l.__data_) = v12;
            if (v67.__r_.__value_.__l.__size_ - v67.__r_.__value_.__r.__words[0] == 24)
            {
              int v26 = a2[16]->__r_.__value_.__r.__words[2];
              v75.__r_.__value_.__r.__words[0] = 0xFFFFFFFF00000001;
              *(void *)&long long v27 = 0x100000001;
              *((void *)&v27 + 1) = 0x100000001;
              long long v74 = v27;
              if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type size = HIBYTE(v69.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type size = v69.__r_.__value_.__l.__size_;
              }
              std::string v29 = &v78;
              std::string::basic_string[abi:ne180100]((uint64_t)&v78, size + 15);
              if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                std::string v29 = (std::string *)v78.__r_.__value_.__r.__words[0];
              }
              if (size)
              {
                if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  std::string v30 = &v69;
                }
                else {
                  std::string v30 = (std::string *)v69.__r_.__value_.__r.__words[0];
                }
                memmove(v29, v30, size);
              }
              strcpy((char *)v29 + size, "_load_constant_");
              std::to_string(&v63, *(_DWORD *)(*((void *)this + 2) + 4));
              if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                long long v31 = &v63;
              }
              else {
                long long v31 = (std::string *)v63.__r_.__value_.__r.__words[0];
              }
              if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v32 = HIBYTE(v63.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v32 = v63.__r_.__value_.__l.__size_;
              }
              std::string v33 = std::string::append(&v78, (const std::string::value_type *)v31, v32);
              long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
              *(void *)&long long v71 = *((void *)&v33->__r_.__value_.__l + 2);
              long long __p = v34;
              v33->__r_.__value_.__l.__size_ = 0;
              v33->__r_.__value_.__r.__words[2] = 0;
              v33->__r_.__value_.__r.__words[0] = 0;
              if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v63.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v78.__r_.__value_.__l.__data_);
              }
              uint64_t v35 = *(void **)this;
              std::string::basic_string[abi:ne180100]<0>(&v78, "load_constant");
              memset(&v63, 0, sizeof(v63));
              if (SBYTE7(v71) < 0)
              {
                std::string::__init_copy_ctor_external(&v80, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
              }
              else
              {
                *(_OWORD *)&v80.__r_.__value_.__l.__data_ = __p;
                v80.__r_.__value_.__r.__words[2] = v71;
              }
              uint64_t v58 = 0;
              uint64_t v59 = 0;
              uint64_t v60 = 0;
              v56.__r_.__value_.__s.__data_[8] = 0;
              uint64_t v58 = (std::string *)operator new(0x18uLL);
              uint64_t v59 = v58;
              uint64_t v60 = v58 + 1;
              uint64_t v59 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v60, (long long *)&v80, &v81, v58);
              Espresso::sequential_builder::add<Espresso::load_constant_params>(&v61, v35, (uint64_t)&v78, (uint64_t)&__p, (uint64_t)&v74, (long long *)v63.__r_.__value_.__l.__data_, (long long *)v63.__r_.__value_.__l.__size_, (long long **)&v58);
              v56.__r_.__value_.__r.__words[0] = (std::string::size_type)&v58;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v56);
              if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v80.__r_.__value_.__l.__data_);
              }
              v80.__r_.__value_.__r.__words[0] = (std::string::size_type)&v63;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v80);
              if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v78.__r_.__value_.__l.__data_);
              }
              int v36 = (_OWORD *)v67.__r_.__value_.__l.__size_;
              if (v67.__r_.__value_.__l.__size_ >= v67.__r_.__value_.__r.__words[2])
              {
                std::string::size_type v38 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v67, &__p);
              }
              else
              {
                if (SBYTE7(v71) < 0)
                {
                  std::string::__init_copy_ctor_external((std::string *)v67.__r_.__value_.__l.__size_, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
                }
                else
                {
                  long long v37 = __p;
                  *(void *)(v67.__r_.__value_.__l.__size_ + 1CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = v71;
                  *int v36 = v37;
                }
                std::string::size_type v38 = (std::string::size_type)v36 + 24;
              }
              v67.__r_.__value_.__l.__size_ = v38;
              char v39 = v62;
              if (v62) {
                atomic_fetch_add_explicit(&v62->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v78, 1, 1, 1, 1);
              std::string::size_type v40 = v78.__r_.__value_.__r.__words[0];
              **(_DWORD **)(v78.__r_.__value_.__r.__words[0] + 24) = v26;
              long long v41 = (std::__shared_weak_count *)v78.__r_.__value_.__l.__size_;
              unsigned long long v57 = __PAIR128__(v78.__r_.__value_.__l.__size_, v40);
              if (v78.__r_.__value_.__l.__size_) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v78.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
              }
              Espresso::generic_load_constant_kernel::set_constant_blob();
              if (*((void *)&v57 + 1)) {
                std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v57 + 1));
              }
              if (v41) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v41);
              }
              if (v39) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v39);
              }
              if (v62) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v62);
              }
              if (SBYTE7(v71) < 0) {
                operator delete((void *)__p);
              }
              int v10 = 1;
            }
            else
            {
              int v10 = 0;
            }
            break;
        }
        goto LABEL_437;
      }
      if (v11 > 849)
      {
        if (v11 == 850)
        {
          int v10 = 0;
          int v13 = 112;
          goto LABEL_385;
        }
        if (v11 == 855)
        {
          int v10 = 0;
          int v13 = 110;
          goto LABEL_385;
        }
      }
      else
      {
        if (v11 == 840)
        {
          int v10 = 0;
          int v13 = 111;
          goto LABEL_385;
        }
        if (v11 == 845)
        {
          int v10 = 0;
          int v13 = 113;
LABEL_385:
          LODWORD(v64.__r_.__value_.__l.__data_) = v13;
        }
      }
LABEL_437:
      uint64_t v42 = *(void **)this;
      std::string::basic_string[abi:ne180100]<0>(&v74, "elementwise");
      memset(&v80, 0, sizeof(v80));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v80, (long long *)v67.__r_.__value_.__l.__data_, (long long *)v67.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v67.__r_.__value_.__l.__size_ - v67.__r_.__value_.__r.__words[0]) >> 3));
      memset(&v56, 0, sizeof(v56));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v56, (long long *)v68.__r_.__value_.__l.__data_, (long long *)v68.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v68.__r_.__value_.__l.__size_ - v68.__r_.__value_.__r.__words[0]) >> 3));
      Espresso::sequential_builder::add<Espresso::elementwise_params>(&v61, v42, (uint64_t)&v74, (uint64_t)&v69, (uint64_t)&v64, (long long *)v80.__r_.__value_.__l.__data_, (long long *)v80.__r_.__value_.__l.__size_, (long long **)&v56);
      if (v62) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v62);
      }
      *(void *)&long long __p = &v56;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      *(void *)&long long __p = &v80;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      if (v75.__r_.__value_.__s.__data_[7] < 0) {
        operator delete((void *)v74);
      }
      if (v10)
      {
        int v43 = (void **)(v67.__r_.__value_.__l.__size_ - 24);
        if (*(char *)(v67.__r_.__value_.__l.__size_ - 1) < 0) {
          operator delete(*v43);
        }
        v67.__r_.__value_.__l.__size_ = (std::string::size_type)v43;
      }
      if (**((unsigned char **)this + 2))
      {
        LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v68);
      }
      else
      {
        char v44 = (uint64_t **)*((void *)this + 1);
        memset(&v78, 0, sizeof(v78));
        std::string::size_type v46 = v67.__r_.__value_.__l.__size_;
        int v45 = (void *)v67.__r_.__value_.__r.__words[0];
        if (v67.__r_.__value_.__r.__words[0] == v67.__r_.__value_.__l.__size_)
        {
          uint64_t v49 = 0;
        }
        else
        {
          do
          {
            uint64_t v47 = (long long *)std::map<std::string,std::string>::at((uint64_t)v44, v45);
            std::string::size_type v48 = v78.__r_.__value_.__l.__size_;
            if (v78.__r_.__value_.__l.__size_ >= v78.__r_.__value_.__r.__words[2])
            {
              uint64_t v49 = (int *)std::vector<Espresso::layer_shape>::__push_back_slow_path<Espresso::layer_shape const&>((uint64_t *)&v78, v47);
            }
            else
            {
              std::vector<Espresso::layer_shape>::__construct_one_at_end[abi:ne180100]<Espresso::layer_shape const&>((uint64_t)&v78, v47);
              uint64_t v49 = (int *)(v48 + 64);
            }
            v78.__r_.__value_.__l.__size_ = (std::string::size_type)v49;
            v45 += 3;
          }
          while (v45 != (void *)v46);
        }
        if (*((_DWORD *)a2 + 35) != 850
          && 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v67.__r_.__value_.__l.__size_ - v67.__r_.__value_.__r.__words[0]) >> 3) >= 2)
        {
          EspressoConverter::validateEqualInputShapes((uint64_t)a2, (int *)v78.__r_.__value_.__l.__data_, v49);
        }
        long long v74 = *(_OWORD *)v78.__r_.__value_.__l.__data_;
        *(_OWORD *)&v75.__r_.__value_.__l.__data_ = *(_OWORD *)(v78.__r_.__value_.__r.__words[0] + 16);
        v75.__r_.__value_.__r.__words[2] = *(void *)(v78.__r_.__value_.__r.__words[0] + 32);
        long long v76 = 0uLL;
        uint64_t v77 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v76, *(const void **)(v78.__r_.__value_.__r.__words[0] + 40), *(void *)(v78.__r_.__value_.__r.__words[0] + 48), (uint64_t)(*(void *)(v78.__r_.__value_.__r.__words[0] + 48)- *(void *)(v78.__r_.__value_.__r.__words[0] + 40)) >> 2);
        long long __p = v74;
        long long v71 = *(_OWORD *)&v75.__r_.__value_.__l.__data_;
        std::string v50 = (char *)v76;
        std::string::size_type v72 = v75.__r_.__value_.__r.__words[2];
        memset(v73, 0, sizeof(v73));
        uint64_t v51 = *((void *)&v76 + 1);
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v73, (const void *)v76, *((uint64_t *)&v76 + 1), (uint64_t)(*((void *)&v76 + 1) - v76) >> 2);
        EspressoConverter::validateShape((int *)&__p, (uint64_t)a2[14], (uint64_t)v68.__r_.__value_.__l.__data_);
        if (v73[0])
        {
          v73[1] = v73[0];
          operator delete(v73[0]);
        }
        int v79 = (long long *)v68.__r_.__value_.__r.__words[0];
        uint64_t v52 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v44, v68.__r_.__value_.__l.__data_, &v79);
        long long v53 = *(_OWORD *)&v75.__r_.__value_.__l.__data_;
        *(_OWORD *)(v52 + 5CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = v74;
        *(_OWORD *)(v52 + 72) = v53;
        *((void *)v52 + 11) = *((void *)&v75.__r_.__value_.__l + 2);
        std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v52 + 96, v50, v51, (v51 - (uint64_t)v50) >> 2);
        if (v50) {
          operator delete(v50);
        }
        *(void *)&long long v74 = &v78;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
      }
      *(void *)&long long v74 = &v67;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
      *(void *)&long long v74 = &v68;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
      if ((SHIBYTE(v69.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_465;
      }
      __int16 v25 = (void *)v69.__r_.__value_.__r.__words[0];
      goto LABEL_464;
    }
    if (v6 == 795)
    {
LABEL_379:
      LayerTranslator::addActivationsIOS13(this, (const CoreML::Specification::NeuralNetworkLayer *)a2);
      goto LABEL_465;
    }
  }
  uint64_t v14 = (v6 - 750);
  if (v14 <= 0x28)
  {
    if (((1 << v14) & 0x42100421) != 0)
    {
LABEL_334:
      EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, v5);
      std::string v15 = a2[14];
      if (SHIBYTE(v15->__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&v64, v15->__r_.__value_.__l.__data_, v15->__r_.__value_.__l.__size_);
      }
      else
      {
        long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
        v64.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v16;
      }
      memset(&v78, 0, sizeof(v78));
      memset(&v69, 0, sizeof(v69));
      EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v78, (uint64_t *)&v69, *((void *)this + 1));
      *(void *)&long long __p = 0;
      *((void *)&__p + 1) = 1065353216;
      *(void *)&long long v71 = 897988541;
      BYTE8(v71) = 0;
      *(void **)((char *)v73 + 4) = 0;
      int v17 = *((_DWORD *)a2 + 35);
      if (v17 > 749)
      {
        if (v17 > 769)
        {
          switch(v17)
          {
            case 770:
              int v18 = 129;
              goto LABEL_364;
            case 775:
              int v18 = 128;
              goto LABEL_364;
            case 780:
              int v18 = 130;
              goto LABEL_364;
          }
        }
        else
        {
          switch(v17)
          {
            case 750:
              int v18 = 123;
              goto LABEL_364;
            case 755:
              int v18 = 122;
              goto LABEL_364;
            case 760:
              int v18 = 124;
              goto LABEL_364;
          }
        }
      }
      else if (v17 > 729)
      {
        switch(v17)
        {
          case 730:
            int v18 = 126;
            goto LABEL_364;
          case 735:
            int v18 = 125;
            goto LABEL_364;
          case 740:
            int v18 = 127;
            goto LABEL_364;
        }
      }
      else
      {
        switch(v17)
        {
          case 710:
            int v18 = 115;
            goto LABEL_364;
          case 715:
            int v18 = 114;
            goto LABEL_364;
          case 720:
            int v18 = 121;
LABEL_364:
            LODWORD(__p) = v18;
            break;
        }
      }
      uint64_t v19 = *(void **)this;
      std::string::basic_string[abi:ne180100]<0>(&v74, "elementwise");
      memset(&v68, 0, sizeof(v68));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v68, (long long *)v69.__r_.__value_.__l.__data_, (long long *)v69.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v69.__r_.__value_.__l.__size_ - v69.__r_.__value_.__r.__words[0]) >> 3));
      memset(&v67, 0, sizeof(v67));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v67, (long long *)v78.__r_.__value_.__l.__data_, (long long *)v78.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v78.__r_.__value_.__l.__size_ - v78.__r_.__value_.__r.__words[0]) >> 3));
      Espresso::sequential_builder::add<Espresso::elementwise_params>((uint64_t *)&v63, v19, (uint64_t)&v74, (uint64_t)&v64, (uint64_t)&__p, (long long *)v68.__r_.__value_.__l.__data_, (long long *)v68.__r_.__value_.__l.__size_, (long long **)&v67);
      if (v63.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v63.__r_.__value_.__l.__size_);
      }
      uint64_t v58 = &v67;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
      uint64_t v58 = &v68;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
      if (v75.__r_.__value_.__s.__data_[7] < 0) {
        operator delete((void *)v74);
      }
      if (**((unsigned char **)this + 2))
      {
        LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v78);
      }
      else
      {
        std::string::size_type v20 = v78.__r_.__value_.__r.__words[0];
        if (v78.__r_.__value_.__l.__size_ != v78.__r_.__value_.__r.__words[0])
        {
          uint64_t v21 = 0;
          unint64_t v22 = 0;
          int v23 = (uint64_t **)*((void *)this + 1);
          do
          {
            *((void *)&v74 + 1) = -1;
            v75.__r_.__value_.__r.__words[0] = -1;
            *(void *)&long long v74 = -1;
            *(_OWORD *)&v75.__r_.__value_.__r.__words[1] = 0u;
            long long v76 = 0u;
            uint64_t v77 = 0;
            EspressoConverter::validateShape((int *)&v74, (uint64_t)a2[14], v20 + v21);
            if ((void)v76)
            {
              *((void *)&v76 + 1) = v76;
              operator delete((void *)v76);
            }
            uint64_t v58 = (std::string *)(v78.__r_.__value_.__r.__words[0] + v21);
            int v24 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v23, (void *)(v78.__r_.__value_.__r.__words[0] + v21), (long long **)&v58);
            *((void *)v24 + 7) = -1;
            *((void *)v24 + 8) = -1;
            *((void *)v24 + 9) = -1;
            *((void *)v24 + 10) = 0;
            *((void *)v24 + 11) = 0;
            std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v24 + 96, 0, 0, 0);
            std::string::size_type v20 = v78.__r_.__value_.__r.__words[0];
            ++v22;
            v21 += 24;
          }
          while (v22 < 0xAAAAAAAAAAAAAAABLL
                      * ((uint64_t)(v78.__r_.__value_.__l.__size_ - v78.__r_.__value_.__r.__words[0]) >> 3));
        }
      }
      *(void *)&long long v74 = &v69;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
      *(void *)&long long v74 = &v78;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
      if ((SHIBYTE(v64.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_465;
      }
      __int16 v25 = (void *)v64.__r_.__value_.__r.__words[0];
LABEL_464:
      operator delete(v25);
      goto LABEL_465;
    }
    if (v14 != 40) {
      goto LABEL_466;
    }
    goto LABEL_379;
  }
LABEL_466:
  uint64_t v54 = *(void *)this;
  if (*(char *)(*(void *)this + 79) < 0)
  {
    **(unsigned char **)(v54 + 5CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = 0;
    *(void *)(v54 + 64) = 0;
  }
  else
  {
    *(unsigned char *)(v54 + 5CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = 0;
    *(unsigned char *)(v54 + 79) = 0;
  }
  return result;
}

char *LayerTranslator::defaultUnknownNdShape(char *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (a2[1] != *a2)
  {
    long long v4 = result;
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    do
    {
      uint64_t v7 = (uint64_t **)*((void *)v4 + 1);
      long long v9 = (long long *)(v2 + v5);
      int v8 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7, (void *)(v2 + v5), &v9);
      *((void *)v8 + 7) = -1;
      *((void *)v8 + 8) = -1;
      *((void *)v8 + 9) = -1;
      *((void *)v8 + 10) = 0;
      *((void *)v8 + 11) = 0;
      float result = std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v8 + 96, 0, 0, 0);
      uint64_t v2 = *a2;
      ++v6;
      v5 += 24;
    }
    while (v6 < 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  }
  return result;
}

void LayerTranslator::addCumSum(LayerTranslator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  *(void *)&long long v66 = *MEMORY[0x1E4F143B8];
  long long v4 = (long long *)*((void *)a2 + 14);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v61, *(const std::string::value_type **)v4, *((void *)v4 + 1));
  }
  else
  {
    long long v5 = *v4;
    v61.__r_.__value_.__r.__words[2] = *((void *)v4 + 2);
    *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v5;
  }
  uint64_t v58 = 0;
  uint64_t v59 = 0;
  uint64_t v60 = 0;
  int v55 = 0;
  std::string v56 = 0;
  uint64_t v57 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v58, (uint64_t *)&v55, *((void *)this + 1));
  __int16 v54 = 0;
  if (*((_DWORD *)a2 + 35) == 1455)
  {
    uint64_t v7 = (uint64_t *)*((void *)a2 + 16);
    LOBYTE(v54) = *((unsigned char *)v7 + 24);
  }
  else
  {
    unint64_t inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    int v9 = *((_DWORD *)a2 + 35);
    LOBYTE(v54) = word_1EB4DF4A0;
    if (v9 == 1455)
    {
      uint64_t v7 = (uint64_t *)*((void *)a2 + 16);
    }
    else
    {
      CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
      uint64_t v7 = &CoreML::Specification::_CumSumLayerParams_default_instance_;
    }
  }
  HIBYTE(v54) = *((unsigned char *)v7 + 25);
  memset(&__p, 0, sizeof(__p));
  if ((char *)v56 - (char *)v55 == 24)
  {
    unint64_t v52 = 0xFFFFFFFF00000001;
    *(void *)&long long v10 = 0x100000001;
    *((void *)&v10 + 1) = 0x100000001;
    long long v51 = v10;
    std::to_string(&v50, *(_DWORD *)(*((void *)this + 2) + 4));
    int v11 = std::string::append(&v50, "_");
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v65.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v13 = &v61;
    }
    else {
      int v13 = (std::string *)v61.__r_.__value_.__r.__words[0];
    }
    if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v61.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v61.__r_.__value_.__l.__size_;
    }
    std::string v15 = std::string::append(&v65, (const std::string::value_type *)v13, size);
    long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v62.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    int v17 = std::string::append(&v62, "_axis");
    std::string::size_type v18 = v17->__r_.__value_.__r.__words[0];
    *(void *)&long long v64 = v17->__r_.__value_.__l.__size_;
    *(void *)((char *)&v64 + 7) = *(std::string::size_type *)((char *)&v17->__r_.__value_.__r.__words[1] + 7);
    char v19 = HIBYTE(v17->__r_.__value_.__r.__words[2]);
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    __p.__r_.__value_.__r.__words[0] = v18;
    __p.__r_.__value_.__l.__size_ = v64;
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)&v64 + 7);
    *((unsigned char *)&__p.__r_.__value_.__s + 23) = v19;
    if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v62.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v65.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v50.__r_.__value_.__l.__data_);
    }
    std::string::size_type v20 = *(void **)this;
    std::string::basic_string[abi:ne180100]<0>(&v62, "load_constant");
    uint64_t v47 = 0;
    std::string::size_type v48 = 0;
    uint64_t v49 = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v65, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else {
      std::string v65 = __p;
    }
    char v44 = 0;
    int v45 = 0;
    std::string::size_type v46 = 0;
    v50.__r_.__value_.__r.__words[0] = (std::string::size_type)&v44;
    v50.__r_.__value_.__s.__data_[8] = 0;
    char v44 = (std::string *)operator new(0x18uLL);
    int v45 = v44;
    std::string::size_type v46 = v44 + 1;
    int v45 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v46, (long long *)&v65, &v66, v44);
    Espresso::sequential_builder::add<Espresso::load_constant_params>((uint64_t *)&v64, v20, (uint64_t)&v62, (uint64_t)&__p, (uint64_t)&v51, v47, v48, (long long **)&v44);
    v50.__r_.__value_.__r.__words[0] = (std::string::size_type)&v44;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v50);
    if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v65.__r_.__value_.__l.__data_);
    }
    v65.__r_.__value_.__r.__words[0] = (std::string::size_type)&v47;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v65);
    if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v62.__r_.__value_.__l.__data_);
    }
    unint64_t v22 = (std::__shared_weak_count *)*((void *)&v64 + 1);
    if (*((void *)&v64 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v64 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    int v23 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(v43, 1, 1, 1, 1);
    if (*((_DWORD *)a2 + 35) == 1455)
    {
      int v24 = (uint64_t *)*((void *)a2 + 16);
    }
    else
    {
      CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v23);
      int v24 = &CoreML::Specification::_CumSumLayerParams_default_instance_;
    }
    float v25 = (float)v24[2];
    uint64_t v26 = v43[0];
    long long v27 = (std::__shared_weak_count *)v43[1];
    **(float **)(v43[0] + 24) = v25;
    uint64_t v41 = v26;
    uint64_t v42 = v27;
    if (v27) {
      atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::generic_load_constant_kernel::set_constant_blob();
    if (v42) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v42);
    }
    long long v28 = *(void **)this;
    std::string::basic_string[abi:ne180100]<0>(&v65, "cumsum");
    if (*((char *)v55 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v62, *(const std::string::value_type **)v55, *((void *)v55 + 1));
    }
    else
    {
      long long v29 = *v55;
      v62.__r_.__value_.__r.__words[2] = *((void *)v55 + 2);
      *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v29;
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v63, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else {
      std::string v63 = __p;
    }
    int v36 = 0;
    long long v37 = 0;
    std::string::size_type v38 = 0;
    v50.__r_.__value_.__r.__words[0] = (std::string::size_type)&v36;
    v50.__r_.__value_.__s.__data_[8] = 0;
    int v36 = (long long *)operator new(0x30uLL);
    long long v37 = v36;
    std::string::size_type v38 = v36 + 3;
    long long v37 = (long long *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v38, (long long *)&v62, &v64, (std::string *)v36);
    memset(&v35, 0, sizeof(v35));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v35, v58, v59, 0xAAAAAAAAAAAAAAABLL * (((char *)v59 - (char *)v58) >> 3));
    Espresso::sequential_builder::add<Espresso::cumsum_params_t>(&v39, v28, (uint64_t)&v65, (uint64_t)&v61, (uint64_t)&v54, v36, v37, (long long **)&v35);
    if (v40) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v40);
    }
    v50.__r_.__value_.__r.__words[0] = (std::string::size_type)&v35;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v50);
    v50.__r_.__value_.__r.__words[0] = (std::string::size_type)&v36;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v50);
    for (uint64_t i = 0; i != -6; i -= 3)
    {
      if (SHIBYTE(v63.__r_.__value_.__r.__words[i + 2]) < 0) {
        operator delete(*(void **)((char *)&v62 + i * 8 + 24));
      }
    }
    if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v65.__r_.__value_.__l.__data_);
    }
    if (v27) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v27);
    }
    if (v22) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v22);
    }
    if (*((void *)&v64 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v64 + 1));
    }
  }
  else
  {
    uint64_t v21 = *(void **)this;
    std::string::basic_string[abi:ne180100]<0>(&v62, "cumsum");
    memset(&v32, 0, sizeof(v32));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v32, v55, v56, 0xAAAAAAAAAAAAAAABLL * (((char *)v56 - (char *)v55) >> 3));
    memset(&v31, 0, sizeof(v31));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v31, v58, v59, 0xAAAAAAAAAAAAAAABLL * (((char *)v59 - (char *)v58) >> 3));
    Espresso::sequential_builder::add<Espresso::cumsum_params_t>(&v33, v21, (uint64_t)&v62, (uint64_t)&v61, (uint64_t)&v54, (long long *)v32.__r_.__value_.__l.__data_, (long long *)v32.__r_.__value_.__l.__size_, (long long **)&v31);
    if (v34) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v34);
    }
    *(void *)&long long v51 = &v31;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v51);
    *(void *)&long long v51 = &v32;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v51);
    if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v62.__r_.__value_.__l.__data_);
    }
  }
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v58);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  v62.__r_.__value_.__r.__words[0] = (std::string::size_type)&v55;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v62);
  v62.__r_.__value_.__r.__words[0] = (std::string::size_type)&v58;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v62);
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v61.__r_.__value_.__l.__data_);
  }
}

void sub_19EAC6D30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  if (*(char *)(v53 - 137) < 0) {
    operator delete(*(void **)(v53 - 160));
  }
  if (*(char *)(v53 - 73) < 0) {
    operator delete(*(void **)(v53 - 96));
  }
  if (v52) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v52);
  }
  if (v51) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v51);
  }
  int v55 = *(std::__shared_weak_count **)(v53 - 104);
  if (v55) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v55);
  }
  if (a51 < 0) {
    operator delete(__p);
  }
  *(void *)(v53 - 160) = v53 - 240;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v53 - 160));
  *(void *)(v53 - 160) = v53 - 216;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v53 - 160));
  if (*(char *)(v53 - 169) < 0) {
    operator delete(*(void **)(v53 - 192));
  }
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::add<Espresso::cumsum_params_t>(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, long long *a6, long long *a7, long long **a8)
{
  memset(&v13, 0, sizeof(v13));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v13, a6, a7, 0xAAAAAAAAAAAAAAABLL * (((char *)a7 - (char *)a6) >> 3));
  memset(&v12, 0, sizeof(v12));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v12, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a8[1] - (char *)*a8) >> 3));
  LODWORD(v15.__r_.__value_.__l.__data_) = (***(uint64_t (****)(void))(a2[14] + 8))(*(void *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  int v11 = (std::__shared_weak_count *)a1[1];
  uint64_t v16 = *a1;
  int v17 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(&v15, 0, sizeof(v15));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v15, (long long *)v13.__r_.__value_.__l.__data_, (long long *)v13.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13.__r_.__value_.__l.__size_ - v13.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v14, 0, sizeof(v14));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v14, (long long *)v12.__r_.__value_.__l.__data_, (long long *)v12.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12.__r_.__value_.__l.__size_ - v12.__r_.__value_.__r.__words[0]) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  std::string::size_type v18 = &v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  std::string::size_type v18 = &v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (*a2) {
    Espresso::sequential_builder::add_shape_from_kernel();
  }
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
}

void sub_19EAC713C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v16 = *(std::__shared_weak_count **)(v13 + 8);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  *(void *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(void *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void LayerTranslator::addMultiply(LayerTranslator *this, uint64_t **a2)
{
  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  long long v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v63, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    long long v5 = *(_OWORD *)v4;
    v63.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v5;
  }
  uint64_t v60 = 0;
  std::string v61 = 0;
  uint64_t v62 = 0;
  uint64_t v57 = 0;
  uint64_t v58 = 0;
  uint64_t v59 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v60, (uint64_t *)&v57, *((void *)this + 1));
  EspressoConverter::splitElementwiseLayer((uint64_t)&v55, &v57, (uint64_t)v60);
  if (*((_DWORD *)a2 + 35) == 231)
  {
    uint64_t v7 = a2[16];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    uint64_t v7 = &CoreML::Specification::_MultiplyLayerParams_default_instance_;
  }
  uint64_t v39 = (const CoreML::Specification::NeuralNetworkLayer *)a2;
  long long v51 = &unk_1EF0D3B80;
  uint64_t v52 = 0;
  int v54 = 0;
  uint64_t v8 = v7[1];
  if (v8) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((unint64_t *)&v52, v8 & 0xFFFFFFFFFFFFFFFELL);
  }
  int v53 = *((_DWORD *)v7 + 4);
  uint64_t v9 = v55;
  if (v56 != v55)
  {
    unint64_t v10 = 0;
    uint64_t v11 = 71;
    do
    {
      *(void *)&long long v70 = 897988541;
      BYTE8(v70) = 0;
      *(void *)((char *)&v72 + 4) = 0;
      *(void *)&long long v69 = 1;
      *((void *)&v69 + 1) = 1065353216;
      long long v65 = 0uLL;
      *(void *)&long long v66 = 0;
      long long v73 = 0;
      long long v74 = 0;
      unint64_t v75 = 0;
      if ((char *)v58 - (char *)v57 == 24)
      {
        DWORD2(v69) = v53;
        *((void *)&v65 + 1) = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v65, v57);
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v73, v60, v61, 0xAAAAAAAAAAAAAAABLL * (((char *)v61 - (char *)v60) >> 3));
      }
      else
      {
        std::string v12 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v65, (long long *)(v9 + v11 - 71));
        uint64_t v13 = v12;
        *((void *)&v65 + 1) = v12;
        uint64_t v14 = (long long *)(v55 + v11 - 47);
        if ((unint64_t)v12 >= (unint64_t)v66)
        {
          uint64_t v16 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v65, v14);
        }
        else
        {
          if (*(char *)(v55 + v11 - 24) < 0)
          {
            std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)v14, *(void *)(v55 + v11 - 39));
          }
          else
          {
            long long v15 = *v14;
            v12->__r_.__value_.__r.__words[2] = *(void *)(v55 + v11 - 31);
            *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v15;
          }
          uint64_t v16 = (uint64_t)&v13[1];
        }
        *((void *)&v65 + 1) = v16;
        int v17 = (long long *)(v55 + v11 - 23);
        std::string::size_type v18 = v74;
        if ((unint64_t)v74 >= v75)
        {
          std::string::size_type v20 = (long long *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v73, v17);
        }
        else
        {
          if (*(char *)(v55 + v11) < 0)
          {
            std::string::__init_copy_ctor_external(v74, *(const std::string::value_type **)v17, *(void *)(v55 + v11 - 15));
          }
          else
          {
            long long v19 = *v17;
            v74->__r_.__value_.__r.__words[2] = *(void *)(v55 + v11 - 7);
            *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v19;
          }
          std::string::size_type v20 = (long long *)&v18[1];
        }
        long long v74 = (std::string *)v20;
      }
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v58 - (char *)v57) >> 3) > 2)
      {
        int v23 = *(void **)this;
        std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
        std::to_string(&v42, v10);
        if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v24 = &v63;
        }
        else {
          int v24 = (std::string *)v63.__r_.__value_.__r.__words[0];
        }
        if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v63.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v63.__r_.__value_.__l.__size_;
        }
        uint64_t v26 = std::string::insert(&v42, 0, (const std::string::value_type *)v24, size);
        long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
        std::string::size_type v44 = v26->__r_.__value_.__r.__words[2];
        *(_OWORD *)int v43 = v27;
        v26->__r_.__value_.__l.__size_ = 0;
        v26->__r_.__value_.__r.__words[2] = 0;
        v26->__r_.__value_.__r.__words[0] = 0;
        memset(&v41, 0, sizeof(v41));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v41, (long long *)v65, *((long long **)&v65 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v65 + 1) - v65) >> 3));
        memset(&v40, 0, sizeof(v40));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v40, (long long *)v73, (long long *)v74, 0xAAAAAAAAAAAAAAABLL * (((char *)v74 - (char *)v73) >> 3));
        Espresso::sequential_builder::add<Espresso::elementwise_params>(&v45, v23, (uint64_t)__p, (uint64_t)v43, (uint64_t)&v69, (long long *)v41.__r_.__value_.__l.__data_, (long long *)v41.__r_.__value_.__l.__size_, (long long **)&v40);
        long long v64 = &v40;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v64);
        long long v64 = &v41;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v64);
        if (SHIBYTE(v44) < 0) {
          operator delete(v43[0]);
        }
        if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v42.__r_.__value_.__l.__data_);
        }
        if (v50 < 0) {
          operator delete(__p[0]);
        }
        unint64_t v22 = v46;
        if (!v46) {
          goto LABEL_31;
        }
      }
      else
      {
        uint64_t v21 = *(void **)this;
        std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
        memset(&v48, 0, sizeof(v48));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v48, (long long *)v65, *((long long **)&v65 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v65 + 1) - v65) >> 3));
        memset(&v47, 0, sizeof(v47));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v47, (long long *)v73, (long long *)v74, 0xAAAAAAAAAAAAAAABLL * (((char *)v74 - (char *)v73) >> 3));
        Espresso::sequential_builder::add<Espresso::elementwise_params>((uint64_t *)v43, v21, (uint64_t)__p, (uint64_t)&v63, (uint64_t)&v69, (long long *)v48.__r_.__value_.__l.__data_, (long long *)v48.__r_.__value_.__l.__size_, (long long **)&v47);
        v42.__r_.__value_.__r.__words[0] = (std::string::size_type)&v47;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
        v42.__r_.__value_.__r.__words[0] = (std::string::size_type)&v48;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
        if (v50 < 0) {
          operator delete(__p[0]);
        }
        unint64_t v22 = (std::__shared_weak_count *)v43[1];
        if (!v43[1]) {
          goto LABEL_31;
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v22);
LABEL_31:
      __p[0] = &v73;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      long long v73 = (void **)&v65;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v73);
      ++v10;
      uint64_t v9 = v55;
      v11 += 72;
    }
    while (v10 < 0x8E38E38E38E38E39 * ((v56 - v55) >> 3));
  }
  if (**((unsigned char **)this + 2))
  {
    LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v60);
  }
  else
  {
    long long v28 = (uint64_t **)*((void *)this + 1);
    long long v73 = 0;
    long long v74 = 0;
    unint64_t v75 = 0;
    std::string v30 = v57;
    long long v29 = v58;
    if (v57 == v58)
    {
      uint64_t v33 = 0;
      long long v34 = 0;
    }
    else
    {
      do
      {
        std::string v31 = (long long *)std::map<std::string,std::string>::at((uint64_t)v28, v30);
        std::string v32 = v74;
        if ((unint64_t)v74 >= v75)
        {
          uint64_t v33 = (long long *)std::vector<Espresso::layer_shape>::__push_back_slow_path<Espresso::layer_shape const&>((uint64_t *)&v73, v31);
        }
        else
        {
          std::vector<Espresso::layer_shape>::__construct_one_at_end[abi:ne180100]<Espresso::layer_shape const&>((uint64_t)&v73, v31);
          uint64_t v33 = (long long *)&v32[2].__r_.__value_.__r.__words[2];
        }
        long long v74 = (std::string *)v33;
        std::string v30 = (long long *)((char *)v30 + 24);
      }
      while (v30 != v29);
      long long v34 = v73;
    }
    EspressoConverter::computeMaxShape((uint64_t)&v69, (uint64_t)v34, (uint64_t)v33);
    long long v65 = v69;
    long long v66 = v70;
    std::string v35 = (char *)v72;
    uint64_t v67 = v71;
    memset(v68, 0, 24);
    uint64_t v36 = *((void *)&v72 + 1);
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v68, (const void *)v72, *((uint64_t *)&v72 + 1), (uint64_t)(*((void *)&v72 + 1) - v72) >> 2);
    EspressoConverter::validateShape((int *)&v65, *((void *)v39 + 14), (uint64_t)v60);
    if (v68[0]) {
      operator delete(v68[0]);
    }
    __p[0] = v60;
    long long v37 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v28, v60, (long long **)__p);
    long long v38 = v70;
    *(_OWORD *)(v37 + 5CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = v69;
    *(_OWORD *)(v37 + 72) = v38;
    *((void *)v37 + 11) = v71;
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v37 + 96, v35, v36, (v36 - (uint64_t)v35) >> 2);
    if (v35) {
      operator delete(v35);
    }
    *(void *)&long long v69 = &v73;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v69);
  }
  long long v51 = &unk_1EF0D3B80;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(&v52);
  *(void *)&long long v69 = &v55;
  std::vector<std::pair<std::pair<std::string,std::string>,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v69);
  *(void *)&long long v69 = &v57;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v69);
  *(void *)&long long v69 = &v60;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v69);
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v63.__r_.__value_.__l.__data_);
  }
}

void sub_19EAC7834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  if (v59) {
    operator delete(v59);
  }
  *(void *)(v60 - 200) = v60 - 136;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)(v60 - 200));
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(a10);
  *(void *)(v60 - 200) = &a38;
  std::vector<std::pair<std::pair<std::string,std::string>,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v60 - 200));
  *(void *)(v60 - 200) = &a41;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v60 - 200));
  *(void *)(v60 - 200) = &a44;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v60 - 200));
  if (a52 < 0) {
    operator delete(a47);
  }
  _Unwind_Resume(a1);
}

void LayerTranslator::addSliceBySize(LayerTranslator *this, uint64_t **a2)
{
  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  long long v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v36, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    long long v5 = *(_OWORD *)v4;
    v36.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v5;
  }
  uint64_t v33 = 0;
  long long v34 = 0;
  uint64_t v35 = 0;
  std::string v30 = 0;
  std::string v31 = 0;
  uint64_t v32 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v33, (uint64_t *)&v30, *((void *)this + 1));
  uint64_t v6 = std::map<std::string,std::string>::at(*((void *)this + 1), v30);
  long long v26 = *(_OWORD *)v6;
  long long v27 = *(_OWORD *)(v6 + 16);
  uint64_t v28 = *(void *)(v6 + 32);
  memset(v29, 0, sizeof(v29));
  uint64_t v7 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v29, *(const void **)(v6 + 40), *(void *)(v6 + 48), (uint64_t)(*(void *)(v6 + 48) - *(void *)(v6 + 40)) >> 2);
  if (*((_DWORD *)a2 + 35) == 1470)
  {
    uint64_t v8 = a2[16];
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v7);
    uint64_t v8 = &CoreML::Specification::_SliceBySizeLayerParams_default_instance_;
  }
  unint64_t v22 = &unk_1EF0D5898;
  uint64_t v23 = 0;
  int v25 = 0;
  uint64_t v9 = v8[1];
  if (v9) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((unint64_t *)&v23, v9 & 0xFFFFFFFFFFFFFFFELL);
  }
  long long v24 = *((_OWORD *)v8 + 1);
  long long v20 = xmmword_19EC7B920;
  int v10 = DWORD1(v27);
  if (v27 == 1) {
    int v11 = 4;
  }
  else {
    int v11 = 5;
  }
  if (DWORD1(v27) == -1) {
    int v10 = v11;
  }
  int v19 = v10 + ~DWORD2(v24);
  int v21 = v24;
  std::string v12 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "slice");
  memset(&v14, 0, sizeof(v14));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v14, v30, v31, 0xAAAAAAAAAAAAAAABLL * (((char *)v31 - (char *)v30) >> 3));
  memset(&v13, 0, sizeof(v13));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v13, v33, v34, 0xAAAAAAAAAAAAAAABLL * (((char *)v34 - (char *)v33) >> 3));
  Espresso::sequential_builder::add<Espresso::slice_params_t>(&v17, v12, (uint64_t)__p, (uint64_t)&v36, (uint64_t)&v19, (long long *)v14.__r_.__value_.__l.__data_, (long long *)v14.__r_.__value_.__l.__size_, (long long **)&v13);
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  long long v37 = &v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
  long long v37 = &v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
  if (v16 < 0) {
    operator delete(__p[0]);
  }
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v33);
  unint64_t v22 = &unk_1EF0D5898;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(&v23);
  if (v29[0]) {
    operator delete(v29[0]);
  }
  *(void *)&long long v26 = &v30;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
  *(void *)&long long v26 = &v33;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }
}

void sub_19EAC7C78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v37);
  if (__p) {
    operator delete(__p);
  }
  a32 = v38 - 128;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a32);
  a32 = v38 - 104;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a32);
  if (*(char *)(v38 - 57) < 0) {
    operator delete(*(void **)(v38 - 80));
  }
  _Unwind_Resume(a1);
}

void LayerTranslator::addReverse(LayerTranslator *this, uint64_t **a2)
{
  EspressoConverter::validateCommonNeuralNetworkLayerUtils((EspressoConverter *)a2, (const CoreML::Specification::NeuralNetworkLayer *)a2);
  long long v4 = a2[14];
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v36, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    long long v5 = *(_OWORD *)v4;
    v36.__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v5;
  }
  uint64_t v33 = 0;
  long long v34 = 0;
  uint64_t v35 = 0;
  std::string v30 = 0;
  std::string v31 = 0;
  uint64_t v32 = 0;
  EspressoConverter::getInputAndOutputNames((uint64_t)a2, (uint64_t *)&v33, (uint64_t *)&v30, *((void *)this + 1));
  v21[0] = 0;
  v21[1] = 0;
  int v22 = 0;
  long long v23 = xmmword_19EC7F16C;
  int v24 = 1;
  int v26 = 1;
  long long v25 = xmmword_19EC7F16C;
  long long v27 = 0u;
  long long v28 = 0u;
  unint64_t v29 = 0xFFFFFFFF00000000;
  if (*((_DWORD *)a2 + 35) == 960)
  {
    uint64_t v7 = a2[16];
  }
  else
  {
    unint64_t inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
    uint64_t v7 = &CoreML::Specification::_ReverseLayerParams_default_instance_;
  }
  int v8 = *((_DWORD *)v7 + 4);
  if (v8 >= 1)
  {
    uint64_t v9 = 0;
    if (v8 >= 5) {
      uint64_t v10 = 5;
    }
    else {
      uint64_t v10 = v8;
    }
    do
    {
      int v11 = (char *)v21 + v9;
      v11[60] = 1;
      v11[65] = 1;
      if (*((_DWORD *)a2 + 35) == 960)
      {
        std::string v12 = a2[16];
      }
      else
      {
        unint64_t inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
        std::string v12 = &CoreML::Specification::_ReverseLayerParams_default_instance_;
      }
      if (*(unsigned char *)(v12[3] + v9 + 8)) {
        int v13 = -1;
      }
      else {
        int v13 = 1;
      }
      *((_DWORD *)&v25 + v9++) = v13;
    }
    while (v10 != v9);
  }
  std::string v14 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "general_slice");
  memset(&v16, 0, sizeof(v16));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v16, v30, v31, 0xAAAAAAAAAAAAAAABLL * (((char *)v31 - (char *)v30) >> 3));
  memset(&v15, 0, sizeof(v15));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v15, v33, v34, 0xAAAAAAAAAAAAAAABLL * (((char *)v34 - (char *)v33) >> 3));
  Espresso::sequential_builder::add<Espresso::general_slice_params_t>(&v19, v14, (uint64_t)__p, (uint64_t)&v36, (uint64_t)v21, (long long *)v16.__r_.__value_.__l.__data_, (long long *)v16.__r_.__value_.__l.__size_, (long long **)&v15);
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  long long v37 = &v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
  long long v37 = &v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
  if (v18 < 0) {
    operator delete(__p[0]);
  }
  LayerTranslator::defaultUnknownNdShape((char *)this, (uint64_t *)&v33);
  v21[0] = (void **)&v30;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v21);
  v21[0] = (void **)&v33;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v21);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }
}

void sub_19EAC7FA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  a23 = v23 - 144;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  a23 = v23 - 120;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  if (*(char *)(v23 - 73) < 0) {
    operator delete(*(void **)(v23 - 96));
  }
  _Unwind_Resume(a1);
}

void CoreML::MIL::Operators::CoreML::Classify::Make()
{
  uint64_t v1 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = 0;
  operator new();
}

void sub_19EAC88A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  uint64_t v39 = *(void *)(v37 - 96);
  *(void *)(v37 - 9CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = 0;
  if (v39) {
    (*(void (**)(uint64_t))(*(void *)v39 + 8))(v39);
  }
  if (a21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a21);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&a28, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a29);
  _Unwind_Resume(a1);
}

void ***std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](void ***result, void **a2)
{
  uint64_t v2 = *result;
  std::string *result = a2;
  if (v2)
  {
    BOOL v3 = v2;
    std::vector<std::shared_ptr<CoreML::MultiArrayBuffer const>>::__destroy_vector::operator()[abi:ne180100](&v3);
    JUMPOUT(0x19F3C1920);
  }
  return result;
}

void *std::__function::__value_func<std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<MIL::ValidationResult ()(MIL::IROperation const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](uint64_t *a1)
{
  uint64_t result = *a1;
  *a1 = 0;
  if (result)
  {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::StorageData const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::StorageData const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::StorageData const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::StorageData const>>>>::~__hash_table(result);
    JUMPOUT(0x19F3C1920);
  }
  return result;
}

void *std::__function::__func<MIL::ValidationResult (*)(MIL::IROperation const&),std::allocator<MIL::ValidationResult (*)(MIL::IROperation const&)>,MIL::ValidationResult ()(MIL::IROperation const&)>::target_type()
{
}

uint64_t std::__function::__func<MIL::ValidationResult (*)(MIL::IROperation const&),std::allocator<MIL::ValidationResult (*)(MIL::IROperation const&)>,MIL::ValidationResult ()(MIL::IROperation const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), 0x800000019EC7F562)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t std::__function::__func<MIL::ValidationResult (*)(MIL::IROperation const&),std::allocator<MIL::ValidationResult (*)(MIL::IROperation const&)>,MIL::ValidationResult ()(MIL::IROperation const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

uint64_t std::__function::__func<MIL::ValidationResult (*)(MIL::IROperation const&),std::allocator<MIL::ValidationResult (*)(MIL::IROperation const&)>,MIL::ValidationResult ()(MIL::IROperation const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF0DD0D0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<MIL::ValidationResult (*)(MIL::IROperation const&),std::allocator<MIL::ValidationResult (*)(MIL::IROperation const&)>,MIL::ValidationResult ()(MIL::IROperation const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF0DD0D0;
  result[1] = v3;
  return result;
}

void std::__function::__func<MIL::ValidationResult (*)(MIL::IROperation const&),std::allocator<MIL::ValidationResult (*)(MIL::IROperation const&)>,MIL::ValidationResult ()(MIL::IROperation const&)>::~__func()
{
}

uint64_t std::__shared_ptr_pointer<std::vector<std::shared_ptr<MIL::IRParameter>> *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), 0x800000019EC7F453)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<std::vector<std::shared_ptr<MIL::IRParameter>> *>::__on_zero_shared(uint64_t result)
{
  if (*(void *)(result + 24))
  {
    uint64_t v1 = *(void ***)(result + 24);
    std::vector<std::shared_ptr<CoreML::MultiArrayBuffer const>>::__destroy_vector::operator()[abi:ne180100](&v1);
    JUMPOUT(0x19F3C1920);
  }
  return result;
}

void std::__shared_ptr_pointer<std::vector<std::shared_ptr<MIL::IRParameter>> *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x19F3C1920);
}

uint64_t std::__shared_ptr_pointer<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>> *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), 0x800000019EC7F301)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>> *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::StorageData const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::StorageData const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::StorageData const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::StorageData const>>>>::~__hash_table(result);
    JUMPOUT(0x19F3C1920);
  }
  return result;
}

void std::__shared_ptr_pointer<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>> *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x19F3C1920);
}

uint64_t std::__shared_ptr_pointer<MIL::IRParameter  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), 0x800000019EC7F1E1)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<MIL::IRParameter  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<MIL::IRParameter  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x19F3C1920);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(uint64_t a1, unsigned __int8 *a2)
{
  long long v4 = a2 + 16;
  unint64_t v5 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a2 + 16));
  *((void *)a2 + 1) = v5;
  unint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    unint64_t v7 = v5;
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v8.i16[0] = vaddlv_u8(v8);
    unint64_t v9 = v8.u32[0];
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v10 = v5;
      if (v6 <= v5) {
        unint64_t v10 = v5 % v6;
      }
    }
    else
    {
      unint64_t v10 = (v6 - 1) & v5;
    }
    int v11 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v10);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v13 = *((void *)i + 1);
        if (v13 == v7)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, v4)) {
            return 0;
          }
        }
        else
        {
          if (v9 > 1)
          {
            if (v13 >= v6) {
              v13 %= v6;
            }
          }
          else
          {
            v13 &= v6 - 1;
          }
          if (v13 != v10) {
            break;
          }
        }
      }
    }
  }
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v6 || (float)(v15 * (float)v6) < v14)
  {
    BOOL v16 = 1;
    if (v6 >= 3) {
      BOOL v16 = (v6 & (v6 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v6);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      int8x8_t prime = (int8x8_t)v18;
    }
    else {
      int8x8_t prime = (int8x8_t)v17;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v6 = *(void *)(a1 + 8);
    }
    if (*(void *)&prime > v6) {
      goto LABEL_84;
    }
    if (*(void *)&prime >= v6) {
      goto LABEL_58;
    }
    unint64_t v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v6 < 3 || (uint8x8_t v27 = (uint8x8_t)vcnt_s8((int8x8_t)v6), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
    {
      unint64_t v26 = std::__next_prime(v26);
    }
    else
    {
      uint64_t v28 = 1 << -(char)__clz(v26 - 1);
      if (v26 >= 2) {
        unint64_t v26 = v28;
      }
    }
    if (*(void *)&prime <= v26) {
      int8x8_t prime = (int8x8_t)v26;
    }
    if (*(void *)&prime >= v6)
    {
      unint64_t v6 = *(void *)(a1 + 8);
      goto LABEL_58;
    }
    if (prime)
    {
LABEL_84:
      if (*(void *)&prime >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      long long v20 = operator new(8 * *(void *)&prime);
      int v21 = *(void **)a1;
      *(void *)a1 = v20;
      if (v21) {
        operator delete(v21);
      }
      uint64_t v22 = 0;
      *(int8x8_t *)(a1 + 8) = prime;
      do
        *(void *)(*(void *)a1 + 8 * v22++) = 0;
      while (*(void *)&prime != v22);
      uint64_t v23 = *(void **)(a1 + 16);
      if (v23)
      {
        unint64_t v24 = v23[1];
        uint8x8_t v25 = (uint8x8_t)vcnt_s8(prime);
        v25.i16[0] = vaddlv_u8(v25);
        if (v25.u32[0] > 1uLL)
        {
          if (v24 >= *(void *)&prime) {
            v24 %= *(void *)&prime;
          }
        }
        else
        {
          v24 &= *(void *)&prime - 1;
        }
        *(void *)(*(void *)a1 + 8 * v24) = a1 + 16;
        unint64_t v29 = (void *)*v23;
        if (*v23)
        {
          do
          {
            unint64_t v30 = v29[1];
            if (v25.u32[0] > 1uLL)
            {
              if (v30 >= *(void *)&prime) {
                v30 %= *(void *)&prime;
              }
            }
            else
            {
              v30 &= *(void *)&prime - 1;
            }
            if (v30 != v24)
            {
              if (!*(void *)(*(void *)a1 + 8 * v30))
              {
                *(void *)(*(void *)a1 + 8 * v30) = v23;
                goto LABEL_54;
              }
              void *v23 = *v29;
              *unint64_t v29 = **(void **)(*(void *)a1 + 8 * v30);
              **(void **)(*(void *)a1 + 8 * v30) = v29;
              unint64_t v29 = v23;
            }
            unint64_t v30 = v24;
LABEL_54:
            uint64_t v23 = v29;
            unint64_t v29 = (void *)*v29;
            unint64_t v24 = v30;
          }
          while (v29);
        }
      }
      unint64_t v6 = (unint64_t)prime;
    }
    else
    {
      std::string v36 = *(void **)a1;
      *(void *)a1 = 0;
      if (v36) {
        operator delete(v36);
      }
      unint64_t v6 = 0;
      *(void *)(a1 + 8) = 0;
    }
  }
LABEL_58:
  unint64_t v31 = *((void *)a2 + 1);
  uint8x8_t v32 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v32.i16[0] = vaddlv_u8(v32);
  if (v32.u32[0] > 1uLL)
  {
    if (v31 >= v6) {
      v31 %= v6;
    }
  }
  else
  {
    v31 &= v6 - 1;
  }
  uint64_t v33 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v31);
  if (v33)
  {
    *(void *)a2 = *v33;
LABEL_70:
    long long *v33 = a2;
    goto LABEL_71;
  }
  *(void *)a2 = *(void *)(a1 + 16);
  *(void *)(a1 + 1CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = a2;
  *(void *)(*(void *)a1 + 8 * v31) = a1 + 16;
  if (*(void *)a2)
  {
    unint64_t v34 = *(void *)(*(void *)a2 + 8);
    if (v32.u32[0] > 1uLL)
    {
      if (v34 >= v6) {
        v34 %= v6;
      }
    }
    else
    {
      v34 &= v6 - 1;
    }
    uint64_t v33 = (unsigned __int8 **)(*(void *)a1 + 8 * v34);
    goto LABEL_70;
  }
LABEL_71:
  ++*(void *)(a1 + 24);
  return 1;
}

void CoreML::MLModelResultException::~MLModelResultException(std::runtime_error *this)
{
  CoreML::MLModelResultException::~MLModelResultException(this);

  JUMPOUT(0x19F3C1920);
}

{
  uint64_t vars8;

  this->__vftable = (std::runtime_error_vtbl *)&unk_1EF0DB040;
  if (SHIBYTE(this[2].__imp_.__imp_) < 0) {
    operator delete((void *)this[1].__imp_.__imp_);
  }

  std::runtime_error::~runtime_error(this);
}

const char *CoreML::MIL::Opsets::CoreML5Opset::GetName(CoreML::MIL::Opsets::CoreML5Opset *this)
{
  return "CoreML5";
}

const char *CoreML::MIL::Opsets::CoreML6Opset::GetName(CoreML::MIL::Opsets::CoreML6Opset *this)
{
  return "CoreML6";
}

const char *CoreML::MIL::Opsets::CoreML6_trainOpset::GetName(CoreML::MIL::Opsets::CoreML6_trainOpset *this)
{
  return "CoreML6_train";
}

const char *CoreML::MIL::Opsets::CoreML7Opset::GetName(CoreML::MIL::Opsets::CoreML7Opset *this)
{
  return "CoreML7";
}

const char *CoreML::MIL::Opsets::CoreML8Opset::GetName(CoreML::MIL::Opsets::CoreML8Opset *this)
{
  return "CoreML8";
}

void *std::__function::__func<CoreML::MIL::Opsets::CoreML8Opset::GetOperatorConstructors(MIL::MILContext &)::$_0,std::allocator<CoreML::MIL::Opsets::CoreML8Opset::GetOperatorConstructors(MIL::MILContext &)::$_0>,std::unique_ptr<MIL::IROperator> ()(void)>::target_type()
{
}

uint64_t std::__function::__func<CoreML::MIL::Opsets::CoreML8Opset::GetOperatorConstructors(MIL::MILContext &)::$_0,std::allocator<CoreML::MIL::Opsets::CoreML8Opset::GetOperatorConstructors(MIL::MILContext &)::$_0>,std::unique_ptr<MIL::IROperator> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN6CoreML3MIL6Opsets12CoreML8Opset23GetOperatorConstructorsERN3MIL10MILContextEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<CoreML::MIL::Opsets::CoreML8Opset::GetOperatorConstructors(MIL::MILContext &)::$_0,std::allocator<CoreML::MIL::Opsets::CoreML8Opset::GetOperatorConstructors(MIL::MILContext &)::$_0>,std::unique_ptr<MIL::IROperator> ()(void)>::operator()()
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "classify");
  CoreML::MIL::Operators::CoreML::Classify::Make();
}

void sub_19EAC95B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__func<CoreML::MIL::Opsets::CoreML8Opset::GetOperatorConstructors(MIL::MILContext &)::$_0,std::allocator<CoreML::MIL::Opsets::CoreML8Opset::GetOperatorConstructors(MIL::MILContext &)::$_0>,std::unique_ptr<MIL::IROperator> ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF0DD498;
  result[1] = v3;
  return result;
}

void std::__function::__func<CoreML::MIL::Opsets::CoreML8Opset::GetOperatorConstructors(MIL::MILContext &)::$_0,std::allocator<CoreML::MIL::Opsets::CoreML8Opset::GetOperatorConstructors(MIL::MILContext &)::$_0>,std::unique_ptr<MIL::IROperator> ()(void)>::~__func()
{
}

void *std::__function::__func<CoreML::MIL::Opsets::CoreML7Opset::GetOperatorConstructors(MIL::MILContext &)::$_0,std::allocator<CoreML::MIL::Opsets::CoreML7Opset::GetOperatorConstructors(MIL::MILContext &)::$_0>,std::unique_ptr<MIL::IROperator> ()(void)>::target_type()
{
}

uint64_t std::__function::__func<CoreML::MIL::Opsets::CoreML7Opset::GetOperatorConstructors(MIL::MILContext &)::$_0,std::allocator<CoreML::MIL::Opsets::CoreML7Opset::GetOperatorConstructors(MIL::MILContext &)::$_0>,std::unique_ptr<MIL::IROperator> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN6CoreML3MIL6Opsets12CoreML7Opset23GetOperatorConstructorsERN3MIL10MILContextEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<CoreML::MIL::Opsets::CoreML7Opset::GetOperatorConstructors(MIL::MILContext &)::$_0,std::allocator<CoreML::MIL::Opsets::CoreML7Opset::GetOperatorConstructors(MIL::MILContext &)::$_0>,std::unique_ptr<MIL::IROperator> ()(void)>::operator()()
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "classify");
  CoreML::MIL::Operators::CoreML::Classify::Make();
}

void sub_19EAC96D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__func<CoreML::MIL::Opsets::CoreML7Opset::GetOperatorConstructors(MIL::MILContext &)::$_0,std::allocator<CoreML::MIL::Opsets::CoreML7Opset::GetOperatorConstructors(MIL::MILContext &)::$_0>,std::unique_ptr<MIL::IROperator> ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF0DD440;
  result[1] = v3;
  return result;
}

void std::__function::__func<CoreML::MIL::Opsets::CoreML7Opset::GetOperatorConstructors(MIL::MILContext &)::$_0,std::allocator<CoreML::MIL::Opsets::CoreML7Opset::GetOperatorConstructors(MIL::MILContext &)::$_0>,std::unique_ptr<MIL::IROperator> ()(void)>::~__func()
{
}

void *std::__function::__func<CoreML::MIL::Opsets::CoreML6_trainOpset::GetOperatorConstructors(MIL::MILContext &)::$_0,std::allocator<CoreML::MIL::Opsets::CoreML6_trainOpset::GetOperatorConstructors(MIL::MILContext &)::$_0>,std::unique_ptr<MIL::IROperator> ()(void)>::target_type()
{
}

uint64_t std::__function::__func<CoreML::MIL::Opsets::CoreML6_trainOpset::GetOperatorConstructors(MIL::MILContext &)::$_0,std::allocator<CoreML::MIL::Opsets::CoreML6_trainOpset::GetOperatorConstructors(MIL::MILContext &)::$_0>,std::unique_ptr<MIL::IROperator> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN6CoreML3MIL6Opsets18CoreML6_trainOpset23GetOperatorConstructorsERN3MIL10MILContextEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<CoreML::MIL::Opsets::CoreML6_trainOpset::GetOperatorConstructors(MIL::MILContext &)::$_0,std::allocator<CoreML::MIL::Opsets::CoreML6_trainOpset::GetOperatorConstructors(MIL::MILContext &)::$_0>,std::unique_ptr<MIL::IROperator> ()(void)>::operator()()
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "classify");
  CoreML::MIL::Operators::CoreML::Classify::Make();
}

void sub_19EAC97FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__func<CoreML::MIL::Opsets::CoreML6_trainOpset::GetOperatorConstructors(MIL::MILContext &)::$_0,std::allocator<CoreML::MIL::Opsets::CoreML6_trainOpset::GetOperatorConstructors(MIL::MILContext &)::$_0>,std::unique_ptr<MIL::IROperator> ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF0DD4F0;
  result[1] = v3;
  return result;
}

void std::__function::__func<CoreML::MIL::Opsets::CoreML6_trainOpset::GetOperatorConstructors(MIL::MILContext &)::$_0,std::allocator<CoreML::MIL::Opsets::CoreML6_trainOpset::GetOperatorConstructors(MIL::MILContext &)::$_0>,std::unique_ptr<MIL::IROperator> ()(void)>::~__func()
{
}

void *std::__function::__func<CoreML::MIL::Opsets::CoreML6Opset::GetOperatorConstructors(MIL::MILContext &)::$_0,std::allocator<CoreML::MIL::Opsets::CoreML6Opset::GetOperatorConstructors(MIL::MILContext &)::$_0>,std::unique_ptr<MIL::IROperator> ()(void)>::target_type()
{
}

uint64_t std::__function::__func<CoreML::MIL::Opsets::CoreML6Opset::GetOperatorConstructors(MIL::MILContext &)::$_0,std::allocator<CoreML::MIL::Opsets::CoreML6Opset::GetOperatorConstructors(MIL::MILContext &)::$_0>,std::unique_ptr<MIL::IROperator> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN6CoreML3MIL6Opsets12CoreML6Opset23GetOperatorConstructorsERN3MIL10MILContextEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<CoreML::MIL::Opsets::CoreML6Opset::GetOperatorConstructors(MIL::MILContext &)::$_0,std::allocator<CoreML::MIL::Opsets::CoreML6Opset::GetOperatorConstructors(MIL::MILContext &)::$_0>,std::unique_ptr<MIL::IROperator> ()(void)>::operator()()
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "classify");
  CoreML::MIL::Operators::CoreML::Classify::Make();
}

void sub_19EAC9920(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__func<CoreML::MIL::Opsets::CoreML6Opset::GetOperatorConstructors(MIL::MILContext &)::$_0,std::allocator<CoreML::MIL::Opsets::CoreML6Opset::GetOperatorConstructors(MIL::MILContext &)::$_0>,std::unique_ptr<MIL::IROperator> ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF0DD3E8;
  result[1] = v3;
  return result;
}

void std::__function::__func<CoreML::MIL::Opsets::CoreML6Opset::GetOperatorConstructors(MIL::MILContext &)::$_0,std::allocator<CoreML::MIL::Opsets::CoreML6Opset::GetOperatorConstructors(MIL::MILContext &)::$_0>,std::unique_ptr<MIL::IROperator> ()(void)>::~__func()
{
}

void *std::__function::__func<CoreML::MIL::Opsets::CoreML5Opset::GetOperatorConstructors(MIL::MILContext &)::$_0,std::allocator<CoreML::MIL::Opsets::CoreML5Opset::GetOperatorConstructors(MIL::MILContext &)::$_0>,std::unique_ptr<MIL::IROperator> ()(void)>::target_type()
{
}

uint64_t std::__function::__func<CoreML::MIL::Opsets::CoreML5Opset::GetOperatorConstructors(MIL::MILContext &)::$_0,std::allocator<CoreML::MIL::Opsets::CoreML5Opset::GetOperatorConstructors(MIL::MILContext &)::$_0>,std::unique_ptr<MIL::IROperator> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN6CoreML3MIL6Opsets12CoreML5Opset23GetOperatorConstructorsERN3MIL10MILContextEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<CoreML::MIL::Opsets::CoreML5Opset::GetOperatorConstructors(MIL::MILContext &)::$_0,std::allocator<CoreML::MIL::Opsets::CoreML5Opset::GetOperatorConstructors(MIL::MILContext &)::$_0>,std::unique_ptr<MIL::IROperator> ()(void)>::operator()()
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "classify");
  CoreML::MIL::Operators::CoreML::Classify::Make();
}

void sub_19EAC9A44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__func<CoreML::MIL::Opsets::CoreML5Opset::GetOperatorConstructors(MIL::MILContext &)::$_0,std::allocator<CoreML::MIL::Opsets::CoreML5Opset::GetOperatorConstructors(MIL::MILContext &)::$_0>,std::unique_ptr<MIL::IROperator> ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF0DD390;
  result[1] = v3;
  return result;
}

void std::__function::__func<CoreML::MIL::Opsets::CoreML5Opset::GetOperatorConstructors(MIL::MILContext &)::$_0,std::allocator<CoreML::MIL::Opsets::CoreML5Opset::GetOperatorConstructors(MIL::MILContext &)::$_0>,std::unique_ptr<MIL::IROperator> ()(void)>::~__func()
{
}

void CoreML::MIL::Operators::CoreML::CustomValidators::ValidateClassify(CoreML::MIL::Operators::CoreML::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(v60, "probabilities");
  Parameteruint64_t Type = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
  uint64_t v6 = MIL::IRValueType::AsTensorType(ParameterType);
  if (v61 < 0) {
    operator delete(v60[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v60, "classes");
  uint64_t ParameterValue = MIL::IROperation::GetParameterValue();
  if (v61 < 0) {
    operator delete(v60[0]);
  }
  uint8x8_t v8 = (MIL::IRValueType *)(*(uint64_t (**)(uint64_t))(*(void *)ParameterValue + 32))(ParameterValue);
  uint64_t v9 = MIL::IRValueType::AsListType(v8);
  unint64_t v10 = (MIL::IRValueType *)(*(uint64_t (**)(uint64_t))(*(void *)v9 + 64))(v9);
  int v11 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 96))(v6);
  uint64_t v12 = *v11;
  uint64_t v13 = v11[1];
  if (*v11 != v13)
  {
    unsigned __int8 v14 = 0;
    while (1)
    {
      uint64_t v15 = (*(uint64_t (**)(void))(**(void **)v12 + 16))();
      if (!v15) {
        break;
      }
      uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 48))(v15);
      if (((v16 != 1) & v14) == 1)
      {
        LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
        int v43 = (std::__shared_weak_count *)LocationPtr[1];
        uint64_t v58 = *LocationPtr;
        uint64_t v59 = v43;
        if (v43) {
          atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::string::basic_string[abi:ne180100]<0>(v56, "Classifier probabilities can have a maximum of one dimension that is not rank 1.");
        MEMORY[0x19F3C05E0](a2, &v58, 304, v56);
        if (v57 < 0) {
          operator delete(v56[0]);
        }
        uint64_t v35 = v59;
        if (!v59) {
          return;
        }
        goto LABEL_54;
      }
      v14 |= v16 != 1;
      v12 += 8;
      if (v12 == v13) {
        goto LABEL_10;
      }
    }
    std::string v40 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    std::string v41 = (std::__shared_weak_count *)v40[1];
    uint64_t v54 = *v40;
    uint64_t v55 = v41;
    if (v41) {
      atomic_fetch_add_explicit(&v41->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v52, "Classifier probabilities must have a fully known shape.");
    MEMORY[0x19F3C05E0](a2, &v54, 304, v52);
    if (v53 < 0) {
      operator delete(v52[0]);
    }
    uint64_t v35 = v55;
    if (v55) {
      goto LABEL_54;
    }
    return;
  }
LABEL_10:
  uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
  if ((*(uint64_t (**)(uint64_t))(*(void *)v6 + 16))(v6) != v17)
  {
    std::string v36 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    uint64_t v37 = (std::__shared_weak_count *)v36[1];
    uint64_t v50 = *v36;
    long long v51 = v37;
    if (v37) {
      atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "Arguments not of the same length in classify operation");
    MEMORY[0x19F3C05E0](a2, &v50, 304, __p);
    if (v49 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v35 = v51;
    if (!v51) {
      return;
    }
LABEL_54:
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
    return;
  }
  Outputuint64_t Type = (MIL::IRValueType *)MIL::IROperation::GetOutputType(this);
  uint64_t v19 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(OutputType);
  if (!MIL::IRTensorValueType::IsScalar(v19)
    || (int v20 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(void *)v19 + 88))(v19),
        uint64_t v21 = MIL::IRValueType::AsTensorType(v10),
        v20 != (*(unsigned int (**)(uint64_t))(*(void *)v21 + 88))(v21)))
  {
    uint64_t v38 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    uint64_t v39 = (std::__shared_weak_count *)v38[1];
    uint64_t v46 = *v38;
    std::string v47 = v39;
    if (v39) {
      atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v44, "Incorrect type for class prediction output of classify operation");
    MEMORY[0x19F3C05E0](a2, &v46, 313, v44);
    if (v45 < 0) {
      operator delete(v44[0]);
    }
    uint64_t v35 = v47;
    if (!v47) {
      return;
    }
    goto LABEL_54;
  }
  if ((unint64_t)(*(uint64_t (**)(CoreML::MIL::Operators::CoreML::CustomValidators *))(*(void *)this + 192))(this) < 2) {
    goto LABEL_58;
  }
  uint64_t v22 = (void *)(*(uint64_t (**)(CoreML::MIL::Operators::CoreML::CustomValidators *))(*(void *)this + 176))(this);
  if (v22[1] - *v22 <= 0x10uLL) {
    std::vector<std::shared_ptr<MIL::IRNamedValueType>>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t Type = MIL::IRNamedValueType::GetType(*(MIL::IRNamedValueType **)(*v22 + 16));
  uint64_t v24 = (*(uint64_t (**)(uint64_t))(*(void *)Type + 48))(Type);
  if (v24)
  {
    uint64_t v25 = v24;
    uint64_t v26 = (*(uint64_t (**)(uint64_t))(*(void *)v24 + 64))(v24);
    uint8x8_t v27 = (MIL::IRTensorValueType *)(*(uint64_t (**)(uint64_t))(*(void *)v26 + 24))(v26);
    uint64_t v28 = (*(uint64_t (**)(uint64_t))(*(void *)v25 + 72))(v25);
    uint64_t v29 = (*(uint64_t (**)(uint64_t))(*(void *)v28 + 24))(v28);
    if (v27)
    {
      unint64_t v30 = (MIL::IRTensorValueType *)v29;
      if (MIL::IRTensorValueType::IsScalar(v27) && v30 != 0)
      {
        BOOL v32 = MIL::IRTensorValueType::IsScalar(v30) && v27 == v10;
        if (v32
          && ((*(unsigned int (**)(MIL::IRTensorValueType *))(*(void *)v30 + 88))(v30) == 6
           || (*(unsigned int (**)(MIL::IRTensorValueType *))(*(void *)v30 + 88))(v30) == 5))
        {
LABEL_58:
          MIL::ValidationResult::ValidationResult(a2);
          return;
        }
      }
    }
  }
  uint64_t v33 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  unint64_t v34 = (std::__shared_weak_count *)v33[1];
  uint64_t v62 = *v33;
  std::string v63 = v34;
  if (v34) {
    atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(v60, "Incorrect type for probabilities output of classify operation");
  MEMORY[0x19F3C05E0](a2, &v62, 313, v60);
  if (v61 < 0) {
    operator delete(v60[0]);
  }
  uint64_t v35 = v63;
  if (v63) {
    goto LABEL_54;
  }
}

void sub_19EACA114(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (*(char *)(v39 - 97) < 0) {
    operator delete(*(void **)(v39 - 120));
  }
  std::string v41 = *(std::__shared_weak_count **)(v39 - 88);
  if (v41) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v41);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::unique_ptr<MIL::Passes::FlattenBlockNamespace>::reset[abi:ne180100](uint64_t *a1)
{
  uint64_t result = *a1;
  *a1 = 0;
  if (result)
  {
    MEMORY[0x19F3C08A0]();
    JUMPOUT(0x19F3C1920);
  }
  return result;
}

void CoreML::MIL::CoreMLUtil::MakeProtoParserOptions(uint64_t *a1, uint64_t a2)
{
  MIL::ParserOptions::Make(a1, (MIL::ParserOptions *)a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)*a1 + 64))(*a1, 1);
  uint64_t v4 = *a1;
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 1CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = 0;
  *(void *)a2 = 0;
  (*(void (**)(uint64_t, void **))(*(void *)v4 + 48))(v4, __p);
  if (SHIBYTE(v6) < 0) {
    operator delete(__p[0]);
  }
}

void sub_19EACA304(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  uint64_t v16 = *v14;
  *unsigned __int8 v14 = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound::GetCachedSize(CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound *this)
{
  return *((unsigned int *)this + 5);
}

uint64_t CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  signed int v5 = *(_DWORD *)(this + 16);
  if (v5) {
    return google::protobuf::internal::WireFormatLite::WriteEnum(1, v5, a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound::ByteSizeLong(CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound *this)
{
  int v1 = *((_DWORD *)this + 4);
  if (v1)
  {
    if (v1 < 0) {
      uint64_t v2 = 11;
    }
    else {
      uint64_t v2 = ((9 * (__clz(v1 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
  }
  else
  {
    uint64_t v2 = 0;
  }
  *((_DWORD *)this + 5) = v2;
  return v2;
}

uint64_t CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound::MergePartialFromCodedStream(CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound *this, char **a2, unsigned int a3)
{
  do
  {
    while (1)
    {
      signed int v5 = *a2;
      if (*a2 >= a2[1])
      {
        LODWORD(vCoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = 0;
LABEL_6:
        TagFallbacuint64_t k = google::protobuf::io::CodedInputStream::ReadTagFallback((google::protobuf::io::CodedInputStream *)a2, v6);
        unint64_t v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0) {
          break;
        }
        goto LABEL_7;
      }
      uint64_t v6 = *v5;
      if (*v5 < 1) {
        goto LABEL_6;
      }
      *a2 = v5 + 1;
      unint64_t v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0) {
        break;
      }
LABEL_7:
      if (v7 != 8 || (v7 & 0xFFFFFFF8) != 8) {
        break;
      }
      int v11 = *a2;
      if (*a2 >= a2[1])
      {
        int v12 = 0;
      }
      else
      {
        int v12 = *v11;
        if ((*v11 & 0x80000000) == 0)
        {
          *a2 = v11 + 1;
          goto LABEL_22;
        }
      }
      Varint32Fallbacuint64_t k = google::protobuf::io::CodedInputStream::ReadVarint32Fallback((google::protobuf::io::CodedInputStream *)a2, v12);
      int v12 = Varint32Fallback;
      if (Varint32Fallback < 0) {
        return 0;
      }
LABEL_22:
      *((_DWORD *)this + 4) = v12;
    }
    if (v7) {
      BOOL v10 = (v7 & 7) == 4;
    }
    else {
      BOOL v10 = 1;
    }
    if (v10) {
      return 1;
    }
  }
  while ((google::protobuf::internal::WireFormatLite::SkipField((google::protobuf::internal::WireFormatLite *)a2, (google::protobuf::io::CodedInputStream *)v7, a3) & 1) != 0);
  return 0;
}

std::string *CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound::CheckTypeAndMergeFrom(std::string *this, const google::protobuf::MessageLite *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    this = google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  int v5 = *((_DWORD *)a2 + 4);
  if (v5) {
    LODWORD(v3->__r_.__value_.__r.__words[2]) = v5;
  }
  return this;
}

std::string *google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(unint64_t *a1, uint64_t a2)
{
  if (*a1) {
    uint64_t v3 = (std::string *)(*a1 & 0xFFFFFFFFFFFFFFFELL);
  }
  else {
    uint64_t v3 = (std::string *)google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(a1);
  }
  int v4 = *(char *)(a2 + 23);
  if (v4 >= 0) {
    int v5 = (const std::string::value_type *)a2;
  }
  else {
    int v5 = *(const std::string::value_type **)a2;
  }
  if (v4 >= 0) {
    std::string::size_type v6 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v6 = *(void *)(a2 + 8);
  }

  return std::string::append(v3, v5, v6);
}

google::protobuf::Arena **google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(unint64_t *a1)
{
  uint64_t v2 = (unint64_t *)(*a1 & 0xFFFFFFFFFFFFFFFELL);
  if (*a1)
  {
    uint64_t v2 = (unint64_t *)v2[3];
    if (v2) {
      goto LABEL_3;
    }
LABEL_7:
    operator new();
  }
  if (!v2) {
    goto LABEL_7;
  }
LABEL_3:
  *(_OWORD *)Aligned = 0u;
  *((_OWORD *)Aligned + 1) = 0u;
  int v4 = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)v2, 0, 24);
  unsigned __int8 *v4 = (google::protobuf::Arena *)Aligned;
  v4[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::Container>;
  int v5 = v2 + 4;
  do
    unint64_t v6 = __ldxr(v5);
  while (__stxr((unint64_t)v4, v5));
  v4[2] = (google::protobuf::Arena *)v6;
  *a1 = (unint64_t)Aligned | 1;
  Aligned[3] = (google::protobuf::Arena *)v2;
  return Aligned;
}

void google::protobuf::internal::arena_destruct_object<google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::Container>(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

uint64_t CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound::IsInitialized(CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound *this)
{
  return 1;
}

uint64_t CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound::Clear(uint64_t this)
{
  *(_DWORD *)(this + 1CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = 0;
  return this;
}

uint64_t google::protobuf::MessageLite::GetMaybeArenaPointer(google::protobuf::MessageLite *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 40))();
}

uint64_t google::protobuf::MessageLite::GetArena(google::protobuf::MessageLite *this)
{
  return 0;
}

void CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound::New(CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound *this, google::protobuf::Arena *a2)
{
}

void sub_19EACA6C4(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x1081C40CC6EE3FDLL);
  _Unwind_Resume(a1);
}

CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound *CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound::AudioFeaturePrint_Sound(CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound *this)
{
  *(void *)this = &unk_1EF0CF1E0;
  *((void *)this + 1) = 0;
  if (this != (CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound *)&CoreML::Specification::CoreMLModels::_AudioFeaturePrint_Sound_default_instance_) {
    CoreML::Specification::CoreMLModels::protobuf_AudioFeaturePrint_2eproto::InitDefaults(this);
  }
  *((void *)this + 2) = 0;
  return this;
}

void sub_19EACA748(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    uint64_t result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    void *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound>;
    int v4 = (unint64_t *)(v3 + 4);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t CoreML::Specification::CoreMLModels::AudioFeaturePrint::GetCachedSize(CoreML::Specification::CoreMLModels::AudioFeaturePrint *this)
{
  return *((unsigned int *)this + 6);
}

uint64_t CoreML::Specification::CoreMLModels::AudioFeaturePrint::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  if (*(_DWORD *)(this + 28) == 20) {
    return google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x14, *(void *)(this + 16), a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::CoreMLModels::AudioFeaturePrint::ByteSizeLong(CoreML::Specification::CoreMLModels::AudioFeaturePrint *this)
{
  if (*((_DWORD *)this + 7) == 20)
  {
    uint64_t v1 = *((void *)this + 2);
    int v2 = *(_DWORD *)(v1 + 16);
    if (v2)
    {
      if (v2 < 0) {
        uint64_t v3 = 11;
      }
      else {
        uint64_t v3 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
      }
    }
    else
    {
      uint64_t v3 = 0;
    }
    *(_DWORD *)(v1 + CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 20) = v3;
    uint64_t v4 = v3 + 3;
  }
  else
  {
    uint64_t v4 = 0;
  }
  *((_DWORD *)this + CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = v4;
  return v4;
}

uint64_t CoreML::Specification::CoreMLModels::AudioFeaturePrint::MergePartialFromCodedStream(CoreML::Specification::CoreMLModels::AudioFeaturePrint *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      unint64_t v5 = *(unsigned __int8 **)a2;
      unint64_t v6 = *((void *)a2 + 1);
      if (*(void *)a2 < v6) {
        break;
      }
      LODWORD(v8) = 0;
LABEL_22:
      TagFallbacuint64_t k = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v8);
      unint64_t v9 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x3FFF) << 32);
      if ((v9 & 0x100000000) == 0) {
        goto LABEL_23;
      }
LABEL_8:
      if (v9 != 162 || (v9 & 0xFFFFFFF8) != 0xA0) {
        goto LABEL_23;
      }
      if (*((_DWORD *)this + 7) != 20)
      {
        *((_DWORD *)this + 7) = 20;
        operator new();
      }
      int v11 = (CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound *)*((void *)this + 2);
      int v12 = *(char **)a2;
      if (*(void *)a2 >= *((void *)a2 + 1) || *v12 < 0)
      {
        VarintSizeAsIntFallbacuint64_t k = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (VarintSizeAsIntFallback < 0) {
          return 0;
        }
      }
      else
      {
        VarintSizeAsIntFallbacuint64_t k = *v12;
        *(void *)a2 = v12 + 1;
      }
      int v14 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
      int v16 = *((_DWORD *)a2 + 13);
      BOOL v17 = __OFSUB__(v16--, 1);
      *((_DWORD *)a2 + CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 13) = v16;
      if (v16 < 0 == v17)
      {
        int v18 = v14;
        uint64_t result = CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound::MergePartialFromCodedStream(v11, (char **)a2, v15);
        if (!result) {
          return result;
        }
        if (google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v18)) {
          continue;
        }
      }
      return 0;
    }
    unint64_t v7 = v5 + 1;
    uint64_t v8 = *v5;
    if ((char)*v5 < 1)
    {
      if ((unint64_t)v7 < v6)
      {
        int v10 = *v7;
        if ((v8 & ~v10) >= 0x80)
        {
          *(void *)a2 = v5 + 2;
          unint64_t v9 = (v8 + (v10 << 7) - 128) | 0x100000000;
          goto LABEL_8;
        }
      }
      goto LABEL_22;
    }
    *(void *)a2 = v7;
    unint64_t v9 = v8 | 0x100000000;
    if ((v9 & 0x100000000) != 0) {
      goto LABEL_8;
    }
LABEL_23:
    if (!v9 || (v9 & 7) == 4) {
      return 1;
    }
    if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v9, a3) & 1) == 0) {
      return 0;
    }
  }
}

void sub_19EACAA20(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x1081C40CC6EE3FDLL);
  _Unwind_Resume(a1);
}

std::string *CoreML::Specification::CoreMLModels::AudioFeaturePrint::MergeFrom(std::string *this, const CoreML::Specification::CoreMLModels::AudioFeaturePrint *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    this = google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  if (*((_DWORD *)a2 + 7) == 20)
  {
    if (HIDWORD(v3[1].__r_.__value_.__r.__words[0]) != 20)
    {
      HIDWORD(v3[1].__r_.__value_.__r.__words[0]) = 20;
      operator new();
    }
    std::string::size_type v5 = v3->__r_.__value_.__r.__words[2];
    uint64_t v6 = *((void *)a2 + 2);
    uint64_t v7 = *(void *)(v6 + 8);
    if (v7) {
      this = google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((unint64_t *)(v5 + 8), v7 & 0xFFFFFFFFFFFFFFFELL);
    }
    int v8 = *(_DWORD *)(v6 + 16);
    if (v8) {
      *(_DWORD *)(v5 + 1CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = v8;
    }
  }
  return this;
}

void sub_19EACAB14(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x1081C40CC6EE3FDLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::CoreMLModels::AudioFeaturePrint::IsInitialized(CoreML::Specification::CoreMLModels::AudioFeaturePrint *this)
{
  return 1;
}

uint64_t CoreML::Specification::CoreMLModels::AudioFeaturePrint::Clear(uint64_t this)
{
  uint64_t v1 = this;
  if (*(_DWORD *)(this + 28) == 20)
  {
    this = *(void *)(this + 16);
    if (this) {
      this = (*(uint64_t (**)(uint64_t))(*(void *)this + 8))(this);
    }
  }
  *(_DWORD *)(v1 + 28) = 0;
  return this;
}

void CoreML::Specification::CoreMLModels::AudioFeaturePrint::New(CoreML::Specification::CoreMLModels::AudioFeaturePrint *this, google::protobuf::Arena *a2)
{
}

void sub_19EACABF0(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

CoreML::Specification::CoreMLModels::AudioFeaturePrint *CoreML::Specification::CoreMLModels::AudioFeaturePrint::AudioFeaturePrint(CoreML::Specification::CoreMLModels::AudioFeaturePrint *this)
{
  *(void *)this = &unk_1EF0CF0B0;
  *((void *)this + 1) = 0;
  if (this != (CoreML::Specification::CoreMLModels::AudioFeaturePrint *)&CoreML::Specification::CoreMLModels::_AudioFeaturePrint_default_instance_) {
    CoreML::Specification::CoreMLModels::protobuf_AudioFeaturePrint_2eproto::InitDefaults(this);
  }
  *((void *)this + 3) = 0;
  return this;
}

void sub_19EACAC74(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::CoreMLModels::AudioFeaturePrint>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    uint64_t result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    void *result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::CoreMLModels::AudioFeaturePrint>;
    uint64_t v4 = (unint64_t *)(v3 + 4);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::CoreMLModels::AudioFeaturePrint>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void CoreML::Specification::CoreMLModels::AudioFeaturePrint::New(CoreML::Specification::CoreMLModels::AudioFeaturePrint *this)
{
}

void *CoreML::Specification::CoreMLModels::AudioFeaturePrint::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.CoreMLModels.AudioFeaturePrint");
}

void CoreML::Specification::CoreMLModels::AudioFeaturePrint::~AudioFeaturePrint(CoreML::Specification::CoreMLModels::AudioFeaturePrint *this)
{
  CoreML::Specification::CoreMLModels::AudioFeaturePrint::~AudioFeaturePrint(this);

  JUMPOUT(0x19F3C1920);
}

{
  int v2;
  uint64_t v3;

  *(void *)this = &unk_1EF0CF0B0;
  int v2 = *((_DWORD *)this + 7);
  if (v2)
  {
    if (v2 == 20)
    {
      uint64_t v3 = *((void *)this + 2);
      if (v3) {
        (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
      }
    }
    *((_DWORD *)this + 7) = 0;
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

void CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound::New(CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound *this)
{
}

void *CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.CoreMLModels.AudioFeaturePrint.Sound");
}

void CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound::~AudioFeaturePrint_Sound(CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound *this)
{
  *(void *)this = &unk_1EF0CF1E0;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);

  JUMPOUT(0x19F3C1920);
}

{
  *(void *)this = &unk_1EF0CF1E0;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

void validateTrainingInputs<CoreML::Specification::NeuralNetwork>(CoreML::Result *a1, uint64_t a2, void *a3)
{
  v110[2] = *MEMORY[0x1E4F143B8];
  CoreML::Result::Result((CoreML::Result *)v107);
  memset(&v106, 0, sizeof(v106));
  if (*(int *)(a2 + 120) <= 1)
  {
    MEMORY[0x19F3C1430](&v106, "Must provide training inputs for updatable neural network (expecting both input and target for loss function).");
    *(void *)a1 = 15;
    std::operator+<char>();
    goto LABEL_162;
  }
  uint64_t v93 = a1;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  unint64_t v8 = 0;
  uint64_t v9 = 0;
  do
  {
    if (*(int *)(a2 + 24) < 1)
    {
LABEL_8:
      if ((unint64_t)v7 >= v8)
      {
        uint64_t v13 = (v7 - v6) >> 2;
        unint64_t v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 62) {
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
        }
        if ((uint64_t)(v8 - (void)v6) >> 1 > v14) {
          unint64_t v14 = (uint64_t)(v8 - (void)v6) >> 1;
        }
        if (v8 - (unint64_t)v6 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v14;
        }
        if (v15) {
          unint64_t v15 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v15);
        }
        else {
          uint64_t v16 = 0;
        }
        BOOL v17 = (char *)(v15 + 4 * v13);
        *(_DWORD *)BOOL v17 = v9;
        int v18 = v17 + 4;
        while (v7 != v6)
        {
          int v19 = *((_DWORD *)v7 - 1);
          v7 -= 4;
          *((_DWORD *)v17 - 1) = v19;
          v17 -= 4;
        }
        unint64_t v8 = v15 + 4 * v16;
        if (v6) {
          operator delete(v6);
        }
        uint64_t v6 = v17;
        uint64_t v7 = v18;
      }
      else
      {
        *(_DWORD *)uint64_t v7 = v9;
        v7 += 4;
      }
    }
    else
    {
      uint64_t v10 = 0;
      uint64_t v11 = *(void *)(*(void *)(a2 + 128) + 8 * v9 + 8);
      while (1)
      {
        uint64_t v12 = *(void *)(*(void *)(a2 + 32) + 8 * v10 + 8);
        if (CoreML::Specification::isEquivalent(*(CoreML::Specification **)(v11 + 16), *(const CoreML::Specification::FeatureDescription **)(v11 + 32), *(const CoreML::Specification::FeatureDescription **)(v12 + 16), *(uint64_t **)(v12 + 32)))
        {
          break;
        }
        if (++v10 >= *(int *)(a2 + 24)) {
          goto LABEL_8;
        }
      }
    }
    ++v9;
    uint64_t v20 = *(int *)(a2 + 120);
  }
  while (v9 < v20);
  uint64_t v21 = v7 - v6;
  if (v7 == v6)
  {
    MEMORY[0x19F3C1430](&v106, "Training inputs don't describe required inputs for the loss (needs both the input and the target).");
    *(void *)uint64_t v93 = 15;
    std::operator+<char>();
    goto LABEL_160;
  }
  unint64_t v22 = v21 >> 2;
  if (v21 >> 2 == v20)
  {
    MEMORY[0x19F3C1430](&v106, "The training inputs must include at least one input from the model itself as required for training (should have at least one input in common with those used for prediction).");
    *(void *)uint64_t v93 = 15;
    std::operator+<char>();
    goto LABEL_160;
  }
  memset(&v105, 0, sizeof(v105));
  uint64_t v23 = (uint64_t *)a3[8];
  if (!v23) {
    uint64_t v23 = &CoreML::Specification::_NetworkUpdateParameters_default_instance_;
  }
  uint64_t v24 = *(void *)(v23[4] + 8);
  if ((*(_DWORD *)(v24 + 36) & 0xFFFFFFFE) == 0xA) {
    std::string::operator=(&v105, *(const std::string **)(*(void *)(v24 + 24) + 24));
  }
  uint64_t v26 = v25;
  uint64_t v27 = 0;
  int v28 = 0;
  if (v22 <= 1) {
    uint64_t v29 = 1;
  }
  else {
    uint64_t v29 = v22;
  }
  uint64_t v94 = v29;
  unint64_t v90 = v25;
  while (2)
  {
    uint64_t v30 = *(void *)(*(void *)(a2 + 128) + 8 * *(int *)&v6[4 * v27] + 8);
    unint64_t v31 = *(long long **)(v30 + 16);
    if (*((char *)v31 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v104, *(const std::string::value_type **)v31, *((void *)v31 + 1));
    }
    else
    {
      long long v32 = *v31;
      v104.__r_.__value_.__r.__words[2] = *((void *)v31 + 2);
      *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v32;
    }
    uint64_t v33 = HIBYTE(v104.__r_.__value_.__r.__words[2]);
    std::string::size_type size = v104.__r_.__value_.__l.__size_;
    if (!v26) {
      goto LABEL_86;
    }
    uint64_t v35 = *(unsigned __int8 ***)(a2 + 136);
    if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v36 = HIBYTE(v104.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v36 = v104.__r_.__value_.__l.__size_;
    }
    uint64_t v37 = (unsigned __int8 *)*((unsigned __int8 *)v35 + 23);
    int v38 = (char)v37;
    if ((char)v37 < 0) {
      uint64_t v37 = v35[1];
    }
    if ((unsigned __int8 *)v36 != v37)
    {
LABEL_86:
      if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v57 = HIBYTE(v105.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v57 = v105.__r_.__value_.__l.__size_;
      }
      std::string::size_type v58 = v33;
      if ((v33 & 0x80u) != 0) {
        std::string::size_type v58 = size;
      }
      if (v57 == v58)
      {
        if ((v33 & 0x80u) == 0) {
          uint64_t v59 = &v104;
        }
        else {
          uint64_t v59 = (std::string *)v104.__r_.__value_.__r.__words[0];
        }
        if ((*((unsigned char *)&v105.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          BOOL v69 = memcmp(v105.__r_.__value_.__l.__data_, v59, v105.__r_.__value_.__l.__size_) == 0;
        }
        else if (*((unsigned char *)&v105.__r_.__value_.__s + 23))
        {
          uint64_t v60 = HIBYTE(v105.__r_.__value_.__r.__words[2]) - 1;
          char v61 = &v105;
          do
          {
            int v63 = v61->__r_.__value_.__s.__data_[0];
            char v61 = (std::string *)((char *)v61 + 1);
            int v62 = v63;
            int v65 = v59->__r_.__value_.__s.__data_[0];
            uint64_t v59 = (std::string *)((char *)v59 + 1);
            int v64 = v65;
            BOOL v67 = v60-- != 0;
            BOOL v68 = v62 == v64;
            BOOL v69 = v62 == v64;
          }
          while (v68 && v67);
        }
        else
        {
          BOOL v69 = 1;
        }
      }
      else
      {
        BOOL v69 = 0;
      }
      v28 |= v69;
      char v70 = 1;
      if ((v33 & 0x80) != 0) {
        goto LABEL_109;
      }
      goto LABEL_110;
    }
    if (v38 >= 0) {
      uint64_t v39 = *(unsigned __int8 **)(a2 + 136);
    }
    else {
      uint64_t v39 = *v35;
    }
    if ((*((unsigned char *)&v104.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      if (memcmp(v104.__r_.__value_.__l.__data_, v39, v104.__r_.__value_.__l.__size_)) {
        goto LABEL_86;
      }
    }
    else if (*((unsigned char *)&v104.__r_.__value_.__s + 23))
    {
      std::string v40 = &v104;
      uint64_t v41 = HIBYTE(v104.__r_.__value_.__r.__words[2]);
      do
      {
        if (v40->__r_.__value_.__s.__data_[0] != *v39) {
          goto LABEL_86;
        }
        std::string v40 = (std::string *)((char *)v40 + 1);
        ++v39;
        --v41;
      }
      while (v41);
    }
    int v92 = v28;
    uint64_t v42 = *(void *)(a2 + 56);
    if (v42) {
      int v43 = (uint64_t *)(v42 + 8);
    }
    else {
      int v43 = 0;
    }
    uint64_t v44 = *(int *)(a2 + 48);
    if (!v44)
    {
LABEL_78:
      int v28 = v92;
      goto LABEL_86;
    }
    char v45 = &v43[v44];
    uint64_t v46 = (const void *)v104.__r_.__value_.__r.__words[0];
    while (1)
    {
      uint64_t v47 = *v43;
      uint64_t v48 = *(void *)(*v43 + 16);
      uint64_t v49 = *(unsigned __int8 *)(v48 + 23);
      int v50 = (char)v49;
      if ((v49 & 0x80u) != 0) {
        uint64_t v49 = *(void *)(v48 + 8);
      }
      if (v36 != v49) {
        goto LABEL_76;
      }
      long long v51 = v50 >= 0 ? *(unsigned __int8 **)(*v43 + 16) : *(unsigned __int8 **)v48;
      if ((v33 & 0x80) != 0) {
        break;
      }
      if (!v33) {
        goto LABEL_79;
      }
      uint64_t v52 = &v104;
      uint64_t v53 = v33;
      while (v52->__r_.__value_.__s.__data_[0] == *v51)
      {
        uint64_t v52 = (std::string *)((char *)v52 + 1);
        ++v51;
        if (!--v53) {
          goto LABEL_79;
        }
      }
LABEL_76:
      if (++v43 == v45)
      {
        uint64_t v26 = v90;
        goto LABEL_78;
      }
    }
    int v91 = v46;
    int v54 = memcmp(v46, v51, size);
    uint64_t v46 = v91;
    if (v54) {
      goto LABEL_76;
    }
LABEL_79:
    uint64_t v55 = *(uint64_t **)(v30 + 32);
    if (!v55) {
      uint64_t v55 = &CoreML::Specification::_FeatureType_default_instance_;
    }
    if (*(void *)(v47 + 32)) {
      uint64_t v56 = *(uint64_t **)(v47 + 32);
    }
    else {
      uint64_t v56 = &CoreML::Specification::_FeatureType_default_instance_;
    }
    uint64_t v26 = v90;
    int v28 = v92;
    if (CoreML::Specification::operator==((unint64_t *)v55[3], *((_DWORD *)v55 + 9), (uint64_t)v56))
    {
      LODWORD(v33) = HIBYTE(v104.__r_.__value_.__r.__words[2]);
      int v28 = 1;
      std::string::size_type size = v104.__r_.__value_.__l.__size_;
      goto LABEL_86;
    }
    uint64_t v71 = *(uint64_t **)(v47 + 32);
    if (!v71) {
      uint64_t v71 = &CoreML::Specification::_FeatureType_default_instance_;
    }
    if (*((_DWORD *)v71 + 9) == 1) {
      long long v72 = "Int64";
    }
    else {
      long long v72 = "String";
    }
    std::string::basic_string[abi:ne180100]<0>(v102, v72);
    long long v73 = *(uint64_t **)(v30 + 32);
    if (!v73) {
      long long v73 = &CoreML::Specification::_FeatureType_default_instance_;
    }
    if (*((_DWORD *)v73 + 9) == 1) {
      long long v74 = "Int64";
    }
    else {
      long long v74 = "String";
    }
    std::string::basic_string[abi:ne180100]<0>(__p, v74);
    std::operator+<char>();
    unint64_t v75 = std::string::append(&v95, " doesn't match the expected type of the classifier. Found: ");
    long long v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
    v96.__r_.__value_.__r.__words[2] = v75->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v96.__r_.__value_.__l.__data_ = v76;
    v75->__r_.__value_.__l.__size_ = 0;
    v75->__r_.__value_.__r.__words[2] = 0;
    v75->__r_.__value_.__r.__words[0] = 0;
    if ((v101 & 0x80u) == 0) {
      uint64_t v77 = __p;
    }
    else {
      uint64_t v77 = (void **)__p[0];
    }
    if ((v101 & 0x80u) == 0) {
      std::string::size_type v78 = v101;
    }
    else {
      std::string::size_type v78 = (std::string::size_type)__p[1];
    }
    int v79 = std::string::append(&v96, (const std::string::value_type *)v77, v78);
    long long v80 = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
    v97.__r_.__value_.__r.__words[2] = v79->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v97.__r_.__value_.__l.__data_ = v80;
    v79->__r_.__value_.__l.__size_ = 0;
    v79->__r_.__value_.__r.__words[2] = 0;
    v79->__r_.__value_.__r.__words[0] = 0;
    long long v81 = std::string::append(&v97, ", expected: ");
    long long v82 = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
    v98.__r_.__value_.__r.__words[2] = v81->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v98.__r_.__value_.__l.__data_ = v82;
    v81->__r_.__value_.__l.__size_ = 0;
    v81->__r_.__value_.__r.__words[2] = 0;
    v81->__r_.__value_.__r.__words[0] = 0;
    if ((v103 & 0x80u) == 0) {
      int v83 = v102;
    }
    else {
      int v83 = (void **)v102[0];
    }
    if ((v103 & 0x80u) == 0) {
      std::string::size_type v84 = v103;
    }
    else {
      std::string::size_type v84 = (std::string::size_type)v102[1];
    }
    unint64_t v85 = std::string::append(&v98, (const std::string::value_type *)v83, v84);
    long long v86 = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
    v99.__r_.__value_.__r.__words[2] = v85->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v99.__r_.__value_.__l.__data_ = v86;
    v85->__r_.__value_.__l.__size_ = 0;
    v85->__r_.__value_.__r.__words[2] = 0;
    v85->__r_.__value_.__r.__words[0] = 0;
    long long v87 = std::string::append(&v99, ".");
    std::string::size_type v88 = v87->__r_.__value_.__r.__words[0];
    v110[0] = v87->__r_.__value_.__l.__size_;
    *(void *)((char *)v110 + 7) = *(std::string::size_type *)((char *)&v87->__r_.__value_.__r.__words[1] + 7);
    char v89 = HIBYTE(v87->__r_.__value_.__r.__words[2]);
    v87->__r_.__value_.__l.__size_ = 0;
    v87->__r_.__value_.__r.__words[2] = 0;
    v87->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v106.__r_.__value_.__l.__data_);
    }
    v106.__r_.__value_.__r.__words[0] = v88;
    v106.__r_.__value_.__l.__size_ = v110[0];
    *(std::string::size_type *)((char *)&v106.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v110 + 7);
    *((unsigned char *)&v106.__r_.__value_.__s + 23) = v89;
    if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v99.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v98.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v97.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v96.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v95.__r_.__value_.__l.__data_);
    }
    *(void *)uint64_t v93 = 15;
    std::operator+<char>();
    if ((char)v101 < 0) {
      operator delete(__p[0]);
    }
    if ((char)v103 < 0) {
      operator delete(v102[0]);
    }
    char v70 = 0;
    if ((*((unsigned char *)&v104.__r_.__value_.__s + 23) & 0x80) != 0) {
LABEL_109:
    }
      operator delete(v104.__r_.__value_.__l.__data_);
LABEL_110:
    if (v70)
    {
      if (++v27 == v94)
      {
        if (v28)
        {
          CoreML::Result::Result(v93);
        }
        else
        {
          std::operator+<char>();
          if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v106.__r_.__value_.__l.__data_);
          }
          std::string v106 = v104;
          *(void *)uint64_t v93 = 15;
          std::operator+<char>();
        }
        break;
      }
      continue;
    }
    break;
  }
  if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v105.__r_.__value_.__l.__data_);
  }
LABEL_160:
  if (v6) {
    operator delete(v6);
  }
LABEL_162:
  if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v106.__r_.__value_.__l.__data_);
  }
  if (v109 < 0) {
    operator delete(v108);
  }
}

void sub_19EACB730(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,void *__p,uint64_t a51,int a52,__int16 a53,char a54,char a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  if (*(char *)(v62 - 193) < 0) {
    operator delete(*(void **)(v62 - 216));
  }
  if (v61) {
    operator delete(v61);
  }
  if (*(char *)(v62 - 169) < 0) {
    operator delete(*(void **)(v62 - 192));
  }
  if (*(char *)(v62 - 137) < 0) {
    operator delete(*(void **)(v62 - 160));
  }
  _Unwind_Resume(exception_object);
}

void validateTrainingInputs<CoreML::Specification::NeuralNetworkRegressor>(CoreML::Result *a1, uint64_t a2, void *a3)
{
  v110[2] = *MEMORY[0x1E4F143B8];
  CoreML::Result::Result((CoreML::Result *)v107);
  memset(&v106, 0, sizeof(v106));
  if (*(int *)(a2 + 120) <= 1)
  {
    MEMORY[0x19F3C1430](&v106, "Must provide training inputs for updatable neural network (expecting both input and target for loss function).");
    *(void *)a1 = 15;
    std::operator+<char>();
    goto LABEL_162;
  }
  uint64_t v93 = a1;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  unint64_t v8 = 0;
  uint64_t v9 = 0;
  do
  {
    if (*(int *)(a2 + 24) < 1)
    {
LABEL_8:
      if ((unint64_t)v7 >= v8)
      {
        uint64_t v13 = (v7 - v6) >> 2;
        unint64_t v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 62) {
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
        }
        if ((uint64_t)(v8 - (void)v6) >> 1 > v14) {
          unint64_t v14 = (uint64_t)(v8 - (void)v6) >> 1;
        }
        if (v8 - (unint64_t)v6 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v14;
        }
        if (v15) {
          unint64_t v15 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v15);
        }
        else {
          uint64_t v16 = 0;
        }
        BOOL v17 = (char *)(v15 + 4 * v13);
        *(_DWORD *)BOOL v17 = v9;
        int v18 = v17 + 4;
        while (v7 != v6)
        {
          int v19 = *((_DWORD *)v7 - 1);
          v7 -= 4;
          *((_DWORD *)v17 - 1) = v19;
          v17 -= 4;
        }
        unint64_t v8 = v15 + 4 * v16;
        if (v6) {
          operator delete(v6);
        }
        uint64_t v6 = v17;
        uint64_t v7 = v18;
      }
      else
      {
        *(_DWORD *)uint64_t v7 = v9;
        v7 += 4;
      }
    }
    else
    {
      uint64_t v10 = 0;
      uint64_t v11 = *(void *)(*(void *)(a2 + 128) + 8 * v9 + 8);
      while (1)
      {
        uint64_t v12 = *(void *)(*(void *)(a2 + 32) + 8 * v10 + 8);
        if (CoreML::Specification::isEquivalent(*(CoreML::Specification **)(v11 + 16), *(const CoreML::Specification::FeatureDescription **)(v11 + 32), *(const CoreML::Specification::FeatureDescription **)(v12 + 16), *(uint64_t **)(v12 + 32)))
        {
          break;
        }
        if (++v10 >= *(int *)(a2 + 24)) {
          goto LABEL_8;
        }
      }
    }
    ++v9;
    uint64_t v20 = *(int *)(a2 + 120);
  }
  while (v9 < v20);
  uint64_t v21 = v7 - v6;
  if (v7 == v6)
  {
    MEMORY[0x19F3C1430](&v106, "Training inputs don't describe required inputs for the loss (needs both the input and the target).");
    *(void *)uint64_t v93 = 15;
    std::operator+<char>();
    goto LABEL_160;
  }
  unint64_t v22 = v21 >> 2;
  if (v21 >> 2 == v20)
  {
    MEMORY[0x19F3C1430](&v106, "The training inputs must include at least one input from the model itself as required for training (should have at least one input in common with those used for prediction).");
    *(void *)uint64_t v93 = 15;
    std::operator+<char>();
    goto LABEL_160;
  }
  memset(&v105, 0, sizeof(v105));
  uint64_t v23 = (uint64_t *)a3[8];
  if (!v23) {
    uint64_t v23 = &CoreML::Specification::_NetworkUpdateParameters_default_instance_;
  }
  uint64_t v24 = *(void *)(v23[4] + 8);
  if ((*(_DWORD *)(v24 + 36) & 0xFFFFFFFE) == 0xA) {
    std::string::operator=(&v105, *(const std::string **)(*(void *)(v24 + 24) + 24));
  }
  uint64_t v26 = v25;
  uint64_t v27 = 0;
  int v28 = 0;
  if (v22 <= 1) {
    uint64_t v29 = 1;
  }
  else {
    uint64_t v29 = v22;
  }
  uint64_t v94 = v29;
  unint64_t v90 = v25;
  while (2)
  {
    uint64_t v30 = *(void *)(*(void *)(a2 + 128) + 8 * *(int *)&v6[4 * v27] + 8);
    unint64_t v31 = *(long long **)(v30 + 16);
    if (*((char *)v31 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v104, *(const std::string::value_type **)v31, *((void *)v31 + 1));
    }
    else
    {
      long long v32 = *v31;
      v104.__r_.__value_.__r.__words[2] = *((void *)v31 + 2);
      *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v32;
    }
    uint64_t v33 = HIBYTE(v104.__r_.__value_.__r.__words[2]);
    std::string::size_type size = v104.__r_.__value_.__l.__size_;
    if (!v26) {
      goto LABEL_86;
    }
    uint64_t v35 = *(unsigned __int8 ***)(a2 + 136);
    if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v36 = HIBYTE(v104.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v36 = v104.__r_.__value_.__l.__size_;
    }
    uint64_t v37 = (unsigned __int8 *)*((unsigned __int8 *)v35 + 23);
    int v38 = (char)v37;
    if ((char)v37 < 0) {
      uint64_t v37 = v35[1];
    }
    if ((unsigned __int8 *)v36 != v37)
    {
LABEL_86:
      if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v57 = HIBYTE(v105.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v57 = v105.__r_.__value_.__l.__size_;
      }
      std::string::size_type v58 = v33;
      if ((v33 & 0x80u) != 0) {
        std::string::size_type v58 = size;
      }
      if (v57 == v58)
      {
        if ((v33 & 0x80u) == 0) {
          uint64_t v59 = &v104;
        }
        else {
          uint64_t v59 = (std::string *)v104.__r_.__value_.__r.__words[0];
        }
        if ((*((unsigned char *)&v105.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          BOOL v69 = memcmp(v105.__r_.__value_.__l.__data_, v59, v105.__r_.__value_.__l.__size_) == 0;
        }
        else if (*((unsigned char *)&v105.__r_.__value_.__s + 23))
        {
          uint64_t v60 = HIBYTE(v105.__r_.__value_.__r.__words[2]) - 1;
          char v61 = &v105;
          do
          {
            int v63 = v61->__r_.__value_.__s.__data_[0];
            char v61 = (std::string *)((char *)v61 + 1);
            int v62 = v63;
            int v65 = v59->__r_.__value_.__s.__data_[0];
            uint64_t v59 = (std::string *)((char *)v59 + 1);
            int v64 = v65;
            BOOL v67 = v60-- != 0;
            BOOL v68 = v62 == v64;
            BOOL v69 = v62 == v64;
          }
          while (v68 && v67);
        }
        else
        {
          BOOL v69 = 1;
        }
      }
      else
      {
        BOOL v69 = 0;
      }
      v28 |= v69;
      char v70 = 1;
      if ((v33 & 0x80) != 0) {
        goto LABEL_109;
      }
      goto LABEL_110;
    }
    if (v38 >= 0) {
      uint64_t v39 = *(unsigned __int8 **)(a2 + 136);
    }
    else {
      uint64_t v39 = *v35;
    }
    if ((*((unsigned char *)&v104.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      if (memcmp(v104.__r_.__value_.__l.__data_, v39, v104.__r_.__value_.__l.__size_)) {
        goto LABEL_86;
      }
    }
    else if (*((unsigned char *)&v104.__r_.__value_.__s + 23))
    {
      std::string v40 = &v104;
      uint64_t v41 = HIBYTE(v104.__r_.__value_.__r.__words[2]);
      do
      {
        if (v40->__r_.__value_.__s.__data_[0] != *v39) {
          goto LABEL_86;
        }
        std::string v40 = (std::string *)((char *)v40 + 1);
        ++v39;
        --v41;
      }
      while (v41);
    }
    int v92 = v28;
    uint64_t v42 = *(void *)(a2 + 56);
    if (v42) {
      int v43 = (uint64_t *)(v42 + 8);
    }
    else {
      int v43 = 0;
    }
    uint64_t v44 = *(int *)(a2 + 48);
    if (!v44)
    {
LABEL_78:
      int v28 = v92;
      goto LABEL_86;
    }
    char v45 = &v43[v44];
    uint64_t v46 = (const void *)v104.__r_.__value_.__r.__words[0];
    while (1)
    {
      uint64_t v47 = *v43;
      uint64_t v48 = *(void *)(*v43 + 16);
      uint64_t v49 = *(unsigned __int8 *)(v48 + 23);
      int v50 = (char)v49;
      if ((v49 & 0x80u) != 0) {
        uint64_t v49 = *(void *)(v48 + 8);
      }
      if (v36 != v49) {
        goto LABEL_76;
      }
      long long v51 = v50 >= 0 ? *(unsigned __int8 **)(*v43 + 16) : *(unsigned __int8 **)v48;
      if ((v33 & 0x80) != 0) {
        break;
      }
      if (!v33) {
        goto LABEL_79;
      }
      uint64_t v52 = &v104;
      uint64_t v53 = v33;
      while (v52->__r_.__value_.__s.__data_[0] == *v51)
      {
        uint64_t v52 = (std::string *)((char *)v52 + 1);
        ++v51;
        if (!--v53) {
          goto LABEL_79;
        }
      }
LABEL_76:
      if (++v43 == v45)
      {
        uint64_t v26 = v90;
        goto LABEL_78;
      }
    }
    int v91 = v46;
    int v54 = memcmp(v46, v51, size);
    uint64_t v46 = v91;
    if (v54) {
      goto LABEL_76;
    }
LABEL_79:
    uint64_t v55 = *(uint64_t **)(v30 + 32);
    if (!v55) {
      uint64_t v55 = &CoreML::Specification::_FeatureType_default_instance_;
    }
    if (*(void *)(v47 + 32)) {
      uint64_t v56 = *(uint64_t **)(v47 + 32);
    }
    else {
      uint64_t v56 = &CoreML::Specification::_FeatureType_default_instance_;
    }
    uint64_t v26 = v90;
    int v28 = v92;
    if (CoreML::Specification::operator==((unint64_t *)v55[3], *((_DWORD *)v55 + 9), (uint64_t)v56))
    {
      LODWORD(v33) = HIBYTE(v104.__r_.__value_.__r.__words[2]);
      int v28 = 1;
      std::string::size_type size = v104.__r_.__value_.__l.__size_;
      goto LABEL_86;
    }
    uint64_t v71 = *(uint64_t **)(v47 + 32);
    if (!v71) {
      uint64_t v71 = &CoreML::Specification::_FeatureType_default_instance_;
    }
    if (*((_DWORD *)v71 + 9) == 1) {
      long long v72 = "Int64";
    }
    else {
      long long v72 = "String";
    }
    std::string::basic_string[abi:ne180100]<0>(v102, v72);
    long long v73 = *(uint64_t **)(v30 + 32);
    if (!v73) {
      long long v73 = &CoreML::Specification::_FeatureType_default_instance_;
    }
    if (*((_DWORD *)v73 + 9) == 1) {
      long long v74 = "Int64";
    }
    else {
      long long v74 = "String";
    }
    std::string::basic_string[abi:ne180100]<0>(__p, v74);
    std::operator+<char>();
    unint64_t v75 = std::string::append(&v95, " doesn't match the expected type of the classifier. Found: ");
    long long v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
    v96.__r_.__value_.__r.__words[2] = v75->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v96.__r_.__value_.__l.__data_ = v76;
    v75->__r_.__value_.__l.__size_ = 0;
    v75->__r_.__value_.__r.__words[2] = 0;
    v75->__r_.__value_.__r.__words[0] = 0;
    if ((v101 & 0x80u) == 0) {
      uint64_t v77 = __p;
    }
    else {
      uint64_t v77 = (void **)__p[0];
    }
    if ((v101 & 0x80u) == 0) {
      std::string::size_type v78 = v101;
    }
    else {
      std::string::size_type v78 = (std::string::size_type)__p[1];
    }
    int v79 = std::string::append(&v96, (const std::string::value_type *)v77, v78);
    long long v80 = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
    v97.__r_.__value_.__r.__words[2] = v79->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v97.__r_.__value_.__l.__data_ = v80;
    v79->__r_.__value_.__l.__size_ = 0;
    v79->__r_.__value_.__r.__words[2] = 0;
    v79->__r_.__value_.__r.__words[0] = 0;
    long long v81 = std::string::append(&v97, ", expected: ");
    long long v82 = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
    v98.__r_.__value_.__r.__words[2] = v81->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v98.__r_.__value_.__l.__data_ = v82;
    v81->__r_.__value_.__l.__size_ = 0;
    v81->__r_.__value_.__r.__words[2] = 0;
    v81->__r_.__value_.__r.__words[0] = 0;
    if ((v103 & 0x80u) == 0) {
      int v83 = v102;
    }
    else {
      int v83 = (void **)v102[0];
    }
    if ((v103 & 0x80u) == 0) {
      std::string::size_type v84 = v103;
    }
    else {
      std::string::size_type v84 = (std::string::size_type)v102[1];
    }
    unint64_t v85 = std::string::append(&v98, (const std::string::value_type *)v83, v84);
    long long v86 = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
    v99.__r_.__value_.__r.__words[2] = v85->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v99.__r_.__value_.__l.__data_ = v86;
    v85->__r_.__value_.__l.__size_ = 0;
    v85->__r_.__value_.__r.__words[2] = 0;
    v85->__r_.__value_.__r.__words[0] = 0;
    long long v87 = std::string::append(&v99, ".");
    std::string::size_type v88 = v87->__r_.__value_.__r.__words[0];
    v110[0] = v87->__r_.__value_.__l.__size_;
    *(void *)((char *)v110 + 7) = *(std::string::size_type *)((char *)&v87->__r_.__value_.__r.__words[1] + 7);
    char v89 = HIBYTE(v87->__r_.__value_.__r.__words[2]);
    v87->__r_.__value_.__l.__size_ = 0;
    v87->__r_.__value_.__r.__words[2] = 0;
    v87->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v106.__r_.__value_.__l.__data_);
    }
    v106.__r_.__value_.__r.__words[0] = v88;
    v106.__r_.__value_.__l.__size_ = v110[0];
    *(std::string::size_type *)((char *)&v106.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v110 + 7);
    *((unsigned char *)&v106.__r_.__value_.__s + 23) = v89;
    if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v99.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v98.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v97.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v96.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v95.__r_.__value_.__l.__data_);
    }
    *(void *)uint64_t v93 = 15;
    std::operator+<char>();
    if ((char)v101 < 0) {
      operator delete(__p[0]);
    }
    if ((char)v103 < 0) {
      operator delete(v102[0]);
    }
    char v70 = 0;
    if ((*((unsigned char *)&v104.__r_.__value_.__s + 23) & 0x80) != 0) {
LABEL_109:
    }
      operator delete(v104.__r_.__value_.__l.__data_);
LABEL_110:
    if (v70)
    {
      if (++v27 == v94)
      {
        if (v28)
        {
          CoreML::Result::Result(v93);
        }
        else
        {
          std::operator+<char>();
          if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v106.__r_.__value_.__l.__data_);
          }
          std::string v106 = v104;
          *(void *)uint64_t v93 = 15;
          std::operator+<char>();
        }
        break;
      }
      continue;
    }
    break;
  }
  if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v105.__r_.__value_.__l.__data_);
  }
LABEL_160:
  if (v6) {
    operator delete(v6);
  }
LABEL_162:
  if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v106.__r_.__value_.__l.__data_);
  }
  if (v109 < 0) {
    operator delete(v108);
  }
}

void sub_19EACC0FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,void *__p,uint64_t a51,int a52,__int16 a53,char a54,char a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  if (*(char *)(v62 - 193) < 0) {
    operator delete(*(void **)(v62 - 216));
  }
  if (v61) {
    operator delete(v61);
  }
  if (*(char *)(v62 - 169) < 0) {
    operator delete(*(void **)(v62 - 192));
  }
  if (*(char *)(v62 - 137) < 0) {
    operator delete(*(void **)(v62 - 160));
  }
  _Unwind_Resume(exception_object);
}

void validateTrainingInputs<CoreML::Specification::NeuralNetworkClassifier>(CoreML::Result *a1, uint64_t a2, uint64_t a3)
{
  v110[2] = *MEMORY[0x1E4F143B8];
  CoreML::Result::Result((CoreML::Result *)v107);
  memset(&v106, 0, sizeof(v106));
  if (*(int *)(a2 + 120) <= 1)
  {
    MEMORY[0x19F3C1430](&v106, "Must provide training inputs for updatable neural network (expecting both input and target for loss function).");
    *(void *)a1 = 15;
    std::operator+<char>();
    goto LABEL_161;
  }
  int v92 = a1;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  unint64_t v8 = 0;
  uint64_t v9 = 0;
  do
  {
    if (*(int *)(a2 + 24) < 1)
    {
LABEL_8:
      if ((unint64_t)v7 >= v8)
      {
        uint64_t v13 = (v7 - v6) >> 2;
        unint64_t v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 62) {
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
        }
        if ((uint64_t)(v8 - (void)v6) >> 1 > v14) {
          unint64_t v14 = (uint64_t)(v8 - (void)v6) >> 1;
        }
        if (v8 - (unint64_t)v6 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v14;
        }
        if (v15) {
          unint64_t v15 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v15);
        }
        else {
          uint64_t v16 = 0;
        }
        BOOL v17 = (char *)(v15 + 4 * v13);
        *(_DWORD *)BOOL v17 = v9;
        int v18 = v17 + 4;
        while (v7 != v6)
        {
          int v19 = *((_DWORD *)v7 - 1);
          v7 -= 4;
          *((_DWORD *)v17 - 1) = v19;
          v17 -= 4;
        }
        unint64_t v8 = v15 + 4 * v16;
        if (v6) {
          operator delete(v6);
        }
        uint64_t v6 = v17;
        uint64_t v7 = v18;
      }
      else
      {
        *(_DWORD *)uint64_t v7 = v9;
        v7 += 4;
      }
    }
    else
    {
      uint64_t v10 = 0;
      uint64_t v11 = *(void *)(*(void *)(a2 + 128) + 8 * v9 + 8);
      while (1)
      {
        uint64_t v12 = *(void *)(*(void *)(a2 + 32) + 8 * v10 + 8);
        if (CoreML::Specification::isEquivalent(*(CoreML::Specification **)(v11 + 16), *(const CoreML::Specification::FeatureDescription **)(v11 + 32), *(const CoreML::Specification::FeatureDescription **)(v12 + 16), *(uint64_t **)(v12 + 32)))
        {
          break;
        }
        if (++v10 >= *(int *)(a2 + 24)) {
          goto LABEL_8;
        }
      }
    }
    ++v9;
    uint64_t v20 = *(int *)(a2 + 120);
  }
  while (v9 < v20);
  uint64_t v21 = v7 - v6;
  if (v7 == v6)
  {
    MEMORY[0x19F3C1430](&v106, "Training inputs don't describe required inputs for the loss (needs both the input and the target).");
    *(void *)int v92 = 15;
    std::operator+<char>();
    goto LABEL_159;
  }
  unint64_t v22 = v21 >> 2;
  if (v21 >> 2 == v20)
  {
    MEMORY[0x19F3C1430](&v106, "The training inputs must include at least one input from the model itself as required for training (should have at least one input in common with those used for prediction).");
    *(void *)int v92 = 15;
    std::operator+<char>();
    goto LABEL_159;
  }
  memset(&v105, 0, sizeof(v105));
  uint64_t v23 = *(uint64_t **)(a3 + 72);
  if (!v23) {
    uint64_t v23 = &CoreML::Specification::_NetworkUpdateParameters_default_instance_;
  }
  uint64_t v24 = *(void *)(v23[4] + 8);
  if ((*(_DWORD *)(v24 + 36) & 0xFFFFFFFE) == 0xA) {
    std::string::operator=(&v105, *(const std::string **)(*(void *)(v24 + 24) + 24));
  }
  uint64_t v25 = 0;
  int v26 = 0;
  if (v22 <= 1) {
    uint64_t v27 = 1;
  }
  else {
    uint64_t v27 = v22;
  }
  uint64_t v94 = v27;
  while (2)
  {
    uint64_t v28 = *(void *)(*(void *)(a2 + 128) + 8 * *(int *)&v6[4 * v25] + 8);
    uint64_t v29 = *(long long **)(v28 + 16);
    if (*((char *)v29 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v104, *(const std::string::value_type **)v29, *((void *)v29 + 1));
    }
    else
    {
      long long v30 = *v29;
      v104.__r_.__value_.__r.__words[2] = *((void *)v29 + 2);
      *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v30;
    }
    unint64_t v31 = *(unsigned __int8 ***)(a2 + 136);
    std::string::size_type v32 = HIBYTE(v104.__r_.__value_.__r.__words[2]);
    std::string::size_type size = v104.__r_.__value_.__l.__size_;
    if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v34 = HIBYTE(v104.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v34 = v104.__r_.__value_.__l.__size_;
    }
    uint64_t v35 = (unsigned __int8 *)*((unsigned __int8 *)v31 + 23);
    int v36 = (char)v35;
    if ((char)v35 < 0) {
      uint64_t v35 = v31[1];
    }
    if ((unsigned __int8 *)v34 != v35)
    {
LABEL_84:
      if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v58 = HIBYTE(v105.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v58 = v105.__r_.__value_.__l.__size_;
      }
      if ((v32 & 0x80u) == 0) {
        std::string::size_type v59 = v32;
      }
      else {
        std::string::size_type v59 = size;
      }
      if (v58 == v59)
      {
        if ((v32 & 0x80u) == 0) {
          uint64_t v60 = &v104;
        }
        else {
          uint64_t v60 = (std::string *)v104.__r_.__value_.__r.__words[0];
        }
        if ((*((unsigned char *)&v105.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          BOOL v70 = memcmp(v105.__r_.__value_.__l.__data_, v60, v105.__r_.__value_.__l.__size_) == 0;
        }
        else if (*((unsigned char *)&v105.__r_.__value_.__s + 23))
        {
          uint64_t v61 = HIBYTE(v105.__r_.__value_.__r.__words[2]) - 1;
          uint64_t v62 = &v105;
          do
          {
            int v64 = v62->__r_.__value_.__s.__data_[0];
            uint64_t v62 = (std::string *)((char *)v62 + 1);
            int v63 = v64;
            int v66 = v60->__r_.__value_.__s.__data_[0];
            uint64_t v60 = (std::string *)((char *)v60 + 1);
            int v65 = v66;
            BOOL v68 = v61-- != 0;
            BOOL v69 = v63 == v65;
            BOOL v70 = v63 == v65;
          }
          while (v69 && v68);
        }
        else
        {
          BOOL v70 = 1;
        }
      }
      else
      {
        BOOL v70 = 0;
      }
      v26 |= v70;
      char v71 = 1;
      if ((v32 & 0x80) != 0) {
        goto LABEL_108;
      }
      goto LABEL_109;
    }
    if (v36 >= 0) {
      uint64_t v37 = *(unsigned __int8 **)(a2 + 136);
    }
    else {
      uint64_t v37 = *v31;
    }
    if ((*((unsigned char *)&v104.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      if (memcmp(v104.__r_.__value_.__l.__data_, v37, v104.__r_.__value_.__l.__size_)) {
        goto LABEL_84;
      }
    }
    else if (*((unsigned char *)&v104.__r_.__value_.__s + 23))
    {
      int v38 = &v104;
      uint64_t v39 = HIBYTE(v104.__r_.__value_.__r.__words[2]);
      do
      {
        if (v38->__r_.__value_.__s.__data_[0] != *v37) {
          goto LABEL_84;
        }
        int v38 = (std::string *)((char *)v38 + 1);
        ++v37;
        --v39;
      }
      while (v39);
    }
    int v93 = v26;
    uint64_t v40 = *(void *)(a2 + 56);
    if (v40) {
      uint64_t v41 = (uint64_t *)(v40 + 8);
    }
    else {
      uint64_t v41 = 0;
    }
    uint64_t v42 = *(int *)(a2 + 48);
    if (!v42)
    {
LABEL_76:
      int v26 = v93;
      goto LABEL_84;
    }
    int v43 = &v41[v42];
    uint64_t v44 = (const void *)v104.__r_.__value_.__r.__words[0];
    while (1)
    {
      uint64_t v45 = *v41;
      uint64_t v46 = *(void *)(*v41 + 16);
      uint64_t v47 = *(unsigned __int8 *)(v46 + 23);
      int v48 = (char)v47;
      if ((v47 & 0x80u) != 0) {
        uint64_t v47 = *(void *)(v46 + 8);
      }
      if (v34 != v47) {
        goto LABEL_75;
      }
      uint64_t v49 = v48 >= 0 ? *(unsigned __int8 **)(*v41 + 16) : *(unsigned __int8 **)v46;
      if ((v32 & 0x80) != 0) {
        break;
      }
      if (!v32) {
        goto LABEL_77;
      }
      int v50 = &v104;
      std::string::size_type v51 = v32;
      while (v50->__r_.__value_.__s.__data_[0] == *v49)
      {
        int v50 = (std::string *)((char *)v50 + 1);
        ++v49;
        if (!--v51) {
          goto LABEL_77;
        }
      }
LABEL_75:
      if (++v41 == v43) {
        goto LABEL_76;
      }
    }
    uint64_t v52 = v28;
    uint64_t v53 = v44;
    uint64_t v91 = v25;
    int v54 = v43;
    int v55 = memcmp(v44, v49, size);
    int v43 = v54;
    uint64_t v25 = v91;
    uint64_t v44 = v53;
    uint64_t v28 = v52;
    if (v55) {
      goto LABEL_75;
    }
LABEL_77:
    uint64_t v56 = *(uint64_t **)(v28 + 32);
    if (!v56) {
      uint64_t v56 = &CoreML::Specification::_FeatureType_default_instance_;
    }
    if (*(void *)(v45 + 32)) {
      std::string::size_type v57 = *(uint64_t **)(v45 + 32);
    }
    else {
      std::string::size_type v57 = &CoreML::Specification::_FeatureType_default_instance_;
    }
    int v26 = v93;
    if (CoreML::Specification::operator==((unint64_t *)v56[3], *((_DWORD *)v56 + 9), (uint64_t)v57))
    {
      std::string::size_type v32 = HIBYTE(v104.__r_.__value_.__r.__words[2]);
      int v26 = 1;
      std::string::size_type size = v104.__r_.__value_.__l.__size_;
      goto LABEL_84;
    }
    long long v72 = *(uint64_t **)(v45 + 32);
    if (!v72) {
      long long v72 = &CoreML::Specification::_FeatureType_default_instance_;
    }
    if (*((_DWORD *)v72 + 9) == 1) {
      long long v73 = "Int64";
    }
    else {
      long long v73 = "String";
    }
    std::string::basic_string[abi:ne180100]<0>(v102, v73);
    long long v74 = *(uint64_t **)(v28 + 32);
    if (!v74) {
      long long v74 = &CoreML::Specification::_FeatureType_default_instance_;
    }
    if (*((_DWORD *)v74 + 9) == 1) {
      unint64_t v75 = "Int64";
    }
    else {
      unint64_t v75 = "String";
    }
    std::string::basic_string[abi:ne180100]<0>(__p, v75);
    std::operator+<char>();
    long long v76 = std::string::append(&v95, " doesn't match the expected type of the classifier. Found: ");
    long long v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
    v96.__r_.__value_.__r.__words[2] = v76->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v96.__r_.__value_.__l.__data_ = v77;
    v76->__r_.__value_.__l.__size_ = 0;
    v76->__r_.__value_.__r.__words[2] = 0;
    v76->__r_.__value_.__r.__words[0] = 0;
    if ((v101 & 0x80u) == 0) {
      std::string::size_type v78 = __p;
    }
    else {
      std::string::size_type v78 = (void **)__p[0];
    }
    if ((v101 & 0x80u) == 0) {
      std::string::size_type v79 = v101;
    }
    else {
      std::string::size_type v79 = (std::string::size_type)__p[1];
    }
    long long v80 = std::string::append(&v96, (const std::string::value_type *)v78, v79);
    long long v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
    v97.__r_.__value_.__r.__words[2] = v80->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v97.__r_.__value_.__l.__data_ = v81;
    v80->__r_.__value_.__l.__size_ = 0;
    v80->__r_.__value_.__r.__words[2] = 0;
    v80->__r_.__value_.__r.__words[0] = 0;
    long long v82 = std::string::append(&v97, ", expected: ");
    long long v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
    v98.__r_.__value_.__r.__words[2] = v82->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v98.__r_.__value_.__l.__data_ = v83;
    v82->__r_.__value_.__l.__size_ = 0;
    v82->__r_.__value_.__r.__words[2] = 0;
    v82->__r_.__value_.__r.__words[0] = 0;
    if ((v103 & 0x80u) == 0) {
      std::string::size_type v84 = v102;
    }
    else {
      std::string::size_type v84 = (void **)v102[0];
    }
    if ((v103 & 0x80u) == 0) {
      std::string::size_type v85 = v103;
    }
    else {
      std::string::size_type v85 = (std::string::size_type)v102[1];
    }
    long long v86 = std::string::append(&v98, (const std::string::value_type *)v84, v85);
    long long v87 = *(_OWORD *)&v86->__r_.__value_.__l.__data_;
    v99.__r_.__value_.__r.__words[2] = v86->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v99.__r_.__value_.__l.__data_ = v87;
    v86->__r_.__value_.__l.__size_ = 0;
    v86->__r_.__value_.__r.__words[2] = 0;
    v86->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v88 = std::string::append(&v99, ".");
    std::string::size_type v89 = v88->__r_.__value_.__r.__words[0];
    v110[0] = v88->__r_.__value_.__l.__size_;
    *(void *)((char *)v110 + 7) = *(std::string::size_type *)((char *)&v88->__r_.__value_.__r.__words[1] + 7);
    char v90 = HIBYTE(v88->__r_.__value_.__r.__words[2]);
    v88->__r_.__value_.__l.__size_ = 0;
    v88->__r_.__value_.__r.__words[2] = 0;
    v88->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v106.__r_.__value_.__l.__data_);
    }
    v106.__r_.__value_.__r.__words[0] = v89;
    v106.__r_.__value_.__l.__size_ = v110[0];
    *(std::string::size_type *)((char *)&v106.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v110 + 7);
    *((unsigned char *)&v106.__r_.__value_.__s + 23) = v90;
    if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v99.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v98.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v97.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v96.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v95.__r_.__value_.__l.__data_);
    }
    *(void *)int v92 = 15;
    std::operator+<char>();
    if ((char)v101 < 0) {
      operator delete(__p[0]);
    }
    if ((char)v103 < 0) {
      operator delete(v102[0]);
    }
    char v71 = 0;
    if ((*((unsigned char *)&v104.__r_.__value_.__s + 23) & 0x80) != 0) {
LABEL_108:
    }
      operator delete(v104.__r_.__value_.__l.__data_);
LABEL_109:
    if (v71)
    {
      if (++v25 == v94)
      {
        if (v26)
        {
          CoreML::Result::Result(v92);
        }
        else
        {
          std::operator+<char>();
          if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v106.__r_.__value_.__l.__data_);
          }
          std::string v106 = v104;
          *(void *)int v92 = 15;
          std::operator+<char>();
        }
        break;
      }
      continue;
    }
    break;
  }
  if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v105.__r_.__value_.__l.__data_);
  }
LABEL_159:
  if (v6) {
    operator delete(v6);
  }
LABEL_161:
  if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v106.__r_.__value_.__l.__data_);
  }
  if (v109 < 0) {
    operator delete(v108);
  }
}

void sub_19EACCA5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,void *__p,uint64_t a51,int a52,__int16 a53,char a54,char a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  if (*(char *)(v62 - 193) < 0) {
    operator delete(*(void **)(v62 - 216));
  }
  if (v61) {
    operator delete(v61);
  }
  if (*(char *)(v62 - 169) < 0) {
    operator delete(*(void **)(v62 - 192));
  }
  if (*(char *)(v62 - 137) < 0) {
    operator delete(*(void **)(v62 - 160));
  }
  _Unwind_Resume(exception_object);
}

void validateUpdatableNeuralNetwork<CoreML::Specification::NeuralNetwork>(void **a1, uint64_t a2)
{
  uint64_t v114 = *MEMORY[0x1E4F143B8];
  CoreML::Result::Result((CoreML::Result *)a1);
  CoreML::Result::Result((CoreML::Result *)__p);
  LODWORD(v4) = *(_DWORD *)(a2 + 24);
  if ((int)v4 < 1)
  {
LABEL_16:
    uint64_t v100 = 0;
    long long v101 = 0uLL;
    MEMORY[0x19F3C1430](&v100, "The model is marked as updatable, but none of the layers are updatable.");
    uint64_t v106 = 14;
    std::operator+<char>();
  }
  else
  {
    uint64_t v5 = 0;
    char v6 = 0;
    while (1)
    {
      while (1)
      {
        uint64_t v7 = *(void *)(*(void *)(a2 + 32) + 8 + 8 * v5);
        if (*(unsigned char *)(v7 + 120)) {
          break;
        }
        if (++v5 >= (int)v4)
        {
          if ((v6 & 1) == 0) {
            goto LABEL_16;
          }
LABEL_15:
          long long v107 = *(_OWORD *)&__p[1];
          uint64_t v106 = (uint64_t)__p[0];
          uint64_t v108 = (uint64_t *)__p[3];
          memset(&__p[1], 0, 24);
          goto LABEL_19;
        }
      }
      int v8 = *(_DWORD *)(v7 + 140);
      if (v8 != 100 && v8 != 420 && v8 != 140) {
        break;
      }
      validateWeightParamsUpdatable((const CoreML::Specification::NeuralNetworkLayer *)&v100, v7);
      int v9 = (int)v100;
      __p[0] = v100;
      if (SHIBYTE(__p[3]) < 0)
      {
        operator delete(__p[1]);
        int v9 = (int)__p[0];
      }
      *(_OWORD *)&__p[1] = v101;
      __p[3] = v102;
      if ((v9 & 0xFFFFFFEF) == 0)
      {
        ++v5;
        char v6 = 1;
        uint64_t v4 = *(int *)(a2 + 24);
        if (v5 < v4) {
          continue;
        }
      }
      goto LABEL_15;
    }
    std::operator+<char>();
    std::string::size_type v79 = std::string::append(&v104, "' is marked as updatable, however it is not supported as the type of this layer is neither convolution nor inner-product.");
    long long v80 = (void *)v79->__r_.__value_.__r.__words[0];
    v110.__r_.__value_.__r.__words[0] = v79->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v110.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v79->__r_.__value_.__r.__words[1] + 7);
    char v81 = HIBYTE(v79->__r_.__value_.__r.__words[2]);
    v79->__r_.__value_.__l.__size_ = 0;
    v79->__r_.__value_.__r.__words[2] = 0;
    v79->__r_.__value_.__r.__words[0] = 0;
    *(void *)((char *)&v101 + 7) = *(std::string::size_type *)((char *)v110.__r_.__value_.__r.__words + 7);
    uint64_t v100 = v80;
    *(void *)&long long v101 = v110.__r_.__value_.__r.__words[0];
    HIBYTE(v101) = v81;
    if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v104.__r_.__value_.__l.__data_);
    }
    uint64_t v106 = 14;
    std::operator+<char>();
  }
  if (SHIBYTE(v101) < 0) {
    operator delete(v100);
  }
LABEL_19:
  if (SHIBYTE(__p[3]) < 0) {
    operator delete(__p[1]);
  }
  int v10 = v106;
  *a1 = (void *)v106;
  if (*((char *)a1 + 31) < 0)
  {
    operator delete(a1[1]);
    int v10 = *(_DWORD *)a1;
  }
  *(_OWORD *)(a1 + 1) = v107;
  a1[3] = v108;
  if ((v10 & 0xFFFFFFEF) == 0)
  {
    long long v83 = a1 + 1;
    CoreML::Result::Result((CoreML::Result *)__p);
    long long v107 = 0uLL;
    uint64_t v106 = (uint64_t)&v107;
    memset(&v104, 0, sizeof(v104));
    if (*(int *)(a2 + 24) < 1)
    {
LABEL_40:
      int v18 = *(void *)(a2 + 64)
          ? *(uint64_t **)(a2 + 64)
          : &CoreML::Specification::_NetworkUpdateParameters_default_instance_;
      if (*((int *)v18 + 6) < 1)
      {
LABEL_59:
        long long v101 = *(_OWORD *)&__p[1];
        uint64_t v100 = __p[0];
        int v102 = (char **)__p[3];
        memset(&__p[1], 0, 24);
      }
      else
      {
        uint64_t v19 = 0;
        while (1)
        {
          uint64_t v20 = *(long long **)(*(void *)(v18[4] + 8 * v19 + 8) + 16);
          if (*((char *)v20 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v110, *(const std::string::value_type **)v20, *((void *)v20 + 1));
          }
          else
          {
            long long v21 = *v20;
            v110.__r_.__value_.__r.__words[2] = *((void *)v20 + 2);
            *(_OWORD *)&v110.__r_.__value_.__l.__data_ = v21;
          }
          uint64_t v22 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__count_unique<std::string>((void *)v107, &v110);
          if (v22)
          {
            std::operator+<char>();
            uint64_t v23 = std::string::append(&v99, "', i.e., there are more than one layers or loss layers with this name.");
            std::string::size_type v24 = v23->__r_.__value_.__r.__words[0];
            v113.__r_.__value_.__r.__words[0] = v23->__r_.__value_.__l.__size_;
            *(std::string::size_type *)((char *)v113.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v23->__r_.__value_.__r.__words[1] + 7);
            char v25 = HIBYTE(v23->__r_.__value_.__r.__words[2]);
            v23->__r_.__value_.__l.__size_ = 0;
            v23->__r_.__value_.__r.__words[2] = 0;
            v23->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v104.__r_.__value_.__l.__data_);
            }
            v104.__r_.__value_.__r.__words[0] = v24;
            v104.__r_.__value_.__l.__size_ = v113.__r_.__value_.__r.__words[0];
            *(std::string::size_type *)((char *)&v104.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v113.__r_.__value_.__r.__words + 7);
            *((unsigned char *)&v104.__r_.__value_.__s + 23) = v25;
            if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v99.__r_.__value_.__l.__data_);
            }
            uint64_t v100 = (void *)14;
            std::operator+<char>();
          }
          else
          {
            std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v106, &v110, (uint64_t)&v110);
          }
          if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v110.__r_.__value_.__l.__data_);
          }
          if (v22) {
            break;
          }
          if (++v19 >= *((int *)v18 + 6)) {
            goto LABEL_59;
          }
        }
      }
    }
    else
    {
      uint64_t v11 = 0;
      while (1)
      {
        uint64_t v12 = *(long long **)(*(void *)(*(void *)(a2 + 32) + 8 * v11 + 8) + 112);
        if (*((char *)v12 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v110, *(const std::string::value_type **)v12, *((void *)v12 + 1));
        }
        else
        {
          long long v13 = *v12;
          v110.__r_.__value_.__r.__words[2] = *((void *)v12 + 2);
          *(_OWORD *)&v110.__r_.__value_.__l.__data_ = v13;
        }
        uint64_t v14 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__count_unique<std::string>((void *)v107, &v110);
        if (v14)
        {
          std::operator+<char>();
          unint64_t v15 = std::string::append(&v99, "', i.e., there are more than one layers or loss layers with this name.");
          std::string::size_type v16 = v15->__r_.__value_.__r.__words[0];
          v113.__r_.__value_.__r.__words[0] = v15->__r_.__value_.__l.__size_;
          *(std::string::size_type *)((char *)v113.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v15->__r_.__value_.__r.__words[1] + 7);
          char v17 = HIBYTE(v15->__r_.__value_.__r.__words[2]);
          v15->__r_.__value_.__l.__size_ = 0;
          v15->__r_.__value_.__r.__words[2] = 0;
          v15->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v104.__r_.__value_.__l.__data_);
          }
          v104.__r_.__value_.__r.__words[0] = v16;
          v104.__r_.__value_.__l.__size_ = v113.__r_.__value_.__r.__words[0];
          *(std::string::size_type *)((char *)&v104.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v113.__r_.__value_.__r.__words + 7);
          *((unsigned char *)&v104.__r_.__value_.__s + 23) = v17;
          if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v99.__r_.__value_.__l.__data_);
          }
          uint64_t v100 = (void *)14;
          std::operator+<char>();
        }
        else
        {
          std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v106, &v110, (uint64_t)&v110);
        }
        if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v110.__r_.__value_.__l.__data_);
        }
        if (v14) {
          break;
        }
        if (++v11 >= *(int *)(a2 + 24)) {
          goto LABEL_40;
        }
      }
    }
    if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v104.__r_.__value_.__l.__data_);
    }
    std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy((char *)v107);
    int v26 = a1;
    if (SHIBYTE(__p[3]) < 0) {
      operator delete(__p[1]);
    }
    int v27 = (int)v100;
    *a1 = v100;
    if (*((char *)a1 + 31) < 0)
    {
      operator delete(a1[1]);
      int v27 = *(_DWORD *)a1;
    }
    *(_OWORD *)long long v83 = v101;
    a1[3] = v102;
    if ((v27 & 0xFFFFFFEF) == 0)
    {
      CoreML::Result::Result((CoreML::Result *)&v104);
      uint64_t v28 = *(uint64_t **)(a2 + 64);
      if (!v28) {
        uint64_t v28 = &CoreML::Specification::_NetworkUpdateParameters_default_instance_;
      }
      uint64_t v29 = *((int *)v28 + 6);
      if ((int)v29 >= 2)
      {
        memset(__p, 0, 24);
        MEMORY[0x19F3C1430](__p, "This model has more than one loss layers specified, which is not supported at the moment.");
        v110.__r_.__value_.__r.__words[0] = 15;
        std::operator+<char>();
        if (SHIBYTE(__p[2]) < 0) {
          operator delete(__p[0]);
        }
        goto LABEL_195;
      }
      uint64_t v100 = &v101;
      long long v101 = 0uLL;
      v103[0] = 0;
      v103[1] = 0;
      int v102 = v103;
      memset(&v99, 0, sizeof(v99));
      std::vector<CoreML::LayerNode>::resize((uint64_t *)&v99, *(int *)(a2 + 24) + v29);
      if (*(int *)(a2 + 24) >= 1)
      {
        uint64_t v30 = 0;
        do
        {
          CoreML::LayerNode::LayerNode((CoreML::LayerNode *)__p, *(const CoreML::Specification::NeuralNetworkLayer **)(*(void *)(a2 + 32) + 8 * v30 + 8));
          std::string::size_type size = v99.__r_.__value_.__l.__size_;
          if (v99.__r_.__value_.__l.__size_ >= v99.__r_.__value_.__r.__words[2])
          {
            unint64_t v34 = 0xF0F0F0F0F0F0F0F1
                * ((uint64_t)(v99.__r_.__value_.__l.__size_ - v99.__r_.__value_.__r.__words[0]) >> 3);
            unint64_t v35 = v34 + 1;
            if (v34 + 1 > 0x1E1E1E1E1E1E1E1) {
              std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
            }
            if (0xE1E1E1E1E1E1E1E2
               * ((uint64_t)(v99.__r_.__value_.__r.__words[2] - v99.__r_.__value_.__r.__words[0]) >> 3) > v35)
              unint64_t v35 = 0xE1E1E1E1E1E1E1E2
                  * ((uint64_t)(v99.__r_.__value_.__r.__words[2] - v99.__r_.__value_.__r.__words[0]) >> 3);
            if (0xF0F0F0F0F0F0F0F1
               * ((uint64_t)(v99.__r_.__value_.__r.__words[2] - v99.__r_.__value_.__r.__words[0]) >> 3) >= 0xF0F0F0F0F0F0F0)
              unint64_t v36 = 0x1E1E1E1E1E1E1E1;
            else {
              unint64_t v36 = v35;
            }
            char v109 = &v99.__r_.__value_.__s.__data_[16];
            uint64_t v37 = (uint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<CoreML::LayerNode>>(v36);
            int v38 = &v37[17 * v34];
            uint64_t v106 = (uint64_t)v37;
            *(void *)&long long v107 = v38;
            uint64_t v108 = &v37[17 * v39];
            *int v38 = 0;
            v38[1] = 0;
            v38[2] = 0;
            *(_OWORD *)int v38 = *(_OWORD *)__p;
            v38[2] = (uint64_t)__p[2];
            memset(__p, 0, 24);
            v38[3] = 0;
            v38[4] = 0;
            v38[5] = 0;
            *(_OWORD *)(v38 + 3) = *(_OWORD *)&__p[3];
            v38[5] = (uint64_t)__p[5];
            memset(&__p[3], 0, 24);
            v38[6] = v91;
            long long v40 = v92;
            v38[9] = v93;
            *(_OWORD *)(v38 + 7) = v40;
            uint64_t v93 = 0;
            long long v92 = 0uLL;
            v38[10] = 0;
            v38[11] = 0;
            v38[12] = 0;
            *((_OWORD *)v38 + 5) = v94;
            v38[12] = v95;
            long long v94 = 0uLL;
            uint64_t v95 = 0;
            v38[13] = 0;
            v38[14] = 0;
            v38[15] = 0;
            *(_OWORD *)(v38 + CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 13) = v96;
            v38[15] = v97;
            long long v96 = 0uLL;
            uint64_t v97 = 0;
            *((_WORD *)v38 + 64) = v98;
            *((void *)&v107 + 1) = v38 + 17;
            std::vector<CoreML::LayerNode>::__swap_out_circular_buffer((uint64_t *)&v99, &v106);
            std::string::size_type v33 = v99.__r_.__value_.__l.__size_;
            std::__split_buffer<CoreML::LayerNode>::~__split_buffer((uint64_t)&v106);
          }
          else
          {
            *(void *)(v99.__r_.__value_.__l.__size_ + 1CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = 0;
            *(void *)(size + 24) = 0;
            *(void *)std::string::size_type size = 0;
            *(void *)(size + 8) = 0;
            *(_OWORD *)std::string::size_type size = *(_OWORD *)__p;
            *(void **)(size + 1CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = __p[2];
            memset(__p, 0, 24);
            *(void *)(size + 32) = 0;
            *(void *)(size + 4CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound::New(this, 0) = 0;
            *(_OWORD *)(size + 24) = *(_OWORD *)&__p[3];
            *(void **)(size + 4CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound::New(this, 0) = __p[5];
            memset(&__p[3], 0, 24);
            *(void *)(size + 48) = v91;
            long long v32 = v92;
            *(void *)(size + 72) = v93;
            *(void *)(size + 8CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound::New(this, 0) = 0;
            *(_OWORD *)(size + 5CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = v32;
            uint64_t v93 = 0;
            long long v92 = 0uLL;
            *(void *)(size + 88) = 0;
            *(void *)(size + 9CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = 0;
            *(_OWORD *)(size + 8CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound::New(this, 0) = v94;
            long long v94 = 0uLL;
            *(void *)(size + 9CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = v95;
            *(void *)(size + 104) = 0;
            uint64_t v95 = 0;
            *(void *)(size + 112) = 0;
            *(void *)(size + 1CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 20) = 0;
            *(_OWORD *)(size + 104) = v96;
            *(void *)(size + 1CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 20) = v97;
            long long v96 = 0uLL;
            uint64_t v97 = 0;
            *(_WORD *)(size + 128) = v98;
            std::string::size_type v33 = size + 136;
          }
          v99.__r_.__value_.__l.__size_ = v33;
          uint64_t v106 = (uint64_t)&v96;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v106);
          uint64_t v106 = (uint64_t)&v94;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v106);
          if (SHIBYTE(v93) < 0) {
            operator delete((void *)v92);
          }
          if (__p[3])
          {
            __p[4] = __p[3];
            operator delete(__p[3]);
          }
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          CoreML::NeuralNetworkValidatorGraph::insertNode((CoreML::NeuralNetworkValidatorGraph *)&v100, (CoreML::LayerNode *)(v99.__r_.__value_.__l.__size_ - 136));
          ++v30;
        }
        while (v30 < *(int *)(a2 + 24));
      }
      uint64_t v41 = *(uint64_t **)(a2 + 64);
      if (!v41) {
        uint64_t v41 = &CoreML::Specification::_NetworkUpdateParameters_default_instance_;
      }
      if (*((int *)v41 + 6) >= 1)
      {
        uint64_t v42 = 0;
        while (1)
        {
          int v43 = *(const std::string ***)(v41[4] + 8 * v42 + 8);
          CoreML::LayerNode::LayerNode((CoreML::LayerNode *)__p, v43);
          std::string::size_type v44 = v99.__r_.__value_.__l.__size_;
          if (v99.__r_.__value_.__l.__size_ >= v99.__r_.__value_.__r.__words[2])
          {
            unint64_t v47 = 0xF0F0F0F0F0F0F0F1
                * ((uint64_t)(v99.__r_.__value_.__l.__size_ - v99.__r_.__value_.__r.__words[0]) >> 3);
            unint64_t v48 = v47 + 1;
            if (v47 + 1 > 0x1E1E1E1E1E1E1E1) {
              std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
            }
            if (0xE1E1E1E1E1E1E1E2
               * ((uint64_t)(v99.__r_.__value_.__r.__words[2] - v99.__r_.__value_.__r.__words[0]) >> 3) > v48)
              unint64_t v48 = 0xE1E1E1E1E1E1E1E2
                  * ((uint64_t)(v99.__r_.__value_.__r.__words[2] - v99.__r_.__value_.__r.__words[0]) >> 3);
            unint64_t v49 = 0xF0F0F0F0F0F0F0F1
                * ((uint64_t)(v99.__r_.__value_.__r.__words[2] - v99.__r_.__value_.__r.__words[0]) >> 3) >= 0xF0F0F0F0F0F0F0
                ? 0x1E1E1E1E1E1E1E1
                : v48;
            char v109 = &v99.__r_.__value_.__s.__data_[16];
            int v50 = (uint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<CoreML::LayerNode>>(v49);
            std::string::size_type v51 = &v50[17 * v47];
            uint64_t v106 = (uint64_t)v50;
            *(void *)&long long v107 = v51;
            uint64_t v108 = &v50[17 * v52];
            *std::string::size_type v51 = 0;
            v51[1] = 0;
            _OWORD v51[2] = 0;
            *(_OWORD *)std::string::size_type v51 = *(_OWORD *)__p;
            _OWORD v51[2] = (uint64_t)__p[2];
            memset(__p, 0, 24);
            v51[3] = 0;
            v51[4] = 0;
            v51[5] = 0;
            *(_OWORD *)(v51 + 3) = *(_OWORD *)&__p[3];
            v51[5] = (uint64_t)__p[5];
            memset(&__p[3], 0, 24);
            v51[6] = v91;
            long long v53 = v92;
            v51[9] = v93;
            *(_OWORD *)(v51 + 7) = v53;
            uint64_t v93 = 0;
            long long v92 = 0uLL;
            v51[10] = 0;
            v51[11] = 0;
            v51[12] = 0;
            *((_OWORD *)v51 + 5) = v94;
            v51[12] = v95;
            long long v94 = 0uLL;
            uint64_t v95 = 0;
            v51[13] = 0;
            v51[14] = 0;
            v51[15] = 0;
            *(_OWORD *)(v51 + CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 13) = v96;
            v51[15] = v97;
            long long v96 = 0uLL;
            uint64_t v97 = 0;
            *((_WORD *)v51 + 64) = v98;
            *((void *)&v107 + 1) = v51 + 17;
            std::vector<CoreML::LayerNode>::__swap_out_circular_buffer((uint64_t *)&v99, &v106);
            std::string::size_type v46 = v99.__r_.__value_.__l.__size_;
            std::__split_buffer<CoreML::LayerNode>::~__split_buffer((uint64_t)&v106);
          }
          else
          {
            *(void *)(v99.__r_.__value_.__l.__size_ + 1CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = 0;
            *(void *)(v44 + 24) = 0;
            *(void *)std::string::size_type v44 = 0;
            *(void *)(v44 + 8) = 0;
            *(_OWORD *)std::string::size_type v44 = *(_OWORD *)__p;
            *(void **)(v44 + 1CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = __p[2];
            memset(__p, 0, 24);
            *(void *)(v44 + 32) = 0;
            *(void *)(v44 + 4CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound::New(this, 0) = 0;
            *(_OWORD *)(v44 + 24) = *(_OWORD *)&__p[3];
            *(void **)(v44 + 4CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound::New(this, 0) = __p[5];
            memset(&__p[3], 0, 24);
            *(void *)(v44 + 48) = v91;
            long long v45 = v92;
            *(void *)(v44 + 72) = v93;
            *(void *)(v44 + 8CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound::New(this, 0) = 0;
            *(_OWORD *)(v44 + 5CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = v45;
            uint64_t v93 = 0;
            long long v92 = 0uLL;
            *(void *)(v44 + 88) = 0;
            *(void *)(v44 + 9CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = 0;
            *(_OWORD *)(v44 + 8CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound::New(this, 0) = v94;
            long long v94 = 0uLL;
            *(void *)(v44 + 9CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 6) = v95;
            *(void *)(v44 + 104) = 0;
            uint64_t v95 = 0;
            *(void *)(v44 + 112) = 0;
            *(void *)(v44 + 1CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 20) = 0;
            *(_OWORD *)(v44 + 104) = v96;
            *(void *)(v44 + 1CoreML::Archiver::MMappedContentManager::~MMappedContentManager(this + 20) = v97;
            long long v96 = 0uLL;
            uint64_t v97 = 0;
            *(_WORD *)(v44 + 128) = v98;
            std::string::size_type v46 = v44 + 136;
          }
          v99.__r_.__value_.__l.__size_ = v46;
          uint64_t v106 = (uint64_t)&v96;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v106);
          uint64_t v106 = (uint64_t)&v94;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v106);
          if (SHIBYTE(v93) < 0) {
            operator delete((void *)v92);
          }
          if (__p[3])
          {
            __p[4] = __p[3];
            operator delete(__p[3]);
          }
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          CoreML::NeuralNetworkValidatorGraph::insertNode((CoreML::NeuralNetworkValidatorGraph *)&v100, (CoreML::LayerNode *)(v99.__r_.__value_.__l.__size_ - 136));
          validateLossLayer((const CoreML::Specification::LossLayer *)__p, (const CoreML::NeuralNetworkValidatorGraph *)v43, (uint64_t)&v100);
          int data = (int)__p[0];
          v104.__r_.__value_.__l.__data_ = (std::string::pointer)__p[0];
          if (SHIBYTE(v105) < 0)
          {
            operator delete((void *)v104.__r_.__value_.__l.__size_);
            int data = (int)v104.__r_.__value_.__l.__data_;
          }
          *(_OWORD *)&v104.__r_.__value_.__r.__words[1] = *(_OWORD *)&__p[1];
          std::string v105 = __p[3];
          if ((data & 0xFFFFFFEF) != 0) {
            break;
          }
          ++v42;
          uint64_t v41 = *(uint64_t **)(a2 + 64);
          if (!v41) {
            uint64_t v41 = &CoreML::Specification::_NetworkUpdateParameters_default_instance_;
          }
          if (v42 >= *((int *)v41 + 6)) {
            goto LABEL_115;
          }
        }
        std::string v110 = v104;
        uint64_t v111 = v105;
        *(_OWORD *)&v104.__r_.__value_.__r.__words[1] = 0uLL;
        std::string v105 = 0;
        int v26 = a1;
        goto LABEL_194;
      }
LABEL_115:
      int v55 = (uint64_t *)v41[5];
      if (v55) {
        uint64_t v56 = v55;
      }
      else {
        uint64_t v56 = &CoreML::Specification::_Optimizer_default_instance_;
      }
      validateOptimizer((const CoreML::Specification::Optimizer *)__p, (uint64_t)v56);
      int v57 = (int)__p[0];
      v104.__r_.__value_.__l.__data_ = (std::string::pointer)__p[0];
      int v26 = a1;
      if (SHIBYTE(v105) < 0)
      {
        operator delete((void *)v104.__r_.__value_.__l.__size_);
        int v57 = (int)v104.__r_.__value_.__l.__data_;
      }
      *(_OWORD *)&v104.__r_.__value_.__r.__words[1] = *(_OWORD *)&__p[1];
      std::string v105 = __p[3];
      if ((v57 & 0xFFFFFFEF) != 0) {
        goto LABEL_127;
      }
      if (*(void *)(a2 + 64)) {
        std::string::size_type v58 = *(uint64_t **)(a2 + 64);
      }
      else {
        std::string::size_type v58 = &CoreML::Specification::_NetworkUpdateParameters_default_instance_;
      }
      validateOtherTopLevelUpdateParameters((const CoreML::Specification::NetworkUpdateParameters *)__p, v58);
      int v59 = (int)__p[0];
      v104.__r_.__value_.__l.__data_ = (std::string::pointer)__p[0];
      if (SHIBYTE(v105) < 0)
      {
        operator delete((void *)v104.__r_.__value_.__l.__size_);
        int v59 = (int)v104.__r_.__value_.__l.__data_;
      }
      *(_OWORD *)&v104.__r_.__value_.__r.__words[1] = *(_OWORD *)&__p[1];
      std::string v105 = __p[3];
      if ((v59 & 0xFFFFFFEF) != 0)
      {
LABEL_127:
        std::string v110 = v104;
        uint64_t v111 = v105;
        *(_OWORD *)&v104.__r_.__value_.__r.__words[1] = 0uLL;
        std::string v105 = 0;
LABEL_194:
        __p[0] = &v99;
        std::vector<CoreML::LayerNode>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(v103[0]);
        std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy((char *)v101);
LABEL_195:
        if (SHIBYTE(v105) < 0) {
          operator delete((void *)v104.__r_.__value_.__l.__size_);
        }
        *int v26 = (void *)v110.__r_.__value_.__r.__words[0];
        if (*((char *)v26 + 31) < 0) {
          operator delete(*v83);
        }
        *(_OWORD *)long long v83 = *(_OWORD *)&v110.__r_.__value_.__r.__words[1];
        a1[3] = v111;
        return;
      }
      long long v107 = 0uLL;
      uint64_t v106 = (uint64_t)&v107;
      uint64_t v60 = *(uint64_t **)(a2 + 64);
      if (!v60) {
        uint64_t v60 = &CoreML::Specification::_NetworkUpdateParameters_default_instance_;
      }
      if (*((int *)v60 + 6) < 1)
      {
LABEL_192:
        std::string v110 = v104;
        uint64_t v111 = v105;
        *(_OWORD *)&v104.__r_.__value_.__r.__words[1] = 0uLL;
        std::string v105 = 0;
LABEL_193:
        std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy((char *)v107);
        int v26 = a1;
        goto LABEL_194;
      }
      uint64_t v61 = 0;
      while (1)
      {
        uint64_t v62 = *(long long **)(*(void *)(v60[4] + 8 * v61 + 8) + 16);
        if (*((char *)v62 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v113, *(const std::string::value_type **)v62, *((void *)v62 + 1));
        }
        else
        {
          long long v63 = *v62;
          v113.__r_.__value_.__r.__words[2] = *((void *)v62 + 2);
          *(_OWORD *)&v113.__r_.__value_.__l.__data_ = v63;
        }
        uint64_t v82 = v61;
        memset(__p, 0, sizeof(__p));
        std::deque<std::string>::push_back(__p, (long long *)&v113);
        char v64 = 0;
        memset(&v89, 0, sizeof(v89));
        while (__p[5])
        {
          unint64_t v65 = *((void *)__p[1] + (unint64_t)__p[4] / 0xAA) + 24 * ((unint64_t)__p[4] % 0xAA);
          if (*(char *)(v65 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v88, *(const std::string::value_type **)v65, *(void *)(v65 + 8));
          }
          else
          {
            long long v66 = *(_OWORD *)v65;
            v88.__r_.__value_.__r.__words[2] = *(void *)(v65 + 16);
            *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v66;
          }
          std::deque<std::string>::pop_front((uint64_t)__p);
          if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v87, v88.__r_.__value_.__l.__data_, v88.__r_.__value_.__l.__size_);
          }
          else {
            std::string v87 = v88;
          }
          uint64_t NodeFromName = CoreML::NeuralNetworkValidatorGraph::getNodeFromName((uint64_t)&v100, &v87);
          uint64_t v68 = NodeFromName;
          if ((SHIBYTE(v87.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            if (NodeFromName) {
              goto LABEL_146;
            }
            goto LABEL_173;
          }
          operator delete(v87.__r_.__value_.__l.__data_);
          if (v68)
          {
LABEL_146:
            BOOL v69 = *(uint64_t **)v68;
            BOOL v70 = *(uint64_t **)(v68 + 8);
            while (1)
            {
              if (v69 == v70)
              {
                int v73 = 0;
                goto LABEL_178;
              }
              uint64_t v71 = *v69;
              long long v72 = (const std::string *)(*v69 + 56);
              if (*(char *)(*v69 + 79) < 0) {
                std::string::__init_copy_ctor_external(&v86, *(const std::string::value_type **)(v71 + 56), *(void *)(v71 + 64));
              }
              else {
                std::string v86 = *v72;
              }
              if (&v107 != (long long *)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>((uint64_t)&v106, &v86))break; {
              std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v106, &v86, (uint64_t)&v86);
              }
              std::deque<std::string>::push_back(__p, (long long *)&v86);
              if (((*(unsigned char *)(v71 + 128) != 0) & v64) == 1)
              {
                memset(&v85, 0, sizeof(v85));
                std::operator+<char>();
                long long v74 = std::string::append(&v84, "), which does not support backpropagation, between an updatable marked layer and the loss function.");
                std::string::size_type v75 = v74->__r_.__value_.__r.__words[0];
                v112[0] = v74->__r_.__value_.__l.__size_;
                *(void *)((char *)v112 + 7) = *(std::string::size_type *)((char *)&v74->__r_.__value_.__r.__words[1]
                                                                          + 7);
                char v76 = HIBYTE(v74->__r_.__value_.__r.__words[2]);
                v74->__r_.__value_.__l.__size_ = 0;
                v74->__r_.__value_.__r.__words[2] = 0;
                v74->__r_.__value_.__r.__words[0] = 0;
                if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v85.__r_.__value_.__l.__data_);
                }
                v85.__r_.__value_.__r.__words[0] = v75;
                v85.__r_.__value_.__l.__size_ = v112[0];
                *(std::string::size_type *)((char *)&v85.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v112 + 7);
                *((unsigned char *)&v85.__r_.__value_.__s + 23) = v76;
                if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v84.__r_.__value_.__l.__data_);
                }
                v110.__r_.__value_.__r.__words[0] = 15;
                std::operator+<char>();
                if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v85.__r_.__value_.__l.__data_);
                }
                char v64 = 1;
                int v73 = 1;
              }
              else if (*(unsigned char *)(v71 + 129))
              {
                int v73 = 0;
              }
              else
              {
                if (*(_DWORD *)(v71 + 48) == 175 && *(_DWORD *)(v68 + 52) == 10) {
                  break;
                }
                std::string::operator=(&v89, v72);
                int v73 = 0;
                char v64 = 1;
              }
LABEL_166:
              if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v86.__r_.__value_.__l.__data_);
              }
              if (v73 != 14 && v73) {
                goto LABEL_178;
              }
              ++v69;
            }
            int v73 = 14;
            goto LABEL_166;
          }
LABEL_173:
          std::operator+<char>();
          long long v77 = std::string::append(&v85, "'.");
          long long v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
          v86.__r_.__value_.__r.__words[2] = v77->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v86.__r_.__value_.__l.__data_ = v78;
          v77->__r_.__value_.__l.__size_ = 0;
          v77->__r_.__value_.__r.__words[2] = 0;
          v77->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v85.__r_.__value_.__l.__data_);
          }
          v110.__r_.__value_.__r.__words[0] = 15;
          std::operator+<char>();
          if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v86.__r_.__value_.__l.__data_);
          }
          int v73 = 1;
LABEL_178:
          if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v88.__r_.__value_.__l.__data_);
            if (v73) {
              goto LABEL_184;
            }
          }
          else if (v73)
          {
            goto LABEL_184;
          }
        }
        int v73 = 0;
LABEL_184:
        if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v89.__r_.__value_.__l.__data_);
        }
        std::deque<std::string>::~deque[abi:ne180100]((uint64_t)__p);
        if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v113.__r_.__value_.__l.__data_);
        }
        if (v73) {
          goto LABEL_193;
        }
        uint64_t v61 = v82 + 1;
        uint64_t v60 = *(uint64_t **)(a2 + 64);
        if (!v60) {
          uint64_t v60 = &CoreML::Specification::_NetworkUpdateParameters_default_instance_;
        }
        if (v61 >= *((int *)v60 + 6)) {
          goto LABEL_192;
        }
      }
    }
  }
}