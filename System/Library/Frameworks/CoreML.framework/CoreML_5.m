void sub_19EACDDA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,void *__p,uint64_t a58,int a59,__int16 a60,char a61,char a62)
{
  uint64_t v62;

  if (a62 < 0) {
    operator delete(__p);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  if (*(char *)(v62 + 31) < 0) {
    operator delete(*(void **)(v62 + 8));
  }
  _Unwind_Resume(a1);
}

void validateWeightParamsUpdatable(const CoreML::Specification::NeuralNetworkLayer *a1, uint64_t a2)
{
  v34[2] = *MEMORY[0x1E4F143B8];
  CoreML::Result::Result((CoreML::Result *)&v31);
  __p = 0;
  long long v30 = 0uLL;
  int v4 = *(_DWORD *)(a2 + 140);
  if (v4 == 140)
  {
    uint64_t v11 = *(void *)(a2 + 128);
    int v12 = *(unsigned __int8 *)(v11 + 48);
    BOOL v7 = *(unsigned char *)(v11 + 48) != 0;
    BOOL v20 = *(unsigned char *)(v11 + 48)
       && ((v13 = *(uint64_t **)(v11 + 24)) != 0
         ? (v14 = *(uint64_t **)(v11 + 24))
         : (v14 = &CoreML::Specification::_WeightParams_default_instance_),
           (int v12 = *((unsigned __int8 *)v14 + 72) != 0, v13)
         ? (BOOL v15 = v13 == &CoreML::Specification::_WeightParams_default_instance_)
         : (BOOL v15 = 1),
           !v15)
       && v13[8] != 0;
    v21 = *(uint64_t **)(v11 + 16);
    v17 = &CoreML::Specification::_WeightParams_default_instance_;
    if (v21) {
      BOOL v22 = v21 == &CoreML::Specification::_WeightParams_default_instance_;
    }
    else {
      BOOL v22 = 1;
    }
    BOOL v23 = !v22 && v21[8] != 0;
    if (v21) {
      v17 = v21;
    }
    if (v23) {
      goto LABEL_50;
    }
  }
  else
  {
    if (v4 != 100) {
      goto LABEL_49;
    }
    uint64_t v5 = *(void *)(a2 + 128);
    int v6 = *(unsigned __int8 *)(v5 + 153);
    BOOL v7 = *(unsigned char *)(v5 + 153) != 0;
    BOOL v16 = *(unsigned char *)(v5 + 153)
       && ((v8 = *(uint64_t **)(v5 + 120)) != 0
         ? (v9 = *(uint64_t **)(v5 + 120))
         : (v9 = &CoreML::Specification::_WeightParams_default_instance_),
           (int v6 = *((unsigned __int8 *)v9 + 72), v8)
         ? (BOOL v10 = v8 == &CoreML::Specification::_WeightParams_default_instance_)
         : (BOOL v10 = 1),
           !v10)
       && v8[8] != 0;
    v17 = *(uint64_t **)(v5 + 112);
    if (v17) {
      BOOL v18 = v17 == &CoreML::Specification::_WeightParams_default_instance_;
    }
    else {
      BOOL v18 = 1;
    }
    BOOL v19 = !v18 && v17[8] != 0;
    if (!v17) {
      v17 = &CoreML::Specification::_WeightParams_default_instance_;
    }
    int v12 = v6 != 0;
    BOOL v20 = v16;
    if (v19) {
      goto LABEL_50;
    }
  }
  if (v20)
  {
LABEL_50:
    std::operator+<char>();
    v25 = std::string::append(&v28, "', has quantized weights/bias param. Quantized weights/bias not supported for update.");
    goto LABEL_51;
  }
  if ((v12 | !v7) == 1 && *((unsigned char *)v17 + 72) != 0)
  {
LABEL_49:
    *(void *)a1 = v31;
    *(_OWORD *)((char *)a1 + 8) = *(_OWORD *)v32;
    *((void *)a1 + 3) = v33;
    v32[0] = 0;
    v32[1] = 0;
    uint64_t v33 = 0;
    goto LABEL_55;
  }
  std::operator+<char>();
  v25 = std::string::append(&v28, "', has a weight/bias param which is not marked as updatable.");
LABEL_51:
  v26 = (void *)v25->__r_.__value_.__r.__words[0];
  v34[0] = v25->__r_.__value_.__l.__size_;
  *(void *)((char *)v34 + 7) = *(std::string::size_type *)((char *)&v25->__r_.__value_.__r.__words[1] + 7);
  char v27 = HIBYTE(v25->__r_.__value_.__r.__words[2]);
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  *(void *)((char *)&v30 + 7) = *(void *)((char *)v34 + 7);
  __p = v26;
  *(void *)&long long v30 = v34[0];
  HIBYTE(v30) = v27;
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  *(void *)a1 = 14;
  std::operator+<char>();
  if (SHIBYTE(v30) < 0) {
    operator delete(__p);
  }
LABEL_55:
  if (SHIBYTE(v33) < 0) {
    operator delete(v32[0]);
  }
}

void sub_19EACE29C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<CoreML::LayerNode>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v6 = 0xF0F0F0F0F0F0F0F1 * ((v5 - *a1) >> 3);
  unint64_t v7 = a2 - v6;
  if (a2 <= v6)
  {
    if (a2 < v6)
    {
      unint64_t v15 = v4 + 136 * a2;
      while (v5 != v15)
      {
        v5 -= 136;
        std::allocator<CoreML::LayerNode>::destroy[abi:ne180100](v5);
      }
      a1[1] = v15;
    }
  }
  else
  {
    uint64_t v8 = a1[2];
    if (0xF0F0F0F0F0F0F0F1 * ((v8 - v5) >> 3) >= v7)
    {
      unint64_t v16 = v5 + 136 * v7;
      do
      {
        *(_OWORD *)(v5 + 16) = 0uLL;
        *(_OWORD *)(v5 + 32) = 0uLL;
        *(_OWORD *)uint64_t v5 = 0uLL;
        *(_OWORD *)(v5 + 56) = 0uLL;
        *(_OWORD *)(v5 + 72) = 0uLL;
        *(_OWORD *)(v5 + 88) = 0uLL;
        *(_OWORD *)(v5 + 104) = 0uLL;
        *(void *)(v5 + 120) = 0;
        v5 += 136;
      }
      while (v5 != v16);
      a1[1] = v16;
    }
    else
    {
      if (a2 > 0x1E1E1E1E1E1E1E1) {
        std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
      }
      v17[4] = a1 + 2;
      unint64_t v9 = 0xF0F0F0F0F0F0F0F1 * ((v8 - v4) >> 3);
      uint64_t v10 = 2 * v9;
      if (2 * v9 <= a2) {
        uint64_t v10 = a2;
      }
      if (v9 >= 0xF0F0F0F0F0F0F0) {
        unint64_t v11 = 0x1E1E1E1E1E1E1E1;
      }
      else {
        unint64_t v11 = v10;
      }
      int v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CoreML::LayerNode>>(v11);
      v13 = &v12[136 * v6];
      v17[0] = v12;
      v17[1] = v13;
      v17[3] = &v12[136 * v14];
      do
      {
        *((_OWORD *)v13 + 1) = 0uLL;
        *((_OWORD *)v13 + 2) = 0uLL;
        *(_OWORD *)v13 = 0uLL;
        *(_OWORD *)(v13 + 56) = 0uLL;
        *(_OWORD *)(v13 + 72) = 0uLL;
        *(_OWORD *)(v13 + 88) = 0uLL;
        *(_OWORD *)(v13 + 104) = 0uLL;
        *((void *)v13 + 15) = 0;
        v13 += 136;
      }
      while (v13 != &v12[136 * a2]);
      v17[2] = &v12[136 * a2];
      std::vector<CoreML::LayerNode>::__swap_out_circular_buffer(a1, v17);
      std::__split_buffer<CoreML::LayerNode>::~__split_buffer((uint64_t)v17);
    }
  }
}

CoreML::LayerNode *CoreML::LayerNode::LayerNode(CoreML::LayerNode *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  *(_OWORD *)((char *)this + 56) = 0u;
  uint64_t v4 = (std::string *)((char *)this + 56);
  *(_OWORD *)((char *)this + 104) = 0u;
  uint64_t v5 = (void ***)((char *)this + 104);
  unint64_t v6 = (std::string **)((char *)this + 80);
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((void *)this + 15) = 0;
  long long v30 = 0;
  uint64_t v31 = 0;
  unint64_t v32 = 0;
  char v27 = 0;
  std::string v28 = 0;
  unint64_t v29 = 0;
  uint64_t v7 = *((void *)a2 + 4);
  if (v7) {
    uint64_t v8 = (uint64_t *)(v7 + 8);
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *((int *)a2 + 6);
  if (v9)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 8 * v9;
    do
    {
      uint64_t v12 = *v8;
      if ((unint64_t)v10 >= v32)
      {
        uint64_t v10 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v30, (long long *)v12);
      }
      else
      {
        if (*(char *)(v12 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)v12, *(void *)(v12 + 8));
        }
        else
        {
          long long v13 = *(_OWORD *)v12;
          v10->__r_.__value_.__r.__words[2] = *(void *)(v12 + 16);
          *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v13;
        }
        ++v10;
      }
      uint64_t v31 = (long long *)v10;
      ++v8;
      v11 -= 8;
    }
    while (v11);
  }
  uint64_t v14 = *((void *)a2 + 7);
  if (v14) {
    unint64_t v15 = (uint64_t *)(v14 + 8);
  }
  else {
    unint64_t v15 = 0;
  }
  uint64_t v16 = *((int *)a2 + 12);
  if (v16)
  {
    v17 = v28;
    uint64_t v18 = 8 * v16;
    do
    {
      uint64_t v19 = *v15;
      if ((unint64_t)v17 >= v29)
      {
        v17 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v27, (long long *)v19);
      }
      else
      {
        if (*(char *)(v19 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)v19, *(void *)(v19 + 8));
        }
        else
        {
          long long v20 = *(_OWORD *)v19;
          v17->__r_.__value_.__r.__words[2] = *(void *)(v19 + 16);
          *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v20;
        }
        ++v17;
      }
      std::string v28 = v17;
      ++v15;
      v18 -= 8;
    }
    while (v18);
  }
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 35);
  *((_DWORD *)this + 13) = 0;
  if (v6 != &v30) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v6, v30, v31, 0xAAAAAAAAAAAAAAABLL * (((char *)v31 - (char *)v30) >> 3));
  }
  if (v5 != (void ***)&v27) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v5, v27, (long long *)v28, 0xAAAAAAAAAAAAAAABLL * (((char *)v28 - (char *)v27) >> 3));
  }
  std::string::operator=(v4, *((const std::string **)a2 + 14));
  *((unsigned char *)this + 128) = *((unsigned char *)a2 + 120);
  int v21 = *((_DWORD *)a2 + 35);
  LOBYTE(v22) = 1;
  uint64_t v23 = (v21 - 100);
  if (v23 > 0x3C) {
    goto LABEL_36;
  }
  if (((1 << (v21 - 100)) & 0x1000010000100001) != 0) {
    goto LABEL_38;
  }
  if (v23 == 30)
  {
    unsigned int v24 = *(_DWORD *)(*((void *)a2 + 16) + 28);
    BOOL v25 = v24 >= 0x29;
    unint64_t v22 = (0x10040000400uLL >> v24) & 1;
    if (v25) {
      LOBYTE(v22) = 0;
    }
  }
  else
  {
LABEL_36:
    if (v21 != 301 && v21 != 420) {
      LOBYTE(v22) = 0;
    }
  }
LABEL_38:
  *((unsigned char *)this + 129) = v22;
  uint64_t v33 = (void ***)&v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
  char v27 = (std::string *)&v30;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
  return this;
}

void sub_19EACE708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void ***a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, void ***a16)
{
  a16 = (void ***)&a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a10 = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a13);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a13);
  if (*(char *)(v16 + 79) < 0) {
    operator delete(*v17);
  }
  uint64_t v19 = *(void **)(v16 + 24);
  if (v19)
  {
    *(void *)(v16 + 32) = v19;
    operator delete(v19);
  }
  long long v20 = *(void **)v16;
  if (*(void *)v16)
  {
    *(void *)(v16 + 8) = v20;
    operator delete(v20);
  }
  _Unwind_Resume(a1);
}

__n128 std::allocator<CoreML::LayerNode>::construct[abi:ne180100]<CoreML::LayerNode,CoreML::LayerNode>(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  long long v2 = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v2;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  __n128 result = *(__n128 *)(a2 + 104);
  *(__n128 *)(a1 + 104) = result;
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  *(void *)(a2 + 120) = 0;
  *(_WORD *)(a1 + 128) = *(_WORD *)(a2 + 128);
  return result;
}

void *CoreML::NeuralNetworkValidatorGraph::insertNode(CoreML::NeuralNetworkValidatorGraph *this, CoreML::LayerNode *a2)
{
  uint64_t v4 = (void *)*((void *)a2 + 10);
  uint64_t v5 = (void *)*((void *)a2 + 11);
  if (v4 != v5)
  {
    unint64_t v6 = (char *)this + 32;
    do
    {
      uint64_t v7 = *(void **)v6;
      if (*(void *)v6)
      {
        uint64_t v8 = (char *)this + 32;
        do
        {
          BOOL v9 = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v7 + 4, v4);
          uint64_t v10 = v7 + 1;
          if (!v9)
          {
            uint64_t v10 = v7;
            uint64_t v8 = (char *)v7;
          }
          uint64_t v7 = (void *)*v10;
        }
        while (*v10);
        if (v8 != v6
          && !google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v4, (void *)v8 + 4))
        {
          uint64_t v11 = *std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__find_equal<std::string>((uint64_t)this + 24, &v41, v4);
          if (!v11) {
            std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
          }
          uint64_t v12 = *(void **)(v11 + 56);
          uint64_t v14 = (void *)*((void *)a2 + 1);
          unint64_t v13 = *((void *)a2 + 2);
          if ((unint64_t)v14 >= v13)
          {
            uint64_t v16 = ((uint64_t)v14 - *(void *)a2) >> 3;
            if ((unint64_t)(v16 + 1) >> 61) {
              goto LABEL_49;
            }
            uint64_t v17 = v13 - *(void *)a2;
            uint64_t v18 = v17 >> 2;
            if (v17 >> 2 <= (unint64_t)(v16 + 1)) {
              uint64_t v18 = v16 + 1;
            }
            if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v19 = v18;
            }
            if (v19) {
              unint64_t v19 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<_KDInterval>>(v19);
            }
            else {
              uint64_t v20 = 0;
            }
            int v21 = (void *)(v19 + 8 * v16);
            void *v21 = v12;
            unint64_t v15 = v21 + 1;
            uint64_t v23 = *(char **)a2;
            unint64_t v22 = (char *)*((void *)a2 + 1);
            if (v22 != *(char **)a2)
            {
              do
              {
                uint64_t v24 = *((void *)v22 - 1);
                v22 -= 8;
                *--int v21 = v24;
              }
              while (v22 != v23);
              unint64_t v22 = *(char **)a2;
            }
            *(void *)a2 = v21;
            *((void *)a2 + 1) = v15;
            *((void *)a2 + 2) = v19 + 8 * v20;
            if (v22) {
              operator delete(v22);
            }
          }
          else
          {
            void *v14 = v12;
            unint64_t v15 = v14 + 1;
          }
          *((void *)a2 + 1) = v15;
          v26 = (void *)v12[4];
          unint64_t v25 = v12[5];
          if ((unint64_t)v26 >= v25)
          {
            uint64_t v28 = v12[3];
            uint64_t v29 = ((uint64_t)v26 - v28) >> 3;
            if ((unint64_t)(v29 + 1) >> 61) {
LABEL_49:
            }
              std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
            uint64_t v30 = v25 - v28;
            uint64_t v31 = v30 >> 2;
            if (v30 >> 2 <= (unint64_t)(v29 + 1)) {
              uint64_t v31 = v29 + 1;
            }
            if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v32 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v32 = v31;
            }
            if (v32) {
              unint64_t v32 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<_KDInterval>>(v32);
            }
            else {
              uint64_t v33 = 0;
            }
            v34 = (void *)(v32 + 8 * v29);
            void *v34 = a2;
            char v27 = v34 + 1;
            v36 = (char *)v12[3];
            v35 = (char *)v12[4];
            if (v35 != v36)
            {
              do
              {
                uint64_t v37 = *((void *)v35 - 1);
                v35 -= 8;
                *--v34 = v37;
              }
              while (v35 != v36);
              v35 = (char *)v12[3];
            }
            v12[3] = v34;
            v12[4] = v27;
            v12[5] = v32 + 8 * v33;
            if (v35) {
              operator delete(v35);
            }
          }
          else
          {
            void *v26 = a2;
            char v27 = v26 + 1;
          }
          v12[4] = v27;
        }
      }
      v4 += 3;
    }
    while (v4 != v5);
  }
  v38 = (long long *)*((void *)a2 + 13);
  for (i = (long long *)*((void *)a2 + 14); v38 != i; v38 = (long long *)((char *)v38 + 24))
  {
    v41 = v38;
    std::__tree<std::__value_type<std::string,CoreML::LayerNode *>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::LayerNode *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::LayerNode *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)this + 24, v38, &v41)[7] = a2;
  }
  v41 = (long long *)((char *)a2 + 56);
  __n128 result = std::__tree<std::__value_type<std::string,CoreML::LayerNode *>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::LayerNode *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::LayerNode *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)this, (void *)a2 + 7, &v41);
  result[7] = a2;
  return result;
}

void CoreML::LayerNode::~LayerNode(void **this)
{
  uint64_t v4 = this + 13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v4 = this + 10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  if (*((char *)this + 79) < 0) {
    operator delete(this[7]);
  }
  long long v2 = this[3];
  if (v2)
  {
    this[4] = v2;
    operator delete(v2);
  }
  v3 = *this;
  if (*this)
  {
    this[1] = v3;
    operator delete(v3);
  }
}

CoreML::LayerNode *CoreML::LayerNode::LayerNode(CoreML::LayerNode *this, const std::string **a2)
{
  *(_OWORD *)((char *)this + 56) = 0u;
  uint64_t v4 = (uint64_t *)((char *)this + 80);
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((void *)this + 15) = 0;
  std::string::operator=((std::string *)((char *)this + 56), a2[2]);
  int v5 = *((_DWORD *)a2 + 9);
  if (v5 == 10)
  {
    unint64_t v6 = (long long *)a2[3]->__r_.__value_.__r.__words[2];
    unint64_t v7 = *((void *)this + 11);
    if (v7 < *((void *)this + 12))
    {
LABEL_6:
      std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v4, v6);
      uint64_t v8 = v7 + 24;
LABEL_8:
      *((void *)this + 11) = v8;
      goto LABEL_9;
    }
LABEL_7:
    uint64_t v8 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v4, v6);
    goto LABEL_8;
  }
  if (v5 == 11)
  {
    unint64_t v6 = (long long *)a2[3]->__r_.__value_.__r.__words[2];
    unint64_t v7 = *((void *)this + 11);
    if (v7 < *((void *)this + 12)) {
      goto LABEL_6;
    }
    goto LABEL_7;
  }
LABEL_9:
  int v9 = *((_DWORD *)a2 + 9);
  *((_DWORD *)this + 12) = 0;
  *((_DWORD *)this + 13) = v9;
  *((_WORD *)this + 64) = 0;
  return this;
}

void sub_19EACEC24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v2 + 79) < 0) {
    operator delete(*v3);
  }
  int v5 = *(void **)(v2 + 24);
  if (v5)
  {
    *(void *)(v2 + 32) = v5;
    operator delete(v5);
  }
  unint64_t v6 = *(void **)v2;
  if (*(void *)v2)
  {
    *(void *)(v2 + 8) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(a1);
}

void validateLossLayer(const CoreML::Specification::LossLayer *a1, const CoreML::NeuralNetworkValidatorGraph *a2, uint64_t a3)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  CoreML::Result::Result((CoreML::Result *)&v57);
  __p = 0;
  long long v56 = 0uLL;
  int v6 = *((_DWORD *)a2 + 9);
  if (v6 == 11)
  {
    int v9 = *(long long **)(*((void *)a2 + 3) + 16);
    if (*((char *)v9 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v54, *(const std::string::value_type **)v9, *((void *)v9 + 1));
    }
    else
    {
      long long v10 = *v9;
      v54.__r_.__value_.__r.__words[2] = *((void *)v9 + 2);
      *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v10;
    }
    uint64_t v16 = a3 + 24;
    uint64_t v17 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>(a3 + 24, &v54);
    uint64_t v18 = (void *)(a3 + 32);
    if (v18 == (void *)v17)
    {
      std::operator+<char>();
      uint64_t v20 = std::string::append(&v63, "', input is not generated within the graph.");
      int v21 = (void *)v20->__r_.__value_.__r.__words[0];
      v62.__r_.__value_.__r.__words[0] = v20->__r_.__value_.__l.__size_;
      *(std::string::size_type *)((char *)v62.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v20->__r_.__value_.__r.__words[1] + 7);
      char v22 = HIBYTE(v20->__r_.__value_.__r.__words[2]);
      v20->__r_.__value_.__l.__size_ = 0;
      v20->__r_.__value_.__r.__words[2] = 0;
      v20->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v56) < 0) {
        operator delete(__p);
      }
      __p = v21;
      *(void *)&long long v56 = v62.__r_.__value_.__r.__words[0];
      *(void *)((char *)&v56 + 7) = *(std::string::size_type *)((char *)v62.__r_.__value_.__r.__words + 7);
      HIBYTE(v56) = v22;
      if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v63.__r_.__value_.__l.__data_);
      }
      *(void *)a1 = 15;
      std::operator+<char>();
      int v23 = 1;
      goto LABEL_78;
    }
    if (*((_DWORD *)a2 + 9) == 11)
    {
      unint64_t v19 = (uint64_t *)*((void *)a2 + 3);
    }
    else
    {
      CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v17);
      unint64_t v19 = &CoreML::Specification::_MeanSquaredErrorLossLayer_default_instance_;
    }
    uint64_t v34 = v19[3];
    if (*(char *)(v34 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v63, *(const std::string::value_type **)v34, *(void *)(v34 + 8));
    }
    else
    {
      long long v35 = *(_OWORD *)v34;
      v63.__r_.__value_.__r.__words[2] = *(void *)(v34 + 16);
      *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v35;
    }
    if (v18 == std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>(v16, &v63))
    {
      int v23 = 2;
      goto LABEL_76;
    }
    std::operator+<char>();
    v36 = std::string::append(&v62, "', target is generated within the graph.");
    uint64_t v37 = (void *)v36->__r_.__value_.__r.__words[0];
    v60.__r_.__value_.__r.__words[0] = v36->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v60.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v36->__r_.__value_.__r.__words[1] + 7);
    char v38 = HIBYTE(v36->__r_.__value_.__r.__words[2]);
    v36->__r_.__value_.__l.__size_ = 0;
    v36->__r_.__value_.__r.__words[2] = 0;
    v36->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v56) < 0) {
      operator delete(__p);
    }
    __p = v37;
    *(void *)&long long v56 = v60.__r_.__value_.__r.__words[0];
    *(void *)((char *)&v56 + 7) = *(std::string::size_type *)((char *)v60.__r_.__value_.__r.__words + 7);
    HIBYTE(v56) = v38;
    if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v62.__r_.__value_.__l.__data_);
    }
    *(void *)a1 = 15;
    std::operator+<char>();
LABEL_75:
    int v23 = 1;
LABEL_76:
    if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v63.__r_.__value_.__l.__data_);
    }
LABEL_78:
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v54.__r_.__value_.__l.__data_);
    }
    if (v23 == 2)
    {
      *(void *)a1 = v57;
      *(_OWORD *)((char *)a1 + 8) = *(_OWORD *)v58;
      *((void *)a1 + 3) = v59;
      v58[0] = 0;
      v58[1] = 0;
      uint64_t v59 = 0;
    }
    goto LABEL_82;
  }
  if (v6 == 10)
  {
    unint64_t v7 = *(long long **)(*((void *)a2 + 3) + 16);
    if (*((char *)v7 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v54, *(const std::string::value_type **)v7, *((void *)v7 + 1));
    }
    else
    {
      long long v8 = *v7;
      v54.__r_.__value_.__r.__words[2] = *((void *)v7 + 2);
      *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v8;
    }
    uint64_t v14 = (long long *)*((void *)a2 + 2);
    if (*((char *)v14 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v63, *(const std::string::value_type **)v14, *((void *)v14 + 1));
    }
    else
    {
      long long v15 = *v14;
      v63.__r_.__value_.__r.__words[2] = *((void *)v14 + 2);
      *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v15;
    }
    if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v53, v63.__r_.__value_.__l.__data_, v63.__r_.__value_.__l.__size_);
    }
    else {
      std::string v53 = v63;
    }
    uint64_t NodeFromName = CoreML::NeuralNetworkValidatorGraph::getNodeFromName(a3, &v53);
    unint64_t v25 = (uint64_t *)NodeFromName;
    if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v53.__r_.__value_.__l.__data_);
      if (v25)
      {
LABEL_30:
        uint64_t v26 = *v25;
        uint64_t v27 = v25[1];
        if (*v25 == v27)
        {
LABEL_33:
          std::operator+<char>();
          uint64_t v28 = std::string::append(&v62, "', input is not generated from a softmax output.");
          uint64_t v29 = (void *)v28->__r_.__value_.__r.__words[0];
          v60.__r_.__value_.__r.__words[0] = v28->__r_.__value_.__l.__size_;
          *(std::string::size_type *)((char *)v60.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v28->__r_.__value_.__r.__words[1] + 7);
          char v30 = HIBYTE(v28->__r_.__value_.__r.__words[2]);
          v28->__r_.__value_.__l.__size_ = 0;
          v28->__r_.__value_.__r.__words[2] = 0;
          v28->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v56) < 0) {
            operator delete(__p);
          }
          __p = v29;
          *(void *)&long long v56 = v60.__r_.__value_.__r.__words[0];
          *(void *)((char *)&v56 + 7) = *(std::string::size_type *)((char *)v60.__r_.__value_.__r.__words + 7);
          HIBYTE(v56) = v30;
          if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v62.__r_.__value_.__l.__data_);
          }
LABEL_74:
          *(void *)a1 = 15;
          std::operator+<char>();
          goto LABEL_75;
        }
        while (*(_DWORD *)(*(void *)v26 + 48) != 175)
        {
          v26 += 8;
          if (v26 == v27) {
            goto LABEL_33;
          }
        }
        v39 = *(unsigned __int8 **)(*(void *)v26 + 104);
        uint64_t v40 = v39[23];
        if ((v40 & 0x80u) == 0) {
          uint64_t v41 = v39[23];
        }
        else {
          uint64_t v41 = *((void *)v39 + 1);
        }
        std::string::size_type size = HIBYTE(v54.__r_.__value_.__r.__words[2]);
        if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type size = v54.__r_.__value_.__l.__size_;
        }
        if (v41 == size)
        {
          if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v43 = &v54;
          }
          else {
            v43 = (std::string *)v54.__r_.__value_.__r.__words[0];
          }
          if ((v40 & 0x80) == 0)
          {
            if (v39[23])
            {
              while (*v39 == v43->__r_.__value_.__s.__data_[0])
              {
                ++v39;
                v43 = (std::string *)((char *)v43 + 1);
                if (!--v40) {
                  goto LABEL_87;
                }
              }
              goto LABEL_70;
            }
LABEL_87:
            if (*((_DWORD *)a2 + 9) == 10)
            {
              v47 = (uint64_t *)*((void *)a2 + 3);
            }
            else
            {
              CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)NodeFromName);
              v47 = &CoreML::Specification::_CategoricalCrossEntropyLossLayer_default_instance_;
            }
            uint64_t v48 = v47[3];
            if (*(char *)(v48 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v62, *(const std::string::value_type **)v48, *(void *)(v48 + 8));
            }
            else
            {
              long long v49 = *(_OWORD *)v48;
              v62.__r_.__value_.__r.__words[2] = *(void *)(v48 + 16);
              *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v49;
            }
            if ((void *)(a3 + 32) == std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>(a3 + 24, &v62))
            {
              int v23 = 2;
            }
            else
            {
              std::operator+<char>();
              v50 = std::string::append(&v60, "', target is generated within the graph.");
              v51 = (void *)v50->__r_.__value_.__r.__words[0];
              v61[0] = v50->__r_.__value_.__l.__size_;
              *(void *)((char *)v61 + 7) = *(std::string::size_type *)((char *)&v50->__r_.__value_.__r.__words[1] + 7);
              char v52 = HIBYTE(v50->__r_.__value_.__r.__words[2]);
              v50->__r_.__value_.__l.__size_ = 0;
              v50->__r_.__value_.__r.__words[2] = 0;
              v50->__r_.__value_.__r.__words[0] = 0;
              if (SHIBYTE(v56) < 0) {
                operator delete(__p);
              }
              __p = v51;
              *(void *)&long long v56 = v61[0];
              *(void *)((char *)&v56 + 7) = *(void *)((char *)v61 + 7);
              HIBYTE(v56) = v52;
              if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v60.__r_.__value_.__l.__data_);
              }
              *(void *)a1 = 15;
              std::operator+<char>();
              int v23 = 1;
            }
            if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v62.__r_.__value_.__l.__data_);
            }
            goto LABEL_76;
          }
          uint64_t NodeFromName = memcmp(*(const void **)v39, v43, *((void *)v39 + 1));
          if (!NodeFromName) {
            goto LABEL_87;
          }
        }
LABEL_70:
        std::operator+<char>();
        v44 = std::string::append(&v62, "', input is not generated from a softmax output.");
        v45 = (void *)v44->__r_.__value_.__r.__words[0];
        v60.__r_.__value_.__r.__words[0] = v44->__r_.__value_.__l.__size_;
        *(std::string::size_type *)((char *)v60.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v44->__r_.__value_.__r.__words[1] + 7);
        char v46 = HIBYTE(v44->__r_.__value_.__r.__words[2]);
        v44->__r_.__value_.__l.__size_ = 0;
        v44->__r_.__value_.__r.__words[2] = 0;
        v44->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v56) < 0) {
          operator delete(__p);
        }
        __p = v45;
        *(void *)&long long v56 = v60.__r_.__value_.__r.__words[0];
        *(void *)((char *)&v56 + 7) = *(std::string::size_type *)((char *)v60.__r_.__value_.__r.__words + 7);
        HIBYTE(v56) = v46;
        if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v62.__r_.__value_.__l.__data_);
        }
        goto LABEL_74;
      }
    }
    else if (NodeFromName)
    {
      goto LABEL_30;
    }
    std::operator+<char>();
    uint64_t v31 = std::string::append(&v62, "'.");
    unint64_t v32 = (void *)v31->__r_.__value_.__r.__words[0];
    v60.__r_.__value_.__r.__words[0] = v31->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v60.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v31->__r_.__value_.__r.__words[1] + 7);
    char v33 = HIBYTE(v31->__r_.__value_.__r.__words[2]);
    v31->__r_.__value_.__l.__size_ = 0;
    v31->__r_.__value_.__r.__words[2] = 0;
    v31->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v56) < 0) {
      operator delete(__p);
    }
    __p = v32;
    *(void *)&long long v56 = v60.__r_.__value_.__r.__words[0];
    *(void *)((char *)&v56 + 7) = *(std::string::size_type *)((char *)v60.__r_.__value_.__r.__words + 7);
    HIBYTE(v56) = v33;
    if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v62.__r_.__value_.__l.__data_);
    }
    goto LABEL_74;
  }
  std::operator+<char>();
  uint64_t v11 = std::string::append(&v54, "', only cross entropy loss and MSE are supported.");
  uint64_t v12 = (void *)v11->__r_.__value_.__r.__words[0];
  v63.__r_.__value_.__r.__words[0] = v11->__r_.__value_.__l.__size_;
  *(std::string::size_type *)((char *)v63.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v11->__r_.__value_.__r.__words[1] + 7);
  char v13 = HIBYTE(v11->__r_.__value_.__r.__words[2]);
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v56) < 0) {
    operator delete(__p);
  }
  __p = v12;
  *(void *)&long long v56 = v63.__r_.__value_.__r.__words[0];
  *(void *)((char *)&v56 + 7) = *(std::string::size_type *)((char *)v63.__r_.__value_.__r.__words + 7);
  HIBYTE(v56) = v13;
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v54.__r_.__value_.__l.__data_);
  }
  *(void *)a1 = 15;
  std::operator+<char>();
LABEL_82:
  if (SHIBYTE(v56) < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v59) < 0) {
    operator delete(v58[0]);
  }
}

void sub_19EACF434(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (*(char *)(v41 - 89) < 0) {
    operator delete(*(void **)(v41 - 112));
  }
  if (*(char *)(v41 - 57) < 0) {
    operator delete(*(void **)(v41 - 80));
  }
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  _Unwind_Resume(exception_object);
}

void validateOptimizer(const CoreML::Specification::Optimizer *a1, uint64_t a2)
{
  CoreML::Result::Result((CoreML::Result *)&v23);
  v21[0] = 0;
  v21[1] = 0;
  uint64_t v22 = 0;
  int v4 = *(_DWORD *)(a2 + 28);
  if (v4 == 10)
  {
    uint64_t v11 = *(uint64_t **)(a2 + 16);
    if (v11 == &CoreML::Specification::_SGDOptimizer_default_instance_ || !v11[2])
    {
      uint64_t v14 = "SGD optimizer should include learningRate parameter.";
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "learningRate");
      if (v11[2]) {
        uint64_t v12 = (uint64_t *)v11[2];
      }
      else {
        uint64_t v12 = &CoreML::Specification::_DoubleParameter_default_instance_;
      }
      CoreML::validateDoubleParameter((CoreML::Result *)&v18, (uint64_t)__p, (uint64_t)v12);
      uint64_t v23 = v18;
      if (SHIBYTE(v25) < 0) {
        operator delete((void *)v24);
      }
      long long v24 = v19;
      uint64_t v25 = v20;
      HIBYTE(v20) = 0;
      LOBYTE(v19) = 0;
      if (v17 < 0) {
        operator delete(__p[0]);
      }
      if ((v23 & 0xFFFFFFEF) != 0) {
        goto LABEL_55;
      }
      if (v11[3])
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "miniBatchSize");
        if (v11[3]) {
          long long v15 = (uint64_t *)v11[3];
        }
        else {
          long long v15 = &CoreML::Specification::_Int64Parameter_default_instance_;
        }
        CoreML::validateInt64Parameter((CoreML::Result *)&v18, (uint64_t)__p, (uint64_t)v15, 1);
LABEL_71:
        uint64_t v23 = v18;
        if (SHIBYTE(v25) < 0) {
          operator delete((void *)v24);
        }
        long long v24 = v19;
        uint64_t v25 = v20;
        HIBYTE(v20) = 0;
        LOBYTE(v19) = 0;
        if (v17 < 0) {
          operator delete(__p[0]);
        }
        if ((v23 & 0xFFFFFFEF) == 0)
        {
          *(void *)a1 = v23;
          *(_OWORD *)((char *)a1 + 8) = v24;
          uint64_t v13 = v25;
          goto LABEL_56;
        }
LABEL_55:
        *(void *)a1 = v23;
        *(_OWORD *)((char *)a1 + 8) = v24;
        uint64_t v13 = v25;
LABEL_56:
        *((void *)a1 + 3) = v13;
        long long v24 = 0uLL;
        uint64_t v25 = 0;
        goto LABEL_61;
      }
      uint64_t v14 = "SGD optimizer should include miniBatchSize parameter.";
    }
  }
  else
  {
    if (v4 != 11)
    {
      MEMORY[0x19F3C1430](v21, "Optimizer is not recognized.");
      *(void *)a1 = 15;
      std::operator+<char>();
      goto LABEL_61;
    }
    int v5 = *(uint64_t **)(a2 + 16);
    if (v5 == &CoreML::Specification::_AdamOptimizer_default_instance_ || !v5[2])
    {
      uint64_t v14 = "ADAM optimizer should include learningRate parameter.";
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "learningRate");
      if (v5[2]) {
        int v6 = (uint64_t *)v5[2];
      }
      else {
        int v6 = &CoreML::Specification::_DoubleParameter_default_instance_;
      }
      CoreML::validateDoubleParameter((CoreML::Result *)&v18, (uint64_t)__p, (uint64_t)v6);
      uint64_t v23 = v18;
      if (SHIBYTE(v25) < 0) {
        operator delete((void *)v24);
      }
      long long v24 = v19;
      uint64_t v25 = v20;
      HIBYTE(v20) = 0;
      LOBYTE(v19) = 0;
      if (v17 < 0) {
        operator delete(__p[0]);
      }
      if ((v23 & 0xFFFFFFEF) != 0) {
        goto LABEL_55;
      }
      if (v5[3])
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "miniBatchSize");
        if (v5[3]) {
          unint64_t v7 = (uint64_t *)v5[3];
        }
        else {
          unint64_t v7 = &CoreML::Specification::_Int64Parameter_default_instance_;
        }
        CoreML::validateInt64Parameter((CoreML::Result *)&v18, (uint64_t)__p, (uint64_t)v7, 1);
        uint64_t v23 = v18;
        if (SHIBYTE(v25) < 0) {
          operator delete((void *)v24);
        }
        long long v24 = v19;
        uint64_t v25 = v20;
        HIBYTE(v20) = 0;
        LOBYTE(v19) = 0;
        if (v17 < 0) {
          operator delete(__p[0]);
        }
        if ((v23 & 0xFFFFFFEF) != 0) {
          goto LABEL_55;
        }
        if (v5[4])
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "beta1");
          if (v5[4]) {
            long long v8 = (uint64_t *)v5[4];
          }
          else {
            long long v8 = &CoreML::Specification::_DoubleParameter_default_instance_;
          }
          CoreML::validateDoubleParameter((CoreML::Result *)&v18, (uint64_t)__p, (uint64_t)v8);
          uint64_t v23 = v18;
          if (SHIBYTE(v25) < 0) {
            operator delete((void *)v24);
          }
          long long v24 = v19;
          uint64_t v25 = v20;
          HIBYTE(v20) = 0;
          LOBYTE(v19) = 0;
          if (v17 < 0) {
            operator delete(__p[0]);
          }
          if ((v23 & 0xFFFFFFEF) != 0) {
            goto LABEL_55;
          }
          if (v5[5])
          {
            std::string::basic_string[abi:ne180100]<0>(__p, "beta2");
            if (v5[5]) {
              int v9 = (uint64_t *)v5[5];
            }
            else {
              int v9 = &CoreML::Specification::_DoubleParameter_default_instance_;
            }
            CoreML::validateDoubleParameter((CoreML::Result *)&v18, (uint64_t)__p, (uint64_t)v9);
            uint64_t v23 = v18;
            if (SHIBYTE(v25) < 0) {
              operator delete((void *)v24);
            }
            long long v24 = v19;
            uint64_t v25 = v20;
            HIBYTE(v20) = 0;
            LOBYTE(v19) = 0;
            if (v17 < 0) {
              operator delete(__p[0]);
            }
            if ((v23 & 0xFFFFFFEF) != 0) {
              goto LABEL_55;
            }
            if (v5[6])
            {
              std::string::basic_string[abi:ne180100]<0>(__p, "eps");
              if (v5[6]) {
                long long v10 = (uint64_t *)v5[6];
              }
              else {
                long long v10 = &CoreML::Specification::_DoubleParameter_default_instance_;
              }
              CoreML::validateDoubleParameter((CoreML::Result *)&v18, (uint64_t)__p, (uint64_t)v10);
              goto LABEL_71;
            }
            uint64_t v14 = "ADAM optimizer should include eps (epslion) parameter.";
          }
          else
          {
            uint64_t v14 = "ADAM optimizer should include beta2 parameter.";
          }
        }
        else
        {
          uint64_t v14 = "ADAM optimizer should include beta1 parameter.";
        }
      }
      else
      {
        uint64_t v14 = "ADAM optimizer should include miniBatchSize parameter.";
      }
    }
  }
  MEMORY[0x19F3C1430](v21, v14);
  *(void *)a1 = 15;
  std::operator+<char>();
LABEL_61:
  if (SHIBYTE(v22) < 0) {
    operator delete(v21[0]);
  }
  if (SHIBYTE(v25) < 0) {
    operator delete((void *)v24);
  }
}

void sub_19EACFA3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  if (*(char *)(v24 - 33) < 0) {
    operator delete(*(void **)(v24 - 56));
  }
  _Unwind_Resume(exception_object);
}

void validateOtherTopLevelUpdateParameters(const CoreML::Specification::NetworkUpdateParameters *a1, uint64_t *a2)
{
  CoreML::Result::Result((CoreML::Result *)&v14);
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v13 = 0;
  if (a2 == &CoreML::Specification::_NetworkUpdateParameters_default_instance_ || a2[6] == 0)
  {
    MEMORY[0x19F3C1430](__p, "Epochs should be included in neural network update parameters.");
    *(void *)a1 = 15;
    std::operator+<char>();
    if (SHIBYTE(v13) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v7, "epochs");
    if (a2[6]) {
      int v5 = (uint64_t *)a2[6];
    }
    else {
      int v5 = &CoreML::Specification::_Int64Parameter_default_instance_;
    }
    CoreML::validateInt64Parameter((CoreML::Result *)&v9, (uint64_t)v7, (uint64_t)v5, 1);
    uint64_t v14 = v9;
    if (SHIBYTE(v16) < 0) {
      operator delete((void *)v15);
    }
    long long v15 = v10;
    uint64_t v16 = v11;
    HIBYTE(v11) = 0;
    LOBYTE(v10) = 0;
    if (v8 < 0) {
      operator delete(v7[0]);
    }
    if ((v14 & 0xFFFFFFEF) == 0 && a2[8])
    {
      std::string::basic_string[abi:ne180100]<0>(v7, "seed");
      if (a2[8]) {
        int v6 = (uint64_t *)a2[8];
      }
      else {
        int v6 = &CoreML::Specification::_Int64Parameter_default_instance_;
      }
      CoreML::validateInt64Parameter((CoreML::Result *)&v9, (uint64_t)v7, (uint64_t)v6, 0);
      uint64_t v14 = v9;
      if (SHIBYTE(v16) < 0) {
        operator delete((void *)v15);
      }
      long long v15 = v10;
      uint64_t v16 = v11;
      HIBYTE(v11) = 0;
      LOBYTE(v10) = 0;
      if (v8 < 0) {
        operator delete(v7[0]);
      }
    }
    *(void *)a1 = v14;
    *(_OWORD *)((char *)a1 + 8) = v15;
    *((void *)a1 + 3) = v16;
    long long v15 = 0uLL;
    uint64_t v16 = 0;
  }
  if (SHIBYTE(v16) < 0) {
    operator delete((void *)v15);
  }
}

void sub_19EACFC90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v24 - 33) < 0) {
    operator delete(*(void **)(v24 - 56));
  }
  _Unwind_Resume(exception_object);
}

void std::deque<std::string>::push_back(void *a1, long long *a2)
{
  int v4 = (char *)a1[1];
  int v5 = (char *)a1[2];
  unint64_t v6 = (v5 - v4) >> 3;
  if (v5 == v4) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = 170 * v6 - 1;
  }
  unint64_t v8 = a1[4];
  if (v7 != a1[5] + v8) {
    goto LABEL_38;
  }
  BOOL v9 = v8 >= 0xAA;
  unint64_t v10 = v8 - 170;
  if (v9)
  {
    a1[4] = v10;
    uint64_t v13 = *(void *)v4;
    uint64_t v11 = v4 + 8;
    uint64_t v12 = v13;
    a1[1] = v11;
    if (v5 == (char *)a1[3])
    {
      uint64_t v14 = (uint64_t)&v11[-*a1];
      if ((unint64_t)v11 <= *a1)
      {
        if (v5 == (char *)*a1) {
          unint64_t v42 = 1;
        }
        else {
          unint64_t v42 = (uint64_t)&v5[-*a1] >> 2;
        }
        v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_KDInterval>>(v42);
        v45 = &v43[8 * (v42 >> 2)];
        char v46 = (uint64_t *)a1[1];
        int v5 = v45;
        uint64_t v47 = a1[2] - (void)v46;
        if (v47)
        {
          int v5 = &v45[v47 & 0xFFFFFFFFFFFFFFF8];
          uint64_t v48 = 8 * (v47 >> 3);
          long long v49 = &v43[8 * (v42 >> 2)];
          do
          {
            uint64_t v50 = *v46++;
            *(void *)long long v49 = v50;
            v49 += 8;
            v48 -= 8;
          }
          while (v48);
        }
        v51 = (char *)*a1;
        *a1 = v43;
        a1[1] = v45;
        a1[2] = v5;
        a1[3] = &v43[8 * v44];
        if (v51)
        {
          operator delete(v51);
          int v5 = (char *)a1[2];
        }
      }
      else
      {
        uint64_t v15 = v14 >> 3;
        BOOL v16 = v14 >> 3 < -1;
        uint64_t v17 = (v14 >> 3) + 2;
        if (v16) {
          uint64_t v18 = v17;
        }
        else {
          uint64_t v18 = v15 + 1;
        }
        uint64_t v19 = -(v18 >> 1);
        uint64_t v20 = v18 >> 1;
        int v21 = &v11[-8 * v20];
        int64_t v22 = v5 - v11;
        if (v5 != v11)
        {
          memmove(&v11[-8 * v20], v11, v5 - v11);
          int v5 = (char *)a1[1];
        }
        uint64_t v23 = &v5[8 * v19];
        int v5 = &v21[v22];
        a1[1] = v23;
        a1[2] = &v21[v22];
      }
    }
    *(void *)int v5 = v12;
    goto LABEL_36;
  }
  uint64_t v24 = (char *)a1[3];
  uint64_t v25 = (char *)*a1;
  uint64_t v26 = (uint64_t)&v24[-*a1];
  if (v6 >= v26 >> 3)
  {
    uint64_t v29 = v26 >> 2;
    if (v24 == v25) {
      unint64_t v30 = 1;
    }
    else {
      unint64_t v30 = v29;
    }
    uint64_t v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_KDInterval>>(v30);
    uint64_t v33 = v32;
    uint64_t v34 = &v31[8 * v6];
    *(void *)&long long v35 = v31;
    *((void *)&v35 + 1) = v34;
    long long v113 = v35;
    v36 = operator new(0xFF0uLL);
    *(void *)&long long v37 = v34;
    *((void *)&v37 + 1) = &v31[8 * v33];
    if (v6 == v33)
    {
      uint64_t v38 = 8 * v6;
      *(void *)&long long v39 = v113;
      if (v5 - v4 >= 1)
      {
        uint64_t v40 = v38 >> 3;
        if (v40 >= -1) {
          unint64_t v41 = v40 + 1;
        }
        else {
          unint64_t v41 = v40 + 2;
        }
        v34 -= 8 * (v41 >> 1);
        *(void *)&long long v37 = v34;
        *((void *)&v39 + 1) = v34;
        goto LABEL_68;
      }
      uint64_t v77 = v38 >> 2;
      if (v5 == v4) {
        unint64_t v78 = 1;
      }
      else {
        unint64_t v78 = v77;
      }
      v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_KDInterval>>(v78);
      uint64_t v34 = &v79[8 * (v78 >> 2)];
      *(void *)&long long v39 = v79;
      *((void *)&v39 + 1) = v34;
      *(void *)&long long v37 = v34;
      *((void *)&v37 + 1) = &v79[8 * v80];
      if (!v31)
      {
LABEL_68:
        *(void *)uint64_t v34 = v36;
        *(void *)&long long v37 = v37 + 8;
        for (uint64_t i = a1[2]; i != a1[1]; i -= 8)
        {
          v82 = (void *)*((void *)&v39 + 1);
          if (*((void *)&v39 + 1) == (void)v39)
          {
            v84 = (unsigned char *)v37;
            if ((unint64_t)v37 >= *((void *)&v37 + 1))
            {
              if (*((void *)&v37 + 1) == *((void *)&v39 + 1)) {
                unint64_t v89 = 1;
              }
              else {
                unint64_t v89 = (uint64_t)(*((void *)&v37 + 1) - *((void *)&v39 + 1)) >> 2;
              }
              v90 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_KDInterval>>(v89);
              v83 = &v90[(2 * v89 + 6) & 0xFFFFFFFFFFFFFFF8];
              v92 = v83;
              uint64_t v93 = v84 - (unsigned char *)v82;
              if (v84 != (unsigned char *)v82)
              {
                v92 = &v83[v93 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v94 = 8 * (v93 >> 3);
                v95 = v83;
                v96 = v82;
                do
                {
                  uint64_t v97 = *v96++;
                  *(void *)v95 = v97;
                  v95 += 8;
                  v94 -= 8;
                }
                while (v94);
              }
              *(void *)&long long v39 = v90;
              *((void *)&v39 + 1) = v83;
              *(void *)&long long v37 = v92;
              *((void *)&v37 + 1) = &v90[8 * v91];
              if (v82)
              {
                long long v111 = v37;
                long long v115 = v39;
                operator delete(v82);
                long long v37 = v111;
                long long v39 = v115;
              }
            }
            else
            {
              uint64_t v85 = (uint64_t)(*((void *)&v37 + 1) - v37) >> 3;
              if (v85 >= -1) {
                uint64_t v86 = v85 + 1;
              }
              else {
                uint64_t v86 = v85 + 2;
              }
              uint64_t v87 = v86 >> 1;
              uint64_t v88 = v37 + 8 * (v86 >> 1);
              v83 = (char *)(v88 - (v37 - *((void *)&v39 + 1)));
              if ((void)v37 == *((void *)&v39 + 1))
              {
                v84 = (unsigned char *)*((void *)&v39 + 1);
              }
              else
              {
                uint64_t v112 = *((void *)&v37 + 1);
                uint64_t v114 = v39;
                memmove((void *)(v88 - (v37 - *((void *)&v39 + 1))), *((const void **)&v39 + 1), v37 - *((void *)&v39 + 1));
                *((void *)&v37 + 1) = v112;
                *(void *)&long long v39 = v114;
              }
              *((void *)&v39 + 1) = v83;
              *(void *)&long long v37 = &v84[8 * v87];
            }
          }
          else
          {
            v83 = (char *)*((void *)&v39 + 1);
          }
          uint64_t v98 = *(void *)(i - 8);
          *((void *)v83 - 1) = v98;
          *((void *)&v39 + 1) -= 8;
        }
        v99 = (char *)*a1;
        *(_OWORD *)a1 = v39;
        *((_OWORD *)a1 + 1) = v37;
        if (v99)
        {
          operator delete(v99);
          int v5 = (char *)a1[2];
        }
        else
        {
          int v5 = (char *)v37;
        }
        goto LABEL_37;
      }
      long long v110 = v37;
      long long v113 = v39;
      operator delete(v31);
      long long v37 = v110;
    }
    long long v39 = v113;
    goto LABEL_68;
  }
  uint64_t v27 = operator new(0xFF0uLL);
  uint64_t v28 = v27;
  if (v24 == v5)
  {
    if (v4 == v25)
    {
      if (v5 == v4) {
        unint64_t v55 = 1;
      }
      else {
        unint64_t v55 = (v24 - v4) >> 2;
      }
      uint64_t v56 = 2 * v55;
      uint64_t v57 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_KDInterval>>(v55);
      int v4 = &v57[(v56 + 6) & 0xFFFFFFFFFFFFFFF8];
      uint64_t v59 = (uint64_t *)a1[1];
      std::string v60 = v4;
      uint64_t v61 = a1[2] - (void)v59;
      if (v61)
      {
        std::string v60 = &v4[v61 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v62 = 8 * (v61 >> 3);
        std::string v63 = v4;
        do
        {
          uint64_t v64 = *v59++;
          *(void *)std::string v63 = v64;
          v63 += 8;
          v62 -= 8;
        }
        while (v62);
      }
      v65 = (char *)*a1;
      *a1 = v57;
      a1[1] = v4;
      a1[2] = v60;
      a1[3] = &v57[8 * v58];
      if (v65)
      {
        operator delete(v65);
        int v4 = (char *)a1[1];
      }
    }
    *((void *)v4 - 1) = v28;
    v66 = (char *)a1[1];
    v67 = (char *)a1[2];
    a1[1] = v66 - 8;
    uint64_t v68 = *((void *)v66 - 1);
    a1[1] = v66;
    if (v67 == (char *)a1[3])
    {
      uint64_t v69 = (uint64_t)&v66[-*a1];
      if ((unint64_t)v66 <= *a1)
      {
        if (v67 == (char *)*a1) {
          unint64_t v100 = 1;
        }
        else {
          unint64_t v100 = (uint64_t)&v67[-*a1] >> 2;
        }
        v101 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_KDInterval>>(v100);
        v103 = &v101[8 * (v100 >> 2)];
        v104 = (uint64_t *)a1[1];
        v67 = v103;
        uint64_t v105 = a1[2] - (void)v104;
        if (v105)
        {
          v67 = &v103[v105 & 0xFFFFFFFFFFFFFFF8];
          uint64_t v106 = 8 * (v105 >> 3);
          v107 = &v101[8 * (v100 >> 2)];
          do
          {
            uint64_t v108 = *v104++;
            *(void *)v107 = v108;
            v107 += 8;
            v106 -= 8;
          }
          while (v106);
        }
        v109 = (char *)*a1;
        *a1 = v101;
        a1[1] = v103;
        a1[2] = v67;
        a1[3] = &v101[8 * v102];
        if (v109)
        {
          operator delete(v109);
          v67 = (char *)a1[2];
        }
      }
      else
      {
        uint64_t v70 = v69 >> 3;
        BOOL v16 = v69 >> 3 < -1;
        uint64_t v71 = (v69 >> 3) + 2;
        if (v16) {
          uint64_t v72 = v71;
        }
        else {
          uint64_t v72 = v70 + 1;
        }
        uint64_t v73 = -(v72 >> 1);
        uint64_t v74 = v72 >> 1;
        v75 = &v66[-8 * v74];
        int64_t v76 = v67 - v66;
        if (v67 != v66)
        {
          memmove(&v66[-8 * v74], v66, v67 - v66);
          v66 = (char *)a1[1];
        }
        v67 = &v75[v76];
        a1[1] = &v66[8 * v73];
        a1[2] = &v75[v76];
      }
    }
    *(void *)v67 = v68;
  }
  else
  {
    *(void *)int v5 = v27;
  }
LABEL_36:
  int v5 = (char *)(a1[2] + 8);
  a1[2] = v5;
LABEL_37:
  int v4 = (char *)a1[1];
LABEL_38:
  if (v5 == v4)
  {
    std::string v53 = 0;
  }
  else
  {
    unint64_t v52 = a1[5] + a1[4];
    std::string v53 = (std::string *)(*(void *)&v4[8 * (v52 / 0xAA)] + 24 * (v52 % 0xAA));
  }
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v53, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v54 = *a2;
    v53->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v53->__r_.__value_.__l.__data_ = v54;
  }
  ++a1[5];
}

void sub_19EAD027C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11)
{
  operator delete(v11);
  if ((void)a11) {
    operator delete((void *)a11);
  }
  _Unwind_Resume(a1);
}

void std::deque<std::string>::pop_front(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 32);
  unint64_t v3 = *(void *)(*(void *)(a1 + 8) + 8 * (v2 / 0xAA)) + 24 * (v2 % 0xAA);
  if (*(char *)(v3 + 23) < 0)
  {
    operator delete(*(void **)v3);
    unint64_t v2 = *(void *)(a1 + 32);
  }
  uint64_t v4 = *(void *)(a1 + 40) - 1;
  unint64_t v5 = v2 + 1;
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 40) = v4;
  if (v5 >= 0x154)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 170;
  }
}

uint64_t CoreML::NeuralNetworkValidatorGraph::getNodeFromName(uint64_t a1, void *a2)
{
  if ((void *)(a1 + 8) == std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>(a1, a2))return 0; {
  uint64_t v4 = *std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__find_equal<std::string>(a1, &v6, a2);
  }
  if (!v4) {
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  }
  return *(void *)(v4 + 56);
}

uint64_t std::deque<std::string>::~deque[abi:ne180100](uint64_t a1)
{
  unint64_t v2 = *(void ***)(a1 + 8);
  unint64_t v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    uint64_t v4 = (void *)(a1 + 40);
    unint64_t v3 = *(void ***)(a1 + 8);
  }
  else
  {
    uint64_t v4 = (void *)(a1 + 40);
    unint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = &v2[v5 / 0xAA];
    unint64_t v7 = (unint64_t)*v6;
    unint64_t v8 = (unint64_t)*v6 + 24 * (v5 % 0xAA);
    unint64_t v9 = (unint64_t)v2[(*(void *)(a1 + 40) + v5) / 0xAA] + 24 * ((*(void *)(a1 + 40) + v5) % 0xAA);
    if (v8 != v9)
    {
      do
      {
        if (*(char *)(v8 + 23) < 0)
        {
          operator delete(*(void **)v8);
          unint64_t v7 = (unint64_t)*v6;
        }
        v8 += 24;
        if (v8 - v7 == 4080)
        {
          unint64_t v10 = (unint64_t)v6[1];
          ++v6;
          unint64_t v7 = v10;
          unint64_t v8 = v10;
        }
      }
      while (v8 != v9);
      unint64_t v2 = *(void ***)(a1 + 8);
      unint64_t v3 = *(void ***)(a1 + 16);
    }
  }
  *uint64_t v4 = 0;
  unint64_t v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      unint64_t v3 = *(void ***)(a1 + 16);
      unint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v11 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v12 = v11 >> 3;
  if (v12 == 1)
  {
    uint64_t v13 = 85;
    goto LABEL_16;
  }
  if (v12 == 2)
  {
    uint64_t v13 = 170;
LABEL_16:
    *(void *)(a1 + 32) = v13;
  }
  if (v2 != v3)
  {
    do
    {
      uint64_t v14 = *v2++;
      operator delete(v14);
    }
    while (v2 != v3);
    uint64_t v16 = *(void *)(a1 + 8);
    uint64_t v15 = *(void *)(a1 + 16);
    if (v15 != v16) {
      *(void *)(a1 + 16) = v15 + ((v16 - v15 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::vector<CoreML::LayerNode>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  v1 = *a1;
  unint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 136;
        std::allocator<CoreML::LayerNode>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<CoreML::LayerNode>::destroy[abi:ne180100](uint64_t a1)
{
  uint64_t v4 = (void **)(a1 + 104);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v4 = (void **)(a1 + 80);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  unint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  unint64_t v3 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v3;
    operator delete(v3);
  }
}

void *std::__tree<std::__value_type<std::string,CoreML::LayerNode *>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::LayerNode *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::LayerNode *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, void *a2, long long **a3)
{
  unint64_t v5 = (uint64_t **)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__find_equal<std::string>(a1, &v15, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    unint64_t v7 = v5;
    uint64_t v6 = operator new(0x40uLL);
    unint64_t v8 = (std::string *)(v6 + 4);
    unint64_t v9 = *a3;
    if (*((char *)*a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v9, *((void *)v9 + 1));
    }
    else
    {
      long long v10 = *v9;
      v6[6] = *((void *)v9 + 2);
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v10;
    }
    v6[7] = 0;
    uint64_t v11 = v15;
    *uint64_t v6 = 0;
    v6[1] = 0;
    v6[2] = v11;
    *unint64_t v7 = v6;
    uint64_t v12 = **(void **)a1;
    uint64_t v13 = v6;
    if (v12)
    {
      *(void *)a1 = v12;
      uint64_t v13 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 8), v13);
    ++*(void *)(a1 + 16);
  }
  return v6;
}

void sub_19EAD06F0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<CoreML::LayerNode>>(unint64_t a1)
{
  if (a1 >= 0x1E1E1E1E1E1E1E2) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(136 * a1);
}

void std::vector<CoreML::LayerNode>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v6 = a2[1];
  while (v4 != v5)
  {
    v6 -= 136;
    v4 -= 136;
    std::allocator<CoreML::LayerNode>::construct[abi:ne180100]<CoreML::LayerNode,CoreML::LayerNode>(v6, v4);
  }
  a2[1] = v6;
  uint64_t v7 = *a1;
  *a1 = v6;
  a2[1] = v7;
  uint64_t v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

uint64_t std::__split_buffer<CoreML::LayerNode>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 136;
    std::allocator<CoreML::LayerNode>::destroy[abi:ne180100](i - 136);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void validateUpdatableNeuralNetwork<CoreML::Specification::NeuralNetworkRegressor>(void **a1, uint64_t a2)
{
  uint64_t v114 = *MEMORY[0x1E4F143B8];
  CoreML::Result::Result((CoreML::Result *)a1);
  CoreML::Result::Result((CoreML::Result *)__p);
  LODWORD(v4) = *(_DWORD *)(a2 + 24);
  if ((int)v4 < 1)
  {
LABEL_16:
    unint64_t v100 = 0;
    long long v101 = 0uLL;
    MEMORY[0x19F3C1430](&v100, "The model is marked as updatable, but none of the layers are updatable.");
    uint64_t v106 = 14;
    std::operator+<char>();
  }
  else
  {
    uint64_t v5 = 0;
    char v6 = 0;
    while (1)
    {
      while (1)
      {
        uint64_t v7 = *(void *)(*(void *)(a2 + 32) + 8 + 8 * v5);
        if (*(unsigned char *)(v7 + 120)) {
          break;
        }
        if (++v5 >= (int)v4)
        {
          if ((v6 & 1) == 0) {
            goto LABEL_16;
          }
LABEL_15:
          long long v107 = *(_OWORD *)&__p[1];
          uint64_t v106 = (uint64_t)__p[0];
          uint64_t v108 = (uint64_t *)__p[3];
          memset(&__p[1], 0, 24);
          goto LABEL_19;
        }
      }
      int v8 = *(_DWORD *)(v7 + 140);
      if (v8 != 100 && v8 != 420 && v8 != 140) {
        break;
      }
      validateWeightParamsUpdatable((const CoreML::Specification::NeuralNetworkLayer *)&v100, v7);
      int v9 = (int)v100;
      __p[0] = v100;
      if (SHIBYTE(__p[3]) < 0)
      {
        operator delete(__p[1]);
        int v9 = (int)__p[0];
      }
      *(_OWORD *)&__p[1] = v101;
      __p[3] = v102;
      if ((v9 & 0xFFFFFFEF) == 0)
      {
        ++v5;
        char v6 = 1;
        uint64_t v4 = *(int *)(a2 + 24);
        if (v5 < v4) {
          continue;
        }
      }
      goto LABEL_15;
    }
    std::operator+<char>();
    v79 = std::string::append(&v104, "' is marked as updatable, however it is not supported as the type of this layer is neither convolution nor inner-product.");
    uint64_t v80 = (void *)v79->__r_.__value_.__r.__words[0];
    v110.__r_.__value_.__r.__words[0] = v79->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v110.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v79->__r_.__value_.__r.__words[1] + 7);
    char v81 = HIBYTE(v79->__r_.__value_.__r.__words[2]);
    v79->__r_.__value_.__l.__size_ = 0;
    v79->__r_.__value_.__r.__words[2] = 0;
    v79->__r_.__value_.__r.__words[0] = 0;
    *(void *)((char *)&v101 + 7) = *(std::string::size_type *)((char *)v110.__r_.__value_.__r.__words + 7);
    unint64_t v100 = v80;
    *(void *)&long long v101 = v110.__r_.__value_.__r.__words[0];
    HIBYTE(v101) = v81;
    if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v104.__r_.__value_.__l.__data_);
    }
    uint64_t v106 = 14;
    std::operator+<char>();
  }
  if (SHIBYTE(v101) < 0) {
    operator delete(v100);
  }
LABEL_19:
  if (SHIBYTE(__p[3]) < 0) {
    operator delete(__p[1]);
  }
  int v10 = v106;
  *a1 = (void *)v106;
  if (*((char *)a1 + 31) < 0)
  {
    operator delete(a1[1]);
    int v10 = *(_DWORD *)a1;
  }
  *(_OWORD *)(a1 + 1) = v107;
  a1[3] = v108;
  if ((v10 & 0xFFFFFFEF) == 0)
  {
    v83 = a1 + 1;
    CoreML::Result::Result((CoreML::Result *)__p);
    long long v107 = 0uLL;
    uint64_t v106 = (uint64_t)&v107;
    memset(&v104, 0, sizeof(v104));
    if (*(int *)(a2 + 24) < 1)
    {
LABEL_40:
      uint64_t v18 = *(void *)(a2 + 64)
          ? *(uint64_t **)(a2 + 64)
          : &CoreML::Specification::_NetworkUpdateParameters_default_instance_;
      if (*((int *)v18 + 6) < 1)
      {
LABEL_59:
        long long v101 = *(_OWORD *)&__p[1];
        unint64_t v100 = __p[0];
        uint64_t v102 = (char **)__p[3];
        memset(&__p[1], 0, 24);
      }
      else
      {
        uint64_t v19 = 0;
        while (1)
        {
          uint64_t v20 = *(long long **)(*(void *)(v18[4] + 8 * v19 + 8) + 16);
          if (*((char *)v20 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v110, *(const std::string::value_type **)v20, *((void *)v20 + 1));
          }
          else
          {
            long long v21 = *v20;
            v110.__r_.__value_.__r.__words[2] = *((void *)v20 + 2);
            *(_OWORD *)&v110.__r_.__value_.__l.__data_ = v21;
          }
          uint64_t v22 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__count_unique<std::string>((void *)v107, &v110);
          if (v22)
          {
            std::operator+<char>();
            uint64_t v23 = std::string::append(&v99, "', i.e., there are more than one layers or loss layers with this name.");
            std::string::size_type v24 = v23->__r_.__value_.__r.__words[0];
            v113.__r_.__value_.__r.__words[0] = v23->__r_.__value_.__l.__size_;
            *(std::string::size_type *)((char *)v113.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v23->__r_.__value_.__r.__words[1] + 7);
            char v25 = HIBYTE(v23->__r_.__value_.__r.__words[2]);
            v23->__r_.__value_.__l.__size_ = 0;
            v23->__r_.__value_.__r.__words[2] = 0;
            v23->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v104.__r_.__value_.__l.__data_);
            }
            v104.__r_.__value_.__r.__words[0] = v24;
            v104.__r_.__value_.__l.__size_ = v113.__r_.__value_.__r.__words[0];
            *(std::string::size_type *)((char *)&v104.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v113.__r_.__value_.__r.__words + 7);
            *((unsigned char *)&v104.__r_.__value_.__s + 23) = v25;
            if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v99.__r_.__value_.__l.__data_);
            }
            unint64_t v100 = (void *)14;
            std::operator+<char>();
          }
          else
          {
            std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v106, &v110, (uint64_t)&v110);
          }
          if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v110.__r_.__value_.__l.__data_);
          }
          if (v22) {
            break;
          }
          if (++v19 >= *((int *)v18 + 6)) {
            goto LABEL_59;
          }
        }
      }
    }
    else
    {
      uint64_t v11 = 0;
      while (1)
      {
        uint64_t v12 = *(long long **)(*(void *)(*(void *)(a2 + 32) + 8 * v11 + 8) + 112);
        if (*((char *)v12 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v110, *(const std::string::value_type **)v12, *((void *)v12 + 1));
        }
        else
        {
          long long v13 = *v12;
          v110.__r_.__value_.__r.__words[2] = *((void *)v12 + 2);
          *(_OWORD *)&v110.__r_.__value_.__l.__data_ = v13;
        }
        uint64_t v14 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__count_unique<std::string>((void *)v107, &v110);
        if (v14)
        {
          std::operator+<char>();
          uint64_t v15 = std::string::append(&v99, "', i.e., there are more than one layers or loss layers with this name.");
          std::string::size_type v16 = v15->__r_.__value_.__r.__words[0];
          v113.__r_.__value_.__r.__words[0] = v15->__r_.__value_.__l.__size_;
          *(std::string::size_type *)((char *)v113.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v15->__r_.__value_.__r.__words[1] + 7);
          char v17 = HIBYTE(v15->__r_.__value_.__r.__words[2]);
          v15->__r_.__value_.__l.__size_ = 0;
          v15->__r_.__value_.__r.__words[2] = 0;
          v15->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v104.__r_.__value_.__l.__data_);
          }
          v104.__r_.__value_.__r.__words[0] = v16;
          v104.__r_.__value_.__l.__size_ = v113.__r_.__value_.__r.__words[0];
          *(std::string::size_type *)((char *)&v104.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v113.__r_.__value_.__r.__words + 7);
          *((unsigned char *)&v104.__r_.__value_.__s + 23) = v17;
          if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v99.__r_.__value_.__l.__data_);
          }
          unint64_t v100 = (void *)14;
          std::operator+<char>();
        }
        else
        {
          std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v106, &v110, (uint64_t)&v110);
        }
        if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v110.__r_.__value_.__l.__data_);
        }
        if (v14) {
          break;
        }
        if (++v11 >= *(int *)(a2 + 24)) {
          goto LABEL_40;
        }
      }
    }
    if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v104.__r_.__value_.__l.__data_);
    }
    std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy((char *)v107);
    uint64_t v26 = a1;
    if (SHIBYTE(__p[3]) < 0) {
      operator delete(__p[1]);
    }
    int v27 = (int)v100;
    *a1 = v100;
    if (*((char *)a1 + 31) < 0)
    {
      operator delete(a1[1]);
      int v27 = *(_DWORD *)a1;
    }
    *(_OWORD *)v83 = v101;
    a1[3] = v102;
    if ((v27 & 0xFFFFFFEF) == 0)
    {
      CoreML::Result::Result((CoreML::Result *)&v104);
      uint64_t v28 = *(uint64_t **)(a2 + 64);
      if (!v28) {
        uint64_t v28 = &CoreML::Specification::_NetworkUpdateParameters_default_instance_;
      }
      uint64_t v29 = *((int *)v28 + 6);
      if ((int)v29 >= 2)
      {
        memset(__p, 0, 24);
        MEMORY[0x19F3C1430](__p, "This model has more than one loss layers specified, which is not supported at the moment.");
        v110.__r_.__value_.__r.__words[0] = 15;
        std::operator+<char>();
        if (SHIBYTE(__p[2]) < 0) {
          operator delete(__p[0]);
        }
        goto LABEL_195;
      }
      unint64_t v100 = &v101;
      long long v101 = 0uLL;
      v103[0] = 0;
      v103[1] = 0;
      uint64_t v102 = v103;
      memset(&v99, 0, sizeof(v99));
      std::vector<CoreML::LayerNode>::resize((uint64_t *)&v99, *(int *)(a2 + 24) + v29);
      if (*(int *)(a2 + 24) >= 1)
      {
        uint64_t v30 = 0;
        do
        {
          CoreML::LayerNode::LayerNode((CoreML::LayerNode *)__p, *(const CoreML::Specification::NeuralNetworkLayer **)(*(void *)(a2 + 32) + 8 * v30 + 8));
          std::string::size_type size = v99.__r_.__value_.__l.__size_;
          if (v99.__r_.__value_.__l.__size_ >= v99.__r_.__value_.__r.__words[2])
          {
            unint64_t v34 = 0xF0F0F0F0F0F0F0F1
                * ((uint64_t)(v99.__r_.__value_.__l.__size_ - v99.__r_.__value_.__r.__words[0]) >> 3);
            unint64_t v35 = v34 + 1;
            if (v34 + 1 > 0x1E1E1E1E1E1E1E1) {
              std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
            }
            if (0xE1E1E1E1E1E1E1E2
               * ((uint64_t)(v99.__r_.__value_.__r.__words[2] - v99.__r_.__value_.__r.__words[0]) >> 3) > v35)
              unint64_t v35 = 0xE1E1E1E1E1E1E1E2
                  * ((uint64_t)(v99.__r_.__value_.__r.__words[2] - v99.__r_.__value_.__r.__words[0]) >> 3);
            if (0xF0F0F0F0F0F0F0F1
               * ((uint64_t)(v99.__r_.__value_.__r.__words[2] - v99.__r_.__value_.__r.__words[0]) >> 3) >= 0xF0F0F0F0F0F0F0)
              unint64_t v36 = 0x1E1E1E1E1E1E1E1;
            else {
              unint64_t v36 = v35;
            }
            v109 = &v99.__r_.__value_.__s.__data_[16];
            long long v37 = (uint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<CoreML::LayerNode>>(v36);
            uint64_t v38 = &v37[17 * v34];
            uint64_t v106 = (uint64_t)v37;
            *(void *)&long long v107 = v38;
            uint64_t v108 = &v37[17 * v39];
            uint64_t *v38 = 0;
            v38[1] = 0;
            v38[2] = 0;
            *(_OWORD *)uint64_t v38 = *(_OWORD *)__p;
            v38[2] = (uint64_t)__p[2];
            memset(__p, 0, 24);
            v38[3] = 0;
            v38[4] = 0;
            v38[5] = 0;
            *(_OWORD *)(v38 + 3) = *(_OWORD *)&__p[3];
            v38[5] = (uint64_t)__p[5];
            memset(&__p[3], 0, 24);
            v38[6] = v91;
            long long v40 = v92;
            v38[9] = v93;
            *(_OWORD *)(v38 + 7) = v40;
            uint64_t v93 = 0;
            long long v92 = 0uLL;
            v38[10] = 0;
            v38[11] = 0;
            v38[12] = 0;
            *((_OWORD *)v38 + 5) = v94;
            v38[12] = v95;
            long long v94 = 0uLL;
            uint64_t v95 = 0;
            v38[13] = 0;
            v38[14] = 0;
            v38[15] = 0;
            *(_OWORD *)(v38 + 13) = v96;
            v38[15] = v97;
            long long v96 = 0uLL;
            uint64_t v97 = 0;
            *((_WORD *)v38 + 64) = v98;
            *((void *)&v107 + 1) = v38 + 17;
            std::vector<CoreML::LayerNode>::__swap_out_circular_buffer((uint64_t *)&v99, &v106);
            std::string::size_type v33 = v99.__r_.__value_.__l.__size_;
            std::__split_buffer<CoreML::LayerNode>::~__split_buffer((uint64_t)&v106);
          }
          else
          {
            *(void *)(v99.__r_.__value_.__l.__size_ + 16) = 0;
            *(void *)(size + 24) = 0;
            *(void *)std::string::size_type size = 0;
            *(void *)(size + 8) = 0;
            *(_OWORD *)std::string::size_type size = *(_OWORD *)__p;
            *(void **)(size + 16) = __p[2];
            memset(__p, 0, 24);
            *(void *)(size + 32) = 0;
            *(void *)(size + 40) = 0;
            *(_OWORD *)(size + 24) = *(_OWORD *)&__p[3];
            *(void **)(size + 40) = __p[5];
            memset(&__p[3], 0, 24);
            *(void *)(size + 48) = v91;
            long long v32 = v92;
            *(void *)(size + 72) = v93;
            *(void *)(size + 80) = 0;
            *(_OWORD *)(size + 56) = v32;
            uint64_t v93 = 0;
            long long v92 = 0uLL;
            *(void *)(size + 88) = 0;
            *(void *)(size + 96) = 0;
            *(_OWORD *)(size + 80) = v94;
            long long v94 = 0uLL;
            *(void *)(size + 96) = v95;
            *(void *)(size + 104) = 0;
            uint64_t v95 = 0;
            *(void *)(size + 112) = 0;
            *(void *)(size + 120) = 0;
            *(_OWORD *)(size + 104) = v96;
            *(void *)(size + 120) = v97;
            long long v96 = 0uLL;
            uint64_t v97 = 0;
            *(_WORD *)(size + 128) = v98;
            std::string::size_type v33 = size + 136;
          }
          v99.__r_.__value_.__l.__size_ = v33;
          uint64_t v106 = (uint64_t)&v96;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v106);
          uint64_t v106 = (uint64_t)&v94;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v106);
          if (SHIBYTE(v93) < 0) {
            operator delete((void *)v92);
          }
          if (__p[3])
          {
            __p[4] = __p[3];
            operator delete(__p[3]);
          }
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          CoreML::NeuralNetworkValidatorGraph::insertNode((CoreML::NeuralNetworkValidatorGraph *)&v100, (CoreML::LayerNode *)(v99.__r_.__value_.__l.__size_ - 136));
          ++v30;
        }
        while (v30 < *(int *)(a2 + 24));
      }
      unint64_t v41 = *(uint64_t **)(a2 + 64);
      if (!v41) {
        unint64_t v41 = &CoreML::Specification::_NetworkUpdateParameters_default_instance_;
      }
      if (*((int *)v41 + 6) >= 1)
      {
        uint64_t v42 = 0;
        while (1)
        {
          v43 = *(const std::string ***)(v41[4] + 8 * v42 + 8);
          CoreML::LayerNode::LayerNode((CoreML::LayerNode *)__p, v43);
          std::string::size_type v44 = v99.__r_.__value_.__l.__size_;
          if (v99.__r_.__value_.__l.__size_ >= v99.__r_.__value_.__r.__words[2])
          {
            unint64_t v47 = 0xF0F0F0F0F0F0F0F1
                * ((uint64_t)(v99.__r_.__value_.__l.__size_ - v99.__r_.__value_.__r.__words[0]) >> 3);
            unint64_t v48 = v47 + 1;
            if (v47 + 1 > 0x1E1E1E1E1E1E1E1) {
              std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
            }
            if (0xE1E1E1E1E1E1E1E2
               * ((uint64_t)(v99.__r_.__value_.__r.__words[2] - v99.__r_.__value_.__r.__words[0]) >> 3) > v48)
              unint64_t v48 = 0xE1E1E1E1E1E1E1E2
                  * ((uint64_t)(v99.__r_.__value_.__r.__words[2] - v99.__r_.__value_.__r.__words[0]) >> 3);
            unint64_t v49 = 0xF0F0F0F0F0F0F0F1
                * ((uint64_t)(v99.__r_.__value_.__r.__words[2] - v99.__r_.__value_.__r.__words[0]) >> 3) >= 0xF0F0F0F0F0F0F0
                ? 0x1E1E1E1E1E1E1E1
                : v48;
            v109 = &v99.__r_.__value_.__s.__data_[16];
            uint64_t v50 = (uint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<CoreML::LayerNode>>(v49);
            v51 = &v50[17 * v47];
            uint64_t v106 = (uint64_t)v50;
            *(void *)&long long v107 = v51;
            uint64_t v108 = &v50[17 * v52];
            uint64_t *v51 = 0;
            v51[1] = 0;
            v51[2] = 0;
            *(_OWORD *)v51 = *(_OWORD *)__p;
            v51[2] = (uint64_t)__p[2];
            memset(__p, 0, 24);
            v51[3] = 0;
            v51[4] = 0;
            v51[5] = 0;
            *(_OWORD *)(v51 + 3) = *(_OWORD *)&__p[3];
            v51[5] = (uint64_t)__p[5];
            memset(&__p[3], 0, 24);
            v51[6] = v91;
            long long v53 = v92;
            v51[9] = v93;
            *(_OWORD *)(v51 + 7) = v53;
            uint64_t v93 = 0;
            long long v92 = 0uLL;
            v51[10] = 0;
            v51[11] = 0;
            v51[12] = 0;
            *((_OWORD *)v51 + 5) = v94;
            v51[12] = v95;
            long long v94 = 0uLL;
            uint64_t v95 = 0;
            v51[13] = 0;
            v51[14] = 0;
            v51[15] = 0;
            *(_OWORD *)(v51 + 13) = v96;
            v51[15] = v97;
            long long v96 = 0uLL;
            uint64_t v97 = 0;
            *((_WORD *)v51 + 64) = v98;
            *((void *)&v107 + 1) = v51 + 17;
            std::vector<CoreML::LayerNode>::__swap_out_circular_buffer((uint64_t *)&v99, &v106);
            std::string::size_type v46 = v99.__r_.__value_.__l.__size_;
            std::__split_buffer<CoreML::LayerNode>::~__split_buffer((uint64_t)&v106);
          }
          else
          {
            *(void *)(v99.__r_.__value_.__l.__size_ + 16) = 0;
            *(void *)(v44 + 24) = 0;
            *(void *)std::string::size_type v44 = 0;
            *(void *)(v44 + 8) = 0;
            *(_OWORD *)std::string::size_type v44 = *(_OWORD *)__p;
            *(void **)(v44 + 16) = __p[2];
            memset(__p, 0, 24);
            *(void *)(v44 + 32) = 0;
            *(void *)(v44 + 40) = 0;
            *(_OWORD *)(v44 + 24) = *(_OWORD *)&__p[3];
            *(void **)(v44 + 40) = __p[5];
            memset(&__p[3], 0, 24);
            *(void *)(v44 + 48) = v91;
            long long v45 = v92;
            *(void *)(v44 + 72) = v93;
            *(void *)(v44 + 80) = 0;
            *(_OWORD *)(v44 + 56) = v45;
            uint64_t v93 = 0;
            long long v92 = 0uLL;
            *(void *)(v44 + 88) = 0;
            *(void *)(v44 + 96) = 0;
            *(_OWORD *)(v44 + 80) = v94;
            long long v94 = 0uLL;
            *(void *)(v44 + 96) = v95;
            *(void *)(v44 + 104) = 0;
            uint64_t v95 = 0;
            *(void *)(v44 + 112) = 0;
            *(void *)(v44 + 120) = 0;
            *(_OWORD *)(v44 + 104) = v96;
            *(void *)(v44 + 120) = v97;
            long long v96 = 0uLL;
            uint64_t v97 = 0;
            *(_WORD *)(v44 + 128) = v98;
            std::string::size_type v46 = v44 + 136;
          }
          v99.__r_.__value_.__l.__size_ = v46;
          uint64_t v106 = (uint64_t)&v96;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v106);
          uint64_t v106 = (uint64_t)&v94;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v106);
          if (SHIBYTE(v93) < 0) {
            operator delete((void *)v92);
          }
          if (__p[3])
          {
            __p[4] = __p[3];
            operator delete(__p[3]);
          }
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          CoreML::NeuralNetworkValidatorGraph::insertNode((CoreML::NeuralNetworkValidatorGraph *)&v100, (CoreML::LayerNode *)(v99.__r_.__value_.__l.__size_ - 136));
          validateLossLayer((const CoreML::Specification::LossLayer *)__p, (const CoreML::NeuralNetworkValidatorGraph *)v43, (uint64_t)&v100);
          int data = (int)__p[0];
          v104.__r_.__value_.__l.__data_ = (std::string::pointer)__p[0];
          if (SHIBYTE(v105) < 0)
          {
            operator delete((void *)v104.__r_.__value_.__l.__size_);
            int data = (int)v104.__r_.__value_.__l.__data_;
          }
          *(_OWORD *)&v104.__r_.__value_.__r.__words[1] = *(_OWORD *)&__p[1];
          uint64_t v105 = __p[3];
          if ((data & 0xFFFFFFEF) != 0) {
            break;
          }
          ++v42;
          unint64_t v41 = *(uint64_t **)(a2 + 64);
          if (!v41) {
            unint64_t v41 = &CoreML::Specification::_NetworkUpdateParameters_default_instance_;
          }
          if (v42 >= *((int *)v41 + 6)) {
            goto LABEL_115;
          }
        }
        std::string v110 = v104;
        long long v111 = v105;
        *(_OWORD *)&v104.__r_.__value_.__r.__words[1] = 0uLL;
        uint64_t v105 = 0;
        uint64_t v26 = a1;
        goto LABEL_194;
      }
LABEL_115:
      unint64_t v55 = (uint64_t *)v41[5];
      if (v55) {
        uint64_t v56 = v55;
      }
      else {
        uint64_t v56 = &CoreML::Specification::_Optimizer_default_instance_;
      }
      validateOptimizer((const CoreML::Specification::Optimizer *)__p, (uint64_t)v56);
      int v57 = (int)__p[0];
      v104.__r_.__value_.__l.__data_ = (std::string::pointer)__p[0];
      uint64_t v26 = a1;
      if (SHIBYTE(v105) < 0)
      {
        operator delete((void *)v104.__r_.__value_.__l.__size_);
        int v57 = (int)v104.__r_.__value_.__l.__data_;
      }
      *(_OWORD *)&v104.__r_.__value_.__r.__words[1] = *(_OWORD *)&__p[1];
      uint64_t v105 = __p[3];
      if ((v57 & 0xFFFFFFEF) != 0) {
        goto LABEL_127;
      }
      if (*(void *)(a2 + 64)) {
        uint64_t v58 = *(uint64_t **)(a2 + 64);
      }
      else {
        uint64_t v58 = &CoreML::Specification::_NetworkUpdateParameters_default_instance_;
      }
      validateOtherTopLevelUpdateParameters((const CoreML::Specification::NetworkUpdateParameters *)__p, v58);
      int v59 = (int)__p[0];
      v104.__r_.__value_.__l.__data_ = (std::string::pointer)__p[0];
      if (SHIBYTE(v105) < 0)
      {
        operator delete((void *)v104.__r_.__value_.__l.__size_);
        int v59 = (int)v104.__r_.__value_.__l.__data_;
      }
      *(_OWORD *)&v104.__r_.__value_.__r.__words[1] = *(_OWORD *)&__p[1];
      uint64_t v105 = __p[3];
      if ((v59 & 0xFFFFFFEF) != 0)
      {
LABEL_127:
        std::string v110 = v104;
        long long v111 = v105;
        *(_OWORD *)&v104.__r_.__value_.__r.__words[1] = 0uLL;
        uint64_t v105 = 0;
LABEL_194:
        __p[0] = &v99;
        std::vector<CoreML::LayerNode>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(v103[0]);
        std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy((char *)v101);
LABEL_195:
        if (SHIBYTE(v105) < 0) {
          operator delete((void *)v104.__r_.__value_.__l.__size_);
        }
        void *v26 = (void *)v110.__r_.__value_.__r.__words[0];
        if (*((char *)v26 + 31) < 0) {
          operator delete(*v83);
        }
        *(_OWORD *)v83 = *(_OWORD *)&v110.__r_.__value_.__r.__words[1];
        a1[3] = v111;
        return;
      }
      long long v107 = 0uLL;
      uint64_t v106 = (uint64_t)&v107;
      std::string v60 = *(uint64_t **)(a2 + 64);
      if (!v60) {
        std::string v60 = &CoreML::Specification::_NetworkUpdateParameters_default_instance_;
      }
      if (*((int *)v60 + 6) < 1)
      {
LABEL_192:
        std::string v110 = v104;
        long long v111 = v105;
        *(_OWORD *)&v104.__r_.__value_.__r.__words[1] = 0uLL;
        uint64_t v105 = 0;
LABEL_193:
        std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy((char *)v107);
        uint64_t v26 = a1;
        goto LABEL_194;
      }
      uint64_t v61 = 0;
      while (1)
      {
        uint64_t v62 = *(long long **)(*(void *)(v60[4] + 8 * v61 + 8) + 16);
        if (*((char *)v62 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v113, *(const std::string::value_type **)v62, *((void *)v62 + 1));
        }
        else
        {
          long long v63 = *v62;
          v113.__r_.__value_.__r.__words[2] = *((void *)v62 + 2);
          *(_OWORD *)&v113.__r_.__value_.__l.__data_ = v63;
        }
        uint64_t v82 = v61;
        memset(__p, 0, sizeof(__p));
        std::deque<std::string>::push_back(__p, (long long *)&v113);
        char v64 = 0;
        memset(&v89, 0, sizeof(v89));
        while (__p[5])
        {
          unint64_t v65 = *((void *)__p[1] + (unint64_t)__p[4] / 0xAA) + 24 * ((unint64_t)__p[4] % 0xAA);
          if (*(char *)(v65 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v88, *(const std::string::value_type **)v65, *(void *)(v65 + 8));
          }
          else
          {
            long long v66 = *(_OWORD *)v65;
            v88.__r_.__value_.__r.__words[2] = *(void *)(v65 + 16);
            *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v66;
          }
          std::deque<std::string>::pop_front((uint64_t)__p);
          if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v87, v88.__r_.__value_.__l.__data_, v88.__r_.__value_.__l.__size_);
          }
          else {
            std::string v87 = v88;
          }
          uint64_t NodeFromName = CoreML::NeuralNetworkValidatorGraph::getNodeFromName((uint64_t)&v100, &v87);
          uint64_t v68 = NodeFromName;
          if ((SHIBYTE(v87.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            if (NodeFromName) {
              goto LABEL_146;
            }
            goto LABEL_173;
          }
          operator delete(v87.__r_.__value_.__l.__data_);
          if (v68)
          {
LABEL_146:
            uint64_t v69 = *(uint64_t **)v68;
            uint64_t v70 = *(uint64_t **)(v68 + 8);
            while (1)
            {
              if (v69 == v70)
              {
                int v73 = 0;
                goto LABEL_178;
              }
              uint64_t v71 = *v69;
              uint64_t v72 = (const std::string *)(*v69 + 56);
              if (*(char *)(*v69 + 79) < 0) {
                std::string::__init_copy_ctor_external(&v86, *(const std::string::value_type **)(v71 + 56), *(void *)(v71 + 64));
              }
              else {
                std::string v86 = *v72;
              }
              if (&v107 != (long long *)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>((uint64_t)&v106, &v86))break; {
              std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v106, &v86, (uint64_t)&v86);
              }
              std::deque<std::string>::push_back(__p, (long long *)&v86);
              if (((*(unsigned char *)(v71 + 128) != 0) & v64) == 1)
              {
                memset(&v85, 0, sizeof(v85));
                std::operator+<char>();
                uint64_t v74 = std::string::append(&v84, "), which does not support backpropagation, between an updatable marked layer and the loss function.");
                std::string::size_type v75 = v74->__r_.__value_.__r.__words[0];
                v112[0] = v74->__r_.__value_.__l.__size_;
                *(void *)((char *)v112 + 7) = *(std::string::size_type *)((char *)&v74->__r_.__value_.__r.__words[1]
                                                                          + 7);
                char v76 = HIBYTE(v74->__r_.__value_.__r.__words[2]);
                v74->__r_.__value_.__l.__size_ = 0;
                v74->__r_.__value_.__r.__words[2] = 0;
                v74->__r_.__value_.__r.__words[0] = 0;
                if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v85.__r_.__value_.__l.__data_);
                }
                v85.__r_.__value_.__r.__words[0] = v75;
                v85.__r_.__value_.__l.__size_ = v112[0];
                *(std::string::size_type *)((char *)&v85.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v112 + 7);
                *((unsigned char *)&v85.__r_.__value_.__s + 23) = v76;
                if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v84.__r_.__value_.__l.__data_);
                }
                v110.__r_.__value_.__r.__words[0] = 15;
                std::operator+<char>();
                if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v85.__r_.__value_.__l.__data_);
                }
                char v64 = 1;
                int v73 = 1;
              }
              else if (*(unsigned char *)(v71 + 129))
              {
                int v73 = 0;
              }
              else
              {
                if (*(_DWORD *)(v71 + 48) == 175 && *(_DWORD *)(v68 + 52) == 10) {
                  break;
                }
                std::string::operator=(&v89, v72);
                int v73 = 0;
                char v64 = 1;
              }
LABEL_166:
              if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v86.__r_.__value_.__l.__data_);
              }
              if (v73 != 14 && v73) {
                goto LABEL_178;
              }
              ++v69;
            }
            int v73 = 14;
            goto LABEL_166;
          }
LABEL_173:
          std::operator+<char>();
          uint64_t v77 = std::string::append(&v85, "'.");
          long long v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
          v86.__r_.__value_.__r.__words[2] = v77->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v86.__r_.__value_.__l.__data_ = v78;
          v77->__r_.__value_.__l.__size_ = 0;
          v77->__r_.__value_.__r.__words[2] = 0;
          v77->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v85.__r_.__value_.__l.__data_);
          }
          v110.__r_.__value_.__r.__words[0] = 15;
          std::operator+<char>();
          if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v86.__r_.__value_.__l.__data_);
          }
          int v73 = 1;
LABEL_178:
          if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v88.__r_.__value_.__l.__data_);
            if (v73) {
              goto LABEL_184;
            }
          }
          else if (v73)
          {
            goto LABEL_184;
          }
        }
        int v73 = 0;
LABEL_184:
        if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v89.__r_.__value_.__l.__data_);
        }
        std::deque<std::string>::~deque[abi:ne180100]((uint64_t)__p);
        if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v113.__r_.__value_.__l.__data_);
        }
        if (v73) {
          goto LABEL_193;
        }
        uint64_t v61 = v82 + 1;
        std::string v60 = *(uint64_t **)(a2 + 64);
        if (!v60) {
          std::string v60 = &CoreML::Specification::_NetworkUpdateParameters_default_instance_;
        }
        if (v61 >= *((int *)v60 + 6)) {
          goto LABEL_192;
        }
      }
    }
  }
}

void sub_19EAD1A34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,void *__p,uint64_t a58,int a59,__int16 a60,char a61,char a62)
{
  if (a62 < 0) {
    operator delete(__p);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  if (*(char *)(v62 + 31) < 0) {
    operator delete(*(void **)(v62 + 8));
  }
  _Unwind_Resume(a1);
}

void validateUpdatableNeuralNetwork<CoreML::Specification::NeuralNetworkClassifier>(void **a1, uint64_t a2)
{
  uint64_t v114 = *MEMORY[0x1E4F143B8];
  CoreML::Result::Result((CoreML::Result *)a1);
  CoreML::Result::Result((CoreML::Result *)__p);
  LODWORD(v4) = *(_DWORD *)(a2 + 24);
  if ((int)v4 < 1)
  {
LABEL_16:
    unint64_t v100 = 0;
    long long v101 = 0uLL;
    MEMORY[0x19F3C1430](&v100, "The model is marked as updatable, but none of the layers are updatable.");
    uint64_t v106 = 14;
    std::operator+<char>();
  }
  else
  {
    uint64_t v5 = 0;
    char v6 = 0;
    while (1)
    {
      while (1)
      {
        uint64_t v7 = *(void *)(*(void *)(a2 + 32) + 8 + 8 * v5);
        if (*(unsigned char *)(v7 + 120)) {
          break;
        }
        if (++v5 >= (int)v4)
        {
          if ((v6 & 1) == 0) {
            goto LABEL_16;
          }
LABEL_15:
          long long v107 = *(_OWORD *)&__p[1];
          uint64_t v106 = (uint64_t)__p[0];
          uint64_t v108 = (uint64_t *)__p[3];
          memset(&__p[1], 0, 24);
          goto LABEL_19;
        }
      }
      int v8 = *(_DWORD *)(v7 + 140);
      if (v8 != 100 && v8 != 420 && v8 != 140) {
        break;
      }
      validateWeightParamsUpdatable((const CoreML::Specification::NeuralNetworkLayer *)&v100, v7);
      int v9 = (int)v100;
      __p[0] = v100;
      if (SHIBYTE(__p[3]) < 0)
      {
        operator delete(__p[1]);
        int v9 = (int)__p[0];
      }
      *(_OWORD *)&__p[1] = v101;
      __p[3] = v102;
      if ((v9 & 0xFFFFFFEF) == 0)
      {
        ++v5;
        char v6 = 1;
        uint64_t v4 = *(int *)(a2 + 24);
        if (v5 < v4) {
          continue;
        }
      }
      goto LABEL_15;
    }
    std::operator+<char>();
    v79 = std::string::append(&v104, "' is marked as updatable, however it is not supported as the type of this layer is neither convolution nor inner-product.");
    uint64_t v80 = (void *)v79->__r_.__value_.__r.__words[0];
    v110.__r_.__value_.__r.__words[0] = v79->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v110.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v79->__r_.__value_.__r.__words[1] + 7);
    char v81 = HIBYTE(v79->__r_.__value_.__r.__words[2]);
    v79->__r_.__value_.__l.__size_ = 0;
    v79->__r_.__value_.__r.__words[2] = 0;
    v79->__r_.__value_.__r.__words[0] = 0;
    *(void *)((char *)&v101 + 7) = *(std::string::size_type *)((char *)v110.__r_.__value_.__r.__words + 7);
    unint64_t v100 = v80;
    *(void *)&long long v101 = v110.__r_.__value_.__r.__words[0];
    HIBYTE(v101) = v81;
    if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v104.__r_.__value_.__l.__data_);
    }
    uint64_t v106 = 14;
    std::operator+<char>();
  }
  if (SHIBYTE(v101) < 0) {
    operator delete(v100);
  }
LABEL_19:
  if (SHIBYTE(__p[3]) < 0) {
    operator delete(__p[1]);
  }
  int v10 = v106;
  *a1 = (void *)v106;
  if (*((char *)a1 + 31) < 0)
  {
    operator delete(a1[1]);
    int v10 = *(_DWORD *)a1;
  }
  *(_OWORD *)(a1 + 1) = v107;
  a1[3] = v108;
  if ((v10 & 0xFFFFFFEF) == 0)
  {
    v83 = a1 + 1;
    CoreML::Result::Result((CoreML::Result *)__p);
    long long v107 = 0uLL;
    uint64_t v106 = (uint64_t)&v107;
    memset(&v104, 0, sizeof(v104));
    if (*(int *)(a2 + 24) < 1)
    {
LABEL_40:
      uint64_t v18 = *(void *)(a2 + 72)
          ? *(uint64_t **)(a2 + 72)
          : &CoreML::Specification::_NetworkUpdateParameters_default_instance_;
      if (*((int *)v18 + 6) < 1)
      {
LABEL_59:
        long long v101 = *(_OWORD *)&__p[1];
        unint64_t v100 = __p[0];
        uint64_t v102 = (char **)__p[3];
        memset(&__p[1], 0, 24);
      }
      else
      {
        uint64_t v19 = 0;
        while (1)
        {
          uint64_t v20 = *(long long **)(*(void *)(v18[4] + 8 * v19 + 8) + 16);
          if (*((char *)v20 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v110, *(const std::string::value_type **)v20, *((void *)v20 + 1));
          }
          else
          {
            long long v21 = *v20;
            v110.__r_.__value_.__r.__words[2] = *((void *)v20 + 2);
            *(_OWORD *)&v110.__r_.__value_.__l.__data_ = v21;
          }
          uint64_t v22 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__count_unique<std::string>((void *)v107, &v110);
          if (v22)
          {
            std::operator+<char>();
            uint64_t v23 = std::string::append(&v99, "', i.e., there are more than one layers or loss layers with this name.");
            std::string::size_type v24 = v23->__r_.__value_.__r.__words[0];
            v113.__r_.__value_.__r.__words[0] = v23->__r_.__value_.__l.__size_;
            *(std::string::size_type *)((char *)v113.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v23->__r_.__value_.__r.__words[1] + 7);
            char v25 = HIBYTE(v23->__r_.__value_.__r.__words[2]);
            v23->__r_.__value_.__l.__size_ = 0;
            v23->__r_.__value_.__r.__words[2] = 0;
            v23->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v104.__r_.__value_.__l.__data_);
            }
            v104.__r_.__value_.__r.__words[0] = v24;
            v104.__r_.__value_.__l.__size_ = v113.__r_.__value_.__r.__words[0];
            *(std::string::size_type *)((char *)&v104.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v113.__r_.__value_.__r.__words + 7);
            *((unsigned char *)&v104.__r_.__value_.__s + 23) = v25;
            if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v99.__r_.__value_.__l.__data_);
            }
            unint64_t v100 = (void *)14;
            std::operator+<char>();
          }
          else
          {
            std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v106, &v110, (uint64_t)&v110);
          }
          if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v110.__r_.__value_.__l.__data_);
          }
          if (v22) {
            break;
          }
          if (++v19 >= *((int *)v18 + 6)) {
            goto LABEL_59;
          }
        }
      }
    }
    else
    {
      uint64_t v11 = 0;
      while (1)
      {
        uint64_t v12 = *(long long **)(*(void *)(*(void *)(a2 + 32) + 8 * v11 + 8) + 112);
        if (*((char *)v12 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v110, *(const std::string::value_type **)v12, *((void *)v12 + 1));
        }
        else
        {
          long long v13 = *v12;
          v110.__r_.__value_.__r.__words[2] = *((void *)v12 + 2);
          *(_OWORD *)&v110.__r_.__value_.__l.__data_ = v13;
        }
        uint64_t v14 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__count_unique<std::string>((void *)v107, &v110);
        if (v14)
        {
          std::operator+<char>();
          uint64_t v15 = std::string::append(&v99, "', i.e., there are more than one layers or loss layers with this name.");
          std::string::size_type v16 = v15->__r_.__value_.__r.__words[0];
          v113.__r_.__value_.__r.__words[0] = v15->__r_.__value_.__l.__size_;
          *(std::string::size_type *)((char *)v113.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v15->__r_.__value_.__r.__words[1] + 7);
          char v17 = HIBYTE(v15->__r_.__value_.__r.__words[2]);
          v15->__r_.__value_.__l.__size_ = 0;
          v15->__r_.__value_.__r.__words[2] = 0;
          v15->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v104.__r_.__value_.__l.__data_);
          }
          v104.__r_.__value_.__r.__words[0] = v16;
          v104.__r_.__value_.__l.__size_ = v113.__r_.__value_.__r.__words[0];
          *(std::string::size_type *)((char *)&v104.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v113.__r_.__value_.__r.__words + 7);
          *((unsigned char *)&v104.__r_.__value_.__s + 23) = v17;
          if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v99.__r_.__value_.__l.__data_);
          }
          unint64_t v100 = (void *)14;
          std::operator+<char>();
        }
        else
        {
          std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v106, &v110, (uint64_t)&v110);
        }
        if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v110.__r_.__value_.__l.__data_);
        }
        if (v14) {
          break;
        }
        if (++v11 >= *(int *)(a2 + 24)) {
          goto LABEL_40;
        }
      }
    }
    if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v104.__r_.__value_.__l.__data_);
    }
    std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy((char *)v107);
    uint64_t v26 = a1;
    if (SHIBYTE(__p[3]) < 0) {
      operator delete(__p[1]);
    }
    int v27 = (int)v100;
    *a1 = v100;
    if (*((char *)a1 + 31) < 0)
    {
      operator delete(a1[1]);
      int v27 = *(_DWORD *)a1;
    }
    *(_OWORD *)v83 = v101;
    a1[3] = v102;
    if ((v27 & 0xFFFFFFEF) == 0)
    {
      CoreML::Result::Result((CoreML::Result *)&v104);
      uint64_t v28 = *(uint64_t **)(a2 + 72);
      if (!v28) {
        uint64_t v28 = &CoreML::Specification::_NetworkUpdateParameters_default_instance_;
      }
      uint64_t v29 = *((int *)v28 + 6);
      if ((int)v29 >= 2)
      {
        memset(__p, 0, 24);
        MEMORY[0x19F3C1430](__p, "This model has more than one loss layers specified, which is not supported at the moment.");
        v110.__r_.__value_.__r.__words[0] = 15;
        std::operator+<char>();
        if (SHIBYTE(__p[2]) < 0) {
          operator delete(__p[0]);
        }
        goto LABEL_195;
      }
      unint64_t v100 = &v101;
      long long v101 = 0uLL;
      v103[0] = 0;
      v103[1] = 0;
      uint64_t v102 = v103;
      memset(&v99, 0, sizeof(v99));
      std::vector<CoreML::LayerNode>::resize((uint64_t *)&v99, *(int *)(a2 + 24) + v29);
      if (*(int *)(a2 + 24) >= 1)
      {
        uint64_t v30 = 0;
        do
        {
          CoreML::LayerNode::LayerNode((CoreML::LayerNode *)__p, *(const CoreML::Specification::NeuralNetworkLayer **)(*(void *)(a2 + 32) + 8 * v30 + 8));
          std::string::size_type size = v99.__r_.__value_.__l.__size_;
          if (v99.__r_.__value_.__l.__size_ >= v99.__r_.__value_.__r.__words[2])
          {
            unint64_t v34 = 0xF0F0F0F0F0F0F0F1
                * ((uint64_t)(v99.__r_.__value_.__l.__size_ - v99.__r_.__value_.__r.__words[0]) >> 3);
            unint64_t v35 = v34 + 1;
            if (v34 + 1 > 0x1E1E1E1E1E1E1E1) {
              std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
            }
            if (0xE1E1E1E1E1E1E1E2
               * ((uint64_t)(v99.__r_.__value_.__r.__words[2] - v99.__r_.__value_.__r.__words[0]) >> 3) > v35)
              unint64_t v35 = 0xE1E1E1E1E1E1E1E2
                  * ((uint64_t)(v99.__r_.__value_.__r.__words[2] - v99.__r_.__value_.__r.__words[0]) >> 3);
            if (0xF0F0F0F0F0F0F0F1
               * ((uint64_t)(v99.__r_.__value_.__r.__words[2] - v99.__r_.__value_.__r.__words[0]) >> 3) >= 0xF0F0F0F0F0F0F0)
              unint64_t v36 = 0x1E1E1E1E1E1E1E1;
            else {
              unint64_t v36 = v35;
            }
            v109 = &v99.__r_.__value_.__s.__data_[16];
            long long v37 = (uint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<CoreML::LayerNode>>(v36);
            uint64_t v38 = &v37[17 * v34];
            uint64_t v106 = (uint64_t)v37;
            *(void *)&long long v107 = v38;
            uint64_t v108 = &v37[17 * v39];
            uint64_t *v38 = 0;
            v38[1] = 0;
            v38[2] = 0;
            *(_OWORD *)uint64_t v38 = *(_OWORD *)__p;
            v38[2] = (uint64_t)__p[2];
            memset(__p, 0, 24);
            v38[3] = 0;
            v38[4] = 0;
            v38[5] = 0;
            *(_OWORD *)(v38 + 3) = *(_OWORD *)&__p[3];
            v38[5] = (uint64_t)__p[5];
            memset(&__p[3], 0, 24);
            v38[6] = v91;
            long long v40 = v92;
            v38[9] = v93;
            *(_OWORD *)(v38 + 7) = v40;
            uint64_t v93 = 0;
            long long v92 = 0uLL;
            v38[10] = 0;
            v38[11] = 0;
            v38[12] = 0;
            *((_OWORD *)v38 + 5) = v94;
            v38[12] = v95;
            long long v94 = 0uLL;
            uint64_t v95 = 0;
            v38[13] = 0;
            v38[14] = 0;
            v38[15] = 0;
            *(_OWORD *)(v38 + 13) = v96;
            v38[15] = v97;
            long long v96 = 0uLL;
            uint64_t v97 = 0;
            *((_WORD *)v38 + 64) = v98;
            *((void *)&v107 + 1) = v38 + 17;
            std::vector<CoreML::LayerNode>::__swap_out_circular_buffer((uint64_t *)&v99, &v106);
            std::string::size_type v33 = v99.__r_.__value_.__l.__size_;
            std::__split_buffer<CoreML::LayerNode>::~__split_buffer((uint64_t)&v106);
          }
          else
          {
            *(void *)(v99.__r_.__value_.__l.__size_ + 16) = 0;
            *(void *)(size + 24) = 0;
            *(void *)std::string::size_type size = 0;
            *(void *)(size + 8) = 0;
            *(_OWORD *)std::string::size_type size = *(_OWORD *)__p;
            *(void **)(size + 16) = __p[2];
            memset(__p, 0, 24);
            *(void *)(size + 32) = 0;
            *(void *)(size + 40) = 0;
            *(_OWORD *)(size + 24) = *(_OWORD *)&__p[3];
            *(void **)(size + 40) = __p[5];
            memset(&__p[3], 0, 24);
            *(void *)(size + 48) = v91;
            long long v32 = v92;
            *(void *)(size + 72) = v93;
            *(void *)(size + 80) = 0;
            *(_OWORD *)(size + 56) = v32;
            uint64_t v93 = 0;
            long long v92 = 0uLL;
            *(void *)(size + 88) = 0;
            *(void *)(size + 96) = 0;
            *(_OWORD *)(size + 80) = v94;
            long long v94 = 0uLL;
            *(void *)(size + 96) = v95;
            *(void *)(size + 104) = 0;
            uint64_t v95 = 0;
            *(void *)(size + 112) = 0;
            *(void *)(size + 120) = 0;
            *(_OWORD *)(size + 104) = v96;
            *(void *)(size + 120) = v97;
            long long v96 = 0uLL;
            uint64_t v97 = 0;
            *(_WORD *)(size + 128) = v98;
            std::string::size_type v33 = size + 136;
          }
          v99.__r_.__value_.__l.__size_ = v33;
          uint64_t v106 = (uint64_t)&v96;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v106);
          uint64_t v106 = (uint64_t)&v94;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v106);
          if (SHIBYTE(v93) < 0) {
            operator delete((void *)v92);
          }
          if (__p[3])
          {
            __p[4] = __p[3];
            operator delete(__p[3]);
          }
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          CoreML::NeuralNetworkValidatorGraph::insertNode((CoreML::NeuralNetworkValidatorGraph *)&v100, (CoreML::LayerNode *)(v99.__r_.__value_.__l.__size_ - 136));
          ++v30;
        }
        while (v30 < *(int *)(a2 + 24));
      }
      unint64_t v41 = *(uint64_t **)(a2 + 72);
      if (!v41) {
        unint64_t v41 = &CoreML::Specification::_NetworkUpdateParameters_default_instance_;
      }
      if (*((int *)v41 + 6) >= 1)
      {
        uint64_t v42 = 0;
        while (1)
        {
          v43 = *(const std::string ***)(v41[4] + 8 * v42 + 8);
          CoreML::LayerNode::LayerNode((CoreML::LayerNode *)__p, v43);
          std::string::size_type v44 = v99.__r_.__value_.__l.__size_;
          if (v99.__r_.__value_.__l.__size_ >= v99.__r_.__value_.__r.__words[2])
          {
            unint64_t v47 = 0xF0F0F0F0F0F0F0F1
                * ((uint64_t)(v99.__r_.__value_.__l.__size_ - v99.__r_.__value_.__r.__words[0]) >> 3);
            unint64_t v48 = v47 + 1;
            if (v47 + 1 > 0x1E1E1E1E1E1E1E1) {
              std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
            }
            if (0xE1E1E1E1E1E1E1E2
               * ((uint64_t)(v99.__r_.__value_.__r.__words[2] - v99.__r_.__value_.__r.__words[0]) >> 3) > v48)
              unint64_t v48 = 0xE1E1E1E1E1E1E1E2
                  * ((uint64_t)(v99.__r_.__value_.__r.__words[2] - v99.__r_.__value_.__r.__words[0]) >> 3);
            unint64_t v49 = 0xF0F0F0F0F0F0F0F1
                * ((uint64_t)(v99.__r_.__value_.__r.__words[2] - v99.__r_.__value_.__r.__words[0]) >> 3) >= 0xF0F0F0F0F0F0F0
                ? 0x1E1E1E1E1E1E1E1
                : v48;
            v109 = &v99.__r_.__value_.__s.__data_[16];
            uint64_t v50 = (uint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<CoreML::LayerNode>>(v49);
            v51 = &v50[17 * v47];
            uint64_t v106 = (uint64_t)v50;
            *(void *)&long long v107 = v51;
            uint64_t v108 = &v50[17 * v52];
            uint64_t *v51 = 0;
            v51[1] = 0;
            v51[2] = 0;
            *(_OWORD *)v51 = *(_OWORD *)__p;
            v51[2] = (uint64_t)__p[2];
            memset(__p, 0, 24);
            v51[3] = 0;
            v51[4] = 0;
            v51[5] = 0;
            *(_OWORD *)(v51 + 3) = *(_OWORD *)&__p[3];
            v51[5] = (uint64_t)__p[5];
            memset(&__p[3], 0, 24);
            v51[6] = v91;
            long long v53 = v92;
            v51[9] = v93;
            *(_OWORD *)(v51 + 7) = v53;
            uint64_t v93 = 0;
            long long v92 = 0uLL;
            v51[10] = 0;
            v51[11] = 0;
            v51[12] = 0;
            *((_OWORD *)v51 + 5) = v94;
            v51[12] = v95;
            long long v94 = 0uLL;
            uint64_t v95 = 0;
            v51[13] = 0;
            v51[14] = 0;
            v51[15] = 0;
            *(_OWORD *)(v51 + 13) = v96;
            v51[15] = v97;
            long long v96 = 0uLL;
            uint64_t v97 = 0;
            *((_WORD *)v51 + 64) = v98;
            *((void *)&v107 + 1) = v51 + 17;
            std::vector<CoreML::LayerNode>::__swap_out_circular_buffer((uint64_t *)&v99, &v106);
            std::string::size_type v46 = v99.__r_.__value_.__l.__size_;
            std::__split_buffer<CoreML::LayerNode>::~__split_buffer((uint64_t)&v106);
          }
          else
          {
            *(void *)(v99.__r_.__value_.__l.__size_ + 16) = 0;
            *(void *)(v44 + 24) = 0;
            *(void *)std::string::size_type v44 = 0;
            *(void *)(v44 + 8) = 0;
            *(_OWORD *)std::string::size_type v44 = *(_OWORD *)__p;
            *(void **)(v44 + 16) = __p[2];
            memset(__p, 0, 24);
            *(void *)(v44 + 32) = 0;
            *(void *)(v44 + 40) = 0;
            *(_OWORD *)(v44 + 24) = *(_OWORD *)&__p[3];
            *(void **)(v44 + 40) = __p[5];
            memset(&__p[3], 0, 24);
            *(void *)(v44 + 48) = v91;
            long long v45 = v92;
            *(void *)(v44 + 72) = v93;
            *(void *)(v44 + 80) = 0;
            *(_OWORD *)(v44 + 56) = v45;
            uint64_t v93 = 0;
            long long v92 = 0uLL;
            *(void *)(v44 + 88) = 0;
            *(void *)(v44 + 96) = 0;
            *(_OWORD *)(v44 + 80) = v94;
            long long v94 = 0uLL;
            *(void *)(v44 + 96) = v95;
            *(void *)(v44 + 104) = 0;
            uint64_t v95 = 0;
            *(void *)(v44 + 112) = 0;
            *(void *)(v44 + 120) = 0;
            *(_OWORD *)(v44 + 104) = v96;
            *(void *)(v44 + 120) = v97;
            long long v96 = 0uLL;
            uint64_t v97 = 0;
            *(_WORD *)(v44 + 128) = v98;
            std::string::size_type v46 = v44 + 136;
          }
          v99.__r_.__value_.__l.__size_ = v46;
          uint64_t v106 = (uint64_t)&v96;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v106);
          uint64_t v106 = (uint64_t)&v94;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v106);
          if (SHIBYTE(v93) < 0) {
            operator delete((void *)v92);
          }
          if (__p[3])
          {
            __p[4] = __p[3];
            operator delete(__p[3]);
          }
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          CoreML::NeuralNetworkValidatorGraph::insertNode((CoreML::NeuralNetworkValidatorGraph *)&v100, (CoreML::LayerNode *)(v99.__r_.__value_.__l.__size_ - 136));
          validateLossLayer((const CoreML::Specification::LossLayer *)__p, (const CoreML::NeuralNetworkValidatorGraph *)v43, (uint64_t)&v100);
          int data = (int)__p[0];
          v104.__r_.__value_.__l.__data_ = (std::string::pointer)__p[0];
          if (SHIBYTE(v105) < 0)
          {
            operator delete((void *)v104.__r_.__value_.__l.__size_);
            int data = (int)v104.__r_.__value_.__l.__data_;
          }
          *(_OWORD *)&v104.__r_.__value_.__r.__words[1] = *(_OWORD *)&__p[1];
          uint64_t v105 = __p[3];
          if ((data & 0xFFFFFFEF) != 0) {
            break;
          }
          ++v42;
          unint64_t v41 = *(uint64_t **)(a2 + 72);
          if (!v41) {
            unint64_t v41 = &CoreML::Specification::_NetworkUpdateParameters_default_instance_;
          }
          if (v42 >= *((int *)v41 + 6)) {
            goto LABEL_115;
          }
        }
        std::string v110 = v104;
        long long v111 = v105;
        *(_OWORD *)&v104.__r_.__value_.__r.__words[1] = 0uLL;
        uint64_t v105 = 0;
        uint64_t v26 = a1;
        goto LABEL_194;
      }
LABEL_115:
      unint64_t v55 = (uint64_t *)v41[5];
      if (v55) {
        uint64_t v56 = v55;
      }
      else {
        uint64_t v56 = &CoreML::Specification::_Optimizer_default_instance_;
      }
      validateOptimizer((const CoreML::Specification::Optimizer *)__p, (uint64_t)v56);
      int v57 = (int)__p[0];
      v104.__r_.__value_.__l.__data_ = (std::string::pointer)__p[0];
      uint64_t v26 = a1;
      if (SHIBYTE(v105) < 0)
      {
        operator delete((void *)v104.__r_.__value_.__l.__size_);
        int v57 = (int)v104.__r_.__value_.__l.__data_;
      }
      *(_OWORD *)&v104.__r_.__value_.__r.__words[1] = *(_OWORD *)&__p[1];
      uint64_t v105 = __p[3];
      if ((v57 & 0xFFFFFFEF) != 0) {
        goto LABEL_127;
      }
      if (*(void *)(a2 + 72)) {
        uint64_t v58 = *(uint64_t **)(a2 + 72);
      }
      else {
        uint64_t v58 = &CoreML::Specification::_NetworkUpdateParameters_default_instance_;
      }
      validateOtherTopLevelUpdateParameters((const CoreML::Specification::NetworkUpdateParameters *)__p, v58);
      int v59 = (int)__p[0];
      v104.__r_.__value_.__l.__data_ = (std::string::pointer)__p[0];
      if (SHIBYTE(v105) < 0)
      {
        operator delete((void *)v104.__r_.__value_.__l.__size_);
        int v59 = (int)v104.__r_.__value_.__l.__data_;
      }
      *(_OWORD *)&v104.__r_.__value_.__r.__words[1] = *(_OWORD *)&__p[1];
      uint64_t v105 = __p[3];
      if ((v59 & 0xFFFFFFEF) != 0)
      {
LABEL_127:
        std::string v110 = v104;
        long long v111 = v105;
        *(_OWORD *)&v104.__r_.__value_.__r.__words[1] = 0uLL;
        uint64_t v105 = 0;
LABEL_194:
        __p[0] = &v99;
        std::vector<CoreML::LayerNode>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(v103[0]);
        std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy((char *)v101);
LABEL_195:
        if (SHIBYTE(v105) < 0) {
          operator delete((void *)v104.__r_.__value_.__l.__size_);
        }
        void *v26 = (void *)v110.__r_.__value_.__r.__words[0];
        if (*((char *)v26 + 31) < 0) {
          operator delete(*v83);
        }
        *(_OWORD *)v83 = *(_OWORD *)&v110.__r_.__value_.__r.__words[1];
        a1[3] = v111;
        return;
      }
      long long v107 = 0uLL;
      uint64_t v106 = (uint64_t)&v107;
      std::string v60 = *(uint64_t **)(a2 + 72);
      if (!v60) {
        std::string v60 = &CoreML::Specification::_NetworkUpdateParameters_default_instance_;
      }
      if (*((int *)v60 + 6) < 1)
      {
LABEL_192:
        std::string v110 = v104;
        long long v111 = v105;
        *(_OWORD *)&v104.__r_.__value_.__r.__words[1] = 0uLL;
        uint64_t v105 = 0;
LABEL_193:
        std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy((char *)v107);
        uint64_t v26 = a1;
        goto LABEL_194;
      }
      uint64_t v61 = 0;
      while (1)
      {
        uint64_t v62 = *(long long **)(*(void *)(v60[4] + 8 * v61 + 8) + 16);
        if (*((char *)v62 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v113, *(const std::string::value_type **)v62, *((void *)v62 + 1));
        }
        else
        {
          long long v63 = *v62;
          v113.__r_.__value_.__r.__words[2] = *((void *)v62 + 2);
          *(_OWORD *)&v113.__r_.__value_.__l.__data_ = v63;
        }
        uint64_t v82 = v61;
        memset(__p, 0, sizeof(__p));
        std::deque<std::string>::push_back(__p, (long long *)&v113);
        char v64 = 0;
        memset(&v89, 0, sizeof(v89));
        while (__p[5])
        {
          unint64_t v65 = *((void *)__p[1] + (unint64_t)__p[4] / 0xAA) + 24 * ((unint64_t)__p[4] % 0xAA);
          if (*(char *)(v65 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v88, *(const std::string::value_type **)v65, *(void *)(v65 + 8));
          }
          else
          {
            long long v66 = *(_OWORD *)v65;
            v88.__r_.__value_.__r.__words[2] = *(void *)(v65 + 16);
            *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v66;
          }
          std::deque<std::string>::pop_front((uint64_t)__p);
          if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v87, v88.__r_.__value_.__l.__data_, v88.__r_.__value_.__l.__size_);
          }
          else {
            std::string v87 = v88;
          }
          uint64_t NodeFromName = CoreML::NeuralNetworkValidatorGraph::getNodeFromName((uint64_t)&v100, &v87);
          uint64_t v68 = NodeFromName;
          if ((SHIBYTE(v87.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            if (NodeFromName) {
              goto LABEL_146;
            }
            goto LABEL_173;
          }
          operator delete(v87.__r_.__value_.__l.__data_);
          if (v68)
          {
LABEL_146:
            uint64_t v69 = *(uint64_t **)v68;
            uint64_t v70 = *(uint64_t **)(v68 + 8);
            while (1)
            {
              if (v69 == v70)
              {
                int v73 = 0;
                goto LABEL_178;
              }
              uint64_t v71 = *v69;
              uint64_t v72 = (const std::string *)(*v69 + 56);
              if (*(char *)(*v69 + 79) < 0) {
                std::string::__init_copy_ctor_external(&v86, *(const std::string::value_type **)(v71 + 56), *(void *)(v71 + 64));
              }
              else {
                std::string v86 = *v72;
              }
              if (&v107 != (long long *)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>((uint64_t)&v106, &v86))break; {
              std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v106, &v86, (uint64_t)&v86);
              }
              std::deque<std::string>::push_back(__p, (long long *)&v86);
              if (((*(unsigned char *)(v71 + 128) != 0) & v64) == 1)
              {
                memset(&v85, 0, sizeof(v85));
                std::operator+<char>();
                uint64_t v74 = std::string::append(&v84, "), which does not support backpropagation, between an updatable marked layer and the loss function.");
                std::string::size_type v75 = v74->__r_.__value_.__r.__words[0];
                v112[0] = v74->__r_.__value_.__l.__size_;
                *(void *)((char *)v112 + 7) = *(std::string::size_type *)((char *)&v74->__r_.__value_.__r.__words[1]
                                                                          + 7);
                char v76 = HIBYTE(v74->__r_.__value_.__r.__words[2]);
                v74->__r_.__value_.__l.__size_ = 0;
                v74->__r_.__value_.__r.__words[2] = 0;
                v74->__r_.__value_.__r.__words[0] = 0;
                if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v85.__r_.__value_.__l.__data_);
                }
                v85.__r_.__value_.__r.__words[0] = v75;
                v85.__r_.__value_.__l.__size_ = v112[0];
                *(std::string::size_type *)((char *)&v85.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v112 + 7);
                *((unsigned char *)&v85.__r_.__value_.__s + 23) = v76;
                if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v84.__r_.__value_.__l.__data_);
                }
                v110.__r_.__value_.__r.__words[0] = 15;
                std::operator+<char>();
                if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v85.__r_.__value_.__l.__data_);
                }
                char v64 = 1;
                int v73 = 1;
              }
              else if (*(unsigned char *)(v71 + 129))
              {
                int v73 = 0;
              }
              else
              {
                if (*(_DWORD *)(v71 + 48) == 175 && *(_DWORD *)(v68 + 52) == 10) {
                  break;
                }
                std::string::operator=(&v89, v72);
                int v73 = 0;
                char v64 = 1;
              }
LABEL_166:
              if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v86.__r_.__value_.__l.__data_);
              }
              if (v73 != 14 && v73) {
                goto LABEL_178;
              }
              ++v69;
            }
            int v73 = 14;
            goto LABEL_166;
          }
LABEL_173:
          std::operator+<char>();
          uint64_t v77 = std::string::append(&v85, "'.");
          long long v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
          v86.__r_.__value_.__r.__words[2] = v77->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v86.__r_.__value_.__l.__data_ = v78;
          v77->__r_.__value_.__l.__size_ = 0;
          v77->__r_.__value_.__r.__words[2] = 0;
          v77->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v85.__r_.__value_.__l.__data_);
          }
          v110.__r_.__value_.__r.__words[0] = 15;
          std::operator+<char>();
          if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v86.__r_.__value_.__l.__data_);
          }
          int v73 = 1;
LABEL_178:
          if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v88.__r_.__value_.__l.__data_);
            if (v73) {
              goto LABEL_184;
            }
          }
          else if (v73)
          {
            goto LABEL_184;
          }
        }
        int v73 = 0;
LABEL_184:
        if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v89.__r_.__value_.__l.__data_);
        }
        std::deque<std::string>::~deque[abi:ne180100]((uint64_t)__p);
        if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v113.__r_.__value_.__l.__data_);
        }
        if (v73) {
          goto LABEL_193;
        }
        uint64_t v61 = v82 + 1;
        std::string v60 = *(uint64_t **)(a2 + 72);
        if (!v60) {
          std::string v60 = &CoreML::Specification::_NetworkUpdateParameters_default_instance_;
        }
        if (v61 >= *((int *)v60 + 6)) {
          goto LABEL_192;
        }
      }
    }
  }
}

void sub_19EAD2E88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,void *__p,uint64_t a58,int a59,__int16 a60,char a61,char a62)
{
  if (a62 < 0) {
    operator delete(__p);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  if (*(char *)(v62 + 31) < 0) {
    operator delete(*(void **)(v62 + 8));
  }
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::CategoricalMapping::GetCachedSize(CoreML::Specification::CategoricalMapping *this)
{
  return *((unsigned int *)this + 8);
}

uint64_t CoreML::Specification::CategoricalMapping::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 36);
  if (v6 == 1)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)1, *(void *)(this + 16), a2, a4);
    int v6 = *(_DWORD *)(v5 + 36);
  }
  if (v6 == 2) {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)2, *(void *)(v5 + 16), a2, a4);
  }
  int v7 = *(_DWORD *)(v5 + 40);
  if (v7 == 101)
  {
    int v8 = *(unsigned int **)(v5 + 24);
    if (*((char *)v8 + 23) < 0)
    {
      int v8 = *(unsigned int **)v8;
      uint64_t v9 = *(void *)(*(void *)(v5 + 24) + 8);
    }
    else
    {
      LODWORD(v9) = *((unsigned __int8 *)v8 + 23);
    }
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v8, v9, 1, (uint64_t)"CoreML.Specification.CategoricalMapping.strValue");
    if (*(_DWORD *)(v5 + 40) == 101) {
      int v10 = *(long long **)(v5 + 24);
    }
    else {
      int v10 = &google::protobuf::internal::fixed_address_empty_string;
    }
    this = google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(0x65u, (uint64_t)v10, a2);
    int v7 = *(_DWORD *)(v5 + 40);
  }
  if (v7 == 102)
  {
    unint64_t v11 = *(void *)(v5 + 24);
    return google::protobuf::internal::WireFormatLite::WriteInt64(102, v11, a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::CategoricalMapping::ByteSizeLong(CoreML::Specification::CategoricalMapping *this)
{
  int v2 = *((_DWORD *)this + 9);
  if (v2 == 2)
  {
    uint64_t v3 = CoreML::Specification::Int64ToStringMap::ByteSizeLong(*((CoreML::Specification::Int64ToStringMap **)this + 2));
    goto LABEL_5;
  }
  if (v2 == 1)
  {
    uint64_t v3 = CoreML::Specification::StringToInt64Map::ByteSizeLong(*((CoreML::Specification::StringToInt64Map **)this + 2));
LABEL_5:
    uint64_t result = v3 + ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1;
    goto LABEL_7;
  }
  uint64_t result = 0;
LABEL_7:
  int v5 = *((_DWORD *)this + 10);
  if (v5 == 102)
  {
    uint64_t v9 = result + ((9 * (__clz(*((void *)this + 3) | 1) ^ 0x3F) + 73) >> 6);
LABEL_13:
    uint64_t result = v9 + 2;
    goto LABEL_14;
  }
  if (v5 == 101)
  {
    uint64_t v6 = *((void *)this + 3);
    uint64_t v7 = *(unsigned __int8 *)(v6 + 23);
    uint64_t v8 = *(void *)(v6 + 8);
    if ((v7 & 0x80u) == 0) {
      uint64_t v8 = v7;
    }
    uint64_t v9 = result + v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6);
    goto LABEL_13;
  }
LABEL_14:
  *((_DWORD *)this + 8) = result;
  return result;
}

uint64_t CoreML::Specification::CategoricalMapping::MergePartialFromCodedStream(CoreML::Specification::CategoricalMapping *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  int v5 = (std::string **)((char *)this + 24);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v6 = *(unsigned __int8 **)a2;
        unint64_t v7 = *((void *)a2 + 1);
        if (*(void *)a2 >= v7)
        {
          LODWORD(v9) = 0;
LABEL_65:
          unsigned int TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v9);
          unint64_t v10 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x3FFF) << 32);
          if ((v10 & 0x100000000) == 0) {
            goto LABEL_66;
          }
          goto LABEL_9;
        }
        uint64_t v8 = v6 + 1;
        uint64_t v9 = *v6;
        if ((char)*v6 < 1)
        {
          if ((unint64_t)v8 < v7)
          {
            int v11 = *v8;
            if ((v9 & ~v11) >= 0x80)
            {
              *(void *)a2 = v6 + 2;
              unint64_t v10 = (v9 + (v11 << 7) - 128) | 0x100000000;
              goto LABEL_9;
            }
          }
          goto LABEL_65;
        }
        *(void *)a2 = v8;
        unint64_t v10 = v9 | 0x100000000;
        if ((v10 & 0x100000000) == 0) {
          goto LABEL_66;
        }
LABEL_9:
        unsigned int v12 = v10 >> 3;
        if (v10 >> 3 <= 0x64) {
          break;
        }
        if (v12 == 101)
        {
          if (v10 != 42) {
            goto LABEL_66;
          }
          if (*((_DWORD *)this + 10) != 101)
          {
            CoreML::Specification::CategoricalMapping::clear_ValueOnUnknown((uint64_t)this);
            *((_DWORD *)this + 10) = 101;
            *((void *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
LABEL_40:
            google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
          }
          if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
            goto LABEL_40;
          }
          uint64_t result = google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)a2, *v5);
          if (!result) {
            return result;
          }
          int v23 = *((_DWORD *)this + 10);
          std::string::size_type v24 = (std::string *)&google::protobuf::internal::fixed_address_empty_string;
          if (v23 == 101) {
            std::string::size_type v24 = *v5;
          }
          if (SHIBYTE(v24->__r_.__value_.__r.__words[2]) < 0) {
            std::string::size_type v24 = (std::string *)v24->__r_.__value_.__r.__words[0];
          }
          char v25 = (std::string *)&google::protobuf::internal::fixed_address_empty_string;
          if (v23 == 101) {
            char v25 = *v5;
          }
          if (SHIBYTE(v25->__r_.__value_.__r.__words[2]) < 0) {
            std::string::size_type size = v25->__r_.__value_.__l.__size_;
          }
          else {
            LODWORD(size) = HIBYTE(v25->__r_.__value_.__r.__words[2]);
          }
          if (!google::protobuf::internal::WireFormatLite::VerifyUtf8String((unsigned int *)v24, size, 0, (uint64_t)"CoreML.Specification.CategoricalMapping.strValue"))return 0; {
        }
          }
        else
        {
          if (v12 != 102 || v10 != 48) {
            goto LABEL_66;
          }
          CoreML::Specification::CategoricalMapping::clear_ValueOnUnknown((uint64_t)this);
          uint64_t v15 = *(char **)a2;
          if (*(void *)a2 >= *((void *)a2 + 1) || *v15 < 0)
          {
            unint64_t Varint64Fallback = google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2);
            if ((v27 & 1) == 0) {
              return 0;
            }
          }
          else
          {
            unint64_t Varint64Fallback = *v15;
            *(void *)a2 = v15 + 1;
          }
          *((void *)this + 3) = Varint64Fallback;
          *((_DWORD *)this + 10) = 102;
        }
      }
      if (v12 != 1) {
        break;
      }
      if (v10 != 10) {
        goto LABEL_66;
      }
      if (*((_DWORD *)this + 9) != 1)
      {
        CoreML::Specification::CategoricalMapping::clear_MappingType((uint64_t)this);
        *((_DWORD *)this + 9) = 1;
        operator new();
      }
      char v17 = (CoreML::Specification::StringToInt64Map *)*((void *)this + 2);
      uint64_t v20 = *(char **)a2;
      if (*(void *)a2 >= *((void *)a2 + 1) || *v20 < 0)
      {
        int VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (VarintSizeAsIntFallback < 0) {
          return 0;
        }
      }
      else
      {
        int VarintSizeAsIntFallback = *v20;
        *(void *)a2 = v20 + 1;
      }
      int v33 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
      int v35 = *((_DWORD *)a2 + 13);
      BOOL v31 = __OFSUB__(v35--, 1);
      *((_DWORD *)a2 + 13) = v35;
      if (v35 < 0 != v31) {
        return 0;
      }
      int v32 = v33;
      uint64_t result = CoreML::Specification::StringToInt64Map::MergePartialFromCodedStream(v17, a2, v34);
      if (!result) {
        return result;
      }
LABEL_59:
      if (!google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v32)) {
        return 0;
      }
    }
    if (v12 == 2 && v10 == 18)
    {
      if (*((_DWORD *)this + 9) != 2)
      {
        CoreML::Specification::CategoricalMapping::clear_MappingType((uint64_t)this);
        *((_DWORD *)this + 9) = 2;
        operator new();
      }
      uint64_t v14 = (CoreML::Specification::Int64ToStringMap *)*((void *)this + 2);
      uint64_t v18 = *(char **)a2;
      if (*(void *)a2 >= *((void *)a2 + 1) || *v18 < 0)
      {
        int v19 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v19 < 0) {
          return 0;
        }
      }
      else
      {
        int v19 = *v18;
        *(void *)a2 = v18 + 1;
      }
      int v28 = google::protobuf::io::CodedInputStream::PushLimit(a2, v19);
      int v30 = *((_DWORD *)a2 + 13);
      BOOL v31 = __OFSUB__(v30--, 1);
      *((_DWORD *)a2 + 13) = v30;
      if (v30 < 0 != v31) {
        return 0;
      }
      int v32 = v28;
      uint64_t result = CoreML::Specification::Int64ToStringMap::MergePartialFromCodedStream(v14, a2, v29);
      if (!result) {
        return result;
      }
      goto LABEL_59;
    }
LABEL_66:
    if (!v10 || (v10 & 7) == 4) {
      return 1;
    }
    if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v10, a3) & 1) == 0) {
      return 0;
    }
  }
}

void sub_19EAD3664(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C407031D3CFLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::CategoricalMapping::clear_MappingType(uint64_t this)
{
  uint64_t v1 = this;
  int v2 = *(_DWORD *)(this + 36);
  if (v2 == 2 || v2 == 1)
  {
    this = *(void *)(this + 16);
    if (this) {
      this = (*(uint64_t (**)(uint64_t))(*(void *)this + 8))(this);
    }
  }
  *(_DWORD *)(v1 + 36) = 0;
  return this;
}

uint64_t CoreML::Specification::CategoricalMapping::clear_ValueOnUnknown(uint64_t this)
{
  uint64_t v1 = this;
  if (*(_DWORD *)(this + 40) == 101)
  {
    uint64_t v2 = *(void *)(this + 24);
    if ((long long *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
    {
      if (*(char *)(v2 + 23) < 0) {
        operator delete(*(void **)v2);
      }
      this = MEMORY[0x19F3C1920](v2, 0x1012C40EC159624);
    }
  }
  *(_DWORD *)(v1 + 40) = 0;
  return this;
}

std::string *CoreML::Specification::CategoricalMapping::MergeFrom(std::string *this, const CoreML::Specification::CategoricalMapping *a2)
{
  uint64_t v3 = (uint64_t)this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    this = google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  int v5 = *((_DWORD *)a2 + 9);
  if (v5 == 2)
  {
    if (*(_DWORD *)(v3 + 36) != 2)
    {
      CoreML::Specification::CategoricalMapping::clear_MappingType(v3);
      *(_DWORD *)(v3 + 36) = 2;
      operator new();
    }
    this = (std::string *)CoreML::Specification::Int64ToStringMap::MergeFrom(*(CoreML::Specification::Int64ToStringMap **)(v3 + 16), *((const CoreML::Specification::Int64ToStringMap **)a2 + 2));
  }
  else if (v5 == 1)
  {
    if (*(_DWORD *)(v3 + 36) != 1)
    {
      CoreML::Specification::CategoricalMapping::clear_MappingType(v3);
      *(_DWORD *)(v3 + 36) = 1;
      operator new();
    }
    this = (std::string *)CoreML::Specification::StringToInt64Map::MergeFrom(*(CoreML::Specification::StringToInt64Map **)(v3 + 16), *((const CoreML::Specification::StringToInt64Map **)a2 + 2));
  }
  int v6 = *((_DWORD *)a2 + 10);
  if (v6 != 102)
  {
    if (v6 != 101) {
      return this;
    }
    unint64_t v7 = (const std::string *)*((void *)a2 + 3);
    if (*(_DWORD *)(v3 + 40) == 101)
    {
      uint64_t v8 = *(std::string **)(v3 + 24);
      if (v8 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      {
        return std::string::operator=(v8, v7);
      }
    }
    else
    {
      CoreML::Specification::CategoricalMapping::clear_ValueOnUnknown(v3);
      *(_DWORD *)(v3 + 40) = 101;
      *(void *)(v3 + 24) = &google::protobuf::internal::fixed_address_empty_string;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
  }
  uint64_t v9 = *((void *)a2 + 3);
  if (*(_DWORD *)(v3 + 40) != 102)
  {
    this = (std::string *)CoreML::Specification::CategoricalMapping::clear_ValueOnUnknown(v3);
    *(_DWORD *)(v3 + 40) = 102;
  }
  *(void *)(v3 + 24) = v9;
  return this;
}

void sub_19EAD3960(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C407031D3CFLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::CategoricalMapping::IsInitialized(CoreML::Specification::CategoricalMapping *this)
{
  return 1;
}

uint64_t CoreML::Specification::CategoricalMapping::Clear(CoreML::Specification::CategoricalMapping *this)
{
  CoreML::Specification::CategoricalMapping::clear_MappingType((uint64_t)this);

  return CoreML::Specification::CategoricalMapping::clear_ValueOnUnknown((uint64_t)this);
}

void CoreML::Specification::CategoricalMapping::New(CoreML::Specification::CategoricalMapping *this, google::protobuf::Arena *a2)
{
}

void sub_19EAD3A1C(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A3C40EEBF8A51);
  _Unwind_Resume(a1);
}

CoreML::Specification::CategoricalMapping *CoreML::Specification::CategoricalMapping::CategoricalMapping(CoreML::Specification::CategoricalMapping *this)
{
  *(void *)this = &unk_1EF0D2DD8;
  *((void *)this + 1) = 0;
  if (this != (CoreML::Specification::CategoricalMapping *)&CoreML::Specification::_CategoricalMapping_default_instance_) {
    CoreML::Specification::protobuf_CategoricalMapping_2eproto::InitDefaults(this);
  }
  *((_DWORD *)this + 10) = 0;
  *((void *)this + 4) = 0;
  return this;
}

void sub_19EAD3AA4(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::CategoricalMapping>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    uint64_t result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *uint64_t result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::CategoricalMapping>;
    uint64_t v4 = (unint64_t *)(v3 + 4);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::CategoricalMapping>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void CoreML::Specification::CategoricalMapping::New(CoreML::Specification::CategoricalMapping *this)
{
}

void *CoreML::Specification::CategoricalMapping::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.CategoricalMapping");
}

void CoreML::Specification::CategoricalMapping::~CategoricalMapping(CoreML::Specification::CategoricalMapping *this)
{
  CoreML::Specification::CategoricalMapping::~CategoricalMapping(this);

  JUMPOUT(0x19F3C1920);
}

{
  *(void *)this = &unk_1EF0D2DD8;
  if (*((_DWORD *)this + 9)) {
    CoreML::Specification::CategoricalMapping::clear_MappingType((uint64_t)this);
  }
  if (*((_DWORD *)this + 10)) {
    CoreML::Specification::CategoricalMapping::clear_ValueOnUnknown((uint64_t)this);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

uint64_t CoreML::Specification::Pipeline::GetCachedSize(CoreML::Specification::Pipeline *this)
{
  return *((unsigned int *)this + 16);
}

uint64_t CoreML::Specification::Pipeline::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 24);
  if (v6)
  {
    for (int i = 0; i != v6; ++i)
      this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)1, *(void *)(*(void *)(v5 + 32) + 8 * i + 8), a2, a4);
  }
  uint64_t v8 = *(unsigned int *)(v5 + 48);
  if ((int)v8 >= 1)
  {
    uint64_t v9 = -v8;
    uint64_t v10 = 1;
    do
    {
      int v11 = *(unsigned int **)(*(void *)(v5 + 56) + 8 * v10);
      if (*((char *)v11 + 23) < 0)
      {
        int v11 = *(unsigned int **)v11;
        uint64_t v12 = *(void *)(*(void *)(*(void *)(v5 + 56) + 8 * v10) + 8);
      }
      else
      {
        LODWORD(v12) = *((unsigned __int8 *)v11 + 23);
      }
      google::protobuf::internal::WireFormatLite::VerifyUtf8String(v11, v12, 1, (uint64_t)"CoreML.Specification.Pipeline.names");
      this = google::protobuf::internal::WireFormatLite::WriteString(2u, *(void *)(*(void *)(v5 + 56) + 8 * v10++), a2);
    }
    while (v9 + v10 != 1);
  }
  return this;
}

uint64_t CoreML::Specification::Pipeline::ByteSizeLong(CoreML::Specification::Pipeline *this)
{
  int v2 = *((_DWORD *)this + 6);
  if (v2)
  {
    int v3 = 0;
    uint64_t v4 = *((unsigned int *)this + 6);
    do
    {
      uint64_t v5 = CoreML::Specification::Model::ByteSizeLong(*(CoreML::Specification::Model **)(*((void *)this + 4)
                                                                                       + 8 * v3
                                                                                       + 8));
      v4 += v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6);
      ++v3;
    }
    while (v2 != v3);
  }
  else
  {
    uint64_t v4 = 0;
  }
  uint64_t v6 = *((unsigned int *)this + 12);
  uint64_t result = v4 + v6;
  if ((int)v6 >= 1)
  {
    uint64_t v8 = (uint64_t *)(*((void *)this + 7) + 8);
    do
    {
      uint64_t v9 = *v8++;
      uint64_t v10 = *(unsigned __int8 *)(v9 + 23);
      uint64_t v11 = *(void *)(v9 + 8);
      if ((v10 & 0x80u) == 0) {
        uint64_t v11 = v10;
      }
      result += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6);
      --v6;
    }
    while (v6);
  }
  *((_DWORD *)this + 16) = result;
  return result;
}

uint64_t CoreML::Specification::Model::ByteSizeLong(CoreML::Specification::Model *this)
{
  if (this == (CoreML::Specification::Model *)&CoreML::Specification::_Model_default_instance_
    || (int v2 = (CoreML::Specification::ModelDescription *)*((void *)this + 2)) == 0)
  {
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v3 = CoreML::Specification::ModelDescription::ByteSizeLong(v2);
    uint64_t v4 = v3 + ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  int v5 = *((_DWORD *)this + 6);
  if (v5)
  {
    if (v5 < 0) {
      uint64_t v6 = 10;
    }
    else {
      uint64_t v6 = (9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6;
    }
    v4 += v6 + 1;
  }
  if (*((unsigned char *)this + 28)) {
    uint64_t v7 = v4 + 2;
  }
  else {
    uint64_t v7 = v4;
  }
  int v8 = *((_DWORD *)this + 11);
  if (v8 <= 559)
  {
    if (v8 <= 399)
    {
      if (v8 > 299)
      {
        switch(v8)
        {
          case 300:
            uint64_t v9 = CoreML::Specification::GLMRegressor::ByteSizeLong(*((CoreML::Specification::GLMRegressor **)this + 4));
            goto LABEL_73;
          case 301:
            uint64_t v9 = CoreML::Specification::SupportVectorRegressor::ByteSizeLong(*((CoreML::Specification::SupportVectorRegressor **)this
                                                                             + 4));
            goto LABEL_73;
          case 302:
            uint64_t v9 = (uint64_t)CoreML::Specification::TreeEnsembleRegressor::ByteSizeLong(*((CoreML::Specification::TreeEnsembleRegressor **)this
                                                                                     + 4));
            goto LABEL_73;
          case 303:
            uint64_t v9 = CoreML::Specification::NeuralNetworkRegressor::ByteSizeLong(*((CoreML::Specification::NeuralNetworkRegressor **)this
                                                                             + 4));
            goto LABEL_73;
          case 304:
            uint64_t v9 = CoreML::Specification::BayesianProbitRegressor::ByteSizeLong(*((CoreML::Specification::BayesianProbitRegressor **)this
                                                                              + 4));
            goto LABEL_73;
          default:
            goto LABEL_74;
        }
        goto LABEL_74;
      }
      switch(v8)
      {
        case 200:
          uint64_t v9 = (uint64_t)CoreML::Specification::PipelineClassifier::ByteSizeLong(*((CoreML::Specification::PipelineClassifier **)this
                                                                                + 4));
          break;
        case 201:
          uint64_t v9 = (uint64_t)CoreML::Specification::PipelineRegressor::ByteSizeLong(*((CoreML::Specification::PipelineRegressor **)this
                                                                               + 4));
          break;
        case 202:
          uint64_t v9 = CoreML::Specification::Pipeline::ByteSizeLong(*((CoreML::Specification::Pipeline **)this + 4));
          break;
        default:
          goto LABEL_74;
      }
    }
    else
    {
      if (v8 <= 499)
      {
        switch(v8)
        {
          case 400:
            uint64_t v9 = CoreML::Specification::GLMClassifier::ByteSizeLong(*((CoreML::Specification::GLMClassifier **)this + 4));
            goto LABEL_73;
          case 401:
            uint64_t v9 = CoreML::Specification::SupportVectorClassifier::ByteSizeLong(*((CoreML::Specification::SupportVectorClassifier **)this
                                                                              + 4));
            goto LABEL_73;
          case 402:
            uint64_t v9 = CoreML::Specification::TreeEnsembleClassifier::ByteSizeLong(*((CoreML::Specification::TreeEnsembleClassifier **)this
                                                                             + 4));
            goto LABEL_73;
          case 403:
            uint64_t v9 = CoreML::Specification::NeuralNetworkClassifier::ByteSizeLong(*((CoreML::Specification::NeuralNetworkClassifier **)this
                                                                              + 4));
            goto LABEL_73;
          case 404:
            uint64_t v9 = CoreML::Specification::KNearestNeighborsClassifier::ByteSizeLong(*((CoreML::Specification::KNearestNeighborsClassifier **)this
                                                                                  + 4));
            goto LABEL_73;
          default:
            goto LABEL_74;
        }
        goto LABEL_74;
      }
      if (v8 <= 501)
      {
        if (v8 == 500) {
          uint64_t v9 = CoreML::Specification::NeuralNetwork::ByteSizeLong(*((CoreML::Specification::NeuralNetwork **)this + 4));
        }
        else {
          uint64_t v9 = CoreML::Specification::ItemSimilarityRecommender::ByteSizeLong(*((CoreML::Specification::ItemSimilarityRecommender **)this
        }
                                                                              + 4));
      }
      else
      {
        switch(v8)
        {
          case 502:
            uint64_t v9 = CoreML::Specification::MILSpec::Program::ByteSizeLong(*((CoreML::Specification::MILSpec::Program **)this
                                                                       + 4));
            break;
          case 555:
            uint64_t v9 = CoreML::Specification::CustomModel::ByteSizeLong(*((CoreML::Specification::CustomModel **)this + 4));
            break;
          case 556:
            uint64_t v9 = CoreML::Specification::LinkedModel::ByteSizeLong(*((CoreML::Specification::LinkedModelFile ***)this + 4));
            break;
          default:
            goto LABEL_74;
        }
      }
    }
LABEL_73:
    v7 += v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6) + 2;
    goto LABEL_74;
  }
  if (v8 <= 899)
  {
    switch(v8)
    {
      case 600:
        uint64_t v9 = CoreML::Specification::OneHotEncoder::ByteSizeLong(*((CoreML::Specification::OneHotEncoder **)this + 4));
        goto LABEL_73;
      case 601:
        uint64_t v9 = CoreML::Specification::Imputer::ByteSizeLong(*((CoreML::Specification::Imputer **)this + 4));
        goto LABEL_73;
      case 602:
        uint64_t v9 = CoreML::Specification::FeatureVectorizer::ByteSizeLong(*((CoreML::Specification::FeatureVectorizer **)this
                                                                    + 4));
        goto LABEL_73;
      case 603:
        uint64_t v9 = CoreML::Specification::DictVectorizer::ByteSizeLong(*((CoreML::Specification::DictVectorizer **)this + 4));
        goto LABEL_73;
      case 604:
        uint64_t v9 = CoreML::Specification::Scaler::ByteSizeLong(*((CoreML::Specification::Scaler **)this + 4));
        goto LABEL_73;
      case 605:
      case 608:
        goto LABEL_74;
      case 606:
        uint64_t v9 = CoreML::Specification::CategoricalMapping::ByteSizeLong(*((CoreML::Specification::CategoricalMapping **)this
                                                                     + 4));
        goto LABEL_73;
      case 607:
        uint64_t v12 = *((void *)this + 4);
        int v13 = *(_DWORD *)(v12 + 16);
        if (v13)
        {
          if (v13 < 0) {
            uint64_t v14 = 11;
          }
          else {
            uint64_t v14 = ((9 * (__clz(v13 | 1) ^ 0x1F) + 73) >> 6) + 1;
          }
        }
        else
        {
          uint64_t v14 = 0;
        }
        *(_DWORD *)(v12 + 2CoreML::Specification::CategoricalMapping::New(this, 0) = v14;
        goto LABEL_80;
      case 609:
        uint64_t v9 = CoreML::Specification::ArrayFeatureExtractor::ByteSizeLong(*((CoreML::Specification::ArrayFeatureExtractor **)this
                                                                        + 4));
        goto LABEL_73;
      case 610:
        uint64_t v9 = CoreML::Specification::NonMaximumSuppression::ByteSizeLong(*((CoreML::Specification::NonMaximumSuppression **)this
                                                                        + 4));
        goto LABEL_73;
      default:
        if (v8 != 560) {
          goto LABEL_74;
        }
        uint64_t v9 = CoreML::Specification::ClassConfidenceThresholding::ByteSizeLong(*((CoreML::Specification::ClassConfidenceThresholding **)this
                                                                              + 4));
        break;
    }
    goto LABEL_73;
  }
  switch(v8)
  {
    case 2000:
      uint64_t v9 = CoreML::Specification::CoreMLModels::TextClassifier::ByteSizeLong(*((CoreML::Specification::CoreMLModels::TextClassifier **)this
                                                                             + 4));
      goto LABEL_73;
    case 2001:
      uint64_t v9 = CoreML::Specification::CoreMLModels::WordTagger::ByteSizeLong(*((CoreML::Specification::CoreMLModels::WordTagger **)this
                                                                         + 4));
      goto LABEL_73;
    case 2002:
      uint64_t v9 = CoreML::Specification::CoreMLModels::VisionFeaturePrint::ByteSizeLong(*((CoreML::Specification::CoreMLModels::VisionFeaturePrint **)this
                                                                                 + 4));
      goto LABEL_73;
    case 2003:
      uint64_t v15 = *((void *)this + 4);
      if (*(_DWORD *)(v15 + 28) == 20)
      {
        *(_DWORD *)(*(void *)(v15 + 16) + 16) = 0;
        uint64_t v14 = 3;
      }
      else
      {
        uint64_t v14 = 0;
      }
      *(_DWORD *)(v15 + 24) = v14;
LABEL_80:
      uint64_t v11 = v7 + v14;
      goto LABEL_81;
    case 2004:
      uint64_t v9 = CoreML::Specification::CoreMLModels::Gazetteer::ByteSizeLong(*((CoreML::Specification::CoreMLModels::Gazetteer **)this
                                                                        + 4));
      goto LABEL_73;
    case 2005:
      uint64_t v9 = CoreML::Specification::CoreMLModels::WordEmbedding::ByteSizeLong(*((CoreML::Specification::CoreMLModels::WordEmbedding **)this
                                                                            + 4));
      goto LABEL_73;
    case 2006:
      uint64_t v11 = v7
          + CoreML::Specification::CoreMLModels::AudioFeaturePrint::ByteSizeLong(*((CoreML::Specification::CoreMLModels::AudioFeaturePrint **)this
                                                                                 + 4));
      goto LABEL_81;
    default:
      if (v8 == 900)
      {
        *(_DWORD *)(*((void *)this + 4) + 16) = 0;
        v7 += 3;
      }
      else if (v8 == 3000)
      {
        uint64_t v10 = CoreML::Specification::SerializedModel::ByteSizeLong(*((CoreML::Specification::SerializedModel **)this + 4));
        uint64_t v11 = v7 + v10 + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6);
LABEL_81:
        uint64_t v7 = v11 + 3;
      }
      break;
  }
LABEL_74:
  *((_DWORD *)this + 1CoreML::Specification::CategoricalMapping::New(this, 0) = v7;
  return v7;
}

uint64_t CoreML::Specification::ModelDescription::ByteSizeLong(CoreML::Specification::ModelDescription *this)
{
  int v2 = *((_DWORD *)this + 6);
  if (v2)
  {
    int v3 = 0;
    uint64_t v4 = *((unsigned int *)this + 6);
    do
    {
      uint64_t v5 = CoreML::Specification::FeatureDescription::ByteSizeLong(*(CoreML::Specification::FeatureDescription **)(*((void *)this + 4) + 8 * v3 + 8));
      v4 += v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6);
      ++v3;
    }
    while (v2 != v3);
  }
  else
  {
    uint64_t v4 = 0;
  }
  uint64_t v6 = *((unsigned int *)this + 12);
  uint64_t v7 = v4 + v6;
  if (v6)
  {
    int v8 = 0;
    do
    {
      uint64_t v9 = CoreML::Specification::FeatureDescription::ByteSizeLong(*(CoreML::Specification::FeatureDescription **)(*((void *)this + 7) + 8 * v8 + 8));
      v7 += v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6);
      ++v8;
    }
    while (v6 != v8);
  }
  uint64_t v10 = *((unsigned int *)this + 18);
  uint64_t v11 = v7 + v10;
  if (v10)
  {
    int v12 = 0;
    do
    {
      uint64_t v13 = CoreML::Specification::FeatureDescription::ByteSizeLong(*(CoreML::Specification::FeatureDescription **)(*((void *)this + 10) + 8 * v12 + 8));
      v11 += v13 + ((9 * (__clz(v13 | 1) ^ 0x1F) + 73) >> 6);
      ++v12;
    }
    while (v10 != v12);
  }
  uint64_t v14 = *((unsigned int *)this + 24);
  uint64_t v15 = v11 + 2 * v14;
  if (v14)
  {
    int v16 = 0;
    do
    {
      uint64_t v17 = CoreML::Specification::FunctionDescription::ByteSizeLong(*(CoreML::Specification::FunctionDescription **)(*((void *)this + 13) + 8 * v16 + 8));
      v15 += v17 + ((9 * (__clz(v17 | 1) ^ 0x1F) + 73) >> 6);
      ++v16;
    }
    while (v14 != v16);
  }
  uint64_t v18 = *((unsigned int *)this + 30);
  uint64_t v19 = v15 + 2 * v18;
  if (v18)
  {
    int v20 = 0;
    do
    {
      uint64_t v21 = CoreML::Specification::FeatureDescription::ByteSizeLong(*(CoreML::Specification::FeatureDescription **)(*((void *)this + 16) + 8 * v20 + 8));
      v19 += v21 + ((9 * (__clz(v21 | 1) ^ 0x1F) + 73) >> 6);
      ++v20;
    }
    while (v18 != v20);
  }
  uint64_t v22 = *((void *)this + 17);
  uint64_t v23 = *(unsigned __int8 *)(v22 + 23);
  if (*(char *)(v22 + 23) < 0)
  {
    if (!*(void *)(v22 + 8)) {
      goto LABEL_23;
    }
  }
  else if (!*(unsigned char *)(v22 + 23))
  {
    goto LABEL_23;
  }
  uint64_t v24 = *(void *)(v22 + 8);
  if ((v23 & 0x80u) == 0) {
    uint64_t v24 = v23;
  }
  v19 += v24 + ((9 * (__clz(v24 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_23:
  uint64_t v25 = *((void *)this + 18);
  uint64_t v26 = *(unsigned __int8 *)(v25 + 23);
  if (*(char *)(v25 + 23) < 0)
  {
    if (!*(void *)(v25 + 8)) {
      goto LABEL_28;
    }
  }
  else if (!*(unsigned char *)(v25 + 23))
  {
    goto LABEL_28;
  }
  uint64_t v27 = *(void *)(v25 + 8);
  if ((v26 & 0x80u) == 0) {
    uint64_t v27 = v26;
  }
  v19 += v27 + ((9 * (__clz(v27 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_28:
  uint64_t v28 = *((void *)this + 19);
  uint64_t v29 = *(unsigned __int8 *)(v28 + 23);
  if (*(char *)(v28 + 23) < 0)
  {
    if (!*(void *)(v28 + 8)) {
      goto LABEL_33;
    }
  }
  else if (!*(unsigned char *)(v28 + 23))
  {
    goto LABEL_33;
  }
  uint64_t v30 = *(void *)(v28 + 8);
  if ((v29 & 0x80u) == 0) {
    uint64_t v30 = v29;
  }
  v19 += v30 + ((9 * (__clz(v30 | 1) ^ 0x1F) + 73) >> 6) + 2;
LABEL_33:
  if (this != (CoreML::Specification::ModelDescription *)&CoreML::Specification::_ModelDescription_default_instance_)
  {
    BOOL v31 = (CoreML::Specification::Metadata *)*((void *)this + 20);
    if (v31)
    {
      uint64_t v32 = CoreML::Specification::Metadata::ByteSizeLong(v31);
      v19 += v32 + ((9 * (__clz(v32 | 1) ^ 0x1F) + 73) >> 6) + 2;
    }
  }
  *((_DWORD *)this + 42) = v19;
  return v19;
}

CoreML::Specification::Pipeline *CoreML::Specification::PipelineClassifier::ByteSizeLong(CoreML::Specification::PipelineClassifier *this)
{
  if (this == (CoreML::Specification::PipelineClassifier *)&CoreML::Specification::_PipelineClassifier_default_instance_)
  {
    uint64_t result = 0;
  }
  else
  {
    uint64_t result = (CoreML::Specification::Pipeline *)*((void *)this + 2);
    if (result)
    {
      uint64_t v3 = CoreML::Specification::Pipeline::ByteSizeLong(result);
      uint64_t result = (CoreML::Specification::Pipeline *)(v3 + ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1);
    }
  }
  *((_DWORD *)this + 6) = result;
  return result;
}

CoreML::Specification::Pipeline *CoreML::Specification::PipelineRegressor::ByteSizeLong(CoreML::Specification::PipelineRegressor *this)
{
  if (this == (CoreML::Specification::PipelineRegressor *)&CoreML::Specification::_PipelineRegressor_default_instance_)
  {
    uint64_t result = 0;
  }
  else
  {
    uint64_t result = (CoreML::Specification::Pipeline *)*((void *)this + 2);
    if (result)
    {
      uint64_t v3 = CoreML::Specification::Pipeline::ByteSizeLong(result);
      uint64_t result = (CoreML::Specification::Pipeline *)(v3 + ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1);
    }
  }
  *((_DWORD *)this + 6) = result;
  return result;
}

uint64_t CoreML::Specification::SerializedModel::ByteSizeLong(CoreML::Specification::SerializedModel *this)
{
  uint64_t v1 = *((void *)this + 2);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 23);
  if (*(char *)(v1 + 23) < 0)
  {
    if (*(void *)(v1 + 8)) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v4 = 0;
    goto LABEL_8;
  }
  if (!*(unsigned char *)(v1 + 23)) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v3 = *(void *)(v1 + 8);
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = v2;
  }
  uint64_t v4 = v3 + ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_8:
  uint64_t v5 = *((void *)this + 3);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 23);
  if (*(char *)(v5 + 23) < 0)
  {
    if (!*(void *)(v5 + 8)) {
      goto LABEL_13;
    }
  }
  else if (!*(unsigned char *)(v5 + 23))
  {
    goto LABEL_13;
  }
  uint64_t v7 = *(void *)(v5 + 8);
  if ((v6 & 0x80u) == 0) {
    uint64_t v7 = v6;
  }
  v4 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_13:
  *((_DWORD *)this + 8) = v4;
  return v4;
}

uint64_t CoreML::Specification::FeatureDescription::ByteSizeLong(CoreML::Specification::FeatureDescription *this)
{
  uint64_t v2 = *((void *)this + 2);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(void *)(v2 + 8)) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v5 = 0;
    goto LABEL_8;
  }
  if (!*(unsigned char *)(v2 + 23)) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v4 = *(void *)(v2 + 8);
  if ((v3 & 0x80u) == 0) {
    uint64_t v4 = v3;
  }
  uint64_t v5 = v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_8:
  uint64_t v6 = *((void *)this + 3);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 23);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(void *)(v6 + 8)) {
      goto LABEL_13;
    }
  }
  else if (!*(unsigned char *)(v6 + 23))
  {
    goto LABEL_13;
  }
  uint64_t v8 = *(void *)(v6 + 8);
  if ((v7 & 0x80u) == 0) {
    uint64_t v8 = v7;
  }
  v5 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_13:
  if (this != (CoreML::Specification::FeatureDescription *)&CoreML::Specification::_FeatureDescription_default_instance_)
  {
    uint64_t v9 = (CoreML::Specification::FeatureType *)*((void *)this + 4);
    if (v9)
    {
      uint64_t v10 = CoreML::Specification::FeatureType::ByteSizeLong(v9);
      v5 += v10 + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
  }
  *((_DWORD *)this + 1CoreML::Specification::CategoricalMapping::New(this, 0) = v5;
  return v5;
}

uint64_t CoreML::Specification::FunctionDescription::ByteSizeLong(CoreML::Specification::FunctionDescription *this)
{
  int v2 = *((_DWORD *)this + 6);
  if (v2)
  {
    int v3 = 0;
    uint64_t v4 = *((unsigned int *)this + 6);
    do
    {
      uint64_t v5 = CoreML::Specification::FeatureDescription::ByteSizeLong(*(CoreML::Specification::FeatureDescription **)(*((void *)this + 4) + 8 * v3 + 8));
      v4 += v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6);
      ++v3;
    }
    while (v2 != v3);
  }
  else
  {
    uint64_t v4 = 0;
  }
  uint64_t v6 = *((unsigned int *)this + 12);
  uint64_t v7 = v4 + v6;
  if (v6)
  {
    int v8 = 0;
    do
    {
      uint64_t v9 = CoreML::Specification::FeatureDescription::ByteSizeLong(*(CoreML::Specification::FeatureDescription **)(*((void *)this + 7) + 8 * v8 + 8));
      v7 += v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6);
      ++v8;
    }
    while (v6 != v8);
  }
  uint64_t v10 = *((unsigned int *)this + 18);
  uint64_t v11 = v7 + v10;
  if (v10)
  {
    int v12 = 0;
    do
    {
      uint64_t v13 = CoreML::Specification::FeatureDescription::ByteSizeLong(*(CoreML::Specification::FeatureDescription **)(*((void *)this + 10) + 8 * v12 + 8));
      v11 += v13 + ((9 * (__clz(v13 | 1) ^ 0x1F) + 73) >> 6);
      ++v12;
    }
    while (v10 != v12);
  }
  uint64_t v14 = *((void *)this + 11);
  uint64_t v15 = *(unsigned __int8 *)(v14 + 23);
  if (*(char *)(v14 + 23) < 0)
  {
    if (!*(void *)(v14 + 8)) {
      goto LABEL_17;
    }
  }
  else if (!*(unsigned char *)(v14 + 23))
  {
    goto LABEL_17;
  }
  uint64_t v16 = *(void *)(v14 + 8);
  if ((v15 & 0x80u) == 0) {
    uint64_t v16 = v15;
  }
  v11 += v16 + ((9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_17:
  uint64_t v17 = *((void *)this + 12);
  uint64_t v18 = *(unsigned __int8 *)(v17 + 23);
  if (*(char *)(v17 + 23) < 0)
  {
    if (!*(void *)(v17 + 8)) {
      goto LABEL_22;
    }
  }
  else if (!*(unsigned char *)(v17 + 23))
  {
    goto LABEL_22;
  }
  uint64_t v19 = *(void *)(v17 + 8);
  if ((v18 & 0x80u) == 0) {
    uint64_t v19 = v18;
  }
  v11 += v19 + ((9 * (__clz(v19 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_22:
  uint64_t v20 = *((void *)this + 13);
  uint64_t v21 = *(unsigned __int8 *)(v20 + 23);
  if (*(char *)(v20 + 23) < 0)
  {
    if (!*(void *)(v20 + 8)) {
      goto LABEL_27;
    }
  }
  else if (!*(unsigned char *)(v20 + 23))
  {
    goto LABEL_27;
  }
  uint64_t v22 = *(void *)(v20 + 8);
  if ((v21 & 0x80u) == 0) {
    uint64_t v22 = v21;
  }
  v11 += v22 + ((9 * (__clz(v22 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_27:
  *((_DWORD *)this + 28) = v11;
  return v11;
}

uint64_t CoreML::Specification::Metadata::ByteSizeLong(CoreML::Specification::Metadata *this)
{
  int v2 = (uint64_t *)*((void *)this + 5);
  uint64_t v3 = *v2;
  google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::begin(v21, v2);
  uint64_t v4 = 0;
  uint64_t v5 = 2 * v3;
  while (v21[0])
  {
    uint64_t v6 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::Wrap(*((google::protobuf::Arena **)v21[0] + 3), (google::protobuf::Arena *)(*((void *)v21[0] + 3) + 24), *((google::protobuf::Arena **)this + 2));
    if (v4 != v6)
    {
      if (v4) {
        (*((void (**)(google::protobuf::Arena **))*v4 + 1))(v4);
      }
      uint64_t v4 = v6;
    }
    uint64_t v7 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::ByteSizeLong(v4);
    v5 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
    google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::KeyValuePair const>::operator++(v21);
  }
  if (v4) {
    (*((void (**)(google::protobuf::Arena **))*v4 + 1))(v4);
  }
  uint64_t v8 = *((void *)this + 6);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 23);
  if (*(char *)(v8 + 23) < 0)
  {
    if (!*(void *)(v8 + 8)) {
      goto LABEL_15;
    }
  }
  else if (!*(unsigned char *)(v8 + 23))
  {
    goto LABEL_15;
  }
  uint64_t v10 = *(void *)(v8 + 8);
  if ((v9 & 0x80u) == 0) {
    uint64_t v10 = v9;
  }
  v5 += v10 + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_15:
  uint64_t v11 = *((void *)this + 7);
  uint64_t v12 = *(unsigned __int8 *)(v11 + 23);
  if (*(char *)(v11 + 23) < 0)
  {
    if (!*(void *)(v11 + 8)) {
      goto LABEL_20;
    }
  }
  else if (!*(unsigned char *)(v11 + 23))
  {
    goto LABEL_20;
  }
  uint64_t v13 = *(void *)(v11 + 8);
  if ((v12 & 0x80u) == 0) {
    uint64_t v13 = v12;
  }
  v5 += v13 + ((9 * (__clz(v13 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_20:
  uint64_t v14 = *((void *)this + 8);
  uint64_t v15 = *(unsigned __int8 *)(v14 + 23);
  if (*(char *)(v14 + 23) < 0)
  {
    if (!*(void *)(v14 + 8)) {
      goto LABEL_25;
    }
  }
  else if (!*(unsigned char *)(v14 + 23))
  {
    goto LABEL_25;
  }
  uint64_t v16 = *(void *)(v14 + 8);
  if ((v15 & 0x80u) == 0) {
    uint64_t v16 = v15;
  }
  v5 += v16 + ((9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_25:
  uint64_t v17 = *((void *)this + 9);
  uint64_t v18 = *(unsigned __int8 *)(v17 + 23);
  if (*(char *)(v17 + 23) < 0)
  {
    if (!*(void *)(v17 + 8)) {
      goto LABEL_30;
    }
  }
  else if (!*(unsigned char *)(v17 + 23))
  {
    goto LABEL_30;
  }
  uint64_t v19 = *(void *)(v17 + 8);
  if ((v18 & 0x80u) == 0) {
    uint64_t v19 = v18;
  }
  v5 += v19 + ((9 * (__clz(v19 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_30:
  *((_DWORD *)this + 2CoreML::Specification::CategoricalMapping::New(this, 0) = v5;
  return v5;
}

void sub_19EAD4C94(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

google::protobuf::Arena **google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::Wrap(google::protobuf::Arena *a1, google::protobuf::Arena *a2, google::protobuf::Arena *a3)
{
  if (!a3) {
    operator new();
  }
  result[1] = 0;
  result[2] = (google::protobuf::Arena *)&google::protobuf::internal::fixed_address_empty_string;
  result[3] = (google::protobuf::Arena *)&google::protobuf::internal::fixed_address_empty_string;
  result[4] = a3;
  *uint64_t result = (google::protobuf::Arena *)&unk_1EF0DBC10;
  result[6] = a1;
  result[7] = a2;
  *((_DWORD *)result + 1CoreML::Specification::CategoricalMapping::New(this, 0) = 3;
  return result;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::ByteSizeLong(_DWORD *a1)
{
  int v2 = a1[10];
  if (v2)
  {
    uint64_t v7 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 136))(a1);
    int v8 = *(unsigned __int8 *)(v7 + 23);
    if ((v8 & 0x80u) != 0) {
      int v8 = *(_DWORD *)(v7 + 8);
    }
    uint64_t v3 = (int)(v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6)) + 1;
    if ((a1[10] & 2) != 0) {
      goto LABEL_3;
    }
LABEL_9:
    uint64_t v6 = 0;
    return v6 + v3;
  }
  uint64_t v3 = 0;
  if ((v2 & 2) == 0) {
    goto LABEL_9;
  }
LABEL_3:
  uint64_t v4 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 144))(a1);
  int v5 = *(unsigned __int8 *)(v4 + 23);
  if ((v5 & 0x80u) != 0) {
    int v5 = *(_DWORD *)(v4 + 8);
  }
  uint64_t v6 = (int)(v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6)) + 1;
  return v6 + v3;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::MapEntryWrapper::value(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::MapEntryWrapper::key(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

char *google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::InternalSerializeWithCachedSizesToArray(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  int v5 = (const void **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 136))(a1);
  *a3 = 10;
  uint64_t v6 = google::protobuf::io::CodedOutputStream::WriteStringWithSizeToArray(v5, a3 + 1);
  uint64_t v7 = (const void **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 144))(a1);
  *uint64_t v6 = 18;

  return google::protobuf::io::CodedOutputStream::WriteStringWithSizeToArray(v7, v6 + 1);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::GetCachedSize(_DWORD *a1)
{
  int v2 = a1[10];
  if (v2)
  {
    uint64_t v7 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 136))(a1);
    int v8 = *(unsigned __int8 *)(v7 + 23);
    if ((v8 & 0x80u) != 0) {
      int v8 = *(_DWORD *)(v7 + 8);
    }
    unsigned int v3 = v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((a1[10] & 2) != 0) {
      goto LABEL_3;
    }
LABEL_9:
    unsigned int v6 = 0;
    return v6 + v3;
  }
  unsigned int v3 = 0;
  if ((v2 & 2) == 0) {
    goto LABEL_9;
  }
LABEL_3:
  uint64_t v4 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 144))(a1);
  int v5 = *(unsigned __int8 *)(v4 + 23);
  if ((v5 & 0x80u) != 0) {
    int v5 = *(_DWORD *)(v4 + 8);
  }
  unsigned int v6 = v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  return v6 + v3;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::SerializeWithCachedSizes(uint64_t a1, google::protobuf::io::CodedOutputStream *a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 136))(a1);
  google::protobuf::internal::WireFormatLite::WriteString(1u, v4, a2);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 144))(a1);

  return google::protobuf::internal::WireFormatLite::WriteString(2u, v5, a2);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::MergePartialFromCodedStream(uint64_t a1, char **this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      uint64_t v5 = *this;
      if (*this >= this[1])
      {
        LODWORD(TagFallback) = 0;
      }
      else
      {
        unint64_t TagFallback = *v5;
        if ((*v5 & 0x80000000) == 0)
        {
          *this = v5 + 1;
          goto LABEL_6;
        }
      }
      unint64_t TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback((google::protobuf::io::CodedInputStream *)this, TagFallback);
LABEL_6:
      if (TagFallback != 10) {
        break;
      }
      *(_DWORD *)(a1 + 40) |= 1u;
      uint64_t v7 = *(long long **)(a1 + 16);
      if (v7 == &google::protobuf::internal::fixed_address_empty_string) {
        google::protobuf::internal::ArenaStringPtr::CreateInstance();
      }
      uint64_t result = google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)this, (std::string *)v7);
      if (!result) {
        return result;
      }
      int v8 = *(_DWORD *)(a1 + 40) | 1;
      *(_DWORD *)(a1 + 4CoreML::Specification::CategoricalMapping::New(this, 0) = v8;
      uint64_t v9 = *this;
      if (*this < this[1] && *v9 == 18)
      {
        *this = v9 + 1;
LABEL_19:
        *(_DWORD *)(a1 + 4CoreML::Specification::CategoricalMapping::New(this, 0) = v8 | 2;
        uint64_t v10 = *(long long **)(a1 + 24);
        if (v10 == &google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstance();
        }
        uint64_t result = google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)this, (std::string *)v10);
        if (!result) {
          return result;
        }
        *(_DWORD *)(a1 + 40) |= 2u;
        if (*this == this[1] && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          uint64_t result = 1;
          *((unsigned char *)this + 36) = 1;
          return result;
        }
      }
    }
    if (TagFallback == 18)
    {
      int v8 = *(_DWORD *)(a1 + 40);
      goto LABEL_19;
    }
    if (!TagFallback || (TagFallback & 7) == 4) {
      return 1;
    }
    if ((google::protobuf::internal::WireFormatLite::SkipField((google::protobuf::internal::WireFormatLite *)this, (google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
  }
    }
}

void google::protobuf::internal::ArenaStringPtr::CreateInstance()
{
}

void sub_19EAD52DC(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<std::string>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  if (a2)
  {
    unsigned int v3 = result;
    uint64_t result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *uint64_t result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<std::string>;
    uint64_t v4 = (unint64_t *)(v3 + 4);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<std::string>(uint64_t result)
{
  if (result)
  {
    if (*(char *)(result + 23) < 0) {
      operator delete(*(void **)result);
    }
    JUMPOUT(0x19F3C1920);
  }
  return result;
}

std::string *google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::CheckTypeAndMergeFrom(std::string *result, _DWORD *a2)
{
  int v2 = a2[10];
  if (v2)
  {
    uint64_t v4 = result;
    if (v2)
    {
      unint64_t v5 = (std::string **)&result->__r_.__value_.__r.__words[2];
      if ((long long *)result->__r_.__value_.__r.__words[2] == &google::protobuf::internal::fixed_address_empty_string) {
        google::protobuf::internal::ArenaStringPtr::CreateInstance();
      }
      unsigned int v6 = (const std::string *)(*(uint64_t (**)(_DWORD *))(*(void *)a2 + 136))(a2);
      if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
        google::protobuf::internal::ArenaStringPtr::CreateInstance();
      }
      uint64_t result = std::string::operator=(*v5, v6);
      LODWORD(v4[1].__r_.__value_.__r.__words[2]) |= 1u;
      int v2 = a2[10];
    }
    if ((v2 & 2) != 0)
    {
      uint64_t v7 = (std::string **)&v4[1];
      if ((long long *)v4[1].__r_.__value_.__l.__data_ == &google::protobuf::internal::fixed_address_empty_string) {
        google::protobuf::internal::ArenaStringPtr::CreateInstance();
      }
      int v8 = (const std::string *)(*(uint64_t (**)(_DWORD *))(*(void *)a2 + 144))(a2);
      if (*v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
        google::protobuf::internal::ArenaStringPtr::CreateInstance();
      }
      uint64_t result = std::string::operator=(*v7, v8);
      LODWORD(v4[1].__r_.__value_.__r.__words[2]) |= 2u;
    }
  }
  return result;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::IsInitialized()
{
  return 1;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::Clear(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if ((long long *)v1 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v1 + 23) < 0)
    {
      **(unsigned char **)uint64_t v1 = 0;
      *(void *)(v1 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v1 = 0;
      *(unsigned char *)(v1 + 23) = 0;
    }
  }
  uint64_t v2 = *(void *)(result + 24);
  if ((long long *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(unsigned char **)uint64_t v2 = 0;
      *(void *)(v2 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v2 = 0;
      *(unsigned char *)(v2 + 23) = 0;
    }
  }
  *(_DWORD *)(result + 40) &= 0xFFFFFFFC;
  return result;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::GetArena(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

google::protobuf::Arena **google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::New(uint64_t a1, google::protobuf::Arena *a2)
{
  if (!a2) {
    operator new();
  }
  result[1] = 0;
  result[2] = (google::protobuf::Arena *)&google::protobuf::internal::fixed_address_empty_string;
  result[3] = (google::protobuf::Arena *)&google::protobuf::internal::fixed_address_empty_string;
  result[4] = a2;
  *((_DWORD *)result + 1CoreML::Specification::CategoricalMapping::New(this, 0) = 0;
  unint64_t v5 = *(google::protobuf::Arena **)(a1 + 8);
  *uint64_t result = (google::protobuf::Arena *)&unk_1EF0DC690;
  result[1] = v5;
  return result;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::value(uint64_t a1)
{
  if (!*(void *)(a1 + 8))
  {
    int v3 = 3;
    uint64_t v4 = "/Library/Caches/com.apple.xbs/Sources/CoreML/coremltools-internal/deps/protobuf/src/google/protobuf/map_entry_lite.h";
    int v5 = 162;
    memset(&__p, 0, sizeof(__p));
    std::string::append(&__p, "CHECK failed: default_instance_ != NULL: ");
    google::protobuf::internal::LogMessage::Finish((google::protobuf::internal::LogMessage *)&v3);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  return *(void *)(a1 + 24);
}

void sub_19EAD5690(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::key(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::New()
{
}

void *google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, (char *)&unk_19EC86ACE);
}

void google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::~MapEntryLite(void *a1)
{
  google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::~MapEntryImpl(a1);

  JUMPOUT(0x19F3C1920);
}

void *google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::~MapEntryImpl(void *a1)
{
  *a1 = &unk_1EF0DBCB8;
  if ((void *)a1[1] != a1 && !a1[4])
  {
    google::protobuf::internal::MapTypeHandler<(google::protobuf::internal::WireFormatLite::FieldType)9,std::string>::DeleteNoArena(a1[2]);
    google::protobuf::internal::MapTypeHandler<(google::protobuf::internal::WireFormatLite::FieldType)9,std::string>::DeleteNoArena(a1[3]);
  }
  return a1;
}

uint64_t google::protobuf::internal::MapTypeHandler<(google::protobuf::internal::WireFormatLite::FieldType)9,std::string>::DeleteNoArena(uint64_t result)
{
  if ((long long *)result != &google::protobuf::internal::fixed_address_empty_string && result != 0)
  {
    if (*(char *)(result + 23) < 0) {
      operator delete(*(void **)result);
    }
    JUMPOUT(0x19F3C1920);
  }
  return result;
}

void google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::~MapEntryImpl(void *a1)
{
  google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::~MapEntryImpl(a1);

  JUMPOUT(0x19F3C1920);
}

void google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::MapEntryWrapper::~MapEntryWrapper(void *a1)
{
  google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::~MapEntryImpl(a1);

  JUMPOUT(0x19F3C1920);
}

uint64_t CoreML::Specification::Pipeline::MergePartialFromCodedStream(CoreML::Specification::Pipeline *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  int v5 = (CoreML::Specification::Pipeline *)((char *)this + 40);
  unsigned int v6 = (google::protobuf::Arena **)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = *(char **)a2;
        if (*(void *)a2 >= *((void *)a2 + 1))
        {
          LODWORD(v8) = 0;
LABEL_7:
          unsigned int TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v8);
          unint64_t v9 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
          if ((v9 & 0x100000000) == 0) {
            goto LABEL_21;
          }
          goto LABEL_8;
        }
        uint64_t v8 = *v7;
        if (*v7 < 1) {
          goto LABEL_7;
        }
        *(void *)a2 = v7 + 1;
        unint64_t v9 = v8 | 0x100000000;
        if ((v9 & 0x100000000) == 0) {
          goto LABEL_21;
        }
LABEL_8:
        if (v9 >> 3 != 2) {
          break;
        }
        if (v9 != 18) {
          goto LABEL_21;
        }
        uint64_t v16 = (int *)*((void *)this + 7);
        if (!v16)
        {
          int v17 = *((_DWORD *)this + 12);
          int v18 = *((_DWORD *)this + 13);
          goto LABEL_38;
        }
        int v17 = *((_DWORD *)this + 12);
        int v18 = *v16;
        if (v17 >= *v16)
        {
          if (v18 == *((_DWORD *)this + 13))
          {
LABEL_38:
            if (v17 <= v18)
            {
              google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend(v5, v18 - v17 + 1);
              uint64_t v16 = (int *)*((void *)this + 7);
            }
            int v18 = *v16;
          }
          *uint64_t v16 = v18 + 1;
          uint64_t v25 = *(google::protobuf::Arena **)v5;
          if (!*(void *)v5) {
            operator new();
          }
          Aligned->__r_.__value_.__l.__size_ = 0;
          Aligned->__r_.__value_.__r.__words[2] = 0;
          Aligned->__r_.__value_.__r.__words[0] = 0;
          uint64_t v26 = google::protobuf::Arena::AllocateAligned(v25, 0, 24);
          void *v26 = (google::protobuf::Arena *)Aligned;
          v26[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<std::string>;
          uint64_t v27 = (unint64_t *)((char *)v25 + 32);
          do
            unint64_t v28 = __ldxr(v27);
          while (__stxr((unint64_t)v26, v27));
          v26[2] = (google::protobuf::Arena *)v28;
          uint64_t v39 = *((void *)this + 7);
          uint64_t v40 = *((int *)this + 12);
          *((_DWORD *)this + 12) = v40 + 1;
          *(void *)(v39 + 8 * v40 + 8) = Aligned;
          goto LABEL_55;
        }
        *((_DWORD *)this + 12) = v17 + 1;
        Aligned = *(std::string **)&v16[2 * v17 + 2];
LABEL_55:
        uint64_t result = google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)a2, Aligned);
        if (!result) {
          return result;
        }
        uint64_t v41 = *((void *)this + 7);
        uint64_t v42 = *(unsigned int **)(v41 + 8 * *((int *)this + 12));
        if (*((char *)v42 + 23) < 0)
        {
          uint64_t v42 = *(unsigned int **)v42;
          uint64_t v43 = *(void *)(*(void *)(v41 + 8 * *((int *)this + 12)) + 8);
        }
        else
        {
          LODWORD(v43) = *((unsigned __int8 *)v42 + 23);
        }
        if (!google::protobuf::internal::WireFormatLite::VerifyUtf8String(v42, v43, 0, (uint64_t)"CoreML.Specification.Pipeline.names"))return 0; {
      }
        }
      if (v9 >> 3 != 1 || v9 != 10) {
        break;
      }
      uint64_t v12 = (int *)*((void *)this + 4);
      if (!v12)
      {
        int v13 = *((_DWORD *)this + 6);
        int v14 = *((_DWORD *)this + 7);
        goto LABEL_30;
      }
      int v13 = *((_DWORD *)this + 6);
      int v14 = *v12;
      if (v13 >= *v12)
      {
        if (v14 != *((_DWORD *)this + 7))
        {
LABEL_33:
          *uint64_t v12 = v14 + 1;
          uint64_t v21 = *v6;
          if (!*v6) {
            operator new();
          }
          CoreML::Specification::Model::Model((CoreML::Specification::Model *)v15);
          uint64_t v22 = google::protobuf::Arena::AllocateAligned(v21, 0, 24);
          *uint64_t v22 = (google::protobuf::Arena *)v15;
          v22[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::Model>;
          uint64_t v23 = (unint64_t *)((char *)v21 + 32);
          do
            unint64_t v24 = __ldxr(v23);
          while (__stxr((unint64_t)v22, v23));
          v22[2] = (google::protobuf::Arena *)v24;
          uint64_t v29 = *((void *)this + 4);
          uint64_t v30 = *((int *)this + 6);
          *((_DWORD *)this + 6) = v30 + 1;
          *(void *)(v29 + 8 * v30 + 8) = v15;
          goto LABEL_46;
        }
LABEL_30:
        if (v13 <= v14)
        {
          google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)v6, v14 - v13 + 1);
          uint64_t v12 = (int *)*((void *)this + 4);
        }
        int v14 = *v12;
        goto LABEL_33;
      }
      *((_DWORD *)this + 6) = v13 + 1;
      uint64_t v15 = *(google::protobuf::Arena ***)&v12[2 * v13 + 2];
LABEL_46:
      BOOL v31 = *(char **)a2;
      if (*(void *)a2 >= *((void *)a2 + 1) || *v31 < 0)
      {
        int VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (VarintSizeAsIntFallback < 0) {
          return 0;
        }
      }
      else
      {
        int VarintSizeAsIntFallback = *v31;
        *(void *)a2 = v31 + 1;
      }
      int v33 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
      int v35 = *((_DWORD *)a2 + 13);
      BOOL v36 = __OFSUB__(v35--, 1);
      *((_DWORD *)a2 + 13) = v35;
      if (v35 < 0 == v36)
      {
        int v37 = v33;
        uint64_t result = CoreML::Specification::Model::MergePartialFromCodedStream((CoreML::Specification::Model *)v15, a2, v34);
        if (!result) {
          return result;
        }
        if (google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v37)) {
          continue;
        }
      }
      return 0;
    }
LABEL_21:
    if (!v9 || (v9 & 7) == 4) {
      return 1;
    }
    if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v9, a3) & 1) == 0) {
      return 0;
    }
  }
}

void sub_19EAD5C78(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C4065E65A88);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::Model::MergePartialFromCodedStream(CoreML::Specification::Model *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      while (1)
      {
        int v5 = *(unsigned __int8 **)a2;
        unint64_t v6 = *((void *)a2 + 1);
        if (*(void *)a2 >= v6)
        {
          LODWORD(v8) = 0;
        }
        else
        {
          uint64_t v7 = v5 + 1;
          uint64_t v8 = *v5;
          if ((char)*v5 >= 1)
          {
            *(void *)a2 = v7;
            unint64_t v9 = v8 | 0x100000000;
            if ((v9 & 0x100000000) == 0) {
              goto LABEL_8;
            }
            goto LABEL_16;
          }
          if ((unint64_t)v7 < v6)
          {
            int v10 = *v7;
            if ((v8 & ~v10) >= 0x80)
            {
              *(void *)a2 = v5 + 2;
              unint64_t v9 = (v8 + (v10 << 7) - 128) | 0x100000000;
              goto LABEL_16;
            }
          }
        }
        unsigned int TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v8);
        unint64_t v9 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x5DC2) << 32);
        if ((v9 & 0x100000000) == 0) {
          goto LABEL_8;
        }
LABEL_16:
        unsigned int v13 = v9 >> 3;
        if (v9 >> 3 <= 0x22B) {
          break;
        }
        if (v9 >> 3 <= 0x383)
        {
          switch(v13)
          {
            case 0x258u:
              if (v9 != 194) {
                goto LABEL_8;
              }
              if (*((_DWORD *)this + 11) != 600)
              {
                CoreML::Specification::Model::clear_Type((uint64_t)this);
                *((_DWORD *)this + 11) = 600;
                operator new();
              }
              uint64_t v15 = (CoreML::Specification::OneHotEncoder *)*((void *)this + 4);
              uint64_t v61 = *(char **)a2;
              if (*(void *)a2 >= *((void *)a2 + 1) || *v61 < 0)
              {
                int VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                if (VarintSizeAsIntFallback < 0) {
                  return 0;
                }
              }
              else
              {
                int VarintSizeAsIntFallback = *v61;
                *(void *)a2 = v61 + 1;
              }
              int v141 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
              int v143 = *((_DWORD *)a2 + 13);
              BOOL v121 = __OFSUB__(v143--, 1);
              *((_DWORD *)a2 + 13) = v143;
              if (v143 < 0 != v121) {
                return 0;
              }
              int v122 = v141;
              uint64_t result = CoreML::Specification::OneHotEncoder::MergePartialFromCodedStream(v15, a2, v142);
              if (!result) {
                return result;
              }
              goto LABEL_466;
            case 0x259u:
              if (v9 != 202) {
                goto LABEL_8;
              }
              if (*((_DWORD *)this + 11) != 601)
              {
                CoreML::Specification::Model::clear_Type((uint64_t)this);
                *((_DWORD *)this + 11) = 601;
                operator new();
              }
              BOOL v31 = (CoreML::Specification::Imputer *)*((void *)this + 4);
              long long v63 = *(char **)a2;
              if (*(void *)a2 >= *((void *)a2 + 1) || *v63 < 0)
              {
                int v64 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                if (v64 < 0) {
                  return 0;
                }
              }
              else
              {
                int v64 = *v63;
                *(void *)a2 = v63 + 1;
              }
              int v144 = google::protobuf::io::CodedInputStream::PushLimit(a2, v64);
              int v146 = *((_DWORD *)a2 + 13);
              BOOL v121 = __OFSUB__(v146--, 1);
              *((_DWORD *)a2 + 13) = v146;
              if (v146 < 0 != v121) {
                return 0;
              }
              int v122 = v144;
              uint64_t result = CoreML::Specification::Imputer::MergePartialFromCodedStream(v31, a2, v145);
              if (!result) {
                return result;
              }
              goto LABEL_466;
            case 0x25Au:
              if (v9 != 210) {
                goto LABEL_8;
              }
              if (*((_DWORD *)this + 11) != 602)
              {
                CoreML::Specification::Model::clear_Type((uint64_t)this);
                *((_DWORD *)this + 11) = 602;
                operator new();
              }
              uint64_t v32 = (CoreML::Specification::FeatureVectorizer *)*((void *)this + 4);
              unint64_t v65 = *(char **)a2;
              if (*(void *)a2 >= *((void *)a2 + 1) || *v65 < 0)
              {
                int v66 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                if (v66 < 0) {
                  return 0;
                }
              }
              else
              {
                int v66 = *v65;
                *(void *)a2 = v65 + 1;
              }
              int v147 = google::protobuf::io::CodedInputStream::PushLimit(a2, v66);
              int v149 = *((_DWORD *)a2 + 13);
              BOOL v121 = __OFSUB__(v149--, 1);
              *((_DWORD *)a2 + 13) = v149;
              if (v149 < 0 != v121) {
                return 0;
              }
              int v122 = v147;
              uint64_t result = CoreML::Specification::FeatureVectorizer::MergePartialFromCodedStream(v32, a2, v148);
              if (!result) {
                return result;
              }
              goto LABEL_466;
            case 0x25Bu:
              if (v9 != 218) {
                goto LABEL_8;
              }
              if (*((_DWORD *)this + 11) != 603)
              {
                CoreML::Specification::Model::clear_Type((uint64_t)this);
                *((_DWORD *)this + 11) = 603;
                operator new();
              }
              int v33 = (CoreML::Specification::DictVectorizer *)*((void *)this + 4);
              v67 = *(char **)a2;
              if (*(void *)a2 >= *((void *)a2 + 1) || *v67 < 0)
              {
                int v68 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                if (v68 < 0) {
                  return 0;
                }
              }
              else
              {
                int v68 = *v67;
                *(void *)a2 = v67 + 1;
              }
              int v150 = google::protobuf::io::CodedInputStream::PushLimit(a2, v68);
              int v152 = *((_DWORD *)a2 + 13);
              BOOL v121 = __OFSUB__(v152--, 1);
              *((_DWORD *)a2 + 13) = v152;
              if (v152 < 0 != v121) {
                return 0;
              }
              int v122 = v150;
              uint64_t result = CoreML::Specification::DictVectorizer::MergePartialFromCodedStream(v33, a2, v151);
              if (!result) {
                return result;
              }
              goto LABEL_466;
            case 0x25Cu:
              if (v9 != 226) {
                goto LABEL_8;
              }
              if (*((_DWORD *)this + 11) != 604)
              {
                CoreML::Specification::Model::clear_Type((uint64_t)this);
                *((_DWORD *)this + 11) = 604;
                operator new();
              }
              unsigned int v34 = (CoreML::Specification::Scaler *)*((void *)this + 4);
              uint64_t v69 = *(char **)a2;
              if (*(void *)a2 >= *((void *)a2 + 1) || *v69 < 0)
              {
                int v70 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                if (v70 < 0) {
                  return 0;
                }
              }
              else
              {
                int v70 = *v69;
                *(void *)a2 = v69 + 1;
              }
              int v153 = google::protobuf::io::CodedInputStream::PushLimit(a2, v70);
              int v155 = *((_DWORD *)a2 + 13);
              BOOL v121 = __OFSUB__(v155--, 1);
              *((_DWORD *)a2 + 13) = v155;
              if (v155 < 0 != v121) {
                return 0;
              }
              int v122 = v153;
              uint64_t result = CoreML::Specification::Scaler::MergePartialFromCodedStream(v34, (char **)a2, v154);
              if (!result) {
                return result;
              }
              goto LABEL_466;
            case 0x25Du:
            case 0x260u:
              goto LABEL_8;
            case 0x25Eu:
              if (v9 != 242) {
                goto LABEL_8;
              }
              if (*((_DWORD *)this + 11) != 606)
              {
                CoreML::Specification::Model::clear_Type((uint64_t)this);
                *((_DWORD *)this + 11) = 606;
                operator new();
              }
              int v35 = (CoreML::Specification::CategoricalMapping *)*((void *)this + 4);
              uint64_t v71 = *(char **)a2;
              if (*(void *)a2 >= *((void *)a2 + 1) || *v71 < 0)
              {
                int v72 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                if (v72 < 0) {
                  return 0;
                }
              }
              else
              {
                int v72 = *v71;
                *(void *)a2 = v71 + 1;
              }
              int v156 = google::protobuf::io::CodedInputStream::PushLimit(a2, v72);
              int v158 = *((_DWORD *)a2 + 13);
              BOOL v121 = __OFSUB__(v158--, 1);
              *((_DWORD *)a2 + 13) = v158;
              if (v158 < 0 != v121) {
                return 0;
              }
              int v122 = v156;
              uint64_t result = CoreML::Specification::CategoricalMapping::MergePartialFromCodedStream(v35, a2, v157);
              if (!result) {
                return result;
              }
              goto LABEL_466;
            case 0x25Fu:
              if (v9 != 250) {
                goto LABEL_8;
              }
              if (*((_DWORD *)this + 11) != 607)
              {
                CoreML::Specification::Model::clear_Type((uint64_t)this);
                *((_DWORD *)this + 11) = 607;
                operator new();
              }
              BOOL v36 = (CoreML::Specification::Normalizer *)*((void *)this + 4);
              int v73 = *(char **)a2;
              if (*(void *)a2 >= *((void *)a2 + 1) || *v73 < 0)
              {
                int v74 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                if (v74 < 0) {
                  return 0;
                }
              }
              else
              {
                int v74 = *v73;
                *(void *)a2 = v73 + 1;
              }
              int v159 = google::protobuf::io::CodedInputStream::PushLimit(a2, v74);
              int v161 = *((_DWORD *)a2 + 13);
              BOOL v121 = __OFSUB__(v161--, 1);
              *((_DWORD *)a2 + 13) = v161;
              if (v161 < 0 != v121) {
                return 0;
              }
              int v122 = v159;
              uint64_t result = CoreML::Specification::Normalizer::MergePartialFromCodedStream(v36, (char **)a2, v160);
              if (!result) {
                return result;
              }
              goto LABEL_466;
            case 0x261u:
              if (v9 != 10) {
                goto LABEL_8;
              }
              if (*((_DWORD *)this + 11) != 609)
              {
                CoreML::Specification::Model::clear_Type((uint64_t)this);
                *((_DWORD *)this + 11) = 609;
                operator new();
              }
              int v37 = (CoreML::Specification::ArrayFeatureExtractor *)*((void *)this + 4);
              std::string::size_type v75 = *(char **)a2;
              if (*(void *)a2 >= *((void *)a2 + 1) || *v75 < 0)
              {
                int v76 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                if (v76 < 0) {
                  return 0;
                }
              }
              else
              {
                int v76 = *v75;
                *(void *)a2 = v75 + 1;
              }
              int v162 = google::protobuf::io::CodedInputStream::PushLimit(a2, v76);
              int v164 = *((_DWORD *)a2 + 13);
              BOOL v121 = __OFSUB__(v164--, 1);
              *((_DWORD *)a2 + 13) = v164;
              if (v164 < 0 != v121) {
                return 0;
              }
              int v122 = v162;
              uint64_t result = CoreML::Specification::ArrayFeatureExtractor::MergePartialFromCodedStream(v37, a2, v163);
              if (!result) {
                return result;
              }
              goto LABEL_466;
            case 0x262u:
              if (v9 != 18) {
                goto LABEL_8;
              }
              if (*((_DWORD *)this + 11) != 610)
              {
                CoreML::Specification::Model::clear_Type((uint64_t)this);
                *((_DWORD *)this + 11) = 610;
                operator new();
              }
              uint64_t v38 = (CoreML::Specification::NonMaximumSuppression *)*((void *)this + 4);
              uint64_t v77 = *(char **)a2;
              if (*(void *)a2 >= *((void *)a2 + 1) || *v77 < 0)
              {
                int v78 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                if (v78 < 0) {
                  return 0;
                }
              }
              else
              {
                int v78 = *v77;
                *(void *)a2 = v77 + 1;
              }
              int v165 = google::protobuf::io::CodedInputStream::PushLimit(a2, v78);
              int v167 = *((_DWORD *)a2 + 13);
              BOOL v121 = __OFSUB__(v167--, 1);
              *((_DWORD *)a2 + 13) = v167;
              if (v167 < 0 != v121) {
                return 0;
              }
              int v122 = v165;
              uint64_t result = CoreML::Specification::NonMaximumSuppression::MergePartialFromCodedStream(v38, a2, v166);
              if (!result) {
                return result;
              }
              goto LABEL_466;
            default:
              if (v13 != 556)
              {
                if (v13 != 560 || v9 != 130) {
                  goto LABEL_8;
                }
                if (*((_DWORD *)this + 11) != 560)
                {
                  CoreML::Specification::Model::clear_Type((uint64_t)this);
                  *((_DWORD *)this + 11) = 560;
                  operator new();
                }
                unint64_t v24 = (CoreML::Specification::ClassConfidenceThresholding *)*((void *)this + 4);
                std::string v113 = *(char **)a2;
                if (*(void *)a2 >= *((void *)a2 + 1) || *v113 < 0)
                {
                  int v114 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                  if (v114 < 0) {
                    return 0;
                  }
                }
                else
                {
                  int v114 = *v113;
                  *(void *)a2 = v113 + 1;
                }
                int v226 = google::protobuf::io::CodedInputStream::PushLimit(a2, v114);
                int v228 = *((_DWORD *)a2 + 13);
                BOOL v121 = __OFSUB__(v228--, 1);
                *((_DWORD *)a2 + 13) = v228;
                if (v228 < 0 != v121) {
                  return 0;
                }
                int v122 = v226;
                uint64_t result = CoreML::Specification::ClassConfidenceThresholding::MergePartialFromCodedStream(v24, a2, v227);
                if (!result) {
                  return result;
                }
                goto LABEL_466;
              }
              if (v9 == 98)
              {
                if (*((_DWORD *)this + 11) != 556)
                {
                  CoreML::Specification::Model::clear_Type((uint64_t)this);
                  *((_DWORD *)this + 11) = 556;
                  operator new();
                }
                long long v53 = (CoreML::Specification::LinkedModel *)*((void *)this + 4);
                long long v115 = *(char **)a2;
                if (*(void *)a2 >= *((void *)a2 + 1) || *v115 < 0)
                {
                  int v116 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                  if (v116 < 0) {
                    return 0;
                  }
                }
                else
                {
                  int v116 = *v115;
                  *(void *)a2 = v115 + 1;
                }
                int v229 = google::protobuf::io::CodedInputStream::PushLimit(a2, v116);
                int v231 = *((_DWORD *)a2 + 13);
                BOOL v121 = __OFSUB__(v231--, 1);
                *((_DWORD *)a2 + 13) = v231;
                if (v231 < 0 != v121) {
                  return 0;
                }
                int v122 = v229;
                uint64_t result = CoreML::Specification::LinkedModel::MergePartialFromCodedStream(v53, a2, v230);
                if (!result) {
                  return result;
                }
                goto LABEL_466;
              }
              break;
          }
          goto LABEL_8;
        }
        switch(v13)
        {
          case 0x7D0u:
            if (v9 != 130) {
              goto LABEL_8;
            }
            if (*((_DWORD *)this + 11) != 2000)
            {
              CoreML::Specification::Model::clear_Type((uint64_t)this);
              *((_DWORD *)this + 11) = 2000;
              operator new();
            }
            int v17 = (CoreML::Specification::CoreMLModels::TextClassifier *)*((void *)this + 4);
            char v81 = *(char **)a2;
            if (*(void *)a2 >= *((void *)a2 + 1) || *v81 < 0)
            {
              int v82 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
              if (v82 < 0) {
                return 0;
              }
            }
            else
            {
              int v82 = *v81;
              *(void *)a2 = v81 + 1;
            }
            int v177 = google::protobuf::io::CodedInputStream::PushLimit(a2, v82);
            int v179 = *((_DWORD *)a2 + 13);
            BOOL v121 = __OFSUB__(v179--, 1);
            *((_DWORD *)a2 + 13) = v179;
            if (v179 < 0 != v121) {
              return 0;
            }
            int v122 = v177;
            uint64_t result = CoreML::Specification::CoreMLModels::TextClassifier::MergePartialFromCodedStream(v17, a2, v178);
            if (!result) {
              return result;
            }
            goto LABEL_466;
          case 0x7D1u:
            if (v9 != 138) {
              goto LABEL_8;
            }
            if (*((_DWORD *)this + 11) != 2001)
            {
              CoreML::Specification::Model::clear_Type((uint64_t)this);
              *((_DWORD *)this + 11) = 2001;
              operator new();
            }
            uint64_t v43 = (CoreML::Specification::CoreMLModels::WordTagger *)*((void *)this + 4);
            uint64_t v97 = *(char **)a2;
            if (*(void *)a2 >= *((void *)a2 + 1) || *v97 < 0)
            {
              int v98 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
              if (v98 < 0) {
                return 0;
              }
            }
            else
            {
              int v98 = *v97;
              *(void *)a2 = v97 + 1;
            }
            int v202 = google::protobuf::io::CodedInputStream::PushLimit(a2, v98);
            int v204 = *((_DWORD *)a2 + 13);
            BOOL v121 = __OFSUB__(v204--, 1);
            *((_DWORD *)a2 + 13) = v204;
            if (v204 < 0 != v121) {
              return 0;
            }
            int v122 = v202;
            uint64_t result = CoreML::Specification::CoreMLModels::WordTagger::MergePartialFromCodedStream(v43, a2, v203);
            if (!result) {
              return result;
            }
            goto LABEL_466;
          case 0x7D2u:
            if (v9 != 146) {
              goto LABEL_8;
            }
            if (*((_DWORD *)this + 11) != 2002)
            {
              CoreML::Specification::Model::clear_Type((uint64_t)this);
              *((_DWORD *)this + 11) = 2002;
              operator new();
            }
            std::string::size_type v44 = (CoreML::Specification::CoreMLModels::VisionFeaturePrint *)*((void *)this + 4);
            std::string v99 = *(char **)a2;
            if (*(void *)a2 >= *((void *)a2 + 1) || *v99 < 0)
            {
              int v100 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
              if (v100 < 0) {
                return 0;
              }
            }
            else
            {
              int v100 = *v99;
              *(void *)a2 = v99 + 1;
            }
            int v205 = google::protobuf::io::CodedInputStream::PushLimit(a2, v100);
            int v207 = *((_DWORD *)a2 + 13);
            BOOL v121 = __OFSUB__(v207--, 1);
            *((_DWORD *)a2 + 13) = v207;
            if (v207 < 0 != v121) {
              return 0;
            }
            int v122 = v205;
            uint64_t result = CoreML::Specification::CoreMLModels::VisionFeaturePrint::MergePartialFromCodedStream(v44, a2, v206);
            if (!result) {
              return result;
            }
            goto LABEL_466;
          case 0x7D3u:
            if (v9 != 154) {
              goto LABEL_8;
            }
            if (*((_DWORD *)this + 11) != 2003)
            {
              CoreML::Specification::Model::clear_Type((uint64_t)this);
              *((_DWORD *)this + 11) = 2003;
              operator new();
            }
            long long v45 = (CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *)*((void *)this + 4);
            long long v101 = *(char **)a2;
            if (*(void *)a2 >= *((void *)a2 + 1) || *v101 < 0)
            {
              int v102 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
              if (v102 < 0) {
                return 0;
              }
            }
            else
            {
              int v102 = *v101;
              *(void *)a2 = v101 + 1;
            }
            int v208 = google::protobuf::io::CodedInputStream::PushLimit(a2, v102);
            int v210 = *((_DWORD *)a2 + 13);
            BOOL v121 = __OFSUB__(v210--, 1);
            *((_DWORD *)a2 + 13) = v210;
            if (v210 < 0 != v121) {
              return 0;
            }
            int v122 = v208;
            uint64_t result = CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing::MergePartialFromCodedStream(v45, a2, v209);
            if (!result) {
              return result;
            }
            goto LABEL_466;
          case 0x7D4u:
            if (v9 != 162) {
              goto LABEL_8;
            }
            if (*((_DWORD *)this + 11) != 2004)
            {
              CoreML::Specification::Model::clear_Type((uint64_t)this);
              *((_DWORD *)this + 11) = 2004;
              operator new();
            }
            std::string::size_type v46 = (CoreML::Specification::CoreMLModels::Gazetteer *)*((void *)this + 4);
            v103 = *(char **)a2;
            if (*(void *)a2 >= *((void *)a2 + 1) || *v103 < 0)
            {
              int v104 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
              if (v104 < 0) {
                return 0;
              }
            }
            else
            {
              int v104 = *v103;
              *(void *)a2 = v103 + 1;
            }
            int v211 = google::protobuf::io::CodedInputStream::PushLimit(a2, v104);
            int v213 = *((_DWORD *)a2 + 13);
            BOOL v121 = __OFSUB__(v213--, 1);
            *((_DWORD *)a2 + 13) = v213;
            if (v213 < 0 != v121) {
              return 0;
            }
            int v122 = v211;
            uint64_t result = CoreML::Specification::CoreMLModels::Gazetteer::MergePartialFromCodedStream(v46, a2, v212);
            if (!result) {
              return result;
            }
            goto LABEL_466;
          case 0x7D5u:
            if (v9 != 170) {
              goto LABEL_8;
            }
            if (*((_DWORD *)this + 11) != 2005)
            {
              CoreML::Specification::Model::clear_Type((uint64_t)this);
              *((_DWORD *)this + 11) = 2005;
              operator new();
            }
            unint64_t v47 = (CoreML::Specification::CoreMLModels::WordEmbedding *)*((void *)this + 4);
            uint64_t v105 = *(char **)a2;
            if (*(void *)a2 >= *((void *)a2 + 1) || *v105 < 0)
            {
              int v106 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
              if (v106 < 0) {
                return 0;
              }
            }
            else
            {
              int v106 = *v105;
              *(void *)a2 = v105 + 1;
            }
            int v214 = google::protobuf::io::CodedInputStream::PushLimit(a2, v106);
            int v216 = *((_DWORD *)a2 + 13);
            BOOL v121 = __OFSUB__(v216--, 1);
            *((_DWORD *)a2 + 13) = v216;
            if (v216 < 0 != v121) {
              return 0;
            }
            int v122 = v214;
            uint64_t result = CoreML::Specification::CoreMLModels::WordEmbedding::MergePartialFromCodedStream(v47, a2, v215);
            if (!result) {
              return result;
            }
            goto LABEL_466;
          case 0x7D6u:
            if (v9 != 178) {
              goto LABEL_8;
            }
            if (*((_DWORD *)this + 11) != 2006)
            {
              CoreML::Specification::Model::clear_Type((uint64_t)this);
              *((_DWORD *)this + 11) = 2006;
              operator new();
            }
            unint64_t v48 = (CoreML::Specification::CoreMLModels::AudioFeaturePrint *)*((void *)this + 4);
            long long v107 = *(char **)a2;
            if (*(void *)a2 >= *((void *)a2 + 1) || *v107 < 0)
            {
              int v108 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
              if (v108 < 0) {
                return 0;
              }
            }
            else
            {
              int v108 = *v107;
              *(void *)a2 = v107 + 1;
            }
            int v217 = google::protobuf::io::CodedInputStream::PushLimit(a2, v108);
            int v219 = *((_DWORD *)a2 + 13);
            BOOL v121 = __OFSUB__(v219--, 1);
            *((_DWORD *)a2 + 13) = v219;
            if (v219 < 0 != v121) {
              return 0;
            }
            int v122 = v217;
            uint64_t result = CoreML::Specification::CoreMLModels::AudioFeaturePrint::MergePartialFromCodedStream(v48, a2, v218);
            if (!result) {
              return result;
            }
            goto LABEL_466;
          default:
            if (v13 == 900)
            {
              if (v9 != 34) {
                goto LABEL_8;
              }
              if (*((_DWORD *)this + 11) != 900)
              {
                CoreML::Specification::Model::clear_Type((uint64_t)this);
                *((_DWORD *)this + 11) = 900;
                operator new();
              }
              uint64_t v50 = *(char **)a2;
              if (*(void *)a2 >= *((void *)a2 + 1) || *v50 < 0)
              {
                int v51 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                if (v51 < 0) {
                  return 0;
                }
              }
              else
              {
                int v51 = *v50;
                *(void *)a2 = v50 + 1;
              }
              v168 = (CoreML::Specification::Identity *)google::protobuf::io::CodedInputStream::PushLimit(a2, v51);
              int v170 = *((_DWORD *)a2 + 13);
              BOOL v121 = __OFSUB__(v170--, 1);
              *((_DWORD *)a2 + 13) = v170;
              if (v170 < 0 != v121) {
                return 0;
              }
              int v171 = (int)v168;
              uint64_t result = CoreML::Specification::Identity::MergePartialFromCodedStream(v168, (char **)a2, v169);
              if (!result) {
                return result;
              }
              v172 = a2;
              int v173 = v171;
LABEL_467:
              if (!google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(v172, v173)) {
                return 0;
              }
            }
            else
            {
              if (v13 != 3000 || v9 != 194) {
                goto LABEL_8;
              }
              if (*((_DWORD *)this + 11) != 3000)
              {
                CoreML::Specification::Model::clear_Type((uint64_t)this);
                *((_DWORD *)this + 11) = 3000;
                operator new();
              }
              uint64_t v23 = (CoreML::Specification::SerializedModel *)*((void *)this + 4);
              std::string v85 = *(char **)a2;
              if (*(void *)a2 >= *((void *)a2 + 1) || *v85 < 0)
              {
                int v86 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                if (v86 < 0) {
                  return 0;
                }
              }
              else
              {
                int v86 = *v85;
                *(void *)a2 = v85 + 1;
              }
              int v183 = google::protobuf::io::CodedInputStream::PushLimit(a2, v86);
              int v185 = *((_DWORD *)a2 + 13);
              BOOL v121 = __OFSUB__(v185--, 1);
              *((_DWORD *)a2 + 13) = v185;
              if (v185 < 0 != v121) {
                return 0;
              }
              int v186 = v183;
              uint64_t result = CoreML::Specification::SerializedModel::MergePartialFromCodedStream(v23, (char **)a2, v184);
              if (!result) {
                return result;
              }
              if (!google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v186)) {
                return 0;
              }
            }
            break;
        }
      }
      if (v9 >> 3 > 0x18F) {
        break;
      }
      if (v9 >> 3 > 0xC8)
      {
        switch(v13)
        {
          case 0x12Cu:
            if (v9 != 98) {
              goto LABEL_8;
            }
            if (*((_DWORD *)this + 11) != 300)
            {
              CoreML::Specification::Model::clear_Type((uint64_t)this);
              *((_DWORD *)this + 11) = 300;
              operator new();
            }
            int v14 = (CoreML::Specification::GLMRegressor *)*((void *)this + 4);
            v127 = *(char **)a2;
            if (*(void *)a2 >= *((void *)a2 + 1) || *v127 < 0)
            {
              int v128 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
              if (v128 < 0) {
                return 0;
              }
            }
            else
            {
              int v128 = *v127;
              *(void *)a2 = v127 + 1;
            }
            int v241 = google::protobuf::io::CodedInputStream::PushLimit(a2, v128);
            int v243 = *((_DWORD *)a2 + 13);
            BOOL v121 = __OFSUB__(v243--, 1);
            *((_DWORD *)a2 + 13) = v243;
            if (v243 < 0 != v121) {
              return 0;
            }
            int v122 = v241;
            uint64_t result = CoreML::Specification::GLMRegressor::MergePartialFromCodedStream(v14, a2, v242);
            if (!result) {
              return result;
            }
            goto LABEL_466;
          case 0x12Du:
            if (v9 != 106) {
              goto LABEL_8;
            }
            if (*((_DWORD *)this + 11) != 301)
            {
              CoreML::Specification::Model::clear_Type((uint64_t)this);
              *((_DWORD *)this + 11) = 301;
              operator new();
            }
            long long v54 = (CoreML::Specification::SupportVectorRegressor *)*((void *)this + 4);
            v131 = *(char **)a2;
            if (*(void *)a2 >= *((void *)a2 + 1) || *v131 < 0)
            {
              int v132 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
              if (v132 < 0) {
                return 0;
              }
            }
            else
            {
              int v132 = *v131;
              *(void *)a2 = v131 + 1;
            }
            int v246 = google::protobuf::io::CodedInputStream::PushLimit(a2, v132);
            int v248 = *((_DWORD *)a2 + 13);
            BOOL v121 = __OFSUB__(v248--, 1);
            *((_DWORD *)a2 + 13) = v248;
            if (v248 < 0 != v121) {
              return 0;
            }
            int v122 = v246;
            uint64_t result = CoreML::Specification::SupportVectorRegressor::MergePartialFromCodedStream(v54, a2, v247);
            if (!result) {
              return result;
            }
            goto LABEL_466;
          case 0x12Eu:
            if (v9 != 114) {
              goto LABEL_8;
            }
            if (*((_DWORD *)this + 11) != 302)
            {
              CoreML::Specification::Model::clear_Type((uint64_t)this);
              *((_DWORD *)this + 11) = 302;
              operator new();
            }
            unint64_t v55 = (CoreML::Specification::TreeEnsembleRegressor *)*((void *)this + 4);
            v133 = *(char **)a2;
            if (*(void *)a2 >= *((void *)a2 + 1) || *v133 < 0)
            {
              int v134 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
              if (v134 < 0) {
                return 0;
              }
            }
            else
            {
              int v134 = *v133;
              *(void *)a2 = v133 + 1;
            }
            int v232 = google::protobuf::io::CodedInputStream::PushLimit(a2, v134);
            int v234 = *((_DWORD *)a2 + 13);
            BOOL v121 = __OFSUB__(v234--, 1);
            *((_DWORD *)a2 + 13) = v234;
            if (v234 < 0 != v121) {
              return 0;
            }
            int v122 = v232;
            uint64_t result = CoreML::Specification::TreeEnsembleRegressor::MergePartialFromCodedStream(v55, a2, v233);
            if (!result) {
              return result;
            }
            goto LABEL_466;
          case 0x12Fu:
            if (v9 != 122) {
              goto LABEL_8;
            }
            if (*((_DWORD *)this + 11) != 303)
            {
              CoreML::Specification::Model::clear_Type((uint64_t)this);
              *((_DWORD *)this + 11) = 303;
              operator new();
            }
            uint64_t v56 = (CoreML::Specification::NeuralNetworkRegressor *)*((void *)this + 4);
            v135 = *(char **)a2;
            if (*(void *)a2 >= *((void *)a2 + 1) || *v135 < 0)
            {
              int v136 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
              if (v136 < 0) {
                return 0;
              }
            }
            else
            {
              int v136 = *v135;
              *(void *)a2 = v135 + 1;
            }
            int v249 = google::protobuf::io::CodedInputStream::PushLimit(a2, v136);
            int v251 = *((_DWORD *)a2 + 13);
            BOOL v121 = __OFSUB__(v251--, 1);
            *((_DWORD *)a2 + 13) = v251;
            if (v251 < 0 != v121) {
              return 0;
            }
            int v122 = v249;
            uint64_t result = CoreML::Specification::NeuralNetworkRegressor::MergePartialFromCodedStream(v56, a2, v250);
            if (result) {
              goto LABEL_466;
            }
            return result;
          case 0x130u:
            if (v9 != 130) {
              goto LABEL_8;
            }
            if (*((_DWORD *)this + 11) != 304)
            {
              CoreML::Specification::Model::clear_Type((uint64_t)this);
              *((_DWORD *)this + 11) = 304;
              operator new();
            }
            int v57 = (CoreML::Specification::BayesianProbitRegressor *)*((void *)this + 4);
            v137 = *(char **)a2;
            if (*(void *)a2 >= *((void *)a2 + 1) || *v137 < 0)
            {
              int v138 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
              if (v138 < 0) {
                return 0;
              }
            }
            else
            {
              int v138 = *v137;
              *(void *)a2 = v137 + 1;
            }
            int v235 = google::protobuf::io::CodedInputStream::PushLimit(a2, v138);
            int v237 = *((_DWORD *)a2 + 13);
            BOOL v121 = __OFSUB__(v237--, 1);
            *((_DWORD *)a2 + 13) = v237;
            if (v237 < 0 != v121) {
              return 0;
            }
            int v122 = v235;
            uint64_t result = CoreML::Specification::BayesianProbitRegressor::MergePartialFromCodedStream(v57, a2, v236);
            if (!result) {
              return result;
            }
            goto LABEL_466;
          default:
            if (v13 == 201)
            {
              if (v9 == 74)
              {
                if (*((_DWORD *)this + 11) != 201)
                {
                  CoreML::Specification::Model::clear_Type((uint64_t)this);
                  *((_DWORD *)this + 11) = 201;
                  operator new();
                }
                uint64_t v58 = (CoreML::Specification::PipelineRegressor *)*((void *)this + 4);
                v139 = *(char **)a2;
                if (*(void *)a2 >= *((void *)a2 + 1) || *v139 < 0)
                {
                  int v140 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                  if (v140 < 0) {
                    return 0;
                  }
                }
                else
                {
                  int v140 = *v139;
                  *(void *)a2 = v139 + 1;
                }
                int v238 = google::protobuf::io::CodedInputStream::PushLimit(a2, v140);
                int v240 = *((_DWORD *)a2 + 13);
                BOOL v121 = __OFSUB__(v240--, 1);
                *((_DWORD *)a2 + 13) = v240;
                if (v240 < 0 != v121) {
                  return 0;
                }
                int v122 = v238;
                uint64_t result = CoreML::Specification::PipelineRegressor::MergePartialFromCodedStream(v58, a2, v239);
                if (!result) {
                  return result;
                }
                goto LABEL_466;
              }
            }
            else if (v13 == 202 && v9 == 82)
            {
              if (*((_DWORD *)this + 11) != 202)
              {
                CoreML::Specification::Model::clear_Type((uint64_t)this);
                *((_DWORD *)this + 11) = 202;
                operator new();
              }
              uint64_t v26 = (CoreML::Specification::Pipeline *)*((void *)this + 4);
              v129 = *(char **)a2;
              if (*(void *)a2 >= *((void *)a2 + 1) || *v129 < 0)
              {
                int v130 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                if (v130 < 0) {
                  return 0;
                }
              }
              else
              {
                int v130 = *v129;
                *(void *)a2 = v129 + 1;
              }
              int v244 = google::protobuf::io::CodedInputStream::PushLimit(a2, v130);
              int v245 = *((_DWORD *)a2 + 13);
              BOOL v121 = __OFSUB__(v245--, 1);
              *((_DWORD *)a2 + 13) = v245;
              if (v245 < 0 != v121) {
                return 0;
              }
              int v122 = v244;
              uint64_t result = CoreML::Specification::Pipeline::MergePartialFromCodedStream(v26, a2);
              if (!result) {
                return result;
              }
              goto LABEL_466;
            }
            break;
        }
        goto LABEL_8;
      }
      if (v9 >> 3 > 9)
      {
        if (v13 != 10)
        {
          if (v13 != 200 || v9 != 66) {
            goto LABEL_8;
          }
          if (*((_DWORD *)this + 11) != 200)
          {
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 200;
            operator new();
          }
          uint64_t v22 = (CoreML::Specification::PipelineClassifier *)*((void *)this + 4);
          int v59 = *(char **)a2;
          if (*(void *)a2 >= *((void *)a2 + 1) || *v59 < 0)
          {
            int v60 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (v60 < 0) {
              return 0;
            }
          }
          else
          {
            int v60 = *v59;
            *(void *)a2 = v59 + 1;
          }
          int v124 = google::protobuf::io::CodedInputStream::PushLimit(a2, v60);
          int v126 = *((_DWORD *)a2 + 13);
          BOOL v121 = __OFSUB__(v126--, 1);
          *((_DWORD *)a2 + 13) = v126;
          if (v126 < 0 != v121) {
            return 0;
          }
          int v122 = v124;
          uint64_t result = CoreML::Specification::PipelineClassifier::MergePartialFromCodedStream(v22, a2, v125);
          if (!result) {
            return result;
          }
          goto LABEL_466;
        }
        if (v9 != 80) {
          goto LABEL_8;
        }
        uint64_t v29 = *(char **)a2;
        if (*(void *)a2 >= *((void *)a2 + 1) || *v29 < 0)
        {
          unint64_t Varint64Fallback = google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2);
          if ((v117 & 1) == 0) {
            return 0;
          }
        }
        else
        {
          unint64_t Varint64Fallback = *v29;
          *(void *)a2 = v29 + 1;
        }
        *((unsigned char *)this + 28) = Varint64Fallback != 0;
      }
      else
      {
        if (v13 != 1)
        {
          if (v13 != 2 || v9 != 18) {
            goto LABEL_8;
          }
          int v18 = (CoreML::Specification::ModelDescription *)*((void *)this + 2);
          if (!v18) {
            operator new();
          }
          uint64_t v19 = *(char **)a2;
          if (*(void *)a2 >= *((void *)a2 + 1) || *v19 < 0)
          {
            int v20 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (v20 < 0) {
              return 0;
            }
          }
          else
          {
            int v20 = *v19;
            *(void *)a2 = v19 + 1;
          }
          int v118 = google::protobuf::io::CodedInputStream::PushLimit(a2, v20);
          int v120 = *((_DWORD *)a2 + 13);
          BOOL v121 = __OFSUB__(v120--, 1);
          *((_DWORD *)a2 + 13) = v120;
          if (v120 < 0 != v121) {
            return 0;
          }
          int v122 = v118;
          uint64_t result = CoreML::Specification::ModelDescription::MergePartialFromCodedStream(v18, a2, v119);
          if (!result) {
            return result;
          }
          goto LABEL_466;
        }
        if (v9 != 8) {
          goto LABEL_8;
        }
        uint64_t v27 = *(char **)a2;
        if (*(void *)a2 >= *((void *)a2 + 1))
        {
          int v28 = 0;
        }
        else
        {
          int v28 = *v27;
          if ((*v27 & 0x80000000) == 0)
          {
            *(void *)a2 = v27 + 1;
            goto LABEL_471;
          }
        }
        uint64_t Varint32Fallback = google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v28);
        int v28 = Varint32Fallback;
        if (Varint32Fallback < 0) {
          return 0;
        }
LABEL_471:
        *((_DWORD *)this + 6) = v28;
      }
    }
    if (v9 >> 3 <= 0x1F3)
    {
      switch(v13)
      {
        case 0x190u:
          if (v9 != 130) {
            goto LABEL_8;
          }
          if (*((_DWORD *)this + 11) != 400)
          {
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 400;
            operator new();
          }
          uint64_t v16 = (CoreML::Specification::GLMClassifier *)*((void *)this + 4);
          v79 = *(char **)a2;
          if (*(void *)a2 >= *((void *)a2 + 1) || *v79 < 0)
          {
            int v80 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (v80 < 0) {
              return 0;
            }
          }
          else
          {
            int v80 = *v79;
            *(void *)a2 = v79 + 1;
          }
          int v174 = google::protobuf::io::CodedInputStream::PushLimit(a2, v80);
          int v176 = *((_DWORD *)a2 + 13);
          BOOL v121 = __OFSUB__(v176--, 1);
          *((_DWORD *)a2 + 13) = v176;
          if (v176 < 0 != v121) {
            return 0;
          }
          int v122 = v174;
          uint64_t result = CoreML::Specification::GLMClassifier::MergePartialFromCodedStream(v16, a2, v175);
          if (!result) {
            return result;
          }
          goto LABEL_466;
        case 0x191u:
          if (v9 != 138) {
            goto LABEL_8;
          }
          if (*((_DWORD *)this + 11) != 401)
          {
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 401;
            operator new();
          }
          uint64_t v39 = (CoreML::Specification::SupportVectorClassifier *)*((void *)this + 4);
          std::string v89 = *(char **)a2;
          if (*(void *)a2 >= *((void *)a2 + 1) || *v89 < 0)
          {
            int v90 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (v90 < 0) {
              return 0;
            }
          }
          else
          {
            int v90 = *v89;
            *(void *)a2 = v89 + 1;
          }
          int v190 = google::protobuf::io::CodedInputStream::PushLimit(a2, v90);
          int v192 = *((_DWORD *)a2 + 13);
          BOOL v121 = __OFSUB__(v192--, 1);
          *((_DWORD *)a2 + 13) = v192;
          if (v192 < 0 != v121) {
            return 0;
          }
          int v122 = v190;
          uint64_t result = CoreML::Specification::SupportVectorClassifier::MergePartialFromCodedStream(v39, a2, v191);
          if (!result) {
            return result;
          }
          goto LABEL_466;
        case 0x192u:
          if (v9 != 146) {
            goto LABEL_8;
          }
          if (*((_DWORD *)this + 11) != 402)
          {
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 402;
            operator new();
          }
          uint64_t v40 = (CoreML::Specification::TreeEnsembleClassifier *)*((void *)this + 4);
          uint64_t v91 = *(char **)a2;
          if (*(void *)a2 >= *((void *)a2 + 1) || *v91 < 0)
          {
            int v92 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (v92 < 0) {
              return 0;
            }
          }
          else
          {
            int v92 = *v91;
            *(void *)a2 = v91 + 1;
          }
          int v193 = google::protobuf::io::CodedInputStream::PushLimit(a2, v92);
          int v195 = *((_DWORD *)a2 + 13);
          BOOL v121 = __OFSUB__(v195--, 1);
          *((_DWORD *)a2 + 13) = v195;
          if (v195 < 0 != v121) {
            return 0;
          }
          int v122 = v193;
          uint64_t result = CoreML::Specification::TreeEnsembleClassifier::MergePartialFromCodedStream(v40, a2, v194);
          if (!result) {
            return result;
          }
          goto LABEL_466;
        case 0x193u:
          if (v9 != 154) {
            goto LABEL_8;
          }
          if (*((_DWORD *)this + 11) != 403)
          {
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 403;
            operator new();
          }
          uint64_t v41 = (CoreML::Specification::NeuralNetworkClassifier *)*((void *)this + 4);
          uint64_t v93 = *(char **)a2;
          if (*(void *)a2 >= *((void *)a2 + 1) || *v93 < 0)
          {
            int v94 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (v94 < 0) {
              return 0;
            }
          }
          else
          {
            int v94 = *v93;
            *(void *)a2 = v93 + 1;
          }
          int v196 = google::protobuf::io::CodedInputStream::PushLimit(a2, v94);
          int v198 = *((_DWORD *)a2 + 13);
          BOOL v121 = __OFSUB__(v198--, 1);
          *((_DWORD *)a2 + 13) = v198;
          if (v198 < 0 != v121) {
            return 0;
          }
          int v122 = v196;
          uint64_t result = CoreML::Specification::NeuralNetworkClassifier::MergePartialFromCodedStream(v41, a2, v197);
          if (!result) {
            return result;
          }
          goto LABEL_466;
        case 0x194u:
          if (v9 != 162) {
            goto LABEL_8;
          }
          if (*((_DWORD *)this + 11) != 404)
          {
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 404;
            operator new();
          }
          uint64_t v42 = (CoreML::Specification::KNearestNeighborsClassifier *)*((void *)this + 4);
          uint64_t v95 = *(char **)a2;
          if (*(void *)a2 >= *((void *)a2 + 1) || *v95 < 0)
          {
            int v96 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (v96 < 0) {
              return 0;
            }
          }
          else
          {
            int v96 = *v95;
            *(void *)a2 = v95 + 1;
          }
          int v199 = google::protobuf::io::CodedInputStream::PushLimit(a2, v96);
          int v201 = *((_DWORD *)a2 + 13);
          BOOL v121 = __OFSUB__(v201--, 1);
          *((_DWORD *)a2 + 13) = v201;
          if (v201 < 0 != v121) {
            return 0;
          }
          int v122 = v199;
          uint64_t result = CoreML::Specification::KNearestNeighborsClassifier::MergePartialFromCodedStream(v42, a2, v200);
          if (!result) {
            return result;
          }
          goto LABEL_466;
        default:
          goto LABEL_8;
      }
    }
    if (v9 >> 3 <= 0x1F5)
    {
      if (v13 == 500)
      {
        if (v9 != 162) {
          goto LABEL_8;
        }
        if (*((_DWORD *)this + 11) != 500)
        {
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 500;
          operator new();
        }
        unint64_t v49 = (CoreML::Specification::NeuralNetwork *)*((void *)this + 4);
        v109 = *(char **)a2;
        if (*(void *)a2 >= *((void *)a2 + 1) || *v109 < 0)
        {
          int v110 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v110 < 0) {
            return 0;
          }
        }
        else
        {
          int v110 = *v109;
          *(void *)a2 = v109 + 1;
        }
        int v220 = google::protobuf::io::CodedInputStream::PushLimit(a2, v110);
        int v222 = *((_DWORD *)a2 + 13);
        BOOL v121 = __OFSUB__(v222--, 1);
        *((_DWORD *)a2 + 13) = v222;
        if (v222 < 0 != v121) {
          return 0;
        }
        int v122 = v220;
        uint64_t result = CoreML::Specification::NeuralNetwork::MergePartialFromCodedStream(v49, a2, v221);
        if (!result) {
          return result;
        }
      }
      else
      {
        if (v9 != 170) {
          goto LABEL_8;
        }
        if (*((_DWORD *)this + 11) != 501)
        {
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 501;
          operator new();
        }
        uint64_t v21 = (CoreML::Specification::ItemSimilarityRecommender *)*((void *)this + 4);
        v83 = *(char **)a2;
        if (*(void *)a2 >= *((void *)a2 + 1) || *v83 < 0)
        {
          int v84 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v84 < 0) {
            return 0;
          }
        }
        else
        {
          int v84 = *v83;
          *(void *)a2 = v83 + 1;
        }
        int v180 = google::protobuf::io::CodedInputStream::PushLimit(a2, v84);
        int v182 = *((_DWORD *)a2 + 13);
        BOOL v121 = __OFSUB__(v182--, 1);
        *((_DWORD *)a2 + 13) = v182;
        if (v182 < 0 != v121) {
          return 0;
        }
        int v122 = v180;
        uint64_t result = CoreML::Specification::ItemSimilarityRecommender::MergePartialFromCodedStream(v21, a2, v181);
        if (!result) {
          return result;
        }
      }
LABEL_466:
      v172 = a2;
      int v173 = v122;
      goto LABEL_467;
    }
    if (v13 != 502)
    {
      if (v13 != 555 || v9 != 90) {
        goto LABEL_8;
      }
      if (*((_DWORD *)this + 11) != 555)
      {
        CoreML::Specification::Model::clear_Type((uint64_t)this);
        *((_DWORD *)this + 11) = 555;
        operator new();
      }
      uint64_t v25 = (CoreML::Specification::CustomModel *)*((void *)this + 4);
      std::string v87 = *(char **)a2;
      if (*(void *)a2 >= *((void *)a2 + 1) || *v87 < 0)
      {
        int v88 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v88 < 0) {
          return 0;
        }
      }
      else
      {
        int v88 = *v87;
        *(void *)a2 = v87 + 1;
      }
      int v187 = google::protobuf::io::CodedInputStream::PushLimit(a2, v88);
      int v189 = *((_DWORD *)a2 + 13);
      BOOL v121 = __OFSUB__(v189--, 1);
      *((_DWORD *)a2 + 13) = v189;
      if (v189 < 0 != v121) {
        return 0;
      }
      int v122 = v187;
      uint64_t result = CoreML::Specification::CustomModel::MergePartialFromCodedStream(v25, a2, v188);
      if (!result) {
        return result;
      }
      goto LABEL_466;
    }
    if (v9 == 178)
    {
      if (*((_DWORD *)this + 11) != 502)
      {
        CoreML::Specification::Model::clear_Type((uint64_t)this);
        *((_DWORD *)this + 11) = 502;
        operator new();
      }
      uint64_t v52 = (CoreML::Specification::MILSpec::Program *)*((void *)this + 4);
      long long v111 = *(char **)a2;
      if (*(void *)a2 >= *((void *)a2 + 1) || *v111 < 0)
      {
        int v112 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v112 < 0) {
          return 0;
        }
      }
      else
      {
        int v112 = *v111;
        *(void *)a2 = v111 + 1;
      }
      int v223 = google::protobuf::io::CodedInputStream::PushLimit(a2, v112);
      int v225 = *((_DWORD *)a2 + 13);
      BOOL v121 = __OFSUB__(v225--, 1);
      *((_DWORD *)a2 + 13) = v225;
      if (v225 < 0 != v121) {
        return 0;
      }
      int v122 = v223;
      uint64_t result = CoreML::Specification::MILSpec::Program::MergePartialFromCodedStream(v52, a2, v224);
      if (!result) {
        return result;
      }
      goto LABEL_466;
    }
LABEL_8:
    if (!v9 || (v9 & 7) == 4) {
      return 1;
    }
    if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v9, a3) & 1) == 0) {
      return 0;
    }
  }
}

void sub_19EAD7AD8(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C4084265165);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::Model::clear_Type(uint64_t this)
{
  uint64_t v1 = this;
  int v2 = *(_DWORD *)(this + 44);
  if (v2 > 559)
  {
    if (v2 > 899)
    {
      switch(v2)
      {
        case 2000:
        case 2001:
        case 2002:
        case 2003:
        case 2004:
        case 2005:
        case 2006:
          goto LABEL_10;
        default:
          if (v2 == 900 || v2 == 3000) {
            goto LABEL_10;
          }
          break;
      }
    }
    else
    {
      switch(v2)
      {
        case 600:
        case 601:
        case 602:
        case 603:
        case 604:
        case 606:
        case 607:
        case 609:
        case 610:
          goto LABEL_10;
        case 605:
        case 608:
          goto LABEL_12;
        default:
          if (v2 == 560) {
            goto LABEL_10;
          }
          break;
      }
    }
    goto LABEL_12;
  }
  if (v2 > 399)
  {
    if (v2 <= 499)
    {
      switch(v2)
      {
        case 400:
        case 401:
        case 402:
        case 403:
        case 404:
          goto LABEL_10;
        default:
          goto LABEL_12;
      }
      goto LABEL_12;
    }
    if (v2 > 502 && v2 != 555 && v2 != 556) {
      goto LABEL_12;
    }
LABEL_10:
    this = *(void *)(this + 32);
    if (this) {
      this = (*(uint64_t (**)(uint64_t))(*(void *)this + 8))(this);
    }
    goto LABEL_12;
  }
  if (v2 <= 299)
  {
    if (v2 != 200 && v2 != 201 && v2 != 202) {
      goto LABEL_12;
    }
    goto LABEL_10;
  }
  switch(v2)
  {
    case 300:
    case 301:
    case 302:
    case 303:
    case 304:
      goto LABEL_10;
    default:
      break;
  }
LABEL_12:
  *(_DWORD *)(v1 + 44) = 0;
  return this;
}

CoreML::Specification::PipelineClassifier *CoreML::Specification::PipelineClassifier::PipelineClassifier(CoreML::Specification::PipelineClassifier *this)
{
  *(void *)this = &unk_1EF0D3168;
  *((void *)this + 1) = 0;
  if (this != (CoreML::Specification::PipelineClassifier *)&CoreML::Specification::_PipelineClassifier_default_instance_) {
    CoreML::Specification::protobuf_Model_2eproto::InitDefaults(this);
  }
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
  return this;
}

void sub_19EAD8070(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::PipelineClassifier::MergePartialFromCodedStream(CoreML::Specification::PipelineClassifier *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      int v5 = *(char **)a2;
      if (*(void *)a2 >= *((void *)a2 + 1))
      {
        LODWORD(v6) = 0;
LABEL_6:
        unsigned int TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v6);
        unint64_t v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0) {
          break;
        }
        goto LABEL_7;
      }
      uint64_t v6 = *v5;
      if (*v5 < 1) {
        goto LABEL_6;
      }
      *(void *)a2 = v5 + 1;
      unint64_t v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0) {
        break;
      }
LABEL_7:
      if (v7 != 10 || (v7 & 0xFFFFFFF8) != 8) {
        break;
      }
      uint64_t v11 = (CoreML::Specification::Pipeline *)*((void *)this + 2);
      if (!v11) {
        operator new();
      }
      uint64_t v12 = *(char **)a2;
      if (*(void *)a2 >= *((void *)a2 + 1) || *v12 < 0)
      {
        int VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (VarintSizeAsIntFallback < 0) {
          return 0;
        }
      }
      else
      {
        int VarintSizeAsIntFallback = *v12;
        *(void *)a2 = v12 + 1;
      }
      int v14 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
      int v15 = *((_DWORD *)a2 + 13);
      BOOL v16 = __OFSUB__(v15--, 1);
      *((_DWORD *)a2 + 13) = v15;
      if (v15 < 0 == v16)
      {
        int v17 = v14;
        uint64_t result = CoreML::Specification::Pipeline::MergePartialFromCodedStream(v11, a2);
        if (!result) {
          return result;
        }
        if (google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v17)) {
          continue;
        }
      }
      return 0;
    }
    if (!v7 || (v7 & 7) == 4) {
      return 1;
    }
    if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0) {
      return 0;
    }
  }
}

void sub_19EAD81E0(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C40759568C3);
  _Unwind_Resume(a1);
}

CoreML::Specification::PipelineRegressor *CoreML::Specification::PipelineRegressor::PipelineRegressor(CoreML::Specification::PipelineRegressor *this)
{
  *(void *)this = &unk_1EF0D27E8;
  *((void *)this + 1) = 0;
  if (this != (CoreML::Specification::PipelineRegressor *)&CoreML::Specification::_PipelineRegressor_default_instance_) {
    CoreML::Specification::protobuf_Model_2eproto::InitDefaults(this);
  }
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
  return this;
}

void sub_19EAD8268(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::PipelineRegressor::MergePartialFromCodedStream(CoreML::Specification::PipelineRegressor *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      int v5 = *(char **)a2;
      if (*(void *)a2 >= *((void *)a2 + 1))
      {
        LODWORD(v6) = 0;
LABEL_6:
        unsigned int TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v6);
        unint64_t v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0) {
          break;
        }
        goto LABEL_7;
      }
      uint64_t v6 = *v5;
      if (*v5 < 1) {
        goto LABEL_6;
      }
      *(void *)a2 = v5 + 1;
      unint64_t v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0) {
        break;
      }
LABEL_7:
      if (v7 != 10 || (v7 & 0xFFFFFFF8) != 8) {
        break;
      }
      uint64_t v11 = (CoreML::Specification::Pipeline *)*((void *)this + 2);
      if (!v11) {
        operator new();
      }
      uint64_t v12 = *(char **)a2;
      if (*(void *)a2 >= *((void *)a2 + 1) || *v12 < 0)
      {
        int VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (VarintSizeAsIntFallback < 0) {
          return 0;
        }
      }
      else
      {
        int VarintSizeAsIntFallback = *v12;
        *(void *)a2 = v12 + 1;
      }
      int v14 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
      int v15 = *((_DWORD *)a2 + 13);
      BOOL v16 = __OFSUB__(v15--, 1);
      *((_DWORD *)a2 + 13) = v15;
      if (v15 < 0 == v16)
      {
        int v17 = v14;
        uint64_t result = CoreML::Specification::Pipeline::MergePartialFromCodedStream(v11, a2);
        if (!result) {
          return result;
        }
        if (google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v17)) {
          continue;
        }
      }
      return 0;
    }
    if (!v7 || (v7 & 7) == 4) {
      return 1;
    }
    if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0) {
      return 0;
    }
  }
}

void sub_19EAD83D8(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C40759568C3);
  _Unwind_Resume(a1);
}

CoreML::Specification::Pipeline *CoreML::Specification::Pipeline::Pipeline(CoreML::Specification::Pipeline *this)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 4CoreML::Specification::CategoricalMapping::New(this, 0) = 0u;
  *(void *)this = &unk_1EF0DAC50;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((void *)this + 7) = 0;
  if (this != (CoreML::Specification::Pipeline *)&CoreML::Specification::_Pipeline_default_instance_) {
    CoreML::Specification::protobuf_Model_2eproto::InitDefaults(this);
  }
  *((_DWORD *)this + 16) = 0;
  return this;
}

void sub_19EAD847C(_Unwind_Exception *a1)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(v2);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>(v3);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

CoreML::Specification::SerializedModel *CoreML::Specification::SerializedModel::SerializedModel(CoreML::Specification::SerializedModel *this)
{
  *(void *)this = &unk_1EF0D1028;
  *((void *)this + 1) = 0;
  if (this != (CoreML::Specification::SerializedModel *)&CoreML::Specification::_SerializedModel_default_instance_) {
    CoreML::Specification::protobuf_Model_2eproto::InitDefaults(this);
  }
  *((void *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  *((_DWORD *)this + 8) = 0;
  return this;
}

void sub_19EAD8510(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::SerializedModel::MergePartialFromCodedStream(CoreML::Specification::SerializedModel *this, char **a2, unsigned int a3)
{
  uint64_t v4 = (std::string **)((char *)this + 24);
  int v5 = (std::string **)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v6 = *a2;
        if (*a2 >= a2[1])
        {
          LODWORD(v7) = 0;
LABEL_7:
          unsigned int TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback((google::protobuf::io::CodedInputStream *)a2, v7);
          unint64_t v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
          if ((v8 & 0x100000000) == 0) {
            goto LABEL_24;
          }
          goto LABEL_8;
        }
        uint64_t v7 = *v6;
        if (*v6 < 1) {
          goto LABEL_7;
        }
        *a2 = v6 + 1;
        unint64_t v8 = v7 | 0x100000000;
        if ((v8 & 0x100000000) == 0) {
          goto LABEL_24;
        }
LABEL_8:
        if (v8 >> 3 != 2) {
          break;
        }
        if (v8 != 18) {
          goto LABEL_24;
        }
        if (*v4 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
        }
        if ((google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)a2, *v4) & 1) == 0) {
          return 0;
        }
      }
      if (v8 >> 3 != 1 || v8 != 10) {
        break;
      }
      if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
      }
      uint64_t result = google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)a2, *v5);
      if (!result) {
        return result;
      }
      uint64_t v12 = (unsigned int *)*v5;
      if (SHIBYTE((*v5)->__r_.__value_.__r.__words[2]) < 0)
      {
        uint64_t v12 = *(unsigned int **)v12;
        std::string::size_type size = (*v5)->__r_.__value_.__l.__size_;
      }
      else
      {
        LODWORD(size) = HIBYTE((*v5)->__r_.__value_.__r.__words[2]);
      }
      if (!google::protobuf::internal::WireFormatLite::VerifyUtf8String(v12, size, 0, (uint64_t)"CoreML.Specification.SerializedModel.identifier"))return 0; {
    }
      }
LABEL_24:
    if (!v8 || (v8 & 7) == 4) {
      return 1;
    }
    if ((google::protobuf::internal::WireFormatLite::SkipField((google::protobuf::internal::WireFormatLite *)a2, (google::protobuf::io::CodedInputStream *)v8, a3) & 1) == 0)return 0; {
  }
    }
}

uint64_t CoreML::Specification::Model::GetCachedSize(CoreML::Specification::Model *this)
{
  return *((unsigned int *)this + 10);
}

uint64_t CoreML::Specification::Model::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  signed int v6 = *(_DWORD *)(this + 24);
  if (v6) {
    this = google::protobuf::internal::WireFormatLite::WriteInt32(1, v6, a2, a4);
  }
  if ((uint64_t *)v5 != &CoreML::Specification::_Model_default_instance_)
  {
    uint64_t v7 = *(void *)(v5 + 16);
    if (v7) {
      this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)2, v7, a2, a4);
    }
  }
  if (*(unsigned char *)(v5 + 28)) {
    this = google::protobuf::internal::WireFormatLite::WriteBool(10, 1u, a2, a4);
  }
  int v8 = *(_DWORD *)(v5 + 44);
  if (v8 == 200)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0xC8, *(void *)(v5 + 32), a2, a4);
    int v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 201)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0xC9, *(void *)(v5 + 32), a2, a4);
    int v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 202)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0xCA, *(void *)(v5 + 32), a2, a4);
    int v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 300)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x12C, *(void *)(v5 + 32), a2, a4);
    int v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 301)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x12D, *(void *)(v5 + 32), a2, a4);
    int v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 302)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x12E, *(void *)(v5 + 32), a2, a4);
    int v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 303)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x12F, *(void *)(v5 + 32), a2, a4);
    int v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 304)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x130, *(void *)(v5 + 32), a2, a4);
    int v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 400)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x190, *(void *)(v5 + 32), a2, a4);
    int v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 401)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x191, *(void *)(v5 + 32), a2, a4);
    int v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 402)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x192, *(void *)(v5 + 32), a2, a4);
    int v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 403)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x193, *(void *)(v5 + 32), a2, a4);
    int v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 404)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x194, *(void *)(v5 + 32), a2, a4);
    int v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 500)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x1F4, *(void *)(v5 + 32), a2, a4);
    int v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 501)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x1F5, *(void *)(v5 + 32), a2, a4);
    int v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 502)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x1F6, *(void *)(v5 + 32), a2, a4);
    int v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 555)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x22B, *(void *)(v5 + 32), a2, a4);
    int v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 556)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x22C, *(void *)(v5 + 32), a2, a4);
    int v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 560)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x230, *(void *)(v5 + 32), a2, a4);
    int v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 600)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x258, *(void *)(v5 + 32), a2, a4);
    int v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 601)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x259, *(void *)(v5 + 32), a2, a4);
    int v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 602)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x25A, *(void *)(v5 + 32), a2, a4);
    int v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 603)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x25B, *(void *)(v5 + 32), a2, a4);
    int v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 604)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x25C, *(void *)(v5 + 32), a2, a4);
    int v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 606)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x25E, *(void *)(v5 + 32), a2, a4);
    int v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 607)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x25F, *(void *)(v5 + 32), a2, a4);
    int v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 609)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x261, *(void *)(v5 + 32), a2, a4);
    int v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 610)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x262, *(void *)(v5 + 32), a2, a4);
    int v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 900)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x384, *(void *)(v5 + 32), a2, a4);
    int v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 2000)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x7D0, *(void *)(v5 + 32), a2, a4);
    int v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 2001)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x7D1, *(void *)(v5 + 32), a2, a4);
    int v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 2002)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x7D2, *(void *)(v5 + 32), a2, a4);
    int v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 2003)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x7D3, *(void *)(v5 + 32), a2, a4);
    int v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 2004)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x7D4, *(void *)(v5 + 32), a2, a4);
    int v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 2005)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x7D5, *(void *)(v5 + 32), a2, a4);
    int v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 2006)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x7D6, *(void *)(v5 + 32), a2, a4);
    int v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 3000)
  {
    uint64_t v9 = *(void *)(v5 + 32);
    return google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0xBB8, v9, a2, a4);
  }
  return this;
}

std::string *CoreML::Specification::Model::MergeFrom(std::string *this, const CoreML::Specification::Model *a2)
{
  uint64_t v3 = (uint64_t)this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    this = google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  uint64_t v5 = *((void *)a2 + 2);
  if (a2 != (const CoreML::Specification::Model *)&CoreML::Specification::_Model_default_instance_ && v5 != 0)
  {
    uint64_t v7 = *(long long **)(v3 + 16);
    if (!v7) {
      operator new();
    }
    if (v5) {
      int v8 = (const CoreML::Specification::ModelDescription *)*((void *)a2 + 2);
    }
    else {
      int v8 = (const CoreML::Specification::ModelDescription *)&CoreML::Specification::_ModelDescription_default_instance_;
    }
    this = (std::string *)CoreML::Specification::ModelDescription::MergeFrom(v7, v8);
  }
  int v9 = *((_DWORD *)a2 + 6);
  if (v9) {
    *(_DWORD *)(v3 + 24) = v9;
  }
  if (*((unsigned char *)a2 + 28)) {
    *(unsigned char *)(v3 + 28) = 1;
  }
  int v10 = *((_DWORD *)a2 + 11);
  if (v10 <= 559)
  {
    if (v10 <= 399)
    {
      if (v10 <= 299)
      {
        switch(v10)
        {
          case 200:
            if (*(_DWORD *)(v3 + 44) != 200)
            {
              CoreML::Specification::Model::clear_Type(v3);
              *(_DWORD *)(v3 + 44) = 200;
              operator new();
            }
            std::string::size_type v44 = (const CoreML::Specification::PipelineClassifier *)*((void *)a2 + 4);
            char v81 = *(CoreML::Specification::PipelineClassifier **)(v3 + 32);
            return (std::string *)CoreML::Specification::PipelineClassifier::MergeFrom(v81, v44);
          case 201:
            if (*(_DWORD *)(v3 + 44) != 201)
            {
              CoreML::Specification::Model::clear_Type(v3);
              *(_DWORD *)(v3 + 44) = 201;
              operator new();
            }
            long long v45 = (const CoreML::Specification::PipelineRegressor *)*((void *)a2 + 4);
            int v82 = *(std::string **)(v3 + 32);
            return CoreML::Specification::PipelineRegressor::MergeFrom(v82, v45);
          case 202:
            if (*(_DWORD *)(v3 + 44) != 202)
            {
              CoreML::Specification::Model::clear_Type(v3);
              *(_DWORD *)(v3 + 44) = 202;
              operator new();
            }
            uint64_t v25 = (const CoreML::Specification::Pipeline *)*((void *)a2 + 4);
            uint64_t v62 = *(CoreML::Specification::Pipeline **)(v3 + 32);
            return (std::string *)CoreML::Specification::Pipeline::MergeFrom(v62, v25);
        }
      }
      else
      {
        switch(v10)
        {
          case 300:
            if (*(_DWORD *)(v3 + 44) != 300)
            {
              CoreML::Specification::Model::clear_Type(v3);
              *(_DWORD *)(v3 + 44) = 300;
              operator new();
            }
            uint64_t v23 = (const CoreML::Specification::GLMRegressor *)*((void *)a2 + 4);
            int v60 = *(unint64_t **)(v3 + 32);
            this = (std::string *)CoreML::Specification::GLMRegressor::MergeFrom(v60, v23);
            break;
          case 301:
            if (*(_DWORD *)(v3 + 44) != 301)
            {
              CoreML::Specification::Model::clear_Type(v3);
              *(_DWORD *)(v3 + 44) = 301;
              operator new();
            }
            uint64_t v38 = (const CoreML::Specification::SupportVectorRegressor *)*((void *)a2 + 4);
            std::string::size_type v75 = *(std::string **)(v3 + 32);
            this = CoreML::Specification::SupportVectorRegressor::MergeFrom(v75, v38);
            break;
          case 302:
            if (*(_DWORD *)(v3 + 44) != 302)
            {
              CoreML::Specification::Model::clear_Type(v3);
              *(_DWORD *)(v3 + 44) = 302;
              operator new();
            }
            uint64_t v39 = (const CoreML::Specification::TreeEnsembleRegressor *)*((void *)a2 + 4);
            int v76 = *(std::string **)(v3 + 32);
            this = CoreML::Specification::TreeEnsembleRegressor::MergeFrom(v76, v39);
            break;
          case 303:
            if (*(_DWORD *)(v3 + 44) != 303)
            {
              CoreML::Specification::Model::clear_Type(v3);
              *(_DWORD *)(v3 + 44) = 303;
              operator new();
            }
            uint64_t v40 = (const CoreML::Specification::NeuralNetworkRegressor *)*((void *)a2 + 4);
            uint64_t v77 = *(std::string **)(v3 + 32);
            this = CoreML::Specification::NeuralNetworkRegressor::MergeFrom(v77, v40);
            break;
          case 304:
            if (*(_DWORD *)(v3 + 44) != 304)
            {
              CoreML::Specification::Model::clear_Type(v3);
              *(_DWORD *)(v3 + 44) = 304;
              operator new();
            }
            uint64_t v41 = (const CoreML::Specification::BayesianProbitRegressor *)*((void *)a2 + 4);
            int v78 = *(unint64_t **)(v3 + 32);
            this = (std::string *)CoreML::Specification::BayesianProbitRegressor::MergeFrom(v78, v41);
            break;
          default:
            return this;
        }
      }
    }
    else if (v10 > 499)
    {
      if (v10 <= 501)
      {
        if (v10 == 500)
        {
          if (*(_DWORD *)(v3 + 44) != 500)
          {
            CoreML::Specification::Model::clear_Type(v3);
            *(_DWORD *)(v3 + 44) = 500;
            operator new();
          }
          std::string::size_type v46 = (const CoreML::Specification::NeuralNetwork *)*((void *)a2 + 4);
          std::string v85 = *(std::string **)(v3 + 32);
          return CoreML::Specification::NeuralNetwork::MergeFrom(v85, v46);
        }
        else
        {
          if (*(_DWORD *)(v3 + 44) != 501)
          {
            CoreML::Specification::Model::clear_Type(v3);
            *(_DWORD *)(v3 + 44) = 501;
            operator new();
          }
          uint64_t v27 = (const CoreML::Specification::ItemSimilarityRecommender *)*((void *)a2 + 4);
          int v64 = *(std::string **)(v3 + 32);
          return CoreML::Specification::ItemSimilarityRecommender::MergeFrom(v64, v27);
        }
      }
      else
      {
        switch(v10)
        {
          case 502:
            if (*(_DWORD *)(v3 + 44) != 502)
            {
              CoreML::Specification::Model::clear_Type(v3);
              *(_DWORD *)(v3 + 44) = 502;
              operator new();
            }
            uint64_t v42 = (const CoreML::Specification::MILSpec::Program *)*((void *)a2 + 4);
            v79 = *(CoreML::Specification::MILSpec::Program **)(v3 + 32);
            return (std::string *)CoreML::Specification::MILSpec::Program::MergeFrom(v79, v42);
          case 555:
            if (*(_DWORD *)(v3 + 44) != 555)
            {
              CoreML::Specification::Model::clear_Type(v3);
              *(_DWORD *)(v3 + 44) = 555;
              operator new();
            }
            uint64_t v43 = (const CoreML::Specification::CustomModel *)*((void *)a2 + 4);
            int v80 = *(CoreML::Specification::CustomModel **)(v3 + 32);
            return (std::string *)CoreML::Specification::CustomModel::MergeFrom(v80, v43);
          case 556:
            if (*(_DWORD *)(v3 + 44) != 556)
            {
              CoreML::Specification::Model::clear_Type(v3);
              *(_DWORD *)(v3 + 44) = 556;
              operator new();
            }
            unint64_t v24 = (const CoreML::Specification::LinkedModel *)*((void *)a2 + 4);
            uint64_t v61 = *(std::string **)(v3 + 32);
            return CoreML::Specification::LinkedModel::MergeFrom(v61, v24);
        }
      }
    }
    else
    {
      switch(v10)
      {
        case 400:
          if (*(_DWORD *)(v3 + 44) != 400)
          {
            CoreML::Specification::Model::clear_Type(v3);
            *(_DWORD *)(v3 + 44) = 400;
            operator new();
          }
          uint64_t v21 = (const CoreML::Specification::GLMClassifier *)*((void *)a2 + 4);
          uint64_t v58 = *(std::string **)(v3 + 32);
          this = CoreML::Specification::GLMClassifier::MergeFrom(v58, v21);
          break;
        case 401:
          if (*(_DWORD *)(v3 + 44) != 401)
          {
            CoreML::Specification::Model::clear_Type(v3);
            *(_DWORD *)(v3 + 44) = 401;
            operator new();
          }
          int v28 = (const CoreML::Specification::SupportVectorClassifier *)*((void *)a2 + 4);
          unint64_t v65 = *(std::string **)(v3 + 32);
          this = CoreML::Specification::SupportVectorClassifier::MergeFrom(v65, v28);
          break;
        case 402:
          if (*(_DWORD *)(v3 + 44) != 402)
          {
            CoreML::Specification::Model::clear_Type(v3);
            *(_DWORD *)(v3 + 44) = 402;
            operator new();
          }
          uint64_t v29 = (const CoreML::Specification::TreeEnsembleClassifier *)*((void *)a2 + 4);
          int v66 = *(std::string **)(v3 + 32);
          this = CoreML::Specification::TreeEnsembleClassifier::MergeFrom(v66, v29);
          break;
        case 403:
          if (*(_DWORD *)(v3 + 44) != 403)
          {
            CoreML::Specification::Model::clear_Type(v3);
            *(_DWORD *)(v3 + 44) = 403;
            operator new();
          }
          uint64_t v30 = (const CoreML::Specification::NeuralNetworkClassifier *)*((void *)a2 + 4);
          v67 = *(std::string **)(v3 + 32);
          this = CoreML::Specification::NeuralNetworkClassifier::MergeFrom(v67, v30);
          break;
        case 404:
          if (*(_DWORD *)(v3 + 44) != 404)
          {
            CoreML::Specification::Model::clear_Type(v3);
            *(_DWORD *)(v3 + 44) = 404;
            operator new();
          }
          BOOL v31 = (const CoreML::Specification::KNearestNeighborsClassifier *)*((void *)a2 + 4);
          int v68 = *(std::string **)(v3 + 32);
          this = CoreML::Specification::KNearestNeighborsClassifier::MergeFrom(v68, v31);
          break;
        default:
          return this;
      }
    }
  }
  else if (v10 > 899)
  {
    switch(v10)
    {
      case 2000:
        if (*(_DWORD *)(v3 + 44) != 2000)
        {
          CoreML::Specification::Model::clear_Type(v3);
          *(_DWORD *)(v3 + 44) = 2000;
          operator new();
        }
        uint64_t v22 = (const CoreML::Specification::CoreMLModels::TextClassifier *)*((void *)a2 + 4);
        int v59 = *(std::string **)(v3 + 32);
        this = CoreML::Specification::CoreMLModels::TextClassifier::MergeFrom(v59, v22);
        break;
      case 2001:
        if (*(_DWORD *)(v3 + 44) != 2001)
        {
          CoreML::Specification::Model::clear_Type(v3);
          *(_DWORD *)(v3 + 44) = 2001;
          operator new();
        }
        uint64_t v32 = (const CoreML::Specification::CoreMLModels::WordTagger *)*((void *)a2 + 4);
        uint64_t v69 = *(std::string **)(v3 + 32);
        this = CoreML::Specification::CoreMLModels::WordTagger::MergeFrom(v69, v32);
        break;
      case 2002:
        if (*(_DWORD *)(v3 + 44) != 2002)
        {
          CoreML::Specification::Model::clear_Type(v3);
          *(_DWORD *)(v3 + 44) = 2002;
          operator new();
        }
        int v33 = (const CoreML::Specification::CoreMLModels::VisionFeaturePrint *)*((void *)a2 + 4);
        int v70 = *(std::string **)(v3 + 32);
        this = CoreML::Specification::CoreMLModels::VisionFeaturePrint::MergeFrom(v70, v33);
        break;
      case 2003:
        if (*(_DWORD *)(v3 + 44) != 2003)
        {
          CoreML::Specification::Model::clear_Type(v3);
          *(_DWORD *)(v3 + 44) = 2003;
          operator new();
        }
        unsigned int v34 = (const CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *)*((void *)a2 + 4);
        uint64_t v71 = *(std::string **)(v3 + 32);
        this = CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing::MergeFrom(v71, v34);
        break;
      case 2004:
        if (*(_DWORD *)(v3 + 44) != 2004)
        {
          CoreML::Specification::Model::clear_Type(v3);
          *(_DWORD *)(v3 + 44) = 2004;
          operator new();
        }
        int v35 = (const CoreML::Specification::CoreMLModels::Gazetteer *)*((void *)a2 + 4);
        int v72 = *(std::string **)(v3 + 32);
        this = CoreML::Specification::CoreMLModels::Gazetteer::MergeFrom(v72, v35);
        break;
      case 2005:
        if (*(_DWORD *)(v3 + 44) != 2005)
        {
          CoreML::Specification::Model::clear_Type(v3);
          *(_DWORD *)(v3 + 44) = 2005;
          operator new();
        }
        BOOL v36 = (const CoreML::Specification::CoreMLModels::WordEmbedding *)*((void *)a2 + 4);
        int v73 = *(std::string **)(v3 + 32);
        this = CoreML::Specification::CoreMLModels::WordEmbedding::MergeFrom(v73, v36);
        break;
      case 2006:
        if (*(_DWORD *)(v3 + 44) != 2006)
        {
          CoreML::Specification::Model::clear_Type(v3);
          *(_DWORD *)(v3 + 44) = 2006;
          operator new();
        }
        int v37 = (const CoreML::Specification::CoreMLModels::AudioFeaturePrint *)*((void *)a2 + 4);
        int v74 = *(std::string **)(v3 + 32);
        this = CoreML::Specification::CoreMLModels::AudioFeaturePrint::MergeFrom(v74, v37);
        break;
      default:
        if (v10 == 900)
        {
          if (*(_DWORD *)(v3 + 44) != 900)
          {
            CoreML::Specification::Model::clear_Type(v3);
            *(_DWORD *)(v3 + 44) = 900;
            operator new();
          }
          uint64_t v83 = *(void *)(*((void *)a2 + 4) + 8);
          if (v83)
          {
            int v84 = (unint64_t *)(*(void *)(v3 + 32) + 8);
            this = google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v84, v83 & 0xFFFFFFFFFFFFFFFELL);
          }
        }
        else if (v10 == 3000)
        {
          if (*(_DWORD *)(v3 + 44) != 3000)
          {
            CoreML::Specification::Model::clear_Type(v3);
            *(_DWORD *)(v3 + 44) = 3000;
            operator new();
          }
          uint64_t v26 = (const CoreML::Specification::SerializedModel *)*((void *)a2 + 4);
          long long v63 = *(std::string **)(v3 + 32);
          this = CoreML::Specification::SerializedModel::MergeFrom(v63, v26);
        }
        break;
    }
  }
  else
  {
    switch(v10)
    {
      case 600:
        if (*(_DWORD *)(v3 + 44) != 600)
        {
          CoreML::Specification::Model::clear_Type(v3);
          *(_DWORD *)(v3 + 44) = 600;
          operator new();
        }
        uint64_t v12 = (const CoreML::Specification::OneHotEncoder *)*((void *)a2 + 4);
        unint64_t v48 = *(std::string **)(v3 + 32);
        this = CoreML::Specification::OneHotEncoder::MergeFrom(v48, v12);
        break;
      case 601:
        if (*(_DWORD *)(v3 + 44) != 601)
        {
          CoreML::Specification::Model::clear_Type(v3);
          *(_DWORD *)(v3 + 44) = 601;
          operator new();
        }
        unsigned int v13 = (const CoreML::Specification::Imputer *)*((void *)a2 + 4);
        unint64_t v49 = *(std::string **)(v3 + 32);
        this = CoreML::Specification::Imputer::MergeFrom(v49, v13);
        break;
      case 602:
        if (*(_DWORD *)(v3 + 44) != 602)
        {
          CoreML::Specification::Model::clear_Type(v3);
          *(_DWORD *)(v3 + 44) = 602;
          operator new();
        }
        int v14 = (const CoreML::Specification::FeatureVectorizer *)*((void *)a2 + 4);
        uint64_t v50 = *(unint64_t **)(v3 + 32);
        this = (std::string *)CoreML::Specification::FeatureVectorizer::MergeFrom(v50, v14);
        break;
      case 603:
        if (*(_DWORD *)(v3 + 44) != 603)
        {
          CoreML::Specification::Model::clear_Type(v3);
          *(_DWORD *)(v3 + 44) = 603;
          operator new();
        }
        int v15 = (const CoreML::Specification::DictVectorizer *)*((void *)a2 + 4);
        int v51 = *(std::string **)(v3 + 32);
        this = CoreML::Specification::DictVectorizer::MergeFrom(v51, v15);
        break;
      case 604:
        if (*(_DWORD *)(v3 + 44) != 604)
        {
          CoreML::Specification::Model::clear_Type(v3);
          *(_DWORD *)(v3 + 44) = 604;
          operator new();
        }
        BOOL v16 = (const CoreML::Specification::Scaler *)*((void *)a2 + 4);
        uint64_t v52 = *(unint64_t **)(v3 + 32);
        this = (std::string *)CoreML::Specification::Scaler::MergeFrom(v52, v16);
        break;
      case 605:
      case 608:
        return this;
      case 606:
        if (*(_DWORD *)(v3 + 44) != 606)
        {
          CoreML::Specification::Model::clear_Type(v3);
          *(_DWORD *)(v3 + 44) = 606;
          operator new();
        }
        int v17 = (const CoreML::Specification::CategoricalMapping *)*((void *)a2 + 4);
        long long v53 = *(std::string **)(v3 + 32);
        this = CoreML::Specification::CategoricalMapping::MergeFrom(v53, v17);
        break;
      case 607:
        if (*(_DWORD *)(v3 + 44) != 607)
        {
          CoreML::Specification::Model::clear_Type(v3);
          *(_DWORD *)(v3 + 44) = 607;
          operator new();
        }
        uint64_t v11 = *(void *)(v3 + 32);
        uint64_t v18 = *((void *)a2 + 4);
        uint64_t v54 = *(void *)(v18 + 8);
        if (v54) {
          this = google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((unint64_t *)(v11 + 8), v54 & 0xFFFFFFFFFFFFFFFELL);
        }
        int v55 = *(_DWORD *)(v18 + 16);
        if (v55) {
          *(_DWORD *)(v11 + 16) = v55;
        }
        break;
      case 609:
        if (*(_DWORD *)(v3 + 44) != 609)
        {
          CoreML::Specification::Model::clear_Type(v3);
          *(_DWORD *)(v3 + 44) = 609;
          operator new();
        }
        uint64_t v19 = (const CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *)*((void *)a2 + 4);
        uint64_t v56 = *(unint64_t **)(v3 + 32);
        this = (std::string *)CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts::MergeFrom(v56, v19);
        break;
      case 610:
        if (*(_DWORD *)(v3 + 44) != 610)
        {
          CoreML::Specification::Model::clear_Type(v3);
          *(_DWORD *)(v3 + 44) = 610;
          operator new();
        }
        int v20 = (const CoreML::Specification::NonMaximumSuppression *)*((void *)a2 + 4);
        int v57 = *(std::string **)(v3 + 32);
        this = CoreML::Specification::NonMaximumSuppression::MergeFrom(v57, v20);
        break;
      default:
        if (v10 == 560)
        {
          if (*(_DWORD *)(v3 + 44) != 560)
          {
            CoreML::Specification::Model::clear_Type(v3);
            *(_DWORD *)(v3 + 44) = 560;
            operator new();
          }
          unint64_t v47 = (const CoreML::Specification::ClassConfidenceThresholding *)*((void *)a2 + 4);
          int v86 = *(std::string **)(v3 + 32);
          this = CoreML::Specification::ClassConfidenceThresholding::MergeFrom(v86, v47);
        }
        break;
    }
  }
  return this;
}

void sub_19EADA174(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

long long *CoreML::Specification::ModelDescription::MergeFrom(long long *this, const CoreML::Specification::ModelDescription *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    this = (long long *)google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((unint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  unsigned int v5 = *((_DWORD *)a2 + 6);
  if (v5)
  {
    signed int v6 = (const CoreML::Specification::FeatureDescription **)(*((void *)a2 + 4) + 8);
    uint64_t v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)(v3 + 1), *((_DWORD *)a2 + 6));
    this = (long long *)google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>((std::string *)(v3 + 1), (std::string **)v7, v6, v5, **((_DWORD **)v3 + 4) - *((_DWORD *)v3 + 6));
    signed int v8 = *((_DWORD *)v3 + 6) + v5;
    *((_DWORD *)v3 + 6) = v8;
    int v9 = (signed int *)*((void *)v3 + 4);
    if (*v9 < v8) {
      signed int *v9 = v8;
    }
  }
  unsigned int v10 = *((_DWORD *)a2 + 12);
  if (v10)
  {
    uint64_t v11 = (const CoreML::Specification::FeatureDescription **)(*((void *)a2 + 7) + 8);
    uint64_t v12 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)((char *)v3 + 40), *((_DWORD *)a2 + 12));
    this = (long long *)google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>((std::string *)((char *)v3 + 40), (std::string **)v12, v11, v10, **((_DWORD **)v3 + 7) - *((_DWORD *)v3 + 12));
    signed int v13 = *((_DWORD *)v3 + 12) + v10;
    *((_DWORD *)v3 + 12) = v13;
    int v14 = (signed int *)*((void *)v3 + 7);
    if (*v14 < v13) {
      signed int *v14 = v13;
    }
  }
  unsigned int v15 = *((_DWORD *)a2 + 18);
  if (v15)
  {
    BOOL v16 = (const CoreML::Specification::FeatureDescription **)(*((void *)a2 + 10) + 8);
    int v17 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)(v3 + 4), *((_DWORD *)a2 + 18));
    this = (long long *)google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>((std::string *)(v3 + 4), (std::string **)v17, v16, v15, **((_DWORD **)v3 + 10) - *((_DWORD *)v3 + 18));
    signed int v18 = *((_DWORD *)v3 + 18) + v15;
    *((_DWORD *)v3 + 18) = v18;
    uint64_t v19 = (signed int *)*((void *)v3 + 10);
    if (*v19 < v18) {
      *uint64_t v19 = v18;
    }
  }
  unsigned int v20 = *((_DWORD *)a2 + 24);
  if (v20)
  {
    uint64_t v21 = (const CoreML::Specification::FunctionDescription **)(*((void *)a2 + 13) + 8);
    uint64_t v22 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)((char *)v3 + 88), *((_DWORD *)a2 + 24));
    this = (long long *)google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<CoreML::Specification::FunctionDescription>::TypeHandler>((std::string *)((char *)v3 + 88), (std::string **)v22, v21, v20, **((_DWORD **)v3 + 13) - *((_DWORD *)v3 + 24));
    signed int v23 = *((_DWORD *)v3 + 24) + v20;
    *((_DWORD *)v3 + 24) = v23;
    unint64_t v24 = (signed int *)*((void *)v3 + 13);
    if (*v24 < v23) {
      *unint64_t v24 = v23;
    }
  }
  unsigned int v25 = *((_DWORD *)a2 + 30);
  if (v25)
  {
    uint64_t v26 = (const CoreML::Specification::FeatureDescription **)(*((void *)a2 + 16) + 8);
    uint64_t v27 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)(v3 + 7), *((_DWORD *)a2 + 30));
    this = (long long *)google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>((std::string *)(v3 + 7), (std::string **)v27, v26, v25, **((_DWORD **)v3 + 16) - *((_DWORD *)v3 + 30));
    signed int v28 = *((_DWORD *)v3 + 30) + v25;
    *((_DWORD *)v3 + 3CoreML::Specification::CategoricalMapping::New(this, 0) = v28;
    uint64_t v29 = (signed int *)*((void *)v3 + 16);
    if (*v29 < v28) {
      *uint64_t v29 = v28;
    }
  }
  uint64_t v30 = *((void *)a2 + 17);
  if (*(char *)(v30 + 23) < 0)
  {
    if (!*(void *)(v30 + 8)) {
      goto LABEL_26;
    }
  }
  else if (!*(unsigned char *)(v30 + 23))
  {
    goto LABEL_26;
  }
  this = (long long *)((char *)v3 + 136);
  BOOL v31 = (long long *)*((void *)v3 + 17);
  if (v31 != (long long *)v30)
  {
    if (v31 == &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
    }
    this = (long long *)std::string::operator=(*((std::string **)v3 + 17), (const std::string *)v30);
  }
LABEL_26:
  uint64_t v32 = *((void *)a2 + 18);
  if (*(char *)(v32 + 23) < 0)
  {
    if (!*(void *)(v32 + 8)) {
      goto LABEL_34;
    }
  }
  else if (!*(unsigned char *)(v32 + 23))
  {
    goto LABEL_34;
  }
  this = v3 + 9;
  int v33 = (long long *)*((void *)v3 + 18);
  if (v33 != (long long *)v32)
  {
    if (v33 == &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
    }
    this = (long long *)std::string::operator=(*((std::string **)v3 + 18), (const std::string *)v32);
  }
LABEL_34:
  uint64_t v34 = *((void *)a2 + 19);
  if (*(char *)(v34 + 23) < 0)
  {
    if (!*(void *)(v34 + 8)) {
      goto LABEL_42;
    }
  }
  else if (!*(unsigned char *)(v34 + 23))
  {
    goto LABEL_42;
  }
  this = (long long *)((char *)v3 + 152);
  int v35 = (long long *)*((void *)v3 + 19);
  if (v35 != (long long *)v34)
  {
    if (v35 == &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
    }
    this = (long long *)std::string::operator=(*((std::string **)v3 + 19), (const std::string *)v34);
  }
LABEL_42:
  if (a2 != (const CoreML::Specification::ModelDescription *)&CoreML::Specification::_ModelDescription_default_instance_
    && *((void *)a2 + 20))
  {
    if (!*((void *)v3 + 20)) {
      operator new();
    }
    BOOL v36 = (const CoreML::Specification::Metadata *)*((void *)a2 + 20);
    int v37 = (CoreML::Specification::Metadata *)*((void *)v3 + 20);
    return CoreML::Specification::Metadata::MergeFrom(v37, v36);
  }
  return this;
}

void sub_19EADA814(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C40FB0D5B10);
  _Unwind_Resume(a1);
}

std::string *CoreML::Specification::PipelineClassifier::MergeFrom(std::string *this, const CoreML::Specification::PipelineClassifier *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    this = google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  uint64_t v5 = *((void *)a2 + 2);
  if (a2 != (const CoreML::Specification::PipelineClassifier *)&CoreML::Specification::_PipelineClassifier_default_instance_
    && v5 != 0)
  {
    if (!v3->__r_.__value_.__r.__words[2]) {
      operator new();
    }
    if (v5) {
      uint64_t v7 = (const CoreML::Specification::Pipeline *)*((void *)a2 + 2);
    }
    else {
      uint64_t v7 = (const CoreML::Specification::Pipeline *)&CoreML::Specification::_Pipeline_default_instance_;
    }
    signed int v8 = (unint64_t *)v3->__r_.__value_.__r.__words[2];
    return (std::string *)CoreML::Specification::Pipeline::MergeFrom(v8, v7);
  }
  return this;
}

void sub_19EADA8F4(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C40759568C3);
  _Unwind_Resume(a1);
}

std::string *CoreML::Specification::PipelineRegressor::MergeFrom(std::string *this, const CoreML::Specification::PipelineRegressor *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    this = google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  uint64_t v5 = *((void *)a2 + 2);
  if (a2 != (const CoreML::Specification::PipelineRegressor *)&CoreML::Specification::_PipelineRegressor_default_instance_
    && v5 != 0)
  {
    if (!v3->__r_.__value_.__r.__words[2]) {
      operator new();
    }
    if (v5) {
      uint64_t v7 = (const CoreML::Specification::Pipeline *)*((void *)a2 + 2);
    }
    else {
      uint64_t v7 = (const CoreML::Specification::Pipeline *)&CoreML::Specification::_Pipeline_default_instance_;
    }
    signed int v8 = (CoreML::Specification::Pipeline *)v3->__r_.__value_.__r.__words[2];
    return (std::string *)CoreML::Specification::Pipeline::MergeFrom(v8, v7);
  }
  return this;
}

void sub_19EADA9D4(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C40759568C3);
  _Unwind_Resume(a1);
}

unint64_t *CoreML::Specification::Pipeline::MergeFrom(unint64_t *this, const CoreML::Specification::Pipeline *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    this = (unint64_t *)google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  int v5 = *((_DWORD *)a2 + 6);
  if (v5)
  {
    uint64_t v33 = *((void *)a2 + 4);
    this = (unint64_t *)google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)(v3 + 2), v5);
    uint64_t v32 = this;
    uint64_t v6 = *(int *)v3[4];
    uint64_t v7 = *((int *)v3 + 6);
    int v8 = v6 - v7;
    if ((int)v6 - (int)v7 >= v5) {
      uint64_t v9 = v5;
    }
    else {
      uint64_t v9 = v8;
    }
    if ((int)v9 >= 1)
    {
      unsigned int v10 = (std::string **)this;
      uint64_t v11 = (CoreML::Specification::Model **)(v33 + 8);
      do
      {
        signed int v13 = *v11++;
        uint64_t v12 = v13;
        int v14 = *v10++;
        this = (unint64_t *)google::protobuf::internal::GenericTypeHandler<CoreML::Specification::Model>::Merge(v12, v14);
        --v9;
      }
      while (v9);
    }
    if (v8 < v5)
    {
      unsigned int v15 = (google::protobuf::Arena *)v3[2];
      int v16 = v7 + v5 - v6;
      uint64_t v17 = 8 * v6 - 8 * v7;
      signed int v18 = (google::protobuf::Arena ***)((char *)v32 + v17);
      uint64_t v19 = (CoreML::Specification::Model **)(v17 + v33 + 8);
      do
      {
        unsigned int v20 = *v19;
        if (!v15) {
          operator new();
        }
        CoreML::Specification::Model::Model((CoreML::Specification::Model *)Aligned);
        uint64_t v22 = google::protobuf::Arena::AllocateAligned(v15, 0, 24);
        *uint64_t v22 = (google::protobuf::Arena *)Aligned;
        v22[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::Model>;
        signed int v23 = (unint64_t *)((char *)v15 + 32);
        do
          unint64_t v24 = __ldxr(v23);
        while (__stxr((unint64_t)v22, v23));
        v22[2] = (google::protobuf::Arena *)v24;
        this = (unint64_t *)google::protobuf::internal::GenericTypeHandler<CoreML::Specification::Model>::Merge(v20, (std::string *)Aligned);
        *v18++ = Aligned;
        ++v19;
        --v16;
      }
      while (v16);
    }
    int v25 = *((_DWORD *)v3 + 6) + v5;
    *((_DWORD *)v3 + 6) = v25;
    uint64_t v26 = (int *)v3[4];
    if (*v26 < v25) {
      int *v26 = v25;
    }
  }
  unsigned int v27 = *((_DWORD *)a2 + 12);
  if (v27)
  {
    signed int v28 = (const std::string **)(*((void *)a2 + 7) + 8);
    uint64_t v29 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)(v3 + 5), v27);
    this = (unint64_t *)google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((std::string *)(v3 + 5), (std::string **)v29, v28, v27, *(_DWORD *)v3[7] - *((_DWORD *)v3 + 12));
    signed int v30 = *((_DWORD *)v3 + 12) + v27;
    *((_DWORD *)v3 + 12) = v30;
    BOOL v31 = (signed int *)v3[7];
    if (*v31 < v30) {
      *BOOL v31 = v30;
    }
  }
  return this;
}

void sub_19EADAC08(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C4065E65A88);
  _Unwind_Resume(a1);
}

std::string *CoreML::Specification::SerializedModel::MergeFrom(std::string *this, const CoreML::Specification::SerializedModel *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    this = google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  uint64_t v5 = *((void *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
  {
    if (!*(void *)(v5 + 8)) {
      goto LABEL_11;
    }
  }
  else if (!*(unsigned char *)(v5 + 23))
  {
    goto LABEL_11;
  }
  this = (std::string *)&v3->__r_.__value_.__r.__words[2];
  uint64_t v6 = (long long *)v3->__r_.__value_.__r.__words[2];
  if (v6 != (long long *)v5)
  {
    if (v6 == &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
    }
    this = std::string::operator=((std::string *)v3->__r_.__value_.__r.__words[2], (const std::string *)v5);
  }
LABEL_11:
  uint64_t v7 = *((void *)a2 + 3);
  if (*(char *)(v7 + 23) < 0)
  {
    if (!*(void *)(v7 + 8)) {
      return this;
    }
  }
  else if (!*(unsigned char *)(v7 + 23))
  {
    return this;
  }
  this = (std::string *)v3[1].__r_.__value_.__l.__data_;
  if (this != (std::string *)v7)
  {
    if (this == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
    }
    return std::string::operator=(this, (const std::string *)v7);
  }
  return this;
}

std::string *google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(std::string *result, std::string **a2, const std::string **a3, unsigned int a4, unsigned int a5)
{
  uint64_t v9 = (google::protobuf::Arena **)result;
  if ((int)a5 >= (int)a4) {
    uint64_t v10 = a4;
  }
  else {
    uint64_t v10 = a5;
  }
  if ((int)v10 >= 1)
  {
    uint64_t v11 = a3;
    uint64_t v12 = a2;
    do
    {
      int v14 = *v11++;
      signed int v13 = v14;
      unsigned int v15 = *v12++;
      uint64_t result = std::string::operator=(v15, v13);
      --v10;
    }
    while (v10);
  }
  BOOL v16 = __OFSUB__(a4, a5);
  int v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    signed int v18 = *v9;
    uint64_t v19 = &a2[a5];
    unsigned int v20 = &a3[a5];
    do
    {
      uint64_t v21 = *v20;
      if (!v18) {
        operator new();
      }
      Aligned->__r_.__value_.__l.__size_ = 0;
      Aligned->__r_.__value_.__r.__words[2] = 0;
      Aligned->__r_.__value_.__r.__words[0] = 0;
      signed int v23 = google::protobuf::Arena::AllocateAligned(v18, 0, 24);
      *signed int v23 = (google::protobuf::Arena *)Aligned;
      v23[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<std::string>;
      unint64_t v24 = (unint64_t *)((char *)v18 + 32);
      do
        unint64_t v25 = __ldxr(v24);
      while (__stxr((unint64_t)v23, v24));
      v23[2] = (google::protobuf::Arena *)v25;
      uint64_t result = std::string::operator=(Aligned, v21);
      *v19++ = Aligned;
      ++v20;
      --v17;
    }
    while (v17);
  }
  return result;
}

std::string *google::protobuf::internal::GenericTypeHandler<CoreML::Specification::Model>::Merge(CoreML::Specification::Model *a1, std::string *this)
{
  return CoreML::Specification::Model::MergeFrom(this, a1);
}

CoreML::Specification::Model *CoreML::Specification::Model::Model(CoreML::Specification::Model *this)
{
  *(void *)this = &unk_1EF0D9528;
  *((void *)this + 1) = 0;
  if (this != (CoreML::Specification::Model *)&CoreML::Specification::_Model_default_instance_) {
    CoreML::Specification::protobuf_Model_2eproto::InitDefaults(this);
  }
  *(void *)((char *)this + 21) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 5) = 0;
  return this;
}

void sub_19EADAED0(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<CoreML::Specification::Model>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

std::string *google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<CoreML::Specification::FunctionDescription>::TypeHandler>(std::string *result, std::string **a2, const CoreML::Specification::FunctionDescription **a3, unsigned int a4, unsigned int a5)
{
  uint64_t v9 = (google::protobuf::Arena **)result;
  if ((int)a5 >= (int)a4) {
    uint64_t v10 = a4;
  }
  else {
    uint64_t v10 = a5;
  }
  if ((int)v10 >= 1)
  {
    uint64_t v11 = a3;
    uint64_t v12 = a2;
    do
    {
      int v14 = *v11++;
      signed int v13 = v14;
      unsigned int v15 = *v12++;
      uint64_t result = google::protobuf::internal::GenericTypeHandler<CoreML::Specification::FunctionDescription>::Merge(v13, v15);
      --v10;
    }
    while (v10);
  }
  BOOL v16 = __OFSUB__(a4, a5);
  int v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    signed int v18 = *v9;
    uint64_t v19 = (google::protobuf::Arena ***)&a2[a5];
    unsigned int v20 = &a3[a5];
    do
    {
      uint64_t v21 = *v20;
      if (!v18) {
        operator new();
      }
      CoreML::Specification::FunctionDescription::FunctionDescription((CoreML::Specification::FunctionDescription *)Aligned);
      signed int v23 = google::protobuf::Arena::AllocateAligned(v18, 0, 24);
      *signed int v23 = (google::protobuf::Arena *)Aligned;
      v23[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::FunctionDescription>;
      unint64_t v24 = (unint64_t *)((char *)v18 + 32);
      do
        unint64_t v25 = __ldxr(v24);
      while (__stxr((unint64_t)v23, v24));
      v23[2] = (google::protobuf::Arena *)v25;
      uint64_t result = google::protobuf::internal::GenericTypeHandler<CoreML::Specification::FunctionDescription>::Merge(v21, (std::string *)Aligned);
      *v19++ = Aligned;
      ++v20;
      --v17;
    }
    while (v17);
  }
  return result;
}

void sub_19EADB02C(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C40FD9EAC30);
  _Unwind_Resume(a1);
}

long long *CoreML::Specification::Metadata::MergeFrom(CoreML::Specification::Metadata *this, const CoreML::Specification::Metadata *a2)
{
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((unint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  uint64_t result = (long long *)google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::MergeFrom((uint64_t)this + 16, *((void **)a2 + 5));
  uint64_t v6 = *((void *)a2 + 6);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(void *)(v6 + 8)) {
      goto LABEL_11;
    }
  }
  else if (!*(unsigned char *)(v6 + 23))
  {
    goto LABEL_11;
  }
  uint64_t result = (long long *)((char *)this + 48);
  uint64_t v7 = (long long *)*((void *)this + 6);
  if (v7 != (long long *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
    }
    uint64_t result = (long long *)std::string::operator=(*((std::string **)this + 6), (const std::string *)v6);
  }
LABEL_11:
  uint64_t v8 = *((void *)a2 + 7);
  if (*(char *)(v8 + 23) < 0)
  {
    if (!*(void *)(v8 + 8)) {
      goto LABEL_19;
    }
  }
  else if (!*(unsigned char *)(v8 + 23))
  {
    goto LABEL_19;
  }
  uint64_t result = (long long *)((char *)this + 56);
  uint64_t v9 = (long long *)*((void *)this + 7);
  if (v9 != (long long *)v8)
  {
    if (v9 == &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
    }
    uint64_t result = (long long *)std::string::operator=(*((std::string **)this + 7), (const std::string *)v8);
  }
LABEL_19:
  uint64_t v10 = *((void *)a2 + 8);
  if (*(char *)(v10 + 23) < 0)
  {
    if (!*(void *)(v10 + 8)) {
      goto LABEL_27;
    }
  }
  else if (!*(unsigned char *)(v10 + 23))
  {
    goto LABEL_27;
  }
  uint64_t result = (long long *)((char *)this + 64);
  uint64_t v11 = (long long *)*((void *)this + 8);
  if (v11 != (long long *)v10)
  {
    if (v11 == &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
    }
    uint64_t result = (long long *)std::string::operator=(*((std::string **)this + 8), (const std::string *)v10);
  }
LABEL_27:
  uint64_t v12 = *((void *)a2 + 9);
  if (*(char *)(v12 + 23) < 0)
  {
    if (!*(void *)(v12 + 8)) {
      return result;
    }
  }
  else if (!*(unsigned char *)(v12 + 23))
  {
    return result;
  }
  uint64_t result = (long long *)*((void *)this + 9);
  if (result != (long long *)v12)
  {
    if (result == &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
    }
    return (long long *)std::string::operator=((std::string *)result, (const std::string *)v12);
  }
  return result;
}

std::string *google::protobuf::internal::GenericTypeHandler<CoreML::Specification::FunctionDescription>::Merge(const CoreML::Specification::FunctionDescription *a1, std::string *a2)
{
  return CoreML::Specification::FunctionDescription::MergeFrom(a2, a1);
}

CoreML::Specification::FunctionDescription *CoreML::Specification::FunctionDescription::FunctionDescription(CoreML::Specification::FunctionDescription *this)
{
  *(void *)this = &unk_1EF0D3920;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 4CoreML::Specification::CategoricalMapping::New(this, 0) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  if (this != (CoreML::Specification::FunctionDescription *)&CoreML::Specification::_FunctionDescription_default_instance_) {
    CoreML::Specification::protobuf_Model_2eproto::InitDefaults(this);
  }
  *((void *)this + 11) = &google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 12) = &google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 13) = &google::protobuf::internal::fixed_address_empty_string;
  *((_DWORD *)this + 28) = 0;
  return this;
}

void sub_19EADB2AC(_Unwind_Exception *a1)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>(v4);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>(v2);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>(v3);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<CoreML::Specification::FunctionDescription>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

std::string *CoreML::Specification::FunctionDescription::MergeFrom(std::string *this, const CoreML::Specification::FunctionDescription *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    this = google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  unsigned int v5 = *((_DWORD *)a2 + 6);
  if (v5)
  {
    uint64_t v6 = (const CoreML::Specification::FeatureDescription **)(*((void *)a2 + 4) + 8);
    uint64_t v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)&v3->__r_.__value_.__r.__words[2], *((_DWORD *)a2 + 6));
    this = google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>((std::string *)&v3->__r_.__value_.__r.__words[2], (std::string **)v7, v6, v5, *(_DWORD *)v3[1].__r_.__value_.__l.__size_ - LODWORD(v3[1].__r_.__value_.__l.__data_));
    signed int v8 = LODWORD(v3[1].__r_.__value_.__l.__data_) + v5;
    LODWORD(v3[1].__r_.__value_.__l.__data_) = v8;
    std::string::size_type size = (signed int *)v3[1].__r_.__value_.__l.__size_;
    if (*size < v8) {
      *std::string::size_type size = v8;
    }
  }
  unsigned int v10 = *((_DWORD *)a2 + 12);
  if (v10)
  {
    uint64_t v11 = (const CoreML::Specification::FeatureDescription **)(*((void *)a2 + 7) + 8);
    uint64_t v12 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)&v3[1].__r_.__value_.__r.__words[2], *((_DWORD *)a2 + 12));
    this = google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>((std::string *)((char *)v3 + 40), (std::string **)v12, v11, v10, *(_DWORD *)v3[2].__r_.__value_.__l.__size_ - LODWORD(v3[2].__r_.__value_.__l.__data_));
    signed int v13 = LODWORD(v3[2].__r_.__value_.__l.__data_) + v10;
    LODWORD(v3[2].__r_.__value_.__l.__data_) = v13;
    int v14 = (signed int *)v3[2].__r_.__value_.__l.__size_;
    if (*v14 < v13) {
      signed int *v14 = v13;
    }
  }
  unsigned int v15 = *((_DWORD *)a2 + 18);
  if (v15)
  {
    BOOL v16 = (const CoreML::Specification::FeatureDescription **)(*((void *)a2 + 10) + 8);
    int v17 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)&v3[2].__r_.__value_.__r.__words[2], *((_DWORD *)a2 + 18));
    this = google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>((std::string *)((char *)v3 + 64), (std::string **)v17, v16, v15, *(_DWORD *)v3[3].__r_.__value_.__l.__size_ - LODWORD(v3[3].__r_.__value_.__l.__data_));
    signed int v18 = LODWORD(v3[3].__r_.__value_.__l.__data_) + v15;
    LODWORD(v3[3].__r_.__value_.__l.__data_) = v18;
    uint64_t v19 = (signed int *)v3[3].__r_.__value_.__l.__size_;
    if (*v19 < v18) {
      *uint64_t v19 = v18;
    }
  }
  uint64_t v20 = *((void *)a2 + 11);
  if (*(char *)(v20 + 23) < 0)
  {
    if (!*(void *)(v20 + 8)) {
      goto LABEL_20;
    }
  }
  else if (!*(unsigned char *)(v20 + 23))
  {
    goto LABEL_20;
  }
  this = (std::string *)((char *)v3 + 88);
  uint64_t v21 = (long long *)v3[3].__r_.__value_.__r.__words[2];
  if (v21 != (long long *)v20)
  {
    if (v21 == &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
    }
    this = std::string::operator=((std::string *)v3[3].__r_.__value_.__r.__words[2], (const std::string *)v20);
  }
LABEL_20:
  uint64_t v22 = *((void *)a2 + 12);
  if (*(char *)(v22 + 23) < 0)
  {
    if (!*(void *)(v22 + 8)) {
      goto LABEL_28;
    }
  }
  else if (!*(unsigned char *)(v22 + 23))
  {
    goto LABEL_28;
  }
  this = v3 + 4;
  int data = (long long *)v3[4].__r_.__value_.__l.__data_;
  if (data != (long long *)v22)
  {
    if (data == &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
    }
    this = std::string::operator=((std::string *)v3[4].__r_.__value_.__l.__data_, (const std::string *)v22);
  }
LABEL_28:
  uint64_t v24 = *((void *)a2 + 13);
  if (*(char *)(v24 + 23) < 0)
  {
    if (!*(void *)(v24 + 8)) {
      return this;
    }
  }
  else if (!*(unsigned char *)(v24 + 23))
  {
    return this;
  }
  this = (std::string *)v3[4].__r_.__value_.__l.__size_;
  if (this != (std::string *)v24)
  {
    if (this == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
    }
    return std::string::operator=(this, (const std::string *)v24);
  }
  return this;
}

uint64_t CoreML::Specification::Model::IsInitialized(CoreML::Specification::Model *this)
{
  return 1;
}

uint64_t CoreML::Specification::Model::Clear(CoreML::Specification::Model *this)
{
  uint64_t v3 = (void *)((char *)this + 16);
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *(void *)((char *)v3 + 5) = 0;
  void *v3 = 0;

  return CoreML::Specification::Model::clear_Type((uint64_t)this);
}

void CoreML::Specification::Model::New(CoreML::Specification::Model *this, google::protobuf::Arena *a2)
{
}

void sub_19EADB66C(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C4065E65A88);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::Model>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    uint64_t result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *uint64_t result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::Model>;
    uint64_t v4 = (unint64_t *)(v3 + 4);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::Model>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void CoreML::Specification::Model::New(CoreML::Specification::Model *this)
{
}

void *CoreML::Specification::Model::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.Model");
}

void CoreML::Specification::Model::~Model(CoreML::Specification::Model *this)
{
  CoreML::Specification::Model::~Model(this);

  JUMPOUT(0x19F3C1920);
}

{
  uint64_t v2;

  *(void *)this = &unk_1EF0D9528;
  if (this != (CoreML::Specification::Model *)&CoreML::Specification::_Model_default_instance_)
  {
    uint64_t v2 = *((void *)this + 2);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }
  if (*((_DWORD *)this + 11)) {
    CoreML::Specification::Model::clear_Type((uint64_t)this);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

uint64_t CoreML::Specification::ModelDescription::GetCachedSize(CoreML::Specification::ModelDescription *this)
{
  return *((unsigned int *)this + 42);
}

uint64_t CoreML::Specification::ModelDescription::SerializeWithCachedSizes(CoreML::Specification::ModelDescription *this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  int v6 = *((_DWORD *)this + 6);
  if (v6)
  {
    for (int i = 0; i != v6; ++i)
      google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)1, *(void *)(*((void *)this + 4) + 8 * i + 8), a2, a4);
  }
  int v8 = *((_DWORD *)this + 12);
  if (v8)
  {
    for (int j = 0; j != v8; ++j)
      google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0xA, *(void *)(*((void *)this + 7) + 8 * j + 8), a2, a4);
  }
  unsigned int v10 = (unsigned int *)*((void *)this + 17);
  if (*((char *)v10 + 23) < 0)
  {
    uint64_t v11 = *((void *)v10 + 1);
    if (!v11) {
      goto LABEL_13;
    }
    unsigned int v10 = *(unsigned int **)v10;
    goto LABEL_12;
  }
  LODWORD(v11) = *((unsigned __int8 *)v10 + 23);
  if (*((unsigned char *)v10 + 23))
  {
LABEL_12:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v10, v11, 1, (uint64_t)"CoreML.Specification.ModelDescription.predictedFeatureName");
    google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(0xBu, *((void *)this + 17), a2);
  }
LABEL_13:
  uint64_t v12 = (unsigned int *)*((void *)this + 18);
  if (*((char *)v12 + 23) < 0)
  {
    uint64_t v13 = *((void *)v12 + 1);
    if (!v13) {
      goto LABEL_19;
    }
    uint64_t v12 = *(unsigned int **)v12;
    goto LABEL_18;
  }
  LODWORD(v13) = *((unsigned __int8 *)v12 + 23);
  if (*((unsigned char *)v12 + 23))
  {
LABEL_18:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v12, v13, 1, (uint64_t)"CoreML.Specification.ModelDescription.predictedProbabilitiesName");
    google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(0xCu, *((void *)this + 18), a2);
  }
LABEL_19:
  int v14 = *((_DWORD *)this + 18);
  if (v14)
  {
    for (int k = 0; k != v14; ++k)
      google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0xD, *(void *)(*((void *)this + 10) + 8 * k + 8), a2, a4);
  }
  int v16 = *((_DWORD *)this + 24);
  if (v16)
  {
    for (int m = 0; m != v16; ++m)
      google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x14, *(void *)(*((void *)this + 13) + 8 * m + 8), a2, a4);
  }
  uint64_t result = *((void *)this + 19);
  if (*(char *)(result + 23) < 0)
  {
    uint64_t v19 = *(void *)(result + 8);
    if (!v19) {
      goto LABEL_31;
    }
    uint64_t result = *(void *)result;
    goto LABEL_30;
  }
  LODWORD(v19) = *(unsigned __int8 *)(result + 23);
  if (*(unsigned char *)(result + 23))
  {
LABEL_30:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String((unsigned int *)result, v19, 1, (uint64_t)"CoreML.Specification.ModelDescription.defaultFunctionName");
    uint64_t result = google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(0x15u, *((void *)this + 19), a2);
  }
LABEL_31:
  int v20 = *((_DWORD *)this + 30);
  if (v20)
  {
    for (int n = 0; n != v20; ++n)
      uint64_t result = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x32, *(void *)(*((void *)this + 16) + 8 * n + 8), a2, a4);
  }
  if (this != (CoreML::Specification::ModelDescription *)&CoreML::Specification::_ModelDescription_default_instance_)
  {
    uint64_t v22 = *((void *)this + 20);
    if (v22)
    {
      return google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x64, v22, a2, a4);
    }
  }
  return result;
}

uint64_t CoreML::Specification::FeatureDescription::Clear(CoreML::Specification::FeatureDescription *this)
{
  uint64_t v2 = *((void *)this + 2);
  if ((long long *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(unsigned char **)uint64_t v2 = 0;
      *(void *)(v2 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v2 = 0;
      *(unsigned char *)(v2 + 23) = 0;
    }
  }
  uint64_t v3 = *((void *)this + 3);
  if ((long long *)v3 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v3 + 23) < 0)
    {
      **(unsigned char **)uint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v3 = 0;
      *(unsigned char *)(v3 + 23) = 0;
    }
  }
  uint64_t result = *((void *)this + 4);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 4) = 0;
  return result;
}

uint64_t CoreML::Specification::FunctionDescription::Clear(uint64_t this)
{
  uint64_t v1 = this;
  uint64_t v2 = *(unsigned int *)(this + 24);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = (CoreML::Specification::FeatureDescription **)(*(void *)(this + 32) + 8);
    do
    {
      uint64_t v4 = *v3++;
      this = CoreML::Specification::FeatureDescription::Clear(v4);
      --v2;
    }
    while (v2);
    *(_DWORD *)(v1 + 24) = 0;
  }
  uint64_t v5 = *(unsigned int *)(v1 + 48);
  if ((int)v5 >= 1)
  {
    int v6 = (CoreML::Specification::FeatureDescription **)(*(void *)(v1 + 56) + 8);
    do
    {
      uint64_t v7 = *v6++;
      this = CoreML::Specification::FeatureDescription::Clear(v7);
      --v5;
    }
    while (v5);
    *(_DWORD *)(v1 + 48) = 0;
  }
  uint64_t v8 = *(unsigned int *)(v1 + 72);
  if ((int)v8 >= 1)
  {
    uint64_t v9 = (CoreML::Specification::FeatureDescription **)(*(void *)(v1 + 80) + 8);
    do
    {
      unsigned int v10 = *v9++;
      this = CoreML::Specification::FeatureDescription::Clear(v10);
      --v8;
    }
    while (v8);
    *(_DWORD *)(v1 + 72) = 0;
  }
  uint64_t v11 = *(void *)(v1 + 88);
  if ((long long *)v11 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v11 + 23) < 0)
    {
      **(unsigned char **)uint64_t v11 = 0;
      *(void *)(v11 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v11 = 0;
      *(unsigned char *)(v11 + 23) = 0;
    }
  }
  uint64_t v12 = *(void *)(v1 + 96);
  if ((long long *)v12 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v12 + 23) < 0)
    {
      **(unsigned char **)uint64_t v12 = 0;
      *(void *)(v12 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v12 = 0;
      *(unsigned char *)(v12 + 23) = 0;
    }
  }
  uint64_t v13 = *(void *)(v1 + 104);
  if ((long long *)v13 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v13 + 23) < 0)
    {
      **(unsigned char **)uint64_t v13 = 0;
      *(void *)(v13 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v13 = 0;
      *(unsigned char *)(v13 + 23) = 0;
    }
  }
  return this;
}

void CoreML::Specification::ModelDescription::New(CoreML::Specification::ModelDescription *this, google::protobuf::Arena *a2)
{
}

void sub_19EADBC68(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C40E043F9A7);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::ModelDescription>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    uint64_t result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *uint64_t result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::ModelDescription>;
    uint64_t v4 = (unint64_t *)(v3 + 4);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::ModelDescription>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void CoreML::Specification::ModelDescription::New(CoreML::Specification::ModelDescription *this)
{
}

void *CoreML::Specification::ModelDescription::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.ModelDescription");
}

uint64_t CoreML::Specification::FunctionDescription::GetCachedSize(CoreML::Specification::FunctionDescription *this)
{
  return *((unsigned int *)this + 28);
}

uint64_t CoreML::Specification::FunctionDescription::SerializeWithCachedSizes(CoreML::Specification::FunctionDescription *this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  int v6 = (unsigned int *)*((void *)this + 11);
  if (*((char *)v6 + 23) < 0)
  {
    uint64_t v7 = *((void *)v6 + 1);
    if (!v7) {
      goto LABEL_7;
    }
    int v6 = *(unsigned int **)v6;
    goto LABEL_6;
  }
  LODWORD(v7) = *((unsigned __int8 *)v6 + 23);
  if (*((unsigned char *)v6 + 23))
  {
LABEL_6:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v6, v7, 1, (uint64_t)"CoreML.Specification.FunctionDescription.name");
    google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(1u, *((void *)this + 11), a2);
  }
LABEL_7:
  int v8 = *((_DWORD *)this + 6);
  if (v8)
  {
    for (int i = 0; i != v8; ++i)
      google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)2, *(void *)(*((void *)this + 4) + 8 * i + 8), a2, a4);
  }
  int v10 = *((_DWORD *)this + 12);
  if (v10)
  {
    for (int j = 0; j != v10; ++j)
      google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)3, *(void *)(*((void *)this + 7) + 8 * j + 8), a2, a4);
  }
  uint64_t v12 = (unsigned int *)*((void *)this + 12);
  if (*((char *)v12 + 23) < 0)
  {
    uint64_t v13 = *((void *)v12 + 1);
    if (!v13) {
      goto LABEL_19;
    }
    uint64_t v12 = *(unsigned int **)v12;
    goto LABEL_18;
  }
  LODWORD(v13) = *((unsigned __int8 *)v12 + 23);
  if (*((unsigned char *)v12 + 23))
  {
LABEL_18:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v12, v13, 1, (uint64_t)"CoreML.Specification.FunctionDescription.predictedFeatureName");
    google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(4u, *((void *)this + 12), a2);
  }
LABEL_19:
  uint64_t result = *((void *)this + 13);
  if (*(char *)(result + 23) < 0)
  {
    uint64_t v15 = *(void *)(result + 8);
    if (!v15) {
      goto LABEL_25;
    }
    uint64_t result = *(void *)result;
    goto LABEL_24;
  }
  LODWORD(v15) = *(unsigned __int8 *)(result + 23);
  if (*(unsigned char *)(result + 23))
  {
LABEL_24:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String((unsigned int *)result, v15, 1, (uint64_t)"CoreML.Specification.FunctionDescription.predictedProbabilitiesName");
    uint64_t result = google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(5u, *((void *)this + 13), a2);
  }
LABEL_25:
  int v16 = *((_DWORD *)this + 18);
  if (v16)
  {
    for (int k = 0; k != v16; ++k)
      uint64_t result = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)6, *(void *)(*((void *)this + 10) + 8 * k + 8), a2, a4);
  }
  return result;
}

uint64_t CoreML::Specification::FunctionDescription::MergePartialFromCodedStream(CoreML::Specification::FunctionDescription *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  uint64_t v4 = (char *)this + 64;
  unint64_t v5 = (std::string **)((char *)this + 104);
  int v6 = (std::string **)((char *)this + 96);
  uint64_t v7 = (char *)this + 40;
  int v8 = (char *)this + 16;
  uint64_t v9 = (std::string **)((char *)this + 88);
  while (2)
  {
    while (1)
    {
      int v10 = *(char **)a2;
      if (*(void *)a2 >= *((void *)a2 + 1)) {
        break;
      }
      uint64_t v11 = *v10;
      if (*v10 < 1) {
        goto LABEL_7;
      }
      *(void *)a2 = v10 + 1;
      unint64_t v12 = v11 | 0x100000000;
      if ((v12 & 0x100000000) != 0) {
        goto LABEL_8;
      }
LABEL_36:
      if (v12) {
        BOOL v21 = (v12 & 7) == 4;
      }
      else {
        BOOL v21 = 1;
      }
      if (v21) {
        return 1;
      }
      if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v12, a3) & 1) == 0) {
        goto LABEL_54;
      }
    }
    LODWORD(v11) = 0;
LABEL_7:
    unsigned int TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v11);
    unint64_t v12 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
    if ((v12 & 0x100000000) == 0) {
      goto LABEL_36;
    }
LABEL_8:
    switch(v12 >> 3)
    {
      case 1u:
        if (v12 != 10) {
          goto LABEL_36;
        }
        if (*v9 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
        }
        uint64_t result = google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)a2, *v9);
        if (!result) {
          return result;
        }
        uint64_t v15 = *v9;
        if (SHIBYTE((*v9)->__r_.__value_.__r.__words[2]) < 0)
        {
          uint64_t v15 = (std::string *)v15->__r_.__value_.__r.__words[0];
          std::string::size_type size = (*v9)->__r_.__value_.__l.__size_;
        }
        else
        {
          LODWORD(size) = HIBYTE((*v9)->__r_.__value_.__r.__words[2]);
        }
        unsigned int v27 = "CoreML.Specification.FunctionDescription.name";
        goto LABEL_53;
      case 2u:
        if (v12 != 18) {
          goto LABEL_36;
        }
        uint64_t v17 = (uint64_t)v8;
        goto LABEL_33;
      case 3u:
        if (v12 != 26) {
          goto LABEL_36;
        }
        uint64_t v17 = (uint64_t)v7;
        goto LABEL_33;
      case 4u:
        if (v12 != 34) {
          goto LABEL_36;
        }
        if (*v6 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
        }
        uint64_t result = google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)a2, *v6);
        if (!result) {
          return result;
        }
        uint64_t v15 = *v6;
        if (SHIBYTE((*v6)->__r_.__value_.__r.__words[2]) < 0)
        {
          uint64_t v15 = (std::string *)v15->__r_.__value_.__r.__words[0];
          std::string::size_type size = (*v6)->__r_.__value_.__l.__size_;
        }
        else
        {
          LODWORD(size) = HIBYTE((*v6)->__r_.__value_.__r.__words[2]);
        }
        unsigned int v27 = "CoreML.Specification.FunctionDescription.predictedFeatureName";
        goto LABEL_53;
      case 5u:
        if (v12 != 42) {
          goto LABEL_36;
        }
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
        }
        uint64_t result = google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)a2, *v5);
        if (!result) {
          return result;
        }
        uint64_t v15 = *v5;
        if (SHIBYTE((*v5)->__r_.__value_.__r.__words[2]) < 0)
        {
          uint64_t v15 = (std::string *)v15->__r_.__value_.__r.__words[0];
          std::string::size_type size = (*v5)->__r_.__value_.__l.__size_;
        }
        else
        {
          LODWORD(size) = HIBYTE((*v5)->__r_.__value_.__r.__words[2]);
        }
        unsigned int v27 = "CoreML.Specification.FunctionDescription.predictedProbabilitiesName";
LABEL_53:
        if (!google::protobuf::internal::WireFormatLite::VerifyUtf8String((unsigned int *)v15, size, 0, (uint64_t)v27)) {
          goto LABEL_54;
        }
        continue;
      case 6u:
        if (v12 != 50) {
          goto LABEL_36;
        }
        uint64_t v17 = (uint64_t)v4;
LABEL_33:
        signed int v18 = google::protobuf::internal::RepeatedPtrFieldBase::Add<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>(v17);
        uint64_t v19 = *(char **)a2;
        if (*(void *)a2 >= *((void *)a2 + 1) || *v19 < 0)
        {
          int VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (VarintSizeAsIntFallback < 0) {
            goto LABEL_54;
          }
        }
        else
        {
          int VarintSizeAsIntFallback = *v19;
          *(void *)a2 = v19 + 1;
        }
        int v22 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
        int v24 = *((_DWORD *)a2 + 13);
        BOOL v25 = __OFSUB__(v24--, 1);
        *((_DWORD *)a2 + 13) = v24;
        if (v24 < 0 != v25) {
          goto LABEL_54;
        }
        int v26 = v22;
        uint64_t result = CoreML::Specification::FeatureDescription::MergePartialFromCodedStream((CoreML::Specification::FeatureDescription *)v18, a2, v23);
        if (!result) {
          return result;
        }
        if (google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v26)) {
          continue;
        }
LABEL_54:
        uint64_t result = 0;
        break;
      default:
        goto LABEL_36;
    }
    return result;
  }
}

uint64_t CoreML::Specification::FunctionDescription::IsInitialized(CoreML::Specification::FunctionDescription *this)
{
  return 1;
}

void CoreML::Specification::FunctionDescription::New(CoreML::Specification::FunctionDescription *this, google::protobuf::Arena *a2)
{
}

void sub_19EADC248(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C40FD9EAC30);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::FunctionDescription>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    uint64_t result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *uint64_t result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::FunctionDescription>;
    uint64_t v4 = (unint64_t *)(v3 + 4);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::FunctionDescription>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void CoreML::Specification::FunctionDescription::New(CoreML::Specification::FunctionDescription *this)
{
}

void *CoreML::Specification::FunctionDescription::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.FunctionDescription");
}

void CoreML::Specification::FunctionDescription::~FunctionDescription(CoreML::Specification::FunctionDescription *this)
{
  CoreML::Specification::FunctionDescription::~FunctionDescription(this);

  JUMPOUT(0x19F3C1920);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;

  *(void *)this = &unk_1EF0D3920;
  uint64_t v2 = *((void *)this + 11);
  if ((long long *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    MEMORY[0x19F3C1920](v2, 0x1012C40EC159624);
  }
  uint64_t v4 = *((void *)this + 12);
  if ((long long *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0) {
      operator delete(*(void **)v4);
    }
    MEMORY[0x19F3C1920](v4, 0x1012C40EC159624);
  }
  int v6 = *((void *)this + 13);
  if ((long long *)v6 != &google::protobuf::internal::fixed_address_empty_string && v6)
  {
    if (*(char *)(v6 + 23) < 0) {
      operator delete(*(void **)v6);
    }
    MEMORY[0x19F3C1920](v6, 0x1012C40EC159624);
  }
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>((void *)this + 8);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>((void *)this + 5);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>((void *)this + 2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

uint64_t CoreML::Specification::Metadata::GetCachedSize(CoreML::Specification::Metadata *this)
{
  return *((unsigned int *)this + 20);
}

uint64_t CoreML::Specification::Metadata::SerializeWithCachedSizes(CoreML::Specification::Metadata *this, google::protobuf::io::CodedOutputStream *a2)
{
  uint64_t v4 = (unsigned int *)*((void *)this + 6);
  if (*((char *)v4 + 23) < 0)
  {
    uint64_t v5 = *((void *)v4 + 1);
    if (!v5) {
      goto LABEL_7;
    }
    uint64_t v4 = *(unsigned int **)v4;
    goto LABEL_6;
  }
  LODWORD(v5) = *((unsigned __int8 *)v4 + 23);
  if (*((unsigned char *)v4 + 23))
  {
LABEL_6:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v4, v5, 1, (uint64_t)"CoreML.Specification.Metadata.shortDescription");
    google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(1u, *((void *)this + 6), a2);
  }
LABEL_7:
  int v6 = (unsigned int *)*((void *)this + 7);
  if (*((char *)v6 + 23) < 0)
  {
    uint64_t v7 = *((void *)v6 + 1);
    if (!v7) {
      goto LABEL_13;
    }
    int v6 = *(unsigned int **)v6;
    goto LABEL_12;
  }
  LODWORD(v7) = *((unsigned __int8 *)v6 + 23);
  if (*((unsigned char *)v6 + 23))
  {
LABEL_12:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v6, v7, 1, (uint64_t)"CoreML.Specification.Metadata.versionString");
    google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(2u, *((void *)this + 7), a2);
  }
LABEL_13:
  int v8 = (unsigned int *)*((void *)this + 8);
  if (*((char *)v8 + 23) < 0)
  {
    uint64_t v9 = *((void *)v8 + 1);
    if (!v9) {
      goto LABEL_19;
    }
    int v8 = *(unsigned int **)v8;
    goto LABEL_18;
  }
  LODWORD(v9) = *((unsigned __int8 *)v8 + 23);
  if (*((unsigned char *)v8 + 23))
  {
LABEL_18:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v8, v9, 1, (uint64_t)"CoreML.Specification.Metadata.author");
    google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(3u, *((void *)this + 8), a2);
  }
LABEL_19:
  uint64_t result = *((void *)this + 9);
  if (*(char *)(result + 23) < 0)
  {
    uint64_t v11 = *(void *)(result + 8);
    if (!v11) {
      goto LABEL_25;
    }
    uint64_t result = *(void *)result;
    goto LABEL_24;
  }
  LODWORD(v11) = *(unsigned __int8 *)(result + 23);
  if (*(unsigned char *)(result + 23))
  {
LABEL_24:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String((unsigned int *)result, v11, 1, (uint64_t)"CoreML.Specification.Metadata.license");
    uint64_t result = google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(4u, *((void *)this + 9), a2);
  }
LABEL_25:
  unint64_t v12 = (unint64_t *)*((void *)this + 5);
  unint64_t v13 = *v12;
  if (!*v12) {
    return result;
  }
  if (!*((unsigned char *)a2 + 26))
  {
    if (v13 < 2 || !google::protobuf::io::CodedOutputStream::default_serialization_deterministic_) {
      goto LABEL_33;
    }
LABEL_32:
    operator new[]();
  }
  if (v13 >= 2 && *((unsigned char *)a2 + 27)) {
    goto LABEL_32;
  }
LABEL_33:
  uint64_t result = (uint64_t)google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::begin(v17, v12);
  uint64_t v14 = 0;
  while (v17[0])
  {
    int v16 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::Wrap(*((google::protobuf::Arena **)v17[0] + 3), (google::protobuf::Arena *)(*((void *)v17[0] + 3) + 24), *((google::protobuf::Arena **)this + 2));
    if ((google::protobuf::Arena **)v14 != v16)
    {
      if (v14) {
        (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
      }
      uint64_t v14 = (uint64_t)v16;
    }
    google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x64, v14, a2, v15);
    CoreML::Specification::Metadata::SerializeWithCachedSizes(google::protobuf::io::CodedOutputStream *)const::Utf8Check::Check(*((unsigned int **)v17[0] + 3));
    uint64_t result = (uint64_t)google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::KeyValuePair const>::operator++(v17);
  }
  if (v14) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  return result;
}

void sub_19EADC800(_Unwind_Exception *a1)
{
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  MEMORY[0x19F3C1900](v1, 0x60C8044C4A2DFLL);
  _Unwind_Resume(a1);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**,false>(uint64_t result, char *a2, uint64_t a3, char a4)
{
  int v8 = (char *)result;
  while (2)
  {
    uint64_t v95 = a2 - 8;
    uint64_t v91 = a2 - 24;
    int v92 = a2 - 16;
    uint64_t v9 = v8;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          unint64_t v10 = (unint64_t)v9;
          uint64_t v11 = a2 - v9;
          uint64_t v12 = (a2 - v9) >> 3;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0:
              case 1:
                return result;
              case 2:
                uint64_t v41 = *(void **)v95;
                uint64_t v42 = *(void **)v9;
                uint64_t result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*(void **)v95, *(void **)v9);
                if (result)
                {
                  *(void *)uint64_t v9 = v41;
                  *(void *)uint64_t v95 = v42;
                }
                break;
              case 3:
                uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((void **)v9, (void **)v9 + 1, (void **)v95);
                break;
              case 4:
                uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((void **)v9, (void **)v9 + 1, (void **)v9 + 2, (void **)v95);
                break;
              case 5:
                uint64_t result = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((void **)v9, (void **)v9 + 1, (void **)v9 + 2, (void **)v9 + 3, (void **)v95);
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v11 <= 191)
          {
            uint64_t v43 = v9 + 8;
            BOOL v45 = v9 == a2 || v43 == a2;
            if (a4)
            {
              if (!v45)
              {
                uint64_t v46 = 0;
                unint64_t v47 = v9;
                do
                {
                  unint64_t v49 = *(void **)v47;
                  unint64_t v48 = (void *)*((void *)v47 + 1);
                  unint64_t v47 = v43;
                  uint64_t result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v48, v49);
                  if (result)
                  {
                    uint64_t v50 = v46;
                    while (1)
                    {
                      *(void *)&v9[v50 + 8] = v49;
                      if (!v50) {
                        break;
                      }
                      unint64_t v49 = *(void **)&v9[v50 - 8];
                      uint64_t result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v48, v49);
                      v50 -= 8;
                      if ((result & 1) == 0)
                      {
                        int v51 = &v9[v50 + 8];
                        goto LABEL_80;
                      }
                    }
                    int v51 = v9;
LABEL_80:
                    *(void *)int v51 = v48;
                  }
                  uint64_t v43 = v47 + 8;
                  v46 += 8;
                }
                while (v47 + 8 != a2);
              }
            }
            else if (!v45)
            {
              do
              {
                std::string v87 = *(void **)v10;
                int v86 = *(void **)(v10 + 8);
                unint64_t v10 = (unint64_t)v43;
                uint64_t result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v86, v87);
                if (result)
                {
                  int v88 = (void *)v10;
                  do
                  {
                    *int v88 = v87;
                    std::string v87 = (void *)*(v88 - 2);
                    uint64_t result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v86, v87);
                    --v88;
                  }
                  while ((result & 1) != 0);
                  *int v88 = v86;
                }
                uint64_t v43 = (char *)(v10 + 8);
              }
              while ((char *)(v10 + 8) != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v9 != a2)
            {
              int v98 = v9;
              int64_t v52 = (unint64_t)(v12 - 2) >> 1;
              int64_t v53 = v52;
              std::string v89 = a2;
              uint64_t v90 = a2 - v9;
              do
              {
                int64_t v54 = v53;
                if (v11 >= 16 && v52 >= v53)
                {
                  uint64_t v55 = (2 * v53) | 1;
                  uint64_t v56 = &v98[8 * v55];
                  uint64_t v57 = 2 * v53 + 2;
                  int64_t v96 = v53;
                  if (v57 < v12)
                  {
                    uint64_t v58 = *(void **)v56;
                    int v60 = (void *)*((void *)v56 + 1);
                    BOOL v59 = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*(void **)v56, v60);
                    if (v59) {
                      v56 += 8;
                    }
                    else {
                      int v60 = v58;
                    }
                    if (v59) {
                      uint64_t v55 = v57;
                    }
                  }
                  else
                  {
                    int v60 = *(void **)v56;
                  }
                  uint64_t v61 = &v98[8 * v54];
                  uint64_t v62 = *(void **)v61;
                  uint64_t result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v60, *(void **)v61);
                  uint64_t v11 = v90;
                  if ((result & 1) == 0)
                  {
                    do
                    {
                      long long v63 = v56;
                      *(void *)uint64_t v61 = v60;
                      if (v52 < v55) {
                        break;
                      }
                      uint64_t v64 = (2 * v55) | 1;
                      uint64_t v56 = &v98[8 * v64];
                      uint64_t v65 = 2 * v55 + 2;
                      if (v65 < v12)
                      {
                        int v60 = *(void **)v56;
                        int v66 = (void *)*((void *)v56 + 1);
                        if (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*(void **)v56, v66))
                        {
                          int v60 = v66;
                          v56 += 8;
                          uint64_t v55 = v65;
                        }
                        else
                        {
                          uint64_t v55 = v64;
                        }
                      }
                      else
                      {
                        int v60 = *(void **)v56;
                        uint64_t v55 = (2 * v55) | 1;
                      }
                      uint64_t result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v60, v62);
                      uint64_t v61 = v63;
                    }
                    while (!result);
                    *(void *)long long v63 = v62;
                    a2 = v89;
                    uint64_t v11 = v90;
                    int64_t v54 = v96;
                  }
                }
                int64_t v53 = v54 - 1;
              }
              while (v54);
              uint64_t v67 = (unint64_t)v11 >> 3;
              int v68 = v98;
              do
              {
                uint64_t v69 = a2;
                uint64_t v70 = 0;
                uint64_t v71 = v67 - 2;
                int v94 = *(void **)v68;
                if (v67 < 2) {
                  uint64_t v71 = v67 - 1;
                }
                uint64_t v72 = v71 >> 1;
                do
                {
                  int v73 = &v68[8 * v70 + 8];
                  uint64_t v74 = (2 * v70) | 1;
                  uint64_t v75 = 2 * v70 + 2;
                  if (v75 >= v67)
                  {
                    int v78 = *(void **)v73;
                    uint64_t v70 = (2 * v70) | 1;
                  }
                  else
                  {
                    int v76 = *(void **)v73;
                    uint64_t v77 = *(void **)&v68[8 * v70 + 16];
                    uint64_t result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*(void **)v73, v77);
                    if (result) {
                      int v78 = v77;
                    }
                    else {
                      int v78 = v76;
                    }
                    if (result)
                    {
                      v73 += 8;
                      uint64_t v70 = v75;
                    }
                    else
                    {
                      uint64_t v70 = v74;
                    }
                  }
                  *(void *)int v68 = v78;
                  int v68 = v73;
                }
                while (v70 <= v72);
                a2 = v69 - 8;
                if (v73 == v69 - 8)
                {
                  *(void *)int v73 = v94;
                }
                else
                {
                  *(void *)int v73 = *(void *)a2;
                  *(void *)a2 = v94;
                  uint64_t v79 = v73 - v98 + 8;
                  if (v79 >= 9)
                  {
                    unint64_t v80 = (unint64_t)((v79 >> 3) - 2) >> 1;
                    char v81 = &v98[8 * v80];
                    int v82 = *(void **)v81;
                    uint64_t v83 = *(void **)v73;
                    uint64_t result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*(void **)v81, *(void **)v73);
                    if (result)
                    {
                      do
                      {
                        int v84 = v81;
                        *(void *)int v73 = v82;
                        if (!v80) {
                          break;
                        }
                        unint64_t v80 = (v80 - 1) >> 1;
                        char v81 = &v98[8 * v80];
                        int v82 = *(void **)v81;
                        uint64_t result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*(void **)v81, v83);
                        int v73 = v84;
                      }
                      while ((result & 1) != 0);
                      *(void *)int v84 = v83;
                    }
                  }
                }
                BOOL v85 = v67-- <= 2;
                int v68 = v98;
              }
              while (!v85);
            }
            return result;
          }
          unint64_t v13 = (unint64_t)v12 >> 1;
          uint64_t v14 = &v9[8 * ((unint64_t)v12 >> 1)];
          if ((unint64_t)v11 < 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((void **)v14, (void **)v9, (void **)v95);
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((void **)v9, (void **)v14, (void **)v95);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((void **)v9 + 1, (void **)v14 - 1, (void **)v92);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((void **)v9 + 2, (void **)&v9[8 * v13 + 8], (void **)v91);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((void **)v14 - 1, (void **)v14, (void **)&v9[8 * v13 + 8]);
            uint64_t v15 = *(void **)v9;
            *(void *)uint64_t v9 = *(void *)v14;
            *(void *)uint64_t v14 = v15;
          }
          --a3;
          int v16 = *(void **)v9;
          uint64_t v17 = v9;
          if (a4) {
            break;
          }
          uint64_t v17 = v9;
          if (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*((void **)v9 - 1), *(void **)v9))
          {
            break;
          }
          uint64_t result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v16, *(void **)v95);
          if (result)
          {
            do
            {
              BOOL v31 = (void *)*((void *)v9 + 1);
              v9 += 8;
              uint64_t result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v16, v31);
            }
            while ((result & 1) == 0);
          }
          else
          {
            uint64_t v32 = v9 + 8;
            do
            {
              uint64_t v9 = v32;
              if (v32 >= a2) {
                break;
              }
              v32 += 8;
              uint64_t result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v16, *(void **)v9);
            }
            while (!result);
          }
          uint64_t v33 = a2;
          if (v9 < a2)
          {
            uint64_t v33 = a2;
            do
            {
              uint64_t v34 = (void *)*((void *)v33 - 1);
              v33 -= 8;
              uint64_t result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v16, v34);
            }
            while ((result & 1) != 0);
          }
          int v35 = a2;
          if (v9 < v33)
          {
            BOOL v36 = *(void **)v9;
            int v37 = *(void **)v33;
            do
            {
              *(void *)uint64_t v9 = v37;
              *(void *)uint64_t v33 = v36;
              do
              {
                uint64_t v38 = (void *)*((void *)v9 + 1);
                v9 += 8;
                BOOL v36 = v38;
              }
              while (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v16, v38));
              do
              {
                uint64_t v39 = (void *)*((void *)v33 - 1);
                v33 -= 8;
                int v37 = v39;
                uint64_t result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v16, v39);
              }
              while ((result & 1) != 0);
            }
            while (v9 < v33);
          }
          uint64_t v40 = v9 - 8;
          BOOL v4 = (unint64_t)(v9 - 8) >= v10;
          BOOL v5 = v9 - 8 == (char *)v10;
          a2 = v35;
          if (v9 - 8 != (char *)v10) {
            *(void *)unint64_t v10 = *(void *)v40;
          }
          a4 = 0;
          *(void *)uint64_t v40 = v16;
        }
        do
        {
          signed int v18 = v17;
          int v20 = (void *)*((void *)v17 + 1);
          v17 += 8;
          uint64_t v19 = v20;
        }
        while (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v20, v16));
        uint64_t v97 = a3;
        BOOL v21 = a2;
        if (v18 == (char *)v10)
        {
          BOOL v21 = a2;
          do
          {
            if (v17 >= v21) {
              break;
            }
            unsigned int v23 = (void *)*((void *)v21 - 1);
            v21 -= 8;
          }
          while (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v23, v16));
        }
        else
        {
          do
          {
            int v22 = (void *)*((void *)v21 - 1);
            v21 -= 8;
          }
          while (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v22, v16));
        }
        int v8 = (char *)v10;
        int v24 = a2;
        if (v17 < v21)
        {
          BOOL v25 = *(void **)v21;
          int v26 = v17;
          unsigned int v27 = v21;
          do
          {
            *(void *)int v26 = v25;
            *(void *)unsigned int v27 = v19;
            do
            {
              signed int v18 = v26;
              signed int v28 = (void *)*((void *)v26 + 1);
              v26 += 8;
              uint64_t v19 = v28;
            }
            while (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v28, v16));
            do
            {
              uint64_t v29 = (void *)*((void *)v27 - 1);
              v27 -= 8;
              BOOL v25 = v29;
            }
            while (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v29, v16));
          }
          while (v26 < v27);
        }
        if (v18 != v8) {
          *(void *)int v8 = *(void *)v18;
        }
        *(void *)signed int v18 = v16;
        BOOL v4 = v17 >= v21;
        a2 = v24;
        a3 = v97;
        if (v4) {
          break;
        }
LABEL_31:
        uint64_t result = std::__introsort<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**,false>(v8, v18, v97, a4 & 1);
        a4 = 0;
        uint64_t v9 = v18 + 8;
      }
      BOOL v30 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((void **)v8, (void **)v18);
      uint64_t v9 = v18 + 8;
      uint64_t result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((void **)v18 + 1, (void **)v24);
      if (result) {
        break;
      }
      if (!v30) {
        goto LABEL_31;
      }
    }
    a2 = v18;
    if (!v30) {
      continue;
    }
    return result;
  }
}

BOOL CoreML::Specification::Metadata::SerializeWithCachedSizes(google::protobuf::io::CodedOutputStream *)const::Utf8Check::Check(unsigned int *a1)
{
  uint64_t v1 = a1;
  if (*((char *)a1 + 23) < 0)
  {
    a1 = *(unsigned int **)a1;
    uint64_t v2 = *((void *)v1 + 1);
  }
  else
  {
    LODWORD(v2) = *((unsigned __int8 *)a1 + 23);
  }
  google::protobuf::internal::WireFormatLite::VerifyUtf8String(a1, v2, 1, (uint64_t)"CoreML.Specification.Metadata.UserDefinedEntry.key");
  if (*((char *)v1 + 47) < 0)
  {
    uint64_t v3 = (unsigned int *)*((void *)v1 + 3);
    uint64_t v4 = *((void *)v1 + 4);
  }
  else
  {
    uint64_t v3 = v1 + 6;
    LODWORD(v4) = *((unsigned __int8 *)v1 + 47);
  }

  return google::protobuf::internal::WireFormatLite::VerifyUtf8String(v3, v4, 1, (uint64_t)"CoreML.Specification.Metadata.UserDefinedEntry.value");
}

BOOL std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(void **a1, void **a2, void **a3)
{
  int v6 = *a2;
  uint64_t v7 = *a1;
  BOOL v8 = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*a2, *a1);
  uint64_t v9 = *a3;
  BOOL result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*a3, v6);
  if (v8)
  {
    if (result)
    {
      *a1 = v9;
    }
    else
    {
      *a1 = v6;
      *a2 = v7;
      unint64_t v13 = *a3;
      BOOL result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*a3, v7);
      if (!result) {
        return result;
      }
      *a2 = v13;
    }
    *a3 = v7;
  }
  else if (result)
  {
    *a2 = v9;
    *a3 = v6;
    uint64_t v11 = *a2;
    uint64_t v12 = *a1;
    BOOL result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*a2, *a1);
    if (result)
    {
      *a1 = v11;
      *a2 = v12;
    }
  }
  return result;
}

BOOL std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(void **a1, void **a2, void **a3, void **a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(a1, a2, a3);
  BOOL v8 = *a4;
  uint64_t v9 = *a3;
  BOOL result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*a4, *a3);
  if (result)
  {
    *a3 = v8;
    *a4 = v9;
    uint64_t v11 = *a3;
    uint64_t v12 = *a2;
    BOOL result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*a3, *a2);
    if (result)
    {
      *a2 = v11;
      *a3 = v12;
      unint64_t v13 = *a2;
      uint64_t v14 = *a1;
      BOOL result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*a2, *a1);
      if (result)
      {
        *a1 = v13;
        *a2 = v14;
      }
    }
  }
  return result;
}

BOOL std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(void **a1, void **a2, void **a3, void **a4, void **a5)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(a1, a2, a3, a4);
  unint64_t v10 = *a5;
  uint64_t v11 = *a4;
  BOOL result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*a5, *a4);
  if (result)
  {
    *a4 = v10;
    *a5 = v11;
    unint64_t v13 = *a4;
    uint64_t v14 = *a3;
    BOOL result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*a4, *a3);
    if (result)
    {
      *a3 = v13;
      *a4 = v14;
      uint64_t v15 = *a3;
      int v16 = *a2;
      BOOL result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*a3, *a2);
      if (result)
      {
        *a2 = v15;
        *a3 = v16;
        uint64_t v17 = *a2;
        signed int v18 = *a1;
        BOOL result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*a2, *a1);
        if (result)
        {
          *a1 = v17;
          *a2 = v18;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(void **a1, void **a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      int v6 = *(a2 - 1);
      uint64_t v7 = *a1;
      if (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v6, *a1))
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      BOOL v8 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(a1, a1 + 1, a1 + 2);
      uint64_t v9 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v10 = 0;
      uint64_t v11 = 24;
      break;
  }
  while (1)
  {
    uint64_t v12 = *v9;
    unint64_t v13 = *v8;
    if (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*v9, v13))
    {
      uint64_t v14 = v11;
      while (1)
      {
        *(void **)((char *)a1 + v14) = v13;
        uint64_t v15 = v14 - 8;
        if (v14 == 8) {
          break;
        }
        unint64_t v13 = *(void **)((char *)a1 + v14 - 16);
        BOOL v16 = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v12, v13);
        uint64_t v14 = v15;
        if (!v16)
        {
          uint64_t v17 = (void **)((char *)a1 + v15);
          goto LABEL_12;
        }
      }
      uint64_t v17 = a1;
LABEL_12:
      void *v17 = v12;
      if (++v10 == 8) {
        return v9 + 1 == a2;
      }
    }
    BOOL v8 = v9;
    v11 += 8;
    if (++v9 == a2) {
      return 1;
    }
  }
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::Map<std::string,std::string>>::~Parser(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

double google::protobuf::Map<std::string,std::string>::erase(void *a1, unsigned __int8 *a2)
{
  google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper(&v6, a1[2], a2, 0);
  double result = *(double *)&v6;
  if ((void)v6)
  {
    long long v4 = v6;
    uint64_t v5 = v7;
    *(void *)&double result = google::protobuf::Map<std::string,std::string>::erase((uint64_t)&v6, a1, &v4).n128_u64[0];
  }
  return result;
}

google::protobuf::Arena **google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::NewEntry(google::protobuf::Arena *a1)
{
  if (!a1) {
    operator new();
  }
  result[1] = 0;
  result[2] = (google::protobuf::Arena *)&google::protobuf::internal::fixed_address_empty_string;
  result[3] = (google::protobuf::Arena *)&google::protobuf::internal::fixed_address_empty_string;
  result[4] = a1;
  *((_DWORD *)result + 1CoreML::Specification::FunctionDescription::New(this, 0) = 0;
  *double result = (google::protobuf::Arena *)&unk_1EF0DC690;
  return result;
}

__n128 google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::Map<std::string,std::string>>::UseKeyAndValueFromEntry(uint64_t a1)
{
  uint64_t v2 = (const std::string *)(*(uint64_t (**)(void))(**(void **)(a1 + 48) + 136))(*(void *)(a1 + 48));
  std::string::operator=((std::string *)(a1 + 16), v2);
  uint64_t v3 = google::protobuf::Map<std::string,std::string>::operator[](*(void *)(a1 + 8), a1 + 16);
  *(void *)(a1 + 4CoreML::Specification::FunctionDescription::New(this, 0) = v3;
  uint64_t v4 = *(void *)(a1 + 48);
  *(_DWORD *)(v4 + 40) |= 2u;
  uint64_t v5 = *(void *)(v4 + 24);
  if ((long long *)v5 == &google::protobuf::internal::fixed_address_empty_string) {
    google::protobuf::internal::ArenaStringPtr::CreateInstance();
  }
  if (*((char *)v3 + 23) < 0) {
    operator delete(*v3);
  }
  __n128 result = *(__n128 *)v5;
  v3[2] = *(google::protobuf::Arena **)(v5 + 16);
  *(__n128 *)uint64_t v3 = result;
  *(unsigned char *)(v5 + 23) = 0;
  *(unsigned char *)uint64_t v5 = 0;
  return result;
}

uint64_t CoreML::Specification::Metadata::IsInitialized(CoreML::Specification::Metadata *this)
{
  return 1;
}

void CoreML::Specification::Metadata::Clear(CoreML::Specification::Metadata *this)
{
  google::protobuf::Map<std::string,std::string>::clear((void *)this + 3);
  uint64_t v2 = *((void *)this + 6);
  if ((long long *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(unsigned char **)uint64_t v2 = 0;
      *(void *)(v2 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v2 = 0;
      *(unsigned char *)(v2 + 23) = 0;
    }
  }
  uint64_t v3 = *((void *)this + 7);
  if ((long long *)v3 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v3 + 23) < 0)
    {
      **(unsigned char **)uint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v3 = 0;
      *(unsigned char *)(v3 + 23) = 0;
    }
  }
  uint64_t v4 = *((void *)this + 8);
  if ((long long *)v4 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v4 + 23) < 0)
    {
      **(unsigned char **)uint64_t v4 = 0;
      *(void *)(v4 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v4 = 0;
      *(unsigned char *)(v4 + 23) = 0;
    }
  }
  uint64_t v5 = *((void *)this + 9);
  if ((long long *)v5 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v5 + 23) < 0)
    {
      **(unsigned char **)uint64_t v5 = 0;
      *(void *)(v5 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v5 = 0;
      *(unsigned char *)(v5 + 23) = 0;
    }
  }
}

void CoreML::Specification::Metadata::New(CoreML::Specification::Metadata *this, google::protobuf::Arena *a2)
{
}

void sub_19EADD81C(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C40FB0D5B10);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::Metadata>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    __n128 result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *__n128 result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::Metadata>;
    uint64_t v4 = (unint64_t *)(v3 + 4);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::Metadata>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void CoreML::Specification::Metadata::New(CoreML::Specification::Metadata *this)
{
}

void *CoreML::Specification::Metadata::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.Metadata");
}

uint64_t CoreML::Specification::FeatureDescription::GetCachedSize(CoreML::Specification::FeatureDescription *this)
{
  return *((unsigned int *)this + 10);
}

uint64_t CoreML::Specification::FeatureDescription::SerializeWithCachedSizes(CoreML::Specification::FeatureDescription *this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  long long v6 = (unsigned int *)*((void *)this + 2);
  if (*((char *)v6 + 23) < 0)
  {
    uint64_t v7 = *((void *)v6 + 1);
    if (!v7) {
      goto LABEL_7;
    }
    long long v6 = *(unsigned int **)v6;
    goto LABEL_6;
  }
  LODWORD(v7) = *((unsigned __int8 *)v6 + 23);
  if (*((unsigned char *)v6 + 23))
  {
LABEL_6:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v6, v7, 1, (uint64_t)"CoreML.Specification.FeatureDescription.name");
    google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(1u, *((void *)this + 2), a2);
  }
LABEL_7:
  uint64_t result = *((void *)this + 3);
  if ((*(char *)(result + 23) & 0x80000000) == 0)
  {
    LODWORD(v9) = *(unsigned __int8 *)(result + 23);
    if (!*(unsigned char *)(result + 23)) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  uint64_t v9 = *(void *)(result + 8);
  if (v9)
  {
    uint64_t result = *(void *)result;
LABEL_12:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String((unsigned int *)result, v9, 1, (uint64_t)"CoreML.Specification.FeatureDescription.shortDescription");
    uint64_t result = google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(2u, *((void *)this + 3), a2);
  }
LABEL_13:
  if (this != (CoreML::Specification::FeatureDescription *)&CoreML::Specification::_FeatureDescription_default_instance_)
  {
    uint64_t v10 = *((void *)this + 4);
    if (v10)
    {
      return google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)3, v10, a2, a4);
    }
  }
  return result;
}

std::string *CoreML::Specification::FeatureDescription::MergeFrom(std::string *this, const CoreML::Specification::FeatureDescription *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    this = google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  uint64_t v5 = *((void *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
  {
    if (!*(void *)(v5 + 8)) {
      goto LABEL_11;
    }
  }
  else if (!*(unsigned char *)(v5 + 23))
  {
    goto LABEL_11;
  }
  this = (std::string *)&v3->__r_.__value_.__r.__words[2];
  long long v6 = (long long *)v3->__r_.__value_.__r.__words[2];
  if (v6 != (long long *)v5)
  {
    if (v6 == &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
    }
    this = std::string::operator=((std::string *)v3->__r_.__value_.__r.__words[2], (const std::string *)v5);
  }
LABEL_11:
  uint64_t v7 = *((void *)a2 + 3);
  if (*(char *)(v7 + 23) < 0)
  {
    if (!*(void *)(v7 + 8)) {
      goto LABEL_19;
    }
  }
  else if (!*(unsigned char *)(v7 + 23))
  {
    goto LABEL_19;
  }
  this = v3 + 1;
  int data = (long long *)v3[1].__r_.__value_.__l.__data_;
  if (data != (long long *)v7)
  {
    if (data == &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
    }
    this = std::string::operator=((std::string *)v3[1].__r_.__value_.__l.__data_, (const std::string *)v7);
  }
LABEL_19:
  if (a2 != (const CoreML::Specification::FeatureDescription *)&CoreML::Specification::_FeatureDescription_default_instance_
    && *((void *)a2 + 4))
  {
    if (!v3[1].__r_.__value_.__l.__size_) {
      operator new();
    }
    uint64_t v9 = (const CoreML::Specification::FeatureType *)*((void *)a2 + 4);
    std::string::size_type size = (std::string *)v3[1].__r_.__value_.__l.__size_;
    return CoreML::Specification::FeatureType::MergeFrom(size, v9);
  }
  return this;
}

void sub_19EADDB30(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C40B6FDD44FLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::FeatureDescription::IsInitialized(CoreML::Specification::FeatureDescription *this)
{
  return 1;
}

void CoreML::Specification::FeatureDescription::New(CoreML::Specification::FeatureDescription *this, google::protobuf::Arena *a2)
{
}

void sub_19EADDBB0(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C400A278675);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::FeatureDescription>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    uint64_t result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *uint64_t result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::FeatureDescription>;
    uint64_t v4 = (unint64_t *)(v3 + 4);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::FeatureDescription>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void CoreML::Specification::FeatureDescription::New(CoreML::Specification::FeatureDescription *this)
{
}

void *CoreML::Specification::FeatureDescription::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.FeatureDescription");
}

uint64_t CoreML::Specification::PipelineRegressor::GetCachedSize(CoreML::Specification::PipelineRegressor *this)
{
  return *((unsigned int *)this + 6);
}

uint64_t *CoreML::Specification::PipelineRegressor::SerializeWithCachedSizes(uint64_t *this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  if (this != &CoreML::Specification::_PipelineRegressor_default_instance_)
  {
    uint64_t v5 = this[2];
    if (v5) {
      return (uint64_t *)google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)1, v5, a2, a4);
    }
  }
  return this;
}

uint64_t CoreML::Specification::PipelineRegressor::IsInitialized(CoreML::Specification::PipelineRegressor *this)
{
  return 1;
}

uint64_t CoreML::Specification::PipelineRegressor::Clear(CoreML::Specification::PipelineRegressor *this)
{
  uint64_t result = *((void *)this + 2);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 2) = 0;
  return result;
}

void CoreML::Specification::PipelineRegressor::New(CoreML::Specification::PipelineRegressor *this, google::protobuf::Arena *a2)
{
}

void sub_19EADDD58(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C4084265165);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::PipelineRegressor>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    uint64_t result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *uint64_t result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::PipelineRegressor>;
    uint64_t v4 = (unint64_t *)(v3 + 4);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::PipelineRegressor>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void CoreML::Specification::PipelineRegressor::New(CoreML::Specification::PipelineRegressor *this)
{
}

void *CoreML::Specification::PipelineRegressor::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.PipelineRegressor");
}

void CoreML::Specification::PipelineRegressor::~PipelineRegressor(CoreML::Specification::PipelineRegressor *this)
{
  CoreML::Specification::PipelineRegressor::~PipelineRegressor(this);

  JUMPOUT(0x19F3C1920);
}

{
  uint64_t v2;

  *(void *)this = &unk_1EF0D27E8;
  if (this != (CoreML::Specification::PipelineRegressor *)&CoreML::Specification::_PipelineRegressor_default_instance_)
  {
    uint64_t v2 = *((void *)this + 2);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

uint64_t CoreML::Specification::PipelineClassifier::GetCachedSize(CoreML::Specification::PipelineClassifier *this)
{
  return *((unsigned int *)this + 6);
}

uint64_t *CoreML::Specification::PipelineClassifier::SerializeWithCachedSizes(uint64_t *this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  if (this != &CoreML::Specification::_PipelineClassifier_default_instance_)
  {
    uint64_t v5 = this[2];
    if (v5) {
      return (uint64_t *)google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)1, v5, a2, a4);
    }
  }
  return this;
}

uint64_t CoreML::Specification::PipelineClassifier::IsInitialized(CoreML::Specification::PipelineClassifier *this)
{
  return 1;
}

uint64_t CoreML::Specification::PipelineClassifier::Clear(CoreML::Specification::PipelineClassifier *this)
{
  uint64_t result = *((void *)this + 2);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 2) = 0;
  return result;
}

void CoreML::Specification::PipelineClassifier::New(CoreML::Specification::PipelineClassifier *this, google::protobuf::Arena *a2)
{
}

void sub_19EADDFBC(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C4084265165);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::PipelineClassifier>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    uint64_t result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *uint64_t result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::PipelineClassifier>;
    uint64_t v4 = (unint64_t *)(v3 + 4);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::PipelineClassifier>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void CoreML::Specification::PipelineClassifier::New(CoreML::Specification::PipelineClassifier *this)
{
}

void *CoreML::Specification::PipelineClassifier::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.PipelineClassifier");
}

void CoreML::Specification::PipelineClassifier::~PipelineClassifier(CoreML::Specification::PipelineClassifier *this)
{
  CoreML::Specification::PipelineClassifier::~PipelineClassifier(this);

  JUMPOUT(0x19F3C1920);
}

{
  uint64_t v2;

  *(void *)this = &unk_1EF0D3168;
  if (this != (CoreML::Specification::PipelineClassifier *)&CoreML::Specification::_PipelineClassifier_default_instance_)
  {
    uint64_t v2 = *((void *)this + 2);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

uint64_t CoreML::Specification::SerializedModel::GetCachedSize(CoreML::Specification::SerializedModel *this)
{
  return *((unsigned int *)this + 8);
}

uint64_t CoreML::Specification::SerializedModel::SerializeWithCachedSizes(CoreML::Specification::SerializedModel *this, google::protobuf::io::CodedOutputStream *a2)
{
  uint64_t result = *((void *)this + 2);
  if (*(char *)(result + 23) < 0)
  {
    uint64_t v5 = *(void *)(result + 8);
    if (!v5) {
      goto LABEL_7;
    }
    uint64_t result = *(void *)result;
    goto LABEL_6;
  }
  LODWORD(v5) = *(unsigned __int8 *)(result + 23);
  if (*(unsigned char *)(result + 23))
  {
LABEL_6:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String((unsigned int *)result, v5, 1, (uint64_t)"CoreML.Specification.SerializedModel.identifier");
    uint64_t result = google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(1u, *((void *)this + 2), a2);
  }
LABEL_7:
  uint64_t v6 = *((void *)this + 3);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(void *)(v6 + 8)) {
      return result;
    }
  }
  else if (!*(unsigned char *)(v6 + 23))
  {
    return result;
  }

  return google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(2u, v6, a2);
}

uint64_t CoreML::Specification::SerializedModel::IsInitialized(CoreML::Specification::SerializedModel *this)
{
  return 1;
}

uint64_t CoreML::Specification::SerializedModel::Clear(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 16);
  if ((long long *)v1 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v1 + 23) < 0)
    {
      **(unsigned char **)uint64_t v1 = 0;
      *(void *)(v1 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v1 = 0;
      *(unsigned char *)(v1 + 23) = 0;
    }
  }
  uint64_t v2 = *(void *)(this + 24);
  if ((long long *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(unsigned char **)uint64_t v2 = 0;
      *(void *)(v2 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v2 = 0;
      *(unsigned char *)(v2 + 23) = 0;
    }
  }
  return this;
}

void CoreML::Specification::SerializedModel::New(CoreML::Specification::SerializedModel *this, google::protobuf::Arena *a2)
{
}

void sub_19EADE2B4(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C40C9A46F13);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::SerializedModel>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    uint64_t result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *uint64_t result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::SerializedModel>;
    uint64_t v4 = (unint64_t *)(v3 + 4);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::SerializedModel>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void CoreML::Specification::SerializedModel::New(CoreML::Specification::SerializedModel *this)
{
}

void *CoreML::Specification::SerializedModel::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.SerializedModel");
}

void CoreML::Specification::SerializedModel::~SerializedModel(CoreML::Specification::SerializedModel *this)
{
  *(void *)this = &unk_1EF0D1028;
  uint64_t v1 = (uint64_t *)((char *)this + 8);
  CoreML::Specification::SerializedModel::SharedDtor((uint64_t)this);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);

  JUMPOUT(0x19F3C1920);
}

{
  uint64_t *v1;

  *(void *)this = &unk_1EF0D1028;
  uint64_t v1 = (uint64_t *)((char *)this + 8);
  CoreML::Specification::SerializedModel::SharedDtor((uint64_t)this);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
}

uint64_t CoreML::Specification::SerializedModel::SharedDtor(uint64_t this)
{
  uint64_t v1 = this;
  uint64_t v2 = *(void *)(this + 16);
  if ((long long *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    this = MEMORY[0x19F3C1920](v2, 0x1012C40EC159624);
  }
  uint64_t v4 = *(void *)(v1 + 24);
  if ((long long *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0) {
      operator delete(*(void **)v4);
    }
    JUMPOUT(0x19F3C1920);
  }
  return this;
}

void google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(void *a1)
{
  uint64_t v2 = (unsigned int *)a1[2];
  if (v2 && !*a1)
  {
    uint64_t v3 = (uint64_t *)(v2 + 2);
    uint64_t v4 = *v2;
    if ((int)v4 >= 1)
    {
      do
      {
        uint64_t v5 = *v3;
        if (*v3)
        {
          if (*(char *)(v5 + 23) < 0) {
            operator delete(*(void **)v5);
          }
          MEMORY[0x19F3C1920](v5, 0x1012C40EC159624);
        }
        ++v3;
        --v4;
      }
      while (v4);
      uint64_t v2 = (unsigned int *)a1[2];
    }
    operator delete(v2);
  }
  a1[2] = 0;
}

uint64_t CoreML::Specification::Pipeline::IsInitialized(CoreML::Specification::Pipeline *this)
{
  return 1;
}

uint64_t CoreML::Specification::Pipeline::Clear(CoreML::Specification::Pipeline *this)
{
  uint64_t v2 = *((unsigned int *)this + 6);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = (CoreML::Specification::Model **)(*((void *)this + 4) + 8);
    do
    {
      uint64_t v4 = *v3++;
      CoreML::Specification::Model::Clear(v4);
      --v2;
    }
    while (v2);
    *((_DWORD *)this + 6) = 0;
  }

  return google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 40);
}

void CoreML::Specification::Pipeline::New(CoreML::Specification::Pipeline *this, google::protobuf::Arena *a2)
{
}

void sub_19EADE648(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C40759568C3);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::Pipeline>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    uint64_t result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *uint64_t result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::Pipeline>;
    uint64_t v4 = (unint64_t *)(v3 + 4);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::Pipeline>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void CoreML::Specification::Pipeline::New(CoreML::Specification::Pipeline *this)
{
}

void *CoreML::Specification::Pipeline::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.Pipeline");
}

void CoreML::Specification::Pipeline::~Pipeline(CoreML::Specification::Pipeline *this)
{
  CoreML::Specification::Pipeline::~Pipeline(this);

  JUMPOUT(0x19F3C1920);
}

{
  void *v2;

  *(void *)this = &unk_1EF0DAC50;
  uint64_t v2 = (void *)((char *)this + 16);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((void *)this + 5);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

CoreML::Specification::ModelDescription *CoreML::Specification::ModelDescription::ModelDescription(CoreML::Specification::ModelDescription *this, const CoreML::Specification::ModelDescription *a2)
{
  *(void *)this = &unk_1EF0D1C08;
  *(_OWORD *)((char *)this + 8) = 0u;
  uint64_t v4 = (unint64_t *)((char *)this + 8);
  unint64_t v5 = (std::string *)((char *)this + 16);
  *(_OWORD *)((char *)this + 24) = 0u;
  unsigned int v6 = *((_DWORD *)a2 + 6);
  if (v6)
  {
    uint64_t v7 = *((void *)a2 + 4);
    BOOL v8 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((CoreML::Specification::ModelDescription *)((char *)this + 16), *((_DWORD *)a2 + 6));
    google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>(v5, (std::string **)v8, (const CoreML::Specification::FeatureDescription **)(v7 + 8), v6, **((_DWORD **)this + 4) - *((_DWORD *)this + 6));
    signed int v9 = *((_DWORD *)this + 6) + v6;
    *((_DWORD *)this + 6) = v9;
    uint64_t v10 = (signed int *)*((void *)this + 4);
    if (*v10 < v9) {
      *uint64_t v10 = v9;
    }
  }
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  unsigned int v11 = *((_DWORD *)a2 + 12);
  if (v11)
  {
    uint64_t v12 = *((void *)a2 + 7);
    unint64_t v13 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((CoreML::Specification::ModelDescription *)((char *)this + 40), *((_DWORD *)a2 + 12));
    google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>((std::string *)((char *)this + 40), (std::string **)v13, (const CoreML::Specification::FeatureDescription **)(v12 + 8), v11, **((_DWORD **)this + 7) - *((_DWORD *)this + 12));
    signed int v14 = *((_DWORD *)this + 12) + v11;
    *((_DWORD *)this + 12) = v14;
    uint64_t v15 = (signed int *)*((void *)this + 7);
    if (*v15 < v14) {
      *uint64_t v15 = v14;
    }
  }
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  *((void *)this + 1CoreML::Specification::Pipeline::New(this, 0) = 0;
  unsigned int v16 = *((_DWORD *)a2 + 18);
  if (v16)
  {
    uint64_t v17 = *((void *)a2 + 10);
    signed int v18 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((CoreML::Specification::ModelDescription *)((char *)this + 64), *((_DWORD *)a2 + 18));
    google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>((std::string *)((char *)this + 64), (std::string **)v18, (const CoreML::Specification::FeatureDescription **)(v17 + 8), v16, **((_DWORD **)this + 10) - *((_DWORD *)this + 18));
    signed int v19 = *((_DWORD *)this + 18) + v16;
    *((_DWORD *)this + 18) = v19;
    int v20 = (signed int *)*((void *)this + 10);
    if (*v20 < v19) {
      *int v20 = v19;
    }
  }
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 13) = 0;
  unsigned int v21 = *((_DWORD *)a2 + 24);
  if (v21)
  {
    uint64_t v22 = *((void *)a2 + 13);
    unsigned int v23 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((CoreML::Specification::ModelDescription *)((char *)this + 88), *((_DWORD *)a2 + 24));
    google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<CoreML::Specification::FunctionDescription>::TypeHandler>((std::string *)((char *)this + 88), (std::string **)v23, (const CoreML::Specification::FunctionDescription **)(v22 + 8), v21, **((_DWORD **)this + 13) - *((_DWORD *)this + 24));
    signed int v24 = *((_DWORD *)this + 24) + v21;
    *((_DWORD *)this + 24) = v24;
    BOOL v25 = (signed int *)*((void *)this + 13);
    if (*v25 < v24) {
      signed int *v25 = v24;
    }
  }
  *((void *)this + 14) = 0;
  *((void *)this + 15) = 0;
  *((void *)this + 16) = 0;
  unsigned int v26 = *((_DWORD *)a2 + 30);
  if (v26)
  {
    uint64_t v27 = *((void *)a2 + 16);
    signed int v28 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((CoreML::Specification::ModelDescription *)((char *)this + 112), *((_DWORD *)a2 + 30));
    google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>((std::string *)((char *)this + 112), (std::string **)v28, (const CoreML::Specification::FeatureDescription **)(v27 + 8), v26, **((_DWORD **)this + 16) - *((_DWORD *)this + 30));
    signed int v29 = *((_DWORD *)this + 30) + v26;
    *((_DWORD *)this + 3CoreML::Specification::Pipeline::New(this, 0) = v29;
    BOOL v30 = (signed int *)*((void *)this + 16);
    if (*v30 < v29) {
      *BOOL v30 = v29;
    }
  }
  *((_DWORD *)this + 42) = 0;
  uint64_t v31 = *((void *)a2 + 1);
  if (v31) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v4, v31 & 0xFFFFFFFFFFFFFFFELL);
  }
  *((void *)this + 17) = &google::protobuf::internal::fixed_address_empty_string;
  uint64_t v32 = *((void *)a2 + 17);
  if (*(char *)(v32 + 23) < 0) {
    uint64_t v33 = *(void *)(v32 + 8);
  }
  else {
    uint64_t v33 = *(unsigned __int8 *)(v32 + 23);
  }
  if ((long long *)v32 != &google::protobuf::internal::fixed_address_empty_string && v33) {
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
  }
  *((void *)this + 18) = &google::protobuf::internal::fixed_address_empty_string;
  uint64_t v34 = *((void *)a2 + 18);
  if (*(char *)(v34 + 23) < 0) {
    uint64_t v35 = *(void *)(v34 + 8);
  }
  else {
    uint64_t v35 = *(unsigned __int8 *)(v34 + 23);
  }
  if ((long long *)v34 != &google::protobuf::internal::fixed_address_empty_string && v35) {
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
  }
  *((void *)this + 19) = &google::protobuf::internal::fixed_address_empty_string;
  uint64_t v36 = *((void *)a2 + 19);
  if (*(char *)(v36 + 23) < 0) {
    uint64_t v37 = *(void *)(v36 + 8);
  }
  else {
    uint64_t v37 = *(unsigned __int8 *)(v36 + 23);
  }
  if ((long long *)v36 != &google::protobuf::internal::fixed_address_empty_string && v37) {
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
  }
  if (a2 != (const CoreML::Specification::ModelDescription *)&CoreML::Specification::_ModelDescription_default_instance_
    && *((void *)a2 + 20))
  {
    operator new();
  }
  *((void *)this + 2CoreML::Specification::Pipeline::New(this, 0) = 0;
  return this;
}

void sub_19EADEB10(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v7, 0x10A1C40FB0D5B10);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>(v6);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>(v5);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>(v4);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>(v3);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

CoreML::Specification::Model *CoreML::Specification::Model::Model(CoreML::Specification::Model *this, const CoreML::Specification::Model *a2)
{
  *(void *)this = &unk_1EF0D9528;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 1CoreML::Specification::Pipeline::New(this, 0) = 0;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((unint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  if (a2 != (const CoreML::Specification::Model *)&CoreML::Specification::_Model_default_instance_
    && *((void *)a2 + 2) != 0)
  {
    operator new();
  }
  *((void *)this + 2) = 0;
  int v6 = *((_DWORD *)a2 + 6);
  *((unsigned char *)this + 28) = *((unsigned char *)a2 + 28);
  *((_DWORD *)this + 6) = v6;
  *((_DWORD *)this + 11) = 0;
  int v7 = *((_DWORD *)a2 + 11);
  if (v7 <= 559)
  {
    if (v7 <= 399)
    {
      if (v7 <= 299)
      {
        switch(v7)
        {
          case 200:
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 200;
            operator new();
          case 201:
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 201;
            operator new();
          case 202:
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 202;
            operator new();
        }
      }
      else
      {
        switch(v7)
        {
          case 300:
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 300;
            operator new();
          case 301:
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 301;
            operator new();
          case 302:
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 302;
            operator new();
          case 303:
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 303;
            operator new();
          case 304:
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 304;
            operator new();
          default:
            return this;
        }
      }
    }
    else if (v7 > 499)
    {
      if (v7 <= 501)
      {
        if (v7 != 500)
        {
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 501;
          operator new();
        }
        CoreML::Specification::Model::clear_Type((uint64_t)this);
        *((_DWORD *)this + 11) = 500;
        operator new();
      }
      switch(v7)
      {
        case 502:
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 502;
          operator new();
        case 555:
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 555;
          operator new();
        case 556:
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 556;
          operator new();
      }
    }
    else
    {
      switch(v7)
      {
        case 400:
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 400;
          operator new();
        case 401:
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 401;
          operator new();
        case 402:
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 402;
          operator new();
        case 403:
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 403;
          operator new();
        case 404:
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 404;
          operator new();
        default:
          return this;
      }
    }
  }
  else if (v7 > 899)
  {
    switch(v7)
    {
      case 2000:
        CoreML::Specification::Model::clear_Type((uint64_t)this);
        *((_DWORD *)this + 11) = 2000;
        operator new();
      case 2001:
        CoreML::Specification::Model::clear_Type((uint64_t)this);
        *((_DWORD *)this + 11) = 2001;
        operator new();
      case 2002:
        CoreML::Specification::Model::clear_Type((uint64_t)this);
        *((_DWORD *)this + 11) = 2002;
        operator new();
      case 2003:
        CoreML::Specification::Model::clear_Type((uint64_t)this);
        *((_DWORD *)this + 11) = 2003;
        operator new();
      case 2004:
        CoreML::Specification::Model::clear_Type((uint64_t)this);
        *((_DWORD *)this + 11) = 2004;
        operator new();
      case 2005:
        CoreML::Specification::Model::clear_Type((uint64_t)this);
        *((_DWORD *)this + 11) = 2005;
        operator new();
      case 2006:
        CoreML::Specification::Model::clear_Type((uint64_t)this);
        *((_DWORD *)this + 11) = 2006;
        operator new();
      default:
        if (v7 == 900)
        {
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 900;
          operator new();
        }
        if (v7 == 3000)
        {
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 3000;
          operator new();
        }
        return result;
    }
  }
  else
  {
    switch(v7)
    {
      case 600:
        CoreML::Specification::Model::clear_Type((uint64_t)this);
        *((_DWORD *)this + 11) = 600;
        operator new();
      case 601:
        CoreML::Specification::Model::clear_Type((uint64_t)this);
        *((_DWORD *)this + 11) = 601;
        operator new();
      case 602:
        CoreML::Specification::Model::clear_Type((uint64_t)this);
        *((_DWORD *)this + 11) = 602;
        operator new();
      case 603:
        CoreML::Specification::Model::clear_Type((uint64_t)this);
        *((_DWORD *)this + 11) = 603;
        operator new();
      case 604:
        CoreML::Specification::Model::clear_Type((uint64_t)this);
        *((_DWORD *)this + 11) = 604;
        operator new();
      case 605:
      case 608:
        return this;
      case 606:
        CoreML::Specification::Model::clear_Type((uint64_t)this);
        *((_DWORD *)this + 11) = 606;
        operator new();
      case 607:
        CoreML::Specification::Model::clear_Type((uint64_t)this);
        *((_DWORD *)this + 11) = 607;
        operator new();
      case 609:
        CoreML::Specification::Model::clear_Type((uint64_t)this);
        *((_DWORD *)this + 11) = 609;
        operator new();
      case 610:
        CoreML::Specification::Model::clear_Type((uint64_t)this);
        *((_DWORD *)this + 11) = 610;
        operator new();
      default:
        if (v7 == 560)
        {
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 560;
          operator new();
        }
        return result;
    }
  }
  return this;
}

void sub_19EADFBAC(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v2, 0x10A1C40280AC348);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::NeuralNetworkSpecValidator::validateConvolutionLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2, uint64_t a3)
{
  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 2);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0) {
      operator delete(this[1]);
    }
    CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0) {
        operator delete(this[1]);
      }
      if (*(unsigned char *)a2)
      {
        std::string::basic_string[abi:ne180100]<0>(v160, "Convolution");
        int v7 = (char *)a2 + 32;
        CoreML::validateInputOutputRankEquality((CoreML::Result *)this, (void *)a3, (uint64_t)v160, (uint64_t)v7);
        if (v161 < 0) {
          operator delete(v160[0]);
        }
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
          return;
        }
        if (*((char *)this + 31) < 0) {
          operator delete(this[1]);
        }
        std::string::basic_string[abi:ne180100]<0>(&v158, "Convolution");
        CoreML::validateRankCount((uint64_t)this, (void *)a3, (uint64_t)&v158, 4, -1, (uint64_t)v7);
        if (SHIBYTE(v159) < 0) {
          operator delete((void *)v158);
        }
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
          return;
        }
        if (*((char *)this + 31) < 0) {
          operator delete(this[1]);
        }
      }
      else if (*(_DWORD *)(a3 + 24) != 1)
      {
        std::operator+<char>();
        signed int v9 = std::string::append(&v157, "' does not support weight as input tensor when RANK5_ARRAY_MAPPING == true.");
        long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
        std::string::size_type v159 = v9->__r_.__value_.__r.__words[2];
        long long v158 = v10;
        v9->__r_.__value_.__l.__size_ = 0;
        v9->__r_.__value_.__r.__words[2] = 0;
        v9->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v157.__r_.__value_.__l.__data_);
        }
        goto LABEL_37;
      }
      if (*(_DWORD *)(a3 + 140) == 100)
      {
        BOOL v8 = *(uint64_t **)(a3 + 128);
      }
      else
      {
        inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
        BOOL v8 = &CoreML::Specification::_ConvolutionLayerParams_default_instance_;
      }
      if (!*((_DWORD *)v8 + 43))
      {
        std::operator+<char>();
        uint64_t v12 = std::string::append(&v157, "' is not set.");
        long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
        std::string::size_type v159 = v12->__r_.__value_.__r.__words[2];
        long long v158 = v13;
        v12->__r_.__value_.__l.__size_ = 0;
        v12->__r_.__value_.__r.__words[2] = 0;
        v12->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v157.__r_.__value_.__l.__data_);
        }
        goto LABEL_37;
      }
      if (*(_DWORD *)(a3 + 140) == 100)
      {
        unsigned int v11 = *(uint64_t **)(a3 + 128);
      }
      else
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
        unsigned int v11 = &CoreML::Specification::_ConvolutionLayerParams_default_instance_;
      }
      int v14 = *((unsigned __int8 *)v11 + 152);
      int v15 = *(_DWORD *)(a3 + 24);
      if (*((unsigned char *)v11 + 152) && v15 != 1)
      {
        std::operator+<char>();
        unsigned int v16 = std::string::append(&v157, "' does not support weight as input tensor.");
        long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
        std::string::size_type v159 = v16->__r_.__value_.__r.__words[2];
        long long v158 = v17;
        v16->__r_.__value_.__l.__size_ = 0;
        v16->__r_.__value_.__r.__words[2] = 0;
        v16->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v157.__r_.__value_.__l.__data_);
        }
LABEL_37:
        *this = (void *)13;
        std::operator+<char>();
LABEL_38:
        if ((SHIBYTE(v159) & 0x80000000) == 0) {
          return;
        }
        signed int v18 = (void *)v158;
        goto LABEL_40;
      }
      if (v15 != 1)
      {
        int v19 = *((_DWORD *)v11 + 16);
        if (v19 >= 1)
        {
          uint64_t v20 = v11[9];
          if (*(void *)(v20 + 8) > 1uLL || v19 >= 2 && *(void *)(v20 + 16) >= 2uLL)
          {
            std::operator+<char>();
            unsigned int v21 = std::string::append(&v157, "' , dilated convolution does not support weight as input tensor.");
            long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
            std::string::size_type v159 = v21->__r_.__value_.__r.__words[2];
            long long v158 = v22;
            v21->__r_.__value_.__l.__size_ = 0;
            v21->__r_.__value_.__r.__words[2] = 0;
            v21->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v157.__r_.__value_.__l.__data_);
            }
            goto LABEL_37;
          }
        }
      }
      if ((unint64_t)v11[18] <= 1) {
        unint64_t v23 = 1;
      }
      else {
        unint64_t v23 = v11[18];
      }
      int v24 = *((_DWORD *)v11 + 4);
      if (v24 < 1)
      {
        unint64_t v26 = 3;
      }
      else
      {
        uint64_t v25 = v11[3];
        unint64_t v26 = *(void *)(v25 + 8);
        if (v24 != 1)
        {
          uint64_t v27 = *(void *)(v25 + 16);
          goto LABEL_57;
        }
      }
      uint64_t v27 = 3;
LABEL_57:
      if (v15 > 1) {
        goto LABEL_58;
      }
      int v28 = *((unsigned __int8 *)v11 + 153);
      if (v15 != 1 && *((unsigned char *)v11 + 153))
      {
        std::operator+<char>();
        signed int v29 = std::string::append(&v157, "' with dynamic weight does not support static bias.");
        long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
        std::string::size_type v159 = v29->__r_.__value_.__r.__words[2];
        long long v158 = v30;
        v29->__r_.__value_.__l.__size_ = 0;
        v29->__r_.__value_.__r.__words[2] = 0;
        v29->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v157.__r_.__value_.__l.__data_);
        }
        goto LABEL_37;
      }
      unint64_t __val = v11[17];
      unint64_t v141 = v11[16];
      unint64_t v139 = v27;
      if (v11[14]) {
        uint64_t v31 = (uint64_t *)v11[14];
      }
      else {
        uint64_t v31 = &CoreML::Specification::_WeightParams_default_instance_;
      }
      unsigned int v32 = CoreML::valueType(v31);
      if (v11[15]) {
        uint64_t v33 = (uint64_t *)v11[15];
      }
      else {
        uint64_t v33 = &CoreML::Specification::_WeightParams_default_instance_;
      }
      unsigned int v34 = CoreML::valueType(v33);
      if (v28) {
        BOOL v35 = v34 == 4;
      }
      else {
        BOOL v35 = 0;
      }
      int v36 = v35;
      if (v32 == 4 || v36)
      {
        std::operator+<char>();
        uint64_t v39 = std::string::append(&v157, "'  has invalid weights/bias fields.");
        long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
        std::string::size_type v159 = v39->__r_.__value_.__r.__words[2];
        long long v158 = v40;
        v39->__r_.__value_.__l.__size_ = 0;
        v39->__r_.__value_.__r.__words[2] = 0;
        v39->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v157.__r_.__value_.__l.__data_);
        }
        goto LABEL_37;
      }
      if (v28 && (v32 == 1 && !v34 || !v32 && v34 == 1))
      {
        std::operator+<char>();
        uint64_t v37 = std::string::append(&v157, "has unmatched precisions of weights/bias They should either be half or full precision.");
        long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
        std::string::size_type v159 = v37->__r_.__value_.__r.__words[2];
        long long v158 = v38;
        v37->__r_.__value_.__l.__size_ = 0;
        v37->__r_.__value_.__r.__words[2] = 0;
        v37->__r_.__value_.__r.__words[0] = 0;
        *this = (void *)13;
        std::operator+<char>();
LABEL_102:
        if (SHIBYTE(v159) < 0) {
          operator delete((void *)v158);
        }
        if ((SHIBYTE(v157.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          return;
        }
        signed int v18 = (void *)v157.__r_.__value_.__r.__words[0];
LABEL_40:
        operator delete(v18);
        return;
      }
      unint64_t v41 = v141;
      if (v14) {
        unint64_t v41 = v141 / v23;
      }
      unint64_t v42 = v41 * __val;
      unint64_t v43 = v139 * v26 * v42;
      if (v32 > 1)
      {
        if (v32 != 2)
        {
          std::operator+<char>();
          unint64_t v49 = std::string::append(&v157, "has not specified weights.");
          long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
          std::string::size_type v159 = v49->__r_.__value_.__r.__words[2];
          long long v158 = v50;
          v49->__r_.__value_.__l.__size_ = 0;
          v49->__r_.__value_.__r.__words[2] = 0;
          v49->__r_.__value_.__r.__words[0] = 0;
          *this = (void *)13;
          std::operator+<char>();
          goto LABEL_102;
        }
        unint64_t v46 = v139 * v26 * v42;
        unsigned int v47 = v34;
        std::string::basic_string[abi:ne180100]<0>(&v158, "Convolution");
        uint64_t v48 = *(void *)(a3 + 112);
        std::string::basic_string[abi:ne180100]<0>(&v157, "weight");
        CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v31, v46, v141, (const void **)&v158, v48, (uint64_t)&v157);
        if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v157.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v159) < 0) {
          operator delete((void *)v158);
        }
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
          return;
        }
        unsigned int v34 = v47;
        if (*((char *)this + 31) < 0)
        {
          operator delete(this[1]);
          unsigned int v34 = v47;
        }
      }
      else
      {
        if (v32)
        {
          uint64_t v44 = v31[5];
          if (*(char *)(v44 + 23) < 0) {
            unint64_t v45 = *(void *)(v44 + 8);
          }
          else {
            unint64_t v45 = *(unsigned __int8 *)(v44 + 23);
          }
          unint64_t v51 = v45 >> 1;
        }
        else
        {
          unint64_t v51 = *((int *)v31 + 4);
        }
        if (v51 != v43)
        {
          if (v14)
          {
            std::operator+<char>();
            uint64_t v55 = std::string::append(&v147, "' has weight matrix of size ");
            long long v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
            v148.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v56;
            v55->__r_.__value_.__l.__size_ = 0;
            v55->__r_.__value_.__r.__words[2] = 0;
            v55->__r_.__value_.__r.__words[0] = 0;
            std::to_string(&v146, v51);
            if ((v146.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v57 = &v146;
            }
            else {
              uint64_t v57 = (std::string *)v146.__r_.__value_.__r.__words[0];
            }
            if ((v146.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type size = HIBYTE(v146.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type size = v146.__r_.__value_.__l.__size_;
            }
            BOOL v59 = std::string::append(&v148, (const std::string::value_type *)v57, size);
            long long v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
            v149.__r_.__value_.__r.__words[2] = v59->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v60;
            v59->__r_.__value_.__l.__size_ = 0;
            v59->__r_.__value_.__r.__words[2] = 0;
            v59->__r_.__value_.__r.__words[0] = 0;
            uint64_t v61 = std::string::append(&v149, " to encode a ");
            long long v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
            v150.__r_.__value_.__r.__words[2] = v61->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v150.__r_.__value_.__l.__data_ = v62;
            v61->__r_.__value_.__l.__size_ = 0;
            v61->__r_.__value_.__r.__words[2] = 0;
            v61->__r_.__value_.__r.__words[0] = 0;
            std::to_string(&v145, __val);
            if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              long long v63 = &v145;
            }
            else {
              long long v63 = (std::string *)v145.__r_.__value_.__r.__words[0];
            }
            if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v64 = HIBYTE(v145.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v64 = v145.__r_.__value_.__l.__size_;
            }
            uint64_t v65 = std::string::append(&v150, (const std::string::value_type *)v63, v64);
            long long v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
            v151.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v151.__r_.__value_.__l.__data_ = v66;
            v65->__r_.__value_.__l.__size_ = 0;
            v65->__r_.__value_.__r.__words[2] = 0;
            v65->__r_.__value_.__r.__words[0] = 0;
            uint64_t v67 = std::string::append(&v151, " × ");
            long long v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
            v152.__r_.__value_.__r.__words[2] = v67->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v152.__r_.__value_.__l.__data_ = v68;
            v67->__r_.__value_.__l.__size_ = 0;
            v67->__r_.__value_.__r.__words[2] = 0;
            v67->__r_.__value_.__r.__words[0] = 0;
            std::to_string(&v144, v141 / v23);
            if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v69 = &v144;
            }
            else {
              uint64_t v69 = (std::string *)v144.__r_.__value_.__r.__words[0];
            }
            if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v70 = HIBYTE(v144.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v70 = v144.__r_.__value_.__l.__size_;
            }
            uint64_t v71 = std::string::append(&v152, (const std::string::value_type *)v69, v70);
            long long v72 = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
            v153.__r_.__value_.__r.__words[2] = v71->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v153.__r_.__value_.__l.__data_ = v72;
            v71->__r_.__value_.__l.__size_ = 0;
            v71->__r_.__value_.__r.__words[2] = 0;
            v71->__r_.__value_.__r.__words[0] = 0;
            int v73 = std::string::append(&v153, " × ");
            long long v74 = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
            v154.__r_.__value_.__r.__words[2] = v73->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v74;
            v73->__r_.__value_.__l.__size_ = 0;
            v73->__r_.__value_.__r.__words[2] = 0;
            v73->__r_.__value_.__r.__words[0] = 0;
            std::to_string(&v143, v26);
            if ((v143.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v75 = &v143;
            }
            else {
              uint64_t v75 = (std::string *)v143.__r_.__value_.__r.__words[0];
            }
            if ((v143.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v76 = HIBYTE(v143.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v76 = v143.__r_.__value_.__l.__size_;
            }
            uint64_t v77 = std::string::append(&v154, (const std::string::value_type *)v75, v76);
            long long v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
            v155.__r_.__value_.__r.__words[2] = v77->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v155.__r_.__value_.__l.__data_ = v78;
            v77->__r_.__value_.__l.__size_ = 0;
            v77->__r_.__value_.__r.__words[2] = 0;
            v77->__r_.__value_.__r.__words[0] = 0;
            uint64_t v79 = std::string::append(&v155, " × ");
            long long v80 = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
            v156.__r_.__value_.__r.__words[2] = v79->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v156.__r_.__value_.__l.__data_ = v80;
            v79->__r_.__value_.__l.__size_ = 0;
            v79->__r_.__value_.__r.__words[2] = 0;
            v79->__r_.__value_.__r.__words[0] = 0;
            std::to_string(&v142, v139);
            if ((v142.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              char v81 = &v142;
            }
            else {
              char v81 = (std::string *)v142.__r_.__value_.__r.__words[0];
            }
            if ((v142.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v82 = HIBYTE(v142.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v82 = v142.__r_.__value_.__l.__size_;
            }
            uint64_t v83 = std::string::append(&v156, (const std::string::value_type *)v81, v82);
            long long v84 = *(_OWORD *)&v83->__r_.__value_.__l.__data_;
            v157.__r_.__value_.__r.__words[2] = v83->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v157.__r_.__value_.__l.__data_ = v84;
            v83->__r_.__value_.__l.__size_ = 0;
            v83->__r_.__value_.__r.__words[2] = 0;
            v83->__r_.__value_.__r.__words[0] = 0;
            BOOL v85 = std::string::append(&v157, " convolution.");
            long long v86 = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
            std::string::size_type v159 = v85->__r_.__value_.__r.__words[2];
            long long v158 = v86;
            v85->__r_.__value_.__l.__size_ = 0;
            v85->__r_.__value_.__r.__words[2] = 0;
            v85->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v157.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v142.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v156.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v155.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v143.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v154.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v153.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v144.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v152.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v151.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v145.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v150.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v149.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v146.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v148.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v147.__r_.__value_.__l.__data_);
            }
          }
          else
          {
            std::operator+<char>();
            uint64_t v90 = std::string::append(&v147, "' has weight matrix of size ");
            long long v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
            v148.__r_.__value_.__r.__words[2] = v90->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v91;
            v90->__r_.__value_.__l.__size_ = 0;
            v90->__r_.__value_.__r.__words[2] = 0;
            v90->__r_.__value_.__r.__words[0] = 0;
            std::to_string(&v146, v51);
            if ((v146.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              int v92 = &v146;
            }
            else {
              int v92 = (std::string *)v146.__r_.__value_.__r.__words[0];
            }
            if ((v146.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v93 = HIBYTE(v146.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v93 = v146.__r_.__value_.__l.__size_;
            }
            int v94 = std::string::append(&v148, (const std::string::value_type *)v92, v93);
            long long v95 = *(_OWORD *)&v94->__r_.__value_.__l.__data_;
            v149.__r_.__value_.__r.__words[2] = v94->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v95;
            v94->__r_.__value_.__l.__size_ = 0;
            v94->__r_.__value_.__r.__words[2] = 0;
            v94->__r_.__value_.__r.__words[0] = 0;
            int64_t v96 = std::string::append(&v149, " to encode a ");
            long long v97 = *(_OWORD *)&v96->__r_.__value_.__l.__data_;
            v150.__r_.__value_.__r.__words[2] = v96->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v150.__r_.__value_.__l.__data_ = v97;
            v96->__r_.__value_.__l.__size_ = 0;
            v96->__r_.__value_.__r.__words[2] = 0;
            v96->__r_.__value_.__r.__words[0] = 0;
            std::to_string(&v145, v141);
            if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              int v98 = &v145;
            }
            else {
              int v98 = (std::string *)v145.__r_.__value_.__r.__words[0];
            }
            if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v99 = HIBYTE(v145.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v99 = v145.__r_.__value_.__l.__size_;
            }
            int v100 = std::string::append(&v150, (const std::string::value_type *)v98, v99);
            long long v101 = *(_OWORD *)&v100->__r_.__value_.__l.__data_;
            v151.__r_.__value_.__r.__words[2] = v100->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v151.__r_.__value_.__l.__data_ = v101;
            v100->__r_.__value_.__l.__size_ = 0;
            v100->__r_.__value_.__r.__words[2] = 0;
            v100->__r_.__value_.__r.__words[0] = 0;
            int v102 = std::string::append(&v151, " × ");
            long long v103 = *(_OWORD *)&v102->__r_.__value_.__l.__data_;
            v152.__r_.__value_.__r.__words[2] = v102->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v152.__r_.__value_.__l.__data_ = v103;
            v102->__r_.__value_.__l.__size_ = 0;
            v102->__r_.__value_.__r.__words[2] = 0;
            v102->__r_.__value_.__r.__words[0] = 0;
            std::to_string(&v144, __val);
            if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              int v104 = &v144;
            }
            else {
              int v104 = (std::string *)v144.__r_.__value_.__r.__words[0];
            }
            if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v105 = HIBYTE(v144.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v105 = v144.__r_.__value_.__l.__size_;
            }
            int v106 = std::string::append(&v152, (const std::string::value_type *)v104, v105);
            long long v107 = *(_OWORD *)&v106->__r_.__value_.__l.__data_;
            v153.__r_.__value_.__r.__words[2] = v106->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v153.__r_.__value_.__l.__data_ = v107;
            v106->__r_.__value_.__l.__size_ = 0;
            v106->__r_.__value_.__r.__words[2] = 0;
            v106->__r_.__value_.__r.__words[0] = 0;
            int v108 = std::string::append(&v153, " × ");
            long long v109 = *(_OWORD *)&v108->__r_.__value_.__l.__data_;
            v154.__r_.__value_.__r.__words[2] = v108->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v109;
            v108->__r_.__value_.__l.__size_ = 0;
            v108->__r_.__value_.__r.__words[2] = 0;
            v108->__r_.__value_.__r.__words[0] = 0;
            std::to_string(&v143, v26);
            if ((v143.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              int v110 = &v143;
            }
            else {
              int v110 = (std::string *)v143.__r_.__value_.__r.__words[0];
            }
            if ((v143.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v111 = HIBYTE(v143.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v111 = v143.__r_.__value_.__l.__size_;
            }
            int v112 = std::string::append(&v154, (const std::string::value_type *)v110, v111);
            long long v113 = *(_OWORD *)&v112->__r_.__value_.__l.__data_;
            v155.__r_.__value_.__r.__words[2] = v112->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v155.__r_.__value_.__l.__data_ = v113;
            v112->__r_.__value_.__l.__size_ = 0;
            v112->__r_.__value_.__r.__words[2] = 0;
            v112->__r_.__value_.__r.__words[0] = 0;
            int v114 = std::string::append(&v155, " × ");
            long long v115 = *(_OWORD *)&v114->__r_.__value_.__l.__data_;
            v156.__r_.__value_.__r.__words[2] = v114->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v156.__r_.__value_.__l.__data_ = v115;
            v114->__r_.__value_.__l.__size_ = 0;
            v114->__r_.__value_.__r.__words[2] = 0;
            v114->__r_.__value_.__r.__words[0] = 0;
            std::to_string(&v142, v139);
            if ((v142.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              int v116 = &v142;
            }
            else {
              int v116 = (std::string *)v142.__r_.__value_.__r.__words[0];
            }
            if ((v142.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v117 = HIBYTE(v142.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v117 = v142.__r_.__value_.__l.__size_;
            }
            int v118 = std::string::append(&v156, (const std::string::value_type *)v116, v117);
            long long v119 = *(_OWORD *)&v118->__r_.__value_.__l.__data_;
            v157.__r_.__value_.__r.__words[2] = v118->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v157.__r_.__value_.__l.__data_ = v119;
            v118->__r_.__value_.__l.__size_ = 0;
            v118->__r_.__value_.__r.__words[2] = 0;
            v118->__r_.__value_.__r.__words[0] = 0;
            int v120 = std::string::append(&v157, " convolution.");
            long long v121 = *(_OWORD *)&v120->__r_.__value_.__l.__data_;
            std::string::size_type v159 = v120->__r_.__value_.__r.__words[2];
            long long v158 = v121;
            v120->__r_.__value_.__l.__size_ = 0;
            v120->__r_.__value_.__r.__words[2] = 0;
            v120->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v157.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v142.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v156.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v155.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v143.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v154.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v153.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v144.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v152.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v151.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v145.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v150.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v149.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v146.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v148.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v147.__r_.__value_.__l.__data_);
            }
          }
          *this = (void *)13;
          std::operator+<char>();
          goto LABEL_38;
        }
      }
      if (!v28) {
        goto LABEL_58;
      }
      if (v34 > 1)
      {
        if (v34 != 2)
        {
          std::operator+<char>();
          int v122 = std::string::append(&v157, "has not specified bias.");
          long long v123 = *(_OWORD *)&v122->__r_.__value_.__l.__data_;
          std::string::size_type v159 = v122->__r_.__value_.__r.__words[2];
          long long v158 = v123;
          v122->__r_.__value_.__l.__size_ = 0;
          v122->__r_.__value_.__r.__words[2] = 0;
          v122->__r_.__value_.__r.__words[0] = 0;
          *this = (void *)13;
          std::operator+<char>();
          goto LABEL_102;
        }
        std::string v87 = (uint64_t *)v11[15];
        std::string::basic_string[abi:ne180100]<0>(&v158, "Convolution");
        uint64_t v88 = *(void *)(a3 + 112);
        std::string::basic_string[abi:ne180100]<0>(&v157, "bias");
        if (v87) {
          std::string v89 = v87;
        }
        else {
          std::string v89 = &CoreML::Specification::_WeightParams_default_instance_;
        }
        CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v89, v141, 1, (const void **)&v158, v88, (uint64_t)&v157);
        if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v157.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v159) < 0) {
          operator delete((void *)v158);
        }
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
          return;
        }
        if (*((char *)this + 31) < 0) {
          operator delete(this[1]);
        }
      }
      else
      {
        int64_t v52 = (uint64_t *)v11[15];
        if (!v52) {
          int64_t v52 = &CoreML::Specification::_WeightParams_default_instance_;
        }
        if (v34)
        {
          uint64_t v53 = v52[5];
          if (*(char *)(v53 + 23) < 0) {
            unint64_t v54 = *(void *)(v53 + 8);
          }
          else {
            unint64_t v54 = *(unsigned __int8 *)(v53 + 23);
          }
          unint64_t v124 = v54 >> 1;
        }
        else
        {
          unint64_t v124 = *((int *)v52 + 4);
        }
        if (v124 != v141)
        {
          std::operator+<char>();
          unsigned int v125 = std::string::append(&v153, "' has a bias vector of size ");
          long long v126 = *(_OWORD *)&v125->__r_.__value_.__l.__data_;
          v154.__r_.__value_.__r.__words[2] = v125->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v126;
          v125->__r_.__value_.__l.__size_ = 0;
          v125->__r_.__value_.__r.__words[2] = 0;
          v125->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v152, v124);
          if ((v152.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v127 = &v152;
          }
          else {
            v127 = (std::string *)v152.__r_.__value_.__r.__words[0];
          }
          if ((v152.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v128 = HIBYTE(v152.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v128 = v152.__r_.__value_.__l.__size_;
          }
          v129 = std::string::append(&v154, (const std::string::value_type *)v127, v128);
          long long v130 = *(_OWORD *)&v129->__r_.__value_.__l.__data_;
          v155.__r_.__value_.__r.__words[2] = v129->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v155.__r_.__value_.__l.__data_ = v130;
          v129->__r_.__value_.__l.__size_ = 0;
          v129->__r_.__value_.__r.__words[2] = 0;
          v129->__r_.__value_.__r.__words[0] = 0;
          v131 = std::string::append(&v155, " but should be ");
          long long v132 = *(_OWORD *)&v131->__r_.__value_.__l.__data_;
          v156.__r_.__value_.__r.__words[2] = v131->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v156.__r_.__value_.__l.__data_ = v132;
          v131->__r_.__value_.__l.__size_ = 0;
          v131->__r_.__value_.__r.__words[2] = 0;
          v131->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v151, v141);
          if ((v151.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v133 = &v151;
          }
          else {
            v133 = (std::string *)v151.__r_.__value_.__r.__words[0];
          }
          if ((v151.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v134 = HIBYTE(v151.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v134 = v151.__r_.__value_.__l.__size_;
          }
          v135 = std::string::append(&v156, (const std::string::value_type *)v133, v134);
          long long v136 = *(_OWORD *)&v135->__r_.__value_.__l.__data_;
          v157.__r_.__value_.__r.__words[2] = v135->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v157.__r_.__value_.__l.__data_ = v136;
          v135->__r_.__value_.__l.__size_ = 0;
          v135->__r_.__value_.__r.__words[2] = 0;
          v135->__r_.__value_.__r.__words[0] = 0;
          v137 = std::string::append(&v157, ".");
          long long v138 = *(_OWORD *)&v137->__r_.__value_.__l.__data_;
          std::string::size_type v159 = v137->__r_.__value_.__r.__words[2];
          long long v158 = v138;
          v137->__r_.__value_.__l.__size_ = 0;
          v137->__r_.__value_.__r.__words[2] = 0;
          v137->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v157.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v151.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v156.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v155.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v152.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v154.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v153.__r_.__value_.__l.__data_);
          }
          *this = (void *)13;
          std::operator+<char>();
          goto LABEL_38;
        }
      }
LABEL_58:
      CoreML::Result::Result((CoreML::Result *)this);
    }
  }
}

void sub_19EAE1018(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 121) < 0) {
    operator delete(*(void **)(v1 - 144));
  }
  _Unwind_Resume(a1);
}

void CoreML::validateInputCount(CoreML *this, const CoreML::Specification::NeuralNetworkLayer *a2, int a3, int a4)
{
  v82[2] = *MEMORY[0x1E4F143B8];
  long long v80 = 0;
  long long v81 = 0uLL;
  if (a4 >= 1 && a4 == a3 && *((_DWORD *)a2 + 6) != a4)
  {
    uint64_t v12 = (long long *)*((void *)a2 + 14);
    if (*((char *)v12 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v72, *(const std::string::value_type **)v12, *((void *)v12 + 1));
    }
    else
    {
      long long v13 = *v12;
      v72.__r_.__value_.__r.__words[2] = *((void *)v12 + 2);
      *(_OWORD *)&v72.__r_.__value_.__l.__data_ = v13;
    }
    int v14 = std::string::insert(&v72, 0, "Layer '");
    long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v73.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v73.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    unsigned int v16 = std::string::append(&v73, "' of type ");
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v74.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v74.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v71, *((_DWORD *)a2 + 35));
    if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      signed int v18 = &v71;
    }
    else {
      signed int v18 = (std::string *)v71.__r_.__value_.__r.__words[0];
    }
    if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v71.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v71.__r_.__value_.__l.__size_;
    }
    uint64_t v20 = std::string::append(&v74, (const std::string::value_type *)v18, size);
    long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v75.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    long long v22 = std::string::append(&v75, " has ");
    long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v76.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v76.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v70, *((_DWORD *)a2 + 6));
    if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v24 = &v70;
    }
    else {
      int v24 = (std::string *)v70.__r_.__value_.__r.__words[0];
    }
    if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v25 = HIBYTE(v70.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v25 = v70.__r_.__value_.__l.__size_;
    }
    unint64_t v26 = std::string::append(&v76, (const std::string::value_type *)v24, v25);
    long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    v77.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    int v28 = std::string::append(&v77, " inputs but expects exactly ");
    long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v78.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v69, a4);
    if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v30 = &v69;
    }
    else {
      long long v30 = (std::string *)v69.__r_.__value_.__r.__words[0];
    }
    if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v31 = HIBYTE(v69.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v31 = v69.__r_.__value_.__l.__size_;
    }
  }
  else if (a3 < 1 || *((_DWORD *)a2 + 6) >= a3)
  {
    if (a4 < 1 || *((_DWORD *)a2 + 6) <= a4)
    {
      CoreML::Result::Result(this);
      return;
    }
    long long v10 = (long long *)*((void *)a2 + 14);
    if (*((char *)v10 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v72, *(const std::string::value_type **)v10, *((void *)v10 + 1));
    }
    else
    {
      long long v11 = *v10;
      v72.__r_.__value_.__r.__words[2] = *((void *)v10 + 2);
      *(_OWORD *)&v72.__r_.__value_.__l.__data_ = v11;
    }
    uint64_t v48 = std::string::insert(&v72, 0, "Layer '");
    long long v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
    v73.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v73.__r_.__value_.__l.__data_ = v49;
    v48->__r_.__value_.__l.__size_ = 0;
    v48->__r_.__value_.__r.__words[2] = 0;
    v48->__r_.__value_.__r.__words[0] = 0;
    long long v50 = std::string::append(&v73, "' of type ");
    long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
    v74.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v74.__r_.__value_.__l.__data_ = v51;
    v50->__r_.__value_.__l.__size_ = 0;
    v50->__r_.__value_.__r.__words[2] = 0;
    v50->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v71, *((_DWORD *)a2 + 35));
    if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int64_t v52 = &v71;
    }
    else {
      int64_t v52 = (std::string *)v71.__r_.__value_.__r.__words[0];
    }
    if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v53 = HIBYTE(v71.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v53 = v71.__r_.__value_.__l.__size_;
    }
    unint64_t v54 = std::string::append(&v74, (const std::string::value_type *)v52, v53);
    long long v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
    v75.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v55;
    v54->__r_.__value_.__l.__size_ = 0;
    v54->__r_.__value_.__r.__words[2] = 0;
    v54->__r_.__value_.__r.__words[0] = 0;
    long long v56 = std::string::append(&v75, " has ");
    long long v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
    v76.__r_.__value_.__r.__words[2] = v56->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v76.__r_.__value_.__l.__data_ = v57;
    v56->__r_.__value_.__l.__size_ = 0;
    v56->__r_.__value_.__r.__words[2] = 0;
    v56->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v70, *((_DWORD *)a2 + 6));
    if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v58 = &v70;
    }
    else {
      uint64_t v58 = (std::string *)v70.__r_.__value_.__r.__words[0];
    }
    if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v59 = HIBYTE(v70.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v59 = v70.__r_.__value_.__l.__size_;
    }
    long long v60 = std::string::append(&v76, (const std::string::value_type *)v58, v59);
    long long v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
    v77.__r_.__value_.__r.__words[2] = v60->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v61;
    v60->__r_.__value_.__l.__size_ = 0;
    v60->__r_.__value_.__r.__words[2] = 0;
    v60->__r_.__value_.__r.__words[0] = 0;
    long long v62 = std::string::append(&v77, " inputs but expects at most ");
    long long v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
    v78.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v63;
    v62->__r_.__value_.__l.__size_ = 0;
    v62->__r_.__value_.__r.__words[2] = 0;
    v62->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v69, a4);
    if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v30 = &v69;
    }
    else {
      long long v30 = (std::string *)v69.__r_.__value_.__r.__words[0];
    }
    if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v31 = HIBYTE(v69.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v31 = v69.__r_.__value_.__l.__size_;
    }
  }
  else
  {
    BOOL v8 = (long long *)*((void *)a2 + 14);
    if (*((char *)v8 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v72, *(const std::string::value_type **)v8, *((void *)v8 + 1));
    }
    else
    {
      long long v9 = *v8;
      v72.__r_.__value_.__r.__words[2] = *((void *)v8 + 2);
      *(_OWORD *)&v72.__r_.__value_.__l.__data_ = v9;
    }
    unsigned int v32 = std::string::insert(&v72, 0, "Layer '");
    long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v73.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v73.__r_.__value_.__l.__data_ = v33;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    unsigned int v34 = std::string::append(&v73, "' of type ");
    long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
    v74.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v74.__r_.__value_.__l.__data_ = v35;
    v34->__r_.__value_.__l.__size_ = 0;
    v34->__r_.__value_.__r.__words[2] = 0;
    v34->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v71, *((_DWORD *)a2 + 35));
    if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v36 = &v71;
    }
    else {
      int v36 = (std::string *)v71.__r_.__value_.__r.__words[0];
    }
    if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v37 = HIBYTE(v71.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v37 = v71.__r_.__value_.__l.__size_;
    }
    long long v38 = std::string::append(&v74, (const std::string::value_type *)v36, v37);
    long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
    v75.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v39;
    v38->__r_.__value_.__l.__size_ = 0;
    v38->__r_.__value_.__r.__words[2] = 0;
    v38->__r_.__value_.__r.__words[0] = 0;
    long long v40 = std::string::append(&v75, " has ");
    long long v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
    v76.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v76.__r_.__value_.__l.__data_ = v41;
    v40->__r_.__value_.__l.__size_ = 0;
    v40->__r_.__value_.__r.__words[2] = 0;
    v40->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v70, *((_DWORD *)a2 + 6));
    if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v42 = &v70;
    }
    else {
      unint64_t v42 = (std::string *)v70.__r_.__value_.__r.__words[0];
    }
    if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v43 = HIBYTE(v70.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v43 = v70.__r_.__value_.__l.__size_;
    }
    uint64_t v44 = std::string::append(&v76, (const std::string::value_type *)v42, v43);
    long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
    v77.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v45;
    v44->__r_.__value_.__l.__size_ = 0;
    v44->__r_.__value_.__r.__words[2] = 0;
    v44->__r_.__value_.__r.__words[0] = 0;
    unint64_t v46 = std::string::append(&v77, " inputs but expects at least ");
    long long v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
    v78.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v47;
    v46->__r_.__value_.__l.__size_ = 0;
    v46->__r_.__value_.__r.__words[2] = 0;
    v46->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v69, a3);
    if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v30 = &v69;
    }
    else {
      long long v30 = (std::string *)v69.__r_.__value_.__r.__words[0];
    }
    if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v31 = HIBYTE(v69.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v31 = v69.__r_.__value_.__l.__size_;
    }
  }
  std::string::size_type v64 = std::string::append(&v78, (const std::string::value_type *)v30, v31);
  long long v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
  v79.__r_.__value_.__r.__words[2] = v64->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v79.__r_.__value_.__l.__data_ = v65;
  v64->__r_.__value_.__l.__size_ = 0;
  v64->__r_.__value_.__r.__words[2] = 0;
  v64->__r_.__value_.__r.__words[0] = 0;
  long long v66 = std::string::append(&v79, ".");
  uint64_t v67 = (void *)v66->__r_.__value_.__r.__words[0];
  v82[0] = v66->__r_.__value_.__l.__size_;
  *(void *)((char *)v82 + 7) = *(std::string::size_type *)((char *)&v66->__r_.__value_.__r.__words[1] + 7);
  char v68 = HIBYTE(v66->__r_.__value_.__r.__words[2]);
  v66->__r_.__value_.__l.__size_ = 0;
  v66->__r_.__value_.__r.__words[2] = 0;
  v66->__r_.__value_.__r.__words[0] = 0;
  *(void *)((char *)&v81 + 7) = *(void *)((char *)v82 + 7);
  long long v80 = v67;
  *(void *)&long long v81 = v82[0];
  HIBYTE(v81) = v68;
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v79.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v69.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v78.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v77.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v70.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v76.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v75.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v71.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v74.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v73.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v72.__r_.__value_.__l.__data_);
  }
  *(void *)this = 13;
  std::operator+<char>();
  if (SHIBYTE(v81) < 0) {
    operator delete(v80);
  }
}

void sub_19EAE1A50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
}

void sub_19EAE1BC4()
{
  if (*(char *)(v0 - 73) < 0) {
    JUMPOUT(0x19EAE1BA0);
  }
  JUMPOUT(0x19EAE1BA4);
}

void CoreML::validateOutputCount(CoreML *this, const CoreML::Specification::NeuralNetworkLayer *a2, int a3, int a4)
{
  v71[2] = *MEMORY[0x1E4F143B8];
  std::string v69 = 0;
  long long v70 = 0uLL;
  int v8 = *((_DWORD *)a2 + 12);
  if (a4 < 1 || a4 != a3 || (v9 = v8 == a4, int v8 = a4, v9))
  {
    if (v8 >= a3)
    {
      if (a4 < 1 || v8 <= a4)
      {
        CoreML::Result::Result(this);
        return;
      }
      std::operator+<char>();
      unint64_t v26 = std::string::append(&v62, "' of type ");
      long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      v63.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v61, *((_DWORD *)a2 + 35));
      if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v28 = &v61;
      }
      else {
        int v28 = (std::string *)v61.__r_.__value_.__r.__words[0];
      }
      if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v61.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v61.__r_.__value_.__l.__size_;
      }
      long long v30 = std::string::append(&v63, (const std::string::value_type *)v28, size);
      long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
      v64.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v31;
      v30->__r_.__value_.__l.__size_ = 0;
      v30->__r_.__value_.__r.__words[2] = 0;
      v30->__r_.__value_.__r.__words[0] = 0;
      unsigned int v32 = std::string::append(&v64, " has ");
      long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
      v65.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v33;
      v32->__r_.__value_.__l.__size_ = 0;
      v32->__r_.__value_.__r.__words[2] = 0;
      v32->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v60, *((_DWORD *)a2 + 12));
      if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unsigned int v34 = &v60;
      }
      else {
        unsigned int v34 = (std::string *)v60.__r_.__value_.__r.__words[0];
      }
      if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v35 = HIBYTE(v60.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v35 = v60.__r_.__value_.__l.__size_;
      }
      int v36 = std::string::append(&v65, (const std::string::value_type *)v34, v35);
      long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
      v66.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v37;
      v36->__r_.__value_.__l.__size_ = 0;
      v36->__r_.__value_.__r.__words[2] = 0;
      v36->__r_.__value_.__r.__words[0] = 0;
      long long v38 = std::string::append(&v66, " outputs but expects at most ");
      long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
      v67.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v39;
      v38->__r_.__value_.__l.__size_ = 0;
      v38->__r_.__value_.__r.__words[2] = 0;
      v38->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&__p, a4);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v25 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v25 = __p.__r_.__value_.__l.__size_;
      }
    }
    else
    {
      std::operator+<char>();
      long long v10 = std::string::append(&v62, "' of type ");
      long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      v63.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v61, *((_DWORD *)a2 + 35));
      if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v12 = &v61;
      }
      else {
        uint64_t v12 = (std::string *)v61.__r_.__value_.__r.__words[0];
      }
      if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v13 = HIBYTE(v61.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v13 = v61.__r_.__value_.__l.__size_;
      }
      int v14 = std::string::append(&v63, (const std::string::value_type *)v12, v13);
      long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
      v64.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v15;
      v14->__r_.__value_.__l.__size_ = 0;
      v14->__r_.__value_.__r.__words[2] = 0;
      v14->__r_.__value_.__r.__words[0] = 0;
      unsigned int v16 = std::string::append(&v64, " has ");
      long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      v65.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v60, *((_DWORD *)a2 + 12));
      if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        signed int v18 = &v60;
      }
      else {
        signed int v18 = (std::string *)v60.__r_.__value_.__r.__words[0];
      }
      if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v19 = HIBYTE(v60.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v19 = v60.__r_.__value_.__l.__size_;
      }
      uint64_t v20 = std::string::append(&v65, (const std::string::value_type *)v18, v19);
      long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
      v66.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v21;
      v20->__r_.__value_.__l.__size_ = 0;
      v20->__r_.__value_.__r.__words[2] = 0;
      v20->__r_.__value_.__r.__words[0] = 0;
      long long v22 = std::string::append(&v66, " outputs but expects at least ");
      long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      v67.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v23;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&__p, a3);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v25 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v25 = __p.__r_.__value_.__l.__size_;
      }
    }
  }
  else
  {
    std::operator+<char>();
    long long v40 = std::string::append(&v62, "' of type ");
    long long v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
    v63.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v41;
    v40->__r_.__value_.__l.__size_ = 0;
    v40->__r_.__value_.__r.__words[2] = 0;
    v40->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v61, *((_DWORD *)a2 + 35));
    if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v42 = &v61;
    }
    else {
      unint64_t v42 = (std::string *)v61.__r_.__value_.__r.__words[0];
    }
    if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v43 = HIBYTE(v61.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v43 = v61.__r_.__value_.__l.__size_;
    }
    uint64_t v44 = std::string::append(&v63, (const std::string::value_type *)v42, v43);
    long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
    v64.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v45;
    v44->__r_.__value_.__l.__size_ = 0;
    v44->__r_.__value_.__r.__words[2] = 0;
    v44->__r_.__value_.__r.__words[0] = 0;
    unint64_t v46 = std::string::append(&v64, " has ");
    long long v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
    v65.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v47;
    v46->__r_.__value_.__l.__size_ = 0;
    v46->__r_.__value_.__r.__words[2] = 0;
    v46->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v60, *((_DWORD *)a2 + 12));
    if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v48 = &v60;
    }
    else {
      uint64_t v48 = (std::string *)v60.__r_.__value_.__r.__words[0];
    }
    if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v49 = HIBYTE(v60.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v49 = v60.__r_.__value_.__l.__size_;
    }
    long long v50 = std::string::append(&v65, (const std::string::value_type *)v48, v49);
    long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
    v66.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v51;
    v50->__r_.__value_.__l.__size_ = 0;
    v50->__r_.__value_.__r.__words[2] = 0;
    v50->__r_.__value_.__r.__words[0] = 0;
    int64_t v52 = std::string::append(&v66, " outputs but expects exactly ");
    long long v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
    v67.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v53;
    v52->__r_.__value_.__l.__size_ = 0;
    v52->__r_.__value_.__r.__words[2] = 0;
    v52->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&__p, a4);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v25 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v25 = __p.__r_.__value_.__l.__size_;
    }
  }
  unint64_t v54 = std::string::append(&v67, (const std::string::value_type *)p_p, v25);
  long long v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
  v68.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v55;
  v54->__r_.__value_.__l.__size_ = 0;
  v54->__r_.__value_.__r.__words[2] = 0;
  v54->__r_.__value_.__r.__words[0] = 0;
  long long v56 = std::string::append(&v68, ".");
  long long v57 = (void *)v56->__r_.__value_.__r.__words[0];
  v71[0] = v56->__r_.__value_.__l.__size_;
  *(void *)((char *)v71 + 7) = *(std::string::size_type *)((char *)&v56->__r_.__value_.__r.__words[1] + 7);
  char v58 = HIBYTE(v56->__r_.__value_.__r.__words[2]);
  v56->__r_.__value_.__l.__size_ = 0;
  v56->__r_.__value_.__r.__words[2] = 0;
  v56->__r_.__value_.__r.__words[0] = 0;
  *(void *)((char *)&v70 + 7) = *(void *)((char *)v71 + 7);
  std::string v69 = v57;
  *(void *)&long long v70 = v71[0];
  HIBYTE(v7CoreML::Specification::Pipeline::New(this, 0) = v58;
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v68.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v67.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v66.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v60.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v65.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v64.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v61.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v63.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v62.__r_.__value_.__l.__data_);
  }
  *(void *)this = 13;
  std::operator+<char>();
  if (SHIBYTE(v70) < 0) {
    operator delete(v69);
  }
}

void sub_19EAE21FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v59 - 105) < 0) {
    operator delete(*(void **)(v59 - 128));
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v59 - 137) < 0) {
    operator delete(*(void **)(v59 - 160));
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  _Unwind_Resume(exception_object);
}

void sub_19EAE2350()
{
  if (*(char *)(v0 - 73) < 0) {
    JUMPOUT(0x19EAE2334);
  }
  JUMPOUT(0x19EAE2338);
}

void CoreML::validateInputOutputRankEquality(CoreML::Result *a1, void *a2, uint64_t a3, uint64_t a4)
{
  v31[2] = *MEMORY[0x1E4F143B8];
  int v8 = *(void **)(a2[4] + 8);
  BOOL v9 = (void *)(a4 + 8);
  if ((void *)(a4 + 8) == std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>(a4, v8)|| v9 == std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>(a4, *(void **)(a2[7] + 8))|| (int v10 = *(_DWORD *)std::map<std::string,std::string>::at(a4, v8), v10 == *(_DWORD *)std::map<std::string,std::string>::at(a4, *(void **)(a2[7] + 8))))
  {
    CoreML::Result::Result(a1);
  }
  else
  {
    long long v29 = 0;
    long long v30 = 0uLL;
    long long v11 = (long long *)a2[14];
    if (*((char *)v11 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v11, *((void *)v11 + 1));
    }
    else
    {
      long long v12 = *v11;
      __p.__r_.__value_.__r.__words[2] = *((void *)v11 + 2);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v12;
    }
    std::string::size_type v13 = std::string::insert(&__p, 0, "Layer '");
    long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v26.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    long long v15 = std::string::append(&v26, "' of type '");
    long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v27.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    int v17 = *(char *)(a3 + 23);
    if (v17 >= 0) {
      signed int v18 = (const std::string::value_type *)a3;
    }
    else {
      signed int v18 = *(const std::string::value_type **)a3;
    }
    if (v17 >= 0) {
      std::string::size_type v19 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      std::string::size_type v19 = *(void *)(a3 + 8);
    }
    uint64_t v20 = std::string::append(&v27, v18, v19);
    long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v28.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    long long v22 = std::string::append(&v28, "' expects equal ranks for its input and output, but they are not equal.");
    long long v23 = (void *)v22->__r_.__value_.__r.__words[0];
    v31[0] = v22->__r_.__value_.__l.__size_;
    *(void *)((char *)v31 + 7) = *(std::string::size_type *)((char *)&v22->__r_.__value_.__r.__words[1] + 7);
    char v24 = HIBYTE(v22->__r_.__value_.__r.__words[2]);
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    *(void *)((char *)&v30 + 7) = *(void *)((char *)v31 + 7);
    long long v29 = v23;
    *(void *)&long long v30 = v31[0];
    HIBYTE(v3CoreML::Specification::Pipeline::New(this, 0) = v24;
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v28.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v27.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v26.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    *(void *)a1 = 13;
    std::operator+<char>();
    if (SHIBYTE(v30) < 0) {
      operator delete(v29);
    }
  }
}

void sub_19EAE25F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
}

void CoreML::validateRankCount(uint64_t a1, void *a2, uint64_t a3, int a4, int a5, uint64_t a6)
{
  CoreML::Result::Result((CoreML::Result *)a1);
  long long v12 = *(void **)(a2[4] + 8);
  if ((void *)(a6 + 8) != std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>(a6, v12))
  {
    int v13 = *(_DWORD *)std::map<std::string,std::string>::at(a6, v12);
    std::string::basic_string[abi:ne180100]<0>(__p, "input");
    CoreML::checkRank((CoreML::Result *)&v20, a2[14], a3, a4, a5, (uint64_t)__p, v13);
    *(void *)a1 = v20;
    long long v14 = (void **)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      operator delete(*v14);
    }
    *(_OWORD *)long long v14 = v21;
    *(void *)(a1 + 24) = v22;
    HIBYTE(v22) = 0;
    LOBYTE(v21) = 0;
    if (v19 < 0) {
      operator delete(__p[0]);
    }
  }
  if ((*(_DWORD *)a1 & 0xFFFFFFEF) == 0)
  {
    long long v15 = *(void **)(a2[7] + 8);
    if ((void *)(a6 + 8) != std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>(a6, v15))
    {
      int v16 = *(_DWORD *)std::map<std::string,std::string>::at(a6, v15);
      std::string::basic_string[abi:ne180100]<0>(__p, "output");
      CoreML::checkRank((CoreML::Result *)&v20, a2[14], a3, a4, a5, (uint64_t)__p, v16);
      *(void *)a1 = v20;
      int v17 = (void **)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        operator delete(*v17);
      }
      *(_OWORD *)int v17 = v21;
      *(void *)(a1 + 24) = v22;
      HIBYTE(v22) = 0;
      LOBYTE(v21) = 0;
      if (v19 < 0) {
        operator delete(__p[0]);
      }
    }
  }
}

void sub_19EAE281C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v15 + 31) < 0) {
    operator delete(*(void **)(v15 + 8));
  }
  _Unwind_Resume(exception_object);
}

uint64_t CoreML::valueType(uint64_t *a1)
{
  uint64_t v1 = a1[5];
  if (*(char *)(v1 + 23) < 0) {
    uint64_t v2 = *(void *)(v1 + 8);
  }
  else {
    uint64_t v2 = *(unsigned __int8 *)(v1 + 23);
  }
  uint64_t v3 = a1[6];
  uint64_t v4 = *(unsigned __int8 *)(v3 + 23);
  if (*(char *)(v3 + 23) < 0) {
    uint64_t v5 = *(void *)(v3 + 8);
  }
  else {
    uint64_t v5 = *(unsigned __int8 *)(v3 + 23);
  }
  int v6 = *((_DWORD *)a1 + 4);
  uint64_t v7 = a1[7];
  uint64_t v8 = *(unsigned __int8 *)(v7 + 23);
  if (*(char *)(v7 + 23) < 0) {
    uint64_t v9 = *(void *)(v7 + 8);
  }
  else {
    uint64_t v9 = *(unsigned __int8 *)(v7 + 23);
  }
  if (v6 <= 0) {
    int v10 = 1;
  }
  else {
    int v10 = 2;
  }
  if (v2) {
    unsigned int v11 = v10;
  }
  else {
    unsigned int v11 = v6 > 0;
  }
  if (v5) {
    ++v11;
  }
  if (v9) {
    unsigned int v12 = v11 + 1;
  }
  else {
    unsigned int v12 = v11;
  }
  if (v12 > 1) {
    return 4;
  }
  if (v12) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = 5;
  }
  if (v6 <= 0 && v12)
  {
    if ((*(unsigned char *)(v1 + 23) & 0x80) != 0)
    {
      if (*(void *)(v1 + 8)) {
        return 1;
      }
    }
    else if (*(unsigned char *)(v1 + 23))
    {
      return 1;
    }
    if ((v4 & 0x80) != 0) {
      uint64_t v4 = *(void *)(v3 + 8);
    }
    uint64_t v14 = a1[8];
    if (a1 != &CoreML::Specification::_WeightParams_default_instance_ && v4 && v14)
    {
      return 2;
    }
    else
    {
      if ((v8 & 0x80) != 0) {
        uint64_t v8 = *(void *)(v7 + 8);
      }
      if (v14) {
        BOOL v15 = v8 == 0;
      }
      else {
        BOOL v15 = 1;
      }
      if (v15 || a1 == &CoreML::Specification::_WeightParams_default_instance_) {
        return 5;
      }
      else {
        return 3;
      }
    }
  }
  return v13;
}

void CoreML::validateGeneralWeightParams(uint64_t a1, uint64_t a2, unint64_t a3, int a4, const void **a5, uint64_t a6, uint64_t a7)
{
  CoreML::Result::Result((CoreML::Result *)&v147);
  uint64_t v14 = *(void *)(a2 + 40);
  unint64_t v15 = *(unsigned __int8 *)(v14 + 23);
  if (*(char *)(v14 + 23) < 0) {
    uint64_t v16 = *(void *)(v14 + 8);
  }
  else {
    uint64_t v16 = *(unsigned __int8 *)(v14 + 23);
  }
  unint64_t v17 = *(int *)(a2 + 16);
  uint64_t v18 = *(void *)(a2 + 48);
  uint64_t v19 = *(unsigned __int8 *)(v18 + 23);
  if (*(char *)(v18 + 23) < 0) {
    uint64_t v20 = *(void *)(v18 + 8);
  }
  else {
    uint64_t v20 = *(unsigned __int8 *)(v18 + 23);
  }
  uint64_t v21 = *(void *)(a2 + 56);
  if (*(char *)(v21 + 23) < 0) {
    uint64_t v22 = *(void *)(v21 + 8);
  }
  else {
    uint64_t v22 = *(unsigned __int8 *)(v21 + 23);
  }
  if ((int)v17 <= 0) {
    int v23 = 1;
  }
  else {
    int v23 = 2;
  }
  if (v16) {
    unsigned int v24 = v23;
  }
  else {
    unsigned int v24 = (int)v17 > 0;
  }
  if (v20) {
    ++v24;
  }
  if (v22) {
    ++v24;
  }
  if (v24 <= 1)
  {
    if ((int)v17 <= 0 && v24)
    {
      if ((v15 & 0x80) != 0)
      {
        unint64_t v15 = *(void *)(v14 + 8);
        if (v15) {
          goto LABEL_56;
        }
      }
      else if (*(unsigned char *)(v14 + 23))
      {
LABEL_56:
        unint64_t v17 = v15 >> 1;
        goto LABEL_58;
      }
      if ((v19 & 0x80) != 0) {
        uint64_t v19 = *(void *)(v18 + 8);
      }
      if ((uint64_t *)a2 != &CoreML::Specification::_WeightParams_default_instance_)
      {
        if (v19)
        {
          uint64_t v72 = *(void *)(a2 + 64);
          if (v72)
          {
            if (!CoreML::hasSufficientBytesInQuantizedWeightParam((uint64_t *)a2, a3))
            {
              if (*((char *)a5 + 23) >= 0) {
                size_t v95 = *((unsigned __int8 *)a5 + 23);
              }
              else {
                size_t v95 = (size_t)a5[1];
              }
              int64_t v96 = &v139;
              std::string::basic_string[abi:ne180100]((uint64_t)&v139, v95 + 7);
              if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                int64_t v96 = (std::string *)v139.__r_.__value_.__r.__words[0];
              }
              if (v95)
              {
                if (*((char *)a5 + 23) >= 0) {
                  long long v97 = a5;
                }
                else {
                  long long v97 = *a5;
                }
                memmove(v96, v97, v95);
              }
              strcpy((char *)v96 + v95, "Layer '");
              int v98 = *(char *)(a6 + 23);
              if (v98 >= 0) {
                std::string::size_type v99 = (const std::string::value_type *)a6;
              }
              else {
                std::string::size_type v99 = *(const std::string::value_type **)a6;
              }
              if (v98 >= 0) {
                std::string::size_type v100 = *(unsigned __int8 *)(a6 + 23);
              }
              else {
                std::string::size_type v100 = *(void *)(a6 + 8);
              }
              long long v101 = std::string::append(&v139, v99, v100);
              long long v102 = *(_OWORD *)&v101->__r_.__value_.__l.__data_;
              v140.__r_.__value_.__r.__words[2] = v101->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v140.__r_.__value_.__l.__data_ = v102;
              v101->__r_.__value_.__l.__size_ = 0;
              v101->__r_.__value_.__r.__words[2] = 0;
              v101->__r_.__value_.__r.__words[0] = 0;
              long long v103 = std::string::append(&v140, "' has insufficient bytes for quantized ");
              long long v104 = *(_OWORD *)&v103->__r_.__value_.__l.__data_;
              v141.__r_.__value_.__r.__words[2] = v103->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v141.__r_.__value_.__l.__data_ = v104;
              v103->__r_.__value_.__l.__size_ = 0;
              v103->__r_.__value_.__r.__words[2] = 0;
              v103->__r_.__value_.__r.__words[0] = 0;
              int v105 = *(char *)(a7 + 23);
              if (v105 >= 0) {
                int v106 = (const std::string::value_type *)a7;
              }
              else {
                int v106 = *(const std::string::value_type **)a7;
              }
              if (v105 >= 0) {
                std::string::size_type v107 = *(unsigned __int8 *)(a7 + 23);
              }
              else {
                std::string::size_type v107 = *(void *)(a7 + 8);
              }
              int v108 = std::string::append(&v141, v106, v107);
              long long v109 = *(_OWORD *)&v108->__r_.__value_.__l.__data_;
              v142.__r_.__value_.__r.__words[2] = v108->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v142.__r_.__value_.__l.__data_ = v109;
              v108->__r_.__value_.__l.__size_ = 0;
              v108->__r_.__value_.__r.__words[2] = 0;
              v108->__r_.__value_.__r.__words[0] = 0;
              int v110 = std::string::append(&v142, " with ");
              long long v111 = *(_OWORD *)&v110->__r_.__value_.__l.__data_;
              v143.__r_.__value_.__r.__words[2] = v110->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v143.__r_.__value_.__l.__data_ = v111;
              v110->__r_.__value_.__l.__size_ = 0;
              v110->__r_.__value_.__r.__words[2] = 0;
              v110->__r_.__value_.__r.__words[0] = 0;
              std::to_string(&v138, a3);
              if ((v138.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                int v112 = &v138;
              }
              else {
                int v112 = (std::string *)v138.__r_.__value_.__r.__words[0];
              }
              if ((v138.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type size = HIBYTE(v138.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type size = v138.__r_.__value_.__l.__size_;
              }
              int v114 = std::string::append(&v143, (const std::string::value_type *)v112, size);
              long long v115 = *(_OWORD *)&v114->__r_.__value_.__l.__data_;
              v144.__r_.__value_.__r.__words[2] = v114->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v144.__r_.__value_.__l.__data_ = v115;
              v114->__r_.__value_.__l.__size_ = 0;
              v114->__r_.__value_.__r.__words[2] = 0;
              v114->__r_.__value_.__r.__words[0] = 0;
              int v116 = std::string::append(&v144, "units.");
              long long v117 = *(_OWORD *)&v116->__r_.__value_.__l.__data_;
              std::string::size_type v146 = v116->__r_.__value_.__r.__words[2];
              long long v145 = v117;
              v116->__r_.__value_.__l.__size_ = 0;
              v116->__r_.__value_.__r.__words[2] = 0;
              v116->__r_.__value_.__r.__words[0] = 0;
              if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v144.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v138.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v143.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v142.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v141.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v140.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v139.__r_.__value_.__l.__data_);
              }
              *(void *)a1 = 13;
              std::operator+<char>();
              goto LABEL_160;
            }
            uint64_t v73 = *(void *)(v72 + 16);
            if ((unint64_t)(v73 - 1) > 7) {
              goto LABEL_210;
            }
            int v74 = *(_DWORD *)(v72 + 36);
            if (v74 == 102)
            {
              int v77 = *(_DWORD *)(*(void *)(v72 + 24) + 16);
              int v76 = 1 << v73;
            }
            else
            {
              if (v74 != 101) {
                goto LABEL_210;
              }
              uint64_t v75 = *(void *)(v72 + 24);
              int v76 = *(_DWORD *)(v75 + 16);
              if (v76 != 1 && v76 != a4) {
                goto LABEL_210;
              }
              int v77 = *(_DWORD *)(v75 + 40);
              if (!v77) {
                goto LABEL_59;
              }
            }
            if (v77 == v76) {
              goto LABEL_59;
            }
LABEL_210:
            if (*((char *)a5 + 23) >= 0) {
              size_t v118 = *((unsigned __int8 *)a5 + 23);
            }
            else {
              size_t v118 = (size_t)a5[1];
            }
            long long v119 = &v141;
            std::string::basic_string[abi:ne180100]((uint64_t)&v141, v118 + 7);
            if ((v141.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              long long v119 = (std::string *)v141.__r_.__value_.__r.__words[0];
            }
            if (v118)
            {
              if (*((char *)a5 + 23) >= 0) {
                int v120 = a5;
              }
              else {
                int v120 = *a5;
              }
              memmove(v119, v120, v118);
            }
            strcpy((char *)v119 + v118, "Layer '");
            int v121 = *(char *)(a6 + 23);
            if (v121 >= 0) {
              int v122 = (const std::string::value_type *)a6;
            }
            else {
              int v122 = *(const std::string::value_type **)a6;
            }
            if (v121 >= 0) {
              std::string::size_type v123 = *(unsigned __int8 *)(a6 + 23);
            }
            else {
              std::string::size_type v123 = *(void *)(a6 + 8);
            }
            unint64_t v124 = std::string::append(&v141, v122, v123);
            long long v125 = *(_OWORD *)&v124->__r_.__value_.__l.__data_;
            v142.__r_.__value_.__r.__words[2] = v124->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v142.__r_.__value_.__l.__data_ = v125;
            v124->__r_.__value_.__l.__size_ = 0;
            v124->__r_.__value_.__r.__words[2] = 0;
            v124->__r_.__value_.__r.__words[0] = 0;
            long long v126 = std::string::append(&v142, "' has invalid quantization parameters for quantized ");
            long long v127 = *(_OWORD *)&v126->__r_.__value_.__l.__data_;
            v143.__r_.__value_.__r.__words[2] = v126->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v143.__r_.__value_.__l.__data_ = v127;
            v126->__r_.__value_.__l.__size_ = 0;
            v126->__r_.__value_.__r.__words[2] = 0;
            v126->__r_.__value_.__r.__words[0] = 0;
            int v128 = *(char *)(a7 + 23);
            if (v128 >= 0) {
              v129 = (const std::string::value_type *)a7;
            }
            else {
              v129 = *(const std::string::value_type **)a7;
            }
            if (v128 >= 0) {
              std::string::size_type v130 = *(unsigned __int8 *)(a7 + 23);
            }
            else {
              std::string::size_type v130 = *(void *)(a7 + 8);
            }
            v131 = std::string::append(&v143, v129, v130);
            long long v132 = *(_OWORD *)&v131->__r_.__value_.__l.__data_;
            v144.__r_.__value_.__r.__words[2] = v131->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v144.__r_.__value_.__l.__data_ = v132;
            v131->__r_.__value_.__l.__size_ = 0;
            v131->__r_.__value_.__r.__words[2] = 0;
            v131->__r_.__value_.__r.__words[0] = 0;
            v133 = std::string::append(&v144, ".");
            long long v134 = *(_OWORD *)&v133->__r_.__value_.__l.__data_;
            std::string::size_type v146 = v133->__r_.__value_.__r.__words[2];
            long long v145 = v134;
            v133->__r_.__value_.__l.__size_ = 0;
            v133->__r_.__value_.__r.__words[2] = 0;
            v133->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v144.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v143.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v142.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v141.__r_.__value_.__l.__data_);
            }
            goto LABEL_159;
          }
        }
      }
    }
    else if (v24)
    {
LABEL_58:
      if (v17 != a3)
      {
        if (*((char *)a5 + 23) >= 0) {
          size_t v43 = *((unsigned __int8 *)a5 + 23);
        }
        else {
          size_t v43 = (size_t)a5[1];
        }
        uint64_t v44 = &v137;
        std::string::basic_string[abi:ne180100]((uint64_t)&v137, v43 + 7);
        if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v44 = (std::string *)v137.__r_.__value_.__r.__words[0];
        }
        if (v43)
        {
          if (*((char *)a5 + 23) >= 0) {
            long long v45 = a5;
          }
          else {
            long long v45 = *a5;
          }
          memmove(v44, v45, v43);
        }
        strcpy((char *)v44 + v43, "Layer '");
        int v46 = *(char *)(a6 + 23);
        if (v46 >= 0) {
          long long v47 = (const std::string::value_type *)a6;
        }
        else {
          long long v47 = *(const std::string::value_type **)a6;
        }
        if (v46 >= 0) {
          std::string::size_type v48 = *(unsigned __int8 *)(a6 + 23);
        }
        else {
          std::string::size_type v48 = *(void *)(a6 + 8);
        }
        std::string::size_type v49 = std::string::append(&v137, v47, v48);
        long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
        v138.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v138.__r_.__value_.__l.__data_ = v50;
        v49->__r_.__value_.__l.__size_ = 0;
        v49->__r_.__value_.__r.__words[2] = 0;
        v49->__r_.__value_.__r.__words[0] = 0;
        long long v51 = std::string::append(&v138, "' has incorrect ");
        long long v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
        v139.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v139.__r_.__value_.__l.__data_ = v52;
        v51->__r_.__value_.__l.__size_ = 0;
        v51->__r_.__value_.__r.__words[2] = 0;
        v51->__r_.__value_.__r.__words[0] = 0;
        int v53 = *(char *)(a7 + 23);
        if (v53 >= 0) {
          unint64_t v54 = (const std::string::value_type *)a7;
        }
        else {
          unint64_t v54 = *(const std::string::value_type **)a7;
        }
        if (v53 >= 0) {
          std::string::size_type v55 = *(unsigned __int8 *)(a7 + 23);
        }
        else {
          std::string::size_type v55 = *(void *)(a7 + 8);
        }
        long long v56 = std::string::append(&v139, v54, v55);
        long long v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
        v140.__r_.__value_.__r.__words[2] = v56->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v140.__r_.__value_.__l.__data_ = v57;
        v56->__r_.__value_.__l.__size_ = 0;
        v56->__r_.__value_.__r.__words[2] = 0;
        v56->__r_.__value_.__r.__words[0] = 0;
        char v58 = std::string::append(&v140, " size ");
        long long v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
        v141.__r_.__value_.__r.__words[2] = v58->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v141.__r_.__value_.__l.__data_ = v59;
        v58->__r_.__value_.__l.__size_ = 0;
        v58->__r_.__value_.__r.__words[2] = 0;
        v58->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v136, v17);
        if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string v60 = &v136;
        }
        else {
          std::string v60 = (std::string *)v136.__r_.__value_.__r.__words[0];
        }
        if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v61 = HIBYTE(v136.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v61 = v136.__r_.__value_.__l.__size_;
        }
        std::string v62 = std::string::append(&v141, (const std::string::value_type *)v60, v61);
        long long v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
        v142.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v142.__r_.__value_.__l.__data_ = v63;
        v62->__r_.__value_.__l.__size_ = 0;
        v62->__r_.__value_.__r.__words[2] = 0;
        v62->__r_.__value_.__r.__words[0] = 0;
        std::string v64 = std::string::append(&v142, " (expected ");
        long long v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
        v143.__r_.__value_.__r.__words[2] = v64->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v143.__r_.__value_.__l.__data_ = v65;
        v64->__r_.__value_.__l.__size_ = 0;
        v64->__r_.__value_.__r.__words[2] = 0;
        v64->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v135, a3);
        if ((v135.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string v66 = &v135;
        }
        else {
          std::string v66 = (std::string *)v135.__r_.__value_.__r.__words[0];
        }
        if ((v135.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v67 = HIBYTE(v135.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v67 = v135.__r_.__value_.__l.__size_;
        }
        std::string v68 = std::string::append(&v143, (const std::string::value_type *)v66, v67);
        long long v69 = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
        v144.__r_.__value_.__r.__words[2] = v68->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v144.__r_.__value_.__l.__data_ = v69;
        v68->__r_.__value_.__l.__size_ = 0;
        v68->__r_.__value_.__r.__words[2] = 0;
        v68->__r_.__value_.__r.__words[0] = 0;
        long long v70 = std::string::append(&v144, ").");
        long long v71 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
        std::string::size_type v146 = v70->__r_.__value_.__r.__words[2];
        long long v145 = v71;
        v70->__r_.__value_.__l.__size_ = 0;
        v70->__r_.__value_.__r.__words[2] = 0;
        v70->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v144.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v135.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v143.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v142.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v136.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v141.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v140.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v139.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v138.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v137.__r_.__value_.__l.__data_);
        }
        *(void *)a1 = 13;
        std::operator+<char>();
        goto LABEL_160;
      }
LABEL_59:
      uint64_t v42 = v149;
      *(void *)a1 = v147;
      *(_OWORD *)(a1 + 8) = v148;
      *(void *)(a1 + 24) = v42;
      long long v148 = 0uLL;
      uint64_t v149 = 0;
      goto LABEL_162;
    }
    if (*((char *)a5 + 23) >= 0) {
      size_t v78 = *((unsigned __int8 *)a5 + 23);
    }
    else {
      size_t v78 = (size_t)a5[1];
    }
    std::string v79 = &v141;
    std::string::basic_string[abi:ne180100]((uint64_t)&v141, v78 + 7);
    if ((v141.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string v79 = (std::string *)v141.__r_.__value_.__r.__words[0];
    }
    if (v78)
    {
      if (*((char *)a5 + 23) >= 0) {
        long long v80 = a5;
      }
      else {
        long long v80 = *a5;
      }
      memmove(v79, v80, v78);
    }
    strcpy((char *)v79 + v78, "Layer '");
    int v81 = *(char *)(a6 + 23);
    if (v81 >= 0) {
      std::string::size_type v82 = (const std::string::value_type *)a6;
    }
    else {
      std::string::size_type v82 = *(const std::string::value_type **)a6;
    }
    if (v81 >= 0) {
      std::string::size_type v83 = *(unsigned __int8 *)(a6 + 23);
    }
    else {
      std::string::size_type v83 = *(void *)(a6 + 8);
    }
    long long v84 = std::string::append(&v141, v82, v83);
    long long v85 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
    v142.__r_.__value_.__r.__words[2] = v84->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v142.__r_.__value_.__l.__data_ = v85;
    v84->__r_.__value_.__l.__size_ = 0;
    v84->__r_.__value_.__r.__words[2] = 0;
    v84->__r_.__value_.__r.__words[0] = 0;
    long long v86 = std::string::append(&v142, "' has empty ");
    long long v87 = *(_OWORD *)&v86->__r_.__value_.__l.__data_;
    v143.__r_.__value_.__r.__words[2] = v86->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v143.__r_.__value_.__l.__data_ = v87;
    v86->__r_.__value_.__l.__size_ = 0;
    v86->__r_.__value_.__r.__words[2] = 0;
    v86->__r_.__value_.__r.__words[0] = 0;
    int v88 = *(char *)(a7 + 23);
    if (v88 >= 0) {
      std::string v89 = (const std::string::value_type *)a7;
    }
    else {
      std::string v89 = *(const std::string::value_type **)a7;
    }
    if (v88 >= 0) {
      std::string::size_type v90 = *(unsigned __int8 *)(a7 + 23);
    }
    else {
      std::string::size_type v90 = *(void *)(a7 + 8);
    }
    long long v91 = std::string::append(&v143, v89, v90);
    long long v92 = *(_OWORD *)&v91->__r_.__value_.__l.__data_;
    v144.__r_.__value_.__r.__words[2] = v91->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v144.__r_.__value_.__l.__data_ = v92;
    v91->__r_.__value_.__l.__size_ = 0;
    v91->__r_.__value_.__r.__words[2] = 0;
    v91->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v93 = std::string::append(&v144, ".");
    long long v94 = *(_OWORD *)&v93->__r_.__value_.__l.__data_;
    std::string::size_type v146 = v93->__r_.__value_.__r.__words[2];
    long long v145 = v94;
    v93->__r_.__value_.__l.__size_ = 0;
    v93->__r_.__value_.__r.__words[2] = 0;
    v93->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v144.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v143.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v142.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v141.__r_.__value_.__l.__data_);
    }
    goto LABEL_159;
  }
  if (*((char *)a5 + 23) >= 0) {
    size_t v25 = *((unsigned __int8 *)a5 + 23);
  }
  else {
    size_t v25 = (size_t)a5[1];
  }
  std::string v26 = &v141;
  std::string::basic_string[abi:ne180100]((uint64_t)&v141, v25 + 7);
  if ((v141.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string v26 = (std::string *)v141.__r_.__value_.__r.__words[0];
  }
  if (v25)
  {
    if (*((char *)a5 + 23) >= 0) {
      std::string v27 = a5;
    }
    else {
      std::string v27 = *a5;
    }
    memmove(v26, v27, v25);
  }
  strcpy((char *)v26 + v25, "Layer '");
  int v28 = *(char *)(a6 + 23);
  if (v28 >= 0) {
    long long v29 = (const std::string::value_type *)a6;
  }
  else {
    long long v29 = *(const std::string::value_type **)a6;
  }
  if (v28 >= 0) {
    std::string::size_type v30 = *(unsigned __int8 *)(a6 + 23);
  }
  else {
    std::string::size_type v30 = *(void *)(a6 + 8);
  }
  long long v31 = std::string::append(&v141, v29, v30);
  long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  v142.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v142.__r_.__value_.__l.__data_ = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  long long v33 = std::string::append(&v142, "' has unspecified ");
  long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v143.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v143.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  int v35 = *(char *)(a7 + 23);
  if (v35 >= 0) {
    int v36 = (const std::string::value_type *)a7;
  }
  else {
    int v36 = *(const std::string::value_type **)a7;
  }
  if (v35 >= 0) {
    std::string::size_type v37 = *(unsigned __int8 *)(a7 + 23);
  }
  else {
    std::string::size_type v37 = *(void *)(a7 + 8);
  }
  long long v38 = std::string::append(&v143, v36, v37);
  long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
  v144.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v144.__r_.__value_.__l.__data_ = v39;
  v38->__r_.__value_.__l.__size_ = 0;
  v38->__r_.__value_.__r.__words[2] = 0;
  v38->__r_.__value_.__r.__words[0] = 0;
  long long v40 = std::string::append(&v144, ".");
  long long v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
  std::string::size_type v146 = v40->__r_.__value_.__r.__words[2];
  long long v145 = v41;
  v40->__r_.__value_.__l.__size_ = 0;
  v40->__r_.__value_.__r.__words[2] = 0;
  v40->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v144.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v143.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v142.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v141.__r_.__value_.__l.__data_);
  }
LABEL_159:
  *(void *)a1 = 13;
  std::operator+<char>();
LABEL_160:
  if (SHIBYTE(v146) < 0) {
    operator delete((void *)v145);
  }
LABEL_162:
  if (SHIBYTE(v149) < 0) {
    operator delete((void *)v148);
  }
}

void sub_19EAE3540(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,void *__p,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  if (*(char *)(v61 - 121) < 0) {
    operator delete(*(void **)(v61 - 144));
  }
  if (*(char *)(v61 - 81) < 0) {
    operator delete(*(void **)(v61 - 104));
  }
  _Unwind_Resume(exception_object);
}

void CoreML::checkRank(CoreML::Result *this, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, int a7)
{
  v99[2] = *MEMORY[0x1E4F143B8];
  long long v97 = 0;
  long long v98 = 0uLL;
  if (a5 < 1 || a5 != a4 || a7 == a5)
  {
    if (a7 >= a4)
    {
      if (a5 < 1 || a7 <= a5)
      {
        CoreML::Result::Result(this);
        return;
      }
      std::operator+<char>();
      long long v59 = std::string::append(&v88, "' of type '");
      long long v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
      v89.__r_.__value_.__r.__words[2] = v59->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v60;
      v59->__r_.__value_.__l.__size_ = 0;
      v59->__r_.__value_.__r.__words[2] = 0;
      v59->__r_.__value_.__r.__words[0] = 0;
      int v61 = *(char *)(a3 + 23);
      if (v61 >= 0) {
        std::string v62 = (const std::string::value_type *)a3;
      }
      else {
        std::string v62 = *(const std::string::value_type **)a3;
      }
      if (v61 >= 0) {
        std::string::size_type v63 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        std::string::size_type v63 = *(void *)(a3 + 8);
      }
      std::string v64 = std::string::append(&v89, v62, v63);
      long long v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
      v90.__r_.__value_.__r.__words[2] = v64->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v90.__r_.__value_.__l.__data_ = v65;
      v64->__r_.__value_.__l.__size_ = 0;
      v64->__r_.__value_.__r.__words[2] = 0;
      v64->__r_.__value_.__r.__words[0] = 0;
      std::string v66 = std::string::append(&v90, "' has ");
      long long v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
      v91.__r_.__value_.__r.__words[2] = v66->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v91.__r_.__value_.__l.__data_ = v67;
      v66->__r_.__value_.__l.__size_ = 0;
      v66->__r_.__value_.__r.__words[2] = 0;
      v66->__r_.__value_.__r.__words[0] = 0;
      int v68 = *(char *)(a6 + 23);
      if (v68 >= 0) {
        long long v69 = (const std::string::value_type *)a6;
      }
      else {
        long long v69 = *(const std::string::value_type **)a6;
      }
      if (v68 >= 0) {
        std::string::size_type v70 = *(unsigned __int8 *)(a6 + 23);
      }
      else {
        std::string::size_type v70 = *(void *)(a6 + 8);
      }
      long long v71 = std::string::append(&v91, v69, v70);
      long long v72 = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
      v92.__r_.__value_.__r.__words[2] = v71->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v72;
      v71->__r_.__value_.__l.__size_ = 0;
      v71->__r_.__value_.__r.__words[2] = 0;
      v71->__r_.__value_.__r.__words[0] = 0;
      uint64_t v73 = std::string::append(&v92, " rank ");
      long long v74 = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
      v93.__r_.__value_.__r.__words[2] = v73->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v74;
      v73->__r_.__value_.__l.__size_ = 0;
      v73->__r_.__value_.__r.__words[2] = 0;
      v73->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v87, a7);
      if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v75 = &v87;
      }
      else {
        uint64_t v75 = (std::string *)v87.__r_.__value_.__r.__words[0];
      }
      if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v87.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v87.__r_.__value_.__l.__size_;
      }
      int v77 = std::string::append(&v93, (const std::string::value_type *)v75, size);
      long long v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
      v94.__r_.__value_.__r.__words[2] = v77->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v94.__r_.__value_.__l.__data_ = v78;
      v77->__r_.__value_.__l.__size_ = 0;
      v77->__r_.__value_.__r.__words[2] = 0;
      v77->__r_.__value_.__r.__words[0] = 0;
      std::string v79 = std::string::append(&v94, " but expects rank at most ");
      long long v80 = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
      v95.__r_.__value_.__r.__words[2] = v79->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v95.__r_.__value_.__l.__data_ = v80;
      v79->__r_.__value_.__l.__size_ = 0;
      v79->__r_.__value_.__r.__words[2] = 0;
      v79->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v86, a5);
      if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v35 = &v86;
      }
      else {
        int v35 = (std::string *)v86.__r_.__value_.__r.__words[0];
      }
      if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v36 = HIBYTE(v86.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v36 = v86.__r_.__value_.__l.__size_;
      }
    }
    else
    {
      std::operator+<char>();
      std::string::size_type v37 = std::string::append(&v88, "' of type '");
      long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v89.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      int v39 = *(char *)(a3 + 23);
      if (v39 >= 0) {
        long long v40 = (const std::string::value_type *)a3;
      }
      else {
        long long v40 = *(const std::string::value_type **)a3;
      }
      if (v39 >= 0) {
        std::string::size_type v41 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        std::string::size_type v41 = *(void *)(a3 + 8);
      }
      uint64_t v42 = std::string::append(&v89, v40, v41);
      long long v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
      v90.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v90.__r_.__value_.__l.__data_ = v43;
      v42->__r_.__value_.__l.__size_ = 0;
      v42->__r_.__value_.__r.__words[2] = 0;
      v42->__r_.__value_.__r.__words[0] = 0;
      uint64_t v44 = std::string::append(&v90, "' has ");
      long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
      v91.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v91.__r_.__value_.__l.__data_ = v45;
      v44->__r_.__value_.__l.__size_ = 0;
      v44->__r_.__value_.__r.__words[2] = 0;
      v44->__r_.__value_.__r.__words[0] = 0;
      int v46 = *(char *)(a6 + 23);
      if (v46 >= 0) {
        long long v47 = (const std::string::value_type *)a6;
      }
      else {
        long long v47 = *(const std::string::value_type **)a6;
      }
      if (v46 >= 0) {
        std::string::size_type v48 = *(unsigned __int8 *)(a6 + 23);
      }
      else {
        std::string::size_type v48 = *(void *)(a6 + 8);
      }
      std::string::size_type v49 = std::string::append(&v91, v47, v48);
      long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
      v92.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v50;
      v49->__r_.__value_.__l.__size_ = 0;
      v49->__r_.__value_.__r.__words[2] = 0;
      v49->__r_.__value_.__r.__words[0] = 0;
      long long v51 = std::string::append(&v92, " rank ");
      long long v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
      v93.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v52;
      v51->__r_.__value_.__l.__size_ = 0;
      v51->__r_.__value_.__r.__words[2] = 0;
      v51->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v87, a7);
      if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v53 = &v87;
      }
      else {
        int v53 = (std::string *)v87.__r_.__value_.__r.__words[0];
      }
      if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v54 = HIBYTE(v87.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v54 = v87.__r_.__value_.__l.__size_;
      }
      std::string::size_type v55 = std::string::append(&v93, (const std::string::value_type *)v53, v54);
      long long v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
      v94.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v94.__r_.__value_.__l.__data_ = v56;
      v55->__r_.__value_.__l.__size_ = 0;
      v55->__r_.__value_.__r.__words[2] = 0;
      v55->__r_.__value_.__r.__words[0] = 0;
      long long v57 = std::string::append(&v94, " but expects rank at least ");
      long long v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
      v95.__r_.__value_.__r.__words[2] = v57->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v95.__r_.__value_.__l.__data_ = v58;
      v57->__r_.__value_.__l.__size_ = 0;
      v57->__r_.__value_.__r.__words[2] = 0;
      v57->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v86, a4);
      if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v35 = &v86;
      }
      else {
        int v35 = (std::string *)v86.__r_.__value_.__r.__words[0];
      }
      if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v36 = HIBYTE(v86.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v36 = v86.__r_.__value_.__l.__size_;
      }
    }
  }
  else
  {
    std::operator+<char>();
    uint64_t v13 = std::string::append(&v88, "' of type '");
    long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v89.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    int v15 = *(char *)(a3 + 23);
    if (v15 >= 0) {
      uint64_t v16 = (const std::string::value_type *)a3;
    }
    else {
      uint64_t v16 = *(const std::string::value_type **)a3;
    }
    if (v15 >= 0) {
      std::string::size_type v17 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      std::string::size_type v17 = *(void *)(a3 + 8);
    }
    uint64_t v18 = std::string::append(&v89, v16, v17);
    long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v90.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v90.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    uint64_t v20 = std::string::append(&v90, "' has ");
    long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v91.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v91.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    int v22 = *(char *)(a6 + 23);
    if (v22 >= 0) {
      int v23 = (const std::string::value_type *)a6;
    }
    else {
      int v23 = *(const std::string::value_type **)a6;
    }
    if (v22 >= 0) {
      std::string::size_type v24 = *(unsigned __int8 *)(a6 + 23);
    }
    else {
      std::string::size_type v24 = *(void *)(a6 + 8);
    }
    size_t v25 = std::string::append(&v91, v23, v24);
    long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    v92.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    std::string v27 = std::string::append(&v92, " rank ");
    long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    v93.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v28;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v87, a7);
    if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v29 = &v87;
    }
    else {
      long long v29 = (std::string *)v87.__r_.__value_.__r.__words[0];
    }
    if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v30 = HIBYTE(v87.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v30 = v87.__r_.__value_.__l.__size_;
    }
    long long v31 = std::string::append(&v93, (const std::string::value_type *)v29, v30);
    long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
    v94.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v94.__r_.__value_.__l.__data_ = v32;
    v31->__r_.__value_.__l.__size_ = 0;
    v31->__r_.__value_.__r.__words[2] = 0;
    v31->__r_.__value_.__r.__words[0] = 0;
    long long v33 = std::string::append(&v94, " but expects rank exactly ");
    long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
    v95.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v95.__r_.__value_.__l.__data_ = v34;
    v33->__r_.__value_.__l.__size_ = 0;
    v33->__r_.__value_.__r.__words[2] = 0;
    v33->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v86, a5);
    if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v35 = &v86;
    }
    else {
      int v35 = (std::string *)v86.__r_.__value_.__r.__words[0];
    }
    if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v36 = HIBYTE(v86.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v36 = v86.__r_.__value_.__l.__size_;
    }
  }
  int v81 = std::string::append(&v95, (const std::string::value_type *)v35, v36);
  long long v82 = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
  v96.__r_.__value_.__r.__words[2] = v81->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v96.__r_.__value_.__l.__data_ = v82;
  v81->__r_.__value_.__l.__size_ = 0;
  v81->__r_.__value_.__r.__words[2] = 0;
  v81->__r_.__value_.__r.__words[0] = 0;
  std::string::size_type v83 = std::string::append(&v96, ".");
  long long v84 = (void *)v83->__r_.__value_.__r.__words[0];
  v99[0] = v83->__r_.__value_.__l.__size_;
  *(void *)((char *)v99 + 7) = *(std::string::size_type *)((char *)&v83->__r_.__value_.__r.__words[1] + 7);
  char v85 = HIBYTE(v83->__r_.__value_.__r.__words[2]);
  v83->__r_.__value_.__l.__size_ = 0;
  v83->__r_.__value_.__r.__words[2] = 0;
  v83->__r_.__value_.__r.__words[0] = 0;
  *(void *)((char *)&v98 + 7) = *(void *)((char *)v99 + 7);
  long long v97 = v84;
  *(void *)&long long v98 = v99[0];
  HIBYTE(v98) = v85;
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v96.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v86.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v95.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v94.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v87.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v93.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v92.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v91.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v90.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v89.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v88.__r_.__value_.__l.__data_);
  }
  *(void *)this = 13;
  std::operator+<char>();
  if (SHIBYTE(v98) < 0) {
    operator delete(v97);
  }
}

void sub_19EAE3EC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  if (*(char *)(v61 - 121) < 0) {
    operator delete(*(void **)(v61 - 144));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v61 - 153) < 0) {
    operator delete(*(void **)(v61 - 176));
  }
  if (*(char *)(v61 - 185) < 0) {
    operator delete(*(void **)(v61 - 208));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a61 < 0) {
    operator delete(a56);
  }
  if (a54 < 0) {
    operator delete(a49);
  }
  if (a47 < 0) {
    operator delete(a42);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

void sub_19EAE4034()
{
  if (*(char *)(v0 - 89) < 0) {
    JUMPOUT(0x19EAE4010);
  }
  JUMPOUT(0x19EAE4014);
}

void CoreML::NeuralNetworkSpecValidator::validateConvolution3DLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2, uint64_t a3)
{
  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0) {
      operator delete(this[1]);
    }
    CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0) {
        operator delete(this[1]);
      }
      if (*(unsigned char *)a2)
      {
        std::string::basic_string[abi:ne180100]<0>(v113, "Convolution3D");
        uint64_t v7 = (char *)a2 + 32;
        CoreML::validateInputOutputRankEquality((CoreML::Result *)this, (void *)a3, (uint64_t)v113, (uint64_t)v7);
        if (v114 < 0) {
          operator delete(v113[0]);
        }
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
          return;
        }
        if (*((char *)this + 31) < 0) {
          operator delete(this[1]);
        }
        std::string::basic_string[abi:ne180100]<0>(&v111, "Convolution3D");
        CoreML::validateRankCount((uint64_t)this, (void *)a3, (uint64_t)&v111, 5, -1, (uint64_t)v7);
        if (SHIBYTE(v112) < 0) {
          operator delete((void *)v111);
        }
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
          return;
        }
        if (*((char *)this + 31) < 0) {
          operator delete(this[1]);
        }
      }
      if (*(_DWORD *)(a3 + 140) == 1471)
      {
        uint64_t v8 = *(uint64_t **)(a3 + 128);
      }
      else
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
        uint64_t v8 = &CoreML::Specification::_Convolution3DLayerParams_default_instance_;
      }
      if (*(_DWORD *)(a3 + 24) == 1)
      {
        int v9 = *((_DWORD *)v8 + 14);
        int v10 = *((_DWORD *)v8 + 15);
        int v11 = *((_DWORD *)v8 + 16);
        std::string::basic_string[abi:ne180100]<0>(&v111, "Input Channels");
        CoreML::validatePositive((CoreML::Result *)this, v10, (const void **)&v111);
        if (SHIBYTE(v112) < 0) {
          operator delete((void *)v111);
        }
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
          return;
        }
        if (*((char *)this + 31) < 0) {
          operator delete(this[1]);
        }
        std::string::basic_string[abi:ne180100]<0>(&v111, "Output Channels");
        CoreML::validatePositive((CoreML::Result *)this, v9, (const void **)&v111);
        if (SHIBYTE(v112) < 0) {
          operator delete((void *)v111);
        }
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
          return;
        }
        if (*((char *)this + 31) < 0) {
          operator delete(this[1]);
        }
        std::string::basic_string[abi:ne180100]<0>(&v111, "Groups");
        CoreML::validatePositive((CoreML::Result *)this, v11, (const void **)&v111);
        if (SHIBYTE(v112) < 0) {
          operator delete((void *)v111);
        }
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
          return;
        }
        if (*((char *)this + 31) < 0) {
          operator delete(this[1]);
        }
        int v12 = *((_DWORD *)v8 + 17);
        int v13 = *((_DWORD *)v8 + 18);
        int v14 = *((_DWORD *)v8 + 19);
        std::string::basic_string[abi:ne180100]<0>(&v111, "Kernel Depth");
        CoreML::validatePositive((CoreML::Result *)this, v12, (const void **)&v111);
        if (SHIBYTE(v112) < 0) {
          operator delete((void *)v111);
        }
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
          return;
        }
        if (*((char *)this + 31) < 0) {
          operator delete(this[1]);
        }
        std::string::basic_string[abi:ne180100]<0>(&v111, "Kernel Height");
        CoreML::validatePositive((CoreML::Result *)this, v13, (const void **)&v111);
        if (SHIBYTE(v112) < 0) {
          operator delete((void *)v111);
        }
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
          return;
        }
        if (*((char *)this + 31) < 0) {
          operator delete(this[1]);
        }
        std::string::basic_string[abi:ne180100]<0>(&v111, "Kernel Width");
        CoreML::validatePositive((CoreML::Result *)this, v14, (const void **)&v111);
        if (SHIBYTE(v112) < 0) {
          operator delete((void *)v111);
        }
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
          return;
        }
        int v103 = v14;
        if (*((char *)this + 31) < 0) {
          operator delete(this[1]);
        }
        int v15 = *((_DWORD *)v8 + 20);
        std::string::basic_string[abi:ne180100]<0>(&v111, "Stride Depth");
        CoreML::validatePositive((CoreML::Result *)this, v15, (const void **)&v111);
        if (SHIBYTE(v112) < 0) {
          operator delete((void *)v111);
        }
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
          return;
        }
        if (*((char *)this + 31) < 0) {
          operator delete(this[1]);
        }
        int v16 = *((_DWORD *)v8 + 21);
        std::string::basic_string[abi:ne180100]<0>(&v111, "Stride Height");
        CoreML::validatePositive((CoreML::Result *)this, v16, (const void **)&v111);
        if (SHIBYTE(v112) < 0) {
          operator delete((void *)v111);
        }
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
          return;
        }
        if (*((char *)this + 31) < 0) {
          operator delete(this[1]);
        }
        int v17 = *((_DWORD *)v8 + 22);
        std::string::basic_string[abi:ne180100]<0>(&v111, "Stride Width");
        CoreML::validatePositive((CoreML::Result *)this, v17, (const void **)&v111);
        if (SHIBYTE(v112) < 0) {
          operator delete((void *)v111);
        }
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
          return;
        }
        if (*((char *)this + 31) < 0) {
          operator delete(this[1]);
        }
        int v18 = *((_DWORD *)v8 + 23);
        std::string::basic_string[abi:ne180100]<0>(&v111, "Dilation Depth");
        CoreML::validatePositive((CoreML::Result *)this, v18, (const void **)&v111);
        if (SHIBYTE(v112) < 0) {
          operator delete((void *)v111);
        }
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
          return;
        }
        if (*((char *)this + 31) < 0) {
          operator delete(this[1]);
        }
        int v19 = *((_DWORD *)v8 + 24);
        std::string::basic_string[abi:ne180100]<0>(&v111, "Dilation Height");
        CoreML::validatePositive((CoreML::Result *)this, v19, (const void **)&v111);
        if (SHIBYTE(v112) < 0) {
          operator delete((void *)v111);
        }
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
          return;
        }
        if (*((char *)this + 31) < 0) {
          operator delete(this[1]);
        }
        int v20 = *((_DWORD *)v8 + 25);
        std::string::basic_string[abi:ne180100]<0>(&v111, "Dilation Width");
        CoreML::validatePositive((CoreML::Result *)this, v20, (const void **)&v111);
        if (SHIBYTE(v112) < 0) {
          operator delete((void *)v111);
        }
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
          return;
        }
        if (*((char *)this + 31) < 0) {
          operator delete(this[1]);
        }
        int v21 = *((_DWORD *)v8 + 28);
        if (v21 < 0)
        {
          std::to_string(&v109, v21);
          int v39 = std::string::insert(&v109, 0, "Custom Padding Front must be non-negative, got '");
          long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
          v110.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v110.__r_.__value_.__l.__data_ = v40;
          v39->__r_.__value_.__l.__size_ = 0;
          v39->__r_.__value_.__r.__words[2] = 0;
          v39->__r_.__value_.__r.__words[0] = 0;
          std::string::size_type v41 = std::string::append(&v110, "'.");
          long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
          std::string::size_type v112 = v41->__r_.__value_.__r.__words[2];
          long long v111 = v42;
          v41->__r_.__value_.__l.__size_ = 0;
          v41->__r_.__value_.__r.__words[2] = 0;
          v41->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v110.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v109.__r_.__value_.__l.__data_);
          }
          goto LABEL_193;
        }
        int v22 = *((_DWORD *)v8 + 29);
        if (v22 < 0)
        {
          std::to_string(&v109, v22);
          long long v43 = std::string::insert(&v109, 0, "Custom Padding Back must be non-negative, got '");
          long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
          v110.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v110.__r_.__value_.__l.__data_ = v44;
          v43->__r_.__value_.__l.__size_ = 0;
          v43->__r_.__value_.__r.__words[2] = 0;
          v43->__r_.__value_.__r.__words[0] = 0;
          long long v45 = std::string::append(&v110, "'.");
          long long v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
          std::string::size_type v112 = v45->__r_.__value_.__r.__words[2];
          long long v111 = v46;
          v45->__r_.__value_.__l.__size_ = 0;
          v45->__r_.__value_.__r.__words[2] = 0;
          v45->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v110.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v109.__r_.__value_.__l.__data_);
          }
          goto LABEL_193;
        }
        int v23 = *((_DWORD *)v8 + 30);
        if (v23 < 0)
        {
          std::to_string(&v109, v23);
          long long v47 = std::string::insert(&v109, 0, "Custom Padding Top must be non-negative, got '");
          long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
          v110.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v110.__r_.__value_.__l.__data_ = v48;
          v47->__r_.__value_.__l.__size_ = 0;
          v47->__r_.__value_.__r.__words[2] = 0;
          v47->__r_.__value_.__r.__words[0] = 0;
          std::string::size_type v49 = std::string::append(&v110, "'.");
          long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
          std::string::size_type v112 = v49->__r_.__value_.__r.__words[2];
          long long v111 = v50;
          v49->__r_.__value_.__l.__size_ = 0;
          v49->__r_.__value_.__r.__words[2] = 0;
          v49->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v110.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v109.__r_.__value_.__l.__data_);
          }
          goto LABEL_193;
        }
        int v24 = *((_DWORD *)v8 + 31);
        if (v24 < 0)
        {
          std::to_string(&v109, v24);
          long long v51 = std::string::insert(&v109, 0, "Custom Padding Bottom must be non-negative, got '");
          long long v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
          v110.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v110.__r_.__value_.__l.__data_ = v52;
          v51->__r_.__value_.__l.__size_ = 0;
          v51->__r_.__value_.__r.__words[2] = 0;
          v51->__r_.__value_.__r.__words[0] = 0;
          int v53 = std::string::append(&v110, "'.");
          long long v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
          std::string::size_type v112 = v53->__r_.__value_.__r.__words[2];
          long long v111 = v54;
          v53->__r_.__value_.__l.__size_ = 0;
          v53->__r_.__value_.__r.__words[2] = 0;
          v53->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v110.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v109.__r_.__value_.__l.__data_);
          }
          goto LABEL_193;
        }
        int v25 = *((_DWORD *)v8 + 32);
        if (v25 < 0)
        {
          std::to_string(&v109, v25);
          std::string::size_type v55 = std::string::insert(&v109, 0, "customPadding Left must be non-negative, got '");
          long long v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
          v110.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v110.__r_.__value_.__l.__data_ = v56;
          v55->__r_.__value_.__l.__size_ = 0;
          v55->__r_.__value_.__r.__words[2] = 0;
          v55->__r_.__value_.__r.__words[0] = 0;
          long long v57 = std::string::append(&v110, "'.");
          long long v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
          std::string::size_type v112 = v57->__r_.__value_.__r.__words[2];
          long long v111 = v58;
          v57->__r_.__value_.__l.__size_ = 0;
          v57->__r_.__value_.__r.__words[2] = 0;
          v57->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v110.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v109.__r_.__value_.__l.__data_);
          }
          goto LABEL_193;
        }
        int v26 = *((_DWORD *)v8 + 33);
        if (v26 < 0)
        {
          std::to_string(&v109, v26);
          long long v59 = std::string::insert(&v109, 0, "customPadding Right must be non-negative, got '");
          long long v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
          v110.__r_.__value_.__r.__words[2] = v59->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v110.__r_.__value_.__l.__data_ = v60;
          v59->__r_.__value_.__l.__size_ = 0;
          v59->__r_.__value_.__r.__words[2] = 0;
          v59->__r_.__value_.__r.__words[0] = 0;
          uint64_t v61 = std::string::append(&v110, "'.");
          long long v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
          std::string::size_type v112 = v61->__r_.__value_.__r.__words[2];
          long long v111 = v62;
          v61->__r_.__value_.__l.__size_ = 0;
          v61->__r_.__value_.__r.__words[2] = 0;
          v61->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v110.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v109.__r_.__value_.__l.__data_);
          }
          goto LABEL_193;
        }
        if (v8[5]) {
          std::string v27 = (uint64_t *)v8[5];
        }
        else {
          std::string v27 = &CoreML::Specification::_WeightParams_default_instance_;
        }
        uint64_t v100 = (uint64_t)v27;
        int v28 = CoreML::valueType(v27);
        if (v8[6]) {
          long long v29 = (uint64_t *)v8[6];
        }
        else {
          long long v29 = &CoreML::Specification::_WeightParams_default_instance_;
        }
        unsigned int v30 = CoreML::valueType(v29);
        unsigned int v101 = v30;
        int v102 = *((unsigned __int8 *)v8 + 104);
        if (*((unsigned char *)v8 + 104)) {
          BOOL v31 = v30 == 4;
        }
        else {
          BOOL v31 = 0;
        }
        int v32 = v31;
        if (v28 == 4 || v32)
        {
          std::operator+<char>();
          std::string::size_type v63 = std::string::append(&v110, "'  has invalid weights/bias fields.");
          long long v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
          std::string::size_type v112 = v63->__r_.__value_.__r.__words[2];
          long long v111 = v64;
          v63->__r_.__value_.__l.__size_ = 0;
          v63->__r_.__value_.__r.__words[2] = 0;
          v63->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v110.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          int v33 = v28;
          if (*((unsigned char *)v8 + 104) && (v28 == 1 && !v30 || !v28 && v30 == 1))
          {
            std::operator+<char>();
            long long v34 = std::string::append(&v110, "' has unmatched precisions of weights/bias They should either be half or full precision.");
            long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
            std::string::size_type v112 = v34->__r_.__value_.__r.__words[2];
            long long v111 = v35;
            v34->__r_.__value_.__l.__size_ = 0;
            v34->__r_.__value_.__r.__words[2] = 0;
            v34->__r_.__value_.__r.__words[0] = 0;
            *this = (void *)13;
            std::operator+<char>();
LABEL_109:
            if (SHIBYTE(v112) < 0) {
              operator delete((void *)v111);
            }
            if ((SHIBYTE(v110.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              return;
            }
            std::string::size_type v36 = (void *)v110.__r_.__value_.__r.__words[0];
LABEL_118:
            operator delete(v36);
            return;
          }
          int v65 = *((_DWORD *)v8 + 4);
          if (!v65)
          {
            if (v28 != 2)
            {
              if (*((unsigned char *)v8 + 105)) {
                int v66 = v9;
              }
              else {
                int v66 = v10;
              }
              if (!*((unsigned char *)v8 + 105)) {
                int v10 = v9;
              }
              goto LABEL_174;
            }
LABEL_158:
            std::operator+<char>();
            long long v67 = std::string::append(&v109, "' has invalid weights field. Quantized ");
            long long v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
            v110.__r_.__value_.__r.__words[2] = v67->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v110.__r_.__value_.__l.__data_ = v68;
            v67->__r_.__value_.__l.__size_ = 0;
            v67->__r_.__value_.__r.__words[2] = 0;
            v67->__r_.__value_.__r.__words[0] = 0;
            long long v69 = std::string::append(&v110, "weights are not supported.");
            long long v70 = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
            std::string::size_type v112 = v69->__r_.__value_.__r.__words[2];
            long long v111 = v70;
            v69->__r_.__value_.__l.__size_ = 0;
            v69->__r_.__value_.__r.__words[2] = 0;
            v69->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v110.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v109.__r_.__value_.__l.__data_);
            }
            goto LABEL_193;
          }
          if (*((unsigned char *)v8 + 105))
          {
            if (v65 == 3)
            {
              int v66 = v9;
              if (v33 != 2)
              {
LABEL_174:
                std::string::basic_string[abi:ne180100]<0>(&v111, "Convolution3D ");
                uint64_t v99 = *(void *)(a3 + 112);
                std::string::basic_string[abi:ne180100]<0>(&v110, "weights");
                CoreML::validateGeneralWeightParams((uint64_t)this, v100, v13 * v12 * v103 * v66 / v11 * v10, v9, (const void **)&v111, v99, (uint64_t)&v110);
                if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v110.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v112) < 0) {
                  operator delete((void *)v111);
                }
                if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
                  return;
                }
                if (*((char *)this + 31) < 0) {
                  operator delete(this[1]);
                }
                if (!v102)
                {
LABEL_199:
                  CoreML::Result::Result((CoreML::Result *)this);
                  return;
                }
                if (v101 <= 1)
                {
                  uint64_t v75 = (uint64_t *)v8[6];
                  if (!v75) {
                    uint64_t v75 = &CoreML::Specification::_WeightParams_default_instance_;
                  }
                  if (v101)
                  {
                    uint64_t v76 = v75[5];
                    if (*(char *)(v76 + 23) < 0) {
                      unint64_t v77 = *(void *)(v76 + 8);
                    }
                    else {
                      unint64_t v77 = *(unsigned __int8 *)(v76 + 23);
                    }
                    unint64_t v84 = v77 >> 1;
                  }
                  else
                  {
                    LODWORD(v84) = *((_DWORD *)v75 + 4);
                  }
                  if (v84 == v9) {
                    goto LABEL_199;
                  }
                  std::operator+<char>();
                  char v85 = std::string::append(&v106, "' has a bias vector of size ");
                  long long v86 = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
                  v107.__r_.__value_.__r.__words[2] = v85->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v107.__r_.__value_.__l.__data_ = v86;
                  v85->__r_.__value_.__l.__size_ = 0;
                  v85->__r_.__value_.__r.__words[2] = 0;
                  v85->__r_.__value_.__r.__words[0] = 0;
                  std::to_string(&v105, v84);
                  if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    std::string v87 = &v105;
                  }
                  else {
                    std::string v87 = (std::string *)v105.__r_.__value_.__r.__words[0];
                  }
                  if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    std::string::size_type size = HIBYTE(v105.__r_.__value_.__r.__words[2]);
                  }
                  else {
                    std::string::size_type size = v105.__r_.__value_.__l.__size_;
                  }
                  std::string v89 = std::string::append(&v107, (const std::string::value_type *)v87, size);
                  long long v90 = *(_OWORD *)&v89->__r_.__value_.__l.__data_;
                  v108.__r_.__value_.__r.__words[2] = v89->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v108.__r_.__value_.__l.__data_ = v90;
                  v89->__r_.__value_.__l.__size_ = 0;
                  v89->__r_.__value_.__r.__words[2] = 0;
                  v89->__r_.__value_.__r.__words[0] = 0;
                  std::string v91 = std::string::append(&v108, " but should be ");
                  long long v92 = *(_OWORD *)&v91->__r_.__value_.__l.__data_;
                  v109.__r_.__value_.__r.__words[2] = v91->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v109.__r_.__value_.__l.__data_ = v92;
                  v91->__r_.__value_.__l.__size_ = 0;
                  v91->__r_.__value_.__r.__words[2] = 0;
                  v91->__r_.__value_.__r.__words[0] = 0;
                  std::to_string(&v104, v9);
                  if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    std::string v93 = &v104;
                  }
                  else {
                    std::string v93 = (std::string *)v104.__r_.__value_.__r.__words[0];
                  }
                  if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    std::string::size_type v94 = HIBYTE(v104.__r_.__value_.__r.__words[2]);
                  }
                  else {
                    std::string::size_type v94 = v104.__r_.__value_.__l.__size_;
                  }
                  std::string v95 = std::string::append(&v109, (const std::string::value_type *)v93, v94);
                  long long v96 = *(_OWORD *)&v95->__r_.__value_.__l.__data_;
                  v110.__r_.__value_.__r.__words[2] = v95->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v110.__r_.__value_.__l.__data_ = v96;
                  v95->__r_.__value_.__l.__size_ = 0;
                  v95->__r_.__value_.__r.__words[2] = 0;
                  v95->__r_.__value_.__r.__words[0] = 0;
                  long long v97 = std::string::append(&v110, ".");
                  long long v98 = *(_OWORD *)&v97->__r_.__value_.__l.__data_;
                  std::string::size_type v112 = v97->__r_.__value_.__r.__words[2];
                  long long v111 = v98;
                  v97->__r_.__value_.__l.__size_ = 0;
                  v97->__r_.__value_.__r.__words[2] = 0;
                  v97->__r_.__value_.__r.__words[0] = 0;
                  if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v110.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v104.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v109.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v108.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v105.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v107.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v106.__r_.__value_.__l.__data_);
                  }
                  *this = (void *)13;
                  std::operator+<char>();
LABEL_116:
                  if ((SHIBYTE(v112) & 0x80000000) == 0) {
                    return;
                  }
                  std::string::size_type v36 = (void *)v111;
                  goto LABEL_118;
                }
                if (v101 != 2)
                {
                  std::operator+<char>();
                  long long v82 = std::string::append(&v110, "has not specified bias.");
                  long long v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
                  std::string::size_type v112 = v82->__r_.__value_.__r.__words[2];
                  long long v111 = v83;
                  v82->__r_.__value_.__l.__size_ = 0;
                  v82->__r_.__value_.__r.__words[2] = 0;
                  v82->__r_.__value_.__r.__words[0] = 0;
                  *this = (void *)13;
                  std::operator+<char>();
                  goto LABEL_109;
                }
                std::operator+<char>();
                long long v78 = std::string::append(&v109, "' has invalid bias field. Quantized ");
                long long v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
                v110.__r_.__value_.__r.__words[2] = v78->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v110.__r_.__value_.__l.__data_ = v79;
                v78->__r_.__value_.__l.__size_ = 0;
                v78->__r_.__value_.__r.__words[2] = 0;
                v78->__r_.__value_.__r.__words[0] = 0;
                long long v80 = std::string::append(&v110, "bias is not supported.");
                long long v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
                std::string::size_type v112 = v80->__r_.__value_.__r.__words[2];
                long long v111 = v81;
                v80->__r_.__value_.__l.__size_ = 0;
                v80->__r_.__value_.__r.__words[2] = 0;
                v80->__r_.__value_.__r.__words[0] = 0;
                if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v110.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v109.__r_.__value_.__l.__data_);
                }
LABEL_193:
                *this = (void *)13;
                std::operator+<char>();
                goto LABEL_116;
              }
              goto LABEL_158;
            }
            std::operator+<char>();
            uint64_t v73 = std::string::append(&v110, "' , if set, output shape must be of length 3.");
            long long v74 = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
            std::string::size_type v112 = v73->__r_.__value_.__r.__words[2];
            long long v111 = v74;
            v73->__r_.__value_.__l.__size_ = 0;
            v73->__r_.__value_.__r.__words[2] = 0;
            v73->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v110.__r_.__value_.__l.__data_);
            }
          }
          else
          {
            std::operator+<char>();
            long long v71 = std::string::append(&v110, "' Output Shape is supported for Deconvolution layer.");
            long long v72 = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
            std::string::size_type v112 = v71->__r_.__value_.__r.__words[2];
            long long v111 = v72;
            v71->__r_.__value_.__l.__size_ = 0;
            v71->__r_.__value_.__r.__words[2] = 0;
            v71->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v110.__r_.__value_.__l.__data_);
            }
          }
        }
      }
      else
      {
        std::operator+<char>();
        std::string::size_type v37 = std::string::append(&v110, "', convolution3D does not support weight as input tensor.");
        long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
        std::string::size_type v112 = v37->__r_.__value_.__r.__words[2];
        long long v111 = v38;
        v37->__r_.__value_.__l.__size_ = 0;
        v37->__r_.__value_.__r.__words[2] = 0;
        v37->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v110.__r_.__value_.__l.__data_);
        }
      }
      *this = (void *)13;
      std::operator+<char>();
      goto LABEL_116;
    }
  }
}

void sub_19EAE50FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  if (*(char *)(v51 - 121) < 0) {
    operator delete(*(void **)(v51 - 144));
  }
  _Unwind_Resume(exception_object);
}

void CoreML::validatePositive(CoreML::Result *this, int a2, const void **a3)
{
  if (a2 <= 0)
  {
    if (*((char *)a3 + 23) >= 0) {
      size_t v6 = *((unsigned __int8 *)a3 + 23);
    }
    else {
      size_t v6 = (size_t)a3[1];
    }
    uint64_t v7 = &v16;
    std::string::basic_string[abi:ne180100]((uint64_t)&v16, v6 + 23);
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v7 = (std::string *)v16.__r_.__value_.__r.__words[0];
    }
    if (v6)
    {
      if (*((char *)a3 + 23) >= 0) {
        uint64_t v8 = a3;
      }
      else {
        uint64_t v8 = *a3;
      }
      memmove(v7, v8, v6);
    }
    strcpy((char *)v7 + v6, " must be positive, got ");
    std::to_string(&__p, a2);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    int v11 = std::string::append(&v16, (const std::string::value_type *)p_p, size);
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    int v13 = std::string::append(&v17, ".");
    long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    std::string::size_type v19 = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)int v18 = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v17.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v16.__r_.__value_.__l.__data_);
    }
    *(void *)this = 13;
    std::operator+<char>();
    if (SHIBYTE(v19) < 0) {
      operator delete(v18[0]);
    }
  }
  else
  {
    CoreML::Result::Result(this);
  }
}

void sub_19EAE54B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateInnerProductLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2, uint64_t a3)
{
  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0) {
      operator delete(this[1]);
    }
    CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0) {
        operator delete(this[1]);
      }
      if (*(unsigned char *)a2)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "InnerProduct");
        uint64_t v7 = (char *)a2 + 32;
        CoreML::validateInputOutputRankEquality((CoreML::Result *)this, (void *)a3, (uint64_t)__p, (uint64_t)v7);
        if (v15 < 0) {
          operator delete(__p[0]);
        }
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
          return;
        }
        if (*((char *)this + 31) < 0) {
          operator delete(this[1]);
        }
        std::string::basic_string[abi:ne180100]<0>(v12, "InnerProduct");
        CoreML::validateRankCount((uint64_t)this, (void *)a3, (uint64_t)v12, 1, 5, (uint64_t)v7);
        if (v13 < 0) {
          operator delete(v12[0]);
        }
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
          return;
        }
        if (*((char *)this + 31) < 0) {
          operator delete(this[1]);
        }
      }
      if (*(_DWORD *)(a3 + 140) == 140)
      {
        uint64_t v8 = *(uint64_t **)(a3 + 128);
      }
      else
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
        uint64_t v8 = &CoreML::Specification::_InnerProductLayerParams_default_instance_;
      }
      if (*((unsigned char *)v8 + 49))
      {
        if (v8[2]) {
          int v9 = (uint64_t *)v8[2];
        }
        else {
          int v9 = &CoreML::Specification::_WeightParams_default_instance_;
        }
        std::string::basic_string[abi:ne180100]<0>(v12, "InnerProduct");
        CoreML::validateInt8Requirements((CoreML::Result *)this, (uint64_t)v9, (uint64_t)v12);
        if (v13 < 0) {
          operator delete(v12[0]);
        }
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
          return;
        }
        if (*((char *)this + 31) < 0) {
          operator delete(this[1]);
        }
      }
      if (v8[2]) {
        int v10 = (const CoreML::Specification::WeightParams *)v8[2];
      }
      else {
        int v10 = (const CoreML::Specification::WeightParams *)&CoreML::Specification::_WeightParams_default_instance_;
      }
      if (v8[3]) {
        int v11 = (uint64_t *)v8[3];
      }
      else {
        int v11 = &CoreML::Specification::_WeightParams_default_instance_;
      }
      validateInnerProductWeightsBias(this, (const CoreML::Specification::WeightParams *)a3, v10, v11);
      if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
      {
        if (*((char *)this + 31) < 0) {
          operator delete(this[1]);
        }
        CoreML::Result::Result((CoreML::Result *)this);
      }
    }
  }
}

void sub_19EAE5734(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void validateInnerProductWeightsBias(void **this, const CoreML::Specification::WeightParams *a2, const CoreML::Specification::WeightParams *a3, uint64_t *a4)
{
  std::string::size_type v130 = 0;
  size_t v131 = 0;
  uint64_t v132 = 0;
  int v8 = *((_DWORD *)a2 + 35);
  if (v8 == 140)
  {
    uint64_t v13 = *((void *)a2 + 16);
    unint64_t v11 = *(void *)(v13 + 32);
    unint64_t v10 = *(void *)(v13 + 40);
    int v12 = *(unsigned __int8 *)(v13 + 48);
    MEMORY[0x19F3C1430](&v130, "Inner product");
  }
  else
  {
    if (v8 != 1045)
    {
      CoreML::Result::Result((CoreML::Result *)this);
      goto LABEL_233;
    }
    uint64_t v9 = *((void *)a2 + 16);
    unint64_t v11 = *(void *)(v9 + 32);
    unint64_t v10 = *(void *)(v9 + 40);
    int v12 = *(unsigned __int8 *)(v9 + 50);
    MEMORY[0x19F3C1430](&v130, "BatchedMatMul");
  }
  uint64_t v14 = *((void *)a3 + 5);
  unint64_t v15 = *(unsigned __int8 *)(v14 + 23);
  if (*(char *)(v14 + 23) < 0) {
    uint64_t v16 = *(void *)(v14 + 8);
  }
  else {
    uint64_t v16 = *(unsigned __int8 *)(v14 + 23);
  }
  unint64_t v17 = *((int *)a3 + 4);
  uint64_t v18 = *((void *)a3 + 6);
  uint64_t v19 = *(unsigned __int8 *)(v18 + 23);
  if (*(char *)(v18 + 23) < 0) {
    uint64_t v20 = *(void *)(v18 + 8);
  }
  else {
    uint64_t v20 = *(unsigned __int8 *)(v18 + 23);
  }
  uint64_t v21 = *((void *)a3 + 7);
  uint64_t v22 = *(unsigned __int8 *)(v21 + 23);
  if (*(char *)(v21 + 23) < 0) {
    uint64_t v23 = *(void *)(v21 + 8);
  }
  else {
    uint64_t v23 = *(unsigned __int8 *)(v21 + 23);
  }
  if ((int)v17 <= 0) {
    int v24 = 1;
  }
  else {
    int v24 = 2;
  }
  if (v16) {
    unsigned int v25 = v24;
  }
  else {
    unsigned int v25 = (int)v17 > 0;
  }
  if (v20) {
    ++v25;
  }
  if (v23) {
    unsigned int v26 = v25 + 1;
  }
  else {
    unsigned int v26 = v25;
  }
  if (v26 > 1)
  {
    unsigned int v27 = 4;
    goto LABEL_54;
  }
  if (v26) {
    unsigned int v27 = 0;
  }
  else {
    unsigned int v27 = 5;
  }
  if ((int)v17 <= 0 && v26)
  {
    if ((v15 & 0x80) != 0)
    {
      if (*(void *)(v14 + 8)) {
        goto LABEL_35;
      }
    }
    else if (*(unsigned char *)(v14 + 23))
    {
LABEL_35:
      unsigned int v27 = 1;
      goto LABEL_54;
    }
    if ((v19 & 0x80) != 0) {
      uint64_t v19 = *(void *)(v18 + 8);
    }
    uint64_t v28 = *((void *)a3 + 8);
    if (a3 != (const CoreML::Specification::WeightParams *)&CoreML::Specification::_WeightParams_default_instance_
      && v19
      && v28)
    {
      unsigned int v27 = 2;
    }
    else
    {
      if ((v22 & 0x80) != 0) {
        uint64_t v22 = *(void *)(v21 + 8);
      }
      if (v28) {
        BOOL v29 = v22 == 0;
      }
      else {
        BOOL v29 = 1;
      }
      if (v29
        || a3 == (const CoreML::Specification::WeightParams *)&CoreML::Specification::_WeightParams_default_instance_)
      {
        unsigned int v27 = 5;
      }
      else
      {
        unsigned int v27 = 3;
      }
    }
  }
LABEL_54:
  uint64_t v31 = a4[5];
  if (*(char *)(v31 + 23) < 0) {
    uint64_t v32 = *(void *)(v31 + 8);
  }
  else {
    uint64_t v32 = *(unsigned __int8 *)(v31 + 23);
  }
  uint64_t v33 = a4[6];
  uint64_t v34 = *(unsigned __int8 *)(v33 + 23);
  if (*(char *)(v33 + 23) < 0) {
    uint64_t v35 = *(void *)(v33 + 8);
  }
  else {
    uint64_t v35 = *(unsigned __int8 *)(v33 + 23);
  }
  int v36 = *((_DWORD *)a4 + 4);
  uint64_t v37 = a4[7];
  uint64_t v38 = *(unsigned __int8 *)(v37 + 23);
  if (*(char *)(v37 + 23) < 0) {
    uint64_t v39 = *(void *)(v37 + 8);
  }
  else {
    uint64_t v39 = *(unsigned __int8 *)(v37 + 23);
  }
  if (v36 <= 0) {
    int v40 = 1;
  }
  else {
    int v40 = 2;
  }
  if (v32) {
    unsigned int v41 = v40;
  }
  else {
    unsigned int v41 = v36 > 0;
  }
  if (v35) {
    ++v41;
  }
  if (v39) {
    ++v41;
  }
  if (v41 > 1)
  {
    unsigned int v42 = 4;
    goto LABEL_101;
  }
  if (v41) {
    unsigned int v42 = 0;
  }
  else {
    unsigned int v42 = 5;
  }
  if (v36 <= 0 && v41)
  {
    if ((*(unsigned char *)(v31 + 23) & 0x80) != 0)
    {
      if (*(void *)(v31 + 8)) {
        goto LABEL_82;
      }
    }
    else if (*(unsigned char *)(v31 + 23))
    {
LABEL_82:
      unsigned int v42 = 1;
      goto LABEL_101;
    }
    if ((v34 & 0x80) != 0) {
      uint64_t v34 = *(void *)(v33 + 8);
    }
    uint64_t v43 = a4[8];
    if (a4 != &CoreML::Specification::_WeightParams_default_instance_ && v34 && v43)
    {
      unsigned int v42 = 2;
    }
    else
    {
      if ((v38 & 0x80) != 0) {
        uint64_t v38 = *(void *)(v37 + 8);
      }
      if (v43) {
        BOOL v44 = v38 == 0;
      }
      else {
        BOOL v44 = 1;
      }
      if (v44 || a4 == &CoreML::Specification::_WeightParams_default_instance_) {
        unsigned int v42 = 5;
      }
      else {
        unsigned int v42 = 3;
      }
    }
  }
LABEL_101:
  if (v12) {
    BOOL v46 = v42 == 4;
  }
  else {
    BOOL v46 = 0;
  }
  int v47 = v46;
  if (v27 == 4 || v47)
  {
    if (v132 >= 0) {
      size_t v59 = HIBYTE(v132);
    }
    else {
      size_t v59 = v131;
    }
    long long v60 = &v126;
    std::string::basic_string[abi:ne180100]((uint64_t)&v126, v59 + 8);
    if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      long long v60 = (std::string *)v126.__r_.__value_.__r.__words[0];
    }
    if (v59)
    {
      if (v132 >= 0) {
        uint64_t v61 = (void **)&v130;
      }
      else {
        uint64_t v61 = v130;
      }
      memmove(v60, v61, v59);
    }
    strcpy((char *)v60 + v59, " layer '");
    uint64_t v62 = *((void *)a2 + 14);
    int v63 = *(char *)(v62 + 23);
    if (v63 >= 0) {
      long long v64 = (const std::string::value_type *)*((void *)a2 + 14);
    }
    else {
      long long v64 = *(const std::string::value_type **)v62;
    }
    if (v63 >= 0) {
      std::string::size_type v65 = *(unsigned __int8 *)(v62 + 23);
    }
    else {
      std::string::size_type v65 = *(void *)(v62 + 8);
    }
    int v66 = std::string::append(&v126, v64, v65);
    long long v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
    v127.__r_.__value_.__r.__words[2] = v66->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v127.__r_.__value_.__l.__data_ = v67;
    v66->__r_.__value_.__l.__size_ = 0;
    v66->__r_.__value_.__r.__words[2] = 0;
    v66->__r_.__value_.__r.__words[0] = 0;
    long long v68 = std::string::append(&v127, "' has invalid weights/bias fields.");
    long long v69 = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
    std::string::size_type v129 = v68->__r_.__value_.__r.__words[2];
    long long v128 = v69;
    v68->__r_.__value_.__l.__size_ = 0;
    v68->__r_.__value_.__r.__words[2] = 0;
    v68->__r_.__value_.__r.__words[0] = 0;
    *this = (void *)13;
    std::operator+<char>();
LABEL_148:
    if (SHIBYTE(v129) < 0) {
      operator delete((void *)v128);
    }
    if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v127.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
    {
      long long v70 = (void *)v126.__r_.__value_.__r.__words[0];
LABEL_154:
      operator delete(v70);
      goto LABEL_233;
    }
    goto LABEL_233;
  }
  if (v12 && (v27 == 1 && !v42 || !v27 && v42 == 1))
  {
    if (v132 >= 0) {
      size_t v48 = HIBYTE(v132);
    }
    else {
      size_t v48 = v131;
    }
    std::string::size_type v49 = &v126;
    std::string::basic_string[abi:ne180100]((uint64_t)&v126, v48 + 8);
    if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v49 = (std::string *)v126.__r_.__value_.__r.__words[0];
    }
    if (v48)
    {
      if (v132 >= 0) {
        long long v50 = (void **)&v130;
      }
      else {
        long long v50 = v130;
      }
      memmove(v49, v50, v48);
    }
    strcpy((char *)v49 + v48, " layer '");
    uint64_t v51 = *((void *)a2 + 14);
    int v52 = *(char *)(v51 + 23);
    if (v52 >= 0) {
      int v53 = (const std::string::value_type *)*((void *)a2 + 14);
    }
    else {
      int v53 = *(const std::string::value_type **)v51;
    }
    if (v52 >= 0) {
      std::string::size_type v54 = *(unsigned __int8 *)(v51 + 23);
    }
    else {
      std::string::size_type v54 = *(void *)(v51 + 8);
    }
    std::string::size_type v55 = std::string::append(&v126, v53, v54);
    long long v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
    v127.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v127.__r_.__value_.__l.__data_ = v56;
    v55->__r_.__value_.__l.__size_ = 0;
    v55->__r_.__value_.__r.__words[2] = 0;
    v55->__r_.__value_.__r.__words[0] = 0;
    long long v57 = std::string::append(&v127, "has unmatched precisions of weights/bias They should either be half or full precision.");
    long long v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
    std::string::size_type v129 = v57->__r_.__value_.__r.__words[2];
    long long v128 = v58;
    v57->__r_.__value_.__l.__size_ = 0;
    v57->__r_.__value_.__r.__words[2] = 0;
    v57->__r_.__value_.__r.__words[0] = 0;
    *this = (void *)13;
    std::operator+<char>();
    goto LABEL_148;
  }
  if (v27 > 1)
  {
    if (v27 == 2)
    {
      uint64_t v97 = *((void *)a2 + 14);
      std::string::basic_string[abi:ne180100]<0>(&v128, "weight");
      CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)a3, v11 * v10, v10, (const void **)&v130, v97, (uint64_t)&v128);
      if (SHIBYTE(v129) < 0) {
        operator delete((void *)v128);
      }
      if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
        goto LABEL_233;
      }
      if (*((char *)this + 31) < 0) {
        operator delete(this[1]);
      }
    }
LABEL_217:
    if (v12)
    {
      if (v42 > 1)
      {
        if (v42 == 2)
        {
          uint64_t v100 = *((void *)a2 + 14);
          std::string::basic_string[abi:ne180100]<0>(&v128, "bias");
          CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)a4, v10, 1, (const void **)&v130, v100, (uint64_t)&v128);
          if (SHIBYTE(v129) < 0) {
            operator delete((void *)v128);
          }
          if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
            goto LABEL_233;
          }
          if (*((char *)this + 31) < 0) {
            operator delete(this[1]);
          }
        }
      }
      else
      {
        if (v42)
        {
          uint64_t v98 = a4[5];
          if (*(char *)(v98 + 23) < 0) {
            unint64_t v99 = *(void *)(v98 + 8);
          }
          else {
            unint64_t v99 = *(unsigned __int8 *)(v98 + 23);
          }
          unint64_t v101 = v99 >> 1;
        }
        else
        {
          unint64_t v101 = *((int *)a4 + 4);
        }
        if (v101 != v10)
        {
          std::operator+<char>();
          int v102 = std::string::append(&v123, "' has incorrect bias vector size ");
          long long v103 = *(_OWORD *)&v102->__r_.__value_.__l.__data_;
          v124.__r_.__value_.__r.__words[2] = v102->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v124.__r_.__value_.__l.__data_ = v103;
          v102->__r_.__value_.__l.__size_ = 0;
          v102->__r_.__value_.__r.__words[2] = 0;
          v102->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v122, v101);
          if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string v104 = &v122;
          }
          else {
            std::string v104 = (std::string *)v122.__r_.__value_.__r.__words[0];
          }
          if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v122.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v122.__r_.__value_.__l.__size_;
          }
          std::string v106 = std::string::append(&v124, (const std::string::value_type *)v104, size);
          long long v107 = *(_OWORD *)&v106->__r_.__value_.__l.__data_;
          v125.__r_.__value_.__r.__words[2] = v106->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v125.__r_.__value_.__l.__data_ = v107;
          v106->__r_.__value_.__l.__size_ = 0;
          v106->__r_.__value_.__r.__words[2] = 0;
          v106->__r_.__value_.__r.__words[0] = 0;
          std::string v108 = std::string::append(&v125, " (expected ");
          long long v109 = *(_OWORD *)&v108->__r_.__value_.__l.__data_;
          v126.__r_.__value_.__r.__words[2] = v108->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v126.__r_.__value_.__l.__data_ = v109;
          v108->__r_.__value_.__l.__size_ = 0;
          v108->__r_.__value_.__r.__words[2] = 0;
          v108->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v121, v10);
          if ((v121.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string v110 = &v121;
          }
          else {
            std::string v110 = (std::string *)v121.__r_.__value_.__r.__words[0];
          }
          if ((v121.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v111 = HIBYTE(v121.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v111 = v121.__r_.__value_.__l.__size_;
          }
          std::string::size_type v112 = std::string::append(&v126, (const std::string::value_type *)v110, v111);
          long long v113 = *(_OWORD *)&v112->__r_.__value_.__l.__data_;
          v127.__r_.__value_.__r.__words[2] = v112->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v127.__r_.__value_.__l.__data_ = v113;
          v112->__r_.__value_.__l.__size_ = 0;
          v112->__r_.__value_.__r.__words[2] = 0;
          v112->__r_.__value_.__r.__words[0] = 0;
          char v114 = std::string::append(&v127, ").");
          long long v115 = *(_OWORD *)&v114->__r_.__value_.__l.__data_;
          std::string::size_type v129 = v114->__r_.__value_.__r.__words[2];
          long long v128 = v115;
          v114->__r_.__value_.__l.__size_ = 0;
          v114->__r_.__value_.__r.__words[2] = 0;
          v114->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v127.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v121.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v126.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v125.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v122.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v124.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v123.__r_.__value_.__l.__data_);
          }
          *this = (void *)13;
          std::operator+<char>();
          if (SHIBYTE(v129) < 0)
          {
            long long v70 = (void *)v128;
            goto LABEL_154;
          }
          goto LABEL_233;
        }
      }
    }
    CoreML::Result::Result((CoreML::Result *)this);
    goto LABEL_233;
  }
  if (v27)
  {
    if ((v15 & 0x80) != 0) {
      unint64_t v15 = *(void *)(v14 + 8);
    }
    unint64_t v17 = v15 >> 1;
  }
  if (v11 * v10 == v17) {
    goto LABEL_217;
  }
  std::operator+<char>();
  long long v71 = std::string::append(&v119, " has incorrect weight matrix size ");
  long long v72 = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
  v120.__r_.__value_.__r.__words[2] = v71->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v120.__r_.__value_.__l.__data_ = v72;
  v71->__r_.__value_.__l.__size_ = 0;
  v71->__r_.__value_.__r.__words[2] = 0;
  v71->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v118, v17);
  if ((v118.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v73 = &v118;
  }
  else {
    uint64_t v73 = (std::string *)v118.__r_.__value_.__r.__words[0];
  }
  if ((v118.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v74 = HIBYTE(v118.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v74 = v118.__r_.__value_.__l.__size_;
  }
  uint64_t v75 = std::string::append(&v120, (const std::string::value_type *)v73, v74);
  long long v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
  v121.__r_.__value_.__r.__words[2] = v75->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v121.__r_.__value_.__l.__data_ = v76;
  v75->__r_.__value_.__l.__size_ = 0;
  v75->__r_.__value_.__r.__words[2] = 0;
  v75->__r_.__value_.__r.__words[0] = 0;
  unint64_t v77 = std::string::append(&v121, " to encode a ");
  long long v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
  v122.__r_.__value_.__r.__words[2] = v77->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v122.__r_.__value_.__l.__data_ = v78;
  v77->__r_.__value_.__l.__size_ = 0;
  v77->__r_.__value_.__r.__words[2] = 0;
  v77->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v117, v11);
  if ((v117.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v79 = &v117;
  }
  else {
    long long v79 = (std::string *)v117.__r_.__value_.__r.__words[0];
  }
  if ((v117.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v80 = HIBYTE(v117.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v80 = v117.__r_.__value_.__l.__size_;
  }
  long long v81 = std::string::append(&v122, (const std::string::value_type *)v79, v80);
  long long v82 = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
  v123.__r_.__value_.__r.__words[2] = v81->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v123.__r_.__value_.__l.__data_ = v82;
  v81->__r_.__value_.__l.__size_ = 0;
  v81->__r_.__value_.__r.__words[2] = 0;
  v81->__r_.__value_.__r.__words[0] = 0;
  long long v83 = std::string::append(&v123, " × ");
  long long v84 = *(_OWORD *)&v83->__r_.__value_.__l.__data_;
  v124.__r_.__value_.__r.__words[2] = v83->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v124.__r_.__value_.__l.__data_ = v84;
  v83->__r_.__value_.__l.__size_ = 0;
  v83->__r_.__value_.__r.__words[2] = 0;
  v83->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, v10);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v86 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v86 = __p.__r_.__value_.__l.__size_;
  }
  std::string v87 = std::string::append(&v124, (const std::string::value_type *)p_p, v86);
  long long v88 = *(_OWORD *)&v87->__r_.__value_.__l.__data_;
  v125.__r_.__value_.__r.__words[2] = v87->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v125.__r_.__value_.__l.__data_ = v88;
  v87->__r_.__value_.__l.__size_ = 0;
  v87->__r_.__value_.__r.__words[2] = 0;
  v87->__r_.__value_.__r.__words[0] = 0;
  std::string v89 = std::string::append(&v125, " ");
  long long v90 = *(_OWORD *)&v89->__r_.__value_.__l.__data_;
  v126.__r_.__value_.__r.__words[2] = v89->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v126.__r_.__value_.__l.__data_ = v90;
  v89->__r_.__value_.__l.__size_ = 0;
  v89->__r_.__value_.__r.__words[2] = 0;
  v89->__r_.__value_.__r.__words[0] = 0;
  if (v132 >= 0) {
    std::string v91 = (const std::string::value_type *)&v130;
  }
  else {
    std::string v91 = (const std::string::value_type *)v130;
  }
  if (v132 >= 0) {
    std::string::size_type v92 = HIBYTE(v132);
  }
  else {
    std::string::size_type v92 = v131;
  }
  std::string v93 = std::string::append(&v126, v91, v92);
  long long v94 = *(_OWORD *)&v93->__r_.__value_.__l.__data_;
  v127.__r_.__value_.__r.__words[2] = v93->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v127.__r_.__value_.__l.__data_ = v94;
  v93->__r_.__value_.__l.__size_ = 0;
  v93->__r_.__value_.__r.__words[2] = 0;
  v93->__r_.__value_.__r.__words[0] = 0;
  std::string v95 = std::string::append(&v127, ".");
  long long v96 = *(_OWORD *)&v95->__r_.__value_.__l.__data_;
  std::string::size_type v129 = v95->__r_.__value_.__r.__words[2];
  long long v128 = v96;
  v95->__r_.__value_.__l.__size_ = 0;
  v95->__r_.__value_.__r.__words[2] = 0;
  v95->__r_.__value_.__r.__words[0] = 0;
  *this = (void *)13;
  std::operator+<char>();
  if (SHIBYTE(v129) < 0) {
    operator delete((void *)v128);
  }
  if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v127.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v126.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v125.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v124.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v123.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v117.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v122.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v121.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v118.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v120.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0)
  {
    long long v70 = (void *)v119.__r_.__value_.__r.__words[0];
    goto LABEL_154;
  }
LABEL_233:
  if (SHIBYTE(v132) < 0) {
    operator delete(v130);
  }
}

void sub_19EAE6280(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 105) < 0) {
    operator delete(*(void **)(v1 - 128));
  }
  if (*(char *)(v1 - 81) < 0) {
    operator delete(*(void **)(v1 - 104));
  }
  _Unwind_Resume(a1);
}

void CoreML::NeuralNetworkSpecValidator::validateBatchnormLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2, uint64_t a3)
{
  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0) {
      operator delete(this[1]);
    }
    CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0) {
        operator delete(this[1]);
      }
      if (*(unsigned char *)a2)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "Batchnorm");
        uint64_t v7 = (char *)a2 + 32;
        CoreML::validateInputOutputRankEquality((CoreML::Result *)this, (void *)a3, (uint64_t)__p, (uint64_t)v7);
        if (v198 < 0) {
          operator delete(__p[0]);
        }
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
          return;
        }
        if (*((char *)this + 31) < 0) {
          operator delete(this[1]);
        }
        std::string::basic_string[abi:ne180100]<0>(v195, "Batchnorm");
        CoreML::validateRankCount((uint64_t)this, (void *)a3, (uint64_t)v195, 3, -1, (uint64_t)v7);
        if (SHIBYTE(v196) < 0) {
          operator delete(v195[0]);
        }
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
          return;
        }
        if (*((char *)this + 31) < 0) {
          operator delete(this[1]);
        }
      }
      if (*(_DWORD *)(a3 + 140) == 160)
      {
        int v8 = *(uint64_t **)(a3 + 128);
      }
      else
      {
        inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
        int v8 = &CoreML::Specification::_BatchnormLayerParams_default_instance_;
      }
      uint64_t v9 = (uint64_t *)v8[2];
      if (v9) {
        unint64_t v10 = v9;
      }
      else {
        unint64_t v10 = &CoreML::Specification::_WeightParams_default_instance_;
      }
      uint64_t v11 = v10[5];
      if (*(char *)(v11 + 23) < 0) {
        uint64_t v12 = *(void *)(v11 + 8);
      }
      else {
        uint64_t v12 = *(unsigned __int8 *)(v11 + 23);
      }
      uint64_t v13 = v10[6];
      if (*(char *)(v13 + 23) < 0) {
        uint64_t v14 = *(void *)(v13 + 8);
      }
      else {
        uint64_t v14 = *(unsigned __int8 *)(v13 + 23);
      }
      int v15 = *((_DWORD *)v10 + 4);
      uint64_t v16 = v10[7];
      if (*(char *)(v16 + 23) < 0) {
        uint64_t v17 = *(void *)(v16 + 8);
      }
      else {
        uint64_t v17 = *(unsigned __int8 *)(v16 + 23);
      }
      int v18 = 1;
      if (v15 <= 0) {
        int v19 = 1;
      }
      else {
        int v19 = 2;
      }
      if (v12) {
        int v20 = v19;
      }
      else {
        int v20 = v15 > 0;
      }
      if (v14) {
        ++v20;
      }
      if (v17) {
        int v21 = v20 + 1;
      }
      else {
        int v21 = v20;
      }
      int v22 = *(_DWORD *)(a3 + 140);
      if (v15 < 1 || v21 != 1)
      {
        if (v22 == 160)
        {
          int v24 = *(uint64_t **)(a3 + 128);
        }
        else
        {
          inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
          int v24 = &CoreML::Specification::_BatchnormLayerParams_default_instance_;
        }
        unsigned int v25 = (uint64_t *)v24[3];
        if (v25) {
          unsigned int v26 = v25;
        }
        else {
          unsigned int v26 = &CoreML::Specification::_WeightParams_default_instance_;
        }
        uint64_t v27 = v26[5];
        if (*(char *)(v27 + 23) < 0) {
          uint64_t v28 = *(void *)(v27 + 8);
        }
        else {
          uint64_t v28 = *(unsigned __int8 *)(v27 + 23);
        }
        uint64_t v29 = v26[6];
        if (*(char *)(v29 + 23) < 0) {
          uint64_t v30 = *(void *)(v29 + 8);
        }
        else {
          uint64_t v30 = *(unsigned __int8 *)(v29 + 23);
        }
        int v31 = *((_DWORD *)v26 + 4);
        uint64_t v32 = v26[7];
        if (*(char *)(v32 + 23) < 0) {
          uint64_t v33 = *(void *)(v32 + 8);
        }
        else {
          uint64_t v33 = *(unsigned __int8 *)(v32 + 23);
        }
        if (v31 <= 0) {
          int v34 = 1;
        }
        else {
          int v34 = 2;
        }
        if (v28) {
          int v35 = v34;
        }
        else {
          int v35 = v31 > 0;
        }
        if (v30) {
          ++v35;
        }
        if (v33) {
          int v36 = v35 + 1;
        }
        else {
          int v36 = v35;
        }
        int v22 = *(_DWORD *)(a3 + 140);
        if (v31 < 1 || v36 != 1)
        {
          if (v22 == 160)
          {
            uint64_t v37 = *(uint64_t **)(a3 + 128);
          }
          else
          {
            inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
            uint64_t v37 = &CoreML::Specification::_BatchnormLayerParams_default_instance_;
          }
          uint64_t v38 = (uint64_t *)v37[4];
          if (v38) {
            uint64_t v39 = v38;
          }
          else {
            uint64_t v39 = &CoreML::Specification::_WeightParams_default_instance_;
          }
          uint64_t v40 = v39[5];
          if (*(char *)(v40 + 23) < 0) {
            uint64_t v41 = *(void *)(v40 + 8);
          }
          else {
            uint64_t v41 = *(unsigned __int8 *)(v40 + 23);
          }
          uint64_t v42 = v39[6];
          if (*(char *)(v42 + 23) < 0) {
            uint64_t v43 = *(void *)(v42 + 8);
          }
          else {
            uint64_t v43 = *(unsigned __int8 *)(v42 + 23);
          }
          int v44 = *((_DWORD *)v39 + 4);
          uint64_t v45 = v39[7];
          if (*(char *)(v45 + 23) < 0) {
            uint64_t v46 = *(void *)(v45 + 8);
          }
          else {
            uint64_t v46 = *(unsigned __int8 *)(v45 + 23);
          }
          if (v44 <= 0) {
            int v47 = 1;
          }
          else {
            int v47 = 2;
          }
          if (v41) {
            int v48 = v47;
          }
          else {
            int v48 = v44 > 0;
          }
          if (v43) {
            ++v48;
          }
          if (v46) {
            int v49 = v48 + 1;
          }
          else {
            int v49 = v48;
          }
          int v22 = *(_DWORD *)(a3 + 140);
          if (v44 < 1 || v49 != 1)
          {
            if (v22 == 160)
            {
              long long v50 = *(uint64_t **)(a3 + 128);
            }
            else
            {
              inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
              long long v50 = &CoreML::Specification::_BatchnormLayerParams_default_instance_;
            }
            uint64_t v51 = (uint64_t *)v50[5];
            if (v51) {
              int v52 = v51;
            }
            else {
              int v52 = &CoreML::Specification::_WeightParams_default_instance_;
            }
            uint64_t v53 = v52[5];
            if (*(char *)(v53 + 23) < 0) {
              uint64_t v54 = *(void *)(v53 + 8);
            }
            else {
              uint64_t v54 = *(unsigned __int8 *)(v53 + 23);
            }
            uint64_t v55 = v52[6];
            if (*(char *)(v55 + 23) < 0) {
              uint64_t v56 = *(void *)(v55 + 8);
            }
            else {
              uint64_t v56 = *(unsigned __int8 *)(v55 + 23);
            }
            int v57 = *((_DWORD *)v52 + 4);
            uint64_t v58 = v52[7];
            if (*(char *)(v58 + 23) < 0) {
              uint64_t v59 = *(void *)(v58 + 8);
            }
            else {
              uint64_t v59 = *(unsigned __int8 *)(v58 + 23);
            }
            if (v57 <= 0) {
              int v60 = 1;
            }
            else {
              int v60 = 2;
            }
            if (v54) {
              int v61 = v60;
            }
            else {
              int v61 = v57 > 0;
            }
            if (v56) {
              ++v61;
            }
            if (v59) {
              ++v61;
            }
            BOOL v62 = v61 == 1;
            int v18 = v57 > 0 && v62;
            int v22 = *(_DWORD *)(a3 + 140);
          }
        }
      }
      if (v22 == 160)
      {
        int v63 = *(uint64_t **)(a3 + 128);
      }
      else
      {
        inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
        int v63 = &CoreML::Specification::_BatchnormLayerParams_default_instance_;
      }
      long long v64 = (uint64_t *)v63[2];
      if (v64) {
        std::string::size_type v65 = v64;
      }
      else {
        std::string::size_type v65 = &CoreML::Specification::_WeightParams_default_instance_;
      }
      uint64_t v66 = v65[5];
      uint64_t v67 = *(unsigned __int8 *)(v66 + 23);
      if (*(char *)(v66 + 23) < 0) {
        uint64_t v68 = *(void *)(v66 + 8);
      }
      else {
        uint64_t v68 = *(unsigned __int8 *)(v66 + 23);
      }
      uint64_t v69 = v65[6];
      if (*(char *)(v69 + 23) < 0) {
        uint64_t v70 = *(void *)(v69 + 8);
      }
      else {
        uint64_t v70 = *(unsigned __int8 *)(v69 + 23);
      }
      int v71 = *((_DWORD *)v65 + 4);
      uint64_t v72 = v65[7];
      if (*(char *)(v72 + 23) < 0) {
        uint64_t v73 = *(void *)(v72 + 8);
      }
      else {
        uint64_t v73 = *(unsigned __int8 *)(v72 + 23);
      }
      if (v71 <= 0) {
        int v74 = 1;
      }
      else {
        int v74 = 2;
      }
      if (v68) {
        int v75 = v74;
      }
      else {
        int v75 = v71 > 0;
      }
      if (v70) {
        ++v75;
      }
      if (v73) {
        ++v75;
      }
      if (v71 <= 0 && v75 == 1)
      {
        if ((v67 & 0x80) != 0) {
          uint64_t v67 = *(void *)(v66 + 8);
        }
        if (v67) {
          goto LABEL_224;
        }
      }
      if (*(_DWORD *)(a3 + 140) == 160)
      {
        long long v76 = *(uint64_t **)(a3 + 128);
      }
      else
      {
        inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
        long long v76 = &CoreML::Specification::_BatchnormLayerParams_default_instance_;
      }
      unint64_t v77 = (uint64_t *)v76[3];
      if (v77) {
        long long v78 = v77;
      }
      else {
        long long v78 = &CoreML::Specification::_WeightParams_default_instance_;
      }
      uint64_t v79 = v78[5];
      uint64_t v80 = *(unsigned __int8 *)(v79 + 23);
      if (*(char *)(v79 + 23) < 0) {
        uint64_t v81 = *(void *)(v79 + 8);
      }
      else {
        uint64_t v81 = *(unsigned __int8 *)(v79 + 23);
      }
      uint64_t v82 = v78[6];
      if (*(char *)(v82 + 23) < 0) {
        uint64_t v83 = *(void *)(v82 + 8);
      }
      else {
        uint64_t v83 = *(unsigned __int8 *)(v82 + 23);
      }
      int v84 = *((_DWORD *)v78 + 4);
      uint64_t v85 = v78[7];
      if (*(char *)(v85 + 23) < 0) {
        uint64_t v86 = *(void *)(v85 + 8);
      }
      else {
        uint64_t v86 = *(unsigned __int8 *)(v85 + 23);
      }
      if (v84 <= 0) {
        int v87 = 1;
      }
      else {
        int v87 = 2;
      }
      if (v81) {
        int v88 = v87;
      }
      else {
        int v88 = v84 > 0;
      }
      if (v83) {
        ++v88;
      }
      if (v86) {
        ++v88;
      }
      if (v84 <= 0 && v88 == 1)
      {
        if ((v80 & 0x80) != 0) {
          uint64_t v80 = *(void *)(v79 + 8);
        }
        if (v80) {
          goto LABEL_224;
        }
      }
      if (*(_DWORD *)(a3 + 140) == 160)
      {
        std::string v89 = *(uint64_t **)(a3 + 128);
      }
      else
      {
        inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
        std::string v89 = &CoreML::Specification::_BatchnormLayerParams_default_instance_;
      }
      long long v90 = (uint64_t *)v89[4];
      if (v90) {
        std::string v91 = v90;
      }
      else {
        std::string v91 = &CoreML::Specification::_WeightParams_default_instance_;
      }
      uint64_t v92 = v91[5];
      uint64_t v93 = *(unsigned __int8 *)(v92 + 23);
      if (*(char *)(v92 + 23) < 0) {
        uint64_t v94 = *(void *)(v92 + 8);
      }
      else {
        uint64_t v94 = *(unsigned __int8 *)(v92 + 23);
      }
      uint64_t v95 = v91[6];
      if (*(char *)(v95 + 23) < 0) {
        uint64_t v96 = *(void *)(v95 + 8);
      }
      else {
        uint64_t v96 = *(unsigned __int8 *)(v95 + 23);
      }
      int v97 = *((_DWORD *)v91 + 4);
      uint64_t v98 = v91[7];
      if (*(char *)(v98 + 23) < 0) {
        uint64_t v99 = *(void *)(v98 + 8);
      }
      else {
        uint64_t v99 = *(unsigned __int8 *)(v98 + 23);
      }
      if (v97 <= 0) {
        int v100 = 1;
      }
      else {
        int v100 = 2;
      }
      if (v94) {
        int v101 = v100;
      }
      else {
        int v101 = v97 > 0;
      }
      if (v96) {
        ++v101;
      }
      if (v99) {
        ++v101;
      }
      if (v97 > 0 || v101 != 1) {
        goto LABEL_253;
      }
      if ((v93 & 0x80) != 0) {
        uint64_t v93 = *(void *)(v92 + 8);
      }
      if (v93)
      {
LABEL_224:
        BOOL v102 = 1;
      }
      else
      {
LABEL_253:
        if (*(_DWORD *)(a3 + 140) == 160)
        {
          std::string v118 = *(uint64_t **)(a3 + 128);
        }
        else
        {
          inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
          std::string v118 = &CoreML::Specification::_BatchnormLayerParams_default_instance_;
        }
        uint64_t v132 = (uint64_t *)v118[5];
        if (v132) {
          v133 = v132;
        }
        else {
          v133 = &CoreML::Specification::_WeightParams_default_instance_;
        }
        uint64_t v134 = v133[5];
        uint64_t v135 = *(unsigned __int8 *)(v134 + 23);
        if (*(char *)(v134 + 23) < 0) {
          uint64_t v136 = *(void *)(v134 + 8);
        }
        else {
          uint64_t v136 = *(unsigned __int8 *)(v134 + 23);
        }
        uint64_t v141 = v133[6];
        if (*(char *)(v141 + 23) < 0) {
          uint64_t v142 = *(void *)(v141 + 8);
        }
        else {
          uint64_t v142 = *(unsigned __int8 *)(v141 + 23);
        }
        int v143 = *((_DWORD *)v133 + 4);
        uint64_t v144 = v133[7];
        if (*(char *)(v144 + 23) < 0) {
          uint64_t v145 = *(void *)(v144 + 8);
        }
        else {
          uint64_t v145 = *(unsigned __int8 *)(v144 + 23);
        }
        BOOL v102 = 0;
        if (v143 <= 0) {
          int v146 = 1;
        }
        else {
          int v146 = 2;
        }
        if (v136) {
          int v147 = v146;
        }
        else {
          int v147 = v143 > 0;
        }
        if (v142) {
          ++v147;
        }
        if (v145) {
          ++v147;
        }
        if (v143 <= 0 && v147 == 1)
        {
          if ((v135 & 0x80) != 0) {
            uint64_t v135 = *(void *)(v134 + 8);
          }
          BOOL v102 = v135 != 0;
        }
      }
      if (*(_DWORD *)(a3 + 140) == 160)
      {
        long long v103 = *(uint64_t **)(a3 + 128);
      }
      else
      {
        inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
        long long v103 = &CoreML::Specification::_BatchnormLayerParams_default_instance_;
      }
      std::string v104 = (uint64_t *)v103[2];
      if (v104) {
        std::string v105 = v104;
      }
      else {
        std::string v105 = &CoreML::Specification::_WeightParams_default_instance_;
      }
      uint64_t v106 = v105[5];
      if (*(char *)(v106 + 23) < 0) {
        uint64_t v107 = *(void *)(v106 + 8);
      }
      else {
        uint64_t v107 = *(unsigned __int8 *)(v106 + 23);
      }
      uint64_t v108 = v105[6];
      if (*(char *)(v108 + 23) < 0) {
        uint64_t v109 = *(void *)(v108 + 8);
      }
      else {
        uint64_t v109 = *(unsigned __int8 *)(v108 + 23);
      }
      int v110 = *((_DWORD *)v105 + 4);
      uint64_t v111 = v105[7];
      if (*(char *)(v111 + 23) < 0) {
        uint64_t v112 = *(void *)(v111 + 8);
      }
      else {
        uint64_t v112 = *(unsigned __int8 *)(v111 + 23);
      }
      BOOL v113 = v110 <= 0;
      BOOL v114 = v110 > 0;
      if (v113) {
        int v115 = 1;
      }
      else {
        int v115 = 2;
      }
      if (v107) {
        unsigned int v116 = v115;
      }
      else {
        unsigned int v116 = v114;
      }
      if (v109) {
        ++v116;
      }
      if (v112) {
        ++v116;
      }
      if (v116 > 1) {
        goto LABEL_333;
      }
      if (*(_DWORD *)(a3 + 140) == 160)
      {
        std::string v117 = *(uint64_t **)(a3 + 128);
      }
      else
      {
        inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
        std::string v117 = &CoreML::Specification::_BatchnormLayerParams_default_instance_;
      }
      std::string v119 = (uint64_t *)v117[3];
      if (v119) {
        std::string v120 = v119;
      }
      else {
        std::string v120 = &CoreML::Specification::_WeightParams_default_instance_;
      }
      uint64_t v121 = v120[5];
      if (*(char *)(v121 + 23) < 0) {
        uint64_t v122 = *(void *)(v121 + 8);
      }
      else {
        uint64_t v122 = *(unsigned __int8 *)(v121 + 23);
      }
      uint64_t v123 = v120[6];
      if (*(char *)(v123 + 23) < 0) {
        uint64_t v124 = *(void *)(v123 + 8);
      }
      else {
        uint64_t v124 = *(unsigned __int8 *)(v123 + 23);
      }
      int v125 = *((_DWORD *)v120 + 4);
      uint64_t v126 = v120[7];
      if (*(char *)(v126 + 23) < 0) {
        uint64_t v127 = *(void *)(v126 + 8);
      }
      else {
        uint64_t v127 = *(unsigned __int8 *)(v126 + 23);
      }
      BOOL v113 = v125 <= 0;
      BOOL v128 = v125 > 0;
      if (v113) {
        int v129 = 1;
      }
      else {
        int v129 = 2;
      }
      if (v122) {
        unsigned int v130 = v129;
      }
      else {
        unsigned int v130 = v128;
      }
      if (v124) {
        ++v130;
      }
      if (v127) {
        ++v130;
      }
      if (v130 > 1) {
        goto LABEL_333;
      }
      if (*(_DWORD *)(a3 + 140) == 160)
      {
        size_t v131 = *(uint64_t **)(a3 + 128);
      }
      else
      {
        inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
        size_t v131 = &CoreML::Specification::_BatchnormLayerParams_default_instance_;
      }
      std::string v137 = (uint64_t *)v131[4];
      if (v137) {
        std::string v138 = v137;
      }
      else {
        std::string v138 = &CoreML::Specification::_WeightParams_default_instance_;
      }
      uint64_t v139 = v138[5];
      if (*(char *)(v139 + 23) < 0) {
        uint64_t v140 = *(void *)(v139 + 8);
      }
      else {
        uint64_t v140 = *(unsigned __int8 *)(v139 + 23);
      }
      uint64_t v148 = v138[6];
      if (*(char *)(v148 + 23) < 0) {
        uint64_t v149 = *(void *)(v148 + 8);
      }
      else {
        uint64_t v149 = *(unsigned __int8 *)(v148 + 23);
      }
      int v150 = *((_DWORD *)v138 + 4);
      uint64_t v151 = v138[7];
      if (*(char *)(v151 + 23) < 0) {
        uint64_t v152 = *(void *)(v151 + 8);
      }
      else {
        uint64_t v152 = *(unsigned __int8 *)(v151 + 23);
      }
      BOOL v113 = v150 <= 0;
      BOOL v153 = v150 > 0;
      if (v113) {
        int v154 = 1;
      }
      else {
        int v154 = 2;
      }
      if (v140) {
        unsigned int v155 = v154;
      }
      else {
        unsigned int v155 = v153;
      }
      if (v149) {
        ++v155;
      }
      if (v152) {
        ++v155;
      }
      if (v155 > 1
        || (*(_DWORD *)(a3 + 140) != 160
          ? (CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited),
             long long v158 = &CoreML::Specification::_BatchnormLayerParams_default_instance_)
          : (long long v158 = *(uint64_t **)(a3 + 128)),
            (std::string::size_type v159 = (uint64_t *)v158[5]) != 0
          ? (unsigned int v160 = v159)
          : (unsigned int v160 = &CoreML::Specification::_WeightParams_default_instance_),
            (char v161 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)CoreML::valueType(v160),
             (v18 & v102 & 1) != 0)
         || v161 == 4))
      {
LABEL_333:
        std::operator+<char>();
        std::string v156 = std::string::append(&v194, "' parameters have values for both full and half precision. Parameters should either be specified in half or full precision, mixed parameters are not supported.");
        long long v157 = *(_OWORD *)&v156->__r_.__value_.__l.__data_;
        std::string::size_type v196 = v156->__r_.__value_.__r.__words[2];
        *(_OWORD *)int v195 = v157;
        v156->__r_.__value_.__l.__size_ = 0;
        v156->__r_.__value_.__r.__words[2] = 0;
        v156->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v194.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        if (*(_DWORD *)(a3 + 140) == 160)
        {
          int v162 = *(uint64_t **)(a3 + 128);
          unint64_t v163 = v162[6];
        }
        else
        {
          int v164 = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v161);
          unint64_t v163 = xmmword_1EB4E0200;
          if (*(_DWORD *)(a3 + 140) == 160)
          {
            int v162 = *(uint64_t **)(a3 + 128);
          }
          else
          {
            CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v164);
            int v162 = &CoreML::Specification::_BatchnormLayerParams_default_instance_;
          }
        }
        int v165 = (uint64_t *)v162[2];
        std::string::basic_string[abi:ne180100]<0>(v195, "BatchNorm");
        uint64_t v166 = *(void *)(a3 + 112);
        std::string::basic_string[abi:ne180100]<0>(&v194, "gamma");
        if (v165) {
          int v167 = v165;
        }
        else {
          int v167 = &CoreML::Specification::_WeightParams_default_instance_;
        }
        CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v167, v163, 1, (const void **)v195, v166, (uint64_t)&v194);
        if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v194.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v196) < 0) {
          operator delete(v195[0]);
        }
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
          return;
        }
        if (*((char *)this + 31) < 0) {
          operator delete(this[1]);
        }
        if (*(_DWORD *)(a3 + 140) == 160)
        {
          unsigned int v169 = *(uint64_t **)(a3 + 128);
        }
        else
        {
          CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v168);
          unsigned int v169 = &CoreML::Specification::_BatchnormLayerParams_default_instance_;
        }
        int v170 = (uint64_t *)v169[3];
        std::string::basic_string[abi:ne180100]<0>(v195, "BatchNorm");
        uint64_t v171 = *(void *)(a3 + 112);
        std::string::basic_string[abi:ne180100]<0>(&v194, "beta");
        if (v170) {
          v172 = v170;
        }
        else {
          v172 = &CoreML::Specification::_WeightParams_default_instance_;
        }
        CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v172, v163, 1, (const void **)v195, v171, (uint64_t)&v194);
        if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v194.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v196) < 0) {
          operator delete(v195[0]);
        }
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
          return;
        }
        if (*((char *)this + 31) < 0) {
          operator delete(this[1]);
        }
        if (*(_DWORD *)(a3 + 140) == 160)
        {
          int v174 = *(uint64_t **)(a3 + 128);
        }
        else
        {
          int v173 = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v173);
          int v174 = &CoreML::Specification::_BatchnormLayerParams_default_instance_;
        }
        if (*((unsigned char *)v174 + 56))
        {
LABEL_377:
          CoreML::Result::Result((CoreML::Result *)this);
          return;
        }
        if (*(_DWORD *)(a3 + 140) == 160)
        {
          unsigned int v175 = *(uint64_t **)(a3 + 128);
        }
        else
        {
          CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v173);
          unsigned int v175 = &CoreML::Specification::_BatchnormLayerParams_default_instance_;
        }
        int v176 = (uint64_t *)v175[4];
        if (v176) {
          int v177 = v176;
        }
        else {
          int v177 = &CoreML::Specification::_WeightParams_default_instance_;
        }
        unsigned int v178 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)CoreML::valueType(v177);
        if (v178 != 5)
        {
          if (*(_DWORD *)(a3 + 140) == 160)
          {
            int v179 = *(uint64_t **)(a3 + 128);
          }
          else
          {
            CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v178);
            int v179 = &CoreML::Specification::_BatchnormLayerParams_default_instance_;
          }
          int v180 = (uint64_t *)v179[4];
          unsigned int v181 = v180 ? v180 : &CoreML::Specification::_WeightParams_default_instance_;
          int v182 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)CoreML::valueType(v181);
          if (v182 != 5)
          {
            if (*(_DWORD *)(a3 + 140) == 160)
            {
              int v185 = *(uint64_t **)(a3 + 128);
            }
            else
            {
              CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v182);
              int v185 = &CoreML::Specification::_BatchnormLayerParams_default_instance_;
            }
            int v186 = (uint64_t *)v185[4];
            std::string::basic_string[abi:ne180100]<0>(v195, "BatchNorm");
            uint64_t v187 = *(void *)(a3 + 112);
            std::string::basic_string[abi:ne180100]<0>(&v194, "mean");
            if (v186) {
              unsigned int v188 = v186;
            }
            else {
              unsigned int v188 = &CoreML::Specification::_WeightParams_default_instance_;
            }
            CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v188, v163, 1, (const void **)v195, v187, (uint64_t)&v194);
            if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v194.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v196) < 0) {
              operator delete(v195[0]);
            }
            if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
              return;
            }
            if (*((char *)this + 31) < 0) {
              operator delete(this[1]);
            }
            if (*(_DWORD *)(a3 + 140) == 160)
            {
              int v190 = *(uint64_t **)(a3 + 128);
            }
            else
            {
              CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v189);
              int v190 = &CoreML::Specification::_BatchnormLayerParams_default_instance_;
            }
            unsigned int v191 = (uint64_t *)v190[5];
            std::string::basic_string[abi:ne180100]<0>(v195, "BatchNorm");
            uint64_t v192 = *(void *)(a3 + 112);
            std::string::basic_string[abi:ne180100]<0>(&v194, "variance");
            if (v191) {
              int v193 = v191;
            }
            else {
              int v193 = &CoreML::Specification::_WeightParams_default_instance_;
            }
            CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v193, v163, 1, (const void **)v195, v192, (uint64_t)&v194);
            if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v194.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v196) < 0) {
              operator delete(v195[0]);
            }
            if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
              return;
            }
            if (*((char *)this + 31) < 0) {
              operator delete(this[1]);
            }
            goto LABEL_377;
          }
        }
        std::operator+<char>();
        int v183 = std::string::append(&v194, "' is missing mean and variance.");
        long long v184 = *(_OWORD *)&v183->__r_.__value_.__l.__data_;
        std::string::size_type v196 = v183->__r_.__value_.__r.__words[2];
        *(_OWORD *)int v195 = v184;
        v183->__r_.__value_.__l.__size_ = 0;
        v183->__r_.__value_.__r.__words[2] = 0;
        v183->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v194.__r_.__value_.__l.__data_);
        }
      }
      *this = (void *)13;
      std::operator+<char>();
      if (SHIBYTE(v196) < 0) {
        operator delete(v195[0]);
      }
    }
  }
}

void sub_19EAE72B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateActivation(void **this, const CoreML::Specification::NeuralNetworkLayer *a2, uint64_t a3)
{
  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0) {
      operator delete(this[1]);
    }
    CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0) {
        operator delete(this[1]);
      }
      if (!*(unsigned char *)a2)
      {
LABEL_36:
        if (*(_DWORD *)(a3 + 140) == 130)
        {
          unint64_t v10 = *(uint64_t **)(a3 + 128);
        }
        else
        {
          CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
          unint64_t v10 = &CoreML::Specification::_ActivationParams_default_instance_;
        }
        int v11 = *((_DWORD *)v10 + 7);
        uint64_t v12 = (v11 - 10);
        if (v12 <= 0x3D)
        {
          if (((1 << (v11 - 10)) & 0x10040100C0300421) != 0)
          {
LABEL_41:
            CoreML::Result::Result((CoreML::Result *)this);
            return;
          }
          if (v12 == 15)
          {
            int v20 = &CoreML::Specification::_WeightParams_default_instance_;
            if (*(void *)(v10[2] + 16)) {
              int v20 = *(uint64_t **)(v10[2] + 16);
            }
            uint64_t v21 = v20[5];
            if (*(char *)(v21 + 23) < 0) {
              uint64_t v22 = *(void *)(v21 + 8);
            }
            else {
              uint64_t v22 = *(unsigned __int8 *)(v21 + 23);
            }
            uint64_t v26 = v20[6];
            if (*(char *)(v26 + 23) < 0) {
              uint64_t v27 = *(void *)(v26 + 8);
            }
            else {
              uint64_t v27 = *(unsigned __int8 *)(v26 + 23);
            }
            int v32 = *((_DWORD *)v20 + 4);
            uint64_t v33 = v20[7];
            if (*(char *)(v33 + 23) < 0) {
              uint64_t v34 = *(void *)(v33 + 8);
            }
            else {
              uint64_t v34 = *(unsigned __int8 *)(v33 + 23);
            }
            BOOL v41 = v32 <= 0;
            BOOL v42 = v32 > 0;
            if (v41) {
              int v43 = 1;
            }
            else {
              int v43 = 2;
            }
            if (v22) {
              unsigned int v44 = v43;
            }
            else {
              unsigned int v44 = v42;
            }
            if (v27) {
              ++v44;
            }
            if (v34) {
              ++v44;
            }
            if (v44 < 2) {
              goto LABEL_41;
            }
            goto LABEL_187;
          }
          if (v12 == 61)
          {
            uint64_t v13 = v10[2];
            if (*(void *)(v13 + 16)) {
              uint64_t v14 = *(uint64_t **)(v13 + 16);
            }
            else {
              uint64_t v14 = &CoreML::Specification::_WeightParams_default_instance_;
            }
            uint64_t v15 = v14[5];
            uint64_t v16 = *(unsigned __int8 *)(v15 + 23);
            if (*(char *)(v15 + 23) < 0) {
              uint64_t v17 = *(void *)(v15 + 8);
            }
            else {
              uint64_t v17 = *(unsigned __int8 *)(v15 + 23);
            }
            uint64_t v23 = v14[6];
            uint64_t v24 = *(unsigned __int8 *)(v23 + 23);
            if (*(char *)(v23 + 23) < 0) {
              uint64_t v25 = *(void *)(v23 + 8);
            }
            else {
              uint64_t v25 = *(unsigned __int8 *)(v23 + 23);
            }
            int v28 = *((_DWORD *)v14 + 4);
            uint64_t v29 = v14[7];
            uint64_t v30 = *(unsigned __int8 *)(v29 + 23);
            if (*(char *)(v29 + 23) < 0) {
              uint64_t v31 = *(void *)(v29 + 8);
            }
            else {
              uint64_t v31 = *(unsigned __int8 *)(v29 + 23);
            }
            BOOL v35 = v28 > 0;
            if (v28 <= 0) {
              int v36 = 1;
            }
            else {
              int v36 = 2;
            }
            if (v17) {
              unsigned int v37 = v36;
            }
            else {
              unsigned int v37 = v28 > 0;
            }
            if (v25) {
              ++v37;
            }
            if (v31) {
              unsigned int v38 = v37 + 1;
            }
            else {
              unsigned int v38 = v37;
            }
            if (v38 <= 1)
            {
              if (v38) {
                int v39 = 0;
              }
              else {
                int v39 = 5;
              }
              if (v28 <= 0 && v38)
              {
                if ((v16 & 0x80) != 0) {
                  uint64_t v40 = *(void *)(v15 + 8);
                }
                else {
                  uint64_t v40 = *(unsigned __int8 *)(v15 + 23);
                }
                if (v40)
                {
                  int v39 = 1;
                }
                else
                {
                  if ((v24 & 0x80) != 0) {
                    uint64_t v45 = *(void *)(v23 + 8);
                  }
                  else {
                    uint64_t v45 = *(unsigned __int8 *)(v23 + 23);
                  }
                  uint64_t v46 = v14[8];
                  if (v14 != &CoreML::Specification::_WeightParams_default_instance_ && v45 && v46)
                  {
                    int v39 = 2;
                  }
                  else
                  {
                    if ((v30 & 0x80) != 0) {
                      uint64_t v47 = *(void *)(v29 + 8);
                    }
                    else {
                      uint64_t v47 = *(unsigned __int8 *)(v29 + 23);
                    }
                    if (v46) {
                      BOOL v48 = v47 == 0;
                    }
                    else {
                      BOOL v48 = 1;
                    }
                    if (v48 || v14 == &CoreML::Specification::_WeightParams_default_instance_) {
                      int v39 = 5;
                    }
                    else {
                      int v39 = 3;
                    }
                  }
                }
              }
            }
            else
            {
              int v39 = 4;
            }
            long long v50 = *(uint64_t **)(v13 + 24);
            if (!v50) {
              long long v50 = &CoreML::Specification::_WeightParams_default_instance_;
            }
            uint64_t v51 = v50[5];
            uint64_t v52 = *(unsigned __int8 *)(v51 + 23);
            if (*(char *)(v51 + 23) < 0) {
              uint64_t v53 = *(void *)(v51 + 8);
            }
            else {
              uint64_t v53 = *(unsigned __int8 *)(v51 + 23);
            }
            uint64_t v54 = v50[6];
            uint64_t v55 = *(unsigned __int8 *)(v54 + 23);
            if (*(char *)(v54 + 23) < 0) {
              uint64_t v56 = *(void *)(v54 + 8);
            }
            else {
              uint64_t v56 = *(unsigned __int8 *)(v54 + 23);
            }
            int v57 = *((_DWORD *)v50 + 4);
            uint64_t v58 = v50[7];
            uint64_t v59 = *(unsigned __int8 *)(v58 + 23);
            if (*(char *)(v58 + 23) < 0) {
              uint64_t v60 = *(void *)(v58 + 8);
            }
            else {
              uint64_t v60 = *(unsigned __int8 *)(v58 + 23);
            }
            if (v57 <= 0) {
              int v61 = 1;
            }
            else {
              int v61 = 2;
            }
            if (v53) {
              unsigned int v62 = v61;
            }
            else {
              unsigned int v62 = v57 > 0;
            }
            if (v56) {
              ++v62;
            }
            if (v60) {
              unsigned int v63 = v62 + 1;
            }
            else {
              unsigned int v63 = v62;
            }
            if (v63 <= 1)
            {
              if (v63) {
                int v64 = 0;
              }
              else {
                int v64 = 5;
              }
              if (v57 <= 0 && v63)
              {
                if ((v52 & 0x80) != 0) {
                  uint64_t v52 = *(void *)(v51 + 8);
                }
                if (v52)
                {
                  int v64 = 1;
                }
                else
                {
                  if ((v55 & 0x80) != 0) {
                    uint64_t v55 = *(void *)(v54 + 8);
                  }
                  uint64_t v65 = v50[8];
                  if (v50 != &CoreML::Specification::_WeightParams_default_instance_ && v55 && v65)
                  {
                    int v64 = 2;
                  }
                  else
                  {
                    if ((v59 & 0x80) != 0) {
                      uint64_t v59 = *(void *)(v58 + 8);
                    }
                    if (v65) {
                      BOOL v66 = v59 == 0;
                    }
                    else {
                      BOOL v66 = 1;
                    }
                    if (v66 || v50 == &CoreML::Specification::_WeightParams_default_instance_) {
                      int v64 = 5;
                    }
                    else {
                      int v64 = 3;
                    }
                  }
                }
              }
            }
            else
            {
              int v64 = 4;
            }
            if (v39 == v64)
            {
              if ((v16 & 0x80) != 0)
              {
                uint64_t v16 = *(void *)(v15 + 8);
                if ((v24 & 0x80) == 0)
                {
LABEL_177:
                  if ((v30 & 0x80) == 0) {
                    goto LABEL_178;
                  }
LABEL_195:
                  uint64_t v30 = *(void *)(v29 + 8);
LABEL_178:
                  if (v16) {
                    unsigned int v68 = v36;
                  }
                  else {
                    unsigned int v68 = v35;
                  }
                  if (v24) {
                    ++v68;
                  }
                  if (v30) {
                    ++v68;
                  }
                  if (v68 <= 1 && CoreML::valueType(v50) != 4) {
                    goto LABEL_41;
                  }
                  goto LABEL_187;
                }
              }
              else if ((v24 & 0x80) == 0)
              {
                goto LABEL_177;
              }
              uint64_t v24 = *(void *)(v23 + 8);
              if ((v30 & 0x80) == 0) {
                goto LABEL_178;
              }
              goto LABEL_195;
            }
LABEL_187:
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v78);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)"Nonlinearity type ", 18);
            uint64_t v69 = MLActivationParamsNonlinearityType_Name(*((_DWORD *)v10 + 7));
            size_t v70 = strlen(v69);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)v69, v70);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)" has inconsistent weight parameter types.", 41);
            std::stringbuf::str();
            *this = (void *)13;
            std::operator+<char>();
LABEL_188:
            if (v77 < 0) {
              operator delete(v76);
            }
            v78[0] = *(void **)MEMORY[0x1E4FBA408];
            uint64_t v71 = *(void *)(MEMORY[0x1E4FBA408] + 72);
            *(void **)((char *)v78 + *((void *)v78[0] - 3)) = *(void **)(MEMORY[0x1E4FBA408] + 64);
            v79[0] = v71;
            v79[1] = MEMORY[0x1E4FBA470] + 16;
            if (v80 < 0) {
              operator delete((void *)v79[9]);
            }
            std::streambuf::~streambuf();
            std::iostream::~basic_iostream();
            MEMORY[0x19F3C1850](&v81);
            return;
          }
        }
        if (v11 == 5) {
          goto LABEL_41;
        }
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v78);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)"Nonlinearity type ", 18);
        int v18 = MLActivationParamsNonlinearityType_Name(*((_DWORD *)v10 + 7));
        size_t v19 = strlen(v18);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)v18, v19);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)" is not supported in this version of CoreML.", 44);
        std::stringbuf::str();
        *this = (void *)13;
        std::operator+<char>();
        goto LABEL_188;
      }
      if (*(_DWORD *)(a3 + 140) == 130)
      {
        uint64_t v7 = *(uint64_t **)(a3 + 128);
      }
      else
      {
        inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
        uint64_t v7 = &CoreML::Specification::_ActivationParams_default_instance_;
      }
      if (*((_DWORD *)v7 + 7) == 25)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "ActivationPReLU");
        CoreML::validateInputOutputRankEquality((CoreML::Result *)this, (void *)a3, (uint64_t)__p, (uint64_t)a2 + 32);
        if (v75 < 0) {
          operator delete(__p[0]);
        }
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
          return;
        }
        if (*((char *)this + 31) < 0) {
          operator delete(this[1]);
        }
        std::string::basic_string[abi:ne180100]<0>(v78, "ActivationPReLU");
        CoreML::validateRankCount((uint64_t)this, (void *)a3, (uint64_t)v78, 3, -1, (uint64_t)a2 + 32);
        if (SHIBYTE(v79[0]) < 0) {
          operator delete(v78[0]);
        }
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
          return;
        }
        if (*((char *)this + 31) < 0) {
          operator delete(this[1]);
        }
      }
      if (*(_DWORD *)(a3 + 140) == 130)
      {
        int v8 = *(uint64_t **)(a3 + 128);
      }
      else
      {
        inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
        int v8 = &CoreML::Specification::_ActivationParams_default_instance_;
      }
      if (*((_DWORD *)v8 + 7) != 71) {
        goto LABEL_36;
      }
      std::string::basic_string[abi:ne180100]<0>(v72, "ActivationParametricSoftplus");
      uint64_t v9 = (char *)a2 + 32;
      CoreML::validateInputOutputRankEquality((CoreML::Result *)this, (void *)a3, (uint64_t)v72, (uint64_t)v9);
      if (v73 < 0) {
        operator delete(v72[0]);
      }
      if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
      {
        if (*((char *)this + 31) < 0) {
          operator delete(this[1]);
        }
        std::string::basic_string[abi:ne180100]<0>(v78, "ActivationParametricSoftplus");
        CoreML::validateRankCount((uint64_t)this, (void *)a3, (uint64_t)v78, 3, -1, (uint64_t)v9);
        if (SHIBYTE(v79[0]) < 0) {
          operator delete(v78[0]);
        }
        if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
        {
          if (*((char *)this + 31) < 0) {
            operator delete(this[1]);
          }
          goto LABEL_36;
        }
      }
    }
  }
}

void sub_19EAE7BF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a27);
  _Unwind_Resume(a1);
}

const char *MLActivationParamsNonlinearityType_Name(int a1)
{
  if (a1 > 30)
  {
    if (a1 <= 49)
    {
      switch(a1)
      {
        case 31:
          return "MLActivationParamsNonlinearityType_scaledTanh";
        case 40:
          return "MLActivationParamsNonlinearityType_sigmoid";
        case 41:
          return "MLActivationParamsNonlinearityType_sigmoidHard";
        default:
          return "INVALID";
      }
    }
    else if (a1 > 69)
    {
      if (a1 != 70)
      {
        if (a1 == 71) {
          return "MLActivationParamsNonlinearityType_parametricSoftplus";
        }
        return "INVALID";
      }
      return "MLActivationParamsNonlinearityType_softplus";
    }
    else
    {
      if (a1 != 50)
      {
        if (a1 == 60) {
          return "MLActivationParamsNonlinearityType_softsign";
        }
        return "INVALID";
      }
      return "MLActivationParamsNonlinearityType_ELU";
    }
  }
  else if (a1 <= 14)
  {
    if (!a1) {
      return "INVALID";
    }
    if (a1 != 5)
    {
      if (a1 == 10) {
        return "MLActivationParamsNonlinearityType_ReLU";
      }
      return "INVALID";
    }
    return "MLActivationParamsNonlinearityType_linear";
  }
  else if (a1 > 24)
  {
    if (a1 != 25)
    {
      if (a1 == 30) {
        return "MLActivationParamsNonlinearityType_tanh";
      }
      return "INVALID";
    }
    return "MLActivationParamsNonlinearityType_PReLU";
  }
  else
  {
    if (a1 != 15)
    {
      if (a1 == 20) {
        return "MLActivationParamsNonlinearityType_thresholdedReLU";
      }
      return "INVALID";
    }
    return "MLActivationParamsNonlinearityType_leakyReLU";
  }
}

void CoreML::NeuralNetworkSpecValidator::validatePoolingLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2, uint64_t a3)
{
  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0) {
      operator delete(this[1]);
    }
    CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0) {
        operator delete(this[1]);
      }
      if (*(unsigned char *)a2)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "Pooling");
        uint64_t v7 = (char *)a2 + 32;
        CoreML::validateInputOutputRankEquality((CoreML::Result *)this, (void *)a3, (uint64_t)__p, (uint64_t)v7);
        if (v15 < 0) {
          operator delete(__p[0]);
        }
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
          return;
        }
        if (*((char *)this + 31) < 0) {
          operator delete(this[1]);
        }
        std::string::basic_string[abi:ne180100]<0>(v12, "Pooling");
        CoreML::validateRankCount((uint64_t)this, (void *)a3, (uint64_t)v12, 4, -1, (uint64_t)v7);
        if (SHIBYTE(v13) < 0) {
          operator delete(v12[0]);
        }
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
          return;
        }
        if (*((char *)this + 31) < 0) {
          operator delete(this[1]);
        }
      }
      if (*(_DWORD *)(a3 + 140) == 120)
      {
        int v8 = *(uint64_t **)(a3 + 128);
      }
      else
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
        int v8 = &CoreML::Specification::_PoolingLayerParams_default_instance_;
      }
      if (*((_DWORD *)v8 + 21))
      {
        CoreML::Result::Result((CoreML::Result *)this);
      }
      else
      {
        std::operator+<char>();
        uint64_t v9 = std::string::append(&v11, "' is not set.");
        long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
        std::string::size_type v13 = v9->__r_.__value_.__r.__words[2];
        *(_OWORD *)uint64_t v12 = v10;
        v9->__r_.__value_.__l.__size_ = 0;
        v9->__r_.__value_.__r.__words[2] = 0;
        v9->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v11.__r_.__value_.__l.__data_);
        }
        *this = (void *)13;
        std::operator+<char>();
        if (SHIBYTE(v13) < 0) {
          operator delete(v12[0]);
        }
      }
    }
  }
}

void sub_19EAE7FBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validatePooling3dLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2, uint64_t a3)
{
  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0) {
      operator delete(this[1]);
    }
    CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0) {
        operator delete(this[1]);
      }
      if (!*(unsigned char *)a2) {
        goto LABEL_18;
      }
      std::string::basic_string[abi:ne180100]<0>(v39, "Pooling3d");
      uint64_t v7 = (char *)a2 + 32;
      CoreML::validateInputOutputRankEquality((CoreML::Result *)this, (void *)a3, (uint64_t)v39, (uint64_t)v7);
      if (v40 < 0) {
        operator delete(v39[0]);
      }
      if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
      {
        if (*((char *)this + 31) < 0) {
          operator delete(this[1]);
        }
        std::string::basic_string[abi:ne180100]<0>(&__p, "Pooling3d");
        CoreML::validateRankCount((uint64_t)this, (void *)a3, (uint64_t)&__p, 5, -1, (uint64_t)v7);
        if (SHIBYTE(v26) < 0) {
          operator delete(__p);
        }
        if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
        {
          if (*((char *)this + 31) < 0) {
            operator delete(this[1]);
          }
LABEL_18:
          if (*(_DWORD *)(a3 + 140) == 1465)
          {
            int v8 = *(const CoreML::Specification::Pooling3DLayerParams **)(a3 + 128);
          }
          else
          {
            CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
            int v8 = (const CoreML::Specification::Pooling3DLayerParams *)&CoreML::Specification::_Pooling3DLayerParams_default_instance_;
          }
          CoreML::Specification::Pooling3DLayerParams::Pooling3DLayerParams((CoreML::Specification::Pooling3DLayerParams *)&__p, v8);
          int v9 = v26;
          std::string::basic_string[abi:ne180100]<0>(v22, "Kernel Depth");
          CoreML::validatePositive((CoreML::Result *)this, v9, (const void **)v22);
          if (v23 < 0) {
            operator delete(v22[0]);
          }
          if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
          {
            if (*((char *)this + 31) < 0) {
              operator delete(this[1]);
            }
            int v10 = v27;
            std::string::basic_string[abi:ne180100]<0>(v22, "Kernel Height");
            CoreML::validatePositive((CoreML::Result *)this, v10, (const void **)v22);
            if (v23 < 0) {
              operator delete(v22[0]);
            }
            if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
            {
              if (*((char *)this + 31) < 0) {
                operator delete(this[1]);
              }
              int v11 = v28;
              std::string::basic_string[abi:ne180100]<0>(v22, "Kernel Width");
              CoreML::validatePositive((CoreML::Result *)this, v11, (const void **)v22);
              if (v23 < 0) {
                operator delete(v22[0]);
              }
              if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
              {
                if (*((char *)this + 31) < 0) {
                  operator delete(this[1]);
                }
                int v12 = v29;
                std::string::basic_string[abi:ne180100]<0>(v22, "Stride Depth");
                CoreML::validatePositive((CoreML::Result *)this, v12, (const void **)v22);
                if (v23 < 0) {
                  operator delete(v22[0]);
                }
                if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
                {
                  if (*((char *)this + 31) < 0) {
                    operator delete(this[1]);
                  }
                  int v13 = v30;
                  std::string::basic_string[abi:ne180100]<0>(v22, "Stride Height");
                  CoreML::validatePositive((CoreML::Result *)this, v13, (const void **)v22);
                  if (v23 < 0) {
                    operator delete(v22[0]);
                  }
                  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
                  {
                    if (*((char *)this + 31) < 0) {
                      operator delete(this[1]);
                    }
                    int v14 = v31;
                    std::string::basic_string[abi:ne180100]<0>(v22, "Stride Width");
                    CoreML::validatePositive((CoreML::Result *)this, v14, (const void **)v22);
                    if (v23 < 0) {
                      operator delete(v22[0]);
                    }
                    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
                    {
                      if (*((char *)this + 31) < 0) {
                        operator delete(this[1]);
                      }
                      int v15 = v38;
                      int v16 = v32;
                      std::string::basic_string[abi:ne180100]<0>(v22, "Front");
                      CoreML::validatePooling3dPadding((CoreML::Result *)this, v15, v16);
                      if (v23 < 0) {
                        operator delete(v22[0]);
                      }
                      if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
                      {
                        if (*((char *)this + 31) < 0) {
                          operator delete(this[1]);
                        }
                        int v17 = v33;
                        std::string::basic_string[abi:ne180100]<0>(v22, "Back");
                        CoreML::validatePooling3dPadding((CoreML::Result *)this, v15, v17);
                        if (v23 < 0) {
                          operator delete(v22[0]);
                        }
                        if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
                        {
                          if (*((char *)this + 31) < 0) {
                            operator delete(this[1]);
                          }
                          int v18 = v34;
                          std::string::basic_string[abi:ne180100]<0>(v22, "Top");
                          CoreML::validatePooling3dPadding((CoreML::Result *)this, v15, v18);
                          if (v23 < 0) {
                            operator delete(v22[0]);
                          }
                          if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
                          {
                            if (*((char *)this + 31) < 0) {
                              operator delete(this[1]);
                            }
                            int v19 = v35;
                            std::string::basic_string[abi:ne180100]<0>(v22, "Bottom");
                            CoreML::validatePooling3dPadding((CoreML::Result *)this, v15, v19);
                            if (v23 < 0) {
                              operator delete(v22[0]);
                            }
                            if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
                            {
                              if (*((char *)this + 31) < 0) {
                                operator delete(this[1]);
                              }
                              int v20 = v36;
                              std::string::basic_string[abi:ne180100]<0>(v22, "Left");
                              CoreML::validatePooling3dPadding((CoreML::Result *)this, v15, v20);
                              if (v23 < 0) {
                                operator delete(v22[0]);
                              }
                              if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
                              {
                                if (*((char *)this + 31) < 0) {
                                  operator delete(this[1]);
                                }
                                int v21 = v37;
                                std::string::basic_string[abi:ne180100]<0>(v22, "Right");
                                CoreML::validatePooling3dPadding((CoreML::Result *)this, v15, v21);
                                if (v23 < 0) {
                                  operator delete(v22[0]);
                                }
                                if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
                                {
                                  if (*((char *)this + 31) < 0) {
                                    operator delete(this[1]);
                                  }
                                  CoreML::Result::Result((CoreML::Result *)this);
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          std::string __p = &unk_1EF0D42A0;
          google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(&v25);
        }
      }
    }
  }
}

void sub_19EAE8580(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
}

void CoreML::validatePooling3dPadding(CoreML::Result *this, int a2, int a3)
{
  if (a2)
  {
    if (a3)
    {
      std::operator+<char>();
      size_t v6 = std::string::append(&v30, " cannot be non-zero (got ");
      long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
      v31.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v7;
      v6->__r_.__value_.__l.__size_ = 0;
      v6->__r_.__value_.__r.__words[2] = 0;
      v6->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v29, a3);
      if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v8 = &v29;
      }
      else {
        int v8 = (std::string *)v29.__r_.__value_.__r.__words[0];
      }
      if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v29.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v29.__r_.__value_.__l.__size_;
      }
      int v10 = std::string::append(&v31, (const std::string::value_type *)v8, size);
      long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      v32.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      int v12 = std::string::append(&v32, ") unless padding type is CUSTOM (got ");
      long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
      v33.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v13;
      v12->__r_.__value_.__l.__size_ = 0;
      v12->__r_.__value_.__r.__words[2] = 0;
      v12->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v28, a2);
      if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v14 = &v28;
      }
      else {
        int v14 = (std::string *)v28.__r_.__value_.__r.__words[0];
      }
      if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v15 = HIBYTE(v28.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v15 = v28.__r_.__value_.__l.__size_;
      }
      int v16 = std::string::append(&v33, (const std::string::value_type *)v14, v15);
      long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      v34.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      int v18 = std::string::append(&v34, ").");
      long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      std::string::size_type v36 = v18->__r_.__value_.__r.__words[2];
      long long v35 = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v34.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v28.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v33.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v32.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v29.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v31.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v30.__r_.__value_.__l.__data_);
      }
      *(void *)this = 13;
      std::operator+<char>();
LABEL_49:
      if (SHIBYTE(v36) < 0) {
        operator delete((void *)v35);
      }
      return;
    }
  }
  else if (a3 < 0)
  {
    std::operator+<char>();
    int v20 = std::string::append(&v32, " must be non-negative, got ");
    long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v33.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v31, a3);
    if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v22 = &v31;
    }
    else {
      uint64_t v22 = (std::string *)v31.__r_.__value_.__r.__words[0];
    }
    if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v23 = HIBYTE(v31.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v23 = v31.__r_.__value_.__l.__size_;
    }
    uint64_t v24 = std::string::append(&v33, (const std::string::value_type *)v22, v23);
    long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v34.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    int v26 = std::string::append(&v34, ".");
    long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    std::string::size_type v36 = v26->__r_.__value_.__r.__words[2];
    long long v35 = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v34.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v31.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v33.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v32.__r_.__value_.__l.__data_);
    }
    *(void *)this = 13;
    std::operator+<char>();
    goto LABEL_49;
  }

  CoreML::Result::Result(this);
}

void sub_19EAE899C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (*(char *)(v47 - 57) < 0) {
    operator delete(*(void **)(v47 - 80));
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateGlobalPooling3dLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2, const CoreML::Specification::NeuralNetworkLayer *a3)
{
  CoreML::validateInputCount((CoreML *)this, a3, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0) {
      operator delete(this[1]);
    }
    CoreML::validateOutputCount((CoreML *)this, a3, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0) {
        operator delete(this[1]);
      }
      if (!*(unsigned char *)a2) {
        goto LABEL_18;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "Pooling3d");
      size_t v6 = (char *)a2 + 32;
      CoreML::validateInputOutputRankEquality((CoreML::Result *)this, a3, (uint64_t)__p, (uint64_t)v6);
      if (v10 < 0) {
        operator delete(__p[0]);
      }
      if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
      {
        if (*((char *)this + 31) < 0) {
          operator delete(this[1]);
        }
        std::string::basic_string[abi:ne180100]<0>(v7, "Pooling3d");
        CoreML::validateRankCount((uint64_t)this, a3, (uint64_t)v7, 5, -1, (uint64_t)v6);
        if (v8 < 0) {
          operator delete(v7[0]);
        }
        if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
        {
          if (*((char *)this + 31) < 0) {
            operator delete(this[1]);
          }
LABEL_18:
          CoreML::Result::Result((CoreML::Result *)this);
        }
      }
    }
  }
}

void sub_19EAE8C0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validatePaddingLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2, uint64_t a3)
{
  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0) {
      operator delete(this[1]);
    }
    CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0) {
        operator delete(this[1]);
      }
      if (*(unsigned char *)a2)
      {
        std::string::basic_string[abi:ne180100]<0>(v27, "Padding");
        long long v7 = (char *)a2 + 32;
        CoreML::validateInputOutputRankEquality((CoreML::Result *)this, (void *)a3, (uint64_t)v27, (uint64_t)v7);
        if (v28 < 0) {
          operator delete(v27[0]);
        }
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
          return;
        }
        if (*((char *)this + 31) < 0) {
          operator delete(this[1]);
        }
        std::string::basic_string[abi:ne180100]<0>(&v25, "Padding");
        CoreML::validateRankCount((uint64_t)this, (void *)a3, (uint64_t)&v25, 2, -1, (uint64_t)v7);
        if (SHIBYTE(v26) < 0) {
          operator delete((void *)v25);
        }
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
          return;
        }
        if (*((char *)this + 31) < 0) {
          operator delete(this[1]);
        }
      }
      if (*(_DWORD *)(a3 + 140) == 200)
      {
        char v8 = *(uint64_t **)(a3 + 128);
      }
      else
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
        char v8 = &CoreML::Specification::_PaddingLayerParams_default_instance_;
      }
      int v9 = (uint64_t *)v8[2];
      if (!v9) {
        int v9 = &CoreML::Specification::_BorderAmounts_default_instance_;
      }
      if ((*((_DWORD *)v9 + 6) | 2) == 2)
      {
        if (*((_DWORD *)v8 + 9))
        {
          CoreML::Result::Result((CoreML::Result *)this);
          return;
        }
        std::operator+<char>();
        long long v19 = std::string::append(&v24, " padding type is not set.");
        long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
        std::string::size_type v26 = v19->__r_.__value_.__r.__words[2];
        long long v25 = v20;
        v19->__r_.__value_.__l.__size_ = 0;
        v19->__r_.__value_.__r.__words[2] = 0;
        v19->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v24.__r_.__value_.__l.__data_);
        }
        *this = (void *)13;
        std::operator+<char>();
      }
      else
      {
        std::operator+<char>();
        char v10 = std::string::append(&v22, " specifies ");
        long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
        v23.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v11;
        v10->__r_.__value_.__l.__size_ = 0;
        v10->__r_.__value_.__r.__words[2] = 0;
        v10->__r_.__value_.__r.__words[0] = 0;
        int v12 = (uint64_t *)v8[2];
        if (!v12) {
          int v12 = &CoreML::Specification::_BorderAmounts_default_instance_;
        }
        std::to_string(&__p, *((_DWORD *)v12 + 6));
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = __p.__r_.__value_.__l.__size_;
        }
        std::string::size_type v15 = std::string::append(&v23, (const std::string::value_type *)p_p, size);
        long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
        v24.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v16;
        v15->__r_.__value_.__l.__size_ = 0;
        v15->__r_.__value_.__r.__words[2] = 0;
        v15->__r_.__value_.__r.__words[0] = 0;
        long long v17 = std::string::append(&v24, " padding amounts but it must either specify 2 (for x and y axes), or 0 for the default values.");
        long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
        std::string::size_type v26 = v17->__r_.__value_.__r.__words[2];
        long long v25 = v18;
        v17->__r_.__value_.__l.__size_ = 0;
        v17->__r_.__value_.__r.__words[2] = 0;
        v17->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v24.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v23.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v22.__r_.__value_.__l.__data_);
        }
        *this = (void *)13;
        std::operator+<char>();
      }
      if (SHIBYTE(v26) < 0) {
        operator delete((void *)v25);
      }
    }
  }
}

void sub_19EAE8F78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 57) < 0) {
    operator delete(*(void **)(v33 - 80));
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateLRNLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2, uint64_t a3)
{
  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0) {
      operator delete(this[1]);
    }
    CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0) {
        operator delete(this[1]);
      }
      if (*(unsigned char *)a2)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "LRNLayer");
        long long v7 = (char *)a2 + 32;
        CoreML::validateInputOutputRankEquality((CoreML::Result *)this, (void *)a3, (uint64_t)__p, (uint64_t)v7);
        if (v15 < 0) {
          operator delete(__p[0]);
        }
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
          return;
        }
        if (*((char *)this + 31) < 0) {
          operator delete(this[1]);
        }
        std::string::basic_string[abi:ne180100]<0>(v12, "LRNLayer");
        CoreML::validateRankCount((uint64_t)this, (void *)a3, (uint64_t)v12, 3, -1, (uint64_t)v7);
        if (SHIBYTE(v13) < 0) {
          operator delete(v12[0]);
        }
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
          return;
        }
        if (*((char *)this + 31) < 0) {
          operator delete(this[1]);
        }
      }
      if (*(_DWORD *)(a3 + 140) == 180)
      {
        char v8 = *(uint64_t **)(a3 + 128);
      }
      else
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
        char v8 = &CoreML::Specification::_LRNLayerParams_default_instance_;
      }
      if (*((float *)v8 + 8) >= 0.0)
      {
        CoreML::Result::Result((CoreML::Result *)this);
      }
      else
      {
        std::operator+<char>();
        int v9 = std::string::append(&v11, "' must be positive.");
        long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
        std::string::size_type v13 = v9->__r_.__value_.__r.__words[2];
        *(_OWORD *)int v12 = v10;
        v9->__r_.__value_.__l.__size_ = 0;
        v9->__r_.__value_.__r.__words[2] = 0;
        v9->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v11.__r_.__value_.__l.__data_);
        }
        *this = (void *)13;
        std::operator+<char>();
        if (SHIBYTE(v13) < 0) {
          operator delete(v12[0]);
        }
      }
    }
  }
}

void sub_19EAE9220(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateSplitLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2, uint64_t a3)
{
  v30[2] = *MEMORY[0x1E4F143B8];
  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0) {
      operator delete(this[1]);
    }
    CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 2, -1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0) {
        operator delete(this[1]);
      }
      if (!*(unsigned char *)a2) {
        goto LABEL_28;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "Split");
      size_t v6 = (char *)a2 + 32;
      CoreML::validateInputOutputRankEquality((CoreML::Result *)this, (void *)a3, (uint64_t)__p, (uint64_t)a2 + 32);
      if (v29 < 0) {
        operator delete(__p[0]);
      }
      if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
        return;
      }
      if (*((char *)this + 31) < 0) {
        operator delete(this[1]);
      }
      std::string::basic_string[abi:ne180100]<0>(&v25, "Split");
      CoreML::validateRankCount((uint64_t)this, (void *)a3, (uint64_t)&v25, 3, -1, (uint64_t)a2 + 32);
      if (v27 < 0) {
        operator delete(v25);
      }
      if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
        return;
      }
      if (*((char *)this + 31) < 0) {
        operator delete(this[1]);
      }
      long long v7 = *(void **)(*(void *)(a3 + 56) + 8);
      char v8 = (void *)((char *)a2 + 40);
      if ((void *)((char *)a2 + 40) == std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>((uint64_t)a2 + 32, v7)|| ((v9 = (int *)std::map<std::string,std::string>::at((uint64_t)a2 + 32, v7), (uint64_t v10 = *(void *)(a3 + 56)) != 0)? (v11 = (void **)(v10 + 8)): (v11 = 0), v12 = *(int *)(a3 + 48), !v12))
      {
LABEL_28:
        CoreML::Result::Result((CoreML::Result *)this);
        return;
      }
      int v13 = *v9;
      uint64_t v14 = 8 * v12;
      while (1)
      {
        char v15 = *v11;
        if (v8 != std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>((uint64_t)v6, *v11)&& v13 != *(_DWORD *)std::map<std::string,std::string>::at((uint64_t)v6, v15))
        {
          break;
        }
        ++v11;
        v14 -= 8;
        if (!v14) {
          goto LABEL_28;
        }
      }
      long long v16 = *(long long **)(a3 + 112);
      if (*((char *)v16 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)v16, *((void *)v16 + 1));
      }
      else
      {
        long long v17 = *v16;
        v23.__r_.__value_.__r.__words[2] = *((void *)v16 + 2);
        *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v17;
      }
      long long v18 = std::string::insert(&v23, 0, "Layer '");
      long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      v24.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      long long v20 = std::string::append(&v24, "' of type 'Split' must have equal ranks for its outputs, but they are not equal.");
      long long v21 = (void *)v20->__r_.__value_.__r.__words[0];
      v30[0] = v20->__r_.__value_.__l.__size_;
      *(void *)((char *)v30 + 7) = *(std::string::size_type *)((char *)&v20->__r_.__value_.__r.__words[1] + 7);
      char v22 = HIBYTE(v20->__r_.__value_.__r.__words[2]);
      v20->__r_.__value_.__l.__size_ = 0;
      v20->__r_.__value_.__r.__words[2] = 0;
      v20->__r_.__value_.__r.__words[0] = 0;
      *(void *)&v26[7] = *(void *)((char *)v30 + 7);
      long long v25 = v21;
      *(void *)std::string::size_type v26 = v30[0];
      char v27 = v22;
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v24.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v23.__r_.__value_.__l.__data_);
      }
      *this = (void *)13;
      std::operator+<char>();
      if (v27 < 0) {
        operator delete(v25);
      }
    }
  }
}

void sub_19EAE9578(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
}

void CoreML::NeuralNetworkSpecValidator::validateAddLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  CoreML::validateInputCount((CoreML *)this, a2, 1, -1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0) {
      operator delete(this[1]);
    }
    CoreML::validateOutputCount((CoreML *)this, a2, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0) {
        operator delete(this[1]);
      }
      CoreML::Result::Result((CoreML::Result *)this);
    }
  }
}

void CoreML::NeuralNetworkSpecValidator::validateUnaryFunctionLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2, const CoreML::Specification::NeuralNetworkLayer *a3)
{
  CoreML::validateInputCount((CoreML *)this, a3, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0) {
      operator delete(this[1]);
    }
    CoreML::validateOutputCount((CoreML *)this, a3, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0) {
        operator delete(this[1]);
      }
      if (!*(unsigned char *)a2) {
        goto LABEL_13;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "Unary");
      CoreML::validateInputOutputRankEquality((CoreML::Result *)this, a3, (uint64_t)__p, (uint64_t)a2 + 32);
      if (v7 < 0) {
        operator delete(__p[0]);
      }
      if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
      {
        if (*((char *)this + 31) < 0) {
          operator delete(this[1]);
        }
LABEL_13:
        CoreML::Result::Result((CoreML::Result *)this);
      }
    }
  }
}

void sub_19EAE9774(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateUpsampleLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2, uint64_t a3)
{
  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0) {
      operator delete(this[1]);
    }
    CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0) {
        operator delete(this[1]);
      }
      if (*(unsigned char *)a2)
      {
        std::string::basic_string[abi:ne180100]<0>(v35, "Upsample");
        char v7 = (char *)a2 + 32;
        CoreML::validateInputOutputRankEquality((CoreML::Result *)this, (void *)a3, (uint64_t)v35, (uint64_t)v7);
        if (v36 < 0) {
          operator delete(v35[0]);
        }
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
          return;
        }
        if (*((char *)this + 31) < 0) {
          operator delete(this[1]);
        }
        std::string::basic_string[abi:ne180100]<0>(&v33, "Upsample");
        CoreML::validateRankCount((uint64_t)this, (void *)a3, (uint64_t)&v33, 3, -1, (uint64_t)v7);
        if (SHIBYTE(v34) < 0) {
          operator delete((void *)v33);
        }
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
          return;
        }
        if (*((char *)this + 31) < 0) {
          operator delete(this[1]);
        }
      }
      if (*(_DWORD *)(a3 + 140) == 210)
      {
        char v8 = *(int **)(a3 + 128);
      }
      else
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
        char v8 = (int *)&CoreML::Specification::_UpsampleLayerParams_default_instance_;
      }
      int v9 = v8[4];
      int v10 = v8[10];
      if (v9)
      {
        if (v9 != 2 || v10)
        {
LABEL_36:
          std::operator+<char>();
          int v13 = std::string::append(&v29, "'. Only one of scalingFactor and fractionalScalingFactor can be set, and if set, must be of size 2. Found scalingFactor of size ");
          long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
          v30.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v14;
          v13->__r_.__value_.__l.__size_ = 0;
          v13->__r_.__value_.__r.__words[2] = 0;
          v13->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v28, v8[4]);
          if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            char v15 = &v28;
          }
          else {
            char v15 = (std::string *)v28.__r_.__value_.__r.__words[0];
          }
          if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v28.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v28.__r_.__value_.__l.__size_;
          }
          long long v17 = std::string::append(&v30, (const std::string::value_type *)v15, size);
          long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
          v31.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v18;
          v17->__r_.__value_.__l.__size_ = 0;
          v17->__r_.__value_.__r.__words[2] = 0;
          v17->__r_.__value_.__r.__words[0] = 0;
          long long v19 = std::string::append(&v31, " and fractionalScalingFactor of size ");
          long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
          v32.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v20;
          v19->__r_.__value_.__l.__size_ = 0;
          v19->__r_.__value_.__r.__words[2] = 0;
          v19->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v27, v8[10]);
          if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            long long v21 = &v27;
          }
          else {
            long long v21 = (std::string *)v27.__r_.__value_.__r.__words[0];
          }
          if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v22 = HIBYTE(v27.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v22 = v27.__r_.__value_.__l.__size_;
          }
          std::string v23 = std::string::append(&v32, (const std::string::value_type *)v21, v22);
          long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
          std::string::size_type v34 = v23->__r_.__value_.__r.__words[2];
          long long v33 = v24;
          v23->__r_.__value_.__l.__size_ = 0;
          v23->__r_.__value_.__r.__words[2] = 0;
          v23->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v27.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v32.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v31.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v28.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v30.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v29.__r_.__value_.__l.__data_);
          }
          *this = (void *)13;
          std::operator+<char>();
          goto LABEL_61;
        }
      }
      else if (v10)
      {
        if (v10 != 2) {
          goto LABEL_36;
        }
        if (v8[15] && v8[16])
        {
LABEL_35:
          CoreML::Result::Result((CoreML::Result *)this);
          return;
        }
        std::operator+<char>();
        std::string v11 = std::string::append(&v32, "'. Fractional upsample only compatible with align_corners=true or align_corners=false");
        long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
        std::string::size_type v34 = v11->__r_.__value_.__r.__words[2];
        long long v33 = v12;
        v11->__r_.__value_.__l.__size_ = 0;
        v11->__r_.__value_.__r.__words[2] = 0;
        v11->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v32.__r_.__value_.__l.__data_);
        }
LABEL_32:
        *this = (void *)13;
        std::operator+<char>();
LABEL_61:
        if (SHIBYTE(v34) < 0) {
          operator delete((void *)v33);
        }
        return;
      }
      if (!v8[16] || v8[15]) {
        goto LABEL_35;
      }
      std::operator+<char>();
      long long v25 = std::string::append(&v32, "' of type Upsample uses Nearest Neighbors but uses linear upsampling mode other than DEFAULT.");
      long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      std::string::size_type v34 = v25->__r_.__value_.__r.__words[2];
      long long v33 = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v32.__r_.__value_.__l.__data_);
      }
      goto LABEL_32;
    }
  }
}

void sub_19EAE9BC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (*(char *)(v40 - 73) < 0) {
    operator delete(*(void **)(v40 - 96));
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateBiasLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2, uint64_t a3)
{
  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0) {
      operator delete(this[1]);
    }
    CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0) {
        operator delete(this[1]);
      }
      if (*(unsigned char *)a2)
      {
        std::string::basic_string[abi:ne180100]<0>(v46, "Bias");
        char v7 = (char *)a2 + 32;
        CoreML::validateInputOutputRankEquality((CoreML::Result *)this, (void *)a3, (uint64_t)v46, (uint64_t)v7);
        if (v47 < 0) {
          operator delete(v46[0]);
        }
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
          return;
        }
        if (*((char *)this + 31) < 0) {
          operator delete(this[1]);
        }
        std::string::basic_string[abi:ne180100]<0>(&v44, "Bias");
        CoreML::validateRankCount((uint64_t)this, (void *)a3, (uint64_t)&v44, 3, -1, (uint64_t)v7);
        if (SHIBYTE(v45) < 0) {
          operator delete((void *)v44);
        }
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
          return;
        }
        if (*((char *)this + 31) < 0) {
          operator delete(this[1]);
        }
      }
      if (*(_DWORD *)(a3 + 140) == 250)
      {
        char v8 = *(uint64_t **)(a3 + 128);
      }
      else
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
        char v8 = &CoreML::Specification::_BiasLayerParams_default_instance_;
      }
      if (v8[5]) {
        int v9 = (uint64_t *)v8[5];
      }
      else {
        int v9 = &CoreML::Specification::_WeightParams_default_instance_;
      }
      uint64_t v10 = v9[5];
      if (*(char *)(v10 + 23) < 0) {
        uint64_t v11 = *(void *)(v10 + 8);
      }
      else {
        uint64_t v11 = *(unsigned __int8 *)(v10 + 23);
      }
      uint64_t v12 = v9[6];
      if (*(char *)(v12 + 23) < 0) {
        uint64_t v13 = *(void *)(v12 + 8);
      }
      else {
        uint64_t v13 = *(unsigned __int8 *)(v12 + 23);
      }
      int v14 = *((_DWORD *)v9 + 4);
      uint64_t v15 = v9[7];
      if (*(char *)(v15 + 23) < 0) {
        uint64_t v16 = *(void *)(v15 + 8);
      }
      else {
        uint64_t v16 = *(unsigned __int8 *)(v15 + 23);
      }
      BOOL v17 = v14 <= 0;
      BOOL v18 = v14 > 0;
      if (v17) {
        int v19 = 1;
      }
      else {
        int v19 = 2;
      }
      if (v11) {
        unsigned int v20 = v19;
      }
      else {
        unsigned int v20 = v18;
      }
      if (v13) {
        ++v20;
      }
      if (v16) {
        ++v20;
      }
      if (v20 <= 1)
      {
        uint64_t v23 = *((unsigned int *)v8 + 4);
        if ((v23 | 2) == 3)
        {
          uint64_t v24 = v8[3];
          long long v25 = (uint64_t *)(v24 + 8);
          unint64_t v26 = 1;
          uint64_t v27 = v23;
          do
          {
            uint64_t v28 = *v25++;
            v26 *= v28;
            --v27;
          }
          while (v27);
          if (v23 == 3 && (unint64_t v29 = *(void *)(v24 + 8), v29 >= 2))
          {
            std::string::basic_string[abi:ne180100]<0>(&v44, "Bias");
            uint64_t v30 = *(void *)(a3 + 112);
            std::string::basic_string[abi:ne180100]<0>(&v43, "bias");
            CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v9, v26, v29, (const void **)&v44, v30, (uint64_t)&v43);
          }
          else
          {
            std::string::basic_string[abi:ne180100]<0>(&v44, "Bias");
            uint64_t v31 = *(void *)(a3 + 112);
            std::string::basic_string[abi:ne180100]<0>(&v43, "bias");
            CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v9, v26, 1, (const void **)&v44, v31, (uint64_t)&v43);
          }
          if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v43.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v45) < 0) {
            operator delete((void *)v44);
          }
          if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
          {
            if (*((char *)this + 31) < 0) {
              operator delete(this[1]);
            }
            CoreML::Result::Result((CoreML::Result *)this);
          }
          return;
        }
        std::operator+<char>();
        std::string v32 = std::string::append(&v41, "' cannot be ");
        long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
        v42.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v33;
        v32->__r_.__value_.__l.__size_ = 0;
        v32->__r_.__value_.__r.__words[2] = 0;
        v32->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&__p, *((_DWORD *)v8 + 4));
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = __p.__r_.__value_.__l.__size_;
        }
        char v36 = std::string::append(&v42, (const std::string::value_type *)p_p, size);
        long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
        v43.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v37;
        v36->__r_.__value_.__l.__size_ = 0;
        v36->__r_.__value_.__r.__words[2] = 0;
        v36->__r_.__value_.__r.__words[0] = 0;
        int v38 = std::string::append(&v43, " dimensional. Must be 1D or 3D.");
        long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
        std::string::size_type v45 = v38->__r_.__value_.__r.__words[2];
        long long v44 = v39;
        v38->__r_.__value_.__l.__size_ = 0;
        v38->__r_.__value_.__r.__words[2] = 0;
        v38->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v43.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v42.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v41.__r_.__value_.__l.__data_);
        }
        *this = (void *)13;
        std::operator+<char>();
      }
      else
      {
        std::operator+<char>();
        long long v21 = std::string::append(&v43, "' has both full precision and half precision weights and/or bias fields populated");
        long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
        std::string::size_type v45 = v21->__r_.__value_.__r.__words[2];
        long long v44 = v22;
        v21->__r_.__value_.__l.__size_ = 0;
        v21->__r_.__value_.__r.__words[2] = 0;
        v21->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v43.__r_.__value_.__l.__data_);
        }
        *this = (void *)13;
        std::operator+<char>();
      }
      if (SHIBYTE(v45) < 0) {
        operator delete((void *)v44);
      }
    }
  }
}

void sub_19EAEA148(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v33 - 73) < 0) {
    operator delete(*(void **)(v33 - 96));
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateL2NormLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2, const CoreML::Specification::NeuralNetworkLayer *a3)
{
  CoreML::validateInputCount((CoreML *)this, a3, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0) {
      operator delete(this[1]);
    }
    CoreML::validateOutputCount((CoreML *)this, a3, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0) {
        operator delete(this[1]);
      }
      if (!*(unsigned char *)a2) {
        goto LABEL_18;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "L2Normalize");
      size_t v6 = (char *)a2 + 32;
      CoreML::validateInputOutputRankEquality((CoreML::Result *)this, a3, (uint64_t)__p, (uint64_t)v6);
      if (v10 < 0) {
        operator delete(__p[0]);
      }
      if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
      {
        if (*((char *)this + 31) < 0) {
          operator delete(this[1]);
        }
        std::string::basic_string[abi:ne180100]<0>(v7, "L2Normalize");
        CoreML::validateRankCount((uint64_t)this, a3, (uint64_t)v7, 3, -1, (uint64_t)v6);
        if (v8 < 0) {
          operator delete(v7[0]);
        }
        if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
        {
          if (*((char *)this + 31) < 0) {
            operator delete(this[1]);
          }
LABEL_18:
          CoreML::Result::Result((CoreML::Result *)this);
        }
      }
    }
  }
}

void sub_19EAEA364(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateReshapeLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2, uint64_t a3)
{
  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0) {
      operator delete(this[1]);
    }
    CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0) {
        operator delete(this[1]);
      }
      if (*(unsigned char *)a2)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "Reshape");
        char v7 = (char *)a2 + 32;
        CoreML::validateInputOutputRankEquality((CoreML::Result *)this, (void *)a3, (uint64_t)__p, (uint64_t)v7);
        if (v15 < 0) {
          operator delete(__p[0]);
        }
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
          return;
        }
        if (*((char *)this + 31) < 0) {
          operator delete(this[1]);
        }
        std::string::basic_string[abi:ne180100]<0>(v12, "Reshape");
        CoreML::validateRankCount((uint64_t)this, (void *)a3, (uint64_t)v12, 5, 5, (uint64_t)v7);
        if (SHIBYTE(v13) < 0) {
          operator delete(v12[0]);
        }
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
          return;
        }
        if (*((char *)this + 31) < 0) {
          operator delete(this[1]);
        }
      }
      if (*(_DWORD *)(a3 + 140) == 300)
      {
        char v8 = *(uint64_t **)(a3 + 128);
      }
      else
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
        char v8 = &CoreML::Specification::_ReshapeLayerParams_default_instance_;
      }
      if ((*((_DWORD *)v8 + 4) - 3) >= 2)
      {
        std::operator+<char>();
        int v9 = std::string::append(&v11, "' target shape must be 3D or 4D.");
        long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
        std::string::size_type v13 = v9->__r_.__value_.__r.__words[2];
        *(_OWORD *)uint64_t v12 = v10;
        v9->__r_.__value_.__l.__size_ = 0;
        v9->__r_.__value_.__r.__words[2] = 0;
        v9->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v11.__r_.__value_.__l.__data_);
        }
        *this = (void *)13;
        std::operator+<char>();
        if (SHIBYTE(v13) < 0) {
          operator delete(v12[0]);
        }
      }
      else
      {
        CoreML::Result::Result((CoreML::Result *)this);
      }
    }
  }
}

void sub_19EAEA598(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateFlattenLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2, const CoreML::Specification::NeuralNetworkLayer *a3)
{
  CoreML::validateInputCount((CoreML *)this, a3, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0) {
      operator delete(this[1]);
    }
    CoreML::validateOutputCount((CoreML *)this, a3, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0) {
        operator delete(this[1]);
      }
      if (!*(unsigned char *)a2) {
        goto LABEL_18;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "Flatten");
      size_t v6 = (char *)a2 + 32;
      CoreML::validateInputOutputRankEquality((CoreML::Result *)this, a3, (uint64_t)__p, (uint64_t)v6);
      if (v10 < 0) {
        operator delete(__p[0]);
      }
      if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
      {
        if (*((char *)this + 31) < 0) {
          operator delete(this[1]);
        }
        std::string::basic_string[abi:ne180100]<0>(v7, "Flatten");
        CoreML::validateRankCount((uint64_t)this, a3, (uint64_t)v7, 3, -1, (uint64_t)v6);
        if (v8 < 0) {
          operator delete(v7[0]);
        }
        if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
        {
          if (*((char *)this + 31) < 0) {
            operator delete(this[1]);
          }
LABEL_18:
          CoreML::Result::Result((CoreML::Result *)this);
        }
      }
    }
  }
}

void sub_19EAEA730(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validatePermuteLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2, uint64_t a3)
{
  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0) {
      operator delete(this[1]);
    }
    CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0) {
        operator delete(this[1]);
      }
      if (*(unsigned char *)a2)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "Permute");
        char v7 = (char *)a2 + 32;
        CoreML::validateInputOutputRankEquality((CoreML::Result *)this, (void *)a3, (uint64_t)__p, (uint64_t)v7);
        if (v15 < 0) {
          operator delete(__p[0]);
        }
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
          return;
        }
        if (*((char *)this + 31) < 0) {
          operator delete(this[1]);
        }
        std::string::basic_string[abi:ne180100]<0>(v12, "Permute");
        CoreML::validateRankCount((uint64_t)this, (void *)a3, (uint64_t)v12, 5, 5, (uint64_t)v7);
        if (SHIBYTE(v13) < 0) {
          operator delete(v12[0]);
        }
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
          return;
        }
        if (*((char *)this + 31) < 0) {
          operator delete(this[1]);
        }
      }
      if (*(_DWORD *)(a3 + 140) == 310)
      {
        char v8 = *(uint64_t **)(a3 + 128);
      }
      else
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
        char v8 = &CoreML::Specification::_PermuteLayerParams_default_instance_;
      }
      if (*((_DWORD *)v8 + 4) == 4)
      {
        CoreML::Result::Result((CoreML::Result *)this);
      }
      else
      {
        std::operator+<char>();
        int v9 = std::string::append(&v11, "' must have 4D axis parameters.");
        long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
        std::string::size_type v13 = v9->__r_.__value_.__r.__words[2];
        *(_OWORD *)uint64_t v12 = v10;
        v9->__r_.__value_.__l.__size_ = 0;
        v9->__r_.__value_.__r.__words[2] = 0;
        v9->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v11.__r_.__value_.__l.__data_);
        }
        *this = (void *)13;
        std::operator+<char>();
        if (SHIBYTE(v13) < 0) {
          operator delete(v12[0]);
        }
      }
    }
  }
}

void sub_19EAEA960(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateReduceLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2, uint64_t a3)
{
  v27[2] = *MEMORY[0x1E4F143B8];
  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0) {
      operator delete(this[1]);
    }
    CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0) {
        operator delete(this[1]);
      }
      if (*(unsigned char *)a2 && *(int *)(a3 + 72) >= 1)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "Reduce");
        CoreML::validateInputOutputRankEquality((CoreML::Result *)this, (void *)a3, (uint64_t)__p, (uint64_t)a2 + 32);
        if (v26 < 0) {
          operator delete(__p[0]);
        }
        if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
        {
          if (*((char *)this + 31) < 0) {
            operator delete(this[1]);
          }
          int v7 = *(_DWORD *)(*(void *)(*(void *)(a3 + 80) + 8) + 36);
          uint64_t v23 = 0;
          long long v24 = 0uLL;
          if (*(_DWORD *)(a3 + 140) == 280)
          {
            char v8 = *(uint64_t **)(a3 + 128);
          }
          else
          {
            CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
            char v8 = &CoreML::Specification::_ReduceLayerParams_default_instance_;
          }
          int v9 = *((_DWORD *)v8 + 6);
          switch(v9)
          {
            case 0:
              if (v7 > 2) {
                goto LABEL_28;
              }
              goto LABEL_25;
            case 1:
              if (v7 > 1) {
                goto LABEL_28;
              }
              goto LABEL_25;
            case 2:
            case 3:
            case 4:
              if (v7 > 0) {
                goto LABEL_28;
              }
LABEL_25:
              uint64_t v12 = *(long long **)(a3 + 112);
              if (*((char *)v12 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)v12, *((void *)v12 + 1));
              }
              else
              {
                long long v13 = *v12;
                v21.__r_.__value_.__r.__words[2] = *((void *)v12 + 2);
                *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v13;
              }
              int v14 = std::string::insert(&v21, 0, "Reduce layer '");
              long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
              v22.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v15;
              v14->__r_.__value_.__l.__size_ = 0;
              v14->__r_.__value_.__r.__words[2] = 0;
              v14->__r_.__value_.__r.__words[0] = 0;
              uint64_t v16 = std::string::append(&v22, "': input's rank is smaller than the dimensions provided in the axis parameter");
              break;
            default:
              if (v9 != 0x80000000 && v9 != 0x7FFFFFFF) {
                goto LABEL_28;
              }
              long long v10 = *(long long **)(a3 + 112);
              if (*((char *)v10 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)v10, *((void *)v10 + 1));
              }
              else
              {
                long long v11 = *v10;
                v21.__r_.__value_.__r.__words[2] = *((void *)v10 + 2);
                *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v11;
              }
              BOOL v17 = std::string::insert(&v21, 0, "Reduce layer: '");
              long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
              v22.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v18;
              v17->__r_.__value_.__l.__size_ = 0;
              v17->__r_.__value_.__r.__words[2] = 0;
              v17->__r_.__value_.__r.__words[0] = 0;
              uint64_t v16 = std::string::append(&v22, "': unknown value for parameter 'axis'.");
              break;
          }
          int v19 = (void *)v16->__r_.__value_.__r.__words[0];
          v27[0] = v16->__r_.__value_.__l.__size_;
          *(void *)((char *)v27 + 7) = *(std::string::size_type *)((char *)&v16->__r_.__value_.__r.__words[1] + 7);
          char v20 = HIBYTE(v16->__r_.__value_.__r.__words[2]);
          v16->__r_.__value_.__l.__size_ = 0;
          v16->__r_.__value_.__r.__words[2] = 0;
          v16->__r_.__value_.__r.__words[0] = 0;
          *(void *)((char *)&v24 + 7) = *(void *)((char *)v27 + 7);
          uint64_t v23 = v19;
          *(void *)&long long v24 = v27[0];
          HIBYTE(v24) = v20;
          if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v22.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v21.__r_.__value_.__l.__data_);
          }
          *this = (void *)13;
          std::operator+<char>();
          if (SHIBYTE(v24) < 0) {
            operator delete(v23);
          }
        }
      }
      else
      {
LABEL_28:
        CoreML::Result::Result((CoreML::Result *)this);
      }
    }
  }
}

void sub_19EAEACC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
}

void CoreML::NeuralNetworkSpecValidator::validateReorganizeDataLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2, uint64_t a3)
{
  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0) {
      operator delete(this[1]);
    }
    CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0) {
        operator delete(this[1]);
      }
      if (*(unsigned char *)a2)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "ReorganizeData");
        int v7 = (char *)a2 + 32;
        CoreML::validateInputOutputRankEquality((CoreML::Result *)this, (void *)a3, (uint64_t)__p, (uint64_t)v7);
        if (v15 < 0) {
          operator delete(__p[0]);
        }
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
          return;
        }
        if (*((char *)this + 31) < 0) {
          operator delete(this[1]);
        }
        std::string::basic_string[abi:ne180100]<0>(v12, "ReorganizeData");
        CoreML::validateRankCount((uint64_t)this, (void *)a3, (uint64_t)v12, 3, -1, (uint64_t)v7);
        if (SHIBYTE(v13) < 0) {
          operator delete(v12[0]);
        }
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
          return;
        }
        if (*((char *)this + 31) < 0) {
          operator delete(this[1]);
        }
      }
      if (*(_DWORD *)(a3 + 140) == 345)
      {
        char v8 = *(uint64_t **)(a3 + 128);
      }
      else
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
        char v8 = &CoreML::Specification::_ReorganizeDataLayerParams_default_instance_;
      }
      if (*((int *)v8 + 4) > 1)
      {
        CoreML::Result::Result((CoreML::Result *)this);
      }
      else
      {
        std::operator+<char>();
        int v9 = std::string::append(&v11, "' must be > 1.");
        long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
        std::string::size_type v13 = v9->__r_.__value_.__r.__words[2];
        *(_OWORD *)uint64_t v12 = v10;
        v9->__r_.__value_.__l.__size_ = 0;
        v9->__r_.__value_.__r.__words[2] = 0;
        v9->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v11.__r_.__value_.__l.__data_);
        }
        *this = (void *)13;
        std::operator+<char>();
        if (SHIBYTE(v13) < 0) {
          operator delete(v12[0]);
        }
      }
    }
  }
}

void sub_19EAEAF48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateSliceLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2, uint64_t a3)
{
  v34[2] = *MEMORY[0x1E4F143B8];
  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
    return;
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
    return;
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  if (*(unsigned char *)a2 && *(int *)(a3 + 72) >= 1)
  {
    std::string::basic_string[abi:ne180100]<0>(v32, "Slice");
    CoreML::validateInputOutputRankEquality((CoreML::Result *)this, (void *)a3, (uint64_t)v32, (uint64_t)a2 + 32);
    if (v33 < 0) {
      operator delete(v32[0]);
    }
    if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
      return;
    }
    if (*((char *)this + 31) < 0) {
      operator delete(this[1]);
    }
    int v7 = *(_DWORD *)(*(void *)(*(void *)(a3 + 80) + 8) + 36);
    memset(__p, 0, sizeof(__p));
    if (*(_DWORD *)(a3 + 140) == 350)
    {
      char v8 = *(uint64_t **)(a3 + 128);
    }
    else
    {
      inited = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(inited);
      char v8 = &CoreML::Specification::_SliceLayerParams_default_instance_;
    }
    int v9 = *((_DWORD *)v8 + 10);
    if (v9)
    {
      if (v9 == 1)
      {
        if (v7 > 1) {
          goto LABEL_22;
        }
      }
      else
      {
        if (v9 != 2)
        {
          std::string::size_type v13 = *(long long **)(a3 + 112);
          if (*((char *)v13 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v29, *(const std::string::value_type **)v13, *((void *)v13 + 1));
          }
          else
          {
            long long v14 = *v13;
            v29.__r_.__value_.__r.__words[2] = *((void *)v13 + 2);
            *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v14;
          }
          long long v18 = std::string::insert(&v29, 0, "Slice layer: '");
          long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
          v30.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v19;
          v18->__r_.__value_.__l.__size_ = 0;
          v18->__r_.__value_.__r.__words[2] = 0;
          v18->__r_.__value_.__r.__words[0] = 0;
          BOOL v17 = std::string::append(&v30, "': unknown value for parameter 'axis'.");
          goto LABEL_34;
        }
        if (v7 > 0)
        {
LABEL_22:
          char v10 = 1;
          goto LABEL_41;
        }
      }
    }
    else if (v7 > 2)
    {
      goto LABEL_22;
    }
    std::string v11 = *(long long **)(a3 + 112);
    if (*((char *)v11 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v29, *(const std::string::value_type **)v11, *((void *)v11 + 1));
    }
    else
    {
      long long v12 = *v11;
      v29.__r_.__value_.__r.__words[2] = *((void *)v11 + 2);
      *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v12;
    }
    char v15 = std::string::insert(&v29, 0, "Slice layer '");
    long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v30.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    BOOL v17 = std::string::append(&v30, "': input's rank is smaller than the dimension provided in the axis parameter");
LABEL_34:
    char v20 = (void *)v17->__r_.__value_.__r.__words[0];
    v34[0] = v17->__r_.__value_.__l.__size_;
    *(void *)((char *)v34 + 7) = *(std::string::size_type *)((char *)&v17->__r_.__value_.__r.__words[1] + 7);
    char v21 = HIBYTE(v17->__r_.__value_.__r.__words[2]);
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    __p[0] = v20;
    __p[1] = (void *)v34[0];
    *(void **)((char *)&__p[1] + 7) = *(void **)((char *)v34 + 7);
    HIBYTE(__p[2]) = v21;
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v30.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v29.__r_.__value_.__l.__data_);
    }
    *this = (void *)13;
    inited = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)std::operator+<char>();
    char v10 = 0;
LABEL_41:
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    if ((v10 & 1) == 0) {
      return;
    }
  }
  if (*(_DWORD *)(a3 + 140) == 350)
  {
    std::string v22 = *(uint64_t **)(a3 + 128);
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(inited);
    std::string v22 = &CoreML::Specification::_SliceLayerParams_default_instance_;
  }
  if (*((int *)v22 + 8) <= 0)
  {
    std::operator+<char>();
    uint64_t v27 = std::string::append(&v30, "' must be > 1.");
    long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    __p[2] = (void *)v27->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v28;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v30.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    uint64_t v23 = v22[2];
    uint64_t v24 = v22[3];
    if ((v24 < 1 || v24 >= v23)
      && ((v24 & 0x8000000000000000) == 0 || (v23 & 0x8000000000000000) == 0 || v24 >= v23))
    {
      CoreML::Result::Result((CoreML::Result *)this);
      return;
    }
    std::operator+<char>();
    long long v25 = std::string::append(&v30, " has an end index before the start index.");
    long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    __p[2] = (void *)v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v30.__r_.__value_.__l.__data_);
    }
  }
  *this = (void *)13;
  std::operator+<char>();
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
}

void sub_19EAEB3DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateLoadConstantLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2, uint64_t a3)
{
  if ((*(_DWORD *)CoreML::Result::Result((CoreML::Result *)this) & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0) {
      operator delete(this[1]);
    }
    CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0) {
        operator delete(this[1]);
      }
      if (*(unsigned char *)a2)
      {
        int v7 = *(void **)(*(void *)(a3 + 56) + 8);
        size_t v6 = (const CoreML::Specification::NeuralNetworkLayer *)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>((uint64_t)a2 + 32, v7);
        if ((const CoreML::Specification::NeuralNetworkLayer *)((char *)a2 + 40) != v6)
        {
          int v8 = *(_DWORD *)std::map<std::string,std::string>::at((uint64_t)a2 + 32, v7);
          std::string::basic_string[abi:ne180100]<0>(v32, "LoadConstant");
          std::string::basic_string[abi:ne180100]<0>(&__p, "output");
          CoreML::checkRank((CoreML::Result *)this, *(void *)(a3 + 112), (uint64_t)v32, 5, 5, (uint64_t)&__p, v8);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v33) < 0) {
            operator delete(v32[0]);
          }
          if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
            return;
          }
          if (*((char *)this + 31) < 0) {
            operator delete(this[1]);
          }
        }
      }
      if (*(_DWORD *)(a3 + 140) == 290)
      {
        int v9 = *(uint64_t **)(a3 + 128);
      }
      else
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
        int v9 = &CoreML::Specification::_LoadConstantLayerParams_default_instance_;
      }
      if (v9[5]) {
        char v10 = (uint64_t *)v9[5];
      }
      else {
        char v10 = &CoreML::Specification::_WeightParams_default_instance_;
      }
      uint64_t v11 = v10[5];
      if (*(char *)(v11 + 23) < 0) {
        uint64_t v12 = *(void *)(v11 + 8);
      }
      else {
        uint64_t v12 = *(unsigned __int8 *)(v11 + 23);
      }
      uint64_t v13 = v10[6];
      if (*(char *)(v13 + 23) < 0) {
        uint64_t v14 = *(void *)(v13 + 8);
      }
      else {
        uint64_t v14 = *(unsigned __int8 *)(v13 + 23);
      }
      int v15 = *((_DWORD *)v10 + 4);
      uint64_t v16 = v10[7];
      if (*(char *)(v16 + 23) < 0) {
        uint64_t v17 = *(void *)(v16 + 8);
      }
      else {
        uint64_t v17 = *(unsigned __int8 *)(v16 + 23);
      }
      BOOL v18 = v15 <= 0;
      BOOL v19 = v15 > 0;
      if (v18) {
        int v20 = 1;
      }
      else {
        int v20 = 2;
      }
      if (v12) {
        unsigned int v21 = v20;
      }
      else {
        unsigned int v21 = v19;
      }
      if (v14) {
        ++v21;
      }
      if (v17) {
        ++v21;
      }
      if (v21 <= 1)
      {
        if (*((_DWORD *)v9 + 4) == 3)
        {
          uint64_t v24 = v9[3];
          unint64_t v25 = 1;
          for (uint64_t i = 8; i != 32; i += 8)
            v25 *= *(void *)(v24 + i);
          unint64_t v27 = *(void *)(v24 + 8);
          std::string::basic_string[abi:ne180100]<0>(v32, "LoadConstant");
          uint64_t v28 = *(void *)(a3 + 112);
          std::string::basic_string[abi:ne180100]<0>(&__p, "constants");
          if (v27 < 2) {
            CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v10, v25, 1, (const void **)v32, v28, (uint64_t)&__p);
          }
          else {
            CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v10, v25, v27, (const void **)v32, v28, (uint64_t)&__p);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v33) < 0) {
            operator delete(v32[0]);
          }
          if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
          {
            if (*((char *)this + 31) < 0) {
              operator delete(this[1]);
            }
            CoreML::Result::Result((CoreML::Result *)this);
          }
          return;
        }
        std::operator+<char>();
        std::string v29 = std::string::append(&__p, "' must be a 3D constant.");
        long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
        std::string::size_type v33 = v29->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string v32 = v30;
        v29->__r_.__value_.__l.__size_ = 0;
        v29->__r_.__value_.__r.__words[2] = 0;
        v29->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        std::operator+<char>();
        std::string v22 = std::string::append(&__p, "' has both full precision and half precision weight fields populated");
        long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
        std::string::size_type v33 = v22->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string v32 = v23;
        v22->__r_.__value_.__l.__size_ = 0;
        v22->__r_.__value_.__r.__words[2] = 0;
        v22->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      *this = (void *)13;
      std::operator+<char>();
      if (SHIBYTE(v33) < 0) {
        operator delete(v32[0]);
      }
    }
  }
}

void sub_19EAEB85C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateScaleLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2, uint64_t a3)
{
  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0) {
      operator delete(this[1]);
    }
    CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0) {
        operator delete(this[1]);
      }
      if (*(unsigned char *)a2)
      {
        std::string::basic_string[abi:ne180100]<0>(v96, "Scale");
        int v7 = (char *)a2 + 32;
        CoreML::validateInputOutputRankEquality((CoreML::Result *)this, (void *)a3, (uint64_t)v96, (uint64_t)v7);
        if (v97 < 0) {
          operator delete(v96[0]);
        }
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
          return;
        }
        if (*((char *)this + 31) < 0) {
          operator delete(this[1]);
        }
        std::string::basic_string[abi:ne180100]<0>(__p, "Scale");
        CoreML::validateRankCount((uint64_t)this, (void *)a3, (uint64_t)__p, 3, -1, (uint64_t)v7);
        if (SHIBYTE(v95) < 0) {
          operator delete(__p[0]);
        }
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
          return;
        }
        if (*((char *)this + 31) < 0) {
          operator delete(this[1]);
        }
      }
      if (*(_DWORD *)(a3 + 140) == 245)
      {
        int v8 = *(uint64_t **)(a3 + 128);
      }
      else
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
        int v8 = &CoreML::Specification::_ScaleLayerParams_default_instance_;
      }
      if (v8[8]) {
        int v9 = (uint64_t *)v8[8];
      }
      else {
        int v9 = &CoreML::Specification::_WeightParams_default_instance_;
      }
      uint64_t v10 = v9[5];
      uint64_t v11 = *(unsigned __int8 *)(v10 + 23);
      if (*(char *)(v10 + 23) < 0) {
        uint64_t v12 = *(void *)(v10 + 8);
      }
      else {
        uint64_t v12 = *(unsigned __int8 *)(v10 + 23);
      }
      uint64_t v13 = v9[6];
      uint64_t v14 = *(unsigned __int8 *)(v13 + 23);
      if (*(char *)(v13 + 23) < 0) {
        uint64_t v15 = *(void *)(v13 + 8);
      }
      else {
        uint64_t v15 = *(unsigned __int8 *)(v13 + 23);
      }
      int v16 = *((_DWORD *)v9 + 4);
      uint64_t v17 = v9[7];
      uint64_t v18 = *(unsigned __int8 *)(v17 + 23);
      if (*(char *)(v17 + 23) < 0) {
        uint64_t v19 = *(void *)(v17 + 8);
      }
      else {
        uint64_t v19 = *(unsigned __int8 *)(v17 + 23);
      }
      int v20 = *((unsigned __int8 *)v8 + 80);
      if (v16 <= 0) {
        int v21 = 1;
      }
      else {
        int v21 = 2;
      }
      if (v12) {
        unsigned int v22 = v21;
      }
      else {
        unsigned int v22 = v16 > 0;
      }
      if (v15) {
        ++v22;
      }
      if (v19) {
        unsigned int v23 = v22 + 1;
      }
      else {
        unsigned int v23 = v22;
      }
      if (v23 <= 1)
      {
        if (v23) {
          int v24 = 0;
        }
        else {
          int v24 = 5;
        }
        if (v16 <= 0 && v23)
        {
          if ((v11 & 0x80) != 0) {
            uint64_t v11 = *(void *)(v10 + 8);
          }
          if (v11)
          {
            int v24 = 1;
          }
          else
          {
            if ((v14 & 0x80) != 0) {
              uint64_t v14 = *(void *)(v13 + 8);
            }
            uint64_t v25 = v9[8];
            if (v9 != &CoreML::Specification::_WeightParams_default_instance_ && v14 && v25)
            {
              int v24 = 2;
            }
            else
            {
              if ((v18 & 0x80) != 0) {
                uint64_t v18 = *(void *)(v17 + 8);
              }
              if (v25) {
                BOOL v26 = v18 == 0;
              }
              else {
                BOOL v26 = 1;
              }
              if (v26 || v9 == &CoreML::Specification::_WeightParams_default_instance_) {
                int v24 = 5;
              }
              else {
                int v24 = 3;
              }
            }
          }
        }
      }
      else
      {
        int v24 = 4;
      }
      uint64_t v28 = (uint64_t *)v8[9];
      if (!v28) {
        uint64_t v28 = &CoreML::Specification::_WeightParams_default_instance_;
      }
      uint64_t v29 = v28[5];
      uint64_t v30 = *(unsigned __int8 *)(v29 + 23);
      if (*(char *)(v29 + 23) < 0) {
        uint64_t v31 = *(void *)(v29 + 8);
      }
      else {
        uint64_t v31 = *(unsigned __int8 *)(v29 + 23);
      }
      uint64_t v32 = v28[6];
      uint64_t v33 = *(unsigned __int8 *)(v32 + 23);
      if (*(char *)(v32 + 23) < 0) {
        uint64_t v34 = *(void *)(v32 + 8);
      }
      else {
        uint64_t v34 = *(unsigned __int8 *)(v32 + 23);
      }
      int v35 = *((_DWORD *)v28 + 4);
      uint64_t v36 = v28[7];
      uint64_t v37 = *(unsigned __int8 *)(v36 + 23);
      if (*(char *)(v36 + 23) < 0) {
        uint64_t v38 = *(void *)(v36 + 8);
      }
      else {
        uint64_t v38 = *(unsigned __int8 *)(v36 + 23);
      }
      if (v35 <= 0) {
        int v39 = 1;
      }
      else {
        int v39 = 2;
      }
      if (v31) {
        unsigned int v40 = v39;
      }
      else {
        unsigned int v40 = v35 > 0;
      }
      if (v34) {
        ++v40;
      }
      if (v38) {
        unsigned int v41 = v40 + 1;
      }
      else {
        unsigned int v41 = v40;
      }
      if (v41 <= 1)
      {
        if (v41) {
          int v42 = 0;
        }
        else {
          int v42 = 5;
        }
        if (v35 <= 0 && v41)
        {
          if ((v30 & 0x80) != 0) {
            uint64_t v30 = *(void *)(v29 + 8);
          }
          if (v30)
          {
            int v42 = 1;
          }
          else
          {
            if ((v33 & 0x80) != 0) {
              uint64_t v33 = *(void *)(v32 + 8);
            }
            uint64_t v43 = v28[8];
            if (v28 != &CoreML::Specification::_WeightParams_default_instance_ && v33 && v43)
            {
              int v42 = 2;
            }
            else
            {
              if ((v37 & 0x80) != 0) {
                uint64_t v37 = *(void *)(v36 + 8);
              }
              if (v43) {
                BOOL v44 = v37 == 0;
              }
              else {
                BOOL v44 = 1;
              }
              if (v44 || v28 == &CoreML::Specification::_WeightParams_default_instance_) {
                int v42 = 5;
              }
              else {
                int v42 = 3;
              }
            }
          }
        }
      }
      else
      {
        int v42 = 4;
      }
      if (*((unsigned char *)v8 + 80)) {
        BOOL v46 = v42 == 4;
      }
      else {
        BOOL v46 = 0;
      }
      int v47 = v46;
      if (v24 == 4 || v47)
      {
        std::operator+<char>();
        long long v50 = std::string::append(&v93, "' has invalid scale/bias fields.");
        long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
        std::string::size_type v95 = v50->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v51;
        v50->__r_.__value_.__l.__size_ = 0;
        v50->__r_.__value_.__r.__words[2] = 0;
        v50->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v93.__r_.__value_.__l.__data_);
        }
        goto LABEL_141;
      }
      if (*((unsigned char *)v8 + 80) && (v24 == 1 && !v42 || !v24 && v42 == 1))
      {
        std::operator+<char>();
        BOOL v48 = std::string::append(&v93, "' has invalid scale/bias fields. Field value types should match and should either be half or full precision.");
        long long v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
        std::string::size_type v95 = v48->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v49;
        v48->__r_.__value_.__l.__size_ = 0;
        v48->__r_.__value_.__r.__words[2] = 0;
        v48->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v93.__r_.__value_.__l.__data_);
        }
LABEL_141:
        *this = (void *)13;
        std::operator+<char>();
        goto LABEL_142;
      }
      int v52 = *((_DWORD *)v8 + 4);
      if ((v52 | 2) == 3)
      {
        uint64_t v53 = v8[3];
        uint64_t v54 = (uint64_t *)(v53 + 8);
        unint64_t v55 = 1;
        uint64_t v56 = *((unsigned int *)v8 + 4);
        do
        {
          uint64_t v57 = *v54++;
          v55 *= v57;
          --v56;
        }
        while (v56);
        if (v52 == 3 && (unint64_t v58 = *(void *)(v53 + 8), v58 >= 2))
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "Scale");
          uint64_t v59 = *(void *)(a3 + 112);
          std::string::basic_string[abi:ne180100]<0>(&v93, "scale");
          CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v9, v55, v58, (const void **)__p, v59, (uint64_t)&v93);
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "Scale");
          uint64_t v60 = *(void *)(a3 + 112);
          std::string::basic_string[abi:ne180100]<0>(&v93, "scale");
          CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v9, v55, 1, (const void **)__p, v60, (uint64_t)&v93);
        }
        if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v93.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v95) < 0) {
          operator delete(__p[0]);
        }
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
          return;
        }
        if (*((char *)this + 31) < 0) {
          operator delete(this[1]);
        }
        if (!v20)
        {
LABEL_194:
          CoreML::Result::Result((CoreML::Result *)this);
          return;
        }
        int v61 = *((_DWORD *)v8 + 10);
        if ((v61 | 2) == 3)
        {
          uint64_t v62 = v8[6];
          unsigned int v63 = (uint64_t *)(v62 + 8);
          unint64_t v64 = 1;
          uint64_t v65 = *((unsigned int *)v8 + 10);
          do
          {
            uint64_t v66 = *v63++;
            v64 *= v66;
            --v65;
          }
          while (v65);
          if (v61 == 3 && (unint64_t v67 = *(void *)(v62 + 8), v67 >= 2))
          {
            unsigned int v68 = (uint64_t *)v8[9];
            std::string::basic_string[abi:ne180100]<0>(__p, "Scale");
            uint64_t v69 = *(void *)(a3 + 112);
            std::string::basic_string[abi:ne180100]<0>(&v93, "bias");
            if (v68) {
              size_t v70 = v68;
            }
            else {
              size_t v70 = &CoreML::Specification::_WeightParams_default_instance_;
            }
            CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v70, v64, v67, (const void **)__p, v69, (uint64_t)&v93);
          }
          else
          {
            uint64_t v79 = (uint64_t *)v8[9];
            std::string::basic_string[abi:ne180100]<0>(__p, "Scale");
            uint64_t v80 = *(void *)(a3 + 112);
            std::string::basic_string[abi:ne180100]<0>(&v93, "bias");
            if (v79) {
              uint64_t v81 = v79;
            }
            else {
              uint64_t v81 = &CoreML::Specification::_WeightParams_default_instance_;
            }
            CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v81, v64, 1, (const void **)__p, v80, (uint64_t)&v93);
          }
          if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v93.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v95) < 0) {
            operator delete(__p[0]);
          }
          if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
            return;
          }
          if (*((char *)this + 31) < 0) {
            operator delete(this[1]);
          }
          goto LABEL_194;
        }
        std::operator+<char>();
        uint64_t v82 = std::string::append(&v91, "' is ");
        long long v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
        v92.__r_.__value_.__r.__words[2] = v82->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v83;
        v82->__r_.__value_.__l.__size_ = 0;
        v82->__r_.__value_.__r.__words[2] = 0;
        v82->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v90, *((_DWORD *)v8 + 10));
        if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v84 = &v90;
        }
        else {
          int v84 = (std::string *)v90.__r_.__value_.__r.__words[0];
        }
        if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v90.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v90.__r_.__value_.__l.__size_;
        }
        uint64_t v86 = std::string::append(&v92, (const std::string::value_type *)v84, size);
        long long v87 = *(_OWORD *)&v86->__r_.__value_.__l.__data_;
        v93.__r_.__value_.__r.__words[2] = v86->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v87;
        v86->__r_.__value_.__l.__size_ = 0;
        v86->__r_.__value_.__r.__words[2] = 0;
        v86->__r_.__value_.__r.__words[0] = 0;
        int v88 = std::string::append(&v93, " dimensional but should be either 1D or 3D.");
        long long v89 = *(_OWORD *)&v88->__r_.__value_.__l.__data_;
        std::string::size_type v95 = v88->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v89;
        v88->__r_.__value_.__l.__size_ = 0;
        v88->__r_.__value_.__r.__words[2] = 0;
        v88->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v93.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v90.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v92.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v91.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        std::operator+<char>();
        uint64_t v71 = std::string::append(&v91, "' is ");
        long long v72 = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
        v92.__r_.__value_.__r.__words[2] = v71->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v72;
        v71->__r_.__value_.__l.__size_ = 0;
        v71->__r_.__value_.__r.__words[2] = 0;
        v71->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v90, *((_DWORD *)v8 + 4));
        if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          char v73 = &v90;
        }
        else {
          char v73 = (std::string *)v90.__r_.__value_.__r.__words[0];
        }
        if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v74 = HIBYTE(v90.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v74 = v90.__r_.__value_.__l.__size_;
        }
        char v75 = std::string::append(&v92, (const std::string::value_type *)v73, v74);
        long long v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
        v93.__r_.__value_.__r.__words[2] = v75->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v76;
        v75->__r_.__value_.__l.__size_ = 0;
        v75->__r_.__value_.__r.__words[2] = 0;
        v75->__r_.__value_.__r.__words[0] = 0;
        char v77 = std::string::append(&v93, " dimensional but should be 1D or 3D.");
        long long v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
        std::string::size_type v95 = v77->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v78;
        v77->__r_.__value_.__l.__size_ = 0;
        v77->__r_.__value_.__r.__words[2] = 0;
        v77->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v93.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v90.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v92.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v91.__r_.__value_.__l.__data_);
        }
      }
      *this = (void *)13;
      std::operator+<char>();
LABEL_142:
      if (SHIBYTE(v95) < 0) {
        operator delete(__p[0]);
      }
    }
  }
}

void sub_19EAEC1E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateSimpleRecurrentLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2, uint64_t a3)
{
  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 2, 2);
  if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
    return;
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 2, 2);
  if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
    return;
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  if (*(unsigned char *)a2)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "SimpleRecurrent");
    int v7 = (char *)a2 + 32;
    CoreML::validateInputOutputRankEquality((CoreML::Result *)this, (void *)a3, (uint64_t)__p, (uint64_t)v7);
    if (v89 < 0) {
      operator delete(__p[0]);
    }
    if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
      return;
    }
    if (*((char *)this + 31) < 0) {
      operator delete(this[1]);
    }
    std::string::basic_string[abi:ne180100]<0>(v86, "SimpleRecurrent");
    CoreML::validateRankCount((uint64_t)this, (void *)a3, (uint64_t)v86, 5, 5, (uint64_t)v7);
    if (SHIBYTE(v87) < 0) {
      operator delete(v86[0]);
    }
    if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
      return;
    }
    if (*((char *)this + 31) < 0) {
      operator delete(this[1]);
    }
  }
  if (*(_DWORD *)(a3 + 140) == 400)
  {
    int v8 = *(uint64_t **)(a3 + 128);
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    int v8 = &CoreML::Specification::_SimpleRecurrentLayerParams_default_instance_;
  }
  if (v8[3]) {
    int v9 = (uint64_t *)v8[3];
  }
  else {
    int v9 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  uint64_t v10 = v9[5];
  uint64_t v11 = *(unsigned __int8 *)(v10 + 23);
  if (*(char *)(v10 + 23) < 0) {
    uint64_t v12 = *(void *)(v10 + 8);
  }
  else {
    uint64_t v12 = *(unsigned __int8 *)(v10 + 23);
  }
  uint64_t v13 = v9[6];
  uint64_t v14 = *(unsigned __int8 *)(v13 + 23);
  if (*(char *)(v13 + 23) < 0) {
    uint64_t v15 = *(void *)(v13 + 8);
  }
  else {
    uint64_t v15 = *(unsigned __int8 *)(v13 + 23);
  }
  int v16 = *((_DWORD *)v9 + 4);
  uint64_t v17 = v9[7];
  uint64_t v18 = *(unsigned __int8 *)(v17 + 23);
  if (*(char *)(v17 + 23) < 0) {
    uint64_t v19 = *(void *)(v17 + 8);
  }
  else {
    uint64_t v19 = *(unsigned __int8 *)(v17 + 23);
  }
  int v20 = *((unsigned __int8 *)v8 + 65);
  if (v16 <= 0) {
    int v21 = 1;
  }
  else {
    int v21 = 2;
  }
  if (v12) {
    unsigned int v22 = v21;
  }
  else {
    unsigned int v22 = v16 > 0;
  }
  if (v15) {
    ++v22;
  }
  if (v19) {
    unsigned int v23 = v22 + 1;
  }
  else {
    unsigned int v23 = v22;
  }
  if (v23 <= 1)
  {
    if (v23) {
      int v24 = 0;
    }
    else {
      int v24 = 5;
    }
    if (v16 <= 0 && v23)
    {
      if ((v11 & 0x80) != 0) {
        uint64_t v11 = *(void *)(v10 + 8);
      }
      if (v11)
      {
        int v24 = 1;
      }
      else
      {
        if ((v14 & 0x80) != 0) {
          uint64_t v14 = *(void *)(v13 + 8);
        }
        uint64_t v25 = v9[8];
        if (v9 != &CoreML::Specification::_WeightParams_default_instance_ && v14 && v25)
        {
          int v24 = 2;
        }
        else
        {
          if ((v18 & 0x80) != 0) {
            uint64_t v18 = *(void *)(v17 + 8);
          }
          if (v25) {
            BOOL v26 = v18 == 0;
          }
          else {
            BOOL v26 = 1;
          }
          if (v26 || v9 == &CoreML::Specification::_WeightParams_default_instance_) {
            int v24 = 5;
          }
          else {
            int v24 = 3;
          }
        }
      }
    }
  }
  else
  {
    int v24 = 4;
  }
  if (v8[4]) {
    uint64_t v28 = (uint64_t *)v8[4];
  }
  else {
    uint64_t v28 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  uint64_t v29 = v28[5];
  uint64_t v30 = *(unsigned __int8 *)(v29 + 23);
  if (*(char *)(v29 + 23) < 0) {
    uint64_t v31 = *(void *)(v29 + 8);
  }
  else {
    uint64_t v31 = *(unsigned __int8 *)(v29 + 23);
  }
  uint64_t v32 = v28[6];
  uint64_t v33 = *(unsigned __int8 *)(v32 + 23);
  if (*(char *)(v32 + 23) < 0) {
    uint64_t v34 = *(void *)(v32 + 8);
  }
  else {
    uint64_t v34 = *(unsigned __int8 *)(v32 + 23);
  }
  int v35 = *((_DWORD *)v28 + 4);
  uint64_t v36 = v28[7];
  uint64_t v37 = *(unsigned __int8 *)(v36 + 23);
  if (*(char *)(v36 + 23) < 0) {
    uint64_t v38 = *(void *)(v36 + 8);
  }
  else {
    uint64_t v38 = *(unsigned __int8 *)(v36 + 23);
  }
  if (v35 <= 0) {
    int v39 = 1;
  }
  else {
    int v39 = 2;
  }
  if (v31) {
    unsigned int v40 = v39;
  }
  else {
    unsigned int v40 = v35 > 0;
  }
  if (v34) {
    ++v40;
  }
  if (v38) {
    unsigned int v41 = v40 + 1;
  }
  else {
    unsigned int v41 = v40;
  }
  if (v41 <= 1)
  {
    if (v41) {
      int v42 = 0;
    }
    else {
      int v42 = 5;
    }
    if (v35 <= 0 && v41)
    {
      if ((v30 & 0x80) != 0) {
        uint64_t v30 = *(void *)(v29 + 8);
      }
      if (v30)
      {
        int v42 = 1;
      }
      else
      {
        if ((v33 & 0x80) != 0) {
          uint64_t v33 = *(void *)(v32 + 8);
        }
        uint64_t v43 = v28[8];
        if (v28 != &CoreML::Specification::_WeightParams_default_instance_ && v33 && v43)
        {
          int v42 = 2;
        }
        else
        {
          if ((v37 & 0x80) != 0) {
            uint64_t v37 = *(void *)(v36 + 8);
          }
          if (v43) {
            BOOL v44 = v37 == 0;
          }
          else {
            BOOL v44 = 1;
          }
          if (v44 || v28 == &CoreML::Specification::_WeightParams_default_instance_) {
            int v42 = 5;
          }
          else {
            int v42 = 3;
          }
        }
      }
    }
  }
  else
  {
    int v42 = 4;
  }
  BOOL v46 = (uint64_t *)v8[5];
  if (!v46) {
    BOOL v46 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  uint64_t v47 = v46[5];
  uint64_t v48 = *(unsigned __int8 *)(v47 + 23);
  if (*(char *)(v47 + 23) < 0) {
    uint64_t v49 = *(void *)(v47 + 8);
  }
  else {
    uint64_t v49 = *(unsigned __int8 *)(v47 + 23);
  }
  uint64_t v50 = v46[6];
  uint64_t v51 = *(unsigned __int8 *)(v50 + 23);
  if (*(char *)(v50 + 23) < 0) {
    uint64_t v52 = *(void *)(v50 + 8);
  }
  else {
    uint64_t v52 = *(unsigned __int8 *)(v50 + 23);
  }
  int v53 = *((_DWORD *)v46 + 4);
  uint64_t v54 = v46[7];
  uint64_t v55 = *(unsigned __int8 *)(v54 + 23);
  if (*(char *)(v54 + 23) < 0) {
    uint64_t v56 = *(void *)(v54 + 8);
  }
  else {
    uint64_t v56 = *(unsigned __int8 *)(v54 + 23);
  }
  if (v53 <= 0) {
    int v57 = 1;
  }
  else {
    int v57 = 2;
  }
  if (v49) {
    unsigned int v58 = v57;
  }
  else {
    unsigned int v58 = v53 > 0;
  }
  if (v52) {
    ++v58;
  }
  if (v56) {
    unsigned int v59 = v58 + 1;
  }
  else {
    unsigned int v59 = v58;
  }
  if (v59 <= 1)
  {
    if (v59) {
      int v60 = 0;
    }
    else {
      int v60 = 5;
    }
    if (v53 <= 0 && v59)
    {
      if ((v48 & 0x80) != 0) {
        uint64_t v48 = *(void *)(v47 + 8);
      }
      if (v48)
      {
        int v60 = 1;
      }
      else
      {
        if ((v51 & 0x80) != 0) {
          uint64_t v51 = *(void *)(v50 + 8);
        }
        uint64_t v61 = v46[8];
        if (v46 != &CoreML::Specification::_WeightParams_default_instance_ && v51 && v61)
        {
          int v60 = 2;
        }
        else
        {
          if ((v55 & 0x80) != 0) {
            uint64_t v55 = *(void *)(v54 + 8);
          }
          if (v61) {
            BOOL v62 = v55 == 0;
          }
          else {
            BOOL v62 = 1;
          }
          if (v62 || v46 == &CoreML::Specification::_WeightParams_default_instance_) {
            int v60 = 5;
          }
          else {
            int v60 = 3;
          }
        }
      }
    }
  }
  else
  {
    int v60 = 4;
  }
  if (*((unsigned char *)v8 + 65)) {
    BOOL v64 = v60 == 4;
  }
  else {
    BOOL v64 = 0;
  }
  int v65 = v64;
  if (v24 == 4 || v42 == 4 || v65)
  {
    std::operator+<char>();
    unsigned int v68 = std::string::append(&v85, "' has invalid weightMatrix/recusionMatrix/Bias fields.");
    long long v69 = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
    std::string::size_type v87 = v68->__r_.__value_.__r.__words[2];
    *(_OWORD *)uint64_t v86 = v69;
    v68->__r_.__value_.__l.__size_ = 0;
    v68->__r_.__value_.__r.__words[2] = 0;
    v68->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v85.__r_.__value_.__l.__data_);
    }
    goto LABEL_194;
  }
  if (v24 != 2 && v42 != 2 && (v24 != v42 || *((unsigned char *)v8 + 65) && v60 != 2 && v24 != v60))
  {
    std::operator+<char>();
    uint64_t v66 = std::string::append(&v85, "' has invalid weightMatrix/recusionMatrix/Bias fields. Field value types should match and should either be half or full precision.");
    long long v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
    std::string::size_type v87 = v66->__r_.__value_.__r.__words[2];
    *(_OWORD *)uint64_t v86 = v67;
    v66->__r_.__value_.__l.__size_ = 0;
    v66->__r_.__value_.__r.__words[2] = 0;
    v66->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v85.__r_.__value_.__l.__data_);
    }
LABEL_194:
    *this = (void *)13;
    std::operator+<char>();
    if (SHIBYTE(v87) < 0) {
      operator delete(v86[0]);
    }
    return;
  }
  uint64_t v71 = v8[6];
  uint64_t v70 = v8[7];
  std::string::basic_string[abi:ne180100]<0>(v86, "SimpleRNN");
  uint64_t v72 = *(void *)(a3 + 112);
  std::string::basic_string[abi:ne180100]<0>(&v85, "WeightMatrix");
  CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v9, v70 * v71, v70, (const void **)v86, v72, (uint64_t)&v85);
  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v85.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v87) < 0) {
    operator delete(v86[0]);
  }
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0) {
      operator delete(this[1]);
    }
    uint64_t v73 = v8[7];
    std::string::size_type v74 = (uint64_t *)v8[4];
    std::string::basic_string[abi:ne180100]<0>(v86, "SimpleRNN");
    uint64_t v75 = *(void *)(a3 + 112);
    std::string::basic_string[abi:ne180100]<0>(&v85, "RecursionMatrix");
    if (v74) {
      long long v76 = v74;
    }
    else {
      long long v76 = &CoreML::Specification::_WeightParams_default_instance_;
    }
    CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v76, v73 * v73, v73, (const void **)v86, v75, (uint64_t)&v85);
    if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v85.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v87) < 0) {
      operator delete(v86[0]);
    }
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0) {
        operator delete(this[1]);
      }
      if (v20)
      {
        long long v78 = (uint64_t *)v8[5];
        unint64_t v79 = v8[7];
        std::string::basic_string[abi:ne180100]<0>(v86, "SimpleRNN");
        uint64_t v80 = *(void *)(a3 + 112);
        std::string::basic_string[abi:ne180100]<0>(&v85, "BiasVector");
        if (v78) {
          uint64_t v81 = v78;
        }
        else {
          uint64_t v81 = &CoreML::Specification::_WeightParams_default_instance_;
        }
        CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v81, v79, 1, (const void **)v86, v80, (uint64_t)&v85);
        if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v85.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v87) < 0) {
          operator delete(v86[0]);
        }
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
          return;
        }
        if (*((char *)this + 31) < 0) {
          operator delete(this[1]);
        }
      }
      if (*(_DWORD *)(a3 + 140) == 400)
      {
        uint64_t v82 = *(uint64_t **)(a3 + 128);
      }
      else
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v77);
        uint64_t v82 = &CoreML::Specification::_SimpleRecurrentLayerParams_default_instance_;
      }
      long long v83 = (const CoreML::Specification::ActivationParams *)v82[2];
      if (v83) {
        int v84 = v83;
      }
      else {
        int v84 = (const CoreML::Specification::ActivationParams *)&CoreML::Specification::_ActivationParams_default_instance_;
      }
      CoreML::validateRecurrentActivationParams((CoreML *)this, v84);
    }
  }
}

void sub_19EAECAA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

CoreML::Result *CoreML::validateRecurrentActivationParams(CoreML *this, const CoreML::Specification::ActivationParams *a2)
{
  unsigned int v3 = *((_DWORD *)a2 + 7);
  BOOL v4 = v3 > 0x29;
  uint64_t v5 = (1 << v3) & 0x300C0000420;
  if (v4 || v5 == 0)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Recurrent non-linearity type ", 29);
    int v9 = MLActivationParamsNonlinearityType_Name(*((_DWORD *)a2 + 7));
    size_t v10 = strlen(v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v9, v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" is not supported in this version of CoreML.", 44);
    std::stringbuf::str();
    *(void *)this = 13;
    std::operator+<char>();
    if (v13 < 0) {
      operator delete(__p);
    }
    v14[0] = *MEMORY[0x1E4FBA408];
    uint64_t v11 = *(void *)(MEMORY[0x1E4FBA408] + 72);
    *(void *)((char *)v14 + *(void *)(v14[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
    v15[0] = v11;
    v15[1] = MEMORY[0x1E4FBA470] + 16;
    if (v16 < 0) {
      operator delete((void *)v15[9]);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    return (CoreML::Result *)MEMORY[0x19F3C1850](&v17);
  }
  else
  {
    return CoreML::Result::Result(this);
  }
}

void sub_19EAECD54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void CoreML::NeuralNetworkSpecValidator::validateGRULayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2, uint64_t a3)
{
  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 2);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0) {
      operator delete(this[1]);
    }
    CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 2, 2);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0) {
        operator delete(this[1]);
      }
      if (*(unsigned char *)a2)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "GRU");
        int v7 = (char *)a2 + 32;
        CoreML::validateInputOutputRankEquality((CoreML::Result *)this, (void *)a3, (uint64_t)__p, (uint64_t)v7);
        if (v264 < 0) {
          operator delete(__p[0]);
        }
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
          return;
        }
        if (*((char *)this + 31) < 0) {
          operator delete(this[1]);
        }
        std::string::basic_string[abi:ne180100]<0>(v261, "GRU");
        CoreML::validateRankCount((uint64_t)this, (void *)a3, (uint64_t)v261, 5, 5, (uint64_t)v7);
        if (SHIBYTE(v262) < 0) {
          operator delete(v261[0]);
        }
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
          return;
        }
        if (*((char *)this + 31) < 0) {
          operator delete(this[1]);
        }
      }
      if (*(_DWORD *)(a3 + 140) == 410)
      {
        int v8 = *(uint64_t **)(a3 + 128);
      }
      else
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
        int v8 = &CoreML::Specification::_GRULayerParams_default_instance_;
      }
      int v9 = (uint64_t *)v8[5];
      if (!v9) {
        int v9 = &CoreML::Specification::_WeightParams_default_instance_;
      }
      uint64_t v10 = v9[5];
      uint64_t v11 = *(unsigned __int8 *)(v10 + 23);
      if (*(char *)(v10 + 23) < 0) {
        uint64_t v12 = *(void *)(v10 + 8);
      }
      else {
        uint64_t v12 = *(unsigned __int8 *)(v10 + 23);
      }
      uint64_t v13 = v9[6];
      uint64_t v14 = *(unsigned __int8 *)(v13 + 23);
      if (*(char *)(v13 + 23) < 0) {
        uint64_t v15 = *(void *)(v13 + 8);
      }
      else {
        uint64_t v15 = *(unsigned __int8 *)(v13 + 23);
      }
      int v16 = *((_DWORD *)v9 + 4);
      uint64_t v17 = v9[7];
      uint64_t v18 = *(unsigned __int8 *)(v17 + 23);
      if (*(char *)(v17 + 23) < 0) {
        uint64_t v19 = *(void *)(v17 + 8);
      }
      else {
        uint64_t v19 = *(unsigned __int8 *)(v17 + 23);
      }
      if (v16 <= 0) {
        int v20 = 1;
      }
      else {
        int v20 = 2;
      }
      if (v12) {
        unsigned int v21 = v20;
      }
      else {
        unsigned int v21 = v16 > 0;
      }
      if (v15) {
        ++v21;
      }
      if (v19) {
        ++v21;
      }
      if (v21 <= 1)
      {
        if (v21) {
          int v22 = 0;
        }
        else {
          int v22 = 5;
        }
        if (v16 <= 0 && v21)
        {
          if ((v11 & 0x80) != 0) {
            uint64_t v11 = *(void *)(v10 + 8);
          }
          if (v11)
          {
            int v22 = 1;
          }
          else
          {
            if ((v14 & 0x80) != 0) {
              uint64_t v14 = *(void *)(v13 + 8);
            }
            uint64_t v23 = v9[8];
            if (v9 != &CoreML::Specification::_WeightParams_default_instance_ && v14 && v23)
            {
              int v22 = 2;
            }
            else
            {
              if ((v18 & 0x80) != 0) {
                uint64_t v18 = *(void *)(v17 + 8);
              }
              if (v23) {
                BOOL v24 = v18 == 0;
              }
              else {
                BOOL v24 = 1;
              }
              if (v24 || v9 == &CoreML::Specification::_WeightParams_default_instance_) {
                int v22 = 5;
              }
              else {
                int v22 = 3;
              }
            }
          }
        }
      }
      else
      {
        int v22 = 4;
      }
      int v259 = *((unsigned __int8 *)v8 + 129);
      BOOL v26 = (int *)operator new(4uLL);
      int *v26 = v22;
      unint64_t v27 = (uint64_t *)v8[8];
      if (!v27) {
        unint64_t v27 = &CoreML::Specification::_WeightParams_default_instance_;
      }
      uint64_t v28 = v27[5];
      uint64_t v29 = *(unsigned __int8 *)(v28 + 23);
      if (*(char *)(v28 + 23) < 0) {
        uint64_t v30 = *(void *)(v28 + 8);
      }
      else {
        uint64_t v30 = *(unsigned __int8 *)(v28 + 23);
      }
      uint64_t v31 = v27[6];
      uint64_t v32 = *(unsigned __int8 *)(v31 + 23);
      if (*(char *)(v31 + 23) < 0) {
        uint64_t v33 = *(void *)(v31 + 8);
      }
      else {
        uint64_t v33 = *(unsigned __int8 *)(v31 + 23);
      }
      int v34 = *((_DWORD *)v27 + 4);
      uint64_t v35 = v27[7];
      uint64_t v36 = *(unsigned __int8 *)(v35 + 23);
      if (*(char *)(v35 + 23) < 0) {
        uint64_t v37 = *(void *)(v35 + 8);
      }
      else {
        uint64_t v37 = *(unsigned __int8 *)(v35 + 23);
      }
      if (v34 <= 0) {
        int v38 = 1;
      }
      else {
        int v38 = 2;
      }
      if (v30) {
        unsigned int v39 = v38;
      }
      else {
        unsigned int v39 = v34 > 0;
      }
      if (v33) {
        ++v39;
      }
      if (v37) {
        ++v39;
      }
      if (v39 <= 1)
      {
        if (v39) {
          int v40 = 0;
        }
        else {
          int v40 = 5;
        }
        if (v34 <= 0 && v39)
        {
          if ((v29 & 0x80) != 0) {
            uint64_t v29 = *(void *)(v28 + 8);
          }
          if (v29)
          {
            int v40 = 1;
          }
          else
          {
            if ((v32 & 0x80) != 0) {
              uint64_t v32 = *(void *)(v31 + 8);
            }
            uint64_t v41 = v27[8];
            if (v27 != &CoreML::Specification::_WeightParams_default_instance_ && v32 && v41)
            {
              int v40 = 2;
            }
            else
            {
              if ((v36 & 0x80) != 0) {
                uint64_t v36 = *(void *)(v35 + 8);
              }
              if (v41) {
                BOOL v42 = v36 == 0;
              }
              else {
                BOOL v42 = 1;
              }
              if (v42 || v27 == &CoreML::Specification::_WeightParams_default_instance_) {
                int v40 = 5;
              }
              else {
                int v40 = 3;
              }
            }
          }
        }
      }
      else
      {
        int v40 = 4;
      }
      BOOL v44 = (int *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(2uLL);
      uint64_t v46 = v45;
      v44[1] = v40;
      int *v44 = *v26;
      operator delete(v26);
      uint64_t v47 = (uint64_t *)v8[6];
      if (!v47) {
        uint64_t v47 = &CoreML::Specification::_WeightParams_default_instance_;
      }
      uint64_t v48 = v47[5];
      uint64_t v49 = *(unsigned __int8 *)(v48 + 23);
      if (*(char *)(v48 + 23) < 0) {
        uint64_t v50 = *(void *)(v48 + 8);
      }
      else {
        uint64_t v50 = *(unsigned __int8 *)(v48 + 23);
      }
      uint64_t v51 = v47[6];
      uint64_t v52 = *(unsigned __int8 *)(v51 + 23);
      if (*(char *)(v51 + 23) < 0) {
        uint64_t v53 = *(void *)(v51 + 8);
      }
      else {
        uint64_t v53 = *(unsigned __int8 *)(v51 + 23);
      }
      int v54 = *((_DWORD *)v47 + 4);
      uint64_t v55 = v47[7];
      uint64_t v56 = *(unsigned __int8 *)(v55 + 23);
      if (*(char *)(v55 + 23) < 0) {
        uint64_t v57 = *(void *)(v55 + 8);
      }
      else {
        uint64_t v57 = *(unsigned __int8 *)(v55 + 23);
      }
      if (v54 <= 0) {
        int v58 = 1;
      }
      else {
        int v58 = 2;
      }
      if (v50) {
        unsigned int v59 = v58;
      }
      else {
        unsigned int v59 = v54 > 0;
      }
      if (v53) {
        ++v59;
      }
      if (v57) {
        ++v59;
      }
      if (v59 <= 1)
      {
        if (v59) {
          int v60 = 0;
        }
        else {
          int v60 = 5;
        }
        if (v54 <= 0 && v59)
        {
          if ((v49 & 0x80) != 0) {
            uint64_t v49 = *(void *)(v48 + 8);
          }
          if (v49)
          {
            int v60 = 1;
          }
          else
          {
            if ((v52 & 0x80) != 0) {
              uint64_t v52 = *(void *)(v51 + 8);
            }
            uint64_t v61 = v47[8];
            if (v47 != &CoreML::Specification::_WeightParams_default_instance_ && v52 && v61)
            {
              int v60 = 2;
            }
            else
            {
              if ((v56 & 0x80) != 0) {
                uint64_t v56 = *(void *)(v55 + 8);
              }
              if (v61) {
                BOOL v62 = v56 == 0;
              }
              else {
                BOOL v62 = 1;
              }
              if (v62 || v47 == &CoreML::Specification::_WeightParams_default_instance_) {
                int v60 = 5;
              }
              else {
                int v60 = 3;
              }
            }
          }
        }
      }
      else
      {
        int v60 = 4;
      }
      BOOL v64 = &v44[v46];
      if (v46 < 3)
      {
        uint64_t v67 = 3;
        if ((unint64_t)((4 * v46) >> 1) > 3) {
          uint64_t v67 = (4 * v46) >> 1;
        }
        if ((unint64_t)(4 * v46) >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v68 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v68 = v67;
        }
        if (v68) {
          unint64_t v68 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v68);
        }
        else {
          uint64_t v69 = 0;
        }
        uint64_t v70 = 0;
        BOOL v64 = (int *)(v68 + 4 * v69);
        *(_DWORD *)(v68 + 8) = v60;
        int v65 = (int *)(v68 + 12);
        do
        {
          *(_DWORD *)(v68 + 8 + v70 * 4 - 4) = v44[v70 + 1];
          --v70;
        }
        while (v70 != -2);
        uint64_t v66 = (int *)v68;
        operator delete(v44);
      }
      else
      {
        v44[2] = v60;
        int v65 = v44 + 3;
        uint64_t v66 = v44;
      }
      uint64_t v71 = (uint64_t *)v8[9];
      if (!v71) {
        uint64_t v71 = &CoreML::Specification::_WeightParams_default_instance_;
      }
      uint64_t v72 = v71[5];
      uint64_t v73 = *(unsigned __int8 *)(v72 + 23);
      if (*(char *)(v72 + 23) < 0) {
        uint64_t v74 = *(void *)(v72 + 8);
      }
      else {
        uint64_t v74 = *(unsigned __int8 *)(v72 + 23);
      }
      uint64_t v75 = v71[6];
      uint64_t v76 = *(unsigned __int8 *)(v75 + 23);
      if (*(char *)(v75 + 23) < 0) {
        uint64_t v77 = *(void *)(v75 + 8);
      }
      else {
        uint64_t v77 = *(unsigned __int8 *)(v75 + 23);
      }
      int v78 = *((_DWORD *)v71 + 4);
      uint64_t v79 = v71[7];
      uint64_t v80 = *(unsigned __int8 *)(v79 + 23);
      if (*(char *)(v79 + 23) < 0) {
        uint64_t v81 = *(void *)(v79 + 8);
      }
      else {
        uint64_t v81 = *(unsigned __int8 *)(v79 + 23);
      }
      if (v78 <= 0) {
        int v82 = 1;
      }
      else {
        int v82 = 2;
      }
      if (v74) {
        unsigned int v83 = v82;
      }
      else {
        unsigned int v83 = v78 > 0;
      }
      if (v77) {
        ++v83;
      }
      if (v81) {
        ++v83;
      }
      if (v83 <= 1)
      {
        if (v83) {
          int v84 = 0;
        }
        else {
          int v84 = 5;
        }
        if (v78 <= 0 && v83 != 0)
        {
          if ((v73 & 0x80) != 0) {
            uint64_t v73 = *(void *)(v72 + 8);
          }
          if (v73)
          {
            int v84 = 1;
          }
          else
          {
            if ((v76 & 0x80) != 0) {
              uint64_t v76 = *(void *)(v75 + 8);
            }
            uint64_t v86 = v71[8];
            if (v71 == &CoreML::Specification::_WeightParams_default_instance_
              || (v76 ? (BOOL v87 = v86 == 0) : (BOOL v87 = 1), v87))
            {
              if ((v80 & 0x80) != 0) {
                uint64_t v80 = *(void *)(v79 + 8);
              }
              if (v86) {
                BOOL v88 = v80 == 0;
              }
              else {
                BOOL v88 = 1;
              }
              if (v88 || v71 == &CoreML::Specification::_WeightParams_default_instance_) {
                int v84 = 5;
              }
              else {
                int v84 = 3;
              }
            }
            else
            {
              int v84 = 2;
            }
          }
        }
      }
      else
      {
        int v84 = 4;
      }
      if (v65 >= v64)
      {
        uint64_t v91 = v65 - v66;
        unint64_t v92 = v91 + 1;
        if ((unint64_t)(v91 + 1) >> 62) {
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
        }
        if (((char *)v64 - (char *)v66) >> 1 > v92) {
          unint64_t v92 = ((char *)v64 - (char *)v66) >> 1;
        }
        if ((unint64_t)((char *)v64 - (char *)v66) >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v93 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v93 = v92;
        }
        if (v93) {
          unint64_t v93 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v93);
        }
        else {
          uint64_t v94 = 0;
        }
        std::string::size_type v95 = (int *)(v93 + 4 * v91);
        BOOL v64 = (int *)(v93 + 4 * v94);
        int *v95 = v84;
        std::string v90 = v95 + 1;
        while (v65 != v66)
        {
          int v96 = *--v65;
          *--std::string::size_type v95 = v96;
        }
        operator delete(v66);
        uint64_t v66 = v95;
      }
      else
      {
        int *v65 = v84;
        std::string v90 = v65 + 1;
      }
      char v97 = (uint64_t *)v8[7];
      if (!v97) {
        char v97 = &CoreML::Specification::_WeightParams_default_instance_;
      }
      uint64_t v98 = v97[5];
      uint64_t v99 = *(unsigned __int8 *)(v98 + 23);
      if (*(char *)(v98 + 23) < 0) {
        uint64_t v100 = *(void *)(v98 + 8);
      }
      else {
        uint64_t v100 = *(unsigned __int8 *)(v98 + 23);
      }
      uint64_t v101 = v97[6];
      uint64_t v102 = *(unsigned __int8 *)(v101 + 23);
      if (*(char *)(v101 + 23) < 0) {
        uint64_t v103 = *(void *)(v101 + 8);
      }
      else {
        uint64_t v103 = *(unsigned __int8 *)(v101 + 23);
      }
      int v104 = *((_DWORD *)v97 + 4);
      uint64_t v105 = v97[7];
      uint64_t v106 = *(unsigned __int8 *)(v105 + 23);
      if (*(char *)(v105 + 23) < 0) {
        uint64_t v107 = *(void *)(v105 + 8);
      }
      else {
        uint64_t v107 = *(unsigned __int8 *)(v105 + 23);
      }
      if (v104 <= 0) {
        int v108 = 1;
      }
      else {
        int v108 = 2;
      }
      if (v100) {
        unsigned int v109 = v108;
      }
      else {
        unsigned int v109 = v104 > 0;
      }
      if (v103) {
        ++v109;
      }
      if (v107) {
        ++v109;
      }
      if (v109 <= 1)
      {
        if (v109) {
          int v110 = 0;
        }
        else {
          int v110 = 5;
        }
        if (v104 <= 0 && v109 != 0)
        {
          if ((v99 & 0x80) != 0) {
            uint64_t v99 = *(void *)(v98 + 8);
          }
          if (v99)
          {
            int v110 = 1;
          }
          else
          {
            if ((v102 & 0x80) != 0) {
              uint64_t v102 = *(void *)(v101 + 8);
            }
            uint64_t v112 = v97[8];
            if (v97 == &CoreML::Specification::_WeightParams_default_instance_
              || (v102 ? (BOOL v113 = v112 == 0) : (BOOL v113 = 1), v113))
            {
              if ((v106 & 0x80) != 0) {
                uint64_t v106 = *(void *)(v105 + 8);
              }
              if (v112) {
                BOOL v114 = v106 == 0;
              }
              else {
                BOOL v114 = 1;
              }
              if (v114 || v97 == &CoreML::Specification::_WeightParams_default_instance_) {
                int v110 = 5;
              }
              else {
                int v110 = 3;
              }
            }
            else
            {
              int v110 = 2;
            }
          }
        }
      }
      else
      {
        int v110 = 4;
      }
      if (v90 >= v64)
      {
        uint64_t v117 = v90 - v66;
        unint64_t v118 = v117 + 1;
        if ((unint64_t)(v117 + 1) >> 62) {
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
        }
        if (((char *)v64 - (char *)v66) >> 1 > v118) {
          unint64_t v118 = ((char *)v64 - (char *)v66) >> 1;
        }
        if ((unint64_t)((char *)v64 - (char *)v66) >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v119 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v119 = v118;
        }
        if (v119) {
          unint64_t v119 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v119);
        }
        else {
          uint64_t v120 = 0;
        }
        uint64_t v121 = (int *)(v119 + 4 * v117);
        BOOL v64 = (int *)(v119 + 4 * v120);
        *uint64_t v121 = v110;
        unsigned int v116 = v121 + 1;
        while (v90 != v66)
        {
          int v122 = *--v90;
          *--uint64_t v121 = v122;
        }
        operator delete(v66);
        uint64_t v66 = v121;
      }
      else
      {
        int *v90 = v110;
        unsigned int v116 = v90 + 1;
      }
      uint64_t v123 = (uint64_t *)v8[10];
      if (!v123) {
        uint64_t v123 = &CoreML::Specification::_WeightParams_default_instance_;
      }
      uint64_t v124 = v123[5];
      uint64_t v125 = *(unsigned __int8 *)(v124 + 23);
      if (*(char *)(v124 + 23) < 0) {
        uint64_t v126 = *(void *)(v124 + 8);
      }
      else {
        uint64_t v126 = *(unsigned __int8 *)(v124 + 23);
      }
      uint64_t v127 = v123[6];
      uint64_t v128 = *(unsigned __int8 *)(v127 + 23);
      if (*(char *)(v127 + 23) < 0) {
        uint64_t v129 = *(void *)(v127 + 8);
      }
      else {
        uint64_t v129 = *(unsigned __int8 *)(v127 + 23);
      }
      int v130 = *((_DWORD *)v123 + 4);
      uint64_t v131 = v123[7];
      uint64_t v132 = *(unsigned __int8 *)(v131 + 23);
      if (*(char *)(v131 + 23) < 0) {
        uint64_t v133 = *(void *)(v131 + 8);
      }
      else {
        uint64_t v133 = *(unsigned __int8 *)(v131 + 23);
      }
      if (v130 <= 0) {
        int v134 = 1;
      }
      else {
        int v134 = 2;
      }
      if (v126) {
        unsigned int v135 = v134;
      }
      else {
        unsigned int v135 = v130 > 0;
      }
      if (v129) {
        ++v135;
      }
      if (v133) {
        ++v135;
      }
      if (v135 <= 1)
      {
        if (v135) {
          int v136 = 0;
        }
        else {
          int v136 = 5;
        }
        if (v130 <= 0 && v135 != 0)
        {
          if ((v125 & 0x80) != 0) {
            uint64_t v125 = *(void *)(v124 + 8);
          }
          if (v125)
          {
            int v136 = 1;
          }
          else
          {
            if ((v128 & 0x80) != 0) {
              uint64_t v128 = *(void *)(v127 + 8);
            }
            uint64_t v138 = v123[8];
            if (v123 == &CoreML::Specification::_WeightParams_default_instance_
              || (v128 ? (BOOL v139 = v138 == 0) : (BOOL v139 = 1), v139))
            {
              if ((v132 & 0x80) != 0) {
                uint64_t v132 = *(void *)(v131 + 8);
              }
              if (v138) {
                BOOL v140 = v132 == 0;
              }
              else {
                BOOL v140 = 1;
              }
              if (v140 || v123 == &CoreML::Specification::_WeightParams_default_instance_) {
                int v136 = 5;
              }
              else {
                int v136 = 3;
              }
            }
            else
            {
              int v136 = 2;
            }
          }
        }
      }
      else
      {
        int v136 = 4;
      }
      if (v116 >= v64)
      {
        uint64_t v143 = v116 - v66;
        unint64_t v144 = v143 + 1;
        if ((unint64_t)(v143 + 1) >> 62) {
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
        }
        if (((char *)v64 - (char *)v66) >> 1 > v144) {
          unint64_t v144 = ((char *)v64 - (char *)v66) >> 1;
        }
        if ((unint64_t)((char *)v64 - (char *)v66) >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v145 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v145 = v144;
        }
        if (v145) {
          unint64_t v145 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v145);
        }
        else {
          uint64_t v146 = 0;
        }
        int v147 = (int *)(v145 + 4 * v143);
        BOOL v64 = (int *)(v145 + 4 * v146);
        *int v147 = v136;
        uint64_t v142 = v147 + 1;
        while (v116 != v66)
        {
          int v148 = *--v116;
          *--int v147 = v148;
        }
        operator delete(v66);
        uint64_t v66 = v147;
      }
      else
      {
        *unsigned int v116 = v136;
        uint64_t v142 = v116 + 1;
      }
      if (v259)
      {
        uint64_t v149 = (uint64_t *)v8[11];
        if (!v149) {
          uint64_t v149 = &CoreML::Specification::_WeightParams_default_instance_;
        }
        uint64_t v150 = v149[5];
        uint64_t v151 = *(unsigned __int8 *)(v150 + 23);
        if (*(char *)(v150 + 23) < 0) {
          uint64_t v152 = *(void *)(v150 + 8);
        }
        else {
          uint64_t v152 = *(unsigned __int8 *)(v150 + 23);
        }
        uint64_t v153 = v149[6];
        uint64_t v154 = *(unsigned __int8 *)(v153 + 23);
        if (*(char *)(v153 + 23) < 0) {
          uint64_t v155 = *(void *)(v153 + 8);
        }
        else {
          uint64_t v155 = *(unsigned __int8 *)(v153 + 23);
        }
        int v156 = *((_DWORD *)v149 + 4);
        uint64_t v157 = v149[7];
        uint64_t v158 = *(unsigned __int8 *)(v157 + 23);
        if (*(char *)(v157 + 23) < 0) {
          uint64_t v159 = *(void *)(v157 + 8);
        }
        else {
          uint64_t v159 = *(unsigned __int8 *)(v157 + 23);
        }
        if (v156 <= 0) {
          int v160 = 1;
        }
        else {
          int v160 = 2;
        }
        if (v152) {
          unsigned int v161 = v160;
        }
        else {
          unsigned int v161 = v156 > 0;
        }
        if (v155) {
          ++v161;
        }
        if (v159) {
          ++v161;
        }
        if (v161 <= 1)
        {
          if (v161) {
            int v162 = 0;
          }
          else {
            int v162 = 5;
          }
          if (v156 <= 0 && v161 != 0)
          {
            if ((v151 & 0x80) != 0) {
              uint64_t v151 = *(void *)(v150 + 8);
            }
            if (v151)
            {
              int v162 = 1;
            }
            else
            {
              if ((v154 & 0x80) != 0) {
                uint64_t v154 = *(void *)(v153 + 8);
              }
              uint64_t v164 = v149[8];
              if (v149 == &CoreML::Specification::_WeightParams_default_instance_
                || (v154 ? (BOOL v165 = v164 == 0) : (BOOL v165 = 1), v165))
              {
                if ((v158 & 0x80) != 0) {
                  uint64_t v158 = *(void *)(v157 + 8);
                }
                if (v164) {
                  BOOL v166 = v158 == 0;
                }
                else {
                  BOOL v166 = 1;
                }
                if (v166 || v149 == &CoreML::Specification::_WeightParams_default_instance_) {
                  int v162 = 5;
                }
                else {
                  int v162 = 3;
                }
              }
              else
              {
                int v162 = 2;
              }
            }
          }
        }
        else
        {
          int v162 = 4;
        }
        if (v142 >= v64)
        {
          uint64_t v169 = v142 - v66;
          unint64_t v170 = v169 + 1;
          if ((unint64_t)(v169 + 1) >> 62) {
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
          }
          if (((char *)v64 - (char *)v66) >> 1 > v170) {
            unint64_t v170 = ((char *)v64 - (char *)v66) >> 1;
          }
          if ((unint64_t)((char *)v64 - (char *)v66) >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v171 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v171 = v170;
          }
          if (v171) {
            unint64_t v171 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v171);
          }
          else {
            uint64_t v172 = 0;
          }
          int v173 = (int *)(v171 + 4 * v169);
          BOOL v64 = (int *)(v171 + 4 * v172);
          *int v173 = v162;
          v168 = v173 + 1;
          if (v142 == v66) {
            goto LABEL_454;
          }
          do
          {
            int v174 = *--v142;
            *--int v173 = v174;
          }
          while (v142 != v66);
          if (v66) {
LABEL_454:
          }
            operator delete(v66);
          uint64_t v66 = v173;
        }
        else
        {
          *uint64_t v142 = v162;
          v168 = v142 + 1;
        }
        unsigned int v175 = (uint64_t *)v8[12];
        if (!v175) {
          unsigned int v175 = &CoreML::Specification::_WeightParams_default_instance_;
        }
        uint64_t v176 = v175[5];
        uint64_t v177 = *(unsigned __int8 *)(v176 + 23);
        if (*(char *)(v176 + 23) < 0) {
          uint64_t v178 = *(void *)(v176 + 8);
        }
        else {
          uint64_t v178 = *(unsigned __int8 *)(v176 + 23);
        }
        uint64_t v179 = v175[6];
        uint64_t v180 = *(unsigned __int8 *)(v179 + 23);
        if (*(char *)(v179 + 23) < 0) {
          uint64_t v181 = *(void *)(v179 + 8);
        }
        else {
          uint64_t v181 = *(unsigned __int8 *)(v179 + 23);
        }
        int v182 = *((_DWORD *)v175 + 4);
        uint64_t v183 = v175[7];
        uint64_t v184 = *(unsigned __int8 *)(v183 + 23);
        if (*(char *)(v183 + 23) < 0) {
          uint64_t v185 = *(void *)(v183 + 8);
        }
        else {
          uint64_t v185 = *(unsigned __int8 *)(v183 + 23);
        }
        if (v182 <= 0) {
          int v186 = 1;
        }
        else {
          int v186 = 2;
        }
        if (v178) {
          unsigned int v187 = v186;
        }
        else {
          unsigned int v187 = v182 > 0;
        }
        if (v181) {
          ++v187;
        }
        if (v185) {
          ++v187;
        }
        if (v187 <= 1)
        {
          if (v187) {
            int v188 = 0;
          }
          else {
            int v188 = 5;
          }
          if (v182 <= 0 && v187 != 0)
          {
            if ((v177 & 0x80) != 0) {
              uint64_t v177 = *(void *)(v176 + 8);
            }
            if (v177)
            {
              int v188 = 1;
            }
            else
            {
              if ((v180 & 0x80) != 0) {
                uint64_t v180 = *(void *)(v179 + 8);
              }
              uint64_t v190 = v175[8];
              if (v175 == &CoreML::Specification::_WeightParams_default_instance_
                || (v180 ? (BOOL v191 = v190 == 0) : (BOOL v191 = 1), v191))
              {
                if ((v184 & 0x80) != 0) {
                  uint64_t v184 = *(void *)(v183 + 8);
                }
                if (v190) {
                  BOOL v192 = v184 == 0;
                }
                else {
                  BOOL v192 = 1;
                }
                if (v192 || v175 == &CoreML::Specification::_WeightParams_default_instance_) {
                  int v188 = 5;
                }
                else {
                  int v188 = 3;
                }
              }
              else
              {
                int v188 = 2;
              }
            }
          }
        }
        else
        {
          int v188 = 4;
        }
        if (v168 >= v64)
        {
          uint64_t v195 = v168 - v66;
          unint64_t v196 = v195 + 1;
          if ((unint64_t)(v195 + 1) >> 62) {
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
          }
          if (((char *)v64 - (char *)v66) >> 1 > v196) {
            unint64_t v196 = ((char *)v64 - (char *)v66) >> 1;
          }
          if ((unint64_t)((char *)v64 - (char *)v66) >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v197 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v197 = v196;
          }
          if (v197) {
            unint64_t v197 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v197);
          }
          else {
            uint64_t v198 = 0;
          }
          int v199 = (int *)(v197 + 4 * v195);
          BOOL v64 = (int *)(v197 + 4 * v198);
          *int v199 = v188;
          std::string v194 = v199 + 1;
          if (v168 == v66) {
            goto LABEL_523;
          }
          do
          {
            int v200 = *--v168;
            *--int v199 = v200;
          }
          while (v168 != v66);
          if (v66) {
LABEL_523:
          }
            operator delete(v66);
          uint64_t v66 = v199;
        }
        else
        {
          int *v168 = v188;
          std::string v194 = v168 + 1;
        }
        int v201 = (uint64_t *)v8[13];
        if (!v201) {
          int v201 = &CoreML::Specification::_WeightParams_default_instance_;
        }
        uint64_t v202 = v201[5];
        uint64_t v203 = *(unsigned __int8 *)(v202 + 23);
        if (*(char *)(v202 + 23) < 0) {
          uint64_t v204 = *(void *)(v202 + 8);
        }
        else {
          uint64_t v204 = *(unsigned __int8 *)(v202 + 23);
        }
        uint64_t v205 = v201[6];
        uint64_t v206 = *(unsigned __int8 *)(v205 + 23);
        if (*(char *)(v205 + 23) < 0) {
          uint64_t v207 = *(void *)(v205 + 8);
        }
        else {
          uint64_t v207 = *(unsigned __int8 *)(v205 + 23);
        }
        int v208 = *((_DWORD *)v201 + 4);
        uint64_t v209 = v201[7];
        uint64_t v210 = *(unsigned __int8 *)(v209 + 23);
        if (*(char *)(v209 + 23) < 0) {
          uint64_t v211 = *(void *)(v209 + 8);
        }
        else {
          uint64_t v211 = *(unsigned __int8 *)(v209 + 23);
        }
        if (v208 <= 0) {
          int v212 = 1;
        }
        else {
          int v212 = 2;
        }
        if (v204) {
          unsigned int v213 = v212;
        }
        else {
          unsigned int v213 = v208 > 0;
        }
        if (v207) {
          ++v213;
        }
        if (v211) {
          ++v213;
        }
        if (v213 <= 1)
        {
          if (v213) {
            int v214 = 0;
          }
          else {
            int v214 = 5;
          }
          if (v208 <= 0 && v213 != 0)
          {
            if ((v203 & 0x80) != 0) {
              uint64_t v203 = *(void *)(v202 + 8);
            }
            if (v203)
            {
              int v214 = 1;
            }
            else
            {
              if ((v206 & 0x80) != 0) {
                uint64_t v206 = *(void *)(v205 + 8);
              }
              uint64_t v216 = v201[8];
              if (v201 == &CoreML::Specification::_WeightParams_default_instance_
                || (v206 ? (BOOL v217 = v216 == 0) : (BOOL v217 = 1), v217))
              {
                if ((v210 & 0x80) != 0) {
                  uint64_t v210 = *(void *)(v209 + 8);
                }
                if (v216) {
                  BOOL v218 = v210 == 0;
                }
                else {
                  BOOL v218 = 1;
                }
                if (v218 || v201 == &CoreML::Specification::_WeightParams_default_instance_) {
                  int v214 = 5;
                }
                else {
                  int v214 = 3;
                }
              }
              else
              {
                int v214 = 2;
              }
            }
          }
        }
        else
        {
          int v214 = 4;
        }
        if (v194 >= v64)
        {
          uint64_t v220 = v194 - v66;
          unint64_t v221 = v220 + 1;
          if ((unint64_t)(v220 + 1) >> 62) {
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
          }
          if (((char *)v64 - (char *)v66) >> 1 > v221) {
            unint64_t v221 = ((char *)v64 - (char *)v66) >> 1;
          }
          if ((unint64_t)((char *)v64 - (char *)v66) >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v222 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v222 = v221;
          }
          if (v222) {
            unint64_t v222 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v222);
          }
          int v223 = (int *)(v222 + 4 * v220);
          *int v223 = v214;
          uint64_t v142 = v223 + 1;
          if (v194 == v66) {
            goto LABEL_591;
          }
          do
          {
            int v224 = *--v194;
            *--int v223 = v224;
          }
          while (v194 != v66);
          if (v66) {
LABEL_591:
          }
            operator delete(v66);
          uint64_t v66 = v223;
        }
        else
        {
          *std::string v194 = v214;
          uint64_t v142 = v194 + 1;
        }
      }
      if (v66 != v142)
      {
        int v225 = 0;
        int v226 = 0;
        unsigned int v227 = v66;
        while (1)
        {
          int v228 = *v227 ? v225 : v225 + 1;
          if (*v227 == 1) {
            ++v226;
          }
          else {
            int v225 = v228;
          }
          if (v225 * v226 >= 1) {
            break;
          }
          if (++v227 == v142) {
            goto LABEL_603;
          }
        }
        std::operator+<char>();
        v253 = std::string::append(&v260, "' has invalid weight/recursion matrix or bias fields. Field value types should match and should be either half or full precision");
        long long v254 = *(_OWORD *)&v253->__r_.__value_.__l.__data_;
        std::string::size_type v262 = v253->__r_.__value_.__r.__words[2];
        *(_OWORD *)v261 = v254;
        v253->__r_.__value_.__l.__size_ = 0;
        v253->__r_.__value_.__r.__words[2] = 0;
        v253->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v260.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v260.__r_.__value_.__l.__data_);
        }
        *this = (void *)13;
        std::operator+<char>();
        if (SHIBYTE(v262) < 0) {
          operator delete(v261[0]);
        }
        goto LABEL_698;
      }
LABEL_603:
      uint64_t v230 = v8[14];
      uint64_t v229 = v8[15];
      if (v8[5]) {
        int v231 = (uint64_t *)v8[5];
      }
      else {
        int v231 = &CoreML::Specification::_WeightParams_default_instance_;
      }
      std::string::basic_string[abi:ne180100]<0>(v261, "GRU");
      uint64_t v232 = *(void *)(a3 + 112);
      std::string::basic_string[abi:ne180100]<0>(&v260, "update gate weight matrix");
      unint64_t v233 = v229 * v230;
      CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v231, v233, v229, (const void **)v261, v232, (uint64_t)&v260);
      if (SHIBYTE(v260.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v260.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v262) < 0) {
        operator delete(v261[0]);
      }
      if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
      {
        if (*((char *)this + 31) < 0) {
          operator delete(this[1]);
        }
        if (v8[6]) {
          int v234 = (uint64_t *)v8[6];
        }
        else {
          int v234 = &CoreML::Specification::_WeightParams_default_instance_;
        }
        std::string::basic_string[abi:ne180100]<0>(v261, "GRU");
        uint64_t v235 = *(void *)(a3 + 112);
        std::string::basic_string[abi:ne180100]<0>(&v260, "reset gate weight matrix");
        CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v234, v233, v229, (const void **)v261, v235, (uint64_t)&v260);
        if (SHIBYTE(v260.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v260.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v262) < 0) {
          operator delete(v261[0]);
        }
        if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
        {
          if (*((char *)this + 31) < 0) {
            operator delete(this[1]);
          }
          if (v8[7]) {
            unsigned int v236 = (uint64_t *)v8[7];
          }
          else {
            unsigned int v236 = &CoreML::Specification::_WeightParams_default_instance_;
          }
          std::string::basic_string[abi:ne180100]<0>(v261, "GRU");
          uint64_t v237 = *(void *)(a3 + 112);
          std::string::basic_string[abi:ne180100]<0>(&v260, "output gate weight matrix");
          CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v236, v233, v229, (const void **)v261, v237, (uint64_t)&v260);
          if (SHIBYTE(v260.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v260.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v262) < 0) {
            operator delete(v261[0]);
          }
          if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
          {
            if (*((char *)this + 31) < 0) {
              operator delete(this[1]);
            }
            uint64_t v238 = v8[15];
            if (v8[8]) {
              unsigned int v239 = (uint64_t *)v8[8];
            }
            else {
              unsigned int v239 = &CoreML::Specification::_WeightParams_default_instance_;
            }
            std::string::basic_string[abi:ne180100]<0>(v261, "GRU");
            uint64_t v240 = *(void *)(a3 + 112);
            std::string::basic_string[abi:ne180100]<0>(&v260, "update gate recursion matrix");
            unint64_t v241 = v238 * v238;
            CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v239, v241, v229, (const void **)v261, v240, (uint64_t)&v260);
            if (SHIBYTE(v260.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v260.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v262) < 0) {
              operator delete(v261[0]);
            }
            if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
            {
              if (*((char *)this + 31) < 0) {
                operator delete(this[1]);
              }
              if (v8[9]) {
                unsigned int v242 = (uint64_t *)v8[9];
              }
              else {
                unsigned int v242 = &CoreML::Specification::_WeightParams_default_instance_;
              }
              std::string::basic_string[abi:ne180100]<0>(v261, "GRU");
              uint64_t v243 = *(void *)(a3 + 112);
              std::string::basic_string[abi:ne180100]<0>(&v260, "reset gate recursion matrix");
              CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v242, v241, v229, (const void **)v261, v243, (uint64_t)&v260);
              if (SHIBYTE(v260.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v260.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v262) < 0) {
                operator delete(v261[0]);
              }
              if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
              {
                if (*((char *)this + 31) < 0) {
                  operator delete(this[1]);
                }
                if (v8[10]) {
                  int v244 = (uint64_t *)v8[10];
                }
                else {
                  int v244 = &CoreML::Specification::_WeightParams_default_instance_;
                }
                std::string::basic_string[abi:ne180100]<0>(v261, "GRU");
                uint64_t v245 = *(void *)(a3 + 112);
                std::string::basic_string[abi:ne180100]<0>(&v260, "output gate recursion matrix");
                CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v244, v241, v229, (const void **)v261, v245, (uint64_t)&v260);
                if (SHIBYTE(v260.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v260.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v262) < 0) {
                  operator delete(v261[0]);
                }
                if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
                {
                  if (*((char *)this + 31) < 0) {
                    operator delete(this[1]);
                  }
                  if (!v259) {
                    goto LABEL_701;
                  }
                  unint64_t v246 = v8[15];
                  if (v8[11]) {
                    unsigned int v247 = (uint64_t *)v8[11];
                  }
                  else {
                    unsigned int v247 = &CoreML::Specification::_WeightParams_default_instance_;
                  }
                  std::string::basic_string[abi:ne180100]<0>(v261, "GRU");
                  uint64_t v248 = *(void *)(a3 + 112);
                  std::string::basic_string[abi:ne180100]<0>(&v260, "update gate bias vector");
                  CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v247, v246, 1, (const void **)v261, v248, (uint64_t)&v260);
                  if (SHIBYTE(v260.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v260.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v262) < 0) {
                    operator delete(v261[0]);
                  }
                  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
                  {
                    if (*((char *)this + 31) < 0) {
                      operator delete(this[1]);
                    }
                    if (v8[12]) {
                      int v249 = (uint64_t *)v8[12];
                    }
                    else {
                      int v249 = &CoreML::Specification::_WeightParams_default_instance_;
                    }
                    std::string::basic_string[abi:ne180100]<0>(v261, "GRU");
                    uint64_t v250 = *(void *)(a3 + 112);
                    std::string::basic_string[abi:ne180100]<0>(&v260, "reset gate bias vector");
                    CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v249, v246, 1, (const void **)v261, v250, (uint64_t)&v260);
                    if (SHIBYTE(v260.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v260.__r_.__value_.__l.__data_);
                    }
                    if (SHIBYTE(v262) < 0) {
                      operator delete(v261[0]);
                    }
                    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
                    {
                      if (*((char *)this + 31) < 0) {
                        operator delete(this[1]);
                      }
                      if (v8[13]) {
                        int v251 = (uint64_t *)v8[13];
                      }
                      else {
                        int v251 = &CoreML::Specification::_WeightParams_default_instance_;
                      }
                      std::string::basic_string[abi:ne180100]<0>(v261, "GRU");
                      uint64_t v252 = *(void *)(a3 + 112);
                      std::string::basic_string[abi:ne180100]<0>(&v260, "output gate bias vector");
                      CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v251, v246, 1, (const void **)v261, v252, (uint64_t)&v260);
                      if (SHIBYTE(v260.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v260.__r_.__value_.__l.__data_);
                      }
                      if (SHIBYTE(v262) < 0) {
                        operator delete(v261[0]);
                      }
                      if ((*(_DWORD *)this & 0xFFFFFFEF) == 0 && *((char *)this + 31) < 0)
                      {
                        operator delete(this[1]);
                        goto LABEL_701;
                      }
                      if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
                      {
LABEL_701:
                        uint64_t v255 = v8[4];
                        if (v255) {
                          v256 = (const CoreML::Specification::ActivationParams **)(v255 + 8);
                        }
                        else {
                          v256 = 0;
                        }
                        uint64_t v257 = *((int *)v8 + 6);
                        if (v257)
                        {
                          uint64_t v258 = 8 * v257;
                          while (1)
                          {
                            CoreML::validateRecurrentActivationParams((CoreML *)this, *v256);
                            if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
                              break;
                            }
                            if (*((char *)this + 31) < 0) {
                              operator delete(this[1]);
                            }
                            ++v256;
                            v258 -= 8;
                            if (!v258) {
                              goto LABEL_710;
                            }
                          }
                        }
                        else
                        {
LABEL_710:
                          CoreML::Result::Result((CoreML::Result *)this);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
LABEL_698:
      if (v66) {
        operator delete(v66);
      }
    }
  }
}

void sub_19EAEE324(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (v21) {
    operator delete(v21);
  }
  _Unwind_Resume(exception_object);
}

void sub_19EAEE430(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    JUMPOUT(0x19EAEE424);
  }
  JUMPOUT(0x19EAEE428);
}

void CoreML::NeuralNetworkSpecValidator::validateUniDirectionalLSTMLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2, uint64_t a3)
{
  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 3);
  if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
    return;
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 3, 3);
  if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
    return;
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  if (*(unsigned char *)a2)
  {
    std::string::basic_string[abi:ne180100]<0>(v101, "UniDirectionalLSTM");
    int v7 = (char *)a2 + 32;
    CoreML::validateInputOutputRankEquality((CoreML::Result *)this, (void *)a3, (uint64_t)v101, (uint64_t)v7);
    if (v102 < 0) {
      operator delete(v101[0]);
    }
    if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
      return;
    }
    if (*((char *)this + 31) < 0) {
      operator delete(this[1]);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "UniDirectionalLSTM");
    CoreML::validateRankCount((uint64_t)this, (void *)a3, (uint64_t)__p, 5, 5, (uint64_t)v7);
    if (v91 < 0) {
      operator delete(__p[0]);
    }
    if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
      return;
    }
    if (*((char *)this + 31) < 0) {
      operator delete(this[1]);
    }
  }
  if (*(_DWORD *)(a3 + 140) == 420)
  {
    int v8 = *(uint64_t **)(a3 + 128);
  }
  else
  {
    inited = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(inited);
    int v8 = &CoreML::Specification::_UniDirectionalLSTMLayerParams_default_instance_;
  }
  uint64_t v9 = v8[4];
  if (v9) {
    uint64_t v10 = (const CoreML::Specification::ActivationParams **)(v9 + 8);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *((int *)v8 + 6);
  if (!v11)
  {
LABEL_31:
    if (*(_DWORD *)(a3 + 140) == 420)
    {
      uint64_t v13 = *(uint64_t **)(a3 + 128);
      if (v13[6]) {
        uint64_t v14 = (uint64_t *)v13[6];
      }
      else {
        uint64_t v14 = &CoreML::Specification::_LSTMWeightParams_default_instance_;
      }
    }
    else
    {
      uint64_t v15 = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(inited);
      if (qword_1EB4E1B98) {
        uint64_t v14 = (uint64_t *)qword_1EB4E1B98;
      }
      else {
        uint64_t v14 = &CoreML::Specification::_LSTMWeightParams_default_instance_;
      }
      if (*(_DWORD *)(a3 + 140) == 420)
      {
        uint64_t v13 = *(uint64_t **)(a3 + 128);
      }
      else
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v15);
        uint64_t v13 = &CoreML::Specification::_UniDirectionalLSTMLayerParams_default_instance_;
      }
    }
    int v16 = (const CoreML::Specification::LSTMParams *)v13[5];
    if (v16) {
      uint64_t v17 = v16;
    }
    else {
      uint64_t v17 = (const CoreML::Specification::LSTMParams *)&CoreML::Specification::_LSTMParams_default_instance_;
    }
    CoreML::Specification::LSTMParams::LSTMParams((CoreML::Specification::LSTMParams *)&v97, v17);
    CoreML::validateLSTMWeightParams((CoreML::Result *)this, v14, v99, v100);
    char v97 = &unk_1EF0CE698;
    uint64_t v18 = google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(&v98);
    if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
      return;
    }
    if (*((char *)this + 31) < 0) {
      operator delete(this[1]);
    }
    if (*(_DWORD *)(a3 + 140) == 420)
    {
      uint64_t v19 = *(const CoreML::Specification::UniDirectionalLSTMLayerParams **)(a3 + 128);
    }
    else
    {
      CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v18);
      uint64_t v19 = (const CoreML::Specification::UniDirectionalLSTMLayerParams *)&CoreML::Specification::_UniDirectionalLSTMLayerParams_default_instance_;
    }
    CoreML::Specification::UniDirectionalLSTMLayerParams::UniDirectionalLSTMLayerParams((CoreML::Specification::UniDirectionalLSTMLayerParams *)__p, v19);
    if (v92 != 3)
    {
      std::operator+<char>();
      std::string v85 = std::string::append(&v87, " must provide 3 activations");
      long long v86 = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
      std::string::size_type v89 = v85->__r_.__value_.__r.__words[2];
      *(_OWORD *)BOOL v88 = v86;
      v85->__r_.__value_.__l.__size_ = 0;
      v85->__r_.__value_.__r.__words[2] = 0;
      v85->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v87.__r_.__value_.__l.__data_);
      }
      *this = (void *)13;
      std::operator+<char>();
      if (SHIBYTE(v89) < 0) {
        operator delete(v88[0]);
      }
      goto LABEL_242;
    }
    uint64_t v21 = v95;
    unint64_t v20 = v96;
    int v22 = v94;
    if (!v94) {
      int v22 = &CoreML::Specification::_LSTMWeightParams_default_instance_;
    }
    uint64_t v23 = (uint64_t *)v22[2];
    if (v23) {
      BOOL v24 = v23;
    }
    else {
      BOOL v24 = &CoreML::Specification::_WeightParams_default_instance_;
    }
    std::string::basic_string[abi:ne180100]<0>(v88, "Unidirectional LSTM");
    uint64_t v25 = *(void *)(a3 + 112);
    std::string::basic_string[abi:ne180100]<0>(&v87, "input gate weight matrix");
    unint64_t v26 = v21 * v20;
    CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v24, v26, v20, (const void **)v88, v25, (uint64_t)&v87);
    if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v87.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v89) < 0) {
      operator delete(v88[0]);
    }
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0) {
        operator delete(this[1]);
      }
      unint64_t v27 = v94;
      if (!v94) {
        unint64_t v27 = &CoreML::Specification::_LSTMWeightParams_default_instance_;
      }
      uint64_t v28 = (uint64_t *)v27[3];
      if (v28) {
        uint64_t v29 = v28;
      }
      else {
        uint64_t v29 = &CoreML::Specification::_WeightParams_default_instance_;
      }
      std::string::basic_string[abi:ne180100]<0>(v88, "Unidirectional LSTM");
      uint64_t v30 = *(void *)(a3 + 112);
      std::string::basic_string[abi:ne180100]<0>(&v87, "forget gate weight matrix");
      CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v29, v26, v20, (const void **)v88, v30, (uint64_t)&v87);
      if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v87.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v89) < 0) {
        operator delete(v88[0]);
      }
      if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
      {
        if (*((char *)this + 31) < 0) {
          operator delete(this[1]);
        }
        uint64_t v31 = v94;
        if (!v94) {
          uint64_t v31 = &CoreML::Specification::_LSTMWeightParams_default_instance_;
        }
        uint64_t v32 = (uint64_t *)v31[4];
        if (v32) {
          uint64_t v33 = v32;
        }
        else {
          uint64_t v33 = &CoreML::Specification::_WeightParams_default_instance_;
        }
        std::string::basic_string[abi:ne180100]<0>(v88, "Unidirectional LSTM");
        uint64_t v34 = *(void *)(a3 + 112);
        std::string::basic_string[abi:ne180100]<0>(&v87, "block input gate weight matrix");
        CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v33, v26, v20, (const void **)v88, v34, (uint64_t)&v87);
        if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v87.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v89) < 0) {
          operator delete(v88[0]);
        }
        if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
        {
          if (*((char *)this + 31) < 0) {
            operator delete(this[1]);
          }
          uint64_t v35 = v94;
          if (!v94) {
            uint64_t v35 = &CoreML::Specification::_LSTMWeightParams_default_instance_;
          }
          uint64_t v36 = (uint64_t *)v35[5];
          if (v36) {
            uint64_t v37 = v36;
          }
          else {
            uint64_t v37 = &CoreML::Specification::_WeightParams_default_instance_;
          }
          std::string::basic_string[abi:ne180100]<0>(v88, "Unidirectional LSTM");
          uint64_t v38 = *(void *)(a3 + 112);
          std::string::basic_string[abi:ne180100]<0>(&v87, "output gate weight matrix");
          CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v37, v26, v20, (const void **)v88, v38, (uint64_t)&v87);
          if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v87.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v89) < 0) {
            operator delete(v88[0]);
          }
          if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
          {
            if (*((char *)this + 31) < 0) {
              operator delete(this[1]);
            }
            unsigned int v39 = v94;
            if (!v94) {
              unsigned int v39 = &CoreML::Specification::_LSTMWeightParams_default_instance_;
            }
            int v40 = (uint64_t *)v39[6];
            if (v40) {
              uint64_t v41 = v40;
            }
            else {
              uint64_t v41 = &CoreML::Specification::_WeightParams_default_instance_;
            }
            std::string::basic_string[abi:ne180100]<0>(v88, "Unidirectional LSTM");
            uint64_t v42 = *(void *)(a3 + 112);
            std::string::basic_string[abi:ne180100]<0>(&v87, "input gate recursion matrix");
            CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v41, v20 * v20, v20, (const void **)v88, v42, (uint64_t)&v87);
            if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v87.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v89) < 0) {
              operator delete(v88[0]);
            }
            if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
            {
              if (*((char *)this + 31) < 0) {
                operator delete(this[1]);
              }
              uint64_t v43 = v94;
              if (!v94) {
                uint64_t v43 = &CoreML::Specification::_LSTMWeightParams_default_instance_;
              }
              BOOL v44 = (uint64_t *)v43[7];
              if (v44) {
                uint64_t v45 = v44;
              }
              else {
                uint64_t v45 = &CoreML::Specification::_WeightParams_default_instance_;
              }
              std::string::basic_string[abi:ne180100]<0>(v88, "Unidirectional LSTM");
              uint64_t v46 = *(void *)(a3 + 112);
              std::string::basic_string[abi:ne180100]<0>(&v87, "forget gate recursion matrix");
              CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v45, v20 * v20, v20, (const void **)v88, v46, (uint64_t)&v87);
              if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v87.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v89) < 0) {
                operator delete(v88[0]);
              }
              if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
              {
                if (*((char *)this + 31) < 0) {
                  operator delete(this[1]);
                }
                uint64_t v47 = v94;
                if (!v94) {
                  uint64_t v47 = &CoreML::Specification::_LSTMWeightParams_default_instance_;
                }
                uint64_t v48 = (uint64_t *)v47[8];
                if (v48) {
                  uint64_t v49 = v48;
                }
                else {
                  uint64_t v49 = &CoreML::Specification::_WeightParams_default_instance_;
                }
                std::string::basic_string[abi:ne180100]<0>(v88, "Unidirectional LSTM");
                uint64_t v50 = *(void *)(a3 + 112);
                std::string::basic_string[abi:ne180100]<0>(&v87, "block input gate recursion matrix");
                CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v49, v20 * v20, v20, (const void **)v88, v50, (uint64_t)&v87);
                if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v87.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v89) < 0) {
                  operator delete(v88[0]);
                }
                if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
                {
                  if (*((char *)this + 31) < 0) {
                    operator delete(this[1]);
                  }
                  uint64_t v51 = v94;
                  if (!v94) {
                    uint64_t v51 = &CoreML::Specification::_LSTMWeightParams_default_instance_;
                  }
                  uint64_t v52 = (uint64_t *)v51[9];
                  if (v52) {
                    uint64_t v53 = v52;
                  }
                  else {
                    uint64_t v53 = &CoreML::Specification::_WeightParams_default_instance_;
                  }
                  std::string::basic_string[abi:ne180100]<0>(v88, "Unidirectional LSTM");
                  uint64_t v54 = *(void *)(a3 + 112);
                  std::string::basic_string[abi:ne180100]<0>(&v87, "output gate recursion matrix");
                  CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v53, v20 * v20, v20, (const void **)v88, v54, (uint64_t)&v87);
                  if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v87.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v89) < 0) {
                    operator delete(v88[0]);
                  }
                  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
                  {
                    if (*((char *)this + 31) < 0) {
                      operator delete(this[1]);
                    }
                    uint64_t v55 = v93;
                    if (!v93) {
                      uint64_t v55 = &CoreML::Specification::_LSTMParams_default_instance_;
                    }
                    if (*((unsigned char *)v55 + 21))
                    {
                      uint64_t v56 = v94;
                      if (!v94) {
                        uint64_t v56 = &CoreML::Specification::_LSTMWeightParams_default_instance_;
                      }
                      uint64_t v57 = (uint64_t *)v56[10];
                      if (v57) {
                        int v58 = v57;
                      }
                      else {
                        int v58 = &CoreML::Specification::_WeightParams_default_instance_;
                      }
                      std::string::basic_string[abi:ne180100]<0>(v88, "Unidirectional LSTM");
                      uint64_t v59 = *(void *)(a3 + 112);
                      std::string::basic_string[abi:ne180100]<0>(&v87, "input gate bias vector");
                      CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v58, v20, 1, (const void **)v88, v59, (uint64_t)&v87);
                      if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v87.__r_.__value_.__l.__data_);
                      }
                      if (SHIBYTE(v89) < 0) {
                        operator delete(v88[0]);
                      }
                      if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
                        goto LABEL_242;
                      }
                      if (*((char *)this + 31) < 0) {
                        operator delete(this[1]);
                      }
                      int v60 = v94;
                      if (!v94) {
                        int v60 = &CoreML::Specification::_LSTMWeightParams_default_instance_;
                      }
                      uint64_t v61 = (uint64_t *)v60[11];
                      if (v61) {
                        BOOL v62 = v61;
                      }
                      else {
                        BOOL v62 = &CoreML::Specification::_WeightParams_default_instance_;
                      }
                      std::string::basic_string[abi:ne180100]<0>(v88, "Unidirectional LSTM");
                      uint64_t v63 = *(void *)(a3 + 112);
                      std::string::basic_string[abi:ne180100]<0>(&v87, "forget gate bias vector");
                      CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v62, v20, 1, (const void **)v88, v63, (uint64_t)&v87);
                      if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v87.__r_.__value_.__l.__data_);
                      }
                      if (SHIBYTE(v89) < 0) {
                        operator delete(v88[0]);
                      }
                      if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
                        goto LABEL_242;
                      }
                      if (*((char *)this + 31) < 0) {
                        operator delete(this[1]);
                      }
                      BOOL v64 = v94;
                      if (!v94) {
                        BOOL v64 = &CoreML::Specification::_LSTMWeightParams_default_instance_;
                      }
                      int v65 = (uint64_t *)v64[12];
                      if (v65) {
                        uint64_t v66 = v65;
                      }
                      else {
                        uint64_t v66 = &CoreML::Specification::_WeightParams_default_instance_;
                      }
                      std::string::basic_string[abi:ne180100]<0>(v88, "Unidirectional LSTM");
                      uint64_t v67 = *(void *)(a3 + 112);
                      std::string::basic_string[abi:ne180100]<0>(&v87, "block input bias vector");
                      CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v66, v20, 1, (const void **)v88, v67, (uint64_t)&v87);
                      if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v87.__r_.__value_.__l.__data_);
                      }
                      if (SHIBYTE(v89) < 0) {
                        operator delete(v88[0]);
                      }
                      if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
                        goto LABEL_242;
                      }
                      if (*((char *)this + 31) < 0) {
                        operator delete(this[1]);
                      }
                      unint64_t v68 = v94;
                      if (!v94) {
                        unint64_t v68 = &CoreML::Specification::_LSTMWeightParams_default_instance_;
                      }
                      uint64_t v69 = (uint64_t *)v68[13];
                      if (v69) {
                        uint64_t v70 = v69;
                      }
                      else {
                        uint64_t v70 = &CoreML::Specification::_WeightParams_default_instance_;
                      }
                      std::string::basic_string[abi:ne180100]<0>(v88, "Unidirectional LSTM");
                      uint64_t v71 = *(void *)(a3 + 112);
                      std::string::basic_string[abi:ne180100]<0>(&v87, "output gate bias vector");
                      CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v70, v20, 1, (const void **)v88, v71, (uint64_t)&v87);
                      if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v87.__r_.__value_.__l.__data_);
                      }
                      if (SHIBYTE(v89) < 0) {
                        operator delete(v88[0]);
                      }
                      if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
                        goto LABEL_242;
                      }
                      if (*((char *)this + 31) < 0) {
                        operator delete(this[1]);
                      }
                    }
                    uint64_t v72 = v93;
                    if (!v93) {
                      uint64_t v72 = &CoreML::Specification::_LSTMParams_default_instance_;
                    }
                    if (*((unsigned char *)v72 + 23))
                    {
                      uint64_t v73 = v94;
                      if (!v94) {
                        uint64_t v73 = &CoreML::Specification::_LSTMWeightParams_default_instance_;
                      }
                      uint64_t v74 = (uint64_t *)v73[14];
                      if (v74) {
                        uint64_t v75 = v74;
                      }
                      else {
                        uint64_t v75 = &CoreML::Specification::_WeightParams_default_instance_;
                      }
                      std::string::basic_string[abi:ne180100]<0>(v88, "Unidirectional LSTM");
                      uint64_t v76 = *(void *)(a3 + 112);
                      std::string::basic_string[abi:ne180100]<0>(&v87, "input gate peep hole vector");
                      CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v75, v20, 1, (const void **)v88, v76, (uint64_t)&v87);
                      if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v87.__r_.__value_.__l.__data_);
                      }
                      if (SHIBYTE(v89) < 0) {
                        operator delete(v88[0]);
                      }
                      if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
                        goto LABEL_242;
                      }
                      if (*((char *)this + 31) < 0) {
                        operator delete(this[1]);
                      }
                      uint64_t v77 = v94;
                      if (!v94) {
                        uint64_t v77 = &CoreML::Specification::_LSTMWeightParams_default_instance_;
                      }
                      int v78 = (uint64_t *)v77[15];
                      if (v78) {
                        uint64_t v79 = v78;
                      }
                      else {
                        uint64_t v79 = &CoreML::Specification::_WeightParams_default_instance_;
                      }
                      std::string::basic_string[abi:ne180100]<0>(v88, "Unidirectional LSTM");
                      uint64_t v80 = *(void *)(a3 + 112);
                      std::string::basic_string[abi:ne180100]<0>(&v87, "forget gate peep hole vector");
                      CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v79, v20, 1, (const void **)v88, v80, (uint64_t)&v87);
                      if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v87.__r_.__value_.__l.__data_);
                      }
                      if (SHIBYTE(v89) < 0) {
                        operator delete(v88[0]);
                      }
                      if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
                        goto LABEL_242;
                      }
                      if (*((char *)this + 31) < 0) {
                        operator delete(this[1]);
                      }
                      uint64_t v81 = v94;
                      if (!v94) {
                        uint64_t v81 = &CoreML::Specification::_LSTMWeightParams_default_instance_;
                      }
                      int v82 = (uint64_t *)v81[16];
                      if (v82) {
                        unsigned int v83 = v82;
                      }
                      else {
                        unsigned int v83 = &CoreML::Specification::_WeightParams_default_instance_;
                      }
                      std::string::basic_string[abi:ne180100]<0>(v88, "Unidirectional LSTM");
                      uint64_t v84 = *(void *)(a3 + 112);
                      std::string::basic_string[abi:ne180100]<0>(&v87, "output gate peep hole vector");
                      CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v83, v20, 1, (const void **)v88, v84, (uint64_t)&v87);
                      if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v87.__r_.__value_.__l.__data_);
                      }
                      if (SHIBYTE(v89) < 0) {
                        operator delete(v88[0]);
                      }
                      if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
                        goto LABEL_242;
                      }
                      if (*((char *)this + 31) < 0) {
                        operator delete(this[1]);
                      }
                    }
                    CoreML::Result::Result((CoreML::Result *)this);
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_242:
    CoreML::Specification::UniDirectionalLSTMLayerParams::~UniDirectionalLSTMLayerParams((CoreML::Specification::UniDirectionalLSTMLayerParams *)__p);
    return;
  }
  uint64_t v12 = 8 * v11;
  while (1)
  {
    inited = CoreML::validateRecurrentActivationParams((CoreML *)this, *v10);
    if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
      break;
    }
    if (*((char *)this + 31) < 0) {
      operator delete(this[1]);
    }
    ++v10;
    v12 -= 8;
    if (!v12) {
      goto LABEL_31;
    }
  }
}

void sub_19EAEF0E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  CoreML::Specification::UniDirectionalLSTMLayerParams::~UniDirectionalLSTMLayerParams((CoreML::Specification::UniDirectionalLSTMLayerParams *)&a22);
  _Unwind_Resume(a1);
}

void CoreML::validateLSTMWeightParams(CoreML::Result *a1, void *a2, char a3, char a4)
{
  size_t v6 = (uint64_t *)a2[2];
  if (!v6) {
    size_t v6 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  uint64_t v7 = v6[5];
  uint64_t v8 = *(unsigned __int8 *)(v7 + 23);
  if (*(char *)(v7 + 23) < 0) {
    uint64_t v9 = *(void *)(v7 + 8);
  }
  else {
    uint64_t v9 = *(unsigned __int8 *)(v7 + 23);
  }
  uint64_t v10 = v6[6];
  uint64_t v11 = *(unsigned __int8 *)(v10 + 23);
  if (*(char *)(v10 + 23) < 0) {
    uint64_t v12 = *(void *)(v10 + 8);
  }
  else {
    uint64_t v12 = *(unsigned __int8 *)(v10 + 23);
  }
  int v13 = *((_DWORD *)v6 + 4);
  uint64_t v14 = v6[7];
  uint64_t v15 = *(unsigned __int8 *)(v14 + 23);
  if (*(char *)(v14 + 23) < 0) {
    uint64_t v16 = *(void *)(v14 + 8);
  }
  else {
    uint64_t v16 = *(unsigned __int8 *)(v14 + 23);
  }
  if (v13 <= 0) {
    int v17 = 1;
  }
  else {
    int v17 = 2;
  }
  if (v9) {
    unsigned int v18 = v17;
  }
  else {
    unsigned int v18 = v13 > 0;
  }
  if (v12) {
    ++v18;
  }
  if (v16) {
    ++v18;
  }
  if (v18 <= 1)
  {
    if (v18) {
      int v20 = 0;
    }
    else {
      int v20 = 5;
    }
    if (v13 > 0 || v18 == 0)
    {
      char v19 = a4;
    }
    else
    {
      if ((v8 & 0x80) != 0) {
        uint64_t v8 = *(void *)(v7 + 8);
      }
      char v19 = a4;
      if (v8)
      {
        int v20 = 1;
      }
      else
      {
        if ((v11 & 0x80) != 0) {
          uint64_t v11 = *(void *)(v10 + 8);
        }
        uint64_t v22 = v6[8];
        if (v6 == &CoreML::Specification::_WeightParams_default_instance_ || (v11 ? (BOOL v23 = v22 == 0) : (BOOL v23 = 1), v23))
        {
          if ((v15 & 0x80) != 0) {
            uint64_t v15 = *(void *)(v14 + 8);
          }
          if (v22) {
            BOOL v24 = v15 == 0;
          }
          else {
            BOOL v24 = 1;
          }
          if (v24 || v6 == &CoreML::Specification::_WeightParams_default_instance_) {
            int v20 = 5;
          }
          else {
            int v20 = 3;
          }
        }
        else
        {
          int v20 = 2;
        }
      }
    }
  }
  else
  {
    char v19 = a4;
    int v20 = 4;
  }
  unint64_t v26 = (int *)operator new(4uLL);
  int *v26 = v20;
  unint64_t v27 = (uint64_t *)a2[3];
  if (!v27) {
    unint64_t v27 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  uint64_t v28 = v27[5];
  if (*(char *)(v28 + 23) < 0) {
    uint64_t v29 = *(void *)(v28 + 8);
  }
  else {
    uint64_t v29 = *(unsigned __int8 *)(v28 + 23);
  }
  uint64_t v30 = v27[6];
  uint64_t v31 = *(unsigned __int8 *)(v30 + 23);
  if (*(char *)(v30 + 23) < 0) {
    uint64_t v32 = *(void *)(v30 + 8);
  }
  else {
    uint64_t v32 = *(unsigned __int8 *)(v30 + 23);
  }
  int v33 = *((_DWORD *)v27 + 4);
  uint64_t v34 = v27[7];
  uint64_t v35 = *(unsigned __int8 *)(v34 + 23);
  if (*(char *)(v34 + 23) < 0) {
    uint64_t v36 = *(void *)(v34 + 8);
  }
  else {
    uint64_t v36 = *(unsigned __int8 *)(v34 + 23);
  }
  if (v33 <= 0) {
    int v37 = 1;
  }
  else {
    int v37 = 2;
  }
  if (v29) {
    unsigned int v38 = v37;
  }
  else {
    unsigned int v38 = v33 > 0;
  }
  if (v32) {
    ++v38;
  }
  if (v36) {
    ++v38;
  }
  if (v38 > 1)
  {
    int v39 = 4;
    goto LABEL_105;
  }
  if (v38) {
    int v39 = 0;
  }
  else {
    int v39 = 5;
  }
  if (v33 <= 0 && v38)
  {
    if ((*(unsigned char *)(v28 + 23) & 0x80) != 0)
    {
      if (*(void *)(v28 + 8)) {
        goto LABEL_86;
      }
    }
    else if (*(unsigned char *)(v28 + 23))
    {
LABEL_86:
      int v39 = 1;
      goto LABEL_105;
    }
    if ((v31 & 0x80) != 0) {
      uint64_t v31 = *(void *)(v30 + 8);
    }
    uint64_t v40 = v27[8];
    if (v27 != &CoreML::Specification::_WeightParams_default_instance_ && v31 && v40)
    {
      int v39 = 2;
    }
    else
    {
      if ((v35 & 0x80) != 0) {
        uint64_t v35 = *(void *)(v34 + 8);
      }
      if (v40) {
        BOOL v41 = v35 == 0;
      }
      else {
        BOOL v41 = 1;
      }
      if (v41 || v27 == &CoreML::Specification::_WeightParams_default_instance_) {
        int v39 = 5;
      }
      else {
        int v39 = 3;
      }
    }
  }
LABEL_105:
  uint64_t v43 = (int *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(2uLL);
  uint64_t v45 = v44;
  v43[1] = v39;
  int *v43 = *v26;
  operator delete(v26);
  uint64_t v46 = (uint64_t *)a2[4];
  if (!v46) {
    uint64_t v46 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  uint64_t v47 = v46[5];
  if (*(char *)(v47 + 23) < 0) {
    uint64_t v48 = *(void *)(v47 + 8);
  }
  else {
    uint64_t v48 = *(unsigned __int8 *)(v47 + 23);
  }
  uint64_t v49 = v46[6];
  uint64_t v50 = *(unsigned __int8 *)(v49 + 23);
  if (*(char *)(v49 + 23) < 0) {
    uint64_t v51 = *(void *)(v49 + 8);
  }
  else {
    uint64_t v51 = *(unsigned __int8 *)(v49 + 23);
  }
  int v52 = *((_DWORD *)v46 + 4);
  uint64_t v53 = v46[7];
  uint64_t v54 = *(unsigned __int8 *)(v53 + 23);
  if (*(char *)(v53 + 23) < 0) {
    uint64_t v55 = *(void *)(v53 + 8);
  }
  else {
    uint64_t v55 = *(unsigned __int8 *)(v53 + 23);
  }
  if (v52 <= 0) {
    int v56 = 1;
  }
  else {
    int v56 = 2;
  }
  if (v48) {
    unsigned int v57 = v56;
  }
  else {
    unsigned int v57 = v52 > 0;
  }
  if (v51) {
    ++v57;
  }
  if (v55) {
    ++v57;
  }
  if (v57 > 1)
  {
    int v58 = 4;
    goto LABEL_154;
  }
  if (v57) {
    int v58 = 0;
  }
  else {
    int v58 = 5;
  }
  if (v52 <= 0 && v57)
  {
    if ((*(unsigned char *)(v47 + 23) & 0x80) != 0)
    {
      if (*(void *)(v47 + 8)) {
        goto LABEL_135;
      }
    }
    else if (*(unsigned char *)(v47 + 23))
    {
LABEL_135:
      int v58 = 1;
      goto LABEL_154;
    }
    if ((v50 & 0x80) != 0) {
      uint64_t v50 = *(void *)(v49 + 8);
    }
    uint64_t v59 = v46[8];
    if (v46 != &CoreML::Specification::_WeightParams_default_instance_ && v50 && v59)
    {
      int v58 = 2;
    }
    else
    {
      if ((v54 & 0x80) != 0) {
        uint64_t v54 = *(void *)(v53 + 8);
      }
      if (v59) {
        BOOL v60 = v54 == 0;
      }
      else {
        BOOL v60 = 1;
      }
      if (v60 || v46 == &CoreML::Specification::_WeightParams_default_instance_) {
        int v58 = 5;
      }
      else {
        int v58 = 3;
      }
    }
  }
LABEL_154:
  BOOL v62 = &v43[v45];
  if (v45 < 3)
  {
    uint64_t v65 = 3;
    if ((unint64_t)((4 * v45) >> 1) > 3) {
      uint64_t v65 = (4 * v45) >> 1;
    }
    if ((unint64_t)(4 * v45) >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v66 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v66 = v65;
    }
    if (v66) {
      unint64_t v66 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v66);
    }
    else {
      uint64_t v67 = 0;
    }
    uint64_t v68 = 0;
    BOOL v62 = (int *)(v66 + 4 * v67);
    *(_DWORD *)(v66 + 8) = v58;
    uint64_t v63 = (int *)(v66 + 12);
    do
    {
      *(_DWORD *)(v66 + 8 + v68 * 4 - 4) = v43[v68 + 1];
      --v68;
    }
    while (v68 != -2);
    BOOL v64 = (int *)v66;
    operator delete(v43);
  }
  else
  {
    v43[2] = v58;
    uint64_t v63 = v43 + 3;
    BOOL v64 = v43;
  }
  uint64_t v69 = (uint64_t *)a2[5];
  if (!v69) {
    uint64_t v69 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  uint64_t v70 = v69[5];
  if (*(char *)(v70 + 23) < 0) {
    uint64_t v71 = *(void *)(v70 + 8);
  }
  else {
    uint64_t v71 = *(unsigned __int8 *)(v70 + 23);
  }
  uint64_t v72 = v69[6];
  uint64_t v73 = *(unsigned __int8 *)(v72 + 23);
  if (*(char *)(v72 + 23) < 0) {
    uint64_t v74 = *(void *)(v72 + 8);
  }
  else {
    uint64_t v74 = *(unsigned __int8 *)(v72 + 23);
  }
  int v75 = *((_DWORD *)v69 + 4);
  uint64_t v76 = v69[7];
  uint64_t v77 = *(unsigned __int8 *)(v76 + 23);
  if (*(char *)(v76 + 23) < 0) {
    uint64_t v78 = *(void *)(v76 + 8);
  }
  else {
    uint64_t v78 = *(unsigned __int8 *)(v76 + 23);
  }
  if (v75 <= 0) {
    int v79 = 1;
  }
  else {
    int v79 = 2;
  }
  if (v71) {
    unsigned int v80 = v79;
  }
  else {
    unsigned int v80 = v75 > 0;
  }
  if (v74) {
    ++v80;
  }
  if (v78) {
    ++v80;
  }
  if (v80 > 1)
  {
    int v81 = 4;
    goto LABEL_220;
  }
  if (v80) {
    int v81 = 0;
  }
  else {
    int v81 = 5;
  }
  if (v75 <= 0 && v80 != 0)
  {
    if ((*(unsigned char *)(v70 + 23) & 0x80) != 0)
    {
      if (*(void *)(v70 + 8)) {
        goto LABEL_199;
      }
    }
    else if (*(unsigned char *)(v70 + 23))
    {
LABEL_199:
      int v81 = 1;
      goto LABEL_220;
    }
    if ((v73 & 0x80) != 0) {
      uint64_t v73 = *(void *)(v72 + 8);
    }
    uint64_t v83 = v69[8];
    if (v69 == &CoreML::Specification::_WeightParams_default_instance_ || (v73 ? (BOOL v84 = v83 == 0) : (BOOL v84 = 1), v84))
    {
      if ((v77 & 0x80) != 0) {
        uint64_t v77 = *(void *)(v76 + 8);
      }
      if (v83) {
        BOOL v85 = v77 == 0;
      }
      else {
        BOOL v85 = 1;
      }
      if (v85 || v69 == &CoreML::Specification::_WeightParams_default_instance_) {
        int v81 = 5;
      }
      else {
        int v81 = 3;
      }
    }
    else
    {
      int v81 = 2;
    }
  }
LABEL_220:
  if (v63 >= v62)
  {
    uint64_t v88 = v63 - v64;
    unint64_t v89 = v88 + 1;
    if ((unint64_t)(v88 + 1) >> 62) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
    if (((char *)v62 - (char *)v64) >> 1 > v89) {
      unint64_t v89 = ((char *)v62 - (char *)v64) >> 1;
    }
    if ((unint64_t)((char *)v62 - (char *)v64) >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v90 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v90 = v89;
    }
    if (v90) {
      unint64_t v90 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v90);
    }
    else {
      uint64_t v91 = 0;
    }
    int v92 = (int *)(v90 + 4 * v88);
    BOOL v62 = (int *)(v90 + 4 * v91);
    int *v92 = v81;
    std::string v87 = v92 + 1;
    while (v63 != v64)
    {
      int v93 = *--v63;
      *--int v92 = v93;
    }
    operator delete(v64);
    BOOL v64 = v92;
  }
  else
  {
    *uint64_t v63 = v81;
    std::string v87 = v63 + 1;
  }
  uint64_t v94 = (uint64_t *)a2[6];
  if (!v94) {
    uint64_t v94 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  uint64_t v95 = v94[5];
  if (*(char *)(v95 + 23) < 0) {
    uint64_t v96 = *(void *)(v95 + 8);
  }
  else {
    uint64_t v96 = *(unsigned __int8 *)(v95 + 23);
  }
  uint64_t v97 = v94[6];
  uint64_t v98 = *(unsigned __int8 *)(v97 + 23);
  if (*(char *)(v97 + 23) < 0) {
    uint64_t v99 = *(void *)(v97 + 8);
  }
  else {
    uint64_t v99 = *(unsigned __int8 *)(v97 + 23);
  }
  int v100 = *((_DWORD *)v94 + 4);
  uint64_t v101 = v94[7];
  uint64_t v102 = *(unsigned __int8 *)(v101 + 23);
  if (*(char *)(v101 + 23) < 0) {
    uint64_t v103 = *(void *)(v101 + 8);
  }
  else {
    uint64_t v103 = *(unsigned __int8 *)(v101 + 23);
  }
  if (v100 <= 0) {
    int v104 = 1;
  }
  else {
    int v104 = 2;
  }
  if (v96) {
    unsigned int v105 = v104;
  }
  else {
    unsigned int v105 = v100 > 0;
  }
  if (v99) {
    ++v105;
  }
  if (v103) {
    ++v105;
  }
  if (v105 > 1)
  {
    int v106 = 4;
    goto LABEL_288;
  }
  if (v105) {
    int v106 = 0;
  }
  else {
    int v106 = 5;
  }
  if (v100 <= 0 && v105 != 0)
  {
    if ((*(unsigned char *)(v95 + 23) & 0x80) != 0)
    {
      if (*(void *)(v95 + 8)) {
        goto LABEL_267;
      }
    }
    else if (*(unsigned char *)(v95 + 23))
    {
LABEL_267:
      int v106 = 1;
      goto LABEL_288;
    }
    if ((v98 & 0x80) != 0) {
      uint64_t v98 = *(void *)(v97 + 8);
    }
    uint64_t v108 = v94[8];
    if (v94 == &CoreML::Specification::_WeightParams_default_instance_ || (v98 ? (BOOL v109 = v108 == 0) : (BOOL v109 = 1), v109))
    {
      if ((v102 & 0x80) != 0) {
        uint64_t v102 = *(void *)(v101 + 8);
      }
      if (v108) {
        BOOL v110 = v102 == 0;
      }
      else {
        BOOL v110 = 1;
      }
      if (v110 || v94 == &CoreML::Specification::_WeightParams_default_instance_) {
        int v106 = 5;
      }
      else {
        int v106 = 3;
      }
    }
    else
    {
      int v106 = 2;
    }
  }
LABEL_288:
  if (v87 >= v62)
  {
    uint64_t v113 = v87 - v64;
    unint64_t v114 = v113 + 1;
    if ((unint64_t)(v113 + 1) >> 62) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
    if (((char *)v62 - (char *)v64) >> 1 > v114) {
      unint64_t v114 = ((char *)v62 - (char *)v64) >> 1;
    }
    if ((unint64_t)((char *)v62 - (char *)v64) >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v115 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v115 = v114;
    }
    if (v115) {
      unint64_t v115 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v115);
    }
    else {
      uint64_t v116 = 0;
    }
    uint64_t v117 = (int *)(v115 + 4 * v113);
    BOOL v62 = (int *)(v115 + 4 * v116);
    *uint64_t v117 = v106;
    uint64_t v112 = v117 + 1;
    while (v87 != v64)
    {
      int v118 = *--v87;
      *--uint64_t v117 = v118;
    }
    operator delete(v64);
    BOOL v64 = v117;
  }
  else
  {
    *std::string v87 = v106;
    uint64_t v112 = v87 + 1;
  }
  unint64_t v119 = (uint64_t *)a2[7];
  if (!v119) {
    unint64_t v119 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  uint64_t v120 = v119[5];
  if (*(char *)(v120 + 23) < 0) {
    uint64_t v121 = *(void *)(v120 + 8);
  }
  else {
    uint64_t v121 = *(unsigned __int8 *)(v120 + 23);
  }
  uint64_t v122 = v119[6];
  uint64_t v123 = *(unsigned __int8 *)(v122 + 23);
  if (*(char *)(v122 + 23) < 0) {
    uint64_t v124 = *(void *)(v122 + 8);
  }
  else {
    uint64_t v124 = *(unsigned __int8 *)(v122 + 23);
  }
  int v125 = *((_DWORD *)v119 + 4);
  uint64_t v126 = v119[7];
  uint64_t v127 = *(unsigned __int8 *)(v126 + 23);
  if (*(char *)(v126 + 23) < 0) {
    uint64_t v128 = *(void *)(v126 + 8);
  }
  else {
    uint64_t v128 = *(unsigned __int8 *)(v126 + 23);
  }
  if (v125 <= 0) {
    int v129 = 1;
  }
  else {
    int v129 = 2;
  }
  if (v121) {
    unsigned int v130 = v129;
  }
  else {
    unsigned int v130 = v125 > 0;
  }
  if (v124) {
    ++v130;
  }
  if (v128) {
    ++v130;
  }
  if (v130 > 1)
  {
    int v131 = 4;
    goto LABEL_356;
  }
  if (v130) {
    int v131 = 0;
  }
  else {
    int v131 = 5;
  }
  if (v125 <= 0 && v130 != 0)
  {
    if ((*(unsigned char *)(v120 + 23) & 0x80) != 0)
    {
      if (*(void *)(v120 + 8)) {
        goto LABEL_335;
      }
    }
    else if (*(unsigned char *)(v120 + 23))
    {
LABEL_335:
      int v131 = 1;
      goto LABEL_356;
    }
    if ((v123 & 0x80) != 0) {
      uint64_t v123 = *(void *)(v122 + 8);
    }
    uint64_t v133 = v119[8];
    if (v119 == &CoreML::Specification::_WeightParams_default_instance_
      || (v123 ? (BOOL v134 = v133 == 0) : (BOOL v134 = 1), v134))
    {
      if ((v127 & 0x80) != 0) {
        uint64_t v127 = *(void *)(v126 + 8);
      }
      if (v133) {
        BOOL v135 = v127 == 0;
      }
      else {
        BOOL v135 = 1;
      }
      if (v135 || v119 == &CoreML::Specification::_WeightParams_default_instance_) {
        int v131 = 5;
      }
      else {
        int v131 = 3;
      }
    }
    else
    {
      int v131 = 2;
    }
  }
LABEL_356:
  if (v112 >= v62)
  {
    uint64_t v138 = v112 - v64;
    unint64_t v139 = v138 + 1;
    if ((unint64_t)(v138 + 1) >> 62) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
    if (((char *)v62 - (char *)v64) >> 1 > v139) {
      unint64_t v139 = ((char *)v62 - (char *)v64) >> 1;
    }
    if ((unint64_t)((char *)v62 - (char *)v64) >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v140 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v140 = v139;
    }
    if (v140) {
      unint64_t v140 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v140);
    }
    else {
      uint64_t v141 = 0;
    }
    uint64_t v142 = (int *)(v140 + 4 * v138);
    BOOL v62 = (int *)(v140 + 4 * v141);
    *uint64_t v142 = v131;
    std::string v137 = v142 + 1;
    while (v112 != v64)
    {
      int v143 = *--v112;
      *--uint64_t v142 = v143;
    }
    operator delete(v64);
    BOOL v64 = v142;
  }
  else
  {
    *uint64_t v112 = v131;
    std::string v137 = v112 + 1;
  }
  unint64_t v144 = (uint64_t *)a2[8];
  if (!v144) {
    unint64_t v144 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  uint64_t v145 = v144[5];
  if (*(char *)(v145 + 23) < 0) {
    uint64_t v146 = *(void *)(v145 + 8);
  }
  else {
    uint64_t v146 = *(unsigned __int8 *)(v145 + 23);
  }
  uint64_t v147 = v144[6];
  uint64_t v148 = *(unsigned __int8 *)(v147 + 23);
  if (*(char *)(v147 + 23) < 0) {
    uint64_t v149 = *(void *)(v147 + 8);
  }
  else {
    uint64_t v149 = *(unsigned __int8 *)(v147 + 23);
  }
  int v150 = *((_DWORD *)v144 + 4);
  uint64_t v151 = v144[7];
  uint64_t v152 = *(unsigned __int8 *)(v151 + 23);
  if (*(char *)(v151 + 23) < 0) {
    uint64_t v153 = *(void *)(v151 + 8);
  }
  else {
    uint64_t v153 = *(unsigned __int8 *)(v151 + 23);
  }
  if (v150 <= 0) {
    int v154 = 1;
  }
  else {
    int v154 = 2;
  }
  if (v146) {
    unsigned int v155 = v154;
  }
  else {
    unsigned int v155 = v150 > 0;
  }
  if (v149) {
    ++v155;
  }
  if (v153) {
    ++v155;
  }
  if (v155 > 1)
  {
    int v156 = 4;
    goto LABEL_424;
  }
  if (v155) {
    int v156 = 0;
  }
  else {
    int v156 = 5;
  }
  if (v150 <= 0 && v155 != 0)
  {
    if ((*(unsigned char *)(v145 + 23) & 0x80) != 0)
    {
      if (*(void *)(v145 + 8)) {
        goto LABEL_403;
      }
    }
    else if (*(unsigned char *)(v145 + 23))
    {
LABEL_403:
      int v156 = 1;
      goto LABEL_424;
    }
    if ((v148 & 0x80) != 0) {
      uint64_t v148 = *(void *)(v147 + 8);
    }
    uint64_t v158 = v144[8];
    if (v144 == &CoreML::Specification::_WeightParams_default_instance_
      || (v148 ? (BOOL v159 = v158 == 0) : (BOOL v159 = 1), v159))
    {
      if ((v152 & 0x80) != 0) {
        uint64_t v152 = *(void *)(v151 + 8);
      }
      if (v158) {
        BOOL v160 = v152 == 0;
      }
      else {
        BOOL v160 = 1;
      }
      if (v160 || v144 == &CoreML::Specification::_WeightParams_default_instance_) {
        int v156 = 5;
      }
      else {
        int v156 = 3;
      }
    }
    else
    {
      int v156 = 2;
    }
  }
LABEL_424:
  if (v137 >= v62)
  {
    uint64_t v163 = v137 - v64;
    unint64_t v164 = v163 + 1;
    if ((unint64_t)(v163 + 1) >> 62) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
    if (((char *)v62 - (char *)v64) >> 1 > v164) {
      unint64_t v164 = ((char *)v62 - (char *)v64) >> 1;
    }
    if ((unint64_t)((char *)v62 - (char *)v64) >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v165 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v165 = v164;
    }
    if (v165) {
      unint64_t v165 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v165);
    }
    else {
      uint64_t v166 = 0;
    }
    int v167 = (int *)(v165 + 4 * v163);
    BOOL v62 = (int *)(v165 + 4 * v166);
    *int v167 = v156;
    int v162 = v167 + 1;
    if (v137 == v64) {
      goto LABEL_438;
    }
    do
    {
      int v168 = *--v137;
      *--int v167 = v168;
    }
    while (v137 != v64);
    if (v64) {
LABEL_438:
    }
      operator delete(v64);
    BOOL v64 = v167;
  }
  else
  {
    int *v137 = v156;
    int v162 = v137 + 1;
  }
  uint64_t v169 = (uint64_t *)a2[9];
  if (!v169) {
    uint64_t v169 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  uint64_t v170 = v169[5];
  if (*(char *)(v170 + 23) < 0) {
    uint64_t v171 = *(void *)(v170 + 8);
  }
  else {
    uint64_t v171 = *(unsigned __int8 *)(v170 + 23);
  }
  uint64_t v172 = v169[6];
  uint64_t v173 = *(unsigned __int8 *)(v172 + 23);
  if (*(char *)(v172 + 23) < 0) {
    uint64_t v174 = *(void *)(v172 + 8);
  }
  else {
    uint64_t v174 = *(unsigned __int8 *)(v172 + 23);
  }
  int v175 = *((_DWORD *)v169 + 4);
  uint64_t v176 = v169[7];
  uint64_t v177 = *(unsigned __int8 *)(v176 + 23);
  if (*(char *)(v176 + 23) < 0) {
    uint64_t v178 = *(void *)(v176 + 8);
  }
  else {
    uint64_t v178 = *(unsigned __int8 *)(v176 + 23);
  }
  if (v175 <= 0) {
    int v179 = 1;
  }
  else {
    int v179 = 2;
  }
  if (v171) {
    unsigned int v180 = v179;
  }
  else {
    unsigned int v180 = v175 > 0;
  }
  if (v174) {
    ++v180;
  }
  if (v178) {
    ++v180;
  }
  if (v180 > 1)
  {
    int v181 = 4;
    goto LABEL_493;
  }
  if (v180) {
    int v181 = 0;
  }
  else {
    int v181 = 5;
  }
  if (v175 <= 0 && v180 != 0)
  {
    if ((*(unsigned char *)(v170 + 23) & 0x80) != 0)
    {
      if (*(void *)(v170 + 8)) {
        goto LABEL_472;
      }
    }
    else if (*(unsigned char *)(v170 + 23))
    {
LABEL_472:
      int v181 = 1;
      goto LABEL_493;
    }
    if ((v173 & 0x80) != 0) {
      uint64_t v173 = *(void *)(v172 + 8);
    }
    uint64_t v183 = v169[8];
    if (v169 == &CoreML::Specification::_WeightParams_default_instance_
      || (v173 ? (BOOL v184 = v183 == 0) : (BOOL v184 = 1), v184))
    {
      if ((v177 & 0x80) != 0) {
        uint64_t v177 = *(void *)(v176 + 8);
      }
      if (v183) {
        BOOL v185 = v177 == 0;
      }
      else {
        BOOL v185 = 1;
      }
      if (v185 || v169 == &CoreML::Specification::_WeightParams_default_instance_) {
        int v181 = 5;
      }
      else {
        int v181 = 3;
      }
    }
    else
    {
      int v181 = 2;
    }
  }
LABEL_493:
  if (v162 >= v62)
  {
    uint64_t v188 = v162 - v64;
    unint64_t v189 = v188 + 1;
    if ((unint64_t)(v188 + 1) >> 62) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
    if (((char *)v62 - (char *)v64) >> 1 > v189) {
      unint64_t v189 = ((char *)v62 - (char *)v64) >> 1;
    }
    if ((unint64_t)((char *)v62 - (char *)v64) >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v190 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v190 = v189;
    }
    if (v190) {
      unint64_t v190 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v190);
    }
    else {
      uint64_t v191 = 0;
    }
    BOOL v192 = (int *)(v190 + 4 * v188);
    BOOL v62 = (int *)(v190 + 4 * v191);
    *BOOL v192 = v181;
    unsigned int v187 = v192 + 1;
    if (v162 == v64) {
      goto LABEL_507;
    }
    do
    {
      int v193 = *--v162;
      *--BOOL v192 = v193;
    }
    while (v162 != v64);
    if (v64) {
LABEL_507:
    }
      operator delete(v64);
    BOOL v64 = v192;
  }
  else
  {
    *int v162 = v181;
    unsigned int v187 = v162 + 1;
  }
  if (a3)
  {
    std::string v194 = (uint64_t *)a2[10];
    if (!v194) {
      std::string v194 = &CoreML::Specification::_WeightParams_default_instance_;
    }
    uint64_t v195 = v194[5];
    if (*(char *)(v195 + 23) < 0) {
      uint64_t v196 = *(void *)(v195 + 8);
    }
    else {
      uint64_t v196 = *(unsigned __int8 *)(v195 + 23);
    }
    uint64_t v197 = v194[6];
    uint64_t v198 = *(unsigned __int8 *)(v197 + 23);
    if (*(char *)(v197 + 23) < 0) {
      uint64_t v199 = *(void *)(v197 + 8);
    }
    else {
      uint64_t v199 = *(unsigned __int8 *)(v197 + 23);
    }
    int v200 = *((_DWORD *)v194 + 4);
    uint64_t v201 = v194[7];
    uint64_t v202 = *(unsigned __int8 *)(v201 + 23);
    if (*(char *)(v201 + 23) < 0) {
      uint64_t v203 = *(void *)(v201 + 8);
    }
    else {
      uint64_t v203 = *(unsigned __int8 *)(v201 + 23);
    }
    if (v200 <= 0) {
      int v204 = 1;
    }
    else {
      int v204 = 2;
    }
    if (v196) {
      unsigned int v205 = v204;
    }
    else {
      unsigned int v205 = v200 > 0;
    }
    if (v199) {
      ++v205;
    }
    if (v203) {
      ++v205;
    }
    if (v205 > 1)
    {
      int v206 = 4;
      goto LABEL_559;
    }
    if (v205) {
      int v206 = 0;
    }
    else {
      int v206 = 5;
    }
    if (v200 <= 0 && v205)
    {
      if ((*(unsigned char *)(v195 + 23) & 0x80) != 0)
      {
        if (*(void *)(v195 + 8)) {
          goto LABEL_540;
        }
      }
      else if (*(unsigned char *)(v195 + 23))
      {
LABEL_540:
        int v206 = 1;
        goto LABEL_559;
      }
      if ((v198 & 0x80) != 0) {
        uint64_t v198 = *(void *)(v197 + 8);
      }
      uint64_t v207 = v194[8];
      if (v194 != &CoreML::Specification::_WeightParams_default_instance_ && v198 && v207)
      {
        int v206 = 2;
      }
      else
      {
        if ((v202 & 0x80) != 0) {
          uint64_t v202 = *(void *)(v201 + 8);
        }
        if (v207) {
          BOOL v208 = v202 == 0;
        }
        else {
          BOOL v208 = 1;
        }
        if (v208 || v194 == &CoreML::Specification::_WeightParams_default_instance_) {
          int v206 = 5;
        }
        else {
          int v206 = 3;
        }
      }
    }
LABEL_559:
    if (v187 >= v62)
    {
      uint64_t v211 = v187 - v64;
      unint64_t v212 = v211 + 1;
      if ((unint64_t)(v211 + 1) >> 62) {
        std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
      }
      if (((char *)v62 - (char *)v64) >> 1 > v212) {
        unint64_t v212 = ((char *)v62 - (char *)v64) >> 1;
      }
      if ((unint64_t)((char *)v62 - (char *)v64) >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v213 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v213 = v212;
      }
      if (v213) {
        unint64_t v213 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v213);
      }
      else {
        uint64_t v214 = 0;
      }
      unsigned int v215 = (int *)(v213 + 4 * v211);
      BOOL v62 = (int *)(v213 + 4 * v214);
      *unsigned int v215 = v206;
      uint64_t v210 = v215 + 1;
      if (v187 == v64) {
        goto LABEL_573;
      }
      do
      {
        int v216 = *--v187;
        *--unsigned int v215 = v216;
      }
      while (v187 != v64);
      if (v64) {
LABEL_573:
      }
        operator delete(v64);
      BOOL v64 = v215;
    }
    else
    {
      *unsigned int v187 = v206;
      uint64_t v210 = v187 + 1;
    }
    BOOL v217 = (uint64_t *)a2[11];
    if (!v217) {
      BOOL v217 = &CoreML::Specification::_WeightParams_default_instance_;
    }
    uint64_t v218 = v217[5];
    if (*(char *)(v218 + 23) < 0) {
      uint64_t v219 = *(void *)(v218 + 8);
    }
    else {
      uint64_t v219 = *(unsigned __int8 *)(v218 + 23);
    }
    uint64_t v220 = v217[6];
    uint64_t v221 = *(unsigned __int8 *)(v220 + 23);
    if (*(char *)(v220 + 23) < 0) {
      uint64_t v222 = *(void *)(v220 + 8);
    }
    else {
      uint64_t v222 = *(unsigned __int8 *)(v220 + 23);
    }
    int v223 = *((_DWORD *)v217 + 4);
    uint64_t v224 = v217[7];
    uint64_t v225 = *(unsigned __int8 *)(v224 + 23);
    if (*(char *)(v224 + 23) < 0) {
      uint64_t v226 = *(void *)(v224 + 8);
    }
    else {
      uint64_t v226 = *(unsigned __int8 *)(v224 + 23);
    }
    if (v223 <= 0) {
      int v227 = 1;
    }
    else {
      int v227 = 2;
    }
    if (v219) {
      unsigned int v228 = v227;
    }
    else {
      unsigned int v228 = v223 > 0;
    }
    if (v222) {
      ++v228;
    }
    if (v226) {
      ++v228;
    }
    if (v228 > 1)
    {
      int v229 = 4;
      goto LABEL_628;
    }
    if (v228) {
      int v229 = 0;
    }
    else {
      int v229 = 5;
    }
    if (v223 <= 0 && v228 != 0)
    {
      if ((*(unsigned char *)(v218 + 23) & 0x80) != 0)
      {
        if (*(void *)(v218 + 8)) {
          goto LABEL_607;
        }
      }
      else if (*(unsigned char *)(v218 + 23))
      {
LABEL_607:
        int v229 = 1;
        goto LABEL_628;
      }
      if ((v221 & 0x80) != 0) {
        uint64_t v221 = *(void *)(v220 + 8);
      }
      uint64_t v231 = v217[8];
      if (v217 == &CoreML::Specification::_WeightParams_default_instance_
        || (v221 ? (BOOL v232 = v231 == 0) : (BOOL v232 = 1), v232))
      {
        if ((v225 & 0x80) != 0) {
          uint64_t v225 = *(void *)(v224 + 8);
        }
        if (v231) {
          BOOL v233 = v225 == 0;
        }
        else {
          BOOL v233 = 1;
        }
        if (v233 || v217 == &CoreML::Specification::_WeightParams_default_instance_) {
          int v229 = 5;
        }
        else {
          int v229 = 3;
        }
      }
      else
      {
        int v229 = 2;
      }
    }
LABEL_628:
    if (v210 >= v62)
    {
      uint64_t v236 = v210 - v64;
      unint64_t v237 = v236 + 1;
      if ((unint64_t)(v236 + 1) >> 62) {
        std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
      }
      if (((char *)v62 - (char *)v64) >> 1 > v237) {
        unint64_t v237 = ((char *)v62 - (char *)v64) >> 1;
      }
      if ((unint64_t)((char *)v62 - (char *)v64) >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v238 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v238 = v237;
      }
      if (v238) {
        unint64_t v238 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v238);
      }
      else {
        uint64_t v239 = 0;
      }
      uint64_t v240 = (int *)(v238 + 4 * v236);
      BOOL v62 = (int *)(v238 + 4 * v239);
      *uint64_t v240 = v229;
      uint64_t v235 = v240 + 1;
      if (v210 == v64) {
        goto LABEL_642;
      }
      do
      {
        int v241 = *--v210;
        *--uint64_t v240 = v241;
      }
      while (v210 != v64);
      if (v64) {
LABEL_642:
      }
        operator delete(v64);
      BOOL v64 = v240;
    }
    else
    {
      *uint64_t v210 = v229;
      uint64_t v235 = v210 + 1;
    }
    unsigned int v242 = (uint64_t *)a2[12];
    if (!v242) {
      unsigned int v242 = &CoreML::Specification::_WeightParams_default_instance_;
    }
    uint64_t v243 = v242[5];
    if (*(char *)(v243 + 23) < 0) {
      uint64_t v244 = *(void *)(v243 + 8);
    }
    else {
      uint64_t v244 = *(unsigned __int8 *)(v243 + 23);
    }
    uint64_t v245 = v242[6];
    uint64_t v246 = *(unsigned __int8 *)(v245 + 23);
    if (*(char *)(v245 + 23) < 0) {
      uint64_t v247 = *(void *)(v245 + 8);
    }
    else {
      uint64_t v247 = *(unsigned __int8 *)(v245 + 23);
    }
    int v248 = *((_DWORD *)v242 + 4);
    uint64_t v249 = v242[7];
    uint64_t v250 = *(unsigned __int8 *)(v249 + 23);
    if (*(char *)(v249 + 23) < 0) {
      uint64_t v251 = *(void *)(v249 + 8);
    }
    else {
      uint64_t v251 = *(unsigned __int8 *)(v249 + 23);
    }
    if (v248 <= 0) {
      int v252 = 1;
    }
    else {
      int v252 = 2;
    }
    if (v244) {
      unsigned int v253 = v252;
    }
    else {
      unsigned int v253 = v248 > 0;
    }
    if (v247) {
      ++v253;
    }
    if (v251) {
      ++v253;
    }
    if (v253 > 1)
    {
      int v254 = 4;
      goto LABEL_697;
    }
    if (v253) {
      int v254 = 0;
    }
    else {
      int v254 = 5;
    }
    if (v248 <= 0 && v253 != 0)
    {
      if ((*(unsigned char *)(v243 + 23) & 0x80) != 0)
      {
        if (*(void *)(v243 + 8)) {
          goto LABEL_676;
        }
      }
      else if (*(unsigned char *)(v243 + 23))
      {
LABEL_676:
        int v254 = 1;
        goto LABEL_697;
      }
      if ((v246 & 0x80) != 0) {
        uint64_t v246 = *(void *)(v245 + 8);
      }
      uint64_t v256 = v242[8];
      if (v242 == &CoreML::Specification::_WeightParams_default_instance_
        || (v246 ? (BOOL v257 = v256 == 0) : (BOOL v257 = 1), v257))
      {
        if ((v250 & 0x80) != 0) {
          uint64_t v250 = *(void *)(v249 + 8);
        }
        if (v256) {
          BOOL v258 = v250 == 0;
        }
        else {
          BOOL v258 = 1;
        }
        if (v258 || v242 == &CoreML::Specification::_WeightParams_default_instance_) {
          int v254 = 5;
        }
        else {
          int v254 = 3;
        }
      }
      else
      {
        int v254 = 2;
      }
    }
LABEL_697:
    if (v235 >= v62)
    {
      uint64_t v261 = v235 - v64;
      unint64_t v262 = v261 + 1;
      if ((unint64_t)(v261 + 1) >> 62) {
        std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
      }
      if (((char *)v62 - (char *)v64) >> 1 > v262) {
        unint64_t v262 = ((char *)v62 - (char *)v64) >> 1;
      }
      if ((unint64_t)((char *)v62 - (char *)v64) >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v263 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v263 = v262;
      }
      if (v263) {
        unint64_t v263 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v263);
      }
      else {
        uint64_t v264 = 0;
      }
      v265 = (int *)(v263 + 4 * v261);
      BOOL v62 = (int *)(v263 + 4 * v264);
      int *v265 = v254;
      std::string v260 = v265 + 1;
      if (v235 == v64) {
        goto LABEL_711;
      }
      do
      {
        int v266 = *--v235;
        *--v265 = v266;
      }
      while (v235 != v64);
      if (v64) {
LABEL_711:
      }
        operator delete(v64);
      BOOL v64 = v265;
    }
    else
    {
      *uint64_t v235 = v254;
      std::string v260 = v235 + 1;
    }
    v267 = (uint64_t *)a2[13];
    if (!v267) {
      v267 = &CoreML::Specification::_WeightParams_default_instance_;
    }
    uint64_t v268 = v267[5];
    if (*(char *)(v268 + 23) < 0) {
      uint64_t v269 = *(void *)(v268 + 8);
    }
    else {
      uint64_t v269 = *(unsigned __int8 *)(v268 + 23);
    }
    uint64_t v270 = v267[6];
    uint64_t v271 = *(unsigned __int8 *)(v270 + 23);
    if (*(char *)(v270 + 23) < 0) {
      uint64_t v272 = *(void *)(v270 + 8);
    }
    else {
      uint64_t v272 = *(unsigned __int8 *)(v270 + 23);
    }
    int v273 = *((_DWORD *)v267 + 4);
    uint64_t v274 = v267[7];
    uint64_t v275 = *(unsigned __int8 *)(v274 + 23);
    if (*(char *)(v274 + 23) < 0) {
      uint64_t v276 = *(void *)(v274 + 8);
    }
    else {
      uint64_t v276 = *(unsigned __int8 *)(v274 + 23);
    }
    if (v273 <= 0) {
      int v277 = 1;
    }
    else {
      int v277 = 2;
    }
    if (v269) {
      unsigned int v278 = v277;
    }
    else {
      unsigned int v278 = v273 > 0;
    }
    if (v272) {
      ++v278;
    }
    if (v276) {
      ++v278;
    }
    if (v278 > 1)
    {
      int v279 = 4;
      goto LABEL_766;
    }
    if (v278) {
      int v279 = 0;
    }
    else {
      int v279 = 5;
    }
    if (v273 > 0 || v278 == 0)
    {
LABEL_766:
      if (v260 >= v62)
      {
        uint64_t v285 = v260 - v64;
        unint64_t v286 = v285 + 1;
        if ((unint64_t)(v285 + 1) >> 62) {
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
        }
        if (((char *)v62 - (char *)v64) >> 1 > v286) {
          unint64_t v286 = ((char *)v62 - (char *)v64) >> 1;
        }
        if ((unint64_t)((char *)v62 - (char *)v64) >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v287 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v287 = v286;
        }
        if (v287) {
          unint64_t v287 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v287);
        }
        else {
          uint64_t v288 = 0;
        }
        v289 = (int *)(v287 + 4 * v285);
        BOOL v62 = (int *)(v287 + 4 * v288);
        int *v289 = v279;
        unsigned int v187 = v289 + 1;
        if (v260 == v64) {
          goto LABEL_780;
        }
        do
        {
          int v290 = *--v260;
          *--v289 = v290;
        }
        while (v260 != v64);
        if (v64) {
LABEL_780:
        }
          operator delete(v64);
        BOOL v64 = v289;
      }
      else
      {
        *std::string v260 = v279;
        unsigned int v187 = v260 + 1;
      }
      goto LABEL_782;
    }
    if ((*(unsigned char *)(v268 + 23) & 0x80) != 0)
    {
      if (*(void *)(v268 + 8)) {
        goto LABEL_745;
      }
    }
    else if (*(unsigned char *)(v268 + 23))
    {
LABEL_745:
      int v279 = 1;
      goto LABEL_766;
    }
    if ((v271 & 0x80) != 0) {
      uint64_t v271 = *(void *)(v270 + 8);
    }
    uint64_t v281 = v267[8];
    if (v267 == &CoreML::Specification::_WeightParams_default_instance_
      || (v271 ? (BOOL v282 = v281 == 0) : (BOOL v282 = 1), v282))
    {
      if ((v275 & 0x80) != 0) {
        uint64_t v275 = *(void *)(v274 + 8);
      }
      if (v281) {
        BOOL v283 = v275 == 0;
      }
      else {
        BOOL v283 = 1;
      }
      if (v283 || v267 == &CoreML::Specification::_WeightParams_default_instance_) {
        int v279 = 5;
      }
      else {
        int v279 = 3;
      }
    }
    else
    {
      int v279 = 2;
    }
    goto LABEL_766;
  }
LABEL_782:
  if (!v19) {
    goto LABEL_985;
  }
  v291 = (uint64_t *)a2[14];
  if (!v291) {
    v291 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  uint64_t v292 = v291[5];
  if (*(char *)(v292 + 23) < 0) {
    uint64_t v293 = *(void *)(v292 + 8);
  }
  else {
    uint64_t v293 = *(unsigned __int8 *)(v292 + 23);
  }
  uint64_t v294 = v291[6];
  uint64_t v295 = *(unsigned __int8 *)(v294 + 23);
  if (*(char *)(v294 + 23) < 0) {
    uint64_t v296 = *(void *)(v294 + 8);
  }
  else {
    uint64_t v296 = *(unsigned __int8 *)(v294 + 23);
  }
  int v297 = *((_DWORD *)v291 + 4);
  uint64_t v298 = v291[7];
  uint64_t v299 = *(unsigned __int8 *)(v298 + 23);
  if (*(char *)(v298 + 23) < 0) {
    uint64_t v300 = *(void *)(v298 + 8);
  }
  else {
    uint64_t v300 = *(unsigned __int8 *)(v298 + 23);
  }
  if (v297 <= 0) {
    int v301 = 1;
  }
  else {
    int v301 = 2;
  }
  if (v293) {
    unsigned int v302 = v301;
  }
  else {
    unsigned int v302 = v297 > 0;
  }
  if (v296) {
    ++v302;
  }
  if (v300) {
    ++v302;
  }
  if (v302 > 1)
  {
    int v303 = 4;
    goto LABEL_832;
  }
  if (v302) {
    int v303 = 0;
  }
  else {
    int v303 = 5;
  }
  if (v297 <= 0 && v302)
  {
    if ((*(unsigned char *)(v292 + 23) & 0x80) != 0)
    {
      if (*(void *)(v292 + 8)) {
        goto LABEL_813;
      }
    }
    else if (*(unsigned char *)(v292 + 23))
    {
LABEL_813:
      int v303 = 1;
      goto LABEL_832;
    }
    if ((v295 & 0x80) != 0) {
      uint64_t v295 = *(void *)(v294 + 8);
    }
    uint64_t v304 = v291[8];
    if (v291 != &CoreML::Specification::_WeightParams_default_instance_ && v295 && v304)
    {
      int v303 = 2;
    }
    else
    {
      if ((v299 & 0x80) != 0) {
        uint64_t v299 = *(void *)(v298 + 8);
      }
      if (v304) {
        BOOL v305 = v299 == 0;
      }
      else {
        BOOL v305 = 1;
      }
      if (v305 || v291 == &CoreML::Specification::_WeightParams_default_instance_) {
        int v303 = 5;
      }
      else {
        int v303 = 3;
      }
    }
  }
LABEL_832:
  if (v187 >= v62)
  {
    uint64_t v308 = v187 - v64;
    unint64_t v309 = v308 + 1;
    if ((unint64_t)(v308 + 1) >> 62) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
    if (((char *)v62 - (char *)v64) >> 1 > v309) {
      unint64_t v309 = ((char *)v62 - (char *)v64) >> 1;
    }
    if ((unint64_t)((char *)v62 - (char *)v64) >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v310 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v310 = v309;
    }
    if (v310) {
      unint64_t v310 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v310);
    }
    else {
      uint64_t v311 = 0;
    }
    v312 = (int *)(v310 + 4 * v308);
    BOOL v62 = (int *)(v310 + 4 * v311);
    int *v312 = v303;
    v307 = v312 + 1;
    if (v187 == v64) {
      goto LABEL_846;
    }
    do
    {
      int v313 = *--v187;
      *--v312 = v313;
    }
    while (v187 != v64);
    if (v64) {
LABEL_846:
    }
      operator delete(v64);
    BOOL v64 = v312;
  }
  else
  {
    *unsigned int v187 = v303;
    v307 = v187 + 1;
  }
  v314 = (uint64_t *)a2[15];
  if (!v314) {
    v314 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  uint64_t v315 = v314[5];
  if (*(char *)(v315 + 23) < 0) {
    uint64_t v316 = *(void *)(v315 + 8);
  }
  else {
    uint64_t v316 = *(unsigned __int8 *)(v315 + 23);
  }
  uint64_t v317 = v314[6];
  uint64_t v318 = *(unsigned __int8 *)(v317 + 23);
  if (*(char *)(v317 + 23) < 0) {
    uint64_t v319 = *(void *)(v317 + 8);
  }
  else {
    uint64_t v319 = *(unsigned __int8 *)(v317 + 23);
  }
  int v320 = *((_DWORD *)v314 + 4);
  uint64_t v321 = v314[7];
  uint64_t v322 = *(unsigned __int8 *)(v321 + 23);
  if (*(char *)(v321 + 23) < 0) {
    uint64_t v323 = *(void *)(v321 + 8);
  }
  else {
    uint64_t v323 = *(unsigned __int8 *)(v321 + 23);
  }
  if (v320 <= 0) {
    int v324 = 1;
  }
  else {
    int v324 = 2;
  }
  if (v316) {
    unsigned int v325 = v324;
  }
  else {
    unsigned int v325 = v320 > 0;
  }
  if (v319) {
    ++v325;
  }
  if (v323) {
    ++v325;
  }
  if (v325 > 1)
  {
    int v326 = 4;
    goto LABEL_901;
  }
  if (v325) {
    int v326 = 0;
  }
  else {
    int v326 = 5;
  }
  if (v320 <= 0 && v325 != 0)
  {
    if ((*(unsigned char *)(v315 + 23) & 0x80) != 0)
    {
      if (*(void *)(v315 + 8)) {
        goto LABEL_880;
      }
    }
    else if (*(unsigned char *)(v315 + 23))
    {
LABEL_880:
      int v326 = 1;
      goto LABEL_901;
    }
    if ((v318 & 0x80) != 0) {
      uint64_t v318 = *(void *)(v317 + 8);
    }
    uint64_t v328 = v314[8];
    if (v314 == &CoreML::Specification::_WeightParams_default_instance_
      || (v318 ? (BOOL v329 = v328 == 0) : (BOOL v329 = 1), v329))
    {
      if ((v322 & 0x80) != 0) {
        uint64_t v322 = *(void *)(v321 + 8);
      }
      if (v328) {
        BOOL v330 = v322 == 0;
      }
      else {
        BOOL v330 = 1;
      }
      if (v330 || v314 == &CoreML::Specification::_WeightParams_default_instance_) {
        int v326 = 5;
      }
      else {
        int v326 = 3;
      }
    }
    else
    {
      int v326 = 2;
    }
  }
LABEL_901:
  if (v307 >= v62)
  {
    uint64_t v333 = v307 - v64;
    unint64_t v334 = v333 + 1;
    if ((unint64_t)(v333 + 1) >> 62) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
    if (((char *)v62 - (char *)v64) >> 1 > v334) {
      unint64_t v334 = ((char *)v62 - (char *)v64) >> 1;
    }
    if ((unint64_t)((char *)v62 - (char *)v64) >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v335 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v335 = v334;
    }
    if (v335) {
      unint64_t v335 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v335);
    }
    else {
      uint64_t v336 = 0;
    }
    v337 = (int *)(v335 + 4 * v333);
    BOOL v62 = (int *)(v335 + 4 * v336);
    int *v337 = v326;
    v332 = v337 + 1;
    if (v307 == v64) {
      goto LABEL_915;
    }
    do
    {
      int v338 = *--v307;
      *--v337 = v338;
    }
    while (v307 != v64);
    if (v64) {
LABEL_915:
    }
      operator delete(v64);
    BOOL v64 = v337;
  }
  else
  {
    int *v307 = v326;
    v332 = v307 + 1;
  }
  v339 = (uint64_t *)a2[16];
  if (!v339) {
    v339 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  uint64_t v340 = v339[5];
  if (*(char *)(v340 + 23) < 0) {
    uint64_t v341 = *(void *)(v340 + 8);
  }
  else {
    uint64_t v341 = *(unsigned __int8 *)(v340 + 23);
  }
  uint64_t v342 = v339[6];
  uint64_t v343 = *(unsigned __int8 *)(v342 + 23);
  if (*(char *)(v342 + 23) < 0) {
    uint64_t v344 = *(void *)(v342 + 8);
  }
  else {
    uint64_t v344 = *(unsigned __int8 *)(v342 + 23);
  }
  int v345 = *((_DWORD *)v339 + 4);
  uint64_t v346 = v339[7];
  uint64_t v347 = *(unsigned __int8 *)(v346 + 23);
  if (*(char *)(v346 + 23) < 0) {
    uint64_t v348 = *(void *)(v346 + 8);
  }
  else {
    uint64_t v348 = *(unsigned __int8 *)(v346 + 23);
  }
  if (v345 <= 0) {
    int v349 = 1;
  }
  else {
    int v349 = 2;
  }
  if (v341) {
    unsigned int v350 = v349;
  }
  else {
    unsigned int v350 = v345 > 0;
  }
  if (v344) {
    ++v350;
  }
  if (v348) {
    ++v350;
  }
  if (v350 > 1)
  {
    int v351 = 4;
    goto LABEL_970;
  }
  if (v350) {
    int v351 = 0;
  }
  else {
    int v351 = 5;
  }
  if (v345 <= 0 && v350 != 0)
  {
    if ((*(unsigned char *)(v340 + 23) & 0x80) != 0)
    {
      if (*(void *)(v340 + 8)) {
        goto LABEL_949;
      }
    }
    else if (*(unsigned char *)(v340 + 23))
    {
LABEL_949:
      int v351 = 1;
      goto LABEL_970;
    }
    if ((v343 & 0x80) != 0) {
      uint64_t v343 = *(void *)(v342 + 8);
    }
    uint64_t v353 = v339[8];
    if (v339 == &CoreML::Specification::_WeightParams_default_instance_
      || (v343 ? (BOOL v354 = v353 == 0) : (BOOL v354 = 1), v354))
    {
      if ((v347 & 0x80) != 0) {
        uint64_t v347 = *(void *)(v346 + 8);
      }
      if (v353) {
        BOOL v355 = v347 == 0;
      }
      else {
        BOOL v355 = 1;
      }
      if (v355 || v339 == &CoreML::Specification::_WeightParams_default_instance_) {
        int v351 = 5;
      }
      else {
        int v351 = 3;
      }
    }
    else
    {
      int v351 = 2;
    }
  }
LABEL_970:
  if (v332 >= v62)
  {
    uint64_t v357 = v332 - v64;
    unint64_t v358 = v357 + 1;
    if ((unint64_t)(v357 + 1) >> 62) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
    if (((char *)v62 - (char *)v64) >> 1 > v358) {
      unint64_t v358 = ((char *)v62 - (char *)v64) >> 1;
    }
    if ((unint64_t)((char *)v62 - (char *)v64) >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v359 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v359 = v358;
    }
    if (v359) {
      unint64_t v359 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v359);
    }
    v360 = (int *)(v359 + 4 * v357);
    int *v360 = v351;
    unsigned int v187 = v360 + 1;
    if (v332 == v64) {
      goto LABEL_983;
    }
    do
    {
      int v361 = *--v332;
      *--v360 = v361;
    }
    while (v332 != v64);
    if (v64) {
LABEL_983:
    }
      operator delete(v64);
    BOOL v64 = v360;
  }
  else
  {
    int *v332 = v351;
    unsigned int v187 = v332 + 1;
  }
LABEL_985:
  if (v64 == v187)
  {
LABEL_995:
    CoreML::Result::Result(a1);
  }
  else
  {
    int v362 = 0;
    int v363 = 0;
    v364 = v64;
    while (1)
    {
      int v365 = *v364 ? v362 : v362 + 1;
      if (*v364 == 1) {
        ++v363;
      }
      else {
        int v362 = v365;
      }
      if (v362 * v363 >= 1) {
        break;
      }
      if (++v364 == v187) {
        goto LABEL_995;
      }
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "LSTM weight parameters have inconsistent field value types. Types should match and should be either half or full precision");
    *(void *)a1 = 13;
    std::operator+<char>();
    if (v368 < 0) {
      operator delete(__p);
    }
  }
  if (v64) {
    operator delete(v64);
  }
}

void sub_19EAF0B48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (v15) {
    operator delete(v15);
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateBiDirectionalLSTMLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2, uint64_t a3)
{
  uint64_t v118 = *MEMORY[0x1E4F143B8];
  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 5);
  if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
    return;
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 5, 5);
  if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
    return;
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  if (*(unsigned char *)a2)
  {
    std::string::basic_string[abi:ne180100]<0>(v114, "BiDirectionalLSTM");
    uint64_t v7 = (char *)a2 + 32;
    CoreML::validateInputOutputRankEquality((CoreML::Result *)this, (void *)a3, (uint64_t)v114, (uint64_t)v7);
    if (v115 < 0) {
      operator delete(v114[0]);
    }
    if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
      return;
    }
    if (*((char *)this + 31) < 0) {
      operator delete(this[1]);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "BiDirectionalLSTM");
    CoreML::validateRankCount((uint64_t)this, (void *)a3, (uint64_t)__p, 5, 5, (uint64_t)v7);
    if (v103 < 0) {
      operator delete(__p[0]);
    }
    if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
      return;
    }
    if (*((char *)this + 31) < 0) {
      operator delete(this[1]);
    }
  }
  if (*(_DWORD *)(a3 + 140) == 430)
  {
    uint64_t v8 = *(uint64_t **)(a3 + 128);
  }
  else
  {
    inited = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(inited);
    uint64_t v8 = &CoreML::Specification::_BiDirectionalLSTMLayerParams_default_instance_;
  }
  uint64_t v9 = v8[4];
  if (v9) {
    uint64_t v10 = (const CoreML::Specification::ActivationParams **)(v9 + 8);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *((int *)v8 + 6);
  if (!v11)
  {
LABEL_31:
    if (*(_DWORD *)(a3 + 140) == 430)
    {
      int v13 = *(uint64_t **)(a3 + 128);
    }
    else
    {
      inited = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(inited);
      int v13 = &CoreML::Specification::_BiDirectionalLSTMLayerParams_default_instance_;
    }
    uint64_t v14 = v13[7];
    if (v14) {
      uint64_t v15 = (const CoreML::Specification::ActivationParams **)(v14 + 8);
    }
    else {
      uint64_t v15 = 0;
    }
    uint64_t v16 = *((int *)v13 + 12);
    if (v16)
    {
      uint64_t v17 = 8 * v16;
      do
      {
        inited = CoreML::validateRecurrentActivationParams((CoreML *)this, *v15);
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
          return;
        }
        if (*((char *)this + 31) < 0) {
          operator delete(this[1]);
        }
        ++v15;
        v17 -= 8;
      }
      while (v17);
    }
    if (*(_DWORD *)(a3 + 140) == 420)
    {
      unsigned int v18 = *(uint64_t **)(a3 + 128);
      if (v18[6]) {
        char v19 = (uint64_t *)v18[6];
      }
      else {
        char v19 = &CoreML::Specification::_LSTMWeightParams_default_instance_;
      }
    }
    else
    {
      int v20 = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(inited);
      if (qword_1EB4E1B98) {
        char v19 = (uint64_t *)qword_1EB4E1B98;
      }
      else {
        char v19 = &CoreML::Specification::_LSTMWeightParams_default_instance_;
      }
      if (*(_DWORD *)(a3 + 140) == 420)
      {
        unsigned int v18 = *(uint64_t **)(a3 + 128);
      }
      else
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v20);
        unsigned int v18 = &CoreML::Specification::_UniDirectionalLSTMLayerParams_default_instance_;
      }
    }
    uint64_t v21 = (const CoreML::Specification::LSTMParams *)v18[5];
    if (v21) {
      uint64_t v22 = v21;
    }
    else {
      uint64_t v22 = (const CoreML::Specification::LSTMParams *)&CoreML::Specification::_LSTMParams_default_instance_;
    }
    CoreML::Specification::LSTMParams::LSTMParams((CoreML::Specification::LSTMParams *)&v110, v22);
    CoreML::validateLSTMWeightParams((CoreML::Result *)this, v19, v112, v113);
    BOOL v110 = &unk_1EF0CE698;
    BOOL v23 = google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(&v111);
    if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
      return;
    }
    if (*((char *)this + 31) < 0) {
      operator delete(this[1]);
    }
    if (*(_DWORD *)(a3 + 140) == 430)
    {
      BOOL v24 = *(const CoreML::Specification::BiDirectionalLSTMLayerParams **)(a3 + 128);
    }
    else
    {
      CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v23);
      BOOL v24 = (const CoreML::Specification::BiDirectionalLSTMLayerParams *)&CoreML::Specification::_BiDirectionalLSTMLayerParams_default_instance_;
    }
    CoreML::Specification::BiDirectionalLSTMLayerParams::BiDirectionalLSTMLayerParams((CoreML::Specification::BiDirectionalLSTMLayerParams *)__p, v24);
    if (v107) {
      uint64_t v25 = v107;
    }
    else {
      uint64_t v25 = (const CoreML::Specification::LSTMParams *)&CoreML::Specification::_LSTMParams_default_instance_;
    }
    CoreML::Specification::LSTMParams::LSTMParams((CoreML::Specification::LSTMParams *)&v100, v25);
    uint64_t v98 = 0;
    long long v99 = 0uLL;
    if (v104 == 3)
    {
      if (v105 == 3)
      {
        uint64_t v27 = v108;
        unint64_t v26 = v109;
        uint64_t v29 = *(void **)(v106 + 8);
        uint64_t v28 = *(void **)(v106 + 16);
        if (v29[2]) {
          uint64_t v30 = (uint64_t *)v29[2];
        }
        else {
          uint64_t v30 = &CoreML::Specification::_WeightParams_default_instance_;
        }
        std::string::basic_string[abi:ne180100]<0>(&v97, "Bidirectional LSTM");
        uint64_t v31 = *(void *)(a3 + 112);
        std::string::basic_string[abi:ne180100]<0>(v116, "forward input gate weight matrix");
        unint64_t v32 = v27 * v26;
        CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v30, v32, v26, (const void **)&v97.__r_.__value_.__l.__data_, v31, (uint64_t)v116);
        if (v117 < 0) {
          operator delete(*(void **)v116);
        }
        if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v97.__r_.__value_.__l.__data_);
        }
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
          goto LABEL_380;
        }
        if (*((char *)this + 31) < 0) {
          operator delete(this[1]);
        }
        if (v29[3]) {
          int v33 = (uint64_t *)v29[3];
        }
        else {
          int v33 = &CoreML::Specification::_WeightParams_default_instance_;
        }
        std::string::basic_string[abi:ne180100]<0>(&v97, "Bidirectional LSTM");
        uint64_t v34 = *(void *)(a3 + 112);
        std::string::basic_string[abi:ne180100]<0>(v116, "forward forget gate weight matrix");
        CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v33, v32, v26, (const void **)&v97.__r_.__value_.__l.__data_, v34, (uint64_t)v116);
        if (v117 < 0) {
          operator delete(*(void **)v116);
        }
        if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v97.__r_.__value_.__l.__data_);
        }
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
          goto LABEL_380;
        }
        if (*((char *)this + 31) < 0) {
          operator delete(this[1]);
        }
        if (v29[4]) {
          uint64_t v35 = (uint64_t *)v29[4];
        }
        else {
          uint64_t v35 = &CoreML::Specification::_WeightParams_default_instance_;
        }
        std::string::basic_string[abi:ne180100]<0>(&v97, "Bidirectional LSTM");
        uint64_t v36 = *(void *)(a3 + 112);
        std::string::basic_string[abi:ne180100]<0>(v116, "forward block input gate weight matrix");
        CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v35, v32, v26, (const void **)&v97.__r_.__value_.__l.__data_, v36, (uint64_t)v116);
        if (v117 < 0) {
          operator delete(*(void **)v116);
        }
        if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v97.__r_.__value_.__l.__data_);
        }
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
          goto LABEL_380;
        }
        if (*((char *)this + 31) < 0) {
          operator delete(this[1]);
        }
        if (v29[5]) {
          int v37 = (uint64_t *)v29[5];
        }
        else {
          int v37 = &CoreML::Specification::_WeightParams_default_instance_;
        }
        std::string::basic_string[abi:ne180100]<0>(&v97, "Bidirectional LSTM");
        uint64_t v38 = *(void *)(a3 + 112);
        std::string::basic_string[abi:ne180100]<0>(v116, "forward output gate weight matrix");
        CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v37, v32, v26, (const void **)&v97.__r_.__value_.__l.__data_, v38, (uint64_t)v116);
        if (v117 < 0) {
          operator delete(*(void **)v116);
        }
        if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v97.__r_.__value_.__l.__data_);
        }
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
          goto LABEL_380;
        }
        uint64_t v96 = v28;
        if (*((char *)this + 31) < 0) {
          operator delete(this[1]);
        }
        if (v29[6]) {
          int v39 = (uint64_t *)v29[6];
        }
        else {
          int v39 = &CoreML::Specification::_WeightParams_default_instance_;
        }
        std::string::basic_string[abi:ne180100]<0>(&v97, "Bidirectional LSTM");
        uint64_t v40 = *(void *)(a3 + 112);
        std::string::basic_string[abi:ne180100]<0>(v116, "forward input gate recursion matrix");
        CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v39, v26 * v26, v26, (const void **)&v97.__r_.__value_.__l.__data_, v40, (uint64_t)v116);
        if (v117 < 0) {
          operator delete(*(void **)v116);
        }
        if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v97.__r_.__value_.__l.__data_);
        }
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
          goto LABEL_380;
        }
        if (*((char *)this + 31) < 0) {
          operator delete(this[1]);
        }
        if (v29[7]) {
          BOOL v41 = (uint64_t *)v29[7];
        }
        else {
          BOOL v41 = &CoreML::Specification::_WeightParams_default_instance_;
        }
        std::string::basic_string[abi:ne180100]<0>(&v97, "Bidirectional LSTM");
        uint64_t v42 = *(void *)(a3 + 112);
        std::string::basic_string[abi:ne180100]<0>(v116, "forward forget gate recursion matrix");
        CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v41, v26 * v26, v26, (const void **)&v97.__r_.__value_.__l.__data_, v42, (uint64_t)v116);
        if (v117 < 0) {
          operator delete(*(void **)v116);
        }
        if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v97.__r_.__value_.__l.__data_);
        }
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
          goto LABEL_380;
        }
        if (*((char *)this + 31) < 0) {
          operator delete(this[1]);
        }
        if (v29[8]) {
          uint64_t v43 = (uint64_t *)v29[8];
        }
        else {
          uint64_t v43 = &CoreML::Specification::_WeightParams_default_instance_;
        }
        std::string::basic_string[abi:ne180100]<0>(&v97, "Bidirectional LSTM");
        uint64_t v44 = *(void *)(a3 + 112);
        std::string::basic_string[abi:ne180100]<0>(v116, "forward block input gate recursion matrix");
        CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v43, v26 * v26, v26, (const void **)&v97.__r_.__value_.__l.__data_, v44, (uint64_t)v116);
        if (v117 < 0) {
          operator delete(*(void **)v116);
        }
        if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v97.__r_.__value_.__l.__data_);
        }
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
          goto LABEL_380;
        }
        if (*((char *)this + 31) < 0) {
          operator delete(this[1]);
        }
        if (v29[9]) {
          uint64_t v45 = (uint64_t *)v29[9];
        }
        else {
          uint64_t v45 = &CoreML::Specification::_WeightParams_default_instance_;
        }
        std::string::basic_string[abi:ne180100]<0>(&v97, "Bidirectional LSTM");
        uint64_t v46 = *(void *)(a3 + 112);
        std::string::basic_string[abi:ne180100]<0>(v116, "forward output gate recursion matrix");
        CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v45, v26 * v26, v26, (const void **)&v97.__r_.__value_.__l.__data_, v46, (uint64_t)v116);
        if (v117 < 0) {
          operator delete(*(void **)v116);
        }
        if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v97.__r_.__value_.__l.__data_);
        }
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
          goto LABEL_380;
        }
        if (*((char *)this + 31) < 0) {
          operator delete(this[1]);
        }
        if (v96[2]) {
          uint64_t v47 = (uint64_t *)v96[2];
        }
        else {
          uint64_t v47 = &CoreML::Specification::_WeightParams_default_instance_;
        }
        std::string::basic_string[abi:ne180100]<0>(&v97, "Bidirectional LSTM");
        uint64_t v48 = *(void *)(a3 + 112);
        std::string::basic_string[abi:ne180100]<0>(v116, "backward input gate weight matrix");
        CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v47, v32, v26, (const void **)&v97.__r_.__value_.__l.__data_, v48, (uint64_t)v116);
        if (v117 < 0) {
          operator delete(*(void **)v116);
        }
        if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v97.__r_.__value_.__l.__data_);
        }
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
          goto LABEL_380;
        }
        if (*((char *)this + 31) < 0) {
          operator delete(this[1]);
        }
        if (v96[3]) {
          uint64_t v49 = (uint64_t *)v96[3];
        }
        else {
          uint64_t v49 = &CoreML::Specification::_WeightParams_default_instance_;
        }
        std::string::basic_string[abi:ne180100]<0>(&v97, "Bidirectional LSTM");
        uint64_t v50 = *(void *)(a3 + 112);
        std::string::basic_string[abi:ne180100]<0>(v116, "backward forget gate weight matrix");
        CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v49, v32, v26, (const void **)&v97.__r_.__value_.__l.__data_, v50, (uint64_t)v116);
        if (v117 < 0) {
          operator delete(*(void **)v116);
        }
        if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v97.__r_.__value_.__l.__data_);
        }
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
          goto LABEL_380;
        }
        if (*((char *)this + 31) < 0) {
          operator delete(this[1]);
        }
        if (v96[4]) {
          uint64_t v51 = (uint64_t *)v96[4];
        }
        else {
          uint64_t v51 = &CoreML::Specification::_WeightParams_default_instance_;
        }
        std::string::basic_string[abi:ne180100]<0>(&v97, "Bidirectional LSTM");
        uint64_t v52 = *(void *)(a3 + 112);
        std::string::basic_string[abi:ne180100]<0>(v116, "backward block input gate weight matrix");
        CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v51, v32, v26, (const void **)&v97.__r_.__value_.__l.__data_, v52, (uint64_t)v116);
        if (v117 < 0) {
          operator delete(*(void **)v116);
        }
        if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v97.__r_.__value_.__l.__data_);
        }
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
          goto LABEL_380;
        }
        if (*((char *)this + 31) < 0) {
          operator delete(this[1]);
        }
        if (v96[5]) {
          uint64_t v53 = (uint64_t *)v96[5];
        }
        else {
          uint64_t v53 = &CoreML::Specification::_WeightParams_default_instance_;
        }
        std::string::basic_string[abi:ne180100]<0>(&v97, "Bidirectional LSTM");
        uint64_t v54 = *(void *)(a3 + 112);
        std::string::basic_string[abi:ne180100]<0>(v116, "backward output gate weight matrix");
        CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v53, v32, v26, (const void **)&v97.__r_.__value_.__l.__data_, v54, (uint64_t)v116);
        if (v117 < 0) {
          operator delete(*(void **)v116);
        }
        if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v97.__r_.__value_.__l.__data_);
        }
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
          goto LABEL_380;
        }
        if (*((char *)this + 31) < 0) {
          operator delete(this[1]);
        }
        if (v96[6]) {
          uint64_t v55 = (uint64_t *)v96[6];
        }
        else {
          uint64_t v55 = &CoreML::Specification::_WeightParams_default_instance_;
        }
        std::string::basic_string[abi:ne180100]<0>(&v97, "Bidirectional LSTM");
        uint64_t v56 = *(void *)(a3 + 112);
        std::string::basic_string[abi:ne180100]<0>(v116, "backward input gate recursion matrix");
        CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v55, v26 * v26, v26, (const void **)&v97.__r_.__value_.__l.__data_, v56, (uint64_t)v116);
        if (v117 < 0) {
          operator delete(*(void **)v116);
        }
        if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v97.__r_.__value_.__l.__data_);
        }
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
          goto LABEL_380;
        }
        if (*((char *)this + 31) < 0) {
          operator delete(this[1]);
        }
        if (v96[7]) {
          unsigned int v57 = (uint64_t *)v96[7];
        }
        else {
          unsigned int v57 = &CoreML::Specification::_WeightParams_default_instance_;
        }
        std::string::basic_string[abi:ne180100]<0>(&v97, "Bidirectional LSTM");
        uint64_t v58 = *(void *)(a3 + 112);
        std::string::basic_string[abi:ne180100]<0>(v116, "backward forget gate recursion matrix");
        CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v57, v26 * v26, v26, (const void **)&v97.__r_.__value_.__l.__data_, v58, (uint64_t)v116);
        if (v117 < 0) {
          operator delete(*(void **)v116);
        }
        if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v97.__r_.__value_.__l.__data_);
        }
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
          goto LABEL_380;
        }
        if (*((char *)this + 31) < 0) {
          operator delete(this[1]);
        }
        if (v96[8]) {
          uint64_t v59 = (uint64_t *)v96[8];
        }
        else {
          uint64_t v59 = &CoreML::Specification::_WeightParams_default_instance_;
        }
        std::string::basic_string[abi:ne180100]<0>(&v97, "Bidirectional LSTM");
        uint64_t v60 = *(void *)(a3 + 112);
        std::string::basic_string[abi:ne180100]<0>(v116, "backward block input gate recursion matrix");
        CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v59, v26 * v26, v26, (const void **)&v97.__r_.__value_.__l.__data_, v60, (uint64_t)v116);
        if (v117 < 0) {
          operator delete(*(void **)v116);
        }
        if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v97.__r_.__value_.__l.__data_);
        }
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
          goto LABEL_380;
        }
        if (*((char *)this + 31) < 0) {
          operator delete(this[1]);
        }
        if (v96[9]) {
          uint64_t v61 = (uint64_t *)v96[9];
        }
        else {
          uint64_t v61 = &CoreML::Specification::_WeightParams_default_instance_;
        }
        std::string::basic_string[abi:ne180100]<0>(&v97, "Bidirectional LSTM");
        uint64_t v62 = *(void *)(a3 + 112);
        std::string::basic_string[abi:ne180100]<0>(v116, "backward output gate recursion matrix");
        CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v61, v26 * v26, v26, (const void **)&v97.__r_.__value_.__l.__data_, v62, (uint64_t)v116);
        if (v117 < 0) {
          operator delete(*(void **)v116);
        }
        if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v97.__r_.__value_.__l.__data_);
        }
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
          goto LABEL_380;
        }
        if (*((char *)this + 31) < 0) {
          operator delete(this[1]);
        }
        uint64_t v63 = &CoreML::Specification::_LSTMParams_default_instance_;
        if (v107) {
          uint64_t v63 = (uint64_t *)v107;
        }
        if (*((unsigned char *)v63 + 21))
        {
          if (v29[10]) {
            BOOL v64 = (uint64_t *)v29[10];
          }
          else {
            BOOL v64 = &CoreML::Specification::_WeightParams_default_instance_;
          }
          std::string::basic_string[abi:ne180100]<0>(&v97, "Bidirectional LSTM");
          uint64_t v65 = *(void *)(a3 + 112);
          std::string::basic_string[abi:ne180100]<0>(v116, "forward input gate bias vector");
          CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v64, v26, 1, (const void **)&v97.__r_.__value_.__l.__data_, v65, (uint64_t)v116);
          if (v117 < 0) {
            operator delete(*(void **)v116);
          }
          if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v97.__r_.__value_.__l.__data_);
          }
          if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
            goto LABEL_380;
          }
          if (*((char *)this + 31) < 0) {
            operator delete(this[1]);
          }
          if (v29[11]) {
            unint64_t v66 = (uint64_t *)v29[11];
          }
          else {
            unint64_t v66 = &CoreML::Specification::_WeightParams_default_instance_;
          }
          std::string::basic_string[abi:ne180100]<0>(&v97, "Bidirectional LSTM");
          uint64_t v67 = *(void *)(a3 + 112);
          std::string::basic_string[abi:ne180100]<0>(v116, "forward forget gate bias vector");
          CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v66, v26, 1, (const void **)&v97.__r_.__value_.__l.__data_, v67, (uint64_t)v116);
          if (v117 < 0) {
            operator delete(*(void **)v116);
          }
          if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v97.__r_.__value_.__l.__data_);
          }
          if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
            goto LABEL_380;
          }
          if (*((char *)this + 31) < 0) {
            operator delete(this[1]);
          }
          if (v29[12]) {
            uint64_t v68 = (uint64_t *)v29[12];
          }
          else {
            uint64_t v68 = &CoreML::Specification::_WeightParams_default_instance_;
          }
          std::string::basic_string[abi:ne180100]<0>(&v97, "Bidirectional LSTM");
          uint64_t v69 = *(void *)(a3 + 112);
          std::string::basic_string[abi:ne180100]<0>(v116, "forward block input bias vector");
          CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v68, v26, 1, (const void **)&v97.__r_.__value_.__l.__data_, v69, (uint64_t)v116);
          if (v117 < 0) {
            operator delete(*(void **)v116);
          }
          if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v97.__r_.__value_.__l.__data_);
          }
          if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
            goto LABEL_380;
          }
          if (*((char *)this + 31) < 0) {
            operator delete(this[1]);
          }
          if (v29[13]) {
            uint64_t v70 = (uint64_t *)v29[13];
          }
          else {
            uint64_t v70 = &CoreML::Specification::_WeightParams_default_instance_;
          }
          std::string::basic_string[abi:ne180100]<0>(&v97, "Bidirectional LSTM");
          uint64_t v71 = *(void *)(a3 + 112);
          std::string::basic_string[abi:ne180100]<0>(v116, "forward output gate bias vector");
          CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v70, v26, 1, (const void **)&v97.__r_.__value_.__l.__data_, v71, (uint64_t)v116);
          if (v117 < 0) {
            operator delete(*(void **)v116);
          }
          if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v97.__r_.__value_.__l.__data_);
          }
          if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
            goto LABEL_380;
          }
          if (*((char *)this + 31) < 0) {
            operator delete(this[1]);
          }
          if (v96[10]) {
            uint64_t v72 = (uint64_t *)v96[10];
          }
          else {
            uint64_t v72 = &CoreML::Specification::_WeightParams_default_instance_;
          }
          std::string::basic_string[abi:ne180100]<0>(&v97, "Bidirectional LSTM");
          uint64_t v73 = *(void *)(a3 + 112);
          std::string::basic_string[abi:ne180100]<0>(v116, "backward input gate bias vector");
          CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v72, v26, 1, (const void **)&v97.__r_.__value_.__l.__data_, v73, (uint64_t)v116);
          if (v117 < 0) {
            operator delete(*(void **)v116);
          }
          if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v97.__r_.__value_.__l.__data_);
          }
          if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
            goto LABEL_380;
          }
          if (*((char *)this + 31) < 0) {
            operator delete(this[1]);
          }
          if (v96[11]) {
            uint64_t v74 = (uint64_t *)v96[11];
          }
          else {
            uint64_t v74 = &CoreML::Specification::_WeightParams_default_instance_;
          }
          std::string::basic_string[abi:ne180100]<0>(&v97, "Bidirectional LSTM");
          uint64_t v75 = *(void *)(a3 + 112);
          std::string::basic_string[abi:ne180100]<0>(v116, "backward forget gate bias vector");
          CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v74, v26, 1, (const void **)&v97.__r_.__value_.__l.__data_, v75, (uint64_t)v116);
          if (v117 < 0) {
            operator delete(*(void **)v116);
          }
          if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v97.__r_.__value_.__l.__data_);
          }
          if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
            goto LABEL_380;
          }
          if (*((char *)this + 31) < 0) {
            operator delete(this[1]);
          }
          if (v96[12]) {
            uint64_t v76 = (uint64_t *)v96[12];
          }
          else {
            uint64_t v76 = &CoreML::Specification::_WeightParams_default_instance_;
          }
          std::string::basic_string[abi:ne180100]<0>(&v97, "Bidirectional LSTM");
          uint64_t v77 = *(void *)(a3 + 112);
          std::string::basic_string[abi:ne180100]<0>(v116, "backward block input bias vector");
          CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v76, v26, 1, (const void **)&v97.__r_.__value_.__l.__data_, v77, (uint64_t)v116);
          if (v117 < 0) {
            operator delete(*(void **)v116);
          }
          if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v97.__r_.__value_.__l.__data_);
          }
          if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
            goto LABEL_380;
          }
          if (*((char *)this + 31) < 0) {
            operator delete(this[1]);
          }
          if (v96[13]) {
            uint64_t v78 = (uint64_t *)v96[13];
          }
          else {
            uint64_t v78 = &CoreML::Specification::_WeightParams_default_instance_;
          }
          std::string::basic_string[abi:ne180100]<0>(&v97, "Bidirectional LSTM");
          uint64_t v79 = *(void *)(a3 + 112);
          std::string::basic_string[abi:ne180100]<0>(v116, "backward output gate bias vector");
          CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v78, v26, 1, (const void **)&v97.__r_.__value_.__l.__data_, v79, (uint64_t)v116);
          if (v117 < 0) {
            operator delete(*(void **)v116);
          }
          if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v97.__r_.__value_.__l.__data_);
          }
          if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
            goto LABEL_380;
          }
          if (*((char *)this + 31) < 0) {
            operator delete(this[1]);
          }
        }
        unsigned int v80 = &CoreML::Specification::_LSTMParams_default_instance_;
        if (v107) {
          unsigned int v80 = (uint64_t *)v107;
        }
        if (*((unsigned char *)v80 + 23))
        {
          if (v29[14]) {
            int v81 = (uint64_t *)v29[14];
          }
          else {
            int v81 = &CoreML::Specification::_WeightParams_default_instance_;
          }
          std::string::basic_string[abi:ne180100]<0>(&v97, "Bidirectional LSTM");
          uint64_t v82 = *(void *)(a3 + 112);
          std::string::basic_string[abi:ne180100]<0>(v116, "forward input gate peephole vector");
          CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v81, v26, 1, (const void **)&v97.__r_.__value_.__l.__data_, v82, (uint64_t)v116);
          if (v117 < 0) {
            operator delete(*(void **)v116);
          }
          if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v97.__r_.__value_.__l.__data_);
          }
          if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
            goto LABEL_380;
          }
          if (*((char *)this + 31) < 0) {
            operator delete(this[1]);
          }
          if (v29[15]) {
            uint64_t v83 = (uint64_t *)v29[15];
          }
          else {
            uint64_t v83 = &CoreML::Specification::_WeightParams_default_instance_;
          }
          std::string::basic_string[abi:ne180100]<0>(&v97, "Bidirectional LSTM");
          uint64_t v84 = *(void *)(a3 + 112);
          std::string::basic_string[abi:ne180100]<0>(v116, "forward forget gate peephole vector");
          CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v83, v26, 1, (const void **)&v97.__r_.__value_.__l.__data_, v84, (uint64_t)v116);
          if (v117 < 0) {
            operator delete(*(void **)v116);
          }
          if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v97.__r_.__value_.__l.__data_);
          }
          if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
            goto LABEL_380;
          }
          if (*((char *)this + 31) < 0) {
            operator delete(this[1]);
          }
          if (v29[16]) {
            BOOL v85 = (uint64_t *)v29[16];
          }
          else {
            BOOL v85 = &CoreML::Specification::_WeightParams_default_instance_;
          }
          std::string::basic_string[abi:ne180100]<0>(&v97, "Bidirectional LSTM");
          uint64_t v86 = *(void *)(a3 + 112);
          std::string::basic_string[abi:ne180100]<0>(v116, "forward output gate peephole vector");
          CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v85, v26, 1, (const void **)&v97.__r_.__value_.__l.__data_, v86, (uint64_t)v116);
          if (v117 < 0) {
            operator delete(*(void **)v116);
          }
          if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v97.__r_.__value_.__l.__data_);
          }
          if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
            goto LABEL_380;
          }
          if (*((char *)this + 31) < 0) {
            operator delete(this[1]);
          }
          if (v96[14]) {
            std::string v87 = (uint64_t *)v96[14];
          }
          else {
            std::string v87 = &CoreML::Specification::_WeightParams_default_instance_;
          }
          std::string::basic_string[abi:ne180100]<0>(&v97, "Bidirectional LSTM");
          uint64_t v88 = *(void *)(a3 + 112);
          std::string::basic_string[abi:ne180100]<0>(v116, "backward input gate peephole vector");
          CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v87, v26, 1, (const void **)&v97.__r_.__value_.__l.__data_, v88, (uint64_t)v116);
          if (v117 < 0) {
            operator delete(*(void **)v116);
          }
          if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v97.__r_.__value_.__l.__data_);
          }
          if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
            goto LABEL_380;
          }
          if (*((char *)this + 31) < 0) {
            operator delete(this[1]);
          }
          if (v96[15]) {
            unint64_t v89 = (uint64_t *)v96[15];
          }
          else {
            unint64_t v89 = &CoreML::Specification::_WeightParams_default_instance_;
          }
          std::string::basic_string[abi:ne180100]<0>(&v97, "Bidirectional LSTM");
          uint64_t v90 = *(void *)(a3 + 112);
          std::string::basic_string[abi:ne180100]<0>(v116, "backward forget gate peephole vector");
          CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v89, v26, 1, (const void **)&v97.__r_.__value_.__l.__data_, v90, (uint64_t)v116);
          if (v117 < 0) {
            operator delete(*(void **)v116);
          }
          if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v97.__r_.__value_.__l.__data_);
          }
          if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
            goto LABEL_380;
          }
          if (*((char *)this + 31) < 0) {
            operator delete(this[1]);
          }
          if (v96[16]) {
            uint64_t v91 = (uint64_t *)v96[16];
          }
          else {
            uint64_t v91 = &CoreML::Specification::_WeightParams_default_instance_;
          }
          std::string::basic_string[abi:ne180100]<0>(&v97, "Bidirectional LSTM");
          uint64_t v92 = *(void *)(a3 + 112);
          std::string::basic_string[abi:ne180100]<0>(v116, "backward output gate peephole vector");
          CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v91, v26, 1, (const void **)&v97.__r_.__value_.__l.__data_, v92, (uint64_t)v116);
          if (v117 < 0) {
            operator delete(*(void **)v116);
          }
          if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v97.__r_.__value_.__l.__data_);
          }
          if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
            goto LABEL_380;
          }
          if (*((char *)this + 31) < 0) {
            operator delete(this[1]);
          }
        }
        CoreML::Result::Result((CoreML::Result *)this);
LABEL_380:
        int v100 = &unk_1EF0CE698;
        google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v101);
        CoreML::Specification::BiDirectionalLSTMLayerParams::~BiDirectionalLSTMLayerParams((CoreML::Specification::BiDirectionalLSTMLayerParams *)__p);
        return;
      }
      std::operator+<char>();
      int v93 = std::string::append(&v97, " backward lstm must provide 3 activations");
    }
    else
    {
      std::operator+<char>();
      int v93 = std::string::append(&v97, " forward lstm must provide 3 activations");
    }
    uint64_t v94 = (void *)v93->__r_.__value_.__r.__words[0];
    *(void *)uint64_t v116 = v93->__r_.__value_.__l.__size_;
    *(void *)&v116[7] = *(std::string::size_type *)((char *)&v93->__r_.__value_.__r.__words[1] + 7);
    char v95 = HIBYTE(v93->__r_.__value_.__r.__words[2]);
    v93->__r_.__value_.__l.__size_ = 0;
    v93->__r_.__value_.__r.__words[2] = 0;
    v93->__r_.__value_.__r.__words[0] = 0;
    *(void *)((char *)&v99 + 7) = *(void *)&v116[7];
    uint64_t v98 = v94;
    *(void *)&long long v99 = *(void *)v116;
    HIBYTE(v99) = v95;
    if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v97.__r_.__value_.__l.__data_);
    }
    *this = (void *)13;
    std::operator+<char>();
    if (SHIBYTE(v99) < 0) {
      operator delete(v98);
    }
    goto LABEL_380;
  }
  uint64_t v12 = 8 * v11;
  while (1)
  {
    inited = CoreML::validateRecurrentActivationParams((CoreML *)this, *v10);
    if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
      break;
    }
    if (*((char *)this + 31) < 0) {
      operator delete(this[1]);
    }
    ++v10;
    v12 -= 8;
    if (!v12) {
      goto LABEL_31;
    }
  }
}

void sub_19EAF215C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (*(char *)(v32 - 89) < 0) {
    operator delete(*(void **)(v32 - 112));
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(&a24);
  CoreML::Specification::BiDirectionalLSTMLayerParams::~BiDirectionalLSTMLayerParams((CoreML::Specification::BiDirectionalLSTMLayerParams *)&a27);
  _Unwind_Resume(a1);
}

void CoreML::NeuralNetworkSpecValidator::validateCropLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2, uint64_t a3)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 2);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0) {
      operator delete(this[1]);
    }
    CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0) {
        operator delete(this[1]);
      }
      if (*(unsigned char *)a2)
      {
        std::string::basic_string[abi:ne180100]<0>(v46, "Crop");
        uint64_t v7 = (char *)a2 + 32;
        CoreML::validateInputOutputRankEquality((CoreML::Result *)this, (void *)a3, (uint64_t)v46, (uint64_t)a2 + 32);
        if (v47 < 0) {
          operator delete(v46[0]);
        }
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
          return;
        }
        if (*((char *)this + 31) < 0) {
          operator delete(this[1]);
        }
        std::string::basic_string[abi:ne180100]<0>(__p, "Crop");
        CoreML::validateRankCount((uint64_t)this, (void *)a3, (uint64_t)__p, 3, -1, (uint64_t)a2 + 32);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
          return;
        }
        if (*((char *)this + 31) < 0) {
          operator delete(this[1]);
        }
        if (*(int *)(a3 + 24) >= 2)
        {
          uint64_t v8 = *(void *)(a3 + 32);
          uint64_t v9 = *(void **)(v8 + 8);
          size_t v6 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>((uint64_t)a2 + 32, v9);
          uint64_t v10 = (const CoreML::Specification::NeuralNetworkLayer *)((char *)a2 + 40);
          if (v10 != v6)
          {
            size_t v6 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>((uint64_t)v7, *(void **)(v8 + 16));
            if (v10 != v6)
            {
              int v11 = *(_DWORD *)std::map<std::string,std::string>::at((uint64_t)v7, v9);
              size_t v6 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)std::map<std::string,std::string>::at((uint64_t)v7, *(void **)(*(void *)(a3 + 32) + 16));
              if (v11 != *(_DWORD *)v6)
              {
                uint64_t v35 = *(long long **)(a3 + 112);
                if (*((char *)v35 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(&v43, *(const std::string::value_type **)v35, *((void *)v35 + 1));
                }
                else
                {
                  long long v36 = *v35;
                  v43.__r_.__value_.__r.__words[2] = *((void *)v35 + 2);
                  *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v36;
                }
                int v37 = std::string::insert(&v43, 0, "Layer '");
                long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
                v44.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v38;
                v37->__r_.__value_.__l.__size_ = 0;
                v37->__r_.__value_.__r.__words[2] = 0;
                v37->__r_.__value_.__r.__words[0] = 0;
                int v39 = std::string::append(&v44, "' of type 'Crop' expects equal ranks for its inputs, but they are not equal.");
                std::string::size_type v40 = v39->__r_.__value_.__r.__words[0];
                v48.__r_.__value_.__r.__words[0] = v39->__r_.__value_.__l.__size_;
                *(std::string::size_type *)((char *)v48.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v39->__r_.__value_.__r.__words[1] + 7);
                char v41 = HIBYTE(v39->__r_.__value_.__r.__words[2]);
                v39->__r_.__value_.__l.__size_ = 0;
                v39->__r_.__value_.__r.__words[2] = 0;
                v39->__r_.__value_.__r.__words[0] = 0;
                *(void *)&__p[15] = *(std::string::size_type *)((char *)v48.__r_.__value_.__r.__words + 7);
                *(void *)std::string __p = v40;
                *(void *)&__p[8] = v48.__r_.__value_.__r.__words[0];
                __p[23] = v41;
                if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v44.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v43.__r_.__value_.__l.__data_);
                }
                *this = (void *)13;
                std::operator+<char>();
                goto LABEL_73;
              }
            }
          }
        }
      }
      int v12 = *(_DWORD *)(a3 + 140);
      if (*(_DWORD *)(a3 + 24) == 1)
      {
        if (v12 == 190)
        {
          int v13 = *(uint64_t **)(a3 + 128);
        }
        else
        {
          CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
          int v13 = &CoreML::Specification::_CropLayerParams_default_instance_;
        }
        uint64_t v15 = (uint64_t *)v13[5];
        if (!v15) {
          uint64_t v15 = &CoreML::Specification::_BorderAmounts_default_instance_;
        }
        if (*((_DWORD *)v15 + 6) != 2)
        {
          std::operator+<char>();
          uint64_t v16 = std::string::append(&v48, "' is of length ");
          long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
          v43.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v17;
          v16->__r_.__value_.__l.__size_ = 0;
          v16->__r_.__value_.__r.__words[2] = 0;
          v16->__r_.__value_.__r.__words[0] = 0;
          if (*(_DWORD *)(a3 + 140) == 190)
          {
            unsigned int v18 = *(uint64_t **)(a3 + 128);
          }
          else
          {
            CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v16);
            unsigned int v18 = &CoreML::Specification::_CropLayerParams_default_instance_;
          }
          uint64_t v22 = (uint64_t *)v18[5];
          if (!v22) {
            uint64_t v22 = &CoreML::Specification::_BorderAmounts_default_instance_;
          }
          std::to_string(&v42, *((_DWORD *)v22 + 6));
          if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            BOOL v23 = &v42;
          }
          else {
            BOOL v23 = (std::string *)v42.__r_.__value_.__r.__words[0];
          }
          if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v42.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v42.__r_.__value_.__l.__size_;
          }
          uint64_t v25 = std::string::append(&v43, (const std::string::value_type *)v23, size);
          long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
          v44.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v26;
          v25->__r_.__value_.__l.__size_ = 0;
          v25->__r_.__value_.__r.__words[2] = 0;
          v25->__r_.__value_.__r.__words[0] = 0;
          uint64_t v27 = std::string::append(&v44, " but requires exactly two crop constraints (for X,Y axes).");
          long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
          *(void *)&__p[16] = *((void *)&v27->__r_.__value_.__l + 2);
          *(_OWORD *)std::string __p = v28;
          v27->__r_.__value_.__l.__size_ = 0;
          v27->__r_.__value_.__r.__words[2] = 0;
          v27->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v44.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v42.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v43.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v48.__r_.__value_.__l.__data_);
          }
LABEL_72:
          *this = (void *)13;
          std::operator+<char>();
LABEL_73:
          if ((__p[23] & 0x80000000) != 0) {
            operator delete(*(void **)__p);
          }
          return;
        }
      }
      else
      {
        if (v12 == 190)
        {
          uint64_t v14 = *(uint64_t **)(a3 + 128);
        }
        else
        {
          CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
          uint64_t v14 = &CoreML::Specification::_CropLayerParams_default_instance_;
        }
        if (*((_DWORD *)v14 + 4) != 2)
        {
          std::operator+<char>();
          char v19 = std::string::append(&v48, "' is of length ");
          long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
          v43.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v20;
          v19->__r_.__value_.__l.__size_ = 0;
          v19->__r_.__value_.__r.__words[2] = 0;
          v19->__r_.__value_.__r.__words[0] = 0;
          if (*(_DWORD *)(a3 + 140) == 190)
          {
            uint64_t v21 = *(uint64_t **)(a3 + 128);
          }
          else
          {
            CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v19);
            uint64_t v21 = &CoreML::Specification::_CropLayerParams_default_instance_;
          }
          std::to_string(&v42, *((_DWORD *)v21 + 4));
          if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v29 = &v42;
          }
          else {
            uint64_t v29 = (std::string *)v42.__r_.__value_.__r.__words[0];
          }
          if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v30 = HIBYTE(v42.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v30 = v42.__r_.__value_.__l.__size_;
          }
          uint64_t v31 = std::string::append(&v43, (const std::string::value_type *)v29, v30);
          long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
          v44.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v32;
          v31->__r_.__value_.__l.__size_ = 0;
          v31->__r_.__value_.__r.__words[2] = 0;
          v31->__r_.__value_.__r.__words[0] = 0;
          int v33 = std::string::append(&v44, " but requires exactly two offsets (for X,Y axes).");
          long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
          *(void *)&__p[16] = *((void *)&v33->__r_.__value_.__l + 2);
          *(_OWORD *)std::string __p = v34;
          v33->__r_.__value_.__l.__size_ = 0;
          v33->__r_.__value_.__r.__words[2] = 0;
          v33->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v44.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v42.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v43.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v48.__r_.__value_.__l.__data_);
          }
          goto LABEL_72;
        }
      }
      CoreML::Result::Result((CoreML::Result *)this);
    }
  }
}

void sub_19EAF297C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
}

void CoreML::NeuralNetworkSpecValidator::validateDotLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2, const CoreML::Specification::NeuralNetworkLayer *a3)
{
  v26[2] = *MEMORY[0x1E4F143B8];
  CoreML::validateInputCount((CoreML *)this, a3, 2, 2);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0) {
      operator delete(this[1]);
    }
    CoreML::validateOutputCount((CoreML *)this, a3, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0) {
        operator delete(this[1]);
      }
      if (!*(unsigned char *)a2) {
        goto LABEL_21;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "DotProduct");
      size_t v6 = (char *)a2 + 32;
      CoreML::validateInputOutputRankEquality((CoreML::Result *)this, a3, (uint64_t)__p, (uint64_t)a2 + 32);
      if (v25 < 0) {
        operator delete(__p[0]);
      }
      if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
      {
        if (*((char *)this + 31) < 0) {
          operator delete(this[1]);
        }
        std::string::basic_string[abi:ne180100]<0>(&v21, "DotProduct");
        CoreML::validateRankCount((uint64_t)this, a3, (uint64_t)&v21, 3, -1, (uint64_t)a2 + 32);
        if (v23 < 0) {
          operator delete(v21);
        }
        if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
        {
          if (*((char *)this + 31) < 0) {
            operator delete(this[1]);
          }
          uint64_t v7 = *((void *)a3 + 4);
          uint64_t v8 = *(void **)(v7 + 8);
          uint64_t v9 = std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>((uint64_t)a2 + 32, v8);
          uint64_t v10 = (void *)((char *)a2 + 40);
          if (v10 == v9
            || v10 == std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>((uint64_t)v6, *(void **)(v7 + 16))|| (int v11 = *(_DWORD *)std::map<std::string,std::string>::at((uint64_t)v6, v8), v11 == *(_DWORD *)std::map<std::string,std::string>::at((uint64_t)v6, *(void **)(*((void *)a3 + 4) + 16))))
          {
LABEL_21:
            CoreML::Result::Result((CoreML::Result *)this);
            return;
          }
          int v12 = (long long *)*((void *)a3 + 14);
          if (*((char *)v12 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v19, *(const std::string::value_type **)v12, *((void *)v12 + 1));
          }
          else
          {
            long long v13 = *v12;
            v19.__r_.__value_.__r.__words[2] = *((void *)v12 + 2);
            *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v13;
          }
          uint64_t v14 = std::string::insert(&v19, 0, "Layer '");
          long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
          v20.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v15;
          v14->__r_.__value_.__l.__size_ = 0;
          v14->__r_.__value_.__r.__words[2] = 0;
          v14->__r_.__value_.__r.__words[0] = 0;
          uint64_t v16 = std::string::append(&v20, "' of type 'DotProduct' expects equal ranks for its inputs, but they are not equal.");
          long long v17 = (void *)v16->__r_.__value_.__r.__words[0];
          v26[0] = v16->__r_.__value_.__l.__size_;
          *(void *)((char *)v26 + 7) = *(std::string::size_type *)((char *)&v16->__r_.__value_.__r.__words[1] + 7);
          char v18 = HIBYTE(v16->__r_.__value_.__r.__words[2]);
          v16->__r_.__value_.__l.__size_ = 0;
          v16->__r_.__value_.__r.__words[2] = 0;
          v16->__r_.__value_.__r.__words[0] = 0;
          *(void *)&v22[7] = *(void *)((char *)v26 + 7);
          uint64_t v21 = v17;
          *(void *)uint64_t v22 = v26[0];
          char v23 = v18;
          if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v20.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v19.__r_.__value_.__l.__data_);
          }
          *this = (void *)13;
          std::operator+<char>();
          if (v23 < 0) {
            operator delete(v21);
          }
        }
      }
    }
  }
}

void sub_19EAF2D2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
}

void CoreML::NeuralNetworkSpecValidator::validateMvnLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2, const CoreML::Specification::NeuralNetworkLayer *a3)
{
  CoreML::validateInputCount((CoreML *)this, a3, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0) {
      operator delete(this[1]);
    }
    CoreML::validateOutputCount((CoreML *)this, a3, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0) {
        operator delete(this[1]);
      }
      if (!*(unsigned char *)a2) {
        goto LABEL_18;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "MeanVarianceNormalize");
      size_t v6 = (char *)a2 + 32;
      CoreML::validateInputOutputRankEquality((CoreML::Result *)this, a3, (uint64_t)__p, (uint64_t)v6);
      if (v10 < 0) {
        operator delete(__p[0]);
      }
      if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
      {
        if (*((char *)this + 31) < 0) {
          operator delete(this[1]);
        }
        std::string::basic_string[abi:ne180100]<0>(v7, "MeanVarianceNormalize");
        CoreML::validateRankCount((uint64_t)this, a3, (uint64_t)v7, 3, -1, (uint64_t)v6);
        if (v8 < 0) {
          operator delete(v7[0]);
        }
        if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
        {
          if (*((char *)this + 31) < 0) {
            operator delete(this[1]);
          }
LABEL_18:
          CoreML::Result::Result((CoreML::Result *)this);
        }
      }
    }
  }
}

void sub_19EAF2EE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateEmbeddingLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2, uint64_t a3)
{
  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0) {
      operator delete(this[1]);
    }
    CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0) {
        operator delete(this[1]);
      }
      if (*(unsigned char *)a2)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "Embedding");
        uint64_t v7 = (char *)a2 + 32;
        CoreML::validateInputOutputRankEquality((CoreML::Result *)this, (void *)a3, (uint64_t)__p, (uint64_t)v7);
        if (v16 < 0) {
          operator delete(__p[0]);
        }
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
          return;
        }
        if (*((char *)this + 31) < 0) {
          operator delete(this[1]);
        }
        std::string::basic_string[abi:ne180100]<0>(v13, "Embedding");
        CoreML::validateRankCount((uint64_t)this, (void *)a3, (uint64_t)v13, 4, -1, (uint64_t)v7);
        if (v14 < 0) {
          operator delete(v13[0]);
        }
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
          return;
        }
        if (*((char *)this + 31) < 0) {
          operator delete(this[1]);
        }
      }
      if (*(_DWORD *)(a3 + 140) == 150)
      {
        char v8 = *(uint64_t **)(a3 + 128);
      }
      else
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
        char v8 = &CoreML::Specification::_EmbeddingLayerParams_default_instance_;
      }
      char v10 = (const CoreML::Specification::WeightParams *)v8[2];
      uint64_t v9 = (uint64_t *)v8[3];
      if (v10) {
        int v11 = v10;
      }
      else {
        int v11 = (const CoreML::Specification::WeightParams *)&CoreML::Specification::_WeightParams_default_instance_;
      }
      if (v9) {
        int v12 = v9;
      }
      else {
        int v12 = &CoreML::Specification::_WeightParams_default_instance_;
      }
      validateEmbeddingWeightsBias(this, (const CoreML::Specification::WeightParams *)a3, v11, v12);
      if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
      {
        if (*((char *)this + 31) < 0) {
          operator delete(this[1]);
        }
        CoreML::Result::Result((CoreML::Result *)this);
      }
    }
  }
}

void sub_19EAF30D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void validateEmbeddingWeightsBias(void **this, const CoreML::Specification::WeightParams *a2, const CoreML::Specification::WeightParams *a3, uint64_t *a4)
{
  uint64_t v77 = 0;
  size_t v78 = 0;
  uint64_t v79 = 0;
  int v8 = *((_DWORD *)a2 + 35);
  if (v8 == 150)
  {
    uint64_t v13 = *((void *)a2 + 16);
    uint64_t v11 = *(void *)(v13 + 32);
    unint64_t v10 = *(void *)(v13 + 40);
    int v12 = *(unsigned __int8 *)(v13 + 48);
    MEMORY[0x19F3C1430](&v77, "Embedding");
  }
  else
  {
    if (v8 != 1040)
    {
      CoreML::Result::Result((CoreML::Result *)this);
      goto LABEL_172;
    }
    uint64_t v9 = *((void *)a2 + 16);
    uint64_t v11 = *(void *)(v9 + 32);
    unint64_t v10 = *(void *)(v9 + 40);
    int v12 = *(unsigned __int8 *)(v9 + 48);
    MEMORY[0x19F3C1430](&v77, "EmbeddingND");
  }
  uint64_t v14 = *((void *)a3 + 5);
  if (*(char *)(v14 + 23) < 0) {
    uint64_t v15 = *(void *)(v14 + 8);
  }
  else {
    uint64_t v15 = *(unsigned __int8 *)(v14 + 23);
  }
  uint64_t v16 = *((void *)a3 + 6);
  uint64_t v17 = *(unsigned __int8 *)(v16 + 23);
  if (*(char *)(v16 + 23) < 0) {
    uint64_t v18 = *(void *)(v16 + 8);
  }
  else {
    uint64_t v18 = *(unsigned __int8 *)(v16 + 23);
  }
  int v19 = *((_DWORD *)a3 + 4);
  uint64_t v20 = *((void *)a3 + 7);
  uint64_t v21 = *(unsigned __int8 *)(v20 + 23);
  if (*(char *)(v20 + 23) < 0) {
    uint64_t v22 = *(void *)(v20 + 8);
  }
  else {
    uint64_t v22 = *(unsigned __int8 *)(v20 + 23);
  }
  if (v19 <= 0) {
    int v23 = 1;
  }
  else {
    int v23 = 2;
  }
  if (v15) {
    unsigned int v24 = v23;
  }
  else {
    unsigned int v24 = v19 > 0;
  }
  if (v18) {
    ++v24;
  }
  if (v22) {
    unsigned int v25 = v24 + 1;
  }
  else {
    unsigned int v25 = v24;
  }
  if (v25 > 1)
  {
    int v26 = 4;
    goto LABEL_54;
  }
  if (v25) {
    int v26 = 0;
  }
  else {
    int v26 = 5;
  }
  if (v19 <= 0 && v25)
  {
    if ((*(unsigned char *)(v14 + 23) & 0x80) != 0)
    {
      if (*(void *)(v14 + 8)) {
        goto LABEL_35;
      }
    }
    else if (*(unsigned char *)(v14 + 23))
    {
LABEL_35:
      int v26 = 1;
      goto LABEL_54;
    }
    if ((v17 & 0x80) != 0) {
      uint64_t v17 = *(void *)(v16 + 8);
    }
    uint64_t v27 = *((void *)a3 + 8);
    if (a3 != (const CoreML::Specification::WeightParams *)&CoreML::Specification::_WeightParams_default_instance_
      && v17
      && v27)
    {
      int v26 = 2;
    }
    else
    {
      if ((v21 & 0x80) != 0) {
        uint64_t v21 = *(void *)(v20 + 8);
      }
      if (v27) {
        BOOL v28 = v21 == 0;
      }
      else {
        BOOL v28 = 1;
      }
      if (v28
        || a3 == (const CoreML::Specification::WeightParams *)&CoreML::Specification::_WeightParams_default_instance_)
      {
        int v26 = 5;
      }
      else
      {
        int v26 = 3;
      }
    }
  }
LABEL_54:
  uint64_t v30 = a4[5];
  if (*(char *)(v30 + 23) < 0) {
    uint64_t v31 = *(void *)(v30 + 8);
  }
  else {
    uint64_t v31 = *(unsigned __int8 *)(v30 + 23);
  }
  uint64_t v32 = a4[6];
  uint64_t v33 = *(unsigned __int8 *)(v32 + 23);
  if (*(char *)(v32 + 23) < 0) {
    uint64_t v34 = *(void *)(v32 + 8);
  }
  else {
    uint64_t v34 = *(unsigned __int8 *)(v32 + 23);
  }
  int v35 = *((_DWORD *)a4 + 4);
  uint64_t v36 = a4[7];
  uint64_t v37 = *(unsigned __int8 *)(v36 + 23);
  if (*(char *)(v36 + 23) < 0) {
    uint64_t v38 = *(void *)(v36 + 8);
  }
  else {
    uint64_t v38 = *(unsigned __int8 *)(v36 + 23);
  }
  if (v35 <= 0) {
    int v39 = 1;
  }
  else {
    int v39 = 2;
  }
  if (v31) {
    unsigned int v40 = v39;
  }
  else {
    unsigned int v40 = v35 > 0;
  }
  if (v34) {
    ++v40;
  }
  if (v38) {
    unsigned int v41 = v40 + 1;
  }
  else {
    unsigned int v41 = v40;
  }
  if (v41 > 1)
  {
    int v42 = 4;
    goto LABEL_102;
  }
  if (v41) {
    int v42 = 0;
  }
  else {
    int v42 = 5;
  }
  if (v35 <= 0 && v41)
  {
    if ((*(unsigned char *)(v30 + 23) & 0x80) != 0)
    {
      if (*(void *)(v30 + 8)) {
        goto LABEL_83;
      }
    }
    else if (*(unsigned char *)(v30 + 23))
    {
LABEL_83:
      int v42 = 1;
      goto LABEL_102;
    }
    if ((v33 & 0x80) != 0) {
      uint64_t v33 = *(void *)(v32 + 8);
    }
    uint64_t v43 = a4[8];
    if (a4 != &CoreML::Specification::_WeightParams_default_instance_ && v33 && v43)
    {
      int v42 = 2;
    }
    else
    {
      if ((v37 & 0x80) != 0) {
        uint64_t v37 = *(void *)(v36 + 8);
      }
      if (v43) {
        BOOL v44 = v37 == 0;
      }
      else {
        BOOL v44 = 1;
      }
      if (v44 || a4 == &CoreML::Specification::_WeightParams_default_instance_) {
        int v42 = 5;
      }
      else {
        int v42 = 3;
      }
    }
  }
LABEL_102:
  if (v12) {
    BOOL v46 = v42 == 4;
  }
  else {
    BOOL v46 = 0;
  }
  int v47 = v46;
  if (v26 == 4 || v47)
  {
    if (v79 >= 0) {
      size_t v60 = HIBYTE(v79);
    }
    else {
      size_t v60 = v78;
    }
    uint64_t v61 = &v73;
    std::string::basic_string[abi:ne180100]((uint64_t)&v73, v60 + 2);
    if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v61 = (std::string *)v73.__r_.__value_.__r.__words[0];
    }
    if (v60)
    {
      if (v79 >= 0) {
        uint64_t v62 = &v77;
      }
      else {
        uint64_t v62 = v77;
      }
      memmove(v61, v62, v60);
    }
    strcpy((char *)v61 + v60, " '");
    uint64_t v63 = *((void *)a2 + 14);
    int v64 = *(char *)(v63 + 23);
    if (v64 >= 0) {
      uint64_t v65 = (const std::string::value_type *)*((void *)a2 + 14);
    }
    else {
      uint64_t v65 = *(const std::string::value_type **)v63;
    }
    if (v64 >= 0) {
      std::string::size_type v66 = *(unsigned __int8 *)(v63 + 23);
    }
    else {
      std::string::size_type v66 = *(void *)(v63 + 8);
    }
    uint64_t v67 = std::string::append(&v73, v65, v66);
    long long v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
    v74.__r_.__value_.__r.__words[2] = v67->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v74.__r_.__value_.__l.__data_ = v68;
    v67->__r_.__value_.__l.__size_ = 0;
    v67->__r_.__value_.__r.__words[2] = 0;
    v67->__r_.__value_.__r.__words[0] = 0;
    uint64_t v69 = std::string::append(&v74, "' has invalid weights/bias fields. Field value types should match and should either be half or full precision.");
    long long v70 = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
    std::string::size_type v76 = v69->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v70;
    v69->__r_.__value_.__l.__size_ = 0;
    v69->__r_.__value_.__r.__words[2] = 0;
    v69->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v74.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v73.__r_.__value_.__l.__data_);
    }
    *this = (void *)13;
    std::operator+<char>();
    if (SHIBYTE(v76) < 0)
    {
      uint64_t v59 = __p[0];
      goto LABEL_159;
    }
  }
  else if (v12 && (v26 == 1 && !v42 || !v26 && v42 == 1))
  {
    if (v79 >= 0) {
      size_t v48 = HIBYTE(v79);
    }
    else {
      size_t v48 = v78;
    }
    uint64_t v49 = &v73;
    std::string::basic_string[abi:ne180100]((uint64_t)&v73, v48 + 8);
    if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v49 = (std::string *)v73.__r_.__value_.__r.__words[0];
    }
    if (v48)
    {
      if (v79 >= 0) {
        uint64_t v50 = &v77;
      }
      else {
        uint64_t v50 = v77;
      }
      memmove(v49, v50, v48);
    }
    strcpy((char *)v49 + v48, " layer '");
    uint64_t v51 = *((void *)a2 + 14);
    int v52 = *(char *)(v51 + 23);
    if (v52 >= 0) {
      uint64_t v53 = (const std::string::value_type *)*((void *)a2 + 14);
    }
    else {
      uint64_t v53 = *(const std::string::value_type **)v51;
    }
    if (v52 >= 0) {
      std::string::size_type v54 = *(unsigned __int8 *)(v51 + 23);
    }
    else {
      std::string::size_type v54 = *(void *)(v51 + 8);
    }
    uint64_t v55 = std::string::append(&v73, v53, v54);
    long long v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
    v74.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v74.__r_.__value_.__l.__data_ = v56;
    v55->__r_.__value_.__l.__size_ = 0;
    v55->__r_.__value_.__r.__words[2] = 0;
    v55->__r_.__value_.__r.__words[0] = 0;
    unsigned int v57 = std::string::append(&v74, "has unmatched precisions of weights/bias They should either be half or full precision.");
    long long v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
    std::string::size_type v76 = v57->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v58;
    v57->__r_.__value_.__l.__size_ = 0;
    v57->__r_.__value_.__r.__words[2] = 0;
    v57->__r_.__value_.__r.__words[0] = 0;
    *this = (void *)13;
    std::operator+<char>();
    if (SHIBYTE(v76) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v74.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
    {
      uint64_t v59 = (void *)v73.__r_.__value_.__r.__words[0];
LABEL_159:
      operator delete(v59);
    }
  }
  else
  {
    uint64_t v71 = *((void *)a2 + 14);
    std::string::basic_string[abi:ne180100]<0>(__p, "weight");
    CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)a3, v11 * v10, v10, (const void **)&v77, v71, (uint64_t)__p);
    if (SHIBYTE(v76) < 0) {
      operator delete(__p[0]);
    }
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0) {
        operator delete(this[1]);
      }
      if (v12)
      {
        uint64_t v72 = *((void *)a2 + 14);
        std::string::basic_string[abi:ne180100]<0>(__p, "bias");
        CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)a4, v10, 1, (const void **)&v77, v72, (uint64_t)__p);
        if (SHIBYTE(v76) < 0) {
          operator delete(__p[0]);
        }
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
          goto LABEL_172;
        }
        if (*((char *)this + 31) < 0) {
          operator delete(this[1]);
        }
      }
      CoreML::Result::Result((CoreML::Result *)this);
    }
  }
LABEL_172:
  if (SHIBYTE(v79) < 0) {
    operator delete(v77);
  }
}

void sub_19EAF3720(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a34 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateEmbeddingNDLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2, uint64_t a3)
{
  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0) {
      operator delete(this[1]);
    }
    CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0) {
        operator delete(this[1]);
      }
      if (*(unsigned char *)a2)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "EmbeddingND");
        uint64_t v7 = (char *)a2 + 32;
        CoreML::validateInputOutputRankEquality((CoreML::Result *)this, (void *)a3, (uint64_t)__p, (uint64_t)v7);
        if (v16 < 0) {
          operator delete(__p[0]);
        }
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
          return;
        }
        if (*((char *)this + 31) < 0) {
          operator delete(this[1]);
        }
        std::string::basic_string[abi:ne180100]<0>(v13, "EmbeddingND");
        CoreML::validateRankCount((uint64_t)this, (void *)a3, (uint64_t)v13, 2, 5, (uint64_t)v7);
        if (v14 < 0) {
          operator delete(v13[0]);
        }
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
          return;
        }
        if (*((char *)this + 31) < 0) {
          operator delete(this[1]);
        }
      }
      if (*(_DWORD *)(a3 + 140) == 1040)
      {
        int v8 = *(uint64_t **)(a3 + 128);
      }
      else
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
        int v8 = &CoreML::Specification::_EmbeddingNDLayerParams_default_instance_;
      }
      unint64_t v10 = (const CoreML::Specification::WeightParams *)v8[2];
      uint64_t v9 = (uint64_t *)v8[3];
      if (v10) {
        uint64_t v11 = v10;
      }
      else {
        uint64_t v11 = (const CoreML::Specification::WeightParams *)&CoreML::Specification::_WeightParams_default_instance_;
      }
      if (v9) {
        int v12 = v9;
      }
      else {
        int v12 = &CoreML::Specification::_WeightParams_default_instance_;
      }
      validateEmbeddingWeightsBias(this, (const CoreML::Specification::WeightParams *)a3, v11, v12);
      if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
      {
        if (*((char *)this + 31) < 0) {
          operator delete(this[1]);
        }
        CoreML::Result::Result((CoreML::Result *)this);
      }
    }
  }
}

void sub_19EAF397C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateSequenceRepeatLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2, const CoreML::Specification::NeuralNetworkLayer *a3)
{
  CoreML::validateInputCount((CoreML *)this, a3, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0) {
      operator delete(this[1]);
    }
    CoreML::validateOutputCount((CoreML *)this, a3, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0) {
        operator delete(this[1]);
      }
      if (!*(unsigned char *)a2) {
        goto LABEL_18;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "SequenceRepeat");
      size_t v6 = (char *)a2 + 32;
      CoreML::validateInputOutputRankEquality((CoreML::Result *)this, a3, (uint64_t)__p, (uint64_t)v6);
      if (v10 < 0) {
        operator delete(__p[0]);
      }
      if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
      {
        if (*((char *)this + 31) < 0) {
          operator delete(this[1]);
        }
        std::string::basic_string[abi:ne180100]<0>(v7, "SequenceRepeat");
        CoreML::validateRankCount((uint64_t)this, a3, (uint64_t)v7, 5, -1, (uint64_t)v6);
        if (v8 < 0) {
          operator delete(v7[0]);
        }
        if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
        {
          if (*((char *)this + 31) < 0) {
            operator delete(this[1]);
          }
LABEL_18:
          CoreML::Result::Result((CoreML::Result *)this);
        }
      }
    }
  }
}

void sub_19EAF3AFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateSoftmaxLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2, const CoreML::Specification::NeuralNetworkLayer *a3)
{
  CoreML::validateInputCount((CoreML *)this, a3, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0) {
      operator delete(this[1]);
    }
    CoreML::validateOutputCount((CoreML *)this, a3, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0) {
        operator delete(this[1]);
      }
      if (!*(unsigned char *)a2) {
        goto LABEL_18;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "Softmax");
      size_t v6 = (char *)a2 + 32;
      CoreML::validateInputOutputRankEquality((CoreML::Result *)this, a3, (uint64_t)__p, (uint64_t)v6);
      if (v10 < 0) {
        operator delete(__p[0]);
      }
      if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
      {
        if (*((char *)this + 31) < 0) {
          operator delete(this[1]);
        }
        std::string::basic_string[abi:ne180100]<0>(v7, "Softmax");
        CoreML::validateRankCount((uint64_t)this, a3, (uint64_t)v7, 3, -1, (uint64_t)v6);
        if (v8 < 0) {
          operator delete(v7[0]);
        }
        if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
        {
          if (*((char *)this + 31) < 0) {
            operator delete(this[1]);
          }
LABEL_18:
          CoreML::Result::Result((CoreML::Result *)this);
        }
      }
    }
  }
}

void sub_19EAF3C7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateConcatLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2, uint64_t a3)
{
  v32[2] = *MEMORY[0x1E4F143B8];
  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 2, -1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0) {
      operator delete(this[1]);
    }
    CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0) {
        operator delete(this[1]);
      }
      if (!*(unsigned char *)a2) {
        goto LABEL_34;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "Concat");
      size_t v6 = (char *)a2 + 32;
      CoreML::validateInputOutputRankEquality((CoreML::Result *)this, (void *)a3, (uint64_t)__p, (uint64_t)a2 + 32);
      if (v31 < 0) {
        operator delete(__p[0]);
      }
      if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
        return;
      }
      if (*((char *)this + 31) < 0) {
        operator delete(this[1]);
      }
      if (*(_DWORD *)(a3 + 140) == 320)
      {
        char v8 = *(uint64_t **)(a3 + 128);
      }
      else
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v7);
        char v8 = &CoreML::Specification::_ConcatLayerParams_default_instance_;
      }
      if (*((unsigned char *)v8 + 16))
      {
        std::string::basic_string[abi:ne180100]<0>(&v27, "Concat");
        CoreML::validateRankCount((uint64_t)this, (void *)a3, (uint64_t)&v27, 5, -1, (uint64_t)a2 + 32);
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&v27, "Concat");
        CoreML::validateRankCount((uint64_t)this, (void *)a3, (uint64_t)&v27, 3, -1, (uint64_t)a2 + 32);
      }
      if (v29 < 0) {
        operator delete(v27);
      }
      if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
        return;
      }
      if (*((char *)this + 31) < 0) {
        operator delete(this[1]);
      }
      uint64_t v9 = *(void **)(*(void *)(a3 + 32) + 8);
      char v10 = (void *)((char *)a2 + 40);
      if ((void *)((char *)a2 + 40) == std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>((uint64_t)a2 + 32, v9)|| ((uint64_t v11 = (int *)std::map<std::string,std::string>::at((uint64_t)a2 + 32, v9), (v12 = *(void *)(a3 + 32)) != 0)? (v13 = (void **)(v12 + 8)): (v13 = 0), v14 = *(int *)(a3 + 24), !v14))
      {
LABEL_34:
        CoreML::Result::Result((CoreML::Result *)this);
        return;
      }
      int v15 = *v11;
      uint64_t v16 = 8 * v14;
      while (1)
      {
        uint64_t v17 = *v13;
        if (v10 != std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>((uint64_t)v6, *v13)&& v15 != *(_DWORD *)std::map<std::string,std::string>::at((uint64_t)v6, v17))
        {
          break;
        }
        ++v13;
        v16 -= 8;
        if (!v16) {
          goto LABEL_34;
        }
      }
      uint64_t v18 = *(long long **)(a3 + 112);
      if (*((char *)v18 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)v18, *((void *)v18 + 1));
      }
      else
      {
        long long v19 = *v18;
        v25.__r_.__value_.__r.__words[2] = *((void *)v18 + 2);
        *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v19;
      }
      uint64_t v20 = std::string::insert(&v25, 0, "Layer '");
      long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
      v26.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v21;
      v20->__r_.__value_.__l.__size_ = 0;
      v20->__r_.__value_.__r.__words[2] = 0;
      v20->__r_.__value_.__r.__words[0] = 0;
      uint64_t v22 = std::string::append(&v26, "' of type 'Concat' expects equal ranks for its inputs, but they are not equal.");
      int v23 = (void *)v22->__r_.__value_.__r.__words[0];
      v32[0] = v22->__r_.__value_.__l.__size_;
      *(void *)((char *)v32 + 7) = *(std::string::size_type *)((char *)&v22->__r_.__value_.__r.__words[1] + 7);
      char v24 = HIBYTE(v22->__r_.__value_.__r.__words[2]);
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      *(void *)&v28[7] = *(void *)((char *)v32 + 7);
      uint64_t v27 = v23;
      *(void *)BOOL v28 = v32[0];
      char v29 = v24;
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v26.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v25.__r_.__value_.__l.__data_);
      }
      *this = (void *)13;
      std::operator+<char>();
      if (v29 < 0) {
        operator delete(v27);
      }
    }
  }
}

void sub_19EAF4014(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
}

void CoreML::NeuralNetworkSpecValidator::validateCustomLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  CoreML::validateInputCount((CoreML *)this, a2, 1, -1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0) {
      operator delete(this[1]);
    }
    CoreML::validateOutputCount((CoreML *)this, a2, 1, -1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0) {
        operator delete(this[1]);
      }
      if (*((_DWORD *)a2 + 35) == 500)
      {
        uint64_t v5 = (void *)*((void *)a2 + 16);
      }
      else
      {
        inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
        uint64_t v5 = &CoreML::Specification::_CustomLayerParams_default_instance_;
      }
      uint64_t v6 = v5[9];
      if (*(char *)(v6 + 23) < 0)
      {
        if (*(void *)(v6 + 8)) {
          goto LABEL_13;
        }
      }
      else if (*(unsigned char *)(v6 + 23))
      {
LABEL_13:
        if (*((_DWORD *)a2 + 35) == 500)
        {
          uint64_t v7 = (int *)*((void *)a2 + 16);
        }
        else
        {
          CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
          uint64_t v7 = (int *)&CoreML::Specification::_CustomLayerParams_default_instance_;
        }
        uint64_t v10 = *((void *)v7 + 4);
        if (v10) {
          uint64_t v11 = (uint64_t *)(v10 + 8);
        }
        else {
          uint64_t v11 = 0;
        }
        uint64_t v12 = v7[6];
        if (!v12)
        {
LABEL_45:
          CoreML::Result::Result((CoreML::Result *)this);
          return;
        }
        uint64_t v13 = 8 * v12;
        while (1)
        {
          uint64_t v14 = *v11;
          uint64_t v15 = *(void *)(*v11 + 40);
          if (*(char *)(v15 + 23) < 0) {
            uint64_t v16 = *(void *)(v15 + 8);
          }
          else {
            uint64_t v16 = *(unsigned __int8 *)(v15 + 23);
          }
          uint64_t v17 = *(void *)(v14 + 48);
          if (*(char *)(v17 + 23) < 0) {
            uint64_t v18 = *(void *)(v17 + 8);
          }
          else {
            uint64_t v18 = *(unsigned __int8 *)(v17 + 23);
          }
          uint64_t v19 = *(void *)(v14 + 56);
          if (*(char *)(v19 + 23) < 0) {
            uint64_t v20 = *(void *)(v19 + 8);
          }
          else {
            uint64_t v20 = *(unsigned __int8 *)(v19 + 23);
          }
          int v21 = *(_DWORD *)(v14 + 16);
          BOOL v22 = v21 <= 0;
          int v23 = v21 > 0;
          if (v22) {
            int v24 = 1;
          }
          else {
            int v24 = 2;
          }
          if (v16) {
            int v23 = v24;
          }
          if (v18) {
            ++v23;
          }
          if (v20) {
            ++v23;
          }
          if (v23 != 1) {
            break;
          }
          ++v11;
          v13 -= 8;
          if (!v13) {
            goto LABEL_45;
          }
        }
        std::operator+<char>();
        std::string v25 = std::string::append(&v27, " has a weights parameter with multiple types filled in.  The WeightParams message should be treated as a oneof.");
        long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
        std::string::size_type v29 = v25->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v26;
        v25->__r_.__value_.__l.__size_ = 0;
        v25->__r_.__value_.__r.__words[2] = 0;
        v25->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v27.__r_.__value_.__l.__data_);
        }
        goto LABEL_50;
      }
      std::operator+<char>();
      char v8 = std::string::append(&v27, " has an empty 'className' field. This field is required in order for Core ML to link to the implementation for this custom class.");
      long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
      std::string::size_type v29 = v8->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string __p = v9;
      v8->__r_.__value_.__l.__size_ = 0;
      v8->__r_.__value_.__r.__words[2] = 0;
      v8->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v27.__r_.__value_.__l.__data_);
      }
LABEL_50:
      *this = (void *)13;
      std::operator+<char>();
      if (SHIBYTE(v29) < 0) {
        operator delete(__p[0]);
      }
    }
  }
}

void sub_19EAF4320(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateResizeBilinearLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2, uint64_t a3)
{
  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0) {
      operator delete(this[1]);
    }
    CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0) {
        operator delete(this[1]);
      }
      if (*(unsigned char *)a2)
      {
        std::string::basic_string[abi:ne180100]<0>(v23, "ResizeBilinear");
        uint64_t v7 = (char *)a2 + 32;
        CoreML::validateInputOutputRankEquality((CoreML::Result *)this, (void *)a3, (uint64_t)v23, (uint64_t)v7);
        if (v24 < 0) {
          operator delete(v23[0]);
        }
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
          return;
        }
        if (*((char *)this + 31) < 0) {
          operator delete(this[1]);
        }
        std::string::basic_string[abi:ne180100]<0>(&v21, "ResizeBilinear");
        CoreML::validateRankCount((uint64_t)this, (void *)a3, (uint64_t)&v21, 3, -1, (uint64_t)v7);
        if (SHIBYTE(v22) < 0) {
          operator delete((void *)v21);
        }
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
          return;
        }
        if (*((char *)this + 31) < 0) {
          operator delete(this[1]);
        }
      }
      if (*(_DWORD *)(a3 + 140) == 211)
      {
        char v8 = *(uint64_t **)(a3 + 128);
      }
      else
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
        char v8 = &CoreML::Specification::_ResizeBilinearLayerParams_default_instance_;
      }
      if ((*((_DWORD *)v8 + 4) | 2) == 2)
      {
        CoreML::Result::Result((CoreML::Result *)this);
      }
      else
      {
        std::operator+<char>();
        long long v9 = std::string::append(&v18, "' must be a vector of size 2 (i.e height, width) but is a vector of size ");
        long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
        v19.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v10;
        v9->__r_.__value_.__l.__size_ = 0;
        v9->__r_.__value_.__r.__words[2] = 0;
        v9->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&__p, *((_DWORD *)v8 + 4));
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = __p.__r_.__value_.__l.__size_;
        }
        uint64_t v13 = std::string::append(&v19, (const std::string::value_type *)p_p, size);
        long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
        v20.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v14;
        v13->__r_.__value_.__l.__size_ = 0;
        v13->__r_.__value_.__r.__words[2] = 0;
        v13->__r_.__value_.__r.__words[0] = 0;
        uint64_t v15 = std::string::append(&v20, ".");
        long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
        std::string::size_type v22 = v15->__r_.__value_.__r.__words[2];
        long long v21 = v16;
        v15->__r_.__value_.__l.__size_ = 0;
        v15->__r_.__value_.__r.__words[2] = 0;
        v15->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v20.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v19.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v18.__r_.__value_.__l.__data_);
        }
        *this = (void *)13;
        std::operator+<char>();
        if (SHIBYTE(v22) < 0) {
          operator delete((void *)v21);
        }
      }
    }
  }
}

void sub_19EAF45FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 57) < 0) {
    operator delete(*(void **)(v33 - 80));
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateCropResizeLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2, uint64_t a3)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 2, 2);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0) {
      operator delete(this[1]);
    }
    CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0) {
        operator delete(this[1]);
      }
      if (!*(unsigned char *)a2) {
        goto LABEL_22;
      }
      std::string::basic_string[abi:ne180100]<0>(v32, "CropResize");
      uint64_t v7 = (char *)a2 + 32;
      CoreML::validateInputOutputRankEquality((CoreML::Result *)this, (void *)a3, (uint64_t)v32, (uint64_t)a2 + 32);
      if (v33 < 0) {
        operator delete(v32[0]);
      }
      if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
        return;
      }
      if (*((char *)this + 31) < 0) {
        operator delete(this[1]);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "CropResize");
      CoreML::validateRankCount((uint64_t)this, (void *)a3, (uint64_t)__p, 5, -1, (uint64_t)a2 + 32);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
        return;
      }
      if (*((char *)this + 31) < 0) {
        operator delete(this[1]);
      }
      uint64_t v8 = *(void *)(a3 + 32);
      long long v9 = *(void **)(v8 + 8);
      uint64_t v6 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>((uint64_t)a2 + 32, v9);
      long long v10 = (const CoreML::Specification::NeuralNetworkLayer *)((char *)a2 + 40);
      if (v10 == v6
        || (uint64_t v6 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>((uint64_t)v7, *(void **)(v8 + 16)), v10 == v6)|| (v11 = *(_DWORD *)std::map<std::string,std::string>::at((uint64_t)v7, v9), uint64_t v6 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)std::map<std::string,std::string>::at((uint64_t)v7, *(void **)(*(void *)(a3 + 32) + 16)), v11 == *(_DWORD *)v6))
      {
LABEL_22:
        if (*(_DWORD *)(a3 + 140) == 212)
        {
          uint64_t v12 = *(uint64_t **)(a3 + 128);
        }
        else
        {
          CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
          uint64_t v12 = &CoreML::Specification::_CropResizeLayerParams_default_instance_;
        }
        if ((*((_DWORD *)v12 + 4) | 2) == 2)
        {
          CoreML::Result::Result((CoreML::Result *)this);
          return;
        }
        std::operator+<char>();
        uint64_t v13 = std::string::append(&v34, "' must be a vector of size 2 (i.e height, width) but is a vector of size ");
        long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
        v29.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v14;
        v13->__r_.__value_.__l.__size_ = 0;
        v13->__r_.__value_.__r.__words[2] = 0;
        v13->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v28, *((_DWORD *)v12 + 4));
        if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v15 = &v28;
        }
        else {
          uint64_t v15 = (std::string *)v28.__r_.__value_.__r.__words[0];
        }
        if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v28.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v28.__r_.__value_.__l.__size_;
        }
        uint64_t v17 = std::string::append(&v29, (const std::string::value_type *)v15, size);
        long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
        v30.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v18;
        v17->__r_.__value_.__l.__size_ = 0;
        v17->__r_.__value_.__r.__words[2] = 0;
        v17->__r_.__value_.__r.__words[0] = 0;
        std::string v19 = std::string::append(&v30, ".");
        long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
        *(void *)&__p[16] = *((void *)&v19->__r_.__value_.__l + 2);
        *(_OWORD *)std::string __p = v20;
        v19->__r_.__value_.__l.__size_ = 0;
        v19->__r_.__value_.__r.__words[2] = 0;
        v19->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v30.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v28.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v29.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v34.__r_.__value_.__l.__data_);
        }
        *this = (void *)13;
        std::operator+<char>();
      }
      else
      {
        long long v21 = *(long long **)(a3 + 112);
        if (*((char *)v21 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v29, *(const std::string::value_type **)v21, *((void *)v21 + 1));
        }
        else
        {
          long long v22 = *v21;
          v29.__r_.__value_.__r.__words[2] = *((void *)v21 + 2);
          *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v22;
        }
        int v23 = std::string::insert(&v29, 0, "Layer '");
        long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
        v30.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v24;
        v23->__r_.__value_.__l.__size_ = 0;
        v23->__r_.__value_.__r.__words[2] = 0;
        v23->__r_.__value_.__r.__words[0] = 0;
        std::string v25 = std::string::append(&v30, "' of type 'CropResize' expects equal ranks for its inputs, but they are not equal.");
        std::string::size_type v26 = v25->__r_.__value_.__r.__words[0];
        v34.__r_.__value_.__r.__words[0] = v25->__r_.__value_.__l.__size_;
        *(std::string::size_type *)((char *)v34.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v25->__r_.__value_.__r.__words[1] + 7);
        char v27 = HIBYTE(v25->__r_.__value_.__r.__words[2]);
        v25->__r_.__value_.__l.__size_ = 0;
        v25->__r_.__value_.__r.__words[2] = 0;
        v25->__r_.__value_.__r.__words[0] = 0;
        *(void *)&__p[15] = *(std::string::size_type *)((char *)v34.__r_.__value_.__r.__words + 7);
        *(void *)std::string __p = v26;
        *(void *)&__p[8] = v34.__r_.__value_.__r.__words[0];
        __p[23] = v27;
        if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v30.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v29.__r_.__value_.__l.__data_);
        }
        *this = (void *)13;
        std::operator+<char>();
      }
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
    }
  }
}

void sub_19EAF4AA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
}

void CoreML::NeuralNetworkSpecValidator::validateBranchLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2, uint64_t a3)
{
  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
    return;
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  uint64_t v6 = CoreML::Result::Result((CoreML::Result *)this);
  if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
    return;
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  if (!*(_DWORD *)(a3 + 72)
    || (uint64_t v7 = *(void *)(*(void *)(a3 + 80) + 8), v8 = *(unsigned int *)(v7 + 16), (int)v8 < 1))
  {
LABEL_12:
    int v11 = *(long long **)(*(void *)(a3 + 32) + 8);
    if (*((char *)v11 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v64, *(const std::string::value_type **)v11, *((void *)v11 + 1));
    }
    else
    {
      long long v12 = *v11;
      v64.__r_.__value_.__r.__words[2] = *((void *)v11 + 2);
      *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v12;
    }
    if (*(_DWORD *)(a3 + 140) == 605)
    {
      uint64_t v13 = *(uint64_t **)(a3 + 128);
    }
    else
    {
      CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
      uint64_t v13 = &CoreML::Specification::_BranchLayerParams_default_instance_;
    }
    long long v14 = (uint64_t **)((char *)a2 + 56);
    if ((void *)((char *)a2 + 64) == std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>((uint64_t)a2 + 56, &v64))
    {
      long long v18 = *(long long **)(a3 + 112);
      if (*((char *)v18 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v61, *(const std::string::value_type **)v18, *((void *)v18 + 1));
      }
      else
      {
        long long v19 = *v18;
        v61.__r_.__value_.__r.__words[2] = *((void *)v18 + 2);
        *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v19;
      }
      long long v24 = std::string::insert(&v61, 0, "Branch Layer '");
      long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
      v62.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v25;
      v24->__r_.__value_.__l.__size_ = 0;
      v24->__r_.__value_.__r.__words[2] = 0;
      v24->__r_.__value_.__r.__words[0] = 0;
      std::string::size_type v26 = std::string::append(&v62, "' requires the condition blob '");
      long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      v63.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string v28 = &v64;
      }
      else {
        std::string v28 = (std::string *)v64.__r_.__value_.__r.__words[0];
      }
      if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v64.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v64.__r_.__value_.__l.__size_;
      }
      std::string v30 = std::string::append(&v63, (const std::string::value_type *)v28, size);
      long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
      __p[0].__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v31;
      v30->__r_.__value_.__l.__size_ = 0;
      v30->__r_.__value_.__r.__words[2] = 0;
      v30->__r_.__value_.__r.__words[0] = 0;
      uint64_t v32 = std::string::append(__p, "' which is not present in the network prior to this layer.");
      long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
      unsigned int v57 = (char *)v32->__r_.__value_.__r.__words[2];
      *(_OWORD *)long long v56 = v33;
      v32->__r_.__value_.__l.__size_ = 0;
      v32->__r_.__value_.__r.__words[2] = 0;
      v32->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p[0].__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v63.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v62.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v61.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      if (v13[2]) {
        uint64_t v15 = (uint64_t *)v13[2];
      }
      else {
        uint64_t v15 = &CoreML::Specification::_NeuralNetwork_default_instance_;
      }
      if (v13[3]) {
        long long v16 = (uint64_t *)v13[3];
      }
      else {
        long long v16 = &CoreML::Specification::_NeuralNetwork_default_instance_;
      }
      if (*((_DWORD *)v15 + 6))
      {
        int v17 = *((_DWORD *)v16 + 6);
        CoreML::NeuralNetworkSpecValidator::NeuralNetworkSpecValidator((uint64_t)v56, (void *)a2 + 7, (uint64_t **)a2 + 1, *(unsigned char *)a2, *((_DWORD *)a2 + 20), (uint64_t **)a2 + 4);
        CoreML::NeuralNetworkSpecValidator::validateNeuralNetwork<CoreML::Specification::NeuralNetwork>((uint64_t)this, (CoreML::Specification::NeuralNetworkLayer *)v56, (uint64_t)v15);
        if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
        {
          if (*((char *)this + 31) < 0) {
            operator delete(this[1]);
          }
          if (v17 >= 1)
          {
            CoreML::NeuralNetworkSpecValidator::NeuralNetworkSpecValidator((uint64_t)__p, (void *)a2 + 7, (uint64_t **)a2 + 1, *(unsigned char *)a2, *((_DWORD *)a2 + 20), (uint64_t **)a2 + 4);
            CoreML::NeuralNetworkSpecValidator::validateNeuralNetwork<CoreML::Specification::NeuralNetwork>((uint64_t)this, (CoreML::Specification::NeuralNetworkLayer *)__p, (uint64_t)v16);
            if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
            {
              CoreML::NeuralNetworkSpecValidator::~NeuralNetworkSpecValidator((CoreML::NeuralNetworkSpecValidator *)__p);
              goto LABEL_86;
            }
            if (*((char *)this + 31) < 0) {
              operator delete(this[1]);
            }
            uint64_t v43 = v59;
            if (v59 != (uint64_t *)v60)
            {
              do
              {
                if (*((char *)v43 + 55) < 0) {
                  std::string::__init_copy_ctor_external(&v63, (const std::string::value_type *)v43[4], v43[5]);
                }
                else {
                  std::string v63 = *(std::string *)(v43 + 4);
                }
                if (&v55 != std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>((uint64_t)&v54, &v63))
                {
                  BOOL v44 = std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v14, &v63, (uint64_t)&v63);
                  uint64_t v45 = (void *)std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v59, &v63, (uint64_t)&v63)[7];
                  BOOL v46 = std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v59, &v63, (uint64_t)&v63);
                  std::set<std::string>::insert[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(v44 + 7, v45, v46 + 8);
                  int v47 = std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v14, &v63, (uint64_t)&v63);
                  size_t v48 = (void *)std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v54, &v63, (uint64_t)&v63)[7];
                  uint64_t v49 = std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v54, &v63, (uint64_t)&v63);
                  std::set<std::string>::insert[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(v47 + 7, v48, v49 + 8);
                }
                if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v63.__r_.__value_.__l.__data_);
                }
                uint64_t v50 = (uint64_t *)v43[1];
                if (v50)
                {
                  do
                  {
                    uint64_t v51 = v50;
                    uint64_t v50 = (uint64_t *)*v50;
                  }
                  while (v50);
                }
                else
                {
                  do
                  {
                    uint64_t v51 = (uint64_t *)v43[2];
                    BOOL v52 = *v51 == (void)v43;
                    uint64_t v43 = v51;
                  }
                  while (!v52);
                }
                uint64_t v43 = v51;
              }
              while (v51 != (uint64_t *)v60);
            }
            CoreML::NeuralNetworkSpecValidator::~NeuralNetworkSpecValidator((CoreML::NeuralNetworkSpecValidator *)__p);
          }
          CoreML::Result::Result((CoreML::Result *)this);
        }
LABEL_86:
        std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(v60[0]);
        std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(v58);
        std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(v57);
LABEL_87:
        if ((SHIBYTE(v64.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          return;
        }
        uint64_t v38 = (void *)v64.__r_.__value_.__r.__words[0];
        goto LABEL_89;
      }
      long long v22 = *(long long **)(a3 + 112);
      if (*((char *)v22 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v63, *(const std::string::value_type **)v22, *((void *)v22 + 1));
      }
      else
      {
        long long v23 = *v22;
        v63.__r_.__value_.__r.__words[2] = *((void *)v22 + 2);
        *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v23;
      }
      int v39 = std::string::insert(&v63, 0, "Branch Layer '");
      long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
      __p[0].__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v40;
      v39->__r_.__value_.__l.__size_ = 0;
      v39->__r_.__value_.__r.__words[2] = 0;
      v39->__r_.__value_.__r.__words[0] = 0;
      unsigned int v41 = std::string::append(__p, "' has an empty If branch");
      long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
      unsigned int v57 = (char *)v41->__r_.__value_.__r.__words[2];
      *(_OWORD *)long long v56 = v42;
      v41->__r_.__value_.__l.__size_ = 0;
      v41->__r_.__value_.__r.__words[2] = 0;
      v41->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p[0].__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v63.__r_.__value_.__l.__data_);
      }
    }
    *this = (void *)13;
    std::operator+<char>();
    if (SHIBYTE(v57) < 0) {
      operator delete(v56[0]);
    }
    goto LABEL_87;
  }
  long long v9 = (uint64_t *)(*(void *)(v7 + 24) + 8);
  while (1)
  {
    uint64_t v10 = *v9++;
    if (v10 >= 2) {
      break;
    }
    if (!--v8) {
      goto LABEL_12;
    }
  }
  long long v20 = *(long long **)(a3 + 112);
  if (*((char *)v20 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v64, *(const std::string::value_type **)v20, *((void *)v20 + 1));
  }
  else
  {
    long long v21 = *v20;
    v64.__r_.__value_.__r.__words[2] = *((void *)v20 + 2);
    *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v21;
  }
  std::string v34 = std::string::insert(&v64, 0, "Branch Layer '");
  long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
  __p[0].__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v35;
  v34->__r_.__value_.__l.__size_ = 0;
  v34->__r_.__value_.__r.__words[2] = 0;
  v34->__r_.__value_.__r.__words[0] = 0;
  uint64_t v36 = std::string::append(__p, "' input's length cannot be more than 1");
  long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
  unsigned int v57 = (char *)v36->__r_.__value_.__r.__words[2];
  *(_OWORD *)long long v56 = v37;
  v36->__r_.__value_.__l.__size_ = 0;
  v36->__r_.__value_.__r.__words[2] = 0;
  v36->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v64.__r_.__value_.__l.__data_);
  }
  *this = (void *)13;
  std::operator+<char>();
  if (SHIBYTE(v57) < 0)
  {
    uint64_t v38 = v56[0];
LABEL_89:
    operator delete(v38);
  }
}

void sub_19EAF51F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  if (*(char *)(v44 - 89) < 0) {
    operator delete(*(void **)(v44 - 112));
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::~NeuralNetworkSpecValidator(CoreML::NeuralNetworkSpecValidator *this)
{
}

uint64_t *std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  uint64_t v7 = a1 + 1;
  uint64_t v8 = a1 + 1;
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        uint64_t v10 = v5 + 4;
        if (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(a2, v5 + 4)) {
          break;
        }
        uint64_t v5 = *v7;
        uint64_t v8 = v7;
        if (!*v7) {
          goto LABEL_7;
        }
      }
      if (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v10, a2)) {
        break;
      }
      uint64_t v8 = v7 + 1;
      uint64_t v5 = v7[1];
      if (!v5) {
        goto LABEL_7;
      }
    }
  }
  else
  {
LABEL_7:
    int v11 = (uint64_t *)operator new(0x50uLL);
    v14[0] = v11;
    v14[1] = v6;
    char v15 = 0;
    long long v12 = (std::string *)(v11 + 4);
    if (*(char *)(a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)&v12->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
      v11[6] = *(void *)(a3 + 16);
    }
    v11[9] = 0;
    v11[8] = 0;
    v11[7] = (uint64_t)(v11 + 8);
    char v15 = 1;
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, (uint64_t)v7, v8, v11);
    v14[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)v14);
    return v11;
  }
  return (uint64_t *)v7;
}

void sub_19EAF5478(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::set<std::string>::insert[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    BOOL v4 = a2;
    uint64_t v5 = result;
    uint64_t v6 = result + 1;
    do
    {
      uint64_t result = std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>(v5, v6, v4 + 4, (uint64_t)(v4 + 4));
      uint64_t v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          uint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          BOOL v4 = v8;
        }
        while (!v9);
      }
      BOOL v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

void std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::set<std::string>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::set<std::string>>,0>(uint64_t a1)
{
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(*(char **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t *std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>(uint64_t *result, uint64_t *a2, void *a3, uint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v7 = (uint64_t **)result;
  uint64_t v8 = result + 1;
  if (result + 1 != a2)
  {
    uint64_t result = (uint64_t *)google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(a3, a2 + 4);
    if (!result)
    {
      uint64_t result = (uint64_t *)google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v6 + 4, a3);
      if (!result)
      {
        long long v19 = v6;
        long long v20 = v6;
        long long v14 = &v19;
        if (v6) {
          return result;
        }
LABEL_31:
        uint64_t v6 = v20;
        goto LABEL_32;
      }
      uint64_t v12 = v6[1];
      if (v12)
      {
        uint64_t v13 = (uint64_t *)v6[1];
        do
        {
          long long v14 = (uint64_t **)v13;
          uint64_t v13 = (uint64_t *)*v13;
        }
        while (v13);
      }
      else
      {
        int v17 = (uint64_t **)v6;
        do
        {
          long long v14 = (uint64_t **)v17[2];
          BOOL v16 = *v14 == (uint64_t *)v17;
          int v17 = v14;
        }
        while (!v16);
      }
      if (v14 == (uint64_t **)v8
        || (uint64_t result = (uint64_t *)google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(a3, v14 + 4), result))
      {
        if (v12)
        {
          long long v20 = (uint64_t *)v14;
        }
        else
        {
          long long v20 = v6;
          long long v14 = (uint64_t **)(v6 + 1);
        }
LABEL_30:
        if (*v14) {
          return result;
        }
        goto LABEL_31;
      }
LABEL_29:
      uint64_t result = std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__find_equal<std::string>((uint64_t)v7, &v20, a3);
      long long v14 = (uint64_t **)result;
      goto LABEL_30;
    }
  }
  uint64_t v9 = *v6;
  if (*v7 == v6)
  {
    int v11 = v6;
    goto LABEL_17;
  }
  if (v9)
  {
    uint64_t v10 = (uint64_t *)*v6;
    do
    {
      int v11 = v10;
      uint64_t v10 = (uint64_t *)v10[1];
    }
    while (v10);
  }
  else
  {
    char v15 = v6;
    do
    {
      int v11 = (uint64_t *)v15[2];
      BOOL v16 = *v11 == (void)v15;
      char v15 = v11;
    }
    while (v16);
  }
  uint64_t result = (uint64_t *)google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v11 + 4, a3);
  if (!result) {
    goto LABEL_29;
  }
LABEL_17:
  if (v9)
  {
    long long v20 = v11;
    long long v14 = (uint64_t **)(v11 + 1);
    goto LABEL_30;
  }
  long long v20 = v6;
  long long v14 = (uint64_t **)v6;
LABEL_32:
  std::__tree<std::string>::__construct_node<std::string const&>((uint64_t)&v18, (uint64_t)v7, a4);
  return std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(v7, (uint64_t)v6, v14, v18);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::set<std::string>>,0>((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

void CoreML::NeuralNetworkSpecValidator::validateTransposeLayer(void **this, uint64_t **a2)
{
  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a2, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0) {
      operator delete(this[1]);
    }
    CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a2, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0) {
        operator delete(this[1]);
      }
      if (*((_DWORD *)a2 + 35) == 985)
      {
        uint64_t v5 = a2[16];
      }
      else
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v4);
        uint64_t v5 = &CoreML::Specification::_TransposeLayerParams_default_instance_;
      }
      if (*((_DWORD *)v5 + 4))
      {
        CoreML::Result::Result((CoreML::Result *)this);
      }
      else
      {
        std::operator+<char>();
        uint64_t v6 = std::string::append(&v8, "' layer.");
        long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
        std::string::size_type v10 = v6->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v7;
        v6->__r_.__value_.__l.__size_ = 0;
        v6->__r_.__value_.__r.__words[2] = 0;
        v6->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v8.__r_.__value_.__l.__data_);
        }
        *this = (void *)13;
        std::operator+<char>();
        if (SHIBYTE(v10) < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
}

void sub_19EAF5910(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateCopyLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  CoreML::validateInputCount((CoreML *)this, a2, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0) {
      operator delete(this[1]);
    }
    CoreML::validateOutputCount((CoreML *)this, a2, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0) {
        operator delete(this[1]);
      }
      BOOL v4 = *(unsigned __int8 **)(*((void *)a2 + 4) + 8);
      uint64_t v5 = *(unsigned __int8 ***)(*((void *)a2 + 7) + 8);
      uint64_t v6 = v4[23];
      if ((v6 & 0x80u) == 0) {
        long long v7 = (unsigned __int8 *)v4[23];
      }
      else {
        long long v7 = (unsigned __int8 *)*((void *)v4 + 1);
      }
      std::string v8 = (unsigned __int8 *)*((unsigned __int8 *)v5 + 23);
      int v9 = (char)v8;
      if ((char)v8 < 0) {
        std::string v8 = v5[1];
      }
      if (v7 == v8)
      {
        if (v9 >= 0) {
          std::string::size_type v10 = *(unsigned __int8 **)(*((void *)a2 + 7) + 8);
        }
        else {
          std::string::size_type v10 = *v5;
        }
        if ((v6 & 0x80) == 0)
        {
          if (v4[23])
          {
            while (*v4 == *v10)
            {
              ++v4;
              ++v10;
              if (!--v6) {
                goto LABEL_26;
              }
            }
            goto LABEL_23;
          }
LABEL_26:
          std::operator+<char>();
          int v11 = std::string::append(&v13, "' has identical input and output names.");
          long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
          std::string::size_type v15 = v11->__r_.__value_.__r.__words[2];
          *(_OWORD *)std::string __p = v12;
          v11->__r_.__value_.__l.__size_ = 0;
          v11->__r_.__value_.__r.__words[2] = 0;
          v11->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v13.__r_.__value_.__l.__data_);
          }
          *this = (void *)13;
          std::operator+<char>();
          if (SHIBYTE(v15) < 0) {
            operator delete(__p[0]);
          }
          return;
        }
        if (!memcmp(*(const void **)v4, v10, *((void *)v4 + 1))) {
          goto LABEL_26;
        }
      }
LABEL_23:
      CoreML::Result::Result((CoreML::Result *)this);
    }
  }
}

void sub_19EAF5AEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateBatchedMatmulLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  CoreML::validateInputCount((CoreML *)this, a2, 1, 2);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0) {
      operator delete(this[1]);
    }
    CoreML::validateOutputCount((CoreML *)this, a2, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0) {
        operator delete(this[1]);
      }
      int v5 = *((_DWORD *)a2 + 6);
      int v6 = *((_DWORD *)a2 + 18);
      if (v5 == 2)
      {
        if (v6 == 2 && *((_DWORD *)a2 + 24) == 1)
        {
          uint64_t v7 = *((void *)a2 + 10);
          int v8 = *(_DWORD *)(*(void *)(v7 + 8) + 36);
          int v9 = *(_DWORD *)(*(void *)(v7 + 16) + 36);
          if (v8 > v9) {
            int v9 = v8;
          }
          if (v9 <= 2) {
            int v9 = 2;
          }
          if (*(_DWORD *)(*(void *)(*((void *)a2 + 13) + 8) + 36) != v9)
          {
            std::operator+<char>();
            std::string::size_type v10 = std::string::append(&v29, "': given ranks of the two inputs, rank of the output is incorrect.");
            long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
            std::string::size_type v31 = v10->__r_.__value_.__r.__words[2];
            *(_OWORD *)std::string __p = v11;
            v10->__r_.__value_.__l.__size_ = 0;
            v10->__r_.__value_.__r.__words[2] = 0;
            v10->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v29.__r_.__value_.__l.__data_);
            }
LABEL_33:
            *this = (void *)13;
            std::operator+<char>();
            if (SHIBYTE(v31) < 0) {
              operator delete(__p[0]);
            }
            return;
          }
        }
      }
      else
      {
        if (v5 == 1 && v6 == 1 && *((_DWORD *)a2 + 24) == 1)
        {
          if (*(_DWORD *)(*(void *)(*((void *)a2 + 13) + 8) + 36) != *(_DWORD *)(*(void *)(*((void *)a2 + 10) + 8)
                                                                                        + 36))
          {
            std::operator+<char>();
            long long v12 = std::string::append(&v29, "': has one input, in this case, output and input ranks must be equal but they are not.");
            long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
            std::string::size_type v31 = v12->__r_.__value_.__r.__words[2];
            *(_OWORD *)std::string __p = v13;
            v12->__r_.__value_.__l.__size_ = 0;
            v12->__r_.__value_.__r.__words[2] = 0;
            v12->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v29.__r_.__value_.__l.__data_);
            }
            goto LABEL_33;
          }
          goto LABEL_43;
        }
        if (v5 < 2) {
          goto LABEL_43;
        }
      }
      if (*((_DWORD *)a2 + 35) == 1045)
      {
        long long v14 = (uint64_t *)*((void *)a2 + 16);
      }
      else
      {
        inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
        long long v14 = &CoreML::Specification::_BatchedMatMulLayerParams_default_instance_;
      }
      if (*((unsigned char *)v14 + 50))
      {
        std::operator+<char>();
        std::string::size_type v15 = std::string::append(&v29, "': has two inputs and 'hasBias' flag is set to True.However, bias is only supported when the layer has 1 input.");
        long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
        std::string::size_type v31 = v15->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v16;
        v15->__r_.__value_.__l.__size_ = 0;
        v15->__r_.__value_.__r.__words[2] = 0;
        v15->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v29.__r_.__value_.__l.__data_);
        }
        goto LABEL_33;
      }
      if (*((int *)a2 + 6) >= 2)
      {
        if (*((_DWORD *)a2 + 35) == 1045)
        {
          int v17 = (uint64_t *)*((void *)a2 + 16);
        }
        else
        {
          inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
          int v17 = &CoreML::Specification::_BatchedMatMulLayerParams_default_instance_;
        }
        if (*((unsigned char *)v17 + 51))
        {
          std::operator+<char>();
          long long v18 = std::string::append(&v29, "': cannot use dynamic quantization with 2 inputs.");
          long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
          std::string::size_type v31 = v18->__r_.__value_.__r.__words[2];
          *(_OWORD *)std::string __p = v19;
          v18->__r_.__value_.__l.__size_ = 0;
          v18->__r_.__value_.__r.__words[2] = 0;
          v18->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v29.__r_.__value_.__l.__data_);
          }
          goto LABEL_33;
        }
      }
LABEL_43:
      if (*((_DWORD *)a2 + 35) == 1045)
      {
        long long v20 = (uint64_t *)*((void *)a2 + 16);
      }
      else
      {
        inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
        long long v20 = &CoreML::Specification::_BatchedMatMulLayerParams_default_instance_;
      }
      if (*((unsigned char *)v20 + 51))
      {
        if (*((_DWORD *)a2 + 35) == 1045)
        {
          long long v21 = (uint64_t *)*((void *)a2 + 16);
        }
        else
        {
          CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
          long long v21 = &CoreML::Specification::_BatchedMatMulLayerParams_default_instance_;
        }
        long long v22 = (uint64_t *)v21[2];
        if (v22) {
          long long v23 = v22;
        }
        else {
          long long v23 = &CoreML::Specification::_WeightParams_default_instance_;
        }
        std::string::basic_string[abi:ne180100]<0>(__p, "BatchedMatMul");
        CoreML::validateInt8Requirements((CoreML::Result *)this, (uint64_t)v23, (uint64_t)__p);
        if (SHIBYTE(v31) < 0) {
          operator delete(__p[0]);
        }
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
          return;
        }
        if (*((char *)this + 31) < 0) {
          operator delete(this[1]);
        }
      }
      if (*((_DWORD *)a2 + 6) == 1)
      {
        if (*((_DWORD *)a2 + 35) == 1045)
        {
          long long v24 = (uint64_t *)*((void *)a2 + 16);
        }
        else
        {
          CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
          long long v24 = &CoreML::Specification::_BatchedMatMulLayerParams_default_instance_;
        }
        std::string::size_type v26 = (const CoreML::Specification::WeightParams *)v24[2];
        long long v25 = (uint64_t *)v24[3];
        if (v26) {
          long long v27 = v26;
        }
        else {
          long long v27 = (const CoreML::Specification::WeightParams *)&CoreML::Specification::_WeightParams_default_instance_;
        }
        if (v25) {
          std::string v28 = v25;
        }
        else {
          std::string v28 = &CoreML::Specification::_WeightParams_default_instance_;
        }
        validateInnerProductWeightsBias(this, a2, v27, v28);
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
          return;
        }
        if (*((char *)this + 31) < 0) {
          operator delete(this[1]);
        }
      }
      CoreML::Result::Result((CoreML::Result *)this);
    }
  }
}

void sub_19EAF5F9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateConcatNDLayer(void **this, uint64_t **a2)
{
  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a2, 2, -1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0) {
      operator delete(this[1]);
    }
    CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a2, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0) {
        operator delete(this[1]);
      }
      if (*((_DWORD *)a2 + 35) == 980)
      {
        int v5 = a2[16];
      }
      else
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v4);
        int v5 = &CoreML::Specification::_ConcatNDLayerParams_default_instance_;
      }
      if (*((int *)a2 + 18) < 1
        || ((uint64_t v6 = *(int *)(a2[10][1] + 36), v7 = v5[2], v7 >= -v6) ? (v8 = v7 < v6) : (v8 = 0), v8))
      {
        CoreML::Result::Result((CoreML::Result *)this);
      }
      else
      {
        std::operator+<char>();
        int v9 = std::string::append(&v11, "' layer.");
        long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
        std::string::size_type v13 = v9->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v10;
        v9->__r_.__value_.__l.__size_ = 0;
        v9->__r_.__value_.__r.__words[2] = 0;
        v9->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v11.__r_.__value_.__l.__data_);
        }
        *this = (void *)13;
        std::operator+<char>();
        if (SHIBYTE(v13) < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
}

void sub_19EAF615C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateSoftmaxNDLayer(void **this, uint64_t **a2)
{
  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a2, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0) {
      operator delete(this[1]);
    }
    CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a2, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0) {
        operator delete(this[1]);
      }
      if (*((_DWORD *)a2 + 35) == 950)
      {
        int v5 = a2[16];
      }
      else
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v4);
        int v5 = &CoreML::Specification::_SoftmaxNDLayerParams_default_instance_;
      }
      if (*((int *)a2 + 18) < 1
        || ((uint64_t v6 = *(int *)(a2[10][1] + 36), v7 = v5[2], v7 >= -v6) ? (v8 = v7 < v6) : (v8 = 0), v8))
      {
        CoreML::Result::Result((CoreML::Result *)this);
      }
      else
      {
        std::operator+<char>();
        int v9 = std::string::append(&v11, "' layer.");
        long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
        std::string::size_type v13 = v9->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v10;
        v9->__r_.__value_.__l.__size_ = 0;
        v9->__r_.__value_.__r.__words[2] = 0;
        v9->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v11.__r_.__value_.__l.__data_);
        }
        *this = (void *)13;
        std::operator+<char>();
        if (SHIBYTE(v13) < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
}

void sub_19EAF6300(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateReverseLayer(void **this, uint64_t **a2)
{
  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a2, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0) {
      operator delete(this[1]);
    }
    CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a2, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0) {
        operator delete(this[1]);
      }
      if (*((_DWORD *)a2 + 35) == 960)
      {
        int v5 = a2[16];
      }
      else
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v4);
        int v5 = &CoreML::Specification::_ReverseLayerParams_default_instance_;
      }
      if (*((int *)a2 + 18) < 1 || *((_DWORD *)v5 + 4) == *(_DWORD *)(a2[10][1] + 36))
      {
        CoreML::Result::Result((CoreML::Result *)this);
      }
      else
      {
        std::operator+<char>();
        uint64_t v6 = std::string::append(&v8, "' layer.");
        long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
        std::string::size_type v10 = v6->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v7;
        v6->__r_.__value_.__l.__size_ = 0;
        v6->__r_.__value_.__r.__words[2] = 0;
        v6->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v8.__r_.__value_.__l.__data_);
        }
        *this = (void *)13;
        std::operator+<char>();
        if (SHIBYTE(v10) < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
}

void sub_19EAF649C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateFillLikeLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  CoreML::validateInputCount((CoreML *)this, a2, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0) {
      operator delete(this[1]);
    }
    CoreML::validateOutputCount((CoreML *)this, a2, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0) {
        operator delete(this[1]);
      }
      CoreML::Result::Result((CoreML::Result *)this);
    }
  }
}

void CoreML::NeuralNetworkSpecValidator::validateFillStaticLayer(void **this, uint64_t **a2)
{
  if ((*(_DWORD *)CoreML::Result::Result((CoreML::Result *)this) & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0) {
      operator delete(this[1]);
    }
    CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a2, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0) {
        operator delete(this[1]);
      }
      if (*((_DWORD *)a2 + 35) == 1085)
      {
        int v5 = a2[16];
      }
      else
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v4);
        int v5 = &CoreML::Specification::_FillStaticLayerParams_default_instance_;
      }
      if (*((_DWORD *)v5 + 4))
      {
        CoreML::Result::Result((CoreML::Result *)this);
      }
      else
      {
        std::operator+<char>();
        uint64_t v6 = std::string::append(&v8, "' layer.");
        long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
        std::string::size_type v10 = v6->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v7;
        v6->__r_.__value_.__l.__size_ = 0;
        v6->__r_.__value_.__r.__words[2] = 0;
        v6->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v8.__r_.__value_.__l.__data_);
        }
        *this = (void *)13;
        std::operator+<char>();
        if (SHIBYTE(v10) < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
}

void sub_19EAF66B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateReshapeLikeLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  CoreML::validateInputCount((CoreML *)this, a2, 2, 2);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0) {
      operator delete(this[1]);
    }
    CoreML::validateOutputCount((CoreML *)this, a2, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0) {
        operator delete(this[1]);
      }
      CoreML::Result::Result((CoreML::Result *)this);
    }
  }
}

void CoreML::NeuralNetworkSpecValidator::validateReshapeStaticLayer(void **this, uint64_t **a2)
{
  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a2, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0) {
      operator delete(this[1]);
    }
    CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a2, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0) {
        operator delete(this[1]);
      }
      if (*((_DWORD *)a2 + 35) == 1140)
      {
        int v5 = a2[16];
      }
      else
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v4);
        int v5 = &CoreML::Specification::_ReshapeStaticLayerParams_default_instance_;
      }
      if (*((_DWORD *)v5 + 4))
      {
        CoreML::Result::Result((CoreML::Result *)this);
      }
      else
      {
        std::operator+<char>();
        uint64_t v6 = std::string::append(&v8, "' layer.");
        long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
        std::string::size_type v10 = v6->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v7;
        v6->__r_.__value_.__l.__size_ = 0;
        v6->__r_.__value_.__r.__words[2] = 0;
        v6->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v8.__r_.__value_.__l.__data_);
        }
        *this = (void *)13;
        std::operator+<char>();
        if (SHIBYTE(v10) < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
}

void sub_19EAF68CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateWhereLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  CoreML::validateInputCount((CoreML *)this, a2, 3, 3);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0) {
      operator delete(this[1]);
    }
    CoreML::validateOutputCount((CoreML *)this, a2, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0) {
        operator delete(this[1]);
      }
      CoreML::Result::Result((CoreML::Result *)this);
    }
  }
}

void CoreML::NeuralNetworkSpecValidator::validateBroadcastToStaticLayer(void **this, uint64_t **a2)
{
  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a2, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0) {
      operator delete(this[1]);
    }
    CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a2, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0) {
        operator delete(this[1]);
      }
      if (*((_DWORD *)a2 + 35) == 1105)
      {
        int v5 = a2[16];
      }
      else
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v4);
        int v5 = &CoreML::Specification::_BroadcastToStaticLayerParams_default_instance_;
      }
      if (*((_DWORD *)v5 + 4))
      {
        CoreML::Result::Result((CoreML::Result *)this);
      }
      else
      {
        std::operator+<char>();
        uint64_t v6 = std::string::append(&v8, "' layer.");
        long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
        std::string::size_type v10 = v6->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v7;
        v6->__r_.__value_.__l.__size_ = 0;
        v6->__r_.__value_.__r.__words[2] = 0;
        v6->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v8.__r_.__value_.__l.__data_);
        }
        *this = (void *)13;
        std::operator+<char>();
        if (SHIBYTE(v10) < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
}

void sub_19EAF6AE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateScatterLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2, uint64_t a3)
{
  v26[2] = *MEMORY[0x1E4F143B8];
  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 3, 3);
  if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
    return;
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
    return;
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  if (!*(unsigned char *)a2) {
    goto LABEL_16;
  }
  long long v24 = 0;
  long long v25 = 0uLL;
  int v6 = *(_DWORD *)(a3 + 72);
  if (v6 < 1) {
    goto LABEL_16;
  }
  if (v6 != 3)
  {
    std::string::basic_string[abi:ne180100]<0>(&v23, "Scatter layer must have 3 input tensor fields filled");
    *this = (void *)13;
    std::operator+<char>();
LABEL_19:
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::size_type v10 = (void *)v23.__r_.__value_.__r.__words[0];
LABEL_31:
      operator delete(v10);
      return;
    }
    return;
  }
  long long v7 = *(void **)(a3 + 80);
  int v8 = *(_DWORD *)(v7[1] + 36);
  if (v8 == *(_DWORD *)(v7[3] + 36) && *(_DWORD *)(v7[2] + 36) == 1)
  {
    int v9 = *(_DWORD *)(a3 + 96);
    if (v9 < 1) {
      goto LABEL_16;
    }
    if (v9 != 1)
    {
      std::string::basic_string[abi:ne180100]<0>(&v23, "Scatter layer must have 1 output tensor fields filled");
      *this = (void *)13;
      std::operator+<char>();
      goto LABEL_19;
    }
    if (v8 == *(_DWORD *)(*(void *)(*(void *)(a3 + 104) + 8) + 36))
    {
LABEL_16:
      CoreML::Result::Result((CoreML::Result *)this);
      return;
    }
    long long v18 = *(long long **)(a3 + 112);
    if (*((char *)v18 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v18, *((void *)v18 + 1));
    }
    else
    {
      long long v19 = *v18;
      __p.__r_.__value_.__r.__words[2] = *((void *)v18 + 2);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v19;
    }
    long long v20 = std::string::insert(&__p, 0, "Output rank of Scatter layer '");
    long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v23.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v15 = std::string::append(&v23, "' does not match container input.");
  }
  else
  {
    std::string v11 = *(long long **)(a3 + 112);
    if (*((char *)v11 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v11, *((void *)v11 + 1));
    }
    else
    {
      long long v12 = *v11;
      __p.__r_.__value_.__r.__words[2] = *((void *)v11 + 2);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v12;
    }
    std::string::size_type v13 = std::string::insert(&__p, 0, "Input ranks of Scatter layer '");
    long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v23.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v15 = std::string::append(&v23, "' are invalid.");
  }
  long long v16 = (void *)v15->__r_.__value_.__r.__words[0];
  v26[0] = v15->__r_.__value_.__l.__size_;
  *(void *)((char *)v26 + 7) = *(std::string::size_type *)((char *)&v15->__r_.__value_.__r.__words[1] + 7);
  char v17 = HIBYTE(v15->__r_.__value_.__r.__words[2]);
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  *(void *)((char *)&v25 + 7) = *(void *)((char *)v26 + 7);
  long long v24 = v16;
  *(void *)&long long v25 = v26[0];
  HIBYTE(v25) = v17;
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *this = (void *)13;
  std::operator+<char>();
  if (SHIBYTE(v25) < 0)
  {
    std::string::size_type v10 = v24;
    goto LABEL_31;
  }
}

void sub_19EAF6E20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
}

void CoreML::NeuralNetworkSpecValidator::validateStackLayer(void **this, uint64_t **a2)
{
  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a2, 2, -1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0) {
      operator delete(this[1]);
    }
    CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a2, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0) {
        operator delete(this[1]);
      }
      if (*((_DWORD *)a2 + 35) == 925)
      {
        int v5 = a2[16];
      }
      else
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v4);
        int v5 = &CoreML::Specification::_StackLayerParams_default_instance_;
      }
      if (*((int *)a2 + 18) >= 1)
      {
        int v6 = a2[10];
        uint64_t v7 = v6[2];
        uint64_t v8 = *(int *)(v6[1] + 36);
        if (v8 != *(_DWORD *)(v7 + 36))
        {
          std::operator+<char>();
          std::string::size_type v15 = std::string::append(&v17, "' layer.");
          long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
          std::string::size_type v19 = v15->__r_.__value_.__r.__words[2];
          *(_OWORD *)std::string __p = v16;
          v15->__r_.__value_.__l.__size_ = 0;
          v15->__r_.__value_.__r.__words[2] = 0;
          v15->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v17.__r_.__value_.__l.__data_);
          }
          goto LABEL_25;
        }
        uint64_t v9 = v5[2];
        int v10 = ~v8;
        uint64_t v11 = v8 + 1;
        if (v9 < v10 || v9 >= v11)
        {
          std::operator+<char>();
          std::string::size_type v13 = std::string::append(&v17, "' layer.");
          long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
          std::string::size_type v19 = v13->__r_.__value_.__r.__words[2];
          *(_OWORD *)std::string __p = v14;
          v13->__r_.__value_.__l.__size_ = 0;
          v13->__r_.__value_.__r.__words[2] = 0;
          v13->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v17.__r_.__value_.__l.__data_);
          }
LABEL_25:
          *this = (void *)13;
          std::operator+<char>();
          if (SHIBYTE(v19) < 0) {
            operator delete(__p[0]);
          }
          return;
        }
      }
      CoreML::Result::Result((CoreML::Result *)this);
    }
  }
}

void sub_19EAF7094(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateSplitNDLayer(void **this, uint64_t **a2)
{
  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a2, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0) {
      operator delete(this[1]);
    }
    CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a2, 2, -1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0) {
        operator delete(this[1]);
      }
      if (*((_DWORD *)a2 + 35) == 975)
      {
        int v5 = a2[16];
      }
      else
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v4);
        int v5 = &CoreML::Specification::_SplitNDLayerParams_default_instance_;
      }
      uint64_t v6 = *((unsigned int *)v5 + 4);
      if ((int)v6 < 1)
      {
        uint64_t v6 = v5[6];
        if (!v6)
        {
          std::operator+<char>();
          long long v14 = std::string::append(&v16, "' layer.");
          long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
          std::string::size_type v18 = v14->__r_.__value_.__r.__words[2];
          *(_OWORD *)std::string __p = v15;
          v14->__r_.__value_.__l.__size_ = 0;
          v14->__r_.__value_.__r.__words[2] = 0;
          v14->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v16.__r_.__value_.__l.__data_);
          }
          goto LABEL_29;
        }
      }
      if (*((int *)a2 + 18) >= 1)
      {
        uint64_t v7 = *(int *)(a2[10][1] + 36);
        uint64_t v8 = v5[5];
        if (v8 < -v7 || v8 >= v7)
        {
          std::operator+<char>();
          int v10 = std::string::append(&v16, "' layer.");
          long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
          std::string::size_type v18 = v10->__r_.__value_.__r.__words[2];
          *(_OWORD *)std::string __p = v11;
          v10->__r_.__value_.__l.__size_ = 0;
          v10->__r_.__value_.__r.__words[2] = 0;
          v10->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v16.__r_.__value_.__l.__data_);
          }
LABEL_29:
          *this = (void *)13;
          std::operator+<char>();
          if (SHIBYTE(v18) < 0) {
            operator delete(__p[0]);
          }
          return;
        }
      }
      if (v6 != *((_DWORD *)a2 + 12))
      {
        std::operator+<char>();
        long long v12 = std::string::append(&v16, "' layer.");
        long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
        std::string::size_type v18 = v12->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v13;
        v12->__r_.__value_.__l.__size_ = 0;
        v12->__r_.__value_.__r.__words[2] = 0;
        v12->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v16.__r_.__value_.__l.__data_);
        }
        goto LABEL_29;
      }
      CoreML::Result::Result((CoreML::Result *)this);
    }
  }
}

void sub_19EAF733C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateClipLayer(void **this, uint64_t **a2)
{
  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a2, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0) {
      operator delete(this[1]);
    }
    CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a2, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0) {
        operator delete(this[1]);
      }
      if (*((_DWORD *)a2 + 35) == 660)
      {
        int v5 = a2[16];
      }
      else
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v4);
        int v5 = &CoreML::Specification::_ClipLayerParams_default_instance_;
      }
      if (*((float *)v5 + 4) <= *((float *)v5 + 5))
      {
        CoreML::Result::Result((CoreML::Result *)this);
      }
      else
      {
        std::operator+<char>();
        uint64_t v6 = std::string::append(&v8, "' layer.");
        long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
        std::string::size_type v10 = v6->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v7;
        v6->__r_.__value_.__l.__size_ = 0;
        v6->__r_.__value_.__r.__words[2] = 0;
        v6->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v8.__r_.__value_.__l.__data_);
        }
        *this = (void *)13;
        std::operator+<char>();
        if (SHIBYTE(v10) < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
}

void sub_19EAF74D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateSliceStaticLayer(void **this, uint64_t **a2)
{
  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a2, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0) {
      operator delete(this[1]);
    }
    CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a2, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0) {
        operator delete(this[1]);
      }
      if (*((_DWORD *)a2 + 35) == 995)
      {
        int v5 = a2[16];
      }
      else
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v4);
        int v5 = &CoreML::Specification::_SliceStaticLayerParams_default_instance_;
      }
      if (*((_DWORD *)v5 + 4))
      {
        if (*((_DWORD *)v5 + 16))
        {
          if (*((_DWORD *)v5 + 28))
          {
            if (*((_DWORD *)v5 + 10))
            {
              if (*((_DWORD *)v5 + 22))
              {
                CoreML::Result::Result((CoreML::Result *)this);
                return;
              }
              std::operator+<char>();
              long long v14 = std::string::append(&v16, "' layer.");
              long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
              std::string::size_type v18 = v14->__r_.__value_.__r.__words[2];
              *(_OWORD *)std::string __p = v15;
              v14->__r_.__value_.__l.__size_ = 0;
              v14->__r_.__value_.__r.__words[2] = 0;
              v14->__r_.__value_.__r.__words[0] = 0;
              if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v16.__r_.__value_.__l.__data_);
              }
            }
            else
            {
              std::operator+<char>();
              long long v12 = std::string::append(&v16, "' layer.");
              long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
              std::string::size_type v18 = v12->__r_.__value_.__r.__words[2];
              *(_OWORD *)std::string __p = v13;
              v12->__r_.__value_.__l.__size_ = 0;
              v12->__r_.__value_.__r.__words[2] = 0;
              v12->__r_.__value_.__r.__words[0] = 0;
              if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v16.__r_.__value_.__l.__data_);
              }
            }
          }
          else
          {
            std::operator+<char>();
            std::string::size_type v10 = std::string::append(&v16, "' layer.");
            long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
            std::string::size_type v18 = v10->__r_.__value_.__r.__words[2];
            *(_OWORD *)std::string __p = v11;
            v10->__r_.__value_.__l.__size_ = 0;
            v10->__r_.__value_.__r.__words[2] = 0;
            v10->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v16.__r_.__value_.__l.__data_);
            }
          }
        }
        else
        {
          std::operator+<char>();
          std::string v8 = std::string::append(&v16, "' layer.");
          long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
          std::string::size_type v18 = v8->__r_.__value_.__r.__words[2];
          *(_OWORD *)std::string __p = v9;
          v8->__r_.__value_.__l.__size_ = 0;
          v8->__r_.__value_.__r.__words[2] = 0;
          v8->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v16.__r_.__value_.__l.__data_);
          }
        }
      }
      else
      {
        std::operator+<char>();
        uint64_t v6 = std::string::append(&v16, "' layer.");
        long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
        std::string::size_type v18 = v6->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v7;
        v6->__r_.__value_.__l.__size_ = 0;
        v6->__r_.__value_.__r.__words[2] = 0;
        v6->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v16.__r_.__value_.__l.__data_);
        }
      }
      *this = (void *)13;
      std::operator+<char>();
      if (SHIBYTE(v18) < 0) {
        operator delete(__p[0]);
      }
    }
  }
}

void sub_19EAF782C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateSliceDynamicLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  CoreML::validateInputCount((CoreML *)this, a2, 2, 7);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0) {
      operator delete(this[1]);
    }
    CoreML::validateOutputCount((CoreML *)this, a2, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0) {
        operator delete(this[1]);
      }
      CoreML::Result::Result((CoreML::Result *)this);
    }
  }
}

void CoreML::NeuralNetworkSpecValidator::validateTileLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  CoreML::validateInputCount((CoreML *)this, a2, 1, 2);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0) {
      operator delete(this[1]);
    }
    CoreML::validateOutputCount((CoreML *)this, a2, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0) {
        operator delete(this[1]);
      }
      CoreML::Result::Result((CoreML::Result *)this);
    }
  }
}

void CoreML::NeuralNetworkSpecValidator::validateSlidingWindowsLayer(void **this, uint64_t **a2)
{
  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a2, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0) {
      operator delete(this[1]);
    }
    CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a2, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0) {
        operator delete(this[1]);
      }
      if (*((_DWORD *)a2 + 35) == 1005)
      {
        int v5 = a2[16];
      }
      else
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v4);
        int v5 = &CoreML::Specification::_SlidingWindowsLayerParams_default_instance_;
      }
      if (*((int *)a2 + 18) < 1
        || ((uint64_t v6 = *(int *)(a2[10][1] + 36), v7 = v5[2], v7 >= -v6) ? (v8 = v7 < v6) : (v8 = 0), v8))
      {
        CoreML::Result::Result((CoreML::Result *)this);
      }
      else
      {
        std::operator+<char>();
        long long v9 = std::string::append(&v11, "' layer.");
        long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
        std::string::size_type v13 = v9->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v10;
        v9->__r_.__value_.__l.__size_ = 0;
        v9->__r_.__value_.__r.__words[2] = 0;
        v9->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v11.__r_.__value_.__l.__data_);
        }
        *this = (void *)13;
        std::operator+<char>();
        if (SHIBYTE(v13) < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
}

void sub_19EAF7B28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateReductionTypeLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  CoreML::validateInputCount((CoreML *)this, a2, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
    return;
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  CoreML::validateOutputCount((CoreML *)this, a2, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
    return;
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  if (*((int *)a2 + 18) < 1) {
    goto LABEL_165;
  }
  uint64_t v4 = *(int *)(*(void *)(*((void *)a2 + 10) + 8) + 36);
  std::operator+<char>();
  int v5 = std::string::append(&v59, "' layer.");
  long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  std::string::size_type v61 = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v59.__r_.__value_.__l.__data_);
  }
  int v7 = *((_DWORD *)a2 + 35);
  char v8 = 1;
  if (v7 > 1274)
  {
    if (v7 <= 1284)
    {
      if (v7 == 1275)
      {
        uint64_t v45 = *((void *)a2 + 16);
        uint64_t v46 = *(void *)(v45 + 24);
        if (v46) {
          int v47 = (void *)(v46 + 8);
        }
        else {
          int v47 = 0;
        }
        if (v46) {
          uint64_t v48 = v46 + 8 + 8 * *(int *)(v45 + 16);
        }
        else {
          uint64_t v48 = 0;
        }
        if (v47 != (void *)v48)
        {
          while (*v47 >= -(int)v4 && *v47 < v4)
          {
            if (++v47 == (void *)v48) {
              goto LABEL_162;
            }
          }
          goto LABEL_160;
        }
      }
      else if (v7 == 1280)
      {
        uint64_t v21 = *((void *)a2 + 16);
        uint64_t v22 = *(void *)(v21 + 24);
        std::string v23 = v22 ? (void *)(v22 + 8) : 0;
        uint64_t v24 = v22 ? v22 + 8 + 8 * *(int *)(v21 + 16) : 0;
        if (v23 != (void *)v24)
        {
          while (*v23 >= -(int)v4 && *v23 < v4)
          {
            if (++v23 == (void *)v24) {
              goto LABEL_162;
            }
          }
          goto LABEL_160;
        }
      }
    }
    else
    {
      switch(v7)
      {
        case 1285:
          uint64_t v33 = *((void *)a2 + 16);
          uint64_t v34 = *(void *)(v33 + 24);
          if (v34) {
            long long v35 = (void *)(v34 + 8);
          }
          else {
            long long v35 = 0;
          }
          if (v34) {
            uint64_t v36 = v34 + 8 + 8 * *(int *)(v33 + 16);
          }
          else {
            uint64_t v36 = 0;
          }
          if (v35 != (void *)v36)
          {
            while (*v35 >= -(int)v4 && *v35 < v4)
            {
              if (++v35 == (void *)v36) {
                goto LABEL_162;
              }
            }
            goto LABEL_160;
          }
          break;
        case 1290:
          uint64_t v37 = *((void *)a2 + 16);
          uint64_t v38 = *(void *)(v37 + 24);
          if (v38) {
            int v39 = (void *)(v38 + 8);
          }
          else {
            int v39 = 0;
          }
          if (v38) {
            uint64_t v40 = v38 + 8 + 8 * *(int *)(v37 + 16);
          }
          else {
            uint64_t v40 = 0;
          }
          if (v39 != (void *)v40)
          {
            while (*v39 >= -(int)v4 && *v39 < v4)
            {
              if (++v39 == (void *)v40) {
                goto LABEL_162;
              }
            }
            goto LABEL_160;
          }
          break;
        case 1295:
          uint64_t v13 = *((void *)a2 + 16);
          uint64_t v14 = *(void *)(v13 + 24);
          long long v15 = v14 ? (void *)(v14 + 8) : 0;
          uint64_t v16 = v14 ? v14 + 8 + 8 * *(int *)(v13 + 16) : 0;
          if (v15 != (void *)v16)
          {
            while (*v15 >= -(int)v4 && *v15 < v4)
            {
              if (++v15 == (void *)v16) {
                goto LABEL_162;
              }
            }
            goto LABEL_160;
          }
          break;
      }
    }
  }
  else if (v7 <= 1259)
  {
    if (v7 == 1250)
    {
      uint64_t v41 = *((void *)a2 + 16);
      uint64_t v42 = *(void *)(v41 + 24);
      if (v42) {
        uint64_t v43 = (void *)(v42 + 8);
      }
      else {
        uint64_t v43 = 0;
      }
      if (v42) {
        uint64_t v44 = v42 + 8 + 8 * *(int *)(v41 + 16);
      }
      else {
        uint64_t v44 = 0;
      }
      if (v43 != (void *)v44)
      {
        while (*v43 >= -v4 && *v43 < v4)
        {
          if (++v43 == (void *)v44) {
            goto LABEL_162;
          }
        }
        goto LABEL_160;
      }
    }
    else if (v7 == 1255)
    {
      uint64_t v17 = *((void *)a2 + 16);
      uint64_t v18 = *(void *)(v17 + 24);
      std::string::size_type v19 = v18 ? (void *)(v18 + 8) : 0;
      uint64_t v20 = v18 ? v18 + 8 + 8 * *(int *)(v17 + 16) : 0;
      if (v19 != (void *)v20)
      {
        while (*v19 >= -v4 && *v19 < v4)
        {
          if (++v19 == (void *)v20) {
            goto LABEL_162;
          }
        }
        goto LABEL_160;
      }
    }
  }
  else
  {
    switch(v7)
    {
      case 1260:
        uint64_t v25 = *((void *)a2 + 16);
        uint64_t v26 = *(void *)(v25 + 24);
        if (v26) {
          long long v27 = (void *)(v26 + 8);
        }
        else {
          long long v27 = 0;
        }
        if (v26) {
          uint64_t v28 = v26 + 8 + 8 * *(int *)(v25 + 16);
        }
        else {
          uint64_t v28 = 0;
        }
        if (v27 != (void *)v28)
        {
          while (*v27 >= -v4 && *v27 < v4)
          {
            if (++v27 == (void *)v28) {
              goto LABEL_162;
            }
          }
          goto LABEL_160;
        }
        break;
      case 1265:
        uint64_t v29 = *((void *)a2 + 16);
        uint64_t v30 = *(void *)(v29 + 24);
        if (v30) {
          std::string::size_type v31 = (void *)(v30 + 8);
        }
        else {
          std::string::size_type v31 = 0;
        }
        if (v30) {
          uint64_t v32 = v30 + 8 + 8 * *(int *)(v29 + 16);
        }
        else {
          uint64_t v32 = 0;
        }
        if (v31 != (void *)v32)
        {
          while (*v31 >= -v4 && *v31 < v4)
          {
            if (++v31 == (void *)v32) {
              goto LABEL_162;
            }
          }
          goto LABEL_160;
        }
        break;
      case 1270:
        uint64_t v9 = *((void *)a2 + 16);
        uint64_t v10 = *(void *)(v9 + 24);
        std::string v11 = v10 ? (void *)(v10 + 8) : 0;
        uint64_t v12 = v10 ? v10 + 8 + 8 * *(int *)(v9 + 16) : 0;
        if (v11 != (void *)v12)
        {
          while (*v11 >= -v4 && *v11 < v4)
          {
            if (++v11 == (void *)v12) {
              goto LABEL_162;
            }
          }
LABEL_160:
          *this = (void *)13;
          std::operator+<char>();
          char v8 = 0;
        }
        break;
    }
  }
LABEL_162:
  if (SHIBYTE(v61) < 0) {
    operator delete(__p[0]);
  }
  if (v8) {
LABEL_165:
  }
    CoreML::Result::Result((CoreML::Result *)this);
}

void sub_19EAF8198(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateLoopLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2, uint64_t a3)
{
  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 0, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
    return;
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  long long v6 = CoreML::Result::Result((CoreML::Result *)this);
  if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
    return;
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  if (!*(_DWORD *)(a3 + 72)
    || (uint64_t v7 = *(void *)(*(void *)(a3 + 80) + 8), v8 = *(unsigned int *)(v7 + 16), (int)v8 < 1))
  {
LABEL_12:
    if (*(_DWORD *)(a3 + 140) == 615)
    {
      std::string v11 = *(uint64_t **)(a3 + 128);
    }
    else
    {
      CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
      std::string v11 = &CoreML::Specification::_LoopLayerParams_default_instance_;
    }
    uint64_t v12 = &CoreML::Specification::_NeuralNetwork_default_instance_;
    uint64_t v13 = v11[2];
    if (v11[3]) {
      uint64_t v14 = (uint64_t *)v11[3];
    }
    else {
      uint64_t v14 = &CoreML::Specification::_NeuralNetwork_default_instance_;
    }
    if (*(char *)(v13 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v103, *(const std::string::value_type **)v13, *(void *)(v13 + 8));
    }
    else
    {
      long long v15 = *(_OWORD *)v13;
      v103.__r_.__value_.__r.__words[2] = *(void *)(v13 + 16);
      *(_OWORD *)&v103.__r_.__value_.__l.__data_ = v15;
    }
    if (v11[4]) {
      uint64_t v12 = (uint64_t *)v11[4];
    }
    if (!*((_DWORD *)v12 + 6))
    {
      uint64_t v22 = *(long long **)(a3 + 112);
      if (*((char *)v22 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v102, *(const std::string::value_type **)v22, *((void *)v22 + 1));
      }
      else
      {
        long long v23 = *v22;
        v102.__r_.__value_.__r.__words[2] = *((void *)v22 + 2);
        *(_OWORD *)&v102.__r_.__value_.__l.__data_ = v23;
      }
      uint64_t v28 = std::string::insert(&v102, 0, "Loop Layer '");
      long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
      v88.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v29;
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      uint64_t v30 = std::string::append(&v88, "' has an empty body network");
      long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
      uint64_t v98 = (char *)v30->__r_.__value_.__r.__words[2];
      long long v97 = v31;
      v30->__r_.__value_.__l.__size_ = 0;
      v30->__r_.__value_.__r.__words[2] = 0;
      v30->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v88.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v102.__r_.__value_.__l.__data_);
      }
      goto LABEL_54;
    }
    int v16 = *((_DWORD *)v14 + 6);
    if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v103.__r_.__value_.__l.__size_)
      {
LABEL_26:
        if (v16 > 0) {
          goto LABEL_27;
        }
        goto LABEL_41;
      }
    }
    else if (*((unsigned char *)&v103.__r_.__value_.__s + 23))
    {
      goto LABEL_26;
    }
    if (v16 < 1)
    {
      if (v11[5] || *(_DWORD *)(a3 + 24))
      {
LABEL_27:
        uint64_t v17 = (uint64_t **)((char *)a2 + 56);
        CoreML::NeuralNetworkSpecValidator::NeuralNetworkSpecValidator((uint64_t)&v97, (void *)a2 + 7, (uint64_t **)a2 + 1, *(unsigned char *)a2, *((_DWORD *)a2 + 20), (uint64_t **)a2 + 4);
        if (v16 >= 1)
        {
          CoreML::NeuralNetworkSpecValidator::validateNeuralNetwork<CoreML::Specification::NeuralNetwork>((uint64_t)this, (CoreML::Specification::NeuralNetworkLayer *)&v97, (uint64_t)v14);
          if ((*(_DWORD *)this & 0xFFFFFFEF) != 0)
          {
LABEL_116:
            std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(v101[0]);
            std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(v99);
            std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(v98);
LABEL_117:
            if ((SHIBYTE(v103.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              return;
            }
            uint64_t v40 = (void *)v103.__r_.__value_.__r.__words[0];
            goto LABEL_119;
          }
          if (*((char *)this + 31) < 0) {
            operator delete(this[1]);
          }
          if ((void *)((char *)a2 + 64) == std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>((uint64_t)a2 + 56, &v103))
          {
            if (v101 == std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>((uint64_t)&v100, &v103))
            {
              uint64_t v43 = *(long long **)(a3 + 112);
              if (*((char *)v43 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(&v94, *(const std::string::value_type **)v43, *((void *)v43 + 1));
              }
              else
              {
                long long v44 = *v43;
                v94.__r_.__value_.__r.__words[2] = *((void *)v43 + 2);
                *(_OWORD *)&v94.__r_.__value_.__l.__data_ = v44;
              }
              size_t v78 = std::string::insert(&v94, 0, "Loop Layer '");
              long long v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
              v95.__r_.__value_.__r.__words[2] = v78->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v95.__r_.__value_.__l.__data_ = v79;
              v78->__r_.__value_.__l.__size_ = 0;
              v78->__r_.__value_.__r.__words[2] = 0;
              v78->__r_.__value_.__r.__words[0] = 0;
              unsigned int v80 = std::string::append(&v95, "': has conditionVar named '");
              long long v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
              __p.__r_.__value_.__r.__words[2] = v80->__r_.__value_.__r.__words[2];
              *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v81;
              v80->__r_.__value_.__l.__size_ = 0;
              v80->__r_.__value_.__r.__words[2] = 0;
              v80->__r_.__value_.__r.__words[0] = 0;
              if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                uint64_t v82 = &v103;
              }
              else {
                uint64_t v82 = (std::string *)v103.__r_.__value_.__r.__words[0];
              }
              if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type size = HIBYTE(v103.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type size = v103.__r_.__value_.__l.__size_;
              }
              uint64_t v84 = std::string::append(&__p, (const std::string::value_type *)v82, size);
              long long v85 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
              v102.__r_.__value_.__r.__words[2] = v84->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v102.__r_.__value_.__l.__data_ = v85;
              v84->__r_.__value_.__l.__size_ = 0;
              v84->__r_.__value_.__r.__words[2] = 0;
              v84->__r_.__value_.__r.__words[0] = 0;
              uint64_t v86 = std::string::append(&v102, "' which is not produced by the condition network");
              long long v87 = *(_OWORD *)&v86->__r_.__value_.__l.__data_;
              v88.__r_.__value_.__r.__words[2] = v86->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v87;
              v86->__r_.__value_.__l.__size_ = 0;
              v86->__r_.__value_.__r.__words[2] = 0;
              v86->__r_.__value_.__r.__words[0] = 0;
              if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v102.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v95.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v94.__r_.__value_.__l.__data_);
              }
              *this = (void *)13;
              std::operator+<char>();
              if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v88.__r_.__value_.__l.__data_);
              }
              goto LABEL_116;
            }
          }
          else
          {
            uint64_t v18 = std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2 + 7, &v103, (uint64_t)&v103);
            std::set<std::string>::set[abi:ne180100]((uint64_t *)&v88, (uint64_t)(v18 + 7));
            std::string::size_type v19 = std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v100, &v103, (uint64_t)&v103);
            std::set<std::string>::set[abi:ne180100]((uint64_t *)&v102, (uint64_t)(v19 + 7));
            if (std::operator==[abi:ne180100]<std::string,std::less<std::string>,std::allocator<std::string>>(&v88, (unsigned __int8 *)v102.__r_.__value_.__l.__data_, v102.__r_.__value_.__r.__words[2]))
            {
              uint64_t v20 = *(long long **)(a3 + 112);
              if (*((char *)v20 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(&v92, *(const std::string::value_type **)v20, *((void *)v20 + 1));
              }
              else
              {
                long long v21 = *v20;
                v92.__r_.__value_.__r.__words[2] = *((void *)v20 + 2);
                *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v21;
              }
              long long v68 = std::string::insert(&v92, 0, "Loop Layer '");
              long long v69 = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
              v93.__r_.__value_.__r.__words[2] = v68->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v69;
              v68->__r_.__value_.__l.__size_ = 0;
              v68->__r_.__value_.__r.__words[2] = 0;
              v68->__r_.__value_.__r.__words[0] = 0;
              long long v70 = std::string::append(&v93, "': has conditionVar named '");
              long long v71 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
              v94.__r_.__value_.__r.__words[2] = v70->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v94.__r_.__value_.__l.__data_ = v71;
              v70->__r_.__value_.__l.__size_ = 0;
              v70->__r_.__value_.__r.__words[2] = 0;
              v70->__r_.__value_.__r.__words[0] = 0;
              if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                uint64_t v72 = &v103;
              }
              else {
                uint64_t v72 = (std::string *)v103.__r_.__value_.__r.__words[0];
              }
              if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v73 = HIBYTE(v103.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v73 = v103.__r_.__value_.__l.__size_;
              }
              std::string v74 = std::string::append(&v94, (const std::string::value_type *)v72, v73);
              long long v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
              v95.__r_.__value_.__r.__words[2] = v74->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v95.__r_.__value_.__l.__data_ = v75;
              v74->__r_.__value_.__l.__size_ = 0;
              v74->__r_.__value_.__r.__words[2] = 0;
              v74->__r_.__value_.__r.__words[0] = 0;
              std::string::size_type v76 = std::string::append(&v95, "' which is not produced by the condition network");
              long long v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
              __p.__r_.__value_.__r.__words[2] = v76->__r_.__value_.__r.__words[2];
              *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v77;
              v76->__r_.__value_.__l.__size_ = 0;
              v76->__r_.__value_.__r.__words[2] = 0;
              v76->__r_.__value_.__r.__words[0] = 0;
              if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v95.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v94.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v93.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v92.__r_.__value_.__l.__data_);
              }
              *this = (void *)13;
              std::operator+<char>();
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
              std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy((char *)v102.__r_.__value_.__l.__size_);
              std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy((char *)v88.__r_.__value_.__l.__size_);
              goto LABEL_116;
            }
            std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy((char *)v102.__r_.__value_.__l.__size_);
            std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy((char *)v88.__r_.__value_.__l.__size_);
          }
          uint64_t v45 = v100;
          if (v100 != (uint64_t *)v101)
          {
            do
            {
              if (*((char *)v45 + 55) < 0) {
                std::string::__init_copy_ctor_external(&v88, (const std::string::value_type *)v45[4], v45[5]);
              }
              else {
                std::string v88 = *(std::string *)(v45 + 4);
              }
              uint64_t v46 = std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2 + 7, &v88, (uint64_t)&v88);
              int v47 = (void *)std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v100, &v88, (uint64_t)&v88)[7];
              uint64_t v48 = std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v100, &v88, (uint64_t)&v88);
              std::set<std::string>::insert[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(v46 + 7, v47, v48 + 8);
              if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v88.__r_.__value_.__l.__data_);
              }
              uint64_t v49 = (uint64_t *)v45[1];
              if (v49)
              {
                do
                {
                  uint64_t v50 = v49;
                  uint64_t v49 = (uint64_t *)*v49;
                }
                while (v49);
              }
              else
              {
                do
                {
                  uint64_t v50 = (uint64_t *)v45[2];
                  BOOL v51 = *v50 == (void)v45;
                  uint64_t v45 = v50;
                }
                while (!v51);
              }
              uint64_t v45 = v50;
            }
            while (v50 != (uint64_t *)v101);
          }
        }
        CoreML::NeuralNetworkSpecValidator::NeuralNetworkSpecValidator((uint64_t)&v88, (void *)a2 + 7, (uint64_t **)a2 + 1, *(unsigned char *)a2, *((_DWORD *)a2 + 20) + 1, (uint64_t **)a2 + 4);
        CoreML::NeuralNetworkSpecValidator::validateNeuralNetwork<CoreML::Specification::NeuralNetwork>((uint64_t)this, (CoreML::Specification::NeuralNetworkLayer *)&v88, (uint64_t)v12);
        if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
        {
          if (*((char *)this + 31) < 0) {
            operator delete(this[1]);
          }
          if (v16 <= 0)
          {
            long long v58 = v90;
            if (v90 != (uint64_t *)v91)
            {
              do
              {
                if (*((char *)v58 + 55) < 0) {
                  std::string::__init_copy_ctor_external(&v102, (const std::string::value_type *)v58[4], v58[5]);
                }
                else {
                  std::string v102 = *(std::string *)(v58 + 4);
                }
                std::string v59 = std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v17, &v102, (uint64_t)&v102);
                size_t v60 = (void *)std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v90, &v102, (uint64_t)&v102)[7];
                std::string::size_type v61 = std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v90, &v102, (uint64_t)&v102);
                std::set<std::string>::insert[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(v59 + 7, v60, v61 + 8);
                if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v102.__r_.__value_.__l.__data_);
                }
                std::string v62 = (uint64_t *)v58[1];
                if (v62)
                {
                  do
                  {
                    std::string v63 = v62;
                    std::string v62 = (uint64_t *)*v62;
                  }
                  while (v62);
                }
                else
                {
                  do
                  {
                    std::string v63 = (uint64_t *)v58[2];
                    BOOL v51 = *v63 == (void)v58;
                    long long v58 = v63;
                  }
                  while (!v51);
                }
                long long v58 = v63;
              }
              while (v63 != (uint64_t *)v91);
            }
          }
          else
          {
            BOOL v52 = v100;
            if (v100 != (uint64_t *)v101)
            {
              do
              {
                if (*((char *)v52 + 55) < 0) {
                  std::string::__init_copy_ctor_external(&v102, (const std::string::value_type *)v52[4], v52[5]);
                }
                else {
                  std::string v102 = *(std::string *)(v52 + 4);
                }
                if (v91 != std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>((uint64_t)&v90, &v102))
                {
                  uint64_t v53 = std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v17, &v102, (uint64_t)&v102);
                  std::string::size_type v54 = (void *)std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v90, &v102, (uint64_t)&v102)[7];
                  uint64_t v55 = std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v90, &v102, (uint64_t)&v102);
                  std::set<std::string>::insert[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(v53 + 7, v54, v55 + 8);
                }
                if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v102.__r_.__value_.__l.__data_);
                }
                long long v56 = (uint64_t *)v52[1];
                if (v56)
                {
                  do
                  {
                    unsigned int v57 = v56;
                    long long v56 = (uint64_t *)*v56;
                  }
                  while (v56);
                }
                else
                {
                  do
                  {
                    unsigned int v57 = (uint64_t *)v52[2];
                    BOOL v51 = *v57 == (void)v52;
                    BOOL v52 = v57;
                  }
                  while (!v51);
                }
                BOOL v52 = v57;
              }
              while (v57 != (uint64_t *)v101);
            }
          }
          CoreML::Result::Result((CoreML::Result *)this);
        }
        std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(v91[0]);
        std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(v89);
        std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy((char *)v88.__r_.__value_.__r.__words[2]);
        goto LABEL_116;
      }
      uint64_t v41 = *(long long **)(a3 + 112);
      if (*((char *)v41 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v102, *(const std::string::value_type **)v41, *((void *)v41 + 1));
      }
      else
      {
        long long v42 = *v41;
        v102.__r_.__value_.__r.__words[2] = *((void *)v41 + 2);
        *(_OWORD *)&v102.__r_.__value_.__l.__data_ = v42;
      }
      std::string v64 = std::string::insert(&v102, 0, "Loop Layer '");
      long long v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
      v88.__r_.__value_.__r.__words[2] = v64->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v65;
      v64->__r_.__value_.__l.__size_ = 0;
      v64->__r_.__value_.__r.__words[2] = 0;
      v64->__r_.__value_.__r.__words[0] = 0;
      std::string::size_type v66 = std::string::append(&v88, "': has no input, no condition network and max loop iterations is 0.");
      long long v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
      uint64_t v98 = (char *)v66->__r_.__value_.__r.__words[2];
      long long v97 = v67;
      v66->__r_.__value_.__l.__size_ = 0;
      v66->__r_.__value_.__r.__words[2] = 0;
      v66->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v88.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v102.__r_.__value_.__l.__data_);
      }
LABEL_54:
      *this = (void *)13;
      std::operator+<char>();
      if (SHIBYTE(v98) < 0) {
        operator delete((void *)v97);
      }
      goto LABEL_117;
    }
LABEL_41:
    uint64_t v26 = *(long long **)(a3 + 112);
    if (*((char *)v26 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v102, *(const std::string::value_type **)v26, *((void *)v26 + 1));
    }
    else
    {
      long long v27 = *v26;
      v102.__r_.__value_.__r.__words[2] = *((void *)v26 + 2);
      *(_OWORD *)&v102.__r_.__value_.__l.__data_ = v27;
    }
    uint64_t v32 = std::string::insert(&v102, 0, "Loop Layer '");
    long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v88.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v33;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    uint64_t v34 = std::string::append(&v88, "': condition variable must be provided if condition network exists and vice versa.");
    long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
    uint64_t v98 = (char *)v34->__r_.__value_.__r.__words[2];
    long long v97 = v35;
    v34->__r_.__value_.__l.__size_ = 0;
    v34->__r_.__value_.__r.__words[2] = 0;
    v34->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v88.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v102.__r_.__value_.__l.__data_);
    }
    goto LABEL_54;
  }
  uint64_t v9 = (uint64_t *)(*(void *)(v7 + 24) + 8);
  while (1)
  {
    uint64_t v10 = *v9++;
    if (v10 >= 2) {
      break;
    }
    if (!--v8) {
      goto LABEL_12;
    }
  }
  uint64_t v24 = *(long long **)(a3 + 112);
  if (*((char *)v24 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v103, *(const std::string::value_type **)v24, *((void *)v24 + 1));
  }
  else
  {
    long long v25 = *v24;
    v103.__r_.__value_.__r.__words[2] = *((void *)v24 + 2);
    *(_OWORD *)&v103.__r_.__value_.__l.__data_ = v25;
  }
  uint64_t v36 = std::string::insert(&v103, 0, "Loop Layer '");
  long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
  v88.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v37;
  v36->__r_.__value_.__l.__size_ = 0;
  v36->__r_.__value_.__r.__words[2] = 0;
  v36->__r_.__value_.__r.__words[0] = 0;
  uint64_t v38 = std::string::append(&v88, "' input's length cannot be more than 1");
  long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
  uint64_t v98 = (char *)v38->__r_.__value_.__r.__words[2];
  long long v97 = v39;
  v38->__r_.__value_.__l.__size_ = 0;
  v38->__r_.__value_.__r.__words[2] = 0;
  v38->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v88.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v103.__r_.__value_.__l.__data_);
  }
  *this = (void *)13;
  std::operator+<char>();
  if (SHIBYTE(v98) < 0)
  {
    uint64_t v40 = (void *)v97;
LABEL_119:
    operator delete(v40);
  }
}

void sub_19EAF8D84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  CoreML::NeuralNetworkSpecValidator::~NeuralNetworkSpecValidator((CoreML::NeuralNetworkSpecValidator *)(v59 - 240));
  if (*(char *)(v59 - 89) < 0) {
    operator delete(*(void **)(v59 - 112));
  }
  _Unwind_Resume(a1);
}

uint64_t *std::set<std::string>::set[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<std::string>::insert[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_19EAF8FD4(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

BOOL std::operator==[abi:ne180100]<std::string,std::less<std::string>,std::allocator<std::string>>(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1[2] != a3) {
    return 0;
  }
  unsigned int v3 = (unsigned __int8 *)(a1 + 1);
  uint64_t v4 = (unsigned __int8 *)*a1;
  if ((void *)*a1 == a1 + 1) {
    return 1;
  }
  do
  {
    BOOL result = std::equal_to<std::string>::operator()[abi:ne180100](v4 + 32, a2 + 32);
    if (!result) {
      break;
    }
    uint64_t v7 = (unsigned __int8 *)*((void *)v4 + 1);
    uint64_t v8 = v4;
    if (v7)
    {
      do
      {
        uint64_t v4 = v7;
        uint64_t v7 = *(unsigned __int8 **)v7;
      }
      while (v7);
    }
    else
    {
      do
      {
        uint64_t v4 = (unsigned __int8 *)*((void *)v8 + 2);
        BOOL v9 = *(void *)v4 == (void)v8;
        uint64_t v8 = v4;
      }
      while (!v9);
    }
    uint64_t v10 = (unsigned __int8 *)*((void *)a2 + 1);
    if (v10)
    {
      do
      {
        std::string v11 = v10;
        uint64_t v10 = *(unsigned __int8 **)v10;
      }
      while (v10);
    }
    else
    {
      do
      {
        std::string v11 = (unsigned __int8 *)*((void *)a2 + 2);
        BOOL v9 = *(void *)v11 == (void)a2;
        a2 = v11;
      }
      while (!v9);
    }
    a2 = v11;
  }
  while (v4 != v3);
  return result;
}

void CoreML::NeuralNetworkSpecValidator::validateLoopContinueBreakLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2, uint64_t a3)
{
  v21[2] = *MEMORY[0x1E4F143B8];
  if ((*(_DWORD *)CoreML::Result::Result((CoreML::Result *)this) & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0) {
      operator delete(this[1]);
    }
    CoreML::Result::Result((CoreML::Result *)this);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0) {
        operator delete(this[1]);
      }
      if (*((_DWORD *)a2 + 20))
      {
        CoreML::Result::Result((CoreML::Result *)this);
      }
      else
      {
        std::string::size_type v19 = 0;
        long long v20 = 0uLL;
        if (*(_DWORD *)(a3 + 140) == 620)
        {
          long long v6 = *(long long **)(a3 + 112);
          if (*((char *)v6 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v6, *((void *)v6 + 1));
          }
          else
          {
            long long v7 = *v6;
            __p.__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v7;
          }
          uint64_t v10 = std::string::insert(&__p, 0, "Loop Break Layer '");
          long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
          v18.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v11;
          v10->__r_.__value_.__l.__size_ = 0;
          v10->__r_.__value_.__r.__words[2] = 0;
          v10->__r_.__value_.__r.__words[0] = 0;
          uint64_t v12 = std::string::append(&v18, "' must be inside the bodyNetwork of a loop layer.");
        }
        else
        {
          uint64_t v8 = *(long long **)(a3 + 112);
          if (*((char *)v8 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v8, *((void *)v8 + 1));
          }
          else
          {
            long long v9 = *v8;
            __p.__r_.__value_.__r.__words[2] = *((void *)v8 + 2);
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v9;
          }
          uint64_t v13 = std::string::insert(&__p, 0, "Loop Continue Layer '");
          long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
          v18.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v14;
          v13->__r_.__value_.__l.__size_ = 0;
          v13->__r_.__value_.__r.__words[2] = 0;
          v13->__r_.__value_.__r.__words[0] = 0;
          uint64_t v12 = std::string::append(&v18, "' must be inside the bodyNetwork of a loop layer.");
        }
        long long v15 = (void *)v12->__r_.__value_.__r.__words[0];
        v21[0] = v12->__r_.__value_.__l.__size_;
        *(void *)((char *)v21 + 7) = *(std::string::size_type *)((char *)&v12->__r_.__value_.__r.__words[1] + 7);
        char v16 = HIBYTE(v12->__r_.__value_.__r.__words[2]);
        v12->__r_.__value_.__l.__size_ = 0;
        v12->__r_.__value_.__r.__words[2] = 0;
        v12->__r_.__value_.__r.__words[0] = 0;
        *(void *)((char *)&v20 + 7) = *(void *)((char *)v21 + 7);
        std::string::size_type v19 = v15;
        *(void *)&long long v20 = v21[0];
        HIBYTE(v2CoreML::Specification::Pipeline::New(this, 0) = v16;
        if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v18.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        *this = (void *)13;
        std::operator+<char>();
        if (SHIBYTE(v20) < 0) {
          operator delete(v19);
        }
      }
    }
  }
}

void sub_19EAF9310(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
}

void CoreML::NeuralNetworkSpecValidator::validateRankPreservingReshapeLayer(void **this, uint64_t **a2)
{
  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a2, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0) {
      operator delete(this[1]);
    }
    CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a2, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0) {
        operator delete(this[1]);
      }
      if (*((_DWORD *)a2 + 18) && *((_DWORD *)a2 + 24))
      {
        uint64_t v4 = CoreML::Result::Result((CoreML::Result *)this);
      }
      else
      {
        int v5 = a2[14];
        if (*((char *)v5 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)*v5, v5[1]);
        }
        else
        {
          long long v6 = *(_OWORD *)v5;
          __p.__r_.__value_.__r.__words[2] = v5[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v6;
        }
        long long v7 = std::string::insert(&__p, 0, "Layer '");
        long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
        v29.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v8;
        v7->__r_.__value_.__l.__size_ = 0;
        v7->__r_.__value_.__r.__words[2] = 0;
        v7->__r_.__value_.__r.__words[0] = 0;
        long long v9 = std::string::append(&v29, "' must have rank specified for its input and output.");
        long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
        std::string::size_type v31 = v9->__r_.__value_.__r.__words[2];
        long long v30 = v10;
        v9->__r_.__value_.__l.__size_ = 0;
        v9->__r_.__value_.__r.__words[2] = 0;
        v9->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v29.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        *this = (void *)13;
        uint64_t v4 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)std::operator+<char>();
        if (SHIBYTE(v31) < 0) {
          operator delete((void *)v30);
        }
      }
      if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
      {
        if (*((char *)this + 31) < 0) {
          operator delete(this[1]);
        }
        if (*((_DWORD *)a2 + 35) == 1150)
        {
          long long v11 = a2[16];
        }
        else
        {
          CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v4);
          long long v11 = &CoreML::Specification::_RankPreservingReshapeLayerParams_default_instance_;
        }
        int v12 = *((_DWORD *)v11 + 4);
        if (v12)
        {
          int v13 = *(_DWORD *)(a2[10][1] + 36);
          if (v13 == *(_DWORD *)(a2[13][1] + 36))
          {
            if (v13 == v12)
            {
              CoreML::Result::Result((CoreML::Result *)this);
              return;
            }
            std::string v18 = a2[14];
            if (*((char *)v18 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)*v18, v18[1]);
            }
            else
            {
              long long v19 = *(_OWORD *)v18;
              __p.__r_.__value_.__r.__words[2] = v18[2];
              *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v19;
            }
            uint64_t v24 = std::string::insert(&__p, 0, "RankPreservingReshape Layer '");
            long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
            v29.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v25;
            v24->__r_.__value_.__l.__size_ = 0;
            v24->__r_.__value_.__r.__words[2] = 0;
            v24->__r_.__value_.__r.__words[0] = 0;
            uint64_t v26 = std::string::append(&v29, "': input rank must be same as the length of the target shape property.");
            long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
            std::string::size_type v31 = v26->__r_.__value_.__r.__words[2];
            long long v30 = v27;
            v26->__r_.__value_.__l.__size_ = 0;
            v26->__r_.__value_.__r.__words[2] = 0;
            v26->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v29.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
          }
          else
          {
            char v16 = a2[14];
            if (*((char *)v16 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)*v16, v16[1]);
            }
            else
            {
              long long v17 = *(_OWORD *)v16;
              __p.__r_.__value_.__r.__words[2] = v16[2];
              *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v17;
            }
            long long v20 = std::string::insert(&__p, 0, "RankPreservingReshape Layer '");
            long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
            v29.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v21;
            v20->__r_.__value_.__l.__size_ = 0;
            v20->__r_.__value_.__r.__words[2] = 0;
            v20->__r_.__value_.__r.__words[0] = 0;
            uint64_t v22 = std::string::append(&v29, "': input and output rank must be equal.");
            long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
            std::string::size_type v31 = v22->__r_.__value_.__r.__words[2];
            long long v30 = v23;
            v22->__r_.__value_.__l.__size_ = 0;
            v22->__r_.__value_.__r.__words[2] = 0;
            v22->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v29.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
          }
        }
        else
        {
          std::operator+<char>();
          long long v14 = std::string::append(&v29, "' layer.");
          long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
          std::string::size_type v31 = v14->__r_.__value_.__r.__words[2];
          long long v30 = v15;
          v14->__r_.__value_.__l.__size_ = 0;
          v14->__r_.__value_.__r.__words[2] = 0;
          v14->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v29.__r_.__value_.__l.__data_);
          }
        }
        *this = (void *)13;
        std::operator+<char>();
        if (SHIBYTE(v31) < 0) {
          operator delete((void *)v30);
        }
      }
    }
  }
}

void sub_19EAF9770(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (*(char *)(v21 - 25) < 0) {
    operator delete(*(void **)(v21 - 48));
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateFlattenTo2DLayer(void **this, uint64_t **a2)
{
  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a2, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0) {
      operator delete(this[1]);
    }
    CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a2, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0) {
        operator delete(this[1]);
      }
      if (*((_DWORD *)a2 + 35) == 1130)
      {
        int v5 = a2[16];
      }
      else
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v4);
        int v5 = &CoreML::Specification::_FlattenTo2DLayerParams_default_instance_;
      }
      if (*((int *)a2 + 18) < 1
        || ((uint64_t v6 = *(int *)(a2[10][1] + 36), v7 = v5[2], v7 >= -v6) ? (v8 = v7 < v6) : (v8 = 0), v8))
      {
        CoreML::Result::Result((CoreML::Result *)this);
      }
      else
      {
        std::operator+<char>();
        long long v9 = std::string::append(&v11, "' layer.");
        long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
        std::string::size_type v13 = v9->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v10;
        v9->__r_.__value_.__l.__size_ = 0;
        v9->__r_.__value_.__r.__words[2] = 0;
        v9->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v11.__r_.__value_.__l.__data_);
        }
        *this = (void *)13;
        std::operator+<char>();
        if (SHIBYTE(v13) < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
}

void sub_19EAF995C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateExpandDimsLayer(void **this, uint64_t **a2)
{
  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a2, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0) {
      operator delete(this[1]);
    }
    CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a2, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0) {
        operator delete(this[1]);
      }
      if (*((_DWORD *)a2 + 35) == 1125)
      {
        int v5 = a2[16];
      }
      else
      {
        unint64_t inited = (unint64_t)CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
        int v5 = &CoreML::Specification::_ExpandDimsLayerParams_default_instance_;
      }
      if (*((_DWORD *)v5 + 4))
      {
        uint64_t v6 = 0;
        __p[1] = 0;
        std::string::size_type v86 = 0;
        __p[0] = &__p[1];
        while (1)
        {
          if (*((_DWORD *)a2 + 35) == 1125)
          {
            uint64_t v7 = a2[16];
          }
          else
          {
            unint64_t inited = (unint64_t)CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
            uint64_t v7 = &CoreML::Specification::_ExpandDimsLayerParams_default_instance_;
          }
          if (v6 >= *((int *)v7 + 4)) {
            break;
          }
          if (*((_DWORD *)a2 + 35) == 1125)
          {
            BOOL v8 = a2[16];
          }
          else
          {
            CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
            BOOL v8 = &CoreML::Specification::_ExpandDimsLayerParams_default_instance_;
          }
          int v9 = *(_DWORD *)(v8[3] + 8 * v6 + 8);
          long long v10 = (char *)__p[1];
          if (__p[1])
          {
            std::string v11 = &__p[1];
            do
            {
              int v12 = (void **)v10;
              std::string::size_type v13 = v11;
              int v14 = *((_DWORD *)v10 + 7);
              long long v15 = (void **)(v10 + 8);
              if (v14 >= v9)
              {
                long long v15 = v12;
                std::string v11 = v12;
              }
              long long v10 = (char *)*v15;
            }
            while (v10);
            if (v11 != &__p[1])
            {
              if (v14 < v9) {
                int v12 = v13;
              }
              if (*((_DWORD *)v12 + 7) <= v9)
              {
                uint64_t v21 = a2[14];
                if (*((char *)v21 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(&v82, (const std::string::value_type *)*v21, v21[1]);
                }
                else
                {
                  long long v22 = *(_OWORD *)v21;
                  v82.__r_.__value_.__r.__words[2] = v21[2];
                  *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v22;
                }
                std::string::size_type v61 = std::string::insert(&v82, 0, "ExpandDims Layer '");
                long long v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
                v83.__r_.__value_.__r.__words[2] = v61->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v62;
                v61->__r_.__value_.__l.__size_ = 0;
                v61->__r_.__value_.__r.__words[2] = 0;
                v61->__r_.__value_.__r.__words[0] = 0;
                std::string v63 = std::string::append(&v83, "': all the values in the 'axes' parameter must be unique.");
                long long v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
                v84.__r_.__value_.__r.__words[2] = v63->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v64;
                v63->__r_.__value_.__l.__size_ = 0;
                v63->__r_.__value_.__r.__words[2] = 0;
                v63->__r_.__value_.__r.__words[0] = 0;
                if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v83.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v82.__r_.__value_.__l.__data_);
                }
                goto LABEL_109;
              }
            }
          }
          unint64_t inited = (unint64_t)std::__tree<int>::__emplace_unique_key_args<int,int const&>((uint64_t *)__p, v9, v9);
          ++v6;
        }
        if (*((int *)a2 + 18) >= 1 && *((_DWORD *)a2 + 24) >= 1)
        {
          int v19 = *(_DWORD *)(a2[10][1] + 36);
          __int32 v81 = *(_DWORD *)(a2[13][1] + 36);
          if (*((_DWORD *)a2 + 35) == 1125)
          {
            long long v20 = a2[16];
          }
          else
          {
            unint64_t inited = (unint64_t)CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
            long long v20 = &CoreML::Specification::_ExpandDimsLayerParams_default_instance_;
          }
          uint64_t v27 = *((unsigned int *)v20 + 4);
          int v28 = v27 + v19;
          __int32 v29 = v81;
          if (v28 != v81)
          {
            uint64_t v59 = a2[14];
            if (*((char *)v59 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v82, (const std::string::value_type *)*v59, v59[1]);
            }
            else
            {
              long long v60 = *(_OWORD *)v59;
              v82.__r_.__value_.__r.__words[2] = v59[2];
              *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v60;
            }
            long long v67 = std::string::insert(&v82, 0, "ExpandDims Layer '");
            long long v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
            v83.__r_.__value_.__r.__words[2] = v67->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v68;
            v67->__r_.__value_.__l.__size_ = 0;
            v67->__r_.__value_.__r.__words[2] = 0;
            v67->__r_.__value_.__r.__words[0] = 0;
            long long v69 = std::string::append(&v83, "': input rank plus the length of the axes parameter must equal output rank.");
            long long v70 = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
            v84.__r_.__value_.__r.__words[2] = v69->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v70;
            v69->__r_.__value_.__l.__size_ = 0;
            v69->__r_.__value_.__r.__words[2] = 0;
            v69->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v83.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v82.__r_.__value_.__l.__data_);
            }
LABEL_109:
            *this = (void *)13;
            std::operator+<char>();
            if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v84.__r_.__value_.__l.__data_);
            }
            goto LABEL_130;
          }
          long long v30 = 0;
          std::string::size_type v31 = 0;
          unint64_t v32 = 0;
          uint64_t v33 = 0;
          do
          {
            if (*((_DWORD *)a2 + 35) == 1125)
            {
              uint64_t v34 = a2[16];
            }
            else
            {
              CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
              uint64_t v34 = &CoreML::Specification::_ExpandDimsLayerParams_default_instance_;
            }
            int v35 = *(_DWORD *)(v34[3] + 8 * v33 + 8);
            __int32 v36 = (v29 & (v35 >> 31)) + v35;
            size_t v37 = v31 - v30;
            unint64_t inited = (unint64_t)wmemchr(v30, v36, v37);
            if (inited) {
              uint64_t v38 = (__int32 *)inited;
            }
            else {
              uint64_t v38 = v31;
            }
            if (v38 != v31)
            {
              long long v65 = a2[14];
              if (*((char *)v65 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(&v82, (const std::string::value_type *)*v65, v65[1]);
              }
              else
              {
                long long v66 = *(_OWORD *)v65;
                v82.__r_.__value_.__r.__words[2] = v65[2];
                *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v66;
              }
              std::string::size_type v73 = std::string::insert(&v82, 0, "ExpandDims Layer '");
              long long v74 = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
              v83.__r_.__value_.__r.__words[2] = v73->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v74;
              v73->__r_.__value_.__l.__size_ = 0;
              v73->__r_.__value_.__r.__words[2] = 0;
              v73->__r_.__value_.__r.__words[0] = 0;
              long long v75 = std::string::append(&v83, "': axes parameter list cannot have the same value more than once.");
              long long v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
              v84.__r_.__value_.__r.__words[2] = v75->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v76;
              v75->__r_.__value_.__l.__size_ = 0;
              v75->__r_.__value_.__r.__words[2] = 0;
              v75->__r_.__value_.__r.__words[0] = 0;
              if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v83.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v82.__r_.__value_.__l.__data_);
              }
              goto LABEL_124;
            }
            if ((unint64_t)v31 >= v32)
            {
              unint64_t v39 = v37 + 1;
              if ((v37 + 1) >> 62) {
                std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
              }
              if ((uint64_t)(v32 - (void)v30) >> 1 > v39) {
                unint64_t v39 = (uint64_t)(v32 - (void)v30) >> 1;
              }
              if (v32 - (unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t inited = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t inited = v39;
              }
              if (inited) {
                unint64_t inited = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(inited);
              }
              else {
                uint64_t v40 = 0;
              }
              uint64_t v41 = (__int32 *)(inited + 4 * v37);
              __int32 *v41 = v36;
              long long v42 = v41 + 1;
              while (v31 != v30)
              {
                __int32 v43 = *--v31;
                *--uint64_t v41 = v43;
              }
              unint64_t v32 = inited + 4 * v40;
              if (v30) {
                operator delete(v30);
              }
              long long v30 = v41;
              std::string::size_type v31 = v42;
              __int32 v29 = v81;
            }
            else
            {
              *v31++ = v36;
            }
            ++v33;
          }
          while (v33 != v27);
          uint64_t v45 = v30 + 1;
          __int32 v44 = *v30;
          __int32 v46 = *v30;
          if (v30 != v31 && v45 != v31)
          {
            uint64_t v48 = v30 + 1;
            uint64_t v49 = v30;
            uint64_t v50 = v30 + 1;
            do
            {
              __int32 v52 = *v50++;
              __int32 v51 = v52;
              BOOL v53 = v46 < v52;
              if (v46 <= v52) {
                __int32 v46 = v51;
              }
              if (v53) {
                uint64_t v49 = v48;
              }
              uint64_t v48 = v50;
            }
            while (v50 != v31);
            __int32 v46 = *v49;
            std::string::size_type v54 = v30;
            uint64_t v55 = v30 + 1;
            do
            {
              __int32 v57 = *v55++;
              __int32 v56 = v57;
              if (v57 < v44)
              {
                __int32 v44 = v56;
                std::string::size_type v54 = v45;
              }
              uint64_t v45 = v55;
            }
            while (v55 != v31);
            __int32 v44 = *v54;
          }
          if (v46 < v29 && (v44 & 0x80000000) == 0)
          {
            char v58 = 1;
            goto LABEL_127;
          }
          long long v71 = a2[14];
          if (*((char *)v71 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v82, (const std::string::value_type *)*v71, v71[1]);
          }
          else
          {
            long long v72 = *(_OWORD *)v71;
            v82.__r_.__value_.__r.__words[2] = v71[2];
            *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v72;
          }
          long long v77 = std::string::insert(&v82, 0, "ExpandDims Layer '");
          long long v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
          v83.__r_.__value_.__r.__words[2] = v77->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v78;
          v77->__r_.__value_.__l.__size_ = 0;
          v77->__r_.__value_.__r.__words[2] = 0;
          v77->__r_.__value_.__r.__words[0] = 0;
          long long v79 = std::string::append(&v83, "': axes refers to a dimension that exceeds the output rank.");
          long long v80 = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
          v84.__r_.__value_.__r.__words[2] = v79->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v80;
          v79->__r_.__value_.__l.__size_ = 0;
          v79->__r_.__value_.__r.__words[2] = 0;
          v79->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v83.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v82.__r_.__value_.__l.__data_);
          }
LABEL_124:
          *this = (void *)13;
          std::operator+<char>();
          if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v84.__r_.__value_.__l.__data_);
          }
          char v58 = 0;
LABEL_127:
          if (v30) {
            operator delete(v30);
          }
          if ((v58 & 1) == 0)
          {
LABEL_130:
            std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((void *)__p[1]);
            return;
          }
        }
        CoreML::Result::Result((CoreML::Result *)this);
        goto LABEL_130;
      }
      long long v17 = a2[14];
      if (*((char *)v17 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v83, (const std::string::value_type *)*v17, v17[1]);
      }
      else
      {
        long long v18 = *(_OWORD *)v17;
        v83.__r_.__value_.__r.__words[2] = v17[2];
        *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v18;
      }
      long long v23 = std::string::insert(&v83, 0, "ExpandDims Layer '");
      long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v84.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      long long v25 = std::string::append(&v84, "': length of the 'axes' parameter cannot be 0.");
      long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      std::string::size_type v86 = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string __p = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v84.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v83.__r_.__value_.__l.__data_);
      }
      *this = (void *)13;
      std::operator+<char>();
      if (SHIBYTE(v86) < 0) {
        operator delete(__p[0]);
      }
    }
  }
}

void sub_19EAFA138(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,void *a33,int a34,__int16 a35,char a36,char a37)
{
  if (v37) {
    operator delete(v37);
  }
  std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy(a33);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<int>::__emplace_unique_key_args<int,int const&>(uint64_t *result, int a2, int a3)
{
  uint64_t v4 = (uint64_t **)result;
  uint64_t v6 = (uint64_t **)(result + 1);
  int v5 = (uint64_t *)result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        int v8 = *((_DWORD *)v5 + 7);
        if (v8 <= a2) {
          break;
        }
        int v5 = *v7;
        uint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      int v5 = v7[1];
      if (!v5)
      {
        uint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v7 = (uint64_t **)(result + 1);
LABEL_9:
    int v9 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v9 + 7) = a3;
    return std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(v4, (uint64_t)v7, v6, v9);
  }
  return result;
}

void CoreML::NeuralNetworkSpecValidator::validateSqueezeLayer(void **this, uint64_t **a2)
{
  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a2, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0) {
      operator delete(this[1]);
    }
    CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a2, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0) {
        operator delete(this[1]);
      }
      if (*((_DWORD *)a2 + 35) == 1120)
      {
        int v5 = a2[16];
      }
      else
      {
        unint64_t inited = (unint64_t)CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
        int v5 = &CoreML::Specification::_SqueezeLayerParams_default_instance_;
      }
      if (*((unsigned char *)v5 + 36))
      {
LABEL_11:
        CoreML::Result::Result((CoreML::Result *)this);
        return;
      }
      if (*((_DWORD *)a2 + 35) == 1120)
      {
        uint64_t v6 = a2[16];
      }
      else
      {
        unint64_t inited = (unint64_t)CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
        uint64_t v6 = &CoreML::Specification::_SqueezeLayerParams_default_instance_;
      }
      if (*((_DWORD *)v6 + 4))
      {
        uint64_t v7 = 0;
        __p[1] = 0;
        std::string::size_type v88 = 0;
        __p[0] = &__p[1];
        while (1)
        {
          if (*((_DWORD *)a2 + 35) == 1120)
          {
            int v8 = a2[16];
          }
          else
          {
            unint64_t inited = (unint64_t)CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
            int v8 = &CoreML::Specification::_SqueezeLayerParams_default_instance_;
          }
          if (v7 >= *((int *)v8 + 4)) {
            break;
          }
          if (*((_DWORD *)a2 + 35) == 1120)
          {
            int v9 = a2[16];
          }
          else
          {
            CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
            int v9 = &CoreML::Specification::_SqueezeLayerParams_default_instance_;
          }
          int v10 = *(_DWORD *)(v9[3] + 8 * v7 + 8);
          std::string v11 = (char *)__p[1];
          if (__p[1])
          {
            int v12 = &__p[1];
            do
            {
              std::string::size_type v13 = (void **)v11;
              int v14 = v12;
              int v15 = *((_DWORD *)v11 + 7);
              char v16 = (void **)(v11 + 8);
              if (v15 >= v10)
              {
                char v16 = v13;
                int v12 = v13;
              }
              std::string v11 = (char *)*v16;
            }
            while (v11);
            if (v12 != &__p[1])
            {
              if (v15 < v10) {
                std::string::size_type v13 = v14;
              }
              if (*((_DWORD *)v13 + 7) <= v10)
              {
                long long v22 = a2[14];
                if (*((char *)v22 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(&v84, (const std::string::value_type *)*v22, v22[1]);
                }
                else
                {
                  long long v23 = *(_OWORD *)v22;
                  v84.__r_.__value_.__r.__words[2] = v22[2];
                  *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v23;
                }
                std::string v63 = std::string::insert(&v84, 0, "Squeeze Layer '");
                long long v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
                v85.__r_.__value_.__r.__words[2] = v63->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v64;
                v63->__r_.__value_.__l.__size_ = 0;
                v63->__r_.__value_.__r.__words[2] = 0;
                v63->__r_.__value_.__r.__words[0] = 0;
                long long v65 = std::string::append(&v85, "': all the values in the 'axes' parameter must be unique.");
                long long v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
                v86.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v86.__r_.__value_.__l.__data_ = v66;
                v65->__r_.__value_.__l.__size_ = 0;
                v65->__r_.__value_.__r.__words[2] = 0;
                v65->__r_.__value_.__r.__words[0] = 0;
                if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v85.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v84.__r_.__value_.__l.__data_);
                }
                goto LABEL_119;
              }
            }
          }
          unint64_t inited = (unint64_t)std::__tree<int>::__emplace_unique_key_args<int,int const&>((uint64_t *)__p, v10, v10);
          ++v7;
        }
        if (*((int *)a2 + 18) >= 1 && *((_DWORD *)a2 + 24) >= 1)
        {
          __int32 v83 = *(_DWORD *)(a2[10][1] + 36);
          int v20 = *(_DWORD *)(a2[13][1] + 36);
          if (*((_DWORD *)a2 + 35) == 1120)
          {
            uint64_t v21 = a2[16];
          }
          else
          {
            unint64_t inited = (unint64_t)CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
            uint64_t v21 = &CoreML::Specification::_SqueezeLayerParams_default_instance_;
          }
          uint64_t v28 = *((unsigned int *)v21 + 4);
          int v29 = v28 + v20;
          __int32 v30 = v83;
          if (v83 != 1 && v29 != v83)
          {
            std::string::size_type v61 = a2[14];
            if (*((char *)v61 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v84, (const std::string::value_type *)*v61, v61[1]);
            }
            else
            {
              long long v62 = *(_OWORD *)v61;
              v84.__r_.__value_.__r.__words[2] = v61[2];
              *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v62;
            }
            long long v69 = std::string::insert(&v84, 0, "Squeeze Layer '");
            long long v70 = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
            v85.__r_.__value_.__r.__words[2] = v69->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v70;
            v69->__r_.__value_.__l.__size_ = 0;
            v69->__r_.__value_.__r.__words[2] = 0;
            v69->__r_.__value_.__r.__words[0] = 0;
            long long v71 = std::string::append(&v85, "': output rank plus the length of the axes parameter must equal input rank.");
            long long v72 = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
            v86.__r_.__value_.__r.__words[2] = v71->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v86.__r_.__value_.__l.__data_ = v72;
            v71->__r_.__value_.__l.__size_ = 0;
            v71->__r_.__value_.__r.__words[2] = 0;
            v71->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v85.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v84.__r_.__value_.__l.__data_);
            }
LABEL_119:
            *this = (void *)13;
            std::operator+<char>();
            if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v86.__r_.__value_.__l.__data_);
            }
            goto LABEL_140;
          }
          unint64_t v32 = 0;
          uint64_t v33 = 0;
          unint64_t v34 = 0;
          uint64_t v35 = 0;
          do
          {
            if (*((_DWORD *)a2 + 35) == 1120)
            {
              __int32 v36 = a2[16];
            }
            else
            {
              CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
              __int32 v36 = &CoreML::Specification::_SqueezeLayerParams_default_instance_;
            }
            int v37 = *(_DWORD *)(v36[3] + 8 * v35 + 8);
            __int32 v38 = (v30 & (v37 >> 31)) + v37;
            size_t v39 = v33 - v32;
            unint64_t inited = (unint64_t)wmemchr(v32, v38, v39);
            if (inited) {
              uint64_t v40 = (__int32 *)inited;
            }
            else {
              uint64_t v40 = v33;
            }
            if (v40 != v33)
            {
              long long v67 = a2[14];
              if (*((char *)v67 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(&v84, (const std::string::value_type *)*v67, v67[1]);
              }
              else
              {
                long long v68 = *(_OWORD *)v67;
                v84.__r_.__value_.__r.__words[2] = v67[2];
                *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v68;
              }
              long long v75 = std::string::insert(&v84, 0, "Squeeze Layer '");
              long long v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
              v85.__r_.__value_.__r.__words[2] = v75->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v76;
              v75->__r_.__value_.__l.__size_ = 0;
              v75->__r_.__value_.__r.__words[2] = 0;
              v75->__r_.__value_.__r.__words[0] = 0;
              long long v77 = std::string::append(&v85, "': axes parameter list cannot have the same value more than once.");
              long long v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
              v86.__r_.__value_.__r.__words[2] = v77->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v86.__r_.__value_.__l.__data_ = v78;
              v77->__r_.__value_.__l.__size_ = 0;
              v77->__r_.__value_.__r.__words[2] = 0;
              v77->__r_.__value_.__r.__words[0] = 0;
              if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v85.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v84.__r_.__value_.__l.__data_);
              }
              goto LABEL_134;
            }
            if ((unint64_t)v33 >= v34)
            {
              unint64_t v41 = v39 + 1;
              if ((v39 + 1) >> 62) {
                std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
              }
              if ((uint64_t)(v34 - (void)v32) >> 1 > v41) {
                unint64_t v41 = (uint64_t)(v34 - (void)v32) >> 1;
              }
              if (v34 - (unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t inited = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t inited = v41;
              }
              if (inited) {
                unint64_t inited = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(inited);
              }
              else {
                uint64_t v42 = 0;
              }
              __int32 v43 = (__int32 *)(inited + 4 * v39);
              __int32 *v43 = v38;
              __int32 v44 = v43 + 1;
              while (v33 != v32)
              {
                __int32 v45 = *--v33;
                *--__int32 v43 = v45;
              }
              unint64_t v34 = inited + 4 * v42;
              if (v32) {
                operator delete(v32);
              }
              unint64_t v32 = v43;
              uint64_t v33 = v44;
              __int32 v30 = v83;
            }
            else
            {
              *v33++ = v38;
            }
            ++v35;
          }
          while (v35 != v28);
          int v47 = v32 + 1;
          __int32 v46 = *v32;
          __int32 v48 = *v32;
          if (v32 != v33 && v47 != v33)
          {
            uint64_t v50 = v32 + 1;
            __int32 v51 = v32;
            __int32 v52 = v32 + 1;
            do
            {
              __int32 v54 = *v52++;
              __int32 v53 = v54;
              BOOL v55 = v48 < v54;
              if (v48 <= v54) {
                __int32 v48 = v53;
              }
              if (v55) {
                __int32 v51 = v50;
              }
              uint64_t v50 = v52;
            }
            while (v52 != v33);
            __int32 v48 = *v51;
            __int32 v56 = v32;
            __int32 v57 = v32 + 1;
            do
            {
              __int32 v59 = *v57++;
              __int32 v58 = v59;
              if (v59 < v46)
              {
                __int32 v46 = v58;
                __int32 v56 = v47;
              }
              int v47 = v57;
            }
            while (v57 != v33);
            __int32 v46 = *v56;
          }
          if (v48 < v30 && (v46 & 0x80000000) == 0)
          {
            char v60 = 1;
            goto LABEL_137;
          }
          std::string::size_type v73 = a2[14];
          if (*((char *)v73 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v84, (const std::string::value_type *)*v73, v73[1]);
          }
          else
          {
            long long v74 = *(_OWORD *)v73;
            v84.__r_.__value_.__r.__words[2] = v73[2];
            *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v74;
          }
          long long v79 = std::string::insert(&v84, 0, "Squeeze Layer '");
          long long v80 = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
          v85.__r_.__value_.__r.__words[2] = v79->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v80;
          v79->__r_.__value_.__l.__size_ = 0;
          v79->__r_.__value_.__r.__words[2] = 0;
          v79->__r_.__value_.__r.__words[0] = 0;
          __int32 v81 = std::string::append(&v85, "': axes refers to a dimension that exceeds the input rank.");
          long long v82 = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
          v86.__r_.__value_.__r.__words[2] = v81->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v86.__r_.__value_.__l.__data_ = v82;
          v81->__r_.__value_.__l.__size_ = 0;
          v81->__r_.__value_.__r.__words[2] = 0;
          v81->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v85.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v84.__r_.__value_.__l.__data_);
          }
LABEL_134:
          *this = (void *)13;
          std::operator+<char>();
          if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v86.__r_.__value_.__l.__data_);
          }
          char v60 = 0;
LABEL_137:
          if (v32) {
            operator delete(v32);
          }
          if ((v60 & 1) == 0)
          {
LABEL_140:
            std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((void *)__p[1]);
            return;
          }
        }
        std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((void *)__p[1]);
        goto LABEL_11;
      }
      long long v18 = a2[14];
      if (*((char *)v18 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v85, (const std::string::value_type *)*v18, v18[1]);
      }
      else
      {
        long long v19 = *(_OWORD *)v18;
        v85.__r_.__value_.__r.__words[2] = v18[2];
        *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v19;
      }
      long long v24 = std::string::insert(&v85, 0, "Squeeze Layer '");
      long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
      v86.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v86.__r_.__value_.__l.__data_ = v25;
      v24->__r_.__value_.__l.__size_ = 0;
      v24->__r_.__value_.__r.__words[2] = 0;
      v24->__r_.__value_.__r.__words[0] = 0;
      long long v26 = std::string::append(&v86, "': length of the 'axes' parameter cannot be 0.");
      long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      std::string::size_type v88 = v26->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string __p = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v86.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v85.__r_.__value_.__l.__data_);
      }
      *this = (void *)13;
      std::operator+<char>();
      if (SHIBYTE(v88) < 0) {
        operator delete(__p[0]);
      }
    }
  }
}

void sub_19EAFAAF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,void *a33,int a34,__int16 a35,char a36,char a37)
{
  if (v37) {
    operator delete(v37);
  }
  std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy(a33);
  _Unwind_Resume(a1);
}

void CoreML::NeuralNetworkSpecValidator::validateRangeStaticLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  if ((*(_DWORD *)CoreML::Result::Result((CoreML::Result *)this) & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0) {
      operator delete(this[1]);
    }
    CoreML::validateOutputCount((CoreML *)this, a2, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0) {
        operator delete(this[1]);
      }
      if (*((int *)a2 + 24) < 1) {
        goto LABEL_15;
      }
      int v4 = *(_DWORD *)(*(void *)(*((void *)a2 + 13) + 8) + 36);
      std::string::basic_string[abi:ne180100]<0>(v7, "Range");
      std::string::basic_string[abi:ne180100]<0>(__p, "output");
      CoreML::checkRank((CoreML::Result *)this, *((void *)a2 + 14), (uint64_t)v7, 1, 1, (uint64_t)__p, v4);
      if (v6 < 0) {
        operator delete(__p[0]);
      }
      if (v8 < 0) {
        operator delete(v7[0]);
      }
      if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
      {
        if (*((char *)this + 31) < 0) {
          operator delete(this[1]);
        }
LABEL_15:
        CoreML::Result::Result((CoreML::Result *)this);
      }
    }
  }
}

void sub_19EAFAD34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateRangeDynamicLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  if (*((int *)a2 + 6) < 1) {
    CoreML::Result::Result((CoreML::Result *)this);
  }
  else {
    CoreML::validateInputCount((CoreML *)this, a2, 1, 3);
  }
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0) {
      operator delete(this[1]);
    }
    CoreML::validateOutputCount((CoreML *)this, a2, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0) {
        operator delete(this[1]);
      }
      if (*((int *)a2 + 24) < 1) {
        goto LABEL_18;
      }
      int v4 = *(_DWORD *)(*(void *)(*((void *)a2 + 13) + 8) + 36);
      std::string::basic_string[abi:ne180100]<0>(v7, "Range");
      std::string::basic_string[abi:ne180100]<0>(__p, "output");
      CoreML::checkRank((CoreML::Result *)this, *((void *)a2 + 14), (uint64_t)v7, 1, 1, (uint64_t)__p, v4);
      if (v6 < 0) {
        operator delete(__p[0]);
      }
      if (v8 < 0) {
        operator delete(v7[0]);
      }
      if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
      {
        if (*((char *)this + 31) < 0) {
          operator delete(this[1]);
        }
LABEL_18:
        CoreML::Result::Result((CoreML::Result *)this);
      }
    }
  }
}

void sub_19EAFAEA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateLoadConstantNDLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  if ((*(_DWORD *)CoreML::Result::Result((CoreML::Result *)this) & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0) {
      operator delete(this[1]);
    }
    CoreML::validateOutputCount((CoreML *)this, a2, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0) {
        operator delete(this[1]);
      }
      if (*((_DWORD *)a2 + 35) == 1070)
      {
        int v5 = (uint64_t *)*((void *)a2 + 16);
      }
      else
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v4);
        int v5 = &CoreML::Specification::_LoadConstantNDLayerParams_default_instance_;
      }
      if (v5[5]) {
        char v6 = (uint64_t *)v5[5];
      }
      else {
        char v6 = &CoreML::Specification::_WeightParams_default_instance_;
      }
      uint64_t v7 = v6[5];
      if (*(char *)(v7 + 23) < 0) {
        uint64_t v8 = *(void *)(v7 + 8);
      }
      else {
        uint64_t v8 = *(unsigned __int8 *)(v7 + 23);
      }
      uint64_t v9 = v6[6];
      if (*(char *)(v9 + 23) < 0) {
        uint64_t v10 = *(void *)(v9 + 8);
      }
      else {
        uint64_t v10 = *(unsigned __int8 *)(v9 + 23);
      }
      int v11 = *((_DWORD *)v6 + 4);
      uint64_t v12 = v6[7];
      if (*(char *)(v12 + 23) < 0) {
        uint64_t v13 = *(void *)(v12 + 8);
      }
      else {
        uint64_t v13 = *(unsigned __int8 *)(v12 + 23);
      }
      BOOL v14 = v11 <= 0;
      BOOL v15 = v11 > 0;
      if (v14) {
        int v16 = 1;
      }
      else {
        int v16 = 2;
      }
      if (v8) {
        unsigned int v17 = v16;
      }
      else {
        unsigned int v17 = v15;
      }
      if (v10) {
        ++v17;
      }
      if (v13) {
        unsigned int v18 = v17 + 1;
      }
      else {
        unsigned int v18 = v17;
      }
      uint64_t v19 = *((unsigned int *)v5 + 4);
      if (v18 <= 1)
      {
        if (v19)
        {
          if (v19 <= 5)
          {
            long long v22 = (uint64_t *)(v5[3] + 8);
            unint64_t v23 = 1;
            do
            {
              uint64_t v24 = *v22++;
              v23 *= v24;
              --v19;
            }
            while (v19);
            std::string::basic_string[abi:ne180100]<0>(__p, "LoadConstantND");
            uint64_t v25 = *((void *)a2 + 14);
            std::string::basic_string[abi:ne180100]<0>(&v31, "constants");
            CoreML::validateGeneralWeightParams((uint64_t)this, (uint64_t)v6, v23, 1, (const void **)__p, v25, (uint64_t)&v31);
            if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v31.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v33) < 0) {
              operator delete(__p[0]);
            }
            if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
            {
              if (*((char *)this + 31) < 0) {
                operator delete(this[1]);
              }
              CoreML::Result::Result((CoreML::Result *)this);
            }
            return;
          }
          std::operator+<char>();
          int v29 = std::string::append(&v31, "'can only accept shape of length 1 to 5");
          long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
          std::string::size_type v33 = v29->__r_.__value_.__r.__words[2];
          *(_OWORD *)std::string __p = v30;
          v29->__r_.__value_.__l.__size_ = 0;
          v29->__r_.__value_.__r.__words[2] = 0;
          v29->__r_.__value_.__r.__words[0] = 0;
          *this = (void *)13;
          std::operator+<char>();
          goto LABEL_54;
        }
      }
      else if (v19)
      {
        std::operator+<char>();
        int v20 = std::string::append(&v31, "' has both full precision and half precision weight fields populated");
        long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
        std::string::size_type v33 = v20->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v21;
        v20->__r_.__value_.__l.__size_ = 0;
        v20->__r_.__value_.__r.__words[2] = 0;
        v20->__r_.__value_.__r.__words[0] = 0;
        *this = (void *)13;
        std::operator+<char>();
LABEL_54:
        if (SHIBYTE(v33) < 0) {
          operator delete(__p[0]);
        }
        if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          return;
        }
        uint64_t v28 = (void *)v31.__r_.__value_.__r.__words[0];
        goto LABEL_58;
      }
      std::operator+<char>();
      long long v26 = std::string::append(&v31, "' layer.");
      long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      std::string::size_type v33 = v26->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string __p = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v31.__r_.__value_.__l.__data_);
      }
      *this = (void *)13;
      std::operator+<char>();
      if ((SHIBYTE(v33) & 0x80000000) == 0) {
        return;
      }
      uint64_t v28 = __p[0];
LABEL_58:
      operator delete(v28);
    }
  }
}

void sub_19EAFB228(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateRandomNormalStaticLayer(void **this, uint64_t **a2)
{
  if ((*(_DWORD *)CoreML::Result::Result((CoreML::Result *)this) & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0) {
      operator delete(this[1]);
    }
    CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a2, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0) {
        operator delete(this[1]);
      }
      if (*((_DWORD *)a2 + 35) == 1175)
      {
        int v5 = a2[16];
      }
      else
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v4);
        int v5 = &CoreML::Specification::_RandomNormalStaticLayerParams_default_instance_;
      }
      if (*((_DWORD *)v5 + 4))
      {
        CoreML::Result::Result((CoreML::Result *)this);
      }
      else
      {
        std::operator+<char>();
        char v6 = std::string::append(&v8, "' layer.");
        long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
        std::string::size_type v10 = v6->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v7;
        v6->__r_.__value_.__l.__size_ = 0;
        v6->__r_.__value_.__r.__words[2] = 0;
        v6->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v8.__r_.__value_.__l.__data_);
        }
        *this = (void *)13;
        std::operator+<char>();
        if (SHIBYTE(v10) < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
}

void sub_19EAFB3E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateRandomUniformLikeLayer(void **this, uint64_t **a2)
{
  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a2, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0) {
      operator delete(this[1]);
    }
    CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a2, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0) {
        operator delete(this[1]);
      }
      if (*((_DWORD *)a2 + 35) == 1190)
      {
        int v5 = a2[16];
      }
      else
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v4);
        int v5 = &CoreML::Specification::_RandomUniformLikeLayerParams_default_instance_;
      }
      if (*((float *)v5 + 6) <= *((float *)v5 + 7))
      {
        CoreML::Result::Result((CoreML::Result *)this);
      }
      else
      {
        std::operator+<char>();
        char v6 = std::string::append(&v8, "' layer.");
        long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
        std::string::size_type v10 = v6->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v7;
        v6->__r_.__value_.__l.__size_ = 0;
        v6->__r_.__value_.__r.__words[2] = 0;
        v6->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v8.__r_.__value_.__l.__data_);
        }
        *this = (void *)13;
        std::operator+<char>();
        if (SHIBYTE(v10) < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
}

void sub_19EAFB564(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateRandomUniformStaticLayer(void **this, uint64_t **a2)
{
  if ((*(_DWORD *)CoreML::Result::Result((CoreML::Result *)this) & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0) {
      operator delete(this[1]);
    }
    CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a2, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0) {
        operator delete(this[1]);
      }
      if (*((_DWORD *)a2 + 35) == 1195)
      {
        int v5 = a2[16];
      }
      else
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v4);
        int v5 = &CoreML::Specification::_RandomUniformStaticLayerParams_default_instance_;
      }
      if (!*((_DWORD *)v5 + 4))
      {
        std::operator+<char>();
        std::string v8 = std::string::append(&v10, "' layer.");
        long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
        std::string::size_type v12 = v8->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v9;
        v8->__r_.__value_.__l.__size_ = 0;
        v8->__r_.__value_.__r.__words[2] = 0;
        v8->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v10.__r_.__value_.__l.__data_);
        }
        goto LABEL_17;
      }
      if (*((float *)v5 + 12) > *((float *)v5 + 13))
      {
        std::operator+<char>();
        char v6 = std::string::append(&v10, "' layer.");
        long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
        std::string::size_type v12 = v6->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v7;
        v6->__r_.__value_.__l.__size_ = 0;
        v6->__r_.__value_.__r.__words[2] = 0;
        v6->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v10.__r_.__value_.__l.__data_);
        }
LABEL_17:
        *this = (void *)13;
        std::operator+<char>();
        if (SHIBYTE(v12) < 0) {
          operator delete(__p[0]);
        }
        return;
      }
      CoreML::Result::Result((CoreML::Result *)this);
    }
  }
}

void sub_19EAFB754(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateRandomUniformDynamicLayer(void **this, uint64_t **a2)
{
  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a2, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0) {
      operator delete(this[1]);
    }
    CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a2, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0) {
        operator delete(this[1]);
      }
      if (*((_DWORD *)a2 + 35) == 1200)
      {
        int v5 = a2[16];
      }
      else
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v4);
        int v5 = &CoreML::Specification::_RandomUniformDynamicLayerParams_default_instance_;
      }
      if (*((float *)v5 + 6) <= *((float *)v5 + 7))
      {
        CoreML::Result::Result((CoreML::Result *)this);
      }
      else
      {
        std::operator+<char>();
        char v6 = std::string::append(&v8, "' layer.");
        long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
        std::string::size_type v10 = v6->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v7;
        v6->__r_.__value_.__l.__size_ = 0;
        v6->__r_.__value_.__r.__words[2] = 0;
        v6->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v8.__r_.__value_.__l.__data_);
        }
        *this = (void *)13;
        std::operator+<char>();
        if (SHIBYTE(v10) < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
}

void sub_19EAFB8E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateRandomBernoulliLikeLayer(void **this, uint64_t **a2)
{
  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a2, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0) {
      operator delete(this[1]);
    }
    CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a2, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0) {
        operator delete(this[1]);
      }
      if (*((_DWORD *)a2 + 35) == 1210)
      {
        int v5 = a2[16];
      }
      else
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v4);
        int v5 = &CoreML::Specification::_RandomBernoulliLikeLayerParams_default_instance_;
      }
      float v6 = *((float *)v5 + 6);
      if (v6 >= 0.0 && v6 <= 1.0)
      {
        CoreML::Result::Result((CoreML::Result *)this);
      }
      else
      {
        std::operator+<char>();
        std::string v8 = std::string::append(&v10, "' layer.");
        long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
        std::string::size_type v12 = v8->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v9;
        v8->__r_.__value_.__l.__size_ = 0;
        v8->__r_.__value_.__r.__words[2] = 0;
        v8->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v10.__r_.__value_.__l.__data_);
        }
        *this = (void *)13;
        std::operator+<char>();
        if (SHIBYTE(v12) < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
}

void sub_19EAFBA6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateRandomBernoulliStaticLayer(void **this, uint64_t **a2)
{
  if ((*(_DWORD *)CoreML::Result::Result((CoreML::Result *)this) & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0) {
      operator delete(this[1]);
    }
    CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a2, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0) {
        operator delete(this[1]);
      }
      if (*((_DWORD *)a2 + 35) == 1215)
      {
        int v5 = a2[16];
      }
      else
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v4);
        int v5 = &CoreML::Specification::_RandomBernoulliStaticLayerParams_default_instance_;
      }
      if (!*((_DWORD *)v5 + 4))
      {
        std::operator+<char>();
        std::string v10 = std::string::append(&v12, "' layer.");
        long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
        std::string::size_type v14 = v10->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v11;
        v10->__r_.__value_.__l.__size_ = 0;
        v10->__r_.__value_.__r.__words[2] = 0;
        v10->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v12.__r_.__value_.__l.__data_);
        }
        goto LABEL_20;
      }
      float v6 = *((float *)v5 + 12);
      if (v6 < 0.0 || v6 > 1.0)
      {
        std::operator+<char>();
        std::string v8 = std::string::append(&v12, "' layer.");
        long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
        std::string::size_type v14 = v8->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v9;
        v8->__r_.__value_.__l.__size_ = 0;
        v8->__r_.__value_.__r.__words[2] = 0;
        v8->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v12.__r_.__value_.__l.__data_);
        }
LABEL_20:
        *this = (void *)13;
        std::operator+<char>();
        if (SHIBYTE(v14) < 0) {
          operator delete(__p[0]);
        }
        return;
      }
      CoreML::Result::Result((CoreML::Result *)this);
    }
  }
}

void sub_19EAFBC64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateRandomBernoulliDynamicLayer(void **this, uint64_t **a2)
{
  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a2, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0) {
      operator delete(this[1]);
    }
    CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a2, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0) {
        operator delete(this[1]);
      }
      if (*((_DWORD *)a2 + 35) == 1220)
      {
        int v5 = a2[16];
      }
      else
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v4);
        int v5 = &CoreML::Specification::_RandomBernoulliDynamicLayerParams_default_instance_;
      }
      float v6 = *((float *)v5 + 6);
      if (v6 >= 0.0 && v6 <= 1.0)
      {
        CoreML::Result::Result((CoreML::Result *)this);
      }
      else
      {
        std::operator+<char>();
        std::string v8 = std::string::append(&v10, "' layer.");
        long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
        std::string::size_type v12 = v8->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v9;
        v8->__r_.__value_.__l.__size_ = 0;
        v8->__r_.__value_.__r.__words[2] = 0;
        v8->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v10.__r_.__value_.__l.__data_);
        }
        *this = (void *)13;
        std::operator+<char>();
        if (SHIBYTE(v12) < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
}

void sub_19EAFBDF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateTopKLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2, uint64_t a3)
{
  v28[2] = *MEMORY[0x1E4F143B8];
  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 2);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0) {
      operator delete(this[1]);
    }
    CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 2, 2);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0) {
        operator delete(this[1]);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "TopK");
      float v6 = (char *)a2 + 32;
      CoreML::validateInputOutputRankEquality((CoreML::Result *)this, (void *)a3, (uint64_t)__p, (uint64_t)a2 + 32);
      if (v27 < 0) {
        operator delete(__p[0]);
      }
      if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
      {
        if (*((char *)this + 31) < 0) {
          operator delete(this[1]);
        }
        long long v7 = *(void **)(*(void *)(a3 + 32) + 8);
        std::string v8 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>((uint64_t)a2 + 32, v7);
        long long v9 = (const CoreML::Specification::NeuralNetworkLayer *)((char *)a2 + 40);
        if (v9 == v8
          || (v8 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>((uint64_t)v6, *(void **)(*(void *)(a3 + 56) + 16)), v9 == v8)|| (int v10 = *(_DWORD *)std::map<std::string,std::string>::at((uint64_t)v6, v7), v8 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)std::map<std::string,std::string>::at((uint64_t)v6, *(void **)(*(void *)(a3 + 56) + 16)), v10 == *(_DWORD *)v8))
        {
          if (*(int *)(a3 + 72) < 1
            || (*(_DWORD *)(a3 + 140) != 1015
              ? (CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v8),
                 long long v11 = &CoreML::Specification::_TopKLayerParams_default_instance_)
              : (long long v11 = *(uint64_t **)(a3 + 128)),
                (uint64_t v12 = *(int *)(*(void *)(*(void *)(a3 + 80) + 8) + 36), v13 = v11[2], v13 >= -v12) && v13 < v12))
          {
            CoreML::Result::Result((CoreML::Result *)this);
            return;
          }
          std::operator+<char>();
          std::string::size_type v14 = std::string::append(&v24, "' layer.");
          long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
          *(void *)&v25[16] = *((void *)&v14->__r_.__value_.__l + 2);
          *(_OWORD *)uint64_t v25 = v15;
          v14->__r_.__value_.__l.__size_ = 0;
          v14->__r_.__value_.__r.__words[2] = 0;
          v14->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v24.__r_.__value_.__l.__data_);
          }
          *this = (void *)13;
          std::operator+<char>();
        }
        else
        {
          int v16 = *(long long **)(a3 + 112);
          if (*((char *)v16 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)v16, *((void *)v16 + 1));
          }
          else
          {
            long long v17 = *v16;
            v23.__r_.__value_.__r.__words[2] = *((void *)v16 + 2);
            *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v17;
          }
          unsigned int v18 = std::string::insert(&v23, 0, "Layer '");
          long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
          v24.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v19;
          v18->__r_.__value_.__l.__size_ = 0;
          v18->__r_.__value_.__r.__words[2] = 0;
          v18->__r_.__value_.__r.__words[0] = 0;
          int v20 = std::string::append(&v24, "' of type 'TopK' expects equal ranks for its input and second output, but they are not equal.");
          std::string::size_type v21 = v20->__r_.__value_.__r.__words[0];
          v28[0] = v20->__r_.__value_.__l.__size_;
          *(void *)((char *)v28 + 7) = *(std::string::size_type *)((char *)&v20->__r_.__value_.__r.__words[1] + 7);
          char v22 = HIBYTE(v20->__r_.__value_.__r.__words[2]);
          v20->__r_.__value_.__l.__size_ = 0;
          v20->__r_.__value_.__r.__words[2] = 0;
          v20->__r_.__value_.__r.__words[0] = 0;
          *(void *)&v25[15] = *(void *)((char *)v28 + 7);
          *(void *)uint64_t v25 = v21;
          *(void *)&v25[8] = v28[0];
          v25[23] = v22;
          if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v24.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v23.__r_.__value_.__l.__data_);
          }
          *this = (void *)13;
          std::operator+<char>();
        }
        if ((v25[23] & 0x80000000) != 0) {
          operator delete(*(void **)v25);
        }
      }
    }
  }
}

void sub_19EAFC15C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
}

void CoreML::NeuralNetworkSpecValidator::validateArgMaxLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2, uint64_t a3)
{
  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0) {
      operator delete(this[1]);
    }
    CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0) {
        operator delete(this[1]);
      }
      if (*(_DWORD *)(a3 + 140) == 1025)
      {
        long long v7 = *(uint64_t **)(a3 + 128);
      }
      else
      {
        unint64_t inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
        long long v7 = &CoreML::Specification::_ArgMaxLayerParams_default_instance_;
      }
      if (*((unsigned char *)v7 + 24)) {
        goto LABEL_11;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "ArgMax");
      CoreML::validateInputOutputRankEquality((CoreML::Result *)this, (void *)a3, (uint64_t)__p, (uint64_t)a2 + 32);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
      if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
      {
        if (*((char *)this + 31) < 0) {
          operator delete(this[1]);
        }
LABEL_11:
        if (*(int *)(a3 + 72) < 1
          || (*(_DWORD *)(a3 + 140) != 1025
            ? (CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited),
               std::string v8 = &CoreML::Specification::_ArgMaxLayerParams_default_instance_)
            : (std::string v8 = *(uint64_t **)(a3 + 128)),
              (v9 = *(int *)(*(void *)(*(void *)(a3 + 80) + 8) + 36), uint64_t v10 = v8[2], v10 >= -v9)
            ? (BOOL v11 = v10 < v9)
            : (BOOL v11 = 0),
              v11))
        {
          CoreML::Result::Result((CoreML::Result *)this);
        }
        else
        {
          std::operator+<char>();
          uint64_t v12 = std::string::append(&v14, "' layer.");
          long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
          std::string::size_type v16 = v12->__r_.__value_.__r.__words[2];
          *(_OWORD *)long long v15 = v13;
          v12->__r_.__value_.__l.__size_ = 0;
          v12->__r_.__value_.__r.__words[2] = 0;
          v12->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v14.__r_.__value_.__l.__data_);
          }
          *this = (void *)13;
          std::operator+<char>();
          if (SHIBYTE(v16) < 0) {
            operator delete(v15[0]);
          }
        }
      }
    }
  }
}

void sub_19EAFC3C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateArgMinLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2, uint64_t a3)
{
  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0) {
      operator delete(this[1]);
    }
    CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0) {
        operator delete(this[1]);
      }
      if (*(_DWORD *)(a3 + 140) == 1020)
      {
        long long v7 = *(uint64_t **)(a3 + 128);
      }
      else
      {
        unint64_t inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
        long long v7 = &CoreML::Specification::_ArgMinLayerParams_default_instance_;
      }
      if (*((unsigned char *)v7 + 24)) {
        goto LABEL_11;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "ArgMin");
      CoreML::validateInputOutputRankEquality((CoreML::Result *)this, (void *)a3, (uint64_t)__p, (uint64_t)a2 + 32);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
      if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
      {
        if (*((char *)this + 31) < 0) {
          operator delete(this[1]);
        }
LABEL_11:
        if (*(int *)(a3 + 72) < 1
          || (*(_DWORD *)(a3 + 140) != 1020
            ? (CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited),
               std::string v8 = &CoreML::Specification::_ArgMinLayerParams_default_instance_)
            : (std::string v8 = *(uint64_t **)(a3 + 128)),
              (v9 = *(int *)(*(void *)(*(void *)(a3 + 80) + 8) + 36), uint64_t v10 = v8[2], v10 >= -v9)
            ? (BOOL v11 = v10 < v9)
            : (BOOL v11 = 0),
              v11))
        {
          CoreML::Result::Result((CoreML::Result *)this);
        }
        else
        {
          std::operator+<char>();
          uint64_t v12 = std::string::append(&v14, "' layer.");
          long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
          std::string::size_type v16 = v12->__r_.__value_.__r.__words[2];
          *(_OWORD *)long long v15 = v13;
          v12->__r_.__value_.__l.__size_ = 0;
          v12->__r_.__value_.__r.__words[2] = 0;
          v12->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v14.__r_.__value_.__l.__data_);
          }
          *this = (void *)13;
          std::operator+<char>();
          if (SHIBYTE(v16) < 0) {
            operator delete(v15[0]);
          }
        }
      }
    }
  }
}

void sub_19EAFC5E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateLayerNormalizationLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  v27[2] = *MEMORY[0x1E4F143B8];
  CoreML::validateInputCount((CoreML *)this, a2, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0) {
      operator delete(this[1]);
    }
    CoreML::validateOutputCount((CoreML *)this, a2, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0) {
        operator delete(this[1]);
      }
      int v4 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&unk_19EC86ACE);
      if (*((_DWORD *)a2 + 35) == 1350)
      {
        uint64_t v5 = *((void *)a2 + 16);
        uint64_t v6 = *(int *)(v5 + 16);
        if (v6)
        {
          if ((uint64_t *)v5 != &CoreML::Specification::_LayerNormalizationLayerParams_default_instance_)
          {
            uint64_t v7 = *(void *)(v5 + 40);
            if (v7)
            {
              uint64_t v8 = *(void *)(v5 + 48);
              if (v8)
              {
                if ((uint64_t *)v7 == &CoreML::Specification::_WeightParams_default_instance_ || !*(void *)(v7 + 64))
                {
                  uint64_t v12 = *(void *)(v5 + 24);
                  uint64_t v13 = v12 + 8;
                  BOOL v14 = v12 == 0;
                  if (v12) {
                    long long v15 = (int *)(v12 + 8);
                  }
                  else {
                    long long v15 = 0;
                  }
                  std::string::size_type v16 = (int *)(v13 + 8 * v6);
                  if (v14) {
                    long long v17 = 0;
                  }
                  else {
                    long long v17 = v16;
                  }
                  int v18 = 1;
                  while (v15 != v17)
                  {
                    int v19 = *v15;
                    v15 += 2;
                    v18 *= v19;
                  }
                  if (*(_DWORD *)(v7 + 16) == v18 && *(_DWORD *)(v8 + 16) == v18)
                  {
                    CoreML::Result::Result((CoreML::Result *)this);
LABEL_21:
                    if (v26 < 0) {
                      operator delete(__p);
                    }
                    return;
                  }
                  std::operator+<char>();
                  int v20 = std::string::append(&v23, "' layer.");
                  std::string::size_type v21 = (void *)v20->__r_.__value_.__r.__words[0];
                  v27[0] = v20->__r_.__value_.__l.__size_;
                  *(void *)((char *)v27 + 7) = *(std::string::size_type *)((char *)&v20->__r_.__value_.__r.__words[1]
                                                                           + 7);
                  char v22 = HIBYTE(v20->__r_.__value_.__r.__words[2]);
                  v20->__r_.__value_.__l.__size_ = 0;
                  v20->__r_.__value_.__r.__words[2] = 0;
                  v20->__r_.__value_.__r.__words[0] = 0;
                  if (v26 < 0) {
                    operator delete(__p);
                  }
                  std::string __p = v21;
                  *(void *)uint64_t v25 = v27[0];
                  *(void *)&v25[7] = *(void *)((char *)v27 + 7);
                  char v26 = v22;
                  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v23.__r_.__value_.__l.__data_);
                  }
LABEL_20:
                  *this = (void *)13;
                  std::operator+<char>();
                  goto LABEL_21;
                }
              }
            }
          }
        }
      }
      else
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v4);
      }
      std::operator+<char>();
      uint64_t v9 = std::string::append(&v23, "' layer.");
      uint64_t v10 = (void *)v9->__r_.__value_.__r.__words[0];
      v27[0] = v9->__r_.__value_.__l.__size_;
      *(void *)((char *)v27 + 7) = *(std::string::size_type *)((char *)&v9->__r_.__value_.__r.__words[1] + 7);
      char v11 = HIBYTE(v9->__r_.__value_.__r.__words[2]);
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      if (v26 < 0) {
        operator delete(__p);
      }
      std::string __p = v10;
      *(void *)uint64_t v25 = v27[0];
      *(void *)&v25[7] = *(void *)((char *)v27 + 7);
      char v26 = v11;
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v23.__r_.__value_.__l.__data_);
      }
      goto LABEL_20;
    }
  }
}

void sub_19EAFC984(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateConstantPadLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2, uint64_t a3)
{
  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 2);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0) {
      operator delete(this[1]);
    }
    CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0) {
        operator delete(this[1]);
      }
      std::string::basic_string[abi:ne180100]<0>(v36, "ConstantPad");
      CoreML::validateInputOutputRankEquality((CoreML::Result *)this, (void *)a3, (uint64_t)v36, (uint64_t)a2 + 32);
      if (v37 < 0) {
        operator delete(v36[0]);
      }
      if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
      {
        if (*((char *)this + 31) < 0) {
          operator delete(this[1]);
        }
        if (*(_DWORD *)(a3 + 140) == 1155)
        {
          uint64_t v7 = *(uint64_t **)(a3 + 128);
        }
        else
        {
          CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
          uint64_t v7 = &CoreML::Specification::_ConstantPaddingLayerParams_default_instance_;
        }
        if (*(_DWORD *)(a3 + 24) == 1)
        {
          unint64_t v8 = *((unsigned int *)v7 + 4);
          if (v8)
          {
            std::operator+<char>();
            uint64_t v12 = std::string::append(&v31, "', length of 'padAmounts' parameter is ");
            long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
            v32.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v13;
            v12->__r_.__value_.__l.__size_ = 0;
            v12->__r_.__value_.__r.__words[2] = 0;
            v12->__r_.__value_.__r.__words[0] = 0;
            std::to_string(&__p, v8);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              p_p = &__p;
            }
            else {
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type size = __p.__r_.__value_.__l.__size_;
            }
            std::string::size_type v16 = std::string::append(&v32, (const std::string::value_type *)p_p, size);
            long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
            v33.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v17;
            v16->__r_.__value_.__l.__size_ = 0;
            v16->__r_.__value_.__r.__words[2] = 0;
            v16->__r_.__value_.__r.__words[0] = 0;
            int v18 = std::string::append(&v33, ", an odd value, which is not allowed.");
            long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
            std::string::size_type v35 = v18->__r_.__value_.__r.__words[2];
            long long v34 = v19;
            v18->__r_.__value_.__l.__size_ = 0;
            v18->__r_.__value_.__r.__words[2] = 0;
            v18->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v33.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v32.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v31.__r_.__value_.__l.__data_);
            }
LABEL_60:
            *this = (void *)13;
            std::operator+<char>();
LABEL_61:
            if (SHIBYTE(v35) < 0) {
              operator delete((void *)v34);
            }
            return;
          }
          if (!v8)
          {
            std::operator+<char>();
            int v20 = std::string::append(&v33, "', length of 'padAmounts' cannot be zero when only 1 input is provided.");
            long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
            std::string::size_type v35 = v20->__r_.__value_.__r.__words[2];
            long long v34 = v21;
            v20->__r_.__value_.__l.__size_ = 0;
            v20->__r_.__value_.__r.__words[2] = 0;
            v20->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v33.__r_.__value_.__l.__data_);
            }
            *this = (void *)13;
            std::operator+<char>();
            goto LABEL_61;
          }
          if (*((unsigned char *)v7 + 40) && (int)v8 >= 2)
          {
            uint64_t v9 = 0;
            uint64_t v10 = (_DWORD *)(v7[3] + 16);
            while ((int)*(v10 - 2) < 1 || *v10 < 1)
            {
              v10 += 4;
              if (v8 >> 1 == ++v9) {
                goto LABEL_27;
              }
            }
            std::operator+<char>();
            char v22 = std::string::append(&v31, "', 'padToGivenOutputSizeMode' is true, and both padding values corresponding to dimension ");
            long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
            v32.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v23;
            v22->__r_.__value_.__l.__size_ = 0;
            v22->__r_.__value_.__r.__words[2] = 0;
            v22->__r_.__value_.__r.__words[0] = 0;
            std::to_string(&__p, v9);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string v24 = &__p;
            }
            else {
              std::string v24 = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v25 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v25 = __p.__r_.__value_.__l.__size_;
            }
            char v26 = std::string::append(&v32, (const std::string::value_type *)v24, v25);
            long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
            v33.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v27;
            v26->__r_.__value_.__l.__size_ = 0;
            v26->__r_.__value_.__r.__words[2] = 0;
            v26->__r_.__value_.__r.__words[0] = 0;
            uint64_t v28 = std::string::append(&v33, " are non zero, which is invalid. Only one value can be non-zero.");
            long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
            std::string::size_type v35 = v28->__r_.__value_.__r.__words[2];
            long long v34 = v29;
            v28->__r_.__value_.__l.__size_ = 0;
            v28->__r_.__value_.__r.__words[2] = 0;
            v28->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v33.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v32.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v31.__r_.__value_.__l.__data_);
            }
            goto LABEL_60;
          }
        }
LABEL_27:
        CoreML::Result::Result((CoreML::Result *)this);
      }
    }
  }
}

void sub_19EAFCDF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 57) < 0) {
    operator delete(*(void **)(v33 - 80));
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateNMSLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  CoreML::validateInputCount((CoreML *)this, a2, 2, 5);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0) {
      operator delete(this[1]);
    }
    CoreML::validateOutputCount((CoreML *)this, a2, 4, 4);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0) {
        operator delete(this[1]);
      }
      CoreML::Result::Result((CoreML::Result *)this);
    }
  }
}

void CoreML::NeuralNetworkSpecValidator::validateArgsortLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2, uint64_t a3)
{
  CoreML::validateInputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0) {
      operator delete(this[1]);
    }
    CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
    if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
    {
      if (*((char *)this + 31) < 0) {
        operator delete(this[1]);
      }
      std::string::basic_string[abi:ne180100]<0>(v39, "Argsort");
      CoreML::validateInputOutputRankEquality((CoreML::Result *)this, (void *)a3, (uint64_t)v39, (uint64_t)a2 + 32);
      if (v40 < 0) {
        operator delete(v39[0]);
      }
      if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
      {
        if (*((char *)this + 31) < 0) {
          operator delete(this[1]);
        }
        if (*(_DWORD *)(a3 + 140) == 1461)
        {
          uint64_t v7 = *(uint64_t **)(a3 + 128);
        }
        else
        {
          CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
          uint64_t v7 = &CoreML::Specification::_ArgSortLayerParams_default_instance_;
        }
        uint64_t v8 = v7[2];
        if (v8 < 0)
        {
          std::operator+<char>();
          uint64_t v10 = std::string::append(&v36, "', which is not supported. It must be positive.");
          long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
          std::string::size_type v38 = v10->__r_.__value_.__r.__words[2];
          long long v37 = v11;
          v10->__r_.__value_.__l.__size_ = 0;
          v10->__r_.__value_.__r.__words[2] = 0;
          v10->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v36.__r_.__value_.__l.__data_);
          }
          *this = (void *)13;
          std::operator+<char>();
        }
        else
        {
          if (*(int *)(a3 + 72) < 1 || (uint64_t v9 = *(int *)(*(void *)(*(void *)(a3 + 80) + 8) + 36), v8 < v9))
          {
            CoreML::Result::Result((CoreML::Result *)this);
            return;
          }
          std::to_string(&v31, v8);
          uint64_t v12 = std::string::insert(&v31, 0, "Value of 'axis' is ");
          long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
          v32.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v13;
          v12->__r_.__value_.__l.__size_ = 0;
          v12->__r_.__value_.__r.__words[2] = 0;
          v12->__r_.__value_.__r.__words[0] = 0;
          BOOL v14 = std::string::append(&v32, ", but it must be in the range [0,");
          long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
          v33.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v15;
          v14->__r_.__value_.__l.__size_ = 0;
          v14->__r_.__value_.__r.__words[2] = 0;
          v14->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&__p, v9);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_p = &__p;
          }
          else {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = __p.__r_.__value_.__l.__size_;
          }
          int v18 = std::string::append(&v33, (const std::string::value_type *)p_p, size);
          long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
          v34.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v19;
          v18->__r_.__value_.__l.__size_ = 0;
          v18->__r_.__value_.__r.__words[2] = 0;
          v18->__r_.__value_.__r.__words[0] = 0;
          int v20 = std::string::append(&v34, ") for layer of type 'ArgSort' and name '");
          long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
          v35.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v21;
          v20->__r_.__value_.__l.__size_ = 0;
          v20->__r_.__value_.__r.__words[2] = 0;
          v20->__r_.__value_.__r.__words[0] = 0;
          uint64_t v22 = *(void *)(a3 + 112);
          int v23 = *(char *)(v22 + 23);
          if (v23 >= 0) {
            std::string v24 = *(const std::string::value_type **)(a3 + 112);
          }
          else {
            std::string v24 = *(const std::string::value_type **)v22;
          }
          if (v23 >= 0) {
            std::string::size_type v25 = *(unsigned __int8 *)(v22 + 23);
          }
          else {
            std::string::size_type v25 = *(void *)(v22 + 8);
          }
          char v26 = std::string::append(&v35, v24, v25);
          long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
          v36.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v27;
          v26->__r_.__value_.__l.__size_ = 0;
          v26->__r_.__value_.__r.__words[2] = 0;
          v26->__r_.__value_.__r.__words[0] = 0;
          uint64_t v28 = std::string::append(&v36, "'.");
          long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
          std::string::size_type v38 = v28->__r_.__value_.__r.__words[2];
          long long v37 = v29;
          v28->__r_.__value_.__l.__size_ = 0;
          v28->__r_.__value_.__r.__words[2] = 0;
          v28->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v36.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v35.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v34.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v33.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v32.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v31.__r_.__value_.__l.__data_);
          }
          *this = (void *)13;
          std::operator+<char>();
        }
        if (SHIBYTE(v38) < 0) {
          operator delete((void *)v37);
        }
      }
    }
  }
}

void sub_19EAFD2CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (*(char *)(v47 - 73) < 0) {
    operator delete(*(void **)(v47 - 96));
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateFailUnknownType(CoreML::NeuralNetworkSpecValidator *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  std::string::basic_string[abi:ne180100]<0>(&v16, "CoreML.Specification.NeuralNetworkLayer");
  int v4 = std::string::insert(&v16, 0, "Unsupported layer type (");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v17.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  uint64_t v6 = std::string::append(&v17, ") for layer '");
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v18.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  uint64_t v8 = *((void *)a2 + 14);
  int v9 = *(char *)(v8 + 23);
  if (v9 >= 0) {
    uint64_t v10 = (const std::string::value_type *)*((void *)a2 + 14);
  }
  else {
    uint64_t v10 = *(const std::string::value_type **)v8;
  }
  if (v9 >= 0) {
    std::string::size_type v11 = *(unsigned __int8 *)(v8 + 23);
  }
  else {
    std::string::size_type v11 = *(void *)(v8 + 8);
  }
  uint64_t v12 = std::string::append(&v18, v10, v11);
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v19.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  BOOL v14 = std::string::append(&v19, "'.");
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  std::string::size_type v21 = v14->__r_.__value_.__r.__words[2];
  long long v20 = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  *(void *)this = 13;
  std::operator+<char>();
  if (SHIBYTE(v21) < 0) {
    operator delete((void *)v20);
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
}

void sub_19EAFD51C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (*(char *)(v28 - 25) < 0) {
    operator delete(*(void **)(v28 - 48));
  }
  if (*(char *)(v28 - 57) < 0) {
    operator delete(*(void **)(v28 - 80));
  }
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void CoreML::Model::addOutput(uint64_t a1, const std::string *a2, CoreML::FeatureType *a3)
{
  uint64_t v5 = *(void *)(*(void *)(a1 + 8) + 16);
  if (!v5) {
    operator new();
  }
  uint64_t v6 = (std::string *)google::protobuf::internal::RepeatedPtrFieldBase::Add<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>(v5 + 40)[2];
  if (v6 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
  {
    std::string::operator=(v6, a2);
    CoreML::FeatureType::allocateCopy(a3);
  }
  google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
}

void sub_19EAFD688(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C40E043F9A7);
  _Unwind_Resume(a1);
}

void CoreML::Model::addInput(uint64_t a1, const std::string *a2, CoreML::FeatureType *a3)
{
  uint64_t v5 = *(void *)(*(void *)(a1 + 8) + 16);
  if (!v5) {
    operator new();
  }
  uint64_t v6 = (std::string *)google::protobuf::internal::RepeatedPtrFieldBase::Add<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>(v5 + 16)[2];
  if (v6 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
  {
    std::string::operator=(v6, a2);
    CoreML::FeatureType::allocateCopy(a3);
  }
  google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
}

void sub_19EAFD79C(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C40E043F9A7);
  _Unwind_Resume(a1);
}

void CoreML::Model::~Model(CoreML::Model *this)
{
  *(void *)this = &unk_1EF0DB228;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x19F3C1920);
}

{
  std::__shared_weak_count *v1;

  *(void *)this = &unk_1EF0DB228;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

CoreML::Model *CoreML::Model::Model(CoreML::Model *this)
{
  *(void *)this = &unk_1EF0DB228;
  *((void *)this + 1) = 0;
  uint64_t v2 = (uint64_t *)((char *)this + 8);
  *((void *)this + 2) = 0;
  _ZNSt3__115allocate_sharedB8ne180100IN6CoreML13Specification5ModelENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_((CoreML::Specification::Model **)&v7);
  uint64_t v3 = v7;
  int v4 = (std::__shared_weak_count *)*((void *)this + 2);
  *(_OWORD *)((char *)this + 8) = v7;
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    uint64_t v5 = *v2;
  }
  else
  {
    uint64_t v5 = v3;
  }
  *(_DWORD *)(v5 + 24) = 9;
  return this;
}

void sub_19EAFD8FC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

CoreML::Specification::Model *_ZNSt3__115allocate_sharedB8ne180100IN6CoreML13Specification5ModelENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(CoreML::Specification::Model **a1)
{
  uint64_t v2 = operator new(0x48uLL);
  v2[1] = 0;
  v2[2] = 0;
  *uint64_t v2 = &unk_1EF0DD6C0;
  BOOL result = CoreML::Specification::Model::Model((CoreML::Specification::Model *)(v2 + 3));
  *a1 = result;
  a1[1] = (CoreML::Specification::Model *)v2;
  return result;
}

void sub_19EAFD968(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

CoreML::Specification::Model *std::allocate_shared[abi:ne180100]<CoreML::Specification::Model,std::allocator<CoreML::Specification::Model>,CoreML::Specification::Model const&,void>(CoreML::Specification::Model **a1, const CoreML::Specification::Model *a2)
{
  int v4 = operator new(0x48uLL);
  v4[1] = 0;
  v4[2] = 0;
  *int v4 = &unk_1EF0DD6C0;
  BOOL result = CoreML::Specification::Model::Model((CoreML::Specification::Model *)(v4 + 3), a2);
  *a1 = result;
  a1[1] = (CoreML::Specification::Model *)v4;
  return result;
}

void sub_19EAFD9E4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

CoreML::Model *CoreML::Model::Model(CoreML::Model *this, const CoreML::Specification::Model *a2)
{
  *(void *)this = &unk_1EF0DB228;
  *((void *)this + 1) = 0;
  uint64_t v3 = (CoreML **)((char *)this + 8);
  *((void *)this + 2) = 0;
  std::allocate_shared[abi:ne180100]<CoreML::Specification::Model,std::allocator<CoreML::Specification::Model>,CoreML::Specification::Model const&,void>((CoreML::Specification::Model **)&v9, a2);
  uint64_t v5 = (CoreML *)v9;
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 2);
  *(_OWORD *)((char *)this + 8) = v9;
  if (v6)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    long long v7 = *v3;
  }
  else
  {
    long long v7 = v5;
  }
  CoreML::downgradeSpecificationVersion(v7, v4);
  return this;
}

void sub_19EAFDA7C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

void CoreML::Model::validate(CoreML::Model *this, const CoreML::Specification::Model *a2)
{
  int v4 = *((_DWORD *)a2 + 6);
  if (v4)
  {
    if (v4 >= 10)
    {
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v66);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v66.__r_.__value_.__r.__words[2], (uint64_t)"The model supplied is of version ", 33);
      uint64_t v5 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)", intended for a newer version of Xcode. This version of Xcode supports model version ", 86);
      uint64_t v6 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" or earlier.", 12);
      std::stringbuf::str();
      std::string::size_type v59 = 7;
      std::operator+<char>();
      if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v71.__r_.__value_.__l.__data_);
      }
      v66.__r_.__value_.__r.__words[0] = *MEMORY[0x1E4FBA408];
      std::string::size_type v7 = *(void *)(MEMORY[0x1E4FBA408] + 72);
      *(std::string::size_type *)((char *)v66.__r_.__value_.__r.__words
                                + *(void *)(v66.__r_.__value_.__r.__words[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408]
                                                                                                  + 64);
      v66.__r_.__value_.__r.__words[2] = v7;
      uint64_t v67 = MEMORY[0x1E4FBA470] + 16;
      if (v69 < 0) {
        operator delete(__p);
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x19F3C1850](&v70);
      goto LABEL_47;
    }
    int v9 = *((_DWORD *)a2 + 11);
    char v10 = 1;
    if (v9 <= 302)
    {
      if ((v9 - 200) < 3) {
        goto LABEL_20;
      }
    }
    else if (v9 > 499)
    {
      if (v9 == 500 || v9 == 502) {
        goto LABEL_20;
      }
    }
    else if (v9 == 303 || v9 == 403)
    {
      goto LABEL_20;
    }
    char v10 = 0;
LABEL_20:
    v65[0] = v10;
    v65[1] = 0;
    v65[2] = v9 == 502;
    v65[3] = v9 == 502;
    if (*((void *)a2 + 2)) {
      std::string::size_type v11 = (uint64_t *)*((void *)a2 + 2);
    }
    else {
      std::string::size_type v11 = &CoreML::Specification::_ModelDescription_default_instance_;
    }
    CoreML::validateModelDescription((uint64_t)&v62, (uint64_t)v11, v4, v65);
    int v12 = v62;
    if ((v62 & 0xFFFFFFEF) != 0) {
      goto LABEL_43;
    }
    if (!*((unsigned char *)a2 + 28))
    {
LABEL_42:
      if ((v12 & 0xFFFFFFEF) == 0)
      {
        unint64_t inited = CoreML::Result::Result((CoreML::Result *)&v66);
        std::string::size_type v21 = (uint64_t *)*((void *)a2 + 2);
        if (!v21) {
          std::string::size_type v21 = &CoreML::Specification::_ModelDescription_default_instance_;
        }
        uint64_t v22 = v21[4];
        if (v22) {
          uint64_t v23 = v22 + 8;
        }
        else {
          uint64_t v23 = 0;
        }
        uint64_t v24 = *((int *)v21 + 6);
        if (!v24)
        {
LABEL_100:
          CoreML::Result::Result((CoreML::Result *)&v71);
          goto LABEL_101;
        }
        uint64_t v25 = 8 * v24;
        while (1)
        {
          char v26 = *(uint64_t **)(*(void *)v23 + 32);
          if (!v26) {
            char v26 = &CoreML::Specification::_FeatureType_default_instance_;
          }
          if (*((unsigned char *)v26 + 16))
          {
            if (*((_DWORD *)v26 + 9) == 5)
            {
              long long v27 = (uint64_t *)v26[3];
            }
            else
            {
              unint64_t inited = (CoreML::Specification::protobuf_FeatureTypes_2eproto *)CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(inited);
              long long v27 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
            }
            unsigned int v28 = *((_DWORD *)v27 + 16);
            BOOL v29 = v28 > 0x3D;
            uint64_t v30 = (1 << v28) & 0x2008020000000000;
            if (!v29 && v30 != 0)
            {
              int v32 = *((_DWORD *)a2 + 11);
              if (v32 <= 499)
              {
                if (v32 != 303 && v32 != 403)
                {
LABEL_203:
                  std::string::basic_string[abi:ne180100]<0>(&v73, "Default optional values are only allowed for neural networks.");
                  v71.__r_.__value_.__r.__words[0] = 13;
                  std::operator+<char>();
LABEL_146:
                  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v73.__r_.__value_.__l.__data_);
                  }
LABEL_101:
                  int data = (int)v71.__r_.__value_.__l.__data_;
                  v66.__r_.__value_.__r.__words[0] = v71.__r_.__value_.__r.__words[0];
                  if (SHIBYTE(v67) < 0)
                  {
                    operator delete((void *)v66.__r_.__value_.__l.__size_);
                    int data = (int)v66.__r_.__value_.__l.__data_;
                  }
                  *(_OWORD *)&v66.__r_.__value_.__r.__words[1] = *(_OWORD *)&v71.__r_.__value_.__r.__words[1];
                  uint64_t v67 = v72;
                  if ((data & 0xFFFFFFEF) != 0) {
                    goto LABEL_184;
                  }
                  int v34 = *((_DWORD *)a2 + 11);
                  if (v34 <= 402)
                  {
                    if (v34 > 301)
                    {
                      switch(v34)
                      {
                        case 302:
                          goto LABEL_183;
                        case 303:
                          goto LABEL_165;
                        case 402:
                          goto LABEL_183;
                      }
                    }
                    else if ((v34 - 200) < 3)
                    {
                      goto LABEL_183;
                    }
                  }
                  else
                  {
                    if (v34 > 501)
                    {
                      if (v34 > 899)
                      {
                        if (v34 == 900) {
                          goto LABEL_183;
                        }
                        if (v34 != 3000) {
                          goto LABEL_205;
                        }
                      }
                      else if (v34 != 502)
                      {
                        if (v34 != 601) {
                          goto LABEL_205;
                        }
LABEL_183:
                        if (((uint64_t)v66.__r_.__value_.__l.__data_ & 0xFFFFFFEF) != 0)
                        {
LABEL_184:
                          std::string::size_type v59 = v66.__r_.__value_.__r.__words[0];
                          *(_OWORD *)char v60 = *(_OWORD *)&v66.__r_.__value_.__r.__words[1];
                          uint64_t v61 = v67;
                          *(_OWORD *)&v66.__r_.__value_.__r.__words[1] = 0uLL;
                          uint64_t v67 = 0;
                        }
                        else
                        {
                          if (*((void *)a2 + 2)) {
                            uint64_t v42 = (uint64_t *)*((void *)a2 + 2);
                          }
                          else {
                            uint64_t v42 = &CoreML::Specification::_ModelDescription_default_instance_;
                          }
                          uint64_t v43 = v42[7];
                          if (v43) {
                            uint64_t v44 = v43 + 8;
                          }
                          else {
                            uint64_t v44 = 0;
                          }
                          uint64_t v45 = *((int *)v42 + 12);
                          if (v45)
                          {
                            uint64_t v46 = 8 * v45;
                            while (1)
                            {
                              uint64_t v47 = *(uint64_t **)(*(void *)v44 + 32);
                              if (!v47) {
                                uint64_t v47 = &CoreML::Specification::_FeatureType_default_instance_;
                              }
                              if (*((unsigned char *)v47 + 16)) {
                                break;
                              }
                              v44 += 8;
                              v46 -= 8;
                              if (!v46) {
                                goto LABEL_200;
                              }
                            }
                            std::string::basic_string[abi:ne180100]<0>(&v71, "Outputs cannot be optional.");
                            std::string::size_type v59 = 12;
                            std::operator+<char>();
                            if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
                              operator delete(v71.__r_.__value_.__l.__data_);
                            }
                          }
                          else
                          {
LABEL_200:
                            CoreML::Result::Result((CoreML::Result *)&v59);
                          }
                        }
                        if (SHIBYTE(v67) < 0)
                        {
                          std::string::size_type size = (void *)v66.__r_.__value_.__l.__size_;
LABEL_187:
                          operator delete(size);
                        }
LABEL_44:
                        if (SHIBYTE(v64) < 0)
                        {
                          uint64_t v8 = v63[0];
LABEL_46:
                          operator delete(v8);
                        }
                        goto LABEL_47;
                      }
LABEL_165:
                      std::string v35 = (uint64_t *)*((void *)a2 + 2);
                      if (!v35) {
                        std::string v35 = &CoreML::Specification::_ModelDescription_default_instance_;
                      }
                      uint64_t v36 = v35[4];
                      if (v36) {
                        uint64_t v37 = v36 + 8;
                      }
                      else {
                        uint64_t v37 = 0;
                      }
                      uint64_t v38 = *((int *)v35 + 6);
                      if (!v38) {
                        goto LABEL_179;
                      }
                      char v39 = 0;
                      uint64_t v40 = 8 * v38;
                      do
                      {
                        unint64_t v41 = *(uint64_t **)(*(void *)v37 + 32);
                        if (!v41) {
                          unint64_t v41 = &CoreML::Specification::_FeatureType_default_instance_;
                        }
                        if (*((_DWORD *)v41 + 9) == 8)
                        {
                          char v39 = 1;
                        }
                        else if (!*((unsigned char *)v41 + 16))
                        {
                          goto LABEL_179;
                        }
                        v37 += 8;
                        v40 -= 8;
                      }
                      while (v40);
                      if (((int)v38 < 1) | v39 & 1)
                      {
LABEL_179:
                        CoreML::Result::Result((CoreML::Result *)&v71);
LABEL_180:
                        v66.__r_.__value_.__r.__words[0] = v71.__r_.__value_.__r.__words[0];
                        if (SHIBYTE(v67) < 0) {
                          operator delete((void *)v66.__r_.__value_.__l.__size_);
                        }
                        *(_OWORD *)&v66.__r_.__value_.__r.__words[1] = *(_OWORD *)&v71.__r_.__value_.__r.__words[1];
                        uint64_t v67 = v72;
                        goto LABEL_183;
                      }
                      std::string::basic_string[abi:ne180100]<0>(&v73, "At least one feature for a neural network must NOT be optional.");
                      v71.__r_.__value_.__r.__words[0] = 13;
                      std::operator+<char>();
LABEL_228:
                      if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v73.__r_.__value_.__l.__data_);
                      }
                      goto LABEL_180;
                    }
                    if (v34 == 403 || v34 == 500) {
                      goto LABEL_165;
                    }
                    if (v34 == 501) {
                      goto LABEL_183;
                    }
                  }
LABEL_205:
                  __int32 v48 = (uint64_t *)*((void *)a2 + 2);
                  if (!v48) {
                    __int32 v48 = &CoreML::Specification::_ModelDescription_default_instance_;
                  }
                  uint64_t v49 = v48[4];
                  if (v49) {
                    uint64_t v50 = v49 + 8;
                  }
                  else {
                    uint64_t v50 = 0;
                  }
                  uint64_t v51 = *((int *)v48 + 6);
                  if (v51)
                  {
                    uint64_t v52 = 8 * v51;
                    while (1)
                    {
                      __int32 v53 = *(uint64_t **)(*(void *)v50 + 32);
                      if (!v53) {
                        __int32 v53 = &CoreML::Specification::_FeatureType_default_instance_;
                      }
                      if (*((unsigned char *)v53 + 16)) {
                        break;
                      }
                      v50 += 8;
                      v52 -= 8;
                      if (!v52) {
                        goto LABEL_216;
                      }
                    }
                    std::string::basic_string[abi:ne180100]<0>(&v73, "Features cannot be optional to this type of model.");
                    v71.__r_.__value_.__r.__words[0] = 13;
                    std::operator+<char>();
                  }
                  else
                  {
LABEL_216:
                    uint64_t v54 = v48[7];
                    if (v54) {
                      uint64_t v55 = v54 + 8;
                    }
                    else {
                      uint64_t v55 = 0;
                    }
                    uint64_t v56 = *((int *)v48 + 12);
                    if (!v56) {
                      goto LABEL_179;
                    }
                    uint64_t v57 = 8 * v56;
                    while (1)
                    {
                      __int32 v58 = *(uint64_t **)(*(void *)v55 + 32);
                      if (!v58) {
                        __int32 v58 = &CoreML::Specification::_FeatureType_default_instance_;
                      }
                      if (*((unsigned char *)v58 + 16)) {
                        break;
                      }
                      v55 += 8;
                      v57 -= 8;
                      if (!v57) {
                        goto LABEL_179;
                      }
                    }
                    std::string::basic_string[abi:ne180100]<0>(&v73, "Outputs cannot be optional.");
                    v71.__r_.__value_.__r.__words[0] = 12;
                    std::operator+<char>();
                  }
                  goto LABEL_228;
                }
              }
              else if (v32 != 500 && v32 != 502 && v32 != 3000)
              {
                goto LABEL_203;
              }
              if (*((int *)a2 + 6) <= 4)
              {
                std::string::basic_string[abi:ne180100]<0>(&v73, "Default value for optional inputs is supported from specification 5 (iOS 14) onwards!");
                v71.__r_.__value_.__r.__words[0] = 12;
                std::operator+<char>();
                goto LABEL_146;
              }
            }
          }
          v23 += 8;
          v25 -= 8;
          if (!v25) {
            goto LABEL_100;
          }
        }
      }
LABEL_43:
      std::string::size_type v59 = v62;
      *(_OWORD *)char v60 = *(_OWORD *)v63;
      uint64_t v61 = v64;
      v63[0] = 0;
      v63[1] = 0;
      uint64_t v64 = 0;
      goto LABEL_44;
    }
    if (*((int *)a2 + 6) <= 3)
    {
      std::to_string(&v73, 4);
      long long v13 = std::string::insert(&v73, 0, "Model specification version for an updatable model must be '");
      long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      v71.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v71.__r_.__value_.__l.__data_ = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      long long v15 = std::string::append(&v71, "' or above.");
      long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
      v66.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v16;
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v71.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v73.__r_.__value_.__l.__data_);
      }
      std::string::size_type v59 = 6;
      std::operator+<char>();
      if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::size_type size = (void *)v66.__r_.__value_.__r.__words[0];
        goto LABEL_187;
      }
      goto LABEL_44;
    }
    CoreML::Result::Result((CoreML::Result *)&v66);
    int v18 = *((_DWORD *)a2 + 11);
    if (v18 > 402)
    {
      if ((v18 - 403) >= 2 && v18 != 500) {
        goto LABEL_151;
      }
    }
    else if ((v18 - 200) >= 3 && v18 != 303)
    {
LABEL_151:
      memset(&v73, 0, sizeof(v73));
      MEMORY[0x19F3C1430](&v73, "This model type is not supported for on-device update.");
      v71.__r_.__value_.__r.__words[0] = 14;
      std::operator+<char>();
      if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v73.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v67) < 0) {
        operator delete((void *)v66.__r_.__value_.__l.__size_);
      }
      goto LABEL_39;
    }
    std::string v71 = v66;
    uint64_t v72 = v67;
LABEL_39:
    int v12 = (int)v71.__r_.__value_.__l.__data_;
    std::string::size_type v62 = v71.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v64) < 0)
    {
      operator delete(v63[0]);
      int v12 = v62;
    }
    *(_OWORD *)std::string v63 = *(_OWORD *)&v71.__r_.__value_.__r.__words[1];
    uint64_t v64 = v72;
    goto LABEL_42;
  }
  std::string::basic_string[abi:ne180100]<0>(&v66, "Model specification version field missing or corrupt.");
  std::string::size_type v59 = 6;
  std::operator+<char>();
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
  {
    uint64_t v8 = (void *)v66.__r_.__value_.__r.__words[0];
    goto LABEL_46;
  }
LABEL_47:
  if ((v59 & 0xFFFFFFEF) != 0)
  {
    *(void *)this = v59;
    *(_OWORD *)((char *)this + 8) = *(_OWORD *)v60;
    *((void *)this + 3) = v61;
    v60[0] = 0;
    v60[1] = 0;
    uint64_t v61 = 0;
    goto LABEL_49;
  }
  int v19 = *((_DWORD *)a2 + 11);
  if (v19 > 559)
  {
    if (v19 > 899)
    {
      switch(v19)
      {
        case 2000:
          CoreML::validate<(MLModelType)2000>((uint64_t)this, (uint64_t)a2);
          break;
        case 2001:
          CoreML::validate<(MLModelType)2001>(this, (uint64_t)a2);
          break;
        case 2002:
          CoreML::validate<(MLModelType)2002>((uint64_t)this, (uint64_t)a2);
          break;
        case 2003:
          CoreML::validate<(MLModelType)2003>((uint64_t)this, (uint64_t)a2);
          break;
        case 2004:
          CoreML::validate<(MLModelType)2004>((uint64_t)this, (uint64_t)a2);
          break;
        case 2005:
          CoreML::validate<(MLModelType)2005>((uint64_t)this, (uint64_t)a2);
          break;
        case 2006:
          CoreML::validate<(MLModelType)2006>((uint64_t)this, (uint64_t)a2);
          break;
        default:
          if (v19 == 900 || v19 == 3000) {
            goto LABEL_112;
          }
          goto LABEL_125;
      }
    }
    else
    {
      switch(v19)
      {
        case 600:
          CoreML::validate<(MLModelType)600>((uint64_t)this, (uint64_t)a2);
          break;
        case 601:
          CoreML::validate<(MLModelType)601>((uint64_t)this, (uint64_t)a2);
          break;
        case 602:
          CoreML::validate<(MLModelType)602>((uint64_t)this, (uint64_t)a2);
          break;
        case 603:
          CoreML::validate<(MLModelType)603>((uint64_t)this, (uint64_t)a2);
          break;
        case 604:
          CoreML::validate<(MLModelType)604>((uint64_t)this, (uint64_t)a2);
          break;
        case 605:
        case 608:
          goto LABEL_125;
        case 606:
          CoreML::validate<(MLModelType)606>((uint64_t)this, (uint64_t)a2);
          break;
        case 607:
          CoreML::validate<(MLModelType)607>((uint64_t)this, (uint64_t)a2);
          break;
        case 609:
          CoreML::validate<(MLModelType)609>((uint64_t)this, (uint64_t)a2);
          break;
        case 610:
          CoreML::validate<(MLModelType)610>(this, (uint64_t)a2);
          break;
        default:
          if (v19 != 560) {
            goto LABEL_125;
          }
          CoreML::validate<(MLModelType)560>((uint64_t)this, (uint64_t)a2);
          break;
      }
    }
    goto LABEL_49;
  }
  if (v19 > 399)
  {
    if (v19 <= 499)
    {
      switch(v19)
      {
        case 400:
          CoreML::validate<(MLModelType)400>((uint64_t)this, (uint64_t)a2);
          break;
        case 401:
          CoreML::validate<(MLModelType)401>((uint64_t)this, (uint64_t)a2);
          break;
        case 402:
          CoreML::validate<(MLModelType)402>(this, a2);
          break;
        case 403:
          CoreML::validate<(MLModelType)403>((unint64_t *)this, (uint64_t)a2);
          break;
        case 404:
          CoreML::validate<(MLModelType)404>((uint64_t)this, (uint64_t)a2);
          break;
        default:
          goto LABEL_125;
      }
      goto LABEL_49;
    }
    if (v19 <= 501)
    {
      if (v19 == 500) {
        CoreML::validate<(MLModelType)500>((uint64_t)this, (uint64_t)a2);
      }
      else {
        CoreML::validate<(MLModelType)501>((uint64_t)this, (uint64_t)a2);
      }
      goto LABEL_49;
    }
    switch(v19)
    {
      case 502:
LABEL_112:
        CoreML::Result::Result(this);
        goto LABEL_49;
      case 555:
        CoreML::validate<(MLModelType)555>((uint64_t)this, (uint64_t)a2);
        goto LABEL_49;
      case 556:
        CoreML::validate<(MLModelType)556>((uint64_t)this, (uint64_t)a2);
        goto LABEL_49;
    }
LABEL_125:
    std::string::basic_string[abi:ne180100]<0>(&v66, "Model did not specify a valid model-parameter type.");
    *(void *)this = 12;
    std::operator+<char>();
    if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v66.__r_.__value_.__l.__data_);
    }
    goto LABEL_49;
  }
  if (v19 <= 299)
  {
    switch(v19)
    {
      case 200:
        CoreML::validate<(MLModelType)200>(this, (uint64_t)a2);
        goto LABEL_49;
      case 201:
        CoreML::validate<(MLModelType)201>(this, a2);
        goto LABEL_49;
      case 202:
        CoreML::validate<(MLModelType)202>(this, a2);
        goto LABEL_49;
    }
    goto LABEL_125;
  }
  switch(v19)
  {
    case 300:
      CoreML::validate<(MLModelType)300>((uint64_t)this, (uint64_t)a2);
      break;
    case 301:
      CoreML::validate<(MLModelType)301>((uint64_t)this, (uint64_t)a2);
      break;
    case 302:
      CoreML::validate<(MLModelType)302>(this, a2);
      break;
    case 303:
      CoreML::validate<(MLModelType)303>((uint64_t)this, (uint64_t)a2);
      break;
    case 304:
      CoreML::validate<(MLModelType)304>((void **)this, (uint64_t)a2);
      break;
    default:
      goto LABEL_125;
  }
LABEL_49:
  if (SHIBYTE(v61) < 0) {
    operator delete(v60[0]);
  }
}

void sub_19EAFE87C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,void *__p,int a27,__int16 a28,char a29,char a30,int a31,__int16 a32,char a33,char a34)
{
  if (*(char *)(v34 - 97) < 0) {
    operator delete(*(void **)(v34 - 120));
  }
  if (a34 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

double CoreML::Model::load(uint64_t a1, void *a2, uint64_t a3)
{
  if (*(_DWORD *)((char *)a2 + *(void *)(*a2 - 24) + 32))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "unable to open file for read");
    *(void *)a1 = 3;
    std::operator+<char>();
    if (SHIBYTE(v23) < 0) {
      operator delete(__p);
    }
  }
  else
  {
    uint64_t v6 = *(google::protobuf::MessageLite **)(a3 + 8);
    std::string __p = &unk_1EF0DB2F8;
    *(void *)&long long v23 = &unk_1EF0DB2C8;
    *((void *)&v23 + 1) = a2;
    v24[0] = &unk_1EF0DB3A8;
    v24[1] = &v23;
    __int16 v25 = 0;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    int v29 = 0;
    int v30 = 0;
    int v28 = 0x2000;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    p_p = &__p;
    *(void *)long long v15 = 0;
    *(void *)((char *)&v15[1] + 2) = 0;
    uint64_t v16 = 0x7FFFFFFFLL;
    uint64_t v17 = 0x647FFFFFFFLL;
    int v18 = 100;
    char v19 = 1;
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    google::protobuf::io::CodedInputStream::Refresh((google::protobuf::io::CodedInputStream *)&v12);
    LODWORD(v17) = 0x7FFFFFFF;
    uint64_t v7 = v13 + SHIDWORD(v16);
    uint64_t v13 = v7;
    int v8 = v15[0] - v16;
    if (v15[0] <= (int)v16) {
      int v8 = 0;
    }
    else {
      uint64_t v13 = v7 - v8;
    }
    HIDWORD(v16) = v8;
    if (google::protobuf::MessageLite::ParseFromCodedStream(v6, (google::protobuf::io::CodedInputStream *)&v12))
    {
      CoreML::Result::Result((CoreML::Result *)a1);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v10, "unable to deserialize object");
      *(void *)a1 = 5;
      std::operator+<char>();
      if (v11 < 0) {
        operator delete(v10);
      }
    }
    google::protobuf::io::CodedInputStream::~CodedInputStream((google::protobuf::io::CodedInputStream *)&v12);
    std::string __p = &unk_1EF0DB2F8;
    google::protobuf::io::CopyingInputStreamAdaptor::~CopyingInputStreamAdaptor((google::protobuf::io::CopyingInputStreamAdaptor *)v24);
    if ((*(_DWORD *)a1 & 0xFFFFFFEF) == 0)
    {
      CoreML::Model::validate((CoreML::Model *)&__p, *(const CoreML::Specification::Model **)(a3 + 8));
      *(void *)a1 = __p;
      int v9 = (void **)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        operator delete(*v9);
      }
      double result = *(double *)&v23;
      *(_OWORD *)int v9 = v23;
      *(void *)(a1 + 24) = v24[0];
    }
  }
  return result;
}

void sub_19EAFEC70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (*(char *)(v31 + 31) < 0) {
    operator delete(*(void **)(v31 + 8));
  }
  _Unwind_Resume(exception_object);
}

uint64_t CoreML::Model::save(uint64_t a1, uint64_t a2)
{
  v29[19] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = MEMORY[0x1E4FBA468] + 64;
  v29[0] = MEMORY[0x1E4FBA468] + 64;
  uint64_t v5 = (uint64_t *)MEMORY[0x1E4FBA400];
  uint64_t v6 = *(void *)(MEMORY[0x1E4FBA400] + 16);
  uint64_t v27 = *(void *)(MEMORY[0x1E4FBA400] + 8);
  *(void *)&v28[*(void *)(v27 - 24) - 8] = v6;
  uint64_t v7 = (std::ios_base *)&v28[*(void *)(v27 - 24) - 8];
  std::ios_base::init(v7, v28);
  uint64_t v8 = MEMORY[0x1E4FBA468] + 24;
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  uint64_t v27 = v8;
  v29[0] = v4;
  MEMORY[0x19F3C14F0](v28);
  if (!std::filebuf::open()) {
    std::ios_base::clear((std::ios_base *)&v28[*(void *)(v27 - 24) - 8], *(_DWORD *)&v28[*(void *)(v27 - 24) + 24] | 4);
  }
  if (*(_DWORD *)&v28[*(void *)(v27 - 24) + 24])
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "unable to open file for write");
    *(void *)a1 = 3;
    std::operator+<char>();
    if (SHIBYTE(v20) < 0)
    {
      char v10 = __p;
LABEL_6:
      operator delete(v10);
    }
  }
  else
  {
    CoreML::downgradeSpecificationVersion(*(CoreML **)(a2 + 8), v9);
    CoreML::Model::validate((CoreML::Model *)&v13, *(const CoreML::Specification::Model **)(a2 + 8));
    if ((v13 & 0xFFFFFFEF) != 0)
    {
      *(void *)a1 = v13;
      *(_OWORD *)(a1 + 8) = v14;
      *(void *)(a1 + 24) = v15;
      goto LABEL_14;
    }
    char v11 = *(google::protobuf::MessageLite **)(a2 + 8);
    std::string __p = &unk_1EF0DB360;
    char v19 = &unk_1EF0DB338;
    uint64_t v20 = &v27;
    uint64_t v21 = &unk_1EF0DB3E8;
    uint64_t v22 = &v19;
    __int16 v23 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    uint64_t v26 = 0x2000;
    if (google::protobuf::MessageLite::SerializeToZeroCopyStream(v11, (google::protobuf::io::ZeroCopyOutputStream *)&__p))
    {
      CoreML::Result::Result((CoreML::Result *)a1);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v16, "unable to serialize object");
      *(void *)a1 = 4;
      std::operator+<char>();
      if (v17 < 0) {
        operator delete(v16);
      }
    }
    google::protobuf::io::OstreamOutputStream::~OstreamOutputStream((google::protobuf::io::OstreamOutputStream *)&__p);
    if (SHIBYTE(v15) < 0)
    {
      char v10 = (void *)v14;
      goto LABEL_6;
    }
  }
LABEL_14:
  uint64_t v27 = *v5;
  *(void *)&v28[*(void *)(v27 - 24) - 8] = v5[3];
  MEMORY[0x19F3C1500](v28);
  std::ostream::~ostream();
  return MEMORY[0x19F3C1850](v29);
}

void sub_19EAFF0E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  google::protobuf::io::OstreamOutputStream::~OstreamOutputStream((google::protobuf::io::OstreamOutputStream *)&a22);
  if (a15 < 0) {
    operator delete(a10);
  }
  std::ofstream::~ofstream(&a34);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_pointer<CoreML::Specification::Model *,std::shared_ptr<CoreML::Specification::Model>::__shared_ptr_default_delete<CoreML::Specification::Model,CoreML::Specification::Model>,std::allocator<CoreML::Specification::Model>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrIN6CoreML13Specification5ModelEE27__shared_ptr_default_deleteIS3_S3_EE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<CoreML::Specification::Model *,std::shared_ptr<CoreML::Specification::Model>::__shared_ptr_default_delete<CoreML::Specification::Model,CoreML::Specification::Model>,std::allocator<CoreML::Specification::Model>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<CoreML::Specification::Model *,std::shared_ptr<CoreML::Specification::Model>::__shared_ptr_default_delete<CoreML::Specification::Model,CoreML::Specification::Model>,std::allocator<CoreML::Specification::Model>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x19F3C1920);
}

void _MLModelSpecification::_MLModelSpecification(_MLModelSpecification *this, const CoreML::Model *a2)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  operator new();
}

void sub_19EAFF2D4(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 8);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<CoreML::Specification::Metadata>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF0DD6F8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x19F3C1920);
}

void std::__shared_ptr_emplace<CoreML::Specification::Metadata>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF0DD6F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void _MLModelDescriptionSpecification::_MLModelDescriptionSpecification(_MLModelDescriptionSpecification *this, const CoreML::Specification::ModelDescription *a2)
{
  uint64_t v4 = operator new(0xC8uLL);
  v4[1] = 0;
  v4[2] = 0;
  *uint64_t v4 = &unk_1EF0DD688;
  *(void *)this = CoreML::Specification::ModelDescription::ModelDescription((CoreML::Specification::ModelDescription *)(v4 + 3), a2);
  *((void *)this + 1) = v4;
}

void sub_19EAFF418(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void CoreML::validate<(MLModelType)501>(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16)) {
    uint64_t v4 = *(uint64_t **)(a2 + 16);
  }
  else {
    uint64_t v4 = &CoreML::Specification::_ModelDescription_default_instance_;
  }
  CoreML::Result::Result((CoreML::Result *)&v13);
  int v5 = *(_DWORD *)(a2 + 24);
  int v9 = 0;
  CoreML::validateModelDescription((uint64_t)&v10, (uint64_t)v4, v5, (char *)&v9);
  int v6 = v10;
  uint64_t v13 = v10;
  if (SHIBYTE(v15) < 0)
  {
    operator delete((void *)__p);
    int v6 = v13;
  }
  long long __p = v11;
  uint64_t v15 = v12;
  if ((v6 & 0xFFFFFFEF) != 0)
  {
    *(void *)a1 = v13;
    *(_OWORD *)(a1 + 8) = __p;
    *(void *)(a1 + 24) = v15;
    long long __p = 0uLL;
    uint64_t v15 = 0;
  }
  else
  {
    CoreML::Recommender::constructAndValidateItemSimilarityRecommenderFromSpec((CoreML::Recommender *)v7, (const CoreML::Specification::Model *)a2);
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
    CoreML::Result::Result((CoreML::Result *)a1);
  }
  if (SHIBYTE(v15) < 0) {
    operator delete((void *)__p);
  }
}

void sub_19EAFF528(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void CoreML::validate<(MLModelType)602>(uint64_t a1, uint64_t a2)
{
  v26[2] = *MEMORY[0x1E4F143B8];
  if (*(void *)(a2 + 16)) {
    uint64_t v4 = *(uint64_t **)(a2 + 16);
  }
  else {
    uint64_t v4 = &CoreML::Specification::_ModelDescription_default_instance_;
  }
  CoreML::Result::Result((CoreML::Result *)&v19);
  int v5 = *(_DWORD *)(a2 + 24);
  LODWORD(v21) = 0;
  CoreML::validateModelDescription((uint64_t)&v24, (uint64_t)v4, v5, (char *)&v21);
  int v6 = (int)v24;
  char v19 = v24;
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    int v6 = (int)v19;
  }
  *(_OWORD *)long long __p = *(_OWORD *)v25;
  *(void *)&__p[16] = *(void *)&v25[16];
  if ((v6 & 0xFFFFFFEF) == 0)
  {
    uint64_t v7 = (unsigned int *)operator new(0x10uLL);
    *(_OWORD *)uint64_t v7 = xmmword_19EC7B930;
    v18[1] = v7 + 4;
    v18[2] = v7 + 4;
    v18[0] = v7;
    CoreML::Result::Result((CoreML::Result *)&v24);
    if (*((int *)v4 + 6) >= 1)
    {
      uint64_t v8 = 0;
      do
      {
        CoreML::validateSchemaTypes((CoreML::Result *)&v21, v18, *(void *)(v4[4] + 8 * v8 + 8));
        int v9 = (int)v21;
        uint64_t v24 = v21;
        if ((v25[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)v25);
          int v9 = (int)v24;
        }
        *(_OWORD *)uint64_t v25 = v22;
        *(void *)&v25[16] = v23;
        if ((v9 & 0xFFFFFFEF) != 0) {
          break;
        }
        ++v8;
      }
      while (v8 < *((int *)v4 + 6));
    }
    uint64_t v10 = *(void *)v25;
    v26[0] = *(void *)&v25[8];
    *(void *)((char *)v26 + 7) = *(void *)&v25[15];
    char v11 = v25[23];
    char v19 = v24;
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    *(void *)long long __p = v10;
    *(void *)&__p[8] = v26[0];
    *(void *)&__p[15] = *(void *)((char *)v26 + 7);
    __p[23] = v11;
    operator delete(v7);
    if ((v19 & 0xFFFFFFEF) == 0)
    {
      uint64_t v12 = (unsigned int *)operator new(4uLL);
      *uint64_t v12 = 5;
      *(void *)&long long v22 = v12 + 1;
      *((void *)&v22 + 1) = v12 + 1;
      uint64_t v21 = v12;
      CoreML::validateDescriptionsContainFeatureWithTypes<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>((uint64_t)&v24, (uint64_t)(v4 + 5), 1, &v21);
      char v19 = v24;
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      *(_OWORD *)long long __p = *(_OWORD *)v25;
      *(void *)&__p[16] = *(void *)&v25[16];
      v25[23] = 0;
      v25[0] = 0;
      operator delete(v12);
      if ((v19 & 0xFFFFFFEF) == 0)
      {
        uint64_t v14 = 0;
        while (1)
        {
          if (*(_DWORD *)(a2 + 44) == 602)
          {
            uint64_t v15 = *(uint64_t **)(a2 + 32);
          }
          else
          {
            unint64_t inited = CoreML::Specification::protobuf_FeatureVectorizer_2eproto::InitDefaults((CoreML::Specification::protobuf_FeatureVectorizer_2eproto *)inited);
            uint64_t v15 = &CoreML::Specification::_FeatureVectorizer_default_instance_;
          }
          if (v14 >= *((int *)v15 + 6)) {
            break;
          }
          if (*(_DWORD *)(a2 + 44) == 602)
          {
            uint64_t v16 = *(uint64_t **)(a2 + 32);
          }
          else
          {
            unint64_t inited = CoreML::Specification::protobuf_FeatureVectorizer_2eproto::InitDefaults((CoreML::Specification::protobuf_FeatureVectorizer_2eproto *)inited);
            uint64_t v16 = &CoreML::Specification::_FeatureVectorizer_default_instance_;
          }
          if (!*(void *)(*(void *)(v16[4] + 8 * v14++ + 8) + 24))
          {
            std::string::basic_string[abi:ne180100]<0>(&v24, "Dimension size must be greater tha zero.");
            *(void *)a1 = 13;
            std::operator+<char>();
            if ((v25[15] & 0x80000000) != 0) {
              operator delete(v24);
            }
            if ((__p[23] & 0x80000000) != 0) {
              operator delete(*(void **)__p);
            }
            return;
          }
        }
      }
    }
  }
  *(void *)a1 = v19;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)__p;
  *(void *)(a1 + 24) = *(void *)&__p[16];
}

void sub_19EAFF918(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,void *a24,int a25,__int16 a26,char a27,char a28,int a29,__int16 a30,char a31,char a32)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a18 < 0) {
    operator delete(a13);
  }
  _Unwind_Resume(exception_object);
}

CoreML::Result *CoreML::validateSchemaTypes(CoreML::Result *this, unsigned int **a2, uint64_t a3)
{
  if (*(void *)(a3 + 32)) {
    int v6 = *(uint64_t **)(a3 + 32);
  }
  else {
    int v6 = &CoreML::Specification::_FeatureType_default_instance_;
  }
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  if (*a2 == v8)
  {
LABEL_8:
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v35);
    uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"Unsupported type \"", 18);
    char v11 = *(uint64_t **)(a3 + 32);
    if (!v11) {
      char v11 = &CoreML::Specification::_FeatureType_default_instance_;
    }
    uint64_t v12 = *((unsigned int *)v11 + 9);
    if (v12 > 8) {
      uint64_t v13 = "INVALID";
    }
    else {
      uint64_t v13 = off_1E59A5540[v12];
    }
    size_t v14 = strlen(v13);
    uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v13, v14);
    uint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"\" for feature \"", 15);
    char v17 = *(const void ***)(a3 + 16);
    if (*((char *)v17 + 23) >= 0) {
      size_t v18 = *((unsigned __int8 *)v17 + 23);
    }
    else {
      size_t v18 = (size_t)v17[1];
    }
    char v19 = __p;
    std::string::basic_string[abi:ne180100]((uint64_t)__p, v18 + 21);
    if ((v34 & 0x80u) != 0) {
      char v19 = (void **)__p[0];
    }
    if (v18)
    {
      if (*((char *)v17 + 23) >= 0) {
        uint64_t v20 = v17;
      }
      else {
        uint64_t v20 = *v17;
      }
      memmove(v19, v20, v18);
    }
    strcpy((char *)v19 + v18, "\". Should be one of: ");
    if ((v34 & 0x80u) == 0) {
      uint64_t v21 = __p;
    }
    else {
      uint64_t v21 = (void **)__p[0];
    }
    if ((v34 & 0x80u) == 0) {
      uint64_t v22 = v34;
    }
    else {
      uint64_t v22 = (uint64_t)__p[1];
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v21, v22);
    if ((char)v34 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v23 = *a2;
    uint64_t v24 = a2[1];
    if (*a2 != v24)
    {
      char v25 = 1;
      do
      {
        if ((v25 & 1) == 0) {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)", ", 2);
        }
        uint64_t v26 = *v23;
        uint64_t v27 = "INVALID";
        if (v26 <= 8) {
          uint64_t v27 = off_1E59A5540[v26];
        }
        size_t v28 = strlen(v27);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)v27, v28);
        char v25 = 0;
        ++v23;
      }
      while (v23 != v24);
    }
    int v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)".", 1);
    std::ios_base::getloc((const std::ios_base *)((char *)v29 + *(void *)(*v29 - 24)));
    int v30 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E4FBA258]);
    ((void (*)(const std::locale::facet *, uint64_t))v30->__vftable[2].~facet_0)(v30, 10);
    std::locale::~locale((std::locale *)__p);
    std::ostream::put();
    std::ostream::flush();
    std::stringbuf::str();
    *(void *)this = 8;
    std::operator+<char>();
    if ((char)v34 < 0) {
      operator delete(__p[0]);
    }
    v35[0] = *MEMORY[0x1E4FBA408];
    uint64_t v31 = *(void *)(MEMORY[0x1E4FBA408] + 72);
    *(void *)((char *)v35 + *(void *)(v35[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
    v36[0] = v31;
    v36[1] = MEMORY[0x1E4FBA470] + 16;
    if (v37 < 0) {
      operator delete((void *)v36[9]);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    return (CoreML::Result *)MEMORY[0x19F3C1850](&v38);
  }
  else
  {
    int v9 = *((_DWORD *)v6 + 9);
    while (v9 != *v7)
    {
      if (++v7 == v8) {
        goto LABEL_8;
      }
    }
    return CoreML::Result::Result(this);
  }
}

void sub_19EAFFDCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void CoreML::validateDescriptionsContainFeatureWithTypes<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>(uint64_t a1, uint64_t a2, int a3, unsigned int **a4)
{
  CoreML::Result::Result((CoreML::Result *)&v17);
  int v8 = *(_DWORD *)(a2 + 8);
  if (a3 && v8 > a3)
  {
    std::to_string(&v16, a3);
    int v9 = std::string::insert(&v16, 0, "Feature descriptions exceeded ");
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    *(void *)&__p[16] = *((void *)&v9->__r_.__value_.__l + 2);
    *(_OWORD *)long long __p = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    *(void *)a1 = 9;
    std::operator+<char>();
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v16.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v19) < 0) {
      operator delete(v18[0]);
    }
  }
  else
  {
    if (v8 < 1)
    {
LABEL_15:
      *(void *)a1 = v17;
      *(_OWORD *)(a1 + 8) = *(_OWORD *)v18;
      uint64_t v13 = v19;
    }
    else
    {
      uint64_t v11 = 0;
      while (1)
      {
        CoreML::validateSchemaTypes((CoreML::Result *)__p, a4, *(void *)(*(void *)(a2 + 16) + 8 * v11 + 8));
        int v12 = *(_DWORD *)__p;
        uint64_t v17 = *(void *)__p;
        if (SHIBYTE(v19) < 0)
        {
          operator delete(v18[0]);
          int v12 = v17;
        }
        *(_OWORD *)size_t v18 = *(_OWORD *)&__p[8];
        uint64_t v19 = v15;
        if ((v12 & 0xFFFFFFEF) != 0) {
          break;
        }
        if (++v11 >= *(int *)(a2 + 8)) {
          goto LABEL_15;
        }
      }
      *(void *)a1 = v17;
      *(_OWORD *)(a1 + 8) = *(_OWORD *)v18;
      uint64_t v13 = v19;
    }
    *(void *)(a1 + 24) = v13;
  }
}

void sub_19EAFFFAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

void CoreML::validate<(MLModelType)401>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (const CoreML::Specification::ModelDescription *)&CoreML::Specification::_ModelDescription_default_instance_;
  if (*(void *)(a2 + 16)) {
    int v5 = *(uint64_t **)(a2 + 16);
  }
  else {
    int v5 = &CoreML::Specification::_ModelDescription_default_instance_;
  }
  CoreML::Result::Result((CoreML::Result *)&v58);
  CoreML::validateDescriptionsAreAllVectorizableTypes<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>((uint64_t)&v61, (uint64_t)(v5 + 2));
  int data = (int)v61.__r_.__value_.__l.__data_;
  std::string::size_type v58 = v61.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v60) < 0)
  {
    operator delete((void *)__p);
    int data = v58;
  }
  long long __p = *(_OWORD *)&v61.__r_.__value_.__r.__words[1];
  uint64_t v60 = v62;
  if ((data & 0xFFFFFFEF) != 0) {
    goto LABEL_43;
  }
  if (*(_DWORD *)(a2 + 44) == 401)
  {
    int v8 = *(uint64_t **)(a2 + 32);
  }
  else
  {
    unint64_t inited = CoreML::Specification::protobuf_SVM_2eproto::InitDefaults((CoreML::Specification::protobuf_SVM_2eproto *)inited);
    int v8 = &CoreML::Specification::_SupportVectorClassifier_default_instance_;
  }
  int v9 = *((_DWORD *)v8 + 42);
  if (!v9)
  {
    std::string::basic_string[abi:ne180100]<0>(&v61, "Classifier models must provide class labels.");
    v56.__r_.__value_.__r.__words[0] = 13;
    long long v10 = (CoreML::Specification::protobuf_SVM_2eproto *)std::operator+<char>();
    goto LABEL_29;
  }
  if (v9 == 100)
  {
    if (!*(_DWORD *)(v8[19] + 24))
    {
      std::string::basic_string[abi:ne180100]<0>(&v61, "Classifier declared to have String class labels must provide labels.");
      v56.__r_.__value_.__r.__words[0] = 13;
      long long v10 = (CoreML::Specification::protobuf_SVM_2eproto *)std::operator+<char>();
      goto LABEL_29;
    }
    CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults((CoreML::Specification::protobuf_DataStructures_2eproto *)inited);
    if (qword_1EB4DE438)
    {
      std::string::basic_string[abi:ne180100]<0>(&v61, "Classifier declared with String class labels must provide exclusively String class labels.");
      v56.__r_.__value_.__r.__words[0] = 13;
      long long v10 = (CoreML::Specification::protobuf_SVM_2eproto *)std::operator+<char>();
      goto LABEL_29;
    }
    goto LABEL_19;
  }
  if (v9 != 101)
  {
LABEL_19:
    int v11 = 0;
    goto LABEL_20;
  }
  if (!*(_DWORD *)(v8[19] + 16))
  {
    std::string::basic_string[abi:ne180100]<0>(&v61, "Classifier declared to have Int64 class labels must provide labels.");
    v56.__r_.__value_.__r.__words[0] = 13;
    long long v10 = (CoreML::Specification::protobuf_SVM_2eproto *)std::operator+<char>();
    goto LABEL_29;
  }
  CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults((CoreML::Specification::protobuf_DataStructures_2eproto *)inited);
  if (dword_1EB4E2310)
  {
    std::string::basic_string[abi:ne180100]<0>(&v61, "Classifier declared with Int64 class labels must provide exclusively Int64 class labels.");
    v56.__r_.__value_.__r.__words[0] = 13;
    long long v10 = (CoreML::Specification::protobuf_SVM_2eproto *)std::operator+<char>();
LABEL_29:
    if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_32;
    }
    std::string::size_type size = (void *)v61.__r_.__value_.__r.__words[0];
    goto LABEL_31;
  }
  int v11 = 1;
LABEL_20:
  if (*(void *)(a2 + 16)) {
    uint64_t v4 = *(const CoreML::Specification::ModelDescription **)(a2 + 16);
  }
  CoreML::validateFeatureDescriptions<CoreML::Specification::ModelDescription>((void **)&v61.__r_.__value_.__l.__data_, (uint64_t)v4, *(_DWORD *)(a2 + 24), 0, 0);
  if (((uint64_t)v61.__r_.__value_.__l.__data_ & 0xFFFFFFEF) != 0)
  {
    std::string v56 = v61;
    uint64_t v57 = v62;
    goto LABEL_32;
  }
  CoreML::validateClassifierFeatureDescriptions((void **)&v56.__r_.__value_.__l.__data_, v4, v11);
  if (SHIBYTE(v62) < 0)
  {
    std::string::size_type size = (void *)v61.__r_.__value_.__l.__size_;
LABEL_31:
    operator delete(size);
  }
LABEL_32:
  int v13 = (int)v56.__r_.__value_.__l.__data_;
  std::string::size_type v58 = v56.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v60) < 0)
  {
    operator delete((void *)__p);
    int v13 = v58;
  }
  long long __p = *(_OWORD *)&v56.__r_.__value_.__r.__words[1];
  uint64_t v60 = v57;
  if ((v13 & 0xFFFFFFEF) != 0) {
    goto LABEL_43;
  }
  if (*(_DWORD *)(a2 + 44) == 401)
  {
    size_t v14 = *(uint64_t **)(a2 + 32);
  }
  else
  {
    CoreML::Specification::protobuf_SVM_2eproto::InitDefaults(v10);
    size_t v14 = &CoreML::Specification::_SupportVectorClassifier_default_instance_;
  }
  uint64_t v15 = (uint64_t *)v14[17];
  if (!v15) {
    uint64_t v15 = &CoreML::Specification::_Kernel_default_instance_;
  }
  CoreML::validateKernel((CoreML *)&v61, (const CoreML::Specification::Kernel *)v15[2], *((_DWORD *)v15 + 7));
  int v16 = (int)v61.__r_.__value_.__l.__data_;
  std::string::size_type v58 = v61.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v60) < 0)
  {
    operator delete((void *)__p);
    int v16 = v58;
  }
  long long __p = *(_OWORD *)&v61.__r_.__value_.__r.__words[1];
  uint64_t v60 = v62;
  if ((v16 & 0xFFFFFFEF) != 0) {
    goto LABEL_43;
  }
  int v17 = *((_DWORD *)v14 + 42);
  switch(v17)
  {
    case 0:
      std::string::basic_string[abi:ne180100]<0>(&v61, "Int64 class labels must be supplied for SVM classifier.");
      *(void *)a1 = 13;
      std::operator+<char>();
LABEL_80:
      if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_44;
      }
      unsigned __int8 v34 = (void *)v61.__r_.__value_.__r.__words[0];
      goto LABEL_82;
    case 100:
      size_t v18 = (int *)(v14[19] + 24);
      goto LABEL_54;
    case 101:
      size_t v18 = (int *)(v14[19] + 16);
LABEL_54:
      int v19 = *v18;
      goto LABEL_56;
  }
  int v19 = 0;
LABEL_56:
  uint64_t v20 = *((unsigned int *)v14 + 12);
  if (v20 != v19 - 1)
  {
    std::to_string(&v54, v19 - 1);
    uint64_t v26 = std::string::insert(&v54, 0, "coefficient array must be size numberOfClasses - 1 (");
    long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    v55.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    size_t v28 = std::string::append(&v55, "). Instead it is size ");
    long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v56.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v53, *((_DWORD *)v14 + 12));
    if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v30 = &v53;
    }
    else {
      int v30 = (std::string *)v53.__r_.__value_.__r.__words[0];
    }
    if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v31 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v31 = v53.__r_.__value_.__l.__size_;
    }
    goto LABEL_69;
  }
  if ((*((_DWORD *)v14 + 41) - 3) >= 2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v61, "Must specify sparse or dense support vectors");
    *(void *)a1 = 13;
    std::operator+<char>();
    goto LABEL_80;
  }
  if (*((_DWORD *)v14 + 4) != v19)
  {
    std::to_string(&v54, v19);
    std::string v35 = std::string::insert(&v54, 0, "numberOfSupportVectoresPerClass array must be size numberOfClasses ");
    long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
    v55.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v36;
    v35->__r_.__value_.__l.__size_ = 0;
    v35->__r_.__value_.__r.__words[2] = 0;
    v35->__r_.__value_.__r.__words[0] = 0;
    char v37 = std::string::append(&v55, " instead it is size ");
    long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
    v56.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v38;
    v37->__r_.__value_.__l.__size_ = 0;
    v37->__r_.__value_.__r.__words[2] = 0;
    v37->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v53, *((_DWORD *)v14 + 4));
    if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v30 = &v53;
    }
    else {
      int v30 = (std::string *)v53.__r_.__value_.__r.__words[0];
    }
    if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v31 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v31 = v53.__r_.__value_.__l.__size_;
    }
    goto LABEL_69;
  }
  int v21 = *(_DWORD *)(v14[18] + 24);
  if (v19 < 1)
  {
    int v22 = 0;
  }
  else
  {
    int v22 = 0;
    uint64_t v23 = v19;
    uint64_t v24 = (int *)(v14[3] + 8);
    do
    {
      int v25 = *v24++;
      v22 += v25;
      --v23;
    }
    while (v23);
  }
  if (v21 != v22)
  {
    std::to_string(&v54, v22);
    uint64_t v45 = std::string::insert(&v54, 0, "sum of numberOfSupportVectorsPerClass ");
    long long v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
    v55.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v46;
    v45->__r_.__value_.__l.__size_ = 0;
    v45->__r_.__value_.__r.__words[2] = 0;
    v45->__r_.__value_.__r.__words[0] = 0;
    uint64_t v47 = std::string::append(&v55, " must sum to total number of support vectors ");
    long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
    v56.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v48;
    v47->__r_.__value_.__l.__size_ = 0;
    v47->__r_.__value_.__r.__words[2] = 0;
    v47->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v53, v21);
    if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v30 = &v53;
    }
    else {
      int v30 = (std::string *)v53.__r_.__value_.__r.__words[0];
    }
    if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v31 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v31 = v53.__r_.__value_.__l.__size_;
    }
    goto LABEL_69;
  }
  if (v19 >= 2)
  {
    uint64_t v39 = 0;
    while (*(_DWORD *)(*(void *)(v14[7] + 8 + 8 * v39) + 16) == v21)
    {
      if (v20 == ++v39) {
        goto LABEL_95;
      }
    }
    std::to_string(&v54, *(_DWORD *)(v14[18] + 24));
    uint64_t v49 = std::string::insert(&v54, 0, "Incorrect number of coefficients: There should be ");
    long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
    v55.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v50;
    v49->__r_.__value_.__l.__size_ = 0;
    v49->__r_.__value_.__r.__words[2] = 0;
    v49->__r_.__value_.__r.__words[0] = 0;
    uint64_t v51 = std::string::append(&v55, " not ");
    long long v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
    v56.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v52;
    v51->__r_.__value_.__l.__size_ = 0;
    v51->__r_.__value_.__r.__words[2] = 0;
    v51->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v53, *(_DWORD *)(*(void *)(v14[7] + 8 * v39 + 8) + 16));
    if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v30 = &v53;
    }
    else {
      int v30 = (std::string *)v53.__r_.__value_.__r.__words[0];
    }
    if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v31 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v31 = v53.__r_.__value_.__l.__size_;
    }
LABEL_69:
    int v32 = std::string::append(&v56, (const std::string::value_type *)v30, v31);
    long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v61.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v33;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    *(void *)a1 = 13;
    std::operator+<char>();
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v61.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v53.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v56.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v55.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
    {
      unsigned __int8 v34 = (void *)v54.__r_.__value_.__r.__words[0];
LABEL_82:
      operator delete(v34);
      goto LABEL_44;
    }
    goto LABEL_44;
  }
LABEL_95:
  int v40 = *((_DWORD *)v14 + 22);
  int v41 = *((_DWORD *)v14 + 28);
  if (!(v40 | v41))
  {
LABEL_43:
    *(void *)a1 = v58;
    *(_OWORD *)(a1 + 8) = __p;
    *(void *)(a1 + 24) = v60;
    long long __p = 0uLL;
    uint64_t v60 = 0;
    goto LABEL_44;
  }
  int v42 = v20 * v19 + ((int)v20 * v19 < 0);
  if (v40 != v41)
  {
    std::string::basic_string[abi:ne180100]<0>(&v61, "probA and probB must be same size");
    *(void *)a1 = 13;
    std::operator+<char>();
    goto LABEL_80;
  }
  if (v40 == v42 >> 1) {
    goto LABEL_43;
  }
  std::to_string(&v56, v42 >> 1);
  uint64_t v43 = std::string::insert(&v56, 0, "Expected length of probA is number of class pairs: ");
  long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
  v61.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v44;
  v43->__r_.__value_.__l.__size_ = 0;
  v43->__r_.__value_.__r.__words[2] = 0;
  v43->__r_.__value_.__r.__words[0] = 0;
  *(void *)a1 = 13;
  std::operator+<char>();
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v61.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
  {
    unsigned __int8 v34 = (void *)v56.__r_.__value_.__r.__words[0];
    goto LABEL_82;
  }
LABEL_44:
  if (SHIBYTE(v60) < 0) {
    operator delete((void *)__p);
  }
}

void sub_19EB00930(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (*(char *)(v41 - 57) < 0) {
    operator delete(*(void **)(v41 - 80));
  }
  if (a33 < 0) {
    operator delete(__p);
  }
  if (a41 < 0) {
    operator delete(a36);
  }
  _Unwind_Resume(exception_object);
}

void CoreML::validateDescriptionsAreAllVectorizableTypes<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>(uint64_t a1, uint64_t a2)
{
  CoreML::Result::Result((CoreML::Result *)a1);
  if (*(int *)(a2 + 8) >= 1)
  {
    uint64_t v4 = 0;
    int v5 = (void **)(a1 + 8);
    do
    {
      int v6 = (unsigned int *)operator new(0xCuLL);
      v7[1] = v6 + 3;
      v7[2] = v6 + 3;
      *(void *)int v6 = 0x100000002;
      v6[2] = 5;
      v7[0] = v6;
      CoreML::validateSchemaTypes((CoreML::Result *)&v8, v7, *(void *)(*(void *)(a2 + 16) + 8 * v4 + 8));
      *(void *)a1 = v8;
      if (*(char *)(a1 + 31) < 0) {
        operator delete(*v5);
      }
      *(_OWORD *)int v5 = v9;
      *(void *)(a1 + 24) = v10;
      HIBYTE(v1CoreML::Specification::Pipeline::New(this, 0) = 0;
      LOBYTE(v9) = 0;
      operator delete(v6);
      if ((*(_DWORD *)a1 & 0xFFFFFFEF) != 0) {
        break;
      }
      ++v4;
    }
    while (v4 < *(int *)(a2 + 8));
  }
}

void sub_19EB00BA4(_Unwind_Exception *a1)
{
  operator delete(v2);
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v3);
  }
  _Unwind_Resume(a1);
}

void CoreML::validateKernel(CoreML *this, const CoreML::Specification::Kernel *a2, int a3)
{
  switch(a3)
  {
    case 1:
      goto LABEL_11;
    case 2:
      goto LABEL_9;
    case 3:
      if (*((double *)a2 + 3) < 0.0) {
        goto LABEL_10;
      }
      if ((*((_DWORD *)a2 + 8) & 0x80000000) != 0)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "Degree must be greater than or equal to zero");
        *(void *)this = 13;
        std::operator+<char>();
      }
      else
      {
        CoreML::Specification::protobuf_SVM_2eproto::InitDefaults(this);
        a2 = (const CoreML::Specification::Kernel *)&CoreML::Specification::_RBFKernel_default_instance_;
LABEL_9:
        if (*((double *)a2 + 2) >= 0.0)
        {
LABEL_11:
          CoreML::Result::Result(this);
          return;
        }
LABEL_10:
        std::string::basic_string[abi:ne180100]<0>(__p, "Gamma must be greater than or equal to zero");
        *(void *)this = 13;
        std::operator+<char>();
      }
LABEL_15:
      if (v5 < 0) {
        operator delete(__p[0]);
      }
      return;
    case 4:
      if (*((double *)a2 + 2) < 0.0) {
        goto LABEL_10;
      }
      goto LABEL_11;
    default:
      std::string::basic_string[abi:ne180100]<0>(__p, "You must specify a supported kernel type");
      *(void *)this = 13;
      std::operator+<char>();
      goto LABEL_15;
  }
}

void sub_19EB00D90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void CoreML::validateFeatureDescriptions<CoreML::Specification::ModelDescription>(void **this, uint64_t a2, int a3, char a4, char a5)
{
  uint64_t v8 = *(int *)(a2 + 24);
  if ((int)v8 > 0) {
    goto LABEL_2;
  }
  if (!a4)
  {
    std::string::basic_string[abi:ne180100]<0>(&v33, "Models must have one or more inputs.");
    *this = (void *)19;
    std::operator+<char>();
    goto LABEL_55;
  }
  if (a3 > 8)
  {
LABEL_2:
    int v9 = *(_DWORD *)(a2 + 48);
    if (!a5 && v9 <= 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&v33, "Models must have one or more outputs.");
      *this = (void *)12;
      std::operator+<char>();
LABEL_55:
      if ((SHIBYTE(v34) & 0x80000000) == 0) {
        return;
      }
      size_t v18 = (void *)v33;
      goto LABEL_57;
    }
    uint64_t v19 = *(void *)(a2 + 32);
    if (v19) {
      uint64_t v20 = (uint64_t **)(v19 + 8);
    }
    else {
      uint64_t v20 = 0;
    }
    if (v8)
    {
      uint64_t v21 = 8 * v8;
      while (1)
      {
        CoreML::validateFeatureDescription((CoreML::Result *)this, *v20, a3, 0);
        if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
          break;
        }
        if (*((char *)this + 31) < 0) {
          operator delete(this[1]);
        }
        ++v20;
        v21 -= 8;
        if (!v21)
        {
          int v9 = *(_DWORD *)(a2 + 48);
          goto LABEL_33;
        }
      }
    }
    else
    {
LABEL_33:
      uint64_t v22 = *(void *)(a2 + 56);
      if (v22) {
        uint64_t v23 = (uint64_t **)(v22 + 8);
      }
      else {
        uint64_t v23 = 0;
      }
      if (v9)
      {
        uint64_t v24 = 8 * v9;
        while (1)
        {
          CoreML::validateFeatureDescription((CoreML::Result *)this, *v23, a3, 1);
          if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
            break;
          }
          if (*((char *)this + 31) < 0) {
            operator delete(this[1]);
          }
          ++v23;
          v24 -= 8;
          if (!v24) {
            goto LABEL_42;
          }
        }
      }
      else
      {
LABEL_42:
        uint64_t v25 = *(void *)(a2 + 80);
        if (v25) {
          uint64_t v26 = (uint64_t **)(v25 + 8);
        }
        else {
          uint64_t v26 = 0;
        }
        uint64_t v27 = *(int *)(a2 + 72);
        if (v27)
        {
          uint64_t v28 = 8 * v27;
          while (1)
          {
            CoreML::validateFeatureDescription((CoreML::Result *)this, *v26, a3, 2);
            if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
              break;
            }
            if (*((char *)this + 31) < 0) {
              operator delete(this[1]);
            }
            ++v26;
            v28 -= 8;
            if (!v28) {
              goto LABEL_51;
            }
          }
        }
        else
        {
LABEL_51:
          CoreML::Result::Result((CoreML::Result *)this);
        }
      }
    }
  }
  else
  {
    std::to_string(&v30, 9);
    uint64_t v10 = std::string::insert(&v30, 0, "Empty input is only valid in specification verison >= ");
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v31.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    int v12 = std::string::append(&v31, ". This model has version ");
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v32.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&__p, a3);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    int v16 = std::string::append(&v32, (const std::string::value_type *)p_p, size);
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    std::string::size_type v34 = v16->__r_.__value_.__r.__words[2];
    long long v33 = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    *this = (void *)6;
    std::operator+<char>();
    if (SHIBYTE(v34) < 0) {
      operator delete((void *)v33);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v32.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v31.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    {
      size_t v18 = (void *)v30.__r_.__value_.__r.__words[0];
LABEL_57:
      operator delete(v18);
    }
  }
}

void sub_19EB010FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 57) < 0) {
    operator delete(*(void **)(v33 - 80));
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void CoreML::validate<(MLModelType)301>(uint64_t a1, uint64_t a2)
{
  CoreML::Result::Result((CoreML::Result *)&v15);
  if (*(void *)(a2 + 16)) {
    uint64_t v4 = *(uint64_t **)(a2 + 16);
  }
  else {
    uint64_t v4 = &CoreML::Specification::_ModelDescription_default_instance_;
  }
  CoreML::validateDescriptionsAreAllVectorizableTypes<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>((uint64_t)&v12, (uint64_t)(v4 + 2));
  int v5 = (int)v12;
  uint64_t v15 = v12;
  if (SHIBYTE(v17) < 0)
  {
    operator delete((void *)__p);
    int v5 = (int)v15;
  }
  long long __p = v13;
  uint64_t v17 = v14;
  if ((v5 & 0xFFFFFFEF) != 0) {
    goto LABEL_18;
  }
  CoreML::validateRegressorInterface(&v12, (uint64_t)v4, *(_DWORD *)(a2 + 24), 0, 0);
  int v7 = (int)v12;
  uint64_t v15 = v12;
  if (SHIBYTE(v17) < 0)
  {
    operator delete((void *)__p);
    int v7 = (int)v15;
  }
  long long __p = v13;
  uint64_t v17 = v14;
  if ((v7 & 0xFFFFFFEF) != 0) {
    goto LABEL_18;
  }
  if (*(_DWORD *)(a2 + 44) == 301)
  {
    uint64_t v8 = *(uint64_t **)(a2 + 32);
  }
  else
  {
    CoreML::Specification::protobuf_SVM_2eproto::InitDefaults(v6);
    uint64_t v8 = &CoreML::Specification::_SupportVectorRegressor_default_instance_;
  }
  int v9 = (uint64_t *)v8[2];
  if (!v9) {
    int v9 = &CoreML::Specification::_Kernel_default_instance_;
  }
  CoreML::validateKernel((CoreML *)&v12, (const CoreML::Specification::Kernel *)v9[2], *((_DWORD *)v9 + 7));
  int v10 = (int)v12;
  uint64_t v15 = v12;
  if (SHIBYTE(v17) < 0)
  {
    operator delete((void *)__p);
    int v10 = (int)v15;
  }
  long long __p = v13;
  uint64_t v17 = v14;
  if ((v10 & 0xFFFFFFEF) != 0) {
    goto LABEL_18;
  }
  if ((*((_DWORD *)v8 + 13) & 0xFFFFFFFE) == 2)
  {
    long long v11 = (uint64_t *)v8[3];
    if (!v11) {
      long long v11 = &CoreML::Specification::_Coefficients_default_instance_;
    }
    if (*((_DWORD *)v11 + 4) == *(_DWORD *)(v8[5] + 24))
    {
LABEL_18:
      *(void *)a1 = v15;
      *(_OWORD *)(a1 + 8) = __p;
      *(void *)(a1 + 24) = v17;
      long long __p = 0uLL;
      uint64_t v17 = 0;
      goto LABEL_19;
    }
    std::string::basic_string[abi:ne180100]<0>(&v12, "The number of coefficients must match the number of support vectors.");
    *(void *)a1 = 13;
    std::operator+<char>();
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v12, "Must specify sparse or dense support vectors");
    *(void *)a1 = 13;
    std::operator+<char>();
  }
  if (SHIBYTE(v13) < 0) {
    operator delete(v12);
  }
LABEL_19:
  if (SHIBYTE(v17) < 0) {
    operator delete((void *)__p);
  }
}

void sub_19EB013CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

CoreML::Result *CoreML::validate<(MLModelType)402>(CoreML::Result *a1, const CoreML::Specification::Model *a2)
{
  CoreML::TreeEnsembles::constructAndValidateTreeEnsembleFromSpec((CoreML::TreeEnsembles *)v4, a2);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }

  return CoreML::Result::Result(a1);
}

void sub_19EB014F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

CoreML::Result *CoreML::validate<(MLModelType)302>(CoreML::Result *a1, const CoreML::Specification::Model *a2)
{
  CoreML::TreeEnsembles::constructAndValidateTreeEnsembleFromSpec((CoreML::TreeEnsembles *)v4, a2);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }

  return CoreML::Result::Result(a1);
}

void sub_19EB015F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::Identity::GetCachedSize(CoreML::Specification::Identity *this)
{
  return *((unsigned int *)this + 4);
}

uint64_t CoreML::Specification::Identity::ByteSizeLong(CoreML::Specification::Identity *this)
{
  *((_DWORD *)this + 4) = 0;
  return 0;
}

uint64_t CoreML::Specification::Identity::MergePartialFromCodedStream(CoreML::Specification::Identity *this, char **a2, unsigned int a3)
{
  do
  {
    uint64_t v4 = *a2;
    if (*a2 >= a2[1])
    {
      LODWORD(TagFallback) = 0;
    }
    else
    {
      unint64_t TagFallback = *v4;
      if (*v4 >= 1)
      {
        *a2 = v4 + 1;
        goto LABEL_6;
      }
    }
    unint64_t TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback((google::protobuf::io::CodedInputStream *)a2, TagFallback);
LABEL_6:
    if (TagFallback) {
      BOOL v6 = (TagFallback & 7) == 4;
    }
    else {
      BOOL v6 = 1;
    }
    uint64_t v7 = v6;
  }
  while (!v6
       && (google::protobuf::internal::WireFormatLite::SkipField((google::protobuf::internal::WireFormatLite *)a2, (google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) != 0);
  return v7;
}

std::string *CoreML::Specification::Identity::CheckTypeAndMergeFrom(std::string *this, const google::protobuf::MessageLite *a2)
{
  uint64_t v2 = *((void *)a2 + 1);
  if (v2) {
    return google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&this->__r_.__value_.__l.__size_, v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  return this;
}

uint64_t CoreML::Specification::Identity::IsInitialized(CoreML::Specification::Identity *this)
{
  return 1;
}

void CoreML::Specification::Identity::New(CoreML::Specification::Identity *this, google::protobuf::Arena *a2)
{
}

void sub_19EB0172C(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

CoreML::Specification::Identity *CoreML::Specification::Identity::Identity(CoreML::Specification::Identity *this)
{
  *(void *)this = &unk_1EF0DAA88;
  *((void *)this + 1) = 0;
  if (this != (CoreML::Specification::Identity *)&CoreML::Specification::_Identity_default_instance_) {
    CoreML::Specification::protobuf_Identity_2eproto::InitDefaults(this);
  }
  *((_DWORD *)this + 4) = 0;
  return this;
}

void sub_19EB017B0(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::Identity>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    uint64_t result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *uint64_t result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::Identity>;
    uint64_t v4 = (unint64_t *)(v3 + 4);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::Identity>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void CoreML::Specification::Identity::New(CoreML::Specification::Identity *this)
{
}

void *CoreML::Specification::Identity::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.Identity");
}

void CoreML::Specification::Identity::~Identity(CoreML::Specification::Identity *this)
{
  *(void *)this = &unk_1EF0DAA88;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);

  JUMPOUT(0x19F3C1920);
}

{
  *(void *)this = &unk_1EF0DAA88;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

uint64_t CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene::GetCachedSize(CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene *this)
{
  return *((unsigned int *)this + 5);
}

uint64_t CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  signed int v5 = *(_DWORD *)(this + 16);
  if (v5) {
    return google::protobuf::internal::WireFormatLite::WriteEnum(1, v5, a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene::ByteSizeLong(CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene *this)
{
  int v1 = *((_DWORD *)this + 4);
  if (v1)
  {
    if (v1 < 0) {
      uint64_t v2 = 11;
    }
    else {
      uint64_t v2 = ((9 * (__clz(v1 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
  }
  else
  {
    uint64_t v2 = 0;
  }
  *((_DWORD *)this + 5) = v2;
  return v2;
}

uint64_t CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene::MergePartialFromCodedStream(CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene *this, char **a2, unsigned int a3)
{
  do
  {
    while (1)
    {
      signed int v5 = *a2;
      if (*a2 >= a2[1])
      {
        LODWORD(v6) = 0;
LABEL_6:
        unsigned int TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback((google::protobuf::io::CodedInputStream *)a2, v6);
        unint64_t v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0) {
          break;
        }
        goto LABEL_7;
      }
      uint64_t v6 = *v5;
      if (*v5 < 1) {
        goto LABEL_6;
      }
      *a2 = v5 + 1;
      unint64_t v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0) {
        break;
      }
LABEL_7:
      if (v7 != 8 || (v7 & 0xFFFFFFF8) != 8) {
        break;
      }
      long long v11 = *a2;
      if (*a2 >= a2[1])
      {
        int v12 = 0;
      }
      else
      {
        int v12 = *v11;
        if ((*v11 & 0x80000000) == 0)
        {
          *a2 = v11 + 1;
          goto LABEL_22;
        }
      }
      uint64_t Varint32Fallback = google::protobuf::io::CodedInputStream::ReadVarint32Fallback((google::protobuf::io::CodedInputStream *)a2, v12);
      int v12 = Varint32Fallback;
      if (Varint32Fallback < 0) {
        return 0;
      }
LABEL_22:
      *((_DWORD *)this + 4) = v12;
    }
    if (v7) {
      BOOL v10 = (v7 & 7) == 4;
    }
    else {
      BOOL v10 = 1;
    }
    if (v10) {
      return 1;
    }
  }
  while ((google::protobuf::internal::WireFormatLite::SkipField((google::protobuf::internal::WireFormatLite *)a2, (google::protobuf::io::CodedInputStream *)v7, a3) & 1) != 0);
  return 0;
}

std::string *CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene::CheckTypeAndMergeFrom(std::string *this, const google::protobuf::MessageLite *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    this = google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  int v5 = *((_DWORD *)a2 + 4);
  if (v5) {
    LODWORD(v3->__r_.__value_.__r.__words[2]) = v5;
  }
  return this;
}

uint64_t CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene::IsInitialized(CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene *this)
{
  return 1;
}

uint64_t CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene::Clear(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  return this;
}

void CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene::New(CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene *this, google::protobuf::Arena *a2)
{
}

void sub_19EB01B10(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x1081C40CC6EE3FDLL);
  _Unwind_Resume(a1);
}

CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene *CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene::VisionFeaturePrint_Scene(CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene *this)
{
  *(void *)this = &unk_1EF0CF278;
  *((void *)this + 1) = 0;
  if (this != (CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene *)&CoreML::Specification::CoreMLModels::_VisionFeaturePrint_Scene_default_instance_) {
    CoreML::Specification::CoreMLModels::protobuf_VisionFeaturePrint_2eproto::InitDefaults(this);
  }
  *((void *)this + 2) = 0;
  return this;
}

void sub_19EB01B94(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    uint64_t result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *uint64_t result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene>;
    uint64_t v4 = (unint64_t *)(v3 + 4);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t CoreML::Specification::CoreMLModels::VisionFeaturePrint::GetCachedSize(CoreML::Specification::CoreMLModels::VisionFeaturePrint *this)
{
  return *((unsigned int *)this + 6);
}

uint64_t CoreML::Specification::CoreMLModels::VisionFeaturePrint::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 28);
  if (v6 == 20)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x14, *(void *)(this + 16), a2, a4);
    int v6 = *(_DWORD *)(v5 + 28);
  }
  if (v6 == 21)
  {
    uint64_t v7 = *(void *)(v5 + 16);
    return google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x15, v7, a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::CoreMLModels::VisionFeaturePrint::ByteSizeLong(CoreML::Specification::CoreMLModels::VisionFeaturePrint *this)
{
  int v2 = *((_DWORD *)this + 7);
  if (v2 == 21)
  {
    uint64_t v6 = CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects::ByteSizeLong(*((CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects **)this
                                                                                       + 2));
    uint64_t result = v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 2;
  }
  else if (v2 == 20)
  {
    uint64_t v3 = *((void *)this + 2);
    int v4 = *(_DWORD *)(v3 + 16);
    if (v4)
    {
      if (v4 < 0) {
        uint64_t v5 = 11;
      }
      else {
        uint64_t v5 = ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1;
      }
    }
    else
    {
      uint64_t v5 = 0;
    }
    *(_DWORD *)(v3 + 2CoreML::Specification::Identity::New(this, 0) = v5;
    uint64_t result = v5 + 3;
  }
  else
  {
    uint64_t result = 0;
  }
  *((_DWORD *)this + 6) = result;
  return result;
}

uint64_t CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects::ByteSizeLong(CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects *this)
{
  uint64_t v1 = *((unsigned int *)this + 6);
  uint64_t v2 = 2 * v1;
  if ((int)v1 >= 1)
  {
    uint64_t v3 = (uint64_t *)(*((void *)this + 4) + 8);
    do
    {
      uint64_t v4 = *v3++;
      uint64_t v5 = *(unsigned __int8 *)(v4 + 23);
      uint64_t v6 = *(void *)(v4 + 8);
      if ((v5 & 0x80u) == 0) {
        uint64_t v6 = v5;
      }
      v2 += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6);
      --v1;
    }
    while (v1);
  }
  int v7 = *((_DWORD *)this + 10);
  if (v7)
  {
    if (v7 < 0) {
      uint64_t v8 = 11;
    }
    else {
      uint64_t v8 = ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    v2 += v8;
  }
  *((_DWORD *)this + 11) = v2;
  return v2;
}

uint64_t CoreML::Specification::CoreMLModels::VisionFeaturePrint::MergePartialFromCodedStream(CoreML::Specification::CoreMLModels::VisionFeaturePrint *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      uint64_t v5 = *(unsigned __int8 **)a2;
      unint64_t v6 = *((void *)a2 + 1);
      if (*(void *)a2 >= v6)
      {
        LODWORD(v8) = 0;
        goto LABEL_34;
      }
      int v7 = v5 + 1;
      uint64_t v8 = *v5;
      if ((char)*v5 >= 1) {
        break;
      }
      if ((unint64_t)v7 < v6)
      {
        int v10 = *v7;
        if ((v8 & ~v10) >= 0x80)
        {
          *(void *)a2 = v5 + 2;
          unint64_t v9 = (v8 + (v10 << 7) - 128) | 0x100000000;
          goto LABEL_8;
        }
      }
LABEL_34:
      unsigned int TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v8);
      unint64_t v9 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x3FFF) << 32);
      if ((v9 & 0x100000000) == 0) {
        goto LABEL_35;
      }
LABEL_8:
      if (v9 >> 3 == 21)
      {
        if (v9 != 170) {
          goto LABEL_35;
        }
        if (*((_DWORD *)this + 7) != 21)
        {
          CoreML::Specification::CoreMLModels::VisionFeaturePrint::clear_VisionFeaturePrintType((uint64_t)this);
          *((_DWORD *)this + 7) = 21;
          operator new();
        }
        int v12 = (CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects *)*((void *)this + 2);
        uint64_t v15 = *(char **)a2;
        if (*(void *)a2 >= *((void *)a2 + 1) || *v15 < 0)
        {
          int VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (VarintSizeAsIntFallback < 0) {
            return 0;
          }
        }
        else
        {
          int VarintSizeAsIntFallback = *v15;
          *(void *)a2 = v15 + 1;
        }
        int v23 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
        int v25 = *((_DWORD *)a2 + 13);
        BOOL v20 = __OFSUB__(v25--, 1);
        *((_DWORD *)a2 + 13) = v25;
        if (v25 < 0 != v20) {
          return 0;
        }
        int v21 = v23;
        uint64_t result = CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects::MergePartialFromCodedStream(v12, a2, v24);
        if (!result) {
          return result;
        }
      }
      else
      {
        if (v9 >> 3 != 20 || v9 != 162) {
          goto LABEL_35;
        }
        if (*((_DWORD *)this + 7) != 20)
        {
          CoreML::Specification::CoreMLModels::VisionFeaturePrint::clear_VisionFeaturePrintType((uint64_t)this);
          *((_DWORD *)this + 7) = 20;
          operator new();
        }
        long long v11 = (CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene *)*((void *)this + 2);
        long long v13 = *(char **)a2;
        if (*(void *)a2 >= *((void *)a2 + 1) || *v13 < 0)
        {
          int v14 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v14 < 0) {
            return 0;
          }
        }
        else
        {
          int v14 = *v13;
          *(void *)a2 = v13 + 1;
        }
        int v17 = google::protobuf::io::CodedInputStream::PushLimit(a2, v14);
        int v19 = *((_DWORD *)a2 + 13);
        BOOL v20 = __OFSUB__(v19--, 1);
        *((_DWORD *)a2 + 13) = v19;
        if (v19 < 0 != v20) {
          return 0;
        }
        int v21 = v17;
        uint64_t result = CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene::MergePartialFromCodedStream(v11, (char **)a2, v18);
        if (!result) {
          return result;
        }
      }
      if (!google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v21)) {
        return 0;
      }
    }
    *(void *)a2 = v7;
    unint64_t v9 = v8 | 0x100000000;
    if ((v9 & 0x100000000) != 0) {
      goto LABEL_8;
    }
LABEL_35:
    if (!v9 || (v9 & 7) == 4) {
      return 1;
    }
    if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v9, a3) & 1) == 0) {
      return 0;
    }
  }
}

void sub_19EB02074(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C408C5061CCLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::CoreMLModels::VisionFeaturePrint::clear_VisionFeaturePrintType(uint64_t this)
{
  uint64_t v1 = this;
  int v2 = *(_DWORD *)(this + 28);
  if (v2 == 21 || v2 == 20)
  {
    this = *(void *)(this + 16);
    if (this) {
      this = (*(uint64_t (**)(uint64_t))(*(void *)this + 8))(this);
    }
  }
  *(_DWORD *)(v1 + 28) = 0;
  return this;
}

CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects *CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects::VisionFeaturePrint_Objects(CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects *this)
{
  *(void *)this = &unk_1EF0CF3A8;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  if (this != (CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects *)&CoreML::Specification::CoreMLModels::_VisionFeaturePrint_Objects_default_instance_) {
    CoreML::Specification::CoreMLModels::protobuf_VisionFeaturePrint_2eproto::InitDefaults(this);
  }
  *((void *)this + 5) = 0;
  return this;
}

void sub_19EB02188(_Unwind_Exception *a1)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((void *)(v1 + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v2);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects::MergePartialFromCodedStream(CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  uint64_t v5 = (CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects *)((char *)this + 16);
  do
  {
    while (1)
    {
      while (1)
      {
        unint64_t v6 = *(unsigned __int8 **)a2;
        unint64_t v7 = *((void *)a2 + 1);
        if (*(void *)a2 >= v7)
        {
          LODWORD(v9) = 0;
LABEL_39:
          unsigned int TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v9);
          unint64_t v10 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x3FFF) << 32);
          if ((v10 & 0x100000000) == 0) {
            goto LABEL_40;
          }
          goto LABEL_9;
        }
        uint64_t v8 = v6 + 1;
        uint64_t v9 = *v6;
        if ((char)*v6 < 1)
        {
          if ((unint64_t)v8 < v7)
          {
            int v11 = *v8;
            if ((v9 & ~v11) >= 0x80)
            {
              *(void *)a2 = v6 + 2;
              unint64_t v10 = (v9 + (v11 << 7) - 128) | 0x100000000;
              goto LABEL_9;
            }
          }
          goto LABEL_39;
        }
        *(void *)a2 = v8;
        unint64_t v10 = v9 | 0x100000000;
        if ((v10 & 0x100000000) == 0) {
          goto LABEL_40;
        }
LABEL_9:
        if (v10 >> 3 != 100) {
          break;
        }
        if (v10 != 34) {
          goto LABEL_40;
        }
        uint64_t v15 = (int *)*((void *)this + 4);
        if (!v15)
        {
          int v16 = *((_DWORD *)this + 6);
          int v17 = *((_DWORD *)this + 7);
          goto LABEL_24;
        }
        int v16 = *((_DWORD *)this + 6);
        int v17 = *v15;
        if (v16 >= *v15)
        {
          if (v17 == *((_DWORD *)this + 7))
          {
LABEL_24:
            if (v16 <= v17)
            {
              google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend(v5, v17 - v16 + 1);
              uint64_t v15 = (int *)*((void *)this + 4);
            }
            int v17 = *v15;
          }
          *uint64_t v15 = v17 + 1;
          int v19 = *(google::protobuf::Arena **)v5;
          if (!*(void *)v5) {
            operator new();
          }
          Aligned->__r_.__value_.__l.__size_ = 0;
          Aligned->__r_.__value_.__r.__words[2] = 0;
          Aligned->__r_.__value_.__r.__words[0] = 0;
          BOOL v20 = google::protobuf::Arena::AllocateAligned(v19, 0, 24);
          *BOOL v20 = (google::protobuf::Arena *)Aligned;
          v20[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<std::string>;
          int v21 = (unint64_t *)((char *)v19 + 32);
          do
            unint64_t v22 = __ldxr(v21);
          while (__stxr((unint64_t)v20, v21));
          v20[2] = (google::protobuf::Arena *)v22;
          uint64_t v23 = *((void *)this + 4);
          uint64_t v24 = *((int *)this + 6);
          *((_DWORD *)this + 6) = v24 + 1;
          *(void *)(v23 + 8 * v24 + 8) = Aligned;
          goto LABEL_32;
        }
        *((_DWORD *)this + 6) = v16 + 1;
        Aligned = *(std::string **)&v15[2 * v16 + 2];
LABEL_32:
        uint64_t result = google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)a2, Aligned);
        if (!result) {
          return result;
        }
        uint64_t v26 = *((void *)this + 4);
        uint64_t v27 = *(unsigned int **)(v26 + 8 * *((int *)this + 6));
        if (*((char *)v27 + 23) < 0)
        {
          uint64_t v27 = *(unsigned int **)v27;
          uint64_t v28 = *(void *)(*(void *)(v26 + 8 * *((int *)this + 6)) + 8);
        }
        else
        {
          LODWORD(v28) = *((unsigned __int8 *)v27 + 23);
        }
        if (!google::protobuf::internal::WireFormatLite::VerifyUtf8String(v27, v28, 0, (uint64_t)"CoreML.Specification.CoreMLModels.VisionFeaturePrint.Objects.output"))return 0; {
      }
        }
      if (v10 >> 3 != 1 || v10 != 8) {
        break;
      }
      long long v13 = *(char **)a2;
      if (*(void *)a2 >= *((void *)a2 + 1))
      {
        int v14 = 0;
      }
      else
      {
        int v14 = *v13;
        if ((*v13 & 0x80000000) == 0)
        {
          *(void *)a2 = v13 + 1;
          goto LABEL_48;
        }
      }
      uint64_t Varint32Fallback = google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v14);
      int v14 = Varint32Fallback;
      if (Varint32Fallback < 0) {
        return 0;
      }
LABEL_48:
      *((_DWORD *)this + 1CoreML::Specification::Identity::New(this, 0) = v14;
    }
LABEL_40:
    if (v10) {
      BOOL v30 = (v10 & 7) == 4;
    }
    else {
      BOOL v30 = 1;
    }
    if (v30) {
      return 1;
    }
  }
  while ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v10, a3) & 1) != 0);
  return 0;
}

std::string *CoreML::Specification::CoreMLModels::VisionFeaturePrint::MergeFrom(std::string *this, const CoreML::Specification::CoreMLModels::VisionFeaturePrint *a2)
{
  uint64_t v3 = (uint64_t)this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    this = google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  int v5 = *((_DWORD *)a2 + 7);
  if (v5 == 21)
  {
    if (*(_DWORD *)(v3 + 28) != 21)
    {
      CoreML::Specification::CoreMLModels::VisionFeaturePrint::clear_VisionFeaturePrintType(v3);
      *(_DWORD *)(v3 + 28) = 21;
      operator new();
    }
    uint64_t v8 = (const CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects *)*((void *)a2 + 2);
    int v11 = *(std::string **)(v3 + 16);
    return CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects::MergeFrom(v11, v8);
  }
  else if (v5 == 20)
  {
    if (*(_DWORD *)(v3 + 28) != 20)
    {
      CoreML::Specification::CoreMLModels::VisionFeaturePrint::clear_VisionFeaturePrintType(v3);
      *(_DWORD *)(v3 + 28) = 20;
      operator new();
    }
    uint64_t v6 = *(void *)(v3 + 16);
    uint64_t v7 = *((void *)a2 + 2);
    uint64_t v9 = *(void *)(v7 + 8);
    if (v9) {
      this = google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((unint64_t *)(v6 + 8), v9 & 0xFFFFFFFFFFFFFFFELL);
    }
    int v10 = *(_DWORD *)(v7 + 16);
    if (v10) {
      *(_DWORD *)(v6 + 16) = v10;
    }
  }
  return this;
}

void sub_19EB025C4(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C408C5061CCLL);
  _Unwind_Resume(a1);
}

std::string *CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects::MergeFrom(std::string *this, const CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    this = google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  unsigned int v5 = *((_DWORD *)a2 + 6);
  if (v5)
  {
    uint64_t v6 = (const std::string **)(*((void *)a2 + 4) + 8);
    uint64_t v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)&v3->__r_.__value_.__r.__words[2], *((_DWORD *)a2 + 6));
    this = google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((std::string *)&v3->__r_.__value_.__r.__words[2], (std::string **)v7, v6, v5, *(_DWORD *)v3[1].__r_.__value_.__l.__size_ - LODWORD(v3[1].__r_.__value_.__l.__data_));
    signed int v8 = LODWORD(v3[1].__r_.__value_.__l.__data_) + v5;
    LODWORD(v3[1].__r_.__value_.__l.__data_) = v8;
    std::string::size_type size = (signed int *)v3[1].__r_.__value_.__l.__size_;
    if (*size < v8) {
      *std::string::size_type size = v8;
    }
  }
  int v10 = *((_DWORD *)a2 + 10);
  if (v10) {
    LODWORD(v3[1].__r_.__value_.__r.__words[2]) = v10;
  }
  return this;
}

uint64_t CoreML::Specification::CoreMLModels::VisionFeaturePrint::IsInitialized(CoreML::Specification::CoreMLModels::VisionFeaturePrint *this)
{
  return 1;
}

void CoreML::Specification::CoreMLModels::VisionFeaturePrint::New(CoreML::Specification::CoreMLModels::VisionFeaturePrint *this, google::protobuf::Arena *a2)
{
}

void sub_19EB0271C(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

CoreML::Specification::CoreMLModels::VisionFeaturePrint *CoreML::Specification::CoreMLModels::VisionFeaturePrint::VisionFeaturePrint(CoreML::Specification::CoreMLModels::VisionFeaturePrint *this)
{
  *(void *)this = &unk_1EF0CF148;
  *((void *)this + 1) = 0;
  if (this != (CoreML::Specification::CoreMLModels::VisionFeaturePrint *)&CoreML::Specification::CoreMLModels::_VisionFeaturePrint_default_instance_) {
    CoreML::Specification::CoreMLModels::protobuf_VisionFeaturePrint_2eproto::InitDefaults(this);
  }
  *((void *)this + 3) = 0;
  return this;
}

void sub_19EB027A0(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::CoreMLModels::VisionFeaturePrint>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    uint64_t result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *uint64_t result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::CoreMLModels::VisionFeaturePrint>;
    uint64_t v4 = (unint64_t *)(v3 + 4);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::CoreMLModels::VisionFeaturePrint>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void CoreML::Specification::CoreMLModels::VisionFeaturePrint::New(CoreML::Specification::CoreMLModels::VisionFeaturePrint *this)
{
}

void *CoreML::Specification::CoreMLModels::VisionFeaturePrint::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.CoreMLModels.VisionFeaturePrint");
}

void CoreML::Specification::CoreMLModels::VisionFeaturePrint::~VisionFeaturePrint(CoreML::Specification::CoreMLModels::VisionFeaturePrint *this)
{
  CoreML::Specification::CoreMLModels::VisionFeaturePrint::~VisionFeaturePrint(this);

  JUMPOUT(0x19F3C1920);
}

{
  *(void *)this = &unk_1EF0CF148;
  if (*((_DWORD *)this + 7)) {
    CoreML::Specification::CoreMLModels::VisionFeaturePrint::clear_VisionFeaturePrintType((uint64_t)this);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

uint64_t CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects::GetCachedSize(CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects *this)
{
  return *((unsigned int *)this + 11);
}

uint64_t CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  signed int v6 = *(_DWORD *)(this + 40);
  if (v6) {
    this = google::protobuf::internal::WireFormatLite::WriteEnum(1, v6, a2, a4);
  }
  uint64_t v7 = *(unsigned int *)(v5 + 24);
  if ((int)v7 >= 1)
  {
    uint64_t v8 = -v7;
    uint64_t v9 = 1;
    do
    {
      int v10 = *(unsigned int **)(*(void *)(v5 + 32) + 8 * v9);
      if (*((char *)v10 + 23) < 0)
      {
        int v10 = *(unsigned int **)v10;
        uint64_t v11 = *(void *)(*(void *)(*(void *)(v5 + 32) + 8 * v9) + 8);
      }
      else
      {
        LODWORD(v11) = *((unsigned __int8 *)v10 + 23);
      }
      google::protobuf::internal::WireFormatLite::VerifyUtf8String(v10, v11, 1, (uint64_t)"CoreML.Specification.CoreMLModels.VisionFeaturePrint.Objects.output");
      this = google::protobuf::internal::WireFormatLite::WriteString(0x64u, *(void *)(*(void *)(v5 + 32) + 8 * v9++), a2);
    }
    while (v8 + v9 != 1);
  }
  return this;
}

uint64_t CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects::IsInitialized(CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects *this)
{
  return 1;
}

uint64_t CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects::Clear(CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects *this)
{
  uint64_t result = google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 16);
  *((_DWORD *)this + 1CoreML::Specification::CoreMLModels::VisionFeaturePrint::New(this, 0) = 0;
  return result;
}

void CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects::New(CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects *this, google::protobuf::Arena *a2)
{
}

void sub_19EB02A30(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C408C5061CCLL);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    uint64_t result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *uint64_t result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects>;
    uint64_t v4 = (unint64_t *)(v3 + 4);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects::New(CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects *this)
{
}

void *CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.CoreMLModels.VisionFeaturePrint.Objects");
}

void CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects::~VisionFeaturePrint_Objects(CoreML::Specification::CoreMLModels::VisionFeaturePrint_Objects *this)
{
  *(void *)this = &unk_1EF0CF3A8;
  uint64_t v1 = (uint64_t *)((char *)this + 8);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((void *)this + 2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);

  JUMPOUT(0x19F3C1920);
}

{
  uint64_t *v1;

  *(void *)this = &unk_1EF0CF3A8;
  uint64_t v1 = (uint64_t *)((char *)this + 8);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((void *)this + 2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
}

void CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene::New(CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene *this)
{
}

void *CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.CoreMLModels.VisionFeaturePrint.Scene");
}

void CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene::~VisionFeaturePrint_Scene(CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene *this)
{
  *(void *)this = &unk_1EF0CF278;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);

  JUMPOUT(0x19F3C1920);
}

{
  *(void *)this = &unk_1EF0CF278;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

void CoreML::validateSizeRange(CoreML *this, const CoreML::Specification::SizeRange *a2)
{
  uint64_t v3 = *((void *)a2 + 3);
  if (v3 < 1 || (unint64_t v5 = *((void *)a2 + 2), v5 <= v3))
  {
    CoreML::Result::Result(this);
  }
  else
  {
    std::to_string(&v17, v5);
    signed int v6 = std::string::insert(&v17, 0, "Size range is invalid (");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    uint64_t v8 = std::string::append(&v18, ", ");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v19.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&__p, *((void *)a2 + 3));
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    int v12 = std::string::append(&v19, (const std::string::value_type *)p_p, size);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v20.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    int v14 = std::string::append(&v20, ").");
    long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    std::string::size_type v22 = v14->__r_.__value_.__r.__words[2];
    long long v21 = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    *(void *)this = 12;
    std::operator+<char>();
    if (SHIBYTE(v22) < 0) {
      operator delete((void *)v21);
    }
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v20.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v19.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v18.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v17.__r_.__value_.__l.__data_);
    }
  }
}

void sub_19EB02E30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 25) < 0) {
    operator delete(*(void **)(v33 - 48));
  }
  if (*(char *)(v33 - 57) < 0) {
    operator delete(*(void **)(v33 - 80));
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void CoreML::validateFeatureDescription(CoreML::Result *this, uint64_t *a2, int a3, int a4)
{
  signed int v6 = this;
  uint64_t v7 = a2[2];
  if ((*(char *)(v7 + 23) & 0x80000000) == 0)
  {
    if (*(unsigned char *)(v7 + 23)) {
      goto LABEL_3;
    }
LABEL_9:
    std::string::basic_string[abi:ne180100]<0>(v280, "Feature description must have a non-empty name.");
    *(void *)signed int v6 = 12;
    std::operator+<char>();
    if ((v280[23] & 0x80000000) == 0) {
      return;
    }
    int v12 = *(void **)v280;
    goto LABEL_16;
  }
  if (!*(void *)(v7 + 8)) {
    goto LABEL_9;
  }
LABEL_3:
  if (a2 == &CoreML::Specification::_FeatureDescription_default_instance_ || (uint64_t v8 = a2[4]) == 0)
  {
    std::operator+<char>();
    long long v13 = std::string::append(&__p, " must specify a valid feature type.");
    long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    *(void *)&v280[16] = *((void *)&v13->__r_.__value_.__l + 2);
    *(_OWORD *)v280 = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    *(void *)signed int v6 = 12;
    std::operator+<char>();
    goto LABEL_12;
  }
  int v9 = *(_DWORD *)(v8 + 36);
  if (v9 == 8)
  {
    if ((a4 & 0xFFFFFFFD) != 0)
    {
      std::operator+<char>();
      int v10 = std::string::append(&__p, "' should only be declared in the state feature description.");
      long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      *(void *)&v280[16] = *((void *)&v10->__r_.__value_.__l + 2);
      *(_OWORD *)v280 = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      *(void *)signed int v6 = 12;
      std::operator+<char>();
      goto LABEL_12;
    }
    if (a3 <= 8)
    {
      std::to_string(&v279, 9);
      std::string v19 = std::string::insert(&v279, 0, "State types are only valid in specification verison >= ");
      long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v282.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v282.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      long long v21 = std::string::append(&v282, ". This model has version ");
      long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v278, a3);
      if ((v278.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v23 = &v278;
      }
      else {
        uint64_t v23 = (std::string *)v278.__r_.__value_.__r.__words[0];
      }
      if ((v278.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v278.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v278.__r_.__value_.__l.__size_;
      }
      goto LABEL_29;
    }
    if (*(unsigned char *)(v8 + 16))
    {
      std::operator+<char>();
      uint64_t v28 = std::string::append(&__p, "' cannot be optional.");
      long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
      *(void *)&v280[16] = *((void *)&v28->__r_.__value_.__l + 2);
      *(_OWORD *)v280 = v29;
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      *(void *)signed int v6 = 12;
      std::operator+<char>();
      goto LABEL_12;
    }
    long long v80 = *(uint64_t **)(v8 + 24);
    if (*((_DWORD *)v80 + 7) != 1)
    {
      this = (CoreML::Result *)CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(this);
      if (*(_DWORD *)(v8 + 36) == 8)
      {
        long long v80 = *(uint64_t **)(v8 + 24);
      }
      else
      {
        this = (CoreML::Result *)CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(this);
        long long v80 = &CoreML::Specification::_StateFeatureType_default_instance_;
      }
    }
    if (*((_DWORD *)v80 + 7) == 1)
    {
      uint64_t v98 = (uint64_t *)v80[2];
    }
    else
    {
      this = (CoreML::Result *)CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(this);
      uint64_t v98 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
    }
    if (!*((_DWORD *)v98 + 4))
    {
LABEL_131:
      std::operator+<char>();
      uint64_t v96 = std::string::append(&__p, "' has missing shape constraints.");
      long long v97 = *(_OWORD *)&v96->__r_.__value_.__l.__data_;
      *(void *)&v280[16] = *((void *)&v96->__r_.__value_.__l + 2);
      *(_OWORD *)v280 = v97;
      v96->__r_.__value_.__l.__size_ = 0;
      v96->__r_.__value_.__r.__words[2] = 0;
      v96->__r_.__value_.__r.__words[0] = 0;
      *(void *)signed int v6 = 12;
      std::operator+<char>();
LABEL_12:
      if ((v280[23] & 0x80000000) != 0) {
        operator delete(*(void **)v280);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        int v12 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_16:
        operator delete(v12);
        return;
      }
      return;
    }
    for (uint64_t i = 0; ; ++i)
    {
      if (*(_DWORD *)(v8 + 36) == 8)
      {
        int v100 = *(uint64_t **)(v8 + 24);
      }
      else
      {
        this = (CoreML::Result *)CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(this);
        int v100 = &CoreML::Specification::_StateFeatureType_default_instance_;
      }
      if (*((_DWORD *)v100 + 7) == 1)
      {
        uint64_t v101 = (uint64_t *)v100[2];
      }
      else
      {
        this = (CoreML::Result *)CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(this);
        uint64_t v101 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
      }
      uint64_t v102 = *((int *)v101 + 4);
      int v103 = *(_DWORD *)(v8 + 36);
      if (i >= v102) {
        break;
      }
      if (v103 == 8)
      {
        int v104 = *(uint64_t **)(v8 + 24);
      }
      else
      {
        this = (CoreML::Result *)CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(this);
        int v104 = &CoreML::Specification::_StateFeatureType_default_instance_;
      }
      if (*((_DWORD *)v104 + 7) == 1)
      {
        int v105 = (uint64_t *)v104[2];
      }
      else
      {
        this = (CoreML::Result *)CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(this);
        int v105 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
      }
      uint64_t v106 = *(void *)(v105[3] + 8 * i + 8);
      if (v106 < 0)
      {
        std::operator+<char>();
        uint64_t v108 = std::string::append(&v277, "' has an invalid shape. Element ");
        long long v109 = *(_OWORD *)&v108->__r_.__value_.__l.__data_;
        v278.__r_.__value_.__r.__words[2] = v108->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v278.__r_.__value_.__l.__data_ = v109;
        v108->__r_.__value_.__l.__size_ = 0;
        v108->__r_.__value_.__r.__words[2] = 0;
        v108->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v276, i);
        if ((v276.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          BOOL v110 = &v276;
        }
        else {
          BOOL v110 = (std::string *)v276.__r_.__value_.__r.__words[0];
        }
        if ((v276.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v111 = HIBYTE(v276.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v111 = v276.__r_.__value_.__l.__size_;
        }
        char v112 = std::string::append(&v278, (const std::string::value_type *)v110, v111);
        long long v113 = *(_OWORD *)&v112->__r_.__value_.__l.__data_;
        v279.__r_.__value_.__r.__words[2] = v112->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v279.__r_.__value_.__l.__data_ = v113;
        v112->__r_.__value_.__l.__size_ = 0;
        v112->__r_.__value_.__r.__words[2] = 0;
        v112->__r_.__value_.__r.__words[0] = 0;
        unint64_t v114 = std::string::append(&v279, " has non-positive value ");
        long long v115 = *(_OWORD *)&v114->__r_.__value_.__l.__data_;
        v282.__r_.__value_.__r.__words[2] = v114->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v282.__r_.__value_.__l.__data_ = v115;
        v114->__r_.__value_.__l.__size_ = 0;
        v114->__r_.__value_.__r.__words[2] = 0;
        v114->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v275, v106);
        if ((v275.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v116 = &v275;
        }
        else {
          uint64_t v116 = (std::string *)v275.__r_.__value_.__r.__words[0];
        }
        if ((v275.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v117 = HIBYTE(v275.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v117 = v275.__r_.__value_.__l.__size_;
        }
        goto LABEL_168;
      }
    }
    if (v103 == 8)
    {
      uint64_t v107 = *(uint64_t **)(v8 + 24);
    }
    else
    {
      this = (CoreML::Result *)CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(this);
      uint64_t v107 = &CoreML::Specification::_StateFeatureType_default_instance_;
    }
    if (*((_DWORD *)v107 + 7) == 1)
    {
      uint64_t v145 = (uint64_t *)v107[2];
    }
    else
    {
      this = (CoreML::Result *)CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(this);
      uint64_t v145 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
    }
    if (*((_DWORD *)v145 + 9) != 65552)
    {
      std::operator+<char>();
      uint64_t v147 = std::string::append(&__p, "' has an invalid or unspecified dataType. It must be specified as FLOAT16");
      long long v148 = *(_OWORD *)&v147->__r_.__value_.__l.__data_;
      *(void *)&v280[16] = *((void *)&v147->__r_.__value_.__l + 2);
      *(_OWORD *)v280 = v148;
      v147->__r_.__value_.__l.__size_ = 0;
      v147->__r_.__value_.__r.__words[2] = 0;
      v147->__r_.__value_.__r.__words[0] = 0;
      *(void *)signed int v6 = 12;
      std::operator+<char>();
      goto LABEL_12;
    }
    if (*(_DWORD *)(v8 + 36) == 8)
    {
      uint64_t v146 = *(uint64_t **)(v8 + 24);
    }
    else
    {
      this = (CoreML::Result *)CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(this);
      uint64_t v146 = &CoreML::Specification::_StateFeatureType_default_instance_;
    }
    if (*((_DWORD *)v146 + 7) == 1)
    {
      unsigned int v161 = (uint64_t *)v146[2];
    }
    else
    {
      this = (CoreML::Result *)CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(this);
      unsigned int v161 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
    }
    if (*((_DWORD *)v161 + 15))
    {
      std::operator+<char>();
      int v162 = std::string::append(&__p, "' cannot have flexible shape.");
      long long v163 = *(_OWORD *)&v162->__r_.__value_.__l.__data_;
      *(void *)&v280[16] = *((void *)&v162->__r_.__value_.__l + 2);
      *(_OWORD *)v280 = v163;
      v162->__r_.__value_.__l.__size_ = 0;
      v162->__r_.__value_.__r.__words[2] = 0;
      v162->__r_.__value_.__r.__words[0] = 0;
      *(void *)signed int v6 = 12;
      std::operator+<char>();
      goto LABEL_12;
    }
    if (*(_DWORD *)(v8 + 36) == 8)
    {
      uint64_t v196 = *(uint64_t **)(v8 + 24);
    }
    else
    {
      this = (CoreML::Result *)CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(this);
      uint64_t v196 = &CoreML::Specification::_StateFeatureType_default_instance_;
    }
    if (*((_DWORD *)v196 + 7) == 1)
    {
      uint64_t v247 = (uint64_t *)v196[2];
    }
    else
    {
      CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(this);
      uint64_t v247 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
    }
    if (*((_DWORD *)v247 + 16))
    {
      std::operator+<char>();
      int v248 = std::string::append(&__p, "' cannot have default optional value.");
      long long v249 = *(_OWORD *)&v248->__r_.__value_.__l.__data_;
      *(void *)&v280[16] = *((void *)&v248->__r_.__value_.__l + 2);
      *(_OWORD *)v280 = v249;
      v248->__r_.__value_.__l.__size_ = 0;
      v248->__r_.__value_.__r.__words[2] = 0;
      v248->__r_.__value_.__r.__words[0] = 0;
      *(void *)signed int v6 = 12;
      std::operator+<char>();
      goto LABEL_12;
    }
LABEL_90:
    CoreML::Result::Result(v6);
    return;
  }
  if (a4 == 2)
  {
    std::operator+<char>();
    long long v15 = std::string::append(&__p, "' is not.");
    long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    *(void *)&v280[16] = *((void *)&v15->__r_.__value_.__l + 2);
    *(_OWORD *)v280 = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    *(void *)signed int v6 = 12;
    std::operator+<char>();
    goto LABEL_12;
  }
  switch(v9)
  {
    case 0:
      std::operator+<char>();
      std::string v17 = std::string::append(&__p, "'.");
      long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      *(void *)&v280[16] = *((void *)&v17->__r_.__value_.__l + 2);
      *(_OWORD *)v280 = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      *(void *)signed int v6 = 12;
      std::operator+<char>();
      goto LABEL_12;
    case 4:
      uint64_t v51 = *(void *)(v8 + 24);
      uint64_t v53 = *(void *)(v51 + 16);
      uint64_t v52 = *(void *)(v51 + 24);
      BOOL v55 = v53 > 0 && v52 > 0;
      if (a3 < 3) {
        goto LABEL_355;
      }
      int v56 = *(_DWORD *)(v51 + 52);
      if (v56 != 31)
      {
        if (v56 == 21)
        {
          uint64_t v57 = *(void *)(v51 + 40);
          uint64_t v58 = *(int *)(v57 + 24);
          if (!v58) {
            goto LABEL_262;
          }
          uint64_t v59 = *(void *)(v57 + 32);
          if (v55)
          {
            if (v59) {
              uint64_t v60 = v59 + 8;
            }
            else {
              uint64_t v60 = 0;
            }
            uint64_t v61 = 8 * v58;
            do
            {
              if (v53 == *(void *)(*(void *)v60 + 16) && v52 == *(void *)(*(void *)v60 + 24)) {
                goto LABEL_355;
              }
              v60 += 8;
              v61 -= 8;
            }
            while (v61);
            std::operator+<char>();
            uint64_t v62 = std::string::append(&v277, "' has a default size of ");
            long long v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
            v278.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v278.__r_.__value_.__l.__data_ = v63;
            v62->__r_.__value_.__l.__size_ = 0;
            v62->__r_.__value_.__r.__words[2] = 0;
            v62->__r_.__value_.__r.__words[0] = 0;
            std::to_string(&v276, v53);
            if ((v276.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v64 = &v276;
            }
            else {
              uint64_t v64 = (std::string *)v276.__r_.__value_.__r.__words[0];
            }
            if ((v276.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v65 = HIBYTE(v276.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v65 = v276.__r_.__value_.__l.__size_;
            }
            std::string v66 = std::string::append(&v278, (const std::string::value_type *)v64, v65);
            long long v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
            v279.__r_.__value_.__r.__words[2] = v66->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v279.__r_.__value_.__l.__data_ = v67;
            v66->__r_.__value_.__l.__size_ = 0;
            v66->__r_.__value_.__r.__words[2] = 0;
            v66->__r_.__value_.__r.__words[0] = 0;
            long long v68 = std::string::append(&v279, " × ");
            long long v69 = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
            v282.__r_.__value_.__r.__words[2] = v68->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v282.__r_.__value_.__l.__data_ = v69;
            v68->__r_.__value_.__l.__size_ = 0;
            v68->__r_.__value_.__r.__words[2] = 0;
            v68->__r_.__value_.__r.__words[0] = 0;
            std::to_string(&v275, v52);
            if ((v275.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v70 = &v275;
            }
            else {
              uint64_t v70 = (std::string *)v275.__r_.__value_.__r.__words[0];
            }
            if ((v275.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v71 = HIBYTE(v275.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v71 = v275.__r_.__value_.__l.__size_;
            }
            uint64_t v72 = std::string::append(&v282, (const std::string::value_type *)v70, v71);
            long long v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
            __p.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v73;
            v72->__r_.__value_.__l.__size_ = 0;
            v72->__r_.__value_.__r.__words[2] = 0;
            v72->__r_.__value_.__r.__words[0] = 0;
            long long v74 = std::string::append(&__p, " which is not within the allowed enumerated sizes specified.");
            long long v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
            *(void *)&v280[16] = *((void *)&v74->__r_.__value_.__l + 2);
            *(_OWORD *)v280 = v75;
            v74->__r_.__value_.__l.__size_ = 0;
            v74->__r_.__value_.__r.__words[2] = 0;
            v74->__r_.__value_.__r.__words[0] = 0;
            *(void *)signed int v6 = 12;
            std::operator+<char>();
            goto LABEL_312;
          }
          uint64_t v195 = *(void *)(v59 + 8);
          uint64_t v53 = *(void *)(v195 + 16);
          uint64_t v52 = *(void *)(v195 + 24);
        }
LABEL_355:
        if (v53 <= 0)
        {
          std::operator+<char>();
          int v223 = std::string::append(&v279, "' has missing or non-positive width ");
          long long v224 = *(_OWORD *)&v223->__r_.__value_.__l.__data_;
          v282.__r_.__value_.__r.__words[2] = v223->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v282.__r_.__value_.__l.__data_ = v224;
          v223->__r_.__value_.__l.__size_ = 0;
          v223->__r_.__value_.__r.__words[2] = 0;
          v223->__r_.__value_.__r.__words[0] = 0;
          if (*(_DWORD *)(v8 + 36) == 4)
          {
            uint64_t v225 = *(uint64_t **)(v8 + 24);
          }
          else
          {
            CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults((CoreML::Specification::protobuf_FeatureTypes_2eproto *)v223);
            uint64_t v225 = &CoreML::Specification::_ImageFeatureType_default_instance_;
          }
          std::to_string(&v278, v225[2]);
          if ((v278.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unint64_t v238 = &v278;
          }
          else {
            unint64_t v238 = (std::string *)v278.__r_.__value_.__r.__words[0];
          }
          if ((v278.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v239 = HIBYTE(v278.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v239 = v278.__r_.__value_.__l.__size_;
          }
        }
        else
        {
          if (v52 > 0)
          {
            if (*(_DWORD *)(v8 + 36) == 4)
            {
              uint64_t v222 = *(uint64_t **)(v8 + 24);
            }
            else
            {
              CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(this);
              uint64_t v222 = &CoreML::Specification::_ImageFeatureType_default_instance_;
            }
            int v229 = *((_DWORD *)v222 + 8);
            if (v229 <= 29)
            {
              if (v229 == 10 || v229 == 20) {
                goto LABEL_90;
              }
LABEL_420:
              std::operator+<char>();
              uint64_t v244 = std::string::append(&__p, "' has missing or invalid colorspace. It must be RGB, BGR or GRAYSCALE.");
              long long v245 = *(_OWORD *)&v244->__r_.__value_.__l.__data_;
              *(void *)&v280[16] = *((void *)&v244->__r_.__value_.__l + 2);
              *(_OWORD *)v280 = v245;
              v244->__r_.__value_.__l.__size_ = 0;
              v244->__r_.__value_.__r.__words[2] = 0;
              v244->__r_.__value_.__r.__words[0] = 0;
              *(void *)signed int v6 = 12;
              std::operator+<char>();
              goto LABEL_12;
            }
            if (v229 == 30) {
              goto LABEL_90;
            }
            if (v229 != 40) {
              goto LABEL_420;
            }
            if (a3 > 6) {
              goto LABEL_90;
            }
            std::to_string(&v282, 7);
            uint64_t v230 = std::string::append(&v282, ". This model has version ");
            long long v231 = *(_OWORD *)&v230->__r_.__value_.__l.__data_;
            __p.__r_.__value_.__r.__words[2] = v230->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v231;
            v230->__r_.__value_.__l.__size_ = 0;
            v230->__r_.__value_.__r.__words[2] = 0;
            v230->__r_.__value_.__r.__words[0] = 0;
            std::to_string(&v279, a3);
            if ((v279.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              BOOL v232 = &v279;
            }
            else {
              BOOL v232 = (std::string *)v279.__r_.__value_.__r.__words[0];
            }
            if ((v279.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v233 = HIBYTE(v279.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v233 = v279.__r_.__value_.__l.__size_;
            }
            int v234 = std::string::append(&__p, (const std::string::value_type *)v232, v233);
            long long v235 = *(_OWORD *)&v234->__r_.__value_.__l.__data_;
            *(void *)&v280[16] = *((void *)&v234->__r_.__value_.__l + 2);
            *(_OWORD *)v280 = v235;
            v234->__r_.__value_.__l.__size_ = 0;
            v234->__r_.__value_.__r.__words[2] = 0;
            v234->__r_.__value_.__r.__words[0] = 0;
            std::operator+<char>();
            uint64_t v236 = std::string::append(&v277, "' has GRAYSCALE_FLOAT16 colorspace, which is only valid in specification version >= ");
            long long v237 = *(_OWORD *)&v236->__r_.__value_.__l.__data_;
            v278.__r_.__value_.__r.__words[2] = v236->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v278.__r_.__value_.__l.__data_ = v237;
            v236->__r_.__value_.__l.__size_ = 0;
            v236->__r_.__value_.__r.__words[2] = 0;
            v236->__r_.__value_.__r.__words[0] = 0;
            if (v280[23] >= 0) {
              uint64_t v172 = v280;
            }
            else {
              uint64_t v172 = *(const std::string::value_type **)v280;
            }
            if (v280[23] >= 0) {
              std::string::size_type v173 = v280[23];
            }
            else {
              std::string::size_type v173 = *(void *)&v280[8];
            }
            goto LABEL_383;
          }
          std::operator+<char>();
          uint64_t v226 = std::string::append(&v279, "' has missing or non-positive height ");
          long long v227 = *(_OWORD *)&v226->__r_.__value_.__l.__data_;
          v282.__r_.__value_.__r.__words[2] = v226->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v282.__r_.__value_.__l.__data_ = v227;
          v226->__r_.__value_.__l.__size_ = 0;
          v226->__r_.__value_.__r.__words[2] = 0;
          v226->__r_.__value_.__r.__words[0] = 0;
          if (*(_DWORD *)(v8 + 36) == 4)
          {
            unsigned int v228 = *(uint64_t **)(v8 + 24);
          }
          else
          {
            CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults((CoreML::Specification::protobuf_FeatureTypes_2eproto *)v226);
            unsigned int v228 = &CoreML::Specification::_ImageFeatureType_default_instance_;
          }
          std::to_string(&v278, v228[3]);
          if ((v278.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unint64_t v238 = &v278;
          }
          else {
            unint64_t v238 = (std::string *)v278.__r_.__value_.__r.__words[0];
          }
          if ((v278.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v239 = HIBYTE(v278.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v239 = v278.__r_.__value_.__l.__size_;
          }
        }
        uint64_t v240 = std::string::append(&v282, (const std::string::value_type *)v238, v239);
        long long v241 = *(_OWORD *)&v240->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v240->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v241;
        v240->__r_.__value_.__l.__size_ = 0;
        v240->__r_.__value_.__r.__words[2] = 0;
        v240->__r_.__value_.__r.__words[0] = 0;
        unsigned int v242 = std::string::append(&__p, ".");
        long long v243 = *(_OWORD *)&v242->__r_.__value_.__l.__data_;
        *(void *)&v280[16] = *((void *)&v242->__r_.__value_.__l + 2);
        *(_OWORD *)v280 = v243;
        v242->__r_.__value_.__l.__size_ = 0;
        v242->__r_.__value_.__r.__words[2] = 0;
        v242->__r_.__value_.__r.__words[0] = 0;
        *(void *)signed int v6 = 12;
        std::operator+<char>();
        if ((v280[23] & 0x80000000) != 0) {
          operator delete(*(void **)v280);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v278.__r_.__value_.__r.__words[2]) < 0)
        {
          uint64_t v27 = (void *)v278.__r_.__value_.__r.__words[0];
          goto LABEL_35;
        }
LABEL_415:
        if (SHIBYTE(v282.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v282.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v279.__r_.__value_.__r.__words[2]) < 0)
        {
          int v12 = (void *)v279.__r_.__value_.__r.__words[0];
          goto LABEL_16;
        }
        return;
      }
      uint64_t v132 = *(uint64_t **)(*(void *)(v51 + 40) + 16);
      uint64_t v133 = &CoreML::Specification::_SizeRange_default_instance_;
      if (v132) {
        BOOL v134 = v132;
      }
      else {
        BOOL v134 = &CoreML::Specification::_SizeRange_default_instance_;
      }
      CoreML::validateSizeRange((CoreML *)v280, (const CoreML::Specification::SizeRange *)v134);
      if ((*(_DWORD *)v280 & 0xFFFFFFEF) != 0)
      {
        std::operator+<char>();
        int v136 = std::string::append(&v279, "' has an invalid flexible width range. ");
        long long v137 = *(_OWORD *)&v136->__r_.__value_.__l.__data_;
        v282.__r_.__value_.__r.__words[2] = v136->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v282.__r_.__value_.__l.__data_ = v137;
        v136->__r_.__value_.__l.__size_ = 0;
        v136->__r_.__value_.__r.__words[2] = 0;
        v136->__r_.__value_.__r.__words[0] = 0;
        if (v281 >= 0) {
          uint64_t v138 = &v280[8];
        }
        else {
          uint64_t v138 = *(const std::string::value_type **)&v280[8];
        }
        if (v281 >= 0) {
          std::string::size_type v139 = HIBYTE(v281);
        }
        else {
          std::string::size_type v139 = *(void *)&v280[16];
        }
        unint64_t v140 = std::string::append(&v282, v138, v139);
        long long v141 = *(_OWORD *)&v140->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v140->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v141;
        v140->__r_.__value_.__l.__size_ = 0;
        v140->__r_.__value_.__r.__words[2] = 0;
        v140->__r_.__value_.__r.__words[0] = 0;
        *(void *)signed int v6 = 12;
        this = (CoreML::Result *)std::operator+<char>();
LABEL_344:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v282.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v282.__r_.__value_.__l.__data_);
        }
        if ((SHIBYTE(v279.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_351;
        }
        uint64_t v220 = (void *)v279.__r_.__value_.__r.__words[0];
LABEL_350:
        operator delete(v220);
LABEL_351:
        char v221 = 0;
        goto LABEL_352;
      }
      if (*(_DWORD *)(v8 + 36) == 4)
      {
        uint64_t v178 = *(uint64_t **)(v8 + 24);
      }
      else
      {
        unint64_t inited = CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults((CoreML::Specification::protobuf_FeatureTypes_2eproto *)inited);
        uint64_t v178 = &CoreML::Specification::_ImageFeatureType_default_instance_;
      }
      if (*((_DWORD *)v178 + 13) == 31)
      {
        uint64_t v211 = (uint64_t *)v178[5];
      }
      else
      {
        CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults((CoreML::Specification::protobuf_FeatureTypes_2eproto *)inited);
        uint64_t v211 = &CoreML::Specification::_ImageFeatureType_ImageSizeRange_default_instance_;
      }
      unint64_t v212 = (uint64_t *)v211[3];
      if (v212) {
        uint64_t v133 = v212;
      }
      CoreML::validateSizeRange((CoreML *)&__p, (const CoreML::Specification::SizeRange *)v133);
      int data = (int)__p.__r_.__value_.__l.__data_;
      *(void *)v280 = __p.__r_.__value_.__r.__words[0];
      if (SHIBYTE(v281) < 0)
      {
        operator delete(*(void **)&v280[8]);
        int data = *(_DWORD *)v280;
      }
      *(_OWORD *)&v280[8] = *(_OWORD *)&__p.__r_.__value_.__r.__words[1];
      uint64_t v281 = v274;
      if ((data & 0xFFFFFFEF) != 0)
      {
        std::operator+<char>();
        uint64_t v214 = std::string::append(&v279, "' has an invalid flexible height range. ");
        long long v215 = *(_OWORD *)&v214->__r_.__value_.__l.__data_;
        v282.__r_.__value_.__r.__words[2] = v214->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v282.__r_.__value_.__l.__data_ = v215;
        v214->__r_.__value_.__l.__size_ = 0;
        v214->__r_.__value_.__r.__words[2] = 0;
        v214->__r_.__value_.__r.__words[0] = 0;
        if (v281 >= 0) {
          int v216 = &v280[8];
        }
        else {
          int v216 = *(const std::string::value_type **)&v280[8];
        }
        if (v281 >= 0) {
          std::string::size_type v217 = HIBYTE(v281);
        }
        else {
          std::string::size_type v217 = *(void *)&v280[16];
        }
        uint64_t v218 = std::string::append(&v282, v216, v217);
        long long v219 = *(_OWORD *)&v218->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v218->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v219;
        v218->__r_.__value_.__l.__size_ = 0;
        v218->__r_.__value_.__r.__words[2] = 0;
        v218->__r_.__value_.__r.__words[0] = 0;
        *(void *)signed int v6 = 12;
        this = (CoreML::Result *)std::operator+<char>();
        goto LABEL_344;
      }
      uint64_t v250 = v134[2];
      if (v55)
      {
        if (v53 < v250 || (unint64_t v251 = v134[3], (v251 & 0x8000000000000000) == 0) && v53 > v251)
        {
          std::operator+<char>();
          int v252 = std::string::append(&v278, "' default width ");
          long long v253 = *(_OWORD *)&v252->__r_.__value_.__l.__data_;
          v279.__r_.__value_.__r.__words[2] = v252->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v279.__r_.__value_.__l.__data_ = v253;
          v252->__r_.__value_.__l.__size_ = 0;
          v252->__r_.__value_.__r.__words[2] = 0;
          v252->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v277, v53);
          if ((v277.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int v254 = &v277;
          }
          else {
            int v254 = (std::string *)v277.__r_.__value_.__r.__words[0];
          }
          if ((v277.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v255 = HIBYTE(v277.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v255 = v277.__r_.__value_.__l.__size_;
          }
          uint64_t v256 = std::string::append(&v279, (const std::string::value_type *)v254, v255);
          long long v257 = *(_OWORD *)&v256->__r_.__value_.__l.__data_;
          v282.__r_.__value_.__r.__words[2] = v256->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v282.__r_.__value_.__l.__data_ = v257;
          v256->__r_.__value_.__l.__size_ = 0;
          v256->__r_.__value_.__r.__words[2] = 0;
          v256->__r_.__value_.__r.__words[0] = 0;
          BOOL v258 = std::string::append(&v282, " is not within specified flexible width range");
          long long v259 = *(_OWORD *)&v258->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v258->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v259;
          v258->__r_.__value_.__l.__size_ = 0;
          v258->__r_.__value_.__r.__words[2] = 0;
          v258->__r_.__value_.__r.__words[0] = 0;
          *(void *)signed int v6 = 12;
          this = (CoreML::Result *)std::operator+<char>();
LABEL_464:
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v282.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v282.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v277.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v277.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v279.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v279.__r_.__value_.__l.__data_);
          }
          if ((SHIBYTE(v278.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_351;
          }
          uint64_t v220 = (void *)v278.__r_.__value_.__r.__words[0];
          goto LABEL_350;
        }
        if (v52 < v133[2] || (v264 = v133[3], char v221 = 1, (v264 & 0x8000000000000000) == 0) && v52 > v264)
        {
          std::operator+<char>();
          v265 = std::string::append(&v278, "' default height ");
          long long v266 = *(_OWORD *)&v265->__r_.__value_.__l.__data_;
          v279.__r_.__value_.__r.__words[2] = v265->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v279.__r_.__value_.__l.__data_ = v266;
          v265->__r_.__value_.__l.__size_ = 0;
          v265->__r_.__value_.__r.__words[2] = 0;
          v265->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v277, v52);
          if ((v277.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v267 = &v277;
          }
          else {
            v267 = (std::string *)v277.__r_.__value_.__r.__words[0];
          }
          if ((v277.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v268 = HIBYTE(v277.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v268 = v277.__r_.__value_.__l.__size_;
          }
          uint64_t v269 = std::string::append(&v279, (const std::string::value_type *)v267, v268);
          long long v270 = *(_OWORD *)&v269->__r_.__value_.__l.__data_;
          v282.__r_.__value_.__r.__words[2] = v269->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v282.__r_.__value_.__l.__data_ = v270;
          v269->__r_.__value_.__l.__size_ = 0;
          v269->__r_.__value_.__r.__words[2] = 0;
          v269->__r_.__value_.__r.__words[0] = 0;
          uint64_t v271 = std::string::append(&v282, " is not within specified flexible height range");
          long long v272 = *(_OWORD *)&v271->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v271->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v272;
          v271->__r_.__value_.__l.__size_ = 0;
          v271->__r_.__value_.__r.__words[2] = 0;
          v271->__r_.__value_.__r.__words[0] = 0;
          *(void *)signed int v6 = 12;
          this = (CoreML::Result *)std::operator+<char>();
          goto LABEL_464;
        }
      }
      else
      {
        uint64_t v52 = v133[2];
        char v221 = 1;
        uint64_t v53 = v250;
      }
LABEL_352:
      if (SHIBYTE(v281) < 0) {
        operator delete(*(void **)&v280[8]);
      }
      if ((v221 & 1) == 0) {
        return;
      }
      goto LABEL_355;
    case 5:
      uint64_t v30 = *(void *)(v8 + 24);
      int v31 = *(_DWORD *)(v30 + 16);
      if (a3 < 3) {
        goto LABEL_101;
      }
      int v32 = *(_DWORD *)(v30 + 60);
      if (v32 != 31)
      {
        if (v32 == 21)
        {
          uint64_t v33 = *(void *)(v30 + 40);
          uint64_t v34 = *(int *)(v33 + 24);
          if (!v34)
          {
LABEL_262:
            std::operator+<char>();
            uint64_t v176 = std::string::append(&__p, "' has enumerated zero permitted sizes.");
            long long v177 = *(_OWORD *)&v176->__r_.__value_.__l.__data_;
            *(void *)&v280[16] = *((void *)&v176->__r_.__value_.__l + 2);
            *(_OWORD *)v280 = v177;
            v176->__r_.__value_.__l.__size_ = 0;
            v176->__r_.__value_.__r.__words[2] = 0;
            v176->__r_.__value_.__r.__words[0] = 0;
            *(void *)signed int v6 = 12;
            std::operator+<char>();
            goto LABEL_12;
          }
          uint64_t v35 = *(void *)(v33 + 32);
          if (v35) {
            uint64_t v36 = v35 + 8;
          }
          else {
            uint64_t v36 = 0;
          }
          uint64_t v37 = v36 + 8 * v34;
          uint64_t v38 = 8 * v34;
          uint64_t v39 = v36;
          do
          {
            if (!*(_DWORD *)(*(void *)v39 + 16))
            {
              std::operator+<char>();
              int v181 = std::string::append(&__p, "' has enumerated shapes with zero dimensions.");
              long long v182 = *(_OWORD *)&v181->__r_.__value_.__l.__data_;
              *(void *)&v280[16] = *((void *)&v181->__r_.__value_.__l + 2);
              *(_OWORD *)v280 = v182;
              v181->__r_.__value_.__l.__size_ = 0;
              v181->__r_.__value_.__r.__words[2] = 0;
              v181->__r_.__value_.__r.__words[0] = 0;
              *(void *)signed int v6 = 12;
              std::operator+<char>();
              goto LABEL_12;
            }
            v39 += 8;
            v38 -= 8;
          }
          while (v38);
          if (v31)
          {
            do
            {
              if (*(_DWORD *)(*(void *)v36 + 16) == v31)
              {
                if (v31 < 1) {
                  goto LABEL_102;
                }
                int v40 = (uint64_t *)(*(void *)(*(void *)v36 + 24) + 8);
                uint64_t v41 = (uint64_t *)(*(void *)(v30 + 24) + 8);
                uint64_t v42 = *(unsigned int *)(v30 + 16);
                while (1)
                {
                  uint64_t v44 = *v41++;
                  uint64_t v43 = v44;
                  uint64_t v45 = *v40++;
                  if (v43 != v45) {
                    break;
                  }
                  if (!--v42) {
                    goto LABEL_102;
                  }
                }
              }
              v36 += 8;
            }
            while (v36 != v37);
            std::operator+<char>();
            long long v46 = std::string::append(&v282, "' has a default shape specified ");
            long long v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
            __p.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v47;
            v46->__r_.__value_.__l.__size_ = 0;
            v46->__r_.__value_.__r.__words[2] = 0;
            v46->__r_.__value_.__r.__words[0] = 0;
            long long v48 = std::string::append(&__p, " which is not within the allowed enumerated shapes specified.");
            long long v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
            *(void *)&v280[16] = *((void *)&v48->__r_.__value_.__l + 2);
            *(_OWORD *)v280 = v49;
            v48->__r_.__value_.__l.__size_ = 0;
            v48->__r_.__value_.__r.__words[2] = 0;
            v48->__r_.__value_.__r.__words[0] = 0;
            *(void *)signed int v6 = 12;
            std::operator+<char>();
            if ((v280[23] & 0x80000000) == 0) {
              goto LABEL_392;
            }
            long long v50 = *(void **)v280;
            goto LABEL_391;
          }
LABEL_186:
          if (*(_DWORD *)(v8 + 36) == 5)
          {
            int v131 = *(uint64_t **)(v8 + 24);
          }
          else
          {
            this = (CoreML::Result *)CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(this);
            int v131 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
          }
          int v142 = *((_DWORD *)v131 + 9);
          if (v142 > 65599)
          {
            if (v142 == 65600) {
              goto LABEL_206;
            }
            int v143 = 131104;
          }
          else
          {
            if (v142 == 65552)
            {
              if (a3 <= 6)
              {
                std::to_string(&v282, 7);
                unint64_t v164 = std::string::append(&v282, ". This model has version ");
                long long v165 = *(_OWORD *)&v164->__r_.__value_.__l.__data_;
                __p.__r_.__value_.__r.__words[2] = v164->__r_.__value_.__r.__words[2];
                *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v165;
                v164->__r_.__value_.__l.__size_ = 0;
                v164->__r_.__value_.__r.__words[2] = 0;
                v164->__r_.__value_.__r.__words[0] = 0;
                std::to_string(&v279, a3);
                if ((v279.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  uint64_t v166 = &v279;
                }
                else {
                  uint64_t v166 = (std::string *)v279.__r_.__value_.__r.__words[0];
                }
                if ((v279.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  std::string::size_type v167 = HIBYTE(v279.__r_.__value_.__r.__words[2]);
                }
                else {
                  std::string::size_type v167 = v279.__r_.__value_.__l.__size_;
                }
                int v168 = std::string::append(&__p, (const std::string::value_type *)v166, v167);
                long long v169 = *(_OWORD *)&v168->__r_.__value_.__l.__data_;
                *(void *)&v280[16] = *((void *)&v168->__r_.__value_.__l + 2);
                *(_OWORD *)v280 = v169;
                v168->__r_.__value_.__l.__size_ = 0;
                v168->__r_.__value_.__r.__words[2] = 0;
                v168->__r_.__value_.__r.__words[0] = 0;
                std::operator+<char>();
                uint64_t v170 = std::string::append(&v277, "' has FLOAT16 dataType, which is only valid in specification version >= ");
                long long v171 = *(_OWORD *)&v170->__r_.__value_.__l.__data_;
                v278.__r_.__value_.__r.__words[2] = v170->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v278.__r_.__value_.__l.__data_ = v171;
                v170->__r_.__value_.__l.__size_ = 0;
                v170->__r_.__value_.__r.__words[2] = 0;
                v170->__r_.__value_.__r.__words[0] = 0;
                if (v280[23] >= 0) {
                  uint64_t v172 = v280;
                }
                else {
                  uint64_t v172 = *(const std::string::value_type **)v280;
                }
                if (v280[23] >= 0) {
                  std::string::size_type v173 = v280[23];
                }
                else {
                  std::string::size_type v173 = *(void *)&v280[8];
                }
LABEL_383:
                std::string::append(&v278, v172, v173);
                *(void *)signed int v6 = 12;
                std::operator+<char>();
                if (SHIBYTE(v278.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v278.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v277.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v277.__r_.__value_.__l.__data_);
                }
                if ((v280[23] & 0x80000000) != 0) {
                  operator delete(*(void **)v280);
                }
                if ((SHIBYTE(v279.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
LABEL_392:
                  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(__p.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v282.__r_.__value_.__r.__words[2]) < 0)
                  {
                    int v12 = (void *)v282.__r_.__value_.__r.__words[0];
                    goto LABEL_16;
                  }
                  return;
                }
                long long v50 = (void *)v279.__r_.__value_.__r.__words[0];
LABEL_391:
                operator delete(v50);
                goto LABEL_392;
              }
LABEL_206:
              if (*(_DWORD *)(v8 + 36) == 5)
              {
                unint64_t v144 = *(uint64_t **)(v8 + 24);
              }
              else
              {
                this = (CoreML::Result *)CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(this);
                unint64_t v144 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
              }
              int v157 = *((_DWORD *)v144 + 16);
              switch(v157)
              {
                case ')':
                  if (*(_DWORD *)(v8 + 36) == 5)
                  {
                    int v179 = *(uint64_t **)(v8 + 24);
                  }
                  else
                  {
                    CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(this);
                    int v179 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
                  }
                  if (*((_DWORD *)v179 + 9) == 131104) {
                    goto LABEL_90;
                  }
                  break;
                case '3':
                  if (*(_DWORD *)(v8 + 36) == 5)
                  {
                    unsigned int v180 = *(uint64_t **)(v8 + 24);
                  }
                  else
                  {
                    this = (CoreML::Result *)CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(this);
                    unsigned int v180 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
                  }
                  if (*((_DWORD *)v180 + 9) == 65568) {
                    goto LABEL_90;
                  }
                  if (*(_DWORD *)(v8 + 36) == 5)
                  {
                    uint64_t v246 = *(uint64_t **)(v8 + 24);
                  }
                  else
                  {
                    CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(this);
                    uint64_t v246 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
                  }
                  if (*((_DWORD *)v246 + 9) == 65552) {
                    goto LABEL_90;
                  }
                  break;
                case '=':
                  if (*(_DWORD *)(v8 + 36) == 5)
                  {
                    uint64_t v158 = *(uint64_t **)(v8 + 24);
                  }
                  else
                  {
                    CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(this);
                    uint64_t v158 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
                  }
                  if (*((_DWORD *)v158 + 9) == 65600) {
                    goto LABEL_90;
                  }
                  break;
                default:
                  goto LABEL_90;
              }
              std::operator+<char>();
              unint64_t v262 = std::string::append(&__p, "' has mistmatch between dataType and the type of default optional value.");
              long long v263 = *(_OWORD *)&v262->__r_.__value_.__l.__data_;
              *(void *)&v280[16] = *((void *)&v262->__r_.__value_.__l + 2);
              *(_OWORD *)v280 = v263;
              v262->__r_.__value_.__l.__size_ = 0;
              v262->__r_.__value_.__r.__words[2] = 0;
              v262->__r_.__value_.__r.__words[0] = 0;
              *(void *)signed int v6 = 12;
              std::operator+<char>();
              goto LABEL_12;
            }
            int v143 = 65568;
          }
          if (v142 != v143)
          {
            std::operator+<char>();
            uint64_t v174 = std::string::append(&__p, "' has an invalid or unspecified dataType. It must be specified as DOUBLE, FLOAT32, FLOAT16 or INT32");
            long long v175 = *(_OWORD *)&v174->__r_.__value_.__l.__data_;
            *(void *)&v280[16] = *((void *)&v174->__r_.__value_.__l + 2);
            *(_OWORD *)v280 = v175;
            v174->__r_.__value_.__l.__size_ = 0;
            v174->__r_.__value_.__r.__words[2] = 0;
            v174->__r_.__value_.__r.__words[0] = 0;
            *(void *)signed int v6 = 12;
            std::operator+<char>();
            goto LABEL_12;
          }
          goto LABEL_206;
        }
LABEL_101:
        if (!(a4 | v31)) {
          goto LABEL_131;
        }
        goto LABEL_102;
      }
      uint64_t v123 = *(void *)(v30 + 40);
      LODWORD(v124) = *(_DWORD *)(v123 + 24);
      if ((int)v124 < 1)
      {
LABEL_177:
        if (!v31) {
          goto LABEL_186;
        }
        if (*(_DWORD *)(v30 + 16) != v124)
        {
          std::operator+<char>();
          uint64_t v197 = std::string::append(&v277, "' has a default ");
          long long v198 = *(_OWORD *)&v197->__r_.__value_.__l.__data_;
          v278.__r_.__value_.__r.__words[2] = v197->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v278.__r_.__value_.__l.__data_ = v198;
          v197->__r_.__value_.__l.__size_ = 0;
          v197->__r_.__value_.__r.__words[2] = 0;
          v197->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v276, *(_DWORD *)(v30 + 16));
          if ((v276.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v199 = &v276;
          }
          else {
            uint64_t v199 = (std::string *)v276.__r_.__value_.__r.__words[0];
          }
          if ((v276.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v200 = HIBYTE(v276.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v200 = v276.__r_.__value_.__l.__size_;
          }
          uint64_t v201 = std::string::append(&v278, (const std::string::value_type *)v199, v200);
          long long v202 = *(_OWORD *)&v201->__r_.__value_.__l.__data_;
          v279.__r_.__value_.__r.__words[2] = v201->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v279.__r_.__value_.__l.__data_ = v202;
          v201->__r_.__value_.__l.__size_ = 0;
          v201->__r_.__value_.__r.__words[2] = 0;
          v201->__r_.__value_.__r.__words[0] = 0;
          uint64_t v203 = std::string::append(&v279, "-d shape but a ");
          long long v204 = *(_OWORD *)&v203->__r_.__value_.__l.__data_;
          v282.__r_.__value_.__r.__words[2] = v203->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v282.__r_.__value_.__l.__data_ = v204;
          v203->__r_.__value_.__l.__size_ = 0;
          v203->__r_.__value_.__r.__words[2] = 0;
          v203->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v275, *(_DWORD *)(v123 + 24));
          if ((v275.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unsigned int v205 = &v275;
          }
          else {
            unsigned int v205 = (std::string *)v275.__r_.__value_.__r.__words[0];
          }
          if ((v275.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v206 = HIBYTE(v275.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v206 = v275.__r_.__value_.__l.__size_;
          }
          uint64_t v207 = std::string::append(&v282, (const std::string::value_type *)v205, v206);
          long long v208 = *(_OWORD *)&v207->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v207->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v208;
          v207->__r_.__value_.__l.__size_ = 0;
          v207->__r_.__value_.__r.__words[2] = 0;
          v207->__r_.__value_.__r.__words[0] = 0;
          uint64_t v209 = std::string::append(&__p, "-d shape range");
          long long v210 = *(_OWORD *)&v209->__r_.__value_.__l.__data_;
          *(void *)&v280[16] = *((void *)&v209->__r_.__value_.__l + 2);
          *(_OWORD *)v280 = v210;
          v209->__r_.__value_.__l.__size_ = 0;
          v209->__r_.__value_.__r.__words[2] = 0;
          v209->__r_.__value_.__r.__words[0] = 0;
          *(void *)signed int v6 = 12;
          std::operator+<char>();
          goto LABEL_312;
        }
        if ((int)v124 < 1)
        {
LABEL_103:
          for (uint64_t j = 0; ; ++j)
          {
            if (*(_DWORD *)(v8 + 36) == 5)
            {
              long long v82 = *(uint64_t **)(v8 + 24);
            }
            else
            {
              this = (CoreML::Result *)CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(this);
              long long v82 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
            }
            if (j >= *((int *)v82 + 4)) {
              goto LABEL_186;
            }
            if (*(_DWORD *)(v8 + 36) == 5)
            {
              __int32 v83 = *(uint64_t **)(v8 + 24);
            }
            else
            {
              this = (CoreML::Result *)CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(this);
              __int32 v83 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
            }
            uint64_t v84 = *(void *)(v83[3] + 8 * j + 8);
            if (v84 < 0) {
              break;
            }
          }
          std::operator+<char>();
          uint64_t v149 = std::string::append(&v277, "' has an invalid shape. Element ");
          long long v150 = *(_OWORD *)&v149->__r_.__value_.__l.__data_;
          v278.__r_.__value_.__r.__words[2] = v149->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v278.__r_.__value_.__l.__data_ = v150;
          v149->__r_.__value_.__l.__size_ = 0;
          v149->__r_.__value_.__r.__words[2] = 0;
          v149->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v276, j);
          if ((v276.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v151 = &v276;
          }
          else {
            uint64_t v151 = (std::string *)v276.__r_.__value_.__r.__words[0];
          }
          if ((v276.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v152 = HIBYTE(v276.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v152 = v276.__r_.__value_.__l.__size_;
          }
          uint64_t v153 = std::string::append(&v278, (const std::string::value_type *)v151, v152);
          long long v154 = *(_OWORD *)&v153->__r_.__value_.__l.__data_;
          v279.__r_.__value_.__r.__words[2] = v153->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v279.__r_.__value_.__l.__data_ = v154;
          v153->__r_.__value_.__l.__size_ = 0;
          v153->__r_.__value_.__r.__words[2] = 0;
          v153->__r_.__value_.__r.__words[0] = 0;
          unsigned int v155 = std::string::append(&v279, " has non-positive value ");
          long long v156 = *(_OWORD *)&v155->__r_.__value_.__l.__data_;
          v282.__r_.__value_.__r.__words[2] = v155->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v282.__r_.__value_.__l.__data_ = v156;
          v155->__r_.__value_.__l.__size_ = 0;
          v155->__r_.__value_.__r.__words[2] = 0;
          v155->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v275, v84);
          if ((v275.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v116 = &v275;
          }
          else {
            uint64_t v116 = (std::string *)v275.__r_.__value_.__r.__words[0];
          }
          if ((v275.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v117 = HIBYTE(v275.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v117 = v275.__r_.__value_.__l.__size_;
          }
LABEL_168:
          uint64_t v118 = std::string::append(&v282, (const std::string::value_type *)v116, v117);
          long long v119 = *(_OWORD *)&v118->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v118->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v119;
          v118->__r_.__value_.__l.__size_ = 0;
          v118->__r_.__value_.__r.__words[2] = 0;
          v118->__r_.__value_.__r.__words[0] = 0;
          uint64_t v120 = std::string::append(&__p, ".");
          long long v121 = *(_OWORD *)&v120->__r_.__value_.__l.__data_;
          *(void *)&v280[16] = *((void *)&v120->__r_.__value_.__l + 2);
          *(_OWORD *)v280 = v121;
          v120->__r_.__value_.__l.__size_ = 0;
          v120->__r_.__value_.__r.__words[2] = 0;
          v120->__r_.__value_.__r.__words[0] = 0;
          *(void *)signed int v6 = 12;
          std::operator+<char>();
LABEL_312:
          if ((v280[23] & 0x80000000) != 0) {
            operator delete(*(void **)v280);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v275.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v275.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v282.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v282.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v279.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v279.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v276.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v276.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v278.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v278.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v277.__r_.__value_.__r.__words[2]) < 0)
          {
            int v12 = (void *)v277.__r_.__value_.__r.__words[0];
            goto LABEL_16;
          }
          return;
        }
        uint64_t v124 = v124;
        uint64_t v126 = *(void *)(v123 + 32) + 8;
        uint64_t v127 = (uint64_t *)(*(void *)(v30 + 24) + 8);
        do
        {
          uint64_t v129 = *v127++;
          uint64_t v128 = v129;
          if (v129 < *(int *)(*(void *)v126 + 16)
            || (uint64_t v130 = *(void *)(*(void *)v126 + 24), (v130 & 0x8000000000000000) == 0) && v128 > v130)
          {
            std::operator+<char>();
            std::string v260 = std::string::append(&__p, "' has a default shape that is out of the specified shape range");
            long long v261 = *(_OWORD *)&v260->__r_.__value_.__l.__data_;
            *(void *)&v280[16] = *((void *)&v260->__r_.__value_.__l + 2);
            *(_OWORD *)v280 = v261;
            v260->__r_.__value_.__l.__size_ = 0;
            v260->__r_.__value_.__r.__words[2] = 0;
            v260->__r_.__value_.__r.__words[0] = 0;
            *(void *)signed int v6 = 12;
            std::operator+<char>();
            goto LABEL_12;
          }
          v126 += 8;
          --v124;
        }
        while (v124);
LABEL_102:
        if (!v31) {
          goto LABEL_186;
        }
        goto LABEL_103;
      }
      uint64_t v125 = 0;
      while (1)
      {
        CoreML::validateSizeRange((CoreML *)v280, *(const CoreML::Specification::SizeRange **)(*(void *)(v123 + 32) + 8 * v125 + 8));
        if ((*(_DWORD *)v280 & 0xFFFFFFEF) != 0) {
          break;
        }
        if (SHIBYTE(v281) < 0) {
          operator delete(*(void **)&v280[8]);
        }
        ++v125;
        uint64_t v124 = *(int *)(v123 + 24);
        if (v125 >= v124) {
          goto LABEL_177;
        }
      }
      std::operator+<char>();
      uint64_t v183 = std::string::append(&v277, "' has an invalid range for dimension ");
      long long v184 = *(_OWORD *)&v183->__r_.__value_.__l.__data_;
      v278.__r_.__value_.__r.__words[2] = v183->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v278.__r_.__value_.__l.__data_ = v184;
      v183->__r_.__value_.__l.__size_ = 0;
      v183->__r_.__value_.__r.__words[2] = 0;
      v183->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v276, v125);
      if ((v276.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        BOOL v185 = &v276;
      }
      else {
        BOOL v185 = (std::string *)v276.__r_.__value_.__r.__words[0];
      }
      if ((v276.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v186 = HIBYTE(v276.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v186 = v276.__r_.__value_.__l.__size_;
      }
      unsigned int v187 = std::string::append(&v278, (const std::string::value_type *)v185, v186);
      long long v188 = *(_OWORD *)&v187->__r_.__value_.__l.__data_;
      v279.__r_.__value_.__r.__words[2] = v187->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v279.__r_.__value_.__l.__data_ = v188;
      v187->__r_.__value_.__l.__size_ = 0;
      v187->__r_.__value_.__r.__words[2] = 0;
      v187->__r_.__value_.__r.__words[0] = 0;
      unint64_t v189 = std::string::append(&v279, ". ");
      long long v190 = *(_OWORD *)&v189->__r_.__value_.__l.__data_;
      v282.__r_.__value_.__r.__words[2] = v189->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v282.__r_.__value_.__l.__data_ = v190;
      v189->__r_.__value_.__l.__size_ = 0;
      v189->__r_.__value_.__r.__words[2] = 0;
      v189->__r_.__value_.__r.__words[0] = 0;
      if (v281 >= 0) {
        uint64_t v191 = &v280[8];
      }
      else {
        uint64_t v191 = *(const std::string::value_type **)&v280[8];
      }
      if (v281 >= 0) {
        std::string::size_type v192 = HIBYTE(v281);
      }
      else {
        std::string::size_type v192 = *(void *)&v280[16];
      }
      int v193 = std::string::append(&v282, v191, v192);
      long long v194 = *(_OWORD *)&v193->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v193->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v194;
      v193->__r_.__value_.__l.__size_ = 0;
      v193->__r_.__value_.__r.__words[2] = 0;
      v193->__r_.__value_.__r.__words[0] = 0;
      *(void *)signed int v6 = 12;
      std::operator+<char>();
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v282.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v282.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v279.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v279.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v276.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v276.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v278.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v278.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v277.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string v93 = (void *)v277.__r_.__value_.__r.__words[0];
        goto LABEL_129;
      }
      goto LABEL_294;
    case 6:
      if (*(_DWORD *)(*(void *)(v8 + 24) + 28)) {
        goto LABEL_90;
      }
      std::operator+<char>();
      std::string v94 = std::string::append(&__p, "' must contain a key type of either Int64 or String.");
      long long v95 = *(_OWORD *)&v94->__r_.__value_.__l.__data_;
      *(void *)&v280[16] = *((void *)&v94->__r_.__value_.__l + 2);
      *(_OWORD *)v280 = v95;
      v94->__r_.__value_.__l.__size_ = 0;
      v94->__r_.__value_.__r.__words[2] = 0;
      v94->__r_.__value_.__r.__words[0] = 0;
      *(void *)signed int v6 = 12;
      std::operator+<char>();
      goto LABEL_12;
    case 7:
      if (a3 <= 2)
      {
        std::to_string(&v279, 3);
        long long v76 = std::string::insert(&v279, 0, "Sequence types are only valid in specification verison >= ");
        long long v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
        v282.__r_.__value_.__r.__words[2] = v76->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v282.__r_.__value_.__l.__data_ = v77;
        v76->__r_.__value_.__l.__size_ = 0;
        v76->__r_.__value_.__r.__words[2] = 0;
        v76->__r_.__value_.__r.__words[0] = 0;
        long long v78 = std::string::append(&v282, ". This model has version ");
        long long v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v78->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v79;
        v78->__r_.__value_.__l.__size_ = 0;
        v78->__r_.__value_.__r.__words[2] = 0;
        v78->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v278, a3);
        if ((v278.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v23 = &v278;
        }
        else {
          uint64_t v23 = (std::string *)v278.__r_.__value_.__r.__words[0];
        }
        if ((v278.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v278.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v278.__r_.__value_.__l.__size_;
        }
LABEL_29:
        int v25 = std::string::append(&__p, (const std::string::value_type *)v23, size);
        long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
        *(void *)&v280[16] = *((void *)&v25->__r_.__value_.__l + 2);
        *(_OWORD *)v280 = v26;
        v25->__r_.__value_.__l.__size_ = 0;
        v25->__r_.__value_.__r.__words[2] = 0;
        v25->__r_.__value_.__r.__words[0] = 0;
        *(void *)signed int v6 = 12;
        std::operator+<char>();
        if ((v280[23] & 0x80000000) != 0) {
          operator delete(*(void **)v280);
        }
        if (SHIBYTE(v278.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v278.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          uint64_t v27 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_35:
          operator delete(v27);
        }
        goto LABEL_415;
      }
      if (*(void *)(*(void *)(v8 + 24) + 16)) {
        std::string v85 = *(const CoreML::Specification::SizeRange **)(*(void *)(v8 + 24) + 16);
      }
      else {
        std::string v85 = (const CoreML::Specification::SizeRange *)&CoreML::Specification::_SizeRange_default_instance_;
      }
      CoreML::validateSizeRange((CoreML *)v280, v85);
      if ((*(_DWORD *)v280 & 0xFFFFFFEF) != 0)
      {
        std::operator+<char>();
        long long v87 = std::string::append(&v279, "' has invalid allowed sizes. ");
        long long v88 = *(_OWORD *)&v87->__r_.__value_.__l.__data_;
        v282.__r_.__value_.__r.__words[2] = v87->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v282.__r_.__value_.__l.__data_ = v88;
        v87->__r_.__value_.__l.__size_ = 0;
        v87->__r_.__value_.__r.__words[2] = 0;
        v87->__r_.__value_.__r.__words[0] = 0;
        if (v281 >= 0) {
          unint64_t v89 = &v280[8];
        }
        else {
          unint64_t v89 = *(const std::string::value_type **)&v280[8];
        }
        if (v281 >= 0) {
          std::string::size_type v90 = HIBYTE(v281);
        }
        else {
          std::string::size_type v90 = *(void *)&v280[16];
        }
        uint64_t v91 = std::string::append(&v282, v89, v90);
        long long v92 = *(_OWORD *)&v91->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v91->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v92;
        v91->__r_.__value_.__l.__size_ = 0;
        v91->__r_.__value_.__r.__words[2] = 0;
        v91->__r_.__value_.__r.__words[0] = 0;
        *(void *)signed int v6 = 12;
        std::operator+<char>();
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v282.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v282.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v279.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string v93 = (void *)v279.__r_.__value_.__r.__words[0];
LABEL_129:
          operator delete(v93);
        }
      }
      else
      {
        if (*(_DWORD *)(v8 + 36) == 7)
        {
          uint64_t v122 = *(uint64_t **)(v8 + 24);
        }
        else
        {
          CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(v86);
          uint64_t v122 = &CoreML::Specification::_SequenceFeatureType_default_instance_;
        }
        if (*((_DWORD *)v122 + 9))
        {
          if (SHIBYTE(v281) < 0) {
            operator delete(*(void **)&v280[8]);
          }
          goto LABEL_90;
        }
        std::operator+<char>();
        BOOL v159 = std::string::append(&v282, "' has invalid or missing type. Only Int64 and String sequences are currently supported");
        long long v160 = *(_OWORD *)&v159->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v159->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v160;
        v159->__r_.__value_.__l.__size_ = 0;
        v159->__r_.__value_.__r.__words[2] = 0;
        v159->__r_.__value_.__r.__words[0] = 0;
        *(void *)signed int v6 = 12;
        std::operator+<char>();
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v282.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string v93 = (void *)v282.__r_.__value_.__r.__words[0];
          goto LABEL_129;
        }
      }
LABEL_294:
      if (SHIBYTE(v281) < 0)
      {
        int v12 = *(void **)&v280[8];
        goto LABEL_16;
      }
      return;
    default:
      goto LABEL_90;
  }
}

void sub_19EB051A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v47 - 89) < 0) {
    operator delete(*(void **)(v47 - 112));
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  if (a47 < 0) {
    operator delete(a42);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (*(char *)(v47 - 113) < 0) {
    operator delete(*(void **)(v47 - 136));
  }
  _Unwind_Resume(exception_object);
}

void CoreML::validateModelDescription(uint64_t a1, uint64_t a2, int a3, char *a4)
{
  CoreML::Result::Result((CoreML::Result *)&v68);
  if (*(int *)(a2 + 96) > 0)
  {
LABEL_2:
    if (*(_DWORD *)(a2 + 24))
    {
      std::string::basic_string[abi:ne180100]<0>(&v65, "Multi-function model must not use top level input feature description.");
      v79[0] = (void *)12;
      std::operator+<char>();
      goto LABEL_28;
    }
    if (*(_DWORD *)(a2 + 48))
    {
      std::string::basic_string[abi:ne180100]<0>(&v65, "Multi-function model must not use top level output feature description.");
      v79[0] = (void *)12;
      std::operator+<char>();
      goto LABEL_28;
    }
    if (*(_DWORD *)(a2 + 72))
    {
      std::string::basic_string[abi:ne180100]<0>(&v65, "Multi-function model must not use top level state feature description.");
      v79[0] = (void *)12;
      std::operator+<char>();
      goto LABEL_28;
    }
    uint64_t v9 = *(void *)(a2 + 136);
    if (*(char *)(v9 + 23) < 0)
    {
      if (*(void *)(v9 + 8)) {
        goto LABEL_19;
      }
    }
    else if (*(unsigned char *)(v9 + 23))
    {
LABEL_19:
      std::string::basic_string[abi:ne180100]<0>(&v65, "Multi-function model must not use top level predictedFeatureName field.");
      v79[0] = (void *)12;
      std::operator+<char>();
      goto LABEL_28;
    }
    uint64_t v10 = *(void *)(a2 + 144);
    if (*(char *)(v10 + 23) < 0) {
      uint64_t v11 = *(void *)(v10 + 8);
    }
    else {
      uint64_t v11 = *(unsigned __int8 *)(v10 + 23);
    }
    if (v11)
    {
      std::string::basic_string[abi:ne180100]<0>(&v65, "Multi-function model must not use top level predictedProbabilitiesName field.");
      v79[0] = (void *)12;
      std::operator+<char>();
    }
    else
    {
      if (!*(_DWORD *)(a2 + 120))
      {
        CoreML::Result::Result((CoreML::Result *)v79);
LABEL_30:
        int v12 = (int)v79[0];
        long long v68 = v79[0];
        if (SHIBYTE(v70) < 0)
        {
          operator delete(__p[0]);
          int v12 = (int)v68;
        }
        *(_OWORD *)std::string __p = *(_OWORD *)&v79[1];
        uint64_t v70 = v79[3];
        if ((v12 & 0xFFFFFFEF) != 0) {
          goto LABEL_159;
        }
        if (!a4[2])
        {
          std::string::basic_string[abi:ne180100]<0>(v79, "This model type doesn't support multi-function syntax.");
          std::string::size_type v65 = (void *)17;
          std::operator+<char>();
          if ((SHIBYTE(v79[2]) & 0x80000000) == 0) {
            goto LABEL_156;
          }
          long long v21 = v79[0];
          goto LABEL_53;
        }
        if (a3 <= 8)
        {
          std::to_string(&v76, 9);
          long long v13 = std::string::insert(&v76, 0, "Multi-function syntax is only valid in specification verison >= ");
          long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
          v77.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v14;
          v13->__r_.__value_.__l.__size_ = 0;
          v13->__r_.__value_.__r.__words[2] = 0;
          v13->__r_.__value_.__r.__words[0] = 0;
          long long v15 = std::string::append(&v77, ". This model has version ");
          long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
          v78.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v16;
          v15->__r_.__value_.__l.__size_ = 0;
          v15->__r_.__value_.__r.__words[2] = 0;
          v15->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v75, a3);
          if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string v17 = &v75;
          }
          else {
            std::string v17 = (std::string *)v75.__r_.__value_.__r.__words[0];
          }
          if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v75.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v75.__r_.__value_.__l.__size_;
          }
          std::string v19 = std::string::append(&v78, (const std::string::value_type *)v17, size);
          long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
          v79[2] = (void *)v19->__r_.__value_.__r.__words[2];
          *(_OWORD *)long long v79 = v20;
          v19->__r_.__value_.__l.__size_ = 0;
          v19->__r_.__value_.__r.__words[2] = 0;
          v19->__r_.__value_.__r.__words[0] = 0;
          std::string::size_type v65 = (void *)6;
          std::operator+<char>();
          if (SHIBYTE(v79[2]) < 0) {
            operator delete(v79[0]);
          }
          if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v75.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v78.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v77.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
          {
            long long v21 = (void *)v76.__r_.__value_.__r.__words[0];
LABEL_53:
            operator delete(v21);
          }
LABEL_156:
          int v63 = (int)v65;
          long long v68 = v65;
          if (SHIBYTE(v70) < 0)
          {
            operator delete(__p[0]);
            int v63 = (int)v68;
          }
          *(_OWORD *)std::string __p = *(_OWORD *)v66;
          uint64_t v70 = v67;
          if ((v63 & 0xFFFFFFEF) != 0)
          {
LABEL_159:
            *(void *)a1 = v68;
            *(_OWORD *)(a1 + 8) = *(_OWORD *)__p;
            uint64_t v64 = v70;
LABEL_160:
            *(void *)(a1 + 24) = v64;
            return;
          }
LABEL_162:
          *(void *)a1 = v68;
          *(_OWORD *)(a1 + 8) = *(_OWORD *)__p;
          uint64_t v64 = v70;
          goto LABEL_160;
        }
        memset(&v78, 0, sizeof(v78));
        uint64_t v22 = *(void *)(a2 + 104);
        if (v22) {
          uint64_t v23 = (uint64_t *)(v22 + 8);
        }
        else {
          uint64_t v23 = 0;
        }
        uint64_t v24 = *(int *)(a2 + 96);
        if (!v24)
        {
          std::string::size_type v46 = 0;
          uint64_t v45 = 0;
LABEL_112:
          if (std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>(v45, v46, *(unsigned __int8 ***)(a2 + 152)) == v46)
          {
            std::operator+<char>();
            uint64_t v47 = std::string::append(&v75, "' is not found in the function name list: ");
            long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
            v76.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v76.__r_.__value_.__l.__data_ = v48;
            v47->__r_.__value_.__l.__size_ = 0;
            v47->__r_.__value_.__r.__words[2] = 0;
            v47->__r_.__value_.__r.__words[0] = 0;
            std::string::basic_string[abi:ne180100]<0>(v71, ",");
            std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v79);
            std::string::size_type v49 = v78.__r_.__value_.__r.__words[0];
            if ((uint64_t)(v78.__r_.__value_.__l.__size_ - v78.__r_.__value_.__r.__words[0]) >= 1)
            {
              std::string::size_type v50 = v78.__r_.__value_.__l.__size_ - 24;
              if (v78.__r_.__value_.__r.__words[0] != v78.__r_.__value_.__l.__size_ - 24)
              {
                do
                {
                  int v51 = *(char *)(v49 + 23);
                  if (v51 >= 0) {
                    uint64_t v52 = v49;
                  }
                  else {
                    uint64_t v52 = *(void *)v49;
                  }
                  if (v51 >= 0) {
                    uint64_t v53 = *(unsigned __int8 *)(v49 + 23);
                  }
                  else {
                    uint64_t v53 = *(void *)(v49 + 8);
                  }
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, v52, v53);
                  if ((v72 & 0x80u) == 0) {
                    std::string v54 = v71;
                  }
                  else {
                    std::string v54 = (void **)v71[0];
                  }
                  if ((v72 & 0x80u) == 0) {
                    uint64_t v55 = v72;
                  }
                  else {
                    uint64_t v55 = (uint64_t)v71[1];
                  }
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)v54, v55);
                  v49 += 24;
                }
                while (v49 != v50);
                std::string::size_type v49 = v50;
              }
              int v56 = *(char *)(v49 + 23);
              if (v56 >= 0) {
                uint64_t v57 = v49;
              }
              else {
                uint64_t v57 = *(void *)v49;
              }
              if (v56 >= 0) {
                uint64_t v58 = *(unsigned __int8 *)(v49 + 23);
              }
              else {
                uint64_t v58 = *(void *)(v49 + 8);
              }
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, v57, v58);
            }
            std::stringbuf::str();
            v79[0] = *(void **)MEMORY[0x1E4FBA418];
            *(void **)((char *)v79 + *((void *)v79[0] - 3)) = *(void **)(MEMORY[0x1E4FBA418] + 24);
            v79[1] = (void *)(MEMORY[0x1E4FBA470] + 16);
            if (v80 < 0) {
              operator delete(v79[9]);
            }
            std::streambuf::~streambuf();
            std::ostream::~ostream();
            MEMORY[0x19F3C1850](&v81);
            if ((v74 & 0x80u) == 0) {
              uint64_t v59 = v73;
            }
            else {
              uint64_t v59 = (void **)v73[0];
            }
            if ((v74 & 0x80u) == 0) {
              std::string::size_type v60 = v74;
            }
            else {
              std::string::size_type v60 = (std::string::size_type)v73[1];
            }
            uint64_t v61 = std::string::append(&v76, (const std::string::value_type *)v59, v60);
            long long v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
            v77.__r_.__value_.__r.__words[2] = v61->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v62;
            v61->__r_.__value_.__l.__size_ = 0;
            v61->__r_.__value_.__r.__words[2] = 0;
            v61->__r_.__value_.__r.__words[0] = 0;
            std::string::size_type v65 = (void *)18;
            std::operator+<char>();
            if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v77.__r_.__value_.__l.__data_);
            }
            if ((char)v74 < 0) {
              operator delete(v73[0]);
            }
            if ((char)v72 < 0) {
              operator delete(v71[0]);
            }
            if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v76.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v75.__r_.__value_.__l.__data_);
            }
          }
          else
          {
            CoreML::Result::Result((CoreML::Result *)&v65);
          }
LABEL_155:
          v79[0] = &v78;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v79);
          goto LABEL_156;
        }
        int v25 = &v23[v24];
        while (1)
        {
          uint64_t v26 = *v23;
          uint64_t v27 = *(int *)(*v23 + 24);
          if ((int)v27 <= 0 && *a4 == 0)
          {
            std::string::basic_string[abi:ne180100]<0>(v79, "Models must have one or more inputs.");
            std::string::size_type v65 = (void *)19;
            std::operator+<char>();
          }
          else
          {
            int v29 = *(_DWORD *)(v26 + 48);
            if (a4[1]) {
              BOOL v30 = 0;
            }
            else {
              BOOL v30 = v29 <= 0;
            }
            if (!v30)
            {
              uint64_t v31 = *(void *)(v26 + 32);
              if (v31) {
                int v32 = (uint64_t **)(v31 + 8);
              }
              else {
                int v32 = 0;
              }
              if (v27)
              {
                uint64_t v33 = 8 * v27;
                while (1)
                {
                  CoreML::validateFeatureDescription((CoreML::Result *)&v65, *v32, a3, 0);
                  if ((v65 & 0xFFFFFFEF) != 0) {
                    break;
                  }
                  if (SHIBYTE(v67) < 0) {
                    operator delete(v66[0]);
                  }
                  ++v32;
                  v33 -= 8;
                  if (!v33)
                  {
                    int v29 = *(_DWORD *)(v26 + 48);
                    goto LABEL_77;
                  }
                }
              }
              else
              {
LABEL_77:
                uint64_t v34 = *(void *)(v26 + 56);
                if (v34) {
                  uint64_t v35 = (uint64_t **)(v34 + 8);
                }
                else {
                  uint64_t v35 = 0;
                }
                if (v29)
                {
                  uint64_t v36 = 8 * v29;
                  while (1)
                  {
                    CoreML::validateFeatureDescription((CoreML::Result *)&v65, *v35, a3, 1);
                    if ((v65 & 0xFFFFFFEF) != 0) {
                      break;
                    }
                    if (SHIBYTE(v67) < 0) {
                      operator delete(v66[0]);
                    }
                    ++v35;
                    v36 -= 8;
                    if (!v36) {
                      goto LABEL_86;
                    }
                  }
                }
                else
                {
LABEL_86:
                  uint64_t v37 = *(void *)(v26 + 80);
                  if (v37) {
                    uint64_t v38 = (uint64_t **)(v37 + 8);
                  }
                  else {
                    uint64_t v38 = 0;
                  }
                  uint64_t v39 = *(int *)(v26 + 72);
                  if (v39)
                  {
                    uint64_t v40 = 8 * v39;
                    while (1)
                    {
                      CoreML::validateFeatureDescription((CoreML::Result *)&v65, *v38, a3, 2);
                      if ((v65 & 0xFFFFFFEF) != 0) {
                        break;
                      }
                      if (SHIBYTE(v67) < 0) {
                        operator delete(v66[0]);
                      }
                      ++v38;
                      v40 -= 8;
                      if (!v40) {
                        goto LABEL_95;
                      }
                    }
                  }
                  else
                  {
LABEL_95:
                    CoreML::Result::Result((CoreML::Result *)&v65);
                  }
                }
              }
              goto LABEL_100;
            }
            std::string::basic_string[abi:ne180100]<0>(v79, "Models must have one or more outputs.");
            std::string::size_type v65 = (void *)12;
            std::operator+<char>();
          }
          if (SHIBYTE(v79[2]) < 0) {
            operator delete(v79[0]);
          }
LABEL_100:
          if ((v65 & 0xFFFFFFEF) != 0) {
            goto LABEL_155;
          }
          uint64_t v41 = *(void *)(v26 + 88);
          uint64_t v42 = (_OWORD *)v78.__r_.__value_.__l.__size_;
          if (v78.__r_.__value_.__l.__size_ >= v78.__r_.__value_.__r.__words[2])
          {
            std::string::size_type v44 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v78, (long long *)v41);
          }
          else
          {
            if (*(char *)(v41 + 23) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)v78.__r_.__value_.__l.__size_, *(const std::string::value_type **)v41, *(void *)(v41 + 8));
            }
            else
            {
              long long v43 = *(_OWORD *)v41;
              *(void *)(v78.__r_.__value_.__l.__size_ + 16) = *(void *)(v41 + 16);
              *uint64_t v42 = v43;
            }
            std::string::size_type v44 = (std::string::size_type)v42 + 24;
          }
          v78.__r_.__value_.__l.__size_ = v44;
          if (SHIBYTE(v67) < 0) {
            operator delete(v66[0]);
          }
          if (++v23 == v25)
          {
            std::string::size_type v46 = v78.__r_.__value_.__l.__size_;
            uint64_t v45 = v78.__r_.__value_.__r.__words[0];
            goto LABEL_112;
          }
        }
      }
      std::string::basic_string[abi:ne180100]<0>(&v65, "Multi-function model must not use top level training input feature description.");
      v79[0] = (void *)12;
      std::operator+<char>();
    }
LABEL_28:
    if (SHIBYTE(v66[1]) < 0) {
      operator delete(v65);
    }
    goto LABEL_30;
  }
  uint64_t v8 = *(void *)(a2 + 152);
  if (*(char *)(v8 + 23) < 0)
  {
    if (*(void *)(v8 + 8)) {
      goto LABEL_2;
    }
  }
  else if (*(unsigned char *)(v8 + 23))
  {
    goto LABEL_2;
  }
  CoreML::validateFeatureDescriptions<CoreML::Specification::ModelDescription>((void **)a1, a2, a3, *a4, a4[1]);
  if ((*(_DWORD *)a1 & 0xFFFFFFEF) == 0)
  {
    if (*(char *)(a1 + 31) < 0) {
      operator delete(*(void **)(a1 + 8));
    }
    goto LABEL_162;
  }
  if (SHIBYTE(v70) < 0) {
    operator delete(__p[0]);
  }
}

void sub_19EB06118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(a1);
}

void CoreML::validateRegressorInterface(void **this, uint64_t a2, int a3, char a4, char a5)
{
  uint64_t v7 = *(void *)(a2 + 136);
  if (*(char *)(v7 + 23) < 0)
  {
    if (*(void *)(v7 + 8)) {
      goto LABEL_3;
    }
  }
  else if (*(unsigned char *)(v7 + 23))
  {
LABEL_3:
    CoreML::validateFeatureDescriptions<CoreML::Specification::ModelDescription>(this, a2, a3, a4, a5);
    if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
      return;
    }
    uint64_t v8 = *(const void ***)(a2 + 136);
    uint64_t v9 = (unsigned int *)operator new(8uLL);
    *(void *)uint64_t v9 = 0x500000002;
    v12[1] = v9 + 2;
    v12[2] = v9 + 2;
    v12[0] = v9;
    CoreML::validateDescriptionsContainFeatureWithNameAndType<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>((CoreML::Result *)&__p, a2 + 40, v8, v12);
    *this = __p;
    uint64_t v10 = this + 1;
    if (*((char *)this + 31) < 0) {
      operator delete(*v10);
    }
    *(_OWORD *)uint64_t v10 = v14;
    this[3] = v15;
    HIBYTE(v15) = 0;
    LOBYTE(v14) = 0;
    uint64_t v11 = v9;
    goto LABEL_10;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "Specification is missing regressor predictedFeatureName.");
  *this = (void *)12;
  std::operator+<char>();
  if ((SHIBYTE(v14) & 0x80000000) == 0) {
    return;
  }
  uint64_t v11 = __p;
LABEL_10:
  operator delete(v11);
}

void sub_19EB06400(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  operator delete(v19);
  if (*(char *)(v18 + 31) < 0) {
    operator delete(*(void **)(v18 + 8));
  }
  _Unwind_Resume(a1);
}

void CoreML::validateDescriptionsContainFeatureWithNameAndType<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>(CoreML::Result *a1, uint64_t a2, const void **a3, unsigned int **a4)
{
  CoreML::Result::Result((CoreML::Result *)v26);
  uint64_t v8 = *(unsigned int *)(a2 + 8);
  if ((int)v8 < 1)
  {
LABEL_23:
    std::operator+<char>();
    long long v21 = std::string::append(&v23, "' to the model is not present in the model description.");
    long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    std::string::size_type v25 = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    *(void *)a1 = 10;
    std::operator+<char>();
    if (SHIBYTE(v25) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v23.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    uint64_t v9 = *(void *)(a2 + 16);
    int v10 = *((char *)a3 + 23);
    if (v10 >= 0) {
      uint64_t v11 = (const void *)*((unsigned __int8 *)a3 + 23);
    }
    else {
      uint64_t v11 = a3[1];
    }
    if (v10 >= 0) {
      int v12 = a3;
    }
    else {
      int v12 = *a3;
    }
    long long v13 = (uint64_t *)(v9 + 8);
    while (1)
    {
      uint64_t v14 = *v13;
      uint64_t v15 = *(void *)(*v13 + 16);
      int v16 = *(char *)(v15 + 23);
      std::string v17 = v16 >= 0 ? (const void *)*(unsigned __int8 *)(v15 + 23) : *(const void **)(v15 + 8);
      uint64_t v18 = v16 >= 0 ? *(const void **)(*v13 + 16) : *(const void **)v15;
      size_t v19 = (size_t)(v17 >= v11 ? v11 : v17);
      if (!memcmp(v12, v18, v19) && v17 == v11) {
        break;
      }
      ++v13;
      if (!--v8) {
        goto LABEL_23;
      }
    }
    CoreML::validateSchemaTypes(a1, a4, v14);
  }
  if (v28 < 0) {
    operator delete(v27);
  }
}

void sub_19EB065B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void CoreML::validateClassifierFeatureDescriptions(void **this, const CoreML::Specification::ModelDescription *a2, int a3)
{
  uint64_t v5 = *((void *)a2 + 17);
  if ((*(char *)(v5 + 23) & 0x80000000) == 0)
  {
    if (*(unsigned char *)(v5 + 23)) {
      goto LABEL_3;
    }
LABEL_13:
    std::string::basic_string[abi:ne180100]<0>(&__p, "Specification is missing classifier predictedFeatureName");
    *this = (void *)12;
    std::operator+<char>();
    if (SHIBYTE(v14) < 0) {
      operator delete(__p);
    }
    return;
  }
  if (!*(void *)(v5 + 8)) {
    goto LABEL_13;
  }
LABEL_3:
  uint64_t v6 = *((void *)a2 + 18);
  uint64_t v7 = (char *)a2 + 40;
  uint64_t v8 = operator new(4uLL);
  uint64_t v9 = v8;
  if (a3) {
    int v10 = 1;
  }
  else {
    int v10 = 3;
  }
  _DWORD *v8 = v10;
  long long v13 = v8 + 1;
  uint64_t v14 = v8 + 1;
  std::string __p = v8;
  CoreML::validateDescriptionsContainFeatureWithNameAndType<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>((CoreML::Result *)this, (uint64_t)v7, (const void **)v5, (unsigned int **)&__p);
  operator delete(v9);
  if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
  {
    if (*((char *)this + 31) < 0) {
      operator delete(this[1]);
    }
    if (*(char *)(v6 + 23) < 0)
    {
      if (!*(void *)(v6 + 8))
      {
LABEL_20:
        CoreML::Result::Result((CoreML::Result *)this);
        return;
      }
    }
    else if (!*(unsigned char *)(v6 + 23))
    {
      goto LABEL_20;
    }
    uint64_t v11 = operator new(8uLL);
    *uint64_t v11 = 0x600000005;
    long long v13 = v11 + 1;
    uint64_t v14 = v11 + 1;
    std::string __p = v11;
    CoreML::validateDescriptionsContainFeatureWithNameAndType<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>((CoreML::Result *)this, (uint64_t)v7, (const void **)v6, (unsigned int **)&__p);
    operator delete(v11);
    if ((*(_DWORD *)this & 0xFFFFFFEF) != 0) {
      return;
    }
    if (*((char *)this + 31) < 0) {
      operator delete(this[1]);
    }
    goto LABEL_20;
  }
}

void sub_19EB067A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  operator delete(v15);
  _Unwind_Resume(a1);
}

uint64_t CoreML::NeuralNetworkSpecValidator::NeuralNetworkSpecValidator(uint64_t a1, void *a2, uint64_t **a3, char a4, int a5, uint64_t **a6)
{
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = a1 + 16;
  uint64_t v7 = (uint64_t **)(a1 + 8);
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 4CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene::New(this, 0) = 0;
  *(void *)(a1 + 32) = a1 + 40;
  uint64_t v26 = (uint64_t **)(a1 + 32);
  *(void *)(a1 + 64) = 0;
  uint64_t v8 = (uint64_t **)(a1 + 64);
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = a1 + 64;
  uint64_t v9 = (uint64_t **)(a1 + 56);
  *(void *)(a1 + 72) = 0;
  if ((void *)(a1 + 56) != a2)
  {
    uint64_t v11 = a2 + 1;
    int v10 = (void *)*a2;
    if ((void *)*a2 != a2 + 1)
    {
      do
      {
        int v12 = (char *)operator new(0x50uLL);
        long long v13 = (uint64_t *)v12;
        v28[0] = v12;
        v28[1] = v8;
        char v29 = 0;
        if (*((char *)v10 + 55) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)(v12 + 32), (const std::string::value_type *)v10[4], v10[5]);
        }
        else
        {
          long long v14 = *((_OWORD *)v10 + 2);
          *((void *)v12 + 6) = v10[6];
          *((_OWORD *)v12 + 2) = v14;
        }
        std::set<std::string>::set[abi:ne180100](v13 + 7, (uint64_t)(v10 + 7));
        char v29 = 1;
        uint64_t v15 = (uint64_t *)v28[0];
        int v16 = v8;
        std::string v17 = v8;
        uint64_t v18 = *v8;
        if (*v8)
        {
          do
          {
            while (1)
            {
              int v16 = (uint64_t **)v18;
              if (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v15 + 4, v18 + 4)) {
                break;
              }
              uint64_t v18 = *v16;
              std::string v17 = v16;
              if (!*v16) {
                goto LABEL_12;
              }
            }
            uint64_t v18 = v16[1];
          }
          while (v18);
          std::string v17 = v16 + 1;
        }
LABEL_12:
        std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(v9, (uint64_t)v16, v17, v15);
        v28[0] = 0;
        std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)v28);
        size_t v19 = (void *)v10[1];
        if (v19)
        {
          do
          {
            long long v20 = v19;
            size_t v19 = (void *)*v19;
          }
          while (v19);
        }
        else
        {
          do
          {
            long long v20 = (void *)v10[2];
            BOOL v21 = *v20 == (void)v10;
            int v10 = v20;
          }
          while (!v21);
        }
        int v10 = v20;
      }
      while (v20 != v11);
    }
  }
  if (v7 != a3) {
    std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,int>,std::__tree_node<std::__value_type<std::string,int>,void *> *,long>>(v7, *a3, a3 + 1);
  }
  *(unsigned char *)a1 = a4;
  *(_DWORD *)(a1 + 8CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene::New(this, 0) = a5;
  if (v26 != a6) {
    std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,int>,std::__tree_node<std::__value_type<std::string,int>,void *> *,long>>(v26, *a6, a6 + 1);
  }
  return a1;
}

void sub_19EB069C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char **a10, char **a11)
{
  std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(*v11);
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(*a10);
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(*a11);
  _Unwind_Resume(a1);
}

void CoreML::NeuralNetworkSpecValidator::validateLayer(void **this, const CoreML::Specification::NeuralNetworkLayer *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(a3 + 140);
  if (v5 > 879)
  {
    if (v5 <= 1139)
    {
      if (v5 <= 994)
      {
        if (v5 > 939)
        {
          if (v5 <= 959)
          {
            switch(v5)
            {
              case 945:
                uint64_t v8 = (const CoreML::Specification::NeuralNetworkLayer *)a3;
                goto LABEL_87;
              case 946:
              case 947:
              case 948:
              case 949:
              case 951:
              case 953:
                goto LABEL_580;
              case 950:
                CoreML::NeuralNetworkSpecValidator::validateSoftmaxNDLayer(this, (uint64_t **)a3);
                return;
              case 952:
                uint64_t v6 = (const CoreML::Specification::NeuralNetworkLayer *)a3;
                goto LABEL_23;
              case 954:
                uint64_t v8 = (const CoreML::Specification::NeuralNetworkLayer *)a3;
                goto LABEL_87;
              default:
                if (v5 != 940) {
                  goto LABEL_580;
                }
                uint64_t v6 = (const CoreML::Specification::NeuralNetworkLayer *)a3;
                goto LABEL_23;
            }
          }
          if (v5 > 974)
          {
            switch(v5)
            {
              case 975:
                CoreML::NeuralNetworkSpecValidator::validateSplitNDLayer(this, (uint64_t **)a3);
                return;
              case 980:
                CoreML::NeuralNetworkSpecValidator::validateConcatNDLayer(this, (uint64_t **)a3);
                return;
              case 985:
                CoreML::NeuralNetworkSpecValidator::validateTransposeLayer(this, (uint64_t **)a3);
                return;
            }
            goto LABEL_580;
          }
          if (v5 == 960)
          {
            CoreML::NeuralNetworkSpecValidator::validateReverseLayer(this, (uint64_t **)a3);
            return;
          }
          if (v5 == 965)
          {
            uint64_t v6 = (const CoreML::Specification::NeuralNetworkLayer *)a3;
            goto LABEL_23;
          }
          goto LABEL_580;
        }
        if (v5 <= 904)
        {
          if (v5 <= 889)
          {
            if (v5 == 880)
            {
              uint64_t v6 = (const CoreML::Specification::NeuralNetworkLayer *)a3;
            }
            else
            {
              if (v5 != 885) {
                goto LABEL_580;
              }
              uint64_t v6 = (const CoreML::Specification::NeuralNetworkLayer *)a3;
            }
          }
          else
          {
            switch(v5)
            {
              case 890:
                uint64_t v6 = (const CoreML::Specification::NeuralNetworkLayer *)a3;
                break;
              case 895:
                uint64_t v6 = (const CoreML::Specification::NeuralNetworkLayer *)a3;
                break;
              case 900:
                uint64_t v6 = (const CoreML::Specification::NeuralNetworkLayer *)a3;
                break;
              default:
                goto LABEL_580;
            }
          }
          goto LABEL_23;
        }
        if (v5 > 924)
        {
          if (v5 == 925)
          {
            CoreML::NeuralNetworkSpecValidator::validateStackLayer(this, (uint64_t **)a3);
            return;
          }
          if (v5 != 930)
          {
            if (v5 == 935)
            {
              CoreML::NeuralNetworkSpecValidator::validateScatterLayer(this, a2, a3);
              return;
            }
            goto LABEL_580;
          }
          uint64_t v6 = (const CoreML::Specification::NeuralNetworkLayer *)a3;
          goto LABEL_23;
        }
        if (v5 == 905)
        {
          uint64_t v6 = (const CoreML::Specification::NeuralNetworkLayer *)a3;
          goto LABEL_23;
        }
        if (v5 != 920) {
          goto LABEL_580;
        }
        uint64_t v9 = (const CoreML::Specification::NeuralNetworkLayer *)a3;
LABEL_92:
        CoreML::NeuralNetworkSpecValidator::validateTileLayer(this, v9);
        return;
      }
      if (v5 <= 1079)
      {
        if (v5 <= 1024)
        {
          if (v5 <= 1004)
          {
            if (v5 == 995)
            {
              CoreML::NeuralNetworkSpecValidator::validateSliceStaticLayer(this, (uint64_t **)a3);
              return;
            }
            if (v5 == 1000)
            {
              CoreML::NeuralNetworkSpecValidator::validateSliceDynamicLayer(this, (const CoreML::Specification::NeuralNetworkLayer *)a3);
              return;
            }
          }
          else
          {
            switch(v5)
            {
              case 1005:
                CoreML::NeuralNetworkSpecValidator::validateSlidingWindowsLayer(this, (uint64_t **)a3);
                return;
              case 1015:
                CoreML::NeuralNetworkSpecValidator::validateTopKLayer(this, a2, a3);
                return;
              case 1020:
                CoreML::NeuralNetworkSpecValidator::validateArgMinLayer(this, a2, a3);
                return;
            }
          }
          goto LABEL_580;
        }
        if (v5 <= 1044)
        {
          if (v5 == 1025)
          {
            CoreML::NeuralNetworkSpecValidator::validateArgMaxLayer(this, a2, a3);
            return;
          }
          if (v5 == 1040)
          {
            CoreML::NeuralNetworkSpecValidator::validateEmbeddingNDLayer(this, a2, a3);
            return;
          }
          goto LABEL_580;
        }
        if (v5 == 1045)
        {
          CoreML::NeuralNetworkSpecValidator::validateBatchedMatmulLayer(this, (const CoreML::Specification::NeuralNetworkLayer *)a3);
          return;
        }
        if (v5 != 1065)
        {
          if (v5 == 1070)
          {
            CoreML::NeuralNetworkSpecValidator::validateLoadConstantNDLayer(this, (const CoreML::Specification::NeuralNetworkLayer *)a3);
            return;
          }
          goto LABEL_580;
        }
        uint64_t v7 = (const CoreML::Specification::NeuralNetworkLayer *)a3;
        goto LABEL_66;
      }
      if (v5 > 1109)
      {
        if (v5 <= 1124)
        {
          if (v5 != 1110)
          {
            if (v5 == 1120)
            {
              CoreML::NeuralNetworkSpecValidator::validateSqueezeLayer(this, (uint64_t **)a3);
              return;
            }
            goto LABEL_580;
          }
          uint64_t v6 = (const CoreML::Specification::NeuralNetworkLayer *)a3;
        }
        else
        {
          if (v5 == 1125)
          {
            CoreML::NeuralNetworkSpecValidator::validateExpandDimsLayer(this, (uint64_t **)a3);
            return;
          }
          if (v5 == 1130)
          {
            CoreML::NeuralNetworkSpecValidator::validateFlattenTo2DLayer(this, (uint64_t **)a3);
            return;
          }
          if (v5 != 1135) {
            goto LABEL_580;
          }
          uint64_t v6 = (const CoreML::Specification::NeuralNetworkLayer *)a3;
        }
      }
      else
      {
        if (v5 <= 1089)
        {
          if (v5 != 1080)
          {
            if (v5 == 1085)
            {
              CoreML::NeuralNetworkSpecValidator::validateFillStaticLayer(this, (uint64_t **)a3);
              return;
            }
            goto LABEL_580;
          }
          uint64_t v7 = (const CoreML::Specification::NeuralNetworkLayer *)a3;
          goto LABEL_66;
        }
        if (v5 == 1090)
        {
          uint64_t v7 = (const CoreML::Specification::NeuralNetworkLayer *)a3;
          goto LABEL_66;
        }
        if (v5 != 1100)
        {
          if (v5 == 1105)
          {
            CoreML::NeuralNetworkSpecValidator::validateBroadcastToStaticLayer(this, (uint64_t **)a3);
            return;
          }
          goto LABEL_580;
        }
        uint64_t v6 = (const CoreML::Specification::NeuralNetworkLayer *)a3;
      }
LABEL_23:
      CoreML::NeuralNetworkSpecValidator::validateReshapeLikeLayer(this, v6);
      return;
    }
    if (v5 <= 1274)
    {
      if (v5 <= 1199)
      {
        if (v5 > 1169)
        {
          if (v5 <= 1179)
          {
            if (v5 != 1170)
            {
              if (v5 == 1175)
              {
                CoreML::NeuralNetworkSpecValidator::validateRandomNormalStaticLayer(this, (uint64_t **)a3);
                return;
              }
              goto LABEL_580;
            }
            uint64_t v7 = (const CoreML::Specification::NeuralNetworkLayer *)a3;
          }
          else
          {
            if (v5 != 1180)
            {
              if (v5 == 1190)
              {
                CoreML::NeuralNetworkSpecValidator::validateRandomUniformLikeLayer(this, (uint64_t **)a3);
                return;
              }
              if (v5 == 1195)
              {
                CoreML::NeuralNetworkSpecValidator::validateRandomUniformStaticLayer(this, (uint64_t **)a3);
                return;
              }
              goto LABEL_580;
            }
            uint64_t v7 = (const CoreML::Specification::NeuralNetworkLayer *)a3;
          }
          goto LABEL_66;
        }
        if (v5 > 1149)
        {
          if (v5 == 1150)
          {
            CoreML::NeuralNetworkSpecValidator::validateRankPreservingReshapeLayer(this, (uint64_t **)a3);
            return;
          }
          if (v5 == 1155)
          {
            CoreML::NeuralNetworkSpecValidator::validateConstantPadLayer(this, a2, a3);
            return;
          }
          goto LABEL_580;
        }
        if (v5 == 1140)
        {
          CoreML::NeuralNetworkSpecValidator::validateReshapeStaticLayer(this, (uint64_t **)a3);
          return;
        }
        if (v5 != 1145) {
          goto LABEL_580;
        }
        uint64_t v6 = (const CoreML::Specification::NeuralNetworkLayer *)a3;
        goto LABEL_23;
      }
      if (v5 <= 1249)
      {
        if (v5 <= 1214)
        {
          if (v5 == 1200)
          {
            CoreML::NeuralNetworkSpecValidator::validateRandomUniformDynamicLayer(this, (uint64_t **)a3);
            return;
          }
          if (v5 == 1210)
          {
            CoreML::NeuralNetworkSpecValidator::validateRandomBernoulliLikeLayer(this, (uint64_t **)a3);
            return;
          }
          goto LABEL_580;
        }
        if (v5 == 1215)
        {
          CoreML::NeuralNetworkSpecValidator::validateRandomBernoulliStaticLayer(this, (uint64_t **)a3);
          return;
        }
        if (v5 == 1220)
        {
          CoreML::NeuralNetworkSpecValidator::validateRandomBernoulliDynamicLayer(this, (uint64_t **)a3);
          return;
        }
        if (v5 != 1230) {
          goto LABEL_580;
        }
        uint64_t v7 = (const CoreML::Specification::NeuralNetworkLayer *)a3;
        goto LABEL_66;
      }
      if (v5 <= 1259)
      {
        if (v5 != 1250 && v5 != 1255) {
          goto LABEL_580;
        }
      }
      else if (v5 != 1260 && v5 != 1265 && v5 != 1270)
      {
        goto LABEL_580;
      }
    }
    else
    {
      if (v5 > 1349)
      {
        if (v5 > 1454)
        {
          switch(v5)
          {
            case 1455:
              uint64_t v9 = (const CoreML::Specification::NeuralNetworkLayer *)a3;
              goto LABEL_92;
            case 1460:
              goto LABEL_577;
            case 1461:
              CoreML::NeuralNetworkSpecValidator::validateArgsortLayer(this, a2, a3);
              break;
            case 1465:
              CoreML::NeuralNetworkSpecValidator::validatePooling3dLayer(this, a2, a3);
              break;
            case 1466:
              CoreML::NeuralNetworkSpecValidator::validateGlobalPooling3dLayer(this, a2, (const CoreML::Specification::NeuralNetworkLayer *)a3);
              break;
            case 1470:
              uint64_t v6 = (const CoreML::Specification::NeuralNetworkLayer *)a3;
              goto LABEL_23;
            case 1471:
              CoreML::NeuralNetworkSpecValidator::validateConvolution3DLayer(this, a2, a3);
              break;
            default:
              goto LABEL_580;
          }
          return;
        }
        if (v5 == 1350)
        {
          CoreML::NeuralNetworkSpecValidator::validateLayerNormalizationLayer(this, (const CoreML::Specification::NeuralNetworkLayer *)a3);
          return;
        }
        if (v5 == 1400)
        {
          CoreML::NeuralNetworkSpecValidator::validateNMSLayer(this, (const CoreML::Specification::NeuralNetworkLayer *)a3);
          return;
        }
        if (v5 != 1450) {
          goto LABEL_580;
        }
        uint64_t v9 = (const CoreML::Specification::NeuralNetworkLayer *)a3;
        goto LABEL_92;
      }
      if (v5 > 1312)
      {
        if (v5 <= 1319)
        {
          if (v5 == 1313)
          {
            uint64_t v7 = (const CoreML::Specification::NeuralNetworkLayer *)a3;
          }
          else
          {
            if (v5 != 1315) {
              goto LABEL_580;
            }
            uint64_t v7 = (const CoreML::Specification::NeuralNetworkLayer *)a3;
          }
        }
        else
        {
          switch(v5)
          {
            case 1320:
              uint64_t v7 = (const CoreML::Specification::NeuralNetworkLayer *)a3;
              break;
            case 1325:
              uint64_t v7 = (const CoreML::Specification::NeuralNetworkLayer *)a3;
              break;
            case 1330:
              uint64_t v8 = (const CoreML::Specification::NeuralNetworkLayer *)a3;
LABEL_87:
              CoreML::NeuralNetworkSpecValidator::validateWhereLayer(this, v8);
              return;
            default:
              goto LABEL_580;
          }
        }
        goto LABEL_66;
      }
      if (v5 <= 1284)
      {
        if (v5 != 1275 && v5 != 1280) {
          goto LABEL_580;
        }
      }
      else if (v5 != 1285 && v5 != 1290 && v5 != 1295)
      {
        goto LABEL_580;
      }
    }
    CoreML::NeuralNetworkSpecValidator::validateReductionTypeLayer(this, (const CoreML::Specification::NeuralNetworkLayer *)a3);
    return;
  }
  if (v5 > 604)
  {
    if (v5 > 749)
    {
      if (v5 > 864)
      {
        switch(v5)
        {
          case 865:
            uint64_t v6 = (const CoreML::Specification::NeuralNetworkLayer *)a3;
            break;
          case 870:
            uint64_t v6 = (const CoreML::Specification::NeuralNetworkLayer *)a3;
            break;
          case 875:
            uint64_t v6 = (const CoreML::Specification::NeuralNetworkLayer *)a3;
            break;
          default:
            goto LABEL_580;
        }
        goto LABEL_23;
      }
      if ((v5 - 795) > 0x3C) {
        goto LABEL_563;
      }
      if (((1 << (v5 - 27)) & 0x1084202942100000) != 0)
      {
        if (v5 <= 849)
        {
          if (v5 != 840 && v5 != 845) {
            goto LABEL_337;
          }
LABEL_338:
          int v12 = (const CoreML::Specification::NeuralNetworkLayer *)a3;
          int v13 = 2;
          goto LABEL_339;
        }
        if (v5 == 855) {
          goto LABEL_338;
        }
        if (v5 != 850)
        {
LABEL_337:
          int v12 = (const CoreML::Specification::NeuralNetworkLayer *)a3;
          int v13 = 1;
LABEL_339:
          int v14 = 2;
          goto LABEL_566;
        }
LABEL_565:
        int v12 = (const CoreML::Specification::NeuralNetworkLayer *)a3;
        int v13 = 1;
        int v14 = 1;
LABEL_566:
        CoreML::validateInputCount((CoreML *)this, v12, v13, v14);
        if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
        {
          if (*((char *)this + 31) < 0) {
            operator delete(this[1]);
          }
          CoreML::validateOutputCount((CoreML *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3, 1, 1);
          if ((*(_DWORD *)this & 0xFFFFFFEF) == 0)
          {
            if (*((char *)this + 31) < 0) {
              operator delete(this[1]);
            }
            CoreML::Result::Result((CoreML::Result *)this);
          }
        }
        return;
      }
      if (v5 != 795)
      {
LABEL_563:
        uint64_t v15 = (v5 - 750);
        if (v15 > 0x28) {
          goto LABEL_580;
        }
        if (((1 << v15) & 0x42100421) != 0) {
          goto LABEL_565;
        }
        if (v15 != 40) {
          goto LABEL_580;
        }
      }
LABEL_577:
      uint64_t v7 = (const CoreML::Specification::NeuralNetworkLayer *)a3;
      goto LABEL_66;
    }
    if (v5 > 669)
    {
      uint64_t v10 = (v5 - 685);
      if (v10 > 0x37) {
        goto LABEL_340;
      }
      if (((1 << (v5 + 83)) & 0x84200842000000) != 0) {
        goto LABEL_565;
      }
      if (v5 == 685)
      {
        uint64_t v7 = (const CoreML::Specification::NeuralNetworkLayer *)a3;
        goto LABEL_66;
      }
      if (v10 == 15)
      {
        uint64_t v7 = (const CoreML::Specification::NeuralNetworkLayer *)a3;
      }
      else
      {
LABEL_340:
        if (v5 == 670)
        {
          uint64_t v7 = (const CoreML::Specification::NeuralNetworkLayer *)a3;
        }
        else
        {
          if (v5 != 680) {
            goto LABEL_580;
          }
          uint64_t v7 = (const CoreML::Specification::NeuralNetworkLayer *)a3;
        }
      }
LABEL_66:
      CoreML::NeuralNetworkSpecValidator::validateFillLikeLayer(this, v7);
      return;
    }
    if (v5 <= 634)
    {
      if (v5 > 619)
      {
        if (v5 == 620 || v5 == 625)
        {
          CoreML::NeuralNetworkSpecValidator::validateLoopContinueBreakLayer(this, a2, a3);
          return;
        }
      }
      else
      {
        if (v5 == 605)
        {
          CoreML::NeuralNetworkSpecValidator::validateBranchLayer(this, a2, a3);
          return;
        }
        if (v5 == 615)
        {
          CoreML::NeuralNetworkSpecValidator::validateLoopLayer(this, a2, a3);
          return;
        }
      }
      goto LABEL_580;
    }
    if (v5 <= 659)
    {
      if (v5 == 635)
      {
        CoreML::NeuralNetworkSpecValidator::validateRangeStaticLayer(this, (const CoreML::Specification::NeuralNetworkLayer *)a3);
        return;
      }
      if (v5 == 640)
      {
        CoreML::NeuralNetworkSpecValidator::validateRangeDynamicLayer(this, (const CoreML::Specification::NeuralNetworkLayer *)a3);
        return;
      }
      goto LABEL_580;
    }
    if (v5 == 660)
    {
      CoreML::NeuralNetworkSpecValidator::validateClipLayer(this, (uint64_t **)a3);
      return;
    }
    if (v5 == 665)
    {
      uint64_t v7 = (const CoreML::Specification::NeuralNetworkLayer *)a3;
      goto LABEL_66;
    }
LABEL_580:
    CoreML::NeuralNetworkSpecValidator::validateFailUnknownType((CoreML::NeuralNetworkSpecValidator *)this, (const CoreML::Specification::NeuralNetworkLayer *)a3);
    return;
  }
  if (v5 > 249)
  {
    if (v5 > 329)
    {
      if (v5 > 409)
      {
        if (v5 <= 429)
        {
          if (v5 == 410)
          {
            CoreML::NeuralNetworkSpecValidator::validateGRULayer(this, a2, a3);
            return;
          }
          if (v5 == 420)
          {
            CoreML::NeuralNetworkSpecValidator::validateUniDirectionalLSTMLayer(this, a2, a3);
            return;
          }
        }
        else
        {
          switch(v5)
          {
            case 430:
              CoreML::NeuralNetworkSpecValidator::validateBiDirectionalLSTMLayer(this, a2, a3);
              return;
            case 500:
              CoreML::NeuralNetworkSpecValidator::validateCustomLayer(this, (const CoreML::Specification::NeuralNetworkLayer *)a3);
              return;
            case 600:
              CoreML::NeuralNetworkSpecValidator::validateCopyLayer(this, (const CoreML::Specification::NeuralNetworkLayer *)a3);
              return;
          }
        }
      }
      else if (v5 <= 344)
      {
        if (v5 == 330)
        {
          CoreML::NeuralNetworkSpecValidator::validateSplitLayer(this, a2, a3);
          return;
        }
        if (v5 == 340)
        {
          CoreML::NeuralNetworkSpecValidator::validateSequenceRepeatLayer(this, a2, (const CoreML::Specification::NeuralNetworkLayer *)a3);
          return;
        }
      }
      else
      {
        switch(v5)
        {
          case 345:
            CoreML::NeuralNetworkSpecValidator::validateReorganizeDataLayer(this, a2, a3);
            return;
          case 350:
            CoreML::NeuralNetworkSpecValidator::validateSliceLayer(this, a2, a3);
            return;
          case 400:
            CoreML::NeuralNetworkSpecValidator::validateSimpleRecurrentLayer(this, a2, a3);
            return;
        }
      }
    }
    else if (v5 > 289)
    {
      if (v5 <= 300)
      {
        if (v5 == 290)
        {
          CoreML::NeuralNetworkSpecValidator::validateLoadConstantLayer(this, a2, a3);
          return;
        }
        if (v5 == 300)
        {
          CoreML::NeuralNetworkSpecValidator::validateReshapeLayer(this, a2, a3);
          return;
        }
      }
      else
      {
        switch(v5)
        {
          case 301:
            CoreML::NeuralNetworkSpecValidator::validateFlattenLayer(this, a2, (const CoreML::Specification::NeuralNetworkLayer *)a3);
            return;
          case 310:
            CoreML::NeuralNetworkSpecValidator::validatePermuteLayer(this, a2, a3);
            return;
          case 320:
            CoreML::NeuralNetworkSpecValidator::validateConcatLayer(this, a2, a3);
            return;
        }
      }
    }
    else if (v5 <= 260)
    {
      if (v5 == 250)
      {
        CoreML::NeuralNetworkSpecValidator::validateBiasLayer(this, a2, a3);
        return;
      }
      if (v5 == 260)
      {
        uint64_t v11 = (const CoreML::Specification::NeuralNetworkLayer *)a3;
        goto LABEL_249;
      }
    }
    else
    {
      switch(v5)
      {
        case 261:
          uint64_t v11 = (const CoreML::Specification::NeuralNetworkLayer *)a3;
          goto LABEL_249;
        case 270:
          CoreML::NeuralNetworkSpecValidator::validateDotLayer(this, a2, (const CoreML::Specification::NeuralNetworkLayer *)a3);
          return;
        case 280:
          CoreML::NeuralNetworkSpecValidator::validateReduceLayer(this, a2, a3);
          return;
      }
    }
    goto LABEL_580;
  }
  if (v5 > 189)
  {
    if (v5 <= 219)
    {
      if (v5 <= 209)
      {
        if (v5 == 190)
        {
          CoreML::NeuralNetworkSpecValidator::validateCropLayer(this, a2, a3);
          return;
        }
        if (v5 == 200)
        {
          CoreML::NeuralNetworkSpecValidator::validatePaddingLayer(this, a2, a3);
          return;
        }
      }
      else
      {
        switch(v5)
        {
          case 210:
            CoreML::NeuralNetworkSpecValidator::validateUpsampleLayer(this, a2, a3);
            return;
          case 211:
            CoreML::NeuralNetworkSpecValidator::validateResizeBilinearLayer(this, a2, a3);
            return;
          case 212:
            CoreML::NeuralNetworkSpecValidator::validateCropResizeLayer(this, a2, a3);
            return;
        }
      }
      goto LABEL_580;
    }
    if (v5 > 230)
    {
      switch(v5)
      {
        case 231:
          uint64_t v11 = (const CoreML::Specification::NeuralNetworkLayer *)a3;
          break;
        case 240:
          uint64_t v11 = (const CoreML::Specification::NeuralNetworkLayer *)a3;
          break;
        case 245:
          CoreML::NeuralNetworkSpecValidator::validateScaleLayer(this, a2, a3);
          return;
        default:
          goto LABEL_580;
      }
LABEL_249:
      CoreML::NeuralNetworkSpecValidator::validateAddLayer(this, v11);
      return;
    }
    if (v5 == 220)
    {
      CoreML::NeuralNetworkSpecValidator::validateUnaryFunctionLayer(this, a2, (const CoreML::Specification::NeuralNetworkLayer *)a3);
      return;
    }
    if (v5 == 230)
    {
      uint64_t v11 = (const CoreML::Specification::NeuralNetworkLayer *)a3;
      goto LABEL_249;
    }
    goto LABEL_580;
  }
  if (v5 > 159)
  {
    if (v5 <= 169)
    {
      if (v5 == 160)
      {
        CoreML::NeuralNetworkSpecValidator::validateBatchnormLayer(this, a2, a3);
        return;
      }
      if (v5 == 165)
      {
        CoreML::NeuralNetworkSpecValidator::validateMvnLayer(this, a2, (const CoreML::Specification::NeuralNetworkLayer *)a3);
        return;
      }
    }
    else
    {
      switch(v5)
      {
        case 170:
          CoreML::NeuralNetworkSpecValidator::validateL2NormLayer(this, a2, (const CoreML::Specification::NeuralNetworkLayer *)a3);
          return;
        case 175:
          CoreML::NeuralNetworkSpecValidator::validateSoftmaxLayer(this, a2, (const CoreML::Specification::NeuralNetworkLayer *)a3);
          return;
        case 180:
          CoreML::NeuralNetworkSpecValidator::validateLRNLayer(this, a2, a3);
          return;
      }
    }
    goto LABEL_580;
  }
  if (v5 <= 129)
  {
    if (v5 == 100)
    {
      CoreML::NeuralNetworkSpecValidator::validateConvolutionLayer(this, a2, a3);
      return;
    }
    if (v5 == 120)
    {
      CoreML::NeuralNetworkSpecValidator::validatePoolingLayer(this, a2, a3);
      return;
    }
    goto LABEL_580;
  }
  switch(v5)
  {
    case 130:
      CoreML::NeuralNetworkSpecValidator::validateActivation(this, a2, a3);
      break;
    case 140:
      CoreML::NeuralNetworkSpecValidator::validateInnerProductLayer(this, a2, a3);
      break;
    case 150:
      CoreML::NeuralNetworkSpecValidator::validateEmbeddingLayer(this, a2, a3);
      return;
    default:
      goto LABEL_580;
  }
}

void CoreML::validate<(MLModelType)403>(unint64_t *inited, uint64_t a2)
{
  uint64_t v3 = inited;
  v132[3] = *(void **)MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a2 + 44) == 403)
  {
    uint64_t v4 = *(uint64_t **)(a2 + 32);
  }
  else
  {
    unint64_t inited = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)inited);
    uint64_t v4 = &CoreML::Specification::_NeuralNetworkClassifier_default_instance_;
  }
  int v5 = *((_DWORD *)v4 + 25);
  if (!v5)
  {
    std::string::basic_string[abi:ne180100]<0>(&v129, "Classifier models must provide class labels.");
    std::string::size_type v117 = 13;
    uint64_t v6 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)std::operator+<char>();
    goto LABEL_24;
  }
  if (v5 == 100)
  {
    if (!*(_DWORD *)(v4[11] + 24))
    {
      std::string::basic_string[abi:ne180100]<0>(&v129, "Classifier declared to have String class labels must provide labels.");
      std::string::size_type v117 = 13;
      uint64_t v6 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)std::operator+<char>();
      goto LABEL_24;
    }
    CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults((CoreML::Specification::protobuf_DataStructures_2eproto *)inited);
    if (qword_1EB4DE438)
    {
      std::string::basic_string[abi:ne180100]<0>(&v129, "Classifier declared with String class labels must provide exclusively String class labels.");
      std::string::size_type v117 = 13;
      uint64_t v6 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)std::operator+<char>();
      goto LABEL_24;
    }
LABEL_13:
    int v7 = 0;
    goto LABEL_14;
  }
  if (v5 != 101) {
    goto LABEL_13;
  }
  if (!*(_DWORD *)(v4[11] + 16))
  {
    std::string::basic_string[abi:ne180100]<0>(&v129, "Classifier declared to have Int64 class labels must provide labels.");
    std::string::size_type v117 = 13;
    uint64_t v6 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)std::operator+<char>();
LABEL_24:
    if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::size_type size = (void *)v129.__r_.__value_.__r.__words[0];
      goto LABEL_26;
    }
    goto LABEL_27;
  }
  CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults((CoreML::Specification::protobuf_DataStructures_2eproto *)inited);
  if (dword_1EB4E2310)
  {
    std::string::basic_string[abi:ne180100]<0>(&v129, "Classifier declared with Int64 class labels must provide exclusively Int64 class labels.");
    std::string::size_type v117 = 13;
    uint64_t v6 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)std::operator+<char>();
    goto LABEL_24;
  }
  int v7 = 1;
LABEL_14:
  if (*(void *)(a2 + 16)) {
    uint64_t v8 = *(const CoreML::Specification::ModelDescription **)(a2 + 16);
  }
  else {
    uint64_t v8 = (const CoreML::Specification::ModelDescription *)&CoreML::Specification::_ModelDescription_default_instance_;
  }
  CoreML::validateFeatureDescriptions<CoreML::Specification::ModelDescription>((void **)&v129.__r_.__value_.__l.__data_, (uint64_t)v8, *(_DWORD *)(a2 + 24), 1, 0);
  if (((uint64_t)v129.__r_.__value_.__l.__data_ & 0xFFFFFFEF) != 0)
  {
    std::string::size_type v117 = v129.__r_.__value_.__r.__words[0];
    *(_OWORD *)std::string __p = *(_OWORD *)&v129.__r_.__value_.__r.__words[1];
    std::string::size_type v119 = v130.__r_.__value_.__r.__words[0];
  }
  else
  {
    CoreML::validateClassifierFeatureDescriptions((void **)&v117, v8, v7);
    if (v130.__r_.__value_.__s.__data_[7] < 0)
    {
      std::string::size_type size = (void *)v129.__r_.__value_.__l.__size_;
LABEL_26:
      operator delete(size);
    }
  }
LABEL_27:
  if ((v117 & 0xFFFFFFEF) != 0)
  {
    unint64_t *v3 = v117;
    *(_OWORD *)(v3 + 1) = *(_OWORD *)__p;
    v3[3] = v119;
    return;
  }
  v116[0] = 0;
  v116[1] = 0;
  long long v115 = v116;
  if (*(void *)(a2 + 16)) {
    uint64_t v10 = *(uint64_t **)(a2 + 16);
  }
  else {
    uint64_t v10 = &CoreML::Specification::_ModelDescription_default_instance_;
  }
  if (*(_DWORD *)(a2 + 44) == 403)
  {
    uint64_t v11 = *(uint64_t **)(a2 + 32);
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    uint64_t v11 = &CoreML::Specification::_NeuralNetworkClassifier_default_instance_;
  }
  int v12 = *(unsigned __int8 *)(a2 + 28);
  CoreML::Result::Result((CoreML::Result *)&v127);
  uint64_t v13 = v10[4];
  if (v13) {
    int v14 = (uint64_t *)(v13 + 8);
  }
  else {
    int v14 = 0;
  }
  uint64_t v15 = *((int *)v10 + 6);
  int v111 = v12;
  if (v15)
  {
    uint64_t v16 = 8 * v15 - 8;
    do
    {
      uint64_t v17 = *v14++;
      uint64_t v18 = *(uint64_t **)(v17 + 32);
      if (!v18) {
        uint64_t v18 = &CoreML::Specification::_FeatureType_default_instance_;
      }
      int v19 = *((_DWORD *)v18 + 9);
      BOOL v20 = v19 != 5;
      BOOL v21 = v19 == 5 || v16 == 0;
      v16 -= 8;
    }
    while (!v21);
  }
  else
  {
    BOOL v20 = 1;
  }
  int v22 = *((_DWORD *)v11 + 20);
  int v23 = *((_DWORD *)v11 + 21);
  uint64_t v24 = v11[4];
  if (v24) {
    std::string::size_type v25 = (uint64_t *)(v24 + 8);
  }
  else {
    std::string::size_type v25 = 0;
  }
  uint64_t v26 = *((int *)v11 + 6);
  if (v26)
  {
    uint64_t v27 = 8 * v26;
    while ((CoreML::isIOS12NeuralNetworkLayer(*v25) & 1) != 0)
    {
      ++v25;
      v27 -= 8;
      if (!v27) {
        goto LABEL_56;
      }
    }
    if (v22) {
      char v37 = 1;
    }
    else {
      char v37 = v20;
    }
    if ((v37 & 1) == 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&v129, "Neural Network Multi-Array input shape mapping cannot be 'RANK5_ARRAY_MAPPING' if the network contains a layer added in version 4 (iOS 13) or later. Use 'EXACT_ARRAY_MAPPING' instead.");
      std::string::size_type v112 = 12;
      uint64_t v36 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)std::operator+<char>();
      goto LABEL_87;
    }
    BOOL v28 = 1;
  }
  else
  {
LABEL_56:
    BOOL v28 = (v22 | v23) != 0;
  }
  if (v22) {
    BOOL v29 = 1;
  }
  else {
    BOOL v29 = v23 == 0;
  }
  char v30 = v29 || v20;
  if ((v30 & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v129, "Neural Network Multi-Array input shape mapping cannot be 'RANK5_ARRAY_MAPPING' if the image input Shape mapping is not 'RANK5_IMAGE_MAPPING'");
    std::string::size_type v112 = 12;
    uint64_t v36 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)std::operator+<char>();
    goto LABEL_87;
  }
  if (!*((_DWORD *)v10 + 12))
  {
    std::string::basic_string[abi:ne180100]<0>(&v129, "Neural networks produce at least one output.");
    std::string::size_type v112 = 12;
    uint64_t v36 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)std::operator+<char>();
    goto LABEL_87;
  }
  if (!*((_DWORD *)v11 + 6))
  {
    std::string::basic_string[abi:ne180100]<0>(&v129, "Neural networks require at least one layer.");
    std::string::size_type v112 = 13;
    uint64_t v36 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)std::operator+<char>();
    goto LABEL_87;
  }
  uint64_t v31 = *((unsigned int *)v10 + 6);
  if ((int)v31 >= 1)
  {
    uint64_t v32 = v10[4];
    if (v32) {
      uint64_t v33 = v32 + 8;
    }
    else {
      uint64_t v33 = 0;
    }
    uint64_t v34 = 8 * v31;
    do
    {
      uint64_t v35 = *(uint64_t **)(*(void *)v33 + 32);
      if (!v35) {
        uint64_t v35 = &CoreML::Specification::_FeatureType_default_instance_;
      }
      if (*((_DWORD *)v35 + 9) != 8 && !*((unsigned char *)v35 + 16)) {
        goto LABEL_147;
      }
      v33 += 8;
      v34 -= 8;
    }
    while (v34);
    std::string::basic_string[abi:ne180100]<0>(&v129, "Neural networks require at least one non-optional input.");
    std::string::size_type v112 = 12;
    uint64_t v36 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)std::operator+<char>();
LABEL_87:
    if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v129.__r_.__value_.__l.__data_);
    }
    goto LABEL_89;
  }
LABEL_147:
  std::string::basic_string[abi:ne180100]<0>(&v129, "inputs");
  CoreML::validateInputOutputTypes((CoreML::Result *)&v112, *((_DWORD *)v10 + 6), v10[4], 1);
  if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v129.__r_.__value_.__l.__data_);
  }
  if ((v112 & 0xFFFFFFEF) != 0) {
    goto LABEL_89;
  }
  if (SHIBYTE(v114) < 0) {
    operator delete(v113[0]);
  }
  v126[0] = 0;
  v126[1] = 0;
  uint64_t v125 = v126;
  if (v28)
  {
    uint64_t v65 = v10[4];
    if (v65) {
      uint64_t v66 = v65 + 8;
    }
    else {
      uint64_t v66 = 0;
    }
    uint64_t v67 = *((int *)v10 + 6);
    if (v67)
    {
      uint64_t v68 = 8 * v67;
      while (1)
      {
        uint64_t v69 = *(void *)v66;
        uint64_t v70 = *(uint64_t **)(*(void *)v66 + 32);
        if (!v70) {
          uint64_t v70 = &CoreML::Specification::_FeatureType_default_instance_;
        }
        int v71 = *((_DWORD *)v70 + 9);
        if (v71 == 4) {
          break;
        }
        if (v71 == 5)
        {
          if (!*((_DWORD *)v11 + 20))
          {
            v129.__r_.__value_.__r.__words[0] = *(void *)(v69 + 16);
            unsigned __int8 v74 = std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v125, v129.__r_.__value_.__l.__data_, (long long **)&v129);
            goto LABEL_168;
          }
          int v72 = *(_DWORD *)(v70[3] + 16);
          v129.__r_.__value_.__r.__words[0] = *(void *)(v69 + 16);
          *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v125, v129.__r_.__value_.__l.__data_, (long long **)&v129)+ 14) = v72;
        }
LABEL_170:
        v66 += 8;
        v68 -= 8;
        if (!v68) {
          goto LABEL_171;
        }
      }
      long long v73 = *(void **)(v69 + 16);
      if (*((_DWORD *)v11 + 21))
      {
        v129.__r_.__value_.__r.__words[0] = *(void *)(v69 + 16);
        unsigned __int8 v74 = std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v125, v73, (long long **)&v129);
        int v75 = 4;
      }
      else
      {
        v129.__r_.__value_.__r.__words[0] = *(void *)(v69 + 16);
        unsigned __int8 v74 = std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v125, v73, (long long **)&v129);
LABEL_168:
        int v75 = 5;
      }
      *((_DWORD *)v74 + 14) = v75;
      goto LABEL_170;
    }
LABEL_171:
    uint64_t v76 = v10[7];
    if (v76) {
      uint64_t v77 = v76 + 8;
    }
    else {
      uint64_t v77 = 0;
    }
    uint64_t v78 = *((int *)v10 + 12);
    if (v78)
    {
      uint64_t v79 = 8 * v78;
      do
      {
        char v80 = *(uint64_t **)(*(void *)v77 + 32);
        if (!v80) {
          char v80 = &CoreML::Specification::_FeatureType_default_instance_;
        }
        if (*((_DWORD *)v80 + 9) == 5)
        {
          int v81 = *(_DWORD *)(v80[3] + 16);
          if (v81)
          {
            v129.__r_.__value_.__r.__words[0] = *(void *)(*(void *)v77 + 16);
            *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v125, v129.__r_.__value_.__l.__data_, (long long **)&v129)+ 14) = v81;
          }
        }
        v77 += 8;
        v79 -= 8;
      }
      while (v79);
    }
  }
  v124[0] = 0;
  v124[1] = 0;
  uint64_t v123 = (uint64_t *)v124;
  uint64_t v82 = v10[4];
  if (v82) {
    __int32 v83 = (uint64_t *)(v82 + 8);
  }
  else {
    __int32 v83 = 0;
  }
  uint64_t v84 = *((int *)v10 + 6);
  if (!v84)
  {
LABEL_219:
    CoreML::NeuralNetworkSpecValidator::NeuralNetworkSpecValidator((uint64_t)&v129, &v123, (uint64_t **)&v125, v28, 0, (uint64_t **)&v125);
    CoreML::NeuralNetworkSpecValidator::validateNeuralNetwork<CoreML::Specification::NeuralNetworkClassifier>((uint64_t)v120, (CoreML::Specification::NeuralNetworkLayer *)&v129, (uint64_t)v11);
    int data = *(_DWORD *)v120;
    v127.__r_.__value_.__r.__words[0] = *(void *)v120;
    if (SHIBYTE(v128) < 0)
    {
      operator delete((void *)v127.__r_.__value_.__l.__size_);
      int data = (int)v127.__r_.__value_.__l.__data_;
    }
    *(_OWORD *)&v127.__r_.__value_.__r.__words[1] = *(_OWORD *)&v120[8];
    std::string::size_type v128 = v121;
    if ((data & 0xFFFFFFEF) == 0)
    {
      uint64_t v102 = v131;
      if (v131 != v132)
      {
        do
        {
          if (v124 == std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>((uint64_t)&v123, v102 + 4)|| v102[9] >= 2uLL)
          {
            std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v115, v102 + 4, (uint64_t)(v102 + 4));
          }
          int v103 = (void *)v102[1];
          if (v103)
          {
            do
            {
              int v104 = (void **)v103;
              int v103 = (void *)*v103;
            }
            while (v103);
          }
          else
          {
            do
            {
              int v104 = (void **)v102[2];
              BOOL v21 = *v104 == v102;
              uint64_t v102 = v104;
            }
            while (!v21);
          }
          uint64_t v102 = v104;
        }
        while (v104 != v132);
      }
      if (!v28)
      {
        CoreML::NeuralNetworkShaper::NeuralNetworkShaper(v120, (uint64_t)v10, (uint64_t)(v11 + 2));
        std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::destroy(v122);
        std::__tree<std::__value_type<std::string,std::set<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<int>>>>::destroy(*(void **)&v120[16]);
      }
      if (((uint64_t)v127.__r_.__value_.__l.__data_ & 0xFFFFFFEF) == 0 && v111 != 0)
      {
        validateUpdatableNeuralNetwork<CoreML::Specification::NeuralNetworkClassifier>((void **)v120, (uint64_t)v11);
        int v106 = *(_DWORD *)v120;
        v127.__r_.__value_.__r.__words[0] = *(void *)v120;
        if (SHIBYTE(v128) < 0)
        {
          operator delete((void *)v127.__r_.__value_.__l.__size_);
          int v106 = (int)v127.__r_.__value_.__l.__data_;
        }
        *(_OWORD *)&v127.__r_.__value_.__r.__words[1] = *(_OWORD *)&v120[8];
        std::string::size_type v128 = v121;
        if ((v106 & 0xFFFFFFEF) == 0)
        {
          validateTrainingInputs<CoreML::Specification::NeuralNetworkClassifier>((CoreML::Result *)v120, (uint64_t)v10, (uint64_t)v11);
          v127.__r_.__value_.__r.__words[0] = *(void *)v120;
          if (SHIBYTE(v128) < 0) {
            operator delete((void *)v127.__r_.__value_.__l.__size_);
          }
          *(_OWORD *)&v127.__r_.__value_.__r.__words[1] = *(_OWORD *)&v120[8];
          std::string::size_type v128 = v121;
        }
      }
    }
    std::string::size_type v112 = v127.__r_.__value_.__r.__words[0];
    *(_OWORD *)long long v113 = *(_OWORD *)&v127.__r_.__value_.__r.__words[1];
    std::string::size_type v114 = v128;
    *(_OWORD *)&v127.__r_.__value_.__r.__words[1] = 0uLL;
    std::string::size_type v128 = 0;
    std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(v132[0]);
    std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy((char *)v130.__r_.__value_.__r.__words[2]);
    std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy((char *)v129.__r_.__value_.__r.__words[2]);
    goto LABEL_245;
  }
  std::string v85 = &v83[v84];
  while (1)
  {
    uint64_t v86 = *v83;
    std::string::basic_string[abi:ne180100]<0>(&v129, "__input");
    long long v87 = std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v123, *(void **)(v86 + 16), *(void *)(v86 + 16));
    std::__tree<std::string>::__assign_unique<std::string const*>((uint64_t **)v87 + 7, &v129, &v130);
    if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v129.__r_.__value_.__l.__data_);
    }
    long long v88 = *(uint64_t **)(v86 + 32);
    if (!v88) {
      long long v88 = &CoreML::Specification::_FeatureType_default_instance_;
    }
    if (*((_DWORD *)v88 + 9) != 5) {
      goto LABEL_218;
    }
    if (v28)
    {
      CoreML::validateNdMultiArrayInputType((CoreML *)&v129, (const CoreML::Specification::ArrayFeatureType *)v88[3]);
      int v89 = (int)v129.__r_.__value_.__l.__data_;
      v127.__r_.__value_.__r.__words[0] = v129.__r_.__value_.__r.__words[0];
      if (SHIBYTE(v128) < 0)
      {
        operator delete((void *)v127.__r_.__value_.__l.__size_);
        int v89 = (int)v127.__r_.__value_.__l.__data_;
      }
      *(_OWORD *)&v127.__r_.__value_.__r.__words[1] = *(_OWORD *)&v129.__r_.__value_.__r.__words[1];
      std::string::size_type v128 = v130.__r_.__value_.__r.__words[0];
      if ((v89 & 0xFFFFFFEF) != 0)
      {
        std::string::size_type v112 = v127.__r_.__value_.__r.__words[0];
        *(_OWORD *)long long v113 = *(_OWORD *)&v127.__r_.__value_.__r.__words[1];
        std::string::size_type v114 = v128;
        *(_OWORD *)&v127.__r_.__value_.__r.__words[1] = 0uLL;
        std::string::size_type v128 = 0;
        goto LABEL_245;
      }
      goto LABEL_218;
    }
    uint64_t v90 = v88[3];
    int v91 = *(_DWORD *)(v90 + 16);
    if (v91 >= 1 && (v91 | 2) != 3) {
      break;
    }
    int v93 = *(_DWORD *)(v90 + 60);
    if (v93)
    {
      if (v93 == 31)
      {
        int v100 = *(_DWORD *)(*(void *)(v90 + 40) + 24);
        if (v100 == 1) {
          goto LABEL_218;
        }
        BOOL v99 = v100 == 3;
        goto LABEL_216;
      }
      if (v93 != 21) {
        goto LABEL_218;
      }
      uint64_t v94 = *(void *)(v90 + 40);
      uint64_t v95 = *(void *)(v94 + 32);
      uint64_t v96 = v95 ? v95 + 8 : 0;
      uint64_t v97 = *(int *)(v94 + 24);
      if (!v97) {
        goto LABEL_218;
      }
      uint64_t v98 = 8 * v97;
      while ((*(_DWORD *)(*(void *)v96 + 16) | 2) == 3)
      {
        v96 += 8;
        v98 -= 8;
        if (!v98) {
          goto LABEL_218;
        }
      }
    }
    BOOL v99 = 0;
LABEL_216:
    if (v91 <= 0 && !v99) {
      break;
    }
LABEL_218:
    if (++v83 == v85) {
      goto LABEL_219;
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v129, "Input MLMultiArray to neural networks must have dimension 1 (vector) or 3 (image-like arrays).");
  std::string::size_type v112 = 12;
  std::operator+<char>();
  if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v129.__r_.__value_.__l.__data_);
  }
LABEL_245:
  std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(v124[0]);
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(v126[0]);
LABEL_89:
  if (SHIBYTE(v128) < 0) {
    operator delete((void *)v127.__r_.__value_.__l.__size_);
  }
  int v38 = v112;
  std::string::size_type v117 = v112;
  if (SHIBYTE(v119) < 0)
  {
    operator delete(__p[0]);
    int v38 = v117;
  }
  *(_OWORD *)std::string __p = *(_OWORD *)v113;
  std::string::size_type v119 = v114;
  if ((v38 & 0xFFFFFFEF) != 0)
  {
    unint64_t *v3 = v117;
    *(_OWORD *)(v3 + 1) = *(_OWORD *)__p;
    v3[3] = v119;
    __p[0] = 0;
    __p[1] = 0;
    std::string::size_type v119 = 0;
    goto LABEL_255;
  }
  if (*(_DWORD *)(a2 + 44) == 403)
  {
    uint64_t v39 = *(uint64_t **)(a2 + 32);
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v36);
    uint64_t v39 = &CoreML::Specification::_NeuralNetworkClassifier_default_instance_;
  }
  uint64_t v40 = v39[8];
  if (*(char *)(v40 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v129, *(const std::string::value_type **)v40, *(void *)(v40 + 8));
  }
  else
  {
    long long v41 = *(_OWORD *)v40;
    v129.__r_.__value_.__r.__words[2] = *(void *)(v40 + 16);
    *(_OWORD *)&v129.__r_.__value_.__l.__data_ = v41;
  }
  std::string::size_type v42 = HIBYTE(v129.__r_.__value_.__r.__words[2]);
  if ((v129.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v42 = v129.__r_.__value_.__l.__size_;
  }
  if (v42
    && v116 == std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>((uint64_t)&v115, &v129))
  {
    std::operator+<char>();
    uint64_t v107 = std::string::append(&v127, "' which was not found in the network.");
    long long v108 = *(_OWORD *)&v107->__r_.__value_.__l.__data_;
    *(void *)&v120[16] = *((void *)&v107->__r_.__value_.__l + 2);
    *(_OWORD *)uint64_t v120 = v108;
    v107->__r_.__value_.__l.__size_ = 0;
    v107->__r_.__value_.__r.__words[2] = 0;
    v107->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v127.__r_.__value_.__l.__data_);
    }
    goto LABEL_251;
  }
  if (*(void *)(a2 + 16)) {
    long long v43 = *(uint64_t **)(a2 + 16);
  }
  else {
    long long v43 = &CoreML::Specification::_ModelDescription_default_instance_;
  }
  uint64_t v44 = v43[7];
  if (v44) {
    uint64_t v45 = v44 + 8;
  }
  else {
    uint64_t v45 = 0;
  }
  uint64_t v46 = *((int *)v43 + 12);
  if (v46)
  {
    uint64_t v47 = 8 * v46;
    while (1)
    {
      long long v48 = *(const void ***)(*(void *)v45 + 16);
      if (v116 == std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>((uint64_t)&v115, v48))
      {
        std::string::size_type v49 = (const void *)*((unsigned __int8 *)v48 + 23);
        std::string::size_type v50 = v49;
        int v51 = v48;
        if (*((char *)v48 + 23) < 0)
        {
          int v51 = *v48;
          std::string::size_type v50 = v48[1];
        }
        uint64_t v52 = v43[17];
        int v53 = *(char *)(v52 + 23);
        std::string v54 = v53 >= 0 ? (const void *)*(unsigned __int8 *)(v52 + 23) : *(const void **)(v52 + 8);
        uint64_t v55 = v53 >= 0 ? (const void *)v43[17] : *(const void **)v52;
        size_t v56 = (size_t)(v54 >= v50 ? v50 : v54);
        if (memcmp(v51, v55, v56) || v54 != v50)
        {
          uint64_t v58 = v48;
          if ((v49 & 0x80) != 0)
          {
            uint64_t v58 = *v48;
            std::string::size_type v49 = v48[1];
          }
          uint64_t v59 = v43[18];
          int v60 = *(char *)(v59 + 23);
          uint64_t v61 = v60 >= 0 ? (const void *)*(unsigned __int8 *)(v59 + 23) : *(const void **)(v59 + 8);
          long long v62 = v60 >= 0 ? (const void *)v43[18] : *(const void **)v59;
          size_t v63 = (size_t)(v61 >= v49 ? v49 : v61);
          if (memcmp(v58, v62, v63) || v61 != v49) {
            break;
          }
        }
      }
      v45 += 8;
      v47 -= 8;
      if (!v47) {
        goto LABEL_146;
      }
    }
    std::operator+<char>();
    long long v109 = std::string::append(&v127, "' is not produced by any layer of the neural network.");
    long long v110 = *(_OWORD *)&v109->__r_.__value_.__l.__data_;
    *(void *)&v120[16] = *((void *)&v109->__r_.__value_.__l + 2);
    *(_OWORD *)uint64_t v120 = v110;
    v109->__r_.__value_.__l.__size_ = 0;
    v109->__r_.__value_.__r.__words[2] = 0;
    v109->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v127.__r_.__value_.__l.__data_);
    }
LABEL_251:
    unint64_t *v3 = 13;
    std::operator+<char>();
    if ((v120[23] & 0x80000000) != 0) {
      operator delete(*(void **)v120);
    }
  }
  else
  {
LABEL_146:
    unint64_t *v3 = v117;
    *(_OWORD *)(v3 + 1) = *(_OWORD *)__p;
    v3[3] = v119;
    __p[0] = 0;
    __p[1] = 0;
    std::string::size_type v119 = 0;
  }
  if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v129.__r_.__value_.__l.__data_);
  }
LABEL_255:
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(v116[0]);
  if (SHIBYTE(v119) < 0) {
    operator delete(__p[0]);
  }
}

void sub_19EB091C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,char *a22,std::string *a23,void *a24,void *__pa,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43)
{
  if (*(char *)(v43 - 169) < 0) {
    operator delete(*(void **)(v43 - 192));
  }
  std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(a43);
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(*(char **)(v43 - 240));
  if (*(char *)(v43 - 193) < 0) {
    operator delete(*(void **)(v43 - 216));
  }
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(a22);
  if (SHIBYTE(a27) < 0) {
    operator delete(__pa);
  }
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::string>::__assign_unique<std::string const*>(uint64_t **result, std::string *a2, std::string *a3)
{
  int v5 = result;
  if (result[2])
  {
    uint64_t v6 = *result;
    int v7 = result[1];
    *uint64_t result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      uint64_t v8 = (uint64_t *)v6[1];
    }
    else {
      uint64_t v8 = v6;
    }
    uint64_t v11 = result;
    int v12 = v8;
    uint64_t v13 = v8;
    if (v8)
    {
      int v12 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      while (a2 != a3)
      {
        uint64_t v9 = (uint64_t **)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__find_equal<std::string>((uint64_t)v5, &v14, a2);
        if (!*v9)
        {
          uint64_t v10 = v9;
          std::string::operator=((std::string *)(v8 + 4), a2);
          std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(v5, v14, v10, v8);
          uint64_t v8 = v12;
          uint64_t v13 = v12;
          if (!v12)
          {
            ++a2;
            break;
          }
          int v12 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::_DetachedTreeCache::__detach_next((uint64_t)v12);
        }
        ++a2;
        if (!v8) {
          break;
        }
      }
    }
    uint64_t result = (uint64_t **)std::__tree<std::__value_type<std::string,_BlobShape>,std::__map_value_compare<std::string,std::__value_type<std::string,_BlobShape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,_BlobShape>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v11);
  }
  while (a2 != a3)
  {
    uint64_t result = (uint64_t **)std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(v5, a2, (uint64_t)a2);
    ++a2;
  }
  return result;
}

void sub_19EB095B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void CoreML::validateNdMultiArrayInputType(CoreML *this, const CoreML::Specification::ArrayFeatureType *a2)
{
  int v3 = *((_DWORD *)a2 + 4);
  if (v3 <= 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "Input MLMultiArray to neural networks must have at least 1 dimension.");
    *(void *)this = 12;
    std::operator+<char>();
  }
  else
  {
    if (*((_DWORD *)a2 + 15) != 31 || *(_DWORD *)(*((void *)a2 + 5) + 24) == v3)
    {
      CoreML::Result::Result(this);
      return;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "For MLMultiArray input: Rank of the flexible shape range must match the rank of the default shape.");
    *(void *)this = 12;
    std::operator+<char>();
  }
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_19EB096B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateNeuralNetwork<CoreML::Specification::NeuralNetworkClassifier>(uint64_t a1, CoreML::Specification::NeuralNetworkLayer *a2, uint64_t a3)
{
  CoreML::Result::Result((CoreML::Result *)&v156);
  uint64_t v6 = *(void *)(a3 + 32);
  if (v6) {
    int v7 = (uint64_t *)(v6 + 8);
  }
  else {
    int v7 = 0;
  }
  uint64_t v8 = *(int *)(a3 + 24);
  if (!v8)
  {
LABEL_61:
    CoreML::Result::Result((CoreML::Result *)a1);
    goto LABEL_209;
  }
  uint64_t v9 = (uint64_t)a2 + 8;
  int v143 = (uint64_t **)((char *)a2 + 32);
  unint64_t v144 = (void *)((char *)a2 + 16);
  long long v141 = (char *)a2 + 8;
  int v142 = (void *)((char *)a2 + 40);
  uint64_t v10 = (uint64_t **)((char *)a2 + 56);
  uint64_t v145 = (void *)((char *)a2 + 64);
  long long v137 = &v7[v8];
  std::string::size_type v139 = a2;
  uint64_t v140 = a1;
  while (1)
  {
    if ((v156 & 0xFFFFFFEF) != 0)
    {
LABEL_92:
      *(void *)a1 = v156;
      *(_OWORD *)(a1 + 8) = v157;
      *(void *)(a1 + 24) = v158;
      goto LABEL_93;
    }
    uint64_t v138 = v7;
    uint64_t v11 = *v7;
    if (*(unsigned char *)a2)
    {
      uint64_t v12 = *(int *)(v11 + 72);
      if (v12)
      {
        if (*(_DWORD *)(v11 + 24) == v12)
        {
          uint64_t v13 = 0;
          uint64_t v14 = *(void *)(v11 + 80);
          if (v14) {
            uint64_t v15 = v14 + 8;
          }
          else {
            uint64_t v15 = 0;
          }
          uint64_t v16 = 8 * v12;
          while (1)
          {
            uint64_t v17 = *(void *)(v15 + 8 * v13);
            CoreML::validateTensorMessage((CoreML *)&v152, (const CoreML::Specification::Tensor *)*(unsigned int *)(v17 + 16), (const CoreML::Specification::NeuralNetworkLayer *)*(unsigned int *)(v17 + 36), *(void *)(v11 + 112));
            int data = (int)v152.__r_.__value_.__l.__data_;
            std::string::size_type v156 = v152.__r_.__value_.__r.__words[0];
            if (SHIBYTE(v158) < 0)
            {
              operator delete((void *)v157);
              int data = v156;
            }
            long long v157 = *(_OWORD *)&v152.__r_.__value_.__r.__words[1];
            uint64_t v158 = v153;
            if ((data & 0xFFFFFFEF) != 0) {
              goto LABEL_62;
            }
            int v19 = *(void **)(*(void *)(v11 + 32) + 8 * v13 + 8);
            if (v144 != std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>(v9, v19))
            {
              BOOL v20 = (uint64_t **)v9;
              int v21 = *(_DWORD *)(v17 + 36);
              v152.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
              if (v21 != *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v20, v19, (long long **)&v152)+ 14))
              {
                std::string::size_type v49 = *(long long **)(v11 + 112);
                if (*((char *)v49 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(&v149, *(const std::string::value_type **)v49, *((void *)v49 + 1));
                }
                else
                {
                  long long v50 = *v49;
                  v149.__r_.__value_.__r.__words[2] = *((void *)v49 + 2);
                  *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v50;
                }
                int v51 = (void *)v140;
                int v89 = std::string::insert(&v149, 0, "Layer '");
                long long v90 = *(_OWORD *)&v89->__r_.__value_.__l.__data_;
                v150.__r_.__value_.__r.__words[2] = v89->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v150.__r_.__value_.__l.__data_ = v90;
                v89->__r_.__value_.__l.__size_ = 0;
                v89->__r_.__value_.__r.__words[2] = 0;
                v89->__r_.__value_.__r.__words[0] = 0;
                int v91 = std::string::append(&v150, "''s input '");
                long long v92 = *(_OWORD *)&v91->__r_.__value_.__l.__data_;
                v151.__r_.__value_.__r.__words[2] = v91->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v151.__r_.__value_.__l.__data_ = v92;
                v91->__r_.__value_.__l.__size_ = 0;
                v91->__r_.__value_.__r.__words[2] = 0;
                v91->__r_.__value_.__r.__words[0] = 0;
                int v93 = *(long long **)(*(void *)(v11 + 32) + 8 * v13 + 8);
                if (*((char *)v93 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(&v148, *(const std::string::value_type **)v93, *((void *)v93 + 1));
                }
                else
                {
                  long long v94 = *v93;
                  v148.__r_.__value_.__r.__words[2] = *((void *)v93 + 2);
                  *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v94;
                }
                if ((v148.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  uint64_t v95 = &v148;
                }
                else {
                  uint64_t v95 = (std::string *)v148.__r_.__value_.__r.__words[0];
                }
                if ((v148.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  std::string::size_type size = HIBYTE(v148.__r_.__value_.__r.__words[2]);
                }
                else {
                  std::string::size_type size = v148.__r_.__value_.__l.__size_;
                }
                uint64_t v97 = std::string::append(&v151, (const std::string::value_type *)v95, size);
                long long v98 = *(_OWORD *)&v97->__r_.__value_.__l.__data_;
                v154.__r_.__value_.__r.__words[2] = v97->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v98;
                v97->__r_.__value_.__l.__size_ = 0;
                v97->__r_.__value_.__r.__words[2] = 0;
                v97->__r_.__value_.__r.__words[0] = 0;
                BOOL v99 = std::string::append(&v154, "' is also an input to the model. However, for this tensor the rank provided in the layer description");
                long long v100 = *(_OWORD *)&v99->__r_.__value_.__l.__data_;
                v155.__r_.__value_.__r.__words[2] = v99->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v155.__r_.__value_.__l.__data_ = v100;
                v99->__r_.__value_.__l.__size_ = 0;
                v99->__r_.__value_.__r.__words[2] = 0;
                v99->__r_.__value_.__r.__words[0] = 0;
                uint64_t v101 = std::string::append(&v155, " does not match the one provided in the model description");
                long long v102 = *(_OWORD *)&v101->__r_.__value_.__l.__data_;
                v152.__r_.__value_.__r.__words[2] = v101->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v152.__r_.__value_.__l.__data_ = v102;
                v101->__r_.__value_.__l.__size_ = 0;
                v101->__r_.__value_.__r.__words[2] = 0;
                v101->__r_.__value_.__r.__words[0] = 0;
                if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v155.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v154.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v148.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v151.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v150.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v149.__r_.__value_.__l.__data_);
                }
LABEL_155:
                void *v51 = 13;
                std::operator+<char>();
                goto LABEL_207;
              }
              int v19 = *(void **)(*(void *)(v11 + 32) + 8 * v13 + 8);
            }
            if (v142 == std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>((uint64_t)v143, v19))
            {
              int v22 = *(_DWORD *)(v17 + 36);
              v152.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
              *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v143, v19, (long long **)&v152)+ 14) = v22;
            }
            else
            {
              v152.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
              if (*((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v143, v19, (long long **)&v152)+ 14) != *(_DWORD *)(v17 + 36))
              {
                uint64_t v52 = *(long long **)(*(void *)(v11 + 32) + 8 * v13 + 8);
                if (*((char *)v52 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(&v154, *(const std::string::value_type **)v52, *((void *)v52 + 1));
                }
                else
                {
                  long long v53 = *v52;
                  v154.__r_.__value_.__r.__words[2] = *((void *)v52 + 2);
                  *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v53;
                }
                std::string v54 = (void *)v140;
                int v103 = std::string::insert(&v154, 0, "Inconsistent rank for the blob named '");
                long long v104 = *(_OWORD *)&v103->__r_.__value_.__l.__data_;
                v155.__r_.__value_.__r.__words[2] = v103->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v155.__r_.__value_.__l.__data_ = v104;
                v103->__r_.__value_.__l.__size_ = 0;
                v103->__r_.__value_.__r.__words[2] = 0;
                v103->__r_.__value_.__r.__words[0] = 0;
                int v105 = std::string::append(&v155, "'.");
                long long v106 = *(_OWORD *)&v105->__r_.__value_.__l.__data_;
                v152.__r_.__value_.__r.__words[2] = v105->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v152.__r_.__value_.__l.__data_ = v106;
                v105->__r_.__value_.__l.__size_ = 0;
                v105->__r_.__value_.__r.__words[2] = 0;
                v105->__r_.__value_.__r.__words[0] = 0;
                if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v155.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v154.__r_.__value_.__l.__data_);
                }
                goto LABEL_206;
              }
            }
            ++v13;
            v16 -= 8;
            uint64_t v9 = (uint64_t)v141;
            if (!v16) {
              goto LABEL_25;
            }
          }
        }
        uint64_t v125 = *(long long **)(v11 + 112);
        if (*((char *)v125 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v154, *(const std::string::value_type **)v125, *((void *)v125 + 1));
        }
        else
        {
          long long v126 = *v125;
          v154.__r_.__value_.__r.__words[2] = *((void *)v125 + 2);
          *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v126;
        }
        std::string v54 = (void *)v140;
        std::string v129 = std::string::insert(&v154, 0, "Layer '");
        long long v130 = *(_OWORD *)&v129->__r_.__value_.__l.__data_;
        v155.__r_.__value_.__r.__words[2] = v129->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v155.__r_.__value_.__l.__data_ = v130;
        v129->__r_.__value_.__l.__size_ = 0;
        v129->__r_.__value_.__r.__words[2] = 0;
        v129->__r_.__value_.__r.__words[0] = 0;
        int v131 = std::string::append(&v155, "''s input and inputTensors have different lengths");
        long long v132 = *(_OWORD *)&v131->__r_.__value_.__l.__data_;
        v152.__r_.__value_.__r.__words[2] = v131->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v152.__r_.__value_.__l.__data_ = v132;
        v131->__r_.__value_.__l.__size_ = 0;
        v131->__r_.__value_.__r.__words[2] = 0;
        v131->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v155.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v154.__r_.__value_.__l.__data_);
        }
        goto LABEL_206;
      }
LABEL_25:
      uint64_t v23 = *(int *)(v11 + 96);
      if (v23)
      {
        if (*(_DWORD *)(v11 + 48) == v23)
        {
          uint64_t v24 = 0;
          uint64_t v25 = *(void *)(v11 + 104);
          if (v25) {
            uint64_t v26 = v25 + 8;
          }
          else {
            uint64_t v26 = 0;
          }
          uint64_t v27 = 8 * v23;
          while (1)
          {
            uint64_t v28 = *(void *)(v26 + 8 * v24);
            CoreML::validateTensorMessage((CoreML *)&v152, (const CoreML::Specification::Tensor *)*(unsigned int *)(v28 + 16), (const CoreML::Specification::NeuralNetworkLayer *)*(unsigned int *)(v28 + 36), *(void *)(v11 + 112));
            int v29 = (int)v152.__r_.__value_.__l.__data_;
            std::string::size_type v156 = v152.__r_.__value_.__r.__words[0];
            if (SHIBYTE(v158) < 0)
            {
              operator delete((void *)v157);
              int v29 = v156;
            }
            long long v157 = *(_OWORD *)&v152.__r_.__value_.__r.__words[1];
            uint64_t v158 = v153;
            if ((v29 & 0xFFFFFFEF) != 0) {
              break;
            }
            char v30 = *(void **)(*(void *)(v11 + 56) + 8 * v24 + 8);
            if (v144 != std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>(v9, v30))
            {
              uint64_t v31 = (uint64_t **)v9;
              int v32 = *(_DWORD *)(v28 + 36);
              v152.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
              if (v32 != *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v31, v30, (long long **)&v152)+ 14))
              {
                uint64_t v66 = *(long long **)(v11 + 112);
                if (*((char *)v66 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(&v149, *(const std::string::value_type **)v66, *((void *)v66 + 1));
                }
                else
                {
                  long long v67 = *v66;
                  v149.__r_.__value_.__r.__words[2] = *((void *)v66 + 2);
                  *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v67;
                }
                int v51 = (void *)v140;
                uint64_t v107 = std::string::insert(&v149, 0, "Layer '");
                long long v108 = *(_OWORD *)&v107->__r_.__value_.__l.__data_;
                v150.__r_.__value_.__r.__words[2] = v107->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v150.__r_.__value_.__l.__data_ = v108;
                v107->__r_.__value_.__l.__size_ = 0;
                v107->__r_.__value_.__r.__words[2] = 0;
                v107->__r_.__value_.__r.__words[0] = 0;
                long long v109 = std::string::append(&v150, "''s output '");
                long long v110 = *(_OWORD *)&v109->__r_.__value_.__l.__data_;
                v151.__r_.__value_.__r.__words[2] = v109->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v151.__r_.__value_.__l.__data_ = v110;
                v109->__r_.__value_.__l.__size_ = 0;
                v109->__r_.__value_.__r.__words[2] = 0;
                v109->__r_.__value_.__r.__words[0] = 0;
                int v111 = *(long long **)(*(void *)(v11 + 56) + 8 * v24 + 8);
                if (*((char *)v111 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(&v148, *(const std::string::value_type **)v111, *((void *)v111 + 1));
                }
                else
                {
                  long long v112 = *v111;
                  v148.__r_.__value_.__r.__words[2] = *((void *)v111 + 2);
                  *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v112;
                }
                if ((v148.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  long long v113 = &v148;
                }
                else {
                  long long v113 = (std::string *)v148.__r_.__value_.__r.__words[0];
                }
                if ((v148.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  std::string::size_type v114 = HIBYTE(v148.__r_.__value_.__r.__words[2]);
                }
                else {
                  std::string::size_type v114 = v148.__r_.__value_.__l.__size_;
                }
                long long v115 = std::string::append(&v151, (const std::string::value_type *)v113, v114);
                long long v116 = *(_OWORD *)&v115->__r_.__value_.__l.__data_;
                v154.__r_.__value_.__r.__words[2] = v115->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v116;
                v115->__r_.__value_.__l.__size_ = 0;
                v115->__r_.__value_.__r.__words[2] = 0;
                v115->__r_.__value_.__r.__words[0] = 0;
                std::string::size_type v117 = std::string::append(&v154, "' is also an output of the model. However, for this tensor the rank provided in the layer description");
                long long v118 = *(_OWORD *)&v117->__r_.__value_.__l.__data_;
                v155.__r_.__value_.__r.__words[2] = v117->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v155.__r_.__value_.__l.__data_ = v118;
                v117->__r_.__value_.__l.__size_ = 0;
                v117->__r_.__value_.__r.__words[2] = 0;
                v117->__r_.__value_.__r.__words[0] = 0;
                std::string::size_type v119 = std::string::append(&v155, " does not match the one provided in the model description");
                long long v120 = *(_OWORD *)&v119->__r_.__value_.__l.__data_;
                v152.__r_.__value_.__r.__words[2] = v119->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v152.__r_.__value_.__l.__data_ = v120;
                v119->__r_.__value_.__l.__size_ = 0;
                v119->__r_.__value_.__r.__words[2] = 0;
                v119->__r_.__value_.__r.__words[0] = 0;
                if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v155.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v154.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v148.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v151.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v150.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v149.__r_.__value_.__l.__data_);
                }
                goto LABEL_155;
              }
              char v30 = *(void **)(*(void *)(v11 + 56) + 8 * v24 + 8);
            }
            if (v142 == std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>((uint64_t)v143, v30))
            {
              int v33 = *(_DWORD *)(v28 + 36);
              v152.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
              *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v143, v30, (long long **)&v152)+ 14) = v33;
            }
            else
            {
              v152.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
              if (*((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v143, v30, (long long **)&v152)+ 14) != *(_DWORD *)(v28 + 36))
              {
                uint64_t v68 = *(long long **)(*(void *)(v11 + 56) + 8 * v24 + 8);
                if (*((char *)v68 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(&v154, *(const std::string::value_type **)v68, *((void *)v68 + 1));
                }
                else
                {
                  long long v69 = *v68;
                  v154.__r_.__value_.__r.__words[2] = *((void *)v68 + 2);
                  *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v69;
                }
                std::string v54 = (void *)v140;
                std::string::size_type v121 = std::string::insert(&v154, 0, "Inconsistent rank for the blob named '");
                long long v122 = *(_OWORD *)&v121->__r_.__value_.__l.__data_;
                v155.__r_.__value_.__r.__words[2] = v121->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v155.__r_.__value_.__l.__data_ = v122;
                v121->__r_.__value_.__l.__size_ = 0;
                v121->__r_.__value_.__r.__words[2] = 0;
                v121->__r_.__value_.__r.__words[0] = 0;
                uint64_t v123 = std::string::append(&v155, "'.");
                long long v124 = *(_OWORD *)&v123->__r_.__value_.__l.__data_;
                v152.__r_.__value_.__r.__words[2] = v123->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v152.__r_.__value_.__l.__data_ = v124;
                v123->__r_.__value_.__l.__size_ = 0;
                v123->__r_.__value_.__r.__words[2] = 0;
                v123->__r_.__value_.__r.__words[0] = 0;
                if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v155.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v154.__r_.__value_.__l.__data_);
                }
                goto LABEL_206;
              }
            }
            ++v24;
            v27 -= 8;
            uint64_t v9 = (uint64_t)v141;
            if (!v27) {
              goto LABEL_42;
            }
          }
LABEL_62:
          *(void *)uint64_t v140 = v156;
          *(_OWORD *)(v140 + 8) = v157;
          *(void *)(v140 + 24) = v158;
LABEL_93:
          long long v157 = 0uLL;
          uint64_t v158 = 0;
          goto LABEL_209;
        }
        std::string v127 = *(long long **)(v11 + 112);
        if (*((char *)v127 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v154, *(const std::string::value_type **)v127, *((void *)v127 + 1));
        }
        else
        {
          long long v128 = *v127;
          v154.__r_.__value_.__r.__words[2] = *((void *)v127 + 2);
          *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v128;
        }
        uint64_t v133 = std::string::insert(&v154, 0, "Layer '");
        std::string v54 = (void *)v140;
        long long v134 = *(_OWORD *)&v133->__r_.__value_.__l.__data_;
        v155.__r_.__value_.__r.__words[2] = v133->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v155.__r_.__value_.__l.__data_ = v134;
        v133->__r_.__value_.__l.__size_ = 0;
        v133->__r_.__value_.__r.__words[2] = 0;
        v133->__r_.__value_.__r.__words[0] = 0;
        BOOL v135 = std::string::append(&v155, "''s output and \"outputTensors\" property have different lengths");
        long long v136 = *(_OWORD *)&v135->__r_.__value_.__l.__data_;
        v152.__r_.__value_.__r.__words[2] = v135->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v152.__r_.__value_.__l.__data_ = v136;
        v135->__r_.__value_.__l.__size_ = 0;
        v135->__r_.__value_.__r.__words[2] = 0;
        v135->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v155.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v154.__r_.__value_.__l.__data_);
        }
LABEL_206:
        *std::string v54 = 13;
        std::operator+<char>();
        goto LABEL_207;
      }
    }
LABEL_42:
    CoreML::NeuralNetworkSpecValidator::validateLayer((void **)&v152.__r_.__value_.__l.__data_, v139, v11);
    int v34 = (int)v152.__r_.__value_.__l.__data_;
    std::string::size_type v156 = v152.__r_.__value_.__r.__words[0];
    a1 = v140;
    if (SHIBYTE(v158) < 0)
    {
      operator delete((void *)v157);
      int v34 = v156;
    }
    long long v157 = *(_OWORD *)&v152.__r_.__value_.__r.__words[1];
    uint64_t v158 = v153;
    if ((v34 & 0xFFFFFFEF) != 0) {
      goto LABEL_92;
    }
    uint64_t v35 = *(void *)(v11 + 32);
    uint64_t v36 = v35 ? (void **)(v35 + 8) : 0;
    uint64_t v37 = *(int *)(v11 + 24);
    if (v37) {
      break;
    }
LABEL_52:
    uint64_t v40 = *(void *)(v11 + 56);
    if (v40) {
      long long v41 = (uint64_t *)(v40 + 8);
    }
    else {
      long long v41 = 0;
    }
    uint64_t v42 = *(int *)(v11 + 48);
    if (v42)
    {
      uint64_t v43 = 8 * v42;
      while (1)
      {
        uint64_t v44 = *v41;
        if (v145 != std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>((uint64_t)v10, (void *)*v41)&& *(_DWORD *)(v11 + 140) != 600)
        {
          break;
        }
        uint64_t v45 = std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v10, (void *)v44, v44);
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)v45 + 7, *(void **)(v11 + 112), *(void *)(v11 + 112));
        ++v41;
        v43 -= 8;
        if (!v43) {
          goto LABEL_60;
        }
      }
      uint64_t v48 = std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v10, (void *)v44, v44)[7];
      if (*(char *)(v48 + 55) < 0) {
        std::string::__init_copy_ctor_external(&v152, *(const std::string::value_type **)(v48 + 32), *(void *)(v48 + 40));
      }
      else {
        std::string v152 = *(std::string *)(v48 + 32);
      }
      uint64_t v70 = *(long long **)(v11 + 112);
      if (*((char *)v70 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v147, *(const std::string::value_type **)v70, *((void *)v70 + 1));
      }
      else
      {
        long long v71 = *v70;
        v147.__r_.__value_.__r.__words[2] = *((void *)v70 + 2);
        *(_OWORD *)&v147.__r_.__value_.__l.__data_ = v71;
      }
      int v72 = std::string::insert(&v147, 0, "Layer '");
      long long v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
      v148.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v73;
      v72->__r_.__value_.__l.__size_ = 0;
      v72->__r_.__value_.__r.__words[2] = 0;
      v72->__r_.__value_.__r.__words[0] = 0;
      unsigned __int8 v74 = std::string::append(&v148, "' produces an output named '");
      long long v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
      v149.__r_.__value_.__r.__words[2] = v74->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v75;
      v74->__r_.__value_.__l.__size_ = 0;
      v74->__r_.__value_.__r.__words[2] = 0;
      v74->__r_.__value_.__r.__words[0] = 0;
      if (*(char *)(v44 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v146, *(const std::string::value_type **)v44, *(void *)(v44 + 8));
      }
      else
      {
        long long v76 = *(_OWORD *)v44;
        v146.__r_.__value_.__r.__words[2] = *(void *)(v44 + 16);
        *(_OWORD *)&v146.__r_.__value_.__l.__data_ = v76;
      }
      if ((v146.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v77 = &v146;
      }
      else {
        uint64_t v77 = (std::string *)v146.__r_.__value_.__r.__words[0];
      }
      if ((v146.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v78 = HIBYTE(v146.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v78 = v146.__r_.__value_.__l.__size_;
      }
      uint64_t v79 = std::string::append(&v149, (const std::string::value_type *)v77, v78);
      long long v80 = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
      v150.__r_.__value_.__r.__words[2] = v79->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v150.__r_.__value_.__l.__data_ = v80;
      v79->__r_.__value_.__l.__size_ = 0;
      v79->__r_.__value_.__r.__words[2] = 0;
      v79->__r_.__value_.__r.__words[0] = 0;
      int v81 = std::string::append(&v150, "' which is also an output produced by the layer '");
      long long v82 = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
      v151.__r_.__value_.__r.__words[2] = v81->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v151.__r_.__value_.__l.__data_ = v82;
      v81->__r_.__value_.__l.__size_ = 0;
      v81->__r_.__value_.__r.__words[2] = 0;
      v81->__r_.__value_.__r.__words[0] = 0;
      if ((v152.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        __int32 v83 = &v152;
      }
      else {
        __int32 v83 = (std::string *)v152.__r_.__value_.__r.__words[0];
      }
      if ((v152.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v84 = HIBYTE(v152.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v84 = v152.__r_.__value_.__l.__size_;
      }
      std::string v85 = std::string::append(&v151, (const std::string::value_type *)v83, v84);
      long long v86 = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
      v154.__r_.__value_.__r.__words[2] = v85->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v86;
      v85->__r_.__value_.__l.__size_ = 0;
      v85->__r_.__value_.__r.__words[2] = 0;
      v85->__r_.__value_.__r.__words[0] = 0;
      long long v87 = std::string::append(&v154, "'.");
      long long v88 = *(_OWORD *)&v87->__r_.__value_.__l.__data_;
      v155.__r_.__value_.__r.__words[2] = v87->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v155.__r_.__value_.__l.__data_ = v88;
      v87->__r_.__value_.__l.__size_ = 0;
      v87->__r_.__value_.__r.__words[2] = 0;
      v87->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v154.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v151.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v150.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v146.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v149.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v148.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v147.__r_.__value_.__l.__data_);
      }
      *(void *)uint64_t v140 = 13;
      std::operator+<char>();
      if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v155.__r_.__value_.__l.__data_);
      }
      goto LABEL_207;
    }
LABEL_60:
    int v7 = v138 + 1;
    a2 = v139;
    if (v138 + 1 == v137) {
      goto LABEL_61;
    }
  }
  uint64_t v38 = 8 * v37;
  while (1)
  {
    uint64_t v39 = (long long *)*v36;
    if (v145 == std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>((uint64_t)v10, *v36))break; {
    ++v36;
    }
    v38 -= 8;
    if (!v38) {
      goto LABEL_52;
    }
  }
  uint64_t v46 = *(long long **)(v11 + 112);
  if (*((char *)v46 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v150, *(const std::string::value_type **)v46, *((void *)v46 + 1));
  }
  else
  {
    long long v47 = *v46;
    v150.__r_.__value_.__r.__words[2] = *((void *)v46 + 2);
    *(_OWORD *)&v150.__r_.__value_.__l.__data_ = v47;
  }
  uint64_t v55 = std::string::insert(&v150, 0, "Layer '");
  long long v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
  v151.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v151.__r_.__value_.__l.__data_ = v56;
  v55->__r_.__value_.__l.__size_ = 0;
  v55->__r_.__value_.__r.__words[2] = 0;
  v55->__r_.__value_.__r.__words[0] = 0;
  uint64_t v57 = std::string::append(&v151, "' consumes an input named '");
  long long v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
  v154.__r_.__value_.__r.__words[2] = v57->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v58;
  v57->__r_.__value_.__l.__size_ = 0;
  v57->__r_.__value_.__r.__words[2] = 0;
  v57->__r_.__value_.__r.__words[0] = 0;
  if (*((char *)v39 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v149, *(const std::string::value_type **)v39, *((void *)v39 + 1));
  }
  else
  {
    long long v59 = *v39;
    v149.__r_.__value_.__r.__words[2] = *((void *)v39 + 2);
    *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v59;
  }
  if ((v149.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v60 = &v149;
  }
  else {
    int v60 = (std::string *)v149.__r_.__value_.__r.__words[0];
  }
  if ((v149.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v61 = HIBYTE(v149.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v61 = v149.__r_.__value_.__l.__size_;
  }
  long long v62 = std::string::append(&v154, (const std::string::value_type *)v60, v61);
  long long v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
  v155.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v155.__r_.__value_.__l.__data_ = v63;
  v62->__r_.__value_.__l.__size_ = 0;
  v62->__r_.__value_.__r.__words[2] = 0;
  v62->__r_.__value_.__r.__words[0] = 0;
  uint64_t v64 = std::string::append(&v155, "' which is not present in this network.");
  long long v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
  v152.__r_.__value_.__r.__words[2] = v64->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v152.__r_.__value_.__l.__data_ = v65;
  v64->__r_.__value_.__l.__size_ = 0;
  v64->__r_.__value_.__r.__words[2] = 0;
  v64->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v155.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v149.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v151.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v150.__r_.__value_.__l.__data_);
  }
  *(void *)uint64_t v140 = 13;
  std::operator+<char>();
LABEL_207:
  if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v152.__r_.__value_.__l.__data_);
  }
LABEL_209:
  if (SHIBYTE(v158) < 0) {
    operator delete((void *)v157);
  }
}

void sub_19EB0A638(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *__p,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v59 - 89) < 0) {
    operator delete(*(void **)(v59 - 112));
  }
  _Unwind_Resume(exception_object);
}

void CoreML::validateTensorMessage(CoreML *this, const CoreML::Specification::Tensor *a2, const CoreML::Specification::NeuralNetworkLayer *a3, uint64_t a4)
{
  void v14[2] = *MEMORY[0x1E4F143B8];
  uint64_t v12 = 0;
  long long v13 = 0uLL;
  if ((int)a2 < 1 || a3 == a2)
  {
    CoreML::Result::Result(this);
  }
  else
  {
    if (*(char *)(a4 + 23) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
    }
    else {
      std::string __p = *(std::string *)a4;
    }
    char v5 = std::string::insert(&__p, 0, "Tensor in layer '");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v11.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    int v7 = std::string::append(&v11, "': rank must match the length of dimValue");
    uint64_t v8 = (void *)v7->__r_.__value_.__r.__words[0];
    v14[0] = v7->__r_.__value_.__l.__size_;
    *(void *)((char *)v14 + 7) = *(std::string::size_type *)((char *)&v7->__r_.__value_.__r.__words[1] + 7);
    char v9 = HIBYTE(v7->__r_.__value_.__r.__words[2]);
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    *(void *)((char *)&v13 + 7) = *(void *)((char *)v14 + 7);
    uint64_t v12 = v8;
    *(void *)&long long v13 = v14[0];
    HIBYTE(v13) = v9;
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v11.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    *(void *)this = 13;
    std::operator+<char>();
    if (SHIBYTE(v13) < 0) {
      operator delete(v12);
    }
  }
}

void sub_19EB0AA34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
}

void CoreML::validate<(MLModelType)303>(uint64_t a1, uint64_t a2)
{
  v94[3] = *(void **)MEMORY[0x1E4F143B8];
  uint64_t v4 = &CoreML::Specification::_ModelDescription_default_instance_;
  if (*(void *)(a2 + 16)) {
    char v5 = *(uint64_t **)(a2 + 16);
  }
  else {
    char v5 = &CoreML::Specification::_ModelDescription_default_instance_;
  }
  CoreML::validateRegressorInterface(&v77, (uint64_t)v5, *(_DWORD *)(a2 + 24), 1, 0);
  if ((v77 & 0xFFFFFFEF) != 0)
  {
    *(void *)a1 = v77;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)__p;
    *(void *)(a1 + 24) = v79;
    return;
  }
  v76[0] = 0;
  v76[1] = 0;
  long long v75 = v76;
  if (*(void *)(a2 + 16)) {
    uint64_t v4 = *(uint64_t **)(a2 + 16);
  }
  if (*(_DWORD *)(a2 + 44) == 303)
  {
    int v7 = *(uint64_t **)(a2 + 32);
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v6);
    int v7 = &CoreML::Specification::_NeuralNetworkRegressor_default_instance_;
  }
  int v8 = *(unsigned __int8 *)(a2 + 28);
  CoreML::Result::Result((CoreML::Result *)&v88);
  uint64_t v9 = v4[4];
  if (v9) {
    uint64_t v10 = (uint64_t *)(v9 + 8);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *((int *)v4 + 6);
  if (v11)
  {
    uint64_t v12 = 8 * v11 - 8;
    do
    {
      uint64_t v13 = *v10++;
      uint64_t v14 = *(uint64_t **)(v13 + 32);
      if (!v14) {
        uint64_t v14 = &CoreML::Specification::_FeatureType_default_instance_;
      }
      int v15 = *((_DWORD *)v14 + 9);
      BOOL v16 = v15 != 5;
      BOOL v17 = v15 == 5 || v12 == 0;
      v12 -= 8;
    }
    while (!v17);
  }
  else
  {
    BOOL v16 = 1;
  }
  int v18 = *((_DWORD *)v7 + 18);
  int v19 = *((_DWORD *)v7 + 19);
  uint64_t v20 = v7[4];
  if (v20) {
    int v21 = (uint64_t *)(v20 + 8);
  }
  else {
    int v21 = 0;
  }
  uint64_t v22 = *((int *)v7 + 6);
  if (v22)
  {
    uint64_t v23 = 8 * v22;
    while ((CoreML::isIOS12NeuralNetworkLayer(*v21) & 1) != 0)
    {
      ++v21;
      v23 -= 8;
      if (!v23) {
        goto LABEL_32;
      }
    }
    if (v18) {
      char v32 = 1;
    }
    else {
      char v32 = v16;
    }
    if ((v32 & 1) == 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&v91, "Neural Network Multi-Array input shape mapping cannot be 'RANK5_ARRAY_MAPPING' if the network contains a layer added in version 4 (iOS 13) or later. Use 'EXACT_ARRAY_MAPPING' instead.");
      *(void *)a1 = 12;
      std::operator+<char>();
      goto LABEL_62;
    }
    BOOL v24 = 1;
  }
  else
  {
LABEL_32:
    BOOL v24 = (v18 | v19) != 0;
  }
  if (v18) {
    BOOL v25 = 1;
  }
  else {
    BOOL v25 = v19 == 0;
  }
  char v26 = v25 || v16;
  if ((v26 & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v91, "Neural Network Multi-Array input shape mapping cannot be 'RANK5_ARRAY_MAPPING' if the image input Shape mapping is not 'RANK5_IMAGE_MAPPING'");
    *(void *)a1 = 12;
    std::operator+<char>();
    goto LABEL_62;
  }
  if (!*((_DWORD *)v4 + 12))
  {
    std::string::basic_string[abi:ne180100]<0>(&v91, "Neural networks produce at least one output.");
    *(void *)a1 = 12;
    std::operator+<char>();
    goto LABEL_62;
  }
  if (!*((_DWORD *)v7 + 6))
  {
    std::string::basic_string[abi:ne180100]<0>(&v91, "Neural networks require at least one layer.");
    *(void *)a1 = 13;
    std::operator+<char>();
    goto LABEL_62;
  }
  uint64_t v27 = *((unsigned int *)v4 + 6);
  if ((int)v27 >= 1)
  {
    uint64_t v28 = v4[4];
    if (v28) {
      uint64_t v29 = v28 + 8;
    }
    else {
      uint64_t v29 = 0;
    }
    uint64_t v30 = 8 * v27;
    do
    {
      uint64_t v31 = *(uint64_t **)(*(void *)v29 + 32);
      if (!v31) {
        uint64_t v31 = &CoreML::Specification::_FeatureType_default_instance_;
      }
      if (*((_DWORD *)v31 + 9) != 8 && !*((unsigned char *)v31 + 16)) {
        goto LABEL_69;
      }
      v29 += 8;
      v30 -= 8;
    }
    while (v30);
    std::string::basic_string[abi:ne180100]<0>(&v91, "Neural networks require at least one non-optional input.");
    *(void *)a1 = 12;
    std::operator+<char>();
LABEL_62:
    if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v91.__r_.__value_.__l.__data_);
    }
    goto LABEL_64;
  }
LABEL_69:
  std::string::basic_string[abi:ne180100]<0>(&v91, "inputs");
  CoreML::validateInputOutputTypes((CoreML::Result *)a1, *((_DWORD *)v4 + 6), v4[4], 1);
  if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v91.__r_.__value_.__l.__data_);
  }
  if ((*(_DWORD *)a1 & 0xFFFFFFEF) != 0) {
    goto LABEL_64;
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  int v74 = v8;
  v87[0] = 0;
  v87[1] = 0;
  long long v86 = v87;
  if (v24)
  {
    uint64_t v33 = v4[4];
    if (v33) {
      uint64_t v34 = v33 + 8;
    }
    else {
      uint64_t v34 = 0;
    }
    uint64_t v35 = *((int *)v4 + 6);
    if (v35)
    {
      for (uint64_t i = 8 * v35; i; i -= 8)
      {
        uint64_t v37 = *(void *)v34;
        uint64_t v38 = *(uint64_t **)(*(void *)v34 + 32);
        if (!v38) {
          uint64_t v38 = &CoreML::Specification::_FeatureType_default_instance_;
        }
        int v39 = *((_DWORD *)v38 + 9);
        if (v39 == 4)
        {
          long long v41 = *(void **)(v37 + 16);
          if (!*((_DWORD *)v7 + 19))
          {
            v91.__r_.__value_.__r.__words[0] = *(void *)(v37 + 16);
            uint64_t v42 = std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v86, v41, (long long **)&v91);
            goto LABEL_90;
          }
          v91.__r_.__value_.__r.__words[0] = *(void *)(v37 + 16);
          *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v86, v41, (long long **)&v91)+ 14) = 4;
        }
        else if (v39 == 5)
        {
          if (!*((_DWORD *)v7 + 18))
          {
            v91.__r_.__value_.__r.__words[0] = *(void *)(v37 + 16);
            uint64_t v42 = std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v86, v91.__r_.__value_.__l.__data_, (long long **)&v91);
LABEL_90:
            *((_DWORD *)v42 + 14) = 5;
            goto LABEL_91;
          }
          int v40 = *(_DWORD *)(v38[3] + 16);
          v91.__r_.__value_.__r.__words[0] = *(void *)(v37 + 16);
          *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v86, v91.__r_.__value_.__l.__data_, (long long **)&v91)+ 14) = v40;
        }
LABEL_91:
        v34 += 8;
      }
    }
    uint64_t v43 = v4[7];
    if (v43) {
      uint64_t v44 = v43 + 8;
    }
    else {
      uint64_t v44 = 0;
    }
    uint64_t v45 = *((int *)v4 + 12);
    if (v45)
    {
      uint64_t v46 = 8 * v45;
      do
      {
        long long v47 = *(uint64_t **)(*(void *)v44 + 32);
        if (!v47) {
          long long v47 = &CoreML::Specification::_FeatureType_default_instance_;
        }
        if (*((_DWORD *)v47 + 9) == 5)
        {
          int v48 = *(_DWORD *)(v47[3] + 16);
          if (v48)
          {
            v91.__r_.__value_.__r.__words[0] = *(void *)(*(void *)v44 + 16);
            *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v86, v91.__r_.__value_.__l.__data_, (long long **)&v91)+ 14) = v48;
          }
        }
        v44 += 8;
        v46 -= 8;
      }
      while (v46);
    }
  }
  v85[0] = 0;
  v85[1] = 0;
  std::string::size_type v84 = (uint64_t *)v85;
  uint64_t v49 = v4[4];
  if (v49) {
    long long v50 = (uint64_t *)(v49 + 8);
  }
  else {
    long long v50 = 0;
  }
  uint64_t v51 = *((int *)v4 + 6);
  if (!v51)
  {
LABEL_140:
    CoreML::NeuralNetworkSpecValidator::NeuralNetworkSpecValidator((uint64_t)&v91, &v84, (uint64_t **)&v86, v24, 0, (uint64_t **)&v86);
    CoreML::NeuralNetworkSpecValidator::validateNeuralNetwork<CoreML::Specification::NeuralNetworkRegressor>((uint64_t)&v80, (CoreML::Specification::NeuralNetworkLayer *)&v91, (uint64_t)v7);
    int v68 = v80;
    std::string::size_type v88 = v80;
    if (SHIBYTE(v90) < 0)
    {
      operator delete((void *)v89);
      int v68 = v88;
    }
    long long v89 = v81;
    std::string::size_type v90 = v82;
    if ((v68 & 0xFFFFFFEF) == 0)
    {
      long long v69 = v93;
      if (v93 != v94)
      {
        do
        {
          if (v85 == std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>((uint64_t)&v84, v69 + 4)|| v69[9] >= 2uLL)
          {
            std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v75, v69 + 4, (uint64_t)(v69 + 4));
          }
          uint64_t v70 = (void *)v69[1];
          if (v70)
          {
            do
            {
              long long v71 = (void **)v70;
              uint64_t v70 = (void *)*v70;
            }
            while (v70);
          }
          else
          {
            do
            {
              long long v71 = (void **)v69[2];
              BOOL v17 = *v71 == v69;
              long long v69 = v71;
            }
            while (!v17);
          }
          long long v69 = v71;
        }
        while (v71 != v94);
      }
      if (!v24)
      {
        CoreML::NeuralNetworkShaper::NeuralNetworkShaper(&v80, (uint64_t)v4, (uint64_t)(v7 + 2));
        std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::destroy(v83);
        std::__tree<std::__value_type<std::string,std::set<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<int>>>>::destroy(*((void **)&v81 + 1));
      }
      if ((v88 & 0xFFFFFFEF) == 0 && v74 != 0)
      {
        validateUpdatableNeuralNetwork<CoreML::Specification::NeuralNetworkRegressor>((void **)&v80, (uint64_t)v7);
        int v73 = v80;
        std::string::size_type v88 = v80;
        if (SHIBYTE(v90) < 0)
        {
          operator delete((void *)v89);
          int v73 = v88;
        }
        long long v89 = v81;
        std::string::size_type v90 = v82;
        if ((v73 & 0xFFFFFFEF) == 0)
        {
          validateTrainingInputs<CoreML::Specification::NeuralNetworkRegressor>((CoreML::Result *)&v80, (uint64_t)v4, v7);
          std::string::size_type v88 = v80;
          if (SHIBYTE(v90) < 0) {
            operator delete((void *)v89);
          }
          long long v89 = v81;
          std::string::size_type v90 = v82;
        }
      }
    }
    *(void *)a1 = v88;
    *(_OWORD *)(a1 + 8) = v89;
    *(void *)(a1 + 24) = v90;
    long long v89 = 0uLL;
    std::string::size_type v90 = 0;
    std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(v94[0]);
    std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy((char *)v92.__r_.__value_.__r.__words[2]);
    std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy((char *)v91.__r_.__value_.__r.__words[2]);
    goto LABEL_166;
  }
  uint64_t v52 = &v50[v51];
  while (1)
  {
    uint64_t v53 = *v50;
    std::string::basic_string[abi:ne180100]<0>(&v91, "__input");
    std::string v54 = std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v84, *(void **)(v53 + 16), *(void *)(v53 + 16));
    std::__tree<std::string>::__assign_unique<std::string const*>((uint64_t **)v54 + 7, &v91, &v92);
    if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v91.__r_.__value_.__l.__data_);
    }
    uint64_t v55 = *(uint64_t **)(v53 + 32);
    if (!v55) {
      uint64_t v55 = &CoreML::Specification::_FeatureType_default_instance_;
    }
    if (*((_DWORD *)v55 + 9) != 5) {
      goto LABEL_139;
    }
    if (v24)
    {
      CoreML::validateNdMultiArrayInputType((CoreML *)&v91, (const CoreML::Specification::ArrayFeatureType *)v55[3]);
      int data = (int)v91.__r_.__value_.__l.__data_;
      std::string::size_type v88 = v91.__r_.__value_.__r.__words[0];
      if (SHIBYTE(v90) < 0)
      {
        operator delete((void *)v89);
        int data = v88;
      }
      long long v89 = *(_OWORD *)&v91.__r_.__value_.__r.__words[1];
      std::string::size_type v90 = v92.__r_.__value_.__r.__words[0];
      if ((data & 0xFFFFFFEF) != 0)
      {
        *(void *)a1 = v88;
        *(_OWORD *)(a1 + 8) = v89;
        *(void *)(a1 + 24) = v90;
        long long v89 = 0uLL;
        std::string::size_type v90 = 0;
        goto LABEL_166;
      }
      goto LABEL_139;
    }
    uint64_t v57 = v55[3];
    int v58 = *(_DWORD *)(v57 + 16);
    if (v58 >= 1 && (v58 | 2) != 3) {
      break;
    }
    int v60 = *(_DWORD *)(v57 + 60);
    if (v60)
    {
      if (v60 == 31)
      {
        int v67 = *(_DWORD *)(*(void *)(v57 + 40) + 24);
        if (v67 == 1) {
          goto LABEL_139;
        }
        BOOL v66 = v67 == 3;
        goto LABEL_137;
      }
      if (v60 != 21) {
        goto LABEL_139;
      }
      uint64_t v61 = *(void *)(v57 + 40);
      uint64_t v62 = *(void *)(v61 + 32);
      uint64_t v63 = v62 ? v62 + 8 : 0;
      uint64_t v64 = *(int *)(v61 + 24);
      if (!v64) {
        goto LABEL_139;
      }
      uint64_t v65 = 8 * v64;
      while ((*(_DWORD *)(*(void *)v63 + 16) | 2) == 3)
      {
        v63 += 8;
        v65 -= 8;
        if (!v65) {
          goto LABEL_139;
        }
      }
    }
    BOOL v66 = 0;
LABEL_137:
    if (v58 <= 0 && !v66) {
      break;
    }
LABEL_139:
    if (++v50 == v52) {
      goto LABEL_140;
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v91, "Input MLMultiArray to neural networks must have dimension 1 (vector) or 3 (image-like arrays).");
  *(void *)a1 = 12;
  std::operator+<char>();
  if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v91.__r_.__value_.__l.__data_);
  }
LABEL_166:
  std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(v85[0]);
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(v87[0]);
LABEL_64:
  if (SHIBYTE(v90) < 0) {
    operator delete((void *)v89);
  }
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(v76[0]);
  if (SHIBYTE(v79) < 0) {
    operator delete(__p[0]);
  }
}

void sub_19EB0B3CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *__p, uint64_t a9, int a10, __int16 a11, char a12, char a13, void *a14, uint64_t a15, char *a16, std::string *a17, void *a18, void *__pa, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,char *a39)
{
  if (*(char *)(v39 - 161) < 0) {
    operator delete(*(void **)(v39 - 184));
  }
  std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(a36);
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(a39);
  if (*(char *)(v39 - 185) < 0) {
    operator delete(*(void **)(v39 - 208));
  }
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(a16);
  if (SHIBYTE(a21) < 0) {
    operator delete(__pa);
  }
  _Unwind_Resume(a1);
}

void CoreML::NeuralNetworkSpecValidator::validateNeuralNetwork<CoreML::Specification::NeuralNetworkRegressor>(uint64_t a1, CoreML::Specification::NeuralNetworkLayer *a2, uint64_t a3)
{
  CoreML::Result::Result((CoreML::Result *)&v156);
  uint64_t v6 = *(void *)(a3 + 32);
  if (v6) {
    int v7 = (uint64_t *)(v6 + 8);
  }
  else {
    int v7 = 0;
  }
  uint64_t v8 = *(int *)(a3 + 24);
  if (!v8)
  {
LABEL_61:
    CoreML::Result::Result((CoreML::Result *)a1);
    goto LABEL_209;
  }
  uint64_t v9 = (uint64_t)a2 + 8;
  int v143 = (uint64_t **)((char *)a2 + 32);
  unint64_t v144 = (void *)((char *)a2 + 16);
  long long v141 = (char *)a2 + 8;
  int v142 = (void *)((char *)a2 + 40);
  uint64_t v10 = (uint64_t **)((char *)a2 + 56);
  uint64_t v145 = (void *)((char *)a2 + 64);
  long long v137 = &v7[v8];
  std::string::size_type v139 = a2;
  uint64_t v140 = a1;
  while (1)
  {
    if ((v156 & 0xFFFFFFEF) != 0)
    {
LABEL_92:
      *(void *)a1 = v156;
      *(_OWORD *)(a1 + 8) = v157;
      *(void *)(a1 + 24) = v158;
      goto LABEL_93;
    }
    uint64_t v138 = v7;
    uint64_t v11 = *v7;
    if (*(unsigned char *)a2)
    {
      uint64_t v12 = *(int *)(v11 + 72);
      if (v12)
      {
        if (*(_DWORD *)(v11 + 24) == v12)
        {
          uint64_t v13 = 0;
          uint64_t v14 = *(void *)(v11 + 80);
          if (v14) {
            uint64_t v15 = v14 + 8;
          }
          else {
            uint64_t v15 = 0;
          }
          uint64_t v16 = 8 * v12;
          while (1)
          {
            uint64_t v17 = *(void *)(v15 + 8 * v13);
            CoreML::validateTensorMessage((CoreML *)&v152, (const CoreML::Specification::Tensor *)*(unsigned int *)(v17 + 16), (const CoreML::Specification::NeuralNetworkLayer *)*(unsigned int *)(v17 + 36), *(void *)(v11 + 112));
            int data = (int)v152.__r_.__value_.__l.__data_;
            std::string::size_type v156 = v152.__r_.__value_.__r.__words[0];
            if (SHIBYTE(v158) < 0)
            {
              operator delete((void *)v157);
              int data = v156;
            }
            long long v157 = *(_OWORD *)&v152.__r_.__value_.__r.__words[1];
            uint64_t v158 = v153;
            if ((data & 0xFFFFFFEF) != 0) {
              goto LABEL_62;
            }
            int v19 = *(void **)(*(void *)(v11 + 32) + 8 * v13 + 8);
            if (v144 != std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>(v9, v19))
            {
              uint64_t v20 = (uint64_t **)v9;
              int v21 = *(_DWORD *)(v17 + 36);
              v152.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
              if (v21 != *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v20, v19, (long long **)&v152)+ 14))
              {
                uint64_t v49 = *(long long **)(v11 + 112);
                if (*((char *)v49 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(&v149, *(const std::string::value_type **)v49, *((void *)v49 + 1));
                }
                else
                {
                  long long v50 = *v49;
                  v149.__r_.__value_.__r.__words[2] = *((void *)v49 + 2);
                  *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v50;
                }
                uint64_t v51 = (void *)v140;
                long long v89 = std::string::insert(&v149, 0, "Layer '");
                long long v90 = *(_OWORD *)&v89->__r_.__value_.__l.__data_;
                v150.__r_.__value_.__r.__words[2] = v89->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v150.__r_.__value_.__l.__data_ = v90;
                v89->__r_.__value_.__l.__size_ = 0;
                v89->__r_.__value_.__r.__words[2] = 0;
                v89->__r_.__value_.__r.__words[0] = 0;
                std::string v91 = std::string::append(&v150, "''s input '");
                long long v92 = *(_OWORD *)&v91->__r_.__value_.__l.__data_;
                v151.__r_.__value_.__r.__words[2] = v91->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v151.__r_.__value_.__l.__data_ = v92;
                v91->__r_.__value_.__l.__size_ = 0;
                v91->__r_.__value_.__r.__words[2] = 0;
                v91->__r_.__value_.__r.__words[0] = 0;
                int v93 = *(long long **)(*(void *)(v11 + 32) + 8 * v13 + 8);
                if (*((char *)v93 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(&v148, *(const std::string::value_type **)v93, *((void *)v93 + 1));
                }
                else
                {
                  long long v94 = *v93;
                  v148.__r_.__value_.__r.__words[2] = *((void *)v93 + 2);
                  *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v94;
                }
                if ((v148.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  uint64_t v95 = &v148;
                }
                else {
                  uint64_t v95 = (std::string *)v148.__r_.__value_.__r.__words[0];
                }
                if ((v148.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  std::string::size_type size = HIBYTE(v148.__r_.__value_.__r.__words[2]);
                }
                else {
                  std::string::size_type size = v148.__r_.__value_.__l.__size_;
                }
                uint64_t v97 = std::string::append(&v151, (const std::string::value_type *)v95, size);
                long long v98 = *(_OWORD *)&v97->__r_.__value_.__l.__data_;
                v154.__r_.__value_.__r.__words[2] = v97->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v98;
                v97->__r_.__value_.__l.__size_ = 0;
                v97->__r_.__value_.__r.__words[2] = 0;
                v97->__r_.__value_.__r.__words[0] = 0;
                BOOL v99 = std::string::append(&v154, "' is also an input to the model. However, for this tensor the rank provided in the layer description");
                long long v100 = *(_OWORD *)&v99->__r_.__value_.__l.__data_;
                v155.__r_.__value_.__r.__words[2] = v99->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v155.__r_.__value_.__l.__data_ = v100;
                v99->__r_.__value_.__l.__size_ = 0;
                v99->__r_.__value_.__r.__words[2] = 0;
                v99->__r_.__value_.__r.__words[0] = 0;
                uint64_t v101 = std::string::append(&v155, " does not match the one provided in the model description");
                long long v102 = *(_OWORD *)&v101->__r_.__value_.__l.__data_;
                v152.__r_.__value_.__r.__words[2] = v101->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v152.__r_.__value_.__l.__data_ = v102;
                v101->__r_.__value_.__l.__size_ = 0;
                v101->__r_.__value_.__r.__words[2] = 0;
                v101->__r_.__value_.__r.__words[0] = 0;
                if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v155.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v154.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v148.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v151.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v150.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v149.__r_.__value_.__l.__data_);
                }
LABEL_155:
                void *v51 = 13;
                std::operator+<char>();
                goto LABEL_207;
              }
              int v19 = *(void **)(*(void *)(v11 + 32) + 8 * v13 + 8);
            }
            if (v142 == std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>((uint64_t)v143, v19))
            {
              int v22 = *(_DWORD *)(v17 + 36);
              v152.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
              *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v143, v19, (long long **)&v152)+ 14) = v22;
            }
            else
            {
              v152.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
              if (*((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v143, v19, (long long **)&v152)+ 14) != *(_DWORD *)(v17 + 36))
              {
                uint64_t v52 = *(long long **)(*(void *)(v11 + 32) + 8 * v13 + 8);
                if (*((char *)v52 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(&v154, *(const std::string::value_type **)v52, *((void *)v52 + 1));
                }
                else
                {
                  long long v53 = *v52;
                  v154.__r_.__value_.__r.__words[2] = *((void *)v52 + 2);
                  *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v53;
                }
                std::string v54 = (void *)v140;
                int v103 = std::string::insert(&v154, 0, "Inconsistent rank for the blob named '");
                long long v104 = *(_OWORD *)&v103->__r_.__value_.__l.__data_;
                v155.__r_.__value_.__r.__words[2] = v103->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v155.__r_.__value_.__l.__data_ = v104;
                v103->__r_.__value_.__l.__size_ = 0;
                v103->__r_.__value_.__r.__words[2] = 0;
                v103->__r_.__value_.__r.__words[0] = 0;
                int v105 = std::string::append(&v155, "'.");
                long long v106 = *(_OWORD *)&v105->__r_.__value_.__l.__data_;
                v152.__r_.__value_.__r.__words[2] = v105->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v152.__r_.__value_.__l.__data_ = v106;
                v105->__r_.__value_.__l.__size_ = 0;
                v105->__r_.__value_.__r.__words[2] = 0;
                v105->__r_.__value_.__r.__words[0] = 0;
                if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v155.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v154.__r_.__value_.__l.__data_);
                }
                goto LABEL_206;
              }
            }
            ++v13;
            v16 -= 8;
            uint64_t v9 = (uint64_t)v141;
            if (!v16) {
              goto LABEL_25;
            }
          }
        }
        uint64_t v125 = *(long long **)(v11 + 112);
        if (*((char *)v125 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v154, *(const std::string::value_type **)v125, *((void *)v125 + 1));
        }
        else
        {
          long long v126 = *v125;
          v154.__r_.__value_.__r.__words[2] = *((void *)v125 + 2);
          *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v126;
        }
        std::string v54 = (void *)v140;
        std::string v129 = std::string::insert(&v154, 0, "Layer '");
        long long v130 = *(_OWORD *)&v129->__r_.__value_.__l.__data_;
        v155.__r_.__value_.__r.__words[2] = v129->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v155.__r_.__value_.__l.__data_ = v130;
        v129->__r_.__value_.__l.__size_ = 0;
        v129->__r_.__value_.__r.__words[2] = 0;
        v129->__r_.__value_.__r.__words[0] = 0;
        int v131 = std::string::append(&v155, "''s input and inputTensors have different lengths");
        long long v132 = *(_OWORD *)&v131->__r_.__value_.__l.__data_;
        v152.__r_.__value_.__r.__words[2] = v131->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v152.__r_.__value_.__l.__data_ = v132;
        v131->__r_.__value_.__l.__size_ = 0;
        v131->__r_.__value_.__r.__words[2] = 0;
        v131->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v155.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v154.__r_.__value_.__l.__data_);
        }
        goto LABEL_206;
      }
LABEL_25:
      uint64_t v23 = *(int *)(v11 + 96);
      if (v23)
      {
        if (*(_DWORD *)(v11 + 48) == v23)
        {
          uint64_t v24 = 0;
          uint64_t v25 = *(void *)(v11 + 104);
          if (v25) {
            uint64_t v26 = v25 + 8;
          }
          else {
            uint64_t v26 = 0;
          }
          uint64_t v27 = 8 * v23;
          while (1)
          {
            uint64_t v28 = *(void *)(v26 + 8 * v24);
            CoreML::validateTensorMessage((CoreML *)&v152, (const CoreML::Specification::Tensor *)*(unsigned int *)(v28 + 16), (const CoreML::Specification::NeuralNetworkLayer *)*(unsigned int *)(v28 + 36), *(void *)(v11 + 112));
            int v29 = (int)v152.__r_.__value_.__l.__data_;
            std::string::size_type v156 = v152.__r_.__value_.__r.__words[0];
            if (SHIBYTE(v158) < 0)
            {
              operator delete((void *)v157);
              int v29 = v156;
            }
            long long v157 = *(_OWORD *)&v152.__r_.__value_.__r.__words[1];
            uint64_t v158 = v153;
            if ((v29 & 0xFFFFFFEF) != 0) {
              break;
            }
            uint64_t v30 = *(void **)(*(void *)(v11 + 56) + 8 * v24 + 8);
            if (v144 != std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>(v9, v30))
            {
              uint64_t v31 = (uint64_t **)v9;
              int v32 = *(_DWORD *)(v28 + 36);
              v152.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
              if (v32 != *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v31, v30, (long long **)&v152)+ 14))
              {
                BOOL v66 = *(long long **)(v11 + 112);
                if (*((char *)v66 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(&v149, *(const std::string::value_type **)v66, *((void *)v66 + 1));
                }
                else
                {
                  long long v67 = *v66;
                  v149.__r_.__value_.__r.__words[2] = *((void *)v66 + 2);
                  *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v67;
                }
                uint64_t v51 = (void *)v140;
                uint64_t v107 = std::string::insert(&v149, 0, "Layer '");
                long long v108 = *(_OWORD *)&v107->__r_.__value_.__l.__data_;
                v150.__r_.__value_.__r.__words[2] = v107->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v150.__r_.__value_.__l.__data_ = v108;
                v107->__r_.__value_.__l.__size_ = 0;
                v107->__r_.__value_.__r.__words[2] = 0;
                v107->__r_.__value_.__r.__words[0] = 0;
                long long v109 = std::string::append(&v150, "''s output '");
                long long v110 = *(_OWORD *)&v109->__r_.__value_.__l.__data_;
                v151.__r_.__value_.__r.__words[2] = v109->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v151.__r_.__value_.__l.__data_ = v110;
                v109->__r_.__value_.__l.__size_ = 0;
                v109->__r_.__value_.__r.__words[2] = 0;
                v109->__r_.__value_.__r.__words[0] = 0;
                int v111 = *(long long **)(*(void *)(v11 + 56) + 8 * v24 + 8);
                if (*((char *)v111 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(&v148, *(const std::string::value_type **)v111, *((void *)v111 + 1));
                }
                else
                {
                  long long v112 = *v111;
                  v148.__r_.__value_.__r.__words[2] = *((void *)v111 + 2);
                  *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v112;
                }
                if ((v148.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  long long v113 = &v148;
                }
                else {
                  long long v113 = (std::string *)v148.__r_.__value_.__r.__words[0];
                }
                if ((v148.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  std::string::size_type v114 = HIBYTE(v148.__r_.__value_.__r.__words[2]);
                }
                else {
                  std::string::size_type v114 = v148.__r_.__value_.__l.__size_;
                }
                long long v115 = std::string::append(&v151, (const std::string::value_type *)v113, v114);
                long long v116 = *(_OWORD *)&v115->__r_.__value_.__l.__data_;
                v154.__r_.__value_.__r.__words[2] = v115->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v116;
                v115->__r_.__value_.__l.__size_ = 0;
                v115->__r_.__value_.__r.__words[2] = 0;
                v115->__r_.__value_.__r.__words[0] = 0;
                std::string::size_type v117 = std::string::append(&v154, "' is also an output of the model. However, for this tensor the rank provided in the layer description");
                long long v118 = *(_OWORD *)&v117->__r_.__value_.__l.__data_;
                v155.__r_.__value_.__r.__words[2] = v117->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v155.__r_.__value_.__l.__data_ = v118;
                v117->__r_.__value_.__l.__size_ = 0;
                v117->__r_.__value_.__r.__words[2] = 0;
                v117->__r_.__value_.__r.__words[0] = 0;
                std::string::size_type v119 = std::string::append(&v155, " does not match the one provided in the model description");
                long long v120 = *(_OWORD *)&v119->__r_.__value_.__l.__data_;
                v152.__r_.__value_.__r.__words[2] = v119->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v152.__r_.__value_.__l.__data_ = v120;
                v119->__r_.__value_.__l.__size_ = 0;
                v119->__r_.__value_.__r.__words[2] = 0;
                v119->__r_.__value_.__r.__words[0] = 0;
                if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v155.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v154.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v148.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v151.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v150.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v149.__r_.__value_.__l.__data_);
                }
                goto LABEL_155;
              }
              uint64_t v30 = *(void **)(*(void *)(v11 + 56) + 8 * v24 + 8);
            }
            if (v142 == std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>((uint64_t)v143, v30))
            {
              int v33 = *(_DWORD *)(v28 + 36);
              v152.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
              *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v143, v30, (long long **)&v152)+ 14) = v33;
            }
            else
            {
              v152.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
              if (*((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v143, v30, (long long **)&v152)+ 14) != *(_DWORD *)(v28 + 36))
              {
                int v68 = *(long long **)(*(void *)(v11 + 56) + 8 * v24 + 8);
                if (*((char *)v68 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(&v154, *(const std::string::value_type **)v68, *((void *)v68 + 1));
                }
                else
                {
                  long long v69 = *v68;
                  v154.__r_.__value_.__r.__words[2] = *((void *)v68 + 2);
                  *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v69;
                }
                std::string v54 = (void *)v140;
                std::string::size_type v121 = std::string::insert(&v154, 0, "Inconsistent rank for the blob named '");
                long long v122 = *(_OWORD *)&v121->__r_.__value_.__l.__data_;
                v155.__r_.__value_.__r.__words[2] = v121->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v155.__r_.__value_.__l.__data_ = v122;
                v121->__r_.__value_.__l.__size_ = 0;
                v121->__r_.__value_.__r.__words[2] = 0;
                v121->__r_.__value_.__r.__words[0] = 0;
                uint64_t v123 = std::string::append(&v155, "'.");
                long long v124 = *(_OWORD *)&v123->__r_.__value_.__l.__data_;
                v152.__r_.__value_.__r.__words[2] = v123->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v152.__r_.__value_.__l.__data_ = v124;
                v123->__r_.__value_.__l.__size_ = 0;
                v123->__r_.__value_.__r.__words[2] = 0;
                v123->__r_.__value_.__r.__words[0] = 0;
                if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v155.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v154.__r_.__value_.__l.__data_);
                }
                goto LABEL_206;
              }
            }
            ++v24;
            v27 -= 8;
            uint64_t v9 = (uint64_t)v141;
            if (!v27) {
              goto LABEL_42;
            }
          }
LABEL_62:
          *(void *)uint64_t v140 = v156;
          *(_OWORD *)(v140 + 8) = v157;
          *(void *)(v140 + 24) = v158;
LABEL_93:
          long long v157 = 0uLL;
          uint64_t v158 = 0;
          goto LABEL_209;
        }
        std::string v127 = *(long long **)(v11 + 112);
        if (*((char *)v127 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v154, *(const std::string::value_type **)v127, *((void *)v127 + 1));
        }
        else
        {
          long long v128 = *v127;
          v154.__r_.__value_.__r.__words[2] = *((void *)v127 + 2);
          *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v128;
        }
        uint64_t v133 = std::string::insert(&v154, 0, "Layer '");
        std::string v54 = (void *)v140;
        long long v134 = *(_OWORD *)&v133->__r_.__value_.__l.__data_;
        v155.__r_.__value_.__r.__words[2] = v133->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v155.__r_.__value_.__l.__data_ = v134;
        v133->__r_.__value_.__l.__size_ = 0;
        v133->__r_.__value_.__r.__words[2] = 0;
        v133->__r_.__value_.__r.__words[0] = 0;
        BOOL v135 = std::string::append(&v155, "''s output and \"outputTensors\" property have different lengths");
        long long v136 = *(_OWORD *)&v135->__r_.__value_.__l.__data_;
        v152.__r_.__value_.__r.__words[2] = v135->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v152.__r_.__value_.__l.__data_ = v136;
        v135->__r_.__value_.__l.__size_ = 0;
        v135->__r_.__value_.__r.__words[2] = 0;
        v135->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v155.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v154.__r_.__value_.__l.__data_);
        }
LABEL_206:
        *std::string v54 = 13;
        std::operator+<char>();
        goto LABEL_207;
      }
    }
LABEL_42:
    CoreML::NeuralNetworkSpecValidator::validateLayer((void **)&v152.__r_.__value_.__l.__data_, v139, v11);
    int v34 = (int)v152.__r_.__value_.__l.__data_;
    std::string::size_type v156 = v152.__r_.__value_.__r.__words[0];
    a1 = v140;
    if (SHIBYTE(v158) < 0)
    {
      operator delete((void *)v157);
      int v34 = v156;
    }
    long long v157 = *(_OWORD *)&v152.__r_.__value_.__r.__words[1];
    uint64_t v158 = v153;
    if ((v34 & 0xFFFFFFEF) != 0) {
      goto LABEL_92;
    }
    uint64_t v35 = *(void *)(v11 + 32);
    uint64_t v36 = v35 ? (void **)(v35 + 8) : 0;
    uint64_t v37 = *(int *)(v11 + 24);
    if (v37) {
      break;
    }
LABEL_52:
    uint64_t v40 = *(void *)(v11 + 56);
    if (v40) {
      long long v41 = (uint64_t *)(v40 + 8);
    }
    else {
      long long v41 = 0;
    }
    uint64_t v42 = *(int *)(v11 + 48);
    if (v42)
    {
      uint64_t v43 = 8 * v42;
      while (1)
      {
        uint64_t v44 = *v41;
        if (v145 != std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>((uint64_t)v10, (void *)*v41)&& *(_DWORD *)(v11 + 140) != 600)
        {
          break;
        }
        uint64_t v45 = std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v10, (void *)v44, v44);
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)v45 + 7, *(void **)(v11 + 112), *(void *)(v11 + 112));
        ++v41;
        v43 -= 8;
        if (!v43) {
          goto LABEL_60;
        }
      }
      uint64_t v48 = std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v10, (void *)v44, v44)[7];
      if (*(char *)(v48 + 55) < 0) {
        std::string::__init_copy_ctor_external(&v152, *(const std::string::value_type **)(v48 + 32), *(void *)(v48 + 40));
      }
      else {
        std::string v152 = *(std::string *)(v48 + 32);
      }
      uint64_t v70 = *(long long **)(v11 + 112);
      if (*((char *)v70 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v147, *(const std::string::value_type **)v70, *((void *)v70 + 1));
      }
      else
      {
        long long v71 = *v70;
        v147.__r_.__value_.__r.__words[2] = *((void *)v70 + 2);
        *(_OWORD *)&v147.__r_.__value_.__l.__data_ = v71;
      }
      int v72 = std::string::insert(&v147, 0, "Layer '");
      long long v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
      v148.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v73;
      v72->__r_.__value_.__l.__size_ = 0;
      v72->__r_.__value_.__r.__words[2] = 0;
      v72->__r_.__value_.__r.__words[0] = 0;
      int v74 = std::string::append(&v148, "' produces an output named '");
      long long v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
      v149.__r_.__value_.__r.__words[2] = v74->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v75;
      v74->__r_.__value_.__l.__size_ = 0;
      v74->__r_.__value_.__r.__words[2] = 0;
      v74->__r_.__value_.__r.__words[0] = 0;
      if (*(char *)(v44 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v146, *(const std::string::value_type **)v44, *(void *)(v44 + 8));
      }
      else
      {
        long long v76 = *(_OWORD *)v44;
        v146.__r_.__value_.__r.__words[2] = *(void *)(v44 + 16);
        *(_OWORD *)&v146.__r_.__value_.__l.__data_ = v76;
      }
      if ((v146.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v77 = &v146;
      }
      else {
        uint64_t v77 = (std::string *)v146.__r_.__value_.__r.__words[0];
      }
      if ((v146.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v78 = HIBYTE(v146.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v78 = v146.__r_.__value_.__l.__size_;
      }
      uint64_t v79 = std::string::append(&v149, (const std::string::value_type *)v77, v78);
      long long v80 = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
      v150.__r_.__value_.__r.__words[2] = v79->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v150.__r_.__value_.__l.__data_ = v80;
      v79->__r_.__value_.__l.__size_ = 0;
      v79->__r_.__value_.__r.__words[2] = 0;
      v79->__r_.__value_.__r.__words[0] = 0;
      long long v81 = std::string::append(&v150, "' which is also an output produced by the layer '");
      long long v82 = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
      v151.__r_.__value_.__r.__words[2] = v81->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v151.__r_.__value_.__l.__data_ = v82;
      v81->__r_.__value_.__l.__size_ = 0;
      v81->__r_.__value_.__r.__words[2] = 0;
      v81->__r_.__value_.__r.__words[0] = 0;
      if ((v152.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        __int32 v83 = &v152;
      }
      else {
        __int32 v83 = (std::string *)v152.__r_.__value_.__r.__words[0];
      }
      if ((v152.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v84 = HIBYTE(v152.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v84 = v152.__r_.__value_.__l.__size_;
      }
      std::string v85 = std::string::append(&v151, (const std::string::value_type *)v83, v84);
      long long v86 = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
      v154.__r_.__value_.__r.__words[2] = v85->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v86;
      v85->__r_.__value_.__l.__size_ = 0;
      v85->__r_.__value_.__r.__words[2] = 0;
      v85->__r_.__value_.__r.__words[0] = 0;
      long long v87 = std::string::append(&v154, "'.");
      long long v88 = *(_OWORD *)&v87->__r_.__value_.__l.__data_;
      v155.__r_.__value_.__r.__words[2] = v87->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v155.__r_.__value_.__l.__data_ = v88;
      v87->__r_.__value_.__l.__size_ = 0;
      v87->__r_.__value_.__r.__words[2] = 0;
      v87->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v154.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v151.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v150.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v146.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v149.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v148.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v147.__r_.__value_.__l.__data_);
      }
      *(void *)uint64_t v140 = 13;
      std::operator+<char>();
      if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v155.__r_.__value_.__l.__data_);
      }
      goto LABEL_207;
    }
LABEL_60:
    int v7 = v138 + 1;
    a2 = v139;
    if (v138 + 1 == v137) {
      goto LABEL_61;
    }
  }
  uint64_t v38 = 8 * v37;
  while (1)
  {
    uint64_t v39 = (long long *)*v36;
    if (v145 == std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>((uint64_t)v10, *v36))break; {
    ++v36;
    }
    v38 -= 8;
    if (!v38) {
      goto LABEL_52;
    }
  }
  uint64_t v46 = *(long long **)(v11 + 112);
  if (*((char *)v46 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v150, *(const std::string::value_type **)v46, *((void *)v46 + 1));
  }
  else
  {
    long long v47 = *v46;
    v150.__r_.__value_.__r.__words[2] = *((void *)v46 + 2);
    *(_OWORD *)&v150.__r_.__value_.__l.__data_ = v47;
  }
  uint64_t v55 = std::string::insert(&v150, 0, "Layer '");
  long long v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
  v151.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v151.__r_.__value_.__l.__data_ = v56;
  v55->__r_.__value_.__l.__size_ = 0;
  v55->__r_.__value_.__r.__words[2] = 0;
  v55->__r_.__value_.__r.__words[0] = 0;
  uint64_t v57 = std::string::append(&v151, "' consumes an input named '");
  long long v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
  v154.__r_.__value_.__r.__words[2] = v57->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v58;
  v57->__r_.__value_.__l.__size_ = 0;
  v57->__r_.__value_.__r.__words[2] = 0;
  v57->__r_.__value_.__r.__words[0] = 0;
  if (*((char *)v39 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v149, *(const std::string::value_type **)v39, *((void *)v39 + 1));
  }
  else
  {
    long long v59 = *v39;
    v149.__r_.__value_.__r.__words[2] = *((void *)v39 + 2);
    *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v59;
  }
  if ((v149.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v60 = &v149;
  }
  else {
    int v60 = (std::string *)v149.__r_.__value_.__r.__words[0];
  }
  if ((v149.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v61 = HIBYTE(v149.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v61 = v149.__r_.__value_.__l.__size_;
  }
  uint64_t v62 = std::string::append(&v154, (const std::string::value_type *)v60, v61);
  long long v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
  v155.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v155.__r_.__value_.__l.__data_ = v63;
  v62->__r_.__value_.__l.__size_ = 0;
  v62->__r_.__value_.__r.__words[2] = 0;
  v62->__r_.__value_.__r.__words[0] = 0;
  uint64_t v64 = std::string::append(&v155, "' which is not present in this network.");
  long long v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
  v152.__r_.__value_.__r.__words[2] = v64->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v152.__r_.__value_.__l.__data_ = v65;
  v64->__r_.__value_.__l.__size_ = 0;
  v64->__r_.__value_.__r.__words[2] = 0;
  v64->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v155.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v149.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v151.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v150.__r_.__value_.__l.__data_);
  }
  *(void *)uint64_t v140 = 13;
  std::operator+<char>();
LABEL_207:
  if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v152.__r_.__value_.__l.__data_);
  }
LABEL_209:
  if (SHIBYTE(v158) < 0) {
    operator delete((void *)v157);
  }
}

void sub_19EB0C57C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *__p,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v59 - 89) < 0) {
    operator delete(*(void **)(v59 - 112));
  }
  _Unwind_Resume(exception_object);
}

void CoreML::validate<(MLModelType)500>(uint64_t a1, uint64_t a2)
{
  uint64_t v111 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a2 + 16)) {
    uint64_t v4 = *(uint64_t **)(a2 + 16);
  }
  else {
    uint64_t v4 = &CoreML::Specification::_ModelDescription_default_instance_;
  }
  std::string::basic_string[abi:ne180100]<0>(&v105, "outputs");
  CoreML::validateInputOutputTypes((CoreML::Result *)a1, *((_DWORD *)v4 + 12), v4[7], 2);
  if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v105.__r_.__value_.__l.__data_);
  }
  if ((*(_DWORD *)a1 & 0xFFFFFFEF) != 0) {
    return;
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  uint64_t v96 = 0;
  uint64_t v97 = 0;
  uint64_t v95 = (uint64_t *)&v96;
  if (*(void *)(a2 + 16)) {
    uint64_t v6 = *(uint64_t **)(a2 + 16);
  }
  else {
    uint64_t v6 = &CoreML::Specification::_ModelDescription_default_instance_;
  }
  if (*(_DWORD *)(a2 + 44) == 500)
  {
    int v7 = *(uint64_t **)(a2 + 32);
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v5);
    int v7 = &CoreML::Specification::_NeuralNetwork_default_instance_;
  }
  int v8 = *(unsigned __int8 *)(a2 + 28);
  CoreML::Result::Result((CoreML::Result *)v109);
  uint64_t v9 = v6[4];
  if (v9) {
    uint64_t v10 = (uint64_t *)(v9 + 8);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *((int *)v6 + 6);
  int v91 = v8;
  if (v11)
  {
    uint64_t v12 = 8 * v11 - 8;
    do
    {
      uint64_t v13 = *v10++;
      uint64_t v14 = *(uint64_t **)(v13 + 32);
      if (!v14) {
        uint64_t v14 = &CoreML::Specification::_FeatureType_default_instance_;
      }
      int v15 = *((_DWORD *)v14 + 9);
      BOOL v16 = v15 != 5;
      BOOL v17 = v15 == 5 || v12 == 0;
      v12 -= 8;
    }
    while (!v17);
  }
  else
  {
    BOOL v16 = 1;
  }
  int v18 = *((_DWORD *)v7 + 18);
  int v19 = *((_DWORD *)v7 + 19);
  uint64_t v20 = v7[4];
  if (v20) {
    int v21 = (uint64_t *)(v20 + 8);
  }
  else {
    int v21 = 0;
  }
  uint64_t v22 = *((int *)v7 + 6);
  if (v22)
  {
    uint64_t v23 = 8 * v22;
    while ((CoreML::isIOS12NeuralNetworkLayer(*v21) & 1) != 0)
    {
      ++v21;
      v23 -= 8;
      if (!v23) {
        goto LABEL_36;
      }
    }
    if (v18) {
      char v32 = 1;
    }
    else {
      char v32 = v16;
    }
    if ((v32 & 1) == 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&v105, "Neural Network Multi-Array input shape mapping cannot be 'RANK5_ARRAY_MAPPING' if the network contains a layer added in version 4 (iOS 13) or later. Use 'EXACT_ARRAY_MAPPING' instead.");
      uint64_t v92 = 12;
      std::operator+<char>();
      goto LABEL_66;
    }
    BOOL v24 = 1;
  }
  else
  {
LABEL_36:
    BOOL v24 = (v18 | v19) != 0;
  }
  if (v18) {
    BOOL v25 = 1;
  }
  else {
    BOOL v25 = v19 == 0;
  }
  char v26 = v25 || v16;
  if ((v26 & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v105, "Neural Network Multi-Array input shape mapping cannot be 'RANK5_ARRAY_MAPPING' if the image input Shape mapping is not 'RANK5_IMAGE_MAPPING'");
    uint64_t v92 = 12;
    std::operator+<char>();
    goto LABEL_66;
  }
  if (!*((_DWORD *)v6 + 12))
  {
    std::string::basic_string[abi:ne180100]<0>(&v105, "Neural networks produce at least one output.");
    uint64_t v92 = 12;
    std::operator+<char>();
    goto LABEL_66;
  }
  if (!*((_DWORD *)v7 + 6))
  {
    std::string::basic_string[abi:ne180100]<0>(&v105, "Neural networks require at least one layer.");
    uint64_t v92 = 13;
    std::operator+<char>();
    goto LABEL_66;
  }
  uint64_t v27 = *((unsigned int *)v6 + 6);
  if ((int)v27 >= 1)
  {
    uint64_t v28 = v6[4];
    if (v28) {
      uint64_t v29 = v28 + 8;
    }
    else {
      uint64_t v29 = 0;
    }
    uint64_t v30 = 8 * v27;
    do
    {
      uint64_t v31 = *(uint64_t **)(*(void *)v29 + 32);
      if (!v31) {
        uint64_t v31 = &CoreML::Specification::_FeatureType_default_instance_;
      }
      if (*((_DWORD *)v31 + 9) != 8 && !*((unsigned char *)v31 + 16)) {
        goto LABEL_106;
      }
      v29 += 8;
      v30 -= 8;
    }
    while (v30);
    std::string::basic_string[abi:ne180100]<0>(&v105, "Neural networks require at least one non-optional input.");
    uint64_t v92 = 12;
    std::operator+<char>();
LABEL_66:
    if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v105.__r_.__value_.__l.__data_);
    }
    goto LABEL_68;
  }
LABEL_106:
  std::string::basic_string[abi:ne180100]<0>(&v105, "inputs");
  CoreML::validateInputOutputTypes((CoreML::Result *)&v92, *((_DWORD *)v6 + 6), v6[4], 1);
  if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v105.__r_.__value_.__l.__data_);
  }
  if ((v92 & 0xFFFFFFEF) != 0) {
    goto LABEL_68;
  }
  if (SHIBYTE(v94) < 0) {
    operator delete(__p[0]);
  }
  v104[0] = 0;
  v104[1] = 0;
  int v103 = v104;
  if (v24)
  {
    uint64_t v49 = v6[4];
    if (v49) {
      uint64_t v50 = v49 + 8;
    }
    else {
      uint64_t v50 = 0;
    }
    uint64_t v51 = *((int *)v6 + 6);
    if (v51)
    {
      uint64_t v52 = 8 * v51;
      while (1)
      {
        uint64_t v53 = *(void *)v50;
        std::string v54 = *(uint64_t **)(*(void *)v50 + 32);
        if (!v54) {
          std::string v54 = &CoreML::Specification::_FeatureType_default_instance_;
        }
        int v55 = *((_DWORD *)v54 + 9);
        if (v55 == 4) {
          break;
        }
        if (v55 == 5)
        {
          if (!*((_DWORD *)v7 + 18))
          {
            v105.__r_.__value_.__r.__words[0] = *(void *)(v53 + 16);
            long long v58 = std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v103, v105.__r_.__value_.__l.__data_, (long long **)&v105);
            goto LABEL_127;
          }
          int v56 = *(_DWORD *)(v54[3] + 16);
          v105.__r_.__value_.__r.__words[0] = *(void *)(v53 + 16);
          *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v103, v105.__r_.__value_.__l.__data_, (long long **)&v105)+ 14) = v56;
        }
LABEL_129:
        v50 += 8;
        v52 -= 8;
        if (!v52) {
          goto LABEL_130;
        }
      }
      uint64_t v57 = *(void **)(v53 + 16);
      if (*((_DWORD *)v7 + 19))
      {
        v105.__r_.__value_.__r.__words[0] = *(void *)(v53 + 16);
        long long v58 = std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v103, v57, (long long **)&v105);
        int v59 = 4;
      }
      else
      {
        v105.__r_.__value_.__r.__words[0] = *(void *)(v53 + 16);
        long long v58 = std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v103, v57, (long long **)&v105);
LABEL_127:
        int v59 = 5;
      }
      *((_DWORD *)v58 + 14) = v59;
      goto LABEL_129;
    }
LABEL_130:
    uint64_t v60 = v6[7];
    if (v60) {
      uint64_t v61 = v60 + 8;
    }
    else {
      uint64_t v61 = 0;
    }
    uint64_t v62 = *((int *)v6 + 12);
    if (v62)
    {
      uint64_t v63 = 8 * v62;
      do
      {
        uint64_t v64 = *(uint64_t **)(*(void *)v61 + 32);
        if (!v64) {
          uint64_t v64 = &CoreML::Specification::_FeatureType_default_instance_;
        }
        if (*((_DWORD *)v64 + 9) == 5)
        {
          int v65 = *(_DWORD *)(v64[3] + 16);
          if (v65)
          {
            v105.__r_.__value_.__r.__words[0] = *(void *)(*(void *)v61 + 16);
            *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v103, v105.__r_.__value_.__l.__data_, (long long **)&v105)+ 14) = v65;
          }
        }
        v61 += 8;
        v63 -= 8;
      }
      while (v63);
    }
  }
  v102[0] = 0;
  v102[1] = 0;
  uint64_t v101 = (uint64_t *)v102;
  uint64_t v66 = v6[4];
  if (v66) {
    long long v67 = (uint64_t *)(v66 + 8);
  }
  else {
    long long v67 = 0;
  }
  uint64_t v68 = *((int *)v6 + 6);
  if (!v68)
  {
LABEL_178:
    CoreML::NeuralNetworkSpecValidator::NeuralNetworkSpecValidator((uint64_t)&v105, &v101, (uint64_t **)&v103, v24, 0, (uint64_t **)&v103);
    CoreML::NeuralNetworkSpecValidator::validateNeuralNetwork<CoreML::Specification::NeuralNetwork>((uint64_t)&v98, (CoreML::Specification::NeuralNetworkLayer *)&v105, (uint64_t)v7);
    int data = (int)v98.__r_.__value_.__l.__data_;
    *(void *)long long v109 = v98.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v110) < 0)
    {
      operator delete(*(void **)&v109[8]);
      int data = *(_DWORD *)v109;
    }
    *(_OWORD *)&v109[8] = *(_OWORD *)&v98.__r_.__value_.__r.__words[1];
    std::string::size_type v110 = v99;
    if ((data & 0xFFFFFFEF) == 0)
    {
      long long v86 = v107;
      if (v107 != v108)
      {
        do
        {
          if (v102 == std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>((uint64_t)&v101, v86 + 4)|| v86[9] >= 2uLL)
          {
            std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(&v95, v86 + 4, (uint64_t)(v86 + 4));
          }
          long long v87 = (void *)v86[1];
          if (v87)
          {
            do
            {
              long long v88 = (void **)v87;
              long long v87 = (void *)*v87;
            }
            while (v87);
          }
          else
          {
            do
            {
              long long v88 = (void **)v86[2];
              BOOL v17 = *v88 == v86;
              long long v86 = v88;
            }
            while (!v17);
          }
          long long v86 = v88;
        }
        while (v88 != v108);
      }
      if (!v24)
      {
        CoreML::NeuralNetworkShaper::NeuralNetworkShaper(&v98, (uint64_t)v6, (uint64_t)(v7 + 2));
        std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::destroy(v100);
        std::__tree<std::__value_type<std::string,std::set<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<int>>>>::destroy((void *)v98.__r_.__value_.__r.__words[2]);
      }
      if ((*(_DWORD *)v109 & 0xFFFFFFEF) == 0 && v91 != 0)
      {
        validateUpdatableNeuralNetwork<CoreML::Specification::NeuralNetwork>((void **)&v98.__r_.__value_.__l.__data_, (uint64_t)v7);
        int v90 = (int)v98.__r_.__value_.__l.__data_;
        *(void *)long long v109 = v98.__r_.__value_.__r.__words[0];
        if (SHIBYTE(v110) < 0)
        {
          operator delete(*(void **)&v109[8]);
          int v90 = *(_DWORD *)v109;
        }
        *(_OWORD *)&v109[8] = *(_OWORD *)&v98.__r_.__value_.__r.__words[1];
        std::string::size_type v110 = v99;
        if ((v90 & 0xFFFFFFEF) == 0)
        {
          validateTrainingInputs<CoreML::Specification::NeuralNetwork>((CoreML::Result *)&v98, (uint64_t)v6, v7);
          *(void *)long long v109 = v98.__r_.__value_.__r.__words[0];
          if (SHIBYTE(v110) < 0) {
            operator delete(*(void **)&v109[8]);
          }
          *(_OWORD *)&v109[8] = *(_OWORD *)&v98.__r_.__value_.__r.__words[1];
          std::string::size_type v110 = v99;
        }
      }
    }
    uint64_t v92 = *(void *)v109;
    *(_OWORD *)std::string __p = *(_OWORD *)&v109[8];
    std::string::size_type v94 = v110;
    *(void *)&v109[8] = 0;
    *(void *)&v109[16] = 0;
    std::string::size_type v110 = 0;
    std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(v108[0]);
    std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy((char *)v106.__r_.__value_.__r.__words[2]);
    std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy((char *)v105.__r_.__value_.__r.__words[2]);
    goto LABEL_204;
  }
  long long v69 = &v67[v68];
  while (1)
  {
    uint64_t v70 = *v67;
    std::string::basic_string[abi:ne180100]<0>(&v105, "__input");
    long long v71 = std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v101, *(void **)(v70 + 16), *(void *)(v70 + 16));
    std::__tree<std::string>::__assign_unique<std::string const*>((uint64_t **)v71 + 7, &v105, &v106);
    if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v105.__r_.__value_.__l.__data_);
    }
    int v72 = *(uint64_t **)(v70 + 32);
    if (!v72) {
      int v72 = &CoreML::Specification::_FeatureType_default_instance_;
    }
    if (*((_DWORD *)v72 + 9) != 5) {
      goto LABEL_177;
    }
    if (v24)
    {
      CoreML::validateNdMultiArrayInputType((CoreML *)&v105, (const CoreML::Specification::ArrayFeatureType *)v72[3]);
      int v73 = (int)v105.__r_.__value_.__l.__data_;
      *(void *)long long v109 = v105.__r_.__value_.__r.__words[0];
      if (SHIBYTE(v110) < 0)
      {
        operator delete(*(void **)&v109[8]);
        int v73 = *(_DWORD *)v109;
      }
      *(_OWORD *)&v109[8] = *(_OWORD *)&v105.__r_.__value_.__r.__words[1];
      std::string::size_type v110 = v106.__r_.__value_.__r.__words[0];
      if ((v73 & 0xFFFFFFEF) != 0)
      {
        uint64_t v92 = *(void *)v109;
        *(_OWORD *)std::string __p = *(_OWORD *)&v109[8];
        std::string::size_type v94 = v110;
        *(void *)&v109[8] = 0;
        *(void *)&v109[16] = 0;
        std::string::size_type v110 = 0;
        goto LABEL_204;
      }
      goto LABEL_177;
    }
    uint64_t v74 = v72[3];
    int v75 = *(_DWORD *)(v74 + 16);
    if (v75 >= 1 && (v75 | 2) != 3) {
      break;
    }
    int v77 = *(_DWORD *)(v74 + 60);
    if (v77)
    {
      if (v77 == 31)
      {
        int v84 = *(_DWORD *)(*(void *)(v74 + 40) + 24);
        if (v84 == 1) {
          goto LABEL_177;
        }
        BOOL v83 = v84 == 3;
        goto LABEL_175;
      }
      if (v77 != 21) {
        goto LABEL_177;
      }
      uint64_t v78 = *(void *)(v74 + 40);
      uint64_t v79 = *(void *)(v78 + 32);
      uint64_t v80 = v79 ? v79 + 8 : 0;
      uint64_t v81 = *(int *)(v78 + 24);
      if (!v81) {
        goto LABEL_177;
      }
      uint64_t v82 = 8 * v81;
      while ((*(_DWORD *)(*(void *)v80 + 16) | 2) == 3)
      {
        v80 += 8;
        v82 -= 8;
        if (!v82) {
          goto LABEL_177;
        }
      }
    }
    BOOL v83 = 0;
LABEL_175:
    if (v75 <= 0 && !v83) {
      break;
    }
LABEL_177:
    if (++v67 == v69) {
      goto LABEL_178;
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v105, "Input MLMultiArray to neural networks must have dimension 1 (vector) or 3 (image-like arrays).");
  uint64_t v92 = 12;
  std::operator+<char>();
  if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v105.__r_.__value_.__l.__data_);
  }
LABEL_204:
  std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(v102[0]);
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(v104[0]);
LABEL_68:
  if (SHIBYTE(v110) < 0) {
    operator delete(*(void **)&v109[8]);
  }
  if ((v92 & 0xFFFFFFEF) != 0) {
    goto LABEL_71;
  }
  int v33 = *(uint64_t **)(a2 + 16);
  if (!v33) {
    int v33 = &CoreML::Specification::_ModelDescription_default_instance_;
  }
  uint64_t v34 = v33[7];
  uint64_t v35 = v34 ? v34 + 8 : 0;
  uint64_t v36 = *((int *)v33 + 12);
  if (!v36)
  {
LABEL_71:
    *(void *)a1 = v92;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)__p;
    *(void *)(a1 + 24) = v94;
  }
  else
  {
    uint64_t v37 = v35 + 8 * v36;
    while (1)
    {
      uint64_t v38 = *(void **)(*(void *)v35 + 16);
      memset(&v105, 0, sizeof(v105));
      uint64_t v39 = (uint64_t *)v96;
      uint64_t v40 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__count_unique<std::string>(v96, v38);
      if (v40)
      {
        long long v41 = std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>((uint64_t)&v95, v38);
        if (&v96 != (char **)v41)
        {
          uint64_t v42 = v41;
          uint64_t v43 = (uint64_t *)v41[1];
          if (v43)
          {
            do
            {
              uint64_t v44 = v43;
              uint64_t v43 = (uint64_t *)*v43;
            }
            while (v43);
          }
          else
          {
            uint64_t v48 = v41;
            do
            {
              uint64_t v44 = (uint64_t *)v48[2];
              BOOL v17 = *v44 == (void)v48;
              uint64_t v48 = v44;
            }
            while (!v17);
          }
          if (v95 == v41) {
            uint64_t v95 = v44;
          }
          --v97;
          std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v39, v41);
          if (*((char *)v42 + 55) < 0) {
            operator delete((void *)v42[4]);
          }
          operator delete(v42);
        }
      }
      else
      {
        std::operator+<char>();
        uint64_t v45 = std::string::append(&v98, "' which is not produced by any layer in the neural network.");
        std::string::size_type v46 = v45->__r_.__value_.__r.__words[0];
        *(void *)long long v109 = v45->__r_.__value_.__l.__size_;
        *(void *)&v109[7] = *(std::string::size_type *)((char *)&v45->__r_.__value_.__r.__words[1] + 7);
        char v47 = HIBYTE(v45->__r_.__value_.__r.__words[2]);
        v45->__r_.__value_.__l.__size_ = 0;
        v45->__r_.__value_.__r.__words[2] = 0;
        v45->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v105.__r_.__value_.__l.__data_);
        }
        v105.__r_.__value_.__r.__words[0] = v46;
        v105.__r_.__value_.__l.__size_ = *(void *)v109;
        *(std::string::size_type *)((char *)&v105.__r_.__value_.__r.__words[1] + 7) = *(void *)&v109[7];
        *((unsigned char *)&v105.__r_.__value_.__s + 23) = v47;
        if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v98.__r_.__value_.__l.__data_);
        }
        *(void *)a1 = 12;
        std::operator+<char>();
      }
      if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v105.__r_.__value_.__l.__data_);
      }
      if (!v40) {
        break;
      }
      v35 += 8;
      if (v35 == v37) {
        goto LABEL_71;
      }
    }
    if (SHIBYTE(v94) < 0) {
      operator delete(__p[0]);
    }
  }
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(v96);
}

void sub_19EB0D384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::string *a22,void *a23,uint64_t a24,char *a25,uint64_t a26,void *__pa,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,char *a45)
{
  if (*(char *)(v45 - 217) < 0) {
    operator delete(*(void **)(v45 - 240));
  }
  std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(a42);
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(a45);
  if (*(char *)(v45 - 121) < 0) {
    operator delete(*(void **)(v45 - 144));
  }
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(a25);
  _Unwind_Resume(a1);
}

void CoreML::NeuralNetworkSpecValidator::validateNeuralNetwork<CoreML::Specification::NeuralNetwork>(uint64_t a1, CoreML::Specification::NeuralNetworkLayer *a2, uint64_t a3)
{
  CoreML::Result::Result((CoreML::Result *)&v156);
  uint64_t v6 = *(void *)(a3 + 32);
  if (v6) {
    int v7 = (void *)(v6 + 8);
  }
  else {
    int v7 = 0;
  }
  uint64_t v8 = *(int *)(a3 + 24);
  if (!v8)
  {
LABEL_61:
    CoreML::Result::Result((CoreML::Result *)a1);
    goto LABEL_209;
  }
  uint64_t v9 = (uint64_t)a2 + 8;
  int v143 = (uint64_t **)((char *)a2 + 32);
  unint64_t v144 = (void *)((char *)a2 + 16);
  long long v141 = (char *)a2 + 8;
  int v142 = (void *)((char *)a2 + 40);
  uint64_t v10 = (uint64_t **)((char *)a2 + 56);
  uint64_t v145 = (void *)((char *)a2 + 64);
  long long v137 = &v7[v8];
  std::string::size_type v139 = a2;
  uint64_t v140 = a1;
  while (1)
  {
    if ((v156 & 0xFFFFFFEF) != 0)
    {
LABEL_92:
      *(void *)a1 = v156;
      *(_OWORD *)(a1 + 8) = v157;
      *(void *)(a1 + 24) = v158;
      goto LABEL_93;
    }
    uint64_t v138 = v7;
    uint64_t v11 = *v7;
    if (*(unsigned char *)a2)
    {
      uint64_t v12 = *(int *)(v11 + 72);
      if (v12)
      {
        if (*(_DWORD *)(v11 + 24) == v12)
        {
          uint64_t v13 = 0;
          uint64_t v14 = *(void *)(v11 + 80);
          if (v14) {
            uint64_t v15 = v14 + 8;
          }
          else {
            uint64_t v15 = 0;
          }
          uint64_t v16 = 8 * v12;
          while (1)
          {
            uint64_t v17 = *(void *)(v15 + 8 * v13);
            CoreML::validateTensorMessage((CoreML *)&v152, (const CoreML::Specification::Tensor *)*(unsigned int *)(v17 + 16), (const CoreML::Specification::NeuralNetworkLayer *)*(unsigned int *)(v17 + 36), *(void *)(v11 + 112));
            int data = (int)v152.__r_.__value_.__l.__data_;
            std::string::size_type v156 = v152.__r_.__value_.__r.__words[0];
            if (SHIBYTE(v158) < 0)
            {
              operator delete((void *)v157);
              int data = v156;
            }
            long long v157 = *(_OWORD *)&v152.__r_.__value_.__r.__words[1];
            uint64_t v158 = v153;
            if ((data & 0xFFFFFFEF) != 0) {
              goto LABEL_62;
            }
            int v19 = *(void **)(*(void *)(v11 + 32) + 8 * v13 + 8);
            if (v144 != std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>(v9, v19))
            {
              uint64_t v20 = (uint64_t **)v9;
              int v21 = *(_DWORD *)(v17 + 36);
              v152.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
              if (v21 != *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v20, v19, (long long **)&v152)+ 14))
              {
                uint64_t v49 = *(long long **)(v11 + 112);
                if (*((char *)v49 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(&v149, *(const std::string::value_type **)v49, *((void *)v49 + 1));
                }
                else
                {
                  long long v50 = *v49;
                  v149.__r_.__value_.__r.__words[2] = *((void *)v49 + 2);
                  *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v50;
                }
                uint64_t v51 = (void *)v140;
                long long v89 = std::string::insert(&v149, 0, "Layer '");
                long long v90 = *(_OWORD *)&v89->__r_.__value_.__l.__data_;
                v150.__r_.__value_.__r.__words[2] = v89->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v150.__r_.__value_.__l.__data_ = v90;
                v89->__r_.__value_.__l.__size_ = 0;
                v89->__r_.__value_.__r.__words[2] = 0;
                v89->__r_.__value_.__r.__words[0] = 0;
                int v91 = std::string::append(&v150, "''s input '");
                long long v92 = *(_OWORD *)&v91->__r_.__value_.__l.__data_;
                v151.__r_.__value_.__r.__words[2] = v91->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v151.__r_.__value_.__l.__data_ = v92;
                v91->__r_.__value_.__l.__size_ = 0;
                v91->__r_.__value_.__r.__words[2] = 0;
                v91->__r_.__value_.__r.__words[0] = 0;
                int v93 = *(long long **)(*(void *)(v11 + 32) + 8 * v13 + 8);
                if (*((char *)v93 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(&v148, *(const std::string::value_type **)v93, *((void *)v93 + 1));
                }
                else
                {
                  long long v94 = *v93;
                  v148.__r_.__value_.__r.__words[2] = *((void *)v93 + 2);
                  *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v94;
                }
                if ((v148.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  uint64_t v95 = &v148;
                }
                else {
                  uint64_t v95 = (std::string *)v148.__r_.__value_.__r.__words[0];
                }
                if ((v148.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  std::string::size_type size = HIBYTE(v148.__r_.__value_.__r.__words[2]);
                }
                else {
                  std::string::size_type size = v148.__r_.__value_.__l.__size_;
                }
                uint64_t v97 = std::string::append(&v151, (const std::string::value_type *)v95, size);
                long long v98 = *(_OWORD *)&v97->__r_.__value_.__l.__data_;
                v154.__r_.__value_.__r.__words[2] = v97->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v98;
                v97->__r_.__value_.__l.__size_ = 0;
                v97->__r_.__value_.__r.__words[2] = 0;
                v97->__r_.__value_.__r.__words[0] = 0;
                std::string::size_type v99 = std::string::append(&v154, "' is also an input to the model. However, for this tensor the rank provided in the layer description");
                long long v100 = *(_OWORD *)&v99->__r_.__value_.__l.__data_;
                v155.__r_.__value_.__r.__words[2] = v99->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v155.__r_.__value_.__l.__data_ = v100;
                v99->__r_.__value_.__l.__size_ = 0;
                v99->__r_.__value_.__r.__words[2] = 0;
                v99->__r_.__value_.__r.__words[0] = 0;
                uint64_t v101 = std::string::append(&v155, " does not match the one provided in the model description");
                long long v102 = *(_OWORD *)&v101->__r_.__value_.__l.__data_;
                v152.__r_.__value_.__r.__words[2] = v101->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v152.__r_.__value_.__l.__data_ = v102;
                v101->__r_.__value_.__l.__size_ = 0;
                v101->__r_.__value_.__r.__words[2] = 0;
                v101->__r_.__value_.__r.__words[0] = 0;
                if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v155.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v154.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v148.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v151.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v150.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v149.__r_.__value_.__l.__data_);
                }
LABEL_155:
                void *v51 = 13;
                std::operator+<char>();
                goto LABEL_207;
              }
              int v19 = *(void **)(*(void *)(v11 + 32) + 8 * v13 + 8);
            }
            if (v142 == std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>((uint64_t)v143, v19))
            {
              int v22 = *(_DWORD *)(v17 + 36);
              v152.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
              *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v143, v19, (long long **)&v152)+ 14) = v22;
            }
            else
            {
              v152.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
              if (*((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v143, v19, (long long **)&v152)+ 14) != *(_DWORD *)(v17 + 36))
              {
                uint64_t v52 = *(long long **)(*(void *)(v11 + 32) + 8 * v13 + 8);
                if (*((char *)v52 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(&v154, *(const std::string::value_type **)v52, *((void *)v52 + 1));
                }
                else
                {
                  long long v53 = *v52;
                  v154.__r_.__value_.__r.__words[2] = *((void *)v52 + 2);
                  *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v53;
                }
                std::string v54 = (void *)v140;
                int v103 = std::string::insert(&v154, 0, "Inconsistent rank for the blob named '");
                long long v104 = *(_OWORD *)&v103->__r_.__value_.__l.__data_;
                v155.__r_.__value_.__r.__words[2] = v103->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v155.__r_.__value_.__l.__data_ = v104;
                v103->__r_.__value_.__l.__size_ = 0;
                v103->__r_.__value_.__r.__words[2] = 0;
                v103->__r_.__value_.__r.__words[0] = 0;
                std::string v105 = std::string::append(&v155, "'.");
                long long v106 = *(_OWORD *)&v105->__r_.__value_.__l.__data_;
                v152.__r_.__value_.__r.__words[2] = v105->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v152.__r_.__value_.__l.__data_ = v106;
                v105->__r_.__value_.__l.__size_ = 0;
                v105->__r_.__value_.__r.__words[2] = 0;
                v105->__r_.__value_.__r.__words[0] = 0;
                if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v155.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v154.__r_.__value_.__l.__data_);
                }
                goto LABEL_206;
              }
            }
            ++v13;
            v16 -= 8;
            uint64_t v9 = (uint64_t)v141;
            if (!v16) {
              goto LABEL_25;
            }
          }
        }
        uint64_t v125 = *(long long **)(v11 + 112);
        if (*((char *)v125 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v154, *(const std::string::value_type **)v125, *((void *)v125 + 1));
        }
        else
        {
          long long v126 = *v125;
          v154.__r_.__value_.__r.__words[2] = *((void *)v125 + 2);
          *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v126;
        }
        std::string v54 = (void *)v140;
        std::string v129 = std::string::insert(&v154, 0, "Layer '");
        long long v130 = *(_OWORD *)&v129->__r_.__value_.__l.__data_;
        v155.__r_.__value_.__r.__words[2] = v129->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v155.__r_.__value_.__l.__data_ = v130;
        v129->__r_.__value_.__l.__size_ = 0;
        v129->__r_.__value_.__r.__words[2] = 0;
        v129->__r_.__value_.__r.__words[0] = 0;
        int v131 = std::string::append(&v155, "''s input and inputTensors have different lengths");
        long long v132 = *(_OWORD *)&v131->__r_.__value_.__l.__data_;
        v152.__r_.__value_.__r.__words[2] = v131->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v152.__r_.__value_.__l.__data_ = v132;
        v131->__r_.__value_.__l.__size_ = 0;
        v131->__r_.__value_.__r.__words[2] = 0;
        v131->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v155.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v154.__r_.__value_.__l.__data_);
        }
        goto LABEL_206;
      }
LABEL_25:
      uint64_t v23 = *(int *)(v11 + 96);
      if (v23)
      {
        if (*(_DWORD *)(v11 + 48) == v23)
        {
          uint64_t v24 = 0;
          uint64_t v25 = *(void *)(v11 + 104);
          if (v25) {
            uint64_t v26 = v25 + 8;
          }
          else {
            uint64_t v26 = 0;
          }
          uint64_t v27 = 8 * v23;
          while (1)
          {
            uint64_t v28 = *(void *)(v26 + 8 * v24);
            CoreML::validateTensorMessage((CoreML *)&v152, (const CoreML::Specification::Tensor *)*(unsigned int *)(v28 + 16), (const CoreML::Specification::NeuralNetworkLayer *)*(unsigned int *)(v28 + 36), *(void *)(v11 + 112));
            int v29 = (int)v152.__r_.__value_.__l.__data_;
            std::string::size_type v156 = v152.__r_.__value_.__r.__words[0];
            if (SHIBYTE(v158) < 0)
            {
              operator delete((void *)v157);
              int v29 = v156;
            }
            long long v157 = *(_OWORD *)&v152.__r_.__value_.__r.__words[1];
            uint64_t v158 = v153;
            if ((v29 & 0xFFFFFFEF) != 0) {
              break;
            }
            uint64_t v30 = *(void **)(*(void *)(v11 + 56) + 8 * v24 + 8);
            if (v144 != std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>(v9, v30))
            {
              uint64_t v31 = (uint64_t **)v9;
              int v32 = *(_DWORD *)(v28 + 36);
              v152.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
              if (v32 != *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v31, v30, (long long **)&v152)+ 14))
              {
                uint64_t v66 = *(long long **)(v11 + 112);
                if (*((char *)v66 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(&v149, *(const std::string::value_type **)v66, *((void *)v66 + 1));
                }
                else
                {
                  long long v67 = *v66;
                  v149.__r_.__value_.__r.__words[2] = *((void *)v66 + 2);
                  *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v67;
                }
                uint64_t v51 = (void *)v140;
                uint64_t v107 = std::string::insert(&v149, 0, "Layer '");
                long long v108 = *(_OWORD *)&v107->__r_.__value_.__l.__data_;
                v150.__r_.__value_.__r.__words[2] = v107->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v150.__r_.__value_.__l.__data_ = v108;
                v107->__r_.__value_.__l.__size_ = 0;
                v107->__r_.__value_.__r.__words[2] = 0;
                v107->__r_.__value_.__r.__words[0] = 0;
                long long v109 = std::string::append(&v150, "''s output '");
                long long v110 = *(_OWORD *)&v109->__r_.__value_.__l.__data_;
                v151.__r_.__value_.__r.__words[2] = v109->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v151.__r_.__value_.__l.__data_ = v110;
                v109->__r_.__value_.__l.__size_ = 0;
                v109->__r_.__value_.__r.__words[2] = 0;
                v109->__r_.__value_.__r.__words[0] = 0;
                uint64_t v111 = *(long long **)(*(void *)(v11 + 56) + 8 * v24 + 8);
                if (*((char *)v111 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(&v148, *(const std::string::value_type **)v111, *((void *)v111 + 1));
                }
                else
                {
                  long long v112 = *v111;
                  v148.__r_.__value_.__r.__words[2] = *((void *)v111 + 2);
                  *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v112;
                }
                if ((v148.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  long long v113 = &v148;
                }
                else {
                  long long v113 = (std::string *)v148.__r_.__value_.__r.__words[0];
                }
                if ((v148.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  std::string::size_type v114 = HIBYTE(v148.__r_.__value_.__r.__words[2]);
                }
                else {
                  std::string::size_type v114 = v148.__r_.__value_.__l.__size_;
                }
                long long v115 = std::string::append(&v151, (const std::string::value_type *)v113, v114);
                long long v116 = *(_OWORD *)&v115->__r_.__value_.__l.__data_;
                v154.__r_.__value_.__r.__words[2] = v115->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v116;
                v115->__r_.__value_.__l.__size_ = 0;
                v115->__r_.__value_.__r.__words[2] = 0;
                v115->__r_.__value_.__r.__words[0] = 0;
                std::string::size_type v117 = std::string::append(&v154, "' is also an output of the model. However, for this tensor the rank provided in the layer description");
                long long v118 = *(_OWORD *)&v117->__r_.__value_.__l.__data_;
                v155.__r_.__value_.__r.__words[2] = v117->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v155.__r_.__value_.__l.__data_ = v118;
                v117->__r_.__value_.__l.__size_ = 0;
                v117->__r_.__value_.__r.__words[2] = 0;
                v117->__r_.__value_.__r.__words[0] = 0;
                std::string::size_type v119 = std::string::append(&v155, " does not match the one provided in the model description");
                long long v120 = *(_OWORD *)&v119->__r_.__value_.__l.__data_;
                v152.__r_.__value_.__r.__words[2] = v119->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v152.__r_.__value_.__l.__data_ = v120;
                v119->__r_.__value_.__l.__size_ = 0;
                v119->__r_.__value_.__r.__words[2] = 0;
                v119->__r_.__value_.__r.__words[0] = 0;
                if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v155.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v154.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v148.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v151.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v150.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v149.__r_.__value_.__l.__data_);
                }
                goto LABEL_155;
              }
              uint64_t v30 = *(void **)(*(void *)(v11 + 56) + 8 * v24 + 8);
            }
            if (v142 == std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>((uint64_t)v143, v30))
            {
              int v33 = *(_DWORD *)(v28 + 36);
              v152.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
              *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v143, v30, (long long **)&v152)+ 14) = v33;
            }
            else
            {
              v152.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
              if (*((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v143, v30, (long long **)&v152)+ 14) != *(_DWORD *)(v28 + 36))
              {
                uint64_t v68 = *(long long **)(*(void *)(v11 + 56) + 8 * v24 + 8);
                if (*((char *)v68 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(&v154, *(const std::string::value_type **)v68, *((void *)v68 + 1));
                }
                else
                {
                  long long v69 = *v68;
                  v154.__r_.__value_.__r.__words[2] = *((void *)v68 + 2);
                  *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v69;
                }
                std::string v54 = (void *)v140;
                std::string::size_type v121 = std::string::insert(&v154, 0, "Inconsistent rank for the blob named '");
                long long v122 = *(_OWORD *)&v121->__r_.__value_.__l.__data_;
                v155.__r_.__value_.__r.__words[2] = v121->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v155.__r_.__value_.__l.__data_ = v122;
                v121->__r_.__value_.__l.__size_ = 0;
                v121->__r_.__value_.__r.__words[2] = 0;
                v121->__r_.__value_.__r.__words[0] = 0;
                uint64_t v123 = std::string::append(&v155, "'.");
                long long v124 = *(_OWORD *)&v123->__r_.__value_.__l.__data_;
                v152.__r_.__value_.__r.__words[2] = v123->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v152.__r_.__value_.__l.__data_ = v124;
                v123->__r_.__value_.__l.__size_ = 0;
                v123->__r_.__value_.__r.__words[2] = 0;
                v123->__r_.__value_.__r.__words[0] = 0;
                if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v155.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v154.__r_.__value_.__l.__data_);
                }
                goto LABEL_206;
              }
            }
            ++v24;
            v27 -= 8;
            uint64_t v9 = (uint64_t)v141;
            if (!v27) {
              goto LABEL_42;
            }
          }
LABEL_62:
          *(void *)uint64_t v140 = v156;
          *(_OWORD *)(v140 + 8) = v157;
          *(void *)(v140 + 24) = v158;
LABEL_93:
          long long v157 = 0uLL;
          uint64_t v158 = 0;
          goto LABEL_209;
        }
        std::string v127 = *(long long **)(v11 + 112);
        if (*((char *)v127 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v154, *(const std::string::value_type **)v127, *((void *)v127 + 1));
        }
        else
        {
          long long v128 = *v127;
          v154.__r_.__value_.__r.__words[2] = *((void *)v127 + 2);
          *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v128;
        }
        uint64_t v133 = std::string::insert(&v154, 0, "Layer '");
        std::string v54 = (void *)v140;
        long long v134 = *(_OWORD *)&v133->__r_.__value_.__l.__data_;
        v155.__r_.__value_.__r.__words[2] = v133->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v155.__r_.__value_.__l.__data_ = v134;
        v133->__r_.__value_.__l.__size_ = 0;
        v133->__r_.__value_.__r.__words[2] = 0;
        v133->__r_.__value_.__r.__words[0] = 0;
        BOOL v135 = std::string::append(&v155, "''s output and \"outputTensors\" property have different lengths");
        long long v136 = *(_OWORD *)&v135->__r_.__value_.__l.__data_;
        v152.__r_.__value_.__r.__words[2] = v135->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v152.__r_.__value_.__l.__data_ = v136;
        v135->__r_.__value_.__l.__size_ = 0;
        v135->__r_.__value_.__r.__words[2] = 0;
        v135->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v155.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v154.__r_.__value_.__l.__data_);
        }
LABEL_206:
        *std::string v54 = 13;
        std::operator+<char>();
        goto LABEL_207;
      }
    }
LABEL_42:
    CoreML::NeuralNetworkSpecValidator::validateLayer((CoreML::NeuralNetworkSpecValidator *)&v152, v139);
    int v34 = (int)v152.__r_.__value_.__l.__data_;
    std::string::size_type v156 = v152.__r_.__value_.__r.__words[0];
    a1 = v140;
    if (SHIBYTE(v158) < 0)
    {
      operator delete((void *)v157);
      int v34 = v156;
    }
    long long v157 = *(_OWORD *)&v152.__r_.__value_.__r.__words[1];
    uint64_t v158 = v153;
    if ((v34 & 0xFFFFFFEF) != 0) {
      goto LABEL_92;
    }
    uint64_t v35 = *(void *)(v11 + 32);
    uint64_t v36 = v35 ? (void **)(v35 + 8) : 0;
    uint64_t v37 = *(int *)(v11 + 24);
    if (v37) {
      break;
    }
LABEL_52:
    uint64_t v40 = *(void *)(v11 + 56);
    if (v40) {
      long long v41 = (uint64_t *)(v40 + 8);
    }
    else {
      long long v41 = 0;
    }
    uint64_t v42 = *(int *)(v11 + 48);
    if (v42)
    {
      uint64_t v43 = 8 * v42;
      while (1)
      {
        uint64_t v44 = *v41;
        if (v145 != std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>((uint64_t)v10, (void *)*v41)&& *(_DWORD *)(v11 + 140) != 600)
        {
          break;
        }
        uint64_t v45 = std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v10, (void *)v44, v44);
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)v45 + 7, *(void **)(v11 + 112), *(void *)(v11 + 112));
        ++v41;
        v43 -= 8;
        if (!v43) {
          goto LABEL_60;
        }
      }
      uint64_t v48 = std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v10, (void *)v44, v44)[7];
      if (*(char *)(v48 + 55) < 0) {
        std::string::__init_copy_ctor_external(&v152, *(const std::string::value_type **)(v48 + 32), *(void *)(v48 + 40));
      }
      else {
        std::string v152 = *(std::string *)(v48 + 32);
      }
      uint64_t v70 = *(long long **)(v11 + 112);
      if (*((char *)v70 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v147, *(const std::string::value_type **)v70, *((void *)v70 + 1));
      }
      else
      {
        long long v71 = *v70;
        v147.__r_.__value_.__r.__words[2] = *((void *)v70 + 2);
        *(_OWORD *)&v147.__r_.__value_.__l.__data_ = v71;
      }
      int v72 = std::string::insert(&v147, 0, "Layer '");
      long long v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
      v148.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v73;
      v72->__r_.__value_.__l.__size_ = 0;
      v72->__r_.__value_.__r.__words[2] = 0;
      v72->__r_.__value_.__r.__words[0] = 0;
      uint64_t v74 = std::string::append(&v148, "' produces an output named '");
      long long v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
      v149.__r_.__value_.__r.__words[2] = v74->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v75;
      v74->__r_.__value_.__l.__size_ = 0;
      v74->__r_.__value_.__r.__words[2] = 0;
      v74->__r_.__value_.__r.__words[0] = 0;
      if (*(char *)(v44 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v146, *(const std::string::value_type **)v44, *(void *)(v44 + 8));
      }
      else
      {
        long long v76 = *(_OWORD *)v44;
        v146.__r_.__value_.__r.__words[2] = *(void *)(v44 + 16);
        *(_OWORD *)&v146.__r_.__value_.__l.__data_ = v76;
      }
      if ((v146.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v77 = &v146;
      }
      else {
        int v77 = (std::string *)v146.__r_.__value_.__r.__words[0];
      }
      if ((v146.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v78 = HIBYTE(v146.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v78 = v146.__r_.__value_.__l.__size_;
      }
      uint64_t v79 = std::string::append(&v149, (const std::string::value_type *)v77, v78);
      long long v80 = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
      v150.__r_.__value_.__r.__words[2] = v79->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v150.__r_.__value_.__l.__data_ = v80;
      v79->__r_.__value_.__l.__size_ = 0;
      v79->__r_.__value_.__r.__words[2] = 0;
      v79->__r_.__value_.__r.__words[0] = 0;
      uint64_t v81 = std::string::append(&v150, "' which is also an output produced by the layer '");
      long long v82 = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
      v151.__r_.__value_.__r.__words[2] = v81->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v151.__r_.__value_.__l.__data_ = v82;
      v81->__r_.__value_.__l.__size_ = 0;
      v81->__r_.__value_.__r.__words[2] = 0;
      v81->__r_.__value_.__r.__words[0] = 0;
      if ((v152.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        BOOL v83 = &v152;
      }
      else {
        BOOL v83 = (std::string *)v152.__r_.__value_.__r.__words[0];
      }
      if ((v152.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v84 = HIBYTE(v152.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v84 = v152.__r_.__value_.__l.__size_;
      }
      std::string v85 = std::string::append(&v151, (const std::string::value_type *)v83, v84);
      long long v86 = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
      v154.__r_.__value_.__r.__words[2] = v85->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v86;
      v85->__r_.__value_.__l.__size_ = 0;
      v85->__r_.__value_.__r.__words[2] = 0;
      v85->__r_.__value_.__r.__words[0] = 0;
      long long v87 = std::string::append(&v154, "'.");
      long long v88 = *(_OWORD *)&v87->__r_.__value_.__l.__data_;
      v155.__r_.__value_.__r.__words[2] = v87->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v155.__r_.__value_.__l.__data_ = v88;
      v87->__r_.__value_.__l.__size_ = 0;
      v87->__r_.__value_.__r.__words[2] = 0;
      v87->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v154.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v151.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v150.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v146.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v149.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v148.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v147.__r_.__value_.__l.__data_);
      }
      *(void *)uint64_t v140 = 13;
      std::operator+<char>();
      if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v155.__r_.__value_.__l.__data_);
      }
      goto LABEL_207;
    }
LABEL_60:
    int v7 = v138 + 1;
    a2 = v139;
    if (v138 + 1 == v137) {
      goto LABEL_61;
    }
  }
  uint64_t v38 = 8 * v37;
  while (1)
  {
    uint64_t v39 = (long long *)*v36;
    if (v145 == std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>((uint64_t)v10, *v36))break; {
    ++v36;
    }
    v38 -= 8;
    if (!v38) {
      goto LABEL_52;
    }
  }
  std::string::size_type v46 = *(long long **)(v11 + 112);
  if (*((char *)v46 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v150, *(const std::string::value_type **)v46, *((void *)v46 + 1));
  }
  else
  {
    long long v47 = *v46;
    v150.__r_.__value_.__r.__words[2] = *((void *)v46 + 2);
    *(_OWORD *)&v150.__r_.__value_.__l.__data_ = v47;
  }
  int v55 = std::string::insert(&v150, 0, "Layer '");
  long long v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
  v151.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v151.__r_.__value_.__l.__data_ = v56;
  v55->__r_.__value_.__l.__size_ = 0;
  v55->__r_.__value_.__r.__words[2] = 0;
  v55->__r_.__value_.__r.__words[0] = 0;
  uint64_t v57 = std::string::append(&v151, "' consumes an input named '");
  long long v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
  v154.__r_.__value_.__r.__words[2] = v57->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v58;
  v57->__r_.__value_.__l.__size_ = 0;
  v57->__r_.__value_.__r.__words[2] = 0;
  v57->__r_.__value_.__r.__words[0] = 0;
  if (*((char *)v39 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v149, *(const std::string::value_type **)v39, *((void *)v39 + 1));
  }
  else
  {
    long long v59 = *v39;
    v149.__r_.__value_.__r.__words[2] = *((void *)v39 + 2);
    *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v59;
  }
  if ((v149.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v60 = &v149;
  }
  else {
    uint64_t v60 = (std::string *)v149.__r_.__value_.__r.__words[0];
  }
  if ((v149.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v61 = HIBYTE(v149.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v61 = v149.__r_.__value_.__l.__size_;
  }
  uint64_t v62 = std::string::append(&v154, (const std::string::value_type *)v60, v61);
  long long v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
  v155.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v155.__r_.__value_.__l.__data_ = v63;
  v62->__r_.__value_.__l.__size_ = 0;
  v62->__r_.__value_.__r.__words[2] = 0;
  v62->__r_.__value_.__r.__words[0] = 0;
  uint64_t v64 = std::string::append(&v155, "' which is not present in this network.");
  long long v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
  v152.__r_.__value_.__r.__words[2] = v64->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v152.__r_.__value_.__l.__data_ = v65;
  v64->__r_.__value_.__l.__size_ = 0;
  v64->__r_.__value_.__r.__words[2] = 0;
  v64->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v155.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v149.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v151.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v150.__r_.__value_.__l.__data_);
  }
  *(void *)uint64_t v140 = 13;
  std::operator+<char>();
LABEL_207:
  if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v152.__r_.__value_.__l.__data_);
  }
LABEL_209:
  if (SHIBYTE(v158) < 0) {
    operator delete((void *)v157);
  }
}

void sub_19EB0E580(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *__p,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v59 - 89) < 0) {
    operator delete(*(void **)(v59 - 112));
  }
  _Unwind_Resume(exception_object);
}

uint64_t CoreML::Specification::OneHotEncoder::GetCachedSize(CoreML::Specification::OneHotEncoder *this)
{
  return *((unsigned int *)this + 8);
}

uint64_t CoreML::Specification::OneHotEncoder::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 36);
  if (v6 == 1)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)1, *(void *)(this + 24), a2, a4);
    int v6 = *(_DWORD *)(v5 + 36);
  }
  if (v6 == 2) {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)2, *(void *)(v5 + 24), a2, a4);
  }
  if (*(unsigned char *)(v5 + 16)) {
    this = google::protobuf::internal::WireFormatLite::WriteBool(10, 1u, a2, a4);
  }
  signed int v7 = *(_DWORD *)(v5 + 20);
  if (v7)
  {
    return google::protobuf::internal::WireFormatLite::WriteEnum(11, v7, a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::OneHotEncoder::ByteSizeLong(CoreML::Specification::OneHotEncoder *this)
{
  uint64_t v2 = 2 * *((unsigned __int8 *)this + 16);
  int v3 = *((_DWORD *)this + 5);
  if (v3)
  {
    if (v3 < 0) {
      uint64_t v4 = 11;
    }
    else {
      uint64_t v4 = ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    v2 += v4;
  }
  int v5 = *((_DWORD *)this + 9);
  if (v5 == 2)
  {
    uint64_t v6 = CoreML::Specification::Int64Vector::ByteSizeLong(*((CoreML::Specification::Int64Vector **)this + 3));
    goto LABEL_10;
  }
  if (v5 == 1)
  {
    uint64_t v6 = CoreML::Specification::StringVector::ByteSizeLong(*((CoreML::Specification::StringVector **)this + 3));
LABEL_10:
    v2 += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  *((_DWORD *)this + 8) = v2;
  return v2;
}

uint64_t CoreML::Specification::OneHotEncoder::MergePartialFromCodedStream(CoreML::Specification::OneHotEncoder *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      int v5 = *(char **)a2;
      if (*(void *)a2 >= *((void *)a2 + 1))
      {
        LODWORD(v6) = 0;
      }
      else
      {
        uint64_t v6 = *v5;
        if (*v5 >= 1)
        {
          *(void *)a2 = v5 + 1;
          unint64_t v7 = v6 | 0x100000000;
          if ((v7 & 0x100000000) == 0) {
            goto LABEL_29;
          }
          goto LABEL_7;
        }
      }
      unsigned int TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v6);
      unint64_t v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
      if ((v7 & 0x100000000) == 0) {
        goto LABEL_29;
      }
LABEL_7:
      unsigned int v9 = v7 >> 3;
      if (v7 >> 3 <= 9) {
        break;
      }
      if (v9 == 10)
      {
        if (v7 != 80) {
          goto LABEL_29;
        }
        uint64_t v15 = *(char **)a2;
        if (*(void *)a2 >= *((void *)a2 + 1) || *v15 < 0)
        {
          unint64_t Varint64Fallback = google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2);
          if ((v22 & 1) == 0) {
            return 0;
          }
        }
        else
        {
          unint64_t Varint64Fallback = *v15;
          *(void *)a2 = v15 + 1;
        }
        *((unsigned char *)this + 16) = Varint64Fallback != 0;
      }
      else if (v9 == 11 && v7 == 88)
      {
        uint64_t v12 = *(char **)a2;
        if (*(void *)a2 >= *((void *)a2 + 1))
        {
          int v13 = 0;
        }
        else
        {
          int v13 = *v12;
          if ((*v12 & 0x80000000) == 0)
          {
            *(void *)a2 = v12 + 1;
            goto LABEL_56;
          }
        }
        uint64_t Varint32Fallback = google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v13);
        int v13 = Varint32Fallback;
        if (Varint32Fallback < 0) {
          return 0;
        }
LABEL_56:
        *((_DWORD *)this + 5) = v13;
      }
      else
      {
LABEL_29:
        if (v7) {
          BOOL v17 = (v7 & 7) == 4;
        }
        else {
          BOOL v17 = 1;
        }
        if (v17) {
          return 1;
        }
        if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)return 0; {
      }
        }
    }
    if (v9 == 1) {
      break;
    }
    if (v9 != 2 || v7 != 18) {
      goto LABEL_29;
    }
    if (*((_DWORD *)this + 9) != 2)
    {
      CoreML::Specification::OneHotEncoder::clear_CategoryType((uint64_t)this);
      *((_DWORD *)this + 9) = 2;
      operator new();
    }
    uint64_t v11 = (CoreML::Specification::Int64Vector *)*((void *)this + 3);
    int v18 = *(char **)a2;
    if (*(void *)a2 >= *((void *)a2 + 1) || *v18 < 0)
    {
      int VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
      if (VarintSizeAsIntFallback < 0) {
        return 0;
      }
    }
    else
    {
      int VarintSizeAsIntFallback = *v18;
      *(void *)a2 = v18 + 1;
    }
    int v23 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
    int v25 = *((_DWORD *)a2 + 13);
    BOOL v26 = __OFSUB__(v25--, 1);
    *((_DWORD *)a2 + 13) = v25;
    if (v25 < 0 != v26) {
      return 0;
    }
    int v27 = v23;
    uint64_t result = CoreML::Specification::Int64Vector::MergePartialFromCodedStream(v11, a2, v24);
    if (!result) {
      return result;
    }
LABEL_52:
    if (!google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v27)) {
      return 0;
    }
  }
  if (v7 != 10) {
    goto LABEL_29;
  }
  if (*((_DWORD *)this + 9) != 1)
  {
    CoreML::Specification::OneHotEncoder::clear_CategoryType((uint64_t)this);
    *((_DWORD *)this + 9) = 1;
    operator new();
  }
  uint64_t v14 = (CoreML::Specification::StringVector *)*((void *)this + 3);
  uint64_t v20 = *(char **)a2;
  if (*(void *)a2 >= *((void *)a2 + 1) || *v20 < 0)
  {
    int v21 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
    if (v21 < 0) {
      return 0;
    }
  }
  else
  {
    int v21 = *v20;
    *(void *)a2 = v20 + 1;
  }
  int v29 = google::protobuf::io::CodedInputStream::PushLimit(a2, v21);
  int v31 = *((_DWORD *)a2 + 13);
  BOOL v26 = __OFSUB__(v31--, 1);
  *((_DWORD *)a2 + 13) = v31;
  if (v31 < 0 == v26)
  {
    int v27 = v29;
    uint64_t result = CoreML::Specification::StringVector::MergePartialFromCodedStream(v14, (char **)a2, v30);
    if (!result) {
      return result;
    }
    goto LABEL_52;
  }
  return 0;
}

void sub_19EB0EC6C(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::OneHotEncoder::clear_CategoryType(uint64_t this)
{
  uint64_t v1 = this;
  int v2 = *(_DWORD *)(this + 36);
  if (v2 == 2 || v2 == 1)
  {
    this = *(void *)(this + 24);
    if (this) {
      this = (*(uint64_t (**)(uint64_t))(*(void *)this + 8))(this);
    }
  }
  *(_DWORD *)(v1 + 36) = 0;
  return this;
}

std::string *CoreML::Specification::OneHotEncoder::MergeFrom(std::string *this, const CoreML::Specification::OneHotEncoder *a2)
{
  uint64_t v3 = (uint64_t)this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    this = google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  if (*((unsigned char *)a2 + 16)) {
    *(unsigned char *)(v3 + 16) = 1;
  }
  int v5 = *((_DWORD *)a2 + 5);
  if (v5) {
    *(_DWORD *)(v3 + 2CoreML::Specification::CoreMLModels::VisionFeaturePrint_Scene::New(this, 0) = v5;
  }
  int v6 = *((_DWORD *)a2 + 9);
  if (v6 == 2)
  {
    if (*(_DWORD *)(v3 + 36) != 2)
    {
      CoreML::Specification::OneHotEncoder::clear_CategoryType(v3);
      *(_DWORD *)(v3 + 36) = 2;
      operator new();
    }
    uint64_t v8 = (const CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *)*((void *)a2 + 3);
    uint64_t v10 = *(unint64_t **)(v3 + 24);
    return (std::string *)CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts::MergeFrom(v10, v8);
  }
  else if (v6 == 1)
  {
    if (*(_DWORD *)(v3 + 36) != 1)
    {
      CoreML::Specification::OneHotEncoder::clear_CategoryType(v3);
      *(_DWORD *)(v3 + 36) = 1;
      operator new();
    }
    unint64_t v7 = (const CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *)*((void *)a2 + 3);
    unsigned int v9 = *(std::string **)(v3 + 24);
    return CoreML::Specification::MILSpec::TensorValue_RepeatedStrings::MergeFrom(v9, v7);
  }
  return this;
}

void sub_19EB0EE94(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::OneHotEncoder::IsInitialized(CoreML::Specification::OneHotEncoder *this)
{
  return 1;
}

uint64_t CoreML::Specification::OneHotEncoder::Clear(uint64_t this)
{
  *(void *)(this + 16) = 0;
  return CoreML::Specification::OneHotEncoder::clear_CategoryType(this);
}

void CoreML::Specification::OneHotEncoder::New(CoreML::Specification::OneHotEncoder *this, google::protobuf::Arena *a2)
{
}

void sub_19EB0EF30(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C405CEF57A5);
  _Unwind_Resume(a1);
}

CoreML::Specification::OneHotEncoder *CoreML::Specification::OneHotEncoder::OneHotEncoder(CoreML::Specification::OneHotEncoder *this)
{
  *(void *)this = &unk_1EF0CFE58;
  *((void *)this + 1) = 0;
  if (this != (CoreML::Specification::OneHotEncoder *)&CoreML::Specification::_OneHotEncoder_default_instance_) {
    CoreML::Specification::protobuf_OneHotEncoder_2eproto::InitDefaults(this);
  }
  *((void *)this + 2) = 0;
  *((void *)this + 4) = 0;
  return this;
}

void sub_19EB0EFB8(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::OneHotEncoder>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    uint64_t result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *uint64_t result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::OneHotEncoder>;
    uint64_t v4 = (unint64_t *)(v3 + 4);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::OneHotEncoder>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void CoreML::Specification::OneHotEncoder::New(CoreML::Specification::OneHotEncoder *this)
{
}

void *CoreML::Specification::OneHotEncoder::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.OneHotEncoder");
}

void CoreML::Specification::OneHotEncoder::~OneHotEncoder(CoreML::Specification::OneHotEncoder *this)
{
  CoreML::Specification::OneHotEncoder::~OneHotEncoder(this);

  JUMPOUT(0x19F3C1920);
}

{
  *(void *)this = &unk_1EF0CFE58;
  if (*((_DWORD *)this + 9)) {
    CoreML::Specification::OneHotEncoder::clear_CategoryType((uint64_t)this);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

uint64_t CoreML::Specification::CoreMLModels::TextClassifier::GetCachedSize(CoreML::Specification::CoreMLModels::TextClassifier *this)
{
  return *((unsigned int *)this + 12);
}

uint64_t CoreML::Specification::CoreMLModels::TextClassifier::SerializeWithCachedSizes(CoreML::Specification::CoreMLModels::TextClassifier *this, google::protobuf::io::CodedOutputStream *a2, unsigned int a3, google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v6 = *((unsigned int *)this + 8);
  if (v6) {
    google::protobuf::internal::WireFormatLite::WriteUInt32(v6, a2, a3, a4);
  }
  uint64_t result = *((void *)this + 2);
  if (*(char *)(result + 23) < 0)
  {
    uint64_t v8 = *(void *)(result + 8);
    if (!v8) {
      goto LABEL_9;
    }
    uint64_t result = *(void *)result;
    goto LABEL_8;
  }
  LODWORD(v8) = *(unsigned __int8 *)(result + 23);
  if (*(unsigned char *)(result + 23))
  {
LABEL_8:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String((unsigned int *)result, v8, 1, (uint64_t)"CoreML.Specification.CoreMLModels.TextClassifier.language");
    uint64_t result = google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(0xAu, *((void *)this + 2), a2);
  }
LABEL_9:
  uint64_t v9 = *((void *)this + 3);
  if ((*(char *)(v9 + 23) & 0x80000000) == 0)
  {
    if (!*(unsigned char *)(v9 + 23)) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  if (*(void *)(v9 + 8)) {
LABEL_11:
  }
    uint64_t result = google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(0x64u, v9, a2);
LABEL_12:
  if (*((_DWORD *)this + 13) == 200)
  {
    uint64_t v10 = *((void *)this + 5);
    return google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0xC8, v10, a2, a4);
  }
  return result;
}

uint64_t CoreML::Specification::CoreMLModels::TextClassifier::ByteSizeLong(CoreML::Specification::CoreMLModels::TextClassifier *this)
{
  uint64_t v2 = *((void *)this + 2);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(void *)(v2 + 8)) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v5 = 0;
    goto LABEL_8;
  }
  if (!*(unsigned char *)(v2 + 23)) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v4 = *(void *)(v2 + 8);
  if ((v3 & 0x80u) == 0) {
    uint64_t v4 = v3;
  }
  uint64_t v5 = v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_8:
  uint64_t v6 = *((void *)this + 3);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 23);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(void *)(v6 + 8)) {
      goto LABEL_13;
    }
  }
  else if (!*(unsigned char *)(v6 + 23))
  {
    goto LABEL_13;
  }
  uint64_t v8 = *(void *)(v6 + 8);
  if ((v7 & 0x80u) == 0) {
    uint64_t v8 = v7;
  }
  v5 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 2;
LABEL_13:
  int v9 = *((_DWORD *)this + 8);
  if (v9) {
    v5 += ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  if (*((_DWORD *)this + 13) == 200)
  {
    uint64_t v10 = CoreML::Specification::StringVector::ByteSizeLong(*((CoreML::Specification::StringVector **)this + 5));
    v5 += v10 + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6) + 2;
  }
  *((_DWORD *)this + 12) = v5;
  return v5;
}

uint64_t CoreML::Specification::CoreMLModels::TextClassifier::MergePartialFromCodedStream(CoreML::Specification::CoreMLModels::TextClassifier *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  uint64_t v5 = (std::string **)((char *)this + 24);
  uint64_t v6 = (std::string **)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      uint64_t v7 = *(unsigned __int8 **)a2;
      unint64_t v8 = *((void *)a2 + 1);
      if (*(void *)a2 >= v8)
      {
        LODWORD(v1CoreML::Specification::OneHotEncoder::New(this, 0) = 0;
LABEL_45:
        unsigned int TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v10);
        unint64_t v11 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x3FFF) << 32);
        if ((v11 & 0x100000000) == 0) {
          goto LABEL_46;
        }
        goto LABEL_9;
      }
      int v9 = v7 + 1;
      uint64_t v10 = *v7;
      if ((char)*v7 >= 1) {
        break;
      }
      if ((unint64_t)v9 >= v8) {
        goto LABEL_45;
      }
      int v12 = *v9;
      if ((v10 & ~v12) < 0x80) {
        goto LABEL_45;
      }
      *(void *)a2 = v7 + 2;
      unint64_t v11 = (v10 + (v12 << 7) - 128) | 0x100000000;
LABEL_9:
      unsigned int v13 = v11 >> 3;
      if (v11 >> 3 > 0x63)
      {
        if (v13 == 100)
        {
          if (v11 != 34) {
            goto LABEL_46;
          }
          if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
            google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
          }
          if ((google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)a2, *v5) & 1) == 0) {
            return 0;
          }
        }
        else
        {
          if (v13 != 200 || v11 != 66) {
            goto LABEL_46;
          }
          if (*((_DWORD *)this + 13) != 200)
          {
            *((_DWORD *)this + 13) = 200;
            operator new();
          }
          BOOL v17 = (CoreML::Specification::StringVector *)*((void *)this + 5);
          uint64_t v20 = *(char **)a2;
          if (*(void *)a2 >= *((void *)a2 + 1) || *v20 < 0)
          {
            int VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (VarintSizeAsIntFallback < 0) {
              return 0;
            }
          }
          else
          {
            int VarintSizeAsIntFallback = *v20;
            *(void *)a2 = v20 + 1;
          }
          int v22 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
          int v24 = *((_DWORD *)a2 + 13);
          BOOL v25 = __OFSUB__(v24--, 1);
          *((_DWORD *)a2 + 13) = v24;
          if (v24 < 0 != v25) {
            return 0;
          }
          int v26 = v22;
          uint64_t result = CoreML::Specification::StringVector::MergePartialFromCodedStream(v17, (char **)a2, v23);
          if (!result) {
            return result;
          }
          if (!google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v26)) {
            return 0;
          }
        }
      }
      else if (v13 == 1)
      {
        if (v11 != 8) {
          goto LABEL_46;
        }
        int v18 = *(char **)a2;
        if (*(void *)a2 >= *((void *)a2 + 1))
        {
          int v19 = 0;
          goto LABEL_53;
        }
        int v19 = *v18;
        if (*v18 < 0)
        {
LABEL_53:
          uint64_t Varint32Fallback = google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v19);
          *((_DWORD *)this + 8) = Varint32Fallback;
          if (Varint32Fallback < 0) {
            return 0;
          }
        }
        else
        {
          *((_DWORD *)this + 8) = v19;
          *(void *)a2 = v18 + 1;
        }
      }
      else
      {
        if (v13 != 10 || v11 != 82) {
          goto LABEL_46;
        }
        if (*v6 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
        }
        uint64_t result = google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)a2, *v6);
        if (!result) {
          return result;
        }
        uint64_t v15 = (unsigned int *)*v6;
        if (SHIBYTE((*v6)->__r_.__value_.__r.__words[2]) < 0)
        {
          uint64_t v15 = *(unsigned int **)v15;
          std::string::size_type size = (*v6)->__r_.__value_.__l.__size_;
        }
        else
        {
          LODWORD(size) = HIBYTE((*v6)->__r_.__value_.__r.__words[2]);
        }
        if (!google::protobuf::internal::WireFormatLite::VerifyUtf8String(v15, size, 0, (uint64_t)"CoreML.Specification.CoreMLModels.TextClassifier.language"))return 0; {
      }
        }
    }
    *(void *)a2 = v9;
    unint64_t v11 = v10 | 0x100000000;
    if ((v11 & 0x100000000) != 0) {
      goto LABEL_9;
    }
LABEL_46:
    if (!v11 || (v11 & 7) == 4) {
      return 1;
    }
    if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v11, a3) & 1) == 0) {
      return 0;
    }
  }
}

void sub_19EB0F5F8(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

std::string *CoreML::Specification::CoreMLModels::TextClassifier::MergeFrom(std::string *this, const CoreML::Specification::CoreMLModels::TextClassifier *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    this = google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  uint64_t v5 = *((void *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
  {
    if (!*(void *)(v5 + 8)) {
      goto LABEL_11;
    }
  }
  else if (!*(unsigned char *)(v5 + 23))
  {
    goto LABEL_11;
  }
  this = (std::string *)&v3->__r_.__value_.__r.__words[2];
  uint64_t v6 = (long long *)v3->__r_.__value_.__r.__words[2];
  if (v6 != (long long *)v5)
  {
    if (v6 == &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
    }
    this = std::string::operator=((std::string *)v3->__r_.__value_.__r.__words[2], (const std::string *)v5);
  }
LABEL_11:
  uint64_t v7 = *((void *)a2 + 3);
  if (*(char *)(v7 + 23) < 0)
  {
    if (!*(void *)(v7 + 8)) {
      goto LABEL_19;
    }
  }
  else if (!*(unsigned char *)(v7 + 23))
  {
    goto LABEL_19;
  }
  this = v3 + 1;
  int data = (long long *)v3[1].__r_.__value_.__l.__data_;
  if (data != (long long *)v7)
  {
    if (data == &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
    }
    this = std::string::operator=((std::string *)v3[1].__r_.__value_.__l.__data_, (const std::string *)v7);
  }
LABEL_19:
  int v9 = *((_DWORD *)a2 + 8);
  if (v9) {
    LODWORD(v3[1].__r_.__value_.__r.__words[1]) = v9;
  }
  if (*((_DWORD *)a2 + 13) == 200)
  {
    if (HIDWORD(v3[2].__r_.__value_.__r.__words[0]) != 200)
    {
      HIDWORD(v3[2].__r_.__value_.__r.__words[0]) = 200;
      operator new();
    }
    uint64_t v10 = (const CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *)*((void *)a2 + 5);
    unint64_t v11 = (std::string *)v3[1].__r_.__value_.__r.__words[2];
    return CoreML::Specification::MILSpec::TensorValue_RepeatedStrings::MergeFrom(v11, v10);
  }
  return this;
}

void sub_19EB0F79C(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::CoreMLModels::TextClassifier::IsInitialized(CoreML::Specification::CoreMLModels::TextClassifier *this)
{
  return 1;
}

uint64_t CoreML::Specification::CoreMLModels::TextClassifier::Clear(uint64_t this)
{
  uint64_t v1 = this;
  uint64_t v2 = *(void *)(this + 16);
  if ((long long *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(unsigned char **)uint64_t v2 = 0;
      *(void *)(v2 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v2 = 0;
      *(unsigned char *)(v2 + 23) = 0;
    }
  }
  uint64_t v3 = *(void *)(this + 24);
  if ((long long *)v3 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v3 + 23) < 0)
    {
      **(unsigned char **)uint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v3 = 0;
      *(unsigned char *)(v3 + 23) = 0;
    }
  }
  *(_DWORD *)(this + 32) = 0;
  if (*(_DWORD *)(this + 52) == 200)
  {
    this = *(void *)(this + 40);
    if (this) {
      this = (*(uint64_t (**)(uint64_t))(*(void *)this + 8))(this);
    }
  }
  *(_DWORD *)(v1 + 52) = 0;
  return this;
}

void CoreML::Specification::CoreMLModels::TextClassifier::New(CoreML::Specification::CoreMLModels::TextClassifier *this, google::protobuf::Arena *a2)
{
}

void sub_19EB0F8DC(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C40C43D3D65);
  _Unwind_Resume(a1);
}

CoreML::Specification::CoreMLModels::TextClassifier *CoreML::Specification::CoreMLModels::TextClassifier::TextClassifier(CoreML::Specification::CoreMLModels::TextClassifier *this)
{
  *(void *)this = &unk_1EF0CF018;
  *((void *)this + 1) = 0;
  if (this != (CoreML::Specification::CoreMLModels::TextClassifier *)&CoreML::Specification::CoreMLModels::_TextClassifier_default_instance_) {
    CoreML::Specification::CoreMLModels::protobuf_TextClassifier_2eproto::InitDefaults(this);
  }
  *((void *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  *((_DWORD *)this + 8) = 0;
  *((void *)this + 6) = 0;
  return this;
}

void sub_19EB0F970(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::CoreMLModels::TextClassifier>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    uint64_t result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *uint64_t result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::CoreMLModels::TextClassifier>;
    uint64_t v4 = (unint64_t *)(v3 + 4);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::CoreMLModels::TextClassifier>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void CoreML::Specification::CoreMLModels::TextClassifier::New(CoreML::Specification::CoreMLModels::TextClassifier *this)
{
}

void *CoreML::Specification::CoreMLModels::TextClassifier::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.CoreMLModels.TextClassifier");
}

void CoreML::Specification::CoreMLModels::TextClassifier::~TextClassifier(CoreML::Specification::CoreMLModels::TextClassifier *this)
{
  CoreML::Specification::CoreMLModels::TextClassifier::~TextClassifier(this);

  JUMPOUT(0x19F3C1920);
}

{
  uint64_t v2;
  uint64_t v4;
  int v6;
  uint64_t v7;

  *(void *)this = &unk_1EF0CF018;
  uint64_t v2 = *((void *)this + 2);
  if ((long long *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    MEMORY[0x19F3C1920](v2, 0x1012C40EC159624);
  }
  uint64_t v4 = *((void *)this + 3);
  if ((long long *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0) {
      operator delete(*(void **)v4);
    }
    MEMORY[0x19F3C1920](v4, 0x1012C40EC159624);
  }
  uint64_t v6 = *((_DWORD *)this + 13);
  if (v6)
  {
    if (v6 == 200)
    {
      uint64_t v7 = *((void *)this + 5);
      if (v7) {
        (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
      }
    }
    *((_DWORD *)this + 13) = 0;
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

uint64_t CoreML::Specification::ClassConfidenceThresholding::GetCachedSize(CoreML::Specification::ClassConfidenceThresholding *this)
{
  return *((unsigned int *)this + 10);
}

uint64_t CoreML::Specification::ClassConfidenceThresholding::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  int v4 = *(_DWORD *)(this + 24);
  if (v4)
  {
    uint64_t v6 = this;
    for (int i = 0; i != v4; ++i)
      this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x64, *(void *)(*(void *)(v6 + 32) + 8 * i + 8), a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::ClassConfidenceThresholding::ByteSizeLong(CoreML::Specification::ClassConfidenceThresholding *this)
{
  uint64_t v2 = *((unsigned int *)this + 6);
  uint64_t v3 = 2 * v2;
  if (v2)
  {
    int v4 = 0;
    do
    {
      unint64_t v5 = CoreML::Specification::PrecisionRecallCurve::ByteSizeLong(*(CoreML::Specification::PrecisionRecallCurve **)(*((void *)this + 4) + 8 * v4 + 8));
      v3 += (uint64_t)v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6);
      ++v4;
    }
    while (v2 != v4);
  }
  *((_DWORD *)this + 1CoreML::Specification::CoreMLModels::TextClassifier::New(this, 0) = v3;
  return v3;
}

BOOL CoreML::Specification::ClassConfidenceThresholding::MergePartialFromCodedStream(CoreML::Specification::ClassConfidenceThresholding *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  unint64_t v5 = (CoreML::Specification::ClassConfidenceThresholding *)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      uint64_t v6 = *(unsigned __int8 **)a2;
      unint64_t v7 = *((void *)a2 + 1);
      if (*(void *)a2 < v7) {
        break;
      }
      LODWORD(v9) = 0;
LABEL_33:
      unsigned int TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v9);
      unint64_t v10 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x3FFF) << 32);
      if ((v10 & 0x100000000) == 0) {
        goto LABEL_34;
      }
LABEL_9:
      if (v10 != 34 || (v10 & 0xFFFFFFF8) != 0x320) {
        goto LABEL_34;
      }
      int v12 = (int *)*((void *)this + 4);
      if (!v12)
      {
        int v13 = *((_DWORD *)this + 6);
        int v14 = *((_DWORD *)this + 7);
        goto LABEL_16;
      }
      int v13 = *((_DWORD *)this + 6);
      int v14 = *v12;
      if (v13 >= *v12)
      {
        if (v14 == *((_DWORD *)this + 7))
        {
LABEL_16:
          if (v13 <= v14)
          {
            google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend(v5, v14 - v13 + 1);
            int v12 = (int *)*((void *)this + 4);
          }
          int v14 = *v12;
        }
        *int v12 = v14 + 1;
        uint64_t v16 = *(google::protobuf::Arena **)v5;
        if (!*(void *)v5) {
          operator new();
        }
        CoreML::Specification::PrecisionRecallCurve::PrecisionRecallCurve((CoreML::Specification::PrecisionRecallCurve *)Aligned);
        BOOL v17 = google::protobuf::Arena::AllocateAligned(v16, 0, 24);
        CoreML::Specification::StringVector *v17 = (google::protobuf::Arena *)Aligned;
        v17[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::PrecisionRecallCurve>;
        int v18 = (unint64_t *)((char *)v16 + 32);
        do
          unint64_t v19 = __ldxr(v18);
        while (__stxr((unint64_t)v17, v18));
        v17[2] = (google::protobuf::Arena *)v19;
        uint64_t v20 = *((void *)this + 4);
        uint64_t v21 = *((int *)this + 6);
        *((_DWORD *)this + 6) = v21 + 1;
        *(void *)(v20 + 8 * v21 + 8) = Aligned;
        goto LABEL_24;
      }
      *((_DWORD *)this + 6) = v13 + 1;
      Aligned = *(google::protobuf::Arena ***)&v12[2 * v13 + 2];
LABEL_24:
      int v22 = *(char **)a2;
      if (*(void *)a2 >= *((void *)a2 + 1) || *v22 < 0)
      {
        int VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (VarintSizeAsIntFallback < 0) {
          return 0;
        }
      }
      else
      {
        int VarintSizeAsIntFallback = *v22;
        *(void *)a2 = v22 + 1;
      }
      int v24 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
      int v26 = *((_DWORD *)a2 + 13);
      BOOL v27 = __OFSUB__(v26--, 1);
      *((_DWORD *)a2 + 13) = v26;
      if (v26 < 0 == v27)
      {
        int v28 = v24;
        BOOL result = CoreML::Specification::PrecisionRecallCurve::MergePartialFromCodedStream((CoreML::Specification::PrecisionRecallCurve *)Aligned, a2, v25);
        if (!result) {
          return result;
        }
        if (google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v28)) {
          continue;
        }
      }
      return 0;
    }
    unint64_t v8 = v6 + 1;
    uint64_t v9 = *v6;
    if ((char)*v6 < 1)
    {
      if ((unint64_t)v8 < v7)
      {
        int v11 = *v8;
        if ((v9 & ~v11) >= 0x80)
        {
          *(void *)a2 = v6 + 2;
          unint64_t v10 = (v9 + (v11 << 7) - 128) | 0x100000000;
          goto LABEL_9;
        }
      }
      goto LABEL_33;
    }
    *(void *)a2 = v8;
    unint64_t v10 = v9 | 0x100000000;
    if ((v10 & 0x100000000) != 0) {
      goto LABEL_9;
    }
LABEL_34:
    if (!v10 || (v10 & 7) == 4) {
      return 1;
    }
    if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v10, a3) & 1) == 0) {
      return 0;
    }
  }
}

void sub_19EB0FEC8(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C40668C0A6DLL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<CoreML::Specification::PrecisionRecallCurve>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

std::string *CoreML::Specification::ClassConfidenceThresholding::MergeFrom(std::string *this, const CoreML::Specification::ClassConfidenceThresholding *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    this = google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  unsigned int v5 = *((_DWORD *)a2 + 6);
  if (v5)
  {
    uint64_t v6 = (const CoreML::Specification::PrecisionRecallCurve **)(*((void *)a2 + 4) + 8);
    unint64_t v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)&v3->__r_.__value_.__r.__words[2], v5);
    this = google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<CoreML::Specification::PrecisionRecallCurve>::TypeHandler>((std::string *)&v3->__r_.__value_.__r.__words[2], (std::string **)v7, v6, v5, *(_DWORD *)v3[1].__r_.__value_.__l.__size_ - LODWORD(v3[1].__r_.__value_.__l.__data_));
    signed int v8 = LODWORD(v3[1].__r_.__value_.__l.__data_) + v5;
    LODWORD(v3[1].__r_.__value_.__l.__data_) = v8;
    std::string::size_type size = (signed int *)v3[1].__r_.__value_.__l.__size_;
    if (*size < v8) {
      *std::string::size_type size = v8;
    }
  }
  return this;
}

std::string *google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<CoreML::Specification::PrecisionRecallCurve>::TypeHandler>(std::string *result, std::string **a2, const CoreML::Specification::PrecisionRecallCurve **a3, unsigned int a4, unsigned int a5)
{
  uint64_t v9 = (google::protobuf::Arena **)result;
  if ((int)a5 >= (int)a4) {
    uint64_t v10 = a4;
  }
  else {
    uint64_t v10 = a5;
  }
  if ((int)v10 >= 1)
  {
    int v11 = a3;
    int v12 = a2;
    do
    {
      int v14 = *v11++;
      int v13 = v14;
      uint64_t v15 = *v12++;
      BOOL result = google::protobuf::internal::GenericTypeHandler<CoreML::Specification::PrecisionRecallCurve>::Merge(v13, v15);
      --v10;
    }
    while (v10);
  }
  BOOL v16 = __OFSUB__(a4, a5);
  int v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    int v18 = *v9;
    unint64_t v19 = (google::protobuf::Arena ***)&a2[a5];
    uint64_t v20 = &a3[a5];
    do
    {
      uint64_t v21 = *v20;
      if (!v18) {
        operator new();
      }
      CoreML::Specification::PrecisionRecallCurve::PrecisionRecallCurve((CoreML::Specification::PrecisionRecallCurve *)Aligned);
      unsigned int v23 = google::protobuf::Arena::AllocateAligned(v18, 0, 24);
      *unsigned int v23 = (google::protobuf::Arena *)Aligned;
      v23[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::PrecisionRecallCurve>;
      int v24 = (unint64_t *)((char *)v18 + 32);
      do
        unint64_t v25 = __ldxr(v24);
      while (__stxr((unint64_t)v23, v24));
      v23[2] = (google::protobuf::Arena *)v25;
      BOOL result = google::protobuf::internal::GenericTypeHandler<CoreML::Specification::PrecisionRecallCurve>::Merge(v21, (std::string *)Aligned);
      *v19++ = Aligned;
      ++v20;
      --v17;
    }
    while (v17);
  }
  return result;
}

void sub_19EB100DC(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C40668C0A6DLL);
  _Unwind_Resume(a1);
}

std::string *google::protobuf::internal::GenericTypeHandler<CoreML::Specification::PrecisionRecallCurve>::Merge(const CoreML::Specification::PrecisionRecallCurve *a1, std::string *a2)
{
  return CoreML::Specification::PrecisionRecallCurve::MergeFrom(a2, a1);
}

uint64_t CoreML::Specification::ClassConfidenceThresholding::IsInitialized(CoreML::Specification::ClassConfidenceThresholding *this)
{
  return 1;
}

uint64_t CoreML::Specification::ClassConfidenceThresholding::Clear(uint64_t this)
{
  uint64_t v1 = *(unsigned int *)(this + 24);
  if ((int)v1 >= 1)
  {
    uint64_t v2 = this;
    uint64_t v3 = (CoreML::Specification::PrecisionRecallCurve **)(*(void *)(this + 32) + 8);
    do
    {
      uint64_t v4 = *v3++;
      this = CoreML::Specification::PrecisionRecallCurve::Clear(v4);
      --v1;
    }
    while (v1);
    *(_DWORD *)(v2 + 24) = 0;
  }
  return this;
}

void CoreML::Specification::ClassConfidenceThresholding::New(CoreML::Specification::ClassConfidenceThresholding *this, google::protobuf::Arena *a2)
{
}

void sub_19EB101BC(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

CoreML::Specification::ClassConfidenceThresholding *CoreML::Specification::ClassConfidenceThresholding::ClassConfidenceThresholding(CoreML::Specification::ClassConfidenceThresholding *this)
{
  *(void *)this = &unk_1EF0D76E0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  if (this != (CoreML::Specification::ClassConfidenceThresholding *)&CoreML::Specification::_ClassConfidenceThresholding_default_instance_) {
    CoreML::Specification::protobuf_ClassConfidenceThresholding_2eproto::InitDefaults(this);
  }
  *((_DWORD *)this + 1CoreML::Specification::CoreMLModels::TextClassifier::New(this, 0) = 0;
  return this;
}

void sub_19EB10254(_Unwind_Exception *a1)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::ClassConfidenceThresholding>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    BOOL result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *BOOL result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::ClassConfidenceThresholding>;
    uint64_t v4 = (unint64_t *)(v3 + 4);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::ClassConfidenceThresholding>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void CoreML::Specification::ClassConfidenceThresholding::New(CoreML::Specification::ClassConfidenceThresholding *this)
{
}

void *CoreML::Specification::ClassConfidenceThresholding::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.ClassConfidenceThresholding");
}

void CoreML::Specification::ClassConfidenceThresholding::~ClassConfidenceThresholding(CoreML::Specification::ClassConfidenceThresholding *this)
{
  CoreML::Specification::ClassConfidenceThresholding::~ClassConfidenceThresholding(this);

  JUMPOUT(0x19F3C1920);
}

{
  *(void *)this = &unk_1EF0D76E0;
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>((void *)this + 2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

char *std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, void *a2, long long **a3)
{
  unint64_t v5 = (void **)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__find_equal<std::string>(a1, &v17, a2);
  uint64_t v6 = (char *)*v5;
  if (!*v5)
  {
    unint64_t v7 = v5;
    uint64_t v6 = (char *)operator new(0xF0uLL);
    v15[0] = v6;
    v15[1] = a1 + 8;
    char v16 = 0;
    signed int v8 = (std::string *)(v6 + 32);
    uint64_t v9 = *a3;
    if (*((char *)*a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v9, *((void *)v9 + 1));
    }
    else
    {
      long long v10 = *v9;
      *((void *)v6 + 6) = *((void *)v9 + 2);
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v10;
    }
    v6[56] = 0;
    *((void *)v6 + 8) = 0;
    v6[72] = 1;
    *((void *)v6 + 1CoreML::Specification::ClassConfidenceThresholding::New(this, 0) = 0;
    v6[88] = 0;
    *((void *)v6 + 12) = 0;
    v6[104] = 1;
    *((void *)v6 + 14) = 0;
    v6[120] = 0;
    *((void *)v6 + 16) = 0;
    v6[136] = 1;
    *((void *)v6 + 18) = 0;
    v6[152] = 0;
    *((void *)v6 + 2CoreML::Specification::ClassConfidenceThresholding::New(this, 0) = 0;
    v6[168] = 1;
    *((void *)v6 + 22) = 0;
    v6[184] = 0;
    *((void *)v6 + 24) = 0;
    v6[200] = 1;
    *((_OWORD *)v6 + 13) = 0u;
    *((_OWORD *)v6 + 14) = 0u;
    char v16 = 1;
    uint64_t v11 = v17;
    *(void *)uint64_t v6 = 0;
    *((void *)v6 + 1) = 0;
    *((void *)v6 + 2) = v11;
    *unint64_t v7 = v6;
    int v12 = (uint64_t *)v6;
    uint64_t v13 = **(void **)a1;
    if (v13)
    {
      *(void *)a1 = v13;
      int v12 = (uint64_t *)*v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 8), v12);
    ++*(void *)(a1 + 16);
    v15[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,CoreML::ShapeConstraint>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,CoreML::ShapeConstraint>,void *>>>>::reset[abi:ne180100]((uint64_t)v15);
  }
  return v6;
}

void sub_19EB104E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,CoreML::ShapeConstraint>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,CoreML::ShapeConstraint>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,CoreML::ShapeConstraint>,0>((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

double CoreML::NeuralNetworkShaper::shapeUnchanged(CoreML::NeuralNetworkShaper *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  uint64_t v3 = (char *)this + 32;
  signed int v8 = *(long long **)(*((void *)a2 + 4) + 8);
  uint64_t v4 = (const CoreML::ShapeConstraint *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)this + 32, v8, &v8)+ 56);
  signed int v8 = *(long long **)(*((void *)a2 + 7) + 8);
  unint64_t v5 = (std::string *)std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v3, v8, &v8);
  uint64_t v6 = (CoreML::ShapeConstraint *)&v5[2].__r_.__value_.__r.__words[1];
  std::string::operator=(v5 + 9, *(const std::string **)(*((void *)a2 + 7) + 8));
  CoreML::ShapeConstraint::copyFrom(v6, v4);

  return CoreML::ShapeConstraint::copyFrom(v4, v6);
}

void CoreML::NeuralNetworkShaper::shapeBroadcastLayer(CoreML::NeuralNetworkShaper *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  uint64_t v3 = (char *)this + 32;
  *(void *)&long long v37 = *(void *)(*((void *)a2 + 4) + 8);
  uint64_t v4 = std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)this + 32, (void *)v37, (long long **)&v37);
  long long v5 = *(_OWORD *)(v4 + 72);
  long long v37 = *(_OWORD *)(v4 + 56);
  long long v38 = v5;
  long long v6 = *(_OWORD *)(v4 + 104);
  long long v35 = *(_OWORD *)(v4 + 88);
  long long v36 = v6;
  long long v7 = *(_OWORD *)(v4 + 136);
  long long v33 = *(_OWORD *)(v4 + 120);
  long long v34 = v7;
  long long v8 = *(_OWORD *)(v4 + 168);
  long long v31 = *(_OWORD *)(v4 + 152);
  long long v32 = v8;
  long long v9 = *(_OWORD *)(v4 + 200);
  long long v29 = *(_OWORD *)(v4 + 184);
  long long v30 = v9;
  BOOL hasFixedCHW = CoreML::ShapeConstraint::hasFixedCHW((CoreML::ShapeConstraint *)(v4 + 56));
  if (*((int *)a2 + 6) >= 2)
  {
    uint64_t v11 = 2;
    do
    {
      *(void *)&long long v27 = *(void *)(*((void *)a2 + 4) + 8 * v11);
      int v12 = std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v3, (void *)v27, (long long **)&v27);
      uint64_t v13 = v12;
      int v14 = (long long *)(v12 + 56);
      BOOL hasFixedCHW = hasFixedCHW && CoreML::ShapeConstraint::hasFixedCHW((CoreML::ShapeConstraint *)(v12 + 56));
      CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v27, (const CoreML::ShapeRange *)&v37, v14);
      long long v37 = v27;
      long long v38 = v28;
      CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v27, (const CoreML::ShapeRange *)&v35, (long long *)(v13 + 88));
      long long v35 = v27;
      long long v36 = v28;
      CoreML::ShapeRange::unify((CoreML::ShapeRange *)&v27, (const CoreML::ShapeRange *)&v33, (uint64_t *)v13 + 15);
      long long v33 = v27;
      long long v34 = v28;
      CoreML::ShapeRange::unify((CoreML::ShapeRange *)&v27, (const CoreML::ShapeRange *)&v31, (uint64_t *)v13 + 19);
      long long v31 = v27;
      long long v32 = v28;
      CoreML::ShapeRange::unify((CoreML::ShapeRange *)&v27, (const CoreML::ShapeRange *)&v29, (uint64_t *)v13 + 23);
      long long v29 = v27;
      long long v30 = v28;
    }
    while (v11++ < *((int *)a2 + 6));
  }
  *(void *)&long long v27 = *(void *)(*((void *)a2 + 7) + 8);
  char v16 = (std::string *)std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v3, (void *)v27, (long long **)&v27);
  uint64_t v17 = (CoreML::ShapeConstraint *)&v16[2].__r_.__value_.__r.__words[1];
  std::string::operator=(v16 + 9, *(const std::string **)(*((void *)a2 + 7) + 8));
  CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v27, (const CoreML::ShapeRange *)&v16[2].__r_.__value_.__r.__words[1], &v37);
  CoreML::ShapeConstraint::updateSequenceRange((CoreML::ShapeConstraint *)&v16[2].__r_.__value_.__r.__words[1], (const CoreML::ShapeRange *)&v27);
  int v18 = (const CoreML::ShapeRange *)&v16[3].__r_.__value_.__r.__words[2];
  CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v27, (const CoreML::ShapeRange *)&v16[3].__r_.__value_.__r.__words[2], &v35);
  CoreML::ShapeConstraint::updateBatchRange((CoreML::ShapeConstraint *)&v16[2].__r_.__value_.__r.__words[1], (const CoreML::ShapeRange *)&v27);
  if (hasFixedCHW)
  {
    long long v27 = v34;
    unint64_t v19 = CoreML::RangeValue::value((CoreML::RangeValue *)&v27);
    CoreML::ShapeRange::setValue((uint64_t)&v16[5], v19);
    long long v27 = v32;
    unint64_t v20 = CoreML::RangeValue::value((CoreML::RangeValue *)&v27);
    CoreML::ShapeRange::setValue((uint64_t)&v16[6].__r_.__value_.__l.__size_, v20);
    long long v27 = v30;
    unint64_t v21 = CoreML::RangeValue::value((CoreML::RangeValue *)&v27);
    CoreML::ShapeRange::setValue((uint64_t)&v16[7].__r_.__value_.__r.__words[2], v21);
  }
  else
  {
    CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v27, (const CoreML::ShapeRange *)&v16[5], &v33);
    CoreML::ShapeConstraint::updateChannelRange(v17, (const CoreML::ShapeRange *)&v27);
    CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v27, (const CoreML::ShapeRange *)&v16[6].__r_.__value_.__r.__words[1], &v31);
    CoreML::ShapeConstraint::updateHeightRange(v17, (const CoreML::ShapeRange *)&v27);
    CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v27, (const CoreML::ShapeRange *)&v16[7].__r_.__value_.__r.__words[2], &v29);
    CoreML::ShapeConstraint::updateWidthRange(v17, (const CoreML::ShapeRange *)&v27);
  }
  if (*((int *)a2 + 6) >= 1)
  {
    uint64_t v22 = 0;
    unsigned int v23 = (const CoreML::ShapeRange *)&v16[5];
    int v24 = (const CoreML::ShapeRange *)&v16[6].__r_.__value_.__r.__words[1];
    unint64_t v25 = (const CoreML::ShapeRange *)&v16[7].__r_.__value_.__r.__words[2];
    do
    {
      *(void *)&long long v27 = *(void *)(*((void *)a2 + 4) + 8 * v22 + 8);
      int v26 = (CoreML::ShapeConstraint *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v3, (void *)v27, (long long **)&v27)+ 56);
      CoreML::ShapeConstraint::updateSequenceRange(v26, v17);
      CoreML::ShapeConstraint::updateBatchRange(v26, v18);
      if (!CoreML::ShapeConstraint::hasFixedCHW(v26))
      {
        CoreML::ShapeConstraint::updateChannelRange(v26, v23);
        CoreML::ShapeConstraint::updateHeightRange(v26, v24);
        CoreML::ShapeConstraint::updateWidthRange(v26, v25);
      }
      ++v22;
    }
    while (v22 < *((int *)a2 + 6));
  }
}

void *std::vector<CoreML::ShapeRange>::vector(void *a1)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v2 = (char *)operator new(0x80uLL);
  uint64_t v3 = 0;
  *a1 = v2;
  a1[1] = v2;
  a1[2] = v2 + 128;
  do
  {
    uint64_t v4 = &v2[v3];
    *uint64_t v4 = 0;
    *((void *)v4 + 1) = 0;
    v4[16] = 1;
    *((void *)v4 + 3) = 0;
    v3 += 32;
  }
  while (v3 != 128);
  a1[1] = v2 + 128;
  return a1;
}

double CoreML::NeuralNetworkShaper::ProcessLayer(CoreML::NeuralNetworkShaper *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  int v3 = *((_DWORD *)a2 + 35);
  if (v3 <= 244)
  {
    if (v3 > 179)
    {
      if (v3 > 211)
      {
        if (v3 <= 229)
        {
          if (v3 == 212)
          {
            uint64_t v123 = (char *)this + 32;
            *(void *)&long long v409 = *(void *)(*((void *)a2 + 4) + 8);
            long long v124 = std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)this + 32, (void *)v409, (long long **)&v409);
            *(void *)&long long v409 = *(void *)(*((void *)a2 + 4) + 16);
            uint64_t v125 = std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v123, (void *)v409, (long long **)&v409);
            long long v126 = (const CoreML::ShapeRange *)(v125 + 56);
            *(void *)&long long v409 = *(void *)(*((void *)a2 + 7) + 8);
            std::string v127 = (std::string *)std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v123, (void *)v409, (long long **)&v409);
            std::string::operator=(v127 + 9, *(const std::string **)(*((void *)a2 + 7) + 8));
            CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v409, (const CoreML::ShapeRange *)&v127[2].__r_.__value_.__r.__words[1], (long long *)(v125 + 56));
            CoreML::ShapeConstraint::updateSequenceRange((CoreML::ShapeConstraint *)&v127[2].__r_.__value_.__r.__words[1], (const CoreML::ShapeRange *)&v409);
            CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v409, (const CoreML::ShapeRange *)&v127[3].__r_.__value_.__r.__words[2], (long long *)(v124 + 88));
            CoreML::ShapeConstraint::updateBatchRange((CoreML::ShapeConstraint *)&v127[2].__r_.__value_.__r.__words[1], (const CoreML::ShapeRange *)&v409);
            CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v409, (const CoreML::ShapeRange *)&v127[5], (long long *)(v124 + 120));
            CoreML::ShapeConstraint::updateChannelRange((CoreML::ShapeConstraint *)&v127[2].__r_.__value_.__r.__words[1], (const CoreML::ShapeRange *)&v409);
            if (*((_DWORD *)a2 + 35) == 212)
            {
              std::string v129 = (const CoreML::Specification::CropResizeLayerParams *)*((void *)a2 + 16);
            }
            else
            {
              CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v128);
              std::string v129 = (const CoreML::Specification::CropResizeLayerParams *)&CoreML::Specification::_CropResizeLayerParams_default_instance_;
            }
            CoreML::Specification::CropResizeLayerParams::CropResizeLayerParams((CoreML::Specification::CropResizeLayerParams *)&v409, v129);
            if (v410 == 2)
            {
              if (*(void *)(*((void *)&v410 + 1) + 8) <= 1uLL) {
                unint64_t v175 = 1;
              }
              else {
                unint64_t v175 = *(void *)(*((void *)&v410 + 1) + 8);
              }
              if (*(void *)(*((void *)&v410 + 1) + 16) <= 1uLL) {
                unint64_t v176 = 1;
              }
              else {
                unint64_t v176 = *(void *)(*((void *)&v410 + 1) + 16);
              }
            }
            else
            {
              unint64_t v175 = 1;
              unint64_t v176 = 1;
            }
            CoreML::ShapeRange::setValue((uint64_t)&v127[6].__r_.__value_.__l.__size_, v175);
            CoreML::ShapeRange::setValue((uint64_t)&v127[7].__r_.__value_.__r.__words[2], v176);
            CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v422, (const CoreML::ShapeRange *)(v124 + 120), (long long *)&v127[5]);
            CoreML::ShapeConstraint::updateChannelRange((CoreML::ShapeConstraint *)(v124 + 56), (const CoreML::ShapeRange *)&v422);
            CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v422, v126, (long long *)&v127[2].__r_.__value_.__r.__words[1]);
            CoreML::ShapeConstraint::updateSequenceRange(v126, (const CoreML::ShapeRange *)&v422);
            CoreML::ShapeRange::setValue((uint64_t)(v125 + 88), 1uLL);
            LOBYTE(v422) = 0;
            *((void *)&v422 + 1) = 4;
            LOBYTE(v423) = 0;
            *((void *)&v423 + 1) = 5;
            CoreML::ShapeConstraint::updateChannelRange(v126, (const CoreML::ShapeRange *)&v422);
            CoreML::ShapeRange::setValue((uint64_t)(v125 + 184), 1uLL);
            CoreML::ShapeRange::setValue((uint64_t)(v125 + 152), 1uLL);
            CoreML::Specification::CropResizeLayerParams::~CropResizeLayerParams((CoreML::Specification::CropResizeLayerParams *)&v409);
            return result;
          }
          if (v3 == 220) {
            goto LABEL_86;
          }
        }
        else if (v3 == 230 || v3 == 231 || v3 == 240)
        {
          CoreML::NeuralNetworkShaper::shapeBroadcastLayer(this, a2);
          return result;
        }
      }
      else if (v3 <= 199)
      {
        if (v3 == 180) {
          goto LABEL_86;
        }
        if (v3 == 190)
        {
          uint64_t v62 = (char *)this + 32;
          *(void *)&long long v409 = *(void *)(*((void *)a2 + 4) + 8);
          long long v63 = std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)this + 32, (void *)v409, (long long **)&v409);
          *(void *)&long long v409 = *(void *)(*((void *)a2 + 7) + 8);
          uint64_t v64 = (std::string *)std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v62, (void *)v409, (long long **)&v409);
          long long v65 = (CoreML::ShapeConstraint *)&v64[2].__r_.__value_.__r.__words[1];
          std::string::operator=(v64 + 9, *(const std::string **)(*((void *)a2 + 7) + 8));
          CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v409, (const CoreML::ShapeRange *)&v64[2].__r_.__value_.__r.__words[1], (long long *)(v63 + 56));
          CoreML::ShapeConstraint::updateSequenceRange((CoreML::ShapeConstraint *)&v64[2].__r_.__value_.__r.__words[1], (const CoreML::ShapeRange *)&v409);
          CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v409, (const CoreML::ShapeRange *)&v64[3].__r_.__value_.__r.__words[2], (long long *)(v63 + 88));
          CoreML::ShapeConstraint::updateBatchRange((CoreML::ShapeConstraint *)&v64[2].__r_.__value_.__r.__words[1], (const CoreML::ShapeRange *)&v409);
          CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v409, (const CoreML::ShapeRange *)&v64[5], (long long *)(v63 + 120));
          CoreML::ShapeConstraint::updateChannelRange((CoreML::ShapeConstraint *)&v64[2].__r_.__value_.__r.__words[1], (const CoreML::ShapeRange *)&v409);
          CoreML::ShapeConstraint::updateSequenceRange((CoreML::ShapeConstraint *)(v63 + 56), (const CoreML::ShapeRange *)&v64[2].__r_.__value_.__r.__words[1]);
          CoreML::ShapeConstraint::updateBatchRange((CoreML::ShapeConstraint *)(v63 + 56), (const CoreML::ShapeRange *)&v64[3].__r_.__value_.__r.__words[2]);
          CoreML::ShapeConstraint::updateChannelRange((CoreML::ShapeConstraint *)(v63 + 56), (const CoreML::ShapeRange *)&v64[5]);
          if (*((_DWORD *)a2 + 35) == 190)
          {
            long long v67 = (const CoreML::Specification::CropLayerParams *)*((void *)a2 + 16);
          }
          else
          {
            CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v66);
            long long v67 = (const CoreML::Specification::CropLayerParams *)&CoreML::Specification::_CropLayerParams_default_instance_;
          }
          CoreML::Specification::CropLayerParams::CropLayerParams((CoreML::Specification::CropLayerParams *)&v409, v67);
          if (*((_DWORD *)a2 + 6) == 1)
          {
            long long v194 = (uint64_t *)v411[1];
            if (!v411[1]) {
              long long v194 = &CoreML::Specification::_BorderAmounts_default_instance_;
            }
            if (*((_DWORD *)v194 + 6) == 2)
            {
              uint64_t v195 = v194[4];
              uint64_t v197 = *(void *)(v195 + 8);
              uint64_t v196 = *(void *)(v195 + 16);
              unsigned int v198 = *(_DWORD *)(v197 + 16);
              unsigned int v199 = *(_DWORD *)(v197 + 24);
              unsigned int v200 = *(_DWORD *)(v196 + 16);
              unsigned int v201 = *(_DWORD *)(v196 + 24);
            }
            else
            {
              unsigned int v200 = 0;
              unsigned int v201 = 0;
              unsigned int v198 = 0;
              unsigned int v199 = 0;
            }
            v284 = (const CoreML::ShapeRange *)(v63 + 152);
            CoreML::ShapeRange::operator-((CoreML::ShapeRange *)&v419, (uint64_t)(v63 + 152), v198);
            CoreML::ShapeRange::operator-((CoreML::ShapeRange *)&v422, (uint64_t)&v419, v199);
            CoreML::ShapeConstraint::updateHeightRange(v65, (const CoreML::ShapeRange *)&v422);
            uint64_t v285 = (const CoreML::ShapeRange *)(v63 + 184);
            CoreML::ShapeRange::operator-((CoreML::ShapeRange *)&v419, (uint64_t)v285, v201);
            CoreML::ShapeRange::operator-((CoreML::ShapeRange *)&v422, (uint64_t)&v419, v200);
            CoreML::ShapeConstraint::updateWidthRange(v65, (const CoreML::ShapeRange *)&v422);
            LOBYTE(v419) = 0;
            *((void *)&v419 + 1) = (int)(v198 + v199 + 1);
            char v420 = 1;
            uint64_t v421 = 0;
            CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v422, v284, &v419);
            long long v286 = v423;
            *(_OWORD *)v284 = v422;
            *((_OWORD *)v284 + 1) = v286;
            LOBYTE(v419) = 0;
            *((void *)&v419 + 1) = (int)(v200 + v201 + 1);
            char v420 = 1;
            uint64_t v421 = 0;
            CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v422, v285, &v419);
            long long v287 = v423;
            *(_OWORD *)uint64_t v285 = v422;
            *((_OWORD *)v285 + 1) = v287;
          }
          else
          {
            CoreML::ShapeConstraint::updateChannelRange(v65, (const CoreML::ShapeRange *)(v63 + 120));
            *(void *)&long long v422 = *(void *)(*((void *)a2 + 4) + 16);
            long long v202 = std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v62, (void *)v422, (long long **)&v422);
            CoreML::ShapeConstraint::updateHeightRange(v65, (const CoreML::ShapeRange *)(v202 + 152));
            *(void *)&long long v422 = *(void *)(*((void *)a2 + 4) + 16);
            uint64_t v203 = std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v62, (void *)v422, (long long **)&v422);
            CoreML::ShapeConstraint::updateWidthRange(v65, (const CoreML::ShapeRange *)(v203 + 184));
          }
          CoreML::Specification::CropLayerParams::~CropLayerParams((CoreML::Specification::CropLayerParams *)&v409);
          return result;
        }
      }
      else
      {
        switch(v3)
        {
          case 200:
            long long v116 = (char *)this + 32;
            *(void *)&long long v409 = *(void *)(*((void *)a2 + 4) + 8);
            std::string::size_type v117 = std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)this + 32, (void *)v409, (long long **)&v409);
            long long v118 = (CoreML::ShapeConstraint *)(v117 + 56);
            *(void *)&long long v409 = *(void *)(*((void *)a2 + 7) + 8);
            std::string::size_type v119 = (std::string *)std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v116, (void *)v409, (long long **)&v409);
            long long v120 = (CoreML::ShapeConstraint *)&v119[2].__r_.__value_.__r.__words[1];
            std::string::operator=(v119 + 9, *(const std::string **)(*((void *)a2 + 7) + 8));
            CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v409, (const CoreML::ShapeRange *)&v119[2].__r_.__value_.__r.__words[1], (long long *)(v117 + 56));
            CoreML::ShapeConstraint::updateSequenceRange((CoreML::ShapeConstraint *)&v119[2].__r_.__value_.__r.__words[1], (const CoreML::ShapeRange *)&v409);
            CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v409, (const CoreML::ShapeRange *)&v119[3].__r_.__value_.__r.__words[2], (long long *)(v117 + 88));
            CoreML::ShapeConstraint::updateBatchRange((CoreML::ShapeConstraint *)&v119[2].__r_.__value_.__r.__words[1], (const CoreML::ShapeRange *)&v409);
            CoreML::ShapeConstraint::updateSequenceRange((CoreML::ShapeConstraint *)(v117 + 56), (const CoreML::ShapeRange *)&v119[2].__r_.__value_.__r.__words[1]);
            CoreML::ShapeConstraint::updateBatchRange((CoreML::ShapeConstraint *)(v117 + 56), (const CoreML::ShapeRange *)&v119[3].__r_.__value_.__r.__words[2]);
            CoreML::ShapeConstraint::updateChannelRange((CoreML::ShapeConstraint *)(v117 + 56), (const CoreML::ShapeRange *)&v119[5]);
            if (*((_DWORD *)a2 + 35) == 200)
            {
              long long v122 = (const CoreML::Specification::PaddingLayerParams *)*((void *)a2 + 16);
            }
            else
            {
              CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v121);
              long long v122 = (const CoreML::Specification::PaddingLayerParams *)&CoreML::Specification::_PaddingLayerParams_default_instance_;
            }
            CoreML::Specification::PaddingLayerParams::PaddingLayerParams((CoreML::Specification::PaddingLayerParams *)&v409, v122);
            std::string::size_type v167 = (uint64_t *)v410;
            if (!(void)v410) {
              std::string::size_type v167 = &CoreML::Specification::_BorderAmounts_default_instance_;
            }
            if (*((_DWORD *)v167 + 6) == 2)
            {
              uint64_t v168 = v167[4];
              uint64_t v170 = *(void *)(v168 + 8);
              uint64_t v169 = *(void *)(v168 + 16);
              unint64_t v172 = *(void *)(v170 + 16);
              unint64_t v171 = *(void *)(v170 + 24);
              unint64_t v174 = *(void *)(v169 + 16);
              unint64_t v173 = *(void *)(v169 + 24);
            }
            else
            {
              unint64_t v174 = 0;
              unint64_t v173 = 0;
              unint64_t v172 = 0;
              unint64_t v171 = 0;
            }
            CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v422, (const CoreML::ShapeRange *)&v119[5], (long long *)(v117 + 120));
            CoreML::ShapeConstraint::updateChannelRange(v120, (const CoreML::ShapeRange *)&v422);
            CoreML::ShapeRange::operator+((CoreML::ShapeRange *)&v419, (uint64_t)(v117 + 152), v172);
            CoreML::ShapeRange::operator+((CoreML::ShapeRange *)&v422, (uint64_t)&v419, v171);
            CoreML::ShapeConstraint::updateHeightRange(v120, (const CoreML::ShapeRange *)&v422);
            CoreML::ShapeRange::operator+((CoreML::ShapeRange *)&v419, (uint64_t)(v117 + 184), v173);
            CoreML::ShapeRange::operator+((CoreML::ShapeRange *)&v422, (uint64_t)&v419, v174);
            CoreML::ShapeConstraint::updateWidthRange(v120, (const CoreML::ShapeRange *)&v422);
            CoreML::ShapeRange::operator-((CoreML::ShapeRange *)&v419, (uint64_t)&v119[6].__r_.__value_.__l.__size_, v172);
            CoreML::ShapeRange::operator-((CoreML::ShapeRange *)&v422, (uint64_t)&v419, v171);
            CoreML::ShapeConstraint::updateHeightRange(v118, (const CoreML::ShapeRange *)&v422);
            CoreML::ShapeRange::operator-((CoreML::ShapeRange *)&v419, (uint64_t)&v119[7].__r_.__value_.__r.__words[2], v174);
            CoreML::ShapeRange::operator-((CoreML::ShapeRange *)&v422, (uint64_t)&v419, v173);
            CoreML::ShapeConstraint::updateWidthRange(v118, (const CoreML::ShapeRange *)&v422);
            CoreML::Specification::PaddingLayerParams::~PaddingLayerParams((CoreML::Specification::PaddingLayerParams *)&v409);
            return result;
          case 210:
            std::string v146 = (char *)this + 32;
            *(void *)&long long v409 = *(void *)(*((void *)a2 + 4) + 8);
            std::string v147 = std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)this + 32, (void *)v409, (long long **)&v409);
            std::string v148 = (CoreML::ShapeConstraint *)(v147 + 56);
            *(void *)&long long v409 = *(void *)(*((void *)a2 + 7) + 8);
            std::string v149 = (std::string *)std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v146, (void *)v409, (long long **)&v409);
            std::string v150 = (CoreML::ShapeConstraint *)&v149[2].__r_.__value_.__r.__words[1];
            std::string::operator=(v149 + 9, *(const std::string **)(*((void *)a2 + 7) + 8));
            CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v409, (const CoreML::ShapeRange *)&v149[2].__r_.__value_.__r.__words[1], (long long *)(v147 + 56));
            CoreML::ShapeConstraint::updateSequenceRange((CoreML::ShapeConstraint *)&v149[2].__r_.__value_.__r.__words[1], (const CoreML::ShapeRange *)&v409);
            CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v409, (const CoreML::ShapeRange *)&v149[3].__r_.__value_.__r.__words[2], (long long *)(v147 + 88));
            CoreML::ShapeConstraint::updateBatchRange((CoreML::ShapeConstraint *)&v149[2].__r_.__value_.__r.__words[1], (const CoreML::ShapeRange *)&v409);
            CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v409, (const CoreML::ShapeRange *)&v149[5], (long long *)(v147 + 120));
            CoreML::ShapeConstraint::updateChannelRange((CoreML::ShapeConstraint *)&v149[2].__r_.__value_.__r.__words[1], (const CoreML::ShapeRange *)&v409);
            CoreML::ShapeConstraint::updateSequenceRange((CoreML::ShapeConstraint *)(v147 + 56), (const CoreML::ShapeRange *)&v149[2].__r_.__value_.__r.__words[1]);
            CoreML::ShapeConstraint::updateBatchRange((CoreML::ShapeConstraint *)(v147 + 56), (const CoreML::ShapeRange *)&v149[3].__r_.__value_.__r.__words[2]);
            CoreML::ShapeConstraint::updateChannelRange((CoreML::ShapeConstraint *)(v147 + 56), (const CoreML::ShapeRange *)&v149[5]);
            if (*((_DWORD *)a2 + 35) == 210)
            {
              std::string v152 = (const CoreML::Specification::UpsampleLayerParams *)*((void *)a2 + 16);
            }
            else
            {
              CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v151);
              std::string v152 = (const CoreML::Specification::UpsampleLayerParams *)&CoreML::Specification::_UpsampleLayerParams_default_instance_;
            }
            CoreML::Specification::UpsampleLayerParams::UpsampleLayerParams((CoreML::Specification::UpsampleLayerParams *)&v409, v152);
            if (v410 == 2)
            {
              if (*(void *)(*((void *)&v410 + 1) + 8) <= 1uLL) {
                uint64_t v192 = 1;
              }
              else {
                uint64_t v192 = *(void *)(*((void *)&v410 + 1) + 8);
              }
              if (*(void *)(*((void *)&v410 + 1) + 16) <= 1uLL) {
                uint64_t v193 = 1;
              }
              else {
                uint64_t v193 = *(void *)(*((void *)&v410 + 1) + 16);
              }
            }
            else
            {
              uint64_t v192 = 1;
              uint64_t v193 = 1;
            }
            CoreML::ShapeRange::operator*((CoreML::ShapeRange *)&v422, (uint64_t)(v147 + 152), v192);
            CoreML::ShapeConstraint::updateHeightRange(v150, (const CoreML::ShapeRange *)&v422);
            CoreML::ShapeRange::operator*((CoreML::ShapeRange *)&v422, (uint64_t)(v147 + 184), v193);
            CoreML::ShapeConstraint::updateWidthRange(v150, (const CoreML::ShapeRange *)&v422);
            CoreML::ShapeRange::operator/((uint64_t)&v422, (uint64_t)&v149[6].__r_.__value_.__l.__size_, v192);
            CoreML::ShapeConstraint::updateHeightRange(v148, (const CoreML::ShapeRange *)&v422);
            CoreML::ShapeRange::operator/((uint64_t)&v422, (uint64_t)&v149[7].__r_.__value_.__r.__words[2], v193);
            CoreML::ShapeConstraint::updateWidthRange(v148, (const CoreML::ShapeRange *)&v422);
            CoreML::Specification::UpsampleLayerParams::~UpsampleLayerParams((CoreML::Specification::UpsampleLayerParams *)&v409);
            return result;
          case 211:
            uint64_t v13 = (char *)this + 32;
            *(void *)&long long v409 = *(void *)(*((void *)a2 + 4) + 8);
            int v14 = std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)this + 32, (void *)v409, (long long **)&v409);
            uint64_t v15 = (const CoreML::ShapeRange *)(v14 + 56);
            *(void *)&long long v409 = *(void *)(*((void *)a2 + 7) + 8);
            char v16 = (std::string *)std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v13, (void *)v409, (long long **)&v409);
            std::string::operator=(v16 + 9, *(const std::string **)(*((void *)a2 + 7) + 8));
            CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v409, (const CoreML::ShapeRange *)&v16[2].__r_.__value_.__r.__words[1], (long long *)(v14 + 56));
            CoreML::ShapeConstraint::updateSequenceRange((CoreML::ShapeConstraint *)&v16[2].__r_.__value_.__r.__words[1], (const CoreML::ShapeRange *)&v409);
            uint64_t v17 = (const CoreML::ShapeRange *)(v14 + 88);
            CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v409, (const CoreML::ShapeRange *)&v16[3].__r_.__value_.__r.__words[2], (long long *)(v14 + 88));
            CoreML::ShapeConstraint::updateBatchRange((CoreML::ShapeConstraint *)&v16[2].__r_.__value_.__r.__words[1], (const CoreML::ShapeRange *)&v409);
            int v18 = (long long *)(v14 + 120);
            CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v409, (const CoreML::ShapeRange *)&v16[5], v18);
            CoreML::ShapeConstraint::updateChannelRange((CoreML::ShapeConstraint *)&v16[2].__r_.__value_.__r.__words[1], (const CoreML::ShapeRange *)&v409);
            if (*((_DWORD *)a2 + 35) == 211)
            {
              unint64_t v20 = (const CoreML::Specification::ResizeBilinearLayerParams *)*((void *)a2 + 16);
            }
            else
            {
              CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v19);
              unint64_t v20 = (const CoreML::Specification::ResizeBilinearLayerParams *)&CoreML::Specification::_ResizeBilinearLayerParams_default_instance_;
            }
            CoreML::Specification::ResizeBilinearLayerParams::ResizeBilinearLayerParams((CoreML::Specification::ResizeBilinearLayerParams *)&v409, v20);
            if (v410 == 2)
            {
              if (*(void *)(*((void *)&v410 + 1) + 8) <= 1uLL) {
                unint64_t v228 = 1;
              }
              else {
                unint64_t v228 = *(void *)(*((void *)&v410 + 1) + 8);
              }
              if (*(void *)(*((void *)&v410 + 1) + 16) <= 1uLL) {
                unint64_t v229 = 1;
              }
              else {
                unint64_t v229 = *(void *)(*((void *)&v410 + 1) + 16);
              }
            }
            else
            {
              unint64_t v228 = 1;
              unint64_t v229 = 1;
            }
            CoreML::ShapeRange::setValue((uint64_t)&v16[6].__r_.__value_.__l.__size_, v228);
            CoreML::ShapeRange::setValue((uint64_t)&v16[7].__r_.__value_.__r.__words[2], v229);
            CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v422, v15, (long long *)&v16[2].__r_.__value_.__r.__words[1]);
            CoreML::ShapeConstraint::updateSequenceRange(v15, (const CoreML::ShapeRange *)&v422);
            CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v422, v17, (long long *)&v16[3].__r_.__value_.__r.__words[2]);
            CoreML::ShapeConstraint::updateBatchRange(v15, (const CoreML::ShapeRange *)&v422);
            CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v422, (const CoreML::ShapeRange *)v18, (long long *)&v16[5]);
            CoreML::ShapeConstraint::updateChannelRange(v15, (const CoreML::ShapeRange *)&v422);
            CoreML::Specification::ResizeBilinearLayerParams::~ResizeBilinearLayerParams((CoreML::Specification::ResizeBilinearLayerParams *)&v409);
            return result;
        }
      }
      goto LABEL_482;
    }
    if (v3 > 149)
    {
      if (v3 <= 164)
      {
        if (v3 == 150)
        {
          long long v73 = (char *)this + 32;
          *(void *)&long long v409 = *(void *)(*((void *)a2 + 4) + 8);
          uint64_t v74 = std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)this + 32, (void *)v409, (long long **)&v409);
          *(void *)&long long v409 = *(void *)(*((void *)a2 + 7) + 8);
          long long v75 = (std::string *)std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v73, (void *)v409, (long long **)&v409);
          std::string::operator=(v75 + 9, *(const std::string **)(*((void *)a2 + 7) + 8));
          CoreML::ShapeConstraint::updateSequenceRange((CoreML::ShapeConstraint *)&v75[2].__r_.__value_.__r.__words[1], (const CoreML::ShapeRange *)(v74 + 56));
          CoreML::ShapeConstraint::updateBatchRange((CoreML::ShapeConstraint *)&v75[2].__r_.__value_.__r.__words[1], (const CoreML::ShapeRange *)(v74 + 88));
          CoreML::ShapeConstraint::updateSequenceRange((CoreML::ShapeConstraint *)(v74 + 56), (const CoreML::ShapeRange *)&v75[2].__r_.__value_.__r.__words[1]);
          CoreML::ShapeConstraint::updateBatchRange((CoreML::ShapeConstraint *)(v74 + 56), (const CoreML::ShapeRange *)&v75[3].__r_.__value_.__r.__words[2]);
          if (*((_DWORD *)a2 + 35) == 150)
          {
            int v77 = (const CoreML::Specification::EmbeddingLayerParams *)*((void *)a2 + 16);
          }
          else
          {
            CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v76);
            int v77 = (const CoreML::Specification::EmbeddingLayerParams *)&CoreML::Specification::_EmbeddingLayerParams_default_instance_;
          }
          CoreML::Specification::EmbeddingLayerParams::EmbeddingLayerParams((CoreML::Specification::EmbeddingLayerParams *)&v409, v77);
          CoreML::ShapeRange::setValue((uint64_t)(v74 + 120), 1uLL);
          CoreML::ShapeRange::setValue((uint64_t)(v74 + 152), 1uLL);
          CoreML::ShapeRange::setValue((uint64_t)(v74 + 184), 1uLL);
          CoreML::ShapeRange::setValue((uint64_t)&v75[5], v411[1]);
          CoreML::ShapeRange::setValue((uint64_t)&v75[6].__r_.__value_.__l.__size_, 1uLL);
          CoreML::ShapeRange::setValue((uint64_t)&v75[7].__r_.__value_.__r.__words[2], 1uLL);
          CoreML::Specification::EmbeddingLayerParams::~EmbeddingLayerParams((CoreML::Specification::EmbeddingLayerParams *)&v409);
          return result;
        }
        if (v3 == 160) {
          goto LABEL_86;
        }
      }
      else if (v3 == 165 || v3 == 170 || v3 == 175)
      {
        goto LABEL_86;
      }
      goto LABEL_482;
    }
    if (v3 > 129)
    {
      if (v3 == 130) {
        goto LABEL_86;
      }
      if (v3 != 140) {
        goto LABEL_482;
      }
      uint64_t v68 = (char *)this + 32;
      *(void *)&long long v409 = *(void *)(*((void *)a2 + 4) + 8);
      long long v69 = std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)this + 32, (void *)v409, (long long **)&v409);
      *(void *)&long long v409 = *(void *)(*((void *)a2 + 7) + 8);
      uint64_t v70 = (std::string *)std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v68, (void *)v409, (long long **)&v409);
      std::string::operator=(v70 + 9, *(const std::string **)(*((void *)a2 + 7) + 8));
      CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v409, (const CoreML::ShapeRange *)&v70[2].__r_.__value_.__r.__words[1], (long long *)(v69 + 56));
      CoreML::ShapeConstraint::updateSequenceRange((CoreML::ShapeConstraint *)&v70[2].__r_.__value_.__r.__words[1], (const CoreML::ShapeRange *)&v409);
      CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v409, (const CoreML::ShapeRange *)&v70[3].__r_.__value_.__r.__words[2], (long long *)(v69 + 88));
      CoreML::ShapeConstraint::updateBatchRange((CoreML::ShapeConstraint *)&v70[2].__r_.__value_.__r.__words[1], (const CoreML::ShapeRange *)&v409);
      CoreML::ShapeConstraint::updateSequenceRange((CoreML::ShapeConstraint *)(v69 + 56), (const CoreML::ShapeRange *)&v70[2].__r_.__value_.__r.__words[1]);
      CoreML::ShapeConstraint::updateBatchRange((CoreML::ShapeConstraint *)(v69 + 56), (const CoreML::ShapeRange *)&v70[3].__r_.__value_.__r.__words[2]);
      if (*((_DWORD *)a2 + 35) == 140)
      {
        int v72 = (uint64_t *)*((void *)a2 + 16);
      }
      else
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v71);
        int v72 = &CoreML::Specification::_InnerProductLayerParams_default_instance_;
      }
      CoreML::ShapeRange::setValue((uint64_t)(v69 + 120), v72[4]);
      CoreML::ShapeRange::setValue((uint64_t)(v69 + 152), 1uLL);
      CoreML::ShapeRange::setValue((uint64_t)(v69 + 184), 1uLL);
      unint64_t v204 = v72[5];
      uint64_t v205 = (uint64_t)&v70[5];
      goto LABEL_267;
    }
    if (v3 != 100)
    {
      if (v3 != 120)
      {
        if (!v3)
        {
          exceptioint n = __cxa_allocate_exception(0x10uLL);
          MEMORY[0x19F3C1380](exception, "Layer type not found.");
          goto LABEL_483;
        }
        goto LABEL_482;
      }
      uint64_t v42 = (char *)this + 32;
      *(void *)&long long v409 = *(void *)(*((void *)a2 + 4) + 8);
      uint64_t v43 = std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)this + 32, (void *)v409, (long long **)&v409);
      *(void *)&long long v409 = *(void *)(*((void *)a2 + 7) + 8);
      uint64_t v44 = (std::string *)std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v42, (void *)v409, (long long **)&v409);
      uint64_t v45 = (CoreML::ShapeConstraint *)&v44[2].__r_.__value_.__r.__words[1];
      std::string::operator=(v44 + 9, *(const std::string **)(*((void *)a2 + 7) + 8));
      CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v409, (const CoreML::ShapeRange *)&v44[2].__r_.__value_.__r.__words[1], (long long *)(v43 + 56));
      CoreML::ShapeConstraint::updateSequenceRange((CoreML::ShapeConstraint *)&v44[2].__r_.__value_.__r.__words[1], (const CoreML::ShapeRange *)&v409);
      CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v409, (const CoreML::ShapeRange *)&v44[3].__r_.__value_.__r.__words[2], (long long *)(v43 + 88));
      CoreML::ShapeConstraint::updateBatchRange((CoreML::ShapeConstraint *)&v44[2].__r_.__value_.__r.__words[1], (const CoreML::ShapeRange *)&v409);
      CoreML::ShapeConstraint::updateChannelRange((CoreML::ShapeConstraint *)&v44[2].__r_.__value_.__r.__words[1], (const CoreML::ShapeRange *)(v43 + 120));
      CoreML::ShapeConstraint::updateSequenceRange((CoreML::ShapeConstraint *)(v43 + 56), (const CoreML::ShapeRange *)&v44[2].__r_.__value_.__r.__words[1]);
      CoreML::ShapeConstraint::updateBatchRange((CoreML::ShapeConstraint *)(v43 + 56), (const CoreML::ShapeRange *)&v44[3].__r_.__value_.__r.__words[2]);
      double result = CoreML::ShapeConstraint::updateChannelRange((CoreML::ShapeConstraint *)(v43 + 56), (const CoreML::ShapeRange *)&v44[5]);
      if (*((_DWORD *)a2 + 35) == 120)
      {
        long long v47 = (uint64_t *)*((void *)a2 + 16);
      }
      else
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v46);
        long long v47 = &CoreML::Specification::_PoolingLayerParams_default_instance_;
      }
      if (*((_DWORD *)v47 + 4) == 2)
      {
        uint64_t v231 = v47[3];
        int v232 = *(_DWORD *)(v231 + 8);
        int v233 = *(_DWORD *)(v231 + 16);
      }
      else
      {
        int v233 = 3;
        int v232 = 3;
      }
      if (*((_DWORD *)v47 + 10) == 2)
      {
        uint64_t v234 = v47[6];
        int v235 = *(_DWORD *)(v234 + 8);
        int v236 = *(_DWORD *)(v234 + 16);
      }
      else
      {
        int v235 = 1;
        int v236 = 1;
      }
      if (*((unsigned char *)v47 + 65))
      {
        CoreML::ShapeRange::setValue((uint64_t)&v44[6].__r_.__value_.__l.__size_, 1uLL);
        uint64_t v237 = (uint64_t)&v44[7].__r_.__value_.__r.__words[2];
LABEL_269:
        unint64_t v264 = 1;
LABEL_270:
        CoreML::ShapeRange::setValue(v237, v264);
        return result;
      }
      int v278 = *((_DWORD *)v47 + 21);
      if (v278 > 30)
      {
        if (v278 != 31)
        {
          if (v278 == 32)
          {
            uint64_t v279 = v47[9];
            if (*(_DWORD *)(v279 + 16) == 2)
            {
              uint64_t v280 = *(void *)(v279 + 24);
              int v281 = *(_DWORD *)(v280 + 8);
              int v282 = *(_DWORD *)(v280 + 16);
            }
            else
            {
              int v282 = 0;
              int v281 = 0;
            }
            BOOL v403 = (v281 | v282) != 0;
            int v406 = v282;
            if (v281 | v282)
            {
              signed int v327 = CoreML::RangeValue::value((CoreML::RangeValue *)(v43 + 152)) - v232 + 2 * (v281 + v235) - 2;
              if (v327 < (int)(v281 + CoreML::RangeValue::value((CoreML::RangeValue *)(v43 + 152)))) {
                unsigned int v328 = 0;
              }
              else {
                unsigned int v328 = -1;
              }
            }
            else
            {
              unsigned int v328 = 0;
            }
            BOOL v329 = (const CoreML::ShapeRange *)(v43 + 152);
            CoreML::ShapeRange::operator+((CoreML::ShapeRange *)v418, (uint64_t)(v43 + 152), 2 * v281 - v232);
            CoreML::ShapeRange::divideAndRoundUp((CoreML::ShapeRange *)&v419, (uint64_t)v418, v235);
            CoreML::ShapeRange::operator+((CoreML::ShapeRange *)&v422, (uint64_t)&v419, 1u);
            CoreML::ShapeRange::operator+((CoreML::ShapeRange *)&v409, (uint64_t)&v422, v328);
            CoreML::ShapeConstraint::updateHeightRange(v45, (const CoreML::ShapeRange *)&v409);
            int v330 = v232 - 2 * v281;
            if (v330 >= 1)
            {
              uint64_t v331 = CoreML::RangeValue::value((CoreML::RangeValue *)&v44[6].__r_.__value_.__r.__words[1]);
              LOBYTE(v422) = 0;
              *((void *)&v422 + 1) = v331 + v330 - 1;
              LOBYTE(v423) = 1;
              *((void *)&v423 + 1) = 0;
              CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v409, (const CoreML::ShapeRange *)(v43 + 152), &v422);
              long long v332 = v410;
              *(_OWORD *)BOOL v329 = v409;
              *(_OWORD *)(v43 + 168) = v332;
            }
            if (v403)
            {
              int v333 = v406;
              signed int v334 = CoreML::RangeValue::value((CoreML::RangeValue *)(v43 + 184)) - v233 + 2 * (v406 + v236) - 2;
              if (v334 < (int)(v406 + CoreML::RangeValue::value((CoreML::RangeValue *)(v43 + 184)))) {
                unsigned int v335 = 0;
              }
              else {
                unsigned int v335 = -1;
              }
            }
            else
            {
              unsigned int v335 = 0;
              int v333 = v406;
            }
            CoreML::ShapeRange::operator+((CoreML::ShapeRange *)v418, (uint64_t)(v43 + 184), 2 * v333 - v233);
            CoreML::ShapeRange::divideAndRoundUp((CoreML::ShapeRange *)&v419, (uint64_t)v418, v236);
            CoreML::ShapeRange::operator+((CoreML::ShapeRange *)&v422, (uint64_t)&v419, 1u);
            CoreML::ShapeRange::operator+((CoreML::ShapeRange *)&v409, (uint64_t)&v422, v335);
            double result = CoreML::ShapeConstraint::updateWidthRange(v45, (const CoreML::ShapeRange *)&v409);
            int v336 = v233 - 2 * v333;
            if (v336 >= 1)
            {
              uint64_t v337 = CoreML::RangeValue::value((CoreML::RangeValue *)&v44[7].__r_.__value_.__r.__words[2]);
              LOBYTE(v422) = 0;
              *((void *)&v422 + 1) = v337 + v336 - 1;
              LOBYTE(v423) = 1;
              *((void *)&v423 + 1) = 0;
              CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v409, v329, &v422);
              double result = *(double *)&v409;
              long long v338 = v410;
              *(_OWORD *)BOOL v329 = v409;
              *(_OWORD *)(v43 + 168) = v338;
            }
          }
          return result;
        }
        CoreML::ShapeRange::operator-((CoreML::ShapeRange *)&v419, (uint64_t)(v43 + 152), 1u);
        CoreML::ShapeRange::operator/((uint64_t)&v422, (uint64_t)&v419, v235);
        CoreML::ShapeRange::operator+((CoreML::ShapeRange *)&v409, (uint64_t)&v422, 1u);
        CoreML::ShapeConstraint::updateHeightRange(v45, (const CoreML::ShapeRange *)&v409);
        CoreML::ShapeRange::operator-((CoreML::ShapeRange *)&v419, (uint64_t)(v43 + 184), 1u);
        uint64_t v311 = v236;
        goto LABEL_397;
      }
      if (v278 == 30)
      {
        uint64_t v300 = *(uint64_t **)(v47[9] + 16);
        if (!v300) {
          uint64_t v300 = &CoreML::Specification::_BorderAmounts_default_instance_;
        }
        if (*((_DWORD *)v300 + 6) == 2)
        {
          uint64_t v301 = v300[4];
          uint64_t v303 = *(void *)(v301 + 8);
          uint64_t v302 = *(void *)(v301 + 16);
          int v405 = *(_DWORD *)(v302 + 16);
          int v402 = *(_DWORD *)(v302 + 24);
          int v304 = *(_DWORD *)(v303 + 24) + *(_DWORD *)(v303 + 16);
        }
        else
        {
          int v405 = 0;
          int v402 = 0;
          int v304 = 0;
        }
        if (v232 - v304 <= 0)
        {
          uint64_t v340 = v235;
        }
        else
        {
          if (CoreML::RangeValue::value((CoreML::RangeValue *)&v44[6].__r_.__value_.__r.__words[1])) {
            uint64_t v339 = CoreML::RangeValue::value((CoreML::RangeValue *)&v44[6].__r_.__value_.__r.__words[1]) - 1;
          }
          else {
            uint64_t v339 = 0;
          }
          uint64_t v340 = v235;
          LOBYTE(v422) = 0;
          *((void *)&v422 + 1) = v339 * v235 + (v232 - v304);
          LOBYTE(v423) = 1;
          *((void *)&v423 + 1) = 0;
          CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v409, (const CoreML::ShapeRange *)(v43 + 152), &v422);
          long long v344 = v410;
          *(_OWORD *)(v43 + 152) = v409;
          *(_OWORD *)(v43 + 168) = v344;
        }
        CoreML::ShapeRange::operator+((CoreML::ShapeRange *)&v419, (uint64_t)(v43 + 152), v304 - v232);
        CoreML::ShapeRange::operator/((uint64_t)&v422, (uint64_t)&v419, v340);
        CoreML::ShapeRange::operator+((CoreML::ShapeRange *)&v409, (uint64_t)&v422, 1u);
        CoreML::ShapeConstraint::updateHeightRange(v45, (const CoreML::ShapeRange *)&v409);
        if (v233 - (v402 + v405) <= 0)
        {
          uint64_t v346 = v236;
        }
        else
        {
          if (CoreML::RangeValue::value((CoreML::RangeValue *)&v44[7].__r_.__value_.__r.__words[2])) {
            uint64_t v345 = CoreML::RangeValue::value((CoreML::RangeValue *)&v44[7].__r_.__value_.__r.__words[2]) - 1;
          }
          else {
            uint64_t v345 = 0;
          }
          uint64_t v346 = v236;
          LOBYTE(v422) = 0;
          *((void *)&v422 + 1) = v345 * v236 + (v233 - (v402 + v405));
          LOBYTE(v423) = 1;
          *((void *)&v423 + 1) = 0;
          CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v409, (const CoreML::ShapeRange *)(v43 + 184), &v422);
          long long v347 = v410;
          *(_OWORD *)(v43 + 184) = v409;
          *(_OWORD *)(v43 + 20CoreML::Specification::ClassConfidenceThresholding::New(this, 0) = v347;
        }
        CoreML::ShapeRange::operator+((CoreML::ShapeRange *)&v419, (uint64_t)(v43 + 184), v402 + v405 - v233);
        uint64_t v311 = v346;
LABEL_397:
        CoreML::ShapeRange::operator/((uint64_t)&v422, (uint64_t)&v419, v311);
LABEL_477:
        CoreML::ShapeRange::operator+((CoreML::ShapeRange *)&v409, (uint64_t)&v422, 1u);
        return CoreML::ShapeConstraint::updateWidthRange(v45, (const CoreML::ShapeRange *)&v409);
      }
      if (v278) {
        return result;
      }
      exceptioint n = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x19F3C1380](exception, "Pooling padding type not set");
LABEL_483:
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    uint64_t v153 = (char *)this + 32;
    *(void *)&long long v409 = *(void *)(*((void *)a2 + 4) + 8);
    std::string v154 = std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)this + 32, (void *)v409, (long long **)&v409);
    std::string v155 = (CoreML::ShapeConstraint *)(v154 + 56);
    *(void *)&long long v409 = *(void *)(*((void *)a2 + 7) + 8);
    std::string::size_type v156 = (std::string *)std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v153, (void *)v409, (long long **)&v409);
    uint64_t v45 = (CoreML::ShapeConstraint *)&v156[2].__r_.__value_.__r.__words[1];
    std::string::operator=(v156 + 9, *(const std::string **)(*((void *)a2 + 7) + 8));
    CoreML::ShapeConstraint::updateSequenceRange((CoreML::ShapeConstraint *)&v156[2].__r_.__value_.__r.__words[1], (const CoreML::ShapeRange *)(v154 + 56));
    CoreML::ShapeConstraint::updateBatchRange((CoreML::ShapeConstraint *)&v156[2].__r_.__value_.__r.__words[1], (const CoreML::ShapeRange *)(v154 + 88));
    CoreML::ShapeConstraint::updateSequenceRange((CoreML::ShapeConstraint *)(v154 + 56), (const CoreML::ShapeRange *)&v156[2].__r_.__value_.__r.__words[1]);
    CoreML::ShapeConstraint::updateBatchRange((CoreML::ShapeConstraint *)(v154 + 56), (const CoreML::ShapeRange *)&v156[3].__r_.__value_.__r.__words[2]);
    if (*((_DWORD *)a2 + 35) == 100)
    {
      uint64_t v158 = (uint64_t *)*((void *)a2 + 16);
    }
    else
    {
      CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v157);
      uint64_t v158 = &CoreML::Specification::_ConvolutionLayerParams_default_instance_;
    }
    if (*((unsigned char *)v158 + 152))
    {
      unint64_t v230 = v158[17];
    }
    else
    {
      unint64_t v265 = v158[18];
      if (v265 <= 1) {
        unint64_t v265 = 1;
      }
      unint64_t v230 = v265 * v158[17];
    }
    CoreML::ShapeRange::setValue((uint64_t)(v154 + 120), (int)v230);
    if (*((_DWORD *)v158 + 4) == 2)
    {
      uint64_t v266 = v158[3];
      int v267 = *(_DWORD *)(v266 + 8);
      int v268 = *(_DWORD *)(v266 + 16);
    }
    else
    {
      int v268 = 3;
      int v267 = 3;
    }
    if (*((_DWORD *)v158 + 10) == 2)
    {
      uint64_t v269 = v158[6];
      int v270 = *(_DWORD *)(v269 + 8);
      int v271 = *(_DWORD *)(v269 + 16);
    }
    else
    {
      int v271 = 1;
      int v270 = 1;
    }
    int v404 = v271;
    if (*((_DWORD *)v158 + 16) == 2)
    {
      uint64_t v272 = v158[9];
      int v273 = *(_DWORD *)(v272 + 8);
      int v274 = *(_DWORD *)(v272 + 16);
    }
    else
    {
      int v274 = 1;
      int v273 = 1;
    }
    CoreML::ShapeRange::setValue((uint64_t)&v156[5], v158[16]);
    int v275 = *((unsigned __int8 *)v158 + 152);
    if (*((unsigned char *)v158 + 152) && *((_DWORD *)v158 + 22) == 2)
    {
      CoreML::ShapeRange::setValue((uint64_t)&v156[6].__r_.__value_.__l.__size_, *(void *)(v158[12] + 8));
      unint64_t v264 = *(void *)(v158[12] + 16);
      uint64_t v237 = (uint64_t)&v156[7].__r_.__value_.__r.__words[2];
      goto LABEL_270;
    }
    int v276 = *((_DWORD *)v158 + 43);
    if (v276 != 50)
    {
      if (v276 == 51)
      {
        if (!*((unsigned char *)v158 + 152))
        {
          uint64_t v312 = 1;
          CoreML::ShapeRange::operator-((CoreML::ShapeRange *)&v419, (uint64_t)(v154 + 152), 1u);
          CoreML::ShapeRange::operator/((uint64_t)&v422, (uint64_t)&v419, v270);
          CoreML::ShapeRange::operator+((CoreML::ShapeRange *)&v409, (uint64_t)&v422, 1u);
          CoreML::ShapeConstraint::updateHeightRange(v45, (const CoreML::ShapeRange *)&v409);
          uint64_t v313 = CoreML::RangeValue::value((CoreML::RangeValue *)&v156[6].__r_.__value_.__r.__words[1]);
          LOBYTE(v422) = 0;
          *((void *)&v422 + 1) = v313;
          LOBYTE(v423) = 1;
          *((void *)&v423 + 1) = 0;
          CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v409, (const CoreML::ShapeRange *)(v154 + 152), &v422);
          long long v314 = v410;
          *(_OWORD *)(v154 + 152) = v409;
          *(_OWORD *)(v154 + 168) = v314;
          if (v156[7].__r_.__value_.__s.__data_[0])
          {
            std::string::size_type v315 = 0;
            uint64_t v316 = 1;
          }
          else
          {
            uint64_t v316 = 0;
            std::string::size_type v315 = v156[7].__r_.__value_.__l.__size_ * v270;
          }
          *(void *)&long long v409 = v316;
          *((void *)&v409 + 1) = v315;
          CoreML::ShapeConstraint::upperBoundHeight(v155, (const CoreML::RangeValue *)&v409);
          CoreML::ShapeRange::operator-((CoreML::ShapeRange *)&v419, (uint64_t)(v154 + 184), 1u);
          CoreML::ShapeRange::operator/((uint64_t)&v422, (uint64_t)&v419, v404);
          CoreML::ShapeRange::operator+((CoreML::ShapeRange *)&v409, (uint64_t)&v422, 1u);
          CoreML::ShapeConstraint::updateWidthRange(v45, (const CoreML::ShapeRange *)&v409);
          uint64_t v341 = CoreML::RangeValue::value((CoreML::RangeValue *)&v156[7].__r_.__value_.__r.__words[2]);
          LOBYTE(v422) = 0;
          *((void *)&v422 + 1) = v341;
          LOBYTE(v423) = 1;
          *((void *)&v423 + 1) = 0;
          CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v409, (const CoreML::ShapeRange *)(v154 + 184), &v422);
          long long v342 = v410;
          *(_OWORD *)(v154 + 184) = v409;
          *(_OWORD *)(v154 + 20CoreML::Specification::ClassConfidenceThresholding::New(this, 0) = v342;
          if (v156[8].__r_.__value_.__s.__data_[8])
          {
            std::string::size_type v343 = 0;
          }
          else
          {
            uint64_t v312 = 0;
            std::string::size_type v343 = v156[8].__r_.__value_.__r.__words[2] * v404;
          }
          *(void *)&long long v409 = v312;
          *((void *)&v409 + 1) = v343;
          return CoreML::ShapeConstraint::upperBoundWidth(v155, (const CoreML::RangeValue *)&v409);
        }
        CoreML::ShapeRange::operator*((CoreML::ShapeRange *)&v409, (uint64_t)(v154 + 152), v270);
        CoreML::ShapeConstraint::updateHeightRange(v45, (const CoreML::ShapeRange *)&v409);
        CoreML::ShapeRange::operator*((CoreML::ShapeRange *)&v409, (uint64_t)(v154 + 184), v404);
        return CoreML::ShapeConstraint::updateWidthRange(v45, (const CoreML::ShapeRange *)&v409);
      }
      if (v276) {
        return result;
      }
      exceptioint n = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x19F3C1380](exception, "Convolution padding type not set");
      goto LABEL_483;
    }
    int v291 = v273 * (v267 - 1);
    int v292 = v274 * (v268 - 1);
    uint64_t v293 = *(uint64_t **)(v158[20] + 16);
    if (!v293) {
      uint64_t v293 = &CoreML::Specification::_BorderAmounts_default_instance_;
    }
    if (*((_DWORD *)v293 + 6) == 2)
    {
      uint64_t v294 = v293[4];
      uint64_t v296 = *(void *)(v294 + 8);
      uint64_t v295 = *(void *)(v294 + 16);
      unsigned int v297 = *(_DWORD *)(v296 + 16);
      unsigned int v298 = *(_DWORD *)(v296 + 24);
      unsigned int v401 = *(_DWORD *)(v295 + 16);
      unsigned int v400 = *(_DWORD *)(v295 + 24);
    }
    else
    {
      unsigned int v401 = 0;
      unsigned int v400 = 0;
      unsigned int v298 = 0;
      unsigned int v297 = 0;
    }
    int v305 = v291 + 1;
    int v306 = v292 + 1;
    if (!v275)
    {
      unsigned int v317 = v297 + v298;
      uint64_t v318 = v305 - v317;
      if ((int)v318 >= 1)
      {
        int v399 = v305;
        if (CoreML::RangeValue::value((CoreML::RangeValue *)&v156[6].__r_.__value_.__r.__words[1])) {
          uint64_t v319 = CoreML::RangeValue::value((CoreML::RangeValue *)&v156[6].__r_.__value_.__r.__words[1]) - 1;
        }
        else {
          uint64_t v319 = 0;
        }
        LOBYTE(v422) = 0;
        *((void *)&v422 + 1) = v319 * v270 + v318;
        LOBYTE(v423) = 1;
        *((void *)&v423 + 1) = 0;
        CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v409, (const CoreML::ShapeRange *)(v154 + 152), &v422);
        std::string::size_type v348 = 0;
        long long v349 = v410;
        *(_OWORD *)(v154 + 152) = v409;
        *(_OWORD *)(v154 + 168) = v349;
        uint64_t v350 = v156[7].__r_.__value_.__s.__data_[0];
        if (!v156[7].__r_.__value_.__s.__data_[0])
        {
          std::string::size_type size = v156[7].__r_.__value_.__l.__size_;
          BOOL v352 = size != 0;
          std::string::size_type v348 = size - 1;
          if (!v352) {
            std::string::size_type v348 = 0;
          }
        }
        uint64_t v353 = v318 + v348 * v270;
        if (v156[7].__r_.__value_.__s.__data_[0]) {
          uint64_t v354 = 0;
        }
        else {
          uint64_t v354 = v353;
        }
        *(void *)&long long v409 = v350 != 0;
        *((void *)&v409 + 1) = v354;
        if (!*((void *)v154 + 21))
        {
          uint64_t v372 = *((void *)v154 + 22);
          *(void *)&long long v422 = *((void *)v154 + 21);
          *((void *)&v422 + 1) = v372;
          if (CoreML::RangeValue::value((CoreML::RangeValue *)&v422) + (((_BYTE)v317 - (_BYTE)v399) & 1))
          {
            if (v350) {
              uint64_t v373 = 0;
            }
            else {
              uint64_t v373 = v353 + 1;
            }
            *(void *)&long long v409 = v350 != 0;
            *((void *)&v409 + 1) = v373;
          }
        }
        CoreML::ShapeConstraint::upperBoundHeight(v155, (const CoreML::RangeValue *)&v409);
        int v305 = v399;
      }
      CoreML::ShapeRange::operator+((CoreML::ShapeRange *)&v419, (uint64_t)(v154 + 152), v317 - v305);
      CoreML::ShapeRange::operator/((uint64_t)&v422, &v419, v270);
      CoreML::ShapeRange::operator+((CoreML::ShapeRange *)&v409, (uint64_t)&v422, 1u);
      CoreML::ShapeConstraint::updateHeightRange(v45, (const CoreML::ShapeRange *)&v409);
      unsigned int v374 = v400 + v401;
      uint64_t v375 = v306 - (v400 + v401);
      if ((int)v375 >= 1)
      {
        if (CoreML::RangeValue::value((CoreML::RangeValue *)&v156[7].__r_.__value_.__r.__words[2])) {
          uint64_t v376 = CoreML::RangeValue::value((CoreML::RangeValue *)&v156[7].__r_.__value_.__r.__words[2]) - 1;
        }
        else {
          uint64_t v376 = 0;
        }
        LOBYTE(v422) = 0;
        *((void *)&v422 + 1) = v376 * v404 + v375;
        LOBYTE(v423) = 1;
        *((void *)&v423 + 1) = 0;
        CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v409, (const CoreML::ShapeRange *)(v154 + 184), &v422);
        std::string::size_type v387 = 0;
        long long v388 = v410;
        *(_OWORD *)(v154 + 184) = v409;
        *(_OWORD *)(v154 + 20CoreML::Specification::ClassConfidenceThresholding::New(this, 0) = v388;
        uint64_t v389 = v156[8].__r_.__value_.__s.__data_[8];
        if (!v156[8].__r_.__value_.__s.__data_[8])
        {
          std::string::size_type v390 = v156[8].__r_.__value_.__r.__words[2];
          BOOL v352 = v390 != 0;
          std::string::size_type v387 = v390 - 1;
          if (!v352) {
            std::string::size_type v387 = 0;
          }
        }
        uint64_t v391 = v375 + v387 * v404;
        if (v389) {
          uint64_t v392 = 0;
        }
        else {
          uint64_t v392 = v375 + v387 * v404;
        }
        *(void *)&long long v409 = v389 != 0;
        *((void *)&v409 + 1) = v392;
        if (!*((void *)v154 + 25))
        {
          uint64_t v393 = *((void *)v154 + 26);
          *(void *)&long long v422 = *((void *)v154 + 25);
          *((void *)&v422 + 1) = v393;
          if (CoreML::RangeValue::value((CoreML::RangeValue *)&v422) + (((_BYTE)v374 - (_BYTE)v306) & 1))
          {
            if (v389) {
              uint64_t v394 = 0;
            }
            else {
              uint64_t v394 = v391 + 1;
            }
            *(void *)&long long v409 = v389 != 0;
            *((void *)&v409 + 1) = v394;
          }
        }
        CoreML::ShapeConstraint::upperBoundWidth(v155, (const CoreML::RangeValue *)&v409);
      }
      CoreML::ShapeRange::operator+((CoreML::ShapeRange *)&v419, (uint64_t)(v154 + 184), v374 - v306);
      CoreML::ShapeRange::operator/((uint64_t)&v422, &v419, v404);
      goto LABEL_477;
    }
    unsigned int v398 = v291 + 1;
    int v307 = CoreML::RangeValue::value((CoreML::RangeValue *)&v156[6].__r_.__value_.__r.__words[1]);
    std::string::size_type v308 = v156[7].__r_.__value_.__l.__size_;
    int v309 = (int)(v297 + v298 + ~v291 + v307) / v270;
    if ((v298 & 0x80000000) != 0)
    {
      if (!v156[7].__r_.__value_.__s.__data_[0])
      {
        std::string::size_type v355 = -v298;
        BOOL v352 = v308 >= v355;
        std::string::size_type v310 = v308 - v355;
        if (!v352) {
          std::string::size_type v310 = 0;
        }
        goto LABEL_409;
      }
    }
    else if (!v156[7].__r_.__value_.__s.__data_[0])
    {
      std::string::size_type v310 = v308 + v298;
LABEL_409:
      int v326 = 1;
LABEL_410:
      if ((v297 & 0x80000000) != 0)
      {
        if (v326)
        {
          std::string::size_type v357 = -v297;
          BOOL v352 = v310 >= v357;
          unint64_t v358 = v310 - v357;
          if (v352) {
            unint64_t v356 = v358;
          }
          else {
            unint64_t v356 = 0;
          }
LABEL_417:
          if (v291 > -2)
          {
            uint64_t v359 = 0;
            unint64_t v360 = v356 - v398;
            if (v356 < v398) {
              unint64_t v360 = 0;
            }
          }
          else
          {
            uint64_t v359 = 0;
            unint64_t v360 = v356 + ~v291;
          }
LABEL_422:
          *(void *)&long long v409 = v359;
          *((void *)&v409 + 1) = v360;
          char v361 = CoreML::RangeValue::operator/((CoreML::RangeValue *)&v409, v270);
          if (v361) {
            uint64_t v363 = 0;
          }
          else {
            uint64_t v363 = v362 + 1;
          }
          BOOL v407 = v361 != 0;
          uint64_t v408 = v363;
          if ((v309 & 0x80000000) == 0)
          {
            LOBYTE(v422) = 0;
            *((void *)&v422 + 1) = (v309 + 1);
            LOBYTE(v423) = 1;
            *((void *)&v423 + 1) = 0;
            CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v409, (const CoreML::ShapeRange *)(v154 + 152), &v422);
            long long v364 = v410;
            *(_OWORD *)(v154 + 152) = v409;
            *(_OWORD *)(v154 + 168) = v364;
          }
          CoreML::ShapeConstraint::upperBoundHeight(v155, (const CoreML::RangeValue *)&v407);
          CoreML::ShapeRange::operator-((CoreML::ShapeRange *)v417, (uint64_t)(v154 + 152), 1u);
          CoreML::ShapeRange::operator*((CoreML::ShapeRange *)v418, (uint64_t)v417, v270);
          CoreML::ShapeRange::operator+((CoreML::ShapeRange *)&v419, (uint64_t)v418, v398);
          CoreML::ShapeRange::operator-((CoreML::ShapeRange *)&v422, (uint64_t)&v419, v297);
          CoreML::ShapeRange::operator-((CoreML::ShapeRange *)&v409, (uint64_t)&v422, v298);
          CoreML::ShapeConstraint::updateHeightRange(v45, (const CoreML::ShapeRange *)&v409);
          int v365 = CoreML::RangeValue::value((CoreML::RangeValue *)&v156[7].__r_.__value_.__r.__words[2]);
          uint64_t v366 = v156[8].__r_.__value_.__s.__data_[8];
          unint64_t v367 = v156[8].__r_.__value_.__r.__words[2];
          int v368 = (int)(v400 + v401 + ~v292 + v365) / v404;
          if ((v401 & 0x80000000) != 0)
          {
            unsigned int v369 = v292 + 1;
            if (!v366)
            {
              unint64_t v377 = -v401;
              BOOL v352 = v367 >= v377;
              unint64_t v370 = v367 - v377;
              if (!v352) {
                unint64_t v370 = 0;
              }
              goto LABEL_443;
            }
          }
          else
          {
            unsigned int v369 = v292 + 1;
            if (!v366)
            {
              unint64_t v370 = v367 + v401;
LABEL_443:
              int v371 = 1;
LABEL_444:
              if ((v400 & 0x80000000) != 0)
              {
                if (v371)
                {
                  unint64_t v379 = -v400;
                  BOOL v352 = v370 >= v379;
                  unint64_t v380 = v370 - v379;
                  if (v352) {
                    unint64_t v378 = v380;
                  }
                  else {
                    unint64_t v378 = 0;
                  }
LABEL_451:
                  if (v292 > -2)
                  {
                    uint64_t v381 = 0;
                    unint64_t v382 = v378 - v369;
                    if (v378 < v369) {
                      unint64_t v382 = 0;
                    }
                  }
                  else
                  {
                    uint64_t v381 = 0;
                    unint64_t v382 = v378 + ~v292;
                  }
                  goto LABEL_456;
                }
              }
              else if (v371)
              {
                unint64_t v378 = v370 + v400;
                goto LABEL_451;
              }
              unint64_t v382 = 0;
              uint64_t v381 = 1;
LABEL_456:
              *(void *)&long long v409 = v381;
              *((void *)&v409 + 1) = v382;
              char v383 = CoreML::RangeValue::operator/((CoreML::RangeValue *)&v409, v404);
              if (v383) {
                uint64_t v385 = 0;
              }
              else {
                uint64_t v385 = v384 + 1;
              }
              BOOL v407 = v383 != 0;
              uint64_t v408 = v385;
              if ((v368 & 0x80000000) == 0)
              {
                LOBYTE(v422) = 0;
                *((void *)&v422 + 1) = (v368 + 1);
                LOBYTE(v423) = 1;
                *((void *)&v423 + 1) = 0;
                CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v409, (const CoreML::ShapeRange *)(v154 + 184), &v422);
                long long v386 = v410;
                *(_OWORD *)(v154 + 184) = v409;
                *(_OWORD *)(v154 + 20CoreML::Specification::ClassConfidenceThresholding::New(this, 0) = v386;
              }
              CoreML::ShapeConstraint::upperBoundWidth(v155, (const CoreML::RangeValue *)&v407);
              CoreML::ShapeRange::operator-((CoreML::ShapeRange *)v417, (uint64_t)(v154 + 184), 1u);
              CoreML::ShapeRange::operator*((CoreML::ShapeRange *)v418, (uint64_t)v417, v404);
              CoreML::ShapeRange::operator+((CoreML::ShapeRange *)&v419, (uint64_t)v418, v369);
              CoreML::ShapeRange::operator-((CoreML::ShapeRange *)&v422, (uint64_t)&v419, v400);
              CoreML::ShapeRange::operator-((CoreML::ShapeRange *)&v409, (uint64_t)&v422, v401);
              return CoreML::ShapeConstraint::updateWidthRange(v45, (const CoreML::ShapeRange *)&v409);
            }
          }
          int v371 = 0;
          unint64_t v370 = 0;
          goto LABEL_444;
        }
      }
      else if (v326)
      {
        unint64_t v356 = v310 + v297;
        goto LABEL_417;
      }
      unint64_t v360 = 0;
      uint64_t v359 = 1;
      goto LABEL_422;
    }
    int v326 = 0;
    std::string::size_type v310 = 0;
    goto LABEL_410;
  }
  if (v3 > 319)
  {
    if (v3 <= 399)
    {
      if (v3 <= 339)
      {
        if (v3 == 320)
        {
          uint64_t v96 = (char *)this + 32;
          *(void *)&long long v409 = *(void *)(*((void *)a2 + 4) + 8);
          uint64_t v97 = std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)this + 32, (void *)v409, (long long **)&v409);
          *(void *)&long long v409 = *(void *)(*((void *)a2 + 7) + 8);
          long long v98 = (std::string *)std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v96, (void *)v409, (long long **)&v409);
          std::string::size_type v99 = (CoreML::ShapeConstraint *)&v98[2].__r_.__value_.__r.__words[1];
          long long v100 = std::string::operator=(v98 + 9, *(const std::string **)(*((void *)a2 + 7) + 8));
          if (*((_DWORD *)a2 + 35) == 320)
          {
            uint64_t v101 = (uint64_t *)*((void *)a2 + 16);
          }
          else
          {
            CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v100);
            uint64_t v101 = &CoreML::Specification::_ConcatLayerParams_default_instance_;
          }
          unint64_t v164 = (const CoreML::ShapeRange *)(v97 + 56);
          if (*((unsigned char *)v101 + 16))
          {
            long long v165 = *(_OWORD *)(v97 + 72);
            long long v409 = *(_OWORD *)v164;
            long long v410 = v165;
            CoreML::ShapeConstraint::updateChannelRange(v99, (const CoreML::ShapeRange *)(v97 + 120));
          }
          else
          {
            long long v244 = *(_OWORD *)(v97 + 136);
            long long v409 = *(_OWORD *)(v97 + 120);
            long long v410 = v244;
            CoreML::ShapeConstraint::updateSequenceRange(v99, v164);
          }
          CoreML::ShapeConstraint::updateBatchRange(v99, (const CoreML::ShapeRange *)(v97 + 88));
          CoreML::ShapeConstraint::updateHeightRange(v99, (const CoreML::ShapeRange *)(v97 + 152));
          CoreML::ShapeConstraint::updateWidthRange(v99, (const CoreML::ShapeRange *)(v97 + 184));
          if (*((int *)a2 + 6) >= 2)
          {
            uint64_t v246 = (const CoreML::ShapeRange *)&v98[5];
            uint64_t v247 = (const CoreML::ShapeRange *)&v98[3].__r_.__value_.__r.__words[2];
            int v248 = (const CoreML::ShapeRange *)&v98[6].__r_.__value_.__r.__words[1];
            long long v249 = (const CoreML::ShapeRange *)&v98[7].__r_.__value_.__r.__words[2];
            uint64_t v250 = 2;
            do
            {
              *(void *)&long long v422 = *(void *)(*((void *)a2 + 4) + 8 * v250);
              unint64_t v251 = std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v96, (void *)v422, (long long **)&v422);
              int v252 = v251;
              if (*((_DWORD *)a2 + 35) == 320)
              {
                long long v253 = (uint64_t *)*((void *)a2 + 16);
              }
              else
              {
                CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v251);
                long long v253 = &CoreML::Specification::_ConcatLayerParams_default_instance_;
              }
              if (*((unsigned char *)v253 + 16))
              {
                CoreML::ShapeRange::operator+((CoreML::ShapeRange *)&v422, (uint64_t)&v409, (long long *)(v252 + 56));
                long long v409 = v422;
                long long v410 = v423;
                CoreML::ShapeConstraint::updateChannelRange(v99, (const CoreML::ShapeRange *)(v252 + 120));
                CoreML::ShapeConstraint::updateChannelRange((CoreML::ShapeConstraint *)(v252 + 56), v246);
              }
              else
              {
                CoreML::ShapeRange::operator+((CoreML::ShapeRange *)&v422, (uint64_t)&v409, (long long *)(v252 + 120));
                long long v409 = v422;
                long long v410 = v423;
                CoreML::ShapeConstraint::updateSequenceRange(v99, (const CoreML::ShapeRange *)(v252 + 56));
                CoreML::ShapeConstraint::updateSequenceRange((CoreML::ShapeConstraint *)(v252 + 56), v99);
              }
              CoreML::ShapeConstraint::updateBatchRange(v99, (const CoreML::ShapeRange *)(v252 + 88));
              CoreML::ShapeConstraint::updateBatchRange((CoreML::ShapeConstraint *)(v252 + 56), v247);
              CoreML::ShapeConstraint::updateHeightRange(v99, (const CoreML::ShapeRange *)(v252 + 152));
              CoreML::ShapeConstraint::updateHeightRange((CoreML::ShapeConstraint *)(v252 + 56), v248);
              CoreML::ShapeConstraint::updateWidthRange(v99, (const CoreML::ShapeRange *)(v252 + 184));
              CoreML::ShapeConstraint::updateWidthRange((CoreML::ShapeConstraint *)(v252 + 56), v249);
              BOOL v41 = v250++ < *((int *)a2 + 6);
            }
            while (v41);
          }
          if (*((_DWORD *)a2 + 35) == 320)
          {
            int v254 = (uint64_t *)*((void *)a2 + 16);
          }
          else
          {
            CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v245);
            int v254 = &CoreML::Specification::_ConcatLayerParams_default_instance_;
          }
          if (*((unsigned char *)v254 + 16)) {
            return CoreML::ShapeConstraint::updateSequenceRange(v99, (const CoreML::ShapeRange *)&v409);
          }
          else {
            return CoreML::ShapeConstraint::updateChannelRange(v99, (const CoreML::ShapeRange *)&v409);
          }
        }
        if (v3 != 330) {
          goto LABEL_482;
        }
        uint64_t v48 = (char *)this + 32;
        *(void *)&long long v409 = *(void *)(*((void *)a2 + 4) + 8);
        uint64_t v49 = std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)this + 32, (void *)v409, (long long **)&v409);
        long long v50 = v49;
        uint64_t v51 = (const CoreML::ShapeRange *)(v49 + 56);
        if (*((_DWORD *)a2 + 35) == 330)
        {
          uint64_t v52 = (uint64_t *)*((void *)a2 + 16);
        }
        else
        {
          CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v49);
          uint64_t v52 = &CoreML::Specification::_SplitLayerParams_default_instance_;
        }
        uint64_t v182 = v52[2];
        if (*((int *)a2 + 12) >= 1)
        {
          uint64_t v183 = (const CoreML::ShapeRange *)(v50 + 88);
          long long v184 = (long long *)(v50 + 120);
          BOOL v185 = (const CoreML::ShapeRange *)(v50 + 152);
          std::string::size_type v186 = (const CoreML::ShapeRange *)(v50 + 184);
          uint64_t v187 = 1;
          do
          {
            *(void *)&long long v409 = *(void *)(*((void *)a2 + 7) + 8 * v187);
            long long v188 = (std::string *)std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v48, (void *)v409, (long long **)&v409);
            unint64_t v189 = (CoreML::ShapeConstraint *)&v188[2].__r_.__value_.__r.__words[1];
            std::string::operator=(v188 + 9, *(const std::string **)(*((void *)a2 + 7) + 8 * v187));
            CoreML::ShapeConstraint::updateSequenceRange(v189, v51);
            CoreML::ShapeConstraint::updateBatchRange(v189, v183);
            CoreML::ShapeRange::operator/((uint64_t)&v409, v184, v182);
            CoreML::ShapeConstraint::updateChannelRange(v189, (const CoreML::ShapeRange *)&v409);
            CoreML::ShapeConstraint::updateHeightRange(v189, v185);
            CoreML::ShapeConstraint::updateWidthRange(v189, v186);
            BOOL v41 = v187++ < *((int *)a2 + 12);
          }
          while (v41);
        }
        *(void *)&long long v409 = *(void *)(*((void *)a2 + 7) + 8);
        long long v190 = std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v48, (void *)v409, (long long **)&v409);
        CoreML::ShapeConstraint::updateSequenceRange(v51, (const CoreML::ShapeRange *)(v190 + 56));
        CoreML::ShapeConstraint::updateBatchRange(v51, (const CoreML::ShapeRange *)(v190 + 88));
        CoreML::ShapeRange::operator*((CoreML::ShapeRange *)&v409, (uint64_t)(v190 + 120), (int)v182);
        CoreML::ShapeConstraint::updateChannelRange(v51, (const CoreML::ShapeRange *)&v409);
        CoreML::ShapeConstraint::updateHeightRange(v51, (const CoreML::ShapeRange *)(v190 + 152));
        BOOL v159 = (const CoreML::ShapeRange *)(v190 + 184);
        long long v160 = v51;
      }
      else
      {
        if (v3 != 340)
        {
          if (v3 == 345)
          {
            long long v130 = (char *)this + 32;
            *(void *)&long long v409 = *(void *)(*((void *)a2 + 4) + 8);
            int v131 = std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)this + 32, (void *)v409, (long long **)&v409);
            long long v132 = (CoreML::ShapeConstraint *)(v131 + 56);
            *(void *)&long long v409 = *(void *)(*((void *)a2 + 7) + 8);
            uint64_t v133 = (std::string *)std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v130, (void *)v409, (long long **)&v409);
            long long v134 = (CoreML::ShapeConstraint *)&v133[2].__r_.__value_.__r.__words[1];
            std::string::operator=(v133 + 9, *(const std::string **)(*((void *)a2 + 7) + 8));
            CoreML::ShapeConstraint::updateSequenceRange((CoreML::ShapeConstraint *)&v133[2].__r_.__value_.__r.__words[1], (const CoreML::ShapeRange *)(v131 + 56));
            CoreML::ShapeConstraint::updateBatchRange((CoreML::ShapeConstraint *)&v133[2].__r_.__value_.__r.__words[1], (const CoreML::ShapeRange *)(v131 + 88));
            CoreML::ShapeConstraint::updateSequenceRange((CoreML::ShapeConstraint *)(v131 + 56), (const CoreML::ShapeRange *)&v133[2].__r_.__value_.__r.__words[1]);
            CoreML::ShapeConstraint::updateBatchRange((CoreML::ShapeConstraint *)(v131 + 56), (const CoreML::ShapeRange *)&v133[3].__r_.__value_.__r.__words[2]);
            if (*((_DWORD *)a2 + 35) == 345)
            {
              long long v136 = (const CoreML::Specification::ReorganizeDataLayerParams *)*((void *)a2 + 16);
            }
            else
            {
              CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v135);
              long long v136 = (const CoreML::Specification::ReorganizeDataLayerParams *)&CoreML::Specification::_ReorganizeDataLayerParams_default_instance_;
            }
            CoreML::Specification::ReorganizeDataLayerParams::ReorganizeDataLayerParams((CoreML::Specification::ReorganizeDataLayerParams *)&v409, v136);
            uint64_t v177 = v410;
            uint64_t v178 = (uint64_t)(v131 + 120);
            if (DWORD2(v410))
            {
              CoreML::ShapeRange::operator/((uint64_t)&v422, v178, v410 * v410);
              CoreML::ShapeConstraint::updateChannelRange(v134, (const CoreML::ShapeRange *)&v422);
              CoreML::ShapeRange::operator*((CoreML::ShapeRange *)&v422, (uint64_t)(v131 + 152), v177);
              CoreML::ShapeConstraint::updateHeightRange(v134, (const CoreML::ShapeRange *)&v422);
              CoreML::ShapeRange::operator*((CoreML::ShapeRange *)&v422, (uint64_t)(v131 + 184), v177);
              CoreML::ShapeConstraint::updateWidthRange(v134, (const CoreML::ShapeRange *)&v422);
              CoreML::ShapeRange::operator*((CoreML::ShapeRange *)&v422, (uint64_t)&v133[5], v177 * v177);
              CoreML::ShapeConstraint::updateChannelRange(v132, (const CoreML::ShapeRange *)&v422);
              CoreML::ShapeRange::operator/((uint64_t)&v422, (uint64_t)&v133[6].__r_.__value_.__l.__size_, v177);
              CoreML::ShapeConstraint::updateHeightRange(v132, (const CoreML::ShapeRange *)&v422);
              CoreML::ShapeRange::operator/((uint64_t)&v422, (uint64_t)&v133[7].__r_.__value_.__r.__words[2], v177);
            }
            else
            {
              CoreML::ShapeRange::operator*((CoreML::ShapeRange *)&v422, v178, v410 * v410);
              CoreML::ShapeConstraint::updateChannelRange(v134, (const CoreML::ShapeRange *)&v422);
              CoreML::ShapeRange::operator/((uint64_t)&v422, (uint64_t)(v131 + 152), v177);
              CoreML::ShapeConstraint::updateHeightRange(v134, (const CoreML::ShapeRange *)&v422);
              CoreML::ShapeRange::operator/((uint64_t)&v422, (uint64_t)(v131 + 184), v177);
              CoreML::ShapeConstraint::updateWidthRange(v134, (const CoreML::ShapeRange *)&v422);
              CoreML::ShapeRange::operator/((uint64_t)&v422, (uint64_t)&v133[5], v177 * v177);
              CoreML::ShapeConstraint::updateChannelRange(v132, (const CoreML::ShapeRange *)&v422);
              CoreML::ShapeRange::operator*((CoreML::ShapeRange *)&v422, (uint64_t)&v133[6].__r_.__value_.__l.__size_, v177);
              CoreML::ShapeConstraint::updateHeightRange(v132, (const CoreML::ShapeRange *)&v422);
              CoreML::ShapeRange::operator*((CoreML::ShapeRange *)&v422, (uint64_t)&v133[7].__r_.__value_.__r.__words[2], v177);
            }
            CoreML::ShapeConstraint::updateWidthRange(v132, (const CoreML::ShapeRange *)&v422);
            std::string::size_type v255 = &unk_1EF0D6C30;
            goto LABEL_357;
          }
          if (v3 != 350) {
            goto LABEL_482;
          }
          unint64_t v21 = (char *)this + 32;
          *(void *)&long long v409 = *(void *)(*((void *)a2 + 4) + 8);
          uint64_t v22 = std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)this + 32, (void *)v409, (long long **)&v409);
          unsigned int v23 = (CoreML::ShapeConstraint *)(v22 + 56);
          *(void *)&long long v409 = *(void *)(*((void *)a2 + 7) + 8);
          int v24 = (std::string *)std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v21, (void *)v409, (long long **)&v409);
          unint64_t v25 = (CoreML::ShapeConstraint *)&v24[2].__r_.__value_.__r.__words[1];
          std::string::operator=(v24 + 9, *(const std::string **)(*((void *)a2 + 7) + 8));
          CoreML::ShapeConstraint::updateSequenceRange((CoreML::ShapeConstraint *)&v24[2].__r_.__value_.__r.__words[1], (const CoreML::ShapeRange *)(v22 + 56));
          CoreML::ShapeConstraint::updateBatchRange((CoreML::ShapeConstraint *)&v24[2].__r_.__value_.__r.__words[1], (const CoreML::ShapeRange *)(v22 + 88));
          CoreML::ShapeConstraint::updateSequenceRange((CoreML::ShapeConstraint *)(v22 + 56), (const CoreML::ShapeRange *)&v24[2].__r_.__value_.__r.__words[1]);
          CoreML::ShapeConstraint::updateBatchRange((CoreML::ShapeConstraint *)(v22 + 56), (const CoreML::ShapeRange *)&v24[3].__r_.__value_.__r.__words[2]);
          if (*((_DWORD *)a2 + 35) == 350)
          {
            long long v27 = (const CoreML::Specification::SliceLayerParams *)*((void *)a2 + 16);
          }
          else
          {
            CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v26);
            long long v27 = (const CoreML::Specification::SliceLayerParams *)&CoreML::Specification::_SliceLayerParams_default_instance_;
          }
          CoreML::Specification::SliceLayerParams::SliceLayerParams((CoreML::Specification::SliceLayerParams *)&v409, v27);
          int v206 = v410;
          int v207 = DWORD2(v410);
          int v208 = v411[0];
          int v209 = v411[1];
          if ((v410 & 0x80000000) != 0 || (unsigned int v210 = DWORD2(v410), SDWORD2(v410) <= 0))
          {
            if ((v410 & 0x80000000) == 0 || SDWORD2(v410) > 0)
            {
              if (LODWORD(v411[1]))
              {
                if (LODWORD(v411[1]) == 1)
                {
                  BOOL v283 = v22 + 152;
                }
                else
                {
                  if (LODWORD(v411[1]) != 2)
                  {
                    v397 = __cxa_allocate_exception(0x10uLL);
                    MEMORY[0x19F3C1380](v397, "Slice layer axis incorrect -- should be caught in validator.");
                    __cxa_throw(v397, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                  }
                  BOOL v283 = v22 + 184;
                }
              }
              else
              {
                BOOL v283 = v22 + 120;
              }
              long long v320 = v283[1];
              v418[0] = *v283;
              v418[1] = v320;
              if (SDWORD2(v410) >= 1) {
                int v206 = -(int)v410;
              }
              if (SDWORD2(v410) < 0) {
                int v207 = -DWORD2(v410);
              }
              signed int v321 = v207 + v206 + 1;
              CoreML::ShapeRange::operator-((CoreML::ShapeRange *)&v419, (uint64_t)v418, v321);
              CoreML::ShapeRange::operator/((uint64_t)&v422, &v419, v208);
              CoreML::ShapeRange::operator+((CoreML::ShapeRange *)v417, (uint64_t)&v422, 1u);
              if (v209)
              {
                if (v209 != 1)
                {
                  CoreML::ShapeConstraint::updateChannelRange(v25, (const CoreML::ShapeRange *)(v22 + 120));
                  CoreML::ShapeConstraint::updateHeightRange(v25, (const CoreML::ShapeRange *)(v22 + 152));
                  CoreML::ShapeConstraint::updateWidthRange(v25, (const CoreML::ShapeRange *)v417);
                  CoreML::ShapeConstraint::updateChannelRange(v23, (const CoreML::ShapeRange *)&v24[5]);
                  CoreML::ShapeConstraint::updateHeightRange(v23, (const CoreML::ShapeRange *)&v24[6].__r_.__value_.__r.__words[1]);
                  uint64_t v322 = v321;
                  int v290 = v22 + 184;
                  LOBYTE(v419) = 0;
                  *((void *)&v419 + 1) = v322;
                  char v420 = 1;
                  uint64_t v421 = 0;
                  CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v422, (const CoreML::ShapeRange *)(v22 + 184), &v419);
                  goto LABEL_352;
                }
                CoreML::ShapeConstraint::updateChannelRange(v25, (const CoreML::ShapeRange *)(v22 + 120));
                CoreML::ShapeConstraint::updateHeightRange(v25, (const CoreML::ShapeRange *)v417);
                CoreML::ShapeConstraint::updateWidthRange(v25, (const CoreML::ShapeRange *)(v22 + 184));
                CoreML::ShapeConstraint::updateChannelRange(v23, (const CoreML::ShapeRange *)&v24[5]);
                LOBYTE(v419) = 0;
                *((void *)&v419 + 1) = v321;
                char v420 = 1;
                uint64_t v421 = 0;
                CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v422, (const CoreML::ShapeRange *)(v22 + 152), &v419);
                long long v324 = v423;
                *(_OWORD *)(v22 + 152) = v422;
                *(_OWORD *)(v22 + 168) = v324;
              }
              else
              {
                CoreML::ShapeConstraint::updateChannelRange(v25, (const CoreML::ShapeRange *)v417);
                CoreML::ShapeConstraint::updateHeightRange(v25, (const CoreML::ShapeRange *)(v22 + 152));
                CoreML::ShapeConstraint::updateWidthRange(v25, (const CoreML::ShapeRange *)(v22 + 184));
                LOBYTE(v419) = 0;
                *((void *)&v419 + 1) = v321;
                char v420 = 1;
                uint64_t v421 = 0;
                CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v422, (const CoreML::ShapeRange *)(v22 + 120), &v419);
                long long v325 = v423;
                *(_OWORD *)(v22 + 12CoreML::Specification::ClassConfidenceThresholding::New(this, 0) = v422;
                *(_OWORD *)(v22 + 136) = v325;
                CoreML::ShapeConstraint::updateHeightRange(v23, (const CoreML::ShapeRange *)&v24[6].__r_.__value_.__r.__words[1]);
              }
LABEL_355:
              CoreML::ShapeConstraint::updateWidthRange(v23, (const CoreML::ShapeRange *)&v24[7].__r_.__value_.__r.__words[2]);
              goto LABEL_356;
            }
            unsigned int v210 = -(int)v410;
          }
          int v211 = (DWORD2(v410) + ~v410) / SLODWORD(v411[0]) + 1;
          if (LODWORD(v411[1]) != 2)
          {
            if (LODWORD(v411[1]) == 1)
            {
              CoreML::ShapeConstraint::updateChannelRange(v25, (const CoreML::ShapeRange *)(v22 + 120));
              CoreML::ShapeRange::setValue((uint64_t)&v24[6].__r_.__value_.__l.__size_, v211);
              CoreML::ShapeConstraint::updateWidthRange(v25, (const CoreML::ShapeRange *)(v22 + 184));
              CoreML::ShapeConstraint::updateChannelRange(v23, (const CoreML::ShapeRange *)&v24[5]);
              LOBYTE(v419) = 0;
              *((void *)&v419 + 1) = v210;
              char v420 = 1;
              uint64_t v421 = 0;
              CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v422, (const CoreML::ShapeRange *)(v22 + 152), &v419);
              long long v288 = v423;
              *(_OWORD *)(v22 + 152) = v422;
              *(_OWORD *)(v22 + 168) = v288;
            }
            else
            {
              if (LODWORD(v411[1]))
              {
                v396 = __cxa_allocate_exception(0x10uLL);
                MEMORY[0x19F3C1380](v396, "Slice layer axis incorrect -- should be caught in validator.");
                __cxa_throw(v396, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              CoreML::ShapeRange::setValue((uint64_t)&v24[5], v211);
              CoreML::ShapeConstraint::updateHeightRange(v25, (const CoreML::ShapeRange *)(v22 + 152));
              CoreML::ShapeConstraint::updateWidthRange(v25, (const CoreML::ShapeRange *)(v22 + 184));
              LOBYTE(v419) = 0;
              *((void *)&v419 + 1) = v210;
              char v420 = 1;
              uint64_t v421 = 0;
              CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v422, (const CoreML::ShapeRange *)(v22 + 120), &v419);
              long long v212 = v423;
              *(_OWORD *)(v22 + 12CoreML::Specification::ClassConfidenceThresholding::New(this, 0) = v422;
              *(_OWORD *)(v22 + 136) = v212;
              CoreML::ShapeConstraint::updateHeightRange(v23, (const CoreML::ShapeRange *)&v24[6].__r_.__value_.__r.__words[1]);
            }
            goto LABEL_355;
          }
          CoreML::ShapeConstraint::updateChannelRange(v25, (const CoreML::ShapeRange *)(v22 + 120));
          CoreML::ShapeConstraint::updateHeightRange(v25, (const CoreML::ShapeRange *)(v22 + 152));
          CoreML::ShapeRange::setValue((uint64_t)&v24[7].__r_.__value_.__r.__words[2], v211);
          CoreML::ShapeConstraint::updateChannelRange(v23, (const CoreML::ShapeRange *)&v24[5]);
          CoreML::ShapeConstraint::updateHeightRange(v23, (const CoreML::ShapeRange *)&v24[6].__r_.__value_.__r.__words[1]);
          uint64_t v289 = v210;
          int v290 = v22 + 184;
          LOBYTE(v419) = 0;
          *((void *)&v419 + 1) = v289;
          char v420 = 1;
          uint64_t v421 = 0;
          CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v422, (const CoreML::ShapeRange *)(v22 + 184), &v419);
LABEL_352:
          long long v323 = v423;
          *int v290 = v422;
          v290[1] = v323;
LABEL_356:
          std::string::size_type v255 = &unk_1EF0D1DD0;
          goto LABEL_357;
        }
        std::string::size_type v78 = (char *)this + 32;
        *(void *)&long long v409 = *(void *)(*((void *)a2 + 4) + 8);
        uint64_t v79 = std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)this + 32, (void *)v409, (long long **)&v409);
        *(void *)&long long v409 = *(void *)(*((void *)a2 + 7) + 8);
        long long v80 = (std::string *)std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v78, (void *)v409, (long long **)&v409);
        uint64_t v81 = (CoreML::ShapeConstraint *)&v80[2].__r_.__value_.__r.__words[1];
        long long v82 = std::string::operator=(v80 + 9, *(const std::string **)(*((void *)a2 + 7) + 8));
        if (*((_DWORD *)a2 + 35) == 340)
        {
          BOOL v83 = (uint64_t *)*((void *)a2 + 16);
        }
        else
        {
          CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v82);
          BOOL v83 = &CoreML::Specification::_SequenceRepeatLayerParams_default_instance_;
        }
        CoreML::ShapeRange::operator*((CoreML::ShapeRange *)&v409, (uint64_t)(v79 + 56), v83[2]);
        CoreML::ShapeConstraint::updateSequenceRange(v81, (const CoreML::ShapeRange *)&v409);
        CoreML::ShapeConstraint::updateBatchRange(v81, (const CoreML::ShapeRange *)(v79 + 88));
        CoreML::ShapeConstraint::updateChannelRange(v81, (const CoreML::ShapeRange *)(v79 + 120));
        CoreML::ShapeConstraint::updateHeightRange(v81, (const CoreML::ShapeRange *)(v79 + 152));
        CoreML::ShapeConstraint::updateWidthRange(v81, (const CoreML::ShapeRange *)(v79 + 184));
        CoreML::ShapeConstraint::updateBatchRange((CoreML::ShapeConstraint *)(v79 + 56), (const CoreML::ShapeRange *)&v80[3].__r_.__value_.__r.__words[2]);
        CoreML::ShapeConstraint::updateChannelRange((CoreML::ShapeConstraint *)(v79 + 56), (const CoreML::ShapeRange *)&v80[5]);
        CoreML::ShapeConstraint::updateHeightRange((CoreML::ShapeConstraint *)(v79 + 56), (const CoreML::ShapeRange *)&v80[6].__r_.__value_.__r.__words[1]);
        BOOL v159 = (const CoreML::ShapeRange *)&v80[7].__r_.__value_.__r.__words[2];
        long long v160 = (CoreML::ShapeConstraint *)(v79 + 56);
      }
      return CoreML::ShapeConstraint::updateWidthRange(v160, v159);
    }
    if (v3 > 419)
    {
      switch(v3)
      {
        case 420:
          long long v90 = (char *)this + 32;
          *(void *)&long long v409 = *(void *)(*((void *)a2 + 4) + 8);
          int v91 = std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)this + 32, (void *)v409, (long long **)&v409);
          *(void *)&long long v409 = *(void *)(*((void *)a2 + 7) + 8);
          long long v92 = (std::string *)std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v90, (void *)v409, (long long **)&v409);
          int v93 = (CoreML::ShapeConstraint *)&v92[2].__r_.__value_.__r.__words[1];
          long long v94 = std::string::operator=(v92 + 9, *(const std::string **)(*((void *)a2 + 7) + 8));
          if (*((_DWORD *)a2 + 35) == 420)
          {
            uint64_t v95 = (uint64_t *)*((void *)a2 + 16);
          }
          else
          {
            CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v94);
            uint64_t v95 = &CoreML::Specification::_UniDirectionalLSTMLayerParams_default_instance_;
          }
          unint64_t v162 = v95[8];
          CoreML::ShapeRange::setValue((uint64_t)(v91 + 120), v95[7]);
          CoreML::ShapeRange::setValue((uint64_t)(v91 + 152), 1uLL);
          CoreML::ShapeRange::setValue((uint64_t)(v91 + 184), 1uLL);
          CoreML::ShapeRange::setValue((uint64_t)&v92[5], v162);
          CoreML::ShapeRange::setValue((uint64_t)&v92[6].__r_.__value_.__l.__size_, 1uLL);
          CoreML::ShapeRange::setValue((uint64_t)&v92[7].__r_.__value_.__r.__words[2], 1uLL);
          long long v163 = (uint64_t *)v95[5];
          if (!v163) {
            long long v163 = &CoreML::Specification::_LSTMParams_default_instance_;
          }
          if (*((unsigned char *)v163 + 20)) {
            double result = CoreML::ShapeConstraint::updateSequenceRange(v93, (const CoreML::ShapeRange *)(v91 + 56));
          }
          else {
            CoreML::ShapeRange::setValue((uint64_t)v93, 1uLL);
          }
          if (*((int *)a2 + 6) < 3) {
            return result;
          }
          *(void *)&long long v409 = *(void *)(*((void *)a2 + 4) + 16);
          std::string::size_type v239 = std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v90, (void *)v409, (long long **)&v409);
          *(void *)&long long v409 = *(void *)(*((void *)a2 + 7) + 16);
          uint64_t v240 = (std::string *)std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v90, (void *)v409, (long long **)&v409);
          std::string::operator=(v240 + 9, *(const std::string **)(*((void *)a2 + 7) + 16));
          *(void *)&long long v409 = *(void *)(*((void *)a2 + 4) + 24);
          long long v241 = std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v90, (void *)v409, (long long **)&v409);
          *(void *)&long long v409 = *(void *)(*((void *)a2 + 7) + 24);
          unsigned int v242 = (std::string *)std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v90, (void *)v409, (long long **)&v409);
          std::string::operator=(v242 + 9, *(const std::string **)(*((void *)a2 + 7) + 24));
          CoreML::ShapeRange::setValue((uint64_t)(v239 + 56), 1uLL);
          CoreML::ShapeRange::setValue((uint64_t)(v239 + 120), v162);
          CoreML::ShapeRange::setValue((uint64_t)(v239 + 152), 1uLL);
          CoreML::ShapeRange::setValue((uint64_t)(v239 + 184), 1uLL);
          CoreML::ShapeRange::setValue((uint64_t)(v241 + 56), 1uLL);
          CoreML::ShapeRange::setValue((uint64_t)(v241 + 120), v162);
          CoreML::ShapeRange::setValue((uint64_t)(v241 + 152), 1uLL);
          CoreML::ShapeRange::setValue((uint64_t)(v241 + 184), 1uLL);
          CoreML::ShapeRange::setValue((uint64_t)&v240[2].__r_.__value_.__l.__size_, 1uLL);
          CoreML::ShapeRange::setValue((uint64_t)&v240[5], v162);
          CoreML::ShapeRange::setValue((uint64_t)&v240[6].__r_.__value_.__l.__size_, 1uLL);
          CoreML::ShapeRange::setValue((uint64_t)&v240[7].__r_.__value_.__r.__words[2], 1uLL);
          p_std::string::size_type size = (uint64_t)&v242[2].__r_.__value_.__l.__size_;
          break;
        case 430:
          std::string::size_type v139 = (char *)this + 32;
          *(void *)&long long v409 = *(void *)(*((void *)a2 + 4) + 8);
          uint64_t v140 = std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)this + 32, (void *)v409, (long long **)&v409);
          long long v141 = (const CoreML::ShapeRange *)(v140 + 56);
          *(void *)&long long v409 = *(void *)(*((void *)a2 + 7) + 8);
          int v142 = (std::string *)std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v139, (void *)v409, (long long **)&v409);
          int v143 = (CoreML::ShapeConstraint *)&v142[2].__r_.__value_.__r.__words[1];
          unint64_t v144 = std::string::operator=(v142 + 9, *(const std::string **)(*((void *)a2 + 7) + 8));
          if (*((_DWORD *)a2 + 35) == 430)
          {
            uint64_t v145 = (uint64_t *)*((void *)a2 + 16);
          }
          else
          {
            CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v144);
            uint64_t v145 = &CoreML::Specification::_BiDirectionalLSTMLayerParams_default_instance_;
          }
          unint64_t v179 = v145[12];
          unint64_t v162 = v145[13];
          LOBYTE(v422) = 0;
          *((void *)&v422 + 1) = 0;
          LOBYTE(v423) = 0;
          *((void *)&v423 + 1) = 10000;
          CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v409, v141, &v422);
          long long v180 = v410;
          *(_OWORD *)long long v141 = v409;
          *(_OWORD *)(v140 + 72) = v180;
          CoreML::ShapeRange::setValue((uint64_t)(v140 + 120), v179);
          CoreML::ShapeRange::setValue((uint64_t)(v140 + 152), 1uLL);
          CoreML::ShapeRange::setValue((uint64_t)(v140 + 184), 1uLL);
          CoreML::ShapeRange::setValue((uint64_t)&v142[5], 2 * v162);
          CoreML::ShapeRange::setValue((uint64_t)&v142[6].__r_.__value_.__l.__size_, 1uLL);
          CoreML::ShapeRange::setValue((uint64_t)&v142[7].__r_.__value_.__r.__words[2], 1uLL);
          int v181 = (uint64_t *)v145[11];
          if (!v181) {
            int v181 = &CoreML::Specification::_LSTMParams_default_instance_;
          }
          if (*((unsigned char *)v181 + 20)) {
            double result = CoreML::ShapeConstraint::updateSequenceRange(v143, v141);
          }
          else {
            CoreML::ShapeRange::setValue((uint64_t)v143, 1uLL);
          }
          if (*((int *)a2 + 6) < 5) {
            return result;
          }
          *(void *)&long long v409 = *(void *)(*((void *)a2 + 4) + 16);
          uint64_t v256 = std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v139, (void *)v409, (long long **)&v409);
          *(void *)&long long v409 = *(void *)(*((void *)a2 + 7) + 16);
          long long v257 = (std::string *)std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v139, (void *)v409, (long long **)&v409);
          std::string::operator=(v257 + 9, *(const std::string **)(*((void *)a2 + 7) + 16));
          *(void *)&long long v409 = *(void *)(*((void *)a2 + 4) + 24);
          BOOL v258 = std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v139, (void *)v409, (long long **)&v409);
          *(void *)&long long v409 = *(void *)(*((void *)a2 + 7) + 24);
          long long v259 = (std::string *)std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v139, (void *)v409, (long long **)&v409);
          std::string::operator=(v259 + 9, *(const std::string **)(*((void *)a2 + 7) + 24));
          *(void *)&long long v409 = *(void *)(*((void *)a2 + 4) + 32);
          std::string v260 = std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v139, (void *)v409, (long long **)&v409);
          *(void *)&long long v409 = *(void *)(*((void *)a2 + 7) + 32);
          long long v261 = (std::string *)std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v139, (void *)v409, (long long **)&v409);
          std::string::operator=(v261 + 9, *(const std::string **)(*((void *)a2 + 7) + 32));
          *(void *)&long long v409 = *(void *)(*((void *)a2 + 4) + 40);
          unint64_t v262 = std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v139, (void *)v409, (long long **)&v409);
          *(void *)&long long v409 = *(void *)(*((void *)a2 + 7) + 40);
          unsigned int v242 = (std::string *)std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v139, (void *)v409, (long long **)&v409);
          std::string::operator=(v242 + 9, *(const std::string **)(*((void *)a2 + 7) + 40));
          CoreML::ShapeRange::setValue((uint64_t)(v256 + 56), 1uLL);
          CoreML::ShapeRange::setValue((uint64_t)(v256 + 120), v162);
          CoreML::ShapeRange::setValue((uint64_t)(v256 + 152), 1uLL);
          CoreML::ShapeRange::setValue((uint64_t)(v256 + 184), 1uLL);
          CoreML::ShapeRange::setValue((uint64_t)(v258 + 56), 1uLL);
          CoreML::ShapeRange::setValue((uint64_t)(v258 + 120), v162);
          CoreML::ShapeRange::setValue((uint64_t)(v258 + 152), 1uLL);
          CoreML::ShapeRange::setValue((uint64_t)(v258 + 184), 1uLL);
          CoreML::ShapeRange::setValue((uint64_t)&v257[2].__r_.__value_.__l.__size_, 1uLL);
          CoreML::ShapeRange::setValue((uint64_t)&v257[5], v162);
          CoreML::ShapeRange::setValue((uint64_t)&v257[6].__r_.__value_.__l.__size_, 1uLL);
          CoreML::ShapeRange::setValue((uint64_t)&v257[7].__r_.__value_.__r.__words[2], 1uLL);
          CoreML::ShapeRange::setValue((uint64_t)&v259[2].__r_.__value_.__l.__size_, 1uLL);
          CoreML::ShapeRange::setValue((uint64_t)&v259[5], v162);
          CoreML::ShapeRange::setValue((uint64_t)&v259[6].__r_.__value_.__l.__size_, 1uLL);
          CoreML::ShapeRange::setValue((uint64_t)&v259[7].__r_.__value_.__r.__words[2], 1uLL);
          CoreML::ShapeRange::setValue((uint64_t)(v260 + 56), 1uLL);
          CoreML::ShapeRange::setValue((uint64_t)(v260 + 120), v162);
          CoreML::ShapeRange::setValue((uint64_t)(v260 + 152), 1uLL);
          CoreML::ShapeRange::setValue((uint64_t)(v260 + 184), 1uLL);
          CoreML::ShapeRange::setValue((uint64_t)(v262 + 56), 1uLL);
          CoreML::ShapeRange::setValue((uint64_t)(v262 + 120), v162);
          CoreML::ShapeRange::setValue((uint64_t)(v262 + 152), 1uLL);
          CoreML::ShapeRange::setValue((uint64_t)(v262 + 184), 1uLL);
          CoreML::ShapeRange::setValue((uint64_t)&v261[2].__r_.__value_.__l.__size_, 1uLL);
          CoreML::ShapeRange::setValue((uint64_t)&v261[5], v162);
          CoreML::ShapeRange::setValue((uint64_t)&v261[6].__r_.__value_.__l.__size_, 1uLL);
          CoreML::ShapeRange::setValue((uint64_t)&v261[7].__r_.__value_.__r.__words[2], 1uLL);
          p_std::string::size_type size = (uint64_t)&v242[2].__r_.__value_.__l.__size_;
          break;
        case 500:
          if (*((int *)a2 + 12) >= 1)
          {
            long long v37 = (char *)this + 32;
            uint64_t v38 = 1;
            do
            {
              *(void *)&long long v409 = *(void *)(*((void *)a2 + 7) + 8 * v38);
              uint64_t v39 = (std::string *)std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v37, (void *)v409, (long long **)&v409);
              std::string::operator=(v39 + 9, *(const std::string **)(*((void *)a2 + 7) + 8 * v38));
              BOOL v41 = v38++ < *((int *)a2 + 12);
            }
            while (v41);
          }
          return result;
        default:
          goto LABEL_482;
      }
      CoreML::ShapeRange::setValue(p_size, 1uLL);
      CoreML::ShapeRange::setValue((uint64_t)&v242[5], v162);
      CoreML::ShapeRange::setValue((uint64_t)&v242[6].__r_.__value_.__l.__size_, 1uLL);
      uint64_t v237 = (uint64_t)&v242[7].__r_.__value_.__r.__words[2];
      goto LABEL_269;
    }
    if (v3 == 400)
    {
      long long v109 = (char *)this + 32;
      *(void *)&long long v409 = *(void *)(*((void *)a2 + 4) + 8);
      long long v110 = std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)this + 32, (void *)v409, (long long **)&v409);
      *(void *)&long long v409 = *(void *)(*((void *)a2 + 7) + 8);
      uint64_t v111 = (std::string *)std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v109, (void *)v409, (long long **)&v409);
      long long v112 = (CoreML::ShapeConstraint *)&v111[2].__r_.__value_.__r.__words[1];
      std::string::operator=(v111 + 9, *(const std::string **)(*((void *)a2 + 7) + 8));
      *(void *)&long long v409 = *(void *)(*((void *)a2 + 4) + 16);
      long long v113 = std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v109, (void *)v409, (long long **)&v409);
      *(void *)&long long v409 = *(void *)(*((void *)a2 + 7) + 16);
      uint64_t v70 = (std::string *)std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v109, (void *)v409, (long long **)&v409);
      std::string::size_type v114 = std::string::operator=(v70 + 9, *(const std::string **)(*((void *)a2 + 7) + 16));
      if (*((_DWORD *)a2 + 35) == 400)
      {
        long long v115 = (uint64_t *)*((void *)a2 + 16);
      }
      else
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v114);
        long long v115 = &CoreML::Specification::_SimpleRecurrentLayerParams_default_instance_;
      }
      unint64_t v166 = v115[7];
      CoreML::ShapeRange::setValue((uint64_t)(v110 + 120), v115[6]);
      CoreML::ShapeRange::setValue((uint64_t)(v110 + 152), 1uLL);
      CoreML::ShapeRange::setValue((uint64_t)(v110 + 184), 1uLL);
      CoreML::ShapeRange::setValue((uint64_t)&v111[5], v166);
      CoreML::ShapeRange::setValue((uint64_t)&v111[6].__r_.__value_.__l.__size_, 1uLL);
      CoreML::ShapeRange::setValue((uint64_t)&v111[7].__r_.__value_.__r.__words[2], 1uLL);
      if (*((unsigned char *)v115 + 64)) {
        CoreML::ShapeConstraint::updateSequenceRange(v112, (const CoreML::ShapeRange *)(v110 + 56));
      }
      else {
        CoreML::ShapeRange::setValue((uint64_t)v112, 1uLL);
      }
      CoreML::ShapeRange::setValue((uint64_t)(v113 + 56), 1uLL);
      CoreML::ShapeRange::setValue((uint64_t)(v113 + 120), v166);
      CoreML::ShapeRange::setValue((uint64_t)(v113 + 152), 1uLL);
      CoreML::ShapeRange::setValue((uint64_t)(v113 + 184), 1uLL);
      CoreML::ShapeRange::setValue((uint64_t)&v70[2].__r_.__value_.__l.__size_, 1uLL);
      uint64_t v205 = (uint64_t)&v70[5];
      unint64_t v204 = v166;
    }
    else
    {
      if (v3 != 410) {
        goto LABEL_482;
      }
      long long v56 = (char *)this + 32;
      *(void *)&long long v409 = *(void *)(*((void *)a2 + 4) + 8);
      uint64_t v57 = std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)this + 32, (void *)v409, (long long **)&v409);
      *(void *)&long long v409 = *(void *)(*((void *)a2 + 7) + 8);
      long long v58 = (std::string *)std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v56, (void *)v409, (long long **)&v409);
      uint64_t v59 = (CoreML::ShapeConstraint *)&v58[2].__r_.__value_.__r.__words[1];
      uint64_t v60 = std::string::operator=(v58 + 9, *(const std::string **)(*((void *)a2 + 7) + 8));
      if (*((_DWORD *)a2 + 35) == 410)
      {
        std::string::size_type v61 = (uint64_t *)*((void *)a2 + 16);
      }
      else
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v60);
        std::string::size_type v61 = &CoreML::Specification::_GRULayerParams_default_instance_;
      }
      unint64_t v191 = v61[15];
      CoreML::ShapeRange::setValue((uint64_t)(v57 + 120), v61[14]);
      CoreML::ShapeRange::setValue((uint64_t)(v57 + 152), 1uLL);
      CoreML::ShapeRange::setValue((uint64_t)(v57 + 184), 1uLL);
      CoreML::ShapeRange::setValue((uint64_t)&v58[5], v191);
      CoreML::ShapeRange::setValue((uint64_t)&v58[6].__r_.__value_.__l.__size_, 1uLL);
      CoreML::ShapeRange::setValue((uint64_t)&v58[7].__r_.__value_.__r.__words[2], 1uLL);
      if (*((unsigned char *)v61 + 128)) {
        double result = CoreML::ShapeConstraint::updateSequenceRange(v59, (const CoreML::ShapeRange *)(v57 + 56));
      }
      else {
        CoreML::ShapeRange::setValue((uint64_t)v59, 1uLL);
      }
      if (*((int *)a2 + 6) < 2) {
        return result;
      }
      *(void *)&long long v409 = *(void *)(*((void *)a2 + 4) + 16);
      long long v263 = std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v56, (void *)v409, (long long **)&v409);
      *(void *)&long long v409 = *(void *)(*((void *)a2 + 7) + 16);
      uint64_t v70 = (std::string *)std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v56, (void *)v409, (long long **)&v409);
      std::string::operator=(v70 + 9, *(const std::string **)(*((void *)a2 + 7) + 16));
      CoreML::ShapeRange::setValue((uint64_t)(v263 + 56), 1uLL);
      CoreML::ShapeRange::setValue((uint64_t)(v263 + 120), v191);
      CoreML::ShapeRange::setValue((uint64_t)(v263 + 152), 1uLL);
      CoreML::ShapeRange::setValue((uint64_t)(v263 + 184), 1uLL);
      CoreML::ShapeRange::setValue((uint64_t)&v70[2].__r_.__value_.__l.__size_, 1uLL);
      uint64_t v205 = (uint64_t)&v70[5];
      unint64_t v204 = v191;
    }
LABEL_267:
    CoreML::ShapeRange::setValue(v205, v204);
    goto LABEL_268;
  }
  if (v3 <= 279)
  {
    if (v3 > 259)
    {
      if (v3 != 260 && v3 != 261)
      {
        if (v3 == 270)
        {
          uint64_t v4 = (char *)this + 32;
          *(void *)&long long v409 = *(void *)(*((void *)a2 + 4) + 8);
          long long v5 = std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)this + 32, (void *)v409, (long long **)&v409);
          *(void *)&long long v409 = *(void *)(*((void *)a2 + 4) + 16);
          long long v6 = std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v4, (void *)v409, (long long **)&v409);
          *(void *)&long long v422 = *(void *)(*((void *)a2 + 7) + 8);
          long long v7 = std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v4, (void *)v422, (long long **)&v422);
          long long v8 = *(_OWORD *)(v7 + 168);
          v414[0] = *(_OWORD *)(v7 + 152);
          v414[1] = v8;
          long long v9 = *(_OWORD *)(v7 + 200);
          v415[0] = *(_OWORD *)(v7 + 184);
          v415[1] = v9;
          long long v10 = *(_OWORD *)(v7 + 104);
          *(_OWORD *)v411 = *(_OWORD *)(v7 + 88);
          long long v412 = v10;
          long long v11 = *(_OWORD *)(v7 + 136);
          v413[0] = *(_OWORD *)(v7 + 120);
          v413[1] = v11;
          long long v12 = *(_OWORD *)(v7 + 72);
          long long v409 = *(_OWORD *)(v7 + 56);
          long long v410 = v12;
          if (v7[239] < 0) {
            std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v7 + 27), *((void *)v7 + 28));
          }
          else {
            std::string __p = *(std::string *)(v7 + 9);
          }
          std::string::operator=(&__p, *(const std::string **)(*((void *)a2 + 7) + 8));
          CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v422, (const CoreML::ShapeRange *)&v409, (long long *)(v5 + 56));
          CoreML::ShapeConstraint::updateSequenceRange((CoreML::ShapeConstraint *)&v409, (const CoreML::ShapeRange *)&v422);
          CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v422, (const CoreML::ShapeRange *)v411, (long long *)(v5 + 88));
          CoreML::ShapeConstraint::updateBatchRange((CoreML::ShapeConstraint *)&v409, (const CoreML::ShapeRange *)&v422);
          CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v422, (const CoreML::ShapeRange *)&v409, (long long *)(v6 + 56));
          CoreML::ShapeConstraint::updateSequenceRange((CoreML::ShapeConstraint *)&v409, (const CoreML::ShapeRange *)&v422);
          CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v422, (const CoreML::ShapeRange *)v411, (long long *)(v6 + 88));
          CoreML::ShapeConstraint::updateBatchRange((CoreML::ShapeConstraint *)&v409, (const CoreML::ShapeRange *)&v422);
          CoreML::ShapeRange::setValue((uint64_t)(v5 + 152), 1uLL);
          CoreML::ShapeRange::setValue((uint64_t)(v5 + 184), 1uLL);
          CoreML::ShapeRange::setValue((uint64_t)(v6 + 152), 1uLL);
          CoreML::ShapeRange::setValue((uint64_t)(v6 + 184), 1uLL);
          CoreML::ShapeConstraint::copyFrom((CoreML::ShapeConstraint *)(v5 + 56), (const CoreML::ShapeConstraint *)(v6 + 56));
          CoreML::ShapeConstraint::copyFrom((CoreML::ShapeConstraint *)(v6 + 56), (const CoreML::ShapeConstraint *)(v5 + 56));
          CoreML::ShapeConstraint::updateSequenceRange((CoreML::ShapeConstraint *)(v5 + 56), (const CoreML::ShapeRange *)&v409);
          CoreML::ShapeConstraint::updateBatchRange((CoreML::ShapeConstraint *)(v5 + 56), (const CoreML::ShapeRange *)v411);
          CoreML::ShapeConstraint::updateSequenceRange((CoreML::ShapeConstraint *)(v6 + 56), (const CoreML::ShapeRange *)&v409);
          CoreML::ShapeConstraint::updateBatchRange((CoreML::ShapeConstraint *)(v6 + 56), (const CoreML::ShapeRange *)v411);
          CoreML::ShapeRange::setValue((uint64_t)v413, 1uLL);
          CoreML::ShapeRange::setValue((uint64_t)v414, 1uLL);
          CoreML::ShapeRange::setValue((uint64_t)v415, 1uLL);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            long long v227 = (void *)__p.__r_.__value_.__r.__words[0];
            goto LABEL_276;
          }
          return result;
        }
        goto LABEL_482;
      }
LABEL_86:
      return CoreML::NeuralNetworkShaper::shapeUnchanged(this, a2);
    }
    if (v3 == 245 || v3 == 250) {
      goto LABEL_86;
    }
LABEL_482:
    exceptioint n = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3C1380](exception, "Shape inference not implemented for this layer type.");
    goto LABEL_483;
  }
  if (v3 <= 299)
  {
    if (v3 != 280)
    {
      if (v3 == 290)
      {
        *(void *)&long long v409 = *(void *)(*((void *)a2 + 7) + 8);
        long long v53 = (std::string *)std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)this + 32, (void *)v409, (long long **)&v409);
        std::string v54 = std::string::operator=(v53 + 9, *(const std::string **)(*((void *)a2 + 7) + 8));
        if (*((_DWORD *)a2 + 35) == 290)
        {
          int v55 = (const CoreML::Specification::LoadConstantLayerParams *)*((void *)a2 + 16);
        }
        else
        {
          CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v54);
          int v55 = (const CoreML::Specification::LoadConstantLayerParams *)&CoreML::Specification::_LoadConstantLayerParams_default_instance_;
        }
        CoreML::Specification::LoadConstantLayerParams::LoadConstantLayerParams((CoreML::Specification::LoadConstantLayerParams *)&v409, v55);
        CoreML::ShapeRange::setValue((uint64_t)&v53[2].__r_.__value_.__l.__size_, 1uLL);
        CoreML::ShapeRange::setValue((uint64_t)&v53[3].__r_.__value_.__r.__words[2], 1uLL);
        CoreML::ShapeRange::setValue((uint64_t)&v53[5], *(void *)(*((void *)&v410 + 1) + 8));
        CoreML::ShapeRange::setValue((uint64_t)&v53[6].__r_.__value_.__l.__size_, *(void *)(*((void *)&v410 + 1) + 16));
        CoreML::ShapeRange::setValue((uint64_t)&v53[7].__r_.__value_.__r.__words[2], *(void *)(*((void *)&v410 + 1) + 24));
        CoreML::Specification::LoadConstantLayerParams::~LoadConstantLayerParams((CoreML::Specification::LoadConstantLayerParams *)&v409);
        return result;
      }
      goto LABEL_482;
    }
    long long v102 = (char *)this + 32;
    *(void *)&long long v409 = *(void *)(*((void *)a2 + 4) + 8);
    int v103 = std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)this + 32, (void *)v409, (long long **)&v409);
    long long v104 = (CoreML::ShapeConstraint *)(v103 + 56);
    *(void *)&long long v409 = *(void *)(*((void *)a2 + 7) + 8);
    std::string v105 = (std::string *)std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v102, (void *)v409, (long long **)&v409);
    long long v106 = (CoreML::ShapeConstraint *)&v105[2].__r_.__value_.__r.__words[1];
    std::string::operator=(v105 + 9, *(const std::string **)(*((void *)a2 + 7) + 8));
    CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v409, (const CoreML::ShapeRange *)&v105[2].__r_.__value_.__r.__words[1], (long long *)(v103 + 56));
    CoreML::ShapeConstraint::updateSequenceRange((CoreML::ShapeConstraint *)&v105[2].__r_.__value_.__r.__words[1], (const CoreML::ShapeRange *)&v409);
    CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v409, (const CoreML::ShapeRange *)&v105[3].__r_.__value_.__r.__words[2], (long long *)(v103 + 88));
    CoreML::ShapeConstraint::updateBatchRange((CoreML::ShapeConstraint *)&v105[2].__r_.__value_.__r.__words[1], (const CoreML::ShapeRange *)&v409);
    CoreML::ShapeConstraint::updateSequenceRange((CoreML::ShapeConstraint *)(v103 + 56), (const CoreML::ShapeRange *)&v105[2].__r_.__value_.__r.__words[1]);
    CoreML::ShapeConstraint::updateBatchRange((CoreML::ShapeConstraint *)(v103 + 56), (const CoreML::ShapeRange *)&v105[3].__r_.__value_.__r.__words[2]);
    if (*((_DWORD *)a2 + 35) == 280)
    {
      long long v108 = (const CoreML::Specification::ReduceLayerParams *)*((void *)a2 + 16);
    }
    else
    {
      CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v107);
      long long v108 = (const CoreML::Specification::ReduceLayerParams *)&CoreML::Specification::_ReduceLayerParams_default_instance_;
    }
    CoreML::Specification::ReduceLayerParams::ReduceLayerParams((CoreML::Specification::ReduceLayerParams *)&v409, v108);
    switch(DWORD2(v410))
    {
      case 0:
        CoreML::ShapeRange::setValue((uint64_t)&v105[5], 1uLL);
        goto LABEL_324;
      case 1:
        CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v422, (const CoreML::ShapeRange *)&v105[5], (long long *)(v103 + 120));
        CoreML::ShapeConstraint::updateChannelRange(v106, (const CoreML::ShapeRange *)&v422);
        CoreML::ShapeConstraint::updateChannelRange(v104, (const CoreML::ShapeRange *)&v105[5]);
LABEL_324:
        CoreML::ShapeRange::setValue((uint64_t)&v105[6].__r_.__value_.__l.__size_, 1uLL);
        goto LABEL_325;
      case 2:
        CoreML::ShapeRange::setValue((uint64_t)&v105[5], 1uLL);
        CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v422, (const CoreML::ShapeRange *)&v105[6].__r_.__value_.__r.__words[1], (long long *)(v103 + 152));
        CoreML::ShapeConstraint::updateHeightRange(v106, (const CoreML::ShapeRange *)&v422);
        CoreML::ShapeConstraint::updateHeightRange(v104, (const CoreML::ShapeRange *)&v105[6].__r_.__value_.__r.__words[1]);
        CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v422, (const CoreML::ShapeRange *)&v105[7].__r_.__value_.__r.__words[2], (long long *)(v103 + 184));
        CoreML::ShapeConstraint::updateWidthRange(v106, (const CoreML::ShapeRange *)&v422);
        long long v104 = (CoreML::ShapeConstraint *)&v105[2].__r_.__value_.__r.__words[1];
        goto LABEL_322;
      case 3:
        CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v422, (const CoreML::ShapeRange *)&v105[5], (long long *)(v103 + 120));
        CoreML::ShapeConstraint::updateChannelRange(v106, (const CoreML::ShapeRange *)&v422);
        CoreML::ShapeConstraint::updateChannelRange(v104, (const CoreML::ShapeRange *)&v105[5]);
        CoreML::ShapeRange::setValue((uint64_t)&v105[6].__r_.__value_.__l.__size_, 1uLL);
        CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v422, (const CoreML::ShapeRange *)&v105[7].__r_.__value_.__r.__words[2], (long long *)(v103 + 184));
        CoreML::ShapeConstraint::updateWidthRange(v106, (const CoreML::ShapeRange *)&v422);
LABEL_322:
        CoreML::ShapeConstraint::updateWidthRange(v104, (const CoreML::ShapeRange *)&v105[7].__r_.__value_.__r.__words[2]);
        break;
      case 4:
        CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v422, (const CoreML::ShapeRange *)&v105[5], (long long *)(v103 + 120));
        CoreML::ShapeConstraint::updateChannelRange(v106, (const CoreML::ShapeRange *)&v422);
        CoreML::ShapeConstraint::updateChannelRange(v104, (const CoreML::ShapeRange *)&v105[5]);
        CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v422, (const CoreML::ShapeRange *)&v105[6].__r_.__value_.__r.__words[1], (long long *)(v103 + 152));
        CoreML::ShapeConstraint::updateHeightRange(v106, (const CoreML::ShapeRange *)&v422);
        CoreML::ShapeConstraint::updateHeightRange(v104, (const CoreML::ShapeRange *)&v105[6].__r_.__value_.__r.__words[1]);
LABEL_325:
        CoreML::ShapeRange::setValue((uint64_t)&v105[7].__r_.__value_.__r.__words[2], 1uLL);
        break;
      default:
        if (DWORD2(v410) == 0x80000000 || DWORD2(v410) == 0x7FFFFFFF)
        {
          uint64_t v299 = __cxa_allocate_exception(0x10uLL);
          MEMORY[0x19F3C1380](v299, "Reduce layer axis not set -- should have been caught in validator.");
          __cxa_throw(v299, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        return result;
    }
    std::string::size_type v255 = &unk_1EF0D2880;
LABEL_357:
    *(void *)&long long v409 = v255;
    google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)&v409 + 1);
    return result;
  }
  if (v3 == 300)
  {
    std::string::size_type v84 = (char *)this + 32;
    *(void *)&long long v409 = *(void *)(*((void *)a2 + 4) + 8);
    std::string v85 = std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)this + 32, (void *)v409, (long long **)&v409);
    *(void *)&long long v409 = *(void *)(*((void *)a2 + 7) + 8);
    long long v86 = (std::string *)std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v84, (void *)v409, (long long **)&v409);
    long long v87 = (CoreML::ShapeConstraint *)&v86[2].__r_.__value_.__r.__words[1];
    long long v88 = std::string::operator=(v86 + 9, *(const std::string **)(*((void *)a2 + 7) + 8));
    if (*((_DWORD *)a2 + 35) == 300)
    {
      long long v89 = (const CoreML::Specification::ReshapeLayerParams *)*((void *)a2 + 16);
    }
    else
    {
      CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v88);
      long long v89 = (const CoreML::Specification::ReshapeLayerParams *)&CoreML::Specification::_ReshapeLayerParams_default_instance_;
    }
    CoreML::Specification::ReshapeLayerParams::ReshapeLayerParams((CoreML::Specification::ReshapeLayerParams *)&v409, v89);
    CoreML::ShapeConstraint::updateBatchRange(v87, (const CoreML::ShapeRange *)(v85 + 88));
    if (v410 == 3)
    {
      CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v422, v87, (long long *)(v85 + 56));
      CoreML::ShapeConstraint::updateSequenceRange(v87, (const CoreML::ShapeRange *)&v422);
      CoreML::ShapeRange::setValue((uint64_t)&v86[5], *(void *)(*((void *)&v410 + 1) + 8));
      CoreML::ShapeRange::setValue((uint64_t)&v86[6].__r_.__value_.__l.__size_, *(void *)(*((void *)&v410 + 1) + 16));
      unsigned int v161 = (unint64_t *)(*((void *)&v410 + 1) + 24);
    }
    else
    {
      uint64_t v238 = *(void *)(*((void *)&v410 + 1) + 8);
      LOBYTE(v422) = 0;
      *((void *)&v422 + 1) = v238;
      LOBYTE(v423) = 1;
      *((void *)&v423 + 1) = 0;
      CoreML::ShapeConstraint::updateSequenceRange(v87, (const CoreML::ShapeRange *)&v422);
      CoreML::ShapeRange::setValue((uint64_t)&v86[5], *(void *)(*((void *)&v410 + 1) + 16));
      CoreML::ShapeRange::setValue((uint64_t)&v86[6].__r_.__value_.__l.__size_, *(void *)(*((void *)&v410 + 1) + 24));
      unsigned int v161 = (unint64_t *)(*((void *)&v410 + 1) + 32);
    }
    CoreML::ShapeRange::setValue((uint64_t)&v86[7].__r_.__value_.__r.__words[2], *v161);
    CoreML::Specification::ReshapeLayerParams::~ReshapeLayerParams((CoreML::Specification::ReshapeLayerParams *)&v409);
    return result;
  }
  if (v3 == 301)
  {
    long long v137 = (char *)this + 32;
    *(void *)&long long v409 = *(void *)(*((void *)a2 + 4) + 8);
    uint64_t v138 = std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)this + 32, (void *)v409, (long long **)&v409);
    *(void *)&long long v409 = *(void *)(*((void *)a2 + 7) + 8);
    uint64_t v70 = (std::string *)std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v137, (void *)v409, (long long **)&v409);
    std::string::operator=(v70 + 9, *(const std::string **)(*((void *)a2 + 7) + 8));
    CoreML::ShapeConstraint::updateSequenceRange((CoreML::ShapeConstraint *)&v70[2].__r_.__value_.__r.__words[1], (const CoreML::ShapeRange *)(v138 + 56));
    CoreML::ShapeConstraint::updateBatchRange((CoreML::ShapeConstraint *)&v70[2].__r_.__value_.__r.__words[1], (const CoreML::ShapeRange *)(v138 + 88));
    CoreML::ShapeConstraint::updateSequenceRange((CoreML::ShapeConstraint *)(v138 + 56), (const CoreML::ShapeRange *)&v70[2].__r_.__value_.__r.__words[1]);
    CoreML::ShapeConstraint::updateBatchRange((CoreML::ShapeConstraint *)(v138 + 56), (const CoreML::ShapeRange *)&v70[3].__r_.__value_.__r.__words[2]);
    CoreML::ShapeRange::operator*((CoreML::ShapeRange *)&v422, (uint64_t)(v138 + 120), (long long *)(v138 + 152));
    CoreML::ShapeRange::operator*((CoreML::ShapeRange *)&v409, (uint64_t)&v422, (long long *)(v138 + 184));
    CoreML::ShapeConstraint::updateChannelRange((CoreML::ShapeConstraint *)&v70[2].__r_.__value_.__r.__words[1], (const CoreML::ShapeRange *)&v409);
LABEL_268:
    CoreML::ShapeRange::setValue((uint64_t)&v70[6].__r_.__value_.__l.__size_, 1uLL);
    uint64_t v237 = (uint64_t)&v70[7].__r_.__value_.__r.__words[2];
    goto LABEL_269;
  }
  if (v3 != 310) {
    goto LABEL_482;
  }
  long long v28 = (char *)this + 32;
  *(void *)&long long v409 = *(void *)(*((void *)a2 + 4) + 8);
  long long v29 = std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)this + 32, (void *)v409, (long long **)&v409);
  long long v30 = (CoreML::Specification::protobuf_NeuralNetwork_2eproto *)std::vector<CoreML::ShapeRange>::vector(&v422);
  long long v31 = (_OWORD *)v422;
  long long v32 = *(_OWORD *)(v29 + 72);
  *(_OWORD *)long long v422 = *(_OWORD *)(v29 + 56);
  v31[1] = v32;
  long long v33 = *(_OWORD *)(v29 + 136);
  v31[2] = *(_OWORD *)(v29 + 120);
  void v31[3] = v33;
  long long v34 = *(_OWORD *)(v29 + 168);
  v31[4] = *(_OWORD *)(v29 + 152);
  v31[5] = v34;
  long long v35 = *(_OWORD *)(v29 + 200);
  v31[6] = *(_OWORD *)(v29 + 184);
  v31[7] = v35;
  if (*((_DWORD *)a2 + 35) == 310)
  {
    long long v36 = (const CoreML::Specification::PermuteLayerParams *)*((void *)a2 + 16);
  }
  else
  {
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v30);
    long long v36 = (const CoreML::Specification::PermuteLayerParams *)&CoreML::Specification::_PermuteLayerParams_default_instance_;
  }
  CoreML::Specification::PermuteLayerParams::PermuteLayerParams((CoreML::Specification::PermuteLayerParams *)&v409, v36);
  unint64_t v213 = *(void *)(*((void *)&v410 + 1) + 8);
  if (v213 > 3
    || (unint64_t v214 = *(void *)(*((void *)&v410 + 1) + 16), v214 > 3)
    || (unint64_t v215 = *(void *)(*((void *)&v410 + 1) + 24), v215 > 3)
    || (unint64_t v216 = *(void *)(*((void *)&v410 + 1) + 32), v216 >= 4))
  {
    v395 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3C1380](v395, "Ranges axis index is out of bounds in shapePermuteLayer.");
    __cxa_throw(v395, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  *(void *)&long long v419 = *(void *)(*((void *)a2 + 7) + 8);
  std::string::size_type v217 = std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v28, (void *)v419, (long long **)&v419);
  std::string::operator=((std::string *)v217 + 9, *(const std::string **)(*((void *)a2 + 7) + 8));
  std::string::operator=((std::string *)v217 + 9, *(const std::string **)(*((void *)a2 + 7) + 8));
  CoreML::ShapeConstraint::updateSequenceRange((CoreML::ShapeConstraint *)(v217 + 56), (const CoreML::ShapeRange *)(v422 + 32 * v213));
  CoreML::ShapeConstraint::updateChannelRange((CoreML::ShapeConstraint *)(v217 + 56), (const CoreML::ShapeRange *)(v422 + 32 * v214));
  CoreML::ShapeConstraint::updateHeightRange((CoreML::ShapeConstraint *)(v217 + 56), (const CoreML::ShapeRange *)(v422 + 32 * v215));
  CoreML::ShapeConstraint::updateWidthRange((CoreML::ShapeConstraint *)(v217 + 56), (const CoreML::ShapeRange *)(v422 + 32 * v216));
  std::vector<CoreML::ShapeRange>::vector(&v419);
  uint64_t v218 = (const CoreML::ShapeRange *)v419;
  long long v219 = (_OWORD *)(v419 + 32 * v213);
  long long v220 = *(_OWORD *)(v217 + 72);
  *long long v219 = *(_OWORD *)(v217 + 56);
  v219[1] = v220;
  char v221 = (_OWORD *)((char *)v218 + 32 * v214);
  long long v222 = *(_OWORD *)(v217 + 136);
  *char v221 = *(_OWORD *)(v217 + 120);
  v221[1] = v222;
  int v223 = (_OWORD *)((char *)v218 + 32 * v215);
  long long v224 = *(_OWORD *)(v217 + 168);
  *int v223 = *(_OWORD *)(v217 + 152);
  v223[1] = v224;
  uint64_t v225 = (_OWORD *)((char *)v218 + 32 * v216);
  long long v226 = *(_OWORD *)(v217 + 200);
  *uint64_t v225 = *(_OWORD *)(v217 + 184);
  v225[1] = v226;
  CoreML::ShapeConstraint::updateSequenceRange((CoreML::ShapeConstraint *)(v29 + 56), v218);
  CoreML::ShapeConstraint::updateChannelRange((CoreML::ShapeConstraint *)(v29 + 56), (const CoreML::ShapeRange *)(v419 + 32));
  CoreML::ShapeConstraint::updateHeightRange((CoreML::ShapeConstraint *)(v29 + 56), (const CoreML::ShapeRange *)(v419 + 64));
  CoreML::ShapeConstraint::updateWidthRange((CoreML::ShapeConstraint *)(v29 + 56), (const CoreML::ShapeRange *)(v419 + 96));
  CoreML::ShapeConstraint::updateBatchRange((CoreML::ShapeConstraint *)(v29 + 56), (const CoreML::ShapeRange *)(v217 + 88));
  if ((void)v419)
  {
    *((void *)&v419 + 1) = v419;
    operator delete((void *)v419);
  }
  CoreML::Specification::PermuteLayerParams::~PermuteLayerParams((CoreML::Specification::PermuteLayerParams *)&v409);
  long long v227 = (void *)v422;
  if ((void)v422)
  {
    *((void *)&v422 + 1) = v422;
LABEL_276:
    operator delete(v227);
  }
  return result;
}

void sub_19EB145CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  __cxa_free_exception(v44);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(&a20);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,std::set<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void *a2, long long **a3)
{
  long long v5 = (uint64_t **)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__find_equal<std::string>((uint64_t)a1, &v14, a2);
  long long v6 = *v5;
  if (!*v5)
  {
    long long v7 = v5;
    long long v6 = (uint64_t *)operator new(0x50uLL);
    v12[0] = v6;
    v12[1] = a1 + 1;
    char v13 = 0;
    long long v8 = (std::string *)(v6 + 4);
    long long v9 = *a3;
    if (*((char *)*a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v9, *((void *)v9 + 1));
    }
    else
    {
      long long v10 = *v9;
      v6[6] = *((void *)v9 + 2);
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v10;
    }
    v6[9] = 0;
    v6[8] = 0;
    v6[7] = (uint64_t)(v6 + 8);
    char v13 = 1;
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, v14, v7, v6);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<int>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<int>>,void *>>>>::reset[abi:ne180100]((uint64_t)v12);
  }
  return v6;
}

void sub_19EB14908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<int>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<int>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::set<int>>,0>((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

void *CoreML::NeuralNetworkShaper::NeuralNetworkShaper(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  *(_DWORD *)a1 = *(_DWORD *)(a2 + 24);
  a1[2] = 0;
  std::string::size_type v255 = a1 + 2;
  a1[1] = a1 + 2;
  uint64_t v4 = (uint64_t **)(a1 + 1);
  a1[3] = 0;
  a1[5] = 0;
  unint64_t v251 = a1 + 5;
  a1[4] = a1 + 5;
  uint64_t v252 = (uint64_t)(a1 + 4);
  uint64_t v253 = a2;
  a1[6] = 0;
  if (*(int *)(a2 + 24) >= 1)
  {
    uint64_t v5 = 0;
    while (1)
    {
      uint64_t v6 = *(void *)(*(void *)(a2 + 32) + 8 * v5 + 8);
      *(void *)unint64_t v265 = *(void *)(v6 + 16);
      long long v7 = (std::string *)std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v252, *(void **)v265, (long long **)v265);
      std::string::operator=(v7 + 9, *(const std::string **)(v6 + 16));
      *(void *)unint64_t v265 = *(void *)(v6 + 16);
      long long v8 = std::__tree<std::__value_type<std::string,std::set<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v4, *(void **)v265, (long long **)v265);
      unint64_t v9 = (unint64_t)std::__tree<int>::__emplace_unique_key_args<int,int const&>(v8 + 7, v5, v5);
      long long v261 = (CoreML::ShapeConstraint *)&v7[2].__r_.__value_.__r.__words[1];
      long long v10 = *(void *)(v6 + 32) ? *(uint64_t **)(v6 + 32) : &CoreML::Specification::_FeatureType_default_instance_;
      int v11 = *((_DWORD *)v10 + 9);
      if (v11 == 5) {
        break;
      }
      if (v11 != 4)
      {
        exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        uint64_t v246 = std::string::append(&v263, " with a type description which is not a multi array or image.");
        long long v247 = *(_OWORD *)&v246->__r_.__value_.__l.__data_;
        *(void *)&v265[16] = *((void *)&v246->__r_.__value_.__l + 2);
        *(_OWORD *)unint64_t v265 = v247;
        v246->__r_.__value_.__l.__size_ = 0;
        v246->__r_.__value_.__r.__words[2] = 0;
        v246->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)v265);
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      int v12 = *(_DWORD *)(v10[3] + 32);
      BOOL v13 = v12 == 40 || v12 == 10;
      if (v13) {
        unint64_t v14 = 1;
      }
      else {
        unint64_t v14 = 3;
      }
      unint64_t inited = (CoreML::Specification::protobuf_FeatureTypes_2eproto *)CoreML::ShapeRange::setValue((uint64_t)&v7[5], v14);
      if (*((_DWORD *)v10 + 9) == 4)
      {
        char v16 = (uint64_t *)v10[3];
      }
      else
      {
        unint64_t inited = (CoreML::Specification::protobuf_FeatureTypes_2eproto *)CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(inited);
        char v16 = &CoreML::Specification::_ImageFeatureType_default_instance_;
      }
      int v39 = *((_DWORD *)v16 + 13);
      if (v39)
      {
        if (v39 == 31)
        {
          if (*((_DWORD *)v10 + 9) == 4)
          {
            std::string v85 = (uint64_t *)v10[3];
          }
          else
          {
            unint64_t inited = (CoreML::Specification::protobuf_FeatureTypes_2eproto *)CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(inited);
            std::string v85 = &CoreML::Specification::_ImageFeatureType_default_instance_;
          }
          if (*((_DWORD *)v85 + 13) == 31)
          {
            int v91 = (uint64_t *)v85[5];
          }
          else
          {
            CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(inited);
            int v91 = &CoreML::Specification::_ImageFeatureType_ImageSizeRange_default_instance_;
          }
          long long v94 = (uint64_t *)v91[2];
          if (!v94) {
            long long v94 = &CoreML::Specification::_SizeRange_default_instance_;
          }
          v265[0] = 0;
          uint64_t v96 = v94[2];
          uint64_t v95 = v94[3];
          *(void *)&v265[8] = v96;
          v265[16] = v95 < 0;
          *(void *)&v265[24] = v95 & ~(v95 >> 63);
          CoreML::ShapeConstraint::updateWidthRange(v261, (const CoreML::ShapeRange *)v265);
          if (*((_DWORD *)v10 + 9) == 4)
          {
            long long v98 = (uint64_t *)v10[3];
          }
          else
          {
            uint64_t v97 = CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults((CoreML::Specification::protobuf_FeatureTypes_2eproto *)v97);
            long long v98 = &CoreML::Specification::_ImageFeatureType_default_instance_;
          }
          if (*((_DWORD *)v98 + 13) == 31)
          {
            std::string::size_type v99 = (uint64_t *)v98[5];
          }
          else
          {
            CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults((CoreML::Specification::protobuf_FeatureTypes_2eproto *)v97);
            std::string::size_type v99 = &CoreML::Specification::_ImageFeatureType_ImageSizeRange_default_instance_;
          }
          long long v100 = (uint64_t *)v99[3];
          if (!v100) {
            long long v100 = &CoreML::Specification::_SizeRange_default_instance_;
          }
          v263.__r_.__value_.__s.__data_[0] = 0;
          std::string::size_type v102 = v100[2];
          uint64_t v101 = v100[3];
          v263.__r_.__value_.__l.__size_ = v102;
          v263.__r_.__value_.__s.__data_[16] = v101 < 0;
          uint64_t v264 = v101 & ~(v101 >> 63);
          CoreML::ShapeConstraint::updateHeightRange(v261, (const CoreML::ShapeRange *)&v263);
        }
        else if (v39 == 21)
        {
          unint64_t v40 = 0;
          unint64_t v41 = 0;
          unint64_t v42 = -1;
          uint64_t v43 = 1;
          unint64_t v44 = -1;
          while (1)
          {
            if (*((_DWORD *)v10 + 9) == 4)
            {
              uint64_t v45 = (uint64_t *)v10[3];
            }
            else
            {
              unint64_t inited = (CoreML::Specification::protobuf_FeatureTypes_2eproto *)CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(inited);
              uint64_t v45 = &CoreML::Specification::_ImageFeatureType_default_instance_;
            }
            if (*((_DWORD *)v45 + 13) == 21)
            {
              std::string::size_type v46 = (uint64_t *)v45[5];
            }
            else
            {
              unint64_t inited = (CoreML::Specification::protobuf_FeatureTypes_2eproto *)CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(inited);
              std::string::size_type v46 = &CoreML::Specification::_ImageFeatureType_EnumeratedImageSizes_default_instance_;
            }
            if (v43 - 1 >= *((int *)v46 + 6)) {
              break;
            }
            if (*((_DWORD *)v10 + 9) == 4)
            {
              long long v47 = (uint64_t *)v10[3];
            }
            else
            {
              unint64_t inited = (CoreML::Specification::protobuf_FeatureTypes_2eproto *)CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(inited);
              long long v47 = &CoreML::Specification::_ImageFeatureType_default_instance_;
            }
            if (*((_DWORD *)v47 + 13) == 21)
            {
              uint64_t v48 = (uint64_t *)v47[5];
            }
            else
            {
              unint64_t inited = (CoreML::Specification::protobuf_FeatureTypes_2eproto *)CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(inited);
              uint64_t v48 = &CoreML::Specification::_ImageFeatureType_EnumeratedImageSizes_default_instance_;
            }
            unint64_t v49 = *(void *)(*(void *)(v48[4] + 8 * v43) + 16);
            if (v49 > v41) {
              unint64_t v41 = v49;
            }
            if (v49 < v44) {
              unint64_t v44 = v49;
            }
            if (*((_DWORD *)v10 + 9) == 4)
            {
              long long v50 = (uint64_t *)v10[3];
            }
            else
            {
              unint64_t inited = (CoreML::Specification::protobuf_FeatureTypes_2eproto *)CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(inited);
              long long v50 = &CoreML::Specification::_ImageFeatureType_default_instance_;
            }
            if (*((_DWORD *)v50 + 13) == 21)
            {
              uint64_t v51 = (uint64_t *)v50[5];
            }
            else
            {
              unint64_t inited = (CoreML::Specification::protobuf_FeatureTypes_2eproto *)CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(inited);
              uint64_t v51 = &CoreML::Specification::_ImageFeatureType_EnumeratedImageSizes_default_instance_;
            }
            unint64_t v52 = *(void *)(*(void *)(v51[4] + 8 * v43) + 24);
            if (v52 > v40) {
              unint64_t v40 = v52;
            }
            if (v52 < v42) {
              unint64_t v42 = v52;
            }
            ++v43;
          }
          CoreML::ShapeRange::ShapeRange((uint64_t)v265, v44, v41);
          uint64_t v3 = a3;
          CoreML::ShapeConstraint::updateWidthRange(v261, (const CoreML::ShapeRange *)v265);
          CoreML::ShapeRange::ShapeRange((uint64_t)&v263, v42, v40);
          CoreML::ShapeConstraint::updateHeightRange(v261, (const CoreML::ShapeRange *)&v263);
        }
      }
      else
      {
        if (*((_DWORD *)v10 + 9) == 4)
        {
          long long v86 = (uint64_t *)v10[3];
        }
        else
        {
          CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(inited);
          long long v86 = &CoreML::Specification::_ImageFeatureType_default_instance_;
        }
        long long v92 = (CoreML::Specification::protobuf_FeatureTypes_2eproto *)CoreML::ShapeRange::setValue((uint64_t)&v7[6].__r_.__value_.__l.__size_, v86[3]);
        if (*((_DWORD *)v10 + 9) == 4)
        {
          int v93 = (uint64_t *)v10[3];
        }
        else
        {
          CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(v92);
          int v93 = &CoreML::Specification::_ImageFeatureType_default_instance_;
        }
        CoreML::ShapeRange::setValue((uint64_t)&v7[7].__r_.__value_.__r.__words[2], v93[2]);
      }
LABEL_192:
      ++v5;
      a2 = v253;
      if (v5 >= *(int *)(v253 + 24)) {
        goto LABEL_193;
      }
    }
    uint64_t v17 = v10[3];
    int v18 = *(_DWORD *)(v17 + 60);
    uint64_t v257 = v5;
    int v254 = v7;
    if (v18 == 21)
    {
      uint64_t v53 = *(void *)(v17 + 40);
      uint64_t v54 = *(int *)(v53 + 24);
      uint64_t v55 = *(void *)(v53 + 32);
      if (v55) {
        long long v56 = (uint64_t *)(v55 + 8);
      }
      else {
        long long v56 = 0;
      }
      if (v54)
      {
        LODWORD(v57) = 0;
        uint64_t v58 = 8 * v54;
        do
        {
          uint64_t v59 = *v56++;
          int v60 = *(_DWORD *)(v59 + 16);
          if (v60 <= (int)v57) {
            uint64_t v57 = v57;
          }
          else {
            uint64_t v57 = v60;
          }
          v58 -= 8;
        }
        while (v58);
        if ((int)v57 >= 1)
        {
          unint64_t v19 = 0;
          unint64_t v20 = 0;
          unint64_t v61 = 0;
          for (uint64_t i = 0; i != v57; ++i)
          {
            unint64_t v63 = 0;
            unint64_t v64 = -1;
            for (uint64_t j = 1; ; ++j)
            {
              if (*((_DWORD *)v10 + 9) == 5)
              {
                uint64_t v66 = (uint64_t *)v10[3];
              }
              else
              {
                unint64_t v9 = (unint64_t)CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults((CoreML::Specification::protobuf_FeatureTypes_2eproto *)v9);
                uint64_t v66 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
              }
              if (*((_DWORD *)v66 + 15) == 21)
              {
                long long v67 = (uint64_t *)v66[5];
              }
              else
              {
                unint64_t v9 = (unint64_t)CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults((CoreML::Specification::protobuf_FeatureTypes_2eproto *)v9);
                long long v67 = &CoreML::Specification::_ArrayFeatureType_EnumeratedShapes_default_instance_;
              }
              if (j - 1 >= *((int *)v67 + 6)) {
                break;
              }
              if (*((_DWORD *)v10 + 9) == 5)
              {
                uint64_t v68 = (uint64_t *)v10[3];
              }
              else
              {
                unint64_t v9 = (unint64_t)CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults((CoreML::Specification::protobuf_FeatureTypes_2eproto *)v9);
                uint64_t v68 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
              }
              if (*((_DWORD *)v68 + 15) == 21)
              {
                long long v69 = (uint64_t *)v68[5];
              }
              else
              {
                unint64_t v9 = (unint64_t)CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults((CoreML::Specification::protobuf_FeatureTypes_2eproto *)v9);
                long long v69 = &CoreML::Specification::_ArrayFeatureType_EnumeratedShapes_default_instance_;
              }
              if (i < *(int *)(*(void *)(v69[4] + 8 * j) + 16))
              {
                if (*((_DWORD *)v10 + 9) == 5)
                {
                  uint64_t v70 = (uint64_t *)v10[3];
                }
                else
                {
                  unint64_t v9 = (unint64_t)CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults((CoreML::Specification::protobuf_FeatureTypes_2eproto *)v9);
                  uint64_t v70 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
                }
                if (*((_DWORD *)v70 + 15) == 21)
                {
                  long long v71 = (uint64_t *)v70[5];
                }
                else
                {
                  unint64_t v9 = (unint64_t)CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults((CoreML::Specification::protobuf_FeatureTypes_2eproto *)v9);
                  long long v71 = &CoreML::Specification::_ArrayFeatureType_EnumeratedShapes_default_instance_;
                }
                unint64_t v72 = *(void *)(*(void *)(*(void *)(v71[4] + 8 * j) + 24) + 8 * i + 8);
                if (v64 >= v72) {
                  unint64_t v64 = v72;
                }
                if (v63 <= v72) {
                  unint64_t v63 = v72;
                }
              }
            }
            unint64_t v9 = CoreML::ShapeRange::ShapeRange((uint64_t)v265, v64, v63);
            if ((unint64_t)v20 >= v61)
            {
              uint64_t v74 = (v20 - v19) >> 5;
              unint64_t v75 = v74 + 1;
              if ((unint64_t)(v74 + 1) >> 59) {
                std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
              }
              if ((uint64_t)(v61 - (void)v19) >> 4 > v75) {
                unint64_t v75 = (uint64_t)(v61 - (void)v19) >> 4;
              }
              if (v61 - (unint64_t)v19 >= 0x7FFFFFFFFFFFFFE0) {
                unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v9 = v75;
              }
              if (v9) {
                unint64_t v9 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>>(v9);
              }
              else {
                uint64_t v76 = 0;
              }
              long long v77 = *(_OWORD *)&v265[16];
              std::string::size_type v78 = (_OWORD *)(v9 + 32 * v74);
              *std::string::size_type v78 = *(_OWORD *)v265;
              v78[1] = v77;
              if (v20 == v19)
              {
                unint64_t v81 = v9 + 32 * v74;
              }
              else
              {
                unint64_t v79 = v9 + 32 * v74;
                do
                {
                  long long v80 = *((_OWORD *)v20 - 1);
                  unint64_t v81 = v79 - 32;
                  *(_OWORD *)(v79 - 32) = *((_OWORD *)v20 - 2);
                  *(_OWORD *)(v79 - 16) = v80;
                  v20 -= 32;
                  v79 -= 32;
                }
                while (v20 != v19);
              }
              unint64_t v82 = v9 + 32 * v76;
              unint64_t v20 = (char *)(v78 + 2);
              if (v19) {
                operator delete(v19);
              }
              unint64_t v19 = (char *)v81;
              unint64_t v61 = v82;
            }
            else
            {
              long long v73 = *(_OWORD *)&v265[16];
              *(_OWORD *)unint64_t v20 = *(_OWORD *)v265;
              *((_OWORD *)v20 + 1) = v73;
              v20 += 32;
            }
          }
          goto LABEL_144;
        }
      }
    }
    else if (v18 == 31)
    {
      unint64_t v19 = 0;
      unint64_t v20 = 0;
      unint64_t v21 = 0;
      uint64_t v22 = 0;
      for (int k = 5; ; int k = *((_DWORD *)v10 + 9))
      {
        if (k == 5)
        {
          int v24 = (uint64_t *)v10[3];
        }
        else
        {
          unint64_t v9 = (unint64_t)CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults((CoreML::Specification::protobuf_FeatureTypes_2eproto *)v9);
          int v24 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
        }
        if (*((_DWORD *)v24 + 15) == 31)
        {
          unint64_t v25 = (uint64_t *)v24[5];
        }
        else
        {
          unint64_t v9 = (unint64_t)CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults((CoreML::Specification::protobuf_FeatureTypes_2eproto *)v9);
          unint64_t v25 = &CoreML::Specification::_ArrayFeatureType_ShapeRange_default_instance_;
        }
        if (v22 >= *((int *)v25 + 6)) {
          break;
        }
        if (*((_DWORD *)v10 + 9) == 5)
        {
          int v26 = (uint64_t *)v10[3];
        }
        else
        {
          unint64_t v9 = (unint64_t)CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults((CoreML::Specification::protobuf_FeatureTypes_2eproto *)v9);
          int v26 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
        }
        if (*((_DWORD *)v26 + 15) == 31)
        {
          long long v27 = (uint64_t *)v26[5];
        }
        else
        {
          unint64_t v9 = (unint64_t)CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults((CoreML::Specification::protobuf_FeatureTypes_2eproto *)v9);
          long long v27 = &CoreML::Specification::_ArrayFeatureType_ShapeRange_default_instance_;
        }
        uint64_t v28 = *(void *)(v27[4] + 8 * v22 + 8);
        uint64_t v29 = *(void *)(v28 + 16);
        uint64_t v30 = *(void *)(v28 + 24);
        uint64_t v31 = v30 & ~(v30 >> 63);
        if ((unint64_t)v20 >= v21)
        {
          uint64_t v32 = (v20 - v19) >> 5;
          unint64_t v33 = v32 + 1;
          if ((unint64_t)(v32 + 1) >> 59) {
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
          }
          if ((uint64_t)(v21 - (void)v19) >> 4 > v33) {
            unint64_t v33 = (uint64_t)(v21 - (void)v19) >> 4;
          }
          if (v21 - (unint64_t)v19 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v9 = v33;
          }
          if (v9) {
            unint64_t v9 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>>(v9);
          }
          else {
            uint64_t v34 = 0;
          }
          unint64_t v35 = v9 + 32 * v32;
          *(unsigned char *)unint64_t v35 = 0;
          *(void *)(v35 + 8) = v29;
          *(unsigned char *)(v35 + 16) = v30 < 0;
          *(void *)(v35 + 24) = v31;
          if (v20 == v19)
          {
            unint64_t v38 = v9 + 32 * v32;
          }
          else
          {
            unint64_t v36 = v9 + 32 * v32;
            do
            {
              long long v37 = *((_OWORD *)v20 - 1);
              unint64_t v38 = v36 - 32;
              *(_OWORD *)(v36 - 32) = *((_OWORD *)v20 - 2);
              *(_OWORD *)(v36 - 16) = v37;
              v20 -= 32;
              v36 -= 32;
            }
            while (v20 != v19);
          }
          unint64_t v21 = v9 + 32 * v34;
          unint64_t v20 = (char *)(v35 + 32);
          if (v19) {
            operator delete(v19);
          }
          unint64_t v19 = (char *)v38;
        }
        else
        {
          *unint64_t v20 = 0;
          *((void *)v20 + 1) = v29;
          v20[16] = v30 < 0;
          *((void *)v20 + 3) = v31;
          v20 += 32;
        }
        ++v22;
      }
      goto LABEL_144;
    }
    unint64_t v19 = 0;
    unint64_t v20 = 0;
LABEL_144:
    uint64_t v83 = (v20 - v19) >> 5;
    if (v83)
    {
      uint64_t v3 = a3;
      uint64_t v5 = v257;
      if (v83 == 3)
      {
        CoreML::ShapeConstraint::updateChannelRange(v261, (const CoreML::ShapeRange *)v19);
        CoreML::ShapeConstraint::updateHeightRange(v261, (const CoreML::ShapeRange *)(v19 + 32));
        CoreML::ShapeConstraint::updateWidthRange(v261, (const CoreML::ShapeRange *)(v19 + 64));
      }
      else
      {
        if (v83 != 1)
        {
          int v248 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::operator+<char>();
          long long v249 = std::string::append(&v263, "\" with an invalid array shape constraint.");
          long long v250 = *(_OWORD *)&v249->__r_.__value_.__l.__data_;
          *(void *)&v265[16] = *((void *)&v249->__r_.__value_.__l + 2);
          *(_OWORD *)unint64_t v265 = v250;
          v249->__r_.__value_.__l.__size_ = 0;
          v249->__r_.__value_.__r.__words[2] = 0;
          v249->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v248, (const std::string *)v265);
          __cxa_throw(v248, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        CoreML::ShapeConstraint::updateChannelRange(v261, (const CoreML::ShapeRange *)v19);
      }
    }
    else
    {
      uint64_t v3 = a3;
      uint64_t v5 = v257;
      if (*((_DWORD *)v10 + 9) == 5)
      {
        std::string::size_type v84 = (uint64_t *)v10[3];
      }
      else
      {
        CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults((CoreML::Specification::protobuf_FeatureTypes_2eproto *)v9);
        std::string::size_type v84 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
      }
      long long v87 = (CoreML::Specification::protobuf_FeatureTypes_2eproto *)CoreML::ShapeRange::setValue((uint64_t)&v254[5], *(void *)(v84[3] + 8));
      if (*((_DWORD *)v10 + 9) == 5)
      {
        long long v88 = (uint64_t *)v10[3];
      }
      else
      {
        long long v87 = (CoreML::Specification::protobuf_FeatureTypes_2eproto *)CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(v87);
        long long v88 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
      }
      if (*((_DWORD *)v88 + 4) == 3)
      {
        if (*((_DWORD *)v10 + 9) == 5)
        {
          long long v89 = (uint64_t *)v10[3];
        }
        else
        {
          CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(v87);
          long long v89 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
        }
        int v103 = (CoreML::Specification::protobuf_FeatureTypes_2eproto *)CoreML::ShapeRange::setValue((uint64_t)&v254[6].__r_.__value_.__l.__size_, *(void *)(v89[3] + 16));
        if (*((_DWORD *)v10 + 9) == 5)
        {
          long long v104 = (uint64_t *)v10[3];
        }
        else
        {
          CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(v103);
          long long v104 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
        }
        unint64_t v90 = *(void *)(v104[3] + 24);
      }
      else
      {
        CoreML::ShapeRange::setValue((uint64_t)&v254[6].__r_.__value_.__l.__size_, 1uLL);
        unint64_t v90 = 1;
      }
      CoreML::ShapeRange::setValue((uint64_t)&v254[7].__r_.__value_.__r.__words[2], v90);
    }
    if (v19) {
      operator delete(v19);
    }
    goto LABEL_192;
  }
  while (1)
  {
LABEL_193:
    *(_OWORD *)&v263.__r_.__value_.__r.__words[1] = 0uLL;
    v263.__r_.__value_.__r.__words[0] = (std::string::size_type)&v263.__r_.__value_.__l.__size_;
    std::string v105 = *v4;
    if (*v4 != v255)
    {
      std::string::size_type size = 0;
      while (1)
      {
        p_std::string::size_type size = &v263.__r_.__value_.__l.__size_;
        if ((std::string::size_type *)v263.__r_.__value_.__l.__data_ != &v263.__r_.__value_.__r.__words[1])
        {
          long long v108 = (std::string::size_type *)size;
          long long v109 = &v263.__r_.__value_.__l.__size_;
          if (size)
          {
            do
            {
              p_std::string::size_type size = v108;
              long long v108 = (std::string::size_type *)v108[1];
            }
            while (v108);
          }
          else
          {
            do
            {
              p_std::string::size_type size = (std::string::size_type *)v109[2];
              BOOL v13 = *p_size == (void)v109;
              long long v109 = p_size;
            }
            while (v13);
          }
          if (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(p_size + 4, v105 + 4)) {
            break;
          }
        }
        if (size)
        {
          uint64_t v266 = p_size;
          long long v110 = p_size + 1;
          goto LABEL_204;
        }
        long long v110 = &v263.__r_.__value_.__l.__size_;
        uint64_t v266 = &v263.__r_.__value_.__l.__size_;
LABEL_207:
        uint64_t v111 = (char *)operator new(0x50uLL);
        *(void *)unint64_t v265 = v111;
        *(void *)&v265[8] = &v263.__r_.__value_.__l.__size_;
        v265[16] = 0;
        long long v112 = (std::string *)(v111 + 32);
        BOOL v258 = v110;
        if (*((char *)v105 + 55) < 0)
        {
          std::string::__init_copy_ctor_external(v112, (const std::string::value_type *)v105[4], v105[5]);
        }
        else
        {
          long long v113 = *((_OWORD *)v105 + 2);
          *((void *)v111 + 6) = v105[6];
          *(_OWORD *)&v112->__r_.__value_.__l.__data_ = v113;
        }
        *((void *)v111 + 8) = 0;
        std::string::size_type v114 = (uint64_t **)(v111 + 64);
        *((void *)v111 + 7) = v111 + 64;
        *((void *)v111 + 9) = 0;
        long long v115 = (uint64_t *)v105[7];
        if (v115 != v105 + 8)
        {
          do
          {
            long long v116 = *v114;
            std::string::size_type v117 = (uint64_t **)(v111 + 64);
            if (*((uint64_t ***)v111 + 7) == v114) {
              goto LABEL_217;
            }
            long long v118 = *v114;
            std::string::size_type v119 = v111 + 64;
            if (v116)
            {
              do
              {
                std::string::size_type v117 = (uint64_t **)v118;
                long long v118 = (uint64_t *)v118[1];
              }
              while (v118);
            }
            else
            {
              do
              {
                std::string::size_type v117 = (uint64_t **)*((void *)v119 + 2);
                BOOL v13 = *v117 == (uint64_t *)v119;
                std::string::size_type v119 = (char *)v117;
              }
              while (v13);
            }
            int v120 = *((_DWORD *)v115 + 7);
            if (*((_DWORD *)v117 + 7) < v120)
            {
LABEL_217:
              if (v116) {
                std::string::size_type v121 = v117;
              }
              else {
                std::string::size_type v121 = (uint64_t **)(v111 + 64);
              }
              if (v116) {
                long long v122 = v117 + 1;
              }
              else {
                long long v122 = (uint64_t **)(v111 + 64);
              }
            }
            else
            {
              std::string::size_type v121 = (uint64_t **)(v111 + 64);
              long long v122 = (uint64_t **)(v111 + 64);
              if (v116)
              {
                long long v126 = *v114;
                long long v122 = (uint64_t **)(v111 + 64);
                while (1)
                {
                  while (1)
                  {
                    std::string::size_type v121 = (uint64_t **)v126;
                    int v127 = *((_DWORD *)v126 + 7);
                    if (v120 >= v127) {
                      break;
                    }
                    long long v126 = *v121;
                    long long v122 = v121;
                    if (!*v121) {
                      goto LABEL_224;
                    }
                  }
                  if (v127 >= v120) {
                    break;
                  }
                  long long v122 = v121 + 1;
                  long long v126 = v121[1];
                  if (!v126) {
                    goto LABEL_224;
                  }
                }
              }
            }
            if (!*v122)
            {
LABEL_224:
              uint64_t v123 = (uint64_t *)operator new(0x20uLL);
              *((_DWORD *)v123 + 7) = *((_DWORD *)v115 + 7);
              std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at((uint64_t **)v111 + 7, (uint64_t)v121, v122, v123);
            }
            long long v124 = (uint64_t *)v115[1];
            if (v124)
            {
              do
              {
                uint64_t v125 = v124;
                long long v124 = (uint64_t *)*v124;
              }
              while (v124);
            }
            else
            {
              do
              {
                uint64_t v125 = (uint64_t *)v115[2];
                BOOL v13 = *v125 == (void)v115;
                long long v115 = v125;
              }
              while (!v13);
            }
            long long v115 = v125;
          }
          while (v125 != v105 + 8);
          uint64_t v111 = *(char **)v265;
        }
        v265[16] = 1;
        long long v128 = v266;
        *(void *)uint64_t v111 = 0;
        *((void *)v111 + 1) = 0;
        *((void *)v111 + 2) = v128;
        *BOOL v258 = (std::string::size_type)v111;
        uint64_t v3 = a3;
        if (*(void *)v263.__r_.__value_.__l.__data_)
        {
          v263.__r_.__value_.__r.__words[0] = *(void *)v263.__r_.__value_.__l.__data_;
          uint64_t v111 = (char *)*v258;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v263.__r_.__value_.__l.__size_, (uint64_t *)v111);
        ++v263.__r_.__value_.__r.__words[2];
        *(void *)unint64_t v265 = 0;
        std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<int>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<int>>,void *>>>>::reset[abi:ne180100]((uint64_t)v265);
LABEL_243:
        std::string v129 = (uint64_t *)v105[1];
        if (v129)
        {
          do
          {
            long long v130 = v129;
            std::string v129 = (uint64_t *)*v129;
          }
          while (v129);
        }
        else
        {
          do
          {
            long long v130 = (uint64_t *)v105[2];
            BOOL v13 = *v130 == (void)v105;
            std::string v105 = v130;
          }
          while (!v13);
        }
        if (v130 == v255) {
          goto LABEL_250;
        }
        std::string::size_type size = v263.__r_.__value_.__l.__size_;
        std::string v105 = v130;
      }
      long long v110 = std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__find_equal<std::string>((uint64_t)&v263, &v266, v105 + 4);
LABEL_204:
      if (*v110) {
        goto LABEL_243;
      }
      goto LABEL_207;
    }
LABEL_250:
    LODWORD(v131) = *(_DWORD *)(v3 + 8);
    if ((int)v131 >= 1)
    {
      uint64_t v132 = 0;
      do
      {
        uint64_t v259 = v132;
        uint64_t v133 = *(void *)(*(void *)(v3 + 16) + 8 * v132 + 8);
        uint64_t v134 = *(void *)(v133 + 32);
        if (v134) {
          BOOL v135 = (void *)(v134 + 8);
        }
        else {
          BOOL v135 = 0;
        }
        uint64_t v136 = *(int *)(v133 + 24);
        if (v136)
        {
          long long v137 = &v135[v136];
          do
          {
            *(void *)unint64_t v265 = *v135;
            uint64_t v138 = std::__tree<std::__value_type<std::string,std::set<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v4, *(void **)v265, (long long **)v265);
            uint64_t v139 = *(void *)(v133 + 56);
            if (v139) {
              uint64_t v140 = (void *)(v139 + 8);
            }
            else {
              uint64_t v140 = 0;
            }
            uint64_t v141 = *(int *)(v133 + 48);
            if (v141)
            {
              int v142 = v138;
              int v143 = &v140[v141];
              unint64_t v144 = v138 + 8;
              do
              {
                *(void *)unint64_t v265 = *v140;
                uint64_t v145 = std::__tree<std::__value_type<std::string,std::set<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v4, *(void **)v265, (long long **)v265);
                std::string v146 = (uint64_t *)v142[7];
                if (v146 != v144)
                {
                  std::string v147 = v145 + 7;
                  do
                  {
                    std::__tree<int>::__emplace_unique_key_args<int,int const&>(v147, *((_DWORD *)v146 + 7), *((_DWORD *)v146 + 7));
                    std::string v148 = (uint64_t *)v146[1];
                    if (v148)
                    {
                      do
                      {
                        std::string v149 = v148;
                        std::string v148 = (uint64_t *)*v148;
                      }
                      while (v148);
                    }
                    else
                    {
                      do
                      {
                        std::string v149 = (uint64_t *)v146[2];
                        BOOL v13 = *v149 == (void)v146;
                        std::string v146 = v149;
                      }
                      while (!v13);
                    }
                    std::string v146 = v149;
                  }
                  while (v149 != v144);
                }
                ++v140;
                uint64_t v3 = a3;
              }
              while (v140 != v143);
            }
            ++v135;
          }
          while (v135 != v137);
        }
        CoreML::NeuralNetworkShaper::ProcessLayer((CoreML::NeuralNetworkShaper *)a1, (const CoreML::Specification::NeuralNetworkLayer *)v133);
        uint64_t v132 = v259 + 1;
        uint64_t v131 = *(int *)(v3 + 8);
      }
      while (v259 + 1 < v131);
    }
    for (uint64_t m = v131; (int)m > 0; uint64_t m = v260)
    {
      uint64_t v260 = m - 1;
      uint64_t v151 = *(void *)(*(void *)(v3 + 16) + 8 * (m - 1) + 8);
      uint64_t v152 = *(void *)(v151 + 56);
      if (v152) {
        uint64_t v153 = (void *)(v152 + 8);
      }
      else {
        uint64_t v153 = 0;
      }
      uint64_t v154 = *(int *)(v151 + 48);
      if (v154)
      {
        std::string v155 = &v153[v154];
        do
        {
          *(void *)unint64_t v265 = *v153;
          std::string::size_type v156 = std::__tree<std::__value_type<std::string,std::set<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v4, *(void **)v265, (long long **)v265);
          uint64_t v157 = *(void *)(v151 + 32);
          if (v157) {
            uint64_t v158 = (void *)(v157 + 8);
          }
          else {
            uint64_t v158 = 0;
          }
          uint64_t v159 = *(int *)(v151 + 24);
          if (v159)
          {
            long long v160 = v156;
            unsigned int v161 = &v158[v159];
            unint64_t v162 = v156 + 8;
            do
            {
              *(void *)unint64_t v265 = *v158;
              long long v163 = std::__tree<std::__value_type<std::string,std::set<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v4, *(void **)v265, (long long **)v265);
              unint64_t v164 = (uint64_t *)v160[7];
              if (v164 != v162)
              {
                long long v165 = v163 + 7;
                do
                {
                  std::__tree<int>::__emplace_unique_key_args<int,int const&>(v165, *((_DWORD *)v164 + 7), *((_DWORD *)v164 + 7));
                  unint64_t v166 = (uint64_t *)v164[1];
                  if (v166)
                  {
                    do
                    {
                      std::string::size_type v167 = v166;
                      unint64_t v166 = (uint64_t *)*v166;
                    }
                    while (v166);
                  }
                  else
                  {
                    do
                    {
                      std::string::size_type v167 = (uint64_t *)v164[2];
                      BOOL v13 = *v167 == (void)v164;
                      unint64_t v164 = v167;
                    }
                    while (!v13);
                  }
                  unint64_t v164 = v167;
                }
                while (v167 != v162);
              }
              ++v158;
              uint64_t v3 = a3;
            }
            while (v158 != v161);
          }
          ++v153;
        }
        while (v153 != v155);
      }
      CoreML::NeuralNetworkShaper::ProcessLayer((CoreML::NeuralNetworkShaper *)a1, (const CoreML::Specification::NeuralNetworkLayer *)v151);
    }
    uint64_t v168 = *v4;
    if (*v4 == v255)
    {
LABEL_305:
      BOOL v172 = 1;
    }
    else
    {
      int v169 = *(_DWORD *)a1;
      uint64_t v170 = *v4;
      while (1)
      {
        int v171 = *((_DWORD *)v170 + 18);
        BOOL v172 = v169 == v171;
        if (v169 != v171) {
          break;
        }
        unint64_t v173 = (uint64_t *)v170[1];
        if (v173)
        {
          do
          {
            unint64_t v174 = v173;
            unint64_t v173 = (uint64_t *)*v173;
          }
          while (v173);
        }
        else
        {
          do
          {
            unint64_t v174 = (uint64_t *)v170[2];
            BOOL v13 = *v174 == (void)v170;
            uint64_t v170 = v174;
          }
          while (!v13);
        }
        uint64_t v170 = v174;
        if (v174 == v255) {
          goto LABEL_305;
        }
      }
    }
    if (v263.__r_.__value_.__r.__words[2] == a1[3]) {
      break;
    }
LABEL_350:
    std::__tree<std::__value_type<std::string,std::set<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<int>>>>::destroy((void *)v263.__r_.__value_.__l.__size_);
    if (v172) {
      goto LABEL_353;
    }
  }
  std::string::size_type v175 = v263.__r_.__value_.__r.__words[0];
  if ((std::string::size_type *)v263.__r_.__value_.__l.__data_ != &v263.__r_.__value_.__r.__words[1])
  {
    do
    {
      uint64_t v176 = *(unsigned __int8 *)(v175 + 55);
      if ((v176 & 0x80u) == 0) {
        uint64_t v177 = *(unsigned __int8 *)(v175 + 55);
      }
      else {
        uint64_t v177 = *(void *)(v175 + 40);
      }
      uint64_t v178 = *((unsigned __int8 *)v168 + 55);
      int v179 = (char)v178;
      if ((v178 & 0x80u) != 0) {
        uint64_t v178 = v168[5];
      }
      if (v177 != v178) {
        goto LABEL_350;
      }
      long long v180 = (const void **)(v175 + 32);
      if (v179 >= 0) {
        int v181 = (unsigned __int8 *)(v168 + 4);
      }
      else {
        int v181 = (unsigned __int8 *)v168[4];
      }
      if ((v176 & 0x80) != 0)
      {
        if (memcmp(*v180, v181, *(void *)(v175 + 40))) {
          goto LABEL_350;
        }
      }
      else if (*(unsigned char *)(v175 + 55))
      {
        while (*(unsigned __int8 *)v180 == *v181)
        {
          long long v180 = (const void **)((char *)v180 + 1);
          ++v181;
          if (!--v176) {
            goto LABEL_323;
          }
        }
        goto LABEL_350;
      }
LABEL_323:
      if (*(void *)(v175 + 72) != v168[9]) {
        goto LABEL_350;
      }
      uint64_t v182 = *(void **)(v175 + 56);
      if (v182 != (void *)(v175 + 64))
      {
        uint64_t v183 = (void *)v168[7];
        while (*((_DWORD *)v182 + 7) == *((_DWORD *)v183 + 7))
        {
          long long v184 = (void *)v182[1];
          BOOL v185 = v182;
          if (v184)
          {
            do
            {
              uint64_t v182 = v184;
              long long v184 = (void *)*v184;
            }
            while (v184);
          }
          else
          {
            do
            {
              uint64_t v182 = (void *)v185[2];
              BOOL v13 = *v182 == (void)v185;
              BOOL v185 = v182;
            }
            while (!v13);
          }
          std::string::size_type v186 = (void *)v183[1];
          if (v186)
          {
            do
            {
              uint64_t v187 = v186;
              std::string::size_type v186 = (void *)*v186;
            }
            while (v186);
          }
          else
          {
            do
            {
              uint64_t v187 = (void *)v183[2];
              BOOL v13 = *v187 == (void)v183;
              uint64_t v183 = v187;
            }
            while (!v13);
          }
          uint64_t v183 = v187;
          if (v182 == (void *)(v175 + 64)) {
            goto LABEL_338;
          }
        }
        goto LABEL_350;
      }
LABEL_338:
      long long v188 = *(std::string **)(v175 + 8);
      if (v188)
      {
        do
        {
          unint64_t v189 = v188;
          long long v188 = (std::string *)v188->__r_.__value_.__r.__words[0];
        }
        while (v188);
      }
      else
      {
        do
        {
          unint64_t v189 = *(std::string **)(v175 + 16);
          BOOL v13 = v189->__r_.__value_.__r.__words[0] == v175;
          std::string::size_type v175 = (std::string::size_type)v189;
        }
        while (!v13);
      }
      long long v190 = (uint64_t *)v168[1];
      if (v190)
      {
        do
        {
          unint64_t v191 = v190;
          long long v190 = (uint64_t *)*v190;
        }
        while (v190);
      }
      else
      {
        do
        {
          unint64_t v191 = (uint64_t *)v168[2];
          BOOL v13 = *v191 == (void)v168;
          uint64_t v168 = v191;
        }
        while (!v13);
      }
      uint64_t v168 = v191;
      std::string::size_type v175 = (std::string::size_type)v189;
    }
    while (v189 != (std::string *)&v263.__r_.__value_.__r.__words[1]);
  }
  std::__tree<std::__value_type<std::string,std::set<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<int>>>>::destroy((void *)v263.__r_.__value_.__l.__size_);
LABEL_353:
  uint64_t v192 = v253;
  if (*(int *)(v253 + 48) >= 1)
  {
    for (uint64_t n = 0; n < *(int *)(v253 + 48); ++n)
    {
      uint64_t v194 = *(void *)(*(void *)(v192 + 56) + 8 * n + 8);
      uint64_t v195 = *(const void ***)(v194 + 16);
      size_t v196 = *((unsigned __int8 *)v195 + 23);
      size_t v197 = v196;
      unsigned int v198 = v195;
      if (*((char *)v195 + 23) < 0)
      {
        unsigned int v198 = *v195;
        size_t v197 = (size_t)v195[1];
      }
      uint64_t v199 = *(void *)(v192 + 144);
      int v200 = *(char *)(v199 + 23);
      if (v200 >= 0) {
        size_t v201 = *(unsigned __int8 *)(v199 + 23);
      }
      else {
        size_t v201 = *(void *)(v199 + 8);
      }
      if (v200 >= 0) {
        long long v202 = *(const void **)(v192 + 144);
      }
      else {
        long long v202 = *(const void **)v199;
      }
      if (v201 >= v197) {
        size_t v203 = v197;
      }
      else {
        size_t v203 = v201;
      }
      if (!memcmp(v198, v202, v203) && v201 == v197) {
        goto LABEL_445;
      }
      uint64_t v205 = v195;
      if ((v196 & 0x80) != 0)
      {
        uint64_t v205 = *v195;
        size_t v196 = (size_t)v195[1];
      }
      uint64_t v206 = *(void *)(v253 + 136);
      int v207 = *(char *)(v206 + 23);
      size_t v208 = v207 >= 0 ? *(unsigned __int8 *)(v206 + 23) : *(void *)(v206 + 8);
      int v209 = v207 >= 0 ? *(const void **)(v253 + 136) : *(const void **)v206;
      size_t v210 = v208 >= v196 ? v196 : v208;
      if (!memcmp(v205, v209, v210) && v208 == v196) {
        goto LABEL_445;
      }
      long long v212 = (void *)*v251;
      if (!*v251) {
        goto LABEL_445;
      }
      unint64_t v213 = v251;
      do
      {
        BOOL v214 = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v212 + 4, v195);
        unint64_t v215 = v212 + 1;
        if (!v214)
        {
          unint64_t v215 = v212;
          unint64_t v213 = v212;
        }
        long long v212 = (void *)*v215;
      }
      while (*v215);
      if (v213 == v251
        || google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v195, v213 + 4))
      {
        goto LABEL_445;
      }
      unint64_t v216 = (CoreML::Specification::protobuf_FeatureTypes_2eproto *)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__find_equal<std::string>(v252, v265, v195);
      uint64_t v217 = *(void *)v216;
      if (!*(void *)v216) {
        std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
      }
      uint64_t v218 = *(uint64_t **)(v194 + 32);
      if (v218) {
        long long v219 = *(uint64_t **)(v194 + 32);
      }
      else {
        long long v219 = &CoreML::Specification::_FeatureType_default_instance_;
      }
      int v220 = *((_DWORD *)v219 + 9);
      if (v220 == 5)
      {
        long long v227 = (uint64_t *)v219[3];
      }
      else
      {
        if (v220 == 4)
        {
          int v221 = *(_DWORD *)(v219[3] + 32);
          if (v221 == 10 || v221 == 40) {
            unint64_t v223 = 1;
          }
          else {
            unint64_t v223 = 3;
          }
          long long v224 = (CoreML::Specification::protobuf_FeatureTypes_2eproto *)CoreML::ShapeRange::setValue(v217 + 120, v223);
          uint64_t v225 = *(uint64_t **)(v194 + 32);
          if (!v225) {
            uint64_t v225 = &CoreML::Specification::_FeatureType_default_instance_;
          }
          if (*((_DWORD *)v225 + 9) == 4)
          {
            long long v226 = (uint64_t *)v225[3];
          }
          else
          {
            CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(v224);
            long long v226 = &CoreML::Specification::_ImageFeatureType_default_instance_;
          }
          uint64_t v237 = (CoreML::Specification::protobuf_FeatureTypes_2eproto *)CoreML::ShapeRange::setValue(v217 + 152, v226[3]);
          uint64_t v238 = *(uint64_t **)(v194 + 32);
          if (!v238) {
            uint64_t v238 = &CoreML::Specification::_FeatureType_default_instance_;
          }
          if (*((_DWORD *)v238 + 9) == 4)
          {
            std::string::size_type v239 = (uint64_t *)v238[3];
          }
          else
          {
            CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(v237);
            std::string::size_type v239 = &CoreML::Specification::_ImageFeatureType_default_instance_;
          }
          CoreML::ShapeRange::setValue(v217 + 184, v239[2]);
          goto LABEL_445;
        }
        unint64_t v216 = (CoreML::Specification::protobuf_FeatureTypes_2eproto *)CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(v216);
        uint64_t v218 = *(uint64_t **)(v194 + 32);
        long long v227 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
      }
      int v228 = *((_DWORD *)v227 + 4);
      if (!v218) {
        uint64_t v218 = &CoreML::Specification::_FeatureType_default_instance_;
      }
      int v229 = *((_DWORD *)v218 + 9);
      if (v228 == 3)
      {
        if (v229 == 5)
        {
          unint64_t v230 = (uint64_t *)v218[3];
        }
        else
        {
          CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(v216);
          unint64_t v230 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
        }
        int v232 = (CoreML::Specification::protobuf_FeatureTypes_2eproto *)CoreML::ShapeRange::setValue(v217 + 120, *(void *)(v230[3] + 8));
        int v233 = *(uint64_t **)(v194 + 32);
        if (!v233) {
          int v233 = &CoreML::Specification::_FeatureType_default_instance_;
        }
        if (*((_DWORD *)v233 + 9) == 5)
        {
          uint64_t v234 = (uint64_t *)v233[3];
        }
        else
        {
          CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(v232);
          uint64_t v234 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
        }
        uint64_t v240 = (CoreML::Specification::protobuf_FeatureTypes_2eproto *)CoreML::ShapeRange::setValue(v217 + 152, *(void *)(v234[3] + 16));
        long long v241 = *(uint64_t **)(v194 + 32);
        if (!v241) {
          long long v241 = &CoreML::Specification::_FeatureType_default_instance_;
        }
        if (*((_DWORD *)v241 + 9) == 5)
        {
          unsigned int v242 = (uint64_t *)v241[3];
        }
        else
        {
          CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(v240);
          unsigned int v242 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
        }
        unint64_t v243 = *(void *)(v242[3] + 24);
      }
      else
      {
        if (v229 == 5)
        {
          uint64_t v231 = (uint64_t *)v218[3];
        }
        else
        {
          unint64_t v216 = (CoreML::Specification::protobuf_FeatureTypes_2eproto *)CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(v216);
          uint64_t v231 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
        }
        if (*((_DWORD *)v231 + 4) != 1) {
          goto LABEL_445;
        }
        int v235 = *(uint64_t **)(v194 + 32);
        if (!v235) {
          int v235 = &CoreML::Specification::_FeatureType_default_instance_;
        }
        if (*((_DWORD *)v235 + 9) == 5)
        {
          int v236 = (uint64_t *)v235[3];
        }
        else
        {
          CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(v216);
          int v236 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
        }
        CoreML::ShapeRange::setValue(v217 + 120, *(void *)(v236[3] + 8));
        CoreML::ShapeRange::setValue(v217 + 152, 1uLL);
        unint64_t v243 = 1;
      }
      CoreML::ShapeRange::setValue(v217 + 184, v243);
LABEL_445:
      uint64_t v192 = v253;
    }
  }
  return a1;
}

void sub_19EB15E98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
}

BOOL CoreML::hasCustomLayer(CoreML *this, const CoreML::Specification::Model *a2)
{
  if (a2 != 303 && a2 != 403 && a2 != 500) {
    return 0;
  }
  uint64_t v2 = *((unsigned int *)this + 6);
  if ((int)v2 < 1) {
    return 0;
  }
  uint64_t v3 = v2 - 1;
  uint64_t v4 = (uint64_t *)(*((void *)this + 4) + 8);
  do
  {
    uint64_t v5 = *v4++;
    int v6 = *(_DWORD *)(v5 + 140);
    BOOL result = v6 == 500;
  }
  while (v6 != 500 && v3-- != 0);
  return result;
}

void CoreML::downgradeSpecificationVersion(CoreML *this, CoreML::Specification::Model *a2)
{
  if (!this) {
    return;
  }
  uint64_t v2 = this;
  int v3 = *((_DWORD *)this + 6);
  if (v3) {
    BOOL v4 = v3 < 10;
  }
  else {
    BOOL v4 = 0;
  }
  if (v4)
  {
    if (v3 != 9) {
      goto LABEL_10;
    }
  }
  else
  {
    *((_DWORD *)this + 6) = 9;
  }
  this = (CoreML *)CoreML::hasIOS18Features(this, a2);
  if (this)
  {
    int v3 = *((_DWORD *)v2 + 6);
LABEL_10:
    if (v3 != 8) {
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  *((_DWORD *)v2 + 6) = 8;
LABEL_13:
  this = (CoreML *)CoreML::hasIOS17Features(v2, a2);
  if ((this & 1) == 0)
  {
    *((_DWORD *)v2 + 6) = 7;
    goto LABEL_18;
  }
  int v3 = *((_DWORD *)v2 + 6);
LABEL_15:
  if (v3 != 7) {
    goto LABEL_70;
  }
LABEL_18:
  if (*((void *)v2 + 2)) {
    uint64_t v5 = (uint64_t *)*((void *)v2 + 2);
  }
  else {
    uint64_t v5 = &CoreML::Specification::_ModelDescription_default_instance_;
  }
  uint64_t v6 = v5[4];
  if (v6) {
    uint64_t v7 = v6 + 8;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *((int *)v5 + 6);
  uint64_t v9 = 8 * v8;
  if (v8)
  {
    uint64_t v10 = 8 * v8;
    uint64_t v11 = v7;
    do
    {
      int v12 = *(uint64_t **)(*(void *)v11 + 32);
      if (!v12) {
        int v12 = &CoreML::Specification::_FeatureType_default_instance_;
      }
      if (*((_DWORD *)v12 + 9) == 5 && *(_DWORD *)(v12[3] + 36) == 65552) {
        goto LABEL_69;
      }
      v11 += 8;
      v10 -= 8;
    }
    while (v10);
  }
  uint64_t v13 = v5[7];
  if (v13) {
    uint64_t v14 = v13 + 8;
  }
  else {
    uint64_t v14 = 0;
  }
  uint64_t v15 = *((int *)v5 + 12);
  uint64_t v16 = 8 * v15;
  if (v15)
  {
    uint64_t v17 = 8 * v15;
    uint64_t v18 = v14;
    do
    {
      unint64_t v19 = *(uint64_t **)(*(void *)v18 + 32);
      if (!v19) {
        unint64_t v19 = &CoreML::Specification::_FeatureType_default_instance_;
      }
      if (*((_DWORD *)v19 + 9) == 5 && *(_DWORD *)(v19[3] + 36) == 65552) {
        goto LABEL_69;
      }
      v18 += 8;
      v17 -= 8;
    }
    while (v17);
  }
  if (v8)
  {
    do
    {
      unint64_t v20 = *(uint64_t **)(*(void *)v7 + 32);
      if (!v20) {
        unint64_t v20 = &CoreML::Specification::_FeatureType_default_instance_;
      }
      if (*((_DWORD *)v20 + 9) == 4 && *(_DWORD *)(v20[3] + 32) == 40) {
        goto LABEL_69;
      }
      v7 += 8;
      v9 -= 8;
    }
    while (v9);
  }
  if (v15)
  {
    do
    {
      unint64_t v21 = *(uint64_t **)(*(void *)v14 + 32);
      if (!v21) {
        unint64_t v21 = &CoreML::Specification::_FeatureType_default_instance_;
      }
      if (*((_DWORD *)v21 + 9) == 5)
      {
        this = (CoreML *)CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(this);
        if (dword_1EB4DF040 == 40) {
          goto LABEL_69;
        }
      }
      v14 += 8;
      v16 -= 8;
    }
    while (v16);
  }
  if (*((_DWORD *)v2 + 11) != 502) {
    goto LABEL_68;
  }
  uint64_t v22 = *((void *)v2 + 4);
  std::string::basic_string[abi:ne180100]<0>(__p, "main");
  Helper = (CoreML::Specification::MILSpec::protobuf_MIL_2eproto *)google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper(v35, *(void *)(v22 + 40), (unsigned __int8 *)__p, 0);
  uint64_t v24 = v35[0];
  if (v34 < 0) {
    operator delete(__p[0]);
  }
  if (*((_DWORD *)v2 + 11) != 502) {
    CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(Helper);
  }
  if (!v24) {
    goto LABEL_68;
  }
  unint64_t v25 = *(uint64_t **)(*(void *)(v24 + 24) + 128);
  int v26 = *((char *)v25 + 23);
  if (v26 < 0)
  {
    if (v25[1] == 7)
    {
      unint64_t v25 = (uint64_t *)*v25;
      goto LABEL_64;
    }
LABEL_68:
    *((_DWORD *)v2 + 6) = 6;
    goto LABEL_72;
  }
  if (v26 != 7) {
    goto LABEL_68;
  }
LABEL_64:
  int v27 = *(_DWORD *)v25;
  int v28 = *(_DWORD *)((char *)v25 + 3);
  if (v27 != 1701998403 || v28 != 910970213) {
    goto LABEL_68;
  }
LABEL_69:
  int v3 = *((_DWORD *)v2 + 6);
LABEL_70:
  if (v3 == 5)
  {
LABEL_74:
    if (!CoreML::hasIOS14Features(v2, a2))
    {
      *((_DWORD *)v2 + 6) = 4;
LABEL_79:
      if ((CoreML::hasIOS13Features(v2, a2) & 1) == 0)
      {
        *((_DWORD *)v2 + 6) = 3;
LABEL_84:
        if (!CoreML::hasIOS12Features(v2, a2))
        {
          *((_DWORD *)v2 + 6) = 2;
          goto LABEL_89;
        }
        int v3 = *((_DWORD *)v2 + 6);
LABEL_86:
        if (v3 != 2) {
          goto LABEL_91;
        }
LABEL_89:
        if ((CoreML::hasIOS11_2Features(v2, a2) & 1) == 0) {
          *((_DWORD *)v2 + 6) = 1;
        }
        goto LABEL_91;
      }
      int v3 = *((_DWORD *)v2 + 6);
LABEL_81:
      if (v3 != 3) {
        goto LABEL_86;
      }
      goto LABEL_84;
    }
    int v3 = *((_DWORD *)v2 + 6);
LABEL_76:
    if (v3 != 4) {
      goto LABEL_81;
    }
    goto LABEL_79;
  }
  if (v3 != 6) {
    goto LABEL_76;
  }
LABEL_72:
  if ((CoreML::hasIOS15Features(v2, a2) & 1) == 0)
  {
    *((_DWORD *)v2 + 6) = 5;
    goto LABEL_74;
  }
LABEL_91:
  int v30 = *((_DWORD *)v2 + 11);
  switch(v30)
  {
    case 200:
      uint64_t v31 = *(void *)(*((void *)v2 + 4) + 16);
      if (!v31) {
        operator new();
      }
      break;
    case 202:
      uint64_t v31 = *((void *)v2 + 4);
      if (!v31) {
        return;
      }
      break;
    case 201:
      uint64_t v31 = *(void *)(*((void *)v2 + 4) + 16);
      if (!v31) {
        operator new();
      }
      break;
    default:
      return;
  }
  if (*(int *)(v31 + 24) >= 1)
  {
    uint64_t v32 = 0;
    do
      CoreML::downgradeSpecificationVersion(*(CoreML **)(*(void *)(v31 + 32) + 8 * v32++ + 8), a2);
    while (v32 < *(int *)(v31 + 24));
  }
}

void sub_19EB1648C(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C40759568C3);
  _Unwind_Resume(a1);
}

BOOL CoreML::hasIOS18Features(CoreML *this, const CoreML::Specification::Model *a2)
{
  int v3 = *((_DWORD *)this + 11);
  if (v3 <= 201)
  {
    if (v3 == 200)
    {
      uint64_t v17 = *(uint64_t **)(*((void *)this + 4) + 16);
      if (!v17) {
        uint64_t v17 = &CoreML::Specification::_Pipeline_default_instance_;
      }
      uint64_t v18 = v17[4];
      if (v18) {
        unint64_t v19 = (CoreML **)(v18 + 8);
      }
      else {
        unint64_t v19 = 0;
      }
      uint64_t v20 = *((int *)v17 + 6);
      if (v20)
      {
        uint64_t v21 = 8 * v20;
        while ((CoreML::hasIOS18Features(*v19, a2) & 1) == 0)
        {
          ++v19;
          v21 -= 8;
          if (!v21) {
            goto LABEL_38;
          }
        }
        return 1;
      }
    }
    else
    {
      if (v3 != 201) {
        goto LABEL_39;
      }
      uint64_t v9 = *(uint64_t **)(*((void *)this + 4) + 16);
      if (!v9) {
        uint64_t v9 = &CoreML::Specification::_Pipeline_default_instance_;
      }
      uint64_t v10 = v9[4];
      if (v10) {
        uint64_t v11 = (CoreML **)(v10 + 8);
      }
      else {
        uint64_t v11 = 0;
      }
      uint64_t v12 = *((int *)v9 + 6);
      if (v12)
      {
        uint64_t v13 = 8 * v12;
        while ((CoreML::hasIOS18Features(*v11, a2) & 1) == 0)
        {
          ++v11;
          v13 -= 8;
          if (!v13) {
            goto LABEL_38;
          }
        }
        return 1;
      }
    }
LABEL_38:
    int v3 = *((_DWORD *)this + 11);
    goto LABEL_39;
  }
  switch(v3)
  {
    case 2001:
      uint64_t v14 = (_DWORD *)(*((void *)this + 4) + 64);
LABEL_27:
      LODWORD(v15) = 5;
      return *v14 == v15;
    case 2000:
      uint64_t v14 = (_DWORD *)(*((void *)this + 4) + 32);
      goto LABEL_27;
    case 202:
      uint64_t v4 = *((void *)this + 4);
      uint64_t v5 = *(void *)(v4 + 32);
      if (v5) {
        uint64_t v6 = (CoreML **)(v5 + 8);
      }
      else {
        uint64_t v6 = 0;
      }
      uint64_t v7 = *(int *)(v4 + 24);
      if (v7)
      {
        uint64_t v8 = 8 * v7;
        while ((CoreML::hasIOS18Features(*v6, a2) & 1) == 0)
        {
          ++v6;
          v8 -= 8;
          if (!v8) {
            goto LABEL_38;
          }
        }
        return 1;
      }
      goto LABEL_38;
  }
LABEL_39:
  if (v3 == 502)
  {
    uint64_t v22 = *((void *)this + 4);
    std::string::basic_string[abi:ne180100]<0>(__p, "main");
    Helper = (CoreML::Specification::MILSpec::protobuf_MIL_2eproto *)google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper(v34, *(void *)(v22 + 40), (unsigned __int8 *)__p, 0);
    uint64_t v24 = v34[0];
    if (v33 < 0) {
      operator delete(__p[0]);
    }
    if (*((_DWORD *)this + 11) != 502) {
      CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(Helper);
    }
    if (v24)
    {
      unint64_t v25 = *(uint64_t **)(*(void *)(v24 + 24) + 128);
      int v26 = *((char *)v25 + 23);
      if (v26 < 0)
      {
        if (v25[1] != 7) {
          goto LABEL_54;
        }
        unint64_t v25 = (uint64_t *)*v25;
      }
      else if (v26 != 7)
      {
        goto LABEL_54;
      }
      int v27 = *(_DWORD *)v25;
      int v28 = *(_DWORD *)((char *)v25 + 3);
      if (v27 == 1701998403 && v28 == 944524645) {
        return 1;
      }
    }
  }
LABEL_54:
  int v30 = (uint64_t *)*((void *)this + 2);
  if (!v30) {
    int v30 = &CoreML::Specification::_ModelDescription_default_instance_;
  }
  if (*((_DWORD *)v30 + 24)) {
    return 1;
  }
  uint64_t v15 = v30[19];
  int v31 = *(char *)(v15 + 23);
  if (v31 < 0)
  {
    uint64_t v15 = *(void *)(v15 + 8);
    if (!v15)
    {
LABEL_62:
      uint64_t v14 = v30 + 3;
      return *v14 == v15;
    }
  }
  else
  {
    LODWORD(v15) = *(unsigned __int8 *)(v15 + 23);
    if (!(_BYTE)v31) {
      goto LABEL_62;
    }
  }
  return 1;
}

BOOL CoreML::hasIOS17Features(CoreML *this, const CoreML::Specification::Model *a2)
{
  int v3 = *((_DWORD *)this + 11);
  if (v3 <= 559)
  {
    switch(v3)
    {
      case 200:
        uint64_t v11 = *(uint64_t **)(*((void *)this + 4) + 16);
        if (!v11) {
          uint64_t v11 = &CoreML::Specification::_Pipeline_default_instance_;
        }
        uint64_t v12 = v11[4];
        if (v12) {
          uint64_t v13 = (CoreML **)(v12 + 8);
        }
        else {
          uint64_t v13 = 0;
        }
        uint64_t v14 = *((int *)v11 + 6);
        if (v14)
        {
          uint64_t v15 = 8 * v14;
          while ((CoreML::hasIOS17Features(*v13, a2) & 1) == 0)
          {
            ++v13;
            v15 -= 8;
            if (!v15) {
              goto LABEL_41;
            }
          }
          return 1;
        }
        break;
      case 201:
        uint64_t v16 = *(uint64_t **)(*((void *)this + 4) + 16);
        if (!v16) {
          uint64_t v16 = &CoreML::Specification::_Pipeline_default_instance_;
        }
        uint64_t v17 = v16[4];
        if (v17) {
          uint64_t v18 = (CoreML **)(v17 + 8);
        }
        else {
          uint64_t v18 = 0;
        }
        uint64_t v19 = *((int *)v16 + 6);
        if (v19)
        {
          uint64_t v20 = 8 * v19;
          while ((CoreML::hasIOS17Features(*v18, a2) & 1) == 0)
          {
            ++v18;
            v20 -= 8;
            if (!v20) {
              goto LABEL_41;
            }
          }
          return 1;
        }
        break;
      case 202:
        uint64_t v5 = *((void *)this + 4);
        uint64_t v6 = *(void *)(v5 + 32);
        if (v6) {
          uint64_t v7 = (CoreML **)(v6 + 8);
        }
        else {
          uint64_t v7 = 0;
        }
        uint64_t v8 = *(int *)(v5 + 24);
        if (v8)
        {
          uint64_t v9 = 8 * v8;
          while ((CoreML::hasIOS17Features(*v7, a2) & 1) == 0)
          {
            ++v7;
            v9 -= 8;
            if (!v9) {
              goto LABEL_41;
            }
          }
          return 1;
        }
        break;
      default:
        goto LABEL_42;
    }
    goto LABEL_41;
  }
  if (v3 > 2000)
  {
    if (v3 == 2001)
    {
      int v4 = *(_DWORD *)(*((void *)this + 4) + 64);
      return v4 == 4;
    }
    if (v3 != 2002) {
      goto LABEL_42;
    }
    uint64_t v10 = *((void *)this + 4);
    if (*(_DWORD *)(v10 + 28) == 20 && *(_DWORD *)(*(void *)(v10 + 16) + 16) == 2) {
      return 1;
    }
LABEL_41:
    int v3 = *((_DWORD *)this + 11);
    goto LABEL_42;
  }
  if (v3 == 560) {
    return 1;
  }
  if (v3 == 2000)
  {
    int v4 = *(_DWORD *)(*((void *)this + 4) + 32);
    return v4 == 4;
  }
LABEL_42:
  if (v3 != 502) {
    return 0;
  }
  uint64_t v21 = *((void *)this + 4);
  std::string::basic_string[abi:ne180100]<0>(__p, "main");
  Helper = (CoreML::Specification::MILSpec::protobuf_MIL_2eproto *)google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper(v32, *(void *)(v21 + 40), (unsigned __int8 *)__p, 0);
  uint64_t v23 = v32[0];
  if (v31 < 0) {
    operator delete(__p[0]);
  }
  if (*((_DWORD *)this + 11) != 502) {
    CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(Helper);
  }
  if (!v23) {
    return 0;
  }
  uint64_t v24 = *(uint64_t **)(*(void *)(v23 + 24) + 128);
  int v25 = *((char *)v24 + 23);
  if (v25 < 0)
  {
    if (v24[1] != 7) {
      return 0;
    }
    uint64_t v24 = (uint64_t *)*v24;
  }
  else if (v25 != 7)
  {
    return 0;
  }
  int v27 = *(_DWORD *)v24;
  int v28 = *(_DWORD *)((char *)v24 + 3);
  return v27 == 1701998403 && v28 == 927747429;
}

uint64_t CoreML::hasIOS15Features(CoreML *this, const CoreML::Specification::Model *a2)
{
  int v2 = *((_DWORD *)this + 11);
  if (v2 > 201)
  {
    switch(v2)
    {
      case 2006:
        return *(_DWORD *)(*((void *)this + 4) + 28) == 20;
      case 502:
        return 1;
      case 202:
        uint64_t v3 = *((void *)this + 4);
        uint64_t v4 = *(void *)(v3 + 32);
        uint64_t v5 = v4 ? (CoreML **)(v4 + 8) : 0;
        uint64_t v6 = *(int *)(v3 + 24);
        if (v6)
        {
          uint64_t v7 = 8 * v6 - 8;
          do
          {
            uint64_t v8 = *v5++;
            uint64_t result = CoreML::hasIOS15Features(v8, a2);
            if (result) {
              break;
            }
            uint64_t v10 = v7;
            v7 -= 8;
          }
          while (v10);
          return result;
        }
        break;
    }
    return 0;
  }
  if (v2 == 200)
  {
    uint64_t v18 = *(uint64_t **)(*((void *)this + 4) + 16);
    if (!v18) {
      uint64_t v18 = &CoreML::Specification::_Pipeline_default_instance_;
    }
    uint64_t v19 = v18[4];
    if (v19) {
      uint64_t v20 = (CoreML **)(v19 + 8);
    }
    else {
      uint64_t v20 = 0;
    }
    uint64_t v21 = *((int *)v18 + 6);
    if (!v21) {
      return 0;
    }
    uint64_t v22 = 8 * v21 - 8;
    do
    {
      uint64_t v23 = *v20++;
      uint64_t result = CoreML::hasIOS15Features(v23, a2);
      if (result) {
        break;
      }
      uint64_t v24 = v22;
      v22 -= 8;
    }
    while (v24);
  }
  else
  {
    if (v2 != 201) {
      return 0;
    }
    uint64_t v11 = *(uint64_t **)(*((void *)this + 4) + 16);
    if (!v11) {
      uint64_t v11 = &CoreML::Specification::_Pipeline_default_instance_;
    }
    uint64_t v12 = v11[4];
    uint64_t v13 = v12 ? (CoreML **)(v12 + 8) : 0;
    uint64_t v14 = *((int *)v11 + 6);
    if (!v14) {
      return 0;
    }
    uint64_t v15 = 8 * v14 - 8;
    do
    {
      uint64_t v16 = *v13++;
      uint64_t result = CoreML::hasIOS15Features(v16, a2);
      if (result) {
        break;
      }
      uint64_t v17 = v15;
      v15 -= 8;
    }
    while (v17);
  }
  return result;
}

uint64_t CoreML::hasIOS14Features(CoreML *this, const CoreML::Specification::Model *a2)
{
  int v2 = this;
  int v3 = *((_DWORD *)this + 11);
  if (v3 <= 201)
  {
    if (v3 == 200)
    {
      uint64_t v19 = *(uint64_t **)(*((void *)this + 4) + 16);
      if (!v19) {
        uint64_t v19 = &CoreML::Specification::_Pipeline_default_instance_;
      }
      uint64_t v20 = v19[4];
      if (v20) {
        uint64_t v21 = (CoreML **)(v20 + 8);
      }
      else {
        uint64_t v21 = 0;
      }
      uint64_t v22 = *((int *)v19 + 6);
      if (!v22) {
        goto LABEL_110;
      }
      uint64_t v23 = 8 * v22 - 8;
      do
      {
        uint64_t v24 = *v21++;
        LOBYTE(v1CoreML::Specification::ClassConfidenceThresholding::New(this, 0) = CoreML::hasIOS14Features(v24, a2);
        if (v10) {
          break;
        }
        uint64_t v25 = v23;
        v23 -= 8;
      }
      while (v25);
      return v10 & 1;
    }
    if (v3 == 201)
    {
      uint64_t v12 = *(uint64_t **)(*((void *)this + 4) + 16);
      if (!v12) {
        uint64_t v12 = &CoreML::Specification::_Pipeline_default_instance_;
      }
      uint64_t v13 = v12[4];
      if (v13) {
        uint64_t v14 = (CoreML **)(v13 + 8);
      }
      else {
        uint64_t v14 = 0;
      }
      uint64_t v15 = *((int *)v12 + 6);
      if (!v15) {
        goto LABEL_110;
      }
      uint64_t v16 = 8 * v15 - 8;
      do
      {
        uint64_t v17 = *v14++;
        LOBYTE(v1CoreML::Specification::ClassConfidenceThresholding::New(this, 0) = CoreML::hasIOS14Features(v17, a2);
        if (v10) {
          break;
        }
        uint64_t v18 = v16;
        v16 -= 8;
      }
      while (v18);
      return v10 & 1;
    }
  }
  else
  {
    switch(v3)
    {
      case 3000:
LABEL_109:
        LOBYTE(v1CoreML::Specification::ClassConfidenceThresholding::New(this, 0) = 1;
        return v10 & 1;
      case 2001:
        LOBYTE(v1CoreML::Specification::ClassConfidenceThresholding::New(this, 0) = *(_DWORD *)(*((void *)this + 4) + 64) == 3;
        return v10 & 1;
      case 202:
        uint64_t v4 = *((void *)this + 4);
        uint64_t v5 = *(void *)(v4 + 32);
        if (v5) {
          uint64_t v6 = (CoreML **)(v5 + 8);
        }
        else {
          uint64_t v6 = 0;
        }
        uint64_t v7 = *(int *)(v4 + 24);
        if (v7)
        {
          uint64_t v8 = 8 * v7 - 8;
          do
          {
            uint64_t v9 = *v6++;
            LOBYTE(v1CoreML::Specification::ClassConfidenceThresholding::New(this, 0) = CoreML::hasIOS14Features(v9, a2);
            if (v10) {
              break;
            }
            uint64_t v11 = v8;
            v8 -= 8;
          }
          while (v11);
          return v10 & 1;
        }
LABEL_110:
        LOBYTE(v1CoreML::Specification::ClassConfidenceThresholding::New(this, 0) = 0;
        return v10 & 1;
    }
  }
  int v26 = (uint64_t *)*((void *)this + 2);
  if (!v26) {
    int v26 = &CoreML::Specification::_ModelDescription_default_instance_;
  }
  uint64_t v27 = v26[4];
  if (v27) {
    uint64_t v28 = v27 + 8;
  }
  else {
    uint64_t v28 = 0;
  }
  uint64_t v29 = *((int *)v26 + 6);
  if (v29)
  {
    uint64_t v30 = 8 * v29;
    do
    {
      char v31 = *(uint64_t **)(*(void *)v28 + 32);
      if (!v31) {
        char v31 = &CoreML::Specification::_FeatureType_default_instance_;
      }
      if (*((unsigned char *)v31 + 16))
      {
        if (*((_DWORD *)v31 + 9) == 5)
        {
          uint64_t v32 = (uint64_t *)v31[3];
        }
        else
        {
          this = (CoreML *)CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(this);
          uint64_t v32 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
        }
        unsigned int v33 = *((_DWORD *)v32 + 16);
        BOOL v34 = v33 > 0x3D;
        uint64_t v35 = (1 << v33) & 0x2008020000000000;
        if (!v34 && v35 != 0) {
          goto LABEL_109;
        }
      }
      v28 += 8;
      v30 -= 8;
    }
    while (v30);
    int v3 = *((_DWORD *)v2 + 11);
  }
  if (v3 == 303 || v3 == 403 || v3 == 500)
  {
    uint64_t v37 = *((void *)v2 + 4) + 16;
    int v38 = *(_DWORD *)(*((void *)v2 + 4) + 24);
    if (v38 >= 1)
    {
      uint64_t v39 = 0;
      while (1)
      {
        uint64_t v40 = *(void *)(*(void *)(v37 + 16) + 8 * v39 + 8);
        int v41 = *(_DWORD *)(v40 + 140);
        if (v41 <= 979)
        {
          switch(v41)
          {
            case 140:
              goto LABEL_90;
            case 210:
              unint64_t v42 = *(uint64_t **)(v40 + 128);
              goto LABEL_80;
            case 345:
              goto LABEL_86;
          }
        }
        else
        {
          if (v41 > 1044)
          {
            if (v41 != 1045)
            {
              unsigned int v43 = v41 - 1450;
              BOOL v34 = v43 > 0x15;
              int v44 = (1 << v43) & 0x318C21;
              if (!v34 && v44 != 0) {
                goto LABEL_109;
              }
              goto LABEL_102;
            }
            goto LABEL_94;
          }
          if (v41 == 980) {
            goto LABEL_98;
          }
          if (v41 == 1000)
          {
            if (*(_DWORD *)(v40 + 24) == 7 || *(_DWORD *)(*(void *)(v40 + 128) + 112)) {
              goto LABEL_109;
            }
            this = (CoreML *)CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(this);
            unint64_t v42 = &CoreML::Specification::_UpsampleLayerParams_default_instance_;
LABEL_80:
            if (*((_DWORD *)v42 + 16)) {
              goto LABEL_109;
            }
            if (*(_DWORD *)(v40 + 140) == 210)
            {
              std::string::size_type v46 = *(uint64_t **)(v40 + 128);
            }
            else
            {
              this = (CoreML *)CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(this);
              std::string::size_type v46 = &CoreML::Specification::_UpsampleLayerParams_default_instance_;
            }
            if (*((int *)v46 + 10) > 0) {
              goto LABEL_109;
            }
            if (*(_DWORD *)(v40 + 140) == 345)
            {
LABEL_86:
              long long v47 = *(uint64_t **)(v40 + 128);
            }
            else
            {
              this = (CoreML *)CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(this);
              long long v47 = &CoreML::Specification::_ReorganizeDataLayerParams_default_instance_;
            }
            if (*((_DWORD *)v47 + 6) == 2) {
              goto LABEL_109;
            }
            if (*(_DWORD *)(v40 + 140) == 140)
            {
LABEL_90:
              uint64_t v48 = *(uint64_t **)(v40 + 128);
            }
            else
            {
              this = (CoreML *)CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(this);
              uint64_t v48 = &CoreML::Specification::_InnerProductLayerParams_default_instance_;
            }
            if (*((unsigned char *)v48 + 49)) {
              goto LABEL_109;
            }
            if (*(_DWORD *)(v40 + 140) == 1045)
            {
LABEL_94:
              unint64_t v49 = *(uint64_t **)(v40 + 128);
            }
            else
            {
              this = (CoreML *)CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(this);
              unint64_t v49 = &CoreML::Specification::_BatchedMatMulLayerParams_default_instance_;
            }
            if (*((unsigned char *)v49 + 51)) {
              goto LABEL_109;
            }
            if (*(_DWORD *)(v40 + 140) == 980)
            {
LABEL_98:
              long long v50 = *(uint64_t **)(v40 + 128);
            }
            else
            {
              this = (CoreML *)CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(this);
              long long v50 = &CoreML::Specification::_ConcatNDLayerParams_default_instance_;
            }
            if (*((unsigned char *)v50 + 24)) {
              goto LABEL_109;
            }
            int v38 = *(_DWORD *)(v37 + 8);
          }
        }
LABEL_102:
        if (++v39 >= v38)
        {
          int v3 = *((_DWORD *)v2 + 11);
          break;
        }
      }
    }
  }
  if (v3 != 610)
  {
    if (v3 == 2002)
    {
      if (*(_DWORD *)(*((void *)v2 + 4) + 28) == 21) {
        LOBYTE(v1CoreML::Specification::ClassConfidenceThresholding::New(this, 0) = -1;
      }
      else {
        LOBYTE(v1CoreML::Specification::ClassConfidenceThresholding::New(this, 0) = 0;
      }
      return v10 & 1;
    }
    goto LABEL_110;
  }
  unint64_t v52 = (uint64_t *)*((void *)v2 + 2);
  if (!v52) {
    unint64_t v52 = &CoreML::Specification::_ModelDescription_default_instance_;
  }
  memset(&v73, 0, sizeof(v73));
  unsigned int v53 = *((_DWORD *)v52 + 6);
  if (!v53) {
    goto LABEL_124;
  }
  uint64_t v54 = (const CoreML::Specification::FeatureDescription **)(v52[4] + 8);
  uint64_t v55 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)&v73, v53);
  long long v56 = (_DWORD *)v73.__r_.__value_.__r.__words[2];
  int v57 = v73.__r_.__value_.__r.__words[1];
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>(&v73, (std::string **)v55, v54, v53, *(_DWORD *)v73.__r_.__value_.__r.__words[2] - LODWORD(v73.__r_.__value_.__r.__words[1]));
  int v58 = v57 + v53;
  LODWORD(v73.__r_.__value_.__r.__words[1]) = v57 + v53;
  if (*v56 < (signed int)(v57 + v53)) {
    *long long v56 = v58;
  }
  if (v58)
  {
    uint64_t v59 = v56 + 2;
    uint64_t v60 = 8 * v58;
    while (1)
    {
      unint64_t v61 = *(uint64_t **)(*(void *)v59 + 32);
      if (!v61) {
        unint64_t v61 = &CoreML::Specification::_FeatureType_default_instance_;
      }
      if (*((_DWORD *)v61 + 9) == 5 && *(_DWORD *)(v61[3] + 36) == 65568) {
        break;
      }
      v59 += 2;
      v60 -= 8;
      if (!v60) {
        goto LABEL_124;
      }
    }
    LOBYTE(v1CoreML::Specification::ClassConfidenceThresholding::New(this, 0) = 1;
  }
  else
  {
LABEL_124:
    uint64_t v62 = (uint64_t *)*((void *)v2 + 2);
    if (!v62) {
      uint64_t v62 = &CoreML::Specification::_ModelDescription_default_instance_;
    }
    memset(&v72, 0, sizeof(v72));
    unsigned int v10 = *((_DWORD *)v62 + 12);
    if (v10)
    {
      uint64_t v63 = v62[7];
      unint64_t v64 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)&v72, *((_DWORD *)v62 + 12));
      long long v65 = (const CoreML::Specification::FeatureDescription **)(v63 + 8);
      uint64_t v66 = (_DWORD *)v72.__r_.__value_.__r.__words[2];
      int v67 = v72.__r_.__value_.__r.__words[1];
      google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>(&v72, (std::string **)v64, v65, v10, *(_DWORD *)v72.__r_.__value_.__r.__words[2] - LODWORD(v72.__r_.__value_.__r.__words[1]));
      int v68 = v67 + v10;
      LODWORD(v72.__r_.__value_.__r.__words[1]) = v67 + v10;
      if (*v66 < (signed int)(v67 + v10)) {
        _DWORD *v66 = v68;
      }
      if (v68)
      {
        long long v69 = v66 + 2;
        uint64_t v70 = 8 * v68;
        while (1)
        {
          long long v71 = *(uint64_t **)(*(void *)v69 + 32);
          if (!v71) {
            long long v71 = &CoreML::Specification::_FeatureType_default_instance_;
          }
          if (*((_DWORD *)v71 + 9) == 5 && *(_DWORD *)(v71[3] + 36) == 65568) {
            break;
          }
          v69 += 2;
          v70 -= 8;
          if (!v70) {
            goto LABEL_136;
          }
        }
        LOBYTE(v1CoreML::Specification::ClassConfidenceThresholding::New(this, 0) = 1;
      }
      else
      {
LABEL_136:
        LOBYTE(v1CoreML::Specification::ClassConfidenceThresholding::New(this, 0) = 0;
      }
    }
    google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>(&v72);
  }
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>(&v73);
  return v10 & 1;
}

void sub_19EB1709C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t CoreML::hasIOS13Features(CoreML *this, const CoreML::Specification::Model *a2)
{
  if (*((unsigned char *)this + 28)) {
    return 1;
  }
  int v4 = *((_DWORD *)this + 11);
  uint64_t result = 1;
  if (v4 > 500)
  {
    switch(v4)
    {
      case 2000:
      case 2004:
      case 2005:
        uint64_t result = *(_DWORD *)(*((void *)this + 4) + 32) == 2;
        break;
      case 2001:
      case 2002:
        goto LABEL_61;
      case 2003:
        return result;
      default:
        if (v4 != 501 && v4 != 556) {
          goto LABEL_61;
        }
        break;
    }
  }
  else
  {
    if (v4 > 302)
    {
      if (v4 > 403)
      {
        if (v4 == 404) {
          return result;
        }
        if (v4 != 500)
        {
LABEL_61:
          if (v4 == 303 || v4 == 403 || v4 == 500)
          {
            uint64_t v31 = *((void *)this + 4) + 16;
            if (*(int *)(v31 + 8) >= 1)
            {
              uint64_t v32 = 0;
              do
              {
                int isIOS12NeuralNetworkLayer = CoreML::isIOS12NeuralNetworkLayer(*(void *)(*(void *)(v31 + 16)
                                                                                        + 8 * v32
                                                                                        + 8));
                if ((isIOS12NeuralNetworkLayer & 1) == 0) {
                  break;
                }
                ++v32;
              }
              while (v32 < *(int *)(v31 + 8));
              return isIOS12NeuralNetworkLayer ^ 1u;
            }
          }
          return 0;
        }
        uint64_t v14 = *((void *)this + 4);
        if (*(_DWORD *)(v14 + 72) || *(_DWORD *)(v14 + 76)) {
          return result;
        }
        uint64_t result = (uint64_t)CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)1);
        uint64_t v15 = &CoreML::Specification::_NeuralNetworkRegressor_default_instance_;
      }
      else
      {
        if (v4 != 303)
        {
          if (v4 != 403) {
            goto LABEL_61;
          }
          goto LABEL_9;
        }
        uint64_t v15 = (uint64_t *)*((void *)this + 4);
      }
      if (*((_DWORD *)v15 + 18)) {
        return 1;
      }
      if (*((_DWORD *)this + 11) == 303)
      {
        uint64_t v16 = (uint64_t *)*((void *)this + 4);
      }
      else
      {
        uint64_t result = (uint64_t)CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)result);
        uint64_t v16 = &CoreML::Specification::_NeuralNetworkRegressor_default_instance_;
      }
      if (*((_DWORD *)v16 + 19)) {
        return 1;
      }
      if (*((_DWORD *)this + 11) != 403)
      {
        uint64_t result = (uint64_t)CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)result);
        uint64_t v5 = &CoreML::Specification::_NeuralNetworkClassifier_default_instance_;
LABEL_10:
        if (*((_DWORD *)v5 + 20)) {
          return 1;
        }
        if (*((_DWORD *)this + 11) == 403)
        {
          uint64_t v6 = (uint64_t *)*((void *)this + 4);
        }
        else
        {
          CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)result);
          uint64_t v6 = &CoreML::Specification::_NeuralNetworkClassifier_default_instance_;
        }
        if (*((_DWORD *)v6 + 21)) {
          return 1;
        }
        int v4 = *((_DWORD *)this + 11);
        goto LABEL_61;
      }
LABEL_9:
      uint64_t v5 = (uint64_t *)*((void *)this + 4);
      goto LABEL_10;
    }
    switch(v4)
    {
      case 200:
        uint64_t v17 = *(uint64_t **)(*((void *)this + 4) + 16);
        if (!v17) {
          uint64_t v17 = &CoreML::Specification::_Pipeline_default_instance_;
        }
        uint64_t v18 = v17[4];
        if (v18) {
          uint64_t v19 = (CoreML **)(v18 + 8);
        }
        else {
          uint64_t v19 = 0;
        }
        uint64_t v20 = *((int *)v17 + 6);
        if (!v20) {
          return 0;
        }
        uint64_t v21 = 8 * v20 - 8;
        do
        {
          uint64_t v22 = *v19++;
          uint64_t result = CoreML::hasIOS13Features(v22, a2);
          if (result) {
            break;
          }
          uint64_t v23 = v21;
          v21 -= 8;
        }
        while (v23);
        break;
      case 201:
        uint64_t v24 = *(uint64_t **)(*((void *)this + 4) + 16);
        if (!v24) {
          uint64_t v24 = &CoreML::Specification::_Pipeline_default_instance_;
        }
        uint64_t v25 = v24[4];
        if (v25) {
          int v26 = (CoreML **)(v25 + 8);
        }
        else {
          int v26 = 0;
        }
        uint64_t v27 = *((int *)v24 + 6);
        if (!v27) {
          return 0;
        }
        uint64_t v28 = 8 * v27 - 8;
        do
        {
          uint64_t v29 = *v26++;
          uint64_t result = CoreML::hasIOS13Features(v29, a2);
          if (result) {
            break;
          }
          uint64_t v30 = v28;
          v28 -= 8;
        }
        while (v30);
        break;
      case 202:
        uint64_t v7 = *((void *)this + 4);
        uint64_t v8 = *(void *)(v7 + 32);
        if (v8) {
          uint64_t v9 = (CoreML **)(v8 + 8);
        }
        else {
          uint64_t v9 = 0;
        }
        uint64_t v10 = *(int *)(v7 + 24);
        if (!v10) {
          return 0;
        }
        uint64_t v11 = 8 * v10 - 8;
        do
        {
          uint64_t v12 = *v9++;
          uint64_t result = CoreML::hasIOS13Features(v12, a2);
          if (result) {
            break;
          }
          uint64_t v13 = v11;
          v11 -= 8;
        }
        while (v13);
        break;
      default:
        goto LABEL_61;
    }
  }
  return result;
}

uint64_t CoreML::hasIOS12Features(CoreML *this, const CoreML::Specification::Model *a2)
{
  int v3 = *((_DWORD *)this + 11);
  switch(v3)
  {
    case 200:
      uint64_t v12 = *(uint64_t **)(*((void *)this + 4) + 16);
      if (!v12) {
        uint64_t v12 = &CoreML::Specification::_Pipeline_default_instance_;
      }
      uint64_t v13 = v12[4];
      if (v13) {
        uint64_t v14 = (CoreML **)(v13 + 8);
      }
      else {
        uint64_t v14 = 0;
      }
      uint64_t v15 = *((int *)v12 + 6);
      if (!v15) {
        return 0;
      }
      uint64_t v16 = 8 * v15 - 8;
      do
      {
        uint64_t v17 = *v14++;
        uint64_t result = CoreML::hasIOS12Features(v17, a2);
        if (result) {
          break;
        }
        uint64_t v18 = v16;
        v16 -= 8;
      }
      while (v18);
      break;
    case 201:
      uint64_t v19 = *(uint64_t **)(*((void *)this + 4) + 16);
      if (!v19) {
        uint64_t v19 = &CoreML::Specification::_Pipeline_default_instance_;
      }
      uint64_t v20 = v19[4];
      if (v20) {
        uint64_t v21 = (CoreML **)(v20 + 8);
      }
      else {
        uint64_t v21 = 0;
      }
      uint64_t v22 = *((int *)v19 + 6);
      if (!v22) {
        return 0;
      }
      uint64_t v23 = 8 * v22 - 8;
      do
      {
        uint64_t v24 = *v21++;
        uint64_t result = CoreML::hasIOS12Features(v24, a2);
        if (result) {
          break;
        }
        uint64_t v25 = v23;
        v23 -= 8;
      }
      while (v25);
      break;
    case 202:
      uint64_t v4 = *((void *)this + 4);
      uint64_t v5 = *(void *)(v4 + 32);
      if (v5) {
        uint64_t v6 = (CoreML **)(v5 + 8);
      }
      else {
        uint64_t v6 = 0;
      }
      uint64_t v7 = *(int *)(v4 + 24);
      if (v7)
      {
        uint64_t v8 = 8 * v7 - 8;
        do
        {
          uint64_t v9 = *v6++;
          uint64_t result = CoreML::hasIOS12Features(v9, a2);
          if (result) {
            break;
          }
          uint64_t v11 = v8;
          v8 -= 8;
        }
        while (v11);
        return result;
      }
      return 0;
    default:
      int v26 = (uint64_t *)*((void *)this + 2);
      if (!v26) {
        int v26 = &CoreML::Specification::_ModelDescription_default_instance_;
      }
      memset(&v48, 0, sizeof(v48));
      unsigned int v27 = *((_DWORD *)v26 + 6);
      if (v27)
      {
        uint64_t v28 = (const CoreML::Specification::FeatureDescription **)(v26[4] + 8);
        uint64_t v29 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)&v48, v27);
        uint64_t v30 = (_DWORD *)v48.__r_.__value_.__r.__words[2];
        int v31 = v48.__r_.__value_.__r.__words[1];
        google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>(&v48, (std::string **)v29, v28, v27, *(_DWORD *)v48.__r_.__value_.__r.__words[2] - LODWORD(v48.__r_.__value_.__r.__words[1]));
        int v32 = v31 + v27;
        LODWORD(v48.__r_.__value_.__r.__words[1]) = v31 + v27;
        if (*v30 < (signed int)(v31 + v27)) {
          *uint64_t v30 = v32;
        }
        if (v32)
        {
          unsigned int v33 = v30 + 2;
          for (uint64_t i = 8 * v32; i; i -= 8)
          {
            uint64_t v35 = *(uint64_t **)(*(void *)v33 + 32);
            if (!v35) {
              uint64_t v35 = &CoreML::Specification::_FeatureType_default_instance_;
            }
            int v36 = *((_DWORD *)v35 + 9);
            if (v36 == 4)
            {
              if (*(_DWORD *)(v35[3] + 52)) {
                goto LABEL_49;
              }
            }
            else if (v36 == 5 && *(_DWORD *)(v35[3] + 60))
            {
LABEL_49:
              LOBYTE(v27) = 1;
              goto LABEL_50;
            }
            v33 += 2;
          }
        }
        LOBYTE(v27) = 0;
      }
LABEL_50:
      google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>(&v48);
      if (v27) {
        return 1;
      }
      uint64_t v37 = (const CoreML::Specification::Model *)*((unsigned int *)this + 11);
      if (v37 == 555) {
        return 1;
      }
      int v38 = (uint64_t *)*((void *)this + 2);
      if (!v38) {
        int v38 = &CoreML::Specification::_ModelDescription_default_instance_;
      }
      uint64_t v39 = *((unsigned int *)v38 + 6);
      if ((int)v39 >= 1)
      {
        uint64_t v40 = v38[4] + 8;
        do
        {
          int v41 = *(uint64_t **)(*(void *)v40 + 32);
          if (!v41) {
            int v41 = &CoreML::Specification::_FeatureType_default_instance_;
          }
          if (*((_DWORD *)v41 + 9) == 7 && ((*(_DWORD *)(v41[3] + 36) - 1) & 0xFFFFFFFD) == 0) {
            return 1;
          }
          v40 += 8;
        }
        while (--v39);
      }
      unint64_t v42 = *((unsigned int *)v38 + 12);
      if ((int)v42 >= 1)
      {
        uint64_t v43 = 0;
        uint64_t v44 = v38[7] + 8;
        BOOL v45 = 1;
        do
        {
          std::string::size_type v46 = *(uint64_t **)(*(void *)(v44 + 8 * v43) + 32);
          if (!v46) {
            std::string::size_type v46 = &CoreML::Specification::_FeatureType_default_instance_;
          }
          if (*((_DWORD *)v46 + 9) == 7 && ((*(_DWORD *)(v46[3] + 36) - 1) & 0xFFFFFFFD) == 0) {
            break;
          }
          BOOL v45 = ++v43 < v42;
        }
        while (v42 != v43);
        if (v45) {
          return 1;
        }
      }
      if ((v37 - 2000) < 2) {
        return 1;
      }
      if (v37 == 2002)
      {
        long long v47 = (CoreML *)*((void *)this + 4);
        if (*((_DWORD *)v47 + 7) == 20 || CoreML::hasWeightOfType((uint64_t)v47, 2002, 2)) {
          return 1;
        }
      }
      else
      {
        long long v47 = (CoreML *)*((void *)this + 4);
        if (CoreML::hasWeightOfType((uint64_t)v47, (int)v37, 2)) {
          return 1;
        }
        uint64_t result = 1;
        if (v37 == 304 || v37 == 610) {
          return result;
        }
      }
      return CoreML::hasIOS12NewNeuralNetworkLayers(v47, v37);
  }
  return result;
}

uint64_t CoreML::hasIOS11_2Features(CoreML *this, const CoreML::Specification::Model *a2)
{
  int v2 = (const CoreML::Specification::Model *)*((unsigned int *)this + 11);
  switch(v2)
  {
    case 0xC8:
      uint64_t v11 = *(uint64_t **)(*((void *)this + 4) + 16);
      if (!v11) {
        uint64_t v11 = &CoreML::Specification::_Pipeline_default_instance_;
      }
      uint64_t v12 = v11[4];
      if (v12) {
        uint64_t v13 = (CoreML **)(v12 + 8);
      }
      else {
        uint64_t v13 = 0;
      }
      uint64_t v14 = *((int *)v11 + 6);
      if (!v14) {
        return 0;
      }
      uint64_t v15 = 8 * v14 - 8;
      do
      {
        uint64_t v16 = *v13++;
        uint64_t result = CoreML::hasIOS11_2Features(v16, a2);
        if (result) {
          break;
        }
        uint64_t v17 = v15;
        v15 -= 8;
      }
      while (v17);
      break;
    case 0xC9:
      uint64_t v18 = *(uint64_t **)(*((void *)this + 4) + 16);
      if (!v18) {
        uint64_t v18 = &CoreML::Specification::_Pipeline_default_instance_;
      }
      uint64_t v19 = v18[4];
      if (v19) {
        uint64_t v20 = (CoreML **)(v19 + 8);
      }
      else {
        uint64_t v20 = 0;
      }
      uint64_t v21 = *((int *)v18 + 6);
      if (!v21) {
        return 0;
      }
      uint64_t v22 = 8 * v21 - 8;
      do
      {
        uint64_t v23 = *v20++;
        uint64_t result = CoreML::hasIOS11_2Features(v23, a2);
        if (result) {
          break;
        }
        uint64_t v24 = v22;
        v22 -= 8;
      }
      while (v24);
      break;
    case 0xCA:
      uint64_t v3 = *((void *)this + 4);
      uint64_t v4 = *(void *)(v3 + 32);
      if (v4) {
        uint64_t v5 = (CoreML **)(v4 + 8);
      }
      else {
        uint64_t v5 = 0;
      }
      uint64_t v6 = *(int *)(v3 + 24);
      if (v6)
      {
        uint64_t v7 = 8 * v6 - 8;
        do
        {
          uint64_t v8 = *v5++;
          uint64_t result = CoreML::hasIOS11_2Features(v8, a2);
          if (result) {
            break;
          }
          uint64_t v10 = v7;
          v7 -= 8;
        }
        while (v10);
        return result;
      }
      return 0;
    default:
      uint64_t v25 = (CoreML *)*((void *)this + 4);
      if (CoreML::hasCustomLayer(v25, v2))
      {
        return 1;
      }
      else
      {
        return CoreML::hasWeightOfType((uint64_t)v25, (int)v2, 1);
      }
  }
  return result;
}

BOOL CoreML::hasWeightOfType(uint64_t a1, int a2, int a3)
{
  if (a2 != 303 && a2 != 403 && a2 != 500) {
    return 0;
  }
  uint64_t v4 = *(unsigned int *)(a1 + 24);
  if ((int)v4 < 1) {
    return 0;
  }
  uint64_t v5 = v4 - 1;
  uint64_t v6 = *(void *)(a1 + 32) + 8;
  while (1)
  {
    BOOL result = 0;
    uint64_t v8 = v5;
    uint64_t v9 = *(void *)v6;
    int v10 = *(_DWORD *)(*(void *)v6 + 140);
    if (v10 <= 289) {
      break;
    }
    if (v10 <= 419)
    {
      if (v10 == 290)
      {
        long long v47 = *(uint64_t **)(*(void *)(v9 + 128) + 40);
        goto LABEL_80;
      }
      if (v10 == 400)
      {
        long long v50 = *(void **)(v9 + 128);
        uint64_t v51 = (uint64_t *)v50[3];
        if (!v51) {
          uint64_t v51 = &CoreML::Specification::_WeightParams_default_instance_;
        }
        uint64_t v52 = v51[5];
        uint64_t v53 = *(unsigned __int8 *)(v52 + 23);
        if (*(char *)(v52 + 23) < 0) {
          uint64_t v54 = *(void *)(v52 + 8);
        }
        else {
          uint64_t v54 = *(unsigned __int8 *)(v52 + 23);
        }
        uint64_t v81 = v51[6];
        uint64_t v82 = *(unsigned __int8 *)(v81 + 23);
        if (*(char *)(v81 + 23) < 0) {
          uint64_t v83 = *(void *)(v81 + 8);
        }
        else {
          uint64_t v83 = *(unsigned __int8 *)(v81 + 23);
        }
        uint64_t v96 = v51[7];
        uint64_t v97 = *(unsigned __int8 *)(v96 + 23);
        if (*(char *)(v96 + 23) < 0) {
          uint64_t v98 = *(void *)(v96 + 8);
        }
        else {
          uint64_t v98 = *(unsigned __int8 *)(v96 + 23);
        }
        int v120 = *((_DWORD *)v51 + 4);
        if (v120 <= 0) {
          int v121 = 1;
        }
        else {
          int v121 = 2;
        }
        if (v54) {
          unsigned int v122 = v121;
        }
        else {
          unsigned int v122 = v120 > 0;
        }
        if (v83) {
          ++v122;
        }
        if (v98) {
          unsigned int v123 = v122 + 1;
        }
        else {
          unsigned int v123 = v122;
        }
        if (v123 > 1) {
          goto LABEL_575;
        }
        if (v123) {
          int v124 = 0;
        }
        else {
          int v124 = 5;
        }
        if (v120 <= 0 && v123 != 0)
        {
          if ((v53 & 0x80) != 0) {
            uint64_t v53 = *(void *)(v52 + 8);
          }
          if (v53) {
            goto LABEL_584;
          }
          if ((v82 & 0x80) != 0) {
            uint64_t v82 = *(void *)(v81 + 8);
          }
          uint64_t v126 = v51[8];
          if (v51 != &CoreML::Specification::_WeightParams_default_instance_ && v82 && v126 != 0) {
            goto LABEL_590;
          }
          if ((v97 & 0x80) != 0) {
            uint64_t v97 = *(void *)(v96 + 8);
          }
          BOOL v128 = v126 == 0;
          goto LABEL_645;
        }
        goto LABEL_654;
      }
      if (v10 != 410) {
        goto LABEL_1027;
      }
      uint64_t v13 = *(void **)(v9 + 128);
      uint64_t v14 = (uint64_t *)v13[5];
      if (!v14) {
        uint64_t v14 = &CoreML::Specification::_WeightParams_default_instance_;
      }
      uint64_t v15 = v14[5];
      uint64_t v16 = *(unsigned __int8 *)(v15 + 23);
      if (*(char *)(v15 + 23) < 0) {
        uint64_t v17 = *(void *)(v15 + 8);
      }
      else {
        uint64_t v17 = *(unsigned __int8 *)(v15 + 23);
      }
      uint64_t v72 = v14[6];
      uint64_t v73 = *(unsigned __int8 *)(v72 + 23);
      if (*(char *)(v72 + 23) < 0) {
        uint64_t v74 = *(void *)(v72 + 8);
      }
      else {
        uint64_t v74 = *(unsigned __int8 *)(v72 + 23);
      }
      uint64_t v87 = v14[7];
      uint64_t v88 = *(unsigned __int8 *)(v87 + 23);
      if (*(char *)(v87 + 23) < 0) {
        uint64_t v89 = *(void *)(v87 + 8);
      }
      else {
        uint64_t v89 = *(unsigned __int8 *)(v87 + 23);
      }
      int v102 = *((_DWORD *)v14 + 4);
      if (v102 <= 0) {
        int v103 = 1;
      }
      else {
        int v103 = 2;
      }
      if (v17) {
        unsigned int v104 = v103;
      }
      else {
        unsigned int v104 = v102 > 0;
      }
      if (v74) {
        ++v104;
      }
      if (v89) {
        unsigned int v105 = v104 + 1;
      }
      else {
        unsigned int v105 = v104;
      }
      if (v105 <= 1)
      {
        if (v105) {
          int v106 = 0;
        }
        else {
          int v106 = 5;
        }
        if (v102 <= 0 && v105 != 0)
        {
          if ((v16 & 0x80) != 0) {
            uint64_t v16 = *(void *)(v15 + 8);
          }
          if (v16)
          {
            int v106 = 1;
          }
          else
          {
            if ((v73 & 0x80) != 0) {
              uint64_t v73 = *(void *)(v72 + 8);
            }
            uint64_t v163 = v14[8];
            if (v14 == &CoreML::Specification::_WeightParams_default_instance_
              || (v73 ? (BOOL v164 = v163 == 0) : (BOOL v164 = 1), v164))
            {
              if ((v88 & 0x80) != 0) {
                uint64_t v88 = *(void *)(v87 + 8);
              }
              if (v163) {
                BOOL v174 = v88 == 0;
              }
              else {
                BOOL v174 = 1;
              }
              if (v174 || v14 == &CoreML::Specification::_WeightParams_default_instance_) {
                int v106 = 5;
              }
              else {
                int v106 = 3;
              }
            }
            else
            {
              int v106 = 2;
            }
          }
        }
      }
      else
      {
        int v106 = 4;
      }
      if (v106 == a3) {
        return 1;
      }
      uint64_t v176 = (uint64_t *)v13[6];
      if (!v176) {
        uint64_t v176 = &CoreML::Specification::_WeightParams_default_instance_;
      }
      uint64_t v177 = v176[5];
      uint64_t v178 = *(unsigned __int8 *)(v177 + 23);
      if (*(char *)(v177 + 23) < 0) {
        uint64_t v179 = *(void *)(v177 + 8);
      }
      else {
        uint64_t v179 = *(unsigned __int8 *)(v177 + 23);
      }
      uint64_t v180 = v176[6];
      uint64_t v181 = *(unsigned __int8 *)(v180 + 23);
      if (*(char *)(v180 + 23) < 0) {
        uint64_t v182 = *(void *)(v180 + 8);
      }
      else {
        uint64_t v182 = *(unsigned __int8 *)(v180 + 23);
      }
      uint64_t v183 = v176[7];
      uint64_t v184 = *(unsigned __int8 *)(v183 + 23);
      if (*(char *)(v183 + 23) < 0) {
        uint64_t v185 = *(void *)(v183 + 8);
      }
      else {
        uint64_t v185 = *(unsigned __int8 *)(v183 + 23);
      }
      int v186 = *((_DWORD *)v176 + 4);
      if (v186 <= 0) {
        int v187 = 1;
      }
      else {
        int v187 = 2;
      }
      if (v179) {
        int v188 = v187;
      }
      else {
        int v188 = v186 > 0;
      }
      if (v182) {
        ++v188;
      }
      unsigned int v189 = v185 ? v188 + 1 : v188;
      if (v189 <= 1)
      {
        if (v189) {
          int v190 = 0;
        }
        else {
          int v190 = 5;
        }
        if (v186 <= 0 && v189)
        {
          if ((v178 & 0x80) != 0) {
            uint64_t v178 = *(void *)(v177 + 8);
          }
          if (v178)
          {
            int v190 = 1;
          }
          else
          {
            if ((v181 & 0x80) != 0) {
              uint64_t v181 = *(void *)(v180 + 8);
            }
            uint64_t v191 = v176[8];
            if (v176 != &CoreML::Specification::_WeightParams_default_instance_ && v181 && v191)
            {
              int v190 = 2;
            }
            else
            {
              if ((v184 & 0x80) != 0) {
                uint64_t v184 = *(void *)(v183 + 8);
              }
              if (v191) {
                BOOL v225 = v184 == 0;
              }
              else {
                BOOL v225 = 1;
              }
              if (v225 || v176 == &CoreML::Specification::_WeightParams_default_instance_) {
                int v190 = 5;
              }
              else {
                int v190 = 3;
              }
            }
          }
        }
      }
      else
      {
        int v190 = 4;
      }
      if (v190 == a3) {
        return 1;
      }
      long long v227 = (uint64_t *)v13[7];
      if (!v227) {
        long long v227 = &CoreML::Specification::_WeightParams_default_instance_;
      }
      uint64_t v228 = v227[5];
      uint64_t v229 = *(unsigned __int8 *)(v228 + 23);
      if (*(char *)(v228 + 23) < 0) {
        uint64_t v230 = *(void *)(v228 + 8);
      }
      else {
        uint64_t v230 = *(unsigned __int8 *)(v228 + 23);
      }
      uint64_t v231 = v227[6];
      uint64_t v232 = *(unsigned __int8 *)(v231 + 23);
      if (*(char *)(v231 + 23) < 0) {
        uint64_t v233 = *(void *)(v231 + 8);
      }
      else {
        uint64_t v233 = *(unsigned __int8 *)(v231 + 23);
      }
      uint64_t v234 = v227[7];
      uint64_t v235 = *(unsigned __int8 *)(v234 + 23);
      if (*(char *)(v234 + 23) < 0) {
        uint64_t v236 = *(void *)(v234 + 8);
      }
      else {
        uint64_t v236 = *(unsigned __int8 *)(v234 + 23);
      }
      int v237 = *((_DWORD *)v227 + 4);
      if (v237 <= 0) {
        int v238 = 1;
      }
      else {
        int v238 = 2;
      }
      if (v230) {
        int v239 = v238;
      }
      else {
        int v239 = v237 > 0;
      }
      if (v233) {
        ++v239;
      }
      unsigned int v240 = v236 ? v239 + 1 : v239;
      if (v240 <= 1)
      {
        if (v240) {
          int v241 = 0;
        }
        else {
          int v241 = 5;
        }
        if (v237 <= 0 && v240)
        {
          if ((v229 & 0x80) != 0) {
            uint64_t v229 = *(void *)(v228 + 8);
          }
          if (v229)
          {
            int v241 = 1;
          }
          else
          {
            if ((v232 & 0x80) != 0) {
              uint64_t v232 = *(void *)(v231 + 8);
            }
            uint64_t v242 = v227[8];
            if (v227 != &CoreML::Specification::_WeightParams_default_instance_ && v232 && v242)
            {
              int v241 = 2;
            }
            else
            {
              if ((v235 & 0x80) != 0) {
                uint64_t v235 = *(void *)(v234 + 8);
              }
              if (v242) {
                BOOL v262 = v235 == 0;
              }
              else {
                BOOL v262 = 1;
              }
              if (v262 || v227 == &CoreML::Specification::_WeightParams_default_instance_) {
                int v241 = 5;
              }
              else {
                int v241 = 3;
              }
            }
          }
        }
      }
      else
      {
        int v241 = 4;
      }
      if (v241 == a3) {
        return 1;
      }
      uint64_t v264 = (uint64_t *)v13[8];
      if (!v264) {
        uint64_t v264 = &CoreML::Specification::_WeightParams_default_instance_;
      }
      uint64_t v265 = v264[5];
      uint64_t v266 = *(unsigned __int8 *)(v265 + 23);
      if (*(char *)(v265 + 23) < 0) {
        uint64_t v267 = *(void *)(v265 + 8);
      }
      else {
        uint64_t v267 = *(unsigned __int8 *)(v265 + 23);
      }
      uint64_t v268 = v264[6];
      uint64_t v269 = *(unsigned __int8 *)(v268 + 23);
      if (*(char *)(v268 + 23) < 0) {
        uint64_t v270 = *(void *)(v268 + 8);
      }
      else {
        uint64_t v270 = *(unsigned __int8 *)(v268 + 23);
      }
      uint64_t v271 = v264[7];
      uint64_t v272 = *(unsigned __int8 *)(v271 + 23);
      if (*(char *)(v271 + 23) < 0) {
        uint64_t v273 = *(void *)(v271 + 8);
      }
      else {
        uint64_t v273 = *(unsigned __int8 *)(v271 + 23);
      }
      int v274 = *((_DWORD *)v264 + 4);
      if (v274 <= 0) {
        int v275 = 1;
      }
      else {
        int v275 = 2;
      }
      if (v267) {
        int v276 = v275;
      }
      else {
        int v276 = v274 > 0;
      }
      if (v270) {
        ++v276;
      }
      unsigned int v277 = v273 ? v276 + 1 : v276;
      if (v277 <= 1)
      {
        if (v277) {
          int v278 = 0;
        }
        else {
          int v278 = 5;
        }
        if (v274 <= 0 && v277)
        {
          if ((v266 & 0x80) != 0) {
            uint64_t v266 = *(void *)(v265 + 8);
          }
          if (v266)
          {
            int v278 = 1;
          }
          else
          {
            if ((v269 & 0x80) != 0) {
              uint64_t v269 = *(void *)(v268 + 8);
            }
            uint64_t v279 = v264[8];
            if (v264 != &CoreML::Specification::_WeightParams_default_instance_ && v269 && v279)
            {
              int v278 = 2;
            }
            else
            {
              if ((v272 & 0x80) != 0) {
                uint64_t v272 = *(void *)(v271 + 8);
              }
              if (v279) {
                BOOL v280 = v272 == 0;
              }
              else {
                BOOL v280 = 1;
              }
              if (v280 || v264 == &CoreML::Specification::_WeightParams_default_instance_) {
                int v278 = 5;
              }
              else {
                int v278 = 3;
              }
            }
          }
        }
      }
      else
      {
        int v278 = 4;
      }
      if (v278 == a3) {
        return 1;
      }
      int v282 = (uint64_t *)v13[9];
      if (!v282) {
        int v282 = &CoreML::Specification::_WeightParams_default_instance_;
      }
      uint64_t v283 = v282[5];
      uint64_t v284 = *(unsigned __int8 *)(v283 + 23);
      if (*(char *)(v283 + 23) < 0) {
        uint64_t v285 = *(void *)(v283 + 8);
      }
      else {
        uint64_t v285 = *(unsigned __int8 *)(v283 + 23);
      }
      uint64_t v286 = v282[6];
      uint64_t v287 = *(unsigned __int8 *)(v286 + 23);
      if (*(char *)(v286 + 23) < 0) {
        uint64_t v288 = *(void *)(v286 + 8);
      }
      else {
        uint64_t v288 = *(unsigned __int8 *)(v286 + 23);
      }
      uint64_t v289 = v282[7];
      uint64_t v290 = *(unsigned __int8 *)(v289 + 23);
      if (*(char *)(v289 + 23) < 0) {
        uint64_t v291 = *(void *)(v289 + 8);
      }
      else {
        uint64_t v291 = *(unsigned __int8 *)(v289 + 23);
      }
      int v292 = *((_DWORD *)v282 + 4);
      if (v292 <= 0) {
        int v293 = 1;
      }
      else {
        int v293 = 2;
      }
      if (v285) {
        int v294 = v293;
      }
      else {
        int v294 = v292 > 0;
      }
      if (v288) {
        ++v294;
      }
      unsigned int v295 = v291 ? v294 + 1 : v294;
      if (v295 <= 1)
      {
        if (v295) {
          int v296 = 0;
        }
        else {
          int v296 = 5;
        }
        if (v292 <= 0 && v295)
        {
          if ((v284 & 0x80) != 0) {
            uint64_t v284 = *(void *)(v283 + 8);
          }
          if (v284)
          {
            int v296 = 1;
          }
          else
          {
            if ((v287 & 0x80) != 0) {
              uint64_t v287 = *(void *)(v286 + 8);
            }
            uint64_t v297 = v282[8];
            if (v282 != &CoreML::Specification::_WeightParams_default_instance_ && v287 && v297)
            {
              int v296 = 2;
            }
            else
            {
              if ((v290 & 0x80) != 0) {
                uint64_t v290 = *(void *)(v289 + 8);
              }
              if (v297) {
                BOOL v298 = v290 == 0;
              }
              else {
                BOOL v298 = 1;
              }
              if (v298 || v282 == &CoreML::Specification::_WeightParams_default_instance_) {
                int v296 = 5;
              }
              else {
                int v296 = 3;
              }
            }
          }
        }
      }
      else
      {
        int v296 = 4;
      }
      if (v296 == a3) {
        return 1;
      }
      uint64_t v300 = (uint64_t *)v13[10];
      if (!v300) {
        uint64_t v300 = &CoreML::Specification::_WeightParams_default_instance_;
      }
      uint64_t v301 = v300[5];
      uint64_t v302 = *(unsigned __int8 *)(v301 + 23);
      if (*(char *)(v301 + 23) < 0) {
        uint64_t v303 = *(void *)(v301 + 8);
      }
      else {
        uint64_t v303 = *(unsigned __int8 *)(v301 + 23);
      }
      uint64_t v304 = v300[6];
      uint64_t v305 = *(unsigned __int8 *)(v304 + 23);
      if (*(char *)(v304 + 23) < 0) {
        uint64_t v306 = *(void *)(v304 + 8);
      }
      else {
        uint64_t v306 = *(unsigned __int8 *)(v304 + 23);
      }
      uint64_t v307 = v300[7];
      uint64_t v308 = *(unsigned __int8 *)(v307 + 23);
      if (*(char *)(v307 + 23) < 0) {
        uint64_t v309 = *(void *)(v307 + 8);
      }
      else {
        uint64_t v309 = *(unsigned __int8 *)(v307 + 23);
      }
      int v310 = *((_DWORD *)v300 + 4);
      if (v310 <= 0) {
        int v311 = 1;
      }
      else {
        int v311 = 2;
      }
      if (v303) {
        int v312 = v311;
      }
      else {
        int v312 = v310 > 0;
      }
      if (v306) {
        ++v312;
      }
      unsigned int v313 = v309 ? v312 + 1 : v312;
      if (v313 <= 1)
      {
        if (v313) {
          int v314 = 0;
        }
        else {
          int v314 = 5;
        }
        if (v310 <= 0 && v313)
        {
          if ((v302 & 0x80) != 0) {
            uint64_t v302 = *(void *)(v301 + 8);
          }
          if (v302)
          {
            int v314 = 1;
          }
          else
          {
            if ((v305 & 0x80) != 0) {
              uint64_t v305 = *(void *)(v304 + 8);
            }
            uint64_t v315 = v300[8];
            if (v300 != &CoreML::Specification::_WeightParams_default_instance_ && v305 && v315)
            {
              int v314 = 2;
            }
            else
            {
              if ((v308 & 0x80) != 0) {
                uint64_t v308 = *(void *)(v307 + 8);
              }
              if (v315) {
                BOOL v316 = v308 == 0;
              }
              else {
                BOOL v316 = 1;
              }
              if (v316 || v300 == &CoreML::Specification::_WeightParams_default_instance_) {
                int v314 = 5;
              }
              else {
                int v314 = 3;
              }
            }
          }
        }
      }
      else
      {
        int v314 = 4;
      }
      if (v314 == a3) {
        return 1;
      }
      uint64_t v318 = (uint64_t *)v13[11];
      if (!v318) {
        uint64_t v318 = &CoreML::Specification::_WeightParams_default_instance_;
      }
      uint64_t v319 = v318[5];
      uint64_t v320 = *(unsigned __int8 *)(v319 + 23);
      if (*(char *)(v319 + 23) < 0) {
        uint64_t v321 = *(void *)(v319 + 8);
      }
      else {
        uint64_t v321 = *(unsigned __int8 *)(v319 + 23);
      }
      uint64_t v322 = v318[6];
      uint64_t v323 = *(unsigned __int8 *)(v322 + 23);
      if (*(char *)(v322 + 23) < 0) {
        uint64_t v324 = *(void *)(v322 + 8);
      }
      else {
        uint64_t v324 = *(unsigned __int8 *)(v322 + 23);
      }
      uint64_t v325 = v318[7];
      uint64_t v326 = *(unsigned __int8 *)(v325 + 23);
      if (*(char *)(v325 + 23) < 0) {
        uint64_t v327 = *(void *)(v325 + 8);
      }
      else {
        uint64_t v327 = *(unsigned __int8 *)(v325 + 23);
      }
      int v328 = *((_DWORD *)v318 + 4);
      if (v328 <= 0) {
        int v329 = 1;
      }
      else {
        int v329 = 2;
      }
      if (v321) {
        int v330 = v329;
      }
      else {
        int v330 = v328 > 0;
      }
      if (v324) {
        ++v330;
      }
      unsigned int v331 = v327 ? v330 + 1 : v330;
      if (v331 <= 1)
      {
        if (v331) {
          int v332 = 0;
        }
        else {
          int v332 = 5;
        }
        if (v328 <= 0 && v331)
        {
          if ((v320 & 0x80) != 0) {
            uint64_t v320 = *(void *)(v319 + 8);
          }
          if (v320)
          {
            int v332 = 1;
          }
          else
          {
            if ((v323 & 0x80) != 0) {
              uint64_t v323 = *(void *)(v322 + 8);
            }
            uint64_t v333 = v318[8];
            if (v318 != &CoreML::Specification::_WeightParams_default_instance_ && v323 && v333)
            {
              int v332 = 2;
            }
            else
            {
              if ((v326 & 0x80) != 0) {
                uint64_t v326 = *(void *)(v325 + 8);
              }
              if (v333) {
                BOOL v334 = v326 == 0;
              }
              else {
                BOOL v334 = 1;
              }
              if (v334 || v318 == &CoreML::Specification::_WeightParams_default_instance_) {
                int v332 = 5;
              }
              else {
                int v332 = 3;
              }
            }
          }
        }
      }
      else
      {
        int v332 = 4;
      }
      if (v332 == a3) {
        return 1;
      }
      int v336 = (uint64_t *)v13[12];
      if (!v336) {
        int v336 = &CoreML::Specification::_WeightParams_default_instance_;
      }
      uint64_t v337 = v336[5];
      uint64_t v338 = *(unsigned __int8 *)(v337 + 23);
      if (*(char *)(v337 + 23) < 0) {
        uint64_t v339 = *(void *)(v337 + 8);
      }
      else {
        uint64_t v339 = *(unsigned __int8 *)(v337 + 23);
      }
      uint64_t v340 = v336[6];
      uint64_t v341 = *(unsigned __int8 *)(v340 + 23);
      if (*(char *)(v340 + 23) < 0) {
        uint64_t v342 = *(void *)(v340 + 8);
      }
      else {
        uint64_t v342 = *(unsigned __int8 *)(v340 + 23);
      }
      uint64_t v343 = v336[7];
      uint64_t v344 = *(unsigned __int8 *)(v343 + 23);
      if (*(char *)(v343 + 23) < 0) {
        uint64_t v345 = *(void *)(v343 + 8);
      }
      else {
        uint64_t v345 = *(unsigned __int8 *)(v343 + 23);
      }
      int v346 = *((_DWORD *)v336 + 4);
      if (v346 <= 0) {
        int v347 = 1;
      }
      else {
        int v347 = 2;
      }
      if (v339) {
        int v348 = v347;
      }
      else {
        int v348 = v346 > 0;
      }
      if (v342) {
        ++v348;
      }
      unsigned int v349 = v345 ? v348 + 1 : v348;
      if (v349 <= 1)
      {
        if (v349) {
          int v350 = 0;
        }
        else {
          int v350 = 5;
        }
        if (v346 <= 0 && v349)
        {
          if ((v338 & 0x80) != 0) {
            uint64_t v338 = *(void *)(v337 + 8);
          }
          if (v338)
          {
            int v350 = 1;
          }
          else
          {
            if ((v341 & 0x80) != 0) {
              uint64_t v341 = *(void *)(v340 + 8);
            }
            uint64_t v351 = v336[8];
            if (v336 != &CoreML::Specification::_WeightParams_default_instance_ && v341 && v351)
            {
              int v350 = 2;
            }
            else
            {
              if ((v344 & 0x80) != 0) {
                uint64_t v344 = *(void *)(v343 + 8);
              }
              if (v351) {
                BOOL v352 = v344 == 0;
              }
              else {
                BOOL v352 = 1;
              }
              if (v352 || v336 == &CoreML::Specification::_WeightParams_default_instance_) {
                int v350 = 5;
              }
              else {
                int v350 = 3;
              }
            }
          }
        }
      }
      else
      {
        int v350 = 4;
      }
      if (v350 == a3) {
        return 1;
      }
      long long v47 = (uint64_t *)v13[13];
      goto LABEL_975;
    }
    if (v10 > 1039)
    {
      if (v10 != 1040 && v10 != 1045) {
        goto LABEL_1027;
      }
LABEL_34:
      uint64_t v23 = *(void *)(v9 + 128);
      uint64_t v24 = *(uint64_t **)(v23 + 16);
      if (!v24) {
        uint64_t v24 = &CoreML::Specification::_WeightParams_default_instance_;
      }
      uint64_t v25 = v24[5];
      if (*(char *)(v25 + 23) < 0) {
        uint64_t v26 = *(void *)(v25 + 8);
      }
      else {
        uint64_t v26 = *(unsigned __int8 *)(v25 + 23);
      }
      uint64_t v27 = v24[6];
      uint64_t v28 = *(unsigned __int8 *)(v27 + 23);
      if (*(char *)(v27 + 23) < 0) {
        uint64_t v29 = *(void *)(v27 + 8);
      }
      else {
        uint64_t v29 = *(unsigned __int8 *)(v27 + 23);
      }
      uint64_t v30 = v24[7];
      uint64_t v31 = *(unsigned __int8 *)(v30 + 23);
      if (*(char *)(v30 + 23) < 0) {
        uint64_t v32 = *(void *)(v30 + 8);
      }
      else {
        uint64_t v32 = *(unsigned __int8 *)(v30 + 23);
      }
      int v33 = *((_DWORD *)v24 + 4);
      if (v33 <= 0) {
        int v34 = 1;
      }
      else {
        int v34 = 2;
      }
      if (v26) {
        unsigned int v35 = v34;
      }
      else {
        unsigned int v35 = v33 > 0;
      }
      if (v29) {
        ++v35;
      }
      if (v32) {
        unsigned int v36 = v35 + 1;
      }
      else {
        unsigned int v36 = v35;
      }
      if (v36 > 1)
      {
        int v37 = 4;
LABEL_342:
        if (v37 == a3) {
          return 1;
        }
        long long v47 = *(uint64_t **)(v23 + 24);
        goto LABEL_975;
      }
      if (v36) {
        int v37 = 0;
      }
      else {
        int v37 = 5;
      }
      if (v33 > 0 || v36 == 0) {
        goto LABEL_342;
      }
      if ((*(unsigned char *)(v25 + 23) & 0x80) != 0)
      {
        if (*(void *)(v25 + 8)) {
          goto LABEL_67;
        }
      }
      else if (*(unsigned char *)(v25 + 23))
      {
LABEL_67:
        int v37 = 1;
        goto LABEL_342;
      }
      if ((v28 & 0x80) != 0) {
        uint64_t v28 = *(void *)(v27 + 8);
      }
      uint64_t v150 = v24[8];
      if (v24 == &CoreML::Specification::_WeightParams_default_instance_
        || (v28 ? (BOOL v151 = v150 == 0) : (BOOL v151 = 1), v151))
      {
        if ((v31 & 0x80) != 0) {
          uint64_t v31 = *(void *)(v30 + 8);
        }
        if (v150) {
          BOOL v152 = v31 == 0;
        }
        else {
          BOOL v152 = 1;
        }
        if (v152 || v24 == &CoreML::Specification::_WeightParams_default_instance_) {
          int v37 = 5;
        }
        else {
          int v37 = 3;
        }
      }
      else
      {
        int v37 = 2;
      }
      goto LABEL_342;
    }
    if (v10 == 420)
    {
      uint64_t v39 = *(uint64_t **)(*(void *)(v9 + 128) + 48);
      if (v39) {
        uint64_t v12 = v39;
      }
      else {
        uint64_t v12 = &CoreML::Specification::_LSTMWeightParams_default_instance_;
      }
    }
    else
    {
      if (v10 != 430) {
        goto LABEL_1027;
      }
      uint64_t v11 = *(void *)(*(void *)(v9 + 128) + 80);
      if (hasLSTMWeightParamOfType(*(void **)(v11 + 8), a3)) {
        return 1;
      }
      uint64_t v12 = *(uint64_t **)(v11 + 16);
    }
    BOOL result = hasLSTMWeightParamOfType(v12, a3);
LABEL_1027:
    if (!result)
    {
      uint64_t v5 = v8 - 1;
      v6 += 8;
      if (v8) {
        continue;
      }
    }
    return result;
  }
  if (v10 <= 149)
  {
    switch(v10)
    {
      case 100:
        uint64_t v40 = *(void *)(v9 + 128);
        int v41 = *(uint64_t **)(v40 + 112);
        if (!v41) {
          int v41 = &CoreML::Specification::_WeightParams_default_instance_;
        }
        uint64_t v42 = v41[5];
        uint64_t v43 = *(unsigned __int8 *)(v42 + 23);
        if (*(char *)(v42 + 23) < 0) {
          uint64_t v44 = *(void *)(v42 + 8);
        }
        else {
          uint64_t v44 = *(unsigned __int8 *)(v42 + 23);
        }
        uint64_t v78 = v41[6];
        uint64_t v79 = *(unsigned __int8 *)(v78 + 23);
        if (*(char *)(v78 + 23) < 0) {
          uint64_t v80 = *(void *)(v78 + 8);
        }
        else {
          uint64_t v80 = *(unsigned __int8 *)(v78 + 23);
        }
        uint64_t v93 = v41[7];
        uint64_t v94 = *(unsigned __int8 *)(v93 + 23);
        if (*(char *)(v93 + 23) < 0) {
          uint64_t v95 = *(void *)(v93 + 8);
        }
        else {
          uint64_t v95 = *(unsigned __int8 *)(v93 + 23);
        }
        int v114 = *((_DWORD *)v41 + 4);
        if (v114 <= 0) {
          int v115 = 1;
        }
        else {
          int v115 = 2;
        }
        if (v44) {
          unsigned int v116 = v115;
        }
        else {
          unsigned int v116 = v114 > 0;
        }
        if (v80) {
          ++v116;
        }
        if (v95) {
          unsigned int v117 = v116 + 1;
        }
        else {
          unsigned int v117 = v116;
        }
        if (v117 <= 1)
        {
          if (v117) {
            int v118 = 0;
          }
          else {
            int v118 = 5;
          }
          if (v114 <= 0 && v117 != 0)
          {
            if ((v43 & 0x80) != 0) {
              uint64_t v43 = *(void *)(v42 + 8);
            }
            if (v43)
            {
              int v118 = 1;
            }
            else
            {
              if ((v79 & 0x80) != 0) {
                uint64_t v79 = *(void *)(v78 + 8);
              }
              uint64_t v167 = v41[8];
              if (v41 == &CoreML::Specification::_WeightParams_default_instance_ || v79 == 0 || v167 == 0)
              {
                if ((v94 & 0x80) != 0) {
                  uint64_t v94 = *(void *)(v93 + 8);
                }
                if (v167) {
                  BOOL v170 = v94 == 0;
                }
                else {
                  BOOL v170 = 1;
                }
                if (v170 || v41 == &CoreML::Specification::_WeightParams_default_instance_) {
                  int v118 = 5;
                }
                else {
                  int v118 = 3;
                }
              }
              else
              {
                int v118 = 2;
              }
            }
          }
        }
        else
        {
          int v118 = 4;
        }
        if (v118 == a3) {
          return 1;
        }
        long long v47 = *(uint64_t **)(v40 + 120);
        goto LABEL_495;
      case 130:
        uint64_t v45 = *(void *)(v9 + 128);
        int v46 = *(_DWORD *)(v45 + 28);
        if (v46 != 71)
        {
          if (v46 != 25)
          {
            BOOL result = 0;
            goto LABEL_1027;
          }
          long long v47 = *(uint64_t **)(*(void *)(v45 + 16) + 16);
LABEL_80:
          if (!v47) {
            long long v47 = &CoreML::Specification::_WeightParams_default_instance_;
          }
          uint64_t v48 = v47[5];
          if (*(char *)(v48 + 23) < 0) {
            uint64_t v49 = *(void *)(v48 + 8);
          }
          else {
            uint64_t v49 = *(unsigned __int8 *)(v48 + 23);
          }
          uint64_t v60 = v47[6];
          uint64_t v61 = *(unsigned __int8 *)(v60 + 23);
          if (*(char *)(v60 + 23) < 0) {
            uint64_t v62 = *(void *)(v60 + 8);
          }
          else {
            uint64_t v62 = *(unsigned __int8 *)(v60 + 23);
          }
          uint64_t v63 = v47[7];
          uint64_t v64 = *(unsigned __int8 *)(v63 + 23);
          if (*(char *)(v63 + 23) < 0) {
            uint64_t v65 = *(void *)(v63 + 8);
          }
          else {
            uint64_t v65 = *(unsigned __int8 *)(v63 + 23);
          }
          int v66 = *((_DWORD *)v47 + 4);
          if (v66 <= 0) {
            int v67 = 1;
          }
          else {
            int v67 = 2;
          }
          if (v49) {
            unsigned int v68 = v67;
          }
          else {
            unsigned int v68 = v66 > 0;
          }
          if (v62) {
            ++v68;
          }
          if (v65) {
            unsigned int v69 = v68 + 1;
          }
          else {
            unsigned int v69 = v68;
          }
          if (v69 <= 1)
          {
            if (v69) {
              int v70 = 0;
            }
            else {
              int v70 = 5;
            }
            if (v66 > 0 || v69 == 0) {
              goto LABEL_1026;
            }
            if ((*(unsigned char *)(v48 + 23) & 0x80) != 0)
            {
              if (!*(void *)(v48 + 8)) {
                goto LABEL_345;
              }
            }
            else if (!*(unsigned char *)(v48 + 23))
            {
LABEL_345:
              if ((v61 & 0x80) != 0) {
                uint64_t v61 = *(void *)(v60 + 8);
              }
              uint64_t v154 = v47[8];
              if (v47 != &CoreML::Specification::_WeightParams_default_instance_ && v61 != 0 && v154 != 0) {
                goto LABEL_1013;
              }
              if ((v64 & 0x80) != 0) {
                uint64_t v64 = *(void *)(v63 + 8);
              }
              if (v154) {
                BOOL v157 = v64 == 0;
              }
              else {
                BOOL v157 = 1;
              }
LABEL_1020:
              if (v157 || v47 == &CoreML::Specification::_WeightParams_default_instance_) {
                int v70 = 5;
              }
              else {
                int v70 = 3;
              }
LABEL_1026:
              BOOL result = v70 == a3;
              goto LABEL_1027;
            }
LABEL_1006:
            int v70 = 1;
            goto LABEL_1026;
          }
LABEL_998:
          int v70 = 4;
          goto LABEL_1026;
        }
        uint64_t v55 = *(void *)(v45 + 16);
LABEL_287:
        BOOL v135 = *(uint64_t **)(v55 + 16);
        if (!v135) {
          BOOL v135 = &CoreML::Specification::_WeightParams_default_instance_;
        }
        uint64_t v136 = v135[5];
        if (*(char *)(v136 + 23) < 0) {
          uint64_t v137 = *(void *)(v136 + 8);
        }
        else {
          uint64_t v137 = *(unsigned __int8 *)(v136 + 23);
        }
        uint64_t v138 = v135[6];
        uint64_t v139 = *(unsigned __int8 *)(v138 + 23);
        if (*(char *)(v138 + 23) < 0) {
          uint64_t v140 = *(void *)(v138 + 8);
        }
        else {
          uint64_t v140 = *(unsigned __int8 *)(v138 + 23);
        }
        uint64_t v141 = v135[7];
        uint64_t v142 = *(unsigned __int8 *)(v141 + 23);
        if (*(char *)(v141 + 23) < 0) {
          uint64_t v143 = *(void *)(v141 + 8);
        }
        else {
          uint64_t v143 = *(unsigned __int8 *)(v141 + 23);
        }
        int v144 = *((_DWORD *)v135 + 4);
        if (v144 <= 0) {
          int v145 = 1;
        }
        else {
          int v145 = 2;
        }
        if (v137) {
          unsigned int v146 = v145;
        }
        else {
          unsigned int v146 = v144 > 0;
        }
        if (v140) {
          ++v146;
        }
        if (v143) {
          unsigned int v147 = v146 + 1;
        }
        else {
          unsigned int v147 = v146;
        }
        if (v147 > 1)
        {
          int v148 = 4;
          goto LABEL_427;
        }
        if (v147) {
          int v148 = 0;
        }
        else {
          int v148 = 5;
        }
        if (v144 <= 0 && v147 != 0)
        {
          if ((*(unsigned char *)(v136 + 23) & 0x80) != 0)
          {
            if (!*(void *)(v136 + 8)) {
              goto LABEL_361;
            }
LABEL_320:
            int v148 = 1;
          }
          else
          {
            if (*(unsigned char *)(v136 + 23)) {
              goto LABEL_320;
            }
LABEL_361:
            if ((v139 & 0x80) != 0) {
              uint64_t v139 = *(void *)(v138 + 8);
            }
            uint64_t v158 = v135[8];
            if (v135 == &CoreML::Specification::_WeightParams_default_instance_ || v139 == 0 || v158 == 0)
            {
              if ((v142 & 0x80) != 0) {
                uint64_t v142 = *(void *)(v141 + 8);
              }
              if (v158) {
                BOOL v161 = v142 == 0;
              }
              else {
                BOOL v161 = 1;
              }
              if (v161 || v135 == &CoreML::Specification::_WeightParams_default_instance_) {
                int v148 = 5;
              }
              else {
                int v148 = 3;
              }
            }
            else
            {
              int v148 = 2;
            }
          }
        }
LABEL_427:
        if (v148 == a3) {
          return 1;
        }
        long long v47 = *(uint64_t **)(v55 + 24);
LABEL_495:
        if (!v47) {
          long long v47 = &CoreML::Specification::_WeightParams_default_instance_;
        }
        uint64_t v194 = v47[5];
        if (*(char *)(v194 + 23) < 0) {
          uint64_t v195 = *(void *)(v194 + 8);
        }
        else {
          uint64_t v195 = *(unsigned __int8 *)(v194 + 23);
        }
        uint64_t v196 = v47[6];
        uint64_t v197 = *(unsigned __int8 *)(v196 + 23);
        if (*(char *)(v196 + 23) < 0) {
          uint64_t v198 = *(void *)(v196 + 8);
        }
        else {
          uint64_t v198 = *(unsigned __int8 *)(v196 + 23);
        }
        uint64_t v199 = v47[7];
        uint64_t v200 = *(unsigned __int8 *)(v199 + 23);
        if (*(char *)(v199 + 23) < 0) {
          uint64_t v201 = *(void *)(v199 + 8);
        }
        else {
          uint64_t v201 = *(unsigned __int8 *)(v199 + 23);
        }
        int v202 = *((_DWORD *)v47 + 4);
        if (v202 <= 0) {
          int v203 = 1;
        }
        else {
          int v203 = 2;
        }
        if (v195) {
          unsigned int v204 = v203;
        }
        else {
          unsigned int v204 = v202 > 0;
        }
        if (v198) {
          ++v204;
        }
        if (v201) {
          unsigned int v205 = v204 + 1;
        }
        else {
          unsigned int v205 = v204;
        }
        if (v205 > 1) {
          goto LABEL_998;
        }
        if (v205) {
          int v70 = 0;
        }
        else {
          int v70 = 5;
        }
        if (v202 > 0 || v205 == 0) {
          goto LABEL_1026;
        }
        if ((*(unsigned char *)(v194 + 23) & 0x80) != 0)
        {
          if (*(void *)(v194 + 8)) {
            goto LABEL_1006;
          }
        }
        else if (*(unsigned char *)(v194 + 23))
        {
          goto LABEL_1006;
        }
        if ((v197 & 0x80) != 0) {
          uint64_t v197 = *(void *)(v196 + 8);
        }
        uint64_t v207 = v47[8];
        if (v47 != &CoreML::Specification::_WeightParams_default_instance_ && v197 && v207 != 0)
        {
LABEL_1013:
          int v70 = 2;
          goto LABEL_1026;
        }
        if ((v200 & 0x80) != 0) {
          uint64_t v200 = *(void *)(v199 + 8);
        }
        BOOL v209 = v207 == 0;
LABEL_1017:
        BOOL v157 = v209 || v200 == 0;
        goto LABEL_1020;
      case 140:
        goto LABEL_34;
    }
    goto LABEL_1027;
  }
  if (v10 == 150)
  {
    uint64_t v55 = *(void *)(v9 + 128);
    goto LABEL_287;
  }
  if (v10 != 160)
  {
    if (v10 != 245) {
      goto LABEL_1027;
    }
    uint64_t v18 = *(void *)(v9 + 128);
    uint64_t v19 = *(uint64_t **)(v18 + 64);
    if (!v19) {
      uint64_t v19 = &CoreML::Specification::_WeightParams_default_instance_;
    }
    uint64_t v20 = v19[5];
    uint64_t v21 = *(unsigned __int8 *)(v20 + 23);
    if (*(char *)(v20 + 23) < 0) {
      uint64_t v22 = *(void *)(v20 + 8);
    }
    else {
      uint64_t v22 = *(unsigned __int8 *)(v20 + 23);
    }
    uint64_t v75 = v19[6];
    uint64_t v76 = *(unsigned __int8 *)(v75 + 23);
    if (*(char *)(v75 + 23) < 0) {
      uint64_t v77 = *(void *)(v75 + 8);
    }
    else {
      uint64_t v77 = *(unsigned __int8 *)(v75 + 23);
    }
    uint64_t v90 = v19[7];
    uint64_t v91 = *(unsigned __int8 *)(v90 + 23);
    if (*(char *)(v90 + 23) < 0) {
      uint64_t v92 = *(void *)(v90 + 8);
    }
    else {
      uint64_t v92 = *(unsigned __int8 *)(v90 + 23);
    }
    int v108 = *((_DWORD *)v19 + 4);
    if (v108 <= 0) {
      int v109 = 1;
    }
    else {
      int v109 = 2;
    }
    if (v22) {
      unsigned int v110 = v109;
    }
    else {
      unsigned int v110 = v108 > 0;
    }
    if (v77) {
      ++v110;
    }
    if (v92) {
      unsigned int v111 = v110 + 1;
    }
    else {
      unsigned int v111 = v110;
    }
    if (v111 <= 1)
    {
      if (v111) {
        int v112 = 0;
      }
      else {
        int v112 = 5;
      }
      if (v108 <= 0 && v111 != 0)
      {
        if ((v21 & 0x80) != 0) {
          uint64_t v21 = *(void *)(v20 + 8);
        }
        if (v21)
        {
          int v112 = 1;
        }
        else
        {
          if ((v76 & 0x80) != 0) {
            uint64_t v76 = *(void *)(v75 + 8);
          }
          uint64_t v165 = v19[8];
          if (v19 == &CoreML::Specification::_WeightParams_default_instance_
            || (v76 ? (BOOL v166 = v165 == 0) : (BOOL v166 = 1), v166))
          {
            if ((v91 & 0x80) != 0) {
              uint64_t v91 = *(void *)(v90 + 8);
            }
            if (v165) {
              BOOL v192 = v91 == 0;
            }
            else {
              BOOL v192 = 1;
            }
            if (v192 || v19 == &CoreML::Specification::_WeightParams_default_instance_) {
              int v112 = 5;
            }
            else {
              int v112 = 3;
            }
          }
          else
          {
            int v112 = 2;
          }
        }
      }
    }
    else
    {
      int v112 = 4;
    }
    if (v112 == a3) {
      return 1;
    }
    long long v47 = *(uint64_t **)(v18 + 72);
    goto LABEL_975;
  }
  long long v50 = *(void **)(v9 + 128);
  long long v56 = (uint64_t *)v50[2];
  if (!v56) {
    long long v56 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  uint64_t v57 = v56[5];
  uint64_t v58 = *(unsigned __int8 *)(v57 + 23);
  if (*(char *)(v57 + 23) < 0) {
    uint64_t v59 = *(void *)(v57 + 8);
  }
  else {
    uint64_t v59 = *(unsigned __int8 *)(v57 + 23);
  }
  uint64_t v84 = v56[6];
  uint64_t v85 = *(unsigned __int8 *)(v84 + 23);
  if (*(char *)(v84 + 23) < 0) {
    uint64_t v86 = *(void *)(v84 + 8);
  }
  else {
    uint64_t v86 = *(unsigned __int8 *)(v84 + 23);
  }
  uint64_t v99 = v56[7];
  uint64_t v100 = *(unsigned __int8 *)(v99 + 23);
  if (*(char *)(v99 + 23) < 0) {
    uint64_t v101 = *(void *)(v99 + 8);
  }
  else {
    uint64_t v101 = *(unsigned __int8 *)(v99 + 23);
  }
  int v129 = *((_DWORD *)v56 + 4);
  if (v129 <= 0) {
    int v130 = 1;
  }
  else {
    int v130 = 2;
  }
  if (v59) {
    unsigned int v131 = v130;
  }
  else {
    unsigned int v131 = v129 > 0;
  }
  if (v86) {
    ++v131;
  }
  if (v101) {
    unsigned int v132 = v131 + 1;
  }
  else {
    unsigned int v132 = v131;
  }
  if (v132 <= 1)
  {
    if (v132) {
      int v133 = 0;
    }
    else {
      int v133 = 5;
    }
    if (v129 <= 0 && v132 != 0)
    {
      if ((v58 & 0x80) != 0) {
        uint64_t v58 = *(void *)(v57 + 8);
      }
      if (v58)
      {
        int v133 = 1;
      }
      else
      {
        if ((v85 & 0x80) != 0) {
          uint64_t v85 = *(void *)(v84 + 8);
        }
        uint64_t v172 = v56[8];
        if (v56 == &CoreML::Specification::_WeightParams_default_instance_
          || (v85 ? (BOOL v173 = v172 == 0) : (BOOL v173 = 1), v173))
        {
          if ((v100 & 0x80) != 0) {
            uint64_t v100 = *(void *)(v99 + 8);
          }
          if (v172) {
            BOOL v210 = v100 == 0;
          }
          else {
            BOOL v210 = 1;
          }
          if (v210 || v56 == &CoreML::Specification::_WeightParams_default_instance_) {
            int v133 = 5;
          }
          else {
            int v133 = 3;
          }
        }
        else
        {
          int v133 = 2;
        }
      }
    }
  }
  else
  {
    int v133 = 4;
  }
  if (v133 != a3)
  {
    uint64_t v51 = (uint64_t *)v50[3];
    if (!v51) {
      uint64_t v51 = &CoreML::Specification::_WeightParams_default_instance_;
    }
    uint64_t v212 = v51[5];
    uint64_t v213 = *(unsigned __int8 *)(v212 + 23);
    if (*(char *)(v212 + 23) < 0) {
      uint64_t v214 = *(void *)(v212 + 8);
    }
    else {
      uint64_t v214 = *(unsigned __int8 *)(v212 + 23);
    }
    uint64_t v215 = v51[6];
    uint64_t v216 = *(unsigned __int8 *)(v215 + 23);
    if (*(char *)(v215 + 23) < 0) {
      uint64_t v217 = *(void *)(v215 + 8);
    }
    else {
      uint64_t v217 = *(unsigned __int8 *)(v215 + 23);
    }
    uint64_t v218 = v51[7];
    uint64_t v97 = *(unsigned __int8 *)(v218 + 23);
    if (*(char *)(v218 + 23) < 0) {
      uint64_t v219 = *(void *)(v218 + 8);
    }
    else {
      uint64_t v219 = *(unsigned __int8 *)(v218 + 23);
    }
    int v220 = *((_DWORD *)v51 + 4);
    if (v220 <= 0) {
      int v221 = 1;
    }
    else {
      int v221 = 2;
    }
    if (v214) {
      unsigned int v222 = v221;
    }
    else {
      unsigned int v222 = v220 > 0;
    }
    if (v217) {
      ++v222;
    }
    if (v219) {
      unsigned int v223 = v222 + 1;
    }
    else {
      unsigned int v223 = v222;
    }
    if (v223 > 1)
    {
LABEL_575:
      int v124 = 4;
      goto LABEL_654;
    }
    if (v223) {
      int v124 = 0;
    }
    else {
      int v124 = 5;
    }
    if (v220 <= 0 && v223)
    {
      if ((v213 & 0x80) != 0) {
        uint64_t v213 = *(void *)(v212 + 8);
      }
      if (v213)
      {
LABEL_584:
        int v124 = 1;
        goto LABEL_654;
      }
      if ((v216 & 0x80) != 0) {
        uint64_t v216 = *(void *)(v215 + 8);
      }
      uint64_t v224 = v51[8];
      if (v51 != &CoreML::Specification::_WeightParams_default_instance_ && v216 && v224)
      {
LABEL_590:
        int v124 = 2;
        goto LABEL_654;
      }
      if ((v97 & 0x80) != 0) {
        uint64_t v97 = *(void *)(v218 + 8);
      }
      BOOL v128 = v224 == 0;
LABEL_645:
      if (v128 || v97 == 0 || v51 == &CoreML::Specification::_WeightParams_default_instance_) {
        int v124 = 5;
      }
      else {
        int v124 = 3;
      }
    }
LABEL_654:
    if (v124 == a3) {
      return 1;
    }
    long long v245 = (uint64_t *)v50[4];
    if (!v245) {
      long long v245 = &CoreML::Specification::_WeightParams_default_instance_;
    }
    uint64_t v246 = v245[5];
    if (*(char *)(v246 + 23) < 0) {
      uint64_t v247 = *(void *)(v246 + 8);
    }
    else {
      uint64_t v247 = *(unsigned __int8 *)(v246 + 23);
    }
    uint64_t v248 = v245[6];
    uint64_t v249 = *(unsigned __int8 *)(v248 + 23);
    if (*(char *)(v248 + 23) < 0) {
      uint64_t v250 = *(void *)(v248 + 8);
    }
    else {
      uint64_t v250 = *(unsigned __int8 *)(v248 + 23);
    }
    uint64_t v251 = v245[7];
    uint64_t v252 = *(unsigned __int8 *)(v251 + 23);
    if (*(char *)(v251 + 23) < 0) {
      uint64_t v253 = *(void *)(v251 + 8);
    }
    else {
      uint64_t v253 = *(unsigned __int8 *)(v251 + 23);
    }
    int v254 = *((_DWORD *)v245 + 4);
    if (v254 <= 0) {
      int v255 = 1;
    }
    else {
      int v255 = 2;
    }
    if (v247) {
      unsigned int v256 = v255;
    }
    else {
      unsigned int v256 = v254 > 0;
    }
    if (v250) {
      ++v256;
    }
    if (v253) {
      unsigned int v257 = v256 + 1;
    }
    else {
      unsigned int v257 = v256;
    }
    if (v257 > 1)
    {
      int v258 = 4;
      goto LABEL_705;
    }
    if (v257) {
      int v258 = 0;
    }
    else {
      int v258 = 5;
    }
    if (v254 <= 0 && v257)
    {
      if ((*(unsigned char *)(v246 + 23) & 0x80) != 0)
      {
        if (!*(void *)(v246 + 8)) {
          goto LABEL_688;
        }
LABEL_686:
        int v258 = 1;
      }
      else
      {
        if (*(unsigned char *)(v246 + 23)) {
          goto LABEL_686;
        }
LABEL_688:
        if ((v249 & 0x80) != 0) {
          uint64_t v249 = *(void *)(v248 + 8);
        }
        uint64_t v259 = v245[8];
        if (v245 != &CoreML::Specification::_WeightParams_default_instance_ && v249 && v259)
        {
          int v258 = 2;
        }
        else
        {
          if ((v252 & 0x80) != 0) {
            uint64_t v252 = *(void *)(v251 + 8);
          }
          if (v259) {
            BOOL v260 = v252 == 0;
          }
          else {
            BOOL v260 = 1;
          }
          if (v260 || v245 == &CoreML::Specification::_WeightParams_default_instance_) {
            int v258 = 5;
          }
          else {
            int v258 = 3;
          }
        }
      }
    }
LABEL_705:
    if (v258 == a3) {
      return 1;
    }
    long long v47 = (uint64_t *)v50[5];
LABEL_975:
    if (!v47) {
      long long v47 = &CoreML::Specification::_WeightParams_default_instance_;
    }
    uint64_t v354 = v47[5];
    if (*(char *)(v354 + 23) < 0) {
      uint64_t v355 = *(void *)(v354 + 8);
    }
    else {
      uint64_t v355 = *(unsigned __int8 *)(v354 + 23);
    }
    uint64_t v356 = v47[6];
    uint64_t v357 = *(unsigned __int8 *)(v356 + 23);
    if (*(char *)(v356 + 23) < 0) {
      uint64_t v358 = *(void *)(v356 + 8);
    }
    else {
      uint64_t v358 = *(unsigned __int8 *)(v356 + 23);
    }
    uint64_t v359 = v47[7];
    uint64_t v200 = *(unsigned __int8 *)(v359 + 23);
    if (*(char *)(v359 + 23) < 0) {
      uint64_t v360 = *(void *)(v359 + 8);
    }
    else {
      uint64_t v360 = *(unsigned __int8 *)(v359 + 23);
    }
    int v361 = *((_DWORD *)v47 + 4);
    if (v361 <= 0) {
      int v362 = 1;
    }
    else {
      int v362 = 2;
    }
    if (v355) {
      unsigned int v363 = v362;
    }
    else {
      unsigned int v363 = v361 > 0;
    }
    if (v358) {
      ++v363;
    }
    if (v360) {
      unsigned int v364 = v363 + 1;
    }
    else {
      unsigned int v364 = v363;
    }
    if (v364 > 1) {
      goto LABEL_998;
    }
    if (v364) {
      int v70 = 0;
    }
    else {
      int v70 = 5;
    }
    if (v361 > 0 || !v364) {
      goto LABEL_1026;
    }
    if ((*(unsigned char *)(v354 + 23) & 0x80) != 0)
    {
      if (*(void *)(v354 + 8)) {
        goto LABEL_1006;
      }
    }
    else if (*(unsigned char *)(v354 + 23))
    {
      goto LABEL_1006;
    }
    if ((v357 & 0x80) != 0) {
      uint64_t v357 = *(void *)(v356 + 8);
    }
    uint64_t v365 = v47[8];
    if (v47 != &CoreML::Specification::_WeightParams_default_instance_ && v357 && v365) {
      goto LABEL_1013;
    }
    if ((v200 & 0x80) != 0) {
      uint64_t v200 = *(void *)(v359 + 8);
    }
    BOOL v209 = v365 == 0;
    goto LABEL_1017;
  }
  return 1;
}

BOOL isWeightParamOfType(uint64_t *a1, int a2)
{
  uint64_t v2 = a1[5];
  if (*(char *)(v2 + 23) < 0) {
    uint64_t v3 = *(void *)(v2 + 8);
  }
  else {
    uint64_t v3 = *(unsigned __int8 *)(v2 + 23);
  }
  uint64_t v4 = a1[6];
  uint64_t v5 = *(unsigned __int8 *)(v4 + 23);
  if (*(char *)(v4 + 23) < 0) {
    uint64_t v6 = *(void *)(v4 + 8);
  }
  else {
    uint64_t v6 = *(unsigned __int8 *)(v4 + 23);
  }
  int v7 = *((_DWORD *)a1 + 4);
  uint64_t v8 = a1[7];
  uint64_t v9 = *(unsigned __int8 *)(v8 + 23);
  if (*(char *)(v8 + 23) < 0) {
    uint64_t v10 = *(void *)(v8 + 8);
  }
  else {
    uint64_t v10 = *(unsigned __int8 *)(v8 + 23);
  }
  if (v7 <= 0) {
    int v11 = 1;
  }
  else {
    int v11 = 2;
  }
  if (v3) {
    unsigned int v12 = v11;
  }
  else {
    unsigned int v12 = v7 > 0;
  }
  if (v6) {
    ++v12;
  }
  if (v10) {
    unsigned int v13 = v12 + 1;
  }
  else {
    unsigned int v13 = v12;
  }
  if (v13 > 1)
  {
    int v14 = 4;
    return v14 == a2;
  }
  if (v13) {
    int v14 = 0;
  }
  else {
    int v14 = 5;
  }
  if (v7 <= 0 && v13)
  {
    if ((*(unsigned char *)(v2 + 23) & 0x80) != 0)
    {
      if (*(void *)(v2 + 8)) {
        goto LABEL_30;
      }
    }
    else if (*(unsigned char *)(v2 + 23))
    {
LABEL_30:
      int v14 = 1;
      return v14 == a2;
    }
    if ((v5 & 0x80) != 0) {
      uint64_t v5 = *(void *)(v4 + 8);
    }
    uint64_t v15 = a1[8];
    if (a1 != &CoreML::Specification::_WeightParams_default_instance_ && v5 && v15)
    {
      int v14 = 2;
    }
    else
    {
      if ((v9 & 0x80) != 0) {
        uint64_t v9 = *(void *)(v8 + 8);
      }
      if (v15) {
        BOOL v16 = v9 == 0;
      }
      else {
        BOOL v16 = 1;
      }
      if (v16 || a1 == &CoreML::Specification::_WeightParams_default_instance_) {
        int v14 = 5;
      }
      else {
        int v14 = 3;
      }
    }
  }
  return v14 == a2;
}

BOOL hasLSTMWeightParamOfType(void *a1, int a2)
{
  uint64_t v4 = (uint64_t *)a1[2];
  if (!v4) {
    uint64_t v4 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  uint64_t v5 = v4[5];
  if (*(char *)(v5 + 23) < 0) {
    uint64_t v6 = *(void *)(v5 + 8);
  }
  else {
    uint64_t v6 = *(unsigned __int8 *)(v5 + 23);
  }
  uint64_t v7 = v4[6];
  uint64_t v8 = *(unsigned __int8 *)(v7 + 23);
  if (*(char *)(v7 + 23) < 0) {
    uint64_t v9 = *(void *)(v7 + 8);
  }
  else {
    uint64_t v9 = *(unsigned __int8 *)(v7 + 23);
  }
  int v10 = *((_DWORD *)v4 + 4);
  uint64_t v11 = v4[7];
  uint64_t v12 = *(unsigned __int8 *)(v11 + 23);
  if (*(char *)(v11 + 23) < 0) {
    uint64_t v13 = *(void *)(v11 + 8);
  }
  else {
    uint64_t v13 = *(unsigned __int8 *)(v11 + 23);
  }
  if (v10 <= 0) {
    int v14 = 1;
  }
  else {
    int v14 = 2;
  }
  if (v6) {
    unsigned int v15 = v14;
  }
  else {
    unsigned int v15 = v10 > 0;
  }
  if (v9) {
    ++v15;
  }
  if (v13) {
    unsigned int v16 = v15 + 1;
  }
  else {
    unsigned int v16 = v15;
  }
  if (v16 > 1)
  {
    int v17 = 4;
    goto LABEL_55;
  }
  if (v16) {
    int v17 = 0;
  }
  else {
    int v17 = 5;
  }
  if (v10 > 0 || v16 == 0) {
    goto LABEL_55;
  }
  if ((*(unsigned char *)(v5 + 23) & 0x80) != 0)
  {
    if (*(void *)(v5 + 8)) {
      goto LABEL_34;
    }
  }
  else if (*(unsigned char *)(v5 + 23))
  {
LABEL_34:
    int v17 = 1;
    goto LABEL_55;
  }
  if ((v8 & 0x80) != 0) {
    uint64_t v8 = *(void *)(v7 + 8);
  }
  uint64_t v19 = v4[8];
  if (v4 == &CoreML::Specification::_WeightParams_default_instance_ || (v8 ? (BOOL v20 = v19 == 0) : (BOOL v20 = 1), v20))
  {
    if ((v12 & 0x80) != 0) {
      uint64_t v12 = *(void *)(v11 + 8);
    }
    if (v19) {
      BOOL v21 = v12 == 0;
    }
    else {
      BOOL v21 = 1;
    }
    if (v21 || v4 == &CoreML::Specification::_WeightParams_default_instance_) {
      int v17 = 5;
    }
    else {
      int v17 = 3;
    }
  }
  else
  {
    int v17 = 2;
  }
LABEL_55:
  if (v17 == a2) {
    return 1;
  }
  uint64_t v23 = (uint64_t *)a1[3];
  if (!v23) {
    uint64_t v23 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  uint64_t v24 = v23[5];
  uint64_t v25 = *(unsigned __int8 *)(v24 + 23);
  if (*(char *)(v24 + 23) < 0) {
    uint64_t v26 = *(void *)(v24 + 8);
  }
  else {
    uint64_t v26 = *(unsigned __int8 *)(v24 + 23);
  }
  uint64_t v27 = v23[6];
  uint64_t v28 = *(unsigned __int8 *)(v27 + 23);
  if (*(char *)(v27 + 23) < 0) {
    uint64_t v29 = *(void *)(v27 + 8);
  }
  else {
    uint64_t v29 = *(unsigned __int8 *)(v27 + 23);
  }
  int v30 = *((_DWORD *)v23 + 4);
  uint64_t v31 = v23[7];
  uint64_t v32 = *(unsigned __int8 *)(v31 + 23);
  if (*(char *)(v31 + 23) < 0) {
    uint64_t v33 = *(void *)(v31 + 8);
  }
  else {
    uint64_t v33 = *(unsigned __int8 *)(v31 + 23);
  }
  if (v30 <= 0) {
    int v34 = 1;
  }
  else {
    int v34 = 2;
  }
  if (v26) {
    int v35 = v34;
  }
  else {
    int v35 = v30 > 0;
  }
  if (v29) {
    ++v35;
  }
  unsigned int v36 = v33 ? v35 + 1 : v35;
  if (v36 <= 1)
  {
    if (v36) {
      int v37 = 0;
    }
    else {
      int v37 = 5;
    }
    if (v30 <= 0 && v36)
    {
      if ((v25 & 0x80) != 0) {
        uint64_t v25 = *(void *)(v24 + 8);
      }
      if (v25)
      {
        int v37 = 1;
      }
      else
      {
        if ((v28 & 0x80) != 0) {
          uint64_t v28 = *(void *)(v27 + 8);
        }
        uint64_t v38 = v23[8];
        if (v23 != &CoreML::Specification::_WeightParams_default_instance_ && v28 && v38)
        {
          int v37 = 2;
        }
        else
        {
          if ((v32 & 0x80) != 0) {
            uint64_t v32 = *(void *)(v31 + 8);
          }
          if (v38) {
            BOOL v39 = v32 == 0;
          }
          else {
            BOOL v39 = 1;
          }
          if (v39 || v23 == &CoreML::Specification::_WeightParams_default_instance_) {
            int v37 = 5;
          }
          else {
            int v37 = 3;
          }
        }
      }
    }
  }
  else
  {
    int v37 = 4;
  }
  if (v37 == a2) {
    return 1;
  }
  int v41 = (uint64_t *)a1[4];
  if (!v41) {
    int v41 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  uint64_t v42 = v41[5];
  uint64_t v43 = *(unsigned __int8 *)(v42 + 23);
  if (*(char *)(v42 + 23) < 0) {
    uint64_t v44 = *(void *)(v42 + 8);
  }
  else {
    uint64_t v44 = *(unsigned __int8 *)(v42 + 23);
  }
  uint64_t v45 = v41[6];
  uint64_t v46 = *(unsigned __int8 *)(v45 + 23);
  if (*(char *)(v45 + 23) < 0) {
    uint64_t v47 = *(void *)(v45 + 8);
  }
  else {
    uint64_t v47 = *(unsigned __int8 *)(v45 + 23);
  }
  int v48 = *((_DWORD *)v41 + 4);
  uint64_t v49 = v41[7];
  uint64_t v50 = *(unsigned __int8 *)(v49 + 23);
  if (*(char *)(v49 + 23) < 0) {
    uint64_t v51 = *(void *)(v49 + 8);
  }
  else {
    uint64_t v51 = *(unsigned __int8 *)(v49 + 23);
  }
  if (v48 <= 0) {
    int v52 = 1;
  }
  else {
    int v52 = 2;
  }
  if (v44) {
    int v53 = v52;
  }
  else {
    int v53 = v48 > 0;
  }
  if (v47) {
    ++v53;
  }
  unsigned int v54 = v51 ? v53 + 1 : v53;
  if (v54 <= 1)
  {
    if (v54) {
      int v55 = 0;
    }
    else {
      int v55 = 5;
    }
    if (v48 <= 0 && v54)
    {
      if ((v43 & 0x80) != 0) {
        uint64_t v43 = *(void *)(v42 + 8);
      }
      if (v43)
      {
        int v55 = 1;
      }
      else
      {
        if ((v46 & 0x80) != 0) {
          uint64_t v46 = *(void *)(v45 + 8);
        }
        uint64_t v56 = v41[8];
        if (v41 != &CoreML::Specification::_WeightParams_default_instance_ && v46 && v56)
        {
          int v55 = 2;
        }
        else
        {
          if ((v50 & 0x80) != 0) {
            uint64_t v50 = *(void *)(v49 + 8);
          }
          if (v56) {
            BOOL v57 = v50 == 0;
          }
          else {
            BOOL v57 = 1;
          }
          if (v57 || v41 == &CoreML::Specification::_WeightParams_default_instance_) {
            int v55 = 5;
          }
          else {
            int v55 = 3;
          }
        }
      }
    }
  }
  else
  {
    int v55 = 4;
  }
  if (v55 == a2) {
    return 1;
  }
  uint64_t v59 = (uint64_t *)a1[5];
  if (!v59) {
    uint64_t v59 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  uint64_t v60 = v59[5];
  uint64_t v61 = *(unsigned __int8 *)(v60 + 23);
  if (*(char *)(v60 + 23) < 0) {
    uint64_t v62 = *(void *)(v60 + 8);
  }
  else {
    uint64_t v62 = *(unsigned __int8 *)(v60 + 23);
  }
  uint64_t v63 = v59[6];
  uint64_t v64 = *(unsigned __int8 *)(v63 + 23);
  if (*(char *)(v63 + 23) < 0) {
    uint64_t v65 = *(void *)(v63 + 8);
  }
  else {
    uint64_t v65 = *(unsigned __int8 *)(v63 + 23);
  }
  int v66 = *((_DWORD *)v59 + 4);
  uint64_t v67 = v59[7];
  uint64_t v68 = *(unsigned __int8 *)(v67 + 23);
  if (*(char *)(v67 + 23) < 0) {
    uint64_t v69 = *(void *)(v67 + 8);
  }
  else {
    uint64_t v69 = *(unsigned __int8 *)(v67 + 23);
  }
  if (v66 <= 0) {
    int v70 = 1;
  }
  else {
    int v70 = 2;
  }
  if (v62) {
    int v71 = v70;
  }
  else {
    int v71 = v66 > 0;
  }
  if (v65) {
    ++v71;
  }
  unsigned int v72 = v69 ? v71 + 1 : v71;
  if (v72 <= 1)
  {
    if (v72) {
      int v73 = 0;
    }
    else {
      int v73 = 5;
    }
    if (v66 <= 0 && v72)
    {
      if ((v61 & 0x80) != 0) {
        uint64_t v61 = *(void *)(v60 + 8);
      }
      if (v61)
      {
        int v73 = 1;
      }
      else
      {
        if ((v64 & 0x80) != 0) {
          uint64_t v64 = *(void *)(v63 + 8);
        }
        uint64_t v74 = v59[8];
        if (v59 != &CoreML::Specification::_WeightParams_default_instance_ && v64 && v74)
        {
          int v73 = 2;
        }
        else
        {
          if ((v68 & 0x80) != 0) {
            uint64_t v68 = *(void *)(v67 + 8);
          }
          if (v74) {
            BOOL v75 = v68 == 0;
          }
          else {
            BOOL v75 = 1;
          }
          if (v75 || v59 == &CoreML::Specification::_WeightParams_default_instance_) {
            int v73 = 5;
          }
          else {
            int v73 = 3;
          }
        }
      }
    }
  }
  else
  {
    int v73 = 4;
  }
  if (v73 == a2) {
    return 1;
  }
  uint64_t v77 = (uint64_t *)a1[6];
  if (!v77) {
    uint64_t v77 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  uint64_t v78 = v77[5];
  uint64_t v79 = *(unsigned __int8 *)(v78 + 23);
  if (*(char *)(v78 + 23) < 0) {
    uint64_t v80 = *(void *)(v78 + 8);
  }
  else {
    uint64_t v80 = *(unsigned __int8 *)(v78 + 23);
  }
  uint64_t v81 = v77[6];
  uint64_t v82 = *(unsigned __int8 *)(v81 + 23);
  if (*(char *)(v81 + 23) < 0) {
    uint64_t v83 = *(void *)(v81 + 8);
  }
  else {
    uint64_t v83 = *(unsigned __int8 *)(v81 + 23);
  }
  int v84 = *((_DWORD *)v77 + 4);
  uint64_t v85 = v77[7];
  uint64_t v86 = *(unsigned __int8 *)(v85 + 23);
  if (*(char *)(v85 + 23) < 0) {
    uint64_t v87 = *(void *)(v85 + 8);
  }
  else {
    uint64_t v87 = *(unsigned __int8 *)(v85 + 23);
  }
  if (v84 <= 0) {
    int v88 = 1;
  }
  else {
    int v88 = 2;
  }
  if (v80) {
    int v89 = v88;
  }
  else {
    int v89 = v84 > 0;
  }
  if (v83) {
    ++v89;
  }
  unsigned int v90 = v87 ? v89 + 1 : v89;
  if (v90 <= 1)
  {
    if (v90) {
      int v91 = 0;
    }
    else {
      int v91 = 5;
    }
    if (v84 <= 0 && v90)
    {
      if ((v79 & 0x80) != 0) {
        uint64_t v79 = *(void *)(v78 + 8);
      }
      if (v79)
      {
        int v91 = 1;
      }
      else
      {
        if ((v82 & 0x80) != 0) {
          uint64_t v82 = *(void *)(v81 + 8);
        }
        uint64_t v92 = v77[8];
        if (v77 != &CoreML::Specification::_WeightParams_default_instance_ && v82 && v92)
        {
          int v91 = 2;
        }
        else
        {
          if ((v86 & 0x80) != 0) {
            uint64_t v86 = *(void *)(v85 + 8);
          }
          if (v92) {
            BOOL v93 = v86 == 0;
          }
          else {
            BOOL v93 = 1;
          }
          if (v93 || v77 == &CoreML::Specification::_WeightParams_default_instance_) {
            int v91 = 5;
          }
          else {
            int v91 = 3;
          }
        }
      }
    }
  }
  else
  {
    int v91 = 4;
  }
  if (v91 == a2) {
    return 1;
  }
  uint64_t v95 = (uint64_t *)a1[7];
  if (!v95) {
    uint64_t v95 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  uint64_t v96 = v95[5];
  uint64_t v97 = *(unsigned __int8 *)(v96 + 23);
  if (*(char *)(v96 + 23) < 0) {
    uint64_t v98 = *(void *)(v96 + 8);
  }
  else {
    uint64_t v98 = *(unsigned __int8 *)(v96 + 23);
  }
  uint64_t v99 = v95[6];
  uint64_t v100 = *(unsigned __int8 *)(v99 + 23);
  if (*(char *)(v99 + 23) < 0) {
    uint64_t v101 = *(void *)(v99 + 8);
  }
  else {
    uint64_t v101 = *(unsigned __int8 *)(v99 + 23);
  }
  int v102 = *((_DWORD *)v95 + 4);
  uint64_t v103 = v95[7];
  uint64_t v104 = *(unsigned __int8 *)(v103 + 23);
  if (*(char *)(v103 + 23) < 0) {
    uint64_t v105 = *(void *)(v103 + 8);
  }
  else {
    uint64_t v105 = *(unsigned __int8 *)(v103 + 23);
  }
  if (v102 <= 0) {
    int v106 = 1;
  }
  else {
    int v106 = 2;
  }
  if (v98) {
    int v107 = v106;
  }
  else {
    int v107 = v102 > 0;
  }
  if (v101) {
    ++v107;
  }
  unsigned int v108 = v105 ? v107 + 1 : v107;
  if (v108 <= 1)
  {
    if (v108) {
      int v109 = 0;
    }
    else {
      int v109 = 5;
    }
    if (v102 <= 0 && v108)
    {
      if ((v97 & 0x80) != 0) {
        uint64_t v97 = *(void *)(v96 + 8);
      }
      if (v97)
      {
        int v109 = 1;
      }
      else
      {
        if ((v100 & 0x80) != 0) {
          uint64_t v100 = *(void *)(v99 + 8);
        }
        uint64_t v110 = v95[8];
        if (v95 != &CoreML::Specification::_WeightParams_default_instance_ && v100 && v110)
        {
          int v109 = 2;
        }
        else
        {
          if ((v104 & 0x80) != 0) {
            uint64_t v104 = *(void *)(v103 + 8);
          }
          if (v110) {
            BOOL v111 = v104 == 0;
          }
          else {
            BOOL v111 = 1;
          }
          if (v111 || v95 == &CoreML::Specification::_WeightParams_default_instance_) {
            int v109 = 5;
          }
          else {
            int v109 = 3;
          }
        }
      }
    }
  }
  else
  {
    int v109 = 4;
  }
  if (v109 == a2) {
    return 1;
  }
  long long v113 = a1[8] ? (uint64_t *)a1[8] : &CoreML::Specification::_WeightParams_default_instance_;
  if (isWeightParamOfType(v113, a2)) {
    return 1;
  }
  int v114 = a1[9] ? (uint64_t *)a1[9] : &CoreML::Specification::_WeightParams_default_instance_;
  if (isWeightParamOfType(v114, a2)) {
    return 1;
  }
  int v115 = a1[10] ? (uint64_t *)a1[10] : &CoreML::Specification::_WeightParams_default_instance_;
  if (isWeightParamOfType(v115, a2)) {
    return 1;
  }
  unsigned int v116 = a1[11] ? (uint64_t *)a1[11] : &CoreML::Specification::_WeightParams_default_instance_;
  if (isWeightParamOfType(v116, a2)) {
    return 1;
  }
  unsigned int v117 = a1[12] ? (uint64_t *)a1[12] : &CoreML::Specification::_WeightParams_default_instance_;
  if (isWeightParamOfType(v117, a2)) {
    return 1;
  }
  int v118 = a1[13] ? (uint64_t *)a1[13] : &CoreML::Specification::_WeightParams_default_instance_;
  if (isWeightParamOfType(v118, a2)) {
    return 1;
  }
  std::string::size_type v119 = a1[14] ? (uint64_t *)a1[14] : &CoreML::Specification::_WeightParams_default_instance_;
  if (isWeightParamOfType(v119, a2)) {
    return 1;
  }
  int v120 = a1[15] ? (uint64_t *)a1[15] : &CoreML::Specification::_WeightParams_default_instance_;
  if (isWeightParamOfType(v120, a2)) {
    return 1;
  }
  if (a1[16]) {
    unsigned int v122 = (uint64_t *)a1[16];
  }
  else {
    unsigned int v122 = &CoreML::Specification::_WeightParams_default_instance_;
  }

  return isWeightParamOfType(v122, a2);
}

BOOL CoreML::hasIOS12NewNeuralNetworkLayers(CoreML *this, const CoreML::Specification::Model *a2)
{
  if (a2 != 303 && a2 != 403 && a2 != 500) {
    return 0;
  }
  uint64_t v2 = *((unsigned int *)this + 6);
  if ((int)v2 < 1) {
    return 0;
  }
  uint64_t v3 = v2 - 1;
  uint64_t v4 = (uint64_t *)(*((void *)this + 4) + 8);
  do
  {
    uint64_t v5 = *v4++;
    unsigned int v6 = *(_DWORD *)(v5 + 140) - 211;
    BOOL result = v6 < 2;
  }
  while (v6 >= 2 && v3-- != 0);
  return result;
}

uint64_t CoreML::isIOS12NeuralNetworkLayer(uint64_t a1)
{
  uint64_t result = 0;
  int v3 = *(_DWORD *)(a1 + 140);
  if (v3 > 219)
  {
    if (v3 <= 289)
    {
      char v6 = v3 + 36;
      if ((v3 - 220) > 0x3C) {
        return result;
      }
      if (((1 << v6) & 0x1004030042100000) != 0) {
        goto LABEL_37;
      }
      if (((1 << v6) & 0xC01) == 0) {
        return result;
      }
    }
    else
    {
      uint64_t v4 = (v3 - 290);
      if (v4 > 0x3C) {
        goto LABEL_7;
      }
      if (((1 << (v3 - 34)) & 0x84000000100C01) != 0)
      {
LABEL_37:
        if (v3 == 345)
        {
          uint64_t v11 = *(uint64_t **)(a1 + 128);
        }
        else
        {
          CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)result);
          uint64_t v11 = &CoreML::Specification::_ReorganizeDataLayerParams_default_instance_;
        }
        return *((_DWORD *)v11 + 6) != 2;
      }
      if (((1 << (v3 - 34)) & 0x10040000000) == 0)
      {
        if (v4 != 60)
        {
LABEL_7:
          if ((v3 - 400) > 0x1E || ((1 << (v3 + 112)) & 0x40100401) == 0)
          {
            if (v3 != 500) {
              return result;
            }
            return 1;
          }
          goto LABEL_37;
        }
        return 1;
      }
    }
    goto LABEL_30;
  }
  if (v3 <= 139)
  {
    if (v3 != 100)
    {
      if (v3 != 120 && v3 != 130) {
        return result;
      }
LABEL_30:
      uint64_t result = (uint64_t)CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(0);
      uint64_t v9 = &CoreML::Specification::_UpsampleLayerParams_default_instance_;
      goto LABEL_31;
    }
    return *(_DWORD *)(a1 + 24) == 1;
  }
  char v8 = v3 + 116;
  if ((v3 - 140) <= 0x3C)
  {
    if (((1 << v8) & 0x4000042000400) != 0) {
      goto LABEL_37;
    }
    if (((1 << v8) & 0x1000010800100000) != 0) {
      goto LABEL_30;
    }
    if (v3 == 140) {
      return *(unsigned char *)(*(void *)(a1 + 128) + 49) == 0;
    }
  }
  if ((v3 - 211) < 2) {
    return 1;
  }
  if (v3 == 210)
  {
    uint64_t v9 = *(uint64_t **)(a1 + 128);
LABEL_31:
    if (*((_DWORD *)v9 + 16)) {
      return 0;
    }
    if (*(_DWORD *)(a1 + 140) == 210)
    {
      int v10 = *(uint64_t **)(a1 + 128);
    }
    else
    {
      uint64_t result = (uint64_t)CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)result);
      int v10 = &CoreML::Specification::_UpsampleLayerParams_default_instance_;
    }
    if (*((int *)v10 + 10) > 0) {
      return 0;
    }
    int v3 = *(_DWORD *)(a1 + 140);
    goto LABEL_37;
  }
  return result;
}

void CoreML::validateInt64Parameter(CoreML::Result *this, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v6 = *(void *)(a3 + 16);
  if (a4 && v6 <= 0)
  {
    std::to_string(&v86, v6);
    uint64_t v7 = std::string::insert(&v86, 0, "Default Value (");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v87.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v87.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    uint64_t v9 = std::string::append(&v87, ") for '");
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v88.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    int v11 = *(char *)(a2 + 23);
    if (v11 >= 0) {
      uint64_t v12 = (const std::string::value_type *)a2;
    }
    else {
      uint64_t v12 = *(const std::string::value_type **)a2;
    }
    if (v11 >= 0) {
      std::string::size_type v13 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      std::string::size_type v13 = *(void *)(a2 + 8);
    }
    int v14 = std::string::append(&v88, v12, v13);
    long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v89.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    unsigned int v16 = std::string::append(&v89, "' expected to be a positive value.");
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    std::string::size_type v91 = v16->__r_.__value_.__r.__words[2];
    long long v90 = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v89.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v88.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v87.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v86.__r_.__value_.__l.__data_);
    }
LABEL_17:
    *(void *)this = 15;
    std::operator+<char>();
    if (SHIBYTE(v91) < 0) {
      operator delete((void *)v90);
    }
    return;
  }
  int v18 = *(_DWORD *)(a3 + 36);
  if (v18 == 10)
  {
    uint64_t v23 = *(void *)(a3 + 24);
    uint64_t v24 = *(void *)(v23 + 16);
    if (v24 <= 0 && a4 != 0)
    {
      std::to_string(&v86, v24);
      uint64_t v40 = std::string::insert(&v86, 0, "Non-positive min value (");
      long long v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
      v87.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v87.__r_.__value_.__l.__data_ = v41;
      v40->__r_.__value_.__l.__size_ = 0;
      v40->__r_.__value_.__r.__words[2] = 0;
      v40->__r_.__value_.__r.__words[0] = 0;
      uint64_t v42 = std::string::append(&v87, ") in Allowed Value Range for '");
      long long v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
      v88.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v43;
      v42->__r_.__value_.__l.__size_ = 0;
      v42->__r_.__value_.__r.__words[2] = 0;
      v42->__r_.__value_.__r.__words[0] = 0;
      int v44 = *(char *)(a2 + 23);
      if (v44 >= 0) {
        uint64_t v45 = (const std::string::value_type *)a2;
      }
      else {
        uint64_t v45 = *(const std::string::value_type **)a2;
      }
      if (v44 >= 0) {
        std::string::size_type v46 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        std::string::size_type v46 = *(void *)(a2 + 8);
      }
      uint64_t v47 = std::string::append(&v88, v45, v46);
      long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
      v89.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v48;
      v47->__r_.__value_.__l.__size_ = 0;
      v47->__r_.__value_.__r.__words[2] = 0;
      v47->__r_.__value_.__r.__words[0] = 0;
      uint64_t v49 = std::string::append(&v89, "' is not allowed.");
      long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
      std::string::size_type v91 = v49->__r_.__value_.__r.__words[2];
      long long v90 = v50;
      v49->__r_.__value_.__l.__size_ = 0;
      v49->__r_.__value_.__r.__words[2] = 0;
      v49->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v89.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v88.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v87.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v86.__r_.__value_.__l.__data_);
      }
      goto LABEL_17;
    }
    uint64_t v26 = *(void *)(v23 + 24);
    if (v26 <= 0 && a4 != 0)
    {
      std::to_string(&v86, v26);
      uint64_t v64 = std::string::insert(&v86, 0, "Non-positive max value (");
      long long v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
      v87.__r_.__value_.__r.__words[2] = v64->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v87.__r_.__value_.__l.__data_ = v65;
      v64->__r_.__value_.__l.__size_ = 0;
      v64->__r_.__value_.__r.__words[2] = 0;
      v64->__r_.__value_.__r.__words[0] = 0;
      int v66 = std::string::append(&v87, ") in Allowed Value Range for '");
      long long v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
      v88.__r_.__value_.__r.__words[2] = v66->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v67;
      v66->__r_.__value_.__l.__size_ = 0;
      v66->__r_.__value_.__r.__words[2] = 0;
      v66->__r_.__value_.__r.__words[0] = 0;
      int v68 = *(char *)(a2 + 23);
      if (v68 >= 0) {
        uint64_t v69 = (const std::string::value_type *)a2;
      }
      else {
        uint64_t v69 = *(const std::string::value_type **)a2;
      }
      if (v68 >= 0) {
        std::string::size_type v70 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        std::string::size_type v70 = *(void *)(a2 + 8);
      }
      int v71 = std::string::append(&v88, v69, v70);
      long long v72 = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
      v89.__r_.__value_.__r.__words[2] = v71->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v72;
      v71->__r_.__value_.__l.__size_ = 0;
      v71->__r_.__value_.__r.__words[2] = 0;
      v71->__r_.__value_.__r.__words[0] = 0;
      int v73 = std::string::append(&v89, "' is not allowed.");
      long long v74 = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
      std::string::size_type v91 = v73->__r_.__value_.__r.__words[2];
      long long v90 = v74;
      v73->__r_.__value_.__l.__size_ = 0;
      v73->__r_.__value_.__r.__words[2] = 0;
      v73->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v89.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v88.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v87.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v86.__r_.__value_.__l.__data_);
      }
      goto LABEL_17;
    }
    if (v6 < v24 || v6 > v26)
    {
      std::to_string(&v86, v6);
      uint64_t v29 = std::string::insert(&v86, 0, "Specified Default Value (");
      long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v87.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v87.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      uint64_t v31 = std::string::append(&v87, ") out of Allowed Value Range for '");
      long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
      v88.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v32;
      v31->__r_.__value_.__l.__size_ = 0;
      v31->__r_.__value_.__r.__words[2] = 0;
      v31->__r_.__value_.__r.__words[0] = 0;
      int v33 = *(char *)(a2 + 23);
      if (v33 >= 0) {
        int v34 = (const std::string::value_type *)a2;
      }
      else {
        int v34 = *(const std::string::value_type **)a2;
      }
      if (v33 >= 0) {
        std::string::size_type v35 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        std::string::size_type v35 = *(void *)(a2 + 8);
      }
      unsigned int v36 = std::string::append(&v88, v34, v35);
      long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
      v89.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v37;
      v36->__r_.__value_.__l.__size_ = 0;
      v36->__r_.__value_.__r.__words[2] = 0;
      v36->__r_.__value_.__r.__words[0] = 0;
      uint64_t v38 = std::string::append(&v89, "'");
      long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
      std::string::size_type v91 = v38->__r_.__value_.__r.__words[2];
      long long v90 = v39;
      v38->__r_.__value_.__l.__size_ = 0;
      v38->__r_.__value_.__r.__words[2] = 0;
      v38->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v89.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v88.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v87.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v86.__r_.__value_.__l.__data_);
      }
      goto LABEL_17;
    }
  }
  else if (v18 == 11)
  {
    uint64_t v19 = *(void *)(a3 + 24);
    uint64_t v20 = *(void *)(v19 + 24);
    if (v20) {
      BOOL v21 = (uint64_t *)(v20 + 8);
    }
    else {
      BOOL v21 = 0;
    }
    if (v20) {
      uint64_t v22 = v20 + 8 + 8 * *(int *)(v19 + 16);
    }
    else {
      uint64_t v22 = 0;
    }
    while (v21 != (uint64_t *)v22)
    {
      uint64_t v51 = *v21;
      if (*v21 == v6) {
        goto LABEL_80;
      }
      if (v51 <= 0 && a4 != 0)
      {
        std::to_string(&v86, v51);
        BOOL v75 = std::string::insert(&v86, 0, "Non-positive value (");
        long long v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
        v87.__r_.__value_.__r.__words[2] = v75->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v87.__r_.__value_.__l.__data_ = v76;
        v75->__r_.__value_.__l.__size_ = 0;
        v75->__r_.__value_.__r.__words[2] = 0;
        v75->__r_.__value_.__r.__words[0] = 0;
        uint64_t v77 = std::string::append(&v87, ") in Allowed Values Set for '");
        long long v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
        v88.__r_.__value_.__r.__words[2] = v77->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v78;
        v77->__r_.__value_.__l.__size_ = 0;
        v77->__r_.__value_.__r.__words[2] = 0;
        v77->__r_.__value_.__r.__words[0] = 0;
        int v79 = *(char *)(a2 + 23);
        if (v79 >= 0) {
          uint64_t v80 = (const std::string::value_type *)a2;
        }
        else {
          uint64_t v80 = *(const std::string::value_type **)a2;
        }
        if (v79 >= 0) {
          std::string::size_type v81 = *(unsigned __int8 *)(a2 + 23);
        }
        else {
          std::string::size_type v81 = *(void *)(a2 + 8);
        }
        uint64_t v82 = std::string::append(&v88, v80, v81);
        long long v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
        v89.__r_.__value_.__r.__words[2] = v82->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v83;
        v82->__r_.__value_.__l.__size_ = 0;
        v82->__r_.__value_.__r.__words[2] = 0;
        v82->__r_.__value_.__r.__words[0] = 0;
        int v84 = std::string::append(&v89, "' is not allowed.");
        long long v85 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
        std::string::size_type v91 = v84->__r_.__value_.__r.__words[2];
        long long v90 = v85;
        v84->__r_.__value_.__l.__size_ = 0;
        v84->__r_.__value_.__r.__words[2] = 0;
        v84->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v89.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v88.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v87.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v86.__r_.__value_.__l.__data_);
        }
        goto LABEL_17;
      }
      ++v21;
    }
    std::to_string(&v86, v6);
    int v53 = std::string::insert(&v86, 0, "Specified Default Value (");
    long long v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
    v87.__r_.__value_.__r.__words[2] = v53->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v87.__r_.__value_.__l.__data_ = v54;
    v53->__r_.__value_.__l.__size_ = 0;
    v53->__r_.__value_.__r.__words[2] = 0;
    v53->__r_.__value_.__r.__words[0] = 0;
    int v55 = std::string::append(&v87, ") not found in Allowed Values Set for '");
    long long v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
    v88.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v56;
    v55->__r_.__value_.__l.__size_ = 0;
    v55->__r_.__value_.__r.__words[2] = 0;
    v55->__r_.__value_.__r.__words[0] = 0;
    int v57 = *(char *)(a2 + 23);
    if (v57 >= 0) {
      uint64_t v58 = (const std::string::value_type *)a2;
    }
    else {
      uint64_t v58 = *(const std::string::value_type **)a2;
    }
    if (v57 >= 0) {
      std::string::size_type v59 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      std::string::size_type v59 = *(void *)(a2 + 8);
    }
    uint64_t v60 = std::string::append(&v88, v58, v59);
    long long v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
    v89.__r_.__value_.__r.__words[2] = v60->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v61;
    v60->__r_.__value_.__l.__size_ = 0;
    v60->__r_.__value_.__r.__words[2] = 0;
    v60->__r_.__value_.__r.__words[0] = 0;
    uint64_t v62 = std::string::append(&v89, "'");
    long long v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
    std::string::size_type v91 = v62->__r_.__value_.__r.__words[2];
    long long v90 = v63;
    v62->__r_.__value_.__l.__size_ = 0;
    v62->__r_.__value_.__r.__words[2] = 0;
    v62->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v89.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v88.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v87.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v86.__r_.__value_.__l.__data_);
    }
    goto LABEL_17;
  }
LABEL_80:

  CoreML::Result::Result(this);
}

void sub_19EB1A0BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (*(char *)(v28 - 25) < 0) {
    operator delete(*(void **)(v28 - 48));
  }
  _Unwind_Resume(exception_object);
}

void CoreML::validateDoubleParameter(CoreML::Result *this, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)(a3 + 36) == 10
    && ((double v5 = *(double *)(a3 + 16), v6 = *(void *)(a3 + 24), v5 < *(double *)(v6 + 16)) || v5 > *(double *)(v6 + 24)))
  {
    std::to_string(&v18, v5);
    uint64_t v7 = std::string::insert(&v18, 0, "Specified Default Value (");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v19.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    uint64_t v9 = std::string::append(&v19, ") out of Allowed Value Range for '");
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v20.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    int v11 = *(char *)(a2 + 23);
    if (v11 >= 0) {
      uint64_t v12 = (const std::string::value_type *)a2;
    }
    else {
      uint64_t v12 = *(const std::string::value_type **)a2;
    }
    if (v11 >= 0) {
      std::string::size_type v13 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      std::string::size_type v13 = *(void *)(a2 + 8);
    }
    int v14 = std::string::append(&v20, v12, v13);
    long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v21.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    unsigned int v16 = std::string::append(&v21, "'");
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    std::string::size_type v23 = v16->__r_.__value_.__r.__words[2];
    long long v22 = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v21.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v20.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v19.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v18.__r_.__value_.__l.__data_);
    }
    *(void *)this = 15;
    std::operator+<char>();
    if (SHIBYTE(v23) < 0) {
      operator delete((void *)v22);
    }
  }
  else
  {
    CoreML::Result::Result(this);
  }
}

void sub_19EB1A340(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (*(char *)(v28 - 25) < 0) {
    operator delete(*(void **)(v28 - 48));
  }
  _Unwind_Resume(exception_object);
}

uint64_t CoreML::Specification::Scaler::GetCachedSize(CoreML::Specification::Scaler *this)
{
  return *((unsigned int *)this + 15);
}

uint64_t CoreML::Specification::Scaler::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2)
{
  uint64_t v3 = this;
  if (*(int *)(this + 16) >= 1)
  {
    if (*((int *)a2 + 4) < 5)
    {
      __src[0] = 10;
      google::protobuf::io::CodedOutputStream::WriteRaw(a2, __src, 1);
      int v4 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(unsigned char *)(*((void *)a2 + 1))++ = 10;
      int v4 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v4;
    }
    unsigned int v5 = *(_DWORD *)(v3 + 32);
    if (v4 < 5)
    {
      google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v5);
    }
    else
    {
      uint64_t v6 = *((void *)a2 + 1);
      if (v5 < 0x80)
      {
        unsigned int v8 = *(_DWORD *)(v3 + 32);
        uint64_t v7 = (unsigned char *)*((void *)a2 + 1);
      }
      else
      {
        uint64_t v7 = (unsigned char *)*((void *)a2 + 1);
        do
        {
          *v7++ = v5 | 0x80;
          unsigned int v8 = v5 >> 7;
          unsigned int v9 = v5 >> 14;
          v5 >>= 7;
        }
        while (v9);
      }
      *uint64_t v7 = v8;
      int v10 = v7 - v6 + 1;
      *((void *)a2 + 1) += v10;
      *((_DWORD *)a2 + 4) -= v10;
    }
    uint64_t v11 = *(void *)(v3 + 24);
    if (v11) {
      uint64_t v12 = (char *)(v11 + 8);
    }
    else {
      uint64_t v12 = 0;
    }
    this = google::protobuf::io::CodedOutputStream::WriteRaw(a2, v12, 8 * *(_DWORD *)(v3 + 16));
  }
  if (*(int *)(v3 + 40) >= 1)
  {
    if (*((int *)a2 + 4) < 5)
    {
      v24[0] = 18;
      google::protobuf::io::CodedOutputStream::WriteRaw(a2, v24, 1);
      int v13 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(unsigned char *)(*((void *)a2 + 1))++ = 18;
      int v13 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v13;
    }
    unsigned int v14 = *(_DWORD *)(v3 + 56);
    if (v13 < 5)
    {
      google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v14);
    }
    else
    {
      uint64_t v15 = *((void *)a2 + 1);
      if (v14 < 0x80)
      {
        unsigned int v17 = *(_DWORD *)(v3 + 56);
        unsigned int v16 = (unsigned char *)*((void *)a2 + 1);
      }
      else
      {
        unsigned int v16 = (unsigned char *)*((void *)a2 + 1);
        do
        {
          *v16++ = v14 | 0x80;
          unsigned int v17 = v14 >> 7;
          unsigned int v18 = v14 >> 14;
          v14 >>= 7;
        }
        while (v18);
      }
      *unsigned int v16 = v17;
      int v19 = v16 - v15 + 1;
      *((void *)a2 + 1) += v19;
      *((_DWORD *)a2 + 4) -= v19;
    }
    uint64_t v20 = *(void *)(v3 + 48);
    if (v20) {
      std::string v21 = (char *)(v20 + 8);
    }
    else {
      std::string v21 = 0;
    }
    int v22 = 8 * *(_DWORD *)(v3 + 40);
    return google::protobuf::io::CodedOutputStream::WriteRaw(a2, v21, v22);
  }
  return this;
}

uint64_t CoreML::Specification::Scaler::ByteSizeLong(CoreML::Specification::Scaler *this)
{
  uint64_t v1 = *((unsigned int *)this + 4);
  uint64_t v2 = 8 * v1;
  if (v1)
  {
    if ((v2 & 0x80000000) != 0) {
      uint64_t v3 = 11;
    }
    else {
      uint64_t v3 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  *((_DWORD *)this + 8) = v2;
  uint64_t v4 = v3 + v2;
  uint64_t v5 = *((unsigned int *)this + 10);
  uint64_t v6 = 8 * v5;
  if (v5)
  {
    if ((v6 & 0x80000000) != 0) {
      uint64_t v7 = 11;
    }
    else {
      uint64_t v7 = ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    v4 += v7;
  }
  uint64_t v8 = v4 + v6;
  *((_DWORD *)this + 14) = v6;
  *((_DWORD *)this + 15) = v8;
  return v8;
}

BOOL CoreML::Specification::Scaler::MergePartialFromCodedStream(CoreML::Specification::Scaler *this, char **a2, unsigned int a3)
{
  uint64_t v5 = (unsigned int *)((char *)this + 40);
  uint64_t v6 = (unsigned int *)((char *)this + 16);
  do
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          while (1)
          {
            uint64_t v7 = *a2;
            if (*a2 < a2[1]) {
              break;
            }
            LODWORD(v8) = 0;
LABEL_7:
            unsigned int TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback((google::protobuf::io::CodedInputStream *)a2, v8);
            unint64_t v9 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
            if ((v9 & 0x100000000) != 0) {
              goto LABEL_8;
            }
LABEL_20:
            if (v9) {
              BOOL v15 = (v9 & 7) == 4;
            }
            else {
              BOOL v15 = 1;
            }
            if (v15) {
              return 1;
            }
            if ((google::protobuf::internal::WireFormatLite::SkipField((google::protobuf::internal::WireFormatLite *)a2, (google::protobuf::io::CodedInputStream *)v9, a3) & 1) == 0)return 0; {
          }
            }
          uint64_t v8 = *v7;
          if (*v7 < 1) {
            goto LABEL_7;
          }
          *a2 = v7 + 1;
          unint64_t v9 = v8 | 0x100000000;
          if ((v9 & 0x100000000) == 0) {
            goto LABEL_20;
          }
LABEL_8:
          if (v9 >> 3 != 2) {
            break;
          }
          if (v9 == 17)
          {
            int v16 = 18;
            unsigned int v17 = (unint64_t **)a2;
            uint64_t v18 = (uint64_t)v5;
            goto LABEL_28;
          }
          if (v9 != 18) {
            goto LABEL_20;
          }
          int v13 = *a2;
          if (*a2 >= a2[1] || *v13 < 0)
          {
            unsigned int VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((google::protobuf::io::CodedInputStream *)a2);
            if ((VarintSizeAsIntFallback & 0x80000000) != 0) {
              return 0;
            }
          }
          else
          {
            unsigned int VarintSizeAsIntFallback = *v13;
            *a2 = v13 + 1;
          }
          if ((VarintSizeAsIntFallback & 7) != 0) {
            return 0;
          }
          int v34 = *((_DWORD *)a2 + 12);
          if (v34 == 0x7FFFFFFF) {
            int v35 = -1;
          }
          else {
            int v35 = v34 - *((_DWORD *)a2 + 6) + *((_DWORD *)a2 + 11) + *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
          }
          int v36 = *((_DWORD *)a2 + 10);
          if (v36 == 0x7FFFFFFF) {
            int v37 = -1;
          }
          else {
            int v37 = v36 - *((_DWORD *)a2 + 6) + *((_DWORD *)a2 + 11) + *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
          }
          signed int v38 = *v5;
          unsigned int v39 = VarintSizeAsIntFallback >> 3;
          if (v37 >= v35) {
            int v40 = v35;
          }
          else {
            int v40 = v37;
          }
          if (v35 == -1) {
            int v41 = v37;
          }
          else {
            int v41 = v40;
          }
          if (v41 >= (uint64_t)VarintSizeAsIntFallback)
          {
            signed int v46 = v38 + v39;
            if (VarintSizeAsIntFallback > 7)
            {
              google::protobuf::RepeatedField<double>::Reserve(v5, v38 + v39);
              uint64_t v47 = *((void *)this + 6);
              uint64_t v50 = 8 * v46 - 8 * *((int *)this + 10);
              if (v50 >= 1) {
                bzero((void *)(v47 + 8 + 8 * *((int *)this + 10)), 8 * (((unint64_t)v50 >> 3) - ((unint64_t)v50 > 7)) + 8);
              }
            }
            else
            {
              uint64_t v47 = *((void *)this + 6);
            }
            *uint64_t v5 = v46;
            uint64_t v51 = v47 + 8;
            if (!v47) {
              uint64_t v51 = 0;
            }
            if (!google::protobuf::io::CodedInputStream::ReadRaw((google::protobuf::io::CodedInputStream *)a2, (char *)(v51 + 8 * v38), VarintSizeAsIntFallback))
            {
              if ((int)*v5 >= 1)
              {
                BOOL result = 0;
                *uint64_t v5 = v38;
                return result;
              }
              return 0;
            }
          }
          else if (VarintSizeAsIntFallback >= 8)
          {
            if (v39 <= 1) {
              int v42 = 1;
            }
            else {
              int v42 = VarintSizeAsIntFallback >> 3;
            }
            do
            {
              unint64_t v52 = 0;
              long long v43 = (unint64_t *)*a2;
              if ((int)(*((_DWORD *)a2 + 2) - *a2) < 8)
              {
                BOOL result = google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v52);
                if (!result) {
                  return result;
                }
                unint64_t v44 = v52;
                signed int v38 = *v5;
              }
              else
              {
                unint64_t v44 = *v43;
                *a2 = (char *)(v43 + 1);
              }
              if (v38 == *((_DWORD *)this + 11))
              {
                google::protobuf::RepeatedField<double>::Reserve(v5, v38 + 1);
                signed int v38 = *v5;
              }
              uint64_t v45 = *((void *)this + 6) + 8 * v38;
              *((_DWORD *)this + 1CoreML::Specification::ClassConfidenceThresholding::New(this, 0) = v38 + 1;
              *(void *)(v45 + 8) = v44;
              ++v38;
              --v42;
            }
            while (v42);
          }
        }
        if (v9 >> 3 != 1) {
          goto LABEL_20;
        }
        if (v9 != 9) {
          break;
        }
        int v16 = 10;
        unsigned int v17 = (unint64_t **)a2;
        uint64_t v18 = (uint64_t)v6;
LABEL_28:
        if (!google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<double,(google::protobuf::internal::WireFormatLite::FieldType)1>(v16, v17, v18))return 0; {
      }
        }
      if (v9 != 10) {
        goto LABEL_20;
      }
      uint64_t v11 = *a2;
      if (*a2 >= a2[1] || *v11 < 0)
      {
        unsigned int v12 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((google::protobuf::io::CodedInputStream *)a2);
        if ((v12 & 0x80000000) != 0) {
          return 0;
        }
      }
      else
      {
        unsigned int v12 = *v11;
        *a2 = v11 + 1;
      }
      if ((v12 & 7) != 0) {
        return 0;
      }
      int v19 = *((_DWORD *)a2 + 12);
      int v20 = v19 == 0x7FFFFFFF
          ? -1
          : v19 - *((_DWORD *)a2 + 6) + *((_DWORD *)a2 + 11) + *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
      int v21 = *((_DWORD *)a2 + 10);
      int v22 = v21 == 0x7FFFFFFF
          ? -1
          : v21 - *((_DWORD *)a2 + 6) + *((_DWORD *)a2 + 11) + *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
      signed int v23 = *v6;
      unsigned int v24 = v12 >> 3;
      int v25 = v22 >= v20 ? v20 : v22;
      int v26 = v20 == -1 ? v22 : v25;
      if (v26 >= (uint64_t)v12) {
        break;
      }
      if (v12 >= 8)
      {
        if (v24 <= 1) {
          int v27 = 1;
        }
        else {
          int v27 = v12 >> 3;
        }
        do
        {
          unint64_t v52 = 0;
          uint64_t v28 = (unint64_t *)*a2;
          if ((int)(*((_DWORD *)a2 + 2) - *a2) < 8)
          {
            BOOL result = google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v52);
            if (!result) {
              return result;
            }
            unint64_t v29 = v52;
            signed int v23 = *v6;
          }
          else
          {
            unint64_t v29 = *v28;
            *a2 = (char *)(v28 + 1);
          }
          if (v23 == *((_DWORD *)this + 5))
          {
            google::protobuf::RepeatedField<double>::Reserve(v6, v23 + 1);
            signed int v23 = *v6;
          }
          uint64_t v30 = *((void *)this + 3) + 8 * v23;
          *((_DWORD *)this + 4) = v23 + 1;
          *(void *)(v30 + 8) = v29;
          ++v23;
          --v27;
        }
        while (v27);
      }
    }
    signed int v32 = v23 + v24;
    if (v12 > 7)
    {
      google::protobuf::RepeatedField<double>::Reserve(v6, v23 + v24);
      uint64_t v33 = *((void *)this + 3);
      uint64_t v48 = 8 * v32 - 8 * *((int *)this + 4);
      if (v48 >= 1) {
        bzero((void *)(v33 + 8 + 8 * *((int *)this + 4)), 8 * (((unint64_t)v48 >> 3) - ((unint64_t)v48 > 7)) + 8);
      }
    }
    else
    {
      uint64_t v33 = *((void *)this + 3);
    }
    *uint64_t v6 = v32;
    uint64_t v49 = v33 + 8;
    if (!v33) {
      uint64_t v49 = 0;
    }
  }
  while (google::protobuf::io::CodedInputStream::ReadRaw((google::protobuf::io::CodedInputStream *)a2, (char *)(v49 + 8 * v23), v12));
  if ((int)*v6 >= 1)
  {
    BOOL result = 0;
    *uint64_t v6 = v23;
    return result;
  }
  return 0;
}

BOOL google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<double,(google::protobuf::internal::WireFormatLite::FieldType)1>(int a1, unint64_t **this, uint64_t a3)
{
  uint64_t v6 = *this;
  if ((int)(*((_DWORD *)this + 2) - *this) < 8)
  {
    unint64_t v21 = 0;
    BOOL result = google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v21);
    if (!result) {
      return result;
    }
    unint64_t v7 = v21;
  }
  else
  {
    unint64_t v7 = *v6;
    *this = v6 + 1;
  }
  signed int v8 = *(_DWORD *)a3;
  if (*(_DWORD *)a3 == *(_DWORD *)(a3 + 4))
  {
    google::protobuf::RepeatedField<double>::Reserve((unsigned int *)a3, v8 + 1);
    signed int v8 = *(_DWORD *)a3;
  }
  uint64_t v9 = *(void *)(a3 + 8);
  int v10 = v8 + 1;
  *(_DWORD *)a3 = v8 + 1;
  *(void *)(v9 + 8 * v8 + 8) = v7;
  uint64_t v11 = *this;
  int v12 = *((_DWORD *)this + 2) - *this;
  if (v12 >= 1)
  {
    signed int v13 = *(_DWORD *)(a3 + 4) - v10;
    signed int v14 = v12 / 9u;
    if ((int)(v12 / 9u) >= v13) {
      signed int v14 = *(_DWORD *)(a3 + 4) - v10;
    }
    if (v14 >= 1)
    {
      uint64_t v15 = 0;
      uint64_t v16 = v9 + 8 * v10 + 8;
      int v17 = v8 + 2;
      uint64_t v18 = ((*((_DWORD *)this + 2) - *this) * (unsigned __int128)0x1C71C71C71C71C72uLL) >> 64;
      if (v18 >= v13) {
        LODWORD(v18) = v13;
      }
      while (*(unsigned __int8 *)v11 == a1)
      {
        uint64_t v19 = *(unint64_t *)((char *)v11 + 1);
        *(_DWORD *)a3 = v17 + v15;
        *(void *)(v16 + 8 * v15++) = v19;
        uint64_t v11 = (unint64_t *)((char *)v11 + 9);
        if (v18 == v15) {
          goto LABEL_15;
        }
      }
      signed int v14 = v15;
LABEL_15:
      if (v14 >= 1) {
        google::protobuf::io::CodedInputStream::Skip((google::protobuf::io::CodedInputStream *)this, 9 * v14);
      }
    }
  }
  return 1;
}

unint64_t *CoreML::Specification::Scaler::MergeFrom(unint64_t *this, const CoreML::Specification::Scaler *a2)
{
  uint64_t v3 = (unsigned int *)this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    this = (unint64_t *)google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  int v5 = *((_DWORD *)a2 + 4);
  if (v5)
  {
    google::protobuf::RepeatedField<double>::Reserve(v3 + 4, v3[4] + v5);
    this = (unint64_t *)memcpy((void *)(*((void *)v3 + 3) + 8 * (int)v3[4] + 8), (const void *)(*((void *)a2 + 3) + 8), 8 * *((int *)a2 + 4));
    v3[4] += *((_DWORD *)a2 + 4);
  }
  int v6 = *((_DWORD *)a2 + 10);
  if (v6)
  {
    int v8 = v3[10];
    unint64_t v7 = v3 + 10;
    google::protobuf::RepeatedField<double>::Reserve(v7, v8 + v6);
    this = (unint64_t *)memcpy((void *)(*((void *)v7 + 1) + 8 * (int)*v7 + 8), (const void *)(*((void *)a2 + 6) + 8), 8 * *((int *)a2 + 10));
    *v7 += *((_DWORD *)a2 + 10);
  }
  return this;
}

uint64_t CoreML::Specification::Scaler::IsInitialized(CoreML::Specification::Scaler *this)
{
  return 1;
}

uint64_t CoreML::Specification::Scaler::Clear(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  *(_DWORD *)(this + 4CoreML::Specification::ClassConfidenceThresholding::New(this, 0) = 0;
  return this;
}

void CoreML::Specification::Scaler::New(CoreML::Specification::Scaler *this, google::protobuf::Arena *a2)
{
}

void sub_19EB1AE3C(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C403FC4B5CDLL);
  _Unwind_Resume(a1);
}

CoreML::Specification::Scaler *CoreML::Specification::Scaler::Scaler(CoreML::Specification::Scaler *this)
{
  *(void *)this = &unk_1EF0D9658;
  *((void *)this + 1) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  if (this != (CoreML::Specification::Scaler *)&CoreML::Specification::_Scaler_default_instance_) {
    CoreML::Specification::protobuf_Scaler_2eproto::InitDefaults(this);
  }
  *((_DWORD *)this + 15) = 0;
  return this;
}

void sub_19EB1AED0(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void **)(v2 + 48);
  if (v4 && !*v4) {
    operator delete(v4);
  }
  int v5 = *(void **)(v2 + 24);
  if (v5)
  {
    if (!*v5) {
      operator delete(v5);
    }
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::Scaler>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    BOOL result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *BOOL result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::Scaler>;
    uint64_t v4 = (unint64_t *)(v3 + 4);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::Scaler>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void CoreML::Specification::Scaler::New(CoreML::Specification::Scaler *this)
{
}

void *CoreML::Specification::Scaler::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.Scaler");
}

void CoreML::Specification::Scaler::~Scaler(CoreML::Specification::Scaler *this)
{
  CoreML::Specification::Scaler::~Scaler(this);

  JUMPOUT(0x19F3C1920);
}

{
  void *v2;
  void *v3;

  *(void *)this = &unk_1EF0D9658;
  uint64_t v2 = (void *)*((void *)this + 6);
  if (v2 && !*v2) {
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 3);
  if (v3 && !*v3) {
    operator delete(v3);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

uint64_t CoreML::Specification::MILSpec::Program::GetCachedSize(CoreML::Specification::MILSpec::Program *this)
{
  return *((unsigned int *)this + 24);
}

uint64_t CoreML::Specification::MILSpec::Program::SerializeWithCachedSizes(CoreML::Specification::MILSpec::Program *this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  unint64_t v6 = *((void *)this + 11);
  if (v6) {
    google::protobuf::internal::WireFormatLite::WriteInt64(1, v6, a2, a4);
  }
  unint64_t v7 = (unint64_t *)*((void *)this + 5);
  unint64_t v8 = *v7;
  if (*v7)
  {
    if (*((unsigned char *)a2 + 26))
    {
      if (v8 >= 2 && *((unsigned char *)a2 + 27) != 0) {
        goto LABEL_26;
      }
    }
    else if (v8 >= 2 && google::protobuf::io::CodedOutputStream::default_serialization_deterministic_ != 0)
    {
LABEL_26:
      operator new[]();
    }
    google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::begin(v27, v7);
    uint64_t v10 = 0;
    while (v27[0])
    {
      int v12 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(*((google::protobuf::Arena **)v27[0] + 3), (google::protobuf::Arena *)(*((void *)v27[0] + 3) + 24), *((google::protobuf::Arena **)this + 2));
      if ((google::protobuf::Arena **)v10 != v12)
      {
        if (v10) {
          (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
        }
        uint64_t v10 = (uint64_t)v12;
      }
      google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)2, v10, a2, v11);
      signed int v13 = (unsigned int *)*((void *)v27[0] + 3);
      if (*((char *)v13 + 23) < 0)
      {
        signed int v13 = *(unsigned int **)v13;
        uint64_t v14 = *(void *)(*((void *)v27[0] + 3) + 8);
      }
      else
      {
        LODWORD(v14) = *((unsigned __int8 *)v13 + 23);
      }
      google::protobuf::internal::WireFormatLite::VerifyUtf8String(v13, v14, 1, (uint64_t)"CoreML.Specification.MILSpec.Program.FunctionsEntry.key");
      google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::KeyValuePair const>::operator++(v27);
    }
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  uint64_t result = *((void *)this + 10);
  if (*(char *)(result + 23) < 0)
  {
    uint64_t v17 = *(void *)(result + 8);
    if (!v17) {
      goto LABEL_33;
    }
    uint64_t result = *(void *)result;
    goto LABEL_32;
  }
  LODWORD(v17) = *(unsigned __int8 *)(result + 23);
  if (*(unsigned char *)(result + 23))
  {
LABEL_32:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String((unsigned int *)result, v17, 1, (uint64_t)"CoreML.Specification.MILSpec.Program.docString");
    uint64_t result = google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(3u, *((void *)this + 10), a2);
  }
LABEL_33:
  uint64_t v18 = (unint64_t *)*((void *)this + 9);
  unint64_t v19 = *v18;
  if (*v18)
  {
    if (*((unsigned char *)a2 + 26))
    {
      if (v19 >= 2 && *((unsigned char *)a2 + 27) != 0) {
        goto LABEL_56;
      }
    }
    else if (v19 >= 2 && google::protobuf::io::CodedOutputStream::default_serialization_deterministic_ != 0)
    {
LABEL_56:
      operator new[]();
    }
    uint64_t result = (uint64_t)google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::begin(v27, v18);
    uint64_t v21 = 0;
    while (v27[0])
    {
      signed int v23 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(*((google::protobuf::Arena **)v27[0] + 3), (google::protobuf::Arena *)(*((void *)v27[0] + 3) + 24), *((google::protobuf::Arena **)this + 6));
      if ((google::protobuf::Arena **)v21 != v23)
      {
        if (v21) {
          (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
        }
        uint64_t v21 = (uint64_t)v23;
      }
      google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)4, v21, a2, v22);
      unsigned int v24 = (unsigned int *)*((void *)v27[0] + 3);
      if (*((char *)v24 + 23) < 0)
      {
        unsigned int v24 = *(unsigned int **)v24;
        uint64_t v25 = *(void *)(*((void *)v27[0] + 3) + 8);
      }
      else
      {
        LODWORD(v25) = *((unsigned __int8 *)v24 + 23);
      }
      google::protobuf::internal::WireFormatLite::VerifyUtf8String(v24, v25, 1, (uint64_t)"CoreML.Specification.MILSpec.Program.AttributesEntry.key");
      uint64_t result = (uint64_t)google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::KeyValuePair const>::operator++(v27);
    }
    if (v21) {
      return (*(uint64_t (**)(uint64_t))(*(void *)v21 + 8))(v21);
    }
  }
  return result;
}

void sub_19EB1B5F4(_Unwind_Exception *a1)
{
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  MEMORY[0x19F3C1900](v1, 0x60C8044C4A2DFLL);
  _Unwind_Resume(a1);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Function> const*> &,google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Function> const**,false>(uint64_t result, char *a2, uint64_t a3, char a4)
{
  unint64_t v8 = (char *)result;
  while (2)
  {
    uint64_t v95 = a2 - 8;
    std::string::size_type v91 = a2 - 24;
    uint64_t v92 = a2 - 16;
    uint64_t v9 = v8;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          unint64_t v10 = (unint64_t)v9;
          uint64_t v11 = a2 - v9;
          uint64_t v12 = (a2 - v9) >> 3;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0:
              case 1:
                return result;
              case 2:
                int v41 = *(void **)v95;
                int v42 = *(void **)v9;
                uint64_t result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*(void **)v95, *(void **)v9);
                if (result)
                {
                  *(void *)uint64_t v9 = v41;
                  *(void *)uint64_t v95 = v42;
                }
                break;
              case 3:
                uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((void **)v9, (void **)v9 + 1, (void **)v95);
                break;
              case 4:
                uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((void **)v9, (void **)v9 + 1, (void **)v9 + 2, (void **)v95);
                break;
              case 5:
                uint64_t result = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((void **)v9, (void **)v9 + 1, (void **)v9 + 2, (void **)v9 + 3, (void **)v95);
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v11 <= 191)
          {
            long long v43 = v9 + 8;
            BOOL v45 = v9 == a2 || v43 == a2;
            if (a4)
            {
              if (!v45)
              {
                uint64_t v46 = 0;
                uint64_t v47 = v9;
                do
                {
                  uint64_t v49 = *(void **)v47;
                  uint64_t v48 = (void *)*((void *)v47 + 1);
                  uint64_t v47 = v43;
                  uint64_t result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v48, v49);
                  if (result)
                  {
                    uint64_t v50 = v46;
                    while (1)
                    {
                      *(void *)&v9[v50 + 8] = v49;
                      if (!v50) {
                        break;
                      }
                      uint64_t v49 = *(void **)&v9[v50 - 8];
                      uint64_t result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v48, v49);
                      v50 -= 8;
                      if ((result & 1) == 0)
                      {
                        uint64_t v51 = &v9[v50 + 8];
                        goto LABEL_80;
                      }
                    }
                    uint64_t v51 = v9;
LABEL_80:
                    *(void *)uint64_t v51 = v48;
                  }
                  long long v43 = v47 + 8;
                  v46 += 8;
                }
                while (v47 + 8 != a2);
              }
            }
            else if (!v45)
            {
              do
              {
                std::string v87 = *(void **)v10;
                std::string v86 = *(void **)(v10 + 8);
                unint64_t v10 = (unint64_t)v43;
                uint64_t result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v86, v87);
                if (result)
                {
                  std::string v88 = (void *)v10;
                  do
                  {
                    *std::string v88 = v87;
                    std::string v87 = (void *)*(v88 - 2);
                    uint64_t result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v86, v87);
                    --v88;
                  }
                  while ((result & 1) != 0);
                  *std::string v88 = v86;
                }
                long long v43 = (char *)(v10 + 8);
              }
              while ((char *)(v10 + 8) != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v9 != a2)
            {
              uint64_t v98 = v9;
              int64_t v52 = (unint64_t)(v12 - 2) >> 1;
              int64_t v53 = v52;
              std::string v89 = a2;
              uint64_t v90 = a2 - v9;
              do
              {
                int64_t v54 = v53;
                if (v11 >= 16 && v52 >= v53)
                {
                  uint64_t v55 = (2 * v53) | 1;
                  long long v56 = &v98[8 * v55];
                  uint64_t v57 = 2 * v53 + 2;
                  int64_t v96 = v53;
                  if (v57 < v12)
                  {
                    uint64_t v58 = *(void **)v56;
                    uint64_t v60 = (void *)*((void *)v56 + 1);
                    BOOL v59 = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*(void **)v56, v60);
                    if (v59) {
                      v56 += 8;
                    }
                    else {
                      uint64_t v60 = v58;
                    }
                    if (v59) {
                      uint64_t v55 = v57;
                    }
                  }
                  else
                  {
                    uint64_t v60 = *(void **)v56;
                  }
                  long long v61 = &v98[8 * v54];
                  uint64_t v62 = *(void **)v61;
                  uint64_t result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v60, *(void **)v61);
                  uint64_t v11 = v90;
                  if ((result & 1) == 0)
                  {
                    do
                    {
                      long long v63 = v56;
                      *(void *)long long v61 = v60;
                      if (v52 < v55) {
                        break;
                      }
                      uint64_t v64 = (2 * v55) | 1;
                      long long v56 = &v98[8 * v64];
                      uint64_t v65 = 2 * v55 + 2;
                      if (v65 < v12)
                      {
                        uint64_t v60 = *(void **)v56;
                        int v66 = (void *)*((void *)v56 + 1);
                        if (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*(void **)v56, v66))
                        {
                          uint64_t v60 = v66;
                          v56 += 8;
                          uint64_t v55 = v65;
                        }
                        else
                        {
                          uint64_t v55 = v64;
                        }
                      }
                      else
                      {
                        uint64_t v60 = *(void **)v56;
                        uint64_t v55 = (2 * v55) | 1;
                      }
                      uint64_t result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v60, v62);
                      long long v61 = v63;
                    }
                    while (!result);
                    *(void *)long long v63 = v62;
                    a2 = v89;
                    uint64_t v11 = v90;
                    int64_t v54 = v96;
                  }
                }
                int64_t v53 = v54 - 1;
              }
              while (v54);
              uint64_t v67 = (unint64_t)v11 >> 3;
              int v68 = v98;
              do
              {
                uint64_t v69 = a2;
                uint64_t v70 = 0;
                uint64_t v71 = v67 - 2;
                uint64_t v94 = *(void **)v68;
                if (v67 < 2) {
                  uint64_t v71 = v67 - 1;
                }
                uint64_t v72 = v71 >> 1;
                do
                {
                  int v73 = &v68[8 * v70 + 8];
                  uint64_t v74 = (2 * v70) | 1;
                  uint64_t v75 = 2 * v70 + 2;
                  if (v75 >= v67)
                  {
                    long long v78 = *(void **)v73;
                    uint64_t v70 = (2 * v70) | 1;
                  }
                  else
                  {
                    long long v76 = *(void **)v73;
                    uint64_t v77 = *(void **)&v68[8 * v70 + 16];
                    uint64_t result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*(void **)v73, v77);
                    if (result) {
                      long long v78 = v77;
                    }
                    else {
                      long long v78 = v76;
                    }
                    if (result)
                    {
                      v73 += 8;
                      uint64_t v70 = v75;
                    }
                    else
                    {
                      uint64_t v70 = v74;
                    }
                  }
                  *(void *)int v68 = v78;
                  int v68 = v73;
                }
                while (v70 <= v72);
                a2 = v69 - 8;
                if (v73 == v69 - 8)
                {
                  *(void *)int v73 = v94;
                }
                else
                {
                  *(void *)int v73 = *(void *)a2;
                  *(void *)a2 = v94;
                  uint64_t v79 = v73 - v98 + 8;
                  if (v79 >= 9)
                  {
                    unint64_t v80 = (unint64_t)((v79 >> 3) - 2) >> 1;
                    std::string::size_type v81 = &v98[8 * v80];
                    uint64_t v82 = *(void **)v81;
                    long long v83 = *(void **)v73;
                    uint64_t result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*(void **)v81, *(void **)v73);
                    if (result)
                    {
                      do
                      {
                        int v84 = v81;
                        *(void *)int v73 = v82;
                        if (!v80) {
                          break;
                        }
                        unint64_t v80 = (v80 - 1) >> 1;
                        std::string::size_type v81 = &v98[8 * v80];
                        uint64_t v82 = *(void **)v81;
                        uint64_t result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*(void **)v81, v83);
                        int v73 = v84;
                      }
                      while ((result & 1) != 0);
                      *(void *)int v84 = v83;
                    }
                  }
                }
                BOOL v85 = v67-- <= 2;
                int v68 = v98;
              }
              while (!v85);
            }
            return result;
          }
          unint64_t v13 = (unint64_t)v12 >> 1;
          uint64_t v14 = &v9[8 * ((unint64_t)v12 >> 1)];
          if ((unint64_t)v11 < 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((void **)v14, (void **)v9, (void **)v95);
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((void **)v9, (void **)v14, (void **)v95);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((void **)v9 + 1, (void **)v14 - 1, (void **)v92);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((void **)v9 + 2, (void **)&v9[8 * v13 + 8], (void **)v91);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((void **)v14 - 1, (void **)v14, (void **)&v9[8 * v13 + 8]);
            uint64_t v15 = *(void **)v9;
            *(void *)uint64_t v9 = *(void *)v14;
            *(void *)uint64_t v14 = v15;
          }
          --a3;
          uint64_t v16 = *(void **)v9;
          uint64_t v17 = v9;
          if (a4) {
            break;
          }
          uint64_t v17 = v9;
          if (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*((void **)v9 - 1), *(void **)v9))
          {
            break;
          }
          uint64_t result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v16, *(void **)v95);
          if (result)
          {
            do
            {
              uint64_t v31 = (void *)*((void *)v9 + 1);
              v9 += 8;
              uint64_t result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v16, v31);
            }
            while ((result & 1) == 0);
          }
          else
          {
            signed int v32 = v9 + 8;
            do
            {
              uint64_t v9 = v32;
              if (v32 >= a2) {
                break;
              }
              v32 += 8;
              uint64_t result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v16, *(void **)v9);
            }
            while (!result);
          }
          uint64_t v33 = a2;
          if (v9 < a2)
          {
            uint64_t v33 = a2;
            do
            {
              int v34 = (void *)*((void *)v33 - 1);
              v33 -= 8;
              uint64_t result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v16, v34);
            }
            while ((result & 1) != 0);
          }
          int v35 = a2;
          if (v9 < v33)
          {
            int v36 = *(void **)v9;
            int v37 = *(void **)v33;
            do
            {
              *(void *)uint64_t v9 = v37;
              *(void *)uint64_t v33 = v36;
              do
              {
                signed int v38 = (void *)*((void *)v9 + 1);
                v9 += 8;
                int v36 = v38;
              }
              while (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v16, v38));
              do
              {
                unsigned int v39 = (void *)*((void *)v33 - 1);
                v33 -= 8;
                int v37 = v39;
                uint64_t result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v16, v39);
              }
              while ((result & 1) != 0);
            }
            while (v9 < v33);
          }
          int v40 = v9 - 8;
          BOOL v4 = (unint64_t)(v9 - 8) >= v10;
          BOOL v5 = v9 - 8 == (char *)v10;
          a2 = v35;
          if (v9 - 8 != (char *)v10) {
            *(void *)unint64_t v10 = *(void *)v40;
          }
          a4 = 0;
          *(void *)int v40 = v16;
        }
        do
        {
          uint64_t v18 = v17;
          int v20 = (void *)*((void *)v17 + 1);
          v17 += 8;
          unint64_t v19 = v20;
        }
        while (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v20, v16));
        uint64_t v97 = a3;
        uint64_t v21 = a2;
        if (v18 == (char *)v10)
        {
          uint64_t v21 = a2;
          do
          {
            if (v17 >= v21) {
              break;
            }
            signed int v23 = (void *)*((void *)v21 - 1);
            v21 -= 8;
          }
          while (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v23, v16));
        }
        else
        {
          do
          {
            int v22 = (void *)*((void *)v21 - 1);
            v21 -= 8;
          }
          while (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v22, v16));
        }
        unint64_t v8 = (char *)v10;
        unsigned int v24 = a2;
        if (v17 < v21)
        {
          uint64_t v25 = *(void **)v21;
          int v26 = v17;
          int v27 = v21;
          do
          {
            *(void *)int v26 = v25;
            *(void *)int v27 = v19;
            do
            {
              uint64_t v18 = v26;
              uint64_t v28 = (void *)*((void *)v26 + 1);
              v26 += 8;
              unint64_t v19 = v28;
            }
            while (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v28, v16));
            do
            {
              unint64_t v29 = (void *)*((void *)v27 - 1);
              v27 -= 8;
              uint64_t v25 = v29;
            }
            while (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v29, v16));
          }
          while (v26 < v27);
        }
        if (v18 != v8) {
          *(void *)unint64_t v8 = *(void *)v18;
        }
        *(void *)uint64_t v18 = v16;
        BOOL v4 = v17 >= v21;
        a2 = v24;
        a3 = v97;
        if (v4) {
          break;
        }
LABEL_31:
        uint64_t result = std::__introsort<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Function> const*> &,google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Function> const**,false>(v8, v18, v97, a4 & 1);
        a4 = 0;
        uint64_t v9 = v18 + 8;
      }
      BOOL v30 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Function> const*> &,google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Function> const**>((void **)v8, (void **)v18);
      uint64_t v9 = v18 + 8;
      uint64_t result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Function> const*> &,google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Function> const**>((void **)v18 + 1, (void **)v24);
      if (result) {
        break;
      }
      if (!v30) {
        goto LABEL_31;
      }
    }
    a2 = v18;
    if (!v30) {
      continue;
    }
    return result;
  }
}

google::protobuf::Arena **google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(google::protobuf::Arena *a1, google::protobuf::Arena *a2, google::protobuf::Arena *a3)
{
  if (!a3) {
    operator new();
  }
  result[1] = 0;
  result[2] = (google::protobuf::Arena *)&google::protobuf::internal::fixed_address_empty_string;
  result[3] = 0;
  result[4] = a3;
  *uint64_t result = (google::protobuf::Arena *)&unk_1EF0DBAC0;
  result[6] = a1;
  result[7] = a2;
  *((_DWORD *)result + 1CoreML::Specification::Scaler::New(this, 0) = 3;
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Value> const*> &,google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Value> const**,false>(uint64_t result, char *a2, uint64_t a3, char a4)
{
  unint64_t v8 = (char *)result;
  while (2)
  {
    uint64_t v95 = a2 - 8;
    std::string::size_type v91 = a2 - 24;
    uint64_t v92 = a2 - 16;
    uint64_t v9 = v8;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          unint64_t v10 = (unint64_t)v9;
          uint64_t v11 = a2 - v9;
          uint64_t v12 = (a2 - v9) >> 3;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0:
              case 1:
                return result;
              case 2:
                int v41 = *(void **)v95;
                int v42 = *(void **)v9;
                uint64_t result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*(void **)v95, *(void **)v9);
                if (result)
                {
                  *(void *)uint64_t v9 = v41;
                  *(void *)uint64_t v95 = v42;
                }
                break;
              case 3:
                uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((void **)v9, (void **)v9 + 1, (void **)v95);
                break;
              case 4:
                uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((void **)v9, (void **)v9 + 1, (void **)v9 + 2, (void **)v95);
                break;
              case 5:
                uint64_t result = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((void **)v9, (void **)v9 + 1, (void **)v9 + 2, (void **)v9 + 3, (void **)v95);
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v11 <= 191)
          {
            long long v43 = v9 + 8;
            BOOL v45 = v9 == a2 || v43 == a2;
            if (a4)
            {
              if (!v45)
              {
                uint64_t v46 = 0;
                uint64_t v47 = v9;
                do
                {
                  uint64_t v49 = *(void **)v47;
                  uint64_t v48 = (void *)*((void *)v47 + 1);
                  uint64_t v47 = v43;
                  uint64_t result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v48, v49);
                  if (result)
                  {
                    uint64_t v50 = v46;
                    while (1)
                    {
                      *(void *)&v9[v50 + 8] = v49;
                      if (!v50) {
                        break;
                      }
                      uint64_t v49 = *(void **)&v9[v50 - 8];
                      uint64_t result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v48, v49);
                      v50 -= 8;
                      if ((result & 1) == 0)
                      {
                        uint64_t v51 = &v9[v50 + 8];
                        goto LABEL_80;
                      }
                    }
                    uint64_t v51 = v9;
LABEL_80:
                    *(void *)uint64_t v51 = v48;
                  }
                  long long v43 = v47 + 8;
                  v46 += 8;
                }
                while (v47 + 8 != a2);
              }
            }
            else if (!v45)
            {
              do
              {
                std::string v87 = *(void **)v10;
                std::string v86 = *(void **)(v10 + 8);
                unint64_t v10 = (unint64_t)v43;
                uint64_t result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v86, v87);
                if (result)
                {
                  std::string v88 = (void *)v10;
                  do
                  {
                    *std::string v88 = v87;
                    std::string v87 = (void *)*(v88 - 2);
                    uint64_t result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v86, v87);
                    --v88;
                  }
                  while ((result & 1) != 0);
                  *std::string v88 = v86;
                }
                long long v43 = (char *)(v10 + 8);
              }
              while ((char *)(v10 + 8) != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v9 != a2)
            {
              uint64_t v98 = v9;
              int64_t v52 = (unint64_t)(v12 - 2) >> 1;
              int64_t v53 = v52;
              std::string v89 = a2;
              uint64_t v90 = a2 - v9;
              do
              {
                int64_t v54 = v53;
                if (v11 >= 16 && v52 >= v53)
                {
                  uint64_t v55 = (2 * v53) | 1;
                  long long v56 = &v98[8 * v55];
                  uint64_t v57 = 2 * v53 + 2;
                  int64_t v96 = v53;
                  if (v57 < v12)
                  {
                    uint64_t v58 = *(void **)v56;
                    uint64_t v60 = (void *)*((void *)v56 + 1);
                    BOOL v59 = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*(void **)v56, v60);
                    if (v59) {
                      v56 += 8;
                    }
                    else {
                      uint64_t v60 = v58;
                    }
                    if (v59) {
                      uint64_t v55 = v57;
                    }
                  }
                  else
                  {
                    uint64_t v60 = *(void **)v56;
                  }
                  long long v61 = &v98[8 * v54];
                  uint64_t v62 = *(void **)v61;
                  uint64_t result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v60, *(void **)v61);
                  uint64_t v11 = v90;
                  if ((result & 1) == 0)
                  {
                    do
                    {
                      long long v63 = v56;
                      *(void *)long long v61 = v60;
                      if (v52 < v55) {
                        break;
                      }
                      uint64_t v64 = (2 * v55) | 1;
                      long long v56 = &v98[8 * v64];
                      uint64_t v65 = 2 * v55 + 2;
                      if (v65 < v12)
                      {
                        uint64_t v60 = *(void **)v56;
                        int v66 = (void *)*((void *)v56 + 1);
                        if (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*(void **)v56, v66))
                        {
                          uint64_t v60 = v66;
                          v56 += 8;
                          uint64_t v55 = v65;
                        }
                        else
                        {
                          uint64_t v55 = v64;
                        }
                      }
                      else
                      {
                        uint64_t v60 = *(void **)v56;
                        uint64_t v55 = (2 * v55) | 1;
                      }
                      uint64_t result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v60, v62);
                      long long v61 = v63;
                    }
                    while (!result);
                    *(void *)long long v63 = v62;
                    a2 = v89;
                    uint64_t v11 = v90;
                    int64_t v54 = v96;
                  }
                }
                int64_t v53 = v54 - 1;
              }
              while (v54);
              uint64_t v67 = (unint64_t)v11 >> 3;
              int v68 = v98;
              do
              {
                uint64_t v69 = a2;
                uint64_t v70 = 0;
                uint64_t v71 = v67 - 2;
                uint64_t v94 = *(void **)v68;
                if (v67 < 2) {
                  uint64_t v71 = v67 - 1;
                }
                uint64_t v72 = v71 >> 1;
                do
                {
                  int v73 = &v68[8 * v70 + 8];
                  uint64_t v74 = (2 * v70) | 1;
                  uint64_t v75 = 2 * v70 + 2;
                  if (v75 >= v67)
                  {
                    long long v78 = *(void **)v73;
                    uint64_t v70 = (2 * v70) | 1;
                  }
                  else
                  {
                    long long v76 = *(void **)v73;
                    uint64_t v77 = *(void **)&v68[8 * v70 + 16];
                    uint64_t result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*(void **)v73, v77);
                    if (result) {
                      long long v78 = v77;
                    }
                    else {
                      long long v78 = v76;
                    }
                    if (result)
                    {
                      v73 += 8;
                      uint64_t v70 = v75;
                    }
                    else
                    {
                      uint64_t v70 = v74;
                    }
                  }
                  *(void *)int v68 = v78;
                  int v68 = v73;
                }
                while (v70 <= v72);
                a2 = v69 - 8;
                if (v73 == v69 - 8)
                {
                  *(void *)int v73 = v94;
                }
                else
                {
                  *(void *)int v73 = *(void *)a2;
                  *(void *)a2 = v94;
                  uint64_t v79 = v73 - v98 + 8;
                  if (v79 >= 9)
                  {
                    unint64_t v80 = (unint64_t)((v79 >> 3) - 2) >> 1;
                    std::string::size_type v81 = &v98[8 * v80];
                    uint64_t v82 = *(void **)v81;
                    long long v83 = *(void **)v73;
                    uint64_t result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*(void **)v81, *(void **)v73);
                    if (result)
                    {
                      do
                      {
                        int v84 = v81;
                        *(void *)int v73 = v82;
                        if (!v80) {
                          break;
                        }
                        unint64_t v80 = (v80 - 1) >> 1;
                        std::string::size_type v81 = &v98[8 * v80];
                        uint64_t v82 = *(void **)v81;
                        uint64_t result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*(void **)v81, v83);
                        int v73 = v84;
                      }
                      while ((result & 1) != 0);
                      *(void *)int v84 = v83;
                    }
                  }
                }
                BOOL v85 = v67-- <= 2;
                int v68 = v98;
              }
              while (!v85);
            }
            return result;
          }
          unint64_t v13 = (unint64_t)v12 >> 1;
          uint64_t v14 = &v9[8 * ((unint64_t)v12 >> 1)];
          if ((unint64_t)v11 < 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((void **)v14, (void **)v9, (void **)v95);
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((void **)v9, (void **)v14, (void **)v95);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((void **)v9 + 1, (void **)v14 - 1, (void **)v92);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((void **)v9 + 2, (void **)&v9[8 * v13 + 8], (void **)v91);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((void **)v14 - 1, (void **)v14, (void **)&v9[8 * v13 + 8]);
            uint64_t v15 = *(void **)v9;
            *(void *)uint64_t v9 = *(void *)v14;
            *(void *)uint64_t v14 = v15;
          }
          --a3;
          uint64_t v16 = *(void **)v9;
          uint64_t v17 = v9;
          if (a4) {
            break;
          }
          uint64_t v17 = v9;
          if (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*((void **)v9 - 1), *(void **)v9))
          {
            break;
          }
          uint64_t result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v16, *(void **)v95);
          if (result)
          {
            do
            {
              uint64_t v31 = (void *)*((void *)v9 + 1);
              v9 += 8;
              uint64_t result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v16, v31);
            }
            while ((result & 1) == 0);
          }
          else
          {
            signed int v32 = v9 + 8;
            do
            {
              uint64_t v9 = v32;
              if (v32 >= a2) {
                break;
              }
              v32 += 8;
              uint64_t result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v16, *(void **)v9);
            }
            while (!result);
          }
          uint64_t v33 = a2;
          if (v9 < a2)
          {
            uint64_t v33 = a2;
            do
            {
              int v34 = (void *)*((void *)v33 - 1);
              v33 -= 8;
              uint64_t result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v16, v34);
            }
            while ((result & 1) != 0);
          }
          int v35 = a2;
          if (v9 < v33)
          {
            int v36 = *(void **)v9;
            int v37 = *(void **)v33;
            do
            {
              *(void *)uint64_t v9 = v37;
              *(void *)uint64_t v33 = v36;
              do
              {
                signed int v38 = (void *)*((void *)v9 + 1);
                v9 += 8;
                int v36 = v38;
              }
              while (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v16, v38));
              do
              {
                unsigned int v39 = (void *)*((void *)v33 - 1);
                v33 -= 8;
                int v37 = v39;
                uint64_t result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v16, v39);
              }
              while ((result & 1) != 0);
            }
            while (v9 < v33);
          }
          int v40 = v9 - 8;
          BOOL v4 = (unint64_t)(v9 - 8) >= v10;
          BOOL v5 = v9 - 8 == (char *)v10;
          a2 = v35;
          if (v9 - 8 != (char *)v10) {
            *(void *)unint64_t v10 = *(void *)v40;
          }
          a4 = 0;
          *(void *)int v40 = v16;
        }
        do
        {
          uint64_t v18 = v17;
          int v20 = (void *)*((void *)v17 + 1);
          v17 += 8;
          unint64_t v19 = v20;
        }
        while (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v20, v16));
        uint64_t v97 = a3;
        uint64_t v21 = a2;
        if (v18 == (char *)v10)
        {
          uint64_t v21 = a2;
          do
          {
            if (v17 >= v21) {
              break;
            }
            signed int v23 = (void *)*((void *)v21 - 1);
            v21 -= 8;
          }
          while (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v23, v16));
        }
        else
        {
          do
          {
            int v22 = (void *)*((void *)v21 - 1);
            v21 -= 8;
          }
          while (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v22, v16));
        }
        unint64_t v8 = (char *)v10;
        unsigned int v24 = a2;
        if (v17 < v21)
        {
          uint64_t v25 = *(void **)v21;
          int v26 = v17;
          int v27 = v21;
          do
          {
            *(void *)int v26 = v25;
            *(void *)int v27 = v19;
            do
            {
              uint64_t v18 = v26;
              uint64_t v28 = (void *)*((void *)v26 + 1);
              v26 += 8;
              unint64_t v19 = v28;
            }
            while (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v28, v16));
            do
            {
              unint64_t v29 = (void *)*((void *)v27 - 1);
              v27 -= 8;
              uint64_t v25 = v29;
            }
            while (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v29, v16));
          }
          while (v26 < v27);
        }
        if (v18 != v8) {
          *(void *)unint64_t v8 = *(void *)v18;
        }
        *(void *)uint64_t v18 = v16;
        BOOL v4 = v17 >= v21;
        a2 = v24;
        a3 = v97;
        if (v4) {
          break;
        }
LABEL_31:
        uint64_t result = std::__introsort<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Value> const*> &,google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Value> const**,false>(v8, v18, v97, a4 & 1);
        a4 = 0;
        uint64_t v9 = v18 + 8;
      }
      BOOL v30 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Value> const*> &,google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Value> const**>((void **)v8, (void **)v18);
      uint64_t v9 = v18 + 8;
      uint64_t result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Value> const*> &,google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Value> const**>((void **)v18 + 1, (void **)v24);
      if (result) {
        break;
      }
      if (!v30) {
        goto LABEL_31;
      }
    }
    a2 = v18;
    if (!v30) {
      continue;
    }
    return result;
  }
}

google::protobuf::Arena **google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(google::protobuf::Arena *a1, google::protobuf::Arena *a2, google::protobuf::Arena *a3)
{
  if (!a3) {
    operator new();
  }
  result[1] = 0;
  result[2] = (google::protobuf::Arena *)&google::protobuf::internal::fixed_address_empty_string;
  result[3] = 0;
  result[4] = a3;
  *uint64_t result = (google::protobuf::Arena *)&unk_1EF0DB820;
  result[6] = a1;
  result[7] = a2;
  *((_DWORD *)result + 1CoreML::Specification::Scaler::New(this, 0) = 3;
  return result;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::MapEntryWrapper::value(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::MapEntryWrapper::key(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::InternalSerializeWithCachedSizesToArray(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  unint64_t v6 = (const void **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 136))(a1);
  *a3 = 10;
  unint64_t v7 = google::protobuf::io::CodedOutputStream::WriteStringWithSizeToArray(v6, a3 + 1);
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 144))(a1);
  *unint64_t v7 = 18;
  uint64_t v9 = v7 + 1;
  unsigned int v10 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 120))(v8);
  if (v10 < 0x80)
  {
    LOBYTE(v11) = v10;
  }
  else
  {
    do
    {
      *v9++ = v10 | 0x80;
      unsigned int v11 = v10 >> 7;
      unsigned int v12 = v10 >> 14;
      v10 >>= 7;
    }
    while (v12);
  }
  unsigned char *v9 = v11;
  unint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)v8 + 128);

  return v13(v8, a2, v9 + 1);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::GetCachedSize(_DWORD *a1)
{
  int v2 = a1[10];
  if (v2)
  {
    uint64_t v6 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 136))(a1);
    int v7 = *(unsigned __int8 *)(v6 + 23);
    if ((v7 & 0x80u) != 0) {
      int v7 = *(_DWORD *)(v6 + 8);
    }
    unsigned int v3 = v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((a1[10] & 2) != 0) {
      goto LABEL_3;
    }
LABEL_7:
    unsigned int v5 = 0;
    return v5 + v3;
  }
  unsigned int v3 = 0;
  if ((v2 & 2) == 0) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v4 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 144))(a1);
  unsigned int v5 = *(_DWORD *)(v4 + 40) + ((9 * (__clz(*(_DWORD *)(v4 + 40) | 1) ^ 0x1F) + 73) >> 6) + 1;
  return v5 + v3;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::SerializeWithCachedSizes(uint64_t a1, google::protobuf::io::CodedOutputStream *a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 136))(a1);
  google::protobuf::internal::WireFormatLite::WriteString(1u, v4, a2);
  unsigned int v5 = (google::protobuf::internal::WireFormatLite *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 144))(a1);

  return google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(v5, a2, v6, v7);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::ByteSizeLong(_DWORD *a1)
{
  int v2 = a1[10];
  if (v2)
  {
    uint64_t v7 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 136))(a1);
    int v8 = *(unsigned __int8 *)(v7 + 23);
    if ((v8 & 0x80u) != 0) {
      int v8 = *(_DWORD *)(v7 + 8);
    }
    uint64_t v3 = (int)(v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6)) + 1;
    if ((a1[10] & 2) != 0) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v6 = 0;
    return v6 + v3;
  }
  uint64_t v3 = 0;
  if ((v2 & 2) == 0) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v4 = (CoreML::Specification::MILSpec::Value *)(*(uint64_t (**)(_DWORD *))(*(void *)a1 + 144))(a1);
  uint64_t v5 = CoreML::Specification::MILSpec::Value::ByteSizeLong(v4);
  uint64_t v6 = v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  return v6 + v3;
}

uint64_t CoreML::Specification::MILSpec::Value::ByteSizeLong(CoreML::Specification::MILSpec::Value *this)
{
  uint64_t v2 = *((void *)this + 2);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(void *)(v2 + 8)) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v5 = 0;
    goto LABEL_8;
  }
  if (!*(unsigned char *)(v2 + 23)) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v4 = *(void *)(v2 + 8);
  if ((v3 & 0x80u) == 0) {
    uint64_t v4 = v3;
  }
  uint64_t v5 = v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_8:
  if (this != (CoreML::Specification::MILSpec::Value *)&CoreML::Specification::MILSpec::_Value_default_instance_)
  {
    uint64_t v6 = (CoreML::Specification::MILSpec::TensorType **)*((void *)this + 3);
    if (v6)
    {
      uint64_t v7 = CoreML::Specification::MILSpec::ValueType::ByteSizeLong(v6);
      v5 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
  }
  int v8 = *((_DWORD *)this + 11);
  if (v8 == 5)
  {
    uint64_t v9 = CoreML::Specification::MILSpec::Value_BlobFileValue::ByteSizeLong(*((CoreML::Specification::MILSpec::Value_BlobFileValue **)this
                                                                           + 4));
    goto LABEL_15;
  }
  if (v8 == 3)
  {
    uint64_t v9 = CoreML::Specification::MILSpec::Value_ImmediateValue::ByteSizeLong(*((CoreML::Specification::MILSpec::TensorValue ***)this
                                                                            + 4));
LABEL_15:
    v5 += v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  *((_DWORD *)this + 1CoreML::Specification::Scaler::New(this, 0) = v5;
  return v5;
}

uint64_t CoreML::Specification::MILSpec::ValueType::ByteSizeLong(CoreML::Specification::MILSpec::TensorType **this)
{
  switch(*((_DWORD *)this + 7))
  {
    case 1:
      uint64_t v2 = CoreML::Specification::MILSpec::TensorType::ByteSizeLong(this[2]);
      goto LABEL_8;
    case 2:
      uint64_t v2 = CoreML::Specification::MILSpec::ListType::ByteSizeLong(this[2]);
      goto LABEL_8;
    case 3:
      uint64_t v2 = CoreML::Specification::MILSpec::TupleType::ByteSizeLong(this[2]);
      goto LABEL_8;
    case 4:
      uint64_t v2 = CoreML::Specification::MILSpec::DictionaryType::ByteSizeLong(this[2]);
      goto LABEL_8;
    case 5:
      uint64_t v2 = (uint64_t)CoreML::Specification::MILSpec::StateType::ByteSizeLong(this[2]);
LABEL_8:
      uint64_t result = v2 + ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
      break;
    default:
      uint64_t result = 0;
      break;
  }
  *((_DWORD *)this + 6) = result;
  return result;
}

uint64_t CoreML::Specification::MILSpec::Value_ImmediateValue::ByteSizeLong(CoreML::Specification::MILSpec::TensorValue **this)
{
  switch(*((_DWORD *)this + 7))
  {
    case 1:
      uint64_t v2 = CoreML::Specification::MILSpec::TensorValue::ByteSizeLong(this[2]);
      goto LABEL_7;
    case 2:
      uint64_t v2 = CoreML::Specification::MILSpec::TupleValue::ByteSizeLong(this[2]);
      goto LABEL_7;
    case 3:
      uint64_t v2 = CoreML::Specification::MILSpec::ListValue::ByteSizeLong(this[2]);
      goto LABEL_7;
    case 4:
      uint64_t v2 = CoreML::Specification::MILSpec::DictionaryValue::ByteSizeLong(this[2]);
LABEL_7:
      uint64_t result = v2 + ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
      break;
    default:
      uint64_t result = 0;
      break;
  }
  *((_DWORD *)this + 6) = result;
  return result;
}

uint64_t CoreML::Specification::MILSpec::Value_BlobFileValue::ByteSizeLong(CoreML::Specification::MILSpec::Value_BlobFileValue *this)
{
  uint64_t v1 = *((void *)this + 2);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 23);
  if (*(char *)(v1 + 23) < 0)
  {
    if (*(void *)(v1 + 8)) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v4 = 0;
    goto LABEL_8;
  }
  if (!*(unsigned char *)(v1 + 23)) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v3 = *(void *)(v1 + 8);
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = v2;
  }
  uint64_t v4 = v3 + ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_8:
  uint64_t v5 = *((void *)this + 3);
  if (v5) {
    v4 += ((9 * (__clz(v5 | 1) ^ 0x3F) + 73) >> 6) + 1;
  }
  *((_DWORD *)this + 8) = v4;
  return v4;
}

uint64_t CoreML::Specification::MILSpec::TensorValue::ByteSizeLong(CoreML::Specification::MILSpec::TensorValue *this)
{
  switch(*((_DWORD *)this + 7))
  {
    case 1:
      uint64_t v2 = (unsigned int *)*((void *)this + 2);
      uint64_t v3 = v2[4];
      uint64_t v4 = 4 * v3;
      if (v3) {
        goto LABEL_7;
      }
      goto LABEL_3;
    case 2:
      uint64_t v7 = CoreML::Specification::MILSpec::TensorValue_RepeatedInts::ByteSizeLong(*((CoreML::Specification::MILSpec::TensorValue_RepeatedInts **)this
                                                                                  + 2));
      goto LABEL_14;
    case 3:
      uint64_t v2 = (unsigned int *)*((void *)this + 2);
      uint64_t v4 = v2[4];
      if (v4) {
        goto LABEL_7;
      }
      goto LABEL_3;
    case 4:
      uint64_t v7 = CoreML::Specification::MILSpec::TensorValue_RepeatedStrings::ByteSizeLong(*((CoreML::Specification::MILSpec::TensorValue_RepeatedStrings **)this
                                                                                     + 2));
      goto LABEL_14;
    case 5:
      uint64_t v7 = CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts::ByteSizeLong(*((CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts **)this
                                                                                      + 2));
      goto LABEL_14;
    case 6:
      uint64_t v2 = (unsigned int *)*((void *)this + 2);
      uint64_t v8 = v2[4];
      uint64_t v4 = 8 * v8;
      if (v8)
      {
LABEL_7:
        if ((v4 & 0x80000000) != 0) {
          uint64_t v5 = 11;
        }
        else {
          uint64_t v5 = ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1;
        }
      }
      else
      {
LABEL_3:
        uint64_t v5 = 0;
      }
      uint64_t v10 = v5 + v4;
      v2[8] = v4;
      v2[9] = v10;
      uint64_t v9 = v10 + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6);
      goto LABEL_17;
    case 7:
      uint64_t v7 = CoreML::Specification::MILSpec::TensorValue_RepeatedBytes::ByteSizeLong(*((CoreML::Specification::MILSpec::TensorValue_RepeatedBytes **)this
                                                                                   + 2));
LABEL_14:
      uint64_t v9 = v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
LABEL_17:
      uint64_t result = v9 + 1;
      break;
    default:
      uint64_t result = 0;
      break;
  }
  *((_DWORD *)this + 6) = result;
  return result;
}

uint64_t CoreML::Specification::MILSpec::TupleValue::ByteSizeLong(CoreML::Specification::MILSpec::TupleValue *this)
{
  int v2 = *((_DWORD *)this + 6);
  if (v2)
  {
    int v3 = 0;
    uint64_t v4 = *((unsigned int *)this + 6);
    do
    {
      uint64_t v5 = CoreML::Specification::MILSpec::Value::ByteSizeLong(*(CoreML::Specification::MILSpec::Value **)(*((void *)this + 4) + 8 * v3 + 8));
      v4 += v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6);
      ++v3;
    }
    while (v2 != v3);
  }
  else
  {
    uint64_t v4 = 0;
  }
  *((_DWORD *)this + 1CoreML::Specification::Scaler::New(this, 0) = v4;
  return v4;
}

uint64_t CoreML::Specification::MILSpec::ListValue::ByteSizeLong(CoreML::Specification::MILSpec::ListValue *this)
{
  int v2 = *((_DWORD *)this + 6);
  if (v2)
  {
    int v3 = 0;
    uint64_t v4 = *((unsigned int *)this + 6);
    do
    {
      uint64_t v5 = CoreML::Specification::MILSpec::Value::ByteSizeLong(*(CoreML::Specification::MILSpec::Value **)(*((void *)this + 4) + 8 * v3 + 8));
      v4 += v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6);
      ++v3;
    }
    while (v2 != v3);
  }
  else
  {
    uint64_t v4 = 0;
  }
  *((_DWORD *)this + 1CoreML::Specification::Scaler::New(this, 0) = v4;
  return v4;
}

uint64_t CoreML::Specification::MILSpec::DictionaryValue::ByteSizeLong(CoreML::Specification::MILSpec::DictionaryValue *this)
{
  int v2 = *((_DWORD *)this + 6);
  if (v2)
  {
    int v3 = 0;
    uint64_t v4 = *((unsigned int *)this + 6);
    do
    {
      uint64_t v5 = CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair::ByteSizeLong(*(CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair **)(*((void *)this + 4) + 8 * v3 + 8));
      v4 += v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6);
      ++v3;
    }
    while (v2 != v3);
  }
  else
  {
    uint64_t v4 = 0;
  }
  *((_DWORD *)this + 1CoreML::Specification::Scaler::New(this, 0) = v4;
  return v4;
}

uint64_t CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair::ByteSizeLong(CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair *this)
{
  if (this == (CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair *)&CoreML::Specification::MILSpec::_DictionaryValue_KeyValuePair_default_instance_)
  {
    uint64_t v4 = 0;
  }
  else
  {
    int v2 = (CoreML::Specification::MILSpec::Value *)*((void *)this + 2);
    if (v2)
    {
      uint64_t v3 = CoreML::Specification::MILSpec::Value::ByteSizeLong(v2);
      uint64_t v4 = v3 + ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    else
    {
      uint64_t v4 = 0;
    }
    uint64_t v5 = (CoreML::Specification::MILSpec::Value *)*((void *)this + 3);
    if (v5)
    {
      uint64_t v6 = CoreML::Specification::MILSpec::Value::ByteSizeLong(v5);
      v4 += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
  }
  *((_DWORD *)this + 8) = v4;
  return v4;
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedInts::ByteSizeLong(CoreML::Specification::MILSpec::TensorValue_RepeatedInts *this)
{
  uint64_t v2 = google::protobuf::internal::WireFormatLite::Int32Size(*((_DWORD *)this + 4), *((void *)this + 3));
  if (v2)
  {
    int v3 = v2;
    if ((v2 & 0x80000000) != 0) {
      uint64_t v4 = 11;
    }
    else {
      uint64_t v4 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
  }
  else
  {
    int v3 = 0;
    uint64_t v4 = 0;
  }
  uint64_t result = v4 + v2;
  *((_DWORD *)this + 8) = v3;
  *((_DWORD *)this + 9) = result;
  return result;
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedStrings::ByteSizeLong(CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *this)
{
  uint64_t v1 = *((unsigned int *)this + 6);
  if ((int)v1 < 1)
  {
    uint64_t v3 = *((unsigned int *)this + 6);
  }
  else
  {
    uint64_t v2 = (uint64_t *)(*((void *)this + 4) + 8);
    uint64_t v3 = *((unsigned int *)this + 6);
    do
    {
      uint64_t v4 = *v2++;
      uint64_t v5 = *(unsigned __int8 *)(v4 + 23);
      uint64_t v6 = *(void *)(v4 + 8);
      if ((v5 & 0x80u) == 0) {
        uint64_t v6 = v5;
      }
      v3 += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6);
      --v1;
    }
    while (v1);
  }
  *((_DWORD *)this + 1CoreML::Specification::Scaler::New(this, 0) = v3;
  return v3;
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts::ByteSizeLong(CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *this)
{
  uint64_t v1 = *((unsigned int *)this + 4);
  if ((int)v1 < 1)
  {
    uint64_t v2 = 0;
LABEL_8:
    uint64_t v5 = 0;
    goto LABEL_10;
  }
  uint64_t v2 = 0;
  uint64_t v3 = (uint64_t *)(*((void *)this + 3) + 8);
  do
  {
    uint64_t v4 = *v3++;
    v2 += (9 * (__clz(v4 | 1) ^ 0x3F) + 73) >> 6;
    --v1;
  }
  while (v1);
  if (!v2) {
    goto LABEL_8;
  }
  if ((v2 & 0x80000000) != 0) {
    uint64_t v5 = 11;
  }
  else {
    uint64_t v5 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_10:
  uint64_t v6 = v5 + v2;
  *((_DWORD *)this + 8) = v2;
  *((_DWORD *)this + 9) = v6;
  return v6;
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedBytes::ByteSizeLong(CoreML::Specification::MILSpec::TensorValue_RepeatedBytes *this)
{
  uint64_t v1 = *((void *)this + 2);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 23);
  if (*(char *)(v1 + 23) < 0)
  {
    if (*(void *)(v1 + 8)) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v4 = 0;
    goto LABEL_8;
  }
  if (!*(unsigned char *)(v1 + 23)) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v3 = *(void *)(v1 + 8);
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = v2;
  }
  uint64_t v4 = v3 + ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_8:
  *((_DWORD *)this + 6) = v4;
  return v4;
}

uint64_t CoreML::Specification::MILSpec::TensorType::ByteSizeLong(CoreML::Specification::MILSpec::TensorType *this)
{
  int v2 = *((_DWORD *)this + 6);
  if (v2)
  {
    int v3 = 0;
    uint64_t v4 = *((unsigned int *)this + 6);
    do
      v4 += CoreML::Specification::MILSpec::Dimension::ByteSizeLong(*(CoreML::Specification::MILSpec::Dimension **)(*((void *)this + 4) + 8 * v3++ + 8))
          + 1;
    while (v2 != v3);
  }
  else
  {
    uint64_t v4 = 0;
  }
  uint64_t v5 = (void *)*((void *)this + 8);
  uint64_t v6 = *(unsigned int *)v5;
  google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::begin(v15, v5);
  uint64_t v7 = 0;
  uint64_t v8 = v6 + v4;
  while (v15[0])
  {
    uint64_t v9 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(*((google::protobuf::Arena **)v15[0] + 3), (google::protobuf::Arena *)(*((void *)v15[0] + 3) + 24), *((google::protobuf::Arena **)this + 5));
    if (v7 != v9)
    {
      if (v7) {
        (*((void (**)(google::protobuf::Arena **))*v7 + 1))(v7);
      }
      uint64_t v7 = v9;
    }
    uint64_t v10 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::ByteSizeLong(v7);
    v8 += v10 + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6);
    google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::KeyValuePair const>::operator++(v15);
  }
  if (v7) {
    (*((void (**)(google::protobuf::Arena **))*v7 + 1))(v7);
  }
  uint64_t v11 = *((void *)this + 9);
  if (v11) {
    v8 += ((9 * (__clz(v11 | 1) ^ 0x3F) + 73) >> 6) + 1;
  }
  int v12 = *((_DWORD *)this + 20);
  if (v12)
  {
    if (v12 < 0) {
      uint64_t v13 = 11;
    }
    else {
      uint64_t v13 = ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    v8 += v13;
  }
  *((_DWORD *)this + 21) = v8;
  return v8;
}

void sub_19EB1D4D0(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CoreML::Specification::MILSpec::ListType::ByteSizeLong(CoreML::Specification::MILSpec::ListType *this)
{
  if (this == (CoreML::Specification::MILSpec::ListType *)&CoreML::Specification::MILSpec::_ListType_default_instance_)
  {
    uint64_t v4 = 0;
  }
  else
  {
    int v2 = (CoreML::Specification::MILSpec::ValueType *)*((void *)this + 2);
    if (v2)
    {
      uint64_t v3 = CoreML::Specification::MILSpec::ValueType::ByteSizeLong(v2);
      uint64_t v4 = v3 + ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    else
    {
      uint64_t v4 = 0;
    }
    uint64_t v5 = (CoreML::Specification::MILSpec::Dimension *)*((void *)this + 3);
    if (v5) {
      v4 += CoreML::Specification::MILSpec::Dimension::ByteSizeLong(v5) + 2;
    }
  }
  *((_DWORD *)this + 8) = v4;
  return v4;
}

uint64_t CoreML::Specification::MILSpec::TupleType::ByteSizeLong(CoreML::Specification::MILSpec::TupleType *this)
{
  int v2 = *((_DWORD *)this + 6);
  if (v2)
  {
    int v3 = 0;
    uint64_t v4 = *((unsigned int *)this + 6);
    do
    {
      uint64_t v5 = CoreML::Specification::MILSpec::ValueType::ByteSizeLong(*(CoreML::Specification::MILSpec::ValueType **)(*((void *)this + 4) + 8 * v3 + 8));
      v4 += v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6);
      ++v3;
    }
    while (v2 != v3);
  }
  else
  {
    uint64_t v4 = 0;
  }
  *((_DWORD *)this + 1CoreML::Specification::Scaler::New(this, 0) = v4;
  return v4;
}

uint64_t CoreML::Specification::MILSpec::DictionaryType::ByteSizeLong(CoreML::Specification::MILSpec::DictionaryType *this)
{
  if (this == (CoreML::Specification::MILSpec::DictionaryType *)&CoreML::Specification::MILSpec::_DictionaryType_default_instance_)
  {
    uint64_t v4 = 0;
  }
  else
  {
    int v2 = (CoreML::Specification::MILSpec::ValueType *)*((void *)this + 2);
    if (v2)
    {
      uint64_t v3 = CoreML::Specification::MILSpec::ValueType::ByteSizeLong(v2);
      uint64_t v4 = v3 + ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    else
    {
      uint64_t v4 = 0;
    }
    uint64_t v5 = (CoreML::Specification::MILSpec::ValueType *)*((void *)this + 3);
    if (v5)
    {
      uint64_t v6 = CoreML::Specification::MILSpec::ValueType::ByteSizeLong(v5);
      v4 += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
  }
  *((_DWORD *)this + 8) = v4;
  return v4;
}

CoreML::Specification::MILSpec::ValueType *CoreML::Specification::MILSpec::StateType::ByteSizeLong(CoreML::Specification::MILSpec::StateType *this)
{
  if (this == (CoreML::Specification::MILSpec::StateType *)&CoreML::Specification::MILSpec::_StateType_default_instance_)
  {
    uint64_t result = 0;
  }
  else
  {
    uint64_t result = (CoreML::Specification::MILSpec::ValueType *)*((void *)this + 2);
    if (result)
    {
      uint64_t v3 = CoreML::Specification::MILSpec::ValueType::ByteSizeLong(result);
      uint64_t result = (CoreML::Specification::MILSpec::ValueType *)(v3 + ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1);
    }
  }
  *((_DWORD *)this + 6) = result;
  return result;
}

unint64_t CoreML::Specification::MILSpec::Dimension::ByteSizeLong(CoreML::Specification::MILSpec::Dimension *this)
{
  int v1 = *((_DWORD *)this + 7);
  if (v1 == 2)
  {
    uint64_t v4 = *((void *)this + 2);
    unint64_t v3 = 2 * *(unsigned __int8 *)(v4 + 16);
    *(_DWORD *)(v4 + 2CoreML::Specification::Scaler::New(this, 0) = v3;
  }
  else
  {
    if (v1 != 1)
    {
      unint64_t v5 = 0;
      goto LABEL_9;
    }
    uint64_t v2 = *((void *)this + 2);
    unint64_t v3 = *(void *)(v2 + 16);
    if (v3) {
      unint64_t v3 = ((9 * (__clz(v3 | 1) ^ 0x3F) + 73) >> 6) + 1;
    }
    *(_DWORD *)(v2 + 24) = v3;
  }
  unint64_t v5 = v3 + 2;
LABEL_9:
  *((_DWORD *)this + 6) = v5;
  return v5;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::MergePartialFromCodedStream(uint64_t a1, google::protobuf::io::CodedInputStream *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      while (1)
      {
        unint64_t v5 = *(char **)this;
        if (*(void *)this >= *((void *)this + 1))
        {
          LODWORD(TagFallback) = 0;
        }
        else
        {
          unint64_t TagFallback = *v5;
          if ((*v5 & 0x80000000) == 0)
          {
            *(void *)this = v5 + 1;
            goto LABEL_6;
          }
        }
        unint64_t TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(this, TagFallback);
LABEL_6:
        if (TagFallback != 10) {
          break;
        }
        *(_DWORD *)(a1 + 40) |= 1u;
        uint64_t v7 = *(long long **)(a1 + 16);
        if (v7 == &google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstance();
        }
        uint64_t result = google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)this, (std::string *)v7);
        if (!result) {
          return result;
        }
        int v9 = *(_DWORD *)(a1 + 40) | 1;
        *(_DWORD *)(a1 + 4CoreML::Specification::Scaler::New(this, 0) = v9;
        uint64_t v10 = *(char **)this;
        if (*(void *)this < *((void *)this + 1) && *v10 == 18)
        {
          *(void *)this = v10 + 1;
          goto LABEL_19;
        }
      }
      if (TagFallback != 18) {
        break;
      }
      int v9 = *(_DWORD *)(a1 + 40);
LABEL_19:
      *(_DWORD *)(a1 + 4CoreML::Specification::Scaler::New(this, 0) = v9 | 2;
      Aligned = *(google::protobuf::Arena ***)(a1 + 24);
      if (!Aligned)
      {
        int v12 = *(google::protobuf::Arena **)(a1 + 32);
        if (!v12) {
          operator new();
        }
        CoreML::Specification::MILSpec::Value::Value((CoreML::Specification::MILSpec::Value *)Aligned);
        uint64_t v13 = google::protobuf::Arena::AllocateAligned(v12, 0, 24);
        unsigned int *v13 = (google::protobuf::Arena *)Aligned;
        v13[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Value>;
        uint64_t v14 = (unint64_t *)((char *)v12 + 32);
        do
          unint64_t v15 = __ldxr(v14);
        while (__stxr((unint64_t)v13, v14));
        v13[2] = (google::protobuf::Arena *)v15;
        *(void *)(a1 + 24) = Aligned;
      }
      uint64_t v16 = *(char **)this;
      if (*(void *)this >= *((void *)this + 1) || *v16 < 0)
      {
        int VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(this);
        if (VarintSizeAsIntFallback < 0) {
          return 0;
        }
      }
      else
      {
        int VarintSizeAsIntFallback = *v16;
        *(void *)this = v16 + 1;
      }
      int v18 = google::protobuf::io::CodedInputStream::PushLimit(this, VarintSizeAsIntFallback);
      int v20 = *((_DWORD *)this + 13);
      BOOL v21 = __OFSUB__(v20--, 1);
      *((_DWORD *)this + 13) = v20;
      if (v20 < 0 != v21) {
        return 0;
      }
      int v22 = v18;
      uint64_t result = CoreML::Specification::MILSpec::Value::MergePartialFromCodedStream((CoreML::Specification::MILSpec::Value *)Aligned, this, v19);
      if (!result) {
        return result;
      }
      uint64_t result = google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(this, v22);
      if (!result) {
        return result;
      }
      *(_DWORD *)(a1 + 40) |= 2u;
      if (*(void *)this == *((void *)this + 1)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)this + 36) = 1;
        return result;
      }
    }
    if (!TagFallback || (TagFallback & 7) == 4) {
      return 1;
    }
    if ((google::protobuf::internal::WireFormatLite::SkipField(this, (google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
  }
    }
}

void sub_19EB1D9F4(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C40000F1E19);
  _Unwind_Resume(a1);
}

CoreML::Specification::MILSpec::Value *CoreML::Specification::MILSpec::Value::Value(CoreML::Specification::MILSpec::Value *this)
{
  *(void *)this = &unk_1EF0DA400;
  *((void *)this + 1) = 0;
  if (this != (CoreML::Specification::MILSpec::Value *)&CoreML::Specification::MILSpec::_Value_default_instance_) {
    CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(this);
  }
  *((void *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 3) = 0;
  *((void *)this + 5) = 0;
  return this;
}

void sub_19EB1DA84(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::Value::MergePartialFromCodedStream(CoreML::Specification::MILSpec::Value *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  unint64_t v5 = (std::string **)((char *)this + 16);
  while (2)
  {
    while (1)
    {
      uint64_t v6 = *(char **)a2;
      if (*(void *)a2 >= *((void *)a2 + 1)) {
        break;
      }
      uint64_t v7 = *v6;
      if (*v6 < 1) {
        goto LABEL_7;
      }
      *(void *)a2 = v6 + 1;
      unint64_t v8 = v7 | 0x100000000;
      if ((v8 & 0x100000000) != 0) {
        goto LABEL_8;
      }
LABEL_27:
      if (v8) {
        BOOL v18 = (v8 & 7) == 4;
      }
      else {
        BOOL v18 = 1;
      }
      if (v18) {
        return 1;
      }
      if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v8, a3) & 1) == 0) {
        goto LABEL_56;
      }
    }
    LODWORD(v7) = 0;
LABEL_7:
    unsigned int TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v7);
    unint64_t v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
    if ((v8 & 0x100000000) == 0) {
      goto LABEL_27;
    }
LABEL_8:
    switch(v8 >> 3)
    {
      case 1u:
        if (v8 != 10) {
          goto LABEL_27;
        }
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
        }
        uint64_t result = google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)a2, *v5);
        if (!result) {
          return result;
        }
        uint64_t v11 = (unsigned int *)*v5;
        if (SHIBYTE((*v5)->__r_.__value_.__r.__words[2]) < 0)
        {
          uint64_t v11 = *(unsigned int **)v11;
          std::string::size_type size = (*v5)->__r_.__value_.__l.__size_;
        }
        else
        {
          LODWORD(size) = HIBYTE((*v5)->__r_.__value_.__r.__words[2]);
        }
        if (!google::protobuf::internal::WireFormatLite::VerifyUtf8String(v11, size, 0, (uint64_t)"CoreML.Specification.MILSpec.Value.docString"))goto LABEL_56; {
        continue;
        }
      case 2u:
        if (v8 != 18) {
          goto LABEL_27;
        }
        uint64_t v13 = (CoreML::Specification::MILSpec::ValueType *)*((void *)this + 3);
        if (!v13) {
          operator new();
        }
        uint64_t v14 = *(char **)a2;
        if (*(void *)a2 >= *((void *)a2 + 1) || *v14 < 0)
        {
          int VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (VarintSizeAsIntFallback < 0) {
            goto LABEL_56;
          }
        }
        else
        {
          int VarintSizeAsIntFallback = *v14;
          *(void *)a2 = v14 + 1;
        }
        int v23 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
        int v25 = *((_DWORD *)a2 + 13);
        BOOL v26 = __OFSUB__(v25--, 1);
        *((_DWORD *)a2 + 13) = v25;
        if (v25 < 0 != v26) {
          goto LABEL_56;
        }
        int v27 = v23;
        uint64_t result = CoreML::Specification::MILSpec::ValueType::MergePartialFromCodedStream(v13, a2, v24);
        if (!result) {
          return result;
        }
        goto LABEL_52;
      case 3u:
        if (v8 != 26) {
          goto LABEL_27;
        }
        if (*((_DWORD *)this + 11) != 3)
        {
          CoreML::Specification::MILSpec::Value::clear_value((uint64_t)this);
          *((_DWORD *)this + 11) = 3;
          operator new();
        }
        uint64_t v16 = (CoreML::Specification::MILSpec::Value_ImmediateValue *)*((void *)this + 4);
        unsigned int v19 = *(char **)a2;
        if (*(void *)a2 >= *((void *)a2 + 1) || *v19 < 0)
        {
          int v20 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v20 < 0) {
            goto LABEL_56;
          }
        }
        else
        {
          int v20 = *v19;
          *(void *)a2 = v19 + 1;
        }
        int v28 = google::protobuf::io::CodedInputStream::PushLimit(a2, v20);
        int v30 = *((_DWORD *)a2 + 13);
        BOOL v26 = __OFSUB__(v30--, 1);
        *((_DWORD *)a2 + 13) = v30;
        if (v30 < 0 != v26) {
          goto LABEL_56;
        }
        int v27 = v28;
        uint64_t result = CoreML::Specification::MILSpec::Value_ImmediateValue::MergePartialFromCodedStream(v16, a2, v29);
        if (!result) {
          return result;
        }
        goto LABEL_52;
      case 5u:
        if (v8 != 42) {
          goto LABEL_27;
        }
        if (*((_DWORD *)this + 11) != 5)
        {
          CoreML::Specification::MILSpec::Value::clear_value((uint64_t)this);
          *((_DWORD *)this + 11) = 5;
          operator new();
        }
        uint64_t v17 = (CoreML::Specification::MILSpec::Value_BlobFileValue *)*((void *)this + 4);
        BOOL v21 = *(char **)a2;
        if (*(void *)a2 >= *((void *)a2 + 1) || *v21 < 0)
        {
          int v22 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v22 < 0) {
            goto LABEL_56;
          }
        }
        else
        {
          int v22 = *v21;
          *(void *)a2 = v21 + 1;
        }
        int v31 = google::protobuf::io::CodedInputStream::PushLimit(a2, v22);
        int v33 = *((_DWORD *)a2 + 13);
        BOOL v26 = __OFSUB__(v33--, 1);
        *((_DWORD *)a2 + 13) = v33;
        if (v33 < 0 != v26) {
          goto LABEL_56;
        }
        int v27 = v31;
        uint64_t result = CoreML::Specification::MILSpec::Value_BlobFileValue::MergePartialFromCodedStream(v17, (char **)a2, v32);
        if (!result) {
          return result;
        }
LABEL_52:
        if (google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v27)) {
          continue;
        }
LABEL_56:
        uint64_t result = 0;
        break;
      default:
        goto LABEL_27;
    }
    return result;
  }
}

void sub_19EB1DE18(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

CoreML::Specification::MILSpec::ValueType *CoreML::Specification::MILSpec::ValueType::ValueType(CoreML::Specification::MILSpec::ValueType *this)
{
  *(void *)this = &unk_1EF0DA9F0;
  *((void *)this + 1) = 0;
  if (this != (CoreML::Specification::MILSpec::ValueType *)&CoreML::Specification::MILSpec::_ValueType_default_instance_) {
    CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(this);
  }
  *((void *)this + 3) = 0;
  return this;
}

void sub_19EB1DEC8(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::ValueType::MergePartialFromCodedStream(CoreML::Specification::MILSpec::ValueType *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  while (2)
  {
    while (1)
    {
      unint64_t v5 = *(char **)a2;
      if (*(void *)a2 >= *((void *)a2 + 1)) {
        break;
      }
      uint64_t v6 = *v5;
      if (*v5 < 1) {
        goto LABEL_6;
      }
      *(void *)a2 = v5 + 1;
      unint64_t v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) != 0) {
        goto LABEL_7;
      }
LABEL_23:
      if (v7) {
        BOOL v14 = (v7 & 7) == 4;
      }
      else {
        BOOL v14 = 1;
      }
      if (v14) {
        return 1;
      }
      if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0) {
        goto LABEL_69;
      }
    }
    LODWORD(v6) = 0;
LABEL_6:
    unsigned int TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v6);
    unint64_t v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
    if ((v7 & 0x100000000) == 0) {
      goto LABEL_23;
    }
LABEL_7:
    switch(v7 >> 3)
    {
      case 1u:
        if (v7 != 10) {
          goto LABEL_23;
        }
        if (*((_DWORD *)this + 7) != 1)
        {
          CoreML::Specification::MILSpec::ValueType::clear_type((uint64_t)this);
          *((_DWORD *)this + 7) = 1;
          operator new();
        }
        int v9 = (CoreML::Specification::MILSpec::TensorType *)*((void *)this + 2);
        uint64_t v17 = *(char **)a2;
        if (*(void *)a2 >= *((void *)a2 + 1) || *v17 < 0)
        {
          int VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (VarintSizeAsIntFallback < 0) {
            goto LABEL_69;
          }
        }
        else
        {
          int VarintSizeAsIntFallback = *v17;
          *(void *)a2 = v17 + 1;
        }
        int v31 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
        int v33 = *((_DWORD *)a2 + 13);
        BOOL v28 = __OFSUB__(v33--, 1);
        *((_DWORD *)a2 + 13) = v33;
        if (v33 < 0 != v28) {
          goto LABEL_69;
        }
        int v29 = v31;
        uint64_t result = CoreML::Specification::MILSpec::TensorType::MergePartialFromCodedStream(v9, a2, v32);
        if (!result) {
          return result;
        }
        goto LABEL_68;
      case 2u:
        if (v7 != 18) {
          goto LABEL_23;
        }
        if (*((_DWORD *)this + 7) != 2)
        {
          CoreML::Specification::MILSpec::ValueType::clear_type((uint64_t)this);
          *((_DWORD *)this + 7) = 2;
          operator new();
        }
        uint64_t v11 = (CoreML::Specification::MILSpec::ListType *)*((void *)this + 2);
        unsigned int v19 = *(char **)a2;
        if (*(void *)a2 >= *((void *)a2 + 1) || *v19 < 0)
        {
          int v20 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v20 < 0) {
            goto LABEL_69;
          }
        }
        else
        {
          int v20 = *v19;
          *(void *)a2 = v19 + 1;
        }
        int v34 = google::protobuf::io::CodedInputStream::PushLimit(a2, v20);
        int v36 = *((_DWORD *)a2 + 13);
        BOOL v28 = __OFSUB__(v36--, 1);
        *((_DWORD *)a2 + 13) = v36;
        if (v36 < 0 != v28) {
          goto LABEL_69;
        }
        int v29 = v34;
        uint64_t result = CoreML::Specification::MILSpec::ListType::MergePartialFromCodedStream(v11, a2, v35);
        if (!result) {
          return result;
        }
        goto LABEL_68;
      case 3u:
        if (v7 != 26) {
          goto LABEL_23;
        }
        if (*((_DWORD *)this + 7) != 3)
        {
          CoreML::Specification::MILSpec::ValueType::clear_type((uint64_t)this);
          *((_DWORD *)this + 7) = 3;
          operator new();
        }
        int v12 = (CoreML::Specification::MILSpec::TupleType *)*((void *)this + 2);
        BOOL v21 = *(char **)a2;
        if (*(void *)a2 >= *((void *)a2 + 1) || *v21 < 0)
        {
          int v22 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v22 < 0) {
            goto LABEL_69;
          }
        }
        else
        {
          int v22 = *v21;
          *(void *)a2 = v21 + 1;
        }
        int v37 = google::protobuf::io::CodedInputStream::PushLimit(a2, v22);
        int v39 = *((_DWORD *)a2 + 13);
        BOOL v28 = __OFSUB__(v39--, 1);
        *((_DWORD *)a2 + 13) = v39;
        if (v39 < 0 != v28) {
          goto LABEL_69;
        }
        int v29 = v37;
        uint64_t result = CoreML::Specification::MILSpec::TupleType::MergePartialFromCodedStream(v12, a2, v38);
        if (!result) {
          return result;
        }
        goto LABEL_68;
      case 4u:
        if (v7 != 34) {
          goto LABEL_23;
        }
        if (*((_DWORD *)this + 7) != 4)
        {
          CoreML::Specification::MILSpec::ValueType::clear_type((uint64_t)this);
          *((_DWORD *)this + 7) = 4;
          operator new();
        }
        uint64_t v13 = (CoreML::Specification::MILSpec::DictionaryType *)*((void *)this + 2);
        int v23 = *(char **)a2;
        if (*(void *)a2 >= *((void *)a2 + 1) || *v23 < 0)
        {
          int v24 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v24 < 0) {
            goto LABEL_69;
          }
        }
        else
        {
          int v24 = *v23;
          *(void *)a2 = v23 + 1;
        }
        int v40 = google::protobuf::io::CodedInputStream::PushLimit(a2, v24);
        int v42 = *((_DWORD *)a2 + 13);
        BOOL v28 = __OFSUB__(v42--, 1);
        *((_DWORD *)a2 + 13) = v42;
        if (v42 < 0 != v28) {
          goto LABEL_69;
        }
        int v29 = v40;
        uint64_t result = CoreML::Specification::MILSpec::DictionaryType::MergePartialFromCodedStream(v13, a2, v41);
        if (!result) {
          return result;
        }
LABEL_68:
        if (google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v29)) {
          continue;
        }
LABEL_69:
        uint64_t result = 0;
        break;
      case 5u:
        if (v7 != 42) {
          goto LABEL_23;
        }
        if (*((_DWORD *)this + 7) != 5)
        {
          CoreML::Specification::MILSpec::ValueType::clear_type((uint64_t)this);
          *((_DWORD *)this + 7) = 5;
          operator new();
        }
        uint64_t v10 = (CoreML::Specification::MILSpec::StateType *)*((void *)this + 2);
        unint64_t v15 = *(char **)a2;
        if (*(void *)a2 >= *((void *)a2 + 1) || *v15 < 0)
        {
          int v16 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v16 < 0) {
            goto LABEL_69;
          }
        }
        else
        {
          int v16 = *v15;
          *(void *)a2 = v15 + 1;
        }
        int v25 = google::protobuf::io::CodedInputStream::PushLimit(a2, v16);
        int v27 = *((_DWORD *)a2 + 13);
        BOOL v28 = __OFSUB__(v27--, 1);
        *((_DWORD *)a2 + 13) = v27;
        if (v27 < 0 != v28) {
          goto LABEL_69;
        }
        int v29 = v25;
        uint64_t result = CoreML::Specification::MILSpec::StateType::MergePartialFromCodedStream(v10, a2, v26);
        if (!result) {
          return result;
        }
        goto LABEL_68;
      default:
        goto LABEL_23;
    }
    return result;
  }
}

void sub_19EB1E374(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C4012099E73);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::Value::clear_value(uint64_t this)
{
  uint64_t v1 = this;
  int v2 = *(_DWORD *)(this + 44);
  if (v2 == 5 || v2 == 3)
  {
    this = *(void *)(this + 32);
    if (this) {
      this = (*(uint64_t (**)(uint64_t))(*(void *)this + 8))(this);
    }
  }
  *(_DWORD *)(v1 + 44) = 0;
  return this;
}

CoreML::Specification::MILSpec::Value_ImmediateValue *CoreML::Specification::MILSpec::Value_ImmediateValue::Value_ImmediateValue(CoreML::Specification::MILSpec::Value_ImmediateValue *this)
{
  *(void *)this = &unk_1EF0D9CE0;
  *((void *)this + 1) = 0;
  if (this != (CoreML::Specification::MILSpec::Value_ImmediateValue *)&CoreML::Specification::MILSpec::_Value_ImmediateValue_default_instance_) {
    CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(this);
  }
  *((void *)this + 3) = 0;
  return this;
}

void sub_19EB1E4B0(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::Value_ImmediateValue::MergePartialFromCodedStream(CoreML::Specification::MILSpec::Value_ImmediateValue *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  while (2)
  {
    while (1)
    {
      unint64_t v5 = *(char **)a2;
      if (*(void *)a2 >= *((void *)a2 + 1)) {
        break;
      }
      uint64_t v6 = *v5;
      if (*v5 < 1) {
        goto LABEL_6;
      }
      *(void *)a2 = v5 + 1;
      unint64_t v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) != 0) {
        goto LABEL_7;
      }
LABEL_20:
      if (v7) {
        BOOL v13 = (v7 & 7) == 4;
      }
      else {
        BOOL v13 = 1;
      }
      if (v13) {
        return 1;
      }
      if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0) {
        goto LABEL_58;
      }
    }
    LODWORD(v6) = 0;
LABEL_6:
    unsigned int TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v6);
    unint64_t v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
    if ((v7 & 0x100000000) == 0) {
      goto LABEL_20;
    }
LABEL_7:
    switch(v7 >> 3)
    {
      case 1u:
        if (v7 != 10) {
          goto LABEL_20;
        }
        if (*((_DWORD *)this + 7) != 1)
        {
          CoreML::Specification::MILSpec::Value_ImmediateValue::clear_value((uint64_t)this);
          *((_DWORD *)this + 7) = 1;
          operator new();
        }
        int v9 = (CoreML::Specification::MILSpec::TensorValue *)*((void *)this + 2);
        BOOL v14 = *(char **)a2;
        if (*(void *)a2 >= *((void *)a2 + 1) || *v14 < 0)
        {
          int VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (VarintSizeAsIntFallback < 0) {
            goto LABEL_58;
          }
        }
        else
        {
          int VarintSizeAsIntFallback = *v14;
          *(void *)a2 = v14 + 1;
        }
        int v22 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
        int v24 = *((_DWORD *)a2 + 13);
        BOOL v25 = __OFSUB__(v24--, 1);
        *((_DWORD *)a2 + 13) = v24;
        if (v24 < 0 != v25) {
          goto LABEL_58;
        }
        int v26 = v22;
        uint64_t result = CoreML::Specification::MILSpec::TensorValue::MergePartialFromCodedStream(v9, a2, v23);
        if (!result) {
          return result;
        }
        goto LABEL_57;
      case 2u:
        if (v7 != 18) {
          goto LABEL_20;
        }
        if (*((_DWORD *)this + 7) != 2)
        {
          CoreML::Specification::MILSpec::Value_ImmediateValue::clear_value((uint64_t)this);
          *((_DWORD *)this + 7) = 2;
          operator new();
        }
        uint64_t v10 = (CoreML::Specification::MILSpec::TupleValue *)*((void *)this + 2);
        int v16 = *(char **)a2;
        if (*(void *)a2 >= *((void *)a2 + 1) || *v16 < 0)
        {
          int v17 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v17 < 0) {
            goto LABEL_58;
          }
        }
        else
        {
          int v17 = *v16;
          *(void *)a2 = v16 + 1;
        }
        int v28 = google::protobuf::io::CodedInputStream::PushLimit(a2, v17);
        int v30 = *((_DWORD *)a2 + 13);
        BOOL v25 = __OFSUB__(v30--, 1);
        *((_DWORD *)a2 + 13) = v30;
        if (v30 < 0 != v25) {
          goto LABEL_58;
        }
        int v26 = v28;
        uint64_t result = CoreML::Specification::MILSpec::TupleValue::MergePartialFromCodedStream(v10, a2, v29);
        if (!result) {
          return result;
        }
        goto LABEL_57;
      case 3u:
        if (v7 != 26) {
          goto LABEL_20;
        }
        if (*((_DWORD *)this + 7) != 3)
        {
          CoreML::Specification::MILSpec::Value_ImmediateValue::clear_value((uint64_t)this);
          *((_DWORD *)this + 7) = 3;
          operator new();
        }
        uint64_t v11 = (CoreML::Specification::MILSpec::ListValue *)*((void *)this + 2);
        BOOL v18 = *(char **)a2;
        if (*(void *)a2 >= *((void *)a2 + 1) || *v18 < 0)
        {
          int v19 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v19 < 0) {
            goto LABEL_58;
          }
        }
        else
        {
          int v19 = *v18;
          *(void *)a2 = v18 + 1;
        }
        int v31 = google::protobuf::io::CodedInputStream::PushLimit(a2, v19);
        int v33 = *((_DWORD *)a2 + 13);
        BOOL v25 = __OFSUB__(v33--, 1);
        *((_DWORD *)a2 + 13) = v33;
        if (v33 < 0 != v25) {
          goto LABEL_58;
        }
        int v26 = v31;
        uint64_t result = CoreML::Specification::MILSpec::ListValue::MergePartialFromCodedStream(v11, a2, v32);
        if (!result) {
          return result;
        }
        goto LABEL_57;
      case 4u:
        if (v7 != 34) {
          goto LABEL_20;
        }
        if (*((_DWORD *)this + 7) != 4)
        {
          CoreML::Specification::MILSpec::Value_ImmediateValue::clear_value((uint64_t)this);
          *((_DWORD *)this + 7) = 4;
          operator new();
        }
        int v12 = (CoreML::Specification::MILSpec::DictionaryValue *)*((void *)this + 2);
        int v20 = *(char **)a2;
        if (*(void *)a2 >= *((void *)a2 + 1) || *v20 < 0)
        {
          int v21 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v21 < 0) {
            goto LABEL_58;
          }
        }
        else
        {
          int v21 = *v20;
          *(void *)a2 = v20 + 1;
        }
        int v34 = google::protobuf::io::CodedInputStream::PushLimit(a2, v21);
        int v36 = *((_DWORD *)a2 + 13);
        BOOL v25 = __OFSUB__(v36--, 1);
        *((_DWORD *)a2 + 13) = v36;
        if (v36 < 0 != v25) {
          goto LABEL_58;
        }
        int v26 = v34;
        uint64_t result = CoreML::Specification::MILSpec::DictionaryValue::MergePartialFromCodedStream(v12, a2, v35);
        if (!result) {
          return result;
        }
LABEL_57:
        if (google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v26)) {
          continue;
        }
LABEL_58:
        uint64_t result = 0;
        break;
      default:
        goto LABEL_20;
    }
    return result;
  }
}

void sub_19EB1E89C(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

CoreML::Specification::MILSpec::Value_BlobFileValue *CoreML::Specification::MILSpec::Value_BlobFileValue::Value_BlobFileValue(CoreML::Specification::MILSpec::Value_BlobFileValue *this)
{
  *(void *)this = &unk_1EF0D9C48;
  *((void *)this + 1) = 0;
  if (this != (CoreML::Specification::MILSpec::Value_BlobFileValue *)&CoreML::Specification::MILSpec::_Value_BlobFileValue_default_instance_) {
    CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(this);
  }
  *((void *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  return this;
}

void sub_19EB1E958(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::Value_BlobFileValue::MergePartialFromCodedStream(CoreML::Specification::MILSpec::Value_BlobFileValue *this, char **a2, unsigned int a3)
{
  unint64_t v5 = (std::string **)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v6 = *a2;
        if (*a2 >= a2[1])
        {
          LODWORD(v7) = 0;
LABEL_7:
          unsigned int TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback((google::protobuf::io::CodedInputStream *)a2, v7);
          unint64_t v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
          if ((v8 & 0x100000000) == 0) {
            goto LABEL_23;
          }
          goto LABEL_8;
        }
        uint64_t v7 = *v6;
        if (*v6 < 1) {
          goto LABEL_7;
        }
        *a2 = v6 + 1;
        unint64_t v8 = v7 | 0x100000000;
        if ((v8 & 0x100000000) == 0) {
          goto LABEL_23;
        }
LABEL_8:
        if (v8 >> 3 != 2) {
          break;
        }
        if (v8 != 16) {
          goto LABEL_23;
        }
        BOOL v14 = *a2;
        if (*a2 >= a2[1] || *v14 < 0)
        {
          *((void *)this + 3) = google::protobuf::io::CodedInputStream::ReadVarint64Fallback((google::protobuf::io::CodedInputStream *)a2);
          if ((v16 & 1) == 0) {
            return 0;
          }
        }
        else
        {
          *((void *)this + 3) = *v14;
          *a2 = v14 + 1;
        }
      }
      if (v8 >> 3 != 1 || v8 != 10) {
        break;
      }
      if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
      }
      uint64_t result = google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)a2, *v5);
      if (!result) {
        return result;
      }
      int v12 = (unsigned int *)*v5;
      if (SHIBYTE((*v5)->__r_.__value_.__r.__words[2]) < 0)
      {
        int v12 = *(unsigned int **)v12;
        std::string::size_type size = (*v5)->__r_.__value_.__l.__size_;
      }
      else
      {
        LODWORD(size) = HIBYTE((*v5)->__r_.__value_.__r.__words[2]);
      }
      if (!google::protobuf::internal::WireFormatLite::VerifyUtf8String(v12, size, 0, (uint64_t)"CoreML.Specification.MILSpec.Value.BlobFileValue.fileName"))return 0; {
    }
      }
LABEL_23:
    if (!v8 || (v8 & 7) == 4) {
      return 1;
    }
    if ((google::protobuf::internal::WireFormatLite::SkipField((google::protobuf::internal::WireFormatLite *)a2, (google::protobuf::io::CodedInputStream *)v8, a3) & 1) == 0)return 0; {
  }
    }
}

uint64_t CoreML::Specification::MILSpec::DictionaryValue::GetCachedSize(CoreML::Specification::MILSpec::DictionaryValue *this)
{
  return *((unsigned int *)this + 10);
}

uint64_t CoreML::Specification::MILSpec::DictionaryValue::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  int v4 = *(_DWORD *)(this + 24);
  if (v4)
  {
    uint64_t v6 = this;
    for (int i = 0; i != v4; ++i)
      this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)1, *(void *)(*(void *)(v6 + 32) + 8 * i + 8), a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::MILSpec::DictionaryValue::MergePartialFromCodedStream(CoreML::Specification::MILSpec::DictionaryValue *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  unint64_t v5 = (CoreML::Specification::MILSpec::DictionaryValue *)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      uint64_t v6 = *(char **)a2;
      if (*(void *)a2 >= *((void *)a2 + 1))
      {
        LODWORD(v7) = 0;
LABEL_7:
        unsigned int TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v7);
        unint64_t v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v8 & 0x100000000) == 0) {
          break;
        }
        goto LABEL_8;
      }
      uint64_t v7 = *v6;
      if (*v6 < 1) {
        goto LABEL_7;
      }
      *(void *)a2 = v6 + 1;
      unint64_t v8 = v7 | 0x100000000;
      if ((v8 & 0x100000000) == 0) {
        break;
      }
LABEL_8:
      if (v8 != 10 || (v8 & 0xFFFFFFF8) != 8) {
        break;
      }
      int v12 = (int *)*((void *)this + 4);
      if (!v12)
      {
        int v13 = *((_DWORD *)this + 6);
        int v14 = *((_DWORD *)this + 7);
LABEL_23:
        if (v13 <= v14)
        {
          google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend(v5, v14 - v13 + 1);
          int v12 = (int *)*((void *)this + 4);
        }
        int v14 = *v12;
        goto LABEL_26;
      }
      int v13 = *((_DWORD *)this + 6);
      int v14 = *v12;
      if (v13 < *v12)
      {
        *((_DWORD *)this + 6) = v13 + 1;
        Aligned = *(google::protobuf::Arena ***)&v12[2 * v13 + 2];
        goto LABEL_31;
      }
      if (v14 == *((_DWORD *)this + 7)) {
        goto LABEL_23;
      }
LABEL_26:
      *int v12 = v14 + 1;
      char v16 = *(google::protobuf::Arena **)v5;
      if (!*(void *)v5) {
        operator new();
      }
      CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair::DictionaryValue_KeyValuePair((CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair *)Aligned);
      int v17 = google::protobuf::Arena::AllocateAligned(v16, 0, 24);
      char *v17 = (google::protobuf::Arena *)Aligned;
      v17[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair>;
      BOOL v18 = (unint64_t *)((char *)v16 + 32);
      do
        unint64_t v19 = __ldxr(v18);
      while (__stxr((unint64_t)v17, v18));
      v17[2] = (google::protobuf::Arena *)v19;
      uint64_t v20 = *((void *)this + 4);
      uint64_t v21 = *((int *)this + 6);
      *((_DWORD *)this + 6) = v21 + 1;
      *(void *)(v20 + 8 * v21 + 8) = Aligned;
LABEL_31:
      int v22 = *(char **)a2;
      if (*(void *)a2 >= *((void *)a2 + 1) || *v22 < 0)
      {
        int VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (VarintSizeAsIntFallback < 0) {
          return 0;
        }
      }
      else
      {
        int VarintSizeAsIntFallback = *v22;
        *(void *)a2 = v22 + 1;
      }
      int v24 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
      int v26 = *((_DWORD *)a2 + 13);
      BOOL v27 = __OFSUB__(v26--, 1);
      *((_DWORD *)a2 + 13) = v26;
      if (v26 < 0 == v27)
      {
        int v28 = v24;
        uint64_t result = CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair::MergePartialFromCodedStream((CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair *)Aligned, a2, v25);
        if (!result) {
          return result;
        }
        if (google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v28)) {
          continue;
        }
      }
      return 0;
    }
    if (!v8 || (v8 & 7) == 4) {
      return 1;
    }
    if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v8, a3) & 1) == 0) {
      return 0;
    }
  }
}

void sub_19EB1ED8C(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C40C9A46F13);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair::MergePartialFromCodedStream(CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      unint64_t v5 = *(char **)a2;
      if (*(void *)a2 >= *((void *)a2 + 1))
      {
        LODWORD(v6) = 0;
LABEL_6:
        unsigned int TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v6);
        unint64_t v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0) {
          goto LABEL_21;
        }
        goto LABEL_7;
      }
      uint64_t v6 = *v5;
      if (*v5 < 1) {
        goto LABEL_6;
      }
      *(void *)a2 = v5 + 1;
      unint64_t v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0) {
        goto LABEL_21;
      }
LABEL_7:
      if (v7 >> 3 != 2) {
        break;
      }
      if (v7 != 18) {
        goto LABEL_21;
      }
      uint64_t v10 = (CoreML::Specification::MILSpec::Value *)*((void *)this + 3);
      if (!v10) {
        operator new();
      }
LABEL_18:
      uint64_t v11 = *(char **)a2;
      if (*(void *)a2 >= *((void *)a2 + 1) || *v11 < 0)
      {
        int VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (VarintSizeAsIntFallback < 0) {
          return 0;
        }
      }
      else
      {
        int VarintSizeAsIntFallback = *v11;
        *(void *)a2 = v11 + 1;
      }
      int v14 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
      int v15 = *((_DWORD *)a2 + 13);
      BOOL v16 = __OFSUB__(v15--, 1);
      *((_DWORD *)a2 + 13) = v15;
      if (v15 < 0 == v16)
      {
        int v17 = v14;
        uint64_t result = CoreML::Specification::MILSpec::Value::MergePartialFromCodedStream(v10, a2);
        if (!result) {
          return result;
        }
        if (google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v17)) {
          continue;
        }
      }
      return 0;
    }
    if (v7 >> 3 == 1 && v7 == 10)
    {
      uint64_t v10 = (CoreML::Specification::MILSpec::Value *)*((void *)this + 2);
      if (!v10) {
        operator new();
      }
      goto LABEL_18;
    }
LABEL_21:
    if (!v7 || (v7 & 7) == 4) {
      return 1;
    }
    if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0) {
      return 0;
    }
  }
}

void sub_19EB1EF50(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C40000F1E19);
  _Unwind_Resume(a1);
}

CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair *CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair::DictionaryValue_KeyValuePair(CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair *this)
{
  *(void *)this = &unk_1EF0DA238;
  *((void *)this + 1) = 0;
  if (this != (CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair *)&CoreML::Specification::MILSpec::_DictionaryValue_KeyValuePair_default_instance_) {
    CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(this);
  }
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  return this;
}

void sub_19EB1EFDC(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

unint64_t *CoreML::Specification::MILSpec::DictionaryValue::MergeFrom(unint64_t *this, const CoreML::Specification::MILSpec::DictionaryValue *a2)
{
  unint64_t v3 = this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    this = (unint64_t *)google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  int v5 = *((_DWORD *)a2 + 6);
  if (v5)
  {
    uint64_t v28 = *((void *)a2 + 4);
    this = (unint64_t *)google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)(v3 + 2), v5);
    uint64_t v6 = this;
    uint64_t v7 = *(int *)v3[4];
    uint64_t v8 = *((int *)v3 + 6);
    int v9 = v7 - v8;
    if ((int)v7 - (int)v8 >= v5) {
      uint64_t v10 = v5;
    }
    else {
      uint64_t v10 = v9;
    }
    if ((int)v10 >= 1)
    {
      uint64_t v11 = (const CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair **)(v28 + 8);
      int v12 = (std::string **)this;
      do
      {
        int v14 = *v11++;
        int v13 = v14;
        int v15 = *v12++;
        this = (unint64_t *)google::protobuf::internal::GenericTypeHandler<CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair>::Merge(v13, v15);
        --v10;
      }
      while (v10);
    }
    if (v9 < v5)
    {
      BOOL v16 = (google::protobuf::Arena *)v3[2];
      int v17 = v8 + v5 - v7;
      uint64_t v18 = 8 * v7 - 8 * v8;
      unint64_t v19 = (google::protobuf::Arena ***)((char *)v6 + v18);
      uint64_t v20 = (const CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair **)(v18 + v28 + 8);
      do
      {
        uint64_t v21 = *v20;
        if (!v16) {
          operator new();
        }
        CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair::DictionaryValue_KeyValuePair((CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair *)Aligned);
        unsigned int v23 = google::protobuf::Arena::AllocateAligned(v16, 0, 24);
        *unsigned int v23 = (google::protobuf::Arena *)Aligned;
        v23[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair>;
        int v24 = (unint64_t *)((char *)v16 + 32);
        do
          unint64_t v25 = __ldxr(v24);
        while (__stxr((unint64_t)v23, v24));
        v23[2] = (google::protobuf::Arena *)v25;
        this = (unint64_t *)google::protobuf::internal::GenericTypeHandler<CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair>::Merge(v21, (std::string *)Aligned);
        *v19++ = Aligned;
        ++v20;
        --v17;
      }
      while (v17);
    }
    int v26 = *((_DWORD *)v3 + 6) + v5;
    *((_DWORD *)v3 + 6) = v26;
    BOOL v27 = (int *)v3[4];
    if (*v27 < v26) {
      *BOOL v27 = v26;
    }
  }
  return this;
}

void sub_19EB1F1C4(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C40C9A46F13);
  _Unwind_Resume(a1);
}

std::string *google::protobuf::internal::GenericTypeHandler<CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair>::Merge(const CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair *a1, std::string *a2)
{
  return CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair::MergeFrom(a2, a1);
}

std::string *CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair::MergeFrom(std::string *this, const CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair *a2)
{
  unint64_t v3 = this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    this = google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  if (a2 != (const CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair *)&CoreML::Specification::MILSpec::_DictionaryValue_KeyValuePair_default_instance_)
  {
    if (*((void *)a2 + 2))
    {
      int v5 = (CoreML::Specification::MILSpec::Value *)v3->__r_.__value_.__r.__words[2];
      if (!v5) {
        operator new();
      }
      this = (std::string *)CoreML::Specification::MILSpec::Value::MergeFrom(v5, *((const CoreML::Specification::MILSpec::Value **)a2 + 2));
    }
    if (*((void *)a2 + 3))
    {
      if (!v3[1].__r_.__value_.__r.__words[0]) {
        operator new();
      }
      uint64_t v6 = (const CoreML::Specification::MILSpec::Value *)*((void *)a2 + 3);
      int data = (CoreML::Specification::MILSpec::Value *)v3[1].__r_.__value_.__l.__data_;
      return (std::string *)CoreML::Specification::MILSpec::Value::MergeFrom(data, v6);
    }
  }
  return this;
}

void sub_19EB1F2FC(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C40000F1E19);
  _Unwind_Resume(a1);
}

std::string *CoreML::Specification::MILSpec::Value::MergeFrom(std::string *this, const CoreML::Specification::MILSpec::Value *a2)
{
  uint64_t v3 = (uint64_t)this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    this = google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  uint64_t v5 = *((void *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
  {
    if (!*(void *)(v5 + 8)) {
      goto LABEL_11;
    }
  }
  else if (!*(unsigned char *)(v5 + 23))
  {
    goto LABEL_11;
  }
  this = (std::string *)(v3 + 16);
  uint64_t v6 = *(long long **)(v3 + 16);
  if (v6 != (long long *)v5)
  {
    if (v6 == &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
    }
    this = std::string::operator=(*(std::string **)(v3 + 16), (const std::string *)v5);
  }
LABEL_11:
  if (a2 != (const CoreML::Specification::MILSpec::Value *)&CoreML::Specification::MILSpec::_Value_default_instance_
    && *((void *)a2 + 3))
  {
    uint64_t v7 = *(std::string **)(v3 + 24);
    if (!v7) {
      operator new();
    }
    this = CoreML::Specification::MILSpec::ValueType::MergeFrom(v7, *((const CoreML::Specification::MILSpec::ValueType **)a2 + 3));
  }
  int v8 = *((_DWORD *)a2 + 11);
  if (v8 == 5)
  {
    if (*(_DWORD *)(v3 + 44) != 5)
    {
      CoreML::Specification::MILSpec::Value::clear_value(v3);
      *(_DWORD *)(v3 + 44) = 5;
      operator new();
    }
    uint64_t v10 = (const CoreML::Specification::MILSpec::Value_BlobFileValue *)*((void *)a2 + 4);
    int v12 = *(std::string **)(v3 + 32);
    return CoreML::Specification::MILSpec::Value_BlobFileValue::MergeFrom(v12, v10);
  }
  else if (v8 == 3)
  {
    if (*(_DWORD *)(v3 + 44) != 3)
    {
      CoreML::Specification::MILSpec::Value::clear_value(v3);
      *(_DWORD *)(v3 + 44) = 3;
      operator new();
    }
    int v9 = (const CoreML::Specification::MILSpec::Value_ImmediateValue *)*((void *)a2 + 4);
    uint64_t v11 = *(void *)(v3 + 32);
    return (std::string *)CoreML::Specification::MILSpec::Value_ImmediateValue::MergeFrom(v11, v9);
  }
  return this;
}

void sub_19EB1F540(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C4056DF9CA5);
  _Unwind_Resume(a1);
}

std::string *CoreML::Specification::MILSpec::ValueType::MergeFrom(std::string *this, const CoreML::Specification::MILSpec::ValueType *a2)
{
  uint64_t v3 = (uint64_t)this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    this = google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  switch(*((_DWORD *)a2 + 7))
  {
    case 1:
      if (*(_DWORD *)(v3 + 28) != 1)
      {
        CoreML::Specification::MILSpec::ValueType::clear_type(v3);
        *(_DWORD *)(v3 + 28) = 1;
        operator new();
      }
      int v8 = (const CoreML::Specification::MILSpec::TensorType *)*((void *)a2 + 2);
      int v13 = *(CoreML::Specification::MILSpec::TensorType **)(v3 + 16);
      this = (std::string *)CoreML::Specification::MILSpec::TensorType::MergeFrom(v13, v8);
      break;
    case 2:
      if (*(_DWORD *)(v3 + 28) != 2)
      {
        CoreML::Specification::MILSpec::ValueType::clear_type(v3);
        *(_DWORD *)(v3 + 28) = 2;
        operator new();
      }
      int v9 = (const CoreML::Specification::MILSpec::ListType *)*((void *)a2 + 2);
      int v14 = *(std::string **)(v3 + 16);
      this = CoreML::Specification::MILSpec::ListType::MergeFrom(v14, v9);
      break;
    case 3:
      if (*(_DWORD *)(v3 + 28) != 3)
      {
        CoreML::Specification::MILSpec::ValueType::clear_type(v3);
        *(_DWORD *)(v3 + 28) = 3;
        operator new();
      }
      uint64_t v5 = (const CoreML::Specification::MILSpec::TupleType *)*((void *)a2 + 2);
      uint64_t v10 = *(unint64_t **)(v3 + 16);
      this = (std::string *)CoreML::Specification::MILSpec::TupleType::MergeFrom(v10, v5);
      break;
    case 4:
      if (*(_DWORD *)(v3 + 28) != 4)
      {
        CoreML::Specification::MILSpec::ValueType::clear_type(v3);
        *(_DWORD *)(v3 + 28) = 4;
        operator new();
      }
      uint64_t v6 = (const CoreML::Specification::MILSpec::DictionaryType *)*((void *)a2 + 2);
      uint64_t v11 = *(std::string **)(v3 + 16);
      this = CoreML::Specification::MILSpec::DictionaryType::MergeFrom(v11, v6);
      break;
    case 5:
      if (*(_DWORD *)(v3 + 28) != 5)
      {
        CoreML::Specification::MILSpec::ValueType::clear_type(v3);
        *(_DWORD *)(v3 + 28) = 5;
        operator new();
      }
      uint64_t v7 = (const CoreML::Specification::MILSpec::StateType *)*((void *)a2 + 2);
      int v12 = *(std::string **)(v3 + 16);
      this = CoreML::Specification::MILSpec::StateType::MergeFrom(v12, v7);
      break;
    default:
      return this;
  }
  return this;
}

void sub_19EB1F8A8(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C40C9A46F13);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::Value_ImmediateValue::MergeFrom(uint64_t this, const CoreML::Specification::MILSpec::Value_ImmediateValue *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    this = (uint64_t)google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((unint64_t *)(this + 8), v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  switch(*((_DWORD *)a2 + 7))
  {
    case 1:
      if (*(_DWORD *)(v3 + 28) != 1)
      {
        CoreML::Specification::MILSpec::Value_ImmediateValue::clear_value(v3);
        *(_DWORD *)(v3 + 28) = 1;
        operator new();
      }
      uint64_t v7 = (const CoreML::Specification::MILSpec::TensorValue *)*((void *)a2 + 2);
      uint64_t v10 = *(std::string **)(v3 + 16);
      this = (uint64_t)CoreML::Specification::MILSpec::TensorValue::MergeFrom(v10, v7);
      break;
    case 2:
      if (*(_DWORD *)(v3 + 28) != 2)
      {
        CoreML::Specification::MILSpec::Value_ImmediateValue::clear_value(v3);
        *(_DWORD *)(v3 + 28) = 2;
        operator new();
      }
      uint64_t v5 = (const CoreML::Specification::MILSpec::TupleValue *)*((void *)a2 + 2);
      uint64_t v8 = *(void *)(v3 + 16);
      goto LABEL_18;
    case 3:
      if (*(_DWORD *)(v3 + 28) != 3)
      {
        CoreML::Specification::MILSpec::Value_ImmediateValue::clear_value(v3);
        *(_DWORD *)(v3 + 28) = 3;
        operator new();
      }
      uint64_t v5 = (const CoreML::Specification::MILSpec::TupleValue *)*((void *)a2 + 2);
      uint64_t v8 = *(void *)(v3 + 16);
LABEL_18:
      this = CoreML::Specification::MILSpec::TupleValue::MergeFrom(v8, v5);
      break;
    case 4:
      if (*(_DWORD *)(v3 + 28) != 4)
      {
        CoreML::Specification::MILSpec::Value_ImmediateValue::clear_value(v3);
        *(_DWORD *)(v3 + 28) = 4;
        operator new();
      }
      uint64_t v6 = (const CoreML::Specification::MILSpec::DictionaryValue *)*((void *)a2 + 2);
      int v9 = *(unint64_t **)(v3 + 16);
      this = (uint64_t)CoreML::Specification::MILSpec::DictionaryValue::MergeFrom(v9, v6);
      break;
    default:
      return this;
  }
  return this;
}

void sub_19EB1FBC0(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

std::string *CoreML::Specification::MILSpec::Value_BlobFileValue::MergeFrom(std::string *this, const CoreML::Specification::MILSpec::Value_BlobFileValue *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    this = google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  uint64_t v5 = *((void *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
  {
    if (!*(void *)(v5 + 8)) {
      goto LABEL_11;
    }
  }
  else if (!*(unsigned char *)(v5 + 23))
  {
    goto LABEL_11;
  }
  this = (std::string *)&v3->__r_.__value_.__r.__words[2];
  uint64_t v6 = (long long *)v3->__r_.__value_.__r.__words[2];
  if (v6 != (long long *)v5)
  {
    if (v6 == &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
    }
    this = std::string::operator=((std::string *)v3->__r_.__value_.__r.__words[2], (const std::string *)v5);
  }
LABEL_11:
  std::string::size_type v7 = *((void *)a2 + 3);
  if (v7) {
    v3[1].__r_.__value_.__r.__words[0] = v7;
  }
  return this;
}

uint64_t CoreML::Specification::MILSpec::Value_ImmediateValue::clear_value(uint64_t this)
{
  uint64_t v1 = this;
  switch(*(_DWORD *)(this + 28))
  {
    case 1:
    case 2:
    case 3:
    case 4:
      this = *(void *)(this + 16);
      if (this) {
        this = (*(uint64_t (**)(uint64_t))(*(void *)this + 8))(this);
      }
      break;
    default:
      break;
  }
  *(_DWORD *)(v1 + 28) = 0;
  return this;
}

CoreML::Specification::MILSpec::TensorValue *CoreML::Specification::MILSpec::TensorValue::TensorValue(CoreML::Specification::MILSpec::TensorValue *this)
{
  *(void *)this = &unk_1EF0D9950;
  *((void *)this + 1) = 0;
  if (this != (CoreML::Specification::MILSpec::TensorValue *)&CoreML::Specification::MILSpec::_TensorValue_default_instance_) {
    CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(this);
  }
  *((void *)this + 3) = 0;
  return this;
}

void sub_19EB1FD94(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

std::string *CoreML::Specification::MILSpec::TensorValue::MergeFrom(std::string *this, const CoreML::Specification::MILSpec::TensorValue *a2)
{
  uint64_t v3 = (uint64_t)this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    this = google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  switch(*((_DWORD *)a2 + 7))
  {
    case 1:
      if (*(_DWORD *)(v3 + 28) != 1)
      {
        CoreML::Specification::MILSpec::TensorValue::clear_value(v3);
        *(_DWORD *)(v3 + 28) = 1;
        operator new();
      }
      uint64_t v5 = (const CoreML::Specification::MILSpec::TensorValue_RepeatedFloats *)*((void *)a2 + 2);
      uint64_t v10 = *(unint64_t **)(v3 + 16);
      return (std::string *)CoreML::Specification::MILSpec::TensorValue_RepeatedFloats::MergeFrom(v10, v5);
    case 2:
      if (*(_DWORD *)(v3 + 28) != 2)
      {
        CoreML::Specification::MILSpec::TensorValue::clear_value(v3);
        *(_DWORD *)(v3 + 28) = 2;
        operator new();
      }
      uint64_t v5 = (const CoreML::Specification::MILSpec::TensorValue_RepeatedFloats *)*((void *)a2 + 2);
      uint64_t v10 = *(unint64_t **)(v3 + 16);
      return (std::string *)CoreML::Specification::MILSpec::TensorValue_RepeatedFloats::MergeFrom(v10, v5);
    case 3:
      if (*(_DWORD *)(v3 + 28) != 3)
      {
        CoreML::Specification::MILSpec::TensorValue::clear_value(v3);
        *(_DWORD *)(v3 + 28) = 3;
        operator new();
      }
      uint64_t v6 = (const CoreML::Specification::MILSpec::TensorValue_RepeatedBools *)*((void *)a2 + 2);
      uint64_t v11 = *(unint64_t **)(v3 + 16);
      return (std::string *)CoreML::Specification::MILSpec::TensorValue_RepeatedBools::MergeFrom(v11, v6);
    case 4:
      if (*(_DWORD *)(v3 + 28) != 4)
      {
        CoreML::Specification::MILSpec::TensorValue::clear_value(v3);
        *(_DWORD *)(v3 + 28) = 4;
        operator new();
      }
      std::string::size_type v7 = (const CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *)*((void *)a2 + 2);
      int v12 = *(std::string **)(v3 + 16);
      return CoreML::Specification::MILSpec::TensorValue_RepeatedStrings::MergeFrom(v12, v7);
    case 5:
      if (*(_DWORD *)(v3 + 28) != 5)
      {
        CoreML::Specification::MILSpec::TensorValue::clear_value(v3);
        *(_DWORD *)(v3 + 28) = 5;
        operator new();
      }
      uint64_t v8 = (const CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *)*((void *)a2 + 2);
      int v13 = *(unint64_t **)(v3 + 16);
      goto LABEL_39;
    case 6:
      if (*(_DWORD *)(v3 + 28) != 6)
      {
        CoreML::Specification::MILSpec::TensorValue::clear_value(v3);
        *(_DWORD *)(v3 + 28) = 6;
        operator new();
      }
      uint64_t v8 = (const CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *)*((void *)a2 + 2);
      int v13 = *(unint64_t **)(v3 + 16);
LABEL_39:
      this = (std::string *)CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts::MergeFrom(v13, v8);
      break;
    case 7:
      if (*(_DWORD *)(v3 + 28) != 7)
      {
        CoreML::Specification::MILSpec::TensorValue::clear_value(v3);
        *(_DWORD *)(v3 + 28) = 7;
        operator new();
      }
      int v9 = (const CoreML::Specification::MILSpec::TensorValue_RepeatedBytes *)*((void *)a2 + 2);
      int v14 = *(std::string **)(v3 + 16);
      this = CoreML::Specification::MILSpec::TensorValue_RepeatedBytes::MergeFrom(v14, v9);
      break;
    default:
      return this;
  }
  return this;
}

void sub_19EB201EC(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C4084265165);
  _Unwind_Resume(a1);
}

CoreML::Specification::MILSpec::TupleValue *CoreML::Specification::MILSpec::TupleValue::TupleValue(CoreML::Specification::MILSpec::TupleValue *this)
{
  *(void *)this = &unk_1EF0D98B8;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  if (this != (CoreML::Specification::MILSpec::TupleValue *)&CoreML::Specification::MILSpec::_TupleValue_default_instance_) {
    CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(this);
  }
  *((_DWORD *)this + 1CoreML::Specification::Scaler::New(this, 0) = 0;
  return this;
}

void sub_19EB202D8(_Unwind_Exception *a1)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::TupleValue::MergeFrom(uint64_t this, const CoreML::Specification::MILSpec::TupleValue *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    this = (uint64_t)google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((unint64_t *)(this + 8), v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  unsigned int v5 = *((_DWORD *)a2 + 6);
  if (v5)
  {
    uint64_t v6 = (CoreML::Specification::MILSpec::Value **)(*((void *)a2 + 4) + 8);
    std::string::size_type v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)(v3 + 16), v5);
    this = google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<CoreML::Specification::MILSpec::Value>::TypeHandler>(v3 + 16, (CoreML::Specification::MILSpec::Value **)v7, v6, v5, **(_DWORD **)(v3 + 32) - *(_DWORD *)(v3 + 24));
    signed int v8 = *(_DWORD *)(v3 + 24) + v5;
    *(_DWORD *)(v3 + 24) = v8;
    int v9 = *(signed int **)(v3 + 32);
    if (*v9 < v8) {
      signed int *v9 = v8;
    }
  }
  return this;
}

CoreML::Specification::MILSpec::ListValue *CoreML::Specification::MILSpec::ListValue::ListValue(CoreML::Specification::MILSpec::ListValue *this)
{
  *(void *)this = &unk_1EF0DA790;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  if (this != (CoreML::Specification::MILSpec::ListValue *)&CoreML::Specification::MILSpec::_ListValue_default_instance_) {
    CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(this);
  }
  *((_DWORD *)this + 1CoreML::Specification::Scaler::New(this, 0) = 0;
  return this;
}

void sub_19EB20410(_Unwind_Exception *a1)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

CoreML::Specification::MILSpec::DictionaryValue *CoreML::Specification::MILSpec::DictionaryValue::DictionaryValue(CoreML::Specification::MILSpec::DictionaryValue *this)
{
  *(void *)this = &unk_1EF0D9B18;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  if (this != (CoreML::Specification::MILSpec::DictionaryValue *)&CoreML::Specification::MILSpec::_DictionaryValue_default_instance_) {
    CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(this);
  }
  *((_DWORD *)this + 1CoreML::Specification::Scaler::New(this, 0) = 0;
  return this;
}

void sub_19EB204A4(_Unwind_Exception *a1)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<CoreML::Specification::MILSpec::Value>::TypeHandler>(uint64_t result, CoreML::Specification::MILSpec::Value **a2, CoreML::Specification::MILSpec::Value **a3, unsigned int a4, unsigned int a5)
{
  int v9 = (google::protobuf::Arena **)result;
  if ((int)a5 >= (int)a4) {
    uint64_t v10 = a4;
  }
  else {
    uint64_t v10 = a5;
  }
  if ((int)v10 >= 1)
  {
    uint64_t v11 = a3;
    int v12 = a2;
    do
    {
      int v14 = *v11++;
      int v13 = v14;
      int v15 = *v12++;
      uint64_t result = google::protobuf::internal::GenericTypeHandler<CoreML::Specification::MILSpec::Value>::Merge(v13, v15);
      --v10;
    }
    while (v10);
  }
  BOOL v16 = __OFSUB__(a4, a5);
  int v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    uint64_t v18 = *v9;
    unint64_t v19 = (google::protobuf::Arena ***)&a2[a5];
    uint64_t v20 = &a3[a5];
    do
    {
      uint64_t v21 = *v20;
      if (!v18) {
        operator new();
      }
      CoreML::Specification::MILSpec::Value::Value((CoreML::Specification::MILSpec::Value *)Aligned);
      unsigned int v23 = google::protobuf::Arena::AllocateAligned(v18, 0, 24);
      *unsigned int v23 = (google::protobuf::Arena *)Aligned;
      v23[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Value>;
      int v24 = (unint64_t *)((char *)v18 + 32);
      do
        unint64_t v25 = __ldxr(v24);
      while (__stxr((unint64_t)v23, v24));
      v23[2] = (google::protobuf::Arena *)v25;
      uint64_t result = google::protobuf::internal::GenericTypeHandler<CoreML::Specification::MILSpec::Value>::Merge(v21, (CoreML::Specification::MILSpec::Value *)Aligned);
      *v19++ = Aligned;
      ++v20;
      --v17;
    }
    while (v17);
  }
  return result;
}

void sub_19EB205E8(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C40000F1E19);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::GenericTypeHandler<CoreML::Specification::MILSpec::Value>::Merge(CoreML::Specification::MILSpec::Value *a1, CoreML::Specification::MILSpec::Value *this)
{
  return CoreML::Specification::MILSpec::Value::MergeFrom(this, a1);
}

uint64_t CoreML::Specification::MILSpec::TensorValue::clear_value(uint64_t this)
{
  uint64_t v1 = this;
  switch(*(_DWORD *)(this + 28))
  {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      this = *(void *)(this + 16);
      if (this) {
        this = (*(uint64_t (**)(uint64_t))(*(void *)this + 8))(this);
      }
      break;
    default:
      break;
  }
  *(_DWORD *)(v1 + 28) = 0;
  return this;
}

CoreML::Specification::MILSpec::TensorValue_RepeatedFloats *CoreML::Specification::MILSpec::TensorValue_RepeatedFloats::TensorValue_RepeatedFloats(CoreML::Specification::MILSpec::TensorValue_RepeatedFloats *this)
{
  *((void *)this + 1) = 0;
  *(void *)this = &unk_1EF0D9FD8;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  if (this != (CoreML::Specification::MILSpec::TensorValue_RepeatedFloats *)&CoreML::Specification::MILSpec::_TensorValue_RepeatedFloats_default_instance_) {
    CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(this);
  }
  *((_DWORD *)this + 9) = 0;
  return this;
}

void sub_19EB20724(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void **)(v2 + 24);
  if (v4)
  {
    if (!*v4) {
      operator delete(v4);
    }
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

unint64_t *CoreML::Specification::MILSpec::TensorValue_RepeatedFloats::MergeFrom(unint64_t *this, const CoreML::Specification::MILSpec::TensorValue_RepeatedFloats *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    this = (unint64_t *)google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  int v5 = *((_DWORD *)a2 + 4);
  if (v5)
  {
    int v7 = *((_DWORD *)v3 + 4);
    uint64_t v6 = (unsigned int *)(v3 + 2);
    google::protobuf::RepeatedField<float>::Reserve(v6, v7 + v5);
    this = (unint64_t *)memcpy((void *)(*((void *)v6 + 1) + 4 * (int)*v6 + 8), (const void *)(*((void *)a2 + 3) + 8), 4 * *((int *)a2 + 4));
    *v6 += *((_DWORD *)a2 + 4);
  }
  return this;
}

CoreML::Specification::MILSpec::TensorValue_RepeatedInts *CoreML::Specification::MILSpec::TensorValue_RepeatedInts::TensorValue_RepeatedInts(CoreML::Specification::MILSpec::TensorValue_RepeatedInts *this)
{
  *((void *)this + 1) = 0;
  *(void *)this = &unk_1EF0D9D78;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  if (this != (CoreML::Specification::MILSpec::TensorValue_RepeatedInts *)&CoreML::Specification::MILSpec::_TensorValue_RepeatedInts_default_instance_) {
    CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(this);
  }
  *((_DWORD *)this + 9) = 0;
  return this;
}

void sub_19EB2083C(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void **)(v2 + 24);
  if (v4)
  {
    if (!*v4) {
      operator delete(v4);
    }
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

CoreML::Specification::MILSpec::TensorValue_RepeatedBools *CoreML::Specification::MILSpec::TensorValue_RepeatedBools::TensorValue_RepeatedBools(CoreML::Specification::MILSpec::TensorValue_RepeatedBools *this)
{
  *((void *)this + 1) = 0;
  *(void *)this = &unk_1EF0D9E10;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  if (this != (CoreML::Specification::MILSpec::TensorValue_RepeatedBools *)&CoreML::Specification::MILSpec::_TensorValue_RepeatedBools_default_instance_) {
    CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(this);
  }
  *((_DWORD *)this + 9) = 0;
  return this;
}

void sub_19EB208D0(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void **)(v2 + 24);
  if (v4)
  {
    if (!*v4) {
      operator delete(v4);
    }
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

unint64_t *CoreML::Specification::MILSpec::TensorValue_RepeatedBools::MergeFrom(unint64_t *this, const CoreML::Specification::MILSpec::TensorValue_RepeatedBools *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    this = (unint64_t *)google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  int v5 = *((_DWORD *)a2 + 4);
  if (v5)
  {
    int v7 = *((_DWORD *)v3 + 4);
    uint64_t v6 = (unsigned int *)(v3 + 2);
    google::protobuf::RepeatedField<BOOL>::Reserve(v6, v7 + v5);
    this = (unint64_t *)memcpy((void *)(*((void *)v6 + 1) + (int)*v6 + 8), (const void *)(*((void *)a2 + 3) + 8), *((int *)a2 + 4));
    *v6 += *((_DWORD *)a2 + 4);
  }
  return this;
}

CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *CoreML::Specification::MILSpec::TensorValue_RepeatedStrings::TensorValue_RepeatedStrings(CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *this)
{
  *(void *)this = &unk_1EF0DA1A0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  if (this != (CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *)&CoreML::Specification::MILSpec::_TensorValue_RepeatedStrings_default_instance_) {
    CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(this);
  }
  *((_DWORD *)this + 1CoreML::Specification::Scaler::New(this, 0) = 0;
  return this;
}

void sub_19EB209E8(_Unwind_Exception *a1)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((void *)(v1 + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v2);
  _Unwind_Resume(a1);
}

std::string *CoreML::Specification::MILSpec::TensorValue_RepeatedStrings::MergeFrom(std::string *this, const CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    this = google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  unsigned int v5 = *((_DWORD *)a2 + 6);
  if (v5)
  {
    uint64_t v6 = (const std::string **)(*((void *)a2 + 4) + 8);
    int v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)&v3->__r_.__value_.__r.__words[2], v5);
    this = google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((std::string *)&v3->__r_.__value_.__r.__words[2], (std::string **)v7, v6, v5, *(_DWORD *)v3[1].__r_.__value_.__l.__size_ - LODWORD(v3[1].__r_.__value_.__l.__data_));
    signed int v8 = LODWORD(v3[1].__r_.__value_.__l.__data_) + v5;
    LODWORD(v3[1].__r_.__value_.__l.__data_) = v8;
    std::string::size_type size = (signed int *)v3[1].__r_.__value_.__l.__size_;
    if (*size < v8) {
      *std::string::size_type size = v8;
    }
  }
  return this;
}

CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts::TensorValue_RepeatedLongInts(CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *this)
{
  *((void *)this + 1) = 0;
  *(void *)this = &unk_1EF0DA2D0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  if (this != (CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *)&CoreML::Specification::MILSpec::_TensorValue_RepeatedLongInts_default_instance_) {
    CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(this);
  }
  *((_DWORD *)this + 9) = 0;
  return this;
}

void sub_19EB20B14(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void **)(v2 + 24);
  if (v4)
  {
    if (!*v4) {
      operator delete(v4);
    }
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

unint64_t *CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts::MergeFrom(unint64_t *this, const CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    this = (unint64_t *)google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  int v5 = *((_DWORD *)a2 + 4);
  if (v5)
  {
    int v7 = *((_DWORD *)v3 + 4);
    uint64_t v6 = (unsigned int *)(v3 + 2);
    google::protobuf::RepeatedField<double>::Reserve(v6, v7 + v5);
    this = (unint64_t *)memcpy((void *)(*((void *)v6 + 1) + 8 * (int)*v6 + 8), (const void *)(*((void *)a2 + 3) + 8), 8 * *((int *)a2 + 4));
    *v6 += *((_DWORD *)a2 + 4);
  }
  return this;
}

CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles *CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles::TensorValue_RepeatedDoubles(CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles *this)
{
  *((void *)this + 1) = 0;
  *(void *)this = &unk_1EF0DA108;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  if (this != (CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles *)&CoreML::Specification::MILSpec::_TensorValue_RepeatedDoubles_default_instance_) {
    CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(this);
  }
  *((_DWORD *)this + 9) = 0;
  return this;
}

void sub_19EB20C2C(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void **)(v2 + 24);
  if (v4)
  {
    if (!*v4) {
      operator delete(v4);
    }
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

CoreML::Specification::MILSpec::TensorValue_RepeatedBytes *CoreML::Specification::MILSpec::TensorValue_RepeatedBytes::TensorValue_RepeatedBytes(CoreML::Specification::MILSpec::TensorValue_RepeatedBytes *this)
{
  *(void *)this = &unk_1EF0D9EA8;
  *((void *)this + 1) = 0;
  if (this != (CoreML::Specification::MILSpec::TensorValue_RepeatedBytes *)&CoreML::Specification::MILSpec::_TensorValue_RepeatedBytes_default_instance_) {
    CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(this);
  }
  *((void *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  *((_DWORD *)this + 6) = 0;
  return this;
}

void sub_19EB20CC0(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

std::string *CoreML::Specification::MILSpec::TensorValue_RepeatedBytes::MergeFrom(std::string *this, const CoreML::Specification::MILSpec::TensorValue_RepeatedBytes *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    this = google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  uint64_t v5 = *((void *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
  {
    if (!*(void *)(v5 + 8)) {
      return this;
    }
  }
  else if (!*(unsigned char *)(v5 + 23))
  {
    return this;
  }
  this = (std::string *)v3->__r_.__value_.__r.__words[2];
  if (this != (std::string *)v5)
  {
    if (this == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
    }
    return std::string::operator=(this, (const std::string *)v5);
  }
  return this;
}

uint64_t CoreML::Specification::MILSpec::ValueType::clear_type(uint64_t this)
{
  uint64_t v1 = this;
  switch(*(_DWORD *)(this + 28))
  {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      this = *(void *)(this + 16);
      if (this) {
        this = (*(uint64_t (**)(uint64_t))(*(void *)this + 8))(this);
      }
      break;
    default:
      break;
  }
  *(_DWORD *)(v1 + 28) = 0;
  return this;
}

uint64_t CoreML::Specification::MILSpec::TensorType::MergeFrom(CoreML::Specification::MILSpec::TensorType *this, const CoreML::Specification::MILSpec::TensorType *a2)
{
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((unint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  int v5 = *((_DWORD *)a2 + 6);
  if (v5)
  {
    uint64_t v31 = *((void *)a2 + 4);
    int v30 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((CoreML::Specification::MILSpec::TensorType *)((char *)this + 16), v5);
    uint64_t v6 = **((int **)this + 4);
    uint64_t v7 = *((int *)this + 6);
    int v8 = v6 - v7;
    if ((int)v6 - (int)v7 >= v5) {
      uint64_t v9 = v5;
    }
    else {
      uint64_t v9 = v8;
    }
    if ((int)v9 >= 1)
    {
      uint64_t v10 = (std::string **)v30;
      uint64_t v11 = (CoreML::Specification::MILSpec::Dimension **)(v31 + 8);
      do
      {
        int v13 = *v11++;
        int v12 = v13;
        int v14 = *v10++;
        google::protobuf::internal::GenericTypeHandler<CoreML::Specification::MILSpec::Dimension>::Merge(v12, v14);
        --v9;
      }
      while (v9);
    }
    if (v8 < v5)
    {
      int v15 = (google::protobuf::Arena *)*((void *)this + 2);
      int v16 = v7 + v5 - v6;
      uint64_t v17 = 8 * v6 - 8 * v7;
      uint64_t v18 = (google::protobuf::Arena ***)((char *)v30 + v17);
      unint64_t v19 = (CoreML::Specification::MILSpec::Dimension **)(v17 + v31 + 8);
      do
      {
        uint64_t v20 = *v19;
        if (!v15) {
          operator new();
        }
        CoreML::Specification::MILSpec::Dimension::Dimension((CoreML::Specification::MILSpec::Dimension *)Aligned);
        int v22 = google::protobuf::Arena::AllocateAligned(v15, 0, 24);
        *int v22 = (google::protobuf::Arena *)Aligned;
        v22[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Dimension>;
        unsigned int v23 = (unint64_t *)((char *)v15 + 32);
        do
          unint64_t v24 = __ldxr(v23);
        while (__stxr((unint64_t)v22, v23));
        v22[2] = (google::protobuf::Arena *)v24;
        google::protobuf::internal::GenericTypeHandler<CoreML::Specification::MILSpec::Dimension>::Merge(v20, (std::string *)Aligned);
        *v18++ = Aligned;
        ++v19;
        --v16;
      }
      while (v16);
    }
    int v25 = *((_DWORD *)this + 6) + v5;
    *((_DWORD *)this + 6) = v25;
    int v26 = (int *)*((void *)this + 4);
    if (*v26 < v25) {
      int *v26 = v25;
    }
  }
  uint64_t result = google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::MergeFrom((char *)this + 40, (char *)a2 + 40);
  uint64_t v28 = *((void *)a2 + 9);
  if (v28) {
    *((void *)this + 9) = v28;
  }
  int v29 = *((_DWORD *)a2 + 20);
  if (v29) {
    *((_DWORD *)this + 2CoreML::Specification::Scaler::New(this, 0) = v29;
  }
  return result;
}

void sub_19EB20FE8(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

CoreML::Specification::MILSpec::ListType *CoreML::Specification::MILSpec::ListType::ListType(CoreML::Specification::MILSpec::ListType *this)
{
  *(void *)this = &unk_1EF0DA660;
  *((void *)this + 1) = 0;
  if (this != (CoreML::Specification::MILSpec::ListType *)&CoreML::Specification::MILSpec::_ListType_default_instance_) {
    CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(this);
  }
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  return this;
}

void sub_19EB21070(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

std::string *CoreML::Specification::MILSpec::ListType::MergeFrom(std::string *this, const CoreML::Specification::MILSpec::ListType *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    this = google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  if (a2 != (const CoreML::Specification::MILSpec::ListType *)&CoreML::Specification::MILSpec::_ListType_default_instance_)
  {
    if (*((void *)a2 + 2))
    {
      int v5 = (CoreML::Specification::MILSpec::ValueType *)v3->__r_.__value_.__r.__words[2];
      if (!v5) {
        operator new();
      }
      this = (std::string *)CoreML::Specification::MILSpec::ValueType::MergeFrom(v5, *((const CoreML::Specification::MILSpec::ValueType **)a2 + 2));
    }
    if (*((void *)a2 + 3))
    {
      if (!v3[1].__r_.__value_.__r.__words[0]) {
        operator new();
      }
      uint64_t v6 = (const CoreML::Specification::MILSpec::Dimension *)*((void *)a2 + 3);
      int data = (std::string *)v3[1].__r_.__value_.__l.__data_;
      return CoreML::Specification::MILSpec::Dimension::MergeFrom(data, v6);
    }
  }
  return this;
}

void sub_19EB21190(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

CoreML::Specification::MILSpec::TupleType *CoreML::Specification::MILSpec::TupleType::TupleType(CoreML::Specification::MILSpec::TupleType *this)
{
  *(void *)this = &unk_1EF0DA958;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  if (this != (CoreML::Specification::MILSpec::TupleType *)&CoreML::Specification::MILSpec::_TupleType_default_instance_) {
    CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(this);
  }
  *((_DWORD *)this + 1CoreML::Specification::Scaler::New(this, 0) = 0;
  return this;
}

void sub_19EB2122C(_Unwind_Exception *a1)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

unint64_t *CoreML::Specification::MILSpec::TupleType::MergeFrom(unint64_t *this, const CoreML::Specification::MILSpec::TupleType *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    this = (unint64_t *)google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  int v5 = *((_DWORD *)a2 + 6);
  if (v5)
  {
    uint64_t v28 = *((void *)a2 + 4);
    this = (unint64_t *)google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)(v3 + 2), v5);
    uint64_t v6 = this;
    uint64_t v7 = *(int *)v3[4];
    uint64_t v8 = *((int *)v3 + 6);
    int v9 = v7 - v8;
    if ((int)v7 - (int)v8 >= v5) {
      uint64_t v10 = v5;
    }
    else {
      uint64_t v10 = v9;
    }
    if ((int)v10 >= 1)
    {
      uint64_t v11 = (CoreML::Specification::MILSpec::ValueType **)(v28 + 8);
      int v12 = (CoreML::Specification::MILSpec::ValueType **)this;
      do
      {
        int v14 = *v11++;
        int v13 = v14;
        int v15 = *v12++;
        this = (unint64_t *)google::protobuf::internal::GenericTypeHandler<CoreML::Specification::MILSpec::ValueType>::Merge(v13, v15);
        --v10;
      }
      while (v10);
    }
    if (v9 < v5)
    {
      int v16 = (google::protobuf::Arena *)v3[2];
      int v17 = v8 + v5 - v7;
      uint64_t v18 = 8 * v7 - 8 * v8;
      unint64_t v19 = (google::protobuf::Arena ***)((char *)v6 + v18);
      uint64_t v20 = (CoreML::Specification::MILSpec::ValueType **)(v18 + v28 + 8);
      do
      {
        uint64_t v21 = *v20;
        if (!v16) {
          operator new();
        }
        CoreML::Specification::MILSpec::ValueType::ValueType((CoreML::Specification::MILSpec::ValueType *)Aligned);
        unsigned int v23 = google::protobuf::Arena::AllocateAligned(v16, 0, 24);
        *unsigned int v23 = (google::protobuf::Arena *)Aligned;
        v23[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::ValueType>;
        unint64_t v24 = (unint64_t *)((char *)v16 + 32);
        do
          unint64_t v25 = __ldxr(v24);
        while (__stxr((unint64_t)v23, v24));
        v23[2] = (google::protobuf::Arena *)v25;
        this = (unint64_t *)google::protobuf::internal::GenericTypeHandler<CoreML::Specification::MILSpec::ValueType>::Merge(v21, (CoreML::Specification::MILSpec::ValueType *)Aligned);
        *v19++ = Aligned;
        ++v20;
        --v17;
      }
      while (v17);
    }
    int v26 = *((_DWORD *)v3 + 6) + v5;
    *((_DWORD *)v3 + 6) = v26;
    BOOL v27 = (int *)v3[4];
    if (*v27 < v26) {
      *BOOL v27 = v26;
    }
  }
  return this;
}

void sub_19EB213F8(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

CoreML::Specification::MILSpec::DictionaryType *CoreML::Specification::MILSpec::DictionaryType::DictionaryType(CoreML::Specification::MILSpec::DictionaryType *this)
{
  *(void *)this = &unk_1EF0D99E8;
  *((void *)this + 1) = 0;
  if (this != (CoreML::Specification::MILSpec::DictionaryType *)&CoreML::Specification::MILSpec::_DictionaryType_default_instance_) {
    CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(this);
  }
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  return this;
}

void sub_19EB21480(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

std::string *CoreML::Specification::MILSpec::DictionaryType::MergeFrom(std::string *this, const CoreML::Specification::MILSpec::DictionaryType *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    this = google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  if (a2 != (const CoreML::Specification::MILSpec::DictionaryType *)&CoreML::Specification::MILSpec::_DictionaryType_default_instance_)
  {
    if (*((void *)a2 + 2))
    {
      int v5 = (CoreML::Specification::MILSpec::ValueType *)v3->__r_.__value_.__r.__words[2];
      if (!v5) {
        operator new();
      }
      this = (std::string *)CoreML::Specification::MILSpec::ValueType::MergeFrom(v5, *((const CoreML::Specification::MILSpec::ValueType **)a2 + 2));
    }
    if (*((void *)a2 + 3))
    {
      if (!v3[1].__r_.__value_.__r.__words[0]) {
        operator new();
      }
      uint64_t v6 = (const CoreML::Specification::MILSpec::ValueType *)*((void *)a2 + 3);
      int data = (CoreML::Specification::MILSpec::ValueType *)v3[1].__r_.__value_.__l.__data_;
      return (std::string *)CoreML::Specification::MILSpec::ValueType::MergeFrom(data, v6);
    }
  }
  return this;
}

void sub_19EB21598(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

CoreML::Specification::MILSpec::StateType *CoreML::Specification::MILSpec::StateType::StateType(CoreML::Specification::MILSpec::StateType *this)
{
  *(void *)this = &unk_1EF0DA8C0;
  *((void *)this + 1) = 0;
  if (this != (CoreML::Specification::MILSpec::StateType *)&CoreML::Specification::MILSpec::_StateType_default_instance_) {
    CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(this);
  }
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
  return this;
}

void sub_19EB21624(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

std::string *CoreML::Specification::MILSpec::StateType::MergeFrom(std::string *this, const CoreML::Specification::MILSpec::StateType *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    this = google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  uint64_t v5 = *((void *)a2 + 2);
  if (a2 != (const CoreML::Specification::MILSpec::StateType *)&CoreML::Specification::MILSpec::_StateType_default_instance_
    && v5 != 0)
  {
    if (!v3->__r_.__value_.__r.__words[2]) {
      operator new();
    }
    if (v5) {
      uint64_t v7 = (const CoreML::Specification::MILSpec::ValueType *)*((void *)a2 + 2);
    }
    else {
      uint64_t v7 = (const CoreML::Specification::MILSpec::ValueType *)&CoreML::Specification::MILSpec::_ValueType_default_instance_;
    }
    uint64_t v8 = (CoreML::Specification::MILSpec::ValueType *)v3->__r_.__value_.__r.__words[2];
    return (std::string *)CoreML::Specification::MILSpec::ValueType::MergeFrom(v8, v7);
  }
  return this;
}

void sub_19EB216F4(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::GenericTypeHandler<CoreML::Specification::MILSpec::ValueType>::Merge(CoreML::Specification::MILSpec::ValueType *a1, CoreML::Specification::MILSpec::ValueType *this)
{
  return CoreML::Specification::MILSpec::ValueType::MergeFrom(this, a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::ValueType>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

CoreML::Specification::MILSpec::Dimension *CoreML::Specification::MILSpec::Dimension::Dimension(CoreML::Specification::MILSpec::Dimension *this)
{
  *(void *)this = &unk_1EF0DA6F8;
  *((void *)this + 1) = 0;
  if (this != (CoreML::Specification::MILSpec::Dimension *)&CoreML::Specification::MILSpec::_Dimension_default_instance_) {
    CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(this);
  }
  *((void *)this + 3) = 0;
  return this;
}

void sub_19EB217AC(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

std::string *CoreML::Specification::MILSpec::Dimension::MergeFrom(std::string *this, const CoreML::Specification::MILSpec::Dimension *a2)
{
  uint64_t v3 = (uint64_t)this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    this = google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  int v5 = *((_DWORD *)a2 + 7);
  if (v5 == 2)
  {
    if (*(_DWORD *)(v3 + 28) != 2)
    {
      CoreML::Specification::MILSpec::Dimension::clear_dimension(v3);
      *(_DWORD *)(v3 + 28) = 2;
      operator new();
    }
    uint64_t v7 = *(void *)(v3 + 16);
    uint64_t v9 = *((void *)a2 + 2);
    uint64_t v12 = *(void *)(v9 + 8);
    if (v12) {
      this = google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((unint64_t *)(v7 + 8), v12 & 0xFFFFFFFFFFFFFFFELL);
    }
    if (*(unsigned char *)(v9 + 16)) {
      *(unsigned char *)(v7 + 16) = 1;
    }
  }
  else if (v5 == 1)
  {
    if (*(_DWORD *)(v3 + 28) != 1)
    {
      CoreML::Specification::MILSpec::Dimension::clear_dimension(v3);
      *(_DWORD *)(v3 + 28) = 1;
      operator new();
    }
    uint64_t v6 = *(void *)(v3 + 16);
    uint64_t v8 = *((void *)a2 + 2);
    uint64_t v10 = *(void *)(v8 + 8);
    if (v10) {
      this = google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((unint64_t *)(v6 + 8), v10 & 0xFFFFFFFFFFFFFFFELL);
    }
    uint64_t v11 = *(void *)(v8 + 16);
    if (v11) {
      *(void *)(v6 + 16) = v11;
    }
  }
  return this;
}

void sub_19EB2192C(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x1081C40B60F2DE8);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::Dimension::clear_dimension(uint64_t this)
{
  uint64_t v1 = this;
  int v2 = *(_DWORD *)(this + 28);
  if (v2 == 2 || v2 == 1)
  {
    this = *(void *)(this + 16);
    if (this) {
      this = (*(uint64_t (**)(uint64_t))(*(void *)this + 8))(this);
    }
  }
  *(_DWORD *)(v1 + 28) = 0;
  return this;
}

CoreML::Specification::MILSpec::Dimension_ConstantDimension *CoreML::Specification::MILSpec::Dimension_ConstantDimension::Dimension_ConstantDimension(CoreML::Specification::MILSpec::Dimension_ConstantDimension *this)
{
  *(void *)this = &unk_1EF0DA070;
  *((void *)this + 1) = 0;
  if (this != (CoreML::Specification::MILSpec::Dimension_ConstantDimension *)&CoreML::Specification::MILSpec::_Dimension_ConstantDimension_default_instance_) {
    CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(this);
  }
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
  return this;
}

void sub_19EB21A2C(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

CoreML::Specification::MILSpec::Dimension_UnknownDimension *CoreML::Specification::MILSpec::Dimension_UnknownDimension::Dimension_UnknownDimension(CoreML::Specification::MILSpec::Dimension_UnknownDimension *this)
{
  *(void *)this = &unk_1EF0D9F40;
  *((void *)this + 1) = 0;
  if (this != (CoreML::Specification::MILSpec::Dimension_UnknownDimension *)&CoreML::Specification::MILSpec::_Dimension_UnknownDimension_default_instance_) {
    CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(this);
  }
  *((unsigned char *)this + 16) = 0;
  *((_DWORD *)this + 5) = 0;
  return this;
}

void sub_19EB21AA4(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void *google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::MergeFrom(uint64_t a1, uint64_t a2)
{
  uint64_t result = google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::begin(v10, *(void **)(a2 + 24));
  uint64_t v4 = v10[0];
  if (v10[0])
  {
    uint64_t v5 = a1 + 8;
    do
    {
      uint64_t v6 = *((void *)v4 + 3);
      uint64_t v7 = (const CoreML::Specification::MILSpec::Value *)(v6 + 24);
      uint64_t v8 = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::operator[](v5, v6);
      if (v7 != (const CoreML::Specification::MILSpec::Value *)v8)
      {
        uint64_t v9 = (std::string *)v8;
        CoreML::Specification::MILSpec::Value::Clear((CoreML::Specification::MILSpec::Value *)v8);
        CoreML::Specification::MILSpec::Value::MergeFrom(v9, v7);
      }
      uint64_t result = google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::KeyValuePair const>::operator++(v10);
      uint64_t v4 = v10[0];
    }
    while (v10[0]);
  }
  return result;
}

google::protobuf::Arena **google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::operator[](uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a1 + 16);
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  std::string::size_type v24 = 0;
  google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper(v26, (uint64_t)v4, (unsigned __int8 *)&__p, 0);
  uint64_t v6 = v26[0];
  if (v26[0]) {
    goto LABEL_18;
  }
  unint64_t v7 = v4[1];
  unint64_t v8 = *v4 + 1;
  unint64_t v9 = ((3 * v7) >> 2) & 0xFFFFFFFFFFFFFFFLL;
  if (v9 <= v8)
  {
    if (v7 <= 0x800000000000000)
    {
      uint64_t v20 = 2 * v7;
LABEL_33:
      google::protobuf::Map<std::string,std::string>::InnerMap::Resize((uint64_t)v4, v20, v5);
      google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper(v25, (uint64_t)v4, (unsigned __int8 *)&__p, 0);
      uint64_t v11 = v25[3];
      goto LABEL_11;
    }
  }
  else if (v7 >= 9 && (12 * v7) >> 6 >= v8)
  {
    char v21 = 0;
    unint64_t v22 = ((5 * v8) >> 2) + 1;
    do
      ++v21;
    while (v22 << v21 < v9);
    uint64_t v20 = v7 >> v21 <= 8 ? 8 : v7 >> v21;
    if (v20 != v7) {
      goto LABEL_33;
    }
  }
  uint64_t v11 = v26[3];
LABEL_11:
  uint64_t v12 = (google::protobuf::Arena *)v4[5];
  if (v12) {
    Aligned = (std::string *)google::protobuf::Arena::AllocateAligned(v12, MEMORY[0x1E4FBA3A0], 40);
  }
  else {
    Aligned = (std::string *)operator new(0x28uLL);
  }
  int v14 = (std::string::__raw *)Aligned;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(Aligned, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    long long v15 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    Aligned->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
    *(_OWORD *)&Aligned->__r_.__value_.__l.__data_ = v15;
  }
  v14[1].__words[0] = v24;
  google::protobuf::Map<std::string,std::string>::InnerMap::InsertUnique(v25, (uint64_t)v4, v11, v14);
  ++*v4;
  uint64_t v6 = v25[0];
LABEL_18:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  int v16 = *(google::protobuf::Arena ***)(v6 + 24);
  if (!v16)
  {
    if (!*(void *)a1) {
      operator new();
    }
    int v16 = google::protobuf::Arena::AllocateAligned(*(google::protobuf::Arena **)a1, MEMORY[0x1E4FBA3A0], 72);
    int v17 = *(google::protobuf::Arena **)a1;
    v16[1] = 0;
    v16[2] = 0;
    *int v16 = 0;
    google::protobuf::Arena::OwnDestructor<std::string>((google::protobuf::Arena **)v17, (google::protobuf::Arena *)v16);
    uint64_t v18 = *(google::protobuf::Arena **)a1;
    CoreML::Specification::MILSpec::Value::Value((CoreML::Specification::MILSpec::Value *)(v16 + 3));
    google::protobuf::Arena::OwnDestructor<CoreML::Specification::MILSpec::Value>((google::protobuf::Arena **)v18, (google::protobuf::Arena *)(v16 + 3));
    std::string::operator=((std::string *)v16, (const std::string *)a2);
    *(void *)(v6 + 24) = v16;
  }
  return v16 + 3;
}

void sub_19EB21DA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  MEMORY[0x19F3C1920](v14, 0x10B2C40CC7398DALL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::Value::Clear(CoreML::Specification::MILSpec::Value *this)
{
  uint64_t v2 = *((void *)this + 2);
  if ((long long *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(unsigned char **)uint64_t v2 = 0;
      *(void *)(v2 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v2 = 0;
      *(unsigned char *)(v2 + 23) = 0;
    }
  }
  uint64_t v3 = *((void *)this + 3);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *((void *)this + 3) = 0;

  return CoreML::Specification::MILSpec::Value::clear_value((uint64_t)this);
}

google::protobuf::Arena **google::protobuf::Arena::OwnDestructor<CoreML::Specification::MILSpec::Value>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    uint64_t result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *uint64_t result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Value>;
    uint64_t v4 = (unint64_t *)(v3 + 4);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

std::string *google::protobuf::internal::GenericTypeHandler<CoreML::Specification::MILSpec::Dimension>::Merge(CoreML::Specification::MILSpec::Dimension *a1, std::string *this)
{
  return CoreML::Specification::MILSpec::Dimension::MergeFrom(this, a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Dimension>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t CoreML::Specification::MILSpec::DictionaryValue::IsInitialized(CoreML::Specification::MILSpec::DictionaryValue *this)
{
  return 1;
}

uint64_t CoreML::Specification::MILSpec::DictionaryValue::Clear(uint64_t this)
{
  uint64_t v1 = *(unsigned int *)(this + 24);
  if ((int)v1 >= 1)
  {
    uint64_t v2 = this;
    uint64_t v3 = (CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair **)(*(void *)(this + 32) + 8);
    do
    {
      uint64_t v4 = *v3++;
      this = CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair::Clear(v4);
      --v1;
    }
    while (v1);
    *(_DWORD *)(v2 + 24) = 0;
  }
  return this;
}

uint64_t CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair::Clear(CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair *this)
{
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 2) = 0;
  uint64_t result = *((void *)this + 3);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 3) = 0;
  return result;
}

void CoreML::Specification::MILSpec::DictionaryValue::New(CoreML::Specification::MILSpec::DictionaryValue *this, google::protobuf::Arena *a2)
{
}

void sub_19EB22050(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::MILSpec::DictionaryValue>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    uint64_t result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *uint64_t result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::DictionaryValue>;
    uint64_t v4 = (unint64_t *)(v3 + 4);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::DictionaryValue>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void CoreML::Specification::MILSpec::DictionaryValue::New(CoreML::Specification::MILSpec::DictionaryValue *this)
{
}

void *CoreML::Specification::MILSpec::DictionaryValue::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.MILSpec.DictionaryValue");
}

void CoreML::Specification::MILSpec::DictionaryValue::~DictionaryValue(CoreML::Specification::MILSpec::DictionaryValue *this)
{
  CoreML::Specification::MILSpec::DictionaryValue::~DictionaryValue(this);

  JUMPOUT(0x19F3C1920);
}

{
  *(void *)this = &unk_1EF0D9B18;
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>((void *)this + 2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

uint64_t CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair::GetCachedSize(CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair *this)
{
  return *((unsigned int *)this + 8);
}

uint64_t *CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair::SerializeWithCachedSizes(uint64_t *this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  if (this != &CoreML::Specification::MILSpec::_DictionaryValue_KeyValuePair_default_instance_)
  {
    unint64_t v5 = this;
    uint64_t v6 = this[2];
    if (v6) {
      this = (uint64_t *)google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)1, v6, a2, a4);
    }
    uint64_t v7 = v5[3];
    if (v7)
    {
      return (uint64_t *)google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)2, v7, a2, a4);
    }
  }
  return this;
}

uint64_t CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair::IsInitialized(CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair *this)
{
  return 1;
}

void CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair::New(CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair *this, google::protobuf::Arena *a2)
{
}

void sub_19EB2227C(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C40C9A46F13);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    uint64_t result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *uint64_t result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair>;
    uint64_t v4 = (unint64_t *)(v3 + 4);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair::New(CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair *this)
{
}

void *CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.MILSpec.DictionaryValue.KeyValuePair");
}

void CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair::~DictionaryValue_KeyValuePair(CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair *this)
{
  CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair::~DictionaryValue_KeyValuePair(this);

  JUMPOUT(0x19F3C1920);
}

{
  uint64_t v2;
  uint64_t v3;

  *(void *)this = &unk_1EF0DA238;
  if (this != (CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair *)&CoreML::Specification::MILSpec::_DictionaryValue_KeyValuePair_default_instance_)
  {
    uint64_t v2 = *((void *)this + 2);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
    uint64_t v3 = *((void *)this + 3);
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

uint64_t CoreML::Specification::MILSpec::ListValue::GetCachedSize(CoreML::Specification::MILSpec::ListValue *this)
{
  return *((unsigned int *)this + 10);
}

uint64_t CoreML::Specification::MILSpec::ListValue::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  int v4 = *(_DWORD *)(this + 24);
  if (v4)
  {
    uint64_t v6 = this;
    for (int i = 0; i != v4; ++i)
      this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)1, *(void *)(*(void *)(v6 + 32) + 8 * i + 8), a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::MILSpec::ListValue::MergePartialFromCodedStream(CoreML::Specification::MILSpec::ListValue *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  int v4 = (CoreML::Specification::MILSpec::ListValue *)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      unint64_t v5 = *(char **)a2;
      if (*(void *)a2 >= *((void *)a2 + 1))
      {
        LODWORD(v6) = 0;
LABEL_7:
        unsigned int TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v6);
        unint64_t v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0) {
          break;
        }
        goto LABEL_8;
      }
      uint64_t v6 = *v5;
      if (*v5 < 1) {
        goto LABEL_7;
      }
      *(void *)a2 = v5 + 1;
      unint64_t v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0) {
        break;
      }
LABEL_8:
      if (v7 != 10 || (v7 & 0xFFFFFFF8) != 8) {
        break;
      }
      uint64_t v11 = google::protobuf::internal::RepeatedPtrFieldBase::Add<google::protobuf::RepeatedPtrField<CoreML::Specification::MILSpec::Value>::TypeHandler>(v4);
      uint64_t v12 = *(char **)a2;
      if (*(void *)a2 >= *((void *)a2 + 1) || *v12 < 0)
      {
        int VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (VarintSizeAsIntFallback < 0) {
          return 0;
        }
      }
      else
      {
        int VarintSizeAsIntFallback = *v12;
        *(void *)a2 = v12 + 1;
      }
      int v14 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
      int v15 = *((_DWORD *)a2 + 13);
      BOOL v16 = __OFSUB__(v15--, 1);
      *((_DWORD *)a2 + 13) = v15;
      if (v15 < 0 == v16)
      {
        int v17 = v14;
        uint64_t result = CoreML::Specification::MILSpec::Value::MergePartialFromCodedStream((CoreML::Specification::MILSpec::Value *)v11, a2);
        if (!result) {
          return result;
        }
        if (google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v17)) {
          continue;
        }
      }
      return 0;
    }
    if (!v7 || (v7 & 7) == 4) {
      return 1;
    }
    if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0) {
      return 0;
    }
  }
}

google::protobuf::Arena **google::protobuf::internal::RepeatedPtrFieldBase::Add<google::protobuf::RepeatedPtrField<CoreML::Specification::MILSpec::Value>::TypeHandler>(google::protobuf::internal::RepeatedPtrFieldBase *this)
{
  uint64_t v2 = (int *)*((void *)this + 2);
  if (!v2)
  {
    int v3 = *((_DWORD *)this + 2);
    int v4 = *((_DWORD *)this + 3);
LABEL_6:
    if (v3 <= v4)
    {
      google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend(this, v4 - v3 + 1);
      uint64_t v2 = (int *)*((void *)this + 2);
    }
    int v4 = *v2;
    goto LABEL_9;
  }
  int v3 = *((_DWORD *)this + 2);
  int v4 = *v2;
  if (v3 < *v2)
  {
    *((_DWORD *)this + 2) = v3 + 1;
    return *(google::protobuf::Arena ***)&v2[2 * v3 + 2];
  }
  if (v4 == *((_DWORD *)this + 3)) {
    goto LABEL_6;
  }
LABEL_9:
  *uint64_t v2 = v4 + 1;
  uint64_t v6 = *(google::protobuf::Arena **)this;
  if (!*(void *)this) {
    operator new();
  }
  CoreML::Specification::MILSpec::Value::Value((CoreML::Specification::MILSpec::Value *)Aligned);
  unint64_t v7 = google::protobuf::Arena::AllocateAligned(v6, 0, 24);
  *unint64_t v7 = (google::protobuf::Arena *)Aligned;
  v7[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Value>;
  unint64_t v8 = (unint64_t *)((char *)v6 + 32);
  do
    unint64_t v9 = __ldxr(v8);
  while (__stxr((unint64_t)v7, v8));
  v7[2] = (google::protobuf::Arena *)v9;
  uint64_t v10 = *((void *)this + 2);
  uint64_t v11 = *((int *)this + 2);
  *((_DWORD *)this + 2) = v11 + 1;
  *(void *)(v10 + 8 * v11 + 8) = Aligned;
  return Aligned;
}

void sub_19EB226F8(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C40000F1E19);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::ListValue::IsInitialized(CoreML::Specification::MILSpec::ListValue *this)
{
  return 1;
}

uint64_t CoreML::Specification::MILSpec::ListValue::Clear(uint64_t this)
{
  uint64_t v1 = *(unsigned int *)(this + 24);
  if ((int)v1 >= 1)
  {
    uint64_t v2 = this;
    int v3 = (CoreML::Specification::MILSpec::Value **)(*(void *)(this + 32) + 8);
    do
    {
      int v4 = *v3++;
      this = CoreML::Specification::MILSpec::Value::Clear(v4);
      --v1;
    }
    while (v1);
    *(_DWORD *)(v2 + 24) = 0;
  }
  return this;
}

void CoreML::Specification::MILSpec::ListValue::New(CoreML::Specification::MILSpec::ListValue *this, google::protobuf::Arena *a2)
{
}

void sub_19EB227CC(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::MILSpec::ListValue>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  if (a2)
  {
    int v3 = result;
    uint64_t result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *uint64_t result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::ListValue>;
    int v4 = (unint64_t *)(v3 + 4);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::ListValue>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void CoreML::Specification::MILSpec::ListValue::New(CoreML::Specification::MILSpec::ListValue *this)
{
}

void *CoreML::Specification::MILSpec::ListValue::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.MILSpec.ListValue");
}

void CoreML::Specification::MILSpec::ListValue::~ListValue(CoreML::Specification::MILSpec::ListValue *this)
{
  CoreML::Specification::MILSpec::ListValue::~ListValue(this);

  JUMPOUT(0x19F3C1920);
}

{
  *(void *)this = &unk_1EF0DA790;
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>((void *)this + 2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

uint64_t CoreML::Specification::MILSpec::TupleValue::GetCachedSize(CoreML::Specification::MILSpec::TupleValue *this)
{
  return *((unsigned int *)this + 10);
}

uint64_t CoreML::Specification::MILSpec::TupleValue::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  int v4 = *(_DWORD *)(this + 24);
  if (v4)
  {
    uint64_t v6 = this;
    for (int i = 0; i != v4; ++i)
      this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)1, *(void *)(*(void *)(v6 + 32) + 8 * i + 8), a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::MILSpec::TupleValue::MergePartialFromCodedStream(CoreML::Specification::MILSpec::TupleValue *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  int v4 = (CoreML::Specification::MILSpec::TupleValue *)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      unint64_t v5 = *(char **)a2;
      if (*(void *)a2 >= *((void *)a2 + 1))
      {
        LODWORD(v6) = 0;
LABEL_7:
        unsigned int TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v6);
        unint64_t v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0) {
          break;
        }
        goto LABEL_8;
      }
      uint64_t v6 = *v5;
      if (*v5 < 1) {
        goto LABEL_7;
      }
      *(void *)a2 = v5 + 1;
      unint64_t v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0) {
        break;
      }
LABEL_8:
      if (v7 != 10 || (v7 & 0xFFFFFFF8) != 8) {
        break;
      }
      uint64_t v11 = google::protobuf::internal::RepeatedPtrFieldBase::Add<google::protobuf::RepeatedPtrField<CoreML::Specification::MILSpec::Value>::TypeHandler>(v4);
      uint64_t v12 = *(char **)a2;
      if (*(void *)a2 >= *((void *)a2 + 1) || *v12 < 0)
      {
        int VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (VarintSizeAsIntFallback < 0) {
          return 0;
        }
      }
      else
      {
        int VarintSizeAsIntFallback = *v12;
        *(void *)a2 = v12 + 1;
      }
      int v14 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
      int v15 = *((_DWORD *)a2 + 13);
      BOOL v16 = __OFSUB__(v15--, 1);
      *((_DWORD *)a2 + 13) = v15;
      if (v15 < 0 == v16)
      {
        int v17 = v14;
        uint64_t result = CoreML::Specification::MILSpec::Value::MergePartialFromCodedStream((CoreML::Specification::MILSpec::Value *)v11, a2);
        if (!result) {
          return result;
        }
        if (google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v17)) {
          continue;
        }
      }
      return 0;
    }
    if (!v7 || (v7 & 7) == 4) {
      return 1;
    }
    if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0) {
      return 0;
    }
  }
}

uint64_t CoreML::Specification::MILSpec::TupleValue::IsInitialized(CoreML::Specification::MILSpec::TupleValue *this)
{
  return 1;
}

uint64_t CoreML::Specification::MILSpec::TupleValue::Clear(uint64_t this)
{
  uint64_t v1 = *(unsigned int *)(this + 24);
  if ((int)v1 >= 1)
  {
    uint64_t v2 = this;
    int v3 = (CoreML::Specification::MILSpec::Value **)(*(void *)(this + 32) + 8);
    do
    {
      int v4 = *v3++;
      this = CoreML::Specification::MILSpec::Value::Clear(v4);
      --v1;
    }
    while (v1);
    *(_DWORD *)(v2 + 24) = 0;
  }
  return this;
}

void CoreML::Specification::MILSpec::TupleValue::New(CoreML::Specification::MILSpec::TupleValue *this, google::protobuf::Arena *a2)
{
}

void sub_19EB22B6C(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::MILSpec::TupleValue>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  if (a2)
  {
    int v3 = result;
    uint64_t result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *uint64_t result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::TupleValue>;
    int v4 = (unint64_t *)(v3 + 4);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::TupleValue>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void CoreML::Specification::MILSpec::TupleValue::New(CoreML::Specification::MILSpec::TupleValue *this)
{
}

void *CoreML::Specification::MILSpec::TupleValue::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.MILSpec.TupleValue");
}

void CoreML::Specification::MILSpec::TupleValue::~TupleValue(CoreML::Specification::MILSpec::TupleValue *this)
{
  CoreML::Specification::MILSpec::TupleValue::~TupleValue(this);

  JUMPOUT(0x19F3C1920);
}

{
  *(void *)this = &unk_1EF0D98B8;
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>((void *)this + 2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

uint64_t CoreML::Specification::MILSpec::TensorValue::GetCachedSize(CoreML::Specification::MILSpec::TensorValue *this)
{
  return *((unsigned int *)this + 6);
}

uint64_t CoreML::Specification::MILSpec::TensorValue::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 28);
  if (v6 == 1)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)1, *(void *)(this + 16), a2, a4);
    int v6 = *(_DWORD *)(v5 + 28);
  }
  if (v6 == 2)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)2, *(void *)(v5 + 16), a2, a4);
    int v6 = *(_DWORD *)(v5 + 28);
  }
  if (v6 == 3)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)3, *(void *)(v5 + 16), a2, a4);
    int v6 = *(_DWORD *)(v5 + 28);
  }
  if (v6 == 4)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)4, *(void *)(v5 + 16), a2, a4);
    int v6 = *(_DWORD *)(v5 + 28);
  }
  if (v6 == 5)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)5, *(void *)(v5 + 16), a2, a4);
    int v6 = *(_DWORD *)(v5 + 28);
  }
  if (v6 == 6)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)6, *(void *)(v5 + 16), a2, a4);
    int v6 = *(_DWORD *)(v5 + 28);
  }
  if (v6 == 7)
  {
    uint64_t v7 = *(void *)(v5 + 16);
    return google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)7, v7, a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::MILSpec::TensorValue::MergePartialFromCodedStream(CoreML::Specification::MILSpec::TensorValue *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  while (2)
  {
    while (1)
    {
      uint64_t v5 = *(char **)a2;
      if (*(void *)a2 >= *((void *)a2 + 1)) {
        break;
      }
      uint64_t v6 = *v5;
      if (*v5 < 1) {
        goto LABEL_6;
      }
      *(void *)a2 = v5 + 1;
      unint64_t v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) != 0) {
        goto LABEL_7;
      }
LABEL_29:
      if (v7) {
        BOOL v16 = (v7 & 7) == 4;
      }
      else {
        BOOL v16 = 1;
      }
      if (v16) {
        return 1;
      }
      if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0) {
        goto LABEL_91;
      }
    }
    LODWORD(v6) = 0;
LABEL_6:
    unsigned int TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v6);
    unint64_t v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
    if ((v7 & 0x100000000) == 0) {
      goto LABEL_29;
    }
LABEL_7:
    switch(v7 >> 3)
    {
      case 1u:
        if (v7 != 10) {
          goto LABEL_29;
        }
        if (*((_DWORD *)this + 7) != 1)
        {
          CoreML::Specification::MILSpec::TensorValue::clear_value((uint64_t)this);
          *((_DWORD *)this + 7) = 1;
          operator new();
        }
        unint64_t v9 = (CoreML::Specification::MILSpec::TensorValue_RepeatedFloats *)*((void *)this + 2);
        int v17 = *(char **)a2;
        if (*(void *)a2 >= *((void *)a2 + 1) || *v17 < 0)
        {
          int VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (VarintSizeAsIntFallback < 0) {
            goto LABEL_91;
          }
        }
        else
        {
          int VarintSizeAsIntFallback = *v17;
          *(void *)a2 = v17 + 1;
        }
        int v31 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
        int v33 = *((_DWORD *)a2 + 13);
        BOOL v34 = __OFSUB__(v33--, 1);
        *((_DWORD *)a2 + 13) = v33;
        if (v33 < 0 != v34) {
          goto LABEL_91;
        }
        int v35 = v31;
        uint64_t result = CoreML::Specification::MILSpec::TensorValue_RepeatedFloats::MergePartialFromCodedStream(v9, (char **)a2, v32);
        if (!result) {
          return result;
        }
        goto LABEL_90;
      case 2u:
        if (v7 != 18) {
          goto LABEL_29;
        }
        if (*((_DWORD *)this + 7) != 2)
        {
          CoreML::Specification::MILSpec::TensorValue::clear_value((uint64_t)this);
          *((_DWORD *)this + 7) = 2;
          operator new();
        }
        uint64_t v10 = (CoreML::Specification::MILSpec::TensorValue_RepeatedInts *)*((void *)this + 2);
        unint64_t v19 = *(char **)a2;
        if (*(void *)a2 >= *((void *)a2 + 1) || *v19 < 0)
        {
          int v20 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v20 < 0) {
            goto LABEL_91;
          }
        }
        else
        {
          int v20 = *v19;
          *(void *)a2 = v19 + 1;
        }
        int v37 = google::protobuf::io::CodedInputStream::PushLimit(a2, v20);
        int v39 = *((_DWORD *)a2 + 13);
        BOOL v34 = __OFSUB__(v39--, 1);
        *((_DWORD *)a2 + 13) = v39;
        if (v39 < 0 != v34) {
          goto LABEL_91;
        }
        int v35 = v37;
        uint64_t result = CoreML::Specification::MILSpec::TensorValue_RepeatedInts::MergePartialFromCodedStream(v10, a2, v38);
        if (!result) {
          return result;
        }
        goto LABEL_90;
      case 3u:
        if (v7 != 26) {
          goto LABEL_29;
        }
        if (*((_DWORD *)this + 7) != 3)
        {
          CoreML::Specification::MILSpec::TensorValue::clear_value((uint64_t)this);
          *((_DWORD *)this + 7) = 3;
          operator new();
        }
        uint64_t v11 = (CoreML::Specification::MILSpec::TensorValue_RepeatedBools *)*((void *)this + 2);
        char v21 = *(char **)a2;
        if (*(void *)a2 >= *((void *)a2 + 1) || *v21 < 0)
        {
          int v22 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v22 < 0) {
            goto LABEL_91;
          }
        }
        else
        {
          int v22 = *v21;
          *(void *)a2 = v21 + 1;
        }
        int v40 = google::protobuf::io::CodedInputStream::PushLimit(a2, v22);
        int v42 = *((_DWORD *)a2 + 13);
        BOOL v34 = __OFSUB__(v42--, 1);
        *((_DWORD *)a2 + 13) = v42;
        if (v42 < 0 != v34) {
          goto LABEL_91;
        }
        int v35 = v40;
        uint64_t result = CoreML::Specification::MILSpec::TensorValue_RepeatedBools::MergePartialFromCodedStream(v11, a2, v41);
        if (!result) {
          return result;
        }
        goto LABEL_90;
      case 4u:
        if (v7 != 34) {
          goto LABEL_29;
        }
        if (*((_DWORD *)this + 7) != 4)
        {
          CoreML::Specification::MILSpec::TensorValue::clear_value((uint64_t)this);
          *((_DWORD *)this + 7) = 4;
          operator new();
        }
        uint64_t v12 = (CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *)*((void *)this + 2);
        unsigned int v23 = *(char **)a2;
        if (*(void *)a2 >= *((void *)a2 + 1) || *v23 < 0)
        {
          int v24 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v24 < 0) {
            goto LABEL_91;
          }
        }
        else
        {
          int v24 = *v23;
          *(void *)a2 = v23 + 1;
        }
        int v43 = google::protobuf::io::CodedInputStream::PushLimit(a2, v24);
        int v45 = *((_DWORD *)a2 + 13);
        BOOL v34 = __OFSUB__(v45--, 1);
        *((_DWORD *)a2 + 13) = v45;
        if (v45 < 0 != v34) {
          goto LABEL_91;
        }
        int v35 = v43;
        uint64_t result = CoreML::Specification::MILSpec::TensorValue_RepeatedStrings::MergePartialFromCodedStream(v12, (char **)a2, v44);
        if (!result) {
          return result;
        }
        goto LABEL_90;
      case 5u:
        if (v7 != 42) {
          goto LABEL_29;
        }
        if (*((_DWORD *)this + 7) != 5)
        {
          CoreML::Specification::MILSpec::TensorValue::clear_value((uint64_t)this);
          *((_DWORD *)this + 7) = 5;
          operator new();
        }
        int v13 = (CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *)*((void *)this + 2);
        unint64_t v25 = *(char **)a2;
        if (*(void *)a2 >= *((void *)a2 + 1) || *v25 < 0)
        {
          int v26 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v26 < 0) {
            goto LABEL_91;
          }
        }
        else
        {
          int v26 = *v25;
          *(void *)a2 = v25 + 1;
        }
        int v46 = google::protobuf::io::CodedInputStream::PushLimit(a2, v26);
        int v48 = *((_DWORD *)a2 + 13);
        BOOL v34 = __OFSUB__(v48--, 1);
        *((_DWORD *)a2 + 13) = v48;
        if (v48 < 0 != v34) {
          goto LABEL_91;
        }
        int v35 = v46;
        uint64_t result = CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts::MergePartialFromCodedStream(v13, a2, v47);
        if (!result) {
          return result;
        }
        goto LABEL_90;
      case 6u:
        if (v7 != 50) {
          goto LABEL_29;
        }
        if (*((_DWORD *)this + 7) != 6)
        {
          CoreML::Specification::MILSpec::TensorValue::clear_value((uint64_t)this);
          *((_DWORD *)this + 7) = 6;
          operator new();
        }
        int v14 = (CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles *)*((void *)this + 2);
        BOOL v27 = *(char **)a2;
        if (*(void *)a2 >= *((void *)a2 + 1) || *v27 < 0)
        {
          int v28 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v28 < 0) {
            goto LABEL_91;
          }
        }
        else
        {
          int v28 = *v27;
          *(void *)a2 = v27 + 1;
        }
        int v49 = google::protobuf::io::CodedInputStream::PushLimit(a2, v28);
        int v51 = *((_DWORD *)a2 + 13);
        BOOL v34 = __OFSUB__(v51--, 1);
        *((_DWORD *)a2 + 13) = v51;
        if (v51 < 0 != v34) {
          goto LABEL_91;
        }
        int v35 = v49;
        uint64_t result = CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles::MergePartialFromCodedStream(v14, (char **)a2, v50);
        if (!result) {
          return result;
        }
        goto LABEL_90;
      case 7u:
        if (v7 != 58) {
          goto LABEL_29;
        }
        if (*((_DWORD *)this + 7) != 7)
        {
          CoreML::Specification::MILSpec::TensorValue::clear_value((uint64_t)this);
          *((_DWORD *)this + 7) = 7;
          operator new();
        }
        int v15 = (CoreML::Specification::MILSpec::TensorValue_RepeatedBytes *)*((void *)this + 2);
        int v29 = *(char **)a2;
        if (*(void *)a2 >= *((void *)a2 + 1) || *v29 < 0)
        {
          int v30 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v30 < 0) {
            goto LABEL_91;
          }
        }
        else
        {
          int v30 = *v29;
          *(void *)a2 = v29 + 1;
        }
        int v52 = google::protobuf::io::CodedInputStream::PushLimit(a2, v30);
        int v54 = *((_DWORD *)a2 + 13);
        BOOL v34 = __OFSUB__(v54--, 1);
        *((_DWORD *)a2 + 13) = v54;
        if (v54 < 0 != v34) {
          goto LABEL_91;
        }
        int v35 = v52;
        uint64_t result = CoreML::Specification::MILSpec::TensorValue_RepeatedBytes::MergePartialFromCodedStream(v15, (char **)a2, v53);
        if (!result) {
          return result;
        }
LABEL_90:
        if (google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v35)) {
          continue;
        }
LABEL_91:
        uint64_t result = 0;
        break;
      default:
        goto LABEL_29;
    }
    return result;
  }
}

void sub_19EB233CC(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

BOOL CoreML::Specification::MILSpec::TensorValue_RepeatedFloats::MergePartialFromCodedStream(CoreML::Specification::MILSpec::TensorValue_RepeatedFloats *this, char **a2, unsigned int a3)
{
  uint64_t v5 = (unsigned int *)((char *)this + 16);
  do
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v6 = *a2;
          if (*a2 < a2[1]) {
            break;
          }
          LODWORD(v7) = 0;
LABEL_7:
          unsigned int TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback((google::protobuf::io::CodedInputStream *)a2, v7);
          unint64_t v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
          if ((v8 & 0x100000000) != 0) {
            goto LABEL_8;
          }
LABEL_14:
          if (v8) {
            BOOL v12 = (v8 & 7) == 4;
          }
          else {
            BOOL v12 = 1;
          }
          if (v12) {
            return 1;
          }
          if ((google::protobuf::internal::WireFormatLite::SkipField((google::protobuf::internal::WireFormatLite *)a2, (google::protobuf::io::CodedInputStream *)v8, a3) & 1) == 0)return 0; {
        }
          }
        uint64_t v7 = *v6;
        if (*v6 < 1) {
          goto LABEL_7;
        }
        *a2 = v6 + 1;
        unint64_t v8 = v7 | 0x100000000;
        if ((v8 & 0x100000000) == 0) {
          goto LABEL_14;
        }
LABEL_8:
        if ((v8 & 0xFFFFFFF8) != 8) {
          goto LABEL_14;
        }
        if (v8 != 13) {
          break;
        }
        if (!google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<float,(google::protobuf::internal::WireFormatLite::FieldType)2>(10, (unsigned int **)a2, (uint64_t)v5))return 0; {
      }
        }
      if (v8 != 10) {
        goto LABEL_14;
      }
      uint64_t v10 = *a2;
      if (*a2 >= a2[1] || *v10 < 0)
      {
        unsigned int VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((google::protobuf::io::CodedInputStream *)a2);
        if ((VarintSizeAsIntFallback & 0x80000000) != 0) {
          return 0;
        }
      }
      else
      {
        unsigned int VarintSizeAsIntFallback = *v10;
        *a2 = v10 + 1;
      }
      if ((VarintSizeAsIntFallback & 3) != 0) {
        return 0;
      }
      int v13 = *((_DWORD *)a2 + 12);
      int v14 = v13 == 0x7FFFFFFF
          ? -1
          : v13 - *((_DWORD *)a2 + 6) + *((_DWORD *)a2 + 11) + *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
      int v15 = *((_DWORD *)a2 + 10);
      int v16 = v15 == 0x7FFFFFFF
          ? -1
          : v15 - *((_DWORD *)a2 + 6) + *((_DWORD *)a2 + 11) + *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
      signed int v17 = *v5;
      unsigned int v18 = VarintSizeAsIntFallback >> 2;
      int v19 = v16 >= v14 ? v14 : v16;
      int v20 = v14 == -1 ? v16 : v19;
      if (v20 >= (uint64_t)VarintSizeAsIntFallback) {
        break;
      }
      if (VarintSizeAsIntFallback >= 4)
      {
        if (v18 <= 1) {
          int v21 = 1;
        }
        else {
          int v21 = VarintSizeAsIntFallback >> 2;
        }
        do
        {
          unsigned int v30 = 0;
          int v22 = (unsigned int *)*a2;
          if ((int)(*((_DWORD *)a2 + 2) - *a2) < 4)
          {
            BOOL result = google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback((unsigned int **)a2, &v30);
            if (!result) {
              return result;
            }
            unsigned int v23 = v30;
            signed int v17 = *v5;
          }
          else
          {
            unsigned int v23 = *v22;
            *a2 = (char *)(v22 + 1);
          }
          if (v17 == *((_DWORD *)this + 5))
          {
            google::protobuf::RepeatedField<float>::Reserve(v5, v17 + 1);
            signed int v17 = *v5;
          }
          uint64_t v24 = *((void *)this + 3) + 4 * v17;
          *((_DWORD *)this + 4) = v17 + 1;
          *(_DWORD *)(v24 + 8) = v23;
          ++v17;
          --v21;
        }
        while (v21);
      }
    }
    signed int v26 = v17 + v18;
    if (VarintSizeAsIntFallback > 3)
    {
      google::protobuf::RepeatedField<float>::Reserve(v5, v17 + v18);
      uint64_t v27 = *((void *)this + 3);
      uint64_t v28 = 4 * v26 - 4 * *((int *)this + 4);
      if (v28 >= 1) {
        bzero((void *)(v27 + 8 + 4 * *((int *)this + 4)), 4 * (((unint64_t)v28 >> 2) - ((unint64_t)v28 > 3)) + 4);
      }
    }
    else
    {
      uint64_t v27 = *((void *)this + 3);
    }
    *uint64_t v5 = v26;
    uint64_t v29 = v27 + 8;
    if (!v27) {
      uint64_t v29 = 0;
    }
  }
  while (google::protobuf::io::CodedInputStream::ReadRaw((google::protobuf::io::CodedInputStream *)a2, (char *)(v29 + 4 * v17), VarintSizeAsIntFallback));
  if ((int)*v5 >= 1)
  {
    BOOL result = 0;
    *uint64_t v5 = v17;
    return result;
  }
  return 0;
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedInts::MergePartialFromCodedStream(CoreML::Specification::MILSpec::TensorValue_RepeatedInts *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  uint64_t v5 = (signed int *)((char *)this + 16);
  while (1)
  {
LABEL_2:
    uint64_t v6 = *(char **)a2;
    if (*(void *)a2 >= *((void *)a2 + 1))
    {
      LODWORD(v7) = 0;
    }
    else
    {
      uint64_t v7 = *v6;
      if (*v6 >= 1)
      {
        *(void *)a2 = v6 + 1;
        unint64_t v8 = v7 | 0x100000000;
        if ((v8 & 0x100000000) == 0) {
          break;
        }
        goto LABEL_8;
      }
    }
    unsigned int TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v7);
    unint64_t v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
    if ((v8 & 0x100000000) == 0) {
      break;
    }
LABEL_8:
    if ((v8 & 0xFFFFFFF8) != 8) {
      break;
    }
    if (v8 == 8)
    {
      if (google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<int,(google::protobuf::internal::WireFormatLite::FieldType)5>(10, a2, v5))continue; {
      return 0;
      }
    }
    if (v8 != 10) {
      break;
    }
    uint64_t v10 = *(char **)a2;
    if (*(void *)a2 >= *((void *)a2 + 1) || *v10 < 0)
    {
      int VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
      if (VarintSizeAsIntFallback < 0) {
        return 0;
      }
    }
    else
    {
      int VarintSizeAsIntFallback = *v10;
      *(void *)a2 = v10 + 1;
    }
    int v13 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
    while (1)
    {
      int v14 = *((_DWORD *)a2 + 10);
      uint64_t v15 = *((int *)a2 + 11);
      unint64_t v16 = *((void *)a2 + 1);
      int v17 = *((_DWORD *)a2 + 6);
      if (v14 == 0x7FFFFFFF) {
        break;
      }
      unsigned int v18 = *(char **)a2;
      if ((int)(v14 - v17 + v15 + v16 - *(void *)a2) < 1) {
        break;
      }
      if ((unint64_t)v18 >= v16)
      {
        int v19 = 0;
      }
      else
      {
        int v19 = *v18;
        if ((*v18 & 0x80000000) == 0)
        {
          *(void *)a2 = v18 + 1;
          goto LABEL_31;
        }
      }
      uint64_t Varint32Fallback = google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v19);
      int v19 = Varint32Fallback;
      if (Varint32Fallback < 0) {
        return 0;
      }
LABEL_31:
      signed int v21 = *((_DWORD *)this + 4);
      if (v21 == *((_DWORD *)this + 5))
      {
        google::protobuf::RepeatedField<float>::Reserve((unsigned int *)v5, v21 + 1);
        signed int v21 = *v5;
      }
      uint64_t v22 = *((void *)this + 3);
      *((_DWORD *)this + 4) = v21 + 1;
      *(_DWORD *)(v22 + 4 * v21 + 8) = v19;
    }
    *((_DWORD *)a2 + 1CoreML::Specification::MILSpec::TupleValue::New(this, 0) = v13;
    uint64_t v23 = v16 + v15;
    *((void *)a2 + 1) = v23;
    int v24 = *((_DWORD *)a2 + 12);
    if (v24 >= v13) {
      int v24 = v13;
    }
    BOOL v25 = __OFSUB__(v17, v24);
    int v26 = v17 - v24;
    if ((v26 < 0) ^ v25 | (v26 == 0)) {
      int v26 = 0;
    }
    else {
      *((void *)a2 + 1) = v23 - v26;
    }
    *((_DWORD *)a2 + 11) = v26;
    *((unsigned char *)a2 + 36) = 0;
  }
  if (v8) {
    BOOL v12 = (v8 & 7) == 4;
  }
  else {
    BOOL v12 = 1;
  }
  if (v12) {
    return 1;
  }
  if (google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v8, a3)) {
    goto LABEL_2;
  }
  return 0;
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedBools::MergePartialFromCodedStream(CoreML::Specification::MILSpec::TensorValue_RepeatedBools *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  uint64_t v5 = (unsigned int *)((char *)this + 16);
  do
  {
    while (1)
    {
      uint64_t v6 = *(char **)a2;
      if (*(void *)a2 >= *((void *)a2 + 1))
      {
        LODWORD(v7) = 0;
LABEL_7:
        unsigned int TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v7);
        unint64_t v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v8 & 0x100000000) == 0) {
          break;
        }
        goto LABEL_8;
      }
      uint64_t v7 = *v6;
      if (*v6 < 1) {
        goto LABEL_7;
      }
      *(void *)a2 = v6 + 1;
      unint64_t v8 = v7 | 0x100000000;
      if ((v8 & 0x100000000) == 0) {
        break;
      }
LABEL_8:
      if ((v8 & 0xFFFFFFF8) != 8) {
        break;
      }
      if (v8 == 8)
      {
        if ((google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<BOOL,(google::protobuf::internal::WireFormatLite::FieldType)8>(10, a2, (uint64_t)v5) & 1) == 0)return 0; {
      }
        }
      else
      {
        if (v8 != 10) {
          break;
        }
        uint64_t v10 = *(char **)a2;
        if (*(void *)a2 >= *((void *)a2 + 1) || *v10 < 0)
        {
          int VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (VarintSizeAsIntFallback < 0) {
            return 0;
          }
        }
        else
        {
          int VarintSizeAsIntFallback = *v10;
          *(void *)a2 = v10 + 1;
        }
        int v13 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
        while (1)
        {
          int v14 = *((_DWORD *)a2 + 10);
          uint64_t v15 = *((int *)a2 + 11);
          unint64_t v16 = *((void *)a2 + 1);
          int v17 = *((_DWORD *)a2 + 6);
          if (v14 == 0x7FFFFFFF) {
            break;
          }
          unsigned int v18 = *(char **)a2;
          if ((int)(v14 - v17 + v15 + v16 - *(void *)a2) < 1) {
            break;
          }
          if ((unint64_t)v18 >= v16 || *v18 < 0)
          {
            unint64_t Varint64Fallback = google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2);
            if ((v20 & 1) == 0) {
              return 0;
            }
          }
          else
          {
            unint64_t Varint64Fallback = *v18;
            *(void *)a2 = v18 + 1;
          }
          BOOL v21 = Varint64Fallback != 0;
          signed int v22 = *((_DWORD *)this + 4);
          if (v22 == *((_DWORD *)this + 5))
          {
            google::protobuf::RepeatedField<BOOL>::Reserve(v5, v22 + 1);
            signed int v22 = *v5;
          }
          uint64_t v23 = *((void *)this + 3);
          *((_DWORD *)this + 4) = v22 + 1;
          *(unsigned char *)(v23 + v22 + 8) = v21;
        }
        *((_DWORD *)a2 + 1CoreML::Specification::MILSpec::TupleValue::New(this, 0) = v13;
        uint64_t v24 = v16 + v15;
        *((void *)a2 + 1) = v16 + v15;
        int v25 = *((_DWORD *)a2 + 12);
        if (v25 >= v13) {
          int v25 = v13;
        }
        BOOL v26 = __OFSUB__(v17, v25);
        int v27 = v17 - v25;
        if ((v27 < 0) ^ v26 | (v27 == 0)) {
          int v27 = 0;
        }
        else {
          *((void *)a2 + 1) = v24 - v27;
        }
        *((_DWORD *)a2 + 11) = v27;
        *((unsigned char *)a2 + 36) = 0;
      }
    }
    if (v8) {
      BOOL v12 = (v8 & 7) == 4;
    }
    else {
      BOOL v12 = 1;
    }
    if (v12) {
      return 1;
    }
  }
  while ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v8, a3) & 1) != 0);
  return 0;
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedStrings::MergePartialFromCodedStream(CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *this, char **a2, unsigned int a3)
{
  uint64_t v5 = (google::protobuf::Arena **)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      uint64_t v6 = *a2;
      if (*a2 >= a2[1])
      {
        LODWORD(v7) = 0;
LABEL_7:
        unsigned int TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback((google::protobuf::io::CodedInputStream *)a2, v7);
        unint64_t v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v8 & 0x100000000) == 0) {
          break;
        }
        goto LABEL_8;
      }
      uint64_t v7 = *v6;
      if (*v6 < 1) {
        goto LABEL_7;
      }
      *a2 = v6 + 1;
      unint64_t v8 = v7 | 0x100000000;
      if ((v8 & 0x100000000) == 0) {
        break;
      }
LABEL_8:
      if (v8 != 10 || (v8 & 0xFFFFFFF8) != 8) {
        break;
      }
      BOOL v12 = (int *)*((void *)this + 4);
      if (!v12)
      {
        int v13 = *((_DWORD *)this + 6);
        int v14 = *((_DWORD *)this + 7);
        goto LABEL_23;
      }
      int v13 = *((_DWORD *)this + 6);
      int v14 = *v12;
      if (v13 >= *v12)
      {
        if (v14 != *((_DWORD *)this + 7))
        {
LABEL_26:
          *BOOL v12 = v14 + 1;
          unint64_t v16 = *v5;
          if (!*v5) {
            operator new();
          }
          Aligned->__r_.__value_.__l.__size_ = 0;
          Aligned->__r_.__value_.__r.__words[2] = 0;
          Aligned->__r_.__value_.__r.__words[0] = 0;
          int v17 = google::protobuf::Arena::AllocateAligned(v16, 0, 24);
          char *v17 = (google::protobuf::Arena *)Aligned;
          v17[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<std::string>;
          unsigned int v18 = (unint64_t *)((char *)v16 + 32);
          do
            unint64_t v19 = __ldxr(v18);
          while (__stxr((unint64_t)v17, v18));
          v17[2] = (google::protobuf::Arena *)v19;
          uint64_t v20 = *((void *)this + 4);
          uint64_t v21 = *((int *)this + 6);
          *((_DWORD *)this + 6) = v21 + 1;
          *(void *)(v20 + 8 * v21 + 8) = Aligned;
          goto LABEL_31;
        }
LABEL_23:
        if (v13 <= v14)
        {
          google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)v5, v14 - v13 + 1);
          BOOL v12 = (int *)*((void *)this + 4);
        }
        int v14 = *v12;
        goto LABEL_26;
      }
      *((_DWORD *)this + 6) = v13 + 1;
      Aligned = *(std::string **)&v12[2 * v13 + 2];
LABEL_31:
      uint64_t result = google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)a2, Aligned);
      if (!result) {
        return result;
      }
      uint64_t v23 = *((void *)this + 4);
      uint64_t v24 = *(unsigned int **)(v23 + 8 * *((int *)this + 6));
      if (*((char *)v24 + 23) < 0)
      {
        uint64_t v24 = *(unsigned int **)v24;
        uint64_t v25 = *(void *)(*(void *)(v23 + 8 * *((int *)this + 6)) + 8);
      }
      else
      {
        LODWORD(v25) = *((unsigned __int8 *)v24 + 23);
      }
      if (!google::protobuf::internal::WireFormatLite::VerifyUtf8String(v24, v25, 0, (uint64_t)"CoreML.Specification.MILSpec.TensorValue.RepeatedStrings.values"))return 0; {
    }
      }
    if (!v8 || (v8 & 7) == 4) {
      return 1;
    }
    if ((google::protobuf::internal::WireFormatLite::SkipField((google::protobuf::internal::WireFormatLite *)a2, (google::protobuf::io::CodedInputStream *)v8, a3) & 1) == 0)return 0; {
  }
    }
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts::MergePartialFromCodedStream(CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  uint64_t v5 = (unsigned int *)((char *)this + 16);
  do
  {
    while (1)
    {
      uint64_t v6 = *(char **)a2;
      if (*(void *)a2 >= *((void *)a2 + 1))
      {
        LODWORD(v7) = 0;
LABEL_7:
        unsigned int TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v7);
        unint64_t v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v8 & 0x100000000) == 0) {
          break;
        }
        goto LABEL_8;
      }
      uint64_t v7 = *v6;
      if (*v6 < 1) {
        goto LABEL_7;
      }
      *(void *)a2 = v6 + 1;
      unint64_t v8 = v7 | 0x100000000;
      if ((v8 & 0x100000000) == 0) {
        break;
      }
LABEL_8:
      if ((v8 & 0xFFFFFFF8) != 8) {
        break;
      }
      if (v8 == 8)
      {
        if ((google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<long long,(google::protobuf::internal::WireFormatLite::FieldType)3>(10, a2, (uint64_t)v5) & 1) == 0)return 0; {
      }
        }
      else
      {
        if (v8 != 10) {
          break;
        }
        uint64_t v10 = *(char **)a2;
        if (*(void *)a2 >= *((void *)a2 + 1) || *v10 < 0)
        {
          int VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (VarintSizeAsIntFallback < 0) {
            return 0;
          }
        }
        else
        {
          int VarintSizeAsIntFallback = *v10;
          *(void *)a2 = v10 + 1;
        }
        int v13 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
        while (1)
        {
          int v14 = *((_DWORD *)a2 + 10);
          uint64_t v15 = *((int *)a2 + 11);
          unint64_t v16 = *((void *)a2 + 1);
          int v17 = *((_DWORD *)a2 + 6);
          if (v14 == 0x7FFFFFFF) {
            break;
          }
          unsigned int v18 = *(char **)a2;
          if ((int)(v14 - v17 + v15 + v16 - *(void *)a2) < 1) {
            break;
          }
          if ((unint64_t)v18 >= v16 || *v18 < 0)
          {
            unint64_t Varint64Fallback = google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2);
            if ((v21 & 1) == 0) {
              return 0;
            }
            unint64_t v19 = Varint64Fallback;
          }
          else
          {
            unint64_t v19 = *v18;
            *(void *)a2 = v18 + 1;
          }
          signed int v22 = *((_DWORD *)this + 4);
          if (v22 == *((_DWORD *)this + 5))
          {
            google::protobuf::RepeatedField<double>::Reserve(v5, v22 + 1);
            signed int v22 = *v5;
          }
          uint64_t v23 = *((void *)this + 3);
          *((_DWORD *)this + 4) = v22 + 1;
          *(void *)(v23 + 8 * v22 + 8) = v19;
        }
        *((_DWORD *)a2 + 1CoreML::Specification::MILSpec::TupleValue::New(this, 0) = v13;
        uint64_t v24 = v16 + v15;
        *((void *)a2 + 1) = v16 + v15;
        int v25 = *((_DWORD *)a2 + 12);
        if (v25 >= v13) {
          int v25 = v13;
        }
        BOOL v26 = __OFSUB__(v17, v25);
        int v27 = v17 - v25;
        if ((v27 < 0) ^ v26 | (v27 == 0)) {
          int v27 = 0;
        }
        else {
          *((void *)a2 + 1) = v24 - v27;
        }
        *((_DWORD *)a2 + 11) = v27;
        *((unsigned char *)a2 + 36) = 0;
      }
    }
    if (v8) {
      BOOL v12 = (v8 & 7) == 4;
    }
    else {
      BOOL v12 = 1;
    }
    if (v12) {
      return 1;
    }
  }
  while ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v8, a3) & 1) != 0);
  return 0;
}

BOOL CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles::MergePartialFromCodedStream(CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles *this, char **a2, unsigned int a3)
{
  uint64_t v5 = (unsigned int *)((char *)this + 16);
  do
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v6 = *a2;
          if (*a2 < a2[1]) {
            break;
          }
          LODWORD(v7) = 0;
LABEL_7:
          unsigned int TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback((google::protobuf::io::CodedInputStream *)a2, v7);
          unint64_t v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
          if ((v8 & 0x100000000) != 0) {
            goto LABEL_8;
          }
LABEL_14:
          if (v8) {
            BOOL v12 = (v8 & 7) == 4;
          }
          else {
            BOOL v12 = 1;
          }
          if (v12) {
            return 1;
          }
          if ((google::protobuf::internal::WireFormatLite::SkipField((google::protobuf::internal::WireFormatLite *)a2, (google::protobuf::io::CodedInputStream *)v8, a3) & 1) == 0)return 0; {
        }
          }
        uint64_t v7 = *v6;
        if (*v6 < 1) {
          goto LABEL_7;
        }
        *a2 = v6 + 1;
        unint64_t v8 = v7 | 0x100000000;
        if ((v8 & 0x100000000) == 0) {
          goto LABEL_14;
        }
LABEL_8:
        if ((v8 & 0xFFFFFFF8) != 8) {
          goto LABEL_14;
        }
        if (v8 != 9) {
          break;
        }
        if (!google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<double,(google::protobuf::internal::WireFormatLite::FieldType)1>(10, (unint64_t **)a2, (uint64_t)v5))return 0; {
      }
        }
      if (v8 != 10) {
        goto LABEL_14;
      }
      uint64_t v10 = *a2;
      if (*a2 >= a2[1] || *v10 < 0)
      {
        unsigned int VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((google::protobuf::io::CodedInputStream *)a2);
        if ((VarintSizeAsIntFallback & 0x80000000) != 0) {
          return 0;
        }
      }
      else
      {
        unsigned int VarintSizeAsIntFallback = *v10;
        *a2 = v10 + 1;
      }
      if ((VarintSizeAsIntFallback & 7) != 0) {
        return 0;
      }
      int v13 = *((_DWORD *)a2 + 12);
      int v14 = v13 == 0x7FFFFFFF
          ? -1
          : v13 - *((_DWORD *)a2 + 6) + *((_DWORD *)a2 + 11) + *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
      int v15 = *((_DWORD *)a2 + 10);
      int v16 = v15 == 0x7FFFFFFF
          ? -1
          : v15 - *((_DWORD *)a2 + 6) + *((_DWORD *)a2 + 11) + *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
      signed int v17 = *v5;
      unsigned int v18 = VarintSizeAsIntFallback >> 3;
      int v19 = v16 >= v14 ? v14 : v16;
      int v20 = v14 == -1 ? v16 : v19;
      if (v20 >= (uint64_t)VarintSizeAsIntFallback) {
        break;
      }
      if (VarintSizeAsIntFallback >= 8)
      {
        if (v18 <= 1) {
          int v21 = 1;
        }
        else {
          int v21 = VarintSizeAsIntFallback >> 3;
        }
        do
        {
          unint64_t v30 = 0;
          signed int v22 = (unint64_t *)*a2;
          if ((int)(*((_DWORD *)a2 + 2) - *a2) < 8)
          {
            BOOL result = google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v30);
            if (!result) {
              return result;
            }
            unint64_t v23 = v30;
            signed int v17 = *v5;
          }
          else
          {
            unint64_t v23 = *v22;
            *a2 = (char *)(v22 + 1);
          }
          if (v17 == *((_DWORD *)this + 5))
          {
            google::protobuf::RepeatedField<double>::Reserve(v5, v17 + 1);
            signed int v17 = *v5;
          }
          uint64_t v24 = *((void *)this + 3) + 8 * v17;
          *((_DWORD *)this + 4) = v17 + 1;
          *(void *)(v24 + 8) = v23;
          ++v17;
          --v21;
        }
        while (v21);
      }
    }
    signed int v26 = v17 + v18;
    if (VarintSizeAsIntFallback > 7)
    {
      google::protobuf::RepeatedField<double>::Reserve(v5, v17 + v18);
      uint64_t v27 = *((void *)this + 3);
      uint64_t v28 = 8 * v26 - 8 * *((int *)this + 4);
      if (v28 >= 1) {
        bzero((void *)(v27 + 8 + 8 * *((int *)this + 4)), 8 * (((unint64_t)v28 >> 3) - ((unint64_t)v28 > 7)) + 8);
      }
    }
    else
    {
      uint64_t v27 = *((void *)this + 3);
    }
    *uint64_t v5 = v26;
    uint64_t v29 = v27 + 8;
    if (!v27) {
      uint64_t v29 = 0;
    }
  }
  while (google::protobuf::io::CodedInputStream::ReadRaw((google::protobuf::io::CodedInputStream *)a2, (char *)(v29 + 8 * v17), VarintSizeAsIntFallback));
  if ((int)*v5 >= 1)
  {
    BOOL result = 0;
    *uint64_t v5 = v17;
    return result;
  }
  return 0;
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedBytes::MergePartialFromCodedStream(CoreML::Specification::MILSpec::TensorValue_RepeatedBytes *this, char **a2, unsigned int a3)
{
  int v4 = (std::string **)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      uint64_t v5 = *a2;
      if (*a2 >= a2[1])
      {
        LODWORD(v6) = 0;
LABEL_7:
        unsigned int TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback((google::protobuf::io::CodedInputStream *)a2, v6);
        unint64_t v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0) {
          break;
        }
        goto LABEL_8;
      }
      uint64_t v6 = *v5;
      if (*v5 < 1) {
        goto LABEL_7;
      }
      *a2 = v5 + 1;
      unint64_t v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0) {
        break;
      }
LABEL_8:
      if (v7 != 10 || (v7 & 0xFFFFFFF8) != 8) {
        break;
      }
      if (*v4 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
      }
      if ((google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)a2, *v4) & 1) == 0) {
        return 0;
      }
    }
    if (!v7 || (v7 & 7) == 4) {
      return 1;
    }
    if ((google::protobuf::internal::WireFormatLite::SkipField((google::protobuf::internal::WireFormatLite *)a2, (google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)return 0; {
  }
    }
}

uint64_t google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<long long,(google::protobuf::internal::WireFormatLite::FieldType)3>(int a1, google::protobuf::io::CodedInputStream *this, uint64_t a3)
{
  uint64_t v6 = *(char **)this;
  if (*(void *)this >= *((void *)this + 1) || *v6 < 0)
  {
    unint64_t Varint64Fallback = google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this);
    if ((v9 & 1) == 0) {
      return 0;
    }
    unint64_t v7 = Varint64Fallback;
  }
  else
  {
    unint64_t v7 = *v6;
    *(void *)this = v6 + 1;
  }
  signed int v11 = *(_DWORD *)a3;
  int v12 = *(_DWORD *)(a3 + 4);
  if (*(_DWORD *)a3 == v12)
  {
    google::protobuf::RepeatedField<double>::Reserve((unsigned int *)a3, v11 + 1);
    signed int v11 = *(_DWORD *)a3;
    int v12 = *(_DWORD *)(a3 + 4);
  }
  uint64_t v13 = *(void *)(a3 + 8);
  signed int v14 = v11 + 1;
  *(_DWORD *)a3 = v11 + 1;
  *(void *)(v13 + 8 * v11 + 8) = v7;
  if (v12 - (v11 + 1) >= 1)
  {
    int v15 = v12 - v11;
    do
    {
      int v16 = *(char **)this;
      unint64_t v17 = *((void *)this + 1);
      if (*(void *)this >= v17 || *v16 != a1) {
        break;
      }
      *(void *)this = v16 + 1;
      if ((unint64_t)(v16 + 1) >= v17 || v16[1] < 0)
      {
        unint64_t v18 = google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this);
        if ((v19 & 1) == 0) {
          return 0;
        }
        uint64_t v13 = *(void *)(a3 + 8);
        signed int v14 = *(_DWORD *)a3;
      }
      else
      {
        unint64_t v18 = v16[1];
        *(void *)this = v16 + 2;
      }
      uint64_t v20 = v13 + 8 * v14++;
      *(_DWORD *)a3 = v14;
      *(void *)(v20 + 8) = v18;
      --v15;
    }
    while (v15 > 1);
  }
  return 1;
}

uint64_t google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<BOOL,(google::protobuf::internal::WireFormatLite::FieldType)8>(int a1, google::protobuf::io::CodedInputStream *this, uint64_t a3)
{
  uint64_t v6 = *(char **)this;
  if (*(void *)this >= *((void *)this + 1) || *v6 < 0)
  {
    unint64_t Varint64Fallback = google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this);
    if ((v8 & 1) == 0) {
      return 0;
    }
  }
  else
  {
    unint64_t Varint64Fallback = *v6;
    *(void *)this = v6 + 1;
  }
  BOOL v10 = Varint64Fallback != 0;
  signed int v11 = *(_DWORD *)a3;
  int v12 = *(_DWORD *)(a3 + 4);
  if (*(_DWORD *)a3 == v12)
  {
    google::protobuf::RepeatedField<BOOL>::Reserve((unsigned int *)a3, v11 + 1);
    signed int v11 = *(_DWORD *)a3;
    int v12 = *(_DWORD *)(a3 + 4);
  }
  uint64_t v13 = *(void *)(a3 + 8);
  signed int v14 = v11 + 1;
  *(_DWORD *)a3 = v11 + 1;
  *(unsigned char *)(v13 + v11 + 8) = v10;
  if (v12 - (v11 + 1) >= 1)
  {
    int v15 = v12 - v11;
    do
    {
      int v16 = *(char **)this;
      unint64_t v17 = *((void *)this + 1);
      if (*(void *)this >= v17 || *v16 != a1) {
        break;
      }
      *(void *)this = v16 + 1;
      if ((unint64_t)(v16 + 1) >= v17 || v16[1] < 0)
      {
        unint64_t v18 = google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this);
        if ((v19 & 1) == 0) {
          return 0;
        }
        uint64_t v13 = *(void *)(a3 + 8);
        signed int v14 = *(_DWORD *)a3;
      }
      else
      {
        unint64_t v18 = v16[1];
        *(void *)this = v16 + 2;
      }
      uint64_t v20 = v13 + v14++;
      *(_DWORD *)a3 = v14;
      *(unsigned char *)(v20 + 8) = v18 != 0;
      --v15;
    }
    while (v15 > 1);
  }
  return 1;
}

uint64_t google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<int,(google::protobuf::internal::WireFormatLite::FieldType)5>(int a1, google::protobuf::io::CodedInputStream *this, signed int *a3)
{
  uint64_t v6 = *(char **)this;
  if (*(void *)this >= *((void *)this + 1))
  {
    int v7 = 0;
  }
  else
  {
    int v7 = *v6;
    if ((*v6 & 0x80000000) == 0)
    {
      *(void *)this = v6 + 1;
      goto LABEL_6;
    }
  }
  uint64_t Varint32Fallback = google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v7);
  int v7 = Varint32Fallback;
  if (Varint32Fallback < 0) {
    return 0;
  }
LABEL_6:
  signed int v9 = *a3;
  if (*a3 == a3[1])
  {
    google::protobuf::RepeatedField<float>::Reserve((unsigned int *)a3, v9 + 1);
    signed int v9 = *a3;
  }
  uint64_t v10 = *((void *)a3 + 1);
  *a3 = v9 + 1;
  *(_DWORD *)(v10 + 4 * v9 + 8) = v7;
  int v11 = a3[1] - *a3;
  if (v11 >= 1)
  {
    int v12 = v11 + 1;
    while (1)
    {
      uint64_t v13 = *(char **)this;
      unint64_t v14 = *((void *)this + 1);
      if (*(void *)this >= v14 || *v13 != a1) {
        return 1;
      }
      int v15 = v13 + 1;
      *(void *)this = v13 + 1;
      if ((unint64_t)(v13 + 1) >= v14) {
        break;
      }
      int v16 = *v15;
      if (*v15 < 0) {
        goto LABEL_16;
      }
      *(void *)this = v13 + 2;
LABEL_18:
      uint64_t v18 = *a3;
      *a3 = v18 + 1;
      *(_DWORD *)(v10 + 4 * v18 + 8) = v16;
      if (--v12 <= 1) {
        return 1;
      }
    }
    int v16 = 0;
LABEL_16:
    uint64_t v17 = google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v16);
    if (v17 < 0) {
      return 0;
    }
    int v16 = v17;
    uint64_t v10 = *((void *)a3 + 1);
    goto LABEL_18;
  }
  return 1;
}

BOOL google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<float,(google::protobuf::internal::WireFormatLite::FieldType)2>(int a1, unsigned int **this, uint64_t a3)
{
  uint64_t v6 = *this;
  if ((int)(*((_DWORD *)this + 2) - *this) < 4)
  {
    unsigned int v21 = 0;
    BOOL result = google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v21);
    if (!result) {
      return result;
    }
    unsigned int v7 = v21;
  }
  else
  {
    unsigned int v7 = *v6;
    *this = v6 + 1;
  }
  signed int v8 = *(_DWORD *)a3;
  if (*(_DWORD *)a3 == *(_DWORD *)(a3 + 4))
  {
    google::protobuf::RepeatedField<float>::Reserve((unsigned int *)a3, v8 + 1);
    signed int v8 = *(_DWORD *)a3;
  }
  uint64_t v9 = *(void *)(a3 + 8);
  int v10 = v8 + 1;
  *(_DWORD *)a3 = v8 + 1;
  *(_DWORD *)(v9 + 4 * v8 + 8) = v7;
  int v11 = *this;
  int v12 = *((_DWORD *)this + 2) - *this;
  if (v12 >= 1)
  {
    signed int v13 = *(_DWORD *)(a3 + 4) - v10;
    signed int v14 = v12 / 5u;
    if ((int)(v12 / 5u) >= v13) {
      signed int v14 = *(_DWORD *)(a3 + 4) - v10;
    }
    if (v14 >= 1)
    {
      uint64_t v15 = 0;
      uint64_t v16 = v9 + 4 * v10 + 8;
      int v17 = v8 + 2;
      uint64_t v18 = ((*((_DWORD *)this + 2) - *this) * (unsigned __int128)0x3333333333333334uLL) >> 64;
      if (v18 >= v13) {
        LODWORD(v18) = v13;
      }
      while (*(unsigned __int8 *)v11 == a1)
      {
        int v19 = *(unsigned int *)((char *)v11 + 1);
        *(_DWORD *)a3 = v17 + v15;
        *(_DWORD *)(v16 + 4 * v15++) = v19;
        int v11 = (unsigned int *)((char *)v11 + 5);
        if (v18 == v15) {
          goto LABEL_15;
        }
      }
      signed int v14 = v15;
LABEL_15:
      if (v14 >= 1) {
        google::protobuf::io::CodedInputStream::Skip((google::protobuf::io::CodedInputStream *)this, 5 * v14);
      }
    }
  }
  return 1;
}

uint64_t CoreML::Specification::MILSpec::TensorValue::IsInitialized(CoreML::Specification::MILSpec::TensorValue *this)
{
  return 1;
}

void CoreML::Specification::MILSpec::TensorValue::New(CoreML::Specification::MILSpec::TensorValue *this, google::protobuf::Arena *a2)
{
}

void sub_19EB248B4(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::MILSpec::TensorValue>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  if (a2)
  {
    int v3 = result;
    BOOL result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *BOOL result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::TensorValue>;
    int v4 = (unint64_t *)(v3 + 4);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::TensorValue>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void CoreML::Specification::MILSpec::TensorValue::New(CoreML::Specification::MILSpec::TensorValue *this)
{
}

void *CoreML::Specification::MILSpec::TensorValue::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.MILSpec.TensorValue");
}

void CoreML::Specification::MILSpec::TensorValue::~TensorValue(CoreML::Specification::MILSpec::TensorValue *this)
{
  CoreML::Specification::MILSpec::TensorValue::~TensorValue(this);

  JUMPOUT(0x19F3C1920);
}

{
  *(void *)this = &unk_1EF0D9950;
  if (*((_DWORD *)this + 7)) {
    CoreML::Specification::MILSpec::TensorValue::clear_value((uint64_t)this);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedBytes::GetCachedSize(CoreML::Specification::MILSpec::TensorValue_RepeatedBytes *this)
{
  return *((unsigned int *)this + 6);
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedBytes::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2)
{
  uint64_t v3 = *(void *)(this + 16);
  if ((*(char *)(v3 + 23) & 0x80000000) == 0)
  {
    if (!*(unsigned char *)(v3 + 23)) {
      return this;
    }
    return google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(1u, v3, a2);
  }
  if (*(void *)(v3 + 8)) {
    return google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(1u, v3, a2);
  }
  return this;
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedBytes::IsInitialized(CoreML::Specification::MILSpec::TensorValue_RepeatedBytes *this)
{
  return 1;
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedBytes::Clear(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 16);
  if ((long long *)v1 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v1 + 23) < 0)
    {
      **(unsigned char **)uint64_t v1 = 0;
      *(void *)(v1 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v1 = 0;
      *(unsigned char *)(v1 + 23) = 0;
    }
  }
  return this;
}

void CoreML::Specification::MILSpec::TensorValue_RepeatedBytes::New(CoreML::Specification::MILSpec::TensorValue_RepeatedBytes *this, google::protobuf::Arena *a2)
{
}

void sub_19EB24ADC(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C4084265165);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::MILSpec::TensorValue_RepeatedBytes>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    BOOL result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *BOOL result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::TensorValue_RepeatedBytes>;
    int v4 = (unint64_t *)(v3 + 4);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::TensorValue_RepeatedBytes>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void CoreML::Specification::MILSpec::TensorValue_RepeatedBytes::New(CoreML::Specification::MILSpec::TensorValue_RepeatedBytes *this)
{
}

void *CoreML::Specification::MILSpec::TensorValue_RepeatedBytes::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.MILSpec.TensorValue.RepeatedBytes");
}

void CoreML::Specification::MILSpec::TensorValue_RepeatedBytes::~TensorValue_RepeatedBytes(CoreML::Specification::MILSpec::TensorValue_RepeatedBytes *this)
{
  *(void *)this = &unk_1EF0D9EA8;
  google::protobuf::internal::MapTypeHandler<(google::protobuf::internal::WireFormatLite::FieldType)9,std::string>::DeleteNoArena(*((void *)this + 2));
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);

  JUMPOUT(0x19F3C1920);
}

{
  *(void *)this = &unk_1EF0D9EA8;
  google::protobuf::internal::MapTypeHandler<(google::protobuf::internal::WireFormatLite::FieldType)9,std::string>::DeleteNoArena(*((void *)this + 2));
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedStrings::GetCachedSize(CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *this)
{
  return *((unsigned int *)this + 10);
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedStrings::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2)
{
  uint64_t v2 = *(unsigned int *)(this + 24);
  if ((int)v2 >= 1)
  {
    uint64_t v4 = this;
    uint64_t v5 = -v2;
    uint64_t v6 = 1;
    do
    {
      unsigned int v7 = *(unsigned int **)(*(void *)(v4 + 32) + 8 * v6);
      if (*((char *)v7 + 23) < 0)
      {
        unsigned int v7 = *(unsigned int **)v7;
        uint64_t v8 = *(void *)(*(void *)(*(void *)(v4 + 32) + 8 * v6) + 8);
      }
      else
      {
        LODWORD(v8) = *((unsigned __int8 *)v7 + 23);
      }
      google::protobuf::internal::WireFormatLite::VerifyUtf8String(v7, v8, 1, (uint64_t)"CoreML.Specification.MILSpec.TensorValue.RepeatedStrings.values");
      this = google::protobuf::internal::WireFormatLite::WriteString(1u, *(void *)(*(void *)(v4 + 32) + 8 * v6++), a2);
    }
    while (v5 + v6 != 1);
  }
  return this;
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedStrings::IsInitialized(CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *this)
{
  return 1;
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedStrings::Clear(CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *this)
{
  return google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 16);
}

void CoreML::Specification::MILSpec::TensorValue_RepeatedStrings::New(CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *this, google::protobuf::Arena *a2)
{
}

void sub_19EB24D6C(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::MILSpec::TensorValue_RepeatedStrings>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    BOOL result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *BOOL result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::TensorValue_RepeatedStrings>;
    uint64_t v4 = (unint64_t *)(v3 + 4);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::TensorValue_RepeatedStrings>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void CoreML::Specification::MILSpec::TensorValue_RepeatedStrings::New(CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *this)
{
}

void *CoreML::Specification::MILSpec::TensorValue_RepeatedStrings::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.MILSpec.TensorValue.RepeatedStrings");
}

void CoreML::Specification::MILSpec::TensorValue_RepeatedStrings::~TensorValue_RepeatedStrings(CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *this)
{
  *(void *)this = &unk_1EF0DA1A0;
  uint64_t v1 = (uint64_t *)((char *)this + 8);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((void *)this + 2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);

  JUMPOUT(0x19F3C1920);
}

{
  uint64_t *v1;

  *(void *)this = &unk_1EF0DA1A0;
  uint64_t v1 = (uint64_t *)((char *)this + 8);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((void *)this + 2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedBools::GetCachedSize(CoreML::Specification::MILSpec::TensorValue_RepeatedBools *this)
{
  return *((unsigned int *)this + 9);
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedBools::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2)
{
  if (*(int *)(this + 16) >= 1)
  {
    uint64_t v3 = this;
    if (*((int *)a2 + 4) < 5)
    {
      __src[0] = 10;
      google::protobuf::io::CodedOutputStream::WriteRaw(a2, __src, 1);
      int v4 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(unsigned char *)(*((void *)a2 + 1))++ = 10;
      int v4 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v4;
    }
    unsigned int v5 = *(_DWORD *)(v3 + 32);
    if (v4 < 5)
    {
      google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v5);
    }
    else
    {
      uint64_t v6 = *((void *)a2 + 1);
      if (v5 < 0x80)
      {
        unsigned int v8 = *(_DWORD *)(v3 + 32);
        unsigned int v7 = (unsigned char *)*((void *)a2 + 1);
      }
      else
      {
        unsigned int v7 = (unsigned char *)*((void *)a2 + 1);
        do
        {
          *v7++ = v5 | 0x80;
          unsigned int v8 = v5 >> 7;
          unsigned int v9 = v5 >> 14;
          v5 >>= 7;
        }
        while (v9);
      }
      *unsigned int v7 = v8;
      int v10 = v7 - v6 + 1;
      *((void *)a2 + 1) += v10;
      *((_DWORD *)a2 + 4) -= v10;
    }
    uint64_t v11 = *(void *)(v3 + 24);
    if (v11) {
      int v12 = (char *)(v11 + 8);
    }
    else {
      int v12 = 0;
    }
    int v13 = *(_DWORD *)(v3 + 16);
    return google::protobuf::io::CodedOutputStream::WriteRaw(a2, v12, v13);
  }
  return this;
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedBools::ByteSizeLong(CoreML::Specification::MILSpec::TensorValue_RepeatedBools *this)
{
  uint64_t v1 = *((unsigned int *)this + 4);
  if (v1)
  {
    if ((v1 & 0x80000000) != 0) {
      uint64_t v2 = 11;
    }
    else {
      uint64_t v2 = ((9 * (__clz(v1 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
  }
  else
  {
    uint64_t v2 = 0;
  }
  uint64_t v3 = v2 + v1;
  *((_DWORD *)this + 8) = v1;
  *((_DWORD *)this + 9) = v3;
  return v3;
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedBools::IsInitialized(CoreML::Specification::MILSpec::TensorValue_RepeatedBools *this)
{
  return 1;
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedBools::Clear(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  return this;
}

void CoreML::Specification::MILSpec::TensorValue_RepeatedBools::New(CoreML::Specification::MILSpec::TensorValue_RepeatedBools *this, google::protobuf::Arena *a2)
{
}

void sub_19EB250E0(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::MILSpec::TensorValue_RepeatedBools>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    BOOL result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *BOOL result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::TensorValue_RepeatedBools>;
    int v4 = (unint64_t *)(v3 + 4);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::TensorValue_RepeatedBools>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void CoreML::Specification::MILSpec::TensorValue_RepeatedBools::New(CoreML::Specification::MILSpec::TensorValue_RepeatedBools *this)
{
}

void *CoreML::Specification::MILSpec::TensorValue_RepeatedBools::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.MILSpec.TensorValue.RepeatedBools");
}

void CoreML::Specification::MILSpec::TensorValue_RepeatedBools::~TensorValue_RepeatedBools(CoreML::Specification::MILSpec::TensorValue_RepeatedBools *this)
{
  CoreML::Specification::MILSpec::TensorValue_RepeatedBools::~TensorValue_RepeatedBools(this);

  JUMPOUT(0x19F3C1920);
}

{
  void *v2;

  *(void *)this = &unk_1EF0D9E10;
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2 && !*v2) {
    operator delete(v2);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts::GetCachedSize(CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *this)
{
  return *((unsigned int *)this + 9);
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2)
{
  if (*(int *)(this + 16) >= 1)
  {
    uint64_t v3 = this;
    if (*((int *)a2 + 4) < 5)
    {
      __src[0] = 10;
      this = google::protobuf::io::CodedOutputStream::WriteRaw(a2, __src, 1);
      int v4 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(unsigned char *)(*((void *)a2 + 1))++ = 10;
      int v4 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v4;
    }
    unsigned int v5 = *(_DWORD *)(v3 + 32);
    if (v4 < 5)
    {
      this = google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v5);
    }
    else
    {
      uint64_t v6 = *((void *)a2 + 1);
      if (v5 < 0x80)
      {
        unsigned int v8 = *(_DWORD *)(v3 + 32);
        unsigned int v7 = (unsigned char *)*((void *)a2 + 1);
      }
      else
      {
        unsigned int v7 = (unsigned char *)*((void *)a2 + 1);
        do
        {
          *v7++ = v5 | 0x80;
          unsigned int v8 = v5 >> 7;
          unsigned int v9 = v5 >> 14;
          v5 >>= 7;
        }
        while (v9);
      }
      *unsigned int v7 = v8;
      int v10 = v7 - v6 + 1;
      *((void *)a2 + 1) += v10;
      *((_DWORD *)a2 + 4) -= v10;
    }
    uint64_t v11 = *(unsigned int *)(v3 + 16);
    if ((int)v11 >= 1)
    {
      for (uint64_t i = 0; i != v11; ++i)
      {
        unint64_t v13 = *(void *)(*(void *)(v3 + 24) + 8 * i + 8);
        if (*((int *)a2 + 4) < 10)
        {
          this = google::protobuf::io::CodedOutputStream::WriteVarint64SlowPath(a2, v13);
        }
        else
        {
          uint64_t v14 = *((void *)a2 + 1);
          if (v13 < 0x80)
          {
            unint64_t v16 = *(void *)(*(void *)(v3 + 24) + 8 * i + 8);
            uint64_t v15 = (unsigned char *)*((void *)a2 + 1);
          }
          else
          {
            uint64_t v15 = (unsigned char *)*((void *)a2 + 1);
            do
            {
              *v15++ = v13 | 0x80;
              unint64_t v16 = v13 >> 7;
              unint64_t v17 = v13 >> 14;
              v13 >>= 7;
            }
            while (v17);
          }
          *uint64_t v15 = v16;
          int v18 = v15 - v14 + 1;
          *((void *)a2 + 1) += v18;
          *((_DWORD *)a2 + 4) -= v18;
        }
      }
    }
  }
  return this;
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts::IsInitialized(CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *this)
{
  return 1;
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts::Clear(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  return this;
}

void CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts::New(CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *this, google::protobuf::Arena *a2)
{
}

void sub_19EB25444(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    BOOL result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *BOOL result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts>;
    int v4 = (unint64_t *)(v3 + 4);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts::New(CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *this)
{
}

void *CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.MILSpec.TensorValue.RepeatedLongInts");
}

void CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts::~TensorValue_RepeatedLongInts(CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *this)
{
  CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts::~TensorValue_RepeatedLongInts(this);

  JUMPOUT(0x19F3C1920);
}

{
  void *v2;

  *(void *)this = &unk_1EF0DA2D0;
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2 && !*v2) {
    operator delete(v2);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedInts::GetCachedSize(CoreML::Specification::MILSpec::TensorValue_RepeatedInts *this)
{
  return *((unsigned int *)this + 9);
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedInts::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2)
{
  if (*(int *)(this + 16) >= 1)
  {
    uint64_t v3 = this;
    if (*((int *)a2 + 4) < 5)
    {
      __src[0] = 10;
      this = google::protobuf::io::CodedOutputStream::WriteRaw(a2, __src, 1);
      int v4 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(unsigned char *)(*((void *)a2 + 1))++ = 10;
      int v4 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v4;
    }
    unsigned int v5 = *(_DWORD *)(v3 + 32);
    if (v4 < 5)
    {
      this = google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v5);
    }
    else
    {
      uint64_t v6 = *((void *)a2 + 1);
      if (v5 < 0x80)
      {
        unsigned int v8 = *(_DWORD *)(v3 + 32);
        unsigned int v7 = (unsigned char *)*((void *)a2 + 1);
      }
      else
      {
        unsigned int v7 = (unsigned char *)*((void *)a2 + 1);
        do
        {
          *v7++ = v5 | 0x80;
          unsigned int v8 = v5 >> 7;
          unsigned int v9 = v5 >> 14;
          v5 >>= 7;
        }
        while (v9);
      }
      *unsigned int v7 = v8;
      int v10 = v7 - v6 + 1;
      *((void *)a2 + 1) += v10;
      *((_DWORD *)a2 + 4) -= v10;
    }
    uint64_t v11 = *(unsigned int *)(v3 + 16);
    if ((int)v11 >= 1)
    {
      for (uint64_t i = 0; i != v11; ++i)
      {
        unint64_t v13 = *(int *)(*(void *)(v3 + 24) + 4 * i + 8);
        if (*((int *)a2 + 4) < 10)
        {
          this = google::protobuf::io::CodedOutputStream::WriteVarint64SlowPath(a2, v13);
        }
        else
        {
          uint64_t v14 = *((void *)a2 + 1);
          if (v13 < 0x80)
          {
            LODWORD(v16) = *(_DWORD *)(*(void *)(v3 + 24) + 4 * i + 8);
            uint64_t v15 = (unsigned char *)*((void *)a2 + 1);
          }
          else
          {
            uint64_t v15 = (unsigned char *)*((void *)a2 + 1);
            do
            {
              *v15++ = v13 | 0x80;
              unint64_t v16 = v13 >> 7;
              unint64_t v17 = v13 >> 14;
              v13 >>= 7;
            }
            while (v17);
          }
          *uint64_t v15 = v16;
          int v18 = v15 - v14 + 1;
          *((void *)a2 + 1) += v18;
          *((_DWORD *)a2 + 4) -= v18;
        }
      }
    }
  }
  return this;
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedInts::IsInitialized(CoreML::Specification::MILSpec::TensorValue_RepeatedInts *this)
{
  return 1;
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedInts::Clear(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  return this;
}

void CoreML::Specification::MILSpec::TensorValue_RepeatedInts::New(CoreML::Specification::MILSpec::TensorValue_RepeatedInts *this, google::protobuf::Arena *a2)
{
}

void sub_19EB257A8(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::MILSpec::TensorValue_RepeatedInts>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    BOOL result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *BOOL result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::TensorValue_RepeatedInts>;
    int v4 = (unint64_t *)(v3 + 4);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::TensorValue_RepeatedInts>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void CoreML::Specification::MILSpec::TensorValue_RepeatedInts::New(CoreML::Specification::MILSpec::TensorValue_RepeatedInts *this)
{
}

void *CoreML::Specification::MILSpec::TensorValue_RepeatedInts::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.MILSpec.TensorValue.RepeatedInts");
}

void CoreML::Specification::MILSpec::TensorValue_RepeatedInts::~TensorValue_RepeatedInts(CoreML::Specification::MILSpec::TensorValue_RepeatedInts *this)
{
  CoreML::Specification::MILSpec::TensorValue_RepeatedInts::~TensorValue_RepeatedInts(this);

  JUMPOUT(0x19F3C1920);
}

{
  void *v2;

  *(void *)this = &unk_1EF0D9D78;
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2 && !*v2) {
    operator delete(v2);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles::GetCachedSize(CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles *this)
{
  return *((unsigned int *)this + 9);
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2)
{
  if (*(int *)(this + 16) >= 1)
  {
    uint64_t v3 = this;
    if (*((int *)a2 + 4) < 5)
    {
      __src[0] = 10;
      google::protobuf::io::CodedOutputStream::WriteRaw(a2, __src, 1);
      int v4 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(unsigned char *)(*((void *)a2 + 1))++ = 10;
      int v4 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v4;
    }
    unsigned int v5 = *(_DWORD *)(v3 + 32);
    if (v4 < 5)
    {
      google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v5);
    }
    else
    {
      uint64_t v6 = *((void *)a2 + 1);
      if (v5 < 0x80)
      {
        unsigned int v8 = *(_DWORD *)(v3 + 32);
        unsigned int v7 = (unsigned char *)*((void *)a2 + 1);
      }
      else
      {
        unsigned int v7 = (unsigned char *)*((void *)a2 + 1);
        do
        {
          *v7++ = v5 | 0x80;
          unsigned int v8 = v5 >> 7;
          unsigned int v9 = v5 >> 14;
          v5 >>= 7;
        }
        while (v9);
      }
      *unsigned int v7 = v8;
      int v10 = v7 - v6 + 1;
      *((void *)a2 + 1) += v10;
      *((_DWORD *)a2 + 4) -= v10;
    }
    uint64_t v11 = *(void *)(v3 + 24);
    if (v11) {
      int v12 = (char *)(v11 + 8);
    }
    else {
      int v12 = 0;
    }
    int v13 = 8 * *(_DWORD *)(v3 + 16);
    return google::protobuf::io::CodedOutputStream::WriteRaw(a2, v12, v13);
  }
  return this;
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles::ByteSizeLong(CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles *this)
{
  uint64_t v1 = *((unsigned int *)this + 4);
  uint64_t v2 = 8 * v1;
  if (v1)
  {
    if ((v2 & 0x80000000) != 0) {
      uint64_t v3 = 11;
    }
    else {
      uint64_t v3 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  uint64_t v4 = v3 + v2;
  *((_DWORD *)this + 8) = v2;
  *((_DWORD *)this + 9) = v4;
  return v4;
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles::IsInitialized(CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles *this)
{
  return 1;
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles::Clear(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  return this;
}

void CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles::New(CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles *this, google::protobuf::Arena *a2)
{
}

void sub_19EB25AF4(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    BOOL result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *BOOL result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles>;
    uint64_t v4 = (unint64_t *)(v3 + 4);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles::New(CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles *this)
{
}

void *CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.MILSpec.TensorValue.RepeatedDoubles");
}

void CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles::~TensorValue_RepeatedDoubles(CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles *this)
{
  CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles::~TensorValue_RepeatedDoubles(this);

  JUMPOUT(0x19F3C1920);
}

{
  void *v2;

  *(void *)this = &unk_1EF0DA108;
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2 && !*v2) {
    operator delete(v2);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedFloats::GetCachedSize(CoreML::Specification::MILSpec::TensorValue_RepeatedFloats *this)
{
  return *((unsigned int *)this + 9);
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedFloats::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2)
{
  if (*(int *)(this + 16) >= 1)
  {
    uint64_t v3 = this;
    if (*((int *)a2 + 4) < 5)
    {
      __src[0] = 10;
      google::protobuf::io::CodedOutputStream::WriteRaw(a2, __src, 1);
      int v4 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(unsigned char *)(*((void *)a2 + 1))++ = 10;
      int v4 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v4;
    }
    unsigned int v5 = *(_DWORD *)(v3 + 32);
    if (v4 < 5)
    {
      google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v5);
    }
    else
    {
      uint64_t v6 = *((void *)a2 + 1);
      if (v5 < 0x80)
      {
        unsigned int v8 = *(_DWORD *)(v3 + 32);
        unsigned int v7 = (unsigned char *)*((void *)a2 + 1);
      }
      else
      {
        unsigned int v7 = (unsigned char *)*((void *)a2 + 1);
        do
        {
          *v7++ = v5 | 0x80;
          unsigned int v8 = v5 >> 7;
          unsigned int v9 = v5 >> 14;
          v5 >>= 7;
        }
        while (v9);
      }
      *unsigned int v7 = v8;
      int v10 = v7 - v6 + 1;
      *((void *)a2 + 1) += v10;
      *((_DWORD *)a2 + 4) -= v10;
    }
    uint64_t v11 = *(void *)(v3 + 24);
    if (v11) {
      int v12 = (char *)(v11 + 8);
    }
    else {
      int v12 = 0;
    }
    int v13 = 4 * *(_DWORD *)(v3 + 16);
    return google::protobuf::io::CodedOutputStream::WriteRaw(a2, v12, v13);
  }
  return this;
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedFloats::ByteSizeLong(CoreML::Specification::MILSpec::TensorValue_RepeatedFloats *this)
{
  uint64_t v1 = *((unsigned int *)this + 4);
  uint64_t v2 = 4 * v1;
  if (v1)
  {
    if ((v2 & 0x80000000) != 0) {
      uint64_t v3 = 11;
    }
    else {
      uint64_t v3 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  uint64_t v4 = v3 + v2;
  *((_DWORD *)this + 8) = v2;
  *((_DWORD *)this + 9) = v4;
  return v4;
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedFloats::IsInitialized(CoreML::Specification::MILSpec::TensorValue_RepeatedFloats *this)
{
  return 1;
}

uint64_t CoreML::Specification::MILSpec::TensorValue_RepeatedFloats::Clear(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  return this;
}

void CoreML::Specification::MILSpec::TensorValue_RepeatedFloats::New(CoreML::Specification::MILSpec::TensorValue_RepeatedFloats *this, google::protobuf::Arena *a2)
{
}

void sub_19EB25E40(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::MILSpec::TensorValue_RepeatedFloats>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    BOOL result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *BOOL result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::TensorValue_RepeatedFloats>;
    uint64_t v4 = (unint64_t *)(v3 + 4);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::TensorValue_RepeatedFloats>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void CoreML::Specification::MILSpec::TensorValue_RepeatedFloats::New(CoreML::Specification::MILSpec::TensorValue_RepeatedFloats *this)
{
}

void *CoreML::Specification::MILSpec::TensorValue_RepeatedFloats::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.MILSpec.TensorValue.RepeatedFloats");
}

void CoreML::Specification::MILSpec::TensorValue_RepeatedFloats::~TensorValue_RepeatedFloats(CoreML::Specification::MILSpec::TensorValue_RepeatedFloats *this)
{
  CoreML::Specification::MILSpec::TensorValue_RepeatedFloats::~TensorValue_RepeatedFloats(this);

  JUMPOUT(0x19F3C1920);
}

{
  void *v2;

  *(void *)this = &unk_1EF0D9FD8;
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2 && !*v2) {
    operator delete(v2);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

uint64_t CoreML::Specification::MILSpec::Value::GetCachedSize(CoreML::Specification::MILSpec::Value *this)
{
  return *((unsigned int *)this + 10);
}

uint64_t CoreML::Specification::MILSpec::Value::SerializeWithCachedSizes(CoreML::Specification::MILSpec::Value *this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t result = *((void *)this + 2);
  if ((*(char *)(result + 23) & 0x80000000) == 0)
  {
    LODWORD(v7) = *(unsigned __int8 *)(result + 23);
    if (!*(unsigned char *)(result + 23)) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v7 = *(void *)(result + 8);
  if (v7)
  {
    uint64_t result = *(void *)result;
LABEL_6:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String((unsigned int *)result, v7, 1, (uint64_t)"CoreML.Specification.MILSpec.Value.docString");
    uint64_t result = google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(1u, *((void *)this + 2), a2);
  }
LABEL_7:
  if (this != (CoreML::Specification::MILSpec::Value *)&CoreML::Specification::MILSpec::_Value_default_instance_)
  {
    uint64_t v8 = *((void *)this + 3);
    if (v8) {
      uint64_t result = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)2, v8, a2, a4);
    }
  }
  int v9 = *((_DWORD *)this + 11);
  if (v9 == 3)
  {
    uint64_t result = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)3, *((void *)this + 4), a2, a4);
    int v9 = *((_DWORD *)this + 11);
  }
  if (v9 == 5)
  {
    uint64_t v10 = *((void *)this + 4);
    return google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)5, v10, a2, a4);
  }
  return result;
}

uint64_t CoreML::Specification::MILSpec::Value::IsInitialized(CoreML::Specification::MILSpec::Value *this)
{
  return 1;
}

void CoreML::Specification::MILSpec::Value::New(CoreML::Specification::MILSpec::Value *this, google::protobuf::Arena *a2)
{
}

void sub_19EB260E0(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C40000F1E19);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::MILSpec::Value>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    uint64_t result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *uint64_t result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::Value>;
    uint64_t v4 = (unint64_t *)(v3 + 4);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::Value>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void CoreML::Specification::MILSpec::Value::New(CoreML::Specification::MILSpec::Value *this)
{
}

void *CoreML::Specification::MILSpec::Value::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.MILSpec.Value");
}

void CoreML::Specification::MILSpec::Value::~Value(CoreML::Specification::MILSpec::Value *this)
{
  CoreML::Specification::MILSpec::Value::~Value(this);

  JUMPOUT(0x19F3C1920);
}

{
  uint64_t v2;
  uint64_t v4;

  *(void *)this = &unk_1EF0DA400;
  uint64_t v2 = *((void *)this + 2);
  if ((long long *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    MEMORY[0x19F3C1920](v2, 0x1012C40EC159624);
  }
  if (this != (CoreML::Specification::MILSpec::Value *)&CoreML::Specification::MILSpec::_Value_default_instance_)
  {
    uint64_t v4 = *((void *)this + 3);
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
  }
  if (*((_DWORD *)this + 11)) {
    CoreML::Specification::MILSpec::Value::clear_value((uint64_t)this);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

uint64_t CoreML::Specification::MILSpec::Value_ImmediateValue::GetCachedSize(CoreML::Specification::MILSpec::Value_ImmediateValue *this)
{
  return *((unsigned int *)this + 6);
}

uint64_t CoreML::Specification::MILSpec::Value_ImmediateValue::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 28);
  if (v6 == 1)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)1, *(void *)(this + 16), a2, a4);
    int v6 = *(_DWORD *)(v5 + 28);
  }
  if (v6 == 2)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)2, *(void *)(v5 + 16), a2, a4);
    int v6 = *(_DWORD *)(v5 + 28);
  }
  if (v6 == 3)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)3, *(void *)(v5 + 16), a2, a4);
    int v6 = *(_DWORD *)(v5 + 28);
  }
  if (v6 == 4)
  {
    uint64_t v7 = *(void *)(v5 + 16);
    return google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)4, v7, a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::MILSpec::Value_ImmediateValue::IsInitialized(CoreML::Specification::MILSpec::Value_ImmediateValue *this)
{
  return 1;
}

void CoreML::Specification::MILSpec::Value_ImmediateValue::New(CoreML::Specification::MILSpec::Value_ImmediateValue *this, google::protobuf::Arena *a2)
{
}

void sub_19EB263D0(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::MILSpec::Value_ImmediateValue>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    uint64_t result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *uint64_t result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::Value_ImmediateValue>;
    uint64_t v4 = (unint64_t *)(v3 + 4);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::Value_ImmediateValue>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void CoreML::Specification::MILSpec::Value_ImmediateValue::New(CoreML::Specification::MILSpec::Value_ImmediateValue *this)
{
}

void *CoreML::Specification::MILSpec::Value_ImmediateValue::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.MILSpec.Value.ImmediateValue");
}

void CoreML::Specification::MILSpec::Value_ImmediateValue::~Value_ImmediateValue(CoreML::Specification::MILSpec::Value_ImmediateValue *this)
{
  CoreML::Specification::MILSpec::Value_ImmediateValue::~Value_ImmediateValue(this);

  JUMPOUT(0x19F3C1920);
}

{
  *(void *)this = &unk_1EF0D9CE0;
  if (*((_DWORD *)this + 7)) {
    CoreML::Specification::MILSpec::Value_ImmediateValue::clear_value((uint64_t)this);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

uint64_t CoreML::Specification::MILSpec::Dimension::GetCachedSize(CoreML::Specification::MILSpec::Dimension *this)
{
  return *((unsigned int *)this + 6);
}

uint64_t CoreML::Specification::MILSpec::Dimension::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 28);
  if (v6 == 1)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)1, *(void *)(this + 16), a2, a4);
    int v6 = *(_DWORD *)(v5 + 28);
  }
  if (v6 == 2)
  {
    uint64_t v7 = *(void *)(v5 + 16);
    return google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)2, v7, a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::MILSpec::Dimension::MergePartialFromCodedStream(CoreML::Specification::MILSpec::Dimension *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      uint64_t v5 = *(char **)a2;
      if (*(void *)a2 >= *((void *)a2 + 1))
      {
        LODWORD(v6) = 0;
LABEL_6:
        unsigned int TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v6);
        unint64_t v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0) {
          goto LABEL_18;
        }
        goto LABEL_7;
      }
      uint64_t v6 = *v5;
      if (*v5 < 1) {
        goto LABEL_6;
      }
      *(void *)a2 = v5 + 1;
      unint64_t v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0) {
        goto LABEL_18;
      }
LABEL_7:
      if (v7 >> 3 != 2) {
        break;
      }
      if (v7 != 18) {
        goto LABEL_18;
      }
      if (*((_DWORD *)this + 7) != 2)
      {
        CoreML::Specification::MILSpec::Dimension::clear_dimension((uint64_t)this);
        *((_DWORD *)this + 7) = 2;
        operator new();
      }
      uint64_t v11 = (CoreML::Specification::MILSpec::Dimension_UnknownDimension *)*((void *)this + 2);
      uint64_t v15 = *(char **)a2;
      if (*(void *)a2 >= *((void *)a2 + 1) || *v15 < 0)
      {
        int VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (VarintSizeAsIntFallback < 0) {
          return 0;
        }
      }
      else
      {
        int VarintSizeAsIntFallback = *v15;
        *(void *)a2 = v15 + 1;
      }
      int v23 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
      int v25 = *((_DWORD *)a2 + 13);
      BOOL v20 = __OFSUB__(v25--, 1);
      *((_DWORD *)a2 + 13) = v25;
      if (v25 < 0 != v20) {
        return 0;
      }
      int v21 = v23;
      uint64_t result = CoreML::Specification::MILSpec::Dimension_UnknownDimension::MergePartialFromCodedStream(v11, (char **)a2, v24);
      if (!result) {
        return result;
      }
LABEL_39:
      if (!google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v21)) {
        return 0;
      }
    }
    if (v7 >> 3 == 1 && v7 == 10)
    {
      if (*((_DWORD *)this + 7) != 1)
      {
        CoreML::Specification::MILSpec::Dimension::clear_dimension((uint64_t)this);
        *((_DWORD *)this + 7) = 1;
        operator new();
      }
      uint64_t v10 = (CoreML::Specification::MILSpec::Dimension_ConstantDimension *)*((void *)this + 2);
      int v13 = *(char **)a2;
      if (*(void *)a2 >= *((void *)a2 + 1) || *v13 < 0)
      {
        int v14 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v14 < 0) {
          return 0;
        }
      }
      else
      {
        int v14 = *v13;
        *(void *)a2 = v13 + 1;
      }
      int v17 = google::protobuf::io::CodedInputStream::PushLimit(a2, v14);
      int v19 = *((_DWORD *)a2 + 13);
      BOOL v20 = __OFSUB__(v19--, 1);
      *((_DWORD *)a2 + 13) = v19;
      if (v19 < 0 != v20) {
        return 0;
      }
      int v21 = v17;
      uint64_t result = CoreML::Specification::MILSpec::Dimension_ConstantDimension::MergePartialFromCodedStream(v10, (char **)a2, v18);
      if (!result) {
        return result;
      }
      goto LABEL_39;
    }
LABEL_18:
    if (!v7 || (v7 & 7) == 4) {
      return 1;
    }
    if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0) {
      return 0;
    }
  }
}

void sub_19EB267E8(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x1081C40B60F2DE8);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::Dimension_ConstantDimension::MergePartialFromCodedStream(CoreML::Specification::MILSpec::Dimension_ConstantDimension *this, char **a2, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      uint64_t v5 = *a2;
      if (*a2 >= a2[1])
      {
        LODWORD(v6) = 0;
LABEL_6:
        unsigned int TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback((google::protobuf::io::CodedInputStream *)a2, v6);
        unint64_t v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0) {
          break;
        }
        goto LABEL_7;
      }
      uint64_t v6 = *v5;
      if (*v5 < 1) {
        goto LABEL_6;
      }
      *a2 = v5 + 1;
      unint64_t v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0) {
        break;
      }
LABEL_7:
      if (v7 != 8 || (v7 & 0xFFFFFFF8) != 8) {
        break;
      }
      uint64_t v11 = *a2;
      if (*a2 >= a2[1] || *v11 < 0)
      {
        *((void *)this + 2) = google::protobuf::io::CodedInputStream::ReadVarint64Fallback((google::protobuf::io::CodedInputStream *)a2);
        if ((v12 & 1) == 0) {
          return 0;
        }
      }
      else
      {
        *((void *)this + 2) = *v11;
        *a2 = v11 + 1;
      }
    }
    if (!v7 || (v7 & 7) == 4) {
      return 1;
    }
    if ((google::protobuf::internal::WireFormatLite::SkipField((google::protobuf::internal::WireFormatLite *)a2, (google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)return 0; {
  }
    }
}

uint64_t CoreML::Specification::MILSpec::Dimension_UnknownDimension::MergePartialFromCodedStream(CoreML::Specification::MILSpec::Dimension_UnknownDimension *this, char **a2, unsigned int a3)
{
  do
  {
    while (1)
    {
      uint64_t v5 = *a2;
      if (*a2 >= a2[1])
      {
        LODWORD(v6) = 0;
LABEL_6:
        unsigned int TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback((google::protobuf::io::CodedInputStream *)a2, v6);
        unint64_t v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0) {
          break;
        }
        goto LABEL_7;
      }
      uint64_t v6 = *v5;
      if (*v5 < 1) {
        goto LABEL_6;
      }
      *a2 = v5 + 1;
      unint64_t v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0) {
        break;
      }
LABEL_7:
      if (v7 != 8 || (v7 & 0xFFFFFFF8) != 8) {
        break;
      }
      uint64_t v11 = *a2;
      if (*a2 >= a2[1] || *v11 < 0)
      {
        unint64_t Varint64Fallback = google::protobuf::io::CodedInputStream::ReadVarint64Fallback((google::protobuf::io::CodedInputStream *)a2);
        if ((v13 & 1) == 0) {
          return 0;
        }
      }
      else
      {
        unint64_t Varint64Fallback = *v11;
        *a2 = v11 + 1;
      }
      *((unsigned char *)this + 16) = Varint64Fallback != 0;
    }
    if (v7) {
      BOOL v10 = (v7 & 7) == 4;
    }
    else {
      BOOL v10 = 1;
    }
    if (v10) {
      return 1;
    }
  }
  while ((google::protobuf::internal::WireFormatLite::SkipField((google::protobuf::internal::WireFormatLite *)a2, (google::protobuf::io::CodedInputStream *)v7, a3) & 1) != 0);
  return 0;
}

uint64_t CoreML::Specification::MILSpec::Dimension::IsInitialized(CoreML::Specification::MILSpec::Dimension *this)
{
  return 1;
}

void CoreML::Specification::MILSpec::Dimension::New(CoreML::Specification::MILSpec::Dimension *this, google::protobuf::Arena *a2)
{
}

void sub_19EB26A6C(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::MILSpec::Dimension>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    uint64_t result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *uint64_t result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::Dimension>;
    uint64_t v4 = (unint64_t *)(v3 + 4);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::Dimension>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void CoreML::Specification::MILSpec::Dimension::New(CoreML::Specification::MILSpec::Dimension *this)
{
}

void *CoreML::Specification::MILSpec::Dimension::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.MILSpec.Dimension");
}

void CoreML::Specification::MILSpec::Dimension::~Dimension(CoreML::Specification::MILSpec::Dimension *this)
{
  CoreML::Specification::MILSpec::Dimension::~Dimension(this);

  JUMPOUT(0x19F3C1920);
}

{
  *(void *)this = &unk_1EF0DA6F8;
  if (*((_DWORD *)this + 7)) {
    CoreML::Specification::MILSpec::Dimension::clear_dimension((uint64_t)this);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

uint64_t CoreML::Specification::MILSpec::Dimension_UnknownDimension::GetCachedSize(CoreML::Specification::MILSpec::Dimension_UnknownDimension *this)
{
  return *((unsigned int *)this + 5);
}

uint64_t CoreML::Specification::MILSpec::Dimension_UnknownDimension::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  if (*(unsigned char *)(this + 16)) {
    return google::protobuf::internal::WireFormatLite::WriteBool(1, 1u, a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::MILSpec::Dimension_UnknownDimension::ByteSizeLong(CoreML::Specification::MILSpec::Dimension_UnknownDimension *this)
{
  uint64_t v1 = 2 * *((unsigned __int8 *)this + 16);
  *((_DWORD *)this + 5) = v1;
  return v1;
}

std::string *CoreML::Specification::MILSpec::Dimension_UnknownDimension::CheckTypeAndMergeFrom(std::string *this, const google::protobuf::MessageLite *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    this = google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  if (*((unsigned char *)a2 + 16)) {
    v3->__r_.__value_.__s.__data_[16] = 1;
  }
  return this;
}

uint64_t CoreML::Specification::MILSpec::Dimension_UnknownDimension::IsInitialized(CoreML::Specification::MILSpec::Dimension_UnknownDimension *this)
{
  return 1;
}

uint64_t CoreML::Specification::MILSpec::Dimension_UnknownDimension::Clear(uint64_t this)
{
  *(unsigned char *)(this + 16) = 0;
  return this;
}

void CoreML::Specification::MILSpec::Dimension_UnknownDimension::New(CoreML::Specification::MILSpec::Dimension_UnknownDimension *this, google::protobuf::Arena *a2)
{
}

void sub_19EB26CAC(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x1081C40B60F2DE8);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::MILSpec::Dimension_UnknownDimension>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    uint64_t result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *uint64_t result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::Dimension_UnknownDimension>;
    uint64_t v4 = (unint64_t *)(v3 + 4);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::Dimension_UnknownDimension>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void CoreML::Specification::MILSpec::Dimension_UnknownDimension::New(CoreML::Specification::MILSpec::Dimension_UnknownDimension *this)
{
}

void *CoreML::Specification::MILSpec::Dimension_UnknownDimension::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.MILSpec.Dimension.UnknownDimension");
}

void CoreML::Specification::MILSpec::Dimension_UnknownDimension::~Dimension_UnknownDimension(CoreML::Specification::MILSpec::Dimension_UnknownDimension *this)
{
  *(void *)this = &unk_1EF0D9F40;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);

  JUMPOUT(0x19F3C1920);
}

{
  *(void *)this = &unk_1EF0D9F40;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

uint64_t CoreML::Specification::MILSpec::Dimension_ConstantDimension::GetCachedSize(CoreML::Specification::MILSpec::Dimension_ConstantDimension *this)
{
  return *((unsigned int *)this + 6);
}

uint64_t CoreML::Specification::MILSpec::Dimension_ConstantDimension::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  unint64_t v5 = *(void *)(this + 16);
  if (v5) {
    return google::protobuf::internal::WireFormatLite::WriteUInt64(1, v5, a2, a4);
  }
  return this;
}

unint64_t CoreML::Specification::MILSpec::Dimension_ConstantDimension::ByteSizeLong(CoreML::Specification::MILSpec::Dimension_ConstantDimension *this)
{
  unint64_t v1 = *((void *)this + 2);
  if (v1) {
    unint64_t v1 = ((9 * (__clz(v1 | 1) ^ 0x3F) + 73) >> 6) + 1;
  }
  *((_DWORD *)this + 6) = v1;
  return v1;
}

std::string *CoreML::Specification::MILSpec::Dimension_ConstantDimension::CheckTypeAndMergeFrom(std::string *this, const google::protobuf::MessageLite *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    this = google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  std::string::size_type v5 = *((void *)a2 + 2);
  if (v5) {
    v3->__r_.__value_.__r.__words[2] = v5;
  }
  return this;
}

uint64_t CoreML::Specification::MILSpec::Dimension_ConstantDimension::IsInitialized(CoreML::Specification::MILSpec::Dimension_ConstantDimension *this)
{
  return 1;
}

uint64_t CoreML::Specification::MILSpec::Dimension_ConstantDimension::Clear(uint64_t this)
{
  *(void *)(this + 16) = 0;
  return this;
}

void CoreML::Specification::MILSpec::Dimension_ConstantDimension::New(CoreML::Specification::MILSpec::Dimension_ConstantDimension *this, google::protobuf::Arena *a2)
{
}

void sub_19EB26F10(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x1081C40E1DA5700);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::MILSpec::Dimension_ConstantDimension>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    uint64_t result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *uint64_t result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::Dimension_ConstantDimension>;
    uint64_t v4 = (unint64_t *)(v3 + 4);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::Dimension_ConstantDimension>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void CoreML::Specification::MILSpec::Dimension_ConstantDimension::New(CoreML::Specification::MILSpec::Dimension_ConstantDimension *this)
{
}

void *CoreML::Specification::MILSpec::Dimension_ConstantDimension::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.MILSpec.Dimension.ConstantDimension");
}

void CoreML::Specification::MILSpec::Dimension_ConstantDimension::~Dimension_ConstantDimension(CoreML::Specification::MILSpec::Dimension_ConstantDimension *this)
{
  *(void *)this = &unk_1EF0DA070;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);

  JUMPOUT(0x19F3C1920);
}

{
  *(void *)this = &unk_1EF0DA070;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

uint64_t CoreML::Specification::MILSpec::StateType::GetCachedSize(CoreML::Specification::MILSpec::StateType *this)
{
  return *((unsigned int *)this + 6);
}

uint64_t *CoreML::Specification::MILSpec::StateType::SerializeWithCachedSizes(uint64_t *this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  if (this != &CoreML::Specification::MILSpec::_StateType_default_instance_)
  {
    uint64_t v5 = this[2];
    if (v5) {
      return (uint64_t *)google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)1, v5, a2, a4);
    }
  }
  return this;
}

uint64_t CoreML::Specification::MILSpec::StateType::MergePartialFromCodedStream(CoreML::Specification::MILSpec::StateType *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      uint64_t v5 = *(char **)a2;
      if (*(void *)a2 >= *((void *)a2 + 1))
      {
        LODWORD(v6) = 0;
LABEL_6:
        unsigned int TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v6);
        unint64_t v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0) {
          break;
        }
        goto LABEL_7;
      }
      uint64_t v6 = *v5;
      if (*v5 < 1) {
        goto LABEL_6;
      }
      *(void *)a2 = v5 + 1;
      unint64_t v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0) {
        break;
      }
LABEL_7:
      if (v7 != 10 || (v7 & 0xFFFFFFF8) != 8) {
        break;
      }
      uint64_t v11 = (CoreML::Specification::MILSpec::ValueType *)*((void *)this + 2);
      if (!v11) {
        operator new();
      }
      char v12 = *(char **)a2;
      if (*(void *)a2 >= *((void *)a2 + 1) || *v12 < 0)
      {
        int VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (VarintSizeAsIntFallback < 0) {
          return 0;
        }
      }
      else
      {
        int VarintSizeAsIntFallback = *v12;
        *(void *)a2 = v12 + 1;
      }
      int v14 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
      int v15 = *((_DWORD *)a2 + 13);
      BOOL v16 = __OFSUB__(v15--, 1);
      *((_DWORD *)a2 + 13) = v15;
      if (v15 < 0 == v16)
      {
        int v17 = v14;
        uint64_t result = CoreML::Specification::MILSpec::ValueType::MergePartialFromCodedStream(v11, a2);
        if (!result) {
          return result;
        }
        if (google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v17)) {
          continue;
        }
      }
      return 0;
    }
    if (!v7 || (v7 & 7) == 4) {
      return 1;
    }
    if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0) {
      return 0;
    }
  }
}

void sub_19EB27208(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::StateType::IsInitialized(CoreML::Specification::MILSpec::StateType *this)
{
  return 1;
}

uint64_t CoreML::Specification::MILSpec::StateType::Clear(CoreML::Specification::MILSpec::StateType *this)
{
  uint64_t result = *((void *)this + 2);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 2) = 0;
  return result;
}

void CoreML::Specification::MILSpec::StateType::New(CoreML::Specification::MILSpec::StateType *this, google::protobuf::Arena *a2)
{
}

void sub_19EB272DC(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C4084265165);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::MILSpec::StateType>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    uint64_t result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *uint64_t result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::StateType>;
    uint64_t v4 = (unint64_t *)(v3 + 4);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::StateType>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void CoreML::Specification::MILSpec::StateType::New(CoreML::Specification::MILSpec::StateType *this)
{
}

void *CoreML::Specification::MILSpec::StateType::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.MILSpec.StateType");
}

void CoreML::Specification::MILSpec::StateType::~StateType(CoreML::Specification::MILSpec::StateType *this)
{
  CoreML::Specification::MILSpec::StateType::~StateType(this);

  JUMPOUT(0x19F3C1920);
}

{
  uint64_t v2;

  *(void *)this = &unk_1EF0DA8C0;
  if (this != (CoreML::Specification::MILSpec::StateType *)&CoreML::Specification::MILSpec::_StateType_default_instance_)
  {
    uint64_t v2 = *((void *)this + 2);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

uint64_t CoreML::Specification::MILSpec::DictionaryType::GetCachedSize(CoreML::Specification::MILSpec::DictionaryType *this)
{
  return *((unsigned int *)this + 8);
}

uint64_t *CoreML::Specification::MILSpec::DictionaryType::SerializeWithCachedSizes(uint64_t *this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  if (this != &CoreML::Specification::MILSpec::_DictionaryType_default_instance_)
  {
    unint64_t v5 = this;
    uint64_t v6 = this[2];
    if (v6) {
      this = (uint64_t *)google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)1, v6, a2, a4);
    }
    uint64_t v7 = v5[3];
    if (v7)
    {
      return (uint64_t *)google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)2, v7, a2, a4);
    }
  }
  return this;
}

uint64_t CoreML::Specification::MILSpec::DictionaryType::MergePartialFromCodedStream(CoreML::Specification::MILSpec::DictionaryType *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      unint64_t v5 = *(char **)a2;
      if (*(void *)a2 >= *((void *)a2 + 1))
      {
        LODWORD(v6) = 0;
LABEL_6:
        unsigned int TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v6);
        unint64_t v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0) {
          goto LABEL_21;
        }
        goto LABEL_7;
      }
      uint64_t v6 = *v5;
      if (*v5 < 1) {
        goto LABEL_6;
      }
      *(void *)a2 = v5 + 1;
      unint64_t v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0) {
        goto LABEL_21;
      }
LABEL_7:
      if (v7 >> 3 != 2) {
        break;
      }
      if (v7 != 18) {
        goto LABEL_21;
      }
      BOOL v10 = (CoreML::Specification::MILSpec::ValueType *)*((void *)this + 3);
      if (!v10) {
        operator new();
      }
LABEL_18:
      uint64_t v11 = *(char **)a2;
      if (*(void *)a2 >= *((void *)a2 + 1) || *v11 < 0)
      {
        int VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (VarintSizeAsIntFallback < 0) {
          return 0;
        }
      }
      else
      {
        int VarintSizeAsIntFallback = *v11;
        *(void *)a2 = v11 + 1;
      }
      int v14 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
      int v15 = *((_DWORD *)a2 + 13);
      BOOL v16 = __OFSUB__(v15--, 1);
      *((_DWORD *)a2 + 13) = v15;
      if (v15 < 0 == v16)
      {
        int v17 = v14;
        uint64_t result = CoreML::Specification::MILSpec::ValueType::MergePartialFromCodedStream(v10, a2);
        if (!result) {
          return result;
        }
        if (google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v17)) {
          continue;
        }
      }
      return 0;
    }
    if (v7 >> 3 == 1 && v7 == 10)
    {
      BOOL v10 = (CoreML::Specification::MILSpec::ValueType *)*((void *)this + 2);
      if (!v10) {
        operator new();
      }
      goto LABEL_18;
    }
LABEL_21:
    if (!v7 || (v7 & 7) == 4) {
      return 1;
    }
    if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0) {
      return 0;
    }
  }
}

void sub_19EB2767C(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::DictionaryType::IsInitialized(CoreML::Specification::MILSpec::DictionaryType *this)
{
  return 1;
}

uint64_t CoreML::Specification::MILSpec::DictionaryType::Clear(CoreML::Specification::MILSpec::DictionaryType *this)
{
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 2) = 0;
  uint64_t result = *((void *)this + 3);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 3) = 0;
  return result;
}

void CoreML::Specification::MILSpec::DictionaryType::New(CoreML::Specification::MILSpec::DictionaryType *this, google::protobuf::Arena *a2)
{
}

void sub_19EB27784(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C40C9A46F13);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::MILSpec::DictionaryType>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    uint64_t result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *uint64_t result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::DictionaryType>;
    uint64_t v4 = (unint64_t *)(v3 + 4);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::DictionaryType>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void CoreML::Specification::MILSpec::DictionaryType::New(CoreML::Specification::MILSpec::DictionaryType *this)
{
}

void *CoreML::Specification::MILSpec::DictionaryType::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.MILSpec.DictionaryType");
}

void CoreML::Specification::MILSpec::DictionaryType::~DictionaryType(CoreML::Specification::MILSpec::DictionaryType *this)
{
  CoreML::Specification::MILSpec::DictionaryType::~DictionaryType(this);

  JUMPOUT(0x19F3C1920);
}

{
  uint64_t v2;
  uint64_t v3;

  *(void *)this = &unk_1EF0D99E8;
  if (this != (CoreML::Specification::MILSpec::DictionaryType *)&CoreML::Specification::MILSpec::_DictionaryType_default_instance_)
  {
    uint64_t v2 = *((void *)this + 2);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
    uint64_t v3 = *((void *)this + 3);
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

uint64_t CoreML::Specification::MILSpec::ListType::GetCachedSize(CoreML::Specification::MILSpec::ListType *this)
{
  return *((unsigned int *)this + 8);
}

uint64_t *CoreML::Specification::MILSpec::ListType::SerializeWithCachedSizes(uint64_t *this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  if (this != &CoreML::Specification::MILSpec::_ListType_default_instance_)
  {
    unint64_t v5 = this;
    uint64_t v6 = this[2];
    if (v6) {
      this = (uint64_t *)google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)1, v6, a2, a4);
    }
    uint64_t v7 = v5[3];
    if (v7)
    {
      return (uint64_t *)google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)2, v7, a2, a4);
    }
  }
  return this;
}

uint64_t CoreML::Specification::MILSpec::ListType::MergePartialFromCodedStream(CoreML::Specification::MILSpec::ListType *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      unint64_t v5 = *(char **)a2;
      if (*(void *)a2 >= *((void *)a2 + 1))
      {
        LODWORD(v6) = 0;
LABEL_6:
        unsigned int TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v6);
        unint64_t v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0) {
          goto LABEL_24;
        }
        goto LABEL_7;
      }
      uint64_t v6 = *v5;
      if (*v5 < 1) {
        goto LABEL_6;
      }
      *(void *)a2 = v5 + 1;
      unint64_t v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0) {
        goto LABEL_24;
      }
LABEL_7:
      if (v7 >> 3 != 2) {
        break;
      }
      if (v7 != 18) {
        goto LABEL_24;
      }
      char v13 = (CoreML::Specification::MILSpec::Dimension *)*((void *)this + 3);
      if (!v13) {
        operator new();
      }
      int v14 = *(char **)a2;
      if (*(void *)a2 >= *((void *)a2 + 1) || *v14 < 0)
      {
        int VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (VarintSizeAsIntFallback < 0) {
          return 0;
        }
      }
      else
      {
        int VarintSizeAsIntFallback = *v14;
        *(void *)a2 = v14 + 1;
      }
      int v22 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
      int v24 = *((_DWORD *)a2 + 13);
      BOOL v19 = __OFSUB__(v24--, 1);
      *((_DWORD *)a2 + 13) = v24;
      if (v24 < 0 != v19) {
        return 0;
      }
      int v20 = v22;
      uint64_t result = CoreML::Specification::MILSpec::Dimension::MergePartialFromCodedStream(v13, a2, v23);
      if (!result) {
        return result;
      }
LABEL_37:
      if (!google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v20)) {
        return 0;
      }
    }
    if (v7 >> 3 == 1 && v7 == 10)
    {
      BOOL v10 = (CoreML::Specification::MILSpec::ValueType *)*((void *)this + 2);
      if (!v10) {
        operator new();
      }
      uint64_t v11 = *(char **)a2;
      if (*(void *)a2 >= *((void *)a2 + 1) || *v11 < 0)
      {
        int v12 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v12 < 0) {
          return 0;
        }
      }
      else
      {
        int v12 = *v11;
        *(void *)a2 = v11 + 1;
      }
      int v17 = google::protobuf::io::CodedInputStream::PushLimit(a2, v12);
      int v18 = *((_DWORD *)a2 + 13);
      BOOL v19 = __OFSUB__(v18--, 1);
      *((_DWORD *)a2 + 13) = v18;
      if (v18 < 0 != v19) {
        return 0;
      }
      int v20 = v17;
      uint64_t result = CoreML::Specification::MILSpec::ValueType::MergePartialFromCodedStream(v10, a2);
      if (!result) {
        return result;
      }
      goto LABEL_37;
    }
LABEL_24:
    if (!v7 || (v7 & 7) == 4) {
      return 1;
    }
    if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0) {
      return 0;
    }
  }
}

void sub_19EB27BB0(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::ListType::IsInitialized(CoreML::Specification::MILSpec::ListType *this)
{
  return 1;
}

uint64_t CoreML::Specification::MILSpec::ListType::Clear(CoreML::Specification::MILSpec::ListType *this)
{
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 2) = 0;
  uint64_t result = *((void *)this + 3);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 3) = 0;
  return result;
}

void CoreML::Specification::MILSpec::ListType::New(CoreML::Specification::MILSpec::ListType *this, google::protobuf::Arena *a2)
{
}

void sub_19EB27CB8(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C40C9A46F13);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::MILSpec::ListType>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    uint64_t result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *uint64_t result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::ListType>;
    uint64_t v4 = (unint64_t *)(v3 + 4);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::ListType>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void CoreML::Specification::MILSpec::ListType::New(CoreML::Specification::MILSpec::ListType *this)
{
}

void *CoreML::Specification::MILSpec::ListType::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.MILSpec.ListType");
}

void CoreML::Specification::MILSpec::ListType::~ListType(CoreML::Specification::MILSpec::ListType *this)
{
  CoreML::Specification::MILSpec::ListType::~ListType(this);

  JUMPOUT(0x19F3C1920);
}

{
  uint64_t v2;
  uint64_t v3;

  *(void *)this = &unk_1EF0DA660;
  if (this != (CoreML::Specification::MILSpec::ListType *)&CoreML::Specification::MILSpec::_ListType_default_instance_)
  {
    uint64_t v2 = *((void *)this + 2);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
    uint64_t v3 = *((void *)this + 3);
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

uint64_t CoreML::Specification::MILSpec::TupleType::GetCachedSize(CoreML::Specification::MILSpec::TupleType *this)
{
  return *((unsigned int *)this + 10);
}

uint64_t CoreML::Specification::MILSpec::TupleType::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  int v4 = *(_DWORD *)(this + 24);
  if (v4)
  {
    uint64_t v6 = this;
    for (int i = 0; i != v4; ++i)
      this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)1, *(void *)(*(void *)(v6 + 32) + 8 * i + 8), a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::MILSpec::TupleType::MergePartialFromCodedStream(CoreML::Specification::MILSpec::TupleType *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  unint64_t v5 = (CoreML::Specification::MILSpec::TupleType *)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      uint64_t v6 = *(char **)a2;
      if (*(void *)a2 >= *((void *)a2 + 1))
      {
        LODWORD(v7) = 0;
LABEL_7:
        unsigned int TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v7);
        unint64_t v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v8 & 0x100000000) == 0) {
          break;
        }
        goto LABEL_8;
      }
      uint64_t v7 = *v6;
      if (*v6 < 1) {
        goto LABEL_7;
      }
      *(void *)a2 = v6 + 1;
      unint64_t v8 = v7 | 0x100000000;
      if ((v8 & 0x100000000) == 0) {
        break;
      }
LABEL_8:
      if (v8 != 10 || (v8 & 0xFFFFFFF8) != 8) {
        break;
      }
      int v12 = (int *)*((void *)this + 4);
      if (!v12)
      {
        int v13 = *((_DWORD *)this + 6);
        int v14 = *((_DWORD *)this + 7);
LABEL_23:
        if (v13 <= v14)
        {
          google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend(v5, v14 - v13 + 1);
          int v12 = (int *)*((void *)this + 4);
        }
        int v14 = *v12;
        goto LABEL_26;
      }
      int v13 = *((_DWORD *)this + 6);
      int v14 = *v12;
      if (v13 < *v12)
      {
        *((_DWORD *)this + 6) = v13 + 1;
        Aligned = *(google::protobuf::Arena ***)&v12[2 * v13 + 2];
        goto LABEL_31;
      }
      if (v14 == *((_DWORD *)this + 7)) {
        goto LABEL_23;
      }
LABEL_26:
      *int v12 = v14 + 1;
      BOOL v16 = *(google::protobuf::Arena **)v5;
      if (!*(void *)v5) {
        operator new();
      }
      CoreML::Specification::MILSpec::ValueType::ValueType((CoreML::Specification::MILSpec::ValueType *)Aligned);
      int v17 = google::protobuf::Arena::AllocateAligned(v16, 0, 24);
      char *v17 = (google::protobuf::Arena *)Aligned;
      v17[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::ValueType>;
      int v18 = (unint64_t *)((char *)v16 + 32);
      do
        unint64_t v19 = __ldxr(v18);
      while (__stxr((unint64_t)v17, v18));
      v17[2] = (google::protobuf::Arena *)v19;
      uint64_t v20 = *((void *)this + 4);
      uint64_t v21 = *((int *)this + 6);
      *((_DWORD *)this + 6) = v21 + 1;
      *(void *)(v20 + 8 * v21 + 8) = Aligned;
LABEL_31:
      int v22 = *(char **)a2;
      if (*(void *)a2 >= *((void *)a2 + 1) || *v22 < 0)
      {
        int VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (VarintSizeAsIntFallback < 0) {
          return 0;
        }
      }
      else
      {
        int VarintSizeAsIntFallback = *v22;
        *(void *)a2 = v22 + 1;
      }
      int v24 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
      int v25 = *((_DWORD *)a2 + 13);
      BOOL v26 = __OFSUB__(v25--, 1);
      *((_DWORD *)a2 + 13) = v25;
      if (v25 < 0 == v26)
      {
        int v27 = v24;
        uint64_t result = CoreML::Specification::MILSpec::ValueType::MergePartialFromCodedStream((CoreML::Specification::MILSpec::ValueType *)Aligned, a2);
        if (!result) {
          return result;
        }
        if (google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v27)) {
          continue;
        }
      }
      return 0;
    }
    if (!v8 || (v8 & 7) == 4) {
      return 1;
    }
    if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v8, a3) & 1) == 0) {
      return 0;
    }
  }
}

void sub_19EB2810C(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::TupleType::IsInitialized(CoreML::Specification::MILSpec::TupleType *this)
{
  return 1;
}

uint64_t CoreML::Specification::MILSpec::TupleType::Clear(uint64_t this)
{
  uint64_t v1 = *(unsigned int *)(this + 24);
  if ((int)v1 >= 1)
  {
    uint64_t v2 = this;
    uint64_t v3 = (uint64_t *)(*(void *)(this + 32) + 8);
    do
    {
      uint64_t v4 = *v3++;
      this = CoreML::Specification::MILSpec::ValueType::clear_type(v4);
      --v1;
    }
    while (v1);
    *(_DWORD *)(v2 + 24) = 0;
  }
  return this;
}

void CoreML::Specification::MILSpec::TupleType::New(CoreML::Specification::MILSpec::TupleType *this, google::protobuf::Arena *a2)
{
}

void sub_19EB281E0(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::MILSpec::TupleType>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    uint64_t result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *uint64_t result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::TupleType>;
    uint64_t v4 = (unint64_t *)(v3 + 4);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::TupleType>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void CoreML::Specification::MILSpec::TupleType::New(CoreML::Specification::MILSpec::TupleType *this)
{
}

void *CoreML::Specification::MILSpec::TupleType::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.MILSpec.TupleType");
}

void CoreML::Specification::MILSpec::TupleType::~TupleType(CoreML::Specification::MILSpec::TupleType *this)
{
  CoreML::Specification::MILSpec::TupleType::~TupleType(this);

  JUMPOUT(0x19F3C1920);
}

{
  *(void *)this = &unk_1EF0DA958;
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>((void *)this + 2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

void *google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::~Map(void *a1)
{
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::clear((uint64_t)a1);
  if (!*a1)
  {
    uint64_t v2 = a1[2];
    if (v2)
    {
      uint64_t v3 = google::protobuf::Map<std::string,std::string>::InnerMap::~InnerMap(v2);
      MEMORY[0x19F3C1920](v3, 0x10E0C40D5F42F35);
    }
  }
  return a1;
}

double google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::clear(uint64_t a1)
{
  google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::begin(&v3, *(void **)(a1 + 16));
  while ((void)v3)
  {
    long long v5 = v3;
    uint64_t v6 = v4;
    *(void *)&double result = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::erase((uint64_t)&v3, (void *)a1, &v5).n128_u64[0];
  }
  return result;
}

__n128 google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::erase(uint64_t a1, void *a2, void *a3)
{
  if (!*a2)
  {
    uint64_t v6 = *(void *)(*a3 + 24);
    if (v6)
    {
      CoreML::Specification::MILSpec::Value::~Value((CoreML::Specification::MILSpec::Value *)(v6 + 24));
      if (*(char *)(v6 + 23) < 0) {
        operator delete(*(void **)v6);
      }
      MEMORY[0x19F3C1920](v6, 0x10B2C40CC7398DALL);
    }
  }
  long long v18 = *(_OWORD *)a3;
  unint64_t v19 = a3[2];
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::KeyValuePair>::operator++(a3);
  uint64_t v7 = (void *)a2[2];
  uint64_t v20 = 0;
  BOOL v8 = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::KeyValuePair>::revalidate_if_necessary((uint64_t)&v18, &v20);
  unint64_t v9 = v19;
  BOOL v10 = (void **)v18;
  uint64_t v11 = v7[4];
  uint64_t v12 = *(void *)(v11 + 8 * v19);
  if (v8)
  {
    uint64_t v13 = google::protobuf::Map<std::string,std::string>::InnerMap::EraseFromLinkedList(v18, *(void *)(v11 + 8 * v19));
LABEL_12:
    *(void *)(v7[4] + 8 * v9) = v13;
    goto LABEL_13;
  }
  int v14 = (uint64_t *)std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::find<std::string *>(v12, *(void **)(v20 + 32));
  if ((uint64_t *)(v12 + 8) != v14) {
    std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::erase(v12, v14);
  }
  if (!*(void *)(v12 + 24))
  {
    google::protobuf::Map<std::string,std::string>::InnerMap::DestroyTree(v7[5], (void **)v12);
    uint64_t v13 = 0;
    *(void *)(v7[4] + ((8 * v9) | std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(*((void **)this + 8)) = 0;
    v9 &= ~1uLL;
    goto LABEL_12;
  }
LABEL_13:
  google::protobuf::Map<std::string,std::string>::InnerMap::DestroyNode((uint64_t)v7, v10);
  --*v7;
  if (v9 == v7[3])
  {
    unint64_t v16 = v7[1];
    if (v9 < v16)
    {
      uint64_t v17 = v7[4];
      do
      {
        if (*(void *)(v17 + 8 * v9)) {
          break;
        }
        v7[3] = ++v9;
      }
      while (v16 != v9);
    }
  }
  __n128 result = *(__n128 *)a3;
  *(_OWORD *)a1 = *(_OWORD *)a3;
  *(void *)(a1 + 16) = a3[2];
  return result;
}

uint64_t CoreML::Specification::MILSpec::TensorType::GetCachedSize(CoreML::Specification::MILSpec::TensorType *this)
{
  return *((unsigned int *)this + 21);
}

uint64_t CoreML::Specification::MILSpec::TensorType::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  signed int v6 = *(_DWORD *)(this + 80);
  if (v6) {
    this = google::protobuf::internal::WireFormatLite::WriteEnum(1, v6, a2, a4);
  }
  unint64_t v7 = *(void *)(v5 + 72);
  if (v7) {
    this = google::protobuf::internal::WireFormatLite::WriteInt64(2, v7, a2, a4);
  }
  int v8 = *(_DWORD *)(v5 + 24);
  if (v8)
  {
    for (int i = 0; i != v8; ++i)
      this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)3, *(void *)(*(void *)(v5 + 32) + 8 * i + 8), a2, a4);
  }
  BOOL v10 = *(unint64_t **)(v5 + 64);
  unint64_t v11 = *v10;
  if (*v10)
  {
    if (*((unsigned char *)a2 + 26))
    {
      if (v11 >= 2 && *((unsigned char *)a2 + 27) != 0) {
        goto LABEL_31;
      }
    }
    else if (v11 >= 2 && google::protobuf::io::CodedOutputStream::default_serialization_deterministic_ != 0)
    {
LABEL_31:
      operator new[]();
    }
    this = (uint64_t)google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::begin(v19, v10);
    uint64_t v13 = 0;
    while (v19[0])
    {
      int v15 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(*((google::protobuf::Arena **)v19[0] + 3), (google::protobuf::Arena *)(*((void *)v19[0] + 3) + 24), *(google::protobuf::Arena **)(v5 + 40));
      if ((google::protobuf::Arena **)v13 != v15)
      {
        if (v13) {
          (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
        }
        uint64_t v13 = (uint64_t)v15;
      }
      google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)4, v13, a2, v14);
      unint64_t v16 = (unsigned int *)*((void *)v19[0] + 3);
      if (*((char *)v16 + 23) < 0)
      {
        unint64_t v16 = *(unsigned int **)v16;
        uint64_t v17 = *(void *)(*((void *)v19[0] + 3) + 8);
      }
      else
      {
        LODWORD(v17) = *((unsigned __int8 *)v16 + 23);
      }
      google::protobuf::internal::WireFormatLite::VerifyUtf8String(v16, v17, 1, (uint64_t)"CoreML.Specification.MILSpec.TensorType.AttributesEntry.key");
      this = (uint64_t)google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::KeyValuePair const>::operator++(v19);
    }
    if (v13) {
      return (*(uint64_t (**)(uint64_t))(*(void *)v13 + 8))(v13);
    }
  }
  return this;
}

void sub_19EB288A0(_Unwind_Exception *a1)
{
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  MEMORY[0x19F3C1900](v1, 0x60C8044C4A2DFLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::TensorType::MergePartialFromCodedStream(CoreML::Specification::MILSpec::TensorType *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  uint64_t v5 = (char *)this + 40;
  signed int v6 = (char *)this + 48;
  unint64_t v7 = (CoreML::Specification::MILSpec::TensorType *)((char *)this + 16);
  while (1)
  {
    int v8 = *(char **)a2;
    if (*(void *)a2 >= *((void *)a2 + 1)) {
      break;
    }
    uint64_t v9 = *v8;
    if (*v8 < 1) {
      goto LABEL_7;
    }
    *(void *)a2 = v8 + 1;
    unint64_t v10 = v9 | 0x100000000;
    if ((v10 & 0x100000000) != 0) {
      goto LABEL_8;
    }
LABEL_25:
    if (v10) {
      BOOL v22 = (v10 & 7) == 4;
    }
    else {
      BOOL v22 = 1;
    }
    if (v22) {
      return 1;
    }
    if (!google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v10, a3))goto LABEL_76; {
LABEL_30:
    }
    int v23 = 0;
LABEL_31:
    if (v23) {
      goto LABEL_76;
    }
  }
  LODWORD(v9) = 0;
LABEL_7:
  unsigned int TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v9);
  unint64_t v10 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
  if ((v10 & 0x100000000) == 0) {
    goto LABEL_25;
  }
LABEL_8:
  switch(v10 >> 3)
  {
    case 1u:
      if (v10 != 8) {
        goto LABEL_25;
      }
      uint64_t v12 = *(char **)a2;
      if (*(void *)a2 >= *((void *)a2 + 1))
      {
        int v13 = 0;
      }
      else
      {
        int v13 = *v12;
        if ((*v12 & 0x80000000) == 0)
        {
          *(void *)a2 = v12 + 1;
          goto LABEL_75;
        }
      }
      uint64_t Varint32Fallback = google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v13);
      int v13 = Varint32Fallback;
      if (Varint32Fallback < 0) {
        goto LABEL_76;
      }
LABEL_75:
      *((_DWORD *)this + 2CoreML::Specification::MILSpec::TupleType::New(this, 0) = v13;
      goto LABEL_30;
    case 2u:
      if (v10 != 16) {
        goto LABEL_25;
      }
      int v14 = *(char **)a2;
      if (*(void *)a2 >= *((void *)a2 + 1) || *v14 < 0)
      {
        unint64_t Varint64Fallback = google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2);
        if ((v24 & 1) == 0) {
          goto LABEL_76;
        }
      }
      else
      {
        unint64_t Varint64Fallback = *v14;
        *(void *)a2 = v14 + 1;
      }
      *((void *)this + 9) = Varint64Fallback;
      goto LABEL_30;
    case 3u:
      if (v10 != 26) {
        goto LABEL_25;
      }
      unint64_t v16 = (int *)*((void *)this + 4);
      if (!v16)
      {
        int v17 = *((_DWORD *)this + 6);
        int v18 = *((_DWORD *)this + 7);
LABEL_56:
        if (v17 <= v18)
        {
          google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend(v7, v18 - v17 + 1);
          unint64_t v16 = (int *)*((void *)this + 4);
        }
        int v18 = *v16;
        goto LABEL_59;
      }
      int v17 = *((_DWORD *)this + 6);
      int v18 = *v16;
      if (v17 < *v16)
      {
        *((_DWORD *)this + 6) = v17 + 1;
        Aligned = *(google::protobuf::Arena ***)&v16[2 * v17 + 2];
        goto LABEL_64;
      }
      if (v18 == *((_DWORD *)this + 7)) {
        goto LABEL_56;
      }
LABEL_59:
      *unint64_t v16 = v18 + 1;
      int v33 = *(google::protobuf::Arena **)v7;
      if (!*(void *)v7) {
        operator new();
      }
      CoreML::Specification::MILSpec::Dimension::Dimension((CoreML::Specification::MILSpec::Dimension *)Aligned);
      BOOL v34 = google::protobuf::Arena::AllocateAligned(v33, 0, 24);
      void *v34 = (google::protobuf::Arena *)Aligned;
      v34[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Dimension>;
      int v35 = (unint64_t *)((char *)v33 + 32);
      do
        unint64_t v36 = __ldxr(v35);
      while (__stxr((unint64_t)v34, v35));
      v34[2] = (google::protobuf::Arena *)v36;
      uint64_t v37 = *((void *)this + 4);
      uint64_t v38 = *((int *)this + 6);
      *((_DWORD *)this + 6) = v38 + 1;
      *(void *)(v37 + 8 * v38 + 8) = Aligned;
LABEL_64:
      int v39 = *(char **)a2;
      if (*(void *)a2 >= *((void *)a2 + 1) || *v39 < 0)
      {
        int VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (VarintSizeAsIntFallback < 0) {
          goto LABEL_76;
        }
      }
      else
      {
        int VarintSizeAsIntFallback = *v39;
        *(void *)a2 = v39 + 1;
      }
      int v41 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
      int v43 = *((_DWORD *)a2 + 13);
      BOOL v27 = __OFSUB__(v43--, 1);
      *((_DWORD *)a2 + 13) = v43;
      if (v43 < 0 == v27)
      {
        int v44 = v41;
        if (CoreML::Specification::MILSpec::Dimension::MergePartialFromCodedStream((CoreML::Specification::MILSpec::Dimension *)Aligned, a2, v42))
        {
          if (google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v44)) {
            goto LABEL_30;
          }
        }
      }
LABEL_76:
      uint64_t result = 0;
      break;
    case 4u:
      if (v10 != 34) {
        goto LABEL_25;
      }
      v47[0] = v5;
      v47[1] = v6;
      uint64_t v49 = 0;
      uint64_t v50 = 0;
      std::string __p = 0;
      uint64_t v51 = 0;
      uint64_t v20 = *(char **)a2;
      if (*(void *)a2 >= *((void *)a2 + 1) || *v20 < 0)
      {
        int v21 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v21 < 0) {
          goto LABEL_72;
        }
      }
      else
      {
        int v21 = *v20;
        *(void *)a2 = v20 + 1;
      }
      int v25 = google::protobuf::io::CodedInputStream::PushLimit(a2, v21);
      int v26 = *((_DWORD *)a2 + 13);
      BOOL v27 = __OFSUB__(v26--, 1);
      *((_DWORD *)a2 + 13) = v26;
      if (v26 < 0 != v27
        || (int v28 = v25,
            !google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>>::MergePartialFromCodedStream((uint64_t)v47, (uint64_t)a2))|| !google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v28))
      {
LABEL_72:
        BOOL v32 = 0;
        int v23 = 6;
        goto LABEL_48;
      }
      if (v50 >= 0) {
        p_p = (unsigned int *)&__p;
      }
      else {
        p_p = (unsigned int *)__p;
      }
      if (v50 >= 0) {
        int v30 = HIBYTE(v50);
      }
      else {
        int v30 = v49;
      }
      BOOL v31 = google::protobuf::internal::WireFormatLite::VerifyUtf8String(p_p, v30, 0, (uint64_t)"CoreML.Specification.MILSpec.TensorType.AttributesEntry.key");
      BOOL v32 = v31;
      if (v31) {
        int v23 = 0;
      }
      else {
        int v23 = 6;
      }
LABEL_48:
      if (v51) {
        (*(void (**)(uint64_t))(*(void *)v51 + 8))(v51);
      }
      if (SHIBYTE(v50) < 0) {
        operator delete(__p);
      }
      if (!v32) {
        goto LABEL_31;
      }
      goto LABEL_30;
    default:
      goto LABEL_25;
  }
  return result;
}

void sub_19EB28D70(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>>::MergePartialFromCodedStream(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned __int8 **)a2;
  if (*(void *)a2 >= *(void *)(a2 + 8) || *v4 != 10)
  {
    unint64_t v10 = (void **)(a1 + 16);
    if (*(char *)(a1 + 39) < 0) {
      operator delete(*v10);
    }
    *unint64_t v10 = 0;
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    goto LABEL_13;
  }
  *(void *)a2 = v4 + 1;
  if (!google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)a2, (std::string *)(a1 + 16)))return 0; {
  if ((int)(*(_DWORD *)(a2 + 8) - *(void *)a2) < 1
  }
    || **(unsigned char **)a2 != 18
    || (uint64_t v5 = *(void *)(a1 + 8),
        uint64_t v6 = **(void **)(v5 + 16),
        *(void *)(a1 + 4CoreML::Specification::MILSpec::TupleType::New(this, 0) = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::operator[](v5, a1 + 16), v6 == **(void **)(*(void *)(a1 + 8) + 16)))
  {
LABEL_13:
    unint64_t v11 = google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::NewEntry(**(google::protobuf::Arena ***)a1);
    uint64_t v12 = *(google::protobuf::Arena ***)(a1 + 48);
    if (v12 != v11)
    {
      if (v12) {
        (*((void (**)(google::protobuf::Arena **))*v12 + 1))(v12);
      }
      *(void *)(a1 + 48) = v11;
    }
    int v13 = (long long *)v11[2];
    *((_DWORD *)v11 + 10) |= 1u;
    if (v13 == &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstance();
    }
    std::string::operator=((std::string *)v13, (const std::string *)(a1 + 16));
    uint64_t v14 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 48) + 88))(*(void *)(a1 + 48), a2);
    if (v14) {
      google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>>::UseKeyAndValueFromEntry(a1);
    }
    if ((*(uint64_t (**)(void))(**(void **)(a1 + 48) + 40))(*(void *)(a1 + 48))) {
      *(void *)(a1 + 48) = 0;
    }
    return v14;
  }
  google::protobuf::io::CodedInputStream::Skip((google::protobuf::io::CodedInputStream *)a2, 1u);
  unint64_t v7 = *(CoreML::Specification::MILSpec::Value **)(a1 + 40);
  int v8 = *(unsigned __int8 **)a2;
  if (*(void *)a2 >= *(void *)(a2 + 8) || (char)*v8 < 0)
  {
    int VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((google::protobuf::io::CodedInputStream *)a2);
    if (VarintSizeAsIntFallback < 0)
    {
LABEL_31:
      google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::erase(*(void **)(a1 + 8), (unsigned __int8 *)(a1 + 16));
      return 0;
    }
  }
  else
  {
    int VarintSizeAsIntFallback = *v8;
    *(void *)a2 = v8 + 1;
  }
  int v15 = google::protobuf::io::CodedInputStream::PushLimit((google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
  int v16 = *(_DWORD *)(a2 + 52);
  BOOL v17 = __OFSUB__(v16--, 1);
  *(_DWORD *)(a2 + 52) = v16;
  if (v16 < 0 != v17) {
    goto LABEL_31;
  }
  int v18 = v15;
  if (!CoreML::Specification::MILSpec::Value::MergePartialFromCodedStream(v7, (google::protobuf::io::CodedInputStream *)a2)|| !google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((google::protobuf::io::CodedInputStream *)a2, v18))
  {
    goto LABEL_31;
  }
  if (*(void *)a2 == *(void *)(a2 + 8) && (*(_DWORD *)(a2 + 44) || *(_DWORD *)(a2 + 24) == *(_DWORD *)(a2 + 40)))
  {
    *(_DWORD *)(a2 + 32) = 0;
    uint64_t v14 = 1;
    *(unsigned char *)(a2 + 36) = 1;
    return v14;
  }

  return google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>>::ReadBeyondKeyValuePair(a1, a2);
}

double google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::erase(void *a1, unsigned __int8 *a2)
{
  google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper(&v6, a1[2], a2, 0);
  double result = *(double *)&v6;
  if ((void)v6)
  {
    long long v4 = v6;
    uint64_t v5 = v7;
    *(void *)&double result = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::erase((uint64_t)&v6, a1, &v4).n128_u64[0];
  }
  return result;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>>::ReadBeyondKeyValuePair(uint64_t a1, uint64_t a2)
{
  long long v4 = google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::NewEntry(**(google::protobuf::Arena ***)a1);
  uint64_t v5 = *(google::protobuf::Arena ***)(a1 + 48);
  if (v5 != v4)
  {
    if (v5) {
      (*((void (**)(google::protobuf::Arena **))*v5 + 1))(v5);
    }
    *(void *)(a1 + 48) = v4;
  }
  long long v6 = *(CoreML::Specification::MILSpec::Value **)(a1 + 40);
  *((_DWORD *)v4 + 10) |= 2u;
  Aligned = (google::protobuf::Arena **)v4[3];
  if (!Aligned)
  {
    int v8 = v4[4];
    if (!v8) {
      operator new();
    }
    CoreML::Specification::MILSpec::Value::Value((CoreML::Specification::MILSpec::Value *)Aligned);
    uint64_t v9 = google::protobuf::Arena::AllocateAligned(v8, 0, 24);
    CoreML::Specification::MILSpec::TensorValue_RepeatedFloats *v9 = (google::protobuf::Arena *)Aligned;
    v9[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Value>;
    unint64_t v10 = (unint64_t *)((char *)v8 + 32);
    do
      unint64_t v11 = __ldxr(v10);
    while (__stxr((unint64_t)v9, v10));
    v9[2] = (google::protobuf::Arena *)v11;
    v4[3] = (google::protobuf::Arena *)Aligned;
  }
  CoreML::Specification::MILSpec::Value::Swap((uint64_t)Aligned, v6);
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::erase(*(void **)(a1 + 8), (unsigned __int8 *)(a1 + 16));
  uint64_t v12 = *(void *)(a1 + 48);
  *(_DWORD *)(v12 + 40) |= 1u;
  uint64_t v13 = *(void *)(v12 + 16);
  if ((long long *)v13 == &google::protobuf::internal::fixed_address_empty_string) {
    google::protobuf::internal::ArenaStringPtr::CreateInstance();
  }
  if (*(char *)(v13 + 23) < 0) {
    operator delete(*(void **)v13);
  }
  long long v14 = *(_OWORD *)(a1 + 16);
  *(void *)(v13 + 16) = *(void *)(a1 + 32);
  *(_OWORD *)uint64_t v13 = v14;
  *(unsigned char *)(a1 + 39) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  uint64_t v15 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 48) + 88))(*(void *)(a1 + 48), a2);
  if (v15) {
    google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>>::UseKeyAndValueFromEntry(a1);
  }
  if ((*(uint64_t (**)(void))(**(void **)(a1 + 48) + 40))(*(void *)(a1 + 48))) {
    *(void *)(a1 + 48) = 0;
  }
  return v15;
}

void sub_19EB292E0(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C40000F1E19);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::NewEntry(google::protobuf::Arena *a1)
{
  if (!a1) {
    operator new();
  }
  result[1] = 0;
  result[2] = (google::protobuf::Arena *)&google::protobuf::internal::fixed_address_empty_string;
  result[3] = 0;
  result[4] = a1;
  *((_DWORD *)result + 1CoreML::Specification::MILSpec::TupleType::New(this, 0) = 0;
  *double result = (google::protobuf::Arena *)&unk_1EF0DC498;
  return result;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>>::UseKeyAndValueFromEntry(uint64_t a1)
{
  uint64_t v2 = (const std::string *)(*(uint64_t (**)(void))(**(void **)(a1 + 48) + 136))(*(void *)(a1 + 48));
  std::string::operator=((std::string *)(a1 + 16), v2);
  long long v3 = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::operator[](*(void *)(a1 + 8), a1 + 16);
  *(void *)(a1 + 4CoreML::Specification::MILSpec::TupleType::New(this, 0) = v3;
  uint64_t v4 = *(void *)(a1 + 48);
  *(_DWORD *)(v4 + 40) |= 2u;
  Aligned = *(google::protobuf::Arena ***)(v4 + 24);
  if (!Aligned)
  {
    long long v6 = *(google::protobuf::Arena **)(v4 + 32);
    if (!v6) {
      operator new();
    }
    CoreML::Specification::MILSpec::Value::Value((CoreML::Specification::MILSpec::Value *)Aligned);
    uint64_t v7 = google::protobuf::Arena::AllocateAligned(v6, 0, 24);
    *uint64_t v7 = (google::protobuf::Arena *)Aligned;
    v7[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Value>;
    int v8 = (unint64_t *)((char *)v6 + 32);
    do
      unint64_t v9 = __ldxr(v8);
    while (__stxr((unint64_t)v7, v8));
    v7[2] = (google::protobuf::Arena *)v9;
    *(void *)(v4 + 24) = Aligned;
    long long v3 = *(google::protobuf::Arena ***)(a1 + 40);
  }

  return CoreML::Specification::MILSpec::Value::Swap((uint64_t)v3, (CoreML::Specification::MILSpec::Value *)Aligned);
}

void sub_19EB294A8(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C40000F1E19);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::Value::Swap(uint64_t this, CoreML::Specification::MILSpec::Value *a2)
{
  if (a2 != (CoreML::Specification::MILSpec::Value *)this)
  {
    uint64_t v2 = *(void *)(this + 16);
    *(void *)(this + 16) = *((void *)a2 + 2);
    *((void *)a2 + 2) = v2;
    uint64_t v3 = *(void *)(this + 24);
    *(void *)(this + 24) = *((void *)a2 + 3);
    *((void *)a2 + 3) = v3;
    uint64_t v4 = *(void *)(this + 32);
    *(void *)(this + 32) = *((void *)a2 + 4);
    *((void *)a2 + 4) = v4;
    LODWORD(v4) = *(_DWORD *)(this + 44);
    *(_DWORD *)(this + 44) = *((_DWORD *)a2 + 11);
    *((_DWORD *)a2 + 11) = v4;
    LODWORD(v4) = *(_DWORD *)(this + 40);
    *(_DWORD *)(this + 4CoreML::Specification::MILSpec::TupleType::New(this, 0) = *((_DWORD *)a2 + 10);
    *((_DWORD *)a2 + 1CoreML::Specification::MILSpec::TupleType::New(this, 0) = v4;
  }
  return this;
}

uint64_t CoreML::Specification::MILSpec::TensorType::IsInitialized(CoreML::Specification::MILSpec::TensorType *this)
{
  return 1;
}

void CoreML::Specification::MILSpec::TensorType::Clear(CoreML::Specification::MILSpec::TensorType *this)
{
  uint64_t v2 = *((unsigned int *)this + 6);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = (uint64_t *)(*((void *)this + 4) + 8);
    do
    {
      uint64_t v4 = *v3++;
      CoreML::Specification::MILSpec::Dimension::clear_dimension(v4);
      --v2;
    }
    while (v2);
    *((_DWORD *)this + 6) = 0;
  }
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::clear((uint64_t)this + 48);
  *((_DWORD *)this + 2CoreML::Specification::MILSpec::TupleType::New(this, 0) = 0;
  *((void *)this + 9) = 0;
}

void CoreML::Specification::MILSpec::TensorType::New(CoreML::Specification::MILSpec::TensorType *this, google::protobuf::Arena *a2)
{
}

void sub_19EB295E8(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C4012099E73);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::MILSpec::TensorType>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    double result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *double result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::TensorType>;
    uint64_t v4 = (unint64_t *)(v3 + 4);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::TensorType>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void CoreML::Specification::MILSpec::TensorType::New(CoreML::Specification::MILSpec::TensorType *this)
{
}

void *CoreML::Specification::MILSpec::TensorType::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.MILSpec.TensorType");
}

void CoreML::Specification::MILSpec::TensorType::~TensorType(CoreML::Specification::MILSpec::TensorType *this)
{
  CoreML::Specification::MILSpec::TensorType::~TensorType(this);

  JUMPOUT(0x19F3C1920);
}

{
  *(void *)this = &unk_1EF0D9820;
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::~Map((void *)this + 6);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>((void *)this + 2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

uint64_t CoreML::Specification::MILSpec::ValueType::GetCachedSize(CoreML::Specification::MILSpec::ValueType *this)
{
  return *((unsigned int *)this + 6);
}

uint64_t CoreML::Specification::MILSpec::ValueType::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 28);
  if (v6 == 1)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)1, *(void *)(this + 16), a2, a4);
    int v6 = *(_DWORD *)(v5 + 28);
  }
  if (v6 == 2)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)2, *(void *)(v5 + 16), a2, a4);
    int v6 = *(_DWORD *)(v5 + 28);
  }
  if (v6 == 3)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)3, *(void *)(v5 + 16), a2, a4);
    int v6 = *(_DWORD *)(v5 + 28);
  }
  if (v6 == 4)
  {
    this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)4, *(void *)(v5 + 16), a2, a4);
    int v6 = *(_DWORD *)(v5 + 28);
  }
  if (v6 == 5)
  {
    uint64_t v7 = *(void *)(v5 + 16);
    return google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)5, v7, a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::MILSpec::ValueType::IsInitialized(CoreML::Specification::MILSpec::ValueType *this)
{
  return 1;
}

void CoreML::Specification::MILSpec::ValueType::New(CoreML::Specification::MILSpec::ValueType *this, google::protobuf::Arena *a2)
{
}

void sub_19EB29874(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::MILSpec::ValueType>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    double result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *double result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::ValueType>;
    uint64_t v4 = (unint64_t *)(v3 + 4);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::ValueType>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void CoreML::Specification::MILSpec::ValueType::New(CoreML::Specification::MILSpec::ValueType *this)
{
}

void *CoreML::Specification::MILSpec::ValueType::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.MILSpec.ValueType");
}

void CoreML::Specification::MILSpec::ValueType::~ValueType(CoreML::Specification::MILSpec::ValueType *this)
{
  CoreML::Specification::MILSpec::ValueType::~ValueType(this);

  JUMPOUT(0x19F3C1920);
}

{
  *(void *)this = &unk_1EF0DA9F0;
  if (*((_DWORD *)this + 7)) {
    CoreML::Specification::MILSpec::ValueType::clear_type((uint64_t)this);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

uint64_t CoreML::Specification::MILSpec::NamedValueType::GetCachedSize(CoreML::Specification::MILSpec::NamedValueType *this)
{
  return *((unsigned int *)this + 8);
}

uint64_t CoreML::Specification::MILSpec::NamedValueType::SerializeWithCachedSizes(CoreML::Specification::MILSpec::NamedValueType *this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t result = *((void *)this + 2);
  if ((*(char *)(result + 23) & 0x80000000) == 0)
  {
    LODWORD(v7) = *(unsigned __int8 *)(result + 23);
    if (!*(unsigned char *)(result + 23)) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v7 = *(void *)(result + 8);
  if (v7)
  {
    uint64_t result = *(void *)result;
LABEL_6:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String((unsigned int *)result, v7, 1, (uint64_t)"CoreML.Specification.MILSpec.NamedValueType.name");
    uint64_t result = google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(1u, *((void *)this + 2), a2);
  }
LABEL_7:
  if (this != (CoreML::Specification::MILSpec::NamedValueType *)&CoreML::Specification::MILSpec::_NamedValueType_default_instance_)
  {
    uint64_t v8 = *((void *)this + 3);
    if (v8)
    {
      return google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)2, v8, a2, a4);
    }
  }
  return result;
}

uint64_t CoreML::Specification::MILSpec::NamedValueType::ByteSizeLong(CoreML::Specification::MILSpec::NamedValueType *this)
{
  uint64_t v2 = *((void *)this + 2);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(void *)(v2 + 8)) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v5 = 0;
    goto LABEL_8;
  }
  if (!*(unsigned char *)(v2 + 23)) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v4 = *(void *)(v2 + 8);
  if ((v3 & 0x80u) == 0) {
    uint64_t v4 = v3;
  }
  uint64_t v5 = v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_8:
  if (this != (CoreML::Specification::MILSpec::NamedValueType *)&CoreML::Specification::MILSpec::_NamedValueType_default_instance_)
  {
    int v6 = (CoreML::Specification::MILSpec::TensorType **)*((void *)this + 3);
    if (v6)
    {
      uint64_t v7 = CoreML::Specification::MILSpec::ValueType::ByteSizeLong(v6);
      v5 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
  }
  *((_DWORD *)this + 8) = v5;
  return v5;
}

uint64_t CoreML::Specification::MILSpec::NamedValueType::MergePartialFromCodedStream(CoreML::Specification::MILSpec::NamedValueType *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  uint64_t v5 = (std::string **)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        int v6 = *(char **)a2;
        if (*(void *)a2 >= *((void *)a2 + 1))
        {
          LODWORD(v7) = 0;
LABEL_7:
          unsigned int TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v7);
          unint64_t v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
          if ((v8 & 0x100000000) == 0) {
            goto LABEL_25;
          }
          goto LABEL_8;
        }
        uint64_t v7 = *v6;
        if (*v6 < 1) {
          goto LABEL_7;
        }
        *(void *)a2 = v6 + 1;
        unint64_t v8 = v7 | 0x100000000;
        if ((v8 & 0x100000000) == 0) {
          goto LABEL_25;
        }
LABEL_8:
        if (v8 >> 3 != 2) {
          break;
        }
        if (v8 != 18) {
          goto LABEL_25;
        }
        long long v14 = (CoreML::Specification::MILSpec::ValueType *)*((void *)this + 3);
        if (!v14) {
          operator new();
        }
        uint64_t v15 = *(char **)a2;
        if (*(void *)a2 >= *((void *)a2 + 1) || *v15 < 0)
        {
          int VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (VarintSizeAsIntFallback < 0) {
            return 0;
          }
        }
        else
        {
          int VarintSizeAsIntFallback = *v15;
          *(void *)a2 = v15 + 1;
        }
        int v18 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
        int v20 = *((_DWORD *)a2 + 13);
        BOOL v21 = __OFSUB__(v20--, 1);
        *((_DWORD *)a2 + 13) = v20;
        if (v20 < 0 == v21)
        {
          int v22 = v18;
          uint64_t result = CoreML::Specification::MILSpec::ValueType::MergePartialFromCodedStream(v14, a2, v19);
          if (!result) {
            return result;
          }
          if (google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v22)) {
            continue;
          }
        }
        return 0;
      }
      if (v8 >> 3 != 1 || v8 != 10) {
        break;
      }
      if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
      }
      uint64_t result = google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)a2, *v5);
      if (!result) {
        return result;
      }
      uint64_t v12 = (unsigned int *)*v5;
      if (SHIBYTE((*v5)->__r_.__value_.__r.__words[2]) < 0)
      {
        uint64_t v12 = *(unsigned int **)v12;
        std::string::size_type size = (*v5)->__r_.__value_.__l.__size_;
      }
      else
      {
        LODWORD(size) = HIBYTE((*v5)->__r_.__value_.__r.__words[2]);
      }
      if (!google::protobuf::internal::WireFormatLite::VerifyUtf8String(v12, size, 0, (uint64_t)"CoreML.Specification.MILSpec.NamedValueType.name"))return 0; {
    }
      }
LABEL_25:
    if (!v8 || (v8 & 7) == 4) {
      return 1;
    }
    if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v8, a3) & 1) == 0) {
      return 0;
    }
  }
}

void sub_19EB29D24(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

std::string *CoreML::Specification::MILSpec::NamedValueType::MergeFrom(std::string *this, const CoreML::Specification::MILSpec::NamedValueType *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    this = google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  uint64_t v5 = *((void *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
  {
    if (!*(void *)(v5 + 8)) {
      goto LABEL_11;
    }
  }
  else if (!*(unsigned char *)(v5 + 23))
  {
    goto LABEL_11;
  }
  this = (std::string *)&v3->__r_.__value_.__r.__words[2];
  int v6 = (long long *)v3->__r_.__value_.__r.__words[2];
  if (v6 != (long long *)v5)
  {
    if (v6 == &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
    }
    this = std::string::operator=((std::string *)v3->__r_.__value_.__r.__words[2], (const std::string *)v5);
  }
LABEL_11:
  if (a2 != (const CoreML::Specification::MILSpec::NamedValueType *)&CoreML::Specification::MILSpec::_NamedValueType_default_instance_
    && *((void *)a2 + 3))
  {
    if (!v3[1].__r_.__value_.__r.__words[0]) {
      operator new();
    }
    uint64_t v7 = (const CoreML::Specification::MILSpec::ValueType *)*((void *)a2 + 3);
    int data = (std::string *)v3[1].__r_.__value_.__l.__data_;
    return CoreML::Specification::MILSpec::ValueType::MergeFrom(data, v7);
  }
  return this;
}

void sub_19EB29E58(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::NamedValueType::IsInitialized(CoreML::Specification::MILSpec::NamedValueType *this)
{
  return 1;
}

uint64_t CoreML::Specification::MILSpec::NamedValueType::Clear(CoreML::Specification::MILSpec::NamedValueType *this)
{
  uint64_t v2 = *((void *)this + 2);
  if ((long long *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(unsigned char **)uint64_t v2 = 0;
      *(void *)(v2 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v2 = 0;
      *(unsigned char *)(v2 + 23) = 0;
    }
  }
  uint64_t result = *((void *)this + 3);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 3) = 0;
  return result;
}

void CoreML::Specification::MILSpec::NamedValueType::New(CoreML::Specification::MILSpec::NamedValueType *this, google::protobuf::Arena *a2)
{
}

void sub_19EB29F5C(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C40C9A46F13);
  _Unwind_Resume(a1);
}

CoreML::Specification::MILSpec::NamedValueType *CoreML::Specification::MILSpec::NamedValueType::NamedValueType(CoreML::Specification::MILSpec::NamedValueType *this)
{
  *(void *)this = &unk_1EF0D9A80;
  *((void *)this + 1) = 0;
  if (this != (CoreML::Specification::MILSpec::NamedValueType *)&CoreML::Specification::MILSpec::_NamedValueType_default_instance_) {
    CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(this);
  }
  *((void *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  return this;
}

void sub_19EB29FEC(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::MILSpec::NamedValueType>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    uint64_t result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *uint64_t result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::NamedValueType>;
    uint64_t v4 = (unint64_t *)(v3 + 4);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::NamedValueType>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void CoreML::Specification::MILSpec::NamedValueType::New(CoreML::Specification::MILSpec::NamedValueType *this)
{
}

void *CoreML::Specification::MILSpec::NamedValueType::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.MILSpec.NamedValueType");
}

void CoreML::Specification::MILSpec::NamedValueType::~NamedValueType(CoreML::Specification::MILSpec::NamedValueType *this)
{
  CoreML::Specification::MILSpec::NamedValueType::~NamedValueType(this);

  JUMPOUT(0x19F3C1920);
}

{
  uint64_t v2;
  uint64_t v4;

  *(void *)this = &unk_1EF0D9A80;
  uint64_t v2 = *((void *)this + 2);
  if ((long long *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    MEMORY[0x19F3C1920](v2, 0x1012C40EC159624);
  }
  if (this != (CoreML::Specification::MILSpec::NamedValueType *)&CoreML::Specification::MILSpec::_NamedValueType_default_instance_)
  {
    uint64_t v4 = *((void *)this + 3);
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

void *google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>::~Map(void *a1)
{
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>::clear((uint64_t)a1);
  if (!*a1)
  {
    uint64_t v2 = a1[2];
    if (v2)
    {
      uint64_t v3 = google::protobuf::Map<std::string,std::string>::InnerMap::~InnerMap(v2);
      MEMORY[0x19F3C1920](v3, 0x10E0C40D5F42F35);
    }
  }
  return a1;
}

double google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>::clear(uint64_t a1)
{
  google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::begin(&v3, *(void **)(a1 + 16));
  while ((void)v3)
  {
    long long v5 = v3;
    uint64_t v6 = v4;
    *(void *)&double result = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>::erase((uint64_t)&v3, (void *)a1, &v5).n128_u64[0];
  }
  return result;
}

__n128 google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>::erase(uint64_t a1, void *a2, void *a3)
{
  if (!*a2)
  {
    uint64_t v6 = *(void *)(*a3 + 24);
    if (v6)
    {
      CoreML::Specification::MILSpec::Argument::~Argument((CoreML::Specification::MILSpec::Argument *)(v6 + 24));
      if (*(char *)(v6 + 23) < 0) {
        operator delete(*(void **)v6);
      }
      MEMORY[0x19F3C1920](v6, 0x10B2C40C743746ALL);
    }
  }
  long long v18 = *(_OWORD *)a3;
  unint64_t v19 = a3[2];
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::KeyValuePair>::operator++(a3);
  uint64_t v7 = (void *)a2[2];
  uint64_t v20 = 0;
  BOOL v8 = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::KeyValuePair>::revalidate_if_necessary((uint64_t)&v18, &v20);
  unint64_t v9 = v19;
  unint64_t v10 = (void **)v18;
  uint64_t v11 = v7[4];
  uint64_t v12 = *(void *)(v11 + 8 * v19);
  if (v8)
  {
    uint64_t v13 = google::protobuf::Map<std::string,std::string>::InnerMap::EraseFromLinkedList(v18, *(void *)(v11 + 8 * v19));
LABEL_12:
    *(void *)(v7[4] + 8 * v9) = v13;
    goto LABEL_13;
  }
  long long v14 = (uint64_t *)std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::find<std::string *>(v12, *(void **)(v20 + 32));
  if ((uint64_t *)(v12 + 8) != v14) {
    std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::erase(v12, v14);
  }
  if (!*(void *)(v12 + 24))
  {
    google::protobuf::Map<std::string,std::string>::InnerMap::DestroyTree(v7[5], (void **)v12);
    uint64_t v13 = 0;
    *(void *)(v7[4] + ((8 * v9) | std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(*((void **)this + 8)) = 0;
    v9 &= ~1uLL;
    goto LABEL_12;
  }
LABEL_13:
  google::protobuf::Map<std::string,std::string>::InnerMap::DestroyNode((uint64_t)v7, v10);
  --*v7;
  if (v9 == v7[3])
  {
    unint64_t v16 = v7[1];
    if (v9 < v16)
    {
      uint64_t v17 = v7[4];
      do
      {
        if (*(void *)(v17 + 8 * v9)) {
          break;
        }
        v7[3] = ++v9;
      }
      while (v16 != v9);
    }
  }
  __n128 result = *(__n128 *)a3;
  *(_OWORD *)a1 = *(_OWORD *)a3;
  *(void *)(a1 + 16) = a3[2];
  return result;
}

void CoreML::Specification::MILSpec::Argument::~Argument(CoreML::Specification::MILSpec::Argument *this)
{
  *(void *)this = &unk_1EF0DA530;
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>((void *)this + 2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  CoreML::Specification::MILSpec::Argument::~Argument(this);

  JUMPOUT(0x19F3C1920);
}

uint64_t CoreML::Specification::MILSpec::Operation::GetCachedSize(CoreML::Specification::MILSpec::Operation *this)
{
  return *((unsigned int *)this + 34);
}

uint64_t CoreML::Specification::MILSpec::Operation::SerializeWithCachedSizes(CoreML::Specification::MILSpec::Operation *this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t result = *((void *)this + 16);
  if (*(char *)(result + 23) < 0)
  {
    uint64_t v7 = *(void *)(result + 8);
    if (!v7) {
      goto LABEL_7;
    }
    uint64_t result = *(void *)result;
    goto LABEL_6;
  }
  LODWORD(v7) = *(unsigned __int8 *)(result + 23);
  if (*(unsigned char *)(result + 23))
  {
LABEL_6:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String((unsigned int *)result, v7, 1, (uint64_t)"CoreML.Specification.MILSpec.Operation.type");
    uint64_t result = google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(1u, *((void *)this + 16), a2);
  }
LABEL_7:
  BOOL v8 = (unint64_t *)*((void *)this + 5);
  unint64_t v9 = *v8;
  if (*v8)
  {
    if (*((unsigned char *)a2 + 26))
    {
      if (v9 >= 2 && *((unsigned char *)a2 + 27) != 0) {
        goto LABEL_30;
      }
    }
    else if (v9 >= 2 && google::protobuf::io::CodedOutputStream::default_serialization_deterministic_ != 0)
    {
LABEL_30:
      operator new[]();
    }
    uint64_t result = (uint64_t)google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::begin(v30, v8);
    uint64_t v11 = 0;
    while (v30[0])
    {
      uint64_t v13 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(*((google::protobuf::Arena **)v30[0] + 3), (google::protobuf::Arena *)(*((void *)v30[0] + 3) + 24), *((google::protobuf::Arena **)this + 2));
      if ((google::protobuf::Arena **)v11 != v13)
      {
        if (v11) {
          (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
        }
        uint64_t v11 = (uint64_t)v13;
      }
      google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)2, v11, a2, v12);
      long long v14 = (unsigned int *)*((void *)v30[0] + 3);
      if (*((char *)v14 + 23) < 0)
      {
        long long v14 = *(unsigned int **)v14;
        uint64_t v15 = *(void *)(*((void *)v30[0] + 3) + 8);
      }
      else
      {
        LODWORD(v15) = *((unsigned __int8 *)v14 + 23);
      }
      google::protobuf::internal::WireFormatLite::VerifyUtf8String(v14, v15, 1, (uint64_t)"CoreML.Specification.MILSpec.Operation.InputsEntry.key");
      uint64_t result = (uint64_t)google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::KeyValuePair const>::operator++(v30);
    }
    if (v11) {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  int v17 = *((_DWORD *)this + 14);
  if (v17)
  {
    for (int i = 0; i != v17; ++i)
      uint64_t result = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)3, *(void *)(*((void *)this + 8) + 8 * i + 8), a2, a4);
  }
  int v19 = *((_DWORD *)this + 20);
  if (v19)
  {
    for (int j = 0; j != v19; ++j)
      uint64_t result = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)4, *(void *)(*((void *)this + 11) + 8 * j + 8), a2, a4);
  }
  BOOL v21 = (unint64_t *)*((void *)this + 15);
  unint64_t v22 = *v21;
  if (*v21)
  {
    if (*((unsigned char *)a2 + 26))
    {
      if (v22 >= 2 && *((unsigned char *)a2 + 27) != 0) {
        goto LABEL_60;
      }
    }
    else if (v22 >= 2 && google::protobuf::io::CodedOutputStream::default_serialization_deterministic_ != 0)
    {
LABEL_60:
      operator new[]();
    }
    uint64_t result = (uint64_t)google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::begin(v30, v21);
    uint64_t v24 = 0;
    while (v30[0])
    {
      int v26 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(*((google::protobuf::Arena **)v30[0] + 3), (google::protobuf::Arena *)(*((void *)v30[0] + 3) + 24), *((google::protobuf::Arena **)this + 12));
      if ((google::protobuf::Arena **)v24 != v26)
      {
        if (v24) {
          (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
        }
        uint64_t v24 = (uint64_t)v26;
      }
      google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)5, v24, a2, v25);
      BOOL v27 = (unsigned int *)*((void *)v30[0] + 3);
      if (*((char *)v27 + 23) < 0)
      {
        BOOL v27 = *(unsigned int **)v27;
        uint64_t v28 = *(void *)(*((void *)v30[0] + 3) + 8);
      }
      else
      {
        LODWORD(v28) = *((unsigned __int8 *)v27 + 23);
      }
      google::protobuf::internal::WireFormatLite::VerifyUtf8String(v27, v28, 1, (uint64_t)"CoreML.Specification.MILSpec.Operation.AttributesEntry.key");
      uint64_t result = (uint64_t)google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::KeyValuePair const>::operator++(v30);
    }
    if (v24) {
      return (*(uint64_t (**)(uint64_t))(*(void *)v24 + 8))(v24);
    }
  }
  return result;
}

void sub_19EB2AA24(_Unwind_Exception *a1)
{
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  MEMORY[0x19F3C1900](v1, 0x60C8044C4A2DFLL);
  _Unwind_Resume(a1);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Argument> const*> &,google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Argument> const**,false>(uint64_t result, char *a2, uint64_t a3, char a4)
{
  BOOL v8 = (char *)result;
  while (2)
  {
    uint64_t v95 = a2 - 8;
    std::string::size_type v91 = a2 - 24;
    uint64_t v92 = a2 - 16;
    unint64_t v9 = v8;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          unint64_t v10 = (unint64_t)v9;
          uint64_t v11 = a2 - v9;
          uint64_t v12 = (a2 - v9) >> 3;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0:
              case 1:
                return result;
              case 2:
                int v41 = *(void **)v95;
                unsigned int v42 = *(void **)v9;
                uint64_t result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*(void **)v95, *(void **)v9);
                if (result)
                {
                  *(void *)unint64_t v9 = v41;
                  *(void *)uint64_t v95 = v42;
                }
                break;
              case 3:
                uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((void **)v9, (void **)v9 + 1, (void **)v95);
                break;
              case 4:
                uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((void **)v9, (void **)v9 + 1, (void **)v9 + 2, (void **)v95);
                break;
              case 5:
                uint64_t result = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((void **)v9, (void **)v9 + 1, (void **)v9 + 2, (void **)v9 + 3, (void **)v95);
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v11 <= 191)
          {
            int v43 = v9 + 8;
            BOOL v45 = v9 == a2 || v43 == a2;
            if (a4)
            {
              if (!v45)
              {
                uint64_t v46 = 0;
                unsigned int v47 = v9;
                do
                {
                  uint64_t v49 = *(void **)v47;
                  int v48 = (void *)*((void *)v47 + 1);
                  unsigned int v47 = v43;
                  uint64_t result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v48, v49);
                  if (result)
                  {
                    uint64_t v50 = v46;
                    while (1)
                    {
                      *(void *)&v9[v50 + 8] = v49;
                      if (!v50) {
                        break;
                      }
                      uint64_t v49 = *(void **)&v9[v50 - 8];
                      uint64_t result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v48, v49);
                      v50 -= 8;
                      if ((result & 1) == 0)
                      {
                        uint64_t v51 = &v9[v50 + 8];
                        goto LABEL_80;
                      }
                    }
                    uint64_t v51 = v9;
LABEL_80:
                    *(void *)uint64_t v51 = v48;
                  }
                  int v43 = v47 + 8;
                  v46 += 8;
                }
                while (v47 + 8 != a2);
              }
            }
            else if (!v45)
            {
              do
              {
                std::string v87 = *(void **)v10;
                std::string v86 = *(void **)(v10 + 8);
                unint64_t v10 = (unint64_t)v43;
                uint64_t result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v86, v87);
                if (result)
                {
                  std::string v88 = (void *)v10;
                  do
                  {
                    *std::string v88 = v87;
                    std::string v87 = (void *)*(v88 - 2);
                    uint64_t result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v86, v87);
                    --v88;
                  }
                  while ((result & 1) != 0);
                  *std::string v88 = v86;
                }
                int v43 = (char *)(v10 + 8);
              }
              while ((char *)(v10 + 8) != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v9 != a2)
            {
              uint64_t v98 = v9;
              int64_t v52 = (unint64_t)(v12 - 2) >> 1;
              int64_t v53 = v52;
              std::string v89 = a2;
              uint64_t v90 = a2 - v9;
              do
              {
                int64_t v54 = v53;
                if (v11 >= 16 && v52 >= v53)
                {
                  uint64_t v55 = (2 * v53) | 1;
                  long long v56 = &v98[8 * v55];
                  uint64_t v57 = 2 * v53 + 2;
                  int64_t v96 = v53;
                  if (v57 < v12)
                  {
                    uint64_t v58 = *(void **)v56;
                    uint64_t v60 = (void *)*((void *)v56 + 1);
                    BOOL v59 = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*(void **)v56, v60);
                    if (v59) {
                      v56 += 8;
                    }
                    else {
                      uint64_t v60 = v58;
                    }
                    if (v59) {
                      uint64_t v55 = v57;
                    }
                  }
                  else
                  {
                    uint64_t v60 = *(void **)v56;
                  }
                  long long v61 = &v98[8 * v54];
                  uint64_t v62 = *(void **)v61;
                  uint64_t result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v60, *(void **)v61);
                  uint64_t v11 = v90;
                  if ((result & 1) == 0)
                  {
                    do
                    {
                      long long v63 = v56;
                      *(void *)long long v61 = v60;
                      if (v52 < v55) {
                        break;
                      }
                      uint64_t v64 = (2 * v55) | 1;
                      long long v56 = &v98[8 * v64];
                      uint64_t v65 = 2 * v55 + 2;
                      if (v65 < v12)
                      {
                        uint64_t v60 = *(void **)v56;
                        int v66 = (void *)*((void *)v56 + 1);
                        if (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*(void **)v56, v66))
                        {
                          uint64_t v60 = v66;
                          v56 += 8;
                          uint64_t v55 = v65;
                        }
                        else
                        {
                          uint64_t v55 = v64;
                        }
                      }
                      else
                      {
                        uint64_t v60 = *(void **)v56;
                        uint64_t v55 = (2 * v55) | 1;
                      }
                      uint64_t result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v60, v62);
                      long long v61 = v63;
                    }
                    while (!result);
                    *(void *)long long v63 = v62;
                    a2 = v89;
                    uint64_t v11 = v90;
                    int64_t v54 = v96;
                  }
                }
                int64_t v53 = v54 - 1;
              }
              while (v54);
              uint64_t v67 = (unint64_t)v11 >> 3;
              int v68 = v98;
              do
              {
                uint64_t v69 = a2;
                uint64_t v70 = 0;
                uint64_t v71 = v67 - 2;
                uint64_t v94 = *(void **)v68;
                if (v67 < 2) {
                  uint64_t v71 = v67 - 1;
                }
                uint64_t v72 = v71 >> 1;
                do
                {
                  int v73 = &v68[8 * v70 + 8];
                  uint64_t v74 = (2 * v70) | 1;
                  uint64_t v75 = 2 * v70 + 2;
                  if (v75 >= v67)
                  {
                    long long v78 = *(void **)v73;
                    uint64_t v70 = (2 * v70) | 1;
                  }
                  else
                  {
                    long long v76 = *(void **)v73;
                    uint64_t v77 = *(void **)&v68[8 * v70 + 16];
                    uint64_t result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*(void **)v73, v77);
                    if (result) {
                      long long v78 = v77;
                    }
                    else {
                      long long v78 = v76;
                    }
                    if (result)
                    {
                      v73 += 8;
                      uint64_t v70 = v75;
                    }
                    else
                    {
                      uint64_t v70 = v74;
                    }
                  }
                  *(void *)int v68 = v78;
                  int v68 = v73;
                }
                while (v70 <= v72);
                a2 = v69 - 8;
                if (v73 == v69 - 8)
                {
                  *(void *)int v73 = v94;
                }
                else
                {
                  *(void *)int v73 = *(void *)a2;
                  *(void *)a2 = v94;
                  uint64_t v79 = v73 - v98 + 8;
                  if (v79 >= 9)
                  {
                    unint64_t v80 = (unint64_t)((v79 >> 3) - 2) >> 1;
                    std::string::size_type v81 = &v98[8 * v80];
                    uint64_t v82 = *(void **)v81;
                    long long v83 = *(void **)v73;
                    uint64_t result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*(void **)v81, *(void **)v73);
                    if (result)
                    {
                      do
                      {
                        int v84 = v81;
                        *(void *)int v73 = v82;
                        if (!v80) {
                          break;
                        }
                        unint64_t v80 = (v80 - 1) >> 1;
                        std::string::size_type v81 = &v98[8 * v80];
                        uint64_t v82 = *(void **)v81;
                        uint64_t result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*(void **)v81, v83);
                        int v73 = v84;
                      }
                      while ((result & 1) != 0);
                      *(void *)int v84 = v83;
                    }
                  }
                }
                BOOL v85 = v67-- <= 2;
                int v68 = v98;
              }
              while (!v85);
            }
            return result;
          }
          unint64_t v13 = (unint64_t)v12 >> 1;
          long long v14 = &v9[8 * ((unint64_t)v12 >> 1)];
          if ((unint64_t)v11 < 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((void **)v14, (void **)v9, (void **)v95);
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((void **)v9, (void **)v14, (void **)v95);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((void **)v9 + 1, (void **)v14 - 1, (void **)v92);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((void **)v9 + 2, (void **)&v9[8 * v13 + 8], (void **)v91);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((void **)v14 - 1, (void **)v14, (void **)&v9[8 * v13 + 8]);
            uint64_t v15 = *(void **)v9;
            *(void *)unint64_t v9 = *(void *)v14;
            *(void *)long long v14 = v15;
          }
          --a3;
          unint64_t v16 = *(void **)v9;
          int v17 = v9;
          if (a4) {
            break;
          }
          int v17 = v9;
          if (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*((void **)v9 - 1), *(void **)v9))
          {
            break;
          }
          uint64_t result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v16, *(void **)v95);
          if (result)
          {
            do
            {
              BOOL v31 = (void *)*((void *)v9 + 1);
              v9 += 8;
              uint64_t result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v16, v31);
            }
            while ((result & 1) == 0);
          }
          else
          {
            BOOL v32 = v9 + 8;
            do
            {
              unint64_t v9 = v32;
              if (v32 >= a2) {
                break;
              }
              v32 += 8;
              uint64_t result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v16, *(void **)v9);
            }
            while (!result);
          }
          int v33 = a2;
          if (v9 < a2)
          {
            int v33 = a2;
            do
            {
              BOOL v34 = (void *)*((void *)v33 - 1);
              v33 -= 8;
              uint64_t result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v16, v34);
            }
            while ((result & 1) != 0);
          }
          int v35 = a2;
          if (v9 < v33)
          {
            unint64_t v36 = *(void **)v9;
            uint64_t v37 = *(void **)v33;
            do
            {
              *(void *)unint64_t v9 = v37;
              *(void *)int v33 = v36;
              do
              {
                uint64_t v38 = (void *)*((void *)v9 + 1);
                v9 += 8;
                unint64_t v36 = v38;
              }
              while (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v16, v38));
              do
              {
                int v39 = (void *)*((void *)v33 - 1);
                v33 -= 8;
                uint64_t v37 = v39;
                uint64_t result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v16, v39);
              }
              while ((result & 1) != 0);
            }
            while (v9 < v33);
          }
          int v40 = v9 - 8;
          BOOL v4 = (unint64_t)(v9 - 8) >= v10;
          BOOL v5 = v9 - 8 == (char *)v10;
          a2 = v35;
          if (v9 - 8 != (char *)v10) {
            *(void *)unint64_t v10 = *(void *)v40;
          }
          a4 = 0;
          *(void *)int v40 = v16;
        }
        do
        {
          long long v18 = v17;
          uint64_t v20 = (void *)*((void *)v17 + 1);
          v17 += 8;
          int v19 = v20;
        }
        while (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v20, v16));
        uint64_t v97 = a3;
        BOOL v21 = a2;
        if (v18 == (char *)v10)
        {
          BOOL v21 = a2;
          do
          {
            if (v17 >= v21) {
              break;
            }
            int v23 = (void *)*((void *)v21 - 1);
            v21 -= 8;
          }
          while (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v23, v16));
        }
        else
        {
          do
          {
            unint64_t v22 = (void *)*((void *)v21 - 1);
            v21 -= 8;
          }
          while (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v22, v16));
        }
        BOOL v8 = (char *)v10;
        uint64_t v24 = a2;
        if (v17 < v21)
        {
          int v25 = *(void **)v21;
          int v26 = v17;
          BOOL v27 = v21;
          do
          {
            *(void *)int v26 = v25;
            *(void *)BOOL v27 = v19;
            do
            {
              long long v18 = v26;
              uint64_t v28 = (void *)*((void *)v26 + 1);
              v26 += 8;
              int v19 = v28;
            }
            while (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v28, v16));
            do
            {
              uint64_t v29 = (void *)*((void *)v27 - 1);
              v27 -= 8;
              int v25 = v29;
            }
            while (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v29, v16));
          }
          while (v26 < v27);
        }
        if (v18 != v8) {
          *(void *)BOOL v8 = *(void *)v18;
        }
        *(void *)long long v18 = v16;
        BOOL v4 = v17 >= v21;
        a2 = v24;
        a3 = v97;
        if (v4) {
          break;
        }
LABEL_31:
        uint64_t result = std::__introsort<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Argument> const*> &,google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Argument> const**,false>(v8, v18, v97, a4 & 1);
        a4 = 0;
        unint64_t v9 = v18 + 8;
      }
      BOOL v30 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Argument> const*> &,google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Argument> const**>((void **)v8, (void **)v18);
      unint64_t v9 = v18 + 8;
      uint64_t result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Argument> const*> &,google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Argument> const**>((void **)v18 + 1, (void **)v24);
      if (result) {
        break;
      }
      if (!v30) {
        goto LABEL_31;
      }
    }
    a2 = v18;
    if (!v30) {
      continue;
    }
    return result;
  }
}

google::protobuf::Arena **google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(google::protobuf::Arena *a1, google::protobuf::Arena *a2, google::protobuf::Arena *a3)
{
  if (!a3) {
    operator new();
  }
  result[1] = 0;
  result[2] = (google::protobuf::Arena *)&google::protobuf::internal::fixed_address_empty_string;
  result[3] = 0;
  result[4] = a3;
  *uint64_t result = (google::protobuf::Arena *)&unk_1EF0DB970;
  result[6] = a1;
  result[7] = a2;
  *((_DWORD *)result + 1CoreML::Specification::MILSpec::NamedValueType::New(this, 0) = 3;
  return result;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::MapEntryWrapper::value(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::MapEntryWrapper::key(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::InternalSerializeWithCachedSizesToArray(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  uint64_t v6 = (const void **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 136))(a1);
  *a3 = 10;
  uint64_t v7 = google::protobuf::io::CodedOutputStream::WriteStringWithSizeToArray(v6, a3 + 1);
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 144))(a1);
  *uint64_t v7 = 18;
  unint64_t v9 = v7 + 1;
  unsigned int v10 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 120))(v8);
  if (v10 < 0x80)
  {
    LOBYTE(v11) = v10;
  }
  else
  {
    do
    {
      *v9++ = v10 | 0x80;
      unsigned int v11 = v10 >> 7;
      unsigned int v12 = v10 >> 14;
      v10 >>= 7;
    }
    while (v12);
  }
  unsigned char *v9 = v11;
  unint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)v8 + 128);

  return v13(v8, a2, v9 + 1);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::GetCachedSize(_DWORD *a1)
{
  int v2 = a1[10];
  if (v2)
  {
    uint64_t v6 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 136))(a1);
    int v7 = *(unsigned __int8 *)(v6 + 23);
    if ((v7 & 0x80u) != 0) {
      int v7 = *(_DWORD *)(v6 + 8);
    }
    unsigned int v3 = v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((a1[10] & 2) != 0) {
      goto LABEL_3;
    }
LABEL_7:
    unsigned int v5 = 0;
    return v5 + v3;
  }
  unsigned int v3 = 0;
  if ((v2 & 2) == 0) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v4 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 144))(a1);
  unsigned int v5 = *(_DWORD *)(v4 + 40) + ((9 * (__clz(*(_DWORD *)(v4 + 40) | 1) ^ 0x1F) + 73) >> 6) + 1;
  return v5 + v3;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::SerializeWithCachedSizes(uint64_t a1, google::protobuf::io::CodedOutputStream *a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 136))(a1);
  google::protobuf::internal::WireFormatLite::WriteString(1u, v4, a2);
  unsigned int v5 = (google::protobuf::internal::WireFormatLite *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 144))(a1);

  return google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(v5, a2, v6, v7);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::ByteSizeLong(_DWORD *a1)
{
  int v2 = a1[10];
  if (v2)
  {
    uint64_t v7 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 136))(a1);
    int v8 = *(unsigned __int8 *)(v7 + 23);
    if ((v8 & 0x80u) != 0) {
      int v8 = *(_DWORD *)(v7 + 8);
    }
    uint64_t v3 = (int)(v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6)) + 1;
    if ((a1[10] & 2) != 0) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v6 = 0;
    return v6 + v3;
  }
  uint64_t v3 = 0;
  if ((v2 & 2) == 0) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v4 = (CoreML::Specification::MILSpec::Argument *)(*(uint64_t (**)(_DWORD *))(*(void *)a1 + 144))(a1);
  uint64_t v5 = CoreML::Specification::MILSpec::Argument::ByteSizeLong(v4);
  uint64_t v6 = v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  return v6 + v3;
}

uint64_t CoreML::Specification::MILSpec::Argument::ByteSizeLong(CoreML::Specification::MILSpec::Argument *this)
{
  int v2 = *((_DWORD *)this + 6);
  if (v2)
  {
    int v3 = 0;
    uint64_t v4 = *((unsigned int *)this + 6);
    do
    {
      uint64_t v5 = CoreML::Specification::MILSpec::Argument_Binding::ByteSizeLong(*(CoreML::Specification::MILSpec::Argument_Binding **)(*((void *)this + 4) + 8 * v3 + 8));
      v4 += v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6);
      ++v3;
    }
    while (v2 != v3);
  }
  else
  {
    uint64_t v4 = 0;
  }
  *((_DWORD *)this + 1CoreML::Specification::MILSpec::NamedValueType::New(this, 0) = v4;
  return v4;
}

uint64_t CoreML::Specification::MILSpec::Argument_Binding::ByteSizeLong(CoreML::Specification::MILSpec::Argument_Binding *this)
{
  int v2 = *((_DWORD *)this + 7);
  if (v2 == 2)
  {
    uint64_t v7 = CoreML::Specification::MILSpec::Value::ByteSizeLong(*((CoreML::Specification::MILSpec::Value **)this + 2));
    uint64_t v6 = v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
  }
  else
  {
    if (v2 != 1)
    {
      uint64_t result = 0;
      goto LABEL_9;
    }
    uint64_t v3 = *((void *)this + 2);
    uint64_t v4 = *(unsigned __int8 *)(v3 + 23);
    uint64_t v5 = *(void *)(v3 + 8);
    if ((v4 & 0x80u) == 0) {
      uint64_t v5 = v4;
    }
    uint64_t v6 = v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6);
  }
  uint64_t result = v6 + 1;
LABEL_9:
  *((_DWORD *)this + 6) = result;
  return result;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::MergePartialFromCodedStream(uint64_t a1, google::protobuf::io::CodedInputStream *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v5 = *(char **)this;
        if (*(void *)this >= *((void *)this + 1))
        {
          LODWORD(TagFallback) = 0;
        }
        else
        {
          unint64_t TagFallback = *v5;
          if ((*v5 & 0x80000000) == 0)
          {
            *(void *)this = v5 + 1;
            goto LABEL_6;
          }
        }
        unint64_t TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(this, TagFallback);
LABEL_6:
        if (TagFallback != 10) {
          break;
        }
        *(_DWORD *)(a1 + 40) |= 1u;
        uint64_t v7 = *(long long **)(a1 + 16);
        if (v7 == &google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstance();
        }
        uint64_t result = google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)this, (std::string *)v7);
        if (!result) {
          return result;
        }
        int v9 = *(_DWORD *)(a1 + 40) | 1;
        *(_DWORD *)(a1 + 4CoreML::Specification::MILSpec::NamedValueType::New(this, 0) = v9;
        unsigned int v10 = *(char **)this;
        if (*(void *)this < *((void *)this + 1) && *v10 == 18)
        {
          *(void *)this = v10 + 1;
          goto LABEL_19;
        }
      }
      if (TagFallback != 18) {
        break;
      }
      int v9 = *(_DWORD *)(a1 + 40);
LABEL_19:
      *(_DWORD *)(a1 + 4CoreML::Specification::MILSpec::NamedValueType::New(this, 0) = v9 | 2;
      Aligned = *(google::protobuf::Arena ***)(a1 + 24);
      if (!Aligned)
      {
        unsigned int v12 = *(google::protobuf::Arena **)(a1 + 32);
        if (!v12) {
          operator new();
        }
        CoreML::Specification::MILSpec::Argument::Argument((CoreML::Specification::MILSpec::Argument *)Aligned);
        unint64_t v13 = google::protobuf::Arena::AllocateAligned(v12, 0, 24);
        long long *v13 = (google::protobuf::Arena *)Aligned;
        v13[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Argument>;
        long long v14 = (unint64_t *)((char *)v12 + 32);
        do
          unint64_t v15 = __ldxr(v14);
        while (__stxr((unint64_t)v13, v14));
        v13[2] = (google::protobuf::Arena *)v15;
        *(void *)(a1 + 24) = Aligned;
      }
      unint64_t v16 = *(char **)this;
      if (*(void *)this >= *((void *)this + 1) || *v16 < 0)
      {
        int VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(this);
        if (VarintSizeAsIntFallback < 0) {
          return 0;
        }
      }
      else
      {
        int VarintSizeAsIntFallback = *v16;
        *(void *)this = v16 + 1;
      }
      int v18 = google::protobuf::io::CodedInputStream::PushLimit(this, VarintSizeAsIntFallback);
      int v20 = *((_DWORD *)this + 13);
      BOOL v21 = __OFSUB__(v20--, 1);
      *((_DWORD *)this + 13) = v20;
      if (v20 < 0 != v21) {
        return 0;
      }
      int v22 = v18;
      uint64_t result = CoreML::Specification::MILSpec::Argument::MergePartialFromCodedStream((CoreML::Specification::MILSpec::Argument *)Aligned, this, v19);
      if (!result) {
        return result;
      }
      uint64_t result = google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(this, v22);
      if (!result) {
        return result;
      }
      *(_DWORD *)(a1 + 40) |= 2u;
      if (*(void *)this == *((void *)this + 1)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)this + 36) = 1;
        return result;
      }
    }
    if (!TagFallback || (TagFallback & 7) == 4) {
      return 1;
    }
    if ((google::protobuf::internal::WireFormatLite::SkipField(this, (google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
  }
    }
}

void sub_19EB2BA3C(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

CoreML::Specification::MILSpec::Argument *CoreML::Specification::MILSpec::Argument::Argument(CoreML::Specification::MILSpec::Argument *this)
{
  *(void *)this = &unk_1EF0DA530;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  if (this != (CoreML::Specification::MILSpec::Argument *)&CoreML::Specification::MILSpec::_Argument_default_instance_) {
    CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(this);
  }
  *((_DWORD *)this + 1CoreML::Specification::MILSpec::NamedValueType::New(this, 0) = 0;
  return this;
}

void sub_19EB2BAD4(_Unwind_Exception *a1)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::Argument::MergePartialFromCodedStream(CoreML::Specification::MILSpec::Argument *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  uint64_t v5 = (CoreML::Specification::MILSpec::Argument *)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      uint64_t v6 = *(char **)a2;
      if (*(void *)a2 >= *((void *)a2 + 1))
      {
        LODWORD(v7) = 0;
LABEL_7:
        unsigned int TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v7);
        unint64_t v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v8 & 0x100000000) == 0) {
          break;
        }
        goto LABEL_8;
      }
      uint64_t v7 = *v6;
      if (*v6 < 1) {
        goto LABEL_7;
      }
      *(void *)a2 = v6 + 1;
      unint64_t v8 = v7 | 0x100000000;
      if ((v8 & 0x100000000) == 0) {
        break;
      }
LABEL_8:
      if (v8 != 10 || (v8 & 0xFFFFFFF8) != 8) {
        break;
      }
      unsigned int v12 = (int *)*((void *)this + 4);
      if (!v12)
      {
        int v13 = *((_DWORD *)this + 6);
        int v14 = *((_DWORD *)this + 7);
LABEL_23:
        if (v13 <= v14)
        {
          google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend(v5, v14 - v13 + 1);
          unsigned int v12 = (int *)*((void *)this + 4);
        }
        int v14 = *v12;
        goto LABEL_26;
      }
      int v13 = *((_DWORD *)this + 6);
      int v14 = *v12;
      if (v13 < *v12)
      {
        *((_DWORD *)this + 6) = v13 + 1;
        Aligned = *(google::protobuf::Arena ***)&v12[2 * v13 + 2];
        goto LABEL_31;
      }
      if (v14 == *((_DWORD *)this + 7)) {
        goto LABEL_23;
      }
LABEL_26:
      *unsigned int v12 = v14 + 1;
      unint64_t v16 = *(google::protobuf::Arena **)v5;
      if (!*(void *)v5) {
        operator new();
      }
      CoreML::Specification::MILSpec::Argument_Binding::Argument_Binding((CoreML::Specification::MILSpec::Argument_Binding *)Aligned);
      int v17 = google::protobuf::Arena::AllocateAligned(v16, 0, 24);
      char *v17 = (google::protobuf::Arena *)Aligned;
      v17[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Argument_Binding>;
      int v18 = (unint64_t *)((char *)v16 + 32);
      do
        unint64_t v19 = __ldxr(v18);
      while (__stxr((unint64_t)v17, v18));
      v17[2] = (google::protobuf::Arena *)v19;
      uint64_t v20 = *((void *)this + 4);
      uint64_t v21 = *((int *)this + 6);
      *((_DWORD *)this + 6) = v21 + 1;
      *(void *)(v20 + 8 * v21 + 8) = Aligned;
LABEL_31:
      int v22 = *(char **)a2;
      if (*(void *)a2 >= *((void *)a2 + 1) || *v22 < 0)
      {
        int VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (VarintSizeAsIntFallback < 0) {
          return 0;
        }
      }
      else
      {
        int VarintSizeAsIntFallback = *v22;
        *(void *)a2 = v22 + 1;
      }
      int v24 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
      int v26 = *((_DWORD *)a2 + 13);
      BOOL v27 = __OFSUB__(v26--, 1);
      *((_DWORD *)a2 + 13) = v26;
      if (v26 < 0 == v27)
      {
        int v28 = v24;
        uint64_t result = CoreML::Specification::MILSpec::Argument_Binding::MergePartialFromCodedStream((CoreML::Specification::MILSpec::Argument_Binding *)Aligned, a2, v25);
        if (!result) {
          return result;
        }
        if (google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v28)) {
          continue;
        }
      }
      return 0;
    }
    if (!v8 || (v8 & 7) == 4) {
      return 1;
    }
    if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v8, a3) & 1) == 0) {
      return 0;
    }
  }
}

void sub_19EB2BD34(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::Argument_Binding::MergePartialFromCodedStream(CoreML::Specification::MILSpec::Argument_Binding *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  uint64_t v5 = (std::string **)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v6 = *(char **)a2;
        if (*(void *)a2 >= *((void *)a2 + 1))
        {
          LODWORD(v7) = 0;
LABEL_7:
          unsigned int TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v7);
          unint64_t v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
          if ((v8 & 0x100000000) == 0) {
            goto LABEL_20;
          }
          goto LABEL_8;
        }
        uint64_t v7 = *v6;
        if (*v6 < 1) {
          goto LABEL_7;
        }
        *(void *)a2 = v6 + 1;
        unint64_t v8 = v7 | 0x100000000;
        if ((v8 & 0x100000000) == 0) {
          goto LABEL_20;
        }
LABEL_8:
        if (v8 >> 3 != 2) {
          break;
        }
        if (v8 != 18) {
          goto LABEL_20;
        }
        if (*((_DWORD *)this + 7) != 2)
        {
          CoreML::Specification::MILSpec::Argument_Binding::clear_binding((uint64_t)this);
          *((_DWORD *)this + 7) = 2;
          operator new();
        }
        unsigned int v11 = *v5;
        int v18 = *(char **)a2;
        if (*(void *)a2 >= *((void *)a2 + 1) || *v18 < 0)
        {
          int VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (VarintSizeAsIntFallback < 0) {
            return 0;
          }
        }
        else
        {
          int VarintSizeAsIntFallback = *v18;
          *(void *)a2 = v18 + 1;
        }
        int v20 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
        int v22 = *((_DWORD *)a2 + 13);
        BOOL v23 = __OFSUB__(v22--, 1);
        *((_DWORD *)a2 + 13) = v22;
        if (v22 < 0 == v23)
        {
          int v24 = v20;
          uint64_t result = CoreML::Specification::MILSpec::Value::MergePartialFromCodedStream((CoreML::Specification::MILSpec::Value *)v11, a2, v21);
          if (!result) {
            return result;
          }
          if (google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v24)) {
            continue;
          }
        }
        return 0;
      }
      if (v8 >> 3 != 1 || v8 != 10) {
        break;
      }
      if (*((_DWORD *)this + 7) != 1)
      {
        CoreML::Specification::MILSpec::Argument_Binding::clear_binding((uint64_t)this);
        *((_DWORD *)this + 7) = 1;
        *((void *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
LABEL_27:
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
      }
      if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
        goto LABEL_27;
      }
      uint64_t result = google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)a2, *v5);
      if (!result) {
        return result;
      }
      int v14 = *((_DWORD *)this + 7);
      unint64_t v15 = (std::string *)&google::protobuf::internal::fixed_address_empty_string;
      if (v14 == 1) {
        unint64_t v15 = *v5;
      }
      if (SHIBYTE(v15->__r_.__value_.__r.__words[2]) < 0) {
        unint64_t v15 = (std::string *)v15->__r_.__value_.__r.__words[0];
      }
      unint64_t v16 = (std::string *)&google::protobuf::internal::fixed_address_empty_string;
      if (v14 == 1) {
        unint64_t v16 = *v5;
      }
      if (SHIBYTE(v16->__r_.__value_.__r.__words[2]) < 0) {
        std::string::size_type size = v16->__r_.__value_.__l.__size_;
      }
      else {
        LODWORD(size) = HIBYTE(v16->__r_.__value_.__r.__words[2]);
      }
      if (!google::protobuf::internal::WireFormatLite::VerifyUtf8String((unsigned int *)v15, size, 0, (uint64_t)"CoreML.Specification.MILSpec.Argument.Binding.name"))return 0; {
    }
      }
LABEL_20:
    if (!v8 || (v8 & 7) == 4) {
      return 1;
    }
    if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v8, a3) & 1) == 0) {
      return 0;
    }
  }
}

void sub_19EB2BFB4(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C40000F1E19);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::Argument_Binding::clear_binding(uint64_t this)
{
  uint64_t v1 = this;
  int v2 = *(_DWORD *)(this + 28);
  if (v2 == 2)
  {
    this = *(void *)(this + 16);
    if (this) {
      this = (*(uint64_t (**)(uint64_t))(*(void *)this + 8))(this);
    }
  }
  else if (v2 == 1)
  {
    uint64_t v3 = *(void *)(this + 16);
    if ((long long *)v3 != &google::protobuf::internal::fixed_address_empty_string && v3 != 0)
    {
      if (*(char *)(v3 + 23) < 0) {
        operator delete(*(void **)v3);
      }
      this = MEMORY[0x19F3C1920](v3, 0x1012C40EC159624);
    }
  }
  *(_DWORD *)(v1 + 28) = 0;
  return this;
}

CoreML::Specification::MILSpec::Argument_Binding *CoreML::Specification::MILSpec::Argument_Binding::Argument_Binding(CoreML::Specification::MILSpec::Argument_Binding *this)
{
  *(void *)this = &unk_1EF0D9BB0;
  *((void *)this + 1) = 0;
  if (this != (CoreML::Specification::MILSpec::Argument_Binding *)&CoreML::Specification::MILSpec::_Argument_Binding_default_instance_) {
    CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(this);
  }
  *((void *)this + 3) = 0;
  return this;
}

void sub_19EB2C0E0(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Argument_Binding>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Argument>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

std::string *google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::CheckTypeAndMergeFrom(std::string *result, _DWORD *a2)
{
  int v2 = a2[10];
  if (v2)
  {
    uint64_t v4 = result;
    if (v2)
    {
      uint64_t v5 = (std::string **)&result->__r_.__value_.__r.__words[2];
      if ((long long *)result->__r_.__value_.__r.__words[2] == &google::protobuf::internal::fixed_address_empty_string) {
        google::protobuf::internal::ArenaStringPtr::CreateInstance();
      }
      uint64_t v6 = (const std::string *)(*(uint64_t (**)(_DWORD *))(*(void *)a2 + 136))(a2);
      if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
        google::protobuf::internal::ArenaStringPtr::CreateInstance();
      }
      uint64_t result = std::string::operator=(*v5, v6);
      LODWORD(v4[1].__r_.__value_.__r.__words[2]) |= 1u;
      int v2 = a2[10];
    }
    if ((v2 & 2) != 0)
    {
      if (!v4[1].__r_.__value_.__r.__words[0])
      {
        std::string::size_type size = (google::protobuf::Arena *)v4[1].__r_.__value_.__l.__size_;
        if (!size) {
          operator new();
        }
        CoreML::Specification::MILSpec::Argument::Argument((CoreML::Specification::MILSpec::Argument *)Aligned);
        int v9 = google::protobuf::Arena::AllocateAligned(size, 0, 24);
        unsigned char *v9 = (google::protobuf::Arena *)Aligned;
        v9[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Argument>;
        unsigned int v10 = (unint64_t *)((char *)size + 32);
        do
          unint64_t v11 = __ldxr(v10);
        while (__stxr((unint64_t)v9, v10));
        v9[2] = (google::protobuf::Arena *)v11;
        v4[1].__r_.__value_.__r.__words[0] = (std::string::size_type)Aligned;
      }
      unsigned int v12 = (const CoreML::Specification::MILSpec::Argument *)(*(uint64_t (**)(_DWORD *))(*(void *)a2 + 144))(a2);
      uint64_t result = (std::string *)CoreML::Specification::MILSpec::Argument::MergeFrom((unint64_t *)v4[1].__r_.__value_.__l.__data_, v12);
      LODWORD(v4[1].__r_.__value_.__r.__words[2]) |= 2u;
    }
  }
  return result;
}

void sub_19EB2C2CC(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

unint64_t *CoreML::Specification::MILSpec::Argument::MergeFrom(unint64_t *this, const CoreML::Specification::MILSpec::Argument *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    this = (unint64_t *)google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  int v5 = *((_DWORD *)a2 + 6);
  if (v5)
  {
    uint64_t v28 = *((void *)a2 + 4);
    this = (unint64_t *)google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)(v3 + 2), v5);
    uint64_t v6 = this;
    uint64_t v7 = *(int *)v3[4];
    uint64_t v8 = *((int *)v3 + 6);
    int v9 = v7 - v8;
    if ((int)v7 - (int)v8 >= v5) {
      uint64_t v10 = v5;
    }
    else {
      uint64_t v10 = v9;
    }
    if ((int)v10 >= 1)
    {
      unint64_t v11 = (const CoreML::Specification::MILSpec::Argument_Binding **)(v28 + 8);
      unsigned int v12 = (std::string **)this;
      do
      {
        int v14 = *v11++;
        int v13 = v14;
        unint64_t v15 = *v12++;
        this = (unint64_t *)google::protobuf::internal::GenericTypeHandler<CoreML::Specification::MILSpec::Argument_Binding>::Merge(v13, v15);
        --v10;
      }
      while (v10);
    }
    if (v9 < v5)
    {
      unint64_t v16 = (google::protobuf::Arena *)v3[2];
      int v17 = v8 + v5 - v7;
      uint64_t v18 = 8 * v7 - 8 * v8;
      unint64_t v19 = (google::protobuf::Arena ***)((char *)v6 + v18);
      int v20 = (const CoreML::Specification::MILSpec::Argument_Binding **)(v18 + v28 + 8);
      do
      {
        unsigned int v21 = *v20;
        if (!v16) {
          operator new();
        }
        CoreML::Specification::MILSpec::Argument_Binding::Argument_Binding((CoreML::Specification::MILSpec::Argument_Binding *)Aligned);
        BOOL v23 = google::protobuf::Arena::AllocateAligned(v16, 0, 24);
        *BOOL v23 = (google::protobuf::Arena *)Aligned;
        v23[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Argument_Binding>;
        int v24 = (unint64_t *)((char *)v16 + 32);
        do
          unint64_t v25 = __ldxr(v24);
        while (__stxr((unint64_t)v23, v24));
        v23[2] = (google::protobuf::Arena *)v25;
        this = (unint64_t *)google::protobuf::internal::GenericTypeHandler<CoreML::Specification::MILSpec::Argument_Binding>::Merge(v21, (std::string *)Aligned);
        *v19++ = Aligned;
        ++v20;
        --v17;
      }
      while (v17);
    }
    int v26 = *((_DWORD *)v3 + 6) + v5;
    *((_DWORD *)v3 + 6) = v26;
    BOOL v27 = (int *)v3[4];
    if (*v27 < v26) {
      *BOOL v27 = v26;
    }
  }
  return this;
}

void sub_19EB2C49C(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

std::string *google::protobuf::internal::GenericTypeHandler<CoreML::Specification::MILSpec::Argument_Binding>::Merge(const CoreML::Specification::MILSpec::Argument_Binding *a1, std::string *a2)
{
  return CoreML::Specification::MILSpec::Argument_Binding::MergeFrom(a2, a1);
}

std::string *CoreML::Specification::MILSpec::Argument_Binding::MergeFrom(std::string *this, const CoreML::Specification::MILSpec::Argument_Binding *a2)
{
  uint64_t v3 = (uint64_t)this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    this = google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  int v5 = *((_DWORD *)a2 + 7);
  if (v5 != 2)
  {
    if (v5 != 1) {
      return this;
    }
    uint64_t v6 = (const std::string *)*((void *)a2 + 2);
    if (*(_DWORD *)(v3 + 28) == 1)
    {
      uint64_t v7 = *(std::string **)(v3 + 16);
      if (v7 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      {
        return std::string::operator=(v7, v6);
      }
    }
    else
    {
      CoreML::Specification::MILSpec::Argument_Binding::clear_binding(v3);
      *(_DWORD *)(v3 + 28) = 1;
      *(void *)(v3 + 16) = &google::protobuf::internal::fixed_address_empty_string;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
  }
  if (*(_DWORD *)(v3 + 28) != 2)
  {
    CoreML::Specification::MILSpec::Argument_Binding::clear_binding(v3);
    *(_DWORD *)(v3 + 28) = 2;
    operator new();
  }
  uint64_t v8 = (const CoreML::Specification::MILSpec::Value *)*((void *)a2 + 2);
  int v9 = *(std::string **)(v3 + 16);

  return CoreML::Specification::MILSpec::Value::MergeFrom(v9, v8);
}

void sub_19EB2C63C(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C40000F1E19);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::IsInitialized()
{
  return 1;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Clear(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 16);
  if ((long long *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(unsigned char **)uint64_t v2 = 0;
      *(void *)(v2 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v2 = 0;
      *(unsigned char *)(v2 + 23) = 0;
    }
  }
  uint64_t v3 = *(void *)(result + 24);
  if (v3)
  {
    uint64_t v4 = *(unsigned int *)(v3 + 24);
    if ((int)v4 >= 1)
    {
      int v5 = (uint64_t *)(*(void *)(v3 + 32) + 8);
      do
      {
        uint64_t v6 = *v5++;
        uint64_t result = CoreML::Specification::MILSpec::Argument_Binding::clear_binding(v6);
        --v4;
      }
      while (v4);
      *(_DWORD *)(v3 + 24) = 0;
    }
  }
  *(_DWORD *)(v1 + 40) &= 0xFFFFFFFC;
  return result;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::GetArena(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

google::protobuf::Arena **google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::New(uint64_t a1, google::protobuf::Arena *a2)
{
  if (!a2) {
    operator new();
  }
  result[1] = 0;
  result[2] = (google::protobuf::Arena *)&google::protobuf::internal::fixed_address_empty_string;
  result[3] = 0;
  result[4] = a2;
  *((_DWORD *)result + 1CoreML::Specification::MILSpec::NamedValueType::New(this, 0) = 0;
  int v5 = *(google::protobuf::Arena **)(a1 + 8);
  *uint64_t result = (google::protobuf::Arena *)&unk_1EF0DC540;
  result[1] = v5;
  return result;
}

void google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::New()
{
}

void *google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, (char *)&unk_19EC86ACE);
}

void google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::MapEntryWrapper::~MapEntryWrapper(void *a1)
{
  google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryImpl(a1);

  JUMPOUT(0x19F3C1920);
}

void *google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryImpl(void *a1)
{
  *a1 = &unk_1EF0DBA18;
  if ((void *)a1[1] != a1 && !a1[4])
  {
    google::protobuf::internal::MapTypeHandler<(google::protobuf::internal::WireFormatLite::FieldType)9,std::string>::DeleteNoArena(a1[2]);
    uint64_t v2 = a1[3];
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }
  return a1;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::value(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2)
  {
    int v5 = 3;
    uint64_t v6 = "/Library/Caches/com.apple.xbs/Sources/CoreML/coremltools-internal/deps/protobuf/src/google/protobuf/map_entry_lite.h";
    int v7 = 162;
    memset(&__p, 0, sizeof(__p));
    std::string::append(&__p, "CHECK failed: default_instance_ != NULL: ");
    google::protobuf::internal::LogMessage::Finish((google::protobuf::internal::LogMessage *)&v5);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    uint64_t v2 = *(void *)(a1 + 8);
  }
  uint64_t v3 = *(void *)(v2 + 24);
  if (*(void *)(a1 + 24)) {
    return *(void *)(a1 + 24);
  }
  else {
    return v3;
  }
}

void sub_19EB2C964(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::key(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryImpl(void *a1)
{
  google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryImpl(a1);

  JUMPOUT(0x19F3C1920);
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Argument> const*> &,google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Argument> const**>(void **a1, void **a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = *(a2 - 1);
      int v7 = *a1;
      if (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v6, *a1))
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      uint64_t v8 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(a1, a1 + 1, a1 + 2);
      int v9 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v10 = 0;
      uint64_t v11 = 24;
      break;
  }
  while (1)
  {
    unsigned int v12 = *v9;
    int v13 = *v8;
    if (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*v9, v13))
    {
      uint64_t v14 = v11;
      while (1)
      {
        *(void **)((char *)a1 + v14) = v13;
        uint64_t v15 = v14 - 8;
        if (v14 == 8) {
          break;
        }
        int v13 = *(void **)((char *)a1 + v14 - 16);
        BOOL v16 = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v12, v13);
        uint64_t v14 = v15;
        if (!v16)
        {
          int v17 = (void **)((char *)a1 + v15);
          goto LABEL_12;
        }
      }
      int v17 = a1;
LABEL_12:
      void *v17 = v12;
      if (++v10 == 8) {
        return v9 + 1 == a2;
      }
    }
    uint64_t v8 = v9;
    v11 += 8;
    if (++v9 == a2) {
      return 1;
    }
  }
}

uint64_t CoreML::Specification::MILSpec::Operation::ByteSizeLong(CoreML::Specification::MILSpec::Operation *this)
{
  uint64_t v2 = (void *)*((void *)this + 5);
  uint64_t v3 = *(unsigned int *)v2;
  google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::begin(v25, v2);
  uint64_t v4 = 0;
  while (v25[0])
  {
    int v5 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(*((google::protobuf::Arena **)v25[0] + 3), (google::protobuf::Arena *)(*((void *)v25[0] + 3) + 24), *((google::protobuf::Arena **)this + 2));
    if (v4 != v5)
    {
      if (v4) {
        (*((void (**)(google::protobuf::Arena **))*v4 + 1))(v4);
      }
      uint64_t v4 = v5;
    }
    uint64_t v6 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::ByteSizeLong(v4);
    v3 += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6);
    google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::KeyValuePair const>::operator++(v25);
  }
  if (v4) {
    (*((void (**)(google::protobuf::Arena **))*v4 + 1))(v4);
  }
  uint64_t v7 = *((unsigned int *)this + 14);
  uint64_t v8 = v3 + v7;
  if (v7)
  {
    int v9 = 0;
    do
    {
      uint64_t v10 = CoreML::Specification::MILSpec::NamedValueType::ByteSizeLong(*(CoreML::Specification::MILSpec::NamedValueType **)(*((void *)this + 8) + 8 * v9 + 8));
      v8 += v10 + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6);
      ++v9;
    }
    while (v7 != v9);
  }
  uint64_t v11 = *((unsigned int *)this + 20);
  uint64_t v12 = v8 + v11;
  if (v11)
  {
    int v13 = 0;
    do
    {
      uint64_t v14 = CoreML::Specification::MILSpec::Block::ByteSizeLong(*(CoreML::Specification::MILSpec::Block **)(*((void *)this + 11) + 8 * v13 + 8));
      v12 += v14 + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6);
      ++v13;
    }
    while (v11 != v13);
  }
  uint64_t v15 = (void *)*((void *)this + 15);
  uint64_t v16 = *(unsigned int *)v15;
  google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::begin(v25, v15);
  int v17 = 0;
  uint64_t v18 = v16 + v12;
  while (v25[0])
  {
    unint64_t v19 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(*((google::protobuf::Arena **)v25[0] + 3), (google::protobuf::Arena *)(*((void *)v25[0] + 3) + 24), *((google::protobuf::Arena **)this + 12));
    if (v17 != v19)
    {
      if (v17) {
        (*((void (**)(google::protobuf::Arena **))*v17 + 1))(v17);
      }
      int v17 = v19;
    }
    uint64_t v20 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::ByteSizeLong(v17);
    v18 += v20 + ((9 * (__clz(v20 | 1) ^ 0x1F) + 73) >> 6);
    google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::KeyValuePair const>::operator++(v25);
  }
  if (v17) {
    (*((void (**)(google::protobuf::Arena **))*v17 + 1))(v17);
  }
  uint64_t v21 = *((void *)this + 16);
  uint64_t v22 = *(unsigned __int8 *)(v21 + 23);
  if (*(char *)(v21 + 23) < 0)
  {
    if (!*(void *)(v21 + 8)) {
      goto LABEL_30;
    }
  }
  else if (!*(unsigned char *)(v21 + 23))
  {
    goto LABEL_30;
  }
  uint64_t v23 = *(void *)(v21 + 8);
  if ((v22 & 0x80u) == 0) {
    uint64_t v23 = v22;
  }
  v18 += v23 + ((9 * (__clz(v23 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_30:
  *((_DWORD *)this + 34) = v18;
  return v18;
}

void sub_19EB2CE30(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CoreML::Specification::MILSpec::Block::ByteSizeLong(CoreML::Specification::MILSpec::Block *this)
{
  int v2 = *((_DWORD *)this + 6);
  if (v2)
  {
    int v3 = 0;
    uint64_t v4 = *((unsigned int *)this + 6);
    do
    {
      uint64_t v5 = CoreML::Specification::MILSpec::NamedValueType::ByteSizeLong(*(CoreML::Specification::MILSpec::NamedValueType **)(*((void *)this + 4) + 8 * v3 + 8));
      v4 += v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6);
      ++v3;
    }
    while (v2 != v3);
  }
  else
  {
    uint64_t v4 = 0;
  }
  uint64_t v6 = *((unsigned int *)this + 12);
  uint64_t v7 = v4 + v6;
  if ((int)v6 >= 1)
  {
    uint64_t v8 = (uint64_t *)(*((void *)this + 7) + 8);
    do
    {
      uint64_t v9 = *v8++;
      uint64_t v10 = *(unsigned __int8 *)(v9 + 23);
      uint64_t v11 = *(void *)(v9 + 8);
      if ((v10 & 0x80u) == 0) {
        uint64_t v11 = v10;
      }
      v7 += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6);
      --v6;
    }
    while (v6);
  }
  uint64_t v12 = *((unsigned int *)this + 18);
  uint64_t v13 = v7 + v12;
  if (v12)
  {
    int v14 = 0;
    do
    {
      uint64_t v15 = CoreML::Specification::MILSpec::Operation::ByteSizeLong(*(CoreML::Specification::MILSpec::Operation **)(*((void *)this + 10) + 8 * v14 + 8));
      v13 += v15 + ((9 * (__clz(v15 | 1) ^ 0x1F) + 73) >> 6);
      ++v14;
    }
    while (v12 != v14);
  }
  uint64_t v16 = (void *)*((void *)this + 14);
  uint64_t v17 = *(unsigned int *)v16;
  google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::begin(v23, v16);
  uint64_t v18 = 0;
  uint64_t v19 = v17 + v13;
  while (v23[0])
  {
    uint64_t v20 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(*((google::protobuf::Arena **)v23[0] + 3), (google::protobuf::Arena *)(*((void *)v23[0] + 3) + 24), *((google::protobuf::Arena **)this + 11));
    if (v18 != v20)
    {
      if (v18) {
        (*((void (**)(google::protobuf::Arena **))*v18 + 1))(v18);
      }
      uint64_t v18 = v20;
    }
    uint64_t v21 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::ByteSizeLong(v18);
    v19 += v21 + ((9 * (__clz(v21 | 1) ^ 0x1F) + 73) >> 6);
    google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::KeyValuePair const>::operator++(v23);
  }
  if (v18) {
    (*((void (**)(google::protobuf::Arena **))*v18 + 1))(v18);
  }
  *((_DWORD *)this + 3CoreML::Specification::MILSpec::NamedValueType::New(this, 0) = v19;
  return v19;
}

void sub_19EB2D068(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CoreML::Specification::MILSpec::Operation::MergePartialFromCodedStream(CoreML::Specification::MILSpec::Operation *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  uint64_t v72 = (void *)((char *)this + 104);
  int v73 = (google::protobuf::Arena **)((char *)this + 96);
  uint64_t v71 = (CoreML::Specification::MILSpec::Operation *)((char *)this + 72);
  uint64_t v5 = (CoreML::Specification::MILSpec::Operation *)((char *)this + 48);
  uint64_t v6 = (google::protobuf::Arena **)((char *)this + 16);
  uint64_t v7 = (void *)((char *)this + 24);
  uint64_t v8 = (std::string **)((char *)this + 128);
  while (1)
  {
    uint64_t v9 = *(char **)a2;
    if (*(void *)a2 >= *((void *)a2 + 1)) {
      break;
    }
    uint64_t v10 = *v9;
    if (*v9 < 1) {
      goto LABEL_7;
    }
    *(void *)a2 = v9 + 1;
    unint64_t v11 = v10 | 0x100000000;
    if ((v11 & 0x100000000) != 0) {
      goto LABEL_8;
    }
LABEL_31:
    if (v11) {
      BOOL v26 = (v11 & 7) == 4;
    }
    else {
      BOOL v26 = 1;
    }
    if (v26) {
      return 1;
    }
    if (!google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v11, a3))goto LABEL_130; {
LABEL_36:
    }
    int v27 = 0;
LABEL_37:
    if (v27) {
      goto LABEL_130;
    }
  }
  LODWORD(v1CoreML::Specification::MILSpec::NamedValueType::New(this, 0) = 0;
LABEL_7:
  unsigned int TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v10);
  unint64_t v11 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
  if ((v11 & 0x100000000) == 0) {
    goto LABEL_31;
  }
LABEL_8:
  switch(v11 >> 3)
  {
    case 1u:
      if (v11 != 10) {
        goto LABEL_31;
      }
      if (*v8 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
      }
      if (!google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)a2, *v8)) {
        goto LABEL_130;
      }
      uint64_t v13 = (unsigned int *)*v8;
      if (SHIBYTE((*v8)->__r_.__value_.__r.__words[2]) < 0)
      {
        uint64_t v13 = *(unsigned int **)v13;
        std::string::size_type size = (*v8)->__r_.__value_.__l.__size_;
      }
      else
      {
        LODWORD(size) = HIBYTE((*v8)->__r_.__value_.__r.__words[2]);
      }
      if (!google::protobuf::internal::WireFormatLite::VerifyUtf8String(v13, size, 0, (uint64_t)"CoreML.Specification.MILSpec.Operation.type"))goto LABEL_130; {
      goto LABEL_36;
      }
    case 2u:
      if (v11 != 18) {
        goto LABEL_31;
      }
      uint64_t v74 = v6;
      uint64_t v75 = v7;
      memset(&__p, 0, sizeof(__p));
      long long v78 = 0;
      int v24 = *(char **)a2;
      if (*(void *)a2 >= *((void *)a2 + 1) || *v24 < 0)
      {
        int VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (VarintSizeAsIntFallback < 0) {
          goto LABEL_126;
        }
      }
      else
      {
        int VarintSizeAsIntFallback = *v24;
        *(void *)a2 = v24 + 1;
      }
      int v41 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
      int v42 = *((_DWORD *)a2 + 13);
      BOOL v30 = __OFSUB__(v42--, 1);
      *((_DWORD *)a2 + 13) = v42;
      if (v42 < 0 != v30) {
        goto LABEL_126;
      }
      int v43 = v41;
      int v44 = *(char **)a2;
      if (*(void *)a2 < *((void *)a2 + 1) && *v44 == 10)
      {
        *(void *)a2 = v44 + 1;
        if (!google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)a2, &__p)) {
          goto LABEL_126;
        }
        if ((int)(*((_DWORD *)a2 + 2) - *(void *)a2) >= 1 && **(unsigned char **)a2 == 18)
        {
          uint64_t v45 = *(void *)v75[2];
          uint64_t v77 = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>::operator[]((uint64_t)v75, (uint64_t)&__p);
          if (v45 != *(void *)v75[2])
          {
            google::protobuf::io::CodedInputStream::Skip(a2, 1u);
            uint64_t v46 = (CoreML::Specification::MILSpec::Argument *)v77;
            unsigned int v47 = *(char **)a2;
            if (*(void *)a2 >= *((void *)a2 + 1) || *v47 < 0)
            {
              int v48 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
              if (v48 < 0) {
                goto LABEL_125;
              }
            }
            else
            {
              int v48 = *v47;
              *(void *)a2 = v47 + 1;
            }
            int v64 = google::protobuf::io::CodedInputStream::PushLimit(a2, v48);
            int v66 = *((_DWORD *)a2 + 13);
            BOOL v30 = __OFSUB__(v66--, 1);
            *((_DWORD *)a2 + 13) = v66;
            if (v66 < 0 != v30
              || (int v67 = v64,
                  !CoreML::Specification::MILSpec::Argument::MergePartialFromCodedStream(v46, a2, v65))
              || !google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v67))
            {
LABEL_125:
              google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>::erase(v75, (unsigned __int8 *)&__p);
              goto LABEL_126;
            }
            if (*(void *)a2 == *((void *)a2 + 1)
              && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
            {
              *((_DWORD *)a2 + 8) = 0;
              *((unsigned char *)a2 + 36) = 1;
              goto LABEL_108;
            }
            int BeyondKeyValuePair = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>>::ReadBeyondKeyValuePair((uint64_t)&v74, (uint64_t)a2);
            goto LABEL_107;
          }
        }
      }
      else
      {
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        memset(&__p, 0, sizeof(__p));
      }
      uint64_t v49 = google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::NewEntry(*v74);
      if (v78 != v49)
      {
        if (v78) {
          (*((void (**)(void))*v78 + 1))();
        }
        long long v78 = v49;
      }
      uint64_t v50 = (long long *)v49[2];
      *((_DWORD *)v49 + 10) |= 1u;
      if (v50 == &google::protobuf::internal::fixed_address_empty_string) {
        google::protobuf::internal::ArenaStringPtr::CreateInstance();
      }
      std::string::operator=((std::string *)v50, &__p);
      int BeyondKeyValuePair = (*((uint64_t (**)(google::protobuf::Arena **, google::protobuf::io::CodedInputStream *))*v78
                            + 11))(v78, a2);
      if (BeyondKeyValuePair) {
        google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>>::UseKeyAndValueFromEntry((uint64_t)&v74);
      }
      if ((*((uint64_t (**)(google::protobuf::Arena **))*v78 + 5))(v78))
      {
        long long v78 = 0;
        if ((BeyondKeyValuePair & 1) == 0)
        {
          BOOL v52 = 0;
          int v27 = 6;
          goto LABEL_121;
        }
        goto LABEL_108;
      }
LABEL_107:
      if (!BeyondKeyValuePair) {
        goto LABEL_126;
      }
LABEL_108:
      if (!google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v43)) {
        goto LABEL_126;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = (unsigned int *)&__p;
      }
      else {
        p_p = (unsigned int *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v69 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        int v69 = __p.__r_.__value_.__r.__words[1];
      }
      BOOL v34 = google::protobuf::internal::WireFormatLite::VerifyUtf8String(p_p, v69, 0, (uint64_t)"CoreML.Specification.MILSpec.Operation.InputsEntry.key");
LABEL_116:
      BOOL v52 = v34;
      if (v34) {
        int v27 = 0;
      }
      else {
        int v27 = 6;
      }
LABEL_119:
      if (v78) {
        (*((void (**)(google::protobuf::Arena **))*v78 + 1))(v78);
      }
LABEL_121:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (!v52) {
        goto LABEL_37;
      }
      goto LABEL_36;
    case 3u:
      if (v11 != 26) {
        goto LABEL_31;
      }
      uint64_t v17 = google::protobuf::internal::RepeatedPtrFieldBase::Add<google::protobuf::RepeatedPtrField<CoreML::Specification::MILSpec::NamedValueType>::TypeHandler>(v5);
      uint64_t v18 = *(char **)a2;
      if (*(void *)a2 >= *((void *)a2 + 1) || *v18 < 0)
      {
        int v19 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v19 < 0) {
          goto LABEL_130;
        }
      }
      else
      {
        int v19 = *v18;
        *(void *)a2 = v18 + 1;
      }
      int v35 = google::protobuf::io::CodedInputStream::PushLimit(a2, v19);
      int v37 = *((_DWORD *)a2 + 13);
      BOOL v30 = __OFSUB__(v37--, 1);
      *((_DWORD *)a2 + 13) = v37;
      if (v37 < 0 != v30) {
        goto LABEL_130;
      }
      int v38 = v35;
      if (!CoreML::Specification::MILSpec::NamedValueType::MergePartialFromCodedStream((CoreML::Specification::MILSpec::NamedValueType *)v17, a2, v36))goto LABEL_130; {
      int v39 = a2;
      }
      int v40 = v38;
      goto LABEL_99;
    case 4u:
      if (v11 != 34) {
        goto LABEL_31;
      }
      uint64_t v20 = (int *)*((void *)this + 11);
      if (!v20)
      {
        int v21 = *((_DWORD *)this + 20);
        int v22 = *((_DWORD *)this + 21);
LABEL_84:
        if (v21 <= v22)
        {
          google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend(v71, v22 - v21 + 1);
          uint64_t v20 = (int *)*((void *)this + 11);
        }
        int v22 = *v20;
        goto LABEL_87;
      }
      int v21 = *((_DWORD *)this + 20);
      int v22 = *v20;
      if (v21 < *v20)
      {
        *((_DWORD *)this + 2CoreML::Specification::MILSpec::NamedValueType::New(this, 0) = v21 + 1;
        Aligned = *(google::protobuf::Arena ***)&v20[2 * v21 + 2];
        goto LABEL_92;
      }
      if (v22 == *((_DWORD *)this + 21)) {
        goto LABEL_84;
      }
LABEL_87:
      *uint64_t v20 = v22 + 1;
      int64_t v53 = *(google::protobuf::Arena **)v71;
      if (!*(void *)v71) {
        operator new();
      }
      CoreML::Specification::MILSpec::Block::Block((CoreML::Specification::MILSpec::Block *)Aligned);
      int64_t v54 = google::protobuf::Arena::AllocateAligned(v53, 0, 24);
      *int64_t v54 = (google::protobuf::Arena *)Aligned;
      v54[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Block>;
      uint64_t v55 = (unint64_t *)((char *)v53 + 32);
      do
        unint64_t v56 = __ldxr(v55);
      while (__stxr((unint64_t)v54, v55));
      v54[2] = (google::protobuf::Arena *)v56;
      uint64_t v57 = *((void *)this + 11);
      uint64_t v58 = *((int *)this + 20);
      *((_DWORD *)this + 2CoreML::Specification::MILSpec::NamedValueType::New(this, 0) = v58 + 1;
      *(void *)(v57 + 8 * v58 + 8) = Aligned;
LABEL_92:
      BOOL v59 = *(char **)a2;
      if (*(void *)a2 >= *((void *)a2 + 1) || *v59 < 0)
      {
        int v60 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v60 < 0) {
          goto LABEL_130;
        }
      }
      else
      {
        int v60 = *v59;
        *(void *)a2 = v59 + 1;
      }
      int v61 = google::protobuf::io::CodedInputStream::PushLimit(a2, v60);
      int v62 = *((_DWORD *)a2 + 13);
      BOOL v30 = __OFSUB__(v62--, 1);
      *((_DWORD *)a2 + 13) = v62;
      if (v62 < 0 == v30)
      {
        int v63 = v61;
        if (CoreML::Specification::MILSpec::Block::MergePartialFromCodedStream((CoreML::Specification::MILSpec::Block *)Aligned, a2))
        {
          int v39 = a2;
          int v40 = v63;
LABEL_99:
          if (google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(v39, v40)) {
            goto LABEL_36;
          }
        }
      }
LABEL_130:
      uint64_t result = 0;
      break;
    case 5u:
      if (v11 != 42) {
        goto LABEL_31;
      }
      uint64_t v74 = v73;
      uint64_t v75 = v72;
      memset(&__p, 0, sizeof(__p));
      long long v78 = 0;
      uint64_t v15 = *(char **)a2;
      if (*(void *)a2 >= *((void *)a2 + 1) || *v15 < 0)
      {
        int v16 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v16 < 0) {
          goto LABEL_126;
        }
      }
      else
      {
        int v16 = *v15;
        *(void *)a2 = v15 + 1;
      }
      int v28 = google::protobuf::io::CodedInputStream::PushLimit(a2, v16);
      int v29 = *((_DWORD *)a2 + 13);
      BOOL v30 = __OFSUB__(v29--, 1);
      *((_DWORD *)a2 + 13) = v29;
      if (v29 < 0 != v30
        || (int v31 = v28,
            !google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>>::MergePartialFromCodedStream((uint64_t)&v74, (uint64_t)a2))|| !google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v31))
      {
LABEL_126:
        BOOL v52 = 0;
        int v27 = 6;
        goto LABEL_119;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        BOOL v32 = (unsigned int *)&__p;
      }
      else {
        BOOL v32 = (unsigned int *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v33 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        int v33 = __p.__r_.__value_.__r.__words[1];
      }
      BOOL v34 = google::protobuf::internal::WireFormatLite::VerifyUtf8String(v32, v33, 0, (uint64_t)"CoreML.Specification.MILSpec.Operation.AttributesEntry.key");
      goto LABEL_116;
    default:
      goto LABEL_31;
  }
  return result;
}

void sub_19EB2D88C(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C4058FDD882);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::internal::RepeatedPtrFieldBase::Add<google::protobuf::RepeatedPtrField<CoreML::Specification::MILSpec::NamedValueType>::TypeHandler>(google::protobuf::internal::RepeatedPtrFieldBase *this)
{
  int v2 = (int *)*((void *)this + 2);
  if (!v2)
  {
    int v3 = *((_DWORD *)this + 2);
    int v4 = *((_DWORD *)this + 3);
LABEL_6:
    if (v3 <= v4)
    {
      google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend(this, v4 - v3 + 1);
      int v2 = (int *)*((void *)this + 2);
    }
    int v4 = *v2;
    goto LABEL_9;
  }
  int v3 = *((_DWORD *)this + 2);
  int v4 = *v2;
  if (v3 < *v2)
  {
    *((_DWORD *)this + 2) = v3 + 1;
    return *(google::protobuf::Arena ***)&v2[2 * v3 + 2];
  }
  if (v4 == *((_DWORD *)this + 3)) {
    goto LABEL_6;
  }
LABEL_9:
  *int v2 = v4 + 1;
  uint64_t v6 = *(google::protobuf::Arena **)this;
  if (!*(void *)this) {
    operator new();
  }
  CoreML::Specification::MILSpec::NamedValueType::NamedValueType((CoreML::Specification::MILSpec::NamedValueType *)Aligned);
  uint64_t v7 = google::protobuf::Arena::AllocateAligned(v6, 0, 24);
  *uint64_t v7 = (google::protobuf::Arena *)Aligned;
  v7[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::NamedValueType>;
  uint64_t v8 = (unint64_t *)((char *)v6 + 32);
  do
    unint64_t v9 = __ldxr(v8);
  while (__stxr((unint64_t)v7, v8));
  v7[2] = (google::protobuf::Arena *)v9;
  uint64_t v10 = *((void *)this + 2);
  uint64_t v11 = *((int *)this + 2);
  *((_DWORD *)this + 2) = v11 + 1;
  *(void *)(v10 + 8 * v11 + 8) = Aligned;
  return Aligned;
}

void sub_19EB2DA10(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C40C9A46F13);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::Block::MergePartialFromCodedStream(CoreML::Specification::MILSpec::Block *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  uint64_t v5 = (char *)this + 88;
  uint64_t v6 = (char *)this + 96;
  uint64_t v7 = (CoreML::Specification::MILSpec::Block *)((char *)this + 64);
  uint64_t v8 = (CoreML::Specification::MILSpec::Block *)((char *)this + 40);
  unint64_t v9 = (CoreML::Specification::MILSpec::Block *)((char *)this + 16);
  while (1)
  {
    uint64_t v10 = *(char **)a2;
    if (*(void *)a2 >= *((void *)a2 + 1)) {
      break;
    }
    uint64_t v11 = *v10;
    if (*v10 < 1) {
      goto LABEL_7;
    }
    *(void *)a2 = v10 + 1;
    unint64_t v12 = v11 | 0x100000000;
    if ((v12 & 0x100000000) == 0) {
      goto LABEL_25;
    }
LABEL_8:
    switch(v12 >> 3)
    {
      case 1u:
        if (v12 != 10) {
          goto LABEL_25;
        }
        int v14 = google::protobuf::internal::RepeatedPtrFieldBase::Add<google::protobuf::RepeatedPtrField<CoreML::Specification::MILSpec::NamedValueType>::TypeHandler>(v9);
        uint64_t v15 = *(char **)a2;
        if (*(void *)a2 >= *((void *)a2 + 1) || *v15 < 0)
        {
          int VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (VarintSizeAsIntFallback < 0) {
            return 0;
          }
        }
        else
        {
          int VarintSizeAsIntFallback = *v15;
          *(void *)a2 = v15 + 1;
        }
        int v29 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
        int v31 = *((_DWORD *)a2 + 13);
        BOOL v32 = __OFSUB__(v31--, 1);
        *((_DWORD *)a2 + 13) = v31;
        if (v31 < 0 != v32) {
          return 0;
        }
        int v33 = v29;
        if (!CoreML::Specification::MILSpec::NamedValueType::MergePartialFromCodedStream((CoreML::Specification::MILSpec::NamedValueType *)v14, a2, v30))return 0; {
        goto LABEL_79;
        }
      case 2u:
        if (v12 != 18) {
          goto LABEL_25;
        }
        uint64_t v23 = (int *)*((void *)this + 7);
        if (!v23)
        {
          int v24 = *((_DWORD *)this + 12);
          int v25 = *((_DWORD *)this + 13);
LABEL_65:
          if (v24 <= v25)
          {
            google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend(v8, v25 - v24 + 1);
            uint64_t v23 = (int *)*((void *)this + 7);
          }
          int v25 = *v23;
          goto LABEL_68;
        }
        int v24 = *((_DWORD *)this + 12);
        int v25 = *v23;
        if (v24 < *v23)
        {
          *((_DWORD *)this + 12) = v24 + 1;
          Aligned = *(std::string **)&v23[2 * v24 + 2];
          goto LABEL_82;
        }
        if (v25 == *((_DWORD *)this + 13)) {
          goto LABEL_65;
        }
LABEL_68:
        *uint64_t v23 = v25 + 1;
        int v42 = *(google::protobuf::Arena **)v8;
        if (!*(void *)v8) {
          operator new();
        }
        Aligned->__r_.__value_.__l.__size_ = 0;
        Aligned->__r_.__value_.__r.__words[2] = 0;
        Aligned->__r_.__value_.__r.__words[0] = 0;
        int v43 = google::protobuf::Arena::AllocateAligned(v42, 0, 24);
        char *v43 = (google::protobuf::Arena *)Aligned;
        v43[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<std::string>;
        int v44 = (unint64_t *)((char *)v42 + 32);
        do
          unint64_t v45 = __ldxr(v44);
        while (__stxr((unint64_t)v43, v44));
        v43[2] = (google::protobuf::Arena *)v45;
        uint64_t v51 = *((void *)this + 7);
        uint64_t v52 = *((int *)this + 12);
        *((_DWORD *)this + 12) = v52 + 1;
        *(void *)(v51 + 8 * v52 + 8) = Aligned;
LABEL_82:
        if (!google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)a2, Aligned)) {
          return 0;
        }
        uint64_t v53 = *((void *)this + 7);
        int64_t v54 = *(unsigned int **)(v53 + 8 * *((int *)this + 12));
        if (*((char *)v54 + 23) < 0)
        {
          int64_t v54 = *(unsigned int **)v54;
          uint64_t v55 = *(void *)(*(void *)(v53 + 8 * *((int *)this + 12)) + 8);
        }
        else
        {
          LODWORD(v55) = *((unsigned __int8 *)v54 + 23);
        }
        if (!google::protobuf::internal::WireFormatLite::VerifyUtf8String(v54, v55, 0, (uint64_t)"CoreML.Specification.MILSpec.Block.outputs"))return 0; {
        break;
        }
      case 3u:
        if (v12 != 26) {
          goto LABEL_25;
        }
        uint64_t v17 = (int *)*((void *)this + 10);
        if (!v17)
        {
          int v18 = *((_DWORD *)this + 18);
          int v19 = *((_DWORD *)this + 19);
          goto LABEL_59;
        }
        int v18 = *((_DWORD *)this + 18);
        int v19 = *v17;
        if (v18 >= *v17)
        {
          if (v19 == *((_DWORD *)this + 19))
          {
LABEL_59:
            if (v18 <= v19)
            {
              google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend(v7, v19 - v18 + 1);
              uint64_t v17 = (int *)*((void *)this + 10);
            }
            int v19 = *v17;
          }
          int *v17 = v19 + 1;
          if (*(void *)v7)
          {
            CoreML::Specification::MILSpec::Operation::Operation((CoreML::Specification::MILSpec::Operation *)v41);
          }
          operator new();
        }
        *((_DWORD *)this + 18) = v18 + 1;
        uint64_t v20 = *(CoreML::Specification::MILSpec::Operation **)&v17[2 * v18 + 2];
        uint64_t v46 = *(char **)a2;
        if (*(void *)a2 >= *((void *)a2 + 1) || *v46 < 0)
        {
          int v47 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v47 < 0) {
            return 0;
          }
        }
        else
        {
          int v47 = *v46;
          *(void *)a2 = v46 + 1;
        }
        int v48 = google::protobuf::io::CodedInputStream::PushLimit(a2, v47);
        int v50 = *((_DWORD *)a2 + 13);
        BOOL v32 = __OFSUB__(v50--, 1);
        *((_DWORD *)a2 + 13) = v50;
        if (v50 < 0 != v32) {
          return 0;
        }
        int v33 = v48;
        if (!CoreML::Specification::MILSpec::Operation::MergePartialFromCodedStream(v20, a2, v49)) {
          return 0;
        }
LABEL_79:
        if (!google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v33)) {
          return 0;
        }
        break;
      case 4u:
        if (v12 != 34) {
          goto LABEL_25;
        }
        v57[0] = v5;
        v57[1] = v6;
        uint64_t v59 = 0;
        uint64_t v60 = 0;
        std::string __p = 0;
        uint64_t v61 = 0;
        int v21 = *(char **)a2;
        if (*(void *)a2 >= *((void *)a2 + 1) || *v21 < 0)
        {
          int v22 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v22 < 0) {
            goto LABEL_88;
          }
        }
        else
        {
          int v22 = *v21;
          *(void *)a2 = v21 + 1;
        }
        int v34 = google::protobuf::io::CodedInputStream::PushLimit(a2, v22);
        int v35 = *((_DWORD *)a2 + 13);
        BOOL v32 = __OFSUB__(v35--, 1);
        *((_DWORD *)a2 + 13) = v35;
        if (v35 < 0 != v32
          || (int v36 = v34,
              !google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>>::MergePartialFromCodedStream((uint64_t)v57, (uint64_t)a2))|| !google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v36))
        {
LABEL_88:
          BOOL v40 = 0;
          int v28 = 6;
          goto LABEL_50;
        }
        if (v60 >= 0) {
          p_p = (unsigned int *)&__p;
        }
        else {
          p_p = (unsigned int *)__p;
        }
        if (v60 >= 0) {
          int v38 = HIBYTE(v60);
        }
        else {
          int v38 = v59;
        }
        BOOL v39 = google::protobuf::internal::WireFormatLite::VerifyUtf8String(p_p, v38, 0, (uint64_t)"CoreML.Specification.MILSpec.Block.AttributesEntry.key");
        BOOL v40 = v39;
        if (v39) {
          int v28 = 0;
        }
        else {
          int v28 = 6;
        }
LABEL_50:
        if (v61) {
          (*(void (**)(uint64_t))(*(void *)v61 + 8))(v61);
        }
        if (SHIBYTE(v60) < 0) {
          operator delete(__p);
        }
        if (!v40) {
          goto LABEL_31;
        }
        break;
      default:
        goto LABEL_25;
    }
LABEL_30:
    int v28 = 0;
LABEL_31:
    if (v28) {
      return 0;
    }
  }
  LODWORD(v11) = 0;
LABEL_7:
  unsigned int TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v11);
  unint64_t v12 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
  if ((v12 & 0x100000000) != 0) {
    goto LABEL_8;
  }
LABEL_25:
  if (v12) {
    BOOL v27 = (v12 & 7) == 4;
  }
  else {
    BOOL v27 = 1;
  }
  if (!v27)
  {
    if (!google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v12, a3))return 0; {
    goto LABEL_30;
    }
  }
  return 1;
}

void sub_19EB2DFCC(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C40B3FB24A3);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Operation>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Block>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::NamedValueType>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

google::protobuf::Arena **google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>::operator[](uint64_t a1, uint64_t a2)
{
  int v4 = *(void **)(a1 + 16);
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  std::string::size_type v24 = 0;
  google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper(v26, (uint64_t)v4, (unsigned __int8 *)&__p, 0);
  uint64_t v6 = v26[0];
  if (v26[0]) {
    goto LABEL_18;
  }
  unint64_t v7 = v4[1];
  unint64_t v8 = *v4 + 1;
  unint64_t v9 = ((3 * v7) >> 2) & 0xFFFFFFFFFFFFFFFLL;
  if (v9 <= v8)
  {
    if (v7 <= 0x800000000000000)
    {
      uint64_t v20 = 2 * v7;
LABEL_33:
      google::protobuf::Map<std::string,std::string>::InnerMap::Resize((uint64_t)v4, v20, v5);
      google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper(v25, (uint64_t)v4, (unsigned __int8 *)&__p, 0);
      uint64_t v11 = v25[3];
      goto LABEL_11;
    }
  }
  else if (v7 >= 9 && (12 * v7) >> 6 >= v8)
  {
    char v21 = 0;
    unint64_t v22 = ((5 * v8) >> 2) + 1;
    do
      ++v21;
    while (v22 << v21 < v9);
    uint64_t v20 = v7 >> v21 <= 8 ? 8 : v7 >> v21;
    if (v20 != v7) {
      goto LABEL_33;
    }
  }
  uint64_t v11 = v26[3];
LABEL_11:
  unint64_t v12 = (google::protobuf::Arena *)v4[5];
  if (v12) {
    Aligned = (std::string *)google::protobuf::Arena::AllocateAligned(v12, MEMORY[0x1E4FBA3A0], 40);
  }
  else {
    Aligned = (std::string *)operator new(0x28uLL);
  }
  int v14 = (std::string::__raw *)Aligned;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(Aligned, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    long long v15 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    Aligned->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
    *(_OWORD *)&Aligned->__r_.__value_.__l.__data_ = v15;
  }
  v14[1].__words[0] = v24;
  google::protobuf::Map<std::string,std::string>::InnerMap::InsertUnique(v25, (uint64_t)v4, v11, v14);
  ++*v4;
  uint64_t v6 = v25[0];
LABEL_18:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  int v16 = *(google::protobuf::Arena ***)(v6 + 24);
  if (!v16)
  {
    if (!*(void *)a1) {
      operator new();
    }
    int v16 = google::protobuf::Arena::AllocateAligned(*(google::protobuf::Arena **)a1, MEMORY[0x1E4FBA3A0], 72);
    uint64_t v17 = *(google::protobuf::Arena **)a1;
    v16[1] = 0;
    v16[2] = 0;
    *int v16 = 0;
    google::protobuf::Arena::OwnDestructor<std::string>((google::protobuf::Arena **)v17, (google::protobuf::Arena *)v16);
    int v18 = *(google::protobuf::Arena **)a1;
    CoreML::Specification::MILSpec::Argument::Argument((CoreML::Specification::MILSpec::Argument *)(v16 + 3));
    google::protobuf::Arena::OwnDestructor<CoreML::Specification::MILSpec::Argument>((google::protobuf::Arena **)v18, (google::protobuf::Arena *)(v16 + 3));
    std::string::operator=((std::string *)v16, (const std::string *)a2);
    *(void *)(v6 + 24) = v16;
  }
  return v16 + 3;
}

void sub_19EB2E2E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  MEMORY[0x19F3C1920](v14, 0x10B2C40C743746ALL);
  _Unwind_Resume(a1);
}

double google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>::erase(void *a1, unsigned __int8 *a2)
{
  google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper(&v6, a1[2], a2, 0);
  double result = *(double *)&v6;
  if ((void)v6)
  {
    long long v4 = v6;
    uint64_t v5 = v7;
    *(void *)&double result = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>::erase((uint64_t)&v6, a1, &v4).n128_u64[0];
  }
  return result;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>>::ReadBeyondKeyValuePair(uint64_t a1, uint64_t a2)
{
  long long v4 = google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::NewEntry(**(google::protobuf::Arena ***)a1);
  uint64_t v5 = *(google::protobuf::Arena ***)(a1 + 48);
  if (v5 != v4)
  {
    if (v5) {
      (*((void (**)(google::protobuf::Arena **))*v5 + 1))(v5);
    }
    *(void *)(a1 + 48) = v4;
  }
  long long v6 = *(CoreML::Specification::MILSpec::Argument **)(a1 + 40);
  *((_DWORD *)v4 + 10) |= 2u;
  Aligned = (google::protobuf::Arena **)v4[3];
  if (!Aligned)
  {
    unint64_t v8 = v4[4];
    if (!v8) {
      operator new();
    }
    CoreML::Specification::MILSpec::Argument::Argument((CoreML::Specification::MILSpec::Argument *)Aligned);
    unint64_t v9 = google::protobuf::Arena::AllocateAligned(v8, 0, 24);
    google::protobuf::internal::RepeatedPtrFieldBase *v9 = (google::protobuf::Arena *)Aligned;
    v9[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Argument>;
    uint64_t v10 = (unint64_t *)((char *)v8 + 32);
    do
      unint64_t v11 = __ldxr(v10);
    while (__stxr((unint64_t)v9, v10));
    v9[2] = (google::protobuf::Arena *)v11;
    v4[3] = (google::protobuf::Arena *)Aligned;
  }
  CoreML::Specification::MILSpec::Argument::Swap((uint64_t)Aligned, v6);
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>::erase(*(void **)(a1 + 8), (unsigned __int8 *)(a1 + 16));
  uint64_t v12 = *(void *)(a1 + 48);
  *(_DWORD *)(v12 + 40) |= 1u;
  uint64_t v13 = *(void *)(v12 + 16);
  if ((long long *)v13 == &google::protobuf::internal::fixed_address_empty_string) {
    google::protobuf::internal::ArenaStringPtr::CreateInstance();
  }
  if (*(char *)(v13 + 23) < 0) {
    operator delete(*(void **)v13);
  }
  long long v14 = *(_OWORD *)(a1 + 16);
  *(void *)(v13 + 16) = *(void *)(a1 + 32);
  *(_OWORD *)uint64_t v13 = v14;
  *(unsigned char *)(a1 + 39) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  uint64_t v15 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 48) + 88))(*(void *)(a1 + 48), a2);
  if (v15) {
    google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>>::UseKeyAndValueFromEntry(a1);
  }
  if ((*(uint64_t (**)(void))(**(void **)(a1 + 48) + 40))(*(void *)(a1 + 48))) {
    *(void *)(a1 + 48) = 0;
  }
  return v15;
}

void sub_19EB2E5A4(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::NewEntry(google::protobuf::Arena *a1)
{
  if (!a1) {
    operator new();
  }
  result[1] = 0;
  result[2] = (google::protobuf::Arena *)&google::protobuf::internal::fixed_address_empty_string;
  result[3] = 0;
  result[4] = a1;
  *((_DWORD *)result + 1CoreML::Specification::MILSpec::NamedValueType::New(this, 0) = 0;
  *double result = (google::protobuf::Arena *)&unk_1EF0DC540;
  return result;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>>::UseKeyAndValueFromEntry(uint64_t a1)
{
  int v2 = (const std::string *)(*(uint64_t (**)(void))(**(void **)(a1 + 48) + 136))(*(void *)(a1 + 48));
  std::string::operator=((std::string *)(a1 + 16), v2);
  int v3 = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>::operator[](*(void *)(a1 + 8), a1 + 16);
  *(void *)(a1 + 4CoreML::Specification::MILSpec::NamedValueType::New(this, 0) = v3;
  uint64_t v4 = *(void *)(a1 + 48);
  *(_DWORD *)(v4 + 40) |= 2u;
  Aligned = *(google::protobuf::Arena ***)(v4 + 24);
  if (!Aligned)
  {
    long long v6 = *(google::protobuf::Arena **)(v4 + 32);
    if (!v6) {
      operator new();
    }
    CoreML::Specification::MILSpec::Argument::Argument((CoreML::Specification::MILSpec::Argument *)Aligned);
    uint64_t v7 = google::protobuf::Arena::AllocateAligned(v6, 0, 24);
    *uint64_t v7 = (google::protobuf::Arena *)Aligned;
    v7[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Argument>;
    unint64_t v8 = (unint64_t *)((char *)v6 + 32);
    do
      unint64_t v9 = __ldxr(v8);
    while (__stxr((unint64_t)v7, v8));
    v7[2] = (google::protobuf::Arena *)v9;
    *(void *)(v4 + 24) = Aligned;
    int v3 = *(google::protobuf::Arena ***)(a1 + 40);
  }

  return CoreML::Specification::MILSpec::Argument::Swap((uint64_t)v3, (CoreML::Specification::MILSpec::Argument *)Aligned);
}

void sub_19EB2E76C(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::Argument::Swap(uint64_t this, CoreML::Specification::MILSpec::Argument *a2)
{
  if (a2 != (CoreML::Specification::MILSpec::Argument *)this)
  {
    uint64_t v2 = *(void *)(this + 32);
    *(void *)(this + 32) = *((void *)a2 + 4);
    *((void *)a2 + 4) = v2;
    LODWORD(v2) = *(_DWORD *)(this + 24);
    *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
    *((_DWORD *)a2 + 6) = v2;
    LODWORD(v2) = *(_DWORD *)(this + 28);
    *(_DWORD *)(this + 28) = *((_DWORD *)a2 + 7);
    *((_DWORD *)a2 + 7) = v2;
    LODWORD(v2) = *(_DWORD *)(this + 40);
    *(_DWORD *)(this + 4CoreML::Specification::MILSpec::NamedValueType::New(this, 0) = *((_DWORD *)a2 + 10);
    *((_DWORD *)a2 + 1CoreML::Specification::MILSpec::NamedValueType::New(this, 0) = v2;
  }
  return this;
}

google::protobuf::Arena **google::protobuf::Arena::OwnDestructor<CoreML::Specification::MILSpec::Argument>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  if (a2)
  {
    int v3 = result;
    double result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *double result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Argument>;
    uint64_t v4 = (unint64_t *)(v3 + 4);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

long long *CoreML::Specification::MILSpec::Operation::MergeFrom(std::string *this, const CoreML::Specification::MILSpec::Operation *a2)
{
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::begin(v44, *((void **)a2 + 5));
  for (int i = v44[0]; v44[0]; int i = v44[0])
  {
    uint64_t v6 = *((void *)i + 3);
    uint64_t v7 = (const CoreML::Specification::MILSpec::Argument *)(v6 + 24);
    unint64_t v8 = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>::operator[]((uint64_t)&this[1], v6);
    if (v7 != (const CoreML::Specification::MILSpec::Argument *)v8)
    {
      unint64_t v9 = v8;
      uint64_t v10 = *((unsigned int *)v8 + 6);
      if ((int)v10 >= 1)
      {
        unint64_t v11 = (uint64_t *)((char *)v8[4] + 8);
        do
        {
          uint64_t v12 = *v11++;
          CoreML::Specification::MILSpec::Argument_Binding::clear_binding(v12);
          --v10;
        }
        while (v10);
        *((_DWORD *)v9 + 6) = 0;
      }
      CoreML::Specification::MILSpec::Argument::MergeFrom((unint64_t *)v9, v7);
    }
    google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::KeyValuePair const>::operator++(v44);
  }
  unsigned int v13 = *((_DWORD *)a2 + 14);
  if (v13)
  {
    long long v14 = (CoreML::Specification::MILSpec::NamedValueType **)(*((void *)a2 + 8) + 8);
    uint64_t v15 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)&this[2], *((_DWORD *)a2 + 14));
    google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<CoreML::Specification::MILSpec::NamedValueType>::TypeHandler>(this + 2, (std::string **)v15, v14, v13, *(_DWORD *)this[2].__r_.__value_.__r.__words[2] - LODWORD(this[2].__r_.__value_.__r.__words[1]));
    signed int v16 = LODWORD(this[2].__r_.__value_.__r.__words[1]) + v13;
    LODWORD(this[2].__r_.__value_.__r.__words[1]) = v16;
    uint64_t v17 = (signed int *)this[2].__r_.__value_.__r.__words[2];
    if (*v17 < v16) {
      signed int *v17 = v16;
    }
  }
  int v18 = *((_DWORD *)a2 + 20);
  if (v18)
  {
    uint64_t v43 = *((void *)a2 + 11);
    int v42 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)&this[3], v18);
    uint64_t v19 = *(int *)this[3].__r_.__value_.__r.__words[2];
    uint64_t v20 = SLODWORD(this[3].__r_.__value_.__r.__words[1]);
    int v21 = v19 - v20;
    if ((int)v19 - (int)v20 >= v18) {
      uint64_t v22 = v18;
    }
    else {
      uint64_t v22 = v21;
    }
    if ((int)v22 >= 1)
    {
      uint64_t v23 = (CoreML::Specification::MILSpec::Block **)v42;
      std::string::size_type v24 = (const CoreML::Specification::MILSpec::Block **)(v43 + 8);
      do
      {
        BOOL v26 = *v24++;
        int v25 = v26;
        BOOL v27 = *v23++;
        google::protobuf::internal::GenericTypeHandler<CoreML::Specification::MILSpec::Block>::Merge(v25, v27);
        --v22;
      }
      while (v22);
    }
    if (v21 < v18)
    {
      int data = (google::protobuf::Arena *)this[3].__r_.__value_.__l.__data_;
      int v29 = v20 + v18 - v19;
      uint64_t v30 = 8 * v19 - 8 * v20;
      int v31 = (google::protobuf::Arena ***)((char *)v42 + v30);
      BOOL v32 = (const CoreML::Specification::MILSpec::Block **)(v30 + v43 + 8);
      do
      {
        int v33 = *v32;
        if (!data) {
          operator new();
        }
        CoreML::Specification::MILSpec::Block::Block((CoreML::Specification::MILSpec::Block *)Aligned);
        int v35 = google::protobuf::Arena::AllocateAligned(data, 0, 24);
        char *v35 = (google::protobuf::Arena *)Aligned;
        v35[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Block>;
        int v36 = (unint64_t *)((char *)data + 32);
        do
          unint64_t v37 = __ldxr(v36);
        while (__stxr((unint64_t)v35, v36));
        void v35[2] = (google::protobuf::Arena *)v37;
        google::protobuf::internal::GenericTypeHandler<CoreML::Specification::MILSpec::Block>::Merge(v33, (CoreML::Specification::MILSpec::Block *)Aligned);
        *v31++ = Aligned;
        ++v32;
        --v29;
      }
      while (v29);
    }
    int v38 = LODWORD(this[3].__r_.__value_.__r.__words[1]) + v18;
    LODWORD(this[3].__r_.__value_.__r.__words[1]) = v38;
    BOOL v39 = (int *)this[3].__r_.__value_.__r.__words[2];
    if (*v39 < v38) {
      int *v39 = v38;
    }
  }
  double result = (long long *)google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::MergeFrom((uint64_t)&this[4], (uint64_t)a2 + 96);
  uint64_t v41 = *((void *)a2 + 16);
  if (*(char *)(v41 + 23) < 0)
  {
    if (!*(void *)(v41 + 8)) {
      return result;
    }
  }
  else if (!*(unsigned char *)(v41 + 23))
  {
    return result;
  }
  double result = (long long *)this[5].__r_.__value_.__l.__size_;
  if (result != (long long *)v41)
  {
    if (result == &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
    }
    return (long long *)std::string::operator=((std::string *)result, (const std::string *)v41);
  }
  return result;
}

void sub_19EB2EB70(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C4058FDD882);
  _Unwind_Resume(a1);
}

std::string *google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<CoreML::Specification::MILSpec::NamedValueType>::TypeHandler>(std::string *result, std::string **a2, CoreML::Specification::MILSpec::NamedValueType **a3, unsigned int a4, unsigned int a5)
{
  unint64_t v9 = (google::protobuf::Arena **)result;
  if ((int)a5 >= (int)a4) {
    uint64_t v10 = a4;
  }
  else {
    uint64_t v10 = a5;
  }
  if ((int)v10 >= 1)
  {
    unint64_t v11 = a3;
    uint64_t v12 = a2;
    do
    {
      long long v14 = *v11++;
      unsigned int v13 = v14;
      uint64_t v15 = *v12++;
      double result = google::protobuf::internal::GenericTypeHandler<CoreML::Specification::MILSpec::NamedValueType>::Merge(v13, v15);
      --v10;
    }
    while (v10);
  }
  BOOL v16 = __OFSUB__(a4, a5);
  int v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    int v18 = *v9;
    uint64_t v19 = (google::protobuf::Arena ***)&a2[a5];
    uint64_t v20 = &a3[a5];
    do
    {
      int v21 = *v20;
      if (!v18) {
        operator new();
      }
      CoreML::Specification::MILSpec::NamedValueType::NamedValueType((CoreML::Specification::MILSpec::NamedValueType *)Aligned);
      uint64_t v23 = google::protobuf::Arena::AllocateAligned(v18, 0, 24);
      *uint64_t v23 = (google::protobuf::Arena *)Aligned;
      v23[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::NamedValueType>;
      std::string::size_type v24 = (unint64_t *)((char *)v18 + 32);
      do
        unint64_t v25 = __ldxr(v24);
      while (__stxr((unint64_t)v23, v24));
      v23[2] = (google::protobuf::Arena *)v25;
      double result = google::protobuf::internal::GenericTypeHandler<CoreML::Specification::MILSpec::NamedValueType>::Merge(v21, (std::string *)Aligned);
      *v19++ = Aligned;
      ++v20;
      --v17;
    }
    while (v17);
  }
  return result;
}

void sub_19EB2ECB8(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C40C9A46F13);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::GenericTypeHandler<CoreML::Specification::MILSpec::Block>::Merge(const CoreML::Specification::MILSpec::Block *a1, CoreML::Specification::MILSpec::Block *a2)
{
  return CoreML::Specification::MILSpec::Block::MergeFrom(a2, a1);
}

void *CoreML::Specification::MILSpec::Block::MergeFrom(CoreML::Specification::MILSpec::Block *this, const CoreML::Specification::MILSpec::Block *a2)
{
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((unint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  unsigned int v5 = *((_DWORD *)a2 + 6);
  if (v5)
  {
    uint64_t v6 = (CoreML::Specification::MILSpec::NamedValueType **)(*((void *)a2 + 4) + 8);
    uint64_t v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((CoreML::Specification::MILSpec::Block *)((char *)this + 16), *((_DWORD *)a2 + 6));
    google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<CoreML::Specification::MILSpec::NamedValueType>::TypeHandler>((std::string *)((char *)this + 16), (std::string **)v7, v6, v5, **((_DWORD **)this + 4) - *((_DWORD *)this + 6));
    signed int v8 = *((_DWORD *)this + 6) + v5;
    *((_DWORD *)this + 6) = v8;
    unint64_t v9 = (signed int *)*((void *)this + 4);
    if (*v9 < v8) {
      signed int *v9 = v8;
    }
  }
  unsigned int v10 = *((_DWORD *)a2 + 12);
  if (v10)
  {
    unint64_t v11 = (const std::string **)(*((void *)a2 + 7) + 8);
    uint64_t v12 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((CoreML::Specification::MILSpec::Block *)((char *)this + 40), *((_DWORD *)a2 + 12));
    google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((std::string *)((char *)this + 40), (std::string **)v12, v11, v10, **((_DWORD **)this + 7) - *((_DWORD *)this + 12));
    signed int v13 = *((_DWORD *)this + 12) + v10;
    *((_DWORD *)this + 12) = v13;
    long long v14 = (signed int *)*((void *)this + 7);
    if (*v14 < v13) {
      signed int *v14 = v13;
    }
  }
  int v15 = *((_DWORD *)a2 + 18);
  if (v15)
  {
    uint64_t v29 = *((void *)a2 + 10);
    int v28 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((CoreML::Specification::MILSpec::Block *)((char *)this + 64), v15);
    int v16 = **((_DWORD **)this + 10) - *((_DWORD *)this + 18);
    if (v16 >= v15) {
      uint64_t v17 = v15;
    }
    else {
      uint64_t v17 = v16;
    }
    if ((int)v17 >= 1)
    {
      int v18 = (std::string **)v28;
      uint64_t v19 = (CoreML::Specification::MILSpec::Operation **)(v29 + 8);
      do
      {
        int v21 = *v19++;
        uint64_t v20 = v21;
        uint64_t v22 = *v18++;
        google::protobuf::internal::GenericTypeHandler<CoreML::Specification::MILSpec::Operation>::Merge(v20, v22);
        --v17;
      }
      while (v17);
    }
    if (v16 < v15)
    {
      uint64_t v23 = (google::protobuf::Arena *)*((void *)this + 8);
      if (v23)
      {
        CoreML::Specification::MILSpec::Operation::Operation((CoreML::Specification::MILSpec::Operation *)Aligned);
      }
      operator new();
    }
    int v25 = *((_DWORD *)this + 18) + v15;
    *((_DWORD *)this + 18) = v25;
    BOOL v26 = (int *)*((void *)this + 10);
    if (*v26 < v25) {
      int *v26 = v25;
    }
  }

  return google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::MergeFrom((uint64_t)this + 88, (uint64_t)a2 + 88);
}

void sub_19EB2EF78(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C40B3FB24A3);
  _Unwind_Resume(a1);
}

long long *google::protobuf::internal::GenericTypeHandler<CoreML::Specification::MILSpec::Operation>::Merge(CoreML::Specification::MILSpec::Operation *a1, std::string *this)
{
  return CoreML::Specification::MILSpec::Operation::MergeFrom(this, a1);
}

std::string *google::protobuf::internal::GenericTypeHandler<CoreML::Specification::MILSpec::NamedValueType>::Merge(CoreML::Specification::MILSpec::NamedValueType *a1, std::string *this)
{
  return CoreML::Specification::MILSpec::NamedValueType::MergeFrom(this, a1);
}

uint64_t CoreML::Specification::MILSpec::Operation::IsInitialized(CoreML::Specification::MILSpec::Operation *this)
{
  return 1;
}

void CoreML::Specification::MILSpec::Operation::Clear(CoreML::Specification::MILSpec::Operation *this)
{
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>::clear((uint64_t)this + 24);
  uint64_t v2 = *((unsigned int *)this + 14);
  if ((int)v2 >= 1)
  {
    int v3 = (CoreML::Specification::MILSpec::NamedValueType **)(*((void *)this + 8) + 8);
    do
    {
      uint64_t v4 = *v3++;
      CoreML::Specification::MILSpec::NamedValueType::Clear(v4);
      --v2;
    }
    while (v2);
    *((_DWORD *)this + 14) = 0;
  }
  uint64_t v5 = *((unsigned int *)this + 20);
  if ((int)v5 >= 1)
  {
    uint64_t v6 = (CoreML::Specification::MILSpec::Block **)(*((void *)this + 11) + 8);
    do
    {
      uint64_t v7 = *v6++;
      CoreML::Specification::MILSpec::Block::Clear(v7);
      --v5;
    }
    while (v5);
    *((_DWORD *)this + 2CoreML::Specification::MILSpec::NamedValueType::New(this, 0) = 0;
  }
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::clear((uint64_t)this + 104);
  uint64_t v8 = *((void *)this + 16);
  if ((long long *)v8 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v8 + 23) < 0)
    {
      **(unsigned char **)uint64_t v8 = 0;
      *(void *)(v8 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v8 = 0;
      *(unsigned char *)(v8 + 23) = 0;
    }
  }
}

double CoreML::Specification::MILSpec::Block::Clear(CoreML::Specification::MILSpec::Block *this)
{
  uint64_t v2 = *((unsigned int *)this + 6);
  if ((int)v2 >= 1)
  {
    int v3 = (CoreML::Specification::MILSpec::NamedValueType **)(*((void *)this + 4) + 8);
    do
    {
      uint64_t v4 = *v3++;
      CoreML::Specification::MILSpec::NamedValueType::Clear(v4);
      --v2;
    }
    while (v2);
    *((_DWORD *)this + 6) = 0;
  }
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 40);
  uint64_t v5 = *((unsigned int *)this + 18);
  if ((int)v5 >= 1)
  {
    uint64_t v6 = (CoreML::Specification::MILSpec::Operation **)(*((void *)this + 10) + 8);
    do
    {
      uint64_t v7 = *v6++;
      CoreML::Specification::MILSpec::Operation::Clear(v7);
      --v5;
    }
    while (v5);
    *((_DWORD *)this + 18) = 0;
  }

  return google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::clear((uint64_t)this + 96);
}

void CoreML::Specification::MILSpec::Operation::New(CoreML::Specification::MILSpec::Operation *this, google::protobuf::Arena *a2)
{
}

void sub_19EB2F168(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C40B3FB24A3);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::MILSpec::Operation>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  if (a2)
  {
    int v3 = result;
    double result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *double result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::Operation>;
    uint64_t v4 = (unint64_t *)(v3 + 4);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::Operation>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void CoreML::Specification::MILSpec::Operation::New(CoreML::Specification::MILSpec::Operation *this)
{
}

void *CoreML::Specification::MILSpec::Operation::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.MILSpec.Operation");
}

void CoreML::Specification::MILSpec::Operation::~Operation(CoreML::Specification::MILSpec::Operation *this)
{
  CoreML::Specification::MILSpec::Operation::~Operation(this);

  JUMPOUT(0x19F3C1920);
}

{
  uint64_t v2;

  *(void *)this = &unk_1EF0DA828;
  uint64_t v2 = *((void *)this + 16);
  if ((long long *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    MEMORY[0x19F3C1920](v2, 0x1012C40EC159624);
  }
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::~Map((void *)this + 13);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>((void *)this + 9);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>((void *)this + 6);
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>::~Map((void *)this + 3);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

void google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryLite(void *a1)
{
  google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Argument,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryImpl(a1);

  JUMPOUT(0x19F3C1920);
}

uint64_t CoreML::Specification::MILSpec::Argument::GetCachedSize(CoreML::Specification::MILSpec::Argument *this)
{
  return *((unsigned int *)this + 10);
}

uint64_t CoreML::Specification::MILSpec::Argument::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  int v4 = *(_DWORD *)(this + 24);
  if (v4)
  {
    uint64_t v6 = this;
    for (int i = 0; i != v4; ++i)
      this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)1, *(void *)(*(void *)(v6 + 32) + 8 * i + 8), a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::MILSpec::Argument::IsInitialized(CoreML::Specification::MILSpec::Argument *this)
{
  return 1;
}

uint64_t CoreML::Specification::MILSpec::Argument::Clear(uint64_t this)
{
  uint64_t v1 = *(unsigned int *)(this + 24);
  if ((int)v1 >= 1)
  {
    uint64_t v2 = this;
    int v3 = (uint64_t *)(*(void *)(this + 32) + 8);
    do
    {
      uint64_t v4 = *v3++;
      this = CoreML::Specification::MILSpec::Argument_Binding::clear_binding(v4);
      --v1;
    }
    while (v1);
    *(_DWORD *)(v2 + 24) = 0;
  }
  return this;
}

void CoreML::Specification::MILSpec::Argument::New(CoreML::Specification::MILSpec::Argument *this, google::protobuf::Arena *a2)
{
}

void sub_19EB2F468(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::MILSpec::Argument>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  if (a2)
  {
    int v3 = result;
    double result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *double result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::Argument>;
    uint64_t v4 = (unint64_t *)(v3 + 4);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::Argument>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void CoreML::Specification::MILSpec::Argument::New(CoreML::Specification::MILSpec::Argument *this)
{
}

void *CoreML::Specification::MILSpec::Argument::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.MILSpec.Argument");
}

uint64_t CoreML::Specification::MILSpec::Argument_Binding::GetCachedSize(CoreML::Specification::MILSpec::Argument_Binding *this)
{
  return *((unsigned int *)this + 6);
}

uint64_t CoreML::Specification::MILSpec::Argument_Binding::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 28);
  if (v6 == 1)
  {
    uint64_t v7 = *(unsigned int **)(this + 16);
    if (*((char *)v7 + 23) < 0)
    {
      uint64_t v7 = *(unsigned int **)v7;
      uint64_t v8 = *(void *)(*(void *)(v5 + 16) + 8);
    }
    else
    {
      LODWORD(v8) = *((unsigned __int8 *)v7 + 23);
    }
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v7, v8, 1, (uint64_t)"CoreML.Specification.MILSpec.Argument.Binding.name");
    if (*(_DWORD *)(v5 + 28) == 1) {
      unint64_t v9 = *(long long **)(v5 + 16);
    }
    else {
      unint64_t v9 = &google::protobuf::internal::fixed_address_empty_string;
    }
    this = google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(1u, (uint64_t)v9, a2);
    int v6 = *(_DWORD *)(v5 + 28);
  }
  if (v6 == 2)
  {
    uint64_t v10 = *(void *)(v5 + 16);
    return google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)2, v10, a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::MILSpec::Argument_Binding::IsInitialized(CoreML::Specification::MILSpec::Argument_Binding *this)
{
  return 1;
}

void CoreML::Specification::MILSpec::Argument_Binding::New(CoreML::Specification::MILSpec::Argument_Binding *this, google::protobuf::Arena *a2)
{
}

void sub_19EB2F688(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::MILSpec::Argument_Binding>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  if (a2)
  {
    int v3 = result;
    double result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *double result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::Argument_Binding>;
    uint64_t v4 = (unint64_t *)(v3 + 4);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::Argument_Binding>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void CoreML::Specification::MILSpec::Argument_Binding::New(CoreML::Specification::MILSpec::Argument_Binding *this)
{
}

void *CoreML::Specification::MILSpec::Argument_Binding::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.MILSpec.Argument.Binding");
}

void CoreML::Specification::MILSpec::Argument_Binding::~Argument_Binding(CoreML::Specification::MILSpec::Argument_Binding *this)
{
  CoreML::Specification::MILSpec::Argument_Binding::~Argument_Binding(this);

  JUMPOUT(0x19F3C1920);
}

{
  *(void *)this = &unk_1EF0D9BB0;
  if (*((_DWORD *)this + 7)) {
    CoreML::Specification::MILSpec::Argument_Binding::clear_binding((uint64_t)this);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

uint64_t CoreML::Specification::MILSpec::Block::GetCachedSize(CoreML::Specification::MILSpec::Block *this)
{
  return *((unsigned int *)this + 30);
}

uint64_t CoreML::Specification::MILSpec::Block::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 24);
  if (v6)
  {
    for (int i = 0; i != v6; ++i)
      this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)1, *(void *)(*(void *)(v5 + 32) + 8 * i + 8), a2, a4);
  }
  uint64_t v8 = *(unsigned int *)(v5 + 48);
  if ((int)v8 >= 1)
  {
    uint64_t v9 = -v8;
    uint64_t v10 = 1;
    do
    {
      unint64_t v11 = *(unsigned int **)(*(void *)(v5 + 56) + 8 * v10);
      if (*((char *)v11 + 23) < 0)
      {
        unint64_t v11 = *(unsigned int **)v11;
        uint64_t v12 = *(void *)(*(void *)(*(void *)(v5 + 56) + 8 * v10) + 8);
      }
      else
      {
        LODWORD(v12) = *((unsigned __int8 *)v11 + 23);
      }
      google::protobuf::internal::WireFormatLite::VerifyUtf8String(v11, v12, 1, (uint64_t)"CoreML.Specification.MILSpec.Block.outputs");
      this = google::protobuf::internal::WireFormatLite::WriteString(2u, *(void *)(*(void *)(v5 + 56) + 8 * v10++), a2);
    }
    while (v9 + v10 != 1);
  }
  int v13 = *(_DWORD *)(v5 + 72);
  if (v13)
  {
    for (int j = 0; j != v13; ++j)
      this = google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)3, *(void *)(*(void *)(v5 + 80) + 8 * j + 8), a2, a4);
  }
  int v15 = *(unint64_t **)(v5 + 112);
  unint64_t v16 = *v15;
  if (*v15)
  {
    if (*((unsigned char *)a2 + 26))
    {
      if (v16 >= 2 && *((unsigned char *)a2 + 27) != 0) {
        goto LABEL_36;
      }
    }
    else if (v16 >= 2 && google::protobuf::io::CodedOutputStream::default_serialization_deterministic_ != 0)
    {
LABEL_36:
      operator new[]();
    }
    this = (uint64_t)google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::begin(v24, v15);
    uint64_t v18 = 0;
    while (v24[0])
    {
      uint64_t v20 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(*((google::protobuf::Arena **)v24[0] + 3), (google::protobuf::Arena *)(*((void *)v24[0] + 3) + 24), *(google::protobuf::Arena **)(v5 + 88));
      if ((google::protobuf::Arena **)v18 != v20)
      {
        if (v18) {
          (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
        }
        uint64_t v18 = (uint64_t)v20;
      }
      google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)4, v18, a2, v19);
      int v21 = (unsigned int *)*((void *)v24[0] + 3);
      if (*((char *)v21 + 23) < 0)
      {
        int v21 = *(unsigned int **)v21;
        uint64_t v22 = *(void *)(*((void *)v24[0] + 3) + 8);
      }
      else
      {
        LODWORD(v22) = *((unsigned __int8 *)v21 + 23);
      }
      google::protobuf::internal::WireFormatLite::VerifyUtf8String(v21, v22, 1, (uint64_t)"CoreML.Specification.MILSpec.Block.AttributesEntry.key");
      this = (uint64_t)google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::KeyValuePair const>::operator++(v24);
    }
    if (v18) {
      return (*(uint64_t (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  return this;
}

void sub_19EB2FB74(_Unwind_Exception *a1)
{
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  MEMORY[0x19F3C1900](v1, 0x60C8044C4A2DFLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::Block::IsInitialized(CoreML::Specification::MILSpec::Block *this)
{
  return 1;
}

void CoreML::Specification::MILSpec::Block::New(CoreML::Specification::MILSpec::Block *this, google::protobuf::Arena *a2)
{
}

void sub_19EB2FC58(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C4058FDD882);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::MILSpec::Block>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  if (a2)
  {
    int v3 = result;
    double result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *double result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::Block>;
    uint64_t v4 = (unint64_t *)(v3 + 4);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::Block>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void CoreML::Specification::MILSpec::Block::New(CoreML::Specification::MILSpec::Block *this)
{
}

void *CoreML::Specification::MILSpec::Block::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.MILSpec.Block");
}

void CoreML::Specification::MILSpec::Block::~Block(CoreML::Specification::MILSpec::Block *this)
{
  CoreML::Specification::MILSpec::Block::~Block(this);

  JUMPOUT(0x19F3C1920);
}

{
  *(void *)this = &unk_1EF0DA368;
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::~Map((void *)this + 12);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>((void *)this + 8);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((void *)this + 5);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>((void *)this + 2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

void *google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::~Map(void *a1)
{
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::clear((uint64_t)a1);
  if (!*a1)
  {
    uint64_t v2 = a1[2];
    if (v2)
    {
      uint64_t v3 = google::protobuf::Map<std::string,std::string>::InnerMap::~InnerMap(v2);
      MEMORY[0x19F3C1920](v3, 0x10E0C40D5F42F35);
    }
  }
  return a1;
}

double google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::clear(uint64_t a1)
{
  google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::begin(&v3, *(void **)(a1 + 16));
  while ((void)v3)
  {
    long long v5 = v3;
    uint64_t v6 = v4;
    *(void *)&double result = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::erase((uint64_t)&v3, (void *)a1, &v5).n128_u64[0];
  }
  return result;
}

__n128 google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::erase(uint64_t a1, void *a2, void *a3)
{
  if (!*a2)
  {
    uint64_t v6 = *(void *)(*a3 + 24);
    if (v6)
    {
      CoreML::Specification::MILSpec::Block::~Block((CoreML::Specification::MILSpec::Block *)(v6 + 24));
      if (*(char *)(v6 + 23) < 0) {
        operator delete(*(void **)v6);
      }
      MEMORY[0x19F3C1920](v6, 0x10B2C4008C62E43);
    }
  }
  long long v18 = *(_OWORD *)a3;
  unint64_t v19 = a3[2];
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::KeyValuePair>::operator++(a3);
  uint64_t v7 = (void *)a2[2];
  uint64_t v20 = 0;
  BOOL v8 = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::KeyValuePair>::revalidate_if_necessary((uint64_t)&v18, &v20);
  unint64_t v9 = v19;
  uint64_t v10 = (void **)v18;
  uint64_t v11 = v7[4];
  uint64_t v12 = *(void *)(v11 + 8 * v19);
  if (v8)
  {
    uint64_t v13 = google::protobuf::Map<std::string,std::string>::InnerMap::EraseFromLinkedList(v18, *(void *)(v11 + 8 * v19));
LABEL_12:
    *(void *)(v7[4] + 8 * v9) = v13;
    goto LABEL_13;
  }
  long long v14 = (uint64_t *)std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::find<std::string *>(v12, *(void **)(v20 + 32));
  if ((uint64_t *)(v12 + 8) != v14) {
    std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::erase(v12, v14);
  }
  if (!*(void *)(v12 + 24))
  {
    google::protobuf::Map<std::string,std::string>::InnerMap::DestroyTree(v7[5], (void **)v12);
    uint64_t v13 = 0;
    *(void *)(v7[4] + ((8 * v9) | std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(*((void **)this + 8)) = 0;
    v9 &= ~1uLL;
    goto LABEL_12;
  }
LABEL_13:
  google::protobuf::Map<std::string,std::string>::InnerMap::DestroyNode((uint64_t)v7, v10);
  --*v7;
  if (v9 == v7[3])
  {
    unint64_t v16 = v7[1];
    if (v9 < v16)
    {
      uint64_t v17 = v7[4];
      do
      {
        if (*(void *)(v17 + 8 * v9)) {
          break;
        }
        v7[3] = ++v9;
      }
      while (v16 != v9);
    }
  }
  __n128 result = *(__n128 *)a3;
  *(_OWORD *)a1 = *(_OWORD *)a3;
  *(void *)(a1 + 16) = a3[2];
  return result;
}

uint64_t CoreML::Specification::MILSpec::Function::GetCachedSize(CoreML::Specification::MILSpec::Function *this)
{
  return *((unsigned int *)this + 28);
}

uint64_t CoreML::Specification::MILSpec::Function::SerializeWithCachedSizes(CoreML::Specification::MILSpec::Function *this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  int v6 = *((_DWORD *)this + 6);
  if (v6)
  {
    for (int i = 0; i != v6; ++i)
      google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)1, *(void *)(*((void *)this + 4) + 8 * i + 8), a2, a4);
  }
  uint64_t result = *((void *)this + 13);
  if (*(char *)(result + 23) < 0)
  {
    uint64_t v9 = *(void *)(result + 8);
    if (!v9) {
      goto LABEL_10;
    }
    uint64_t result = *(void *)result;
    goto LABEL_9;
  }
  LODWORD(v9) = *(unsigned __int8 *)(result + 23);
  if (*(unsigned char *)(result + 23))
  {
LABEL_9:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String((unsigned int *)result, v9, 1, (uint64_t)"CoreML.Specification.MILSpec.Function.opset");
    uint64_t result = google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(2u, *((void *)this + 13), a2);
  }
LABEL_10:
  uint64_t v10 = (unint64_t *)*((void *)this + 8);
  unint64_t v11 = *v10;
  if (*v10)
  {
    if (*((unsigned char *)a2 + 26))
    {
      if (v11 >= 2 && *((unsigned char *)a2 + 27) != 0) {
        goto LABEL_33;
      }
    }
    else if (v11 >= 2 && google::protobuf::io::CodedOutputStream::default_serialization_deterministic_ != 0)
    {
LABEL_33:
      operator new[]();
    }
    uint64_t result = (uint64_t)google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::begin(v28, v10);
    uint64_t v13 = 0;
    while (v28[0])
    {
      int v15 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(*((google::protobuf::Arena **)v28[0] + 3), (google::protobuf::Arena *)(*((void *)v28[0] + 3) + 24), *((google::protobuf::Arena **)this + 5));
      if ((google::protobuf::Arena **)v13 != v15)
      {
        if (v13) {
          (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
        }
        uint64_t v13 = (uint64_t)v15;
      }
      google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)3, v13, a2, v14);
      unint64_t v16 = (unsigned int *)*((void *)v28[0] + 3);
      if (*((char *)v16 + 23) < 0)
      {
        unint64_t v16 = *(unsigned int **)v16;
        uint64_t v17 = *(void *)(*((void *)v28[0] + 3) + 8);
      }
      else
      {
        LODWORD(v17) = *((unsigned __int8 *)v16 + 23);
      }
      google::protobuf::internal::WireFormatLite::VerifyUtf8String(v16, v17, 1, (uint64_t)"CoreML.Specification.MILSpec.Function.BlockSpecializationsEntry.key");
      uint64_t result = (uint64_t)google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::KeyValuePair const>::operator++(v28);
    }
    if (v13) {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 8))(v13);
    }
  }
  unint64_t v19 = (unint64_t *)*((void *)this + 12);
  unint64_t v20 = *v19;
  if (*v19)
  {
    if (*((unsigned char *)a2 + 26))
    {
      if (v20 >= 2 && *((unsigned char *)a2 + 27) != 0) {
        goto LABEL_57;
      }
    }
    else if (v20 >= 2 && google::protobuf::io::CodedOutputStream::default_serialization_deterministic_ != 0)
    {
LABEL_57:
      operator new[]();
    }
    uint64_t result = (uint64_t)google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::begin(v28, v19);
    uint64_t v22 = 0;
    while (v28[0])
    {
      std::string::size_type v24 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(*((google::protobuf::Arena **)v28[0] + 3), (google::protobuf::Arena *)(*((void *)v28[0] + 3) + 24), *((google::protobuf::Arena **)this + 9));
      if ((google::protobuf::Arena **)v22 != v24)
      {
        if (v22) {
          (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
        }
        uint64_t v22 = (uint64_t)v24;
      }
      google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)4, v22, a2, v23);
      int v25 = (unsigned int *)*((void *)v28[0] + 3);
      if (*((char *)v25 + 23) < 0)
      {
        int v25 = *(unsigned int **)v25;
        uint64_t v26 = *(void *)(*((void *)v28[0] + 3) + 8);
      }
      else
      {
        LODWORD(v26) = *((unsigned __int8 *)v25 + 23);
      }
      google::protobuf::internal::WireFormatLite::VerifyUtf8String(v25, v26, 1, (uint64_t)"CoreML.Specification.MILSpec.Function.AttributesEntry.key");
      uint64_t result = (uint64_t)google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::KeyValuePair const>::operator++(v28);
    }
    if (v22) {
      return (*(uint64_t (**)(uint64_t))(*(void *)v22 + 8))(v22);
    }
  }
  return result;
}

void sub_19EB305CC(_Unwind_Exception *a1)
{
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  MEMORY[0x19F3C1900](v1, 0x60C8044C4A2DFLL);
  _Unwind_Resume(a1);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Block> const*> &,google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Block> const**,false>(uint64_t result, char *a2, uint64_t a3, char a4)
{
  BOOL v8 = (char *)result;
  while (2)
  {
    uint64_t v95 = a2 - 8;
    std::string::size_type v91 = a2 - 24;
    uint64_t v92 = a2 - 16;
    uint64_t v9 = v8;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          unint64_t v10 = (unint64_t)v9;
          uint64_t v11 = a2 - v9;
          uint64_t v12 = (a2 - v9) >> 3;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0:
              case 1:
                return result;
              case 2:
                uint64_t v41 = *(void **)v95;
                int v42 = *(void **)v9;
                uint64_t result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*(void **)v95, *(void **)v9);
                if (result)
                {
                  *(void *)uint64_t v9 = v41;
                  *(void *)uint64_t v95 = v42;
                }
                break;
              case 3:
                uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((void **)v9, (void **)v9 + 1, (void **)v95);
                break;
              case 4:
                uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((void **)v9, (void **)v9 + 1, (void **)v9 + 2, (void **)v95);
                break;
              case 5:
                uint64_t result = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((void **)v9, (void **)v9 + 1, (void **)v9 + 2, (void **)v9 + 3, (void **)v95);
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v11 <= 191)
          {
            uint64_t v43 = v9 + 8;
            BOOL v45 = v9 == a2 || v43 == a2;
            if (a4)
            {
              if (!v45)
              {
                uint64_t v46 = 0;
                int v47 = v9;
                do
                {
                  unsigned int v49 = *(void **)v47;
                  int v48 = (void *)*((void *)v47 + 1);
                  int v47 = v43;
                  uint64_t result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v48, v49);
                  if (result)
                  {
                    uint64_t v50 = v46;
                    while (1)
                    {
                      *(void *)&v9[v50 + 8] = v49;
                      if (!v50) {
                        break;
                      }
                      unsigned int v49 = *(void **)&v9[v50 - 8];
                      uint64_t result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v48, v49);
                      v50 -= 8;
                      if ((result & 1) == 0)
                      {
                        uint64_t v51 = &v9[v50 + 8];
                        goto LABEL_80;
                      }
                    }
                    uint64_t v51 = v9;
LABEL_80:
                    *(void *)uint64_t v51 = v48;
                  }
                  uint64_t v43 = v47 + 8;
                  v46 += 8;
                }
                while (v47 + 8 != a2);
              }
            }
            else if (!v45)
            {
              do
              {
                std::string v87 = *(void **)v10;
                std::string v86 = *(void **)(v10 + 8);
                unint64_t v10 = (unint64_t)v43;
                uint64_t result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v86, v87);
                if (result)
                {
                  std::string v88 = (void *)v10;
                  do
                  {
                    *std::string v88 = v87;
                    std::string v87 = (void *)*(v88 - 2);
                    uint64_t result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v86, v87);
                    --v88;
                  }
                  while ((result & 1) != 0);
                  *std::string v88 = v86;
                }
                uint64_t v43 = (char *)(v10 + 8);
              }
              while ((char *)(v10 + 8) != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v9 != a2)
            {
              uint64_t v98 = v9;
              int64_t v52 = (unint64_t)(v12 - 2) >> 1;
              int64_t v53 = v52;
              std::string v89 = a2;
              uint64_t v90 = a2 - v9;
              do
              {
                int64_t v54 = v53;
                if (v11 >= 16 && v52 >= v53)
                {
                  uint64_t v55 = (2 * v53) | 1;
                  unint64_t v56 = &v98[8 * v55];
                  uint64_t v57 = 2 * v53 + 2;
                  int64_t v96 = v53;
                  if (v57 < v12)
                  {
                    uint64_t v58 = *(void **)v56;
                    uint64_t v60 = (void *)*((void *)v56 + 1);
                    BOOL v59 = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*(void **)v56, v60);
                    if (v59) {
                      v56 += 8;
                    }
                    else {
                      uint64_t v60 = v58;
                    }
                    if (v59) {
                      uint64_t v55 = v57;
                    }
                  }
                  else
                  {
                    uint64_t v60 = *(void **)v56;
                  }
                  uint64_t v61 = &v98[8 * v54];
                  int v62 = *(void **)v61;
                  uint64_t result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v60, *(void **)v61);
                  uint64_t v11 = v90;
                  if ((result & 1) == 0)
                  {
                    do
                    {
                      int v63 = v56;
                      *(void *)uint64_t v61 = v60;
                      if (v52 < v55) {
                        break;
                      }
                      uint64_t v64 = (2 * v55) | 1;
                      unint64_t v56 = &v98[8 * v64];
                      uint64_t v65 = 2 * v55 + 2;
                      if (v65 < v12)
                      {
                        uint64_t v60 = *(void **)v56;
                        int v66 = (void *)*((void *)v56 + 1);
                        if (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*(void **)v56, v66))
                        {
                          uint64_t v60 = v66;
                          v56 += 8;
                          uint64_t v55 = v65;
                        }
                        else
                        {
                          uint64_t v55 = v64;
                        }
                      }
                      else
                      {
                        uint64_t v60 = *(void **)v56;
                        uint64_t v55 = (2 * v55) | 1;
                      }
                      uint64_t result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v60, v62);
                      uint64_t v61 = v63;
                    }
                    while (!result);
                    *(void *)int v63 = v62;
                    a2 = v89;
                    uint64_t v11 = v90;
                    int64_t v54 = v96;
                  }
                }
                int64_t v53 = v54 - 1;
              }
              while (v54);
              uint64_t v67 = (unint64_t)v11 >> 3;
              int v68 = v98;
              do
              {
                int v69 = a2;
                uint64_t v70 = 0;
                uint64_t v71 = v67 - 2;
                uint64_t v94 = *(void **)v68;
                if (v67 < 2) {
                  uint64_t v71 = v67 - 1;
                }
                uint64_t v72 = v71 >> 1;
                do
                {
                  int v73 = &v68[8 * v70 + 8];
                  uint64_t v74 = (2 * v70) | 1;
                  uint64_t v75 = 2 * v70 + 2;
                  if (v75 >= v67)
                  {
                    long long v78 = *(void **)v73;
                    uint64_t v70 = (2 * v70) | 1;
                  }
                  else
                  {
                    long long v76 = *(void **)v73;
                    uint64_t v77 = *(void **)&v68[8 * v70 + 16];
                    uint64_t result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*(void **)v73, v77);
                    if (result) {
                      long long v78 = v77;
                    }
                    else {
                      long long v78 = v76;
                    }
                    if (result)
                    {
                      v73 += 8;
                      uint64_t v70 = v75;
                    }
                    else
                    {
                      uint64_t v70 = v74;
                    }
                  }
                  *(void *)int v68 = v78;
                  int v68 = v73;
                }
                while (v70 <= v72);
                a2 = v69 - 8;
                if (v73 == v69 - 8)
                {
                  *(void *)int v73 = v94;
                }
                else
                {
                  *(void *)int v73 = *(void *)a2;
                  *(void *)a2 = v94;
                  uint64_t v79 = v73 - v98 + 8;
                  if (v79 >= 9)
                  {
                    unint64_t v80 = (unint64_t)((v79 >> 3) - 2) >> 1;
                    std::string::size_type v81 = &v98[8 * v80];
                    uint64_t v82 = *(void **)v81;
                    long long v83 = *(void **)v73;
                    uint64_t result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*(void **)v81, *(void **)v73);
                    if (result)
                    {
                      do
                      {
                        int v84 = v81;
                        *(void *)int v73 = v82;
                        if (!v80) {
                          break;
                        }
                        unint64_t v80 = (v80 - 1) >> 1;
                        std::string::size_type v81 = &v98[8 * v80];
                        uint64_t v82 = *(void **)v81;
                        uint64_t result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*(void **)v81, v83);
                        int v73 = v84;
                      }
                      while ((result & 1) != 0);
                      *(void *)int v84 = v83;
                    }
                  }
                }
                BOOL v85 = v67-- <= 2;
                int v68 = v98;
              }
              while (!v85);
            }
            return result;
          }
          unint64_t v13 = (unint64_t)v12 >> 1;
          long long v14 = &v9[8 * ((unint64_t)v12 >> 1)];
          if ((unint64_t)v11 < 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((void **)v14, (void **)v9, (void **)v95);
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((void **)v9, (void **)v14, (void **)v95);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((void **)v9 + 1, (void **)v14 - 1, (void **)v92);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((void **)v9 + 2, (void **)&v9[8 * v13 + 8], (void **)v91);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((void **)v14 - 1, (void **)v14, (void **)&v9[8 * v13 + 8]);
            int v15 = *(void **)v9;
            *(void *)uint64_t v9 = *(void *)v14;
            *(void *)long long v14 = v15;
          }
          --a3;
          unint64_t v16 = *(void **)v9;
          uint64_t v17 = v9;
          if (a4) {
            break;
          }
          uint64_t v17 = v9;
          if (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*((void **)v9 - 1), *(void **)v9))
          {
            break;
          }
          uint64_t result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v16, *(void **)v95);
          if (result)
          {
            do
            {
              int v31 = (void *)*((void *)v9 + 1);
              v9 += 8;
              uint64_t result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v16, v31);
            }
            while ((result & 1) == 0);
          }
          else
          {
            BOOL v32 = v9 + 8;
            do
            {
              uint64_t v9 = v32;
              if (v32 >= a2) {
                break;
              }
              v32 += 8;
              uint64_t result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v16, *(void **)v9);
            }
            while (!result);
          }
          int v33 = a2;
          if (v9 < a2)
          {
            int v33 = a2;
            do
            {
              int v34 = (void *)*((void *)v33 - 1);
              v33 -= 8;
              uint64_t result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v16, v34);
            }
            while ((result & 1) != 0);
          }
          int v35 = a2;
          if (v9 < v33)
          {
            int v36 = *(void **)v9;
            unint64_t v37 = *(void **)v33;
            do
            {
              *(void *)uint64_t v9 = v37;
              *(void *)int v33 = v36;
              do
              {
                int v38 = (void *)*((void *)v9 + 1);
                v9 += 8;
                int v36 = v38;
              }
              while (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v16, v38));
              do
              {
                BOOL v39 = (void *)*((void *)v33 - 1);
                v33 -= 8;
                unint64_t v37 = v39;
                uint64_t result = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v16, v39);
              }
              while ((result & 1) != 0);
            }
            while (v9 < v33);
          }
          BOOL v40 = v9 - 8;
          BOOL v4 = (unint64_t)(v9 - 8) >= v10;
          BOOL v5 = v9 - 8 == (char *)v10;
          a2 = v35;
          if (v9 - 8 != (char *)v10) {
            *(void *)unint64_t v10 = *(void *)v40;
          }
          a4 = 0;
          *(void *)BOOL v40 = v16;
        }
        do
        {
          long long v18 = v17;
          unint64_t v20 = (void *)*((void *)v17 + 1);
          v17 += 8;
          unint64_t v19 = v20;
        }
        while (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v20, v16));
        uint64_t v97 = a3;
        int v21 = a2;
        if (v18 == (char *)v10)
        {
          int v21 = a2;
          do
          {
            if (v17 >= v21) {
              break;
            }
            uint64_t v23 = (void *)*((void *)v21 - 1);
            v21 -= 8;
          }
          while (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v23, v16));
        }
        else
        {
          do
          {
            uint64_t v22 = (void *)*((void *)v21 - 1);
            v21 -= 8;
          }
          while (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v22, v16));
        }
        BOOL v8 = (char *)v10;
        std::string::size_type v24 = a2;
        if (v17 < v21)
        {
          int v25 = *(void **)v21;
          uint64_t v26 = v17;
          BOOL v27 = v21;
          do
          {
            *(void *)uint64_t v26 = v25;
            *(void *)BOOL v27 = v19;
            do
            {
              long long v18 = v26;
              int v28 = (void *)*((void *)v26 + 1);
              v26 += 8;
              unint64_t v19 = v28;
            }
            while (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v28, v16));
            do
            {
              uint64_t v29 = (void *)*((void *)v27 - 1);
              v27 -= 8;
              int v25 = v29;
            }
            while (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v29, v16));
          }
          while (v26 < v27);
        }
        if (v18 != v8) {
          *(void *)BOOL v8 = *(void *)v18;
        }
        *(void *)long long v18 = v16;
        BOOL v4 = v17 >= v21;
        a2 = v24;
        a3 = v97;
        if (v4) {
          break;
        }
LABEL_31:
        uint64_t result = std::__introsort<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Block> const*> &,google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Block> const**,false>(v8, v18, v97, a4 & 1);
        a4 = 0;
        uint64_t v9 = v18 + 8;
      }
      BOOL v30 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Block> const*> &,google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Block> const**>((void **)v8, (void **)v18);
      uint64_t v9 = v18 + 8;
      uint64_t result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Block> const*> &,google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Block> const**>((void **)v18 + 1, (void **)v24);
      if (result) {
        break;
      }
      if (!v30) {
        goto LABEL_31;
      }
    }
    a2 = v18;
    if (!v30) {
      continue;
    }
    return result;
  }
}

google::protobuf::Arena **google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(google::protobuf::Arena *a1, google::protobuf::Arena *a2, google::protobuf::Arena *a3)
{
  if (!a3) {
    operator new();
  }
  result[1] = 0;
  result[2] = (google::protobuf::Arena *)&google::protobuf::internal::fixed_address_empty_string;
  result[3] = 0;
  result[4] = a3;
  *uint64_t result = (google::protobuf::Arena *)&unk_1EF0DB6D0;
  result[6] = a1;
  result[7] = a2;
  *((_DWORD *)result + 1CoreML::Specification::MILSpec::Block::New(this, 0) = 3;
  return result;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::MapEntryWrapper::value(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::MapEntryWrapper::key(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::InternalSerializeWithCachedSizesToArray(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  int v6 = (const void **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 136))(a1);
  *a3 = 10;
  uint64_t v7 = google::protobuf::io::CodedOutputStream::WriteStringWithSizeToArray(v6, a3 + 1);
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 144))(a1);
  *uint64_t v7 = 18;
  uint64_t v9 = v7 + 1;
  unsigned int v10 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 120))(v8);
  if (v10 < 0x80)
  {
    LOBYTE(v11) = v10;
  }
  else
  {
    do
    {
      *v9++ = v10 | 0x80;
      unsigned int v11 = v10 >> 7;
      unsigned int v12 = v10 >> 14;
      v10 >>= 7;
    }
    while (v12);
  }
  unsigned char *v9 = v11;
  unint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)v8 + 128);

  return v13(v8, a2, v9 + 1);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::GetCachedSize(_DWORD *a1)
{
  int v2 = a1[10];
  if (v2)
  {
    uint64_t v6 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 136))(a1);
    int v7 = *(unsigned __int8 *)(v6 + 23);
    if ((v7 & 0x80u) != 0) {
      int v7 = *(_DWORD *)(v6 + 8);
    }
    unsigned int v3 = v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((a1[10] & 2) != 0) {
      goto LABEL_3;
    }
LABEL_7:
    unsigned int v5 = 0;
    return v5 + v3;
  }
  unsigned int v3 = 0;
  if ((v2 & 2) == 0) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v4 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 144))(a1);
  unsigned int v5 = *(_DWORD *)(v4 + 120) + ((9 * (__clz(*(_DWORD *)(v4 + 120) | 1) ^ 0x1F) + 73) >> 6) + 1;
  return v5 + v3;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::SerializeWithCachedSizes(uint64_t a1, google::protobuf::io::CodedOutputStream *a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 136))(a1);
  google::protobuf::internal::WireFormatLite::WriteString(1u, v4, a2);
  unsigned int v5 = (google::protobuf::internal::WireFormatLite *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 144))(a1);

  return google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(v5, a2, v6, v7);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::ByteSizeLong(_DWORD *a1)
{
  int v2 = a1[10];
  if (v2)
  {
    uint64_t v7 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 136))(a1);
    int v8 = *(unsigned __int8 *)(v7 + 23);
    if ((v8 & 0x80u) != 0) {
      int v8 = *(_DWORD *)(v7 + 8);
    }
    uint64_t v3 = (int)(v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6)) + 1;
    if ((a1[10] & 2) != 0) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v6 = 0;
    return v6 + v3;
  }
  uint64_t v3 = 0;
  if ((v2 & 2) == 0) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v4 = (CoreML::Specification::MILSpec::Block *)(*(uint64_t (**)(_DWORD *))(*(void *)a1 + 144))(a1);
  uint64_t v5 = CoreML::Specification::MILSpec::Block::ByteSizeLong(v4);
  uint64_t v6 = v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  return v6 + v3;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::MergePartialFromCodedStream(uint64_t a1, google::protobuf::io::CodedInputStream *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v5 = *(char **)this;
        if (*(void *)this >= *((void *)this + 1))
        {
          LODWORD(TagFallback) = 0;
        }
        else
        {
          unint64_t TagFallback = *v5;
          if ((*v5 & 0x80000000) == 0)
          {
            *(void *)this = v5 + 1;
            goto LABEL_6;
          }
        }
        unint64_t TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(this, TagFallback);
LABEL_6:
        if (TagFallback != 10) {
          break;
        }
        *(_DWORD *)(a1 + 40) |= 1u;
        uint64_t v7 = *(long long **)(a1 + 16);
        if (v7 == &google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstance();
        }
        uint64_t result = google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)this, (std::string *)v7);
        if (!result) {
          return result;
        }
        int v9 = *(_DWORD *)(a1 + 40) | 1;
        *(_DWORD *)(a1 + 4CoreML::Specification::MILSpec::Block::New(this, 0) = v9;
        unsigned int v10 = *(char **)this;
        if (*(void *)this < *((void *)this + 1) && *v10 == 18)
        {
          *(void *)this = v10 + 1;
          goto LABEL_19;
        }
      }
      if (TagFallback != 18) {
        break;
      }
      int v9 = *(_DWORD *)(a1 + 40);
LABEL_19:
      *(_DWORD *)(a1 + 4CoreML::Specification::MILSpec::Block::New(this, 0) = v9 | 2;
      Aligned = *(google::protobuf::Arena ***)(a1 + 24);
      if (!Aligned)
      {
        unsigned int v12 = *(google::protobuf::Arena **)(a1 + 32);
        if (!v12) {
          operator new();
        }
        CoreML::Specification::MILSpec::Block::Block((CoreML::Specification::MILSpec::Block *)Aligned);
        unint64_t v13 = google::protobuf::Arena::AllocateAligned(v12, 0, 24);
        CoreML::Specification::MILSpec::NamedValueType *v13 = (google::protobuf::Arena *)Aligned;
        v13[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Block>;
        long long v14 = (unint64_t *)((char *)v12 + 32);
        do
          unint64_t v15 = __ldxr(v14);
        while (__stxr((unint64_t)v13, v14));
        v13[2] = (google::protobuf::Arena *)v15;
        *(void *)(a1 + 24) = Aligned;
      }
      unint64_t v16 = *(char **)this;
      if (*(void *)this >= *((void *)this + 1) || *v16 < 0)
      {
        int VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(this);
        if (VarintSizeAsIntFallback < 0) {
          return 0;
        }
      }
      else
      {
        int VarintSizeAsIntFallback = *v16;
        *(void *)this = v16 + 1;
      }
      int v18 = google::protobuf::io::CodedInputStream::PushLimit(this, VarintSizeAsIntFallback);
      int v20 = *((_DWORD *)this + 13);
      BOOL v21 = __OFSUB__(v20--, 1);
      *((_DWORD *)this + 13) = v20;
      if (v20 < 0 != v21) {
        return 0;
      }
      int v22 = v18;
      uint64_t result = CoreML::Specification::MILSpec::Block::MergePartialFromCodedStream((CoreML::Specification::MILSpec::Block *)Aligned, this, v19);
      if (!result) {
        return result;
      }
      uint64_t result = google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(this, v22);
      if (!result) {
        return result;
      }
      *(_DWORD *)(a1 + 40) |= 2u;
      if (*(void *)this == *((void *)this + 1)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)this + 36) = 1;
        return result;
      }
    }
    if (!TagFallback || (TagFallback & 7) == 4) {
      return 1;
    }
    if ((google::protobuf::internal::WireFormatLite::SkipField(this, (google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
  }
    }
}

void sub_19EB314C0(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C4058FDD882);
  _Unwind_Resume(a1);
}

char *google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::CheckTypeAndMergeFrom(char *result, _DWORD *a2)
{
  int v2 = a2[10];
  if (v2)
  {
    uint64_t v4 = result;
    if (v2)
    {
      uint64_t v5 = (std::string **)(result + 16);
      if (*((long long **)result + 2) == &google::protobuf::internal::fixed_address_empty_string) {
        google::protobuf::internal::ArenaStringPtr::CreateInstance();
      }
      uint64_t v6 = (const std::string *)(*(uint64_t (**)(_DWORD *))(*(void *)a2 + 136))(a2);
      if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
        google::protobuf::internal::ArenaStringPtr::CreateInstance();
      }
      uint64_t result = (char *)std::string::operator=(*v5, v6);
      *((_DWORD *)v4 + 10) |= 1u;
      int v2 = a2[10];
    }
    if ((v2 & 2) != 0)
    {
      if (!*((void *)v4 + 3))
      {
        uint64_t v7 = (google::protobuf::Arena *)*((void *)v4 + 4);
        if (!v7) {
          operator new();
        }
        CoreML::Specification::MILSpec::Block::Block((CoreML::Specification::MILSpec::Block *)Aligned);
        int v9 = google::protobuf::Arena::AllocateAligned(v7, 0, 24);
        unsigned char *v9 = (google::protobuf::Arena *)Aligned;
        v9[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Block>;
        unsigned int v10 = (unint64_t *)((char *)v7 + 32);
        do
          unint64_t v11 = __ldxr(v10);
        while (__stxr((unint64_t)v9, v10));
        v9[2] = (google::protobuf::Arena *)v11;
        *((void *)v4 + 3) = Aligned;
      }
      unsigned int v12 = (const CoreML::Specification::MILSpec::Block *)(*(uint64_t (**)(_DWORD *))(*(void *)a2 + 144))(a2);
      uint64_t result = (char *)CoreML::Specification::MILSpec::Block::MergeFrom(*((CoreML::Specification::MILSpec::Block **)v4 + 3), v12);
      *((_DWORD *)v4 + 10) |= 2u;
    }
  }
  return result;
}

void sub_19EB31674(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C4058FDD882);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::IsInitialized()
{
  return 1;
}

void google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Clear(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if ((long long *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(unsigned char **)uint64_t v2 = 0;
      *(void *)(v2 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v2 = 0;
      *(unsigned char *)(v2 + 23) = 0;
    }
  }
  uint64_t v3 = *(CoreML::Specification::MILSpec::Block **)(a1 + 24);
  if (v3) {
    CoreML::Specification::MILSpec::Block::Clear(v3);
  }
  *(_DWORD *)(a1 + 40) &= 0xFFFFFFFC;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::GetArena(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

google::protobuf::Arena **google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::New(uint64_t a1, google::protobuf::Arena *a2)
{
  if (!a2) {
    operator new();
  }
  result[1] = 0;
  result[2] = (google::protobuf::Arena *)&google::protobuf::internal::fixed_address_empty_string;
  result[3] = 0;
  result[4] = a2;
  *((_DWORD *)result + 1CoreML::Specification::MILSpec::Block::New(this, 0) = 0;
  uint64_t v5 = *(google::protobuf::Arena **)(a1 + 8);
  *uint64_t result = (google::protobuf::Arena *)&unk_1EF0DC3F0;
  result[1] = v5;
  return result;
}

void google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::New()
{
}

void *google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, (char *)&unk_19EC86ACE);
}

void google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::MapEntryWrapper::~MapEntryWrapper(void *a1)
{
  google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryImpl(a1);

  JUMPOUT(0x19F3C1920);
}

void *google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryImpl(void *a1)
{
  *a1 = &unk_1EF0DB778;
  if ((void *)a1[1] != a1 && !a1[4])
  {
    google::protobuf::internal::MapTypeHandler<(google::protobuf::internal::WireFormatLite::FieldType)9,std::string>::DeleteNoArena(a1[2]);
    uint64_t v2 = a1[3];
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }
  return a1;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::value(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2)
  {
    int v5 = 3;
    uint64_t v6 = "/Library/Caches/com.apple.xbs/Sources/CoreML/coremltools-internal/deps/protobuf/src/google/protobuf/map_entry_lite.h";
    int v7 = 162;
    memset(&__p, 0, sizeof(__p));
    std::string::append(&__p, "CHECK failed: default_instance_ != NULL: ");
    google::protobuf::internal::LogMessage::Finish((google::protobuf::internal::LogMessage *)&v5);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    uint64_t v2 = *(void *)(a1 + 8);
  }
  uint64_t v3 = *(void *)(v2 + 24);
  if (*(void *)(a1 + 24)) {
    return *(void *)(a1 + 24);
  }
  else {
    return v3;
  }
}

void sub_19EB31970(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::key(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryImpl(void *a1)
{
  google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryImpl(a1);

  JUMPOUT(0x19F3C1920);
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Block> const*> &,google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Block> const**>(void **a1, void **a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = *(a2 - 1);
      int v7 = *a1;
      if (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v6, *a1))
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      int v8 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(a1, a1 + 1, a1 + 2);
      int v9 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v10 = 0;
      uint64_t v11 = 24;
      break;
  }
  while (1)
  {
    unsigned int v12 = *v9;
    unint64_t v13 = *v8;
    if (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*v9, v13))
    {
      uint64_t v14 = v11;
      while (1)
      {
        *(void **)((char *)a1 + v14) = v13;
        uint64_t v15 = v14 - 8;
        if (v14 == 8) {
          break;
        }
        unint64_t v13 = *(void **)((char *)a1 + v14 - 16);
        BOOL v16 = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v12, v13);
        uint64_t v14 = v15;
        if (!v16)
        {
          uint64_t v17 = (void **)((char *)a1 + v15);
          goto LABEL_12;
        }
      }
      uint64_t v17 = a1;
LABEL_12:
      void *v17 = v12;
      if (++v10 == 8) {
        return v9 + 1 == a2;
      }
    }
    int v8 = v9;
    v11 += 8;
    if (++v9 == a2) {
      return 1;
    }
  }
}

uint64_t CoreML::Specification::MILSpec::Function::ByteSizeLong(CoreML::Specification::MILSpec::Function *this)
{
  int v2 = *((_DWORD *)this + 6);
  if (v2)
  {
    int v3 = 0;
    uint64_t v4 = *((unsigned int *)this + 6);
    do
    {
      uint64_t v5 = CoreML::Specification::MILSpec::NamedValueType::ByteSizeLong(*(CoreML::Specification::MILSpec::NamedValueType **)(*((void *)this + 4) + 8 * v3 + 8));
      v4 += v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6);
      ++v3;
    }
    while (v2 != v3);
  }
  else
  {
    uint64_t v4 = 0;
  }
  uint64_t v6 = (void *)*((void *)this + 8);
  uint64_t v7 = *(unsigned int *)v6;
  google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::begin(v22, v6);
  int v8 = 0;
  uint64_t v9 = v7 + v4;
  while (v22[0])
  {
    int v10 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(*((google::protobuf::Arena **)v22[0] + 3), (google::protobuf::Arena *)(*((void *)v22[0] + 3) + 24), *((google::protobuf::Arena **)this + 5));
    if (v8 != v10)
    {
      if (v8) {
        (*((void (**)(google::protobuf::Arena **))*v8 + 1))(v8);
      }
      int v8 = v10;
    }
    uint64_t v11 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::ByteSizeLong(v8);
    v9 += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6);
    google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::KeyValuePair const>::operator++(v22);
  }
  if (v8) {
    (*((void (**)(google::protobuf::Arena **))*v8 + 1))(v8);
  }
  unsigned int v12 = (void *)*((void *)this + 12);
  uint64_t v13 = *(unsigned int *)v12;
  google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::begin(v22, v12);
  uint64_t v14 = 0;
  uint64_t v15 = v13 + v9;
  while (v22[0])
  {
    BOOL v16 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(*((google::protobuf::Arena **)v22[0] + 3), (google::protobuf::Arena *)(*((void *)v22[0] + 3) + 24), *((google::protobuf::Arena **)this + 9));
    if (v14 != v16)
    {
      if (v14) {
        (*((void (**)(google::protobuf::Arena **))*v14 + 1))(v14);
      }
      uint64_t v14 = v16;
    }
    uint64_t v17 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::ByteSizeLong(v14);
    v15 += v17 + ((9 * (__clz(v17 | 1) ^ 0x1F) + 73) >> 6);
    google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::KeyValuePair const>::operator++(v22);
  }
  if (v14) {
    (*((void (**)(google::protobuf::Arena **))*v14 + 1))(v14);
  }
  uint64_t v18 = *((void *)this + 13);
  uint64_t v19 = *(unsigned __int8 *)(v18 + 23);
  if (*(char *)(v18 + 23) < 0)
  {
    if (!*(void *)(v18 + 8)) {
      goto LABEL_29;
    }
  }
  else if (!*(unsigned char *)(v18 + 23))
  {
    goto LABEL_29;
  }
  uint64_t v20 = *(void *)(v18 + 8);
  if ((v19 & 0x80u) == 0) {
    uint64_t v20 = v19;
  }
  v15 += v20 + ((9 * (__clz(v20 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_29:
  *((_DWORD *)this + 28) = v15;
  return v15;
}

void sub_19EB31DFC(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CoreML::Specification::MILSpec::Function::MergePartialFromCodedStream(CoreML::Specification::MILSpec::Function *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  int64_t v54 = (google::protobuf::Arena **)((char *)this + 72);
  uint64_t v4 = (void *)((char *)this + 80);
  uint64_t v5 = (google::protobuf::Arena **)((char *)this + 40);
  uint64_t v6 = (void *)((char *)this + 48);
  uint64_t v7 = (std::string **)((char *)this + 104);
  int v8 = (CoreML::Specification::MILSpec::Function *)((char *)this + 16);
  while (1)
  {
    uint64_t v9 = *(char **)a2;
    if (*(void *)a2 >= *((void *)a2 + 1))
    {
      LODWORD(v1CoreML::Specification::MILSpec::Block::New(this, 0) = 0;
    }
    else
    {
      uint64_t v10 = *v9;
      if (*v9 >= 1)
      {
        *(void *)a2 = v9 + 1;
        unint64_t v11 = v10 | 0x100000000;
        if ((v11 & 0x100000000) != 0) {
          goto LABEL_8;
        }
        goto LABEL_27;
      }
    }
    unsigned int TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v10);
    unint64_t v11 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
    if ((v11 & 0x100000000) != 0)
    {
LABEL_8:
      switch(v11 >> 3)
      {
        case 1u:
          if (v11 != 10) {
            break;
          }
          uint64_t v13 = google::protobuf::internal::RepeatedPtrFieldBase::Add<google::protobuf::RepeatedPtrField<CoreML::Specification::MILSpec::NamedValueType>::TypeHandler>(v8);
          uint64_t v14 = *(char **)a2;
          if (*(void *)a2 >= *((void *)a2 + 1) || *v14 < 0)
          {
            int VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (VarintSizeAsIntFallback < 0) {
              return 0;
            }
          }
          else
          {
            int VarintSizeAsIntFallback = *v14;
            *(void *)a2 = v14 + 1;
          }
          int v43 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
          int v45 = *((_DWORD *)a2 + 13);
          BOOL v26 = __OFSUB__(v45--, 1);
          *((_DWORD *)a2 + 13) = v45;
          if (v45 < 0 == v26)
          {
            int v46 = v43;
            if (CoreML::Specification::MILSpec::NamedValueType::MergePartialFromCodedStream((CoreML::Specification::MILSpec::NamedValueType *)v13, a2, v44))
            {
              if (google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v46)) {
                goto LABEL_32;
              }
            }
          }
          return 0;
        case 2u:
          if (v11 != 18) {
            break;
          }
          if (*v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
            google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
          }
          if (!google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)a2, *v7)) {
            return 0;
          }
          uint64_t v20 = (unsigned int *)*v7;
          if (SHIBYTE((*v7)->__r_.__value_.__r.__words[2]) < 0)
          {
            uint64_t v20 = *(unsigned int **)v20;
            std::string::size_type size = (*v7)->__r_.__value_.__l.__size_;
          }
          else
          {
            LODWORD(size) = HIBYTE((*v7)->__r_.__value_.__r.__words[2]);
          }
          if (!google::protobuf::internal::WireFormatLite::VerifyUtf8String(v20, size, 0, (uint64_t)"CoreML.Specification.MILSpec.Function.opset"))return 0; {
          goto LABEL_32;
          }
        case 3u:
          if (v11 != 26) {
            break;
          }
          uint64_t v55 = v5;
          unint64_t v56 = v6;
          memset(&__p, 0, sizeof(__p));
          BOOL v59 = 0;
          BOOL v16 = *(char **)a2;
          if (*(void *)a2 >= *((void *)a2 + 1) || *v16 < 0)
          {
            int v17 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (v17 < 0) {
              goto LABEL_104;
            }
          }
          else
          {
            int v17 = *v16;
            *(void *)a2 = v16 + 1;
          }
          int v24 = google::protobuf::io::CodedInputStream::PushLimit(a2, v17);
          int v25 = *((_DWORD *)a2 + 13);
          BOOL v26 = __OFSUB__(v25--, 1);
          *((_DWORD *)a2 + 13) = v25;
          if (v25 < 0 != v26) {
            goto LABEL_104;
          }
          int v27 = v24;
          int v28 = *(char **)a2;
          if (*(void *)a2 < *((void *)a2 + 1) && *v28 == 10)
          {
            *(void *)a2 = v28 + 1;
            if (!google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)a2, &__p)) {
              goto LABEL_104;
            }
            if ((int)(*((_DWORD *)a2 + 2) - *(void *)a2) >= 1 && **(unsigned char **)a2 == 18)
            {
              uint64_t v29 = *(void *)v56[2];
              uint64_t v58 = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::operator[]((uint64_t)v56, (uint64_t)&__p);
              if (v29 != *(void *)v56[2])
              {
                google::protobuf::io::CodedInputStream::Skip(a2, 1u);
                BOOL v30 = (CoreML::Specification::MILSpec::Block *)v58;
                int v31 = *(char **)a2;
                if (*(void *)a2 >= *((void *)a2 + 1) || *v31 < 0)
                {
                  int v32 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                  if (v32 < 0) {
                    goto LABEL_103;
                  }
                }
                else
                {
                  int v32 = *v31;
                  *(void *)a2 = v31 + 1;
                }
                int v47 = google::protobuf::io::CodedInputStream::PushLimit(a2, v32);
                int v49 = *((_DWORD *)a2 + 13);
                BOOL v26 = __OFSUB__(v49--, 1);
                *((_DWORD *)a2 + 13) = v49;
                if (v49 < 0 != v26
                  || (int v50 = v47,
                      !CoreML::Specification::MILSpec::Block::MergePartialFromCodedStream(v30, a2, v48))
                  || !google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v50))
                {
LABEL_103:
                  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::erase(v56, (unsigned __int8 *)&__p);
                  goto LABEL_104;
                }
                if (*(void *)a2 == *((void *)a2 + 1)
                  && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
                {
                  *((_DWORD *)a2 + 8) = 0;
                  *((unsigned char *)a2 + 36) = 1;
                  goto LABEL_86;
                }
                int BeyondKeyValuePair = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>>::ReadBeyondKeyValuePair((uint64_t)&v55, (uint64_t)a2);
                goto LABEL_85;
              }
            }
          }
          else
          {
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            memset(&__p, 0, sizeof(__p));
          }
          int v33 = google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::NewEntry(*v55);
          if (v59 != v33)
          {
            if (v59) {
              (*((void (**)(void))*v59 + 1))();
            }
            BOOL v59 = v33;
          }
          int v34 = (long long *)v33[2];
          *((_DWORD *)v33 + 10) |= 1u;
          if (v34 == &google::protobuf::internal::fixed_address_empty_string) {
            google::protobuf::internal::ArenaStringPtr::CreateInstance();
          }
          std::string::operator=((std::string *)v34, &__p);
          int BeyondKeyValuePair = (*((uint64_t (**)(google::protobuf::Arena **, google::protobuf::io::CodedInputStream *))*v59
                                + 11))(v59, a2);
          if (BeyondKeyValuePair) {
            google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>>::UseKeyAndValueFromEntry((uint64_t)&v55);
          }
          if ((*((uint64_t (**)(google::protobuf::Arena **))*v59 + 5))(v59))
          {
            BOOL v59 = 0;
            if ((BeyondKeyValuePair & 1) == 0)
            {
              BOOL v36 = 0;
              int v23 = 6;
              goto LABEL_99;
            }
            goto LABEL_86;
          }
LABEL_85:
          if (!BeyondKeyValuePair) {
            goto LABEL_104;
          }
LABEL_86:
          if (!google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v27)) {
            goto LABEL_104;
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_p = (unsigned int *)&__p;
          }
          else {
            p_p = (unsigned int *)__p.__r_.__value_.__r.__words[0];
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int v52 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          }
          else {
            int v52 = __p.__r_.__value_.__r.__words[1];
          }
          BOOL v42 = google::protobuf::internal::WireFormatLite::VerifyUtf8String(p_p, v52, 0, (uint64_t)"CoreML.Specification.MILSpec.Function.BlockSpecializationsEntry.key");
LABEL_94:
          BOOL v36 = v42;
          if (v42) {
            int v23 = 0;
          }
          else {
            int v23 = 6;
          }
LABEL_97:
          if (v59) {
            (*((void (**)(google::protobuf::Arena **))*v59 + 1))(v59);
          }
LABEL_99:
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (!v36) {
            goto LABEL_33;
          }
          goto LABEL_32;
        case 4u:
          if (v11 != 34) {
            break;
          }
          uint64_t v55 = v54;
          unint64_t v56 = v4;
          memset(&__p, 0, sizeof(__p));
          BOOL v59 = 0;
          uint64_t v18 = *(char **)a2;
          if (*(void *)a2 >= *((void *)a2 + 1) || *v18 < 0)
          {
            int v19 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (v19 < 0) {
              goto LABEL_104;
            }
          }
          else
          {
            int v19 = *v18;
            *(void *)a2 = v18 + 1;
          }
          int v37 = google::protobuf::io::CodedInputStream::PushLimit(a2, v19);
          int v38 = *((_DWORD *)a2 + 13);
          BOOL v26 = __OFSUB__(v38--, 1);
          *((_DWORD *)a2 + 13) = v38;
          if (v38 < 0 != v26
            || (int v39 = v37,
                !google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>>::MergePartialFromCodedStream((uint64_t)&v55, (uint64_t)a2))|| !google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v39))
          {
LABEL_104:
            BOOL v36 = 0;
            int v23 = 6;
            goto LABEL_97;
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            BOOL v40 = (unsigned int *)&__p;
          }
          else {
            BOOL v40 = (unsigned int *)__p.__r_.__value_.__r.__words[0];
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int v41 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          }
          else {
            int v41 = __p.__r_.__value_.__r.__words[1];
          }
          BOOL v42 = google::protobuf::internal::WireFormatLite::VerifyUtf8String(v40, v41, 0, (uint64_t)"CoreML.Specification.MILSpec.Function.AttributesEntry.key");
          goto LABEL_94;
        default:
          break;
      }
    }
LABEL_27:
    if (!v11 || (v11 & 7) == 4) {
      return 1;
    }
    if (!google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v11, a3))return 0; {
LABEL_32:
    }
    int v23 = 0;
LABEL_33:
    if (v23) {
      return 0;
    }
  }
}

void sub_19EB32498(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::Map<std::string,std::string>>::~Parser((uint64_t)va);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::operator[](uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a1 + 16);
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  std::string::size_type v24 = 0;
  google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper(v26, (uint64_t)v4, (unsigned __int8 *)&__p, 0);
  uint64_t v6 = v26[0];
  if (v26[0]) {
    goto LABEL_18;
  }
  unint64_t v7 = v4[1];
  unint64_t v8 = *v4 + 1;
  unint64_t v9 = ((3 * v7) >> 2) & 0xFFFFFFFFFFFFFFFLL;
  if (v9 <= v8)
  {
    if (v7 <= 0x800000000000000)
    {
      uint64_t v20 = 2 * v7;
LABEL_33:
      google::protobuf::Map<std::string,std::string>::InnerMap::Resize((uint64_t)v4, v20, v5);
      google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper(v25, (uint64_t)v4, (unsigned __int8 *)&__p, 0);
      uint64_t v11 = v25[3];
      goto LABEL_11;
    }
  }
  else if (v7 >= 9 && (12 * v7) >> 6 >= v8)
  {
    char v21 = 0;
    unint64_t v22 = ((5 * v8) >> 2) + 1;
    do
      ++v21;
    while (v22 << v21 < v9);
    uint64_t v20 = v7 >> v21 <= 8 ? 8 : v7 >> v21;
    if (v20 != v7) {
      goto LABEL_33;
    }
  }
  uint64_t v11 = v26[3];
LABEL_11:
  unsigned int v12 = (google::protobuf::Arena *)v4[5];
  if (v12) {
    Aligned = (std::string *)google::protobuf::Arena::AllocateAligned(v12, MEMORY[0x1E4FBA3A0], 40);
  }
  else {
    Aligned = (std::string *)operator new(0x28uLL);
  }
  uint64_t v14 = (std::string::__raw *)Aligned;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(Aligned, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    long long v15 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    Aligned->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
    *(_OWORD *)&Aligned->__r_.__value_.__l.__data_ = v15;
  }
  v14[1].__words[0] = v24;
  google::protobuf::Map<std::string,std::string>::InnerMap::InsertUnique(v25, (uint64_t)v4, v11, v14);
  ++*v4;
  uint64_t v6 = v25[0];
LABEL_18:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  BOOL v16 = *(google::protobuf::Arena ***)(v6 + 24);
  if (!v16)
  {
    if (!*(void *)a1) {
      operator new();
    }
    BOOL v16 = google::protobuf::Arena::AllocateAligned(*(google::protobuf::Arena **)a1, MEMORY[0x1E4FBA3A0], 152);
    int v17 = *(google::protobuf::Arena **)a1;
    v16[1] = 0;
    v16[2] = 0;
    *BOOL v16 = 0;
    google::protobuf::Arena::OwnDestructor<std::string>((google::protobuf::Arena **)v17, (google::protobuf::Arena *)v16);
    uint64_t v18 = *(google::protobuf::Arena **)a1;
    CoreML::Specification::MILSpec::Block::Block((CoreML::Specification::MILSpec::Block *)(v16 + 3));
    google::protobuf::Arena::OwnDestructor<CoreML::Specification::MILSpec::Block>((google::protobuf::Arena **)v18, (google::protobuf::Arena *)(v16 + 3));
    std::string::operator=((std::string *)v16, (const std::string *)a2);
    *(void *)(v6 + 24) = v16;
  }
  return v16 + 3;
}

void sub_19EB32738(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  MEMORY[0x19F3C1920](v14, 0x10B2C4008C62E43);
  _Unwind_Resume(a1);
}

double google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::erase(void *a1, unsigned __int8 *a2)
{
  google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper(&v6, a1[2], a2, 0);
  double result = *(double *)&v6;
  if ((void)v6)
  {
    long long v4 = v6;
    uint64_t v5 = v7;
    *(void *)&double result = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::erase((uint64_t)&v6, a1, &v4).n128_u64[0];
  }
  return result;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>>::ReadBeyondKeyValuePair(uint64_t a1, uint64_t a2)
{
  long long v4 = google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::NewEntry(**(google::protobuf::Arena ***)a1);
  uint64_t v5 = *(google::protobuf::Arena ***)(a1 + 48);
  if (v5 != v4)
  {
    if (v5) {
      (*((void (**)(google::protobuf::Arena **))*v5 + 1))(v5);
    }
    *(void *)(a1 + 48) = v4;
  }
  long long v6 = *(CoreML::Specification::MILSpec::Block **)(a1 + 40);
  *((_DWORD *)v4 + 10) |= 2u;
  Aligned = (google::protobuf::Arena **)v4[3];
  if (!Aligned)
  {
    unint64_t v8 = v4[4];
    if (!v8) {
      operator new();
    }
    CoreML::Specification::MILSpec::Block::Block((CoreML::Specification::MILSpec::Block *)Aligned);
    unint64_t v9 = google::protobuf::Arena::AllocateAligned(v8, 0, 24);
    char *v9 = (google::protobuf::Arena *)Aligned;
    v9[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Block>;
    uint64_t v10 = (unint64_t *)((char *)v8 + 32);
    do
      unint64_t v11 = __ldxr(v10);
    while (__stxr((unint64_t)v9, v10));
    v9[2] = (google::protobuf::Arena *)v11;
    v4[3] = (google::protobuf::Arena *)Aligned;
  }
  if (v6 != (CoreML::Specification::MILSpec::Block *)Aligned) {
    CoreML::Specification::MILSpec::Block::InternalSwap((CoreML::Specification::MILSpec::Block *)Aligned, v6);
  }
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::erase(*(void **)(a1 + 8), (unsigned __int8 *)(a1 + 16));
  uint64_t v12 = *(void *)(a1 + 48);
  *(_DWORD *)(v12 + 40) |= 1u;
  uint64_t v13 = *(void *)(v12 + 16);
  if ((long long *)v13 == &google::protobuf::internal::fixed_address_empty_string) {
    google::protobuf::internal::ArenaStringPtr::CreateInstance();
  }
  if (*(char *)(v13 + 23) < 0) {
    operator delete(*(void **)v13);
  }
  long long v14 = *(_OWORD *)(a1 + 16);
  *(void *)(v13 + 16) = *(void *)(a1 + 32);
  *(_OWORD *)uint64_t v13 = v14;
  *(unsigned char *)(a1 + 39) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  uint64_t v15 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 48) + 88))(*(void *)(a1 + 48), a2);
  if (v15) {
    google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>>::UseKeyAndValueFromEntry(a1);
  }
  if ((*(uint64_t (**)(void))(**(void **)(a1 + 48) + 40))(*(void *)(a1 + 48))) {
    *(void *)(a1 + 48) = 0;
  }
  return v15;
}

void sub_19EB329FC(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C4058FDD882);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::NewEntry(google::protobuf::Arena *a1)
{
  if (!a1) {
    operator new();
  }
  result[1] = 0;
  result[2] = (google::protobuf::Arena *)&google::protobuf::internal::fixed_address_empty_string;
  result[3] = 0;
  result[4] = a1;
  *((_DWORD *)result + 1CoreML::Specification::MILSpec::Block::New(this, 0) = 0;
  *double result = (google::protobuf::Arena *)&unk_1EF0DC3F0;
  return result;
}

unsigned __int8 **google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>>::UseKeyAndValueFromEntry(uint64_t a1)
{
  int v2 = (const std::string *)(*(uint64_t (**)(void))(**(void **)(a1 + 48) + 136))(*(void *)(a1 + 48));
  std::string::operator=((std::string *)(a1 + 16), v2);
  double result = (unsigned __int8 **)google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::operator[](*(void *)(a1 + 8), a1 + 16);
  *(void *)(a1 + 4CoreML::Specification::MILSpec::Block::New(this, 0) = result;
  uint64_t v4 = *(void *)(a1 + 48);
  *(_DWORD *)(v4 + 40) |= 2u;
  Aligned = *(google::protobuf::Arena ***)(v4 + 24);
  if (!Aligned)
  {
    long long v6 = *(google::protobuf::Arena **)(v4 + 32);
    if (!v6) {
      operator new();
    }
    CoreML::Specification::MILSpec::Block::Block((CoreML::Specification::MILSpec::Block *)Aligned);
    uint64_t v7 = google::protobuf::Arena::AllocateAligned(v6, 0, 24);
    *uint64_t v7 = (google::protobuf::Arena *)Aligned;
    v7[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Block>;
    unint64_t v8 = (unint64_t *)((char *)v6 + 32);
    do
      unint64_t v9 = __ldxr(v8);
    while (__stxr((unint64_t)v7, v8));
    v7[2] = (google::protobuf::Arena *)v9;
    *(void *)(v4 + 24) = Aligned;
    double result = *(unsigned __int8 ***)(a1 + 40);
  }
  if (Aligned != (google::protobuf::Arena **)result)
  {
    return CoreML::Specification::MILSpec::Block::InternalSwap((CoreML::Specification::MILSpec::Block *)result, (CoreML::Specification::MILSpec::Block *)Aligned);
  }
  return result;
}

void sub_19EB32BDC(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C4058FDD882);
  _Unwind_Resume(a1);
}

unsigned __int8 **CoreML::Specification::MILSpec::Block::InternalSwap(CoreML::Specification::MILSpec::Block *this, CoreML::Specification::MILSpec::Block *a2)
{
  uint64_t v4 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  uint64_t v5 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v5;
  LODWORD(v5) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v5;
  LODWORD(v5) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v5;
  uint64_t v6 = *((void *)this + 10);
  *((void *)this + 1CoreML::Specification::MILSpec::Block::New(this, 0) = *((void *)a2 + 10);
  *((void *)a2 + 1CoreML::Specification::MILSpec::Block::New(this, 0) = v6;
  LODWORD(v6) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v6;
  LODWORD(v6) = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v6;
  double result = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::swap((unsigned __int8 **)this + 12, (uint64_t)a2 + 96);
  int v8 = *((_DWORD *)this + 30);
  *((_DWORD *)this + 3CoreML::Specification::MILSpec::Block::New(this, 0) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 3CoreML::Specification::MILSpec::Block::New(this, 0) = v8;
  return result;
}

unsigned __int8 **google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::swap(unsigned __int8 **result, uint64_t a2)
{
  int v3 = result;
  if (*result == *(unsigned __int8 **)a2)
  {
    int v4 = *((_DWORD *)result + 2);
    *((_DWORD *)result + 2) = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a2 + 8) = v4;
    uint64_t v5 = result[2];
    result[2] = *(unsigned __int8 **)(a2 + 16);
    *(void *)(a2 + 16) = v5;
  }
  else
  {
    uint64_t v6 = 0;
    int v7 = *((_DWORD *)result + 2);
    google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::Init((uint64_t)&v6);
    google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::begin(&v9, v3[2]);
    memset(v8, 0, sizeof(v8));
    google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::insert<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::const_iterator>(&v6, &v9, v8);
    google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::operator=(v3, a2);
    google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::operator=((unsigned __int8 **)a2, (uint64_t)&v6);
    return (unsigned __int8 **)google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::~Map(&v6);
  }
  return result;
}

void sub_19EB32D88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::~Map((uint64_t *)va);
  _Unwind_Resume(a1);
}

unsigned __int8 **google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::operator=(unsigned __int8 **a1, uint64_t a2)
{
  if (a1 != (unsigned __int8 **)a2)
  {
    google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::clear((uint64_t)a1);
    google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::begin(&v6, *(void **)(a2 + 16));
    memset(v5, 0, sizeof(v5));
    google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::insert<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::const_iterator>(a1, &v6, v5);
  }
  return a1;
}

unsigned __int8 **google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::insert<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::const_iterator>(unsigned __int8 **result, long long *a2, void *a3)
{
  long long v10 = *a2;
  uint64_t v11 = *((void *)a2 + 2);
  uint64_t v3 = v10;
  if ((void)v10 != *a3)
  {
    uint64_t v5 = (uint64_t)result;
    do
    {
      google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper(v12, *(void *)(v5 + 16), *(unsigned __int8 **)(v3 + 24), 0);
      if (!v12[0])
      {
        uint64_t v6 = *(void *)(v10 + 24);
        int v7 = (const CoreML::Specification::MILSpec::Value *)(v6 + 24);
        int v8 = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::operator[](v5, v6);
        if (v7 != (const CoreML::Specification::MILSpec::Value *)v8)
        {
          long long v9 = (std::string *)v8;
          CoreML::Specification::MILSpec::Value::Clear((CoreML::Specification::MILSpec::Value *)v8);
          CoreML::Specification::MILSpec::Value::MergeFrom(v9, v7);
        }
      }
      double result = google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::KeyValuePair const>::operator++((unsigned __int8 **)&v10);
      uint64_t v3 = v10;
    }
    while ((void)v10 != *a3);
  }
  return result;
}

google::protobuf::Arena **google::protobuf::Arena::OwnDestructor<CoreML::Specification::MILSpec::Block>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    double result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *double result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Block>;
    int v4 = (unint64_t *)(v3 + 4);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

long long *CoreML::Specification::MILSpec::Function::MergeFrom(CoreML::Specification::MILSpec::Function *this, const CoreML::Specification::MILSpec::Function *a2)
{
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((unint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  unsigned int v5 = *((_DWORD *)a2 + 6);
  if (v5)
  {
    uint64_t v6 = (CoreML::Specification::MILSpec::NamedValueType **)(*((void *)a2 + 4) + 8);
    int v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((CoreML::Specification::MILSpec::Function *)((char *)this + 16), *((_DWORD *)a2 + 6));
    google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<CoreML::Specification::MILSpec::NamedValueType>::TypeHandler>((std::string *)((char *)this + 16), (std::string **)v7, v6, v5, **((_DWORD **)this + 4) - *((_DWORD *)this + 6));
    signed int v8 = *((_DWORD *)this + 6) + v5;
    *((_DWORD *)this + 6) = v8;
    long long v9 = (signed int *)*((void *)this + 4);
    if (*v9 < v8) {
      signed int *v9 = v8;
    }
  }
  google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::begin(v17, *((void **)a2 + 8));
  for (int i = v17[0]; v17[0]; int i = v17[0])
  {
    uint64_t v11 = *((void *)i + 3);
    uint64_t v12 = (const CoreML::Specification::MILSpec::Block *)(v11 + 24);
    uint64_t v13 = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::operator[]((uint64_t)this + 48, v11);
    if (v12 != (const CoreML::Specification::MILSpec::Block *)v13)
    {
      long long v14 = (CoreML::Specification::MILSpec::Block *)v13;
      CoreML::Specification::MILSpec::Block::Clear((CoreML::Specification::MILSpec::Block *)v13);
      CoreML::Specification::MILSpec::Block::MergeFrom(v14, v12);
    }
    google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::KeyValuePair const>::operator++(v17);
  }
  double result = (long long *)google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::MergeFrom((uint64_t)this + 72, (uint64_t)a2 + 72);
  uint64_t v16 = *((void *)a2 + 13);
  if (*(char *)(v16 + 23) < 0)
  {
    if (!*(void *)(v16 + 8)) {
      return result;
    }
  }
  else if (!*(unsigned char *)(v16 + 23))
  {
    return result;
  }
  double result = (long long *)*((void *)this + 13);
  if (result != (long long *)v16)
  {
    if (result == &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
    }
    return (long long *)std::string::operator=((std::string *)result, (const std::string *)v16);
  }
  return result;
}

uint64_t CoreML::Specification::MILSpec::Function::IsInitialized(CoreML::Specification::MILSpec::Function *this)
{
  return 1;
}

void CoreML::Specification::MILSpec::Function::Clear(CoreML::Specification::MILSpec::Function *this)
{
  uint64_t v2 = *((unsigned int *)this + 6);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = (CoreML::Specification::MILSpec::NamedValueType **)(*((void *)this + 4) + 8);
    do
    {
      uint64_t v4 = *v3++;
      CoreML::Specification::MILSpec::NamedValueType::Clear(v4);
      --v2;
    }
    while (v2);
    *((_DWORD *)this + 6) = 0;
  }
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::clear((uint64_t)this + 48);
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::clear((uint64_t)this + 80);
  uint64_t v5 = *((void *)this + 13);
  if ((long long *)v5 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v5 + 23) < 0)
    {
      **(unsigned char **)uint64_t v5 = 0;
      *(void *)(v5 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v5 = 0;
      *(unsigned char *)(v5 + 23) = 0;
    }
  }
}

void CoreML::Specification::MILSpec::Function::New(CoreML::Specification::MILSpec::Function *this, google::protobuf::Arena *a2)
{
}

void sub_19EB331AC(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C40408AB1BCLL);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::MILSpec::Function>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    double result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *double result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::Function>;
    uint64_t v4 = (unint64_t *)(v3 + 4);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::Function>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void CoreML::Specification::MILSpec::Function::New(CoreML::Specification::MILSpec::Function *this)
{
}

void *CoreML::Specification::MILSpec::Function::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.MILSpec.Function");
}

void CoreML::Specification::MILSpec::Function::~Function(CoreML::Specification::MILSpec::Function *this)
{
  CoreML::Specification::MILSpec::Function::~Function(this);

  JUMPOUT(0x19F3C1920);
}

{
  uint64_t v2;

  *(void *)this = &unk_1EF0DA5C8;
  uint64_t v2 = *((void *)this + 13);
  if ((long long *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    MEMORY[0x19F3C1920](v2, 0x1012C40EC159624);
  }
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::~Map((void *)this + 10);
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::~Map((void *)this + 6);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>((void *)this + 2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

void google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryLite(void *a1)
{
  google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Block,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryImpl(a1);

  JUMPOUT(0x19F3C1920);
}

void *google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::~Map(void *a1)
{
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::clear((uint64_t)a1);
  if (!*a1)
  {
    uint64_t v2 = a1[2];
    if (v2)
    {
      uint64_t v3 = google::protobuf::Map<std::string,std::string>::InnerMap::~InnerMap(v2);
      MEMORY[0x19F3C1920](v3, 0x10E0C40D5F42F35);
    }
  }
  return a1;
}

double google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::clear(uint64_t a1)
{
  google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::begin(&v3, *(void **)(a1 + 16));
  while ((void)v3)
  {
    long long v5 = v3;
    uint64_t v6 = v4;
    *(void *)&double result = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::erase((uint64_t)&v3, (void *)a1, &v5).n128_u64[0];
  }
  return result;
}

__n128 google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::erase(uint64_t a1, void *a2, void *a3)
{
  if (!*a2)
  {
    uint64_t v6 = *(void *)(*a3 + 24);
    if (v6)
    {
      CoreML::Specification::MILSpec::Function::~Function((CoreML::Specification::MILSpec::Function *)(v6 + 24));
      if (*(char *)(v6 + 23) < 0) {
        operator delete(*(void **)v6);
      }
      MEMORY[0x19F3C1920](v6, 0x10B2C40A53FFCBDLL);
    }
  }
  long long v18 = *(_OWORD *)a3;
  unint64_t v19 = a3[2];
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::KeyValuePair>::operator++(a3);
  int v7 = (void *)a2[2];
  uint64_t v20 = 0;
  BOOL v8 = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::KeyValuePair>::revalidate_if_necessary((uint64_t)&v18, &v20);
  unint64_t v9 = v19;
  long long v10 = (void **)v18;
  uint64_t v11 = v7[4];
  uint64_t v12 = *(void *)(v11 + 8 * v19);
  if (v8)
  {
    uint64_t v13 = google::protobuf::Map<std::string,std::string>::InnerMap::EraseFromLinkedList(v18, *(void *)(v11 + 8 * v19));
LABEL_12:
    *(void *)(v7[4] + 8 * v9) = v13;
    goto LABEL_13;
  }
  long long v14 = (uint64_t *)std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::find<std::string *>(v12, *(void **)(v20 + 32));
  if ((uint64_t *)(v12 + 8) != v14) {
    std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::erase(v12, v14);
  }
  if (!*(void *)(v12 + 24))
  {
    google::protobuf::Map<std::string,std::string>::InnerMap::DestroyTree(v7[5], (void **)v12);
    uint64_t v13 = 0;
    *(void *)(v7[4] + ((8 * v9) | std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(*((void **)this + 8)) = 0;
    v9 &= ~1uLL;
    goto LABEL_12;
  }
LABEL_13:
  google::protobuf::Map<std::string,std::string>::InnerMap::DestroyNode((uint64_t)v7, v10);
  --*v7;
  if (v9 == v7[3])
  {
    unint64_t v16 = v7[1];
    if (v9 < v16)
    {
      uint64_t v17 = v7[4];
      do
      {
        if (*(void *)(v17 + 8 * v9)) {
          break;
        }
        v7[3] = ++v9;
      }
      while (v16 != v9);
    }
  }
  __n128 result = *(__n128 *)a3;
  *(_OWORD *)a1 = *(_OWORD *)a3;
  *(void *)(a1 + 16) = a3[2];
  return result;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::value(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2)
  {
    int v5 = 3;
    uint64_t v6 = "/Library/Caches/com.apple.xbs/Sources/CoreML/coremltools-internal/deps/protobuf/src/google/protobuf/map_entry_lite.h";
    int v7 = 162;
    memset(&__p, 0, sizeof(__p));
    std::string::append(&__p, "CHECK failed: default_instance_ != NULL: ");
    google::protobuf::internal::LogMessage::Finish((google::protobuf::internal::LogMessage *)&v5);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    uint64_t v2 = *(void *)(a1 + 8);
  }
  uint64_t v3 = *(void *)(v2 + 24);
  if (*(void *)(a1 + 24)) {
    return *(void *)(a1 + 24);
  }
  else {
    return v3;
  }
}

void sub_19EB3366C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::key(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

std::string *google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::CheckTypeAndMergeFrom(std::string *result, _DWORD *a2)
{
  int v2 = a2[10];
  if (v2)
  {
    uint64_t v4 = result;
    if (v2)
    {
      int v5 = (std::string **)&result->__r_.__value_.__r.__words[2];
      if ((long long *)result->__r_.__value_.__r.__words[2] == &google::protobuf::internal::fixed_address_empty_string) {
        google::protobuf::internal::ArenaStringPtr::CreateInstance();
      }
      uint64_t v6 = (const std::string *)(*(uint64_t (**)(_DWORD *))(*(void *)a2 + 136))(a2);
      if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
        google::protobuf::internal::ArenaStringPtr::CreateInstance();
      }
      __n128 result = std::string::operator=(*v5, v6);
      LODWORD(v4[1].__r_.__value_.__r.__words[2]) |= 1u;
      int v2 = a2[10];
    }
    if ((v2 & 2) != 0)
    {
      if (!v4[1].__r_.__value_.__r.__words[0])
      {
        std::string::size_type size = (google::protobuf::Arena *)v4[1].__r_.__value_.__l.__size_;
        if (!size) {
          operator new();
        }
        CoreML::Specification::MILSpec::Value::Value((CoreML::Specification::MILSpec::Value *)Aligned);
        unint64_t v9 = google::protobuf::Arena::AllocateAligned(size, 0, 24);
        signed int *v9 = (google::protobuf::Arena *)Aligned;
        v9[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Value>;
        long long v10 = (unint64_t *)((char *)size + 32);
        do
          unint64_t v11 = __ldxr(v10);
        while (__stxr((unint64_t)v9, v10));
        v9[2] = (google::protobuf::Arena *)v11;
        v4[1].__r_.__value_.__r.__words[0] = (std::string::size_type)Aligned;
      }
      uint64_t v12 = (const CoreML::Specification::MILSpec::Value *)(*(uint64_t (**)(_DWORD *))(*(void *)a2 + 144))(a2);
      __n128 result = CoreML::Specification::MILSpec::Value::MergeFrom((std::string *)v4[1].__r_.__value_.__l.__data_, v12);
      LODWORD(v4[1].__r_.__value_.__r.__words[2]) |= 2u;
    }
  }
  return result;
}

void sub_19EB33824(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C40000F1E19);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::IsInitialized()
{
  return 1;
}

CoreML::Specification::MILSpec::Value *google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Clear(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if ((long long *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(unsigned char **)uint64_t v2 = 0;
      *(void *)(v2 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v2 = 0;
      *(unsigned char *)(v2 + 23) = 0;
    }
  }
  __n128 result = *(CoreML::Specification::MILSpec::Value **)(a1 + 24);
  if (result) {
    __n128 result = (CoreML::Specification::MILSpec::Value *)CoreML::Specification::MILSpec::Value::Clear(result);
  }
  *(_DWORD *)(a1 + 40) &= 0xFFFFFFFC;
  return result;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::GetArena(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

google::protobuf::Arena **google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::New(uint64_t a1, google::protobuf::Arena *a2)
{
  if (!a2) {
    operator new();
  }
  result[1] = 0;
  result[2] = (google::protobuf::Arena *)&google::protobuf::internal::fixed_address_empty_string;
  result[3] = 0;
  result[4] = a2;
  *((_DWORD *)result + 1CoreML::Specification::MILSpec::Function::New(this, 0) = 0;
  int v5 = *(google::protobuf::Arena **)(a1 + 8);
  *__n128 result = (google::protobuf::Arena *)&unk_1EF0DC498;
  result[1] = v5;
  return result;
}

void google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::New()
{
}

void *google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, (char *)&unk_19EC86ACE);
}

void google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryLite(void *a1)
{
  google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryImpl(a1);

  JUMPOUT(0x19F3C1920);
}

void *google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryImpl(void *a1)
{
  *a1 = &unk_1EF0DB8C8;
  if ((void *)a1[1] != a1 && !a1[4])
  {
    google::protobuf::internal::MapTypeHandler<(google::protobuf::internal::WireFormatLite::FieldType)9,std::string>::DeleteNoArena(a1[2]);
    uint64_t v2 = a1[3];
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }
  return a1;
}

void google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryImpl(void *a1)
{
  google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryImpl(a1);

  JUMPOUT(0x19F3C1920);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::value(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2)
  {
    int v5 = 3;
    uint64_t v6 = "/Library/Caches/com.apple.xbs/Sources/CoreML/coremltools-internal/deps/protobuf/src/google/protobuf/map_entry_lite.h";
    int v7 = 162;
    memset(&__p, 0, sizeof(__p));
    std::string::append(&__p, "CHECK failed: default_instance_ != NULL: ");
    google::protobuf::internal::LogMessage::Finish((google::protobuf::internal::LogMessage *)&v5);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    uint64_t v2 = *(void *)(a1 + 8);
  }
  uint64_t v3 = *(void *)(v2 + 24);
  if (*(void *)(a1 + 24)) {
    return *(void *)(a1 + 24);
  }
  else {
    return v3;
  }
}

void sub_19EB33B60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::key(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::InternalSerializeWithCachedSizesToArray(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  uint64_t v6 = (const void **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 136))(a1);
  *a3 = 10;
  int v7 = google::protobuf::io::CodedOutputStream::WriteStringWithSizeToArray(v6, a3 + 1);
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 144))(a1);
  *int v7 = 18;
  unint64_t v9 = v7 + 1;
  unsigned int v10 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 120))(v8);
  if (v10 < 0x80)
  {
    LOBYTE(v11) = v10;
  }
  else
  {
    do
    {
      *v9++ = v10 | 0x80;
      unsigned int v11 = v10 >> 7;
      unsigned int v12 = v10 >> 14;
      v10 >>= 7;
    }
    while (v12);
  }
  unsigned char *v9 = v11;
  uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)v8 + 128);

  return v13(v8, a2, v9 + 1);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::GetCachedSize(_DWORD *a1)
{
  int v2 = a1[10];
  if (v2)
  {
    uint64_t v6 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 136))(a1);
    int v7 = *(unsigned __int8 *)(v6 + 23);
    if ((v7 & 0x80u) != 0) {
      int v7 = *(_DWORD *)(v6 + 8);
    }
    unsigned int v3 = v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((a1[10] & 2) != 0) {
      goto LABEL_3;
    }
LABEL_7:
    unsigned int v5 = 0;
    return v5 + v3;
  }
  unsigned int v3 = 0;
  if ((v2 & 2) == 0) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v4 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 144))(a1);
  unsigned int v5 = *(_DWORD *)(v4 + 112) + ((9 * (__clz(*(_DWORD *)(v4 + 112) | 1) ^ 0x1F) + 73) >> 6) + 1;
  return v5 + v3;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::SerializeWithCachedSizes(uint64_t a1, google::protobuf::io::CodedOutputStream *a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 136))(a1);
  google::protobuf::internal::WireFormatLite::WriteString(1u, v4, a2);
  unsigned int v5 = (google::protobuf::internal::WireFormatLite *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 144))(a1);

  return google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(v5, a2, v6, v7);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::ByteSizeLong(_DWORD *a1)
{
  int v2 = a1[10];
  if (v2)
  {
    uint64_t v7 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 136))(a1);
    int v8 = *(unsigned __int8 *)(v7 + 23);
    if ((v8 & 0x80u) != 0) {
      int v8 = *(_DWORD *)(v7 + 8);
    }
    uint64_t v3 = (int)(v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6)) + 1;
    if ((a1[10] & 2) != 0) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v6 = 0;
    return v6 + v3;
  }
  uint64_t v3 = 0;
  if ((v2 & 2) == 0) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v4 = (CoreML::Specification::MILSpec::Function *)(*(uint64_t (**)(_DWORD *))(*(void *)a1 + 144))(a1);
  uint64_t v5 = CoreML::Specification::MILSpec::Function::ByteSizeLong(v4);
  uint64_t v6 = v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  return v6 + v3;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::MergePartialFromCodedStream(uint64_t a1, google::protobuf::io::CodedInputStream *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v5 = *(char **)this;
        if (*(void *)this >= *((void *)this + 1))
        {
          LODWORD(TagFallback) = 0;
        }
        else
        {
          unint64_t TagFallback = *v5;
          if ((*v5 & 0x80000000) == 0)
          {
            *(void *)this = v5 + 1;
            goto LABEL_6;
          }
        }
        unint64_t TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(this, TagFallback);
LABEL_6:
        if (TagFallback != 10) {
          break;
        }
        *(_DWORD *)(a1 + 40) |= 1u;
        uint64_t v7 = *(long long **)(a1 + 16);
        if (v7 == &google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstance();
        }
        uint64_t result = google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)this, (std::string *)v7);
        if (!result) {
          return result;
        }
        int v9 = *(_DWORD *)(a1 + 40) | 1;
        *(_DWORD *)(a1 + 4CoreML::Specification::MILSpec::Function::New(this, 0) = v9;
        unsigned int v10 = *(char **)this;
        if (*(void *)this < *((void *)this + 1) && *v10 == 18)
        {
          *(void *)this = v10 + 1;
          goto LABEL_19;
        }
      }
      if (TagFallback != 18) {
        break;
      }
      int v9 = *(_DWORD *)(a1 + 40);
LABEL_19:
      *(_DWORD *)(a1 + 4CoreML::Specification::MILSpec::Function::New(this, 0) = v9 | 2;
      Aligned = *(google::protobuf::Arena ***)(a1 + 24);
      if (!Aligned)
      {
        unsigned int v12 = *(google::protobuf::Arena **)(a1 + 32);
        if (!v12) {
          operator new();
        }
        CoreML::Specification::MILSpec::Function::Function((CoreML::Specification::MILSpec::Function *)Aligned);
        uint64_t v13 = google::protobuf::Arena::AllocateAligned(v12, 0, 24);
        void *v13 = (google::protobuf::Arena *)Aligned;
        v13[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Function>;
        long long v14 = (unint64_t *)((char *)v12 + 32);
        do
          unint64_t v15 = __ldxr(v14);
        while (__stxr((unint64_t)v13, v14));
        v13[2] = (google::protobuf::Arena *)v15;
        *(void *)(a1 + 24) = Aligned;
      }
      unint64_t v16 = *(char **)this;
      if (*(void *)this >= *((void *)this + 1) || *v16 < 0)
      {
        int VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(this);
        if (VarintSizeAsIntFallback < 0) {
          return 0;
        }
      }
      else
      {
        int VarintSizeAsIntFallback = *v16;
        *(void *)this = v16 + 1;
      }
      int v18 = google::protobuf::io::CodedInputStream::PushLimit(this, VarintSizeAsIntFallback);
      int v20 = *((_DWORD *)this + 13);
      BOOL v21 = __OFSUB__(v20--, 1);
      *((_DWORD *)this + 13) = v20;
      if (v20 < 0 != v21) {
        return 0;
      }
      int v22 = v18;
      uint64_t result = CoreML::Specification::MILSpec::Function::MergePartialFromCodedStream((CoreML::Specification::MILSpec::Function *)Aligned, this, v19);
      if (!result) {
        return result;
      }
      uint64_t result = google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(this, v22);
      if (!result) {
        return result;
      }
      *(_DWORD *)(a1 + 40) |= 2u;
      if (*(void *)this == *((void *)this + 1)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)this + 36) = 1;
        return result;
      }
    }
    if (!TagFallback || (TagFallback & 7) == 4) {
      return 1;
    }
    if ((google::protobuf::internal::WireFormatLite::SkipField(this, (google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
  }
    }
}

void sub_19EB3417C(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C40408AB1BCLL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Function>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

char *google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::CheckTypeAndMergeFrom(char *result, _DWORD *a2)
{
  int v2 = a2[10];
  if (v2)
  {
    uint64_t v4 = result;
    if (v2)
    {
      uint64_t v5 = (std::string **)(result + 16);
      if (*((long long **)result + 2) == &google::protobuf::internal::fixed_address_empty_string) {
        google::protobuf::internal::ArenaStringPtr::CreateInstance();
      }
      uint64_t v6 = (const std::string *)(*(uint64_t (**)(_DWORD *))(*(void *)a2 + 136))(a2);
      if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
        google::protobuf::internal::ArenaStringPtr::CreateInstance();
      }
      uint64_t result = (char *)std::string::operator=(*v5, v6);
      *((_DWORD *)v4 + 10) |= 1u;
      int v2 = a2[10];
    }
    if ((v2 & 2) != 0)
    {
      if (!*((void *)v4 + 3))
      {
        uint64_t v7 = (google::protobuf::Arena *)*((void *)v4 + 4);
        if (!v7) {
          operator new();
        }
        CoreML::Specification::MILSpec::Function::Function((CoreML::Specification::MILSpec::Function *)Aligned);
        int v9 = google::protobuf::Arena::AllocateAligned(v7, 0, 24);
        unsigned char *v9 = (google::protobuf::Arena *)Aligned;
        v9[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Function>;
        unsigned int v10 = (unint64_t *)((char *)v7 + 32);
        do
          unint64_t v11 = __ldxr(v10);
        while (__stxr((unint64_t)v9, v10));
        v9[2] = (google::protobuf::Arena *)v11;
        *((void *)v4 + 3) = Aligned;
      }
      unsigned int v12 = (const CoreML::Specification::MILSpec::Function *)(*(uint64_t (**)(_DWORD *))(*(void *)a2 + 144))(a2);
      uint64_t result = (char *)CoreML::Specification::MILSpec::Function::MergeFrom(*((CoreML::Specification::MILSpec::Function **)v4 + 3), v12);
      *((_DWORD *)v4 + 10) |= 2u;
    }
  }
  return result;
}

void sub_19EB34354(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C40408AB1BCLL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::IsInitialized()
{
  return 1;
}

void google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Clear(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if ((long long *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(unsigned char **)uint64_t v2 = 0;
      *(void *)(v2 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v2 = 0;
      *(unsigned char *)(v2 + 23) = 0;
    }
  }
  uint64_t v3 = *(CoreML::Specification::MILSpec::Function **)(a1 + 24);
  if (v3) {
    CoreML::Specification::MILSpec::Function::Clear(v3);
  }
  *(_DWORD *)(a1 + 40) &= 0xFFFFFFFC;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::GetArena(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

google::protobuf::Arena **google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::New(uint64_t a1, google::protobuf::Arena *a2)
{
  if (!a2) {
    operator new();
  }
  result[1] = 0;
  result[2] = (google::protobuf::Arena *)&google::protobuf::internal::fixed_address_empty_string;
  result[3] = 0;
  result[4] = a2;
  *((_DWORD *)result + 1CoreML::Specification::MILSpec::Function::New(this, 0) = 0;
  uint64_t v5 = *(google::protobuf::Arena **)(a1 + 8);
  *uint64_t result = (google::protobuf::Arena *)&unk_1EF0DC5E8;
  result[1] = v5;
  return result;
}

void google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::New()
{
}

void *google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, (char *)&unk_19EC86ACE);
}

void google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryLite(void *a1)
{
  google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryImpl(a1);

  JUMPOUT(0x19F3C1920);
}

void *google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryImpl(void *a1)
{
  *a1 = &unk_1EF0DBB68;
  if ((void *)a1[1] != a1 && !a1[4])
  {
    google::protobuf::internal::MapTypeHandler<(google::protobuf::internal::WireFormatLite::FieldType)9,std::string>::DeleteNoArena(a1[2]);
    uint64_t v2 = a1[3];
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }
  return a1;
}

void google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryImpl(void *a1)
{
  google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryImpl(a1);

  JUMPOUT(0x19F3C1920);
}

uint64_t CoreML::Specification::MILSpec::Value_BlobFileValue::GetCachedSize(CoreML::Specification::MILSpec::Value_BlobFileValue *this)
{
  return *((unsigned int *)this + 8);
}

uint64_t CoreML::Specification::MILSpec::Value_BlobFileValue::SerializeWithCachedSizes(CoreML::Specification::MILSpec::Value_BlobFileValue *this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t result = *((void *)this + 2);
  if (*(char *)(result + 23) < 0)
  {
    uint64_t v7 = *(void *)(result + 8);
    if (!v7) {
      goto LABEL_7;
    }
    uint64_t result = *(void *)result;
    goto LABEL_6;
  }
  LODWORD(v7) = *(unsigned __int8 *)(result + 23);
  if (*(unsigned char *)(result + 23))
  {
LABEL_6:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String((unsigned int *)result, v7, 1, (uint64_t)"CoreML.Specification.MILSpec.Value.BlobFileValue.fileName");
    uint64_t result = google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(1u, *((void *)this + 2), a2);
  }
LABEL_7:
  unint64_t v8 = *((void *)this + 3);
  if (v8)
  {
    return google::protobuf::internal::WireFormatLite::WriteUInt64(2, v8, a2, a4);
  }
  return result;
}

uint64_t CoreML::Specification::MILSpec::Value_BlobFileValue::IsInitialized(CoreML::Specification::MILSpec::Value_BlobFileValue *this)
{
  return 1;
}

uint64_t CoreML::Specification::MILSpec::Value_BlobFileValue::Clear(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 16);
  if ((long long *)v1 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v1 + 23) < 0)
    {
      **(unsigned char **)uint64_t v1 = 0;
      *(void *)(v1 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v1 = 0;
      *(unsigned char *)(v1 + 23) = 0;
    }
  }
  *(void *)(this + 24) = 0;
  return this;
}

void CoreML::Specification::MILSpec::Value_BlobFileValue::New(CoreML::Specification::MILSpec::Value_BlobFileValue *this, google::protobuf::Arena *a2)
{
}

void sub_19EB34734(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C4056DF9CA5);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::MILSpec::Value_BlobFileValue>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    uint64_t result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *uint64_t result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::Value_BlobFileValue>;
    uint64_t v4 = (unint64_t *)(v3 + 4);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::Value_BlobFileValue>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void CoreML::Specification::MILSpec::Value_BlobFileValue::New(CoreML::Specification::MILSpec::Value_BlobFileValue *this)
{
}

void *CoreML::Specification::MILSpec::Value_BlobFileValue::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.MILSpec.Value.BlobFileValue");
}

void CoreML::Specification::MILSpec::Value_BlobFileValue::~Value_BlobFileValue(CoreML::Specification::MILSpec::Value_BlobFileValue *this)
{
  *(void *)this = &unk_1EF0D9C48;
  google::protobuf::internal::MapTypeHandler<(google::protobuf::internal::WireFormatLite::FieldType)9,std::string>::DeleteNoArena(*((void *)this + 2));
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);

  JUMPOUT(0x19F3C1920);
}

{
  *(void *)this = &unk_1EF0D9C48;
  google::protobuf::internal::MapTypeHandler<(google::protobuf::internal::WireFormatLite::FieldType)9,std::string>::DeleteNoArena(*((void *)this + 2));
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

uint64_t google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Value>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

void google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::MapEntryWrapper::~MapEntryWrapper(void *a1)
{
  google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryImpl(a1);

  JUMPOUT(0x19F3C1920);
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Value> const*> &,google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Value> const**>(void **a1, void **a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = *(a2 - 1);
      uint64_t v7 = *a1;
      if (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v6, *a1))
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      unint64_t v8 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(a1, a1 + 1, a1 + 2);
      int v9 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v10 = 0;
      uint64_t v11 = 24;
      break;
  }
  while (1)
  {
    unsigned int v12 = *v9;
    uint64_t v13 = *v8;
    if (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*v9, v13))
    {
      uint64_t v14 = v11;
      while (1)
      {
        *(void **)((char *)a1 + v14) = v13;
        uint64_t v15 = v14 - 8;
        if (v14 == 8) {
          break;
        }
        uint64_t v13 = *(void **)((char *)a1 + v14 - 16);
        BOOL v16 = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v12, v13);
        uint64_t v14 = v15;
        if (!v16)
        {
          uint64_t v17 = (void **)((char *)a1 + v15);
          goto LABEL_12;
        }
      }
      uint64_t v17 = a1;
LABEL_12:
      void *v17 = v12;
      if (++v10 == 8) {
        return v9 + 1 == a2;
      }
    }
    unint64_t v8 = v9;
    v11 += 8;
    if (++v9 == a2) {
      return 1;
    }
  }
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::MapEntryWrapper::value(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::MapEntryWrapper::key(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

void google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::MapEntryWrapper::~MapEntryWrapper(void *a1)
{
  google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryImpl(a1);

  JUMPOUT(0x19F3C1920);
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Function> const*> &,google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Function> const**>(void **a1, void **a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = *(a2 - 1);
      uint64_t v7 = *a1;
      if (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v6, *a1))
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      unint64_t v8 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(a1, a1 + 1, a1 + 2);
      int v9 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v10 = 0;
      uint64_t v11 = 24;
      break;
  }
  while (1)
  {
    unsigned int v12 = *v9;
    uint64_t v13 = *v8;
    if (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*v9, v13))
    {
      uint64_t v14 = v11;
      while (1)
      {
        *(void **)((char *)a1 + v14) = v13;
        uint64_t v15 = v14 - 8;
        if (v14 == 8) {
          break;
        }
        uint64_t v13 = *(void **)((char *)a1 + v14 - 16);
        BOOL v16 = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v12, v13);
        uint64_t v14 = v15;
        if (!v16)
        {
          uint64_t v17 = (void **)((char *)a1 + v15);
          goto LABEL_12;
        }
      }
      uint64_t v17 = a1;
LABEL_12:
      void *v17 = v12;
      if (++v10 == 8) {
        return v9 + 1 == a2;
      }
    }
    unint64_t v8 = v9;
    v11 += 8;
    if (++v9 == a2) {
      return 1;
    }
  }
}

uint64_t CoreML::Specification::MILSpec::Program::ByteSizeLong(CoreML::Specification::MILSpec::Program *this)
{
  uint64_t v2 = (void *)*((void *)this + 5);
  uint64_t v3 = *(unsigned int *)v2;
  google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::begin(v18, v2);
  uint64_t v4 = 0;
  while (v18[0])
  {
    unint64_t v5 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(*((google::protobuf::Arena **)v18[0] + 3), (google::protobuf::Arena *)(*((void *)v18[0] + 3) + 24), *((google::protobuf::Arena **)this + 2));
    if (v4 != v5)
    {
      if (v4) {
        (*((void (**)(google::protobuf::Arena **))*v4 + 1))(v4);
      }
      uint64_t v4 = v5;
    }
    uint64_t v6 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::ByteSizeLong(v4);
    v3 += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6);
    google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::KeyValuePair const>::operator++(v18);
  }
  if (v4) {
    (*((void (**)(google::protobuf::Arena **))*v4 + 1))(v4);
  }
  uint64_t v7 = (void *)*((void *)this + 9);
  uint64_t v8 = *(unsigned int *)v7;
  google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::begin(v18, v7);
  int v9 = 0;
  uint64_t v10 = v8 + v3;
  while (v18[0])
  {
    uint64_t v11 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(*((google::protobuf::Arena **)v18[0] + 3), (google::protobuf::Arena *)(*((void *)v18[0] + 3) + 24), *((google::protobuf::Arena **)this + 6));
    if (v9 != v11)
    {
      if (v9) {
        (*((void (**)(google::protobuf::Arena **))*v9 + 1))(v9);
      }
      int v9 = v11;
    }
    uint64_t v12 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::ByteSizeLong(v9);
    v10 += v12 + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6);
    google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::KeyValuePair const>::operator++(v18);
  }
  if (v9) {
    (*((void (**)(google::protobuf::Arena **))*v9 + 1))(v9);
  }
  uint64_t v13 = *((void *)this + 10);
  uint64_t v14 = *(unsigned __int8 *)(v13 + 23);
  if (*(char *)(v13 + 23) < 0)
  {
    if (!*(void *)(v13 + 8)) {
      goto LABEL_24;
    }
  }
  else if (!*(unsigned char *)(v13 + 23))
  {
    goto LABEL_24;
  }
  uint64_t v15 = *(void *)(v13 + 8);
  if ((v14 & 0x80u) == 0) {
    uint64_t v15 = v14;
  }
  v10 += v15 + ((9 * (__clz(v15 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_24:
  uint64_t v16 = *((void *)this + 11);
  if (v16) {
    v10 += ((9 * (__clz(v16 | 1) ^ 0x3F) + 73) >> 6) + 1;
  }
  *((_DWORD *)this + 24) = v10;
  return v10;
}

void sub_19EB34EFC(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CoreML::Specification::MILSpec::Program::MergePartialFromCodedStream(CoreML::Specification::MILSpec::Program *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  int v50 = (google::protobuf::Arena **)((char *)this + 48);
  unint64_t v5 = (void *)((char *)this + 56);
  uint64_t v6 = (std::string **)((char *)this + 80);
  uint64_t v7 = (google::protobuf::Arena **)((char *)this + 16);
  uint64_t v8 = (void *)((char *)this + 24);
  while (1)
  {
    int v9 = *(char **)a2;
    if (*(void *)a2 >= *((void *)a2 + 1)) {
      break;
    }
    uint64_t v10 = *v9;
    if (*v9 < 1) {
      goto LABEL_7;
    }
    *(void *)a2 = v9 + 1;
    unint64_t v11 = v10 | 0x100000000;
    if ((v11 & 0x100000000) == 0) {
      goto LABEL_27;
    }
LABEL_8:
    switch(v11 >> 3)
    {
      case 1u:
        if (v11 != 8) {
          goto LABEL_27;
        }
        uint64_t v13 = *(char **)a2;
        if (*(void *)a2 >= *((void *)a2 + 1) || *v13 < 0)
        {
          unint64_t Varint64Fallback = google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2);
          if ((v30 & 1) == 0) {
            return 0;
          }
        }
        else
        {
          unint64_t Varint64Fallback = *v13;
          *(void *)a2 = v13 + 1;
        }
        *((void *)this + 11) = Varint64Fallback;
        break;
      case 2u:
        if (v11 != 18) {
          goto LABEL_27;
        }
        uint64_t v51 = v7;
        int v52 = v8;
        memset(&__p, 0, sizeof(__p));
        uint64_t v55 = 0;
        unsigned int v19 = *(char **)a2;
        if (*(void *)a2 >= *((void *)a2 + 1) || *v19 < 0)
        {
          int VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (VarintSizeAsIntFallback < 0) {
            goto LABEL_101;
          }
        }
        else
        {
          int VarintSizeAsIntFallback = *v19;
          *(void *)a2 = v19 + 1;
        }
        int v31 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
        int v32 = *((_DWORD *)a2 + 13);
        BOOL v25 = __OFSUB__(v32--, 1);
        *((_DWORD *)a2 + 13) = v32;
        if (v32 < 0 != v25) {
          goto LABEL_101;
        }
        int v33 = v31;
        int v34 = *(char **)a2;
        if (*(void *)a2 < *((void *)a2 + 1) && *v34 == 10)
        {
          *(void *)a2 = v34 + 1;
          if (!google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)a2, &__p)) {
            goto LABEL_101;
          }
          if ((int)(*((_DWORD *)a2 + 2) - *(void *)a2) >= 1 && **(unsigned char **)a2 == 18)
          {
            uint64_t v35 = *(void *)v52[2];
            int64_t v54 = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::operator[]((uint64_t)v52, (uint64_t)&__p);
            if (v35 != *(void *)v52[2])
            {
              google::protobuf::io::CodedInputStream::Skip(a2, 1u);
              BOOL v36 = (CoreML::Specification::MILSpec::Function *)v54;
              int v37 = *(char **)a2;
              if (*(void *)a2 >= *((void *)a2 + 1) || *v37 < 0)
              {
                int v38 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                if (v38 < 0) {
                  goto LABEL_100;
                }
              }
              else
              {
                int v38 = *v37;
                *(void *)a2 = v37 + 1;
              }
              int v43 = google::protobuf::io::CodedInputStream::PushLimit(a2, v38);
              int v45 = *((_DWORD *)a2 + 13);
              BOOL v25 = __OFSUB__(v45--, 1);
              *((_DWORD *)a2 + 13) = v45;
              if (v45 < 0 != v25
                || (int v46 = v43,
                    !CoreML::Specification::MILSpec::Function::MergePartialFromCodedStream(v36, a2, v44))
                || !google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v46))
              {
LABEL_100:
                google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::erase(v52, (unsigned __int8 *)&__p);
                goto LABEL_101;
              }
              if (*(void *)a2 == *((void *)a2 + 1)
                && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
              {
                *((_DWORD *)a2 + 8) = 0;
                *((unsigned char *)a2 + 36) = 1;
                goto LABEL_83;
              }
              int BeyondKeyValuePair = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>>::ReadBeyondKeyValuePair((uint64_t)&v51, (uint64_t)a2);
              goto LABEL_82;
            }
          }
        }
        else
        {
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          memset(&__p, 0, sizeof(__p));
        }
        int v39 = google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::NewEntry(*v51);
        if (v55 != v39)
        {
          if (v55) {
            (*((void (**)(void))*v55 + 1))();
          }
          uint64_t v55 = v39;
        }
        BOOL v40 = (long long *)v39[2];
        *((_DWORD *)v39 + 10) |= 1u;
        if (v40 == &google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstance();
        }
        std::string::operator=((std::string *)v40, &__p);
        int BeyondKeyValuePair = (*((uint64_t (**)(google::protobuf::Arena **, google::protobuf::io::CodedInputStream *))*v55
                              + 11))(v55, a2);
        if (BeyondKeyValuePair) {
          google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>>::UseKeyAndValueFromEntry((uint64_t)&v51);
        }
        if ((*((uint64_t (**)(google::protobuf::Arena **))*v55 + 5))(v55))
        {
          uint64_t v55 = 0;
          if ((BeyondKeyValuePair & 1) == 0)
          {
            BOOL v42 = 0;
            int v22 = 6;
            goto LABEL_96;
          }
          goto LABEL_83;
        }
LABEL_82:
        if (!BeyondKeyValuePair) {
          goto LABEL_101;
        }
LABEL_83:
        if (!google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v33)) {
          goto LABEL_101;
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = (unsigned int *)&__p;
        }
        else {
          p_p = (unsigned int *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v48 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          int v48 = __p.__r_.__value_.__r.__words[1];
        }
        BOOL v29 = google::protobuf::internal::WireFormatLite::VerifyUtf8String(p_p, v48, 0, (uint64_t)"CoreML.Specification.MILSpec.Program.FunctionsEntry.key");
LABEL_91:
        BOOL v42 = v29;
        if (v29) {
          int v22 = 0;
        }
        else {
          int v22 = 6;
        }
LABEL_94:
        if (v55) {
          (*((void (**)(google::protobuf::Arena **))*v55 + 1))(v55);
        }
LABEL_96:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (!v42) {
          goto LABEL_33;
        }
        break;
      case 3u:
        if (v11 != 26) {
          goto LABEL_27;
        }
        if (*v6 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
        }
        if (!google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)a2, *v6)) {
          return 0;
        }
        uint64_t v15 = (unsigned int *)*v6;
        if (SHIBYTE((*v6)->__r_.__value_.__r.__words[2]) < 0)
        {
          uint64_t v15 = *(unsigned int **)v15;
          std::string::size_type size = (*v6)->__r_.__value_.__l.__size_;
        }
        else
        {
          LODWORD(size) = HIBYTE((*v6)->__r_.__value_.__r.__words[2]);
        }
        if (!google::protobuf::internal::WireFormatLite::VerifyUtf8String(v15, size, 0, (uint64_t)"CoreML.Specification.MILSpec.Program.docString"))return 0; {
        break;
        }
      case 4u:
        if (v11 != 34) {
          goto LABEL_27;
        }
        uint64_t v51 = v50;
        int v52 = v5;
        memset(&__p, 0, sizeof(__p));
        uint64_t v55 = 0;
        uint64_t v17 = *(char **)a2;
        if (*(void *)a2 >= *((void *)a2 + 1) || *v17 < 0)
        {
          int v18 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v18 < 0) {
            goto LABEL_101;
          }
        }
        else
        {
          int v18 = *v17;
          *(void *)a2 = v17 + 1;
        }
        int v23 = google::protobuf::io::CodedInputStream::PushLimit(a2, v18);
        int v24 = *((_DWORD *)a2 + 13);
        BOOL v25 = __OFSUB__(v24--, 1);
        *((_DWORD *)a2 + 13) = v24;
        if (v24 < 0 != v25
          || (int v26 = v23,
              !google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>>::MergePartialFromCodedStream((uint64_t)&v51, (uint64_t)a2))|| !google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v26))
        {
LABEL_101:
          BOOL v42 = 0;
          int v22 = 6;
          goto LABEL_94;
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v27 = (unsigned int *)&__p;
        }
        else {
          int v27 = (unsigned int *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v28 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          int v28 = __p.__r_.__value_.__r.__words[1];
        }
        BOOL v29 = google::protobuf::internal::WireFormatLite::VerifyUtf8String(v27, v28, 0, (uint64_t)"CoreML.Specification.MILSpec.Program.AttributesEntry.key");
        goto LABEL_91;
      default:
        goto LABEL_27;
    }
LABEL_32:
    int v22 = 0;
LABEL_33:
    if (v22) {
      return 0;
    }
  }
  LODWORD(v1CoreML::Specification::MILSpec::Value_BlobFileValue::New(this, 0) = 0;
LABEL_7:
  unsigned int TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v10);
  unint64_t v11 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
  if ((v11 & 0x100000000) != 0) {
    goto LABEL_8;
  }
LABEL_27:
  if (v11) {
    BOOL v21 = (v11 & 7) == 4;
  }
  else {
    BOOL v21 = 1;
  }
  if (!v21)
  {
    if (!google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v11, a3))return 0; {
    goto LABEL_32;
    }
  }
  return 1;
}

void sub_19EB35550(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::Map<std::string,std::string>>::~Parser((uint64_t)va);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::operator[](uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a1 + 16);
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  std::string::size_type v24 = 0;
  google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper(v26, (uint64_t)v4, (unsigned __int8 *)&__p, 0);
  uint64_t v6 = v26[0];
  if (v26[0]) {
    goto LABEL_18;
  }
  unint64_t v7 = v4[1];
  unint64_t v8 = *v4 + 1;
  unint64_t v9 = ((3 * v7) >> 2) & 0xFFFFFFFFFFFFFFFLL;
  if (v9 <= v8)
  {
    if (v7 <= 0x800000000000000)
    {
      uint64_t v20 = 2 * v7;
LABEL_33:
      google::protobuf::Map<std::string,std::string>::InnerMap::Resize((uint64_t)v4, v20, v5);
      google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper(v25, (uint64_t)v4, (unsigned __int8 *)&__p, 0);
      uint64_t v11 = v25[3];
      goto LABEL_11;
    }
  }
  else if (v7 >= 9 && (12 * v7) >> 6 >= v8)
  {
    char v21 = 0;
    unint64_t v22 = ((5 * v8) >> 2) + 1;
    do
      ++v21;
    while (v22 << v21 < v9);
    uint64_t v20 = v7 >> v21 <= 8 ? 8 : v7 >> v21;
    if (v20 != v7) {
      goto LABEL_33;
    }
  }
  uint64_t v11 = v26[3];
LABEL_11:
  uint64_t v12 = (google::protobuf::Arena *)v4[5];
  if (v12) {
    Aligned = (std::string *)google::protobuf::Arena::AllocateAligned(v12, MEMORY[0x1E4FBA3A0], 40);
  }
  else {
    Aligned = (std::string *)operator new(0x28uLL);
  }
  uint64_t v14 = (std::string::__raw *)Aligned;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(Aligned, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    long long v15 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    Aligned->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
    *(_OWORD *)&Aligned->__r_.__value_.__l.__data_ = v15;
  }
  v14[1].__words[0] = v24;
  google::protobuf::Map<std::string,std::string>::InnerMap::InsertUnique(v25, (uint64_t)v4, v11, v14);
  ++*v4;
  uint64_t v6 = v25[0];
LABEL_18:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v16 = *(google::protobuf::Arena ***)(v6 + 24);
  if (!v16)
  {
    if (!*(void *)a1) {
      operator new();
    }
    uint64_t v16 = google::protobuf::Arena::AllocateAligned(*(google::protobuf::Arena **)a1, MEMORY[0x1E4FBA3A0], 144);
    uint64_t v17 = *(google::protobuf::Arena **)a1;
    v16[1] = 0;
    v16[2] = 0;
    *uint64_t v16 = 0;
    google::protobuf::Arena::OwnDestructor<std::string>((google::protobuf::Arena **)v17, (google::protobuf::Arena *)v16);
    int v18 = *(google::protobuf::Arena **)a1;
    CoreML::Specification::MILSpec::Function::Function((CoreML::Specification::MILSpec::Function *)(v16 + 3));
    google::protobuf::Arena::OwnDestructor<CoreML::Specification::MILSpec::Function>((google::protobuf::Arena **)v18, (google::protobuf::Arena *)(v16 + 3));
    std::string::operator=((std::string *)v16, (const std::string *)a2);
    *(void *)(v6 + 24) = v16;
  }
  return v16 + 3;
}

void sub_19EB357F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  MEMORY[0x19F3C1920](v14, 0x10B2C40A53FFCBDLL);
  _Unwind_Resume(a1);
}

double google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::erase(void *a1, unsigned __int8 *a2)
{
  google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper(&v6, a1[2], a2, 0);
  double result = *(double *)&v6;
  if ((void)v6)
  {
    long long v4 = v6;
    uint64_t v5 = v7;
    *(void *)&double result = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::erase((uint64_t)&v6, a1, &v4).n128_u64[0];
  }
  return result;
}

uint64_t google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>>::ReadBeyondKeyValuePair(uint64_t a1, uint64_t a2)
{
  long long v4 = google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::NewEntry(**(google::protobuf::Arena ***)a1);
  uint64_t v5 = *(google::protobuf::Arena ***)(a1 + 48);
  if (v5 != v4)
  {
    if (v5) {
      (*((void (**)(google::protobuf::Arena **))*v5 + 1))(v5);
    }
    *(void *)(a1 + 48) = v4;
  }
  long long v6 = *(CoreML::Specification::MILSpec::Function **)(a1 + 40);
  *((_DWORD *)v4 + 10) |= 2u;
  Aligned = (google::protobuf::Arena **)v4[3];
  if (!Aligned)
  {
    unint64_t v8 = v4[4];
    if (!v8) {
      operator new();
    }
    CoreML::Specification::MILSpec::Function::Function((CoreML::Specification::MILSpec::Function *)Aligned);
    unint64_t v9 = google::protobuf::Arena::AllocateAligned(v8, 0, 24);
    char *v9 = (google::protobuf::Arena *)Aligned;
    v9[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Function>;
    uint64_t v10 = (unint64_t *)((char *)v8 + 32);
    do
      unint64_t v11 = __ldxr(v10);
    while (__stxr((unint64_t)v9, v10));
    v9[2] = (google::protobuf::Arena *)v11;
    v4[3] = (google::protobuf::Arena *)Aligned;
  }
  if (v6 != (CoreML::Specification::MILSpec::Function *)Aligned) {
    CoreML::Specification::MILSpec::Function::InternalSwap((CoreML::Specification::MILSpec::Function *)Aligned, v6);
  }
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::erase(*(void **)(a1 + 8), (unsigned __int8 *)(a1 + 16));
  uint64_t v12 = *(void *)(a1 + 48);
  *(_DWORD *)(v12 + 40) |= 1u;
  uint64_t v13 = *(void *)(v12 + 16);
  if ((long long *)v13 == &google::protobuf::internal::fixed_address_empty_string) {
    google::protobuf::internal::ArenaStringPtr::CreateInstance();
  }
  if (*(char *)(v13 + 23) < 0) {
    operator delete(*(void **)v13);
  }
  long long v14 = *(_OWORD *)(a1 + 16);
  *(void *)(v13 + 16) = *(void *)(a1 + 32);
  *(_OWORD *)uint64_t v13 = v14;
  *(unsigned char *)(a1 + 39) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  uint64_t v15 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 48) + 88))(*(void *)(a1 + 48), a2);
  if (v15) {
    google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>>::UseKeyAndValueFromEntry(a1);
  }
  if ((*(uint64_t (**)(void))(**(void **)(a1 + 48) + 40))(*(void *)(a1 + 48))) {
    *(void *)(a1 + 48) = 0;
  }
  return v15;
}

void sub_19EB35AB4(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C40408AB1BCLL);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::NewEntry(google::protobuf::Arena *a1)
{
  if (!a1) {
    operator new();
  }
  result[1] = 0;
  result[2] = (google::protobuf::Arena *)&google::protobuf::internal::fixed_address_empty_string;
  result[3] = 0;
  result[4] = a1;
  *((_DWORD *)result + 1CoreML::Specification::MILSpec::Value_BlobFileValue::New(this, 0) = 0;
  *double result = (google::protobuf::Arena *)&unk_1EF0DC5E8;
  return result;
}

unsigned __int8 **google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::MessageLite,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Function,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>>::UseKeyAndValueFromEntry(uint64_t a1)
{
  uint64_t v2 = (const std::string *)(*(uint64_t (**)(void))(**(void **)(a1 + 48) + 136))(*(void *)(a1 + 48));
  std::string::operator=((std::string *)(a1 + 16), v2);
  double result = (unsigned __int8 **)google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::operator[](*(void *)(a1 + 8), a1 + 16);
  *(void *)(a1 + 4CoreML::Specification::MILSpec::Value_BlobFileValue::New(this, 0) = result;
  uint64_t v4 = *(void *)(a1 + 48);
  *(_DWORD *)(v4 + 40) |= 2u;
  Aligned = *(google::protobuf::Arena ***)(v4 + 24);
  if (!Aligned)
  {
    long long v6 = *(google::protobuf::Arena **)(v4 + 32);
    if (!v6) {
      operator new();
    }
    CoreML::Specification::MILSpec::Function::Function((CoreML::Specification::MILSpec::Function *)Aligned);
    uint64_t v7 = google::protobuf::Arena::AllocateAligned(v6, 0, 24);
    *uint64_t v7 = (google::protobuf::Arena *)Aligned;
    v7[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Function>;
    unint64_t v8 = (unint64_t *)((char *)v6 + 32);
    do
      unint64_t v9 = __ldxr(v8);
    while (__stxr((unint64_t)v7, v8));
    v7[2] = (google::protobuf::Arena *)v9;
    *(void *)(v4 + 24) = Aligned;
    double result = *(unsigned __int8 ***)(a1 + 40);
  }
  if (Aligned != (google::protobuf::Arena **)result)
  {
    return CoreML::Specification::MILSpec::Function::InternalSwap((CoreML::Specification::MILSpec::Function *)result, (CoreML::Specification::MILSpec::Function *)Aligned);
  }
  return result;
}

void sub_19EB35C94(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C40408AB1BCLL);
  _Unwind_Resume(a1);
}

unsigned __int8 **CoreML::Specification::MILSpec::Function::InternalSwap(CoreML::Specification::MILSpec::Function *this, CoreML::Specification::MILSpec::Function *a2)
{
  uint64_t v4 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v4;
  long long v6 = (unsigned __int8 **)((char *)this + 48);
  uint64_t v5 = *((void *)this + 6);
  int v7 = *((_DWORD *)this + 6);
  unint64_t v9 = (unsigned __int8 **)((char *)a2 + 48);
  uint64_t v8 = *((void *)a2 + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v7;
  int v10 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v10;
  if (v5 == v8)
  {
    int v11 = *((_DWORD *)this + 14);
    *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
    *((_DWORD *)a2 + 14) = v11;
    uint64_t v12 = *((void *)this + 8);
    *((void *)this + 8) = *((void *)a2 + 8);
    *((void *)a2 + 8) = v12;
  }
  else
  {
    uint64_t v15 = 0;
    int v16 = *((_DWORD *)this + 14);
    google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::Init((uint64_t)&v15);
    google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::begin(&v18, *((void **)this + 8));
    memset(v17, 0, sizeof(v17));
    google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::insert<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::const_iterator>(&v15, &v18, v17);
    google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::operator=(v6, (uint64_t)v9);
    google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::operator=(v9, (uint64_t)&v15);
    google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::~Map(&v15);
  }
  double result = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::swap((unsigned __int8 **)this + 10, (uint64_t)a2 + 80);
  uint64_t v14 = *((void *)this + 13);
  *((void *)this + 13) = *((void *)a2 + 13);
  *((void *)a2 + 13) = v14;
  LODWORD(v14) = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v14;
  return result;
}

void sub_19EB35DDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::~Map((uint64_t *)va);
  _Unwind_Resume(a1);
}

unsigned __int8 **google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::operator=(unsigned __int8 **a1, uint64_t a2)
{
  if (a1 != (unsigned __int8 **)a2)
  {
    google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::clear((uint64_t)a1);
    google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::begin(&v6, *(void **)(a2 + 16));
    memset(v5, 0, sizeof(v5));
    google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::insert<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::const_iterator>(a1, &v6, v5);
  }
  return a1;
}

unsigned __int8 **google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::insert<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::const_iterator>(unsigned __int8 **result, long long *a2, void *a3)
{
  long long v10 = *a2;
  uint64_t v11 = *((void *)a2 + 2);
  uint64_t v3 = v10;
  if ((void)v10 != *a3)
  {
    uint64_t v5 = (uint64_t)result;
    do
    {
      google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper(v12, *(void *)(v5 + 16), *(unsigned __int8 **)(v3 + 24), 0);
      if (!v12[0])
      {
        uint64_t v6 = *(void *)(v10 + 24);
        int v7 = (const CoreML::Specification::MILSpec::Block *)(v6 + 24);
        uint64_t v8 = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::operator[](v5, v6);
        if (v7 != (const CoreML::Specification::MILSpec::Block *)v8)
        {
          unint64_t v9 = (CoreML::Specification::MILSpec::Block *)v8;
          CoreML::Specification::MILSpec::Block::Clear((CoreML::Specification::MILSpec::Block *)v8);
          CoreML::Specification::MILSpec::Block::MergeFrom(v9, v7);
        }
      }
      double result = google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::KeyValuePair const>::operator++((unsigned __int8 **)&v10);
      uint64_t v3 = v10;
    }
    while ((void)v10 != *a3);
  }
  return result;
}

google::protobuf::Arena **google::protobuf::Arena::OwnDestructor<CoreML::Specification::MILSpec::Function>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    double result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *double result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Function>;
    uint64_t v4 = (unint64_t *)(v3 + 4);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

void *CoreML::Specification::MILSpec::Program::MergeFrom(CoreML::Specification::MILSpec::Program *this, const CoreML::Specification::MILSpec::Program *a2)
{
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((unint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::begin(v14, *((void **)a2 + 5));
  for (int i = v14[0]; v14[0]; int i = v14[0])
  {
    uint64_t v6 = *((void *)i + 3);
    int v7 = (const CoreML::Specification::MILSpec::Function *)(v6 + 24);
    uint64_t v8 = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::operator[]((uint64_t)this + 24, v6);
    if (v7 != (const CoreML::Specification::MILSpec::Function *)v8)
    {
      unint64_t v9 = (CoreML::Specification::MILSpec::Function *)v8;
      CoreML::Specification::MILSpec::Function::Clear((CoreML::Specification::MILSpec::Function *)v8);
      CoreML::Specification::MILSpec::Function::MergeFrom(v9, v7);
    }
    google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::KeyValuePair const>::operator++(v14);
  }
  double result = google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::MILSpec::Value,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::MergeFrom((uint64_t)this + 48, (uint64_t)a2 + 48);
  uint64_t v11 = *((void *)a2 + 10);
  if (*(char *)(v11 + 23) < 0)
  {
    if (!*(void *)(v11 + 8)) {
      goto LABEL_15;
    }
  }
  else if (!*(unsigned char *)(v11 + 23))
  {
    goto LABEL_15;
  }
  double result = (char *)this + 80;
  uint64_t v12 = (long long *)*((void *)this + 10);
  if (v12 != (long long *)v11)
  {
    if (v12 == &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
    }
    double result = std::string::operator=(*((std::string **)this + 10), (const std::string *)v11);
  }
LABEL_15:
  uint64_t v13 = *((void *)a2 + 11);
  if (v13) {
    *((void *)this + 11) = v13;
  }
  return result;
}

uint64_t CoreML::Specification::MILSpec::Program::IsInitialized(CoreML::Specification::MILSpec::Program *this)
{
  return 1;
}

void CoreML::Specification::MILSpec::Program::Clear(CoreML::Specification::MILSpec::Program *this)
{
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::clear((uint64_t)this + 24);
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::clear((uint64_t)this + 56);
  uint64_t v2 = *((void *)this + 10);
  if ((long long *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(unsigned char **)uint64_t v2 = 0;
      *(void *)(v2 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v2 = 0;
      *(unsigned char *)(v2 + 23) = 0;
    }
  }
  *((void *)this + 11) = 0;
}

void CoreML::Specification::MILSpec::Program::New(CoreML::Specification::MILSpec::Program *this, google::protobuf::Arena *a2)
{
}

void sub_19EB3613C(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C40FAC9F822);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::MILSpec::Program>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    double result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *double result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::Program>;
    uint64_t v4 = (unint64_t *)(v3 + 4);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::MILSpec::Program>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void CoreML::Specification::MILSpec::Program::New(CoreML::Specification::MILSpec::Program *this)
{
}

void *CoreML::Specification::MILSpec::Program::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.MILSpec.Program");
}

void CoreML::Specification::MILSpec::Program::~Program(CoreML::Specification::MILSpec::Program *this)
{
  CoreML::Specification::MILSpec::Program::~Program(this);

  JUMPOUT(0x19F3C1920);
}

{
  uint64_t v2;

  *(void *)this = &unk_1EF0DA498;
  uint64_t v2 = *((void *)this + 10);
  if ((long long *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    MEMORY[0x19F3C1920](v2, 0x1012C40EC159624);
  }
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::~Map((void *)this + 7);
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::~Map((void *)this + 3);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

uint64_t CoreML::HashOutputStreamBuf::overflow(CoreML::HashOutputStreamBuf *this, int a2)
{
  int data = a2;
  uint64_t v2 = *((void *)this + 8);
  if (*(unsigned char *)(v2 + 136)) {
    return 0;
  }
  uint64_t v3 = 1;
  CC_SHA256_Update((CC_SHA256_CTX *)v2, &data, 1u);
  return v3;
}

uint64_t CoreML::HashOutputStreamBuf::xsputn(CoreML::HashOutputStreamBuf *this, const char *a2, uint64_t a3)
{
  uint64_t v3 = *((void *)this + 8);
  if (*(unsigned char *)(v3 + 136)) {
    return 0;
  }
  uint64_t v4 = a3;
  CC_SHA256_Update((CC_SHA256_CTX *)v3, a2, a3);
  return v4;
}

uint64_t std::__shared_ptr_pointer<CoreML::detail::HashOutputStreamBufImpl *,std::shared_ptr<CoreML::detail::HashOutputStreamBufImpl>::__shared_ptr_default_delete<CoreML::detail::HashOutputStreamBufImpl,CoreML::detail::HashOutputStreamBufImpl>,std::allocator<CoreML::detail::HashOutputStreamBufImpl>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrIN6CoreML6detail23HashOutputStreamBufImplEE27__shared_ptr_default_deleteIS3_S3_EE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<CoreML::detail::HashOutputStreamBufImpl *,std::shared_ptr<CoreML::detail::HashOutputStreamBufImpl>::__shared_ptr_default_delete<CoreML::detail::HashOutputStreamBufImpl,CoreML::detail::HashOutputStreamBufImpl>,std::allocator<CoreML::detail::HashOutputStreamBufImpl>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    JUMPOUT(0x19F3C1920);
  }
  return result;
}

void std::__shared_ptr_pointer<CoreML::detail::HashOutputStreamBufImpl *,std::shared_ptr<CoreML::detail::HashOutputStreamBufImpl>::__shared_ptr_default_delete<CoreML::detail::HashOutputStreamBufImpl,CoreML::detail::HashOutputStreamBufImpl>,std::allocator<CoreML::detail::HashOutputStreamBufImpl>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x19F3C1920);
}

void CoreML::validate<(MLModelType)300>(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16)) {
    uint64_t v4 = *(uint64_t **)(a2 + 16);
  }
  else {
    uint64_t v4 = &CoreML::Specification::_ModelDescription_default_instance_;
  }
  CoreML::validateRegressorInterface(&v32, (uint64_t)v4, *(_DWORD *)(a2 + 24), 0, 0);
  if ((v32 & 0xFFFFFFEF) != 0)
  {
    *(void *)a1 = v32;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)__p;
    uint64_t v6 = v34;
LABEL_21:
    *(void *)(a1 + 24) = v6;
    return;
  }
  if (*((int *)v4 + 6) >= 1)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = operator new(0xCuLL);
      char v30 = v8 + 3;
      int v31 = v8 + 3;
      *(void *)uint64_t v8 = 0x500000002;
      v8[2] = 1;
      BOOL v29 = v8;
      CoreML::validateSchemaTypes((CoreML::Result *)&v22, (unsigned int **)&v29, *(void *)(v4[4] + 8 * v7 + 8));
      int v32 = v22;
      if (SHIBYTE(v34) < 0) {
        operator delete(__p[0]);
      }
      *(_OWORD *)std::string __p = v23;
      uint64_t v34 = v24;
      BYTE7(v24) = 0;
      LOBYTE(v23) = 0;
      operator delete(v8);
      if ((v32 & 0xFFFFFFEF) != 0) {
        goto LABEL_20;
      }
    }
    while (++v7 < *((int *)v4 + 6));
  }
  if (*((int *)v4 + 12) >= 1)
  {
    uint64_t v9 = 0;
    while (1)
    {
      long long v10 = operator new(4uLL);
      *long long v10 = 2;
      char v30 = v10 + 1;
      int v31 = v10 + 1;
      BOOL v29 = v10;
      CoreML::validateSchemaTypes((CoreML::Result *)&v22, (unsigned int **)&v29, *(void *)(v4[7] + 8 * v9 + 8));
      int v32 = v22;
      if (SHIBYTE(v34) < 0) {
        operator delete(__p[0]);
      }
      *(_OWORD *)std::string __p = v23;
      uint64_t v34 = v24;
      BYTE7(v24) = 0;
      LOBYTE(v23) = 0;
      operator delete(v10);
      if ((v32 & 0xFFFFFFEF) != 0) {
        break;
      }
      if (++v9 >= *((int *)v4 + 12)) {
        goto LABEL_18;
      }
    }
LABEL_20:
    *(void *)a1 = v32;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)__p;
    uint64_t v6 = v34;
    goto LABEL_21;
  }
LABEL_18:
  if (*(_DWORD *)(a2 + 44) == 300)
  {
    uint64_t v11 = *(uint64_t **)(a2 + 32);
  }
  else
  {
    CoreML::Specification::protobuf_GLMRegressor_2eproto::InitDefaults(v5);
    uint64_t v11 = &CoreML::Specification::_GLMRegressor_default_instance_;
  }
  unint64_t v22 = &unk_1EF0CF608;
  long long v24 = 0u;
  long long v23 = 0u;
  unsigned int v12 = *((_DWORD *)v11 + 6);
  if (v12)
  {
    uint64_t v13 = v11[4];
    uint64_t v14 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)((char *)&v23 + 8), *((_DWORD *)v11 + 6));
    google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>((unint64_t *)&v23 + 1, (CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts **)v14, (CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts **)(v13 + 8), v12, **((_DWORD **)&v24 + 1) - v24);
    int v15 = v24 + v12;
    LODWORD(v24) = v15;
    if (**((_DWORD **)&v24 + 1) < v15) {
      **((_DWORD **)&v24 + 1) = v15;
    }
  }
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  int v16 = *((_DWORD *)v11 + 10);
  if (v16)
  {
    google::protobuf::RepeatedField<double>::Reserve((unsigned int *)&v25, v16);
    memcpy((void *)(v26 + 8), (const void *)(v11[6] + 8), 8 * *((int *)v11 + 10));
    int v17 = *((_DWORD *)v11 + 10);
    LODWORD(v25) = v17;
  }
  else
  {
    int v17 = 0;
  }
  int v28 = 0;
  uint64_t v18 = v11[1];
  if (v18)
  {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((unint64_t *)&v23, v18 & 0xFFFFFFFFFFFFFFFELL);
    int v17 = v25;
  }
  int v27 = *((_DWORD *)v11 + 15);
  if (v24 != v17)
  {
    std::string::basic_string[abi:ne180100]<0>(&v29, "Weights and offsets must be the same size.");
    *(void *)a1 = 13;
    std::operator+<char>();
LABEL_39:
    if (SHIBYTE(v31) < 0) {
      operator delete(v29);
    }
    goto LABEL_41;
  }
  if (v17 >= 2)
  {
    uint64_t v19 = v17;
    uint64_t v20 = *((void *)&v24 + 1) + 16;
    uint64_t v21 = v19 - 1;
    while (*(_DWORD *)(*(void *)v20 + 16) == *(_DWORD *)(*(void *)(*((void *)&v24 + 1) + 8) + 16))
    {
      v20 += 8;
      if (!--v21) {
        goto LABEL_37;
      }
    }
    std::string::basic_string[abi:ne180100]<0>(&v29, "All weight coefficients must be the same size.");
    *(void *)a1 = 13;
    std::operator+<char>();
    goto LABEL_39;
  }
LABEL_37:
  CoreML::Result::Result((CoreML::Result *)a1);
LABEL_41:
  CoreML::Specification::GLMRegressor::~GLMRegressor((CoreML::Specification::GLMRegressor *)&v22);
  if (SHIBYTE(v34) < 0) {
    operator delete(__p[0]);
  }
}

void sub_19EB36884(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  CoreML::Specification::GLMRegressor::~GLMRegressor((CoreML::Specification::GLMRegressor *)&a9);
  if (a30 < 0) {
    operator delete(a25);
  }
  _Unwind_Resume(a1);
}

void CoreML::validate<(MLModelType)400>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (const CoreML::Specification::ModelDescription *)&CoreML::Specification::_ModelDescription_default_instance_;
  if (*(void *)(a2 + 16)) {
    unint64_t v5 = *(const CoreML::Specification::ModelDescription **)(a2 + 16);
  }
  else {
    unint64_t v5 = (const CoreML::Specification::ModelDescription *)&CoreML::Specification::_ModelDescription_default_instance_;
  }
  unint64_t inited = CoreML::Specification::ModelDescription::ModelDescription((CoreML::Specification::ModelDescription *)v41, v5);
  if (*(_DWORD *)(a2 + 44) == 400)
  {
    uint64_t v7 = *(uint64_t **)(a2 + 32);
  }
  else
  {
    unint64_t inited = (CoreML::Specification::protobuf_GLMClassifier_2eproto *)CoreML::Specification::protobuf_GLMClassifier_2eproto::InitDefaults(inited);
    uint64_t v7 = &CoreML::Specification::_GLMClassifier_default_instance_;
  }
  int v8 = *((_DWORD *)v7 + 21);
  if (!v8)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "Classifier models must provide class labels.");
    uint64_t v38 = 13;
    std::operator+<char>();
    goto LABEL_26;
  }
  if (v8 == 100)
  {
    if (!*(_DWORD *)(v7[9] + 24))
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "Classifier declared to have String class labels must provide labels.");
      uint64_t v38 = 13;
      std::operator+<char>();
      goto LABEL_26;
    }
    CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(inited);
    if (qword_1EB4DE438)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "Classifier declared with String class labels must provide exclusively String class labels.");
      uint64_t v38 = 13;
      std::operator+<char>();
      goto LABEL_26;
    }
    goto LABEL_16;
  }
  if (v8 != 101)
  {
LABEL_16:
    int v9 = 0;
    goto LABEL_17;
  }
  if (!*(_DWORD *)(v7[9] + 16))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "Classifier declared to have Int64 class labels must provide labels.");
    uint64_t v38 = 13;
    std::operator+<char>();
    goto LABEL_26;
  }
  CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(inited);
  if (dword_1EB4E2310)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "Classifier declared with Int64 class labels must provide exclusively Int64 class labels.");
    uint64_t v38 = 13;
    std::operator+<char>();
LABEL_26:
    if ((SHIBYTE(v31) & 0x80000000) == 0) {
      goto LABEL_29;
    }
    long long v10 = __p;
    goto LABEL_28;
  }
  int v9 = 1;
LABEL_17:
  if (*(void *)(a2 + 16)) {
    uint64_t v4 = *(const CoreML::Specification::ModelDescription **)(a2 + 16);
  }
  CoreML::validateFeatureDescriptions<CoreML::Specification::ModelDescription>(&__p, (uint64_t)v4, *(_DWORD *)(a2 + 24), 0, 0);
  if ((__p & 0xFFFFFFEF) != 0)
  {
    long long v39 = v31;
    uint64_t v38 = (uint64_t)__p;
    uint64_t v40 = v32;
    goto LABEL_29;
  }
  CoreML::validateClassifierFeatureDescriptions((void **)&v38, v4, v9);
  if (SBYTE7(v32) < 0)
  {
    long long v10 = (void *)v31;
LABEL_28:
    operator delete(v10);
  }
LABEL_29:
  if ((v38 & 0xFFFFFFEF) != 0)
  {
    uint64_t v11 = v40;
    *(void *)a1 = v38;
    *(_OWORD *)(a1 + 8) = v39;
    *(void *)(a1 + 24) = v11;
    goto LABEL_63;
  }
  CoreML::validateDescriptionsAreAllVectorizableTypes<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>((uint64_t)&__p, (uint64_t)&v42);
  int v13 = (int)__p;
  uint64_t v38 = (uint64_t)__p;
  if (SHIBYTE(v40) < 0)
  {
    operator delete((void *)v39);
    int v13 = v38;
  }
  long long v39 = v31;
  uint64_t v40 = v32;
  if ((v13 & 0xFFFFFFEF) != 0)
  {
    *(void *)a1 = v38;
    *(_OWORD *)(a1 + 8) = v39;
    *(void *)(a1 + 24) = v40;
    goto LABEL_63;
  }
  if (*(_DWORD *)(a2 + 44) == 400)
  {
    uint64_t v14 = *(uint64_t **)(a2 + 32);
  }
  else
  {
    CoreML::Specification::protobuf_GLMClassifier_2eproto::InitDefaults(v12);
    uint64_t v14 = &CoreML::Specification::_GLMClassifier_default_instance_;
  }
  std::string __p = &unk_1EF0CFD28;
  long long v31 = 0u;
  long long v32 = 0u;
  unsigned int v15 = *((_DWORD *)v14 + 6);
  if (v15)
  {
    uint64_t v16 = v14[4];
    int v17 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)((char *)&v31 + 8), *((_DWORD *)v14 + 6));
    google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<CoreML::Specification::GLMClassifier_DoubleArray>::TypeHandler>((unint64_t *)&v31 + 1, (CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts **)v17, (CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts **)(v16 + 8), v15, **((_DWORD **)&v32 + 1) - v32);
    int v18 = v32 + v15;
    LODWORD(v32) = v18;
    if (**((_DWORD **)&v32 + 1) < v18) {
      **((_DWORD **)&v32 + 1) = v18;
    }
  }
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  int v19 = *((_DWORD *)v14 + 10);
  if (v19)
  {
    google::protobuf::RepeatedField<double>::Reserve((unsigned int *)&v33, v19);
    memcpy((void *)(v34 + 8), (const void *)(v14[6] + 8), 8 * *((int *)v14 + 10));
    LODWORD(v33) = *((_DWORD *)v14 + 10);
  }
  int v36 = 0;
  uint64_t v20 = v14[1];
  if (v20) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((unint64_t *)&v31, v20 & 0xFFFFFFFFFFFFFFFELL);
  }
  uint64_t v35 = *(uint64_t *)((char *)v14 + 60);
  int v37 = 0;
  int v21 = *((_DWORD *)v14 + 21);
  if (v21 == 100)
  {
    int v37 = 100;
    operator new();
  }
  if (v21 == 101)
  {
    int v37 = 101;
    operator new();
  }
  if (v35 >= 2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v27, "Invalid post evaluation transform");
    *(void *)a1 = 13;
    std::operator+<char>();
    goto LABEL_59;
  }
  if (HIDWORD(v35) >= 2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v27, "Invalid class encoding");
    *(void *)a1 = 13;
    std::operator+<char>();
    goto LABEL_59;
  }
  if (!v32)
  {
    std::string::basic_string[abi:ne180100]<0>(&v27, "The number of DoubleArrays in weights must be greater than zero");
    *(void *)a1 = 13;
    std::operator+<char>();
    goto LABEL_59;
  }
  if (v32 != v33)
  {
    std::string::basic_string[abi:ne180100]<0>(&v27, "The number of DoubleArrays in weights must match number of offsets");
    *(void *)a1 = 13;
    std::operator+<char>();
LABEL_59:
    if (SHIBYTE(v29) < 0) {
      operator delete(v27);
    }
    goto LABEL_61;
  }
  google::protobuf::RepeatedPtrField<CoreML::Specification::GLMClassifier_DoubleArray>::RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)&v27, (uint64_t)&v31 + 8);
  int v22 = *(_DWORD *)(*(void *)(v29 + 8) + 16);
  if (!v22)
  {
    std::string::basic_string[abi:ne180100]<0>(v25, "Weight DoubleArrays must have nonzero length");
    *(void *)a1 = 13;
    std::operator+<char>();
LABEL_72:
    if (v26 < 0) {
      operator delete(v25[0]);
    }
    goto LABEL_74;
  }
  if (v28 >= 2)
  {
    uint64_t v23 = v29 + 16;
    uint64_t v24 = v28 - 1;
    while (v22 == *(_DWORD *)(*(void *)v23 + 16))
    {
      v23 += 8;
      if (!--v24) {
        goto LABEL_69;
      }
    }
    std::string::basic_string[abi:ne180100]<0>(v25, "Weight DoubleArrays must have the same length");
    *(void *)a1 = 13;
    std::operator+<char>();
    goto LABEL_72;
  }
LABEL_69:
  CoreML::Result::Result((CoreML::Result *)a1);
LABEL_74:
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>(&v27);
LABEL_61:
  CoreML::Specification::GLMClassifier::~GLMClassifier((CoreML::Specification::GLMClassifier *)&__p);
  if (SHIBYTE(v40) < 0) {
    operator delete((void *)v39);
  }
LABEL_63:
  CoreML::Specification::ModelDescription::~ModelDescription((CoreML::Specification::ModelDescription *)v41);
}

void sub_19EB37140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,char a46)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>(&a16);
  CoreML::Specification::GLMClassifier::~GLMClassifier((CoreML::Specification::GLMClassifier *)&a22);
  if (a45 < 0) {
    operator delete(a40);
  }
  CoreML::Specification::ModelDescription::~ModelDescription((CoreML::Specification::ModelDescription *)&a46);
  _Unwind_Resume(a1);
}

google::protobuf::internal::RepeatedPtrFieldBase *google::protobuf::RepeatedPtrField<CoreML::Specification::GLMClassifier_DoubleArray>::RepeatedPtrField(google::protobuf::internal::RepeatedPtrFieldBase *this, uint64_t a2)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  unsigned int v3 = *(_DWORD *)(a2 + 8);
  if (v3)
  {
    uint64_t v4 = (CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts **)(*(void *)(a2 + 16) + 8);
    unint64_t v5 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend(this, *(_DWORD *)(a2 + 8));
    google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<CoreML::Specification::GLMClassifier_DoubleArray>::TypeHandler>((unint64_t *)this, (CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts **)v5, v4, v3, **((_DWORD **)this + 2) - *((_DWORD *)this + 2));
    signed int v6 = *((_DWORD *)this + 2) + v3;
    *((_DWORD *)this + 2) = v6;
    uint64_t v7 = (signed int *)*((void *)this + 2);
    if (*v7 < v6) {
      *uint64_t v7 = v6;
    }
  }
  return this;
}

unint64_t *google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<CoreML::Specification::GLMClassifier_DoubleArray>::TypeHandler>(unint64_t *result, CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts **a2, CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts **a3, unsigned int a4, unsigned int a5)
{
  int v9 = (google::protobuf::Arena **)result;
  if ((int)a5 >= (int)a4) {
    uint64_t v10 = a4;
  }
  else {
    uint64_t v10 = a5;
  }
  if ((int)v10 >= 1)
  {
    uint64_t v11 = a3;
    unsigned int v12 = a2;
    do
    {
      uint64_t v14 = *v11++;
      int v13 = v14;
      unsigned int v15 = *v12++;
      uint64_t result = google::protobuf::internal::GenericTypeHandler<CoreML::Specification::GLMClassifier_DoubleArray>::Merge(v13, v15);
      --v10;
    }
    while (v10);
  }
  BOOL v16 = __OFSUB__(a4, a5);
  int v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    int v18 = *v9;
    int v19 = (google::protobuf::Arena ***)&a2[a5];
    uint64_t v20 = &a3[a5];
    do
    {
      int v21 = *v20;
      if (!v18) {
        operator new();
      }
      CoreML::Specification::GLMClassifier_DoubleArray::GLMClassifier_DoubleArray((CoreML::Specification::GLMClassifier_DoubleArray *)Aligned);
      uint64_t v23 = google::protobuf::Arena::AllocateAligned(v18, 0, 24);
      *uint64_t v23 = (google::protobuf::Arena *)Aligned;
      v23[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::GLMClassifier_DoubleArray>;
      uint64_t v24 = (unint64_t *)((char *)v18 + 32);
      do
        unint64_t v25 = __ldxr(v24);
      while (__stxr((unint64_t)v23, v24));
      v23[2] = (google::protobuf::Arena *)v25;
      uint64_t result = google::protobuf::internal::GenericTypeHandler<CoreML::Specification::GLMClassifier_DoubleArray>::Merge(v21, (CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *)Aligned);
      *v19++ = Aligned;
      ++v20;
      --v17;
    }
    while (v17);
  }
  return result;
}

void sub_19EB37478(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

unint64_t *google::protobuf::internal::GenericTypeHandler<CoreML::Specification::GLMClassifier_DoubleArray>::Merge(CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *a1, CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *this)
{
  return CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts::MergeFrom((unint64_t *)this, a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<CoreML::Specification::GLMClassifier_DoubleArray>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t CoreML::RangeValue::value(CoreML::RangeValue *this)
{
  if (*(unsigned char *)this)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3C1380](exception, "Attempting to access unbound size_t val from RangeVal.");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return *((void *)this + 1);
}

void sub_19EB37530(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *operator<<(void *a1, CoreML::RangeValue *this)
{
  if (*(unsigned char *)this)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "inf");
    if ((v7 & 0x80u) == 0) {
      unsigned int v3 = __p;
    }
    else {
      unsigned int v3 = (void **)__p[0];
    }
    if ((v7 & 0x80u) == 0) {
      uint64_t v4 = v7;
    }
    else {
      uint64_t v4 = (uint64_t)__p[1];
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v3, v4);
    if ((char)v7 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    CoreML::RangeValue::value(this);
    std::ostream::operator<<();
  }
  return a1;
}

void sub_19EB375D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CoreML::RangeValue::operator/(CoreML::RangeValue *a1, uint64_t a2)
{
  if (*(unsigned char *)a1) {
    return 1;
  }
  if (!a2)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v8);
    uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Dividing range ", 15);
    unint64_t v5 = operator<<(v4, a1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" by 0.", 6);
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, &v7);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return 0;
}

void sub_19EB376D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t CoreML::ShapeRange::ShapeRange(uint64_t this, unint64_t a2, unint64_t a3)
{
  *(unsigned char *)this = 0;
  *(void *)(this + 8) = a2;
  *(unsigned char *)(this + 16) = 0;
  *(void *)(this + 24) = a3;
  if (a2 > a3)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Constructing invalid ShapeRange with ", 37);
    unsigned int v3 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)", ", 2);
    std::ostream::operator<<();
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, &v5);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return this;
}

void sub_19EB377F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

CoreML::ShapeRange *CoreML::ShapeRange::ShapeRange(CoreML::ShapeRange *this, const CoreML::RangeValue *a2, const CoreML::RangeValue *a3)
{
  *(_OWORD *)this = *(_OWORD *)a2;
  *((_OWORD *)this + 1) = *(_OWORD *)a3;
  if (*(unsigned char *)a2) {
    goto LABEL_6;
  }
  if (*(unsigned char *)a3) {
    return this;
  }
  unint64_t v6 = *((void *)a2 + 1);
  if (v6 > CoreML::RangeValue::value(a3))
  {
LABEL_6:
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v14);
    int v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Constructing invalid ShapeRange with ", 37);
    int v9 = operator<<(v8, a2);
    uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)", ", 2);
    operator<<(v10, a3);
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, &v13);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (*(unsigned char *)a2)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Constructing invalid ShapeRange unbound minimum value.", 54);
    unsigned int v12 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(v12, &v13);
    __cxa_throw(v12, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return this;
}

void sub_19EB379C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t CoreML::ShapeRange::operator+(CoreML::ShapeRange *this, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)this = 0;
  *((void *)this + 1) = 0;
  uint64_t v6 = 1;
  *((unsigned char *)this + 16) = 1;
  *((void *)this + 3) = 0;
  if (*(unsigned char *)a2)
  {
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)(a2 + 8) + a3;
  }
  uint64_t v11 = v6;
  uint64_t v12 = v7;
  CoreML::ShapeRange::setLower(this, (const CoreML::RangeValue *)&v11);
  if (*(unsigned char *)(a2 + 16))
  {
    uint64_t v8 = 0;
    uint64_t v9 = 1;
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v8 = *(void *)(a2 + 24) + a3;
  }
  uint64_t v11 = v9;
  uint64_t v12 = v8;
  return CoreML::ShapeRange::setUpper(this, (const CoreML::RangeValue *)&v11);
}

uint64_t CoreML::ShapeRange::setLower(CoreML::ShapeRange *this, const CoreML::RangeValue *a2)
{
  uint64_t result = CoreML::ShapeRange::isValid(this, a2);
  if (!result)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v12);
    uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Invalid setLower ", 17);
    uint64_t v7 = operator<<(v6, a2);
    uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" for range: ", 12);
    uint64_t v9 = operator<<(v8, (long long *)this);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"\n", 1);
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, &v11);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (*(unsigned char *)a2)
  {
    char v5 = 1;
  }
  else
  {
    uint64_t result = CoreML::RangeValue::value(a2);
    char v5 = 0;
    *((void *)this + 1) = result;
  }
  *(unsigned char *)this = v5;
  return result;
}

void sub_19EB37BC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t CoreML::ShapeRange::setUpper(CoreML::ShapeRange *this, const CoreML::RangeValue *a2)
{
  uint64_t result = CoreML::ShapeRange::isValid(this, a2);
  if (!result)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v12);
    uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Invalid setUpper ", 17);
    uint64_t v7 = operator<<(v6, a2);
    uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" for range: ", 12);
    uint64_t v9 = operator<<(v8, (long long *)this);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"\n", 1);
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, &v11);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (*(unsigned char *)a2)
  {
    char v5 = 1;
  }
  else
  {
    uint64_t result = CoreML::RangeValue::value(a2);
    char v5 = 0;
    *((void *)this + 3) = result;
  }
  *((unsigned char *)this + 16) = v5;
  return result;
}

void sub_19EB37D10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

BOOL CoreML::ShapeRange::isValid(CoreML::ShapeRange *this, const CoreML::RangeValue *a2)
{
  if (!*(unsigned char *)a2)
  {
    if (*(unsigned char *)this) {
      return 0;
    }
    unint64_t v5 = *((void *)this + 1);
    if (v5 > CoreML::RangeValue::value(a2)) {
      return 0;
    }
  }
  if (*((unsigned char *)this + 16)) {
    return 1;
  }
  if (*(unsigned char *)a2) {
    return 0;
  }
  unint64_t v6 = *((void *)this + 3);
  return v6 >= CoreML::RangeValue::value(a2);
}

void *operator<<(void *a1, long long *a2)
{
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"[", 1);
  long long v10 = *a2;
  unint64_t v5 = operator<<(v4, (CoreML::RangeValue *)&v10);
  unint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)", ", 2);
  long long v9 = a2[1];
  uint64_t v7 = operator<<(v6, (CoreML::RangeValue *)&v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"]", 1);
  return a1;
}

uint64_t CoreML::ShapeRange::operator-(CoreML::ShapeRange *this, uint64_t a2, unint64_t a3)
{
  *(unsigned char *)this = 0;
  *((void *)this + 1) = 0;
  uint64_t v6 = 1;
  *((unsigned char *)this + 16) = 1;
  *((void *)this + 3) = 0;
  if (*(unsigned char *)a2)
  {
    unint64_t v7 = 0;
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v8 = *(void *)(a2 + 8);
    BOOL v9 = v8 >= a3;
    unint64_t v7 = v8 - a3;
    if (!v9) {
      unint64_t v7 = 0;
    }
  }
  uint64_t v14 = v6;
  unint64_t v15 = v7;
  CoreML::ShapeRange::setLower(this, (const CoreML::RangeValue *)&v14);
  if (*(unsigned char *)(a2 + 16))
  {
    unint64_t v10 = 0;
    uint64_t v11 = 1;
  }
  else
  {
    uint64_t v11 = 0;
    unint64_t v12 = *(void *)(a2 + 24);
    BOOL v9 = v12 >= a3;
    unint64_t v10 = v12 - a3;
    if (!v9) {
      unint64_t v10 = 0;
    }
  }
  uint64_t v14 = v11;
  unint64_t v15 = v10;
  return CoreML::ShapeRange::setUpper(this, (const CoreML::RangeValue *)&v14);
}

uint64_t CoreML::ShapeRange::operator*(CoreML::ShapeRange *this, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)this = 0;
  *((void *)this + 1) = 0;
  uint64_t v6 = 1;
  *((unsigned char *)this + 16) = 1;
  *((void *)this + 3) = 0;
  if (*(unsigned char *)a2)
  {
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)(a2 + 8) * a3;
  }
  uint64_t v11 = v6;
  uint64_t v12 = v7;
  CoreML::ShapeRange::setLower(this, (const CoreML::RangeValue *)&v11);
  if (*(unsigned char *)(a2 + 16))
  {
    uint64_t v8 = 0;
    uint64_t v9 = 1;
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v8 = *(void *)(a2 + 24) * a3;
  }
  uint64_t v11 = v9;
  uint64_t v12 = v8;
  return CoreML::ShapeRange::setUpper(this, (const CoreML::RangeValue *)&v11);
}

uint64_t CoreML::ShapeRange::operator/(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 1;
  *(void *)(a1 + 24) = 0;
  uint64_t v9 = CoreML::RangeValue::operator/((CoreML::RangeValue *)a2, a3);
  uint64_t v10 = v6;
  CoreML::ShapeRange::setLower((CoreML::ShapeRange *)a1, (const CoreML::RangeValue *)&v9);
  uint64_t v9 = CoreML::RangeValue::operator/((CoreML::RangeValue *)(a2 + 16), a3);
  uint64_t v10 = v7;
  return CoreML::ShapeRange::setUpper((CoreML::ShapeRange *)a1, (const CoreML::RangeValue *)&v9);
}

uint64_t CoreML::ShapeRange::divideAndRoundUp(CoreML::ShapeRange *this, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = 0;
  *(unsigned char *)this = 0;
  *((void *)this + 1) = 0;
  uint64_t v7 = 1;
  *((unsigned char *)this + 16) = 1;
  *((void *)this + 3) = 0;
  if (a3)
  {
    if (!*(unsigned char *)a2)
    {
      unint64_t v6 = *(void *)(a2 + 8);
      uint64_t v7 = 0;
      if (v6) {
        unint64_t v6 = (v6 - 1) / a3 + 1;
      }
    }
  }
  uint64_t v11 = v7;
  unint64_t v12 = v6;
  CoreML::ShapeRange::setLower(this, (const CoreML::RangeValue *)&v11);
  unint64_t v8 = 0;
  uint64_t v9 = 1;
  if (a3)
  {
    if (!*(unsigned char *)(a2 + 16))
    {
      unint64_t v8 = *(void *)(a2 + 24);
      uint64_t v9 = 0;
      if (v8) {
        unint64_t v8 = (v8 - 1) / a3 + 1;
      }
    }
  }
  uint64_t v11 = v9;
  unint64_t v12 = v8;
  return CoreML::ShapeRange::setUpper(this, (const CoreML::RangeValue *)&v11);
}

uint64_t CoreML::ShapeRange::operator+(CoreML::ShapeRange *this, uint64_t a2, long long *a3)
{
  *(unsigned char *)this = 0;
  *((void *)this + 1) = 0;
  uint64_t v6 = 1;
  *((unsigned char *)this + 16) = 1;
  *((void *)this + 3) = 0;
  long long v13 = *a3;
  if ((_BYTE)v13)
  {
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v8 = CoreML::RangeValue::value((CoreML::RangeValue *)&v13);
    if (*(unsigned char *)a2)
    {
      uint64_t v7 = 0;
      uint64_t v6 = 1;
    }
    else
    {
      uint64_t v6 = 0;
      uint64_t v7 = *(void *)(a2 + 8) + v8;
    }
  }
  uint64_t v14 = v6;
  uint64_t v15 = v7;
  CoreML::ShapeRange::setLower(this, (const CoreML::RangeValue *)&v14);
  long long v13 = a3[1];
  if ((_BYTE)v13 || (uint64_t v9 = CoreML::RangeValue::value((CoreML::RangeValue *)&v13), *(unsigned char *)(a2 + 16)))
  {
    uint64_t v10 = 0;
    uint64_t v11 = 1;
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v10 = *(void *)(a2 + 24) + v9;
  }
  uint64_t v14 = v11;
  uint64_t v15 = v10;
  return CoreML::ShapeRange::setUpper(this, (const CoreML::RangeValue *)&v14);
}

uint64_t CoreML::ShapeRange::operator+(CoreML::ShapeRange *this, uint64_t a2, unsigned int a3)
{
  *(unsigned char *)this = 0;
  *((void *)this + 1) = 0;
  *((unsigned char *)this + 16) = 1;
  *((void *)this + 3) = 0;
  if ((a3 & 0x80000000) == 0)
  {
    if (!*(unsigned char *)a2)
    {
      uint64_t v6 = 0;
      unint64_t v7 = *(void *)(a2 + 8) + a3;
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  if (*(unsigned char *)a2)
  {
LABEL_5:
    unint64_t v7 = 0;
    uint64_t v6 = 1;
    goto LABEL_6;
  }
  uint64_t v6 = 0;
  unint64_t v11 = -a3;
  unint64_t v12 = *(void *)(a2 + 8);
  BOOL v13 = v12 >= v11;
  unint64_t v7 = v12 - v11;
  if (!v13) {
    unint64_t v7 = 0;
  }
LABEL_6:
  uint64_t v16 = v6;
  unint64_t v17 = v7;
  CoreML::ShapeRange::setLower(this, (const CoreML::RangeValue *)&v16);
  if ((a3 & 0x80000000) == 0)
  {
    if (!*(unsigned char *)(a2 + 16))
    {
      uint64_t v8 = 0;
      unint64_t v9 = *(void *)(a2 + 24) + a3;
      goto LABEL_11;
    }
LABEL_10:
    unint64_t v9 = 0;
    uint64_t v8 = 1;
    goto LABEL_11;
  }
  if (*(unsigned char *)(a2 + 16)) {
    goto LABEL_10;
  }
  uint64_t v8 = 0;
  unint64_t v14 = -a3;
  unint64_t v15 = *(void *)(a2 + 24);
  BOOL v13 = v15 >= v14;
  unint64_t v9 = v15 - v14;
  if (!v13) {
    unint64_t v9 = 0;
  }
LABEL_11:
  uint64_t v16 = v8;
  unint64_t v17 = v9;
  return CoreML::ShapeRange::setUpper(this, (const CoreML::RangeValue *)&v16);
}

uint64_t CoreML::ShapeRange::operator-(CoreML::ShapeRange *this, uint64_t a2, unsigned int a3)
{
  *(unsigned char *)this = 0;
  *((void *)this + 1) = 0;
  uint64_t v6 = 1;
  *((unsigned char *)this + 16) = 1;
  *((void *)this + 3) = 0;
  if (*(unsigned char *)a2)
  {
    unint64_t v7 = 0;
  }
  else
  {
    uint64_t v6 = 0;
    if ((a3 & 0x80000000) != 0)
    {
      unint64_t v7 = *(void *)(a2 + 8) + -a3;
    }
    else
    {
      unint64_t v8 = *(void *)(a2 + 8);
      BOOL v9 = v8 >= a3;
      unint64_t v7 = v8 - a3;
      if (!v9) {
        unint64_t v7 = 0;
      }
    }
  }
  uint64_t v14 = v6;
  unint64_t v15 = v7;
  CoreML::ShapeRange::setLower(this, (const CoreML::RangeValue *)&v14);
  if (*(unsigned char *)(a2 + 16))
  {
    unint64_t v10 = 0;
    uint64_t v11 = 1;
  }
  else
  {
    uint64_t v11 = 0;
    if ((a3 & 0x80000000) != 0)
    {
      unint64_t v10 = *(void *)(a2 + 24) + -a3;
    }
    else
    {
      unint64_t v12 = *(void *)(a2 + 24);
      BOOL v9 = v12 >= a3;
      unint64_t v10 = v12 - a3;
      if (!v9) {
        unint64_t v10 = 0;
      }
    }
  }
  uint64_t v14 = v11;
  unint64_t v15 = v10;
  return CoreML::ShapeRange::setUpper(this, (const CoreML::RangeValue *)&v14);
}

uint64_t CoreML::ShapeRange::operator*(CoreML::ShapeRange *this, uint64_t a2, long long *a3)
{
  *(unsigned char *)this = 0;
  *((void *)this + 1) = 0;
  uint64_t v6 = 1;
  *((unsigned char *)this + 16) = 1;
  *((void *)this + 3) = 0;
  long long v13 = *a3;
  if ((_BYTE)v13)
  {
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v8 = CoreML::RangeValue::value((CoreML::RangeValue *)&v13);
    if (*(unsigned char *)a2)
    {
      uint64_t v7 = 0;
      uint64_t v6 = 1;
    }
    else
    {
      uint64_t v6 = 0;
      uint64_t v7 = *(void *)(a2 + 8) * v8;
    }
  }
  uint64_t v14 = v6;
  uint64_t v15 = v7;
  CoreML::ShapeRange::setLower(this, (const CoreML::RangeValue *)&v14);
  long long v13 = a3[1];
  if ((_BYTE)v13 || (uint64_t v9 = CoreML::RangeValue::value((CoreML::RangeValue *)&v13), *(unsigned char *)(a2 + 16)))
  {
    uint64_t v10 = 0;
    uint64_t v11 = 1;
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v10 = *(void *)(a2 + 24) * v9;
  }
  uint64_t v14 = v11;
  uint64_t v15 = v10;
  return CoreML::ShapeRange::setUpper(this, (const CoreML::RangeValue *)&v14);
}

uint64_t CoreML::ShapeRange::operator/(uint64_t a1, long long *a2, int a3)
{
  if (a3 <= 0)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v9);
    unint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Dividing ShapeRange ", 20);
    uint64_t v6 = operator<<(v5, a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" by negative or zero value ", 27);
    std::ostream::operator<<();
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, &v8);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }

  return CoreML::ShapeRange::operator/(a1, (uint64_t)a2, a3);
}

void sub_19EB38590(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t CoreML::ShapeRange::setValue(uint64_t this, unint64_t a2)
{
  if (*(unsigned char *)this || *(void *)(this + 8) > a2 || !*(unsigned char *)(this + 16) && *(void *)(this + 24) < a2)
  {
    uint64_t v2 = (long long *)this;
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Invalid setValue ", 17);
    unsigned int v3 = (void *)std::ostream::operator<<();
    uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)" for range: ", 12);
    unint64_t v5 = operator<<(v4, v2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"\n", 1);
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, &v7);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  *(void *)(this + 8) = a2;
  *(unsigned char *)this = 0;
  *(void *)(this + 24) = a2;
  *(unsigned char *)(this + 16) = 0;
  return this;
}

void sub_19EB386E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

unint64_t CoreML::ShapeRange::intersect(CoreML::ShapeRange *this, const CoreML::ShapeRange *a2, long long *a3)
{
  *(unsigned char *)this = 0;
  *((void *)this + 1) = 0;
  *((unsigned char *)this + 16) = 1;
  *((void *)this + 3) = 0;
  uint64_t v6 = *(void *)a3;
  uint64_t v7 = *((void *)a3 + 1);
  uint64_t v24 = v6;
  uint64_t v25 = v7;
  if ((_BYTE)v6) {
    goto LABEL_2;
  }
  if (!*(unsigned char *)a2)
  {
    unint64_t v10 = *((void *)a2 + 1);
    if (v10 <= CoreML::RangeValue::value((CoreML::RangeValue *)&v24))
    {
      uint64_t v6 = *(void *)a3;
      uint64_t v7 = *((void *)a3 + 1);
LABEL_2:
      uint64_t v24 = v6;
      uint64_t v25 = v7;
      std::string v8 = (const CoreML::RangeValue *)&v24;
      uint64_t v9 = this;
      goto LABEL_6;
    }
  }
  uint64_t v9 = this;
  std::string v8 = a2;
LABEL_6:
  CoreML::ShapeRange::setLower(v9, v8);
  int v11 = *((unsigned __int8 *)a2 + 16);
  uint64_t v12 = *((void *)a3 + 2);
  uint64_t v13 = *((void *)a3 + 3);
  uint64_t v24 = v12;
  uint64_t v25 = v13;
  if (!v11)
  {
    if ((_BYTE)v12 || (unint64_t v16 = *((void *)a2 + 3), v16 < CoreML::RangeValue::value((CoreML::RangeValue *)&v24)))
    {
      uint64_t v15 = this;
      uint64_t v14 = (const CoreML::ShapeRange *)((char *)a2 + 16);
      goto LABEL_11;
    }
    uint64_t v12 = *((void *)a3 + 2);
    uint64_t v13 = *((void *)a3 + 3);
  }
  uint64_t v24 = v12;
  uint64_t v25 = v13;
  uint64_t v14 = (const CoreML::RangeValue *)&v24;
  uint64_t v15 = this;
LABEL_11:
  unint64_t result = CoreML::ShapeRange::setUpper(v15, v14);
  if (*(unsigned char *)a2
    || !*((unsigned char *)a2 + 16)
    && ((unint64_t v18 = *((void *)a2 + 1),
         unint64_t result = CoreML::RangeValue::value((const CoreML::ShapeRange *)((char *)a2 + 16)),
         v18 > result)
     || *(unsigned char *)a2))
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v24);
    int v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"Invalid intersection between ", 29);
    uint64_t v20 = operator<<(v19, (long long *)a2);
    int v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" and ", 5);
    operator<<(v21, a3);
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, &v23);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return result;
}

void sub_19EB388E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t CoreML::ShapeRange::unify(CoreML::ShapeRange *this, const CoreML::ShapeRange *a2, uint64_t *a3)
{
  *(unsigned char *)this = 0;
  *((void *)this + 1) = 0;
  *((unsigned char *)this + 16) = 1;
  *((void *)this + 3) = 0;
  uint64_t v6 = *a3;
  uint64_t v7 = a3[1];
  uint64_t v17 = v6;
  uint64_t v18 = v7;
  if ((_BYTE)v6) {
    goto LABEL_2;
  }
  if (!*(unsigned char *)a2)
  {
    unint64_t v10 = *((void *)a2 + 1);
    if (v10 <= CoreML::RangeValue::value((CoreML::RangeValue *)&v17))
    {
LABEL_2:
      std::string v8 = this;
      uint64_t v9 = a2;
      goto LABEL_7;
    }
    uint64_t v6 = *a3;
    uint64_t v7 = a3[1];
  }
  uint64_t v17 = v6;
  uint64_t v18 = v7;
  uint64_t v9 = (const CoreML::RangeValue *)&v17;
  std::string v8 = this;
LABEL_7:
  CoreML::ShapeRange::setLower(v8, v9);
  uint64_t v12 = (const CoreML::ShapeRange *)((char *)a2 + 16);
  int v11 = *((unsigned __int8 *)a2 + 16);
  uint64_t v13 = a3[2];
  uint64_t v14 = a3[3];
  uint64_t v17 = v13;
  uint64_t v18 = v14;
  if (!v11)
  {
    if (!(_BYTE)v13)
    {
      unint64_t v16 = *((void *)a2 + 3);
      if (v16 >= CoreML::RangeValue::value((CoreML::RangeValue *)&v17)) {
        goto LABEL_8;
      }
      uint64_t v13 = a3[2];
      uint64_t v14 = a3[3];
    }
    uint64_t v17 = v13;
    uint64_t v18 = v14;
    return CoreML::ShapeRange::setUpper(this, (const CoreML::RangeValue *)&v17);
  }
LABEL_8:

  return CoreML::ShapeRange::setUpper(this, v12);
}

BOOL CoreML::ShapeRange::isFixed(CoreML::ShapeRange *this)
{
  int v3 = *((unsigned __int8 *)this + 16);
  uint64_t v2 = (CoreML::ShapeRange *)((char *)this + 16);
  if (v3) {
    return 0;
  }
  uint64_t v5 = CoreML::RangeValue::value(v2);
  return v5 == CoreML::RangeValue::value(this);
}

double CoreML::ShapeConstraint::updateWidthRange(CoreML::ShapeConstraint *this, const CoreML::ShapeRange *a2)
{
  uint64_t v2 = (_OWORD *)((char *)this + 128);
  CoreML::ShapeRange::intersect((CoreML::ShapeRange *)v5, (CoreML::ShapeConstraint *)((char *)this + 128), (long long *)a2);
  double result = *(double *)v5;
  long long v4 = v5[1];
  *uint64_t v2 = v5[0];
  v2[1] = v4;
  return result;
}

double CoreML::ShapeConstraint::updateHeightRange(CoreML::ShapeConstraint *this, const CoreML::ShapeRange *a2)
{
  uint64_t v2 = (_OWORD *)((char *)this + 96);
  CoreML::ShapeRange::intersect((CoreML::ShapeRange *)v5, (CoreML::ShapeConstraint *)((char *)this + 96), (long long *)a2);
  double result = *(double *)v5;
  long long v4 = v5[1];
  *uint64_t v2 = v5[0];
  v2[1] = v4;
  return result;
}

double CoreML::ShapeConstraint::updateChannelRange(CoreML::ShapeConstraint *this, const CoreML::ShapeRange *a2)
{
  uint64_t v2 = (_OWORD *)((char *)this + 64);
  CoreML::ShapeRange::intersect((CoreML::ShapeRange *)v5, (CoreML::ShapeConstraint *)((char *)this + 64), (long long *)a2);
  double result = *(double *)v5;
  long long v4 = v5[1];
  *uint64_t v2 = v5[0];
  v2[1] = v4;
  return result;
}

double CoreML::ShapeConstraint::updateSequenceRange(CoreML::ShapeConstraint *this, const CoreML::ShapeRange *a2)
{
  CoreML::ShapeRange::intersect((CoreML::ShapeRange *)v5, this, (long long *)a2);
  double result = *(double *)v5;
  long long v4 = v5[1];
  *(_OWORD *)this = v5[0];
  *((_OWORD *)this + 1) = v4;
  return result;
}

double CoreML::ShapeConstraint::updateBatchRange(CoreML::ShapeConstraint *this, const CoreML::ShapeRange *a2)
{
  uint64_t v2 = (_OWORD *)((char *)this + 32);
  CoreML::ShapeRange::intersect((CoreML::ShapeRange *)v5, (CoreML::ShapeConstraint *)((char *)this + 32), (long long *)a2);
  double result = *(double *)v5;
  long long v4 = v5[1];
  *uint64_t v2 = v5[0];
  v2[1] = v4;
  return result;
}

double CoreML::ShapeConstraint::copyFrom(CoreML::ShapeConstraint *this, const CoreML::ShapeConstraint *a2)
{
  CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v10, this, (long long *)a2);
  long long v4 = v11;
  *(_OWORD *)this = v10;
  *((_OWORD *)this + 1) = v4;
  CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v10, (CoreML::ShapeConstraint *)((char *)this + 32), (long long *)a2 + 2);
  long long v5 = v11;
  *((_OWORD *)this + 2) = v10;
  *((_OWORD *)this + 3) = v5;
  CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v10, (CoreML::ShapeConstraint *)((char *)this + 64), (long long *)a2 + 4);
  long long v6 = v11;
  *((_OWORD *)this + 4) = v10;
  *((_OWORD *)this + 5) = v6;
  CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v10, (CoreML::ShapeConstraint *)((char *)this + 96), (long long *)a2 + 6);
  long long v7 = v11;
  *((_OWORD *)this + 6) = v10;
  *((_OWORD *)this + 7) = v7;
  CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v10, (CoreML::ShapeConstraint *)((char *)this + 128), (long long *)a2 + 8);
  double result = *(double *)&v10;
  long long v9 = v11;
  *((_OWORD *)this + 8) = v10;
  *((_OWORD *)this + 9) = v9;
  return result;
}

double CoreML::ShapeConstraint::upperBoundHeight(CoreML::ShapeConstraint *this, const CoreML::RangeValue *a2)
{
  if (!*(unsigned char *)a2)
  {
    int v3 = (CoreML::ShapeConstraint *)((char *)this + 96);
    v6[0] = 0;
    uint64_t v7 = 0;
    CoreML::ShapeRange::ShapeRange((CoreML::ShapeRange *)v8, (const CoreML::RangeValue *)v6, a2);
    CoreML::ShapeRange::intersect((CoreML::ShapeRange *)v9, v3, v8);
    double result = *(double *)v9;
    long long v5 = v9[1];
    *((_OWORD *)this + 6) = v9[0];
    *((_OWORD *)this + 7) = v5;
  }
  return result;
}

double CoreML::ShapeConstraint::upperBoundWidth(CoreML::ShapeConstraint *this, const CoreML::RangeValue *a2)
{
  if (!*(unsigned char *)a2)
  {
    int v3 = (CoreML::ShapeConstraint *)((char *)this + 128);
    v6[0] = 0;
    uint64_t v7 = 0;
    CoreML::ShapeRange::ShapeRange((CoreML::ShapeRange *)v8, (const CoreML::RangeValue *)v6, a2);
    CoreML::ShapeRange::intersect((CoreML::ShapeRange *)v9, v3, v8);
    double result = *(double *)v9;
    long long v5 = v9[1];
    *((_OWORD *)this + 8) = v9[0];
    *((_OWORD *)this + 9) = v5;
  }
  return result;
}

BOOL CoreML::ShapeConstraint::hasFixedCHW(CoreML::ShapeConstraint *this)
{
  if (!CoreML::ShapeRange::isFixed((CoreML::ShapeConstraint *)((char *)this + 64))
    || !CoreML::ShapeRange::isFixed((CoreML::ShapeConstraint *)((char *)this + 96)))
  {
    return 0;
  }

  return CoreML::ShapeRange::isFixed((CoreML::ShapeConstraint *)((char *)this + 128));
}

void CoreML::validate<(MLModelType)2003>(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16)) {
    int v3 = *(uint64_t **)(a2 + 16);
  }
  else {
    int v3 = &CoreML::Specification::_ModelDescription_default_instance_;
  }
  if (*(_DWORD *)(a2 + 44) == 2003)
  {
    CoreML::Result::Result((CoreML::Result *)&v80);
    long long v5 = (std::locale::__imp *)operator new(4uLL);
    *(_DWORD *)long long v5 = 5;
    int v68 = (char *)v5 + 4;
    int v69 = (char *)v5 + 4;
    v67.__locale_ = v5;
    CoreML::validateDescriptionsContainFeatureWithTypes<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>((uint64_t)&__p, (uint64_t)(v3 + 2), 1, (unsigned int **)&v67);
    unint64_t v80 = __p;
    if (SHIBYTE(v82) < 0) {
      operator delete((void *)v81);
    }
    long long v81 = v73;
    uint64_t v82 = v74;
    HIBYTE(v74) = 0;
    LOBYTE(v73) = 0;
    operator delete(v5);
    if ((v80 & 0xFFFFFFEF) != 0) {
      goto LABEL_11;
    }
    long long v6 = (std::locale::__imp *)operator new(4uLL);
    *(_DWORD *)long long v6 = 5;
    int v68 = (char *)v6 + 4;
    int v69 = (char *)v6 + 4;
    v67.__locale_ = v6;
    CoreML::validateDescriptionsContainFeatureWithTypes<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>((uint64_t)&__p, (uint64_t)(v3 + 5), 1, (unsigned int **)&v67);
    unint64_t v80 = __p;
    if (SHIBYTE(v82) < 0) {
      operator delete((void *)v81);
    }
    long long v81 = v73;
    uint64_t v82 = v74;
    HIBYTE(v74) = 0;
    LOBYTE(v73) = 0;
    operator delete(v6);
    if ((v80 & 0xFFFFFFEF) != 0) {
      goto LABEL_11;
    }
    if (*(_DWORD *)(a2 + 44) == 2003)
    {
      long long v9 = *(uint64_t **)(a2 + 32);
    }
    else
    {
      unint64_t inited = CoreML::Specification::CoreMLModels::protobuf_SoundAnalysisPreprocessing_2eproto::InitDefaults((CoreML::Specification::CoreMLModels::protobuf_SoundAnalysisPreprocessing_2eproto *)inited);
      long long v9 = &CoreML::Specification::CoreMLModels::_SoundAnalysisPreprocessing_default_instance_;
    }
    int v10 = *((_DWORD *)v9 + 7);
    if (!v10)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "Type for sound analysis preprocessing not set");
      *(void *)a1 = 13;
      std::operator+<char>();
      if (SHIBYTE(v73) < 0) {
        operator delete(__p);
      }
      goto LABEL_12;
    }
    if (v10 != 20)
    {
LABEL_11:
      *(void *)a1 = v80;
      *(_OWORD *)(a1 + 8) = v81;
      *(void *)(a1 + 24) = v82;
      long long v81 = 0uLL;
      uint64_t v82 = 0;
LABEL_12:
      if ((SHIBYTE(v82) & 0x80000000) == 0) {
        return;
      }
      std::string v8 = (void *)v81;
      goto LABEL_16;
    }
    long long v11 = *(uint64_t **)(*(void *)(v3[4] + 8) + 32);
    if (!v11) {
      long long v11 = &CoreML::Specification::_FeatureType_default_instance_;
    }
    if (*((_DWORD *)v11 + 9) == 5)
    {
      uint64_t v12 = (uint64_t *)v11[3];
    }
    else
    {
      CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults((CoreML::Specification::protobuf_FeatureTypes_2eproto *)inited);
      uint64_t v12 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
    }
    uint64_t v78 = 0;
    uint64_t v79 = 0;
    int v13 = *((_DWORD *)v12 + 4);
    if (v13)
    {
      google::protobuf::RepeatedField<double>::Reserve((unsigned int *)&v78, v13);
      uint64_t v14 = v79;
      uint64_t v15 = v79 + 1;
      memcpy(v79 + 1, (const void *)(v12[3] + 8), 8 * *((int *)v12 + 4));
      LODWORD(v78) = *((_DWORD *)v12 + 4);
      if (v78 == 1 && *v15 == 15600)
      {
        if (*(void *)(*(void *)(v3[4] + 8) + 32)) {
          unint64_t v16 = *(const CoreML::Specification::FeatureType **)(*(void *)(v3[4] + 8) + 32);
        }
        else {
          unint64_t v16 = (const CoreML::Specification::FeatureType *)&CoreML::Specification::_FeatureType_default_instance_;
        }
        uint64_t v17 = CoreML::Specification::FeatureType::FeatureType((CoreML::Specification::FeatureType *)&v67, v16);
        if (v71 == 5)
        {
          uint64_t v18 = v70;
        }
        else
        {
          uint64_t v17 = (CoreML::Specification::protobuf_FeatureTypes_2eproto *)CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(v17);
          uint64_t v18 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
        }
        if (*((_DWORD *)v18 + 9) == 65568)
        {
          std::string v23 = *(uint64_t **)(*(void *)(v3[7] + 8) + 32);
          if (!v23) {
            std::string v23 = &CoreML::Specification::_FeatureType_default_instance_;
          }
          if (*((_DWORD *)v23 + 9) == 5)
          {
            uint64_t v24 = (uint64_t *)v23[3];
          }
          else
          {
            CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(v17);
            uint64_t v24 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
          }
          google::protobuf::RepeatedField<long long>::RepeatedField((uint64_t)&v65, (int *)v24 + 4);
          if (v65 == 3 && *((void *)v66 + 1) == 1 && *((void *)v66 + 2) == 96 && *((void *)v66 + 3) == 64)
          {
            if (*(void *)(*(void *)(v3[7] + 8) + 32)) {
              int v28 = *(const CoreML::Specification::FeatureType **)(*(void *)(v3[7] + 8) + 32);
            }
            else {
              int v28 = (const CoreML::Specification::FeatureType *)&CoreML::Specification::_FeatureType_default_instance_;
            }
            uint64_t v29 = CoreML::Specification::FeatureType::FeatureType((CoreML::Specification::FeatureType *)v61, v28);
            if (v64 == 5)
            {
              char v30 = v63;
            }
            else
            {
              CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(v29);
              char v30 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
            }
            if (*((_DWORD *)v30 + 9) == 65568)
            {
              int v22 = 2;
            }
            else
            {
              std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
              int v45 = (CoreML::Specification::protobuf_FeatureTypes_2eproto *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)&v73 + 1, (uint64_t)"Unsupported array type \"", 24);
              int v46 = v45;
              if (v64 == 5)
              {
                int v47 = v63;
              }
              else
              {
                CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(v45);
                int v47 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
              }
              int v48 = *((_DWORD *)v47 + 9);
              int v49 = "INVALID";
              if (v48 > 65599)
              {
                if (v48 == 65600)
                {
                  int v49 = "MLArrayDataTypeDOUBLE";
                }
                else if (v48 == 131104)
                {
                  int v49 = "MLArrayDataTypeINT32";
                }
              }
              else if (v48 == 65552)
              {
                int v49 = "MLArrayDataTypeFLOAT16";
              }
              else if (v48 == 65568)
              {
                int v49 = "MLArrayDataTypeFLOAT32";
              }
              size_t v50 = strlen(v49);
              uint64_t v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)v49, v50);
              int v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)"\" for feature \"", 15);
              std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v59, *(const void ***)(*(void *)(v3[4] + 8) + 16), "\". ");
              if ((v60 & 0x80u) == 0) {
                int64_t v53 = v59;
              }
              else {
                int64_t v53 = (void **)v59[0];
              }
              if ((v60 & 0x80u) == 0) {
                uint64_t v54 = v60;
              }
              else {
                uint64_t v54 = (uint64_t)v59[1];
              }
              uint64_t v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)v53, v54);
              unint64_t v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"Should be of: ", 14);
              uint64_t v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)"MLArrayDataTypeFLOAT32", 22);
              uint64_t v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)".", 1);
              std::endl[abi:ne180100]<char,std::char_traits<char>>(v58);
              if ((char)v60 < 0) {
                operator delete(v59[0]);
              }
              std::stringbuf::str();
              *(void *)a1 = 8;
              std::operator+<char>();
              if ((char)v60 < 0) {
                operator delete(v59[0]);
              }
              std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&__p);
              int v22 = 1;
            }
            CoreML::Specification::FeatureType::~FeatureType((CoreML::Specification::FeatureType *)v61);
          }
          else
          {
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)&v73 + 1, (uint64_t)"Incorrect output shape, should be 3-dimension, of size: ", 56);
            long long v31 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"x", 1);
            long long v32 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"x", 1);
            uint64_t v33 = (void *)std::ostream::operator<<();
            std::endl[abi:ne180100]<char,std::char_traits<char>>(v33);
            std::stringbuf::str();
            *(void *)a1 = 8;
            std::operator+<char>();
            if ((char)v62 < 0) {
              operator delete(v61[0]);
            }
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&__p);
            int v22 = 1;
          }
          if (v66 && !*(void *)v66) {
            operator delete(v66);
          }
        }
        else
        {
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
          uint64_t v25 = (CoreML::Specification::protobuf_FeatureTypes_2eproto *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)&v73 + 1, (uint64_t)"Unsupported array type \"", 24);
          char v26 = v25;
          if (v71 == 5)
          {
            int v27 = v70;
          }
          else
          {
            CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(v25);
            int v27 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
          }
          int v34 = *((_DWORD *)v27 + 9);
          uint64_t v35 = "INVALID";
          if (v34 > 65599)
          {
            if (v34 == 65600)
            {
              uint64_t v35 = "MLArrayDataTypeDOUBLE";
            }
            else if (v34 == 131104)
            {
              uint64_t v35 = "MLArrayDataTypeINT32";
            }
          }
          else if (v34 == 65552)
          {
            uint64_t v35 = "MLArrayDataTypeFLOAT16";
          }
          else if (v34 == 65568)
          {
            uint64_t v35 = "MLArrayDataTypeFLOAT32";
          }
          size_t v36 = strlen(v35);
          int v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)v35, v36);
          uint64_t v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"\" for feature \"", 15);
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v61, *(const void ***)(*(void *)(v3[4] + 8) + 16), "\". ");
          if ((v62 & 0x80u) == 0) {
            long long v39 = v61;
          }
          else {
            long long v39 = (void **)v61[0];
          }
          if ((v62 & 0x80u) == 0) {
            uint64_t v40 = v62;
          }
          else {
            uint64_t v40 = (uint64_t)v61[1];
          }
          int v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)v39, v40);
          uint64_t v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"Should be of: ", 14);
          int v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"MLArrayDataTypeFLOAT32", 22);
          unsigned int v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)".", 1);
          std::endl[abi:ne180100]<char,std::char_traits<char>>(v44);
          if ((char)v62 < 0) {
            operator delete(v61[0]);
          }
          std::stringbuf::str();
          *(void *)a1 = 8;
          std::operator+<char>();
          if ((char)v62 < 0) {
            operator delete(v61[0]);
          }
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&__p);
          int v22 = 1;
        }
        CoreML::Specification::FeatureType::~FeatureType((CoreML::Specification::FeatureType *)&v67);
        goto LABEL_91;
      }
    }
    else
    {
      uint64_t v14 = 0;
    }
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)&v73 + 1, (uint64_t)"Incorrect input shape, should be 1-dimension, of length: ", 57);
    int v19 = (void *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(void *)(*v19 - 24)));
    uint64_t v20 = std::locale::use_facet(&v67, MEMORY[0x1E4FBA258]);
    ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 10);
    std::locale::~locale(&v67);
    std::ostream::put();
    std::ostream::flush();
    std::stringbuf::str();
    *(void *)a1 = 8;
    std::operator+<char>();
    if (SHIBYTE(v69) < 0) {
      operator delete(v67.__locale_);
    }
    std::string __p = (void *)*MEMORY[0x1E4FBA408];
    uint64_t v21 = *(void *)(MEMORY[0x1E4FBA408] + 72);
    *(void **)((char *)&__p + *((void *)__p - 3)) = *(void **)(MEMORY[0x1E4FBA408] + 64);
    *((void *)&v73 + 1) = v21;
    uint64_t v74 = MEMORY[0x1E4FBA470] + 16;
    if (v76 < 0) {
      operator delete(v75);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x19F3C1850](&v77);
    if (!v14) {
      goto LABEL_12;
    }
    int v22 = 1;
LABEL_91:
    if (!*v14) {
      operator delete(v14);
    }
    if (v22 != 2) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "Model not a sound analysis preprocessing.");
  *(void *)a1 = 13;
  std::operator+<char>();
  if ((SHIBYTE(v73) & 0x80000000) == 0) {
    return;
  }
  std::string v8 = __p;
LABEL_16:
  operator delete(v8);
}

void sub_19EB39EEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,std::locale a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a33);
  CoreML::Specification::FeatureType::~FeatureType((CoreML::Specification::FeatureType *)&a15);
  if (a24 && !*a24) {
    operator delete(a24);
  }
  CoreML::Specification::FeatureType::~FeatureType((CoreML::Specification::FeatureType *)&a25);
  if (!*v38) {
    operator delete(v38);
  }
  if (*(char *)(v39 - 65) < 0) {
    operator delete(*(void **)(v39 - 88));
  }
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::RepeatedField<long long>::RepeatedField(uint64_t a1, int *a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  int v4 = *a2;
  if (v4)
  {
    google::protobuf::RepeatedField<double>::Reserve((unsigned int *)a1, v4);
    memcpy((void *)(*(void *)(a1 + 8) + 8), (const void *)(*((void *)a2 + 1) + 8), 8 * *a2);
    *(_DWORD *)a1 = *a2;
  }
  return a1;
}

void CoreML::validate<(MLModelType)601>(uint64_t a1, uint64_t a2)
{
  v44[1] = *MEMORY[0x1E4F143B8];
  if (*(void *)(a2 + 16)) {
    int v4 = *(uint64_t **)(a2 + 16);
  }
  else {
    int v4 = &CoreML::Specification::_ModelDescription_default_instance_;
  }
  CoreML::Result::Result((CoreML::Result *)&v41);
  int v5 = *(_DWORD *)(a2 + 24);
  LODWORD(v37[0]) = 0;
  CoreML::validateModelDescription((uint64_t)&v38, (uint64_t)v4, v5, (char *)v37);
  int v6 = (int)v38;
  int v41 = v38;
  if (SHIBYTE(v43) < 0)
  {
    operator delete((void *)__p);
    int v6 = (int)v41;
  }
  long long __p = v39;
  uint64_t v43 = v40;
  if ((v6 & 0xFFFFFFEF) != 0)
  {
    *(void *)a1 = v41;
    *(_OWORD *)(a1 + 8) = __p;
    *(void *)(a1 + 24) = v43;
    return;
  }
  uint64_t v7 = (unsigned int *)operator new(0x14uLL);
  v37[1] = v7 + 5;
  v37[2] = v7 + 5;
  v7[4] = 6;
  *(_OWORD *)uint64_t v7 = xmmword_19EC81868;
  v37[0] = v7;
  CoreML::validateDescriptionsContainFeatureWithTypes<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>((uint64_t)&v38, (uint64_t)(v4 + 2), 1, v37);
  int v8 = (int)v38;
  int v41 = v38;
  if (SHIBYTE(v43) < 0)
  {
    operator delete((void *)__p);
    int v8 = (int)v41;
  }
  long long __p = v39;
  uint64_t v43 = v40;
  if ((v8 & 0xFFFFFFEF) != 0) {
    goto LABEL_14;
  }
  CoreML::validateDescriptionsContainFeatureWithTypes<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>((uint64_t)&v38, (uint64_t)(v4 + 5), 1, v37);
  int v10 = (int)v38;
  int v41 = v38;
  if (SHIBYTE(v43) < 0)
  {
    operator delete((void *)__p);
    int v10 = (int)v41;
  }
  long long __p = v39;
  uint64_t v43 = v40;
  if ((v10 & 0xFFFFFFEF) != 0)
  {
LABEL_14:
    *(void *)a1 = v41;
    *(_OWORD *)(a1 + 8) = __p;
    *(void *)(a1 + 24) = v43;
    long long __p = 0uLL;
    uint64_t v43 = 0;
    goto LABEL_15;
  }
  uint64_t v11 = *(void *)(v4[4] + 8);
  uint64_t v12 = *(uint64_t **)(*(void *)(v4[7] + 8) + 32);
  if (!v12) {
    uint64_t v12 = &CoreML::Specification::_FeatureType_default_instance_;
  }
  int v13 = *((_DWORD *)v12 + 9);
  uint64_t v14 = *(uint64_t **)(v11 + 32);
  if (!v14) {
    uint64_t v14 = &CoreML::Specification::_FeatureType_default_instance_;
  }
  if (v13 == *((_DWORD *)v14 + 9))
  {
    if (v13 != 5) {
      goto LABEL_27;
    }
    uint64_t v15 = v14[3];
    if (*(_DWORD *)(v15 + 16) == 1)
    {
      uint64_t v16 = v12[3];
      if (*(_DWORD *)(v16 + 16) == 1
        && *(void *)(*(void *)(v15 + 24) + 8) == *(void *)(*(void *)(v16 + 24) + 8))
      {
LABEL_27:
        uint64_t v38 = *(void **)(v4[4] + 8);
        *(void *)&long long v39 = &v41;
        *((void *)&v39 + 1) = a2;
        if (*(_DWORD *)(a2 + 44) == 601)
        {
          uint64_t v17 = *(uint64_t **)(a2 + 32);
        }
        else
        {
          CoreML::Specification::protobuf_Imputer_2eproto::InitDefaults(v9);
          uint64_t v17 = &CoreML::Specification::_Imputer_default_instance_;
        }
        switch(*((_DWORD *)v17 + 9))
        {
          case 0:
            std::string::basic_string[abi:ne180100]<0>(&v34, "Imputer parameter must be set.");
            *(void *)a1 = 13;
            std::operator+<char>();
            goto LABEL_39;
          case 1:
            v44[0] = 0x500000002;
            std::set<CoreML::Specification::FeatureType::TypeCase>::set[abi:ne180100](&v34, (int *)v44, 2);
            int v31 = 11;
            std::set<CoreML::Specification::Imputer::ReplaceValueCase>::set[abi:ne180100](&v32, &v31, 1);
            CoreML::validate<(MLModelType)601>(CoreML::Specification::Model const&)::$_0::operator()((unint64_t *)&v38, v35, (uint64_t)&v32);
            goto LABEL_44;
          case 2:
            LODWORD(v44[0]) = 1;
            std::set<CoreML::Specification::FeatureType::TypeCase>::set[abi:ne180100](&v34, (int *)v44, 1);
            int v31 = 12;
            std::set<CoreML::Specification::Imputer::ReplaceValueCase>::set[abi:ne180100](&v32, &v31, 1);
            CoreML::validate<(MLModelType)601>(CoreML::Specification::Model const&)::$_0::operator()((unint64_t *)&v38, v35, (uint64_t)&v32);
            goto LABEL_44;
          case 3:
            LODWORD(v44[0]) = 3;
            std::set<CoreML::Specification::FeatureType::TypeCase>::set[abi:ne180100](&v34, (int *)v44, 1);
            int v31 = 13;
            std::set<CoreML::Specification::Imputer::ReplaceValueCase>::set[abi:ne180100](&v32, &v31, 1);
            CoreML::validate<(MLModelType)601>(CoreML::Specification::Model const&)::$_0::operator()((unint64_t *)&v38, v35, (uint64_t)&v32);
            goto LABEL_44;
          case 4:
            LODWORD(v44[0]) = 5;
            std::set<CoreML::Specification::FeatureType::TypeCase>::set[abi:ne180100](&v34, (int *)v44, 1);
            int v31 = 11;
            std::set<CoreML::Specification::Imputer::ReplaceValueCase>::set[abi:ne180100](&v32, &v31, 1);
            char v19 = CoreML::validate<(MLModelType)601>(CoreML::Specification::Model const&)::$_0::operator()((unint64_t *)&v38, v35, (uint64_t)&v32);
            std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy(v33[0]);
            std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy(v35);
            if ((v19 & 1) == 0) {
              goto LABEL_14;
            }
            uint64_t v21 = *(uint64_t **)(v11 + 32);
            if (!v21) {
              uint64_t v21 = &CoreML::Specification::_FeatureType_default_instance_;
            }
            if (*((_DWORD *)v21 + 9) == 5)
            {
              int v22 = (uint64_t *)v21[3];
            }
            else
            {
              unint64_t inited = CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults((CoreML::Specification::protobuf_FeatureTypes_2eproto *)inited);
              int v22 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
            }
            uint64_t v27 = *(void *)(v22[3] + 8);
            if (*((_DWORD *)v17 + 9) == 4)
            {
              int v28 = (uint64_t *)v17[2];
            }
            else
            {
              CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults((CoreML::Specification::protobuf_DataStructures_2eproto *)inited);
              int v28 = &CoreML::Specification::_DoubleVector_default_instance_;
            }
            if (v27 == *((_DWORD *)v28 + 4)) {
              goto LABEL_14;
            }
            goto LABEL_63;
          case 5:
            LODWORD(v44[0]) = 5;
            std::set<CoreML::Specification::FeatureType::TypeCase>::set[abi:ne180100](&v34, (int *)v44, 1);
            int v31 = 12;
            std::set<CoreML::Specification::Imputer::ReplaceValueCase>::set[abi:ne180100](&v32, &v31, 1);
            char v23 = CoreML::validate<(MLModelType)601>(CoreML::Specification::Model const&)::$_0::operator()((unint64_t *)&v38, v35, (uint64_t)&v32);
            std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy(v33[0]);
            std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy(v35);
            if ((v23 & 1) == 0) {
              goto LABEL_14;
            }
            uint64_t v25 = *(uint64_t **)(v11 + 32);
            if (!v25) {
              uint64_t v25 = &CoreML::Specification::_FeatureType_default_instance_;
            }
            if (*((_DWORD *)v25 + 9) == 5)
            {
              char v26 = (uint64_t *)v25[3];
            }
            else
            {
              uint64_t v24 = CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults((CoreML::Specification::protobuf_FeatureTypes_2eproto *)v24);
              char v26 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
            }
            uint64_t v29 = *(void *)(v26[3] + 8);
            if (*((_DWORD *)v17 + 9) == 5)
            {
              char v30 = (uint64_t *)v17[2];
            }
            else
            {
              CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults((CoreML::Specification::protobuf_DataStructures_2eproto *)v24);
              char v30 = &CoreML::Specification::_Int64Vector_default_instance_;
            }
            if (v29 == *((_DWORD *)v30 + 4)) {
              goto LABEL_14;
            }
LABEL_63:
            std::string::basic_string[abi:ne180100]<0>(&v34, "Shape of imputed array value does not match shape of input array.");
            *(void *)a1 = 13;
            std::operator+<char>();
LABEL_39:
            if ((v36 & 0x80000000) == 0) {
              goto LABEL_15;
            }
            uint64_t v18 = v34;
            break;
          case 6:
          case 7:
            LODWORD(v44[0]) = 6;
            std::set<CoreML::Specification::FeatureType::TypeCase>::set[abi:ne180100](&v34, (int *)v44, 1);
            v33[0] = 0;
            v33[1] = 0;
            long long v32 = (uint64_t *)v33;
            CoreML::validate<(MLModelType)601>(CoreML::Specification::Model const&)::$_0::operator()((unint64_t *)&v38, v35, (uint64_t)&v32);
LABEL_44:
            std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy(v33[0]);
            std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy(v35);
            goto LABEL_14;
          default:
            goto LABEL_14;
        }
        goto LABEL_32;
      }
      std::string::basic_string[abi:ne180100]<0>(&v38, "Shape of output array does not match shape of input array.");
      *(void *)a1 = 13;
      std::operator+<char>();
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v38, "Only 1 dimensional arrays input features are supported by the imputer.");
      *(void *)a1 = 13;
      std::operator+<char>();
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v38, "Type of input feature does not match the output type feature.");
    *(void *)a1 = 13;
    std::operator+<char>();
  }
  if ((SHIBYTE(v39) & 0x80000000) == 0) {
    goto LABEL_15;
  }
  uint64_t v18 = (uint64_t *)v38;
LABEL_32:
  operator delete(v18);
LABEL_15:
  operator delete(v7);
  if (SHIBYTE(v43) < 0) {
    operator delete((void *)__p);
  }
}

void sub_19EB3A7A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  operator delete(v35);
  if (a35 < 0) {
    operator delete(a30);
  }
  _Unwind_Resume(a1);
}

uint64_t **std::set<CoreML::Specification::FeatureType::TypeCase>::set[abi:ne180100](uint64_t **a1, int *a2, uint64_t a3)
{
  a1[1] = 0;
  int v4 = (uint64_t *)(a1 + 1);
  a1[2] = 0;
  *a1 = (uint64_t *)(a1 + 1);
  if (a3)
  {
    int v5 = a2;
    int v6 = 0;
    uint64_t v7 = &a2[a3];
    int v8 = a1 + 1;
    while (1)
    {
      long long v9 = v4;
      if (v8 == (uint64_t **)v4) {
        goto LABEL_9;
      }
      int v10 = v6;
      uint64_t v11 = v4;
      if (v6)
      {
        do
        {
          long long v9 = v10;
          int v10 = (uint64_t *)v10[1];
        }
        while (v10);
      }
      else
      {
        do
        {
          long long v9 = (uint64_t *)v11[2];
          BOOL v12 = *v9 == (void)v11;
          uint64_t v11 = v9;
        }
        while (v12);
      }
      int v13 = *v5;
      if (*((_DWORD *)v9 + 7) < *v5)
      {
LABEL_9:
        uint64_t v14 = v6 ? v9 : v4;
        uint64_t v15 = v6 ? v9 + 1 : v4;
      }
      else
      {
        uint64_t v14 = v4;
        uint64_t v15 = v4;
        if (v6)
        {
          uint64_t v15 = v4;
          while (1)
          {
            while (1)
            {
              uint64_t v14 = v6;
              int v18 = *((_DWORD *)v6 + 7);
              if (v13 >= v18) {
                break;
              }
              int v6 = (uint64_t *)*v14;
              uint64_t v15 = v14;
              if (!*v14) {
                goto LABEL_16;
              }
            }
            if (v18 >= v13) {
              break;
            }
            uint64_t v15 = v14 + 1;
            int v6 = (uint64_t *)v14[1];
            if (!v6) {
              goto LABEL_16;
            }
          }
        }
      }
      if (!*v15)
      {
LABEL_16:
        uint64_t v16 = operator new(0x20uLL);
        v16[7] = *v5;
        *(void *)uint64_t v16 = 0;
        *((void *)v16 + 1) = 0;
        *((void *)v16 + 2) = v14;
        *uint64_t v15 = (uint64_t)v16;
        uint64_t v17 = (uint64_t *)**a1;
        if (v17)
        {
          *a1 = v17;
          uint64_t v16 = (_DWORD *)*v15;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], (uint64_t *)v16);
        a1[2] = (uint64_t *)((char *)a1[2] + 1);
      }
      if (++v5 == v7) {
        break;
      }
      int v8 = (uint64_t **)*a1;
      int v6 = a1[1];
    }
  }
  return a1;
}

void sub_19EB3AA14(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

uint64_t **std::set<CoreML::Specification::Imputer::ReplaceValueCase>::set[abi:ne180100](uint64_t **a1, int *a2, uint64_t a3)
{
  a1[1] = 0;
  int v4 = (uint64_t *)(a1 + 1);
  a1[2] = 0;
  *a1 = (uint64_t *)(a1 + 1);
  if (a3)
  {
    int v5 = a2;
    int v6 = 0;
    uint64_t v7 = &a2[a3];
    int v8 = a1 + 1;
    while (1)
    {
      long long v9 = v4;
      if (v8 == (uint64_t **)v4) {
        goto LABEL_9;
      }
      int v10 = v6;
      uint64_t v11 = v4;
      if (v6)
      {
        do
        {
          long long v9 = v10;
          int v10 = (uint64_t *)v10[1];
        }
        while (v10);
      }
      else
      {
        do
        {
          long long v9 = (uint64_t *)v11[2];
          BOOL v12 = *v9 == (void)v11;
          uint64_t v11 = v9;
        }
        while (v12);
      }
      int v13 = *v5;
      if (*((_DWORD *)v9 + 7) < *v5)
      {
LABEL_9:
        uint64_t v14 = v6 ? v9 : v4;
        uint64_t v15 = v6 ? v9 + 1 : v4;
      }
      else
      {
        uint64_t v14 = v4;
        uint64_t v15 = v4;
        if (v6)
        {
          uint64_t v15 = v4;
          while (1)
          {
            while (1)
            {
              uint64_t v14 = v6;
              int v18 = *((_DWORD *)v6 + 7);
              if (v13 >= v18) {
                break;
              }
              int v6 = (uint64_t *)*v14;
              uint64_t v15 = v14;
              if (!*v14) {
                goto LABEL_16;
              }
            }
            if (v18 >= v13) {
              break;
            }
            uint64_t v15 = v14 + 1;
            int v6 = (uint64_t *)v14[1];
            if (!v6) {
              goto LABEL_16;
            }
          }
        }
      }
      if (!*v15)
      {
LABEL_16:
        uint64_t v16 = operator new(0x20uLL);
        v16[7] = *v5;
        *(void *)uint64_t v16 = 0;
        *((void *)v16 + 1) = 0;
        *((void *)v16 + 2) = v14;
        *uint64_t v15 = (uint64_t)v16;
        uint64_t v17 = (uint64_t *)**a1;
        if (v17)
        {
          *a1 = v17;
          uint64_t v16 = (_DWORD *)*v15;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], (uint64_t *)v16);
        a1[2] = (uint64_t *)((char *)a1[2] + 1);
      }
      if (++v5 == v7) {
        break;
      }
      int v8 = (uint64_t **)*a1;
      int v6 = a1[1];
    }
  }
  return a1;
}

void sub_19EB3AB88(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

uint64_t CoreML::validate<(MLModelType)601>(CoreML::Specification::Model const&)::$_0::operator()(unint64_t *inited, uint64_t *a2, uint64_t a3)
{
  int v3 = inited;
  int v4 = *(uint64_t **)(*inited + 32);
  if (!v4) {
    int v4 = &CoreML::Specification::_FeatureType_default_instance_;
  }
  if (!a2)
  {
LABEL_9:
    std::operator+<char>();
    int v8 = std::string::append(&v25, "\" is not compatible with given imputed value type.");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    std::string::size_type v27 = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)long long __p = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    uint64_t v28 = 13;
    std::operator+<char>();
    unint64_t v10 = v3[1];
    *(void *)unint64_t v10 = v28;
    unint64_t v11 = v10 + 8;
    if (*(char *)(v10 + 31) < 0) {
      operator delete(*(void **)v11);
    }
    long long v12 = v29;
    *(void *)(v11 + 16) = v30;
    *(_OWORD *)unint64_t v11 = v12;
    HIBYTE(v3CoreML::Specification::MILSpec::Program::New(this, 0) = 0;
    LOBYTE(v29) = 0;
    if (SHIBYTE(v27) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    {
      int v13 = (void *)v25.__r_.__value_.__r.__words[0];
      goto LABEL_15;
    }
    return 0;
  }
  int v6 = *((_DWORD *)v4 + 9);
  while (1)
  {
    int v7 = *((_DWORD *)a2 + 7);
    if (v6 >= v7) {
      break;
    }
LABEL_8:
    a2 = (uint64_t *)*a2;
    if (!a2) {
      goto LABEL_9;
    }
  }
  if (v7 < v6)
  {
    ++a2;
    goto LABEL_8;
  }
  unint64_t v15 = inited[2];
  if (*(_DWORD *)(v15 + 44) == 601)
  {
    uint64_t v16 = *(uint64_t **)(v15 + 32);
  }
  else
  {
    unint64_t inited = CoreML::Specification::protobuf_Imputer_2eproto::InitDefaults((CoreML::Specification::protobuf_Imputer_2eproto *)inited);
    uint64_t v16 = &CoreML::Specification::_Imputer_default_instance_;
  }
  if (*((_DWORD *)v16 + 10))
  {
    unint64_t v17 = v3[2];
    if (*(_DWORD *)(v17 + 44) == 601)
    {
      int v18 = *(uint64_t **)(v17 + 32);
    }
    else
    {
      CoreML::Specification::protobuf_Imputer_2eproto::InitDefaults((CoreML::Specification::protobuf_Imputer_2eproto *)inited);
      int v18 = &CoreML::Specification::_Imputer_default_instance_;
    }
    char v19 = *(uint64_t **)(a3 + 8);
    if (v19)
    {
      int v20 = *((_DWORD *)v18 + 10);
      do
      {
        int v21 = *((_DWORD *)v19 + 7);
        if (v20 >= v21)
        {
          if (v21 >= v20) {
            return 1;
          }
          ++v19;
        }
        char v19 = (uint64_t *)*v19;
      }
      while (v19);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "Type of given replace value not compatible with input feature type.");
    uint64_t v28 = 13;
    std::operator+<char>();
    unint64_t v22 = v3[1];
    *(void *)unint64_t v22 = v28;
    unint64_t v23 = v22 + 8;
    if (*(char *)(v22 + 31) < 0) {
      operator delete(*(void **)v23);
    }
    long long v24 = v29;
    *(void *)(v23 + 16) = v30;
    *(_OWORD *)unint64_t v23 = v24;
    HIBYTE(v3CoreML::Specification::MILSpec::Program::New(this, 0) = 0;
    LOBYTE(v29) = 0;
    if (SHIBYTE(v27) < 0)
    {
      int v13 = __p[0];
LABEL_15:
      operator delete(v13);
    }
    return 0;
  }
  return 1;
}

void sub_19EB3ADCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish::GetCachedSize(CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish *this)
{
  return *((unsigned int *)this + 4);
}

uint64_t CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish::ByteSizeLong(CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish *this)
{
  *((_DWORD *)this + 4) = 0;
  return 0;
}

uint64_t CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish::MergePartialFromCodedStream(CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish *this, char **a2, unsigned int a3)
{
  do
  {
    int v4 = *a2;
    if (*a2 >= a2[1])
    {
      LODWORD(TagFallback) = 0;
    }
    else
    {
      unint64_t TagFallback = *v4;
      if (*v4 >= 1)
      {
        *a2 = v4 + 1;
        goto LABEL_6;
      }
    }
    unint64_t TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback((google::protobuf::io::CodedInputStream *)a2, TagFallback);
LABEL_6:
    if (TagFallback) {
      BOOL v6 = (TagFallback & 7) == 4;
    }
    else {
      BOOL v6 = 1;
    }
    uint64_t v7 = v6;
  }
  while (!v6
       && (google::protobuf::internal::WireFormatLite::SkipField((google::protobuf::internal::WireFormatLite *)a2, (google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) != 0);
  return v7;
}

std::string *CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish::CheckTypeAndMergeFrom(std::string *this, const google::protobuf::MessageLite *a2)
{
  uint64_t v2 = *((void *)a2 + 1);
  if (v2) {
    return google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&this->__r_.__value_.__l.__size_, v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  return this;
}

uint64_t CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish::IsInitialized(CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish *this)
{
  return 1;
}

void CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish::New(CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish *this, google::protobuf::Arena *a2)
{
}

void sub_19EB3AF20(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish *CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish::SoundAnalysisPreprocessing_Vggish(CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish *this)
{
  *(void *)this = &unk_1EF0CF440;
  *((void *)this + 1) = 0;
  if (this != (CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish *)&CoreML::Specification::CoreMLModels::_SoundAnalysisPreprocessing_Vggish_default_instance_) {
    CoreML::Specification::CoreMLModels::protobuf_SoundAnalysisPreprocessing_2eproto::InitDefaults(this);
  }
  *((_DWORD *)this + 4) = 0;
  return this;
}

void sub_19EB3AFA4(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  if (a2)
  {
    int v3 = result;
    double result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *double result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish>;
    int v4 = (unint64_t *)(v3 + 4);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing::GetCachedSize(CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *this)
{
  return *((unsigned int *)this + 6);
}

uint64_t CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  if (*(_DWORD *)(this + 28) == 20) {
    return google::protobuf::internal::WireFormatLite::WriteMessage((google::protobuf::internal::WireFormatLite *)0x14, *(void *)(this + 16), a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing::ByteSizeLong(CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *this)
{
  if (*((_DWORD *)this + 7) == 20)
  {
    *(_DWORD *)(*((void *)this + 2) + 16) = 0;
    uint64_t v1 = 3;
  }
  else
  {
    uint64_t v1 = 0;
  }
  *((_DWORD *)this + 6) = v1;
  return v1;
}

uint64_t CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing::MergePartialFromCodedStream(CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      unint64_t v5 = *(unsigned __int8 **)a2;
      unint64_t v6 = *((void *)a2 + 1);
      if (*(void *)a2 < v6) {
        break;
      }
      LODWORD(v8) = 0;
LABEL_21:
      unsigned int TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v8);
      unint64_t v9 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x3FFF) << 32);
      if ((v9 & 0x100000000) == 0) {
        goto LABEL_22;
      }
LABEL_8:
      if (v9 != 162 || (v9 & 0xFFFFFFF8) != 0xA0) {
        goto LABEL_22;
      }
      if (*((_DWORD *)this + 7) != 20)
      {
        *((_DWORD *)this + 7) = 20;
        operator new();
      }
      unint64_t v11 = *(char **)a2;
      if (*(void *)a2 >= *((void *)a2 + 1) || *v11 < 0)
      {
        int VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (VarintSizeAsIntFallback < 0) {
          return 0;
        }
      }
      else
      {
        int VarintSizeAsIntFallback = *v11;
        *(void *)a2 = v11 + 1;
      }
      int v13 = (CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish *)google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
      int v15 = *((_DWORD *)a2 + 13);
      BOOL v16 = __OFSUB__(v15--, 1);
      *((_DWORD *)a2 + 13) = v15;
      if (v15 < 0 == v16)
      {
        int v17 = (int)v13;
        uint64_t result = CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish::MergePartialFromCodedStream(v13, (char **)a2, v14);
        if (!result) {
          return result;
        }
        if (google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v17)) {
          continue;
        }
      }
      return 0;
    }
    uint64_t v7 = v5 + 1;
    uint64_t v8 = *v5;
    if ((char)*v5 < 1)
    {
      if ((unint64_t)v7 < v6)
      {
        int v10 = *v7;
        if ((v8 & ~v10) >= 0x80)
        {
          *(void *)a2 = v5 + 2;
          unint64_t v9 = (v8 + (v10 << 7) - 128) | 0x100000000;
          goto LABEL_8;
        }
      }
      goto LABEL_21;
    }
    *(void *)a2 = v7;
    unint64_t v9 = v8 | 0x100000000;
    if ((v9 & 0x100000000) != 0) {
      goto LABEL_8;
    }
LABEL_22:
    if (!v9 || (v9 & 7) == 4) {
      return 1;
    }
    if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v9, a3) & 1) == 0) {
      return 0;
    }
  }
}

void sub_19EB3B238(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

std::string *CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing::MergeFrom(std::string *this, const CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *a2)
{
  int v3 = this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    this = google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  if (*((_DWORD *)a2 + 7) == 20)
  {
    if (HIDWORD(v3[1].__r_.__value_.__r.__words[0]) != 20)
    {
      HIDWORD(v3[1].__r_.__value_.__r.__words[0]) = 20;
      operator new();
    }
    uint64_t v5 = *(void *)(*((void *)a2 + 2) + 8);
    if (v5)
    {
      unint64_t v6 = (unint64_t *)(v3->__r_.__value_.__r.__words[2] + 8);
      return google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v6, v5 & 0xFFFFFFFFFFFFFFFELL);
    }
  }
  return this;
}

void sub_19EB3B33C(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing::IsInitialized(CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *this)
{
  return 1;
}

uint64_t CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing::Clear(uint64_t this)
{
  uint64_t v1 = this;
  if (*(_DWORD *)(this + 28) == 20)
  {
    this = *(void *)(this + 16);
    if (this) {
      this = (*(uint64_t (**)(uint64_t))(*(void *)this + 8))(this);
    }
  }
  *(_DWORD *)(v1 + 28) = 0;
  return this;
}

void CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing::New(CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *this, google::protobuf::Arena *a2)
{
}

void sub_19EB3B418(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing::SoundAnalysisPreprocessing(CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *this)
{
  *(void *)this = &unk_1EF0CF310;
  *((void *)this + 1) = 0;
  if (this != (CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *)&CoreML::Specification::CoreMLModels::_SoundAnalysisPreprocessing_default_instance_) {
    CoreML::Specification::CoreMLModels::protobuf_SoundAnalysisPreprocessing_2eproto::InitDefaults(this);
  }
  *((void *)this + 3) = 0;
  return this;
}

void sub_19EB3B49C(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::Own<CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  if (a2)
  {
    int v3 = result;
    uint64_t result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *uint64_t result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_delete_object<CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing>;
    uint64_t v4 = (unint64_t *)(v3 + 4);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_delete_object<CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing::New(CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *this)
{
}

void *CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.CoreMLModels.SoundAnalysisPreprocessing");
}

void CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing::~SoundAnalysisPreprocessing(CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *this)
{
  CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing::~SoundAnalysisPreprocessing(this);

  JUMPOUT(0x19F3C1920);
}

{
  int v2;
  uint64_t v3;

  *(void *)this = &unk_1EF0CF310;
  uint64_t v2 = *((_DWORD *)this + 7);
  if (v2)
  {
    if (v2 == 20)
    {
      int v3 = *((void *)this + 2);
      if (v3) {
        (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
      }
    }
    *((_DWORD *)this + 7) = 0;
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

void CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish::New(CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish *this)
{
}

void *CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.CoreMLModels.SoundAnalysisPreprocessing.Vggish");
}

void CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish::~SoundAnalysisPreprocessing_Vggish(CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish *this)
{
  *(void *)this = &unk_1EF0CF440;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);

  JUMPOUT(0x19F3C1920);
}

{
  *(void *)this = &unk_1EF0CF440;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

void CoreML::validate<(MLModelType)560>(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16)) {
    uint64_t v4 = *(uint64_t **)(a2 + 16);
  }
  else {
    uint64_t v4 = &CoreML::Specification::_ModelDescription_default_instance_;
  }
  CoreML::Result::Result((CoreML::Result *)&v50);
  int v5 = *(_DWORD *)(a2 + 24);
  LODWORD(v46[0]) = 0;
  CoreML::validateModelDescription((uint64_t)&v48, (uint64_t)v4, v5, (char *)v46);
  int data = (int)v48.__r_.__value_.__l.__data_;
  std::string::size_type v50 = v48.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v52) < 0)
  {
    operator delete((void *)__p);
    int data = v50;
  }
  long long __p = *(_OWORD *)&v48.__r_.__value_.__r.__words[1];
  uint64_t v52 = v49;
  if ((data & 0xFFFFFFEF) != 0)
  {
    *(void *)a1 = v50;
    *(_OWORD *)(a1 + 8) = __p;
    *(void *)(a1 + 24) = v52;
    return;
  }
  if (*(_DWORD *)(a2 + 44) == 560)
  {
    uint64_t v8 = *(uint64_t **)(a2 + 32);
  }
  else
  {
    CoreML::Specification::protobuf_ClassConfidenceThresholding_2eproto::InitDefaults(v6);
    uint64_t v8 = &CoreML::Specification::_ClassConfidenceThresholding_default_instance_;
  }
  memset(&v48, 0, sizeof(v48));
  unsigned int v9 = *((_DWORD *)v8 + 6);
  if (!v9) {
    goto LABEL_74;
  }
  uint64_t v10 = v8[4];
  unint64_t v11 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)&v48, *((_DWORD *)v8 + 6));
  long long v12 = (const CoreML::Specification::PrecisionRecallCurve **)(v10 + 8);
  int v13 = (_DWORD *)v48.__r_.__value_.__r.__words[2];
  int v14 = v48.__r_.__value_.__r.__words[1];
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<CoreML::Specification::PrecisionRecallCurve>::TypeHandler>(&v48, (std::string **)v11, v12, v9, *(_DWORD *)v48.__r_.__value_.__r.__words[2] - LODWORD(v48.__r_.__value_.__r.__words[1]));
  uint64_t v15 = v14 + v9;
  LODWORD(v48.__r_.__value_.__r.__words[1]) = v15;
  if (*v13 < (int)v15) {
    _DWORD *v13 = v15;
  }
  if ((int)v15 >= 1)
  {
    uint64_t v16 = 0;
    while (2)
    {
      int v17 = *(void **)&v13[2 * v16 + 2];
      if (v17[2]) {
        int v18 = (uint64_t *)v17[2];
      }
      else {
        int v18 = &CoreML::Specification::_FloatVector_default_instance_;
      }
      int v19 = *((_DWORD *)v18 + 4);
      if (v17[3]) {
        int v20 = (uint64_t *)v17[3];
      }
      else {
        int v20 = &CoreML::Specification::_FloatVector_default_instance_;
      }
      if (v19) {
        BOOL v21 = v19 == *((_DWORD *)v20 + 4);
      }
      else {
        BOOL v21 = 0;
      }
      if (v21)
      {
        unint64_t v23 = (uint64_t *)v17[4];
        unint64_t v22 = (uint64_t *)v17[5];
        if (!v23) {
          unint64_t v23 = &CoreML::Specification::_FloatVector_default_instance_;
        }
        int v24 = *((_DWORD *)v23 + 4);
        if (!v22) {
          unint64_t v22 = &CoreML::Specification::_FloatVector_default_instance_;
        }
        if (v24 && v24 == *((_DWORD *)v22 + 4))
        {
          uint64_t v26 = v18[3];
          uint64_t v27 = v26 + 8;
          BOOL v28 = v26 == 0;
          if (v26) {
            long long v29 = (float *)(v26 + 8);
          }
          else {
            long long v29 = 0;
          }
          uint64_t v30 = (float *)(v27 + 4 * v19);
          if (v28) {
            uint64_t v30 = 0;
          }
          while (v29 != v30)
          {
            if (fabsf(*v29) == INFINITY || *v29 < 0.0)
            {
              std::string::basic_string[abi:ne180100]<0>(v46, "An element of precisionvalues is not a positive number or zero.");
              *(void *)a1 = 13;
              std::operator+<char>();
              goto LABEL_75;
            }
            ++v29;
          }
          uint64_t v31 = v20[3];
          uint64_t v32 = v31 + 8;
          BOOL v33 = v31 == 0;
          if (v31) {
            int v34 = (float *)(v31 + 8);
          }
          else {
            int v34 = 0;
          }
          uint64_t v35 = (float *)(v32 + 4 * v19);
          if (v33) {
            uint64_t v35 = 0;
          }
          while (v34 != v35)
          {
            if (fabsf(*v34) == INFINITY || *v34 < 0.0)
            {
              std::string::basic_string[abi:ne180100]<0>(v46, "An element of precisionconfidencethresholds is not a positive number or zero.");
              *(void *)a1 = 13;
              std::operator+<char>();
              goto LABEL_75;
            }
            ++v34;
          }
          uint64_t v36 = v23[3];
          uint64_t v37 = v36 + 8;
          BOOL v38 = v36 == 0;
          if (v36) {
            long long v39 = (float *)(v36 + 8);
          }
          else {
            long long v39 = 0;
          }
          uint64_t v40 = (float *)(v37 + 4 * v24);
          if (v38) {
            uint64_t v40 = 0;
          }
          while (v39 != v40)
          {
            if (fabsf(*v39) == INFINITY || *v39 < 0.0)
            {
              std::string::basic_string[abi:ne180100]<0>(v46, "An element of recallvalues is not a positive number or zero.");
              *(void *)a1 = 13;
              std::operator+<char>();
              goto LABEL_75;
            }
            ++v39;
          }
          uint64_t v41 = v22[3];
          uint64_t v42 = v41 + 8;
          BOOL v43 = v41 == 0;
          if (v41) {
            unsigned int v44 = (float *)(v41 + 8);
          }
          else {
            unsigned int v44 = 0;
          }
          int v45 = (float *)(v42 + 4 * v24);
          if (v43) {
            int v45 = 0;
          }
          while (v44 != v45)
          {
            if (fabsf(*v44) == INFINITY || *v44 < 0.0)
            {
              std::string::basic_string[abi:ne180100]<0>(v46, "An element of recallconfidencethresholds is not a positive number or zero.");
              *(void *)a1 = 13;
              std::operator+<char>();
              goto LABEL_75;
            }
            ++v44;
          }
          if (++v16 != v15) {
            continue;
          }
          CoreML::Result::Result((CoreML::Result *)a1);
          goto LABEL_77;
        }
      }
      break;
    }
    std::string::basic_string[abi:ne180100]<0>(v46, "Zero length or mismatched precisionRecallCurves components");
    *(void *)a1 = 13;
    std::operator+<char>();
  }
  else
  {
LABEL_74:
    std::string::basic_string[abi:ne180100]<0>(v46, "The ClassConfidenceThresholding model has no precisionRecallCurves.");
    *(void *)a1 = 13;
    std::operator+<char>();
  }
LABEL_75:
  if (v47 < 0) {
    operator delete(v46[0]);
  }
LABEL_77:
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>(&v48);
  if (SHIBYTE(v52) < 0) {
    operator delete((void *)__p);
  }
}

void sub_19EB3BB40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::GLMClassifier_DoubleArray::GetCachedSize(CoreML::Specification::GLMClassifier_DoubleArray *this)
{
  return *((unsigned int *)this + 9);
}

uint64_t CoreML::Specification::GLMClassifier_DoubleArray::SerializeWithCachedSizes(uint64_t this, google::protobuf::io::CodedOutputStream *a2)
{
  if (*(int *)(this + 16) >= 1)
  {
    uint64_t v3 = this;
    if (*((int *)a2 + 4) < 5)
    {
      __src[0] = 10;
      google::protobuf::io::CodedOutputStream::WriteRaw(a2, __src, 1);
      int v4 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(unsigned char *)(*((void *)a2 + 1))++ = 10;
      int v4 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v4;
    }
    unsigned int v5 = *(_DWORD *)(v3 + 32);
    if (v4 < 5)
    {
      google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v5);
    }
    else
    {
      uint64_t v6 = *((void *)a2 + 1);
      if (v5 < 0x80)
      {
        unsigned int v8 = *(_DWORD *)(v3 + 32);
        uint64_t v7 = (unsigned char *)*((void *)a2 + 1);
      }
      else
      {
        uint64_t v7 = (unsigned char *)*((void *)a2 + 1);
        do
        {
          *v7++ = v5 | 0x80;
          unsigned int v8 = v5 >> 7;
          unsigned int v9 = v5 >> 14;
          v5 >>= 7;
        }
        while (v9);
      }
      *uint64_t v7 = v8;
      int v10 = v7 - v6 + 1;
      *((void *)a2 + 1) += v10;
      *((_DWORD *)a2 + 4) -= v10;
    }
    uint64_t v11 = *(void *)(v3 + 24);
    if (v11) {
      long long v12 = (char *)(v11 + 8);
    }
    else {
      long long v12 = 0;
    }
    int v13 = 8 * *(_DWORD *)(v3 + 16);
    return google::protobuf::io::CodedOutputStream::WriteRaw(a2, v12, v13);
  }
  return this;
}

uint64_t CoreML::Specification::GLMClassifier_DoubleArray::ByteSizeLong(CoreML::Specification::GLMClassifier_DoubleArray *this)
{
  uint64_t v1 = *((unsigned int *)this + 4);
  uint64_t v2 = 8 * v1;
  if (v1)
  {
    if ((v2 & 0x80000000) != 0) {
      uint64_t v3 = 11;
    }
    else {
      uint64_t v3 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  uint64_t v4 = v3 + v2;
  *((_DWORD *)this + 8) = v2;
  *((_DWORD *)this + 9) = v4;
  return v4;
}

BOOL CoreML::Specification::GLMClassifier_DoubleArray::MergePartialFromCodedStream(CoreML::Specification::GLMClassifier_DoubleArray *this, char **a2, unsigned int a3)
{
  unsigned int v5 = (unsigned int *)((char *)this + 16);
  do
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v6 = *a2;
          if (*a2 < a2[1]) {
            break;
          }
          LODWORD(v7) = 0;
LABEL_7:
          unsigned int TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback((google::protobuf::io::CodedInputStream *)a2, v7);
          unint64_t v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
          if ((v8 & 0x100000000) != 0) {
            goto LABEL_8;
          }
LABEL_14:
          if (v8) {
            BOOL v12 = (v8 & 7) == 4;
          }
          else {
            BOOL v12 = 1;
          }
          if (v12) {
            return 1;
          }
          if ((google::protobuf::internal::WireFormatLite::SkipField((google::protobuf::internal::WireFormatLite *)a2, (google::protobuf::io::CodedInputStream *)v8, a3) & 1) == 0)return 0; {
        }
          }
        uint64_t v7 = *v6;
        if (*v6 < 1) {
          goto LABEL_7;
        }
        *a2 = v6 + 1;
        unint64_t v8 = v7 | 0x100000000;
        if ((v8 & 0x100000000) == 0) {
          goto LABEL_14;
        }
LABEL_8:
        if ((v8 & 0xFFFFFFF8) != 8) {
          goto LABEL_14;
        }
        if (v8 != 9) {
          break;
        }
        if (!google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<double,(google::protobuf::internal::WireFormatLite::FieldType)1>(10, (unint64_t **)a2, (uint64_t)v5))return 0; {
      }
        }
      if (v8 != 10) {
        goto LABEL_14;
      }
      int v10 = *a2;
      if (*a2 >= a2[1] || *v10 < 0)
      {
        unsigned int VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((google::protobuf::io::CodedInputStream *)a2);
        if ((VarintSizeAsIntFallback & 0x80000000) != 0) {
          return 0;
        }
      }
      else
      {
        unsigned int VarintSizeAsIntFallback = *v10;
        *a2 = v10 + 1;
      }
      if ((VarintSizeAsIntFallback & 7) != 0) {
        return 0;
      }
      int v13 = *((_DWORD *)a2 + 12);
      int v14 = v13 == 0x7FFFFFFF
          ? -1
          : v13 - *((_DWORD *)a2 + 6) + *((_DWORD *)a2 + 11) + *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
      int v15 = *((_DWORD *)a2 + 10);
      int v16 = v15 == 0x7FFFFFFF
          ? -1
          : v15 - *((_DWORD *)a2 + 6) + *((_DWORD *)a2 + 11) + *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
      signed int v17 = *v5;
      unsigned int v18 = VarintSizeAsIntFallback >> 3;
      int v19 = v16 >= v14 ? v14 : v16;
      int v20 = v14 == -1 ? v16 : v19;
      if (v20 >= (uint64_t)VarintSizeAsIntFallback) {
        break;
      }
      if (VarintSizeAsIntFallback >= 8)
      {
        if (v18 <= 1) {
          int v21 = 1;
        }
        else {
          int v21 = VarintSizeAsIntFallback >> 3;
        }
        do
        {
          unint64_t v30 = 0;
          unint64_t v22 = (unint64_t *)*a2;
          if ((int)(*((_DWORD *)a2 + 2) - *a2) < 8)
          {
            BOOL result = google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v30);
            if (!result) {
              return result;
            }
            unint64_t v23 = v30;
            signed int v17 = *v5;
          }
          else
          {
            unint64_t v23 = *v22;
            *a2 = (char *)(v22 + 1);
          }
          if (v17 == *((_DWORD *)this + 5))
          {
            google::protobuf::RepeatedField<double>::Reserve(v5, v17 + 1);
            signed int v17 = *v5;
          }
          uint64_t v24 = *((void *)this + 3) + 8 * v17;
          *((_DWORD *)this + 4) = v17 + 1;
          *(void *)(v24 + 8) = v23;
          ++v17;
          --v21;
        }
        while (v21);
      }
    }
    signed int v26 = v17 + v18;
    if (VarintSizeAsIntFallback > 7)
    {
      google::protobuf::RepeatedField<double>::Reserve(v5, v17 + v18);
      uint64_t v27 = *((void *)this + 3);
      uint64_t v28 = 8 * v26 - 8 * *((int *)this + 4);
      if (v28 >= 1) {
        bzero((void *)(v27 + 8 + 8 * *((int *)this + 4)), 8 * (((unint64_t)v28 >> 3) - ((unint64_t)v28 > 7)) + 8);
      }
    }
    else
    {
      uint64_t v27 = *((void *)this + 3);
    }
    *unsigned int v5 = v26;
    uint64_t v29 = v27 + 8;
    if (!v27) {
      uint64_t v29 = 0;
    }
  }
  while (google::protobuf::io::CodedInputStream::ReadRaw((google::protobuf::io::CodedInputStream *)a2, (char *)(v29 + 8 * v17), VarintSizeAsIntFallback));
  if ((int)*v5 >= 1)
  {
    BOOL result = 0;
    *unsigned int v5 = v17;
    return result;
  }
  return 0;
}

uint64_t CoreML::Specification::GLMClassifier_DoubleArray::IsInitialized(CoreML::Specification::GLMClassifier_DoubleArray *this)
{
  return 1;
}

uint64_t CoreML::Specification::GLMClassifier_DoubleArray::Clear(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  return this;
}

void CoreML::Specification::GLMClassifier_DoubleArray::New(CoreML::Specification::GLMClassifier_DoubleArray *this, google::protobuf::Arena *a2)
{
}

void sub_19EB3C0B0(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}